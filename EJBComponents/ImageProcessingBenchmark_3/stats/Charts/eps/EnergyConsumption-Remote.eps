%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: EnergyConsumption-Remote.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:56:07 p.m.
%%BoundingBox: 0 0 671 526
%%HiResBoundingBox: 0 0 670.3201 525.1200
%%CropBox: 0 0 670.3201 525.1200
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -525.12 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 525.12 li
670.32 525.12 li
670.32 0 li
cp
clp
0 0 mo
670.32 0 li
670.32 525.121 li
0 525.121 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
59.281 452.281 mo
647.879 452.281 li
59.281 408.48 mo
647.879 408.48 li
59.281 364.559 mo
647.879 364.559 li
59.281 320.762 mo
647.879 320.762 li
59.281 276.84 mo
647.879 276.84 li
59.281 233.039 mo
647.879 233.039 li
59.281 189.121 mo
647.879 189.121 li
59.281 145.32 mo
647.879 145.32 li
59.281 101.52 mo
647.879 101.52 li
59.281 57.602 mo
647.879 57.602 li
.135805 .104005 .108583 0 cmyk
@
59.281 430.32 mo
647.879 430.32 li
59.281 386.52 mo
647.879 386.52 li
59.281 342.602 mo
647.879 342.602 li
59.281 298.801 mo
647.879 298.801 li
59.281 255 mo
647.879 255 li
59.281 211.078 mo
647.879 211.078 li
59.281 167.281 mo
647.879 167.281 li
59.281 123.359 mo
647.879 123.359 li
59.281 79.559 mo
647.879 79.559 li
59.281 35.641 mo
647.879 35.641 li
.326574 .281529 .277562 0 cmyk
@
96 35.641 mo
96 474.238 li
169.559 35.641 mo
169.559 474.238 li
243.238 35.641 mo
243.238 474.238 li
316.801 35.641 mo
316.801 474.238 li
390.359 35.641 mo
390.359 474.238 li
463.922 35.641 mo
463.922 474.238 li
537.48 35.641 mo
537.48 474.238 li
611.16 35.641 mo
611.16 474.238 li
.175235 .144778 .143648 0 cmyk
@
59.281 35.641 mo
59.281 474.238 li
132.84 35.641 mo
132.84 474.238 li
206.398 35.641 mo
206.398 474.238 li
279.961 35.641 mo
279.961 474.238 li
353.52 35.641 mo
353.52 474.238 li
427.199 35.641 mo
427.199 474.238 li
500.762 35.641 mo
500.762 474.238 li
574.32 35.641 mo
574.32 474.238 li
647.879 35.641 mo
647.879 474.238 li
.326574 .281529 .277562 0 cmyk
@
39.121 464.879 mo
46.199 464.879 li
46.199 481.922 li
39.121 481.922 li
cp
0 0 0 0 cmyk
ef
39.121 421.078 mo
46.199 421.078 li
46.199 438.121 li
39.121 438.121 li
cp
ef
32.039 377.16 mo
46.199 377.16 li
46.199 394.32 li
32.039 394.32 li
cp
ef
32.039 333.359 mo
46.199 333.359 li
46.199 350.398 li
32.039 350.398 li
cp
ef
32.039 289.441 mo
46.199 289.441 li
46.199 306.601 li
32.039 306.601 li
cp
ef
32.039 245.641 mo
46.199 245.641 li
46.199 262.68 li
32.039 262.68 li
cp
ef
32.039 201.719 mo
46.199 201.719 li
46.199 218.879 li
32.039 218.879 li
cp
ef
32.039 157.922 mo
46.199 157.922 li
46.199 174.961 li
32.039 174.961 li
cp
ef
32.039 114.121 mo
46.199 114.121 li
46.199 131.16 li
32.039 131.16 li
cp
ef
32.039 70.199 mo
46.199 70.199 li
46.199 87.359 li
32.039 87.359 li
cp
ef
32.039 26.398 mo
46.199 26.398 li
46.199 43.441 li
32.039 43.441 li
cp
ef
.96 lw
59.281 474.238 mo
647.879 474.238 li
.369879 .299321 .304356 .000976577 cmyk
@
59.281 474.238 mo
59.281 478.68 li
132.84 474.238 mo
132.84 478.68 li
206.398 474.238 mo
206.398 478.68 li
279.961 474.238 mo
279.961 478.68 li
353.52 474.238 mo
353.52 478.68 li
427.199 474.238 mo
427.199 478.68 li
500.762 474.238 mo
500.762 478.68 li
574.32 474.238 mo
574.32 478.68 li
647.879 474.238 mo
647.879 478.68 li
@
gsave
59.16 35.641 mo
648.601 35.641 li
648.601 474.84 li
59.16 474.84 li
cp
clp
1 lc
59.281 328.68 mo
132.84 334.32 li
206.398 341.16 li
279.961 354.238 li
353.52 344.52 li
427.199 343.559 li
500.762 351.719 li
574.32 363.121 li
647.879 345.359 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
54.09 323.488 mo
64.051 323.488 li
64.051 333.449 li
54.09 333.449 li
cp
.62829 .284672 0 0 cmyk
@
127.648 329.25 mo
137.609 329.25 li
137.609 339.211 li
127.648 339.211 li
cp
@
201.211 335.969 mo
211.172 335.969 li
211.172 345.93 li
201.211 345.93 li
cp
@
274.891 349.051 mo
284.852 349.051 li
284.852 359.012 li
274.891 359.012 li
cp
@
348.449 339.328 mo
358.41 339.328 li
358.41 349.289 li
348.449 349.289 li
cp
@
422.012 338.488 mo
431.969 338.488 li
431.969 348.449 li
422.012 348.449 li
cp
@
495.57 346.531 mo
505.531 346.531 li
505.531 356.488 li
495.57 356.488 li
cp
@
569.129 357.93 mo
579.09 357.93 li
579.09 367.891 li
569.129 367.891 li
cp
@
642.809 340.289 mo
652.77 340.289 li
652.77 350.25 li
642.809 350.25 li
cp
@
gsave
59.16 35.641 mo
648.601 35.641 li
648.601 474.84 li
59.16 474.84 li
cp
clp
.96 lw
1 lc
59.281 314.398 mo
132.84 345.961 li
206.398 363.121 li
279.961 380.879 li
353.52 358.32 li
427.199 381.359 li
500.762 374.879 li
574.32 381.84 li
647.879 380.039 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
54.09 309.211 mo
64.051 309.211 li
64.051 319.172 li
54.09 319.172 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
127.648 340.891 mo
137.609 340.891 li
137.609 350.852 li
127.648 350.852 li
cp
@
201.211 357.93 mo
211.172 357.93 li
211.172 367.891 li
201.211 367.891 li
cp
@
274.891 375.809 mo
284.852 375.809 li
284.852 385.77 li
274.891 385.77 li
cp
@
348.449 353.129 mo
358.41 353.129 li
358.41 363.09 li
348.449 363.09 li
cp
@
422.012 376.172 mo
431.969 376.172 li
431.969 386.129 li
422.012 386.129 li
cp
@
495.57 369.809 mo
505.531 369.809 li
505.531 379.77 li
495.57 379.77 li
cp
@
569.129 376.77 mo
579.09 376.77 li
579.09 386.731 li
569.129 386.731 li
cp
@
642.809 374.852 mo
652.77 374.852 li
652.77 384.809 li
642.809 384.809 li
cp
@
gsave
59.16 35.641 mo
648.601 35.641 li
648.601 474.84 li
59.16 474.84 li
cp
clp
.96 lw
1 lc
59.281 301.32 mo
132.84 356.762 li
206.398 364.32 li
279.961 383.879 li
353.52 381.84 li
427.199 365.641 li
500.762 373.559 li
574.32 377.879 li
647.879 378.121 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
54.09 296.129 mo
64.051 296.129 li
64.051 306.09 li
54.09 306.09 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
127.648 351.57 mo
137.609 351.57 li
137.609 361.531 li
127.648 361.531 li
cp
@
201.211 359.129 mo
211.172 359.129 li
211.172 369.09 li
201.211 369.09 li
cp
@
274.891 378.691 mo
284.852 378.691 li
284.852 388.648 li
274.891 388.648 li
cp
@
348.449 376.77 mo
358.41 376.77 li
358.41 386.731 li
348.449 386.731 li
cp
@
422.012 360.57 mo
431.969 360.57 li
431.969 370.531 li
422.012 370.531 li
cp
@
495.57 368.371 mo
505.531 368.371 li
505.531 378.328 li
495.57 378.328 li
cp
@
569.129 372.691 mo
579.09 372.691 li
579.09 382.648 li
569.129 382.648 li
cp
@
642.809 373.051 mo
652.77 373.051 li
652.77 383.012 li
642.809 383.012 li
cp
@
gsave
59.16 35.641 mo
648.601 35.641 li
648.601 474.84 li
59.16 474.84 li
cp
clp
.96 lw
1 lc
59.281 309.121 mo
132.84 342.238 li
206.398 357.359 li
279.961 360.48 li
353.52 354.238 li
427.199 369.719 li
500.762 349.68 li
574.32 359.398 li
647.879 376.199 li
0 .993988 1 0 cmyk
@
grestore
54.09 304.051 mo
64.051 304.051 li
64.051 314.012 li
54.09 314.012 li
cp
0 .993988 1 0 cmyk
@
127.648 337.051 mo
137.609 337.051 li
137.609 347.012 li
127.648 347.012 li
cp
@
201.211 352.289 mo
211.172 352.289 li
211.172 362.25 li
201.211 362.25 li
cp
@
274.891 355.289 mo
284.852 355.289 li
284.852 365.25 li
274.891 365.25 li
cp
@
348.449 349.051 mo
358.41 349.051 li
358.41 359.012 li
348.449 359.012 li
cp
@
422.012 364.531 mo
431.969 364.531 li
431.969 374.488 li
422.012 374.488 li
cp
@
495.57 344.609 mo
505.531 344.609 li
505.531 354.57 li
495.57 354.57 li
cp
@
569.129 354.328 mo
579.09 354.328 li
579.09 364.289 li
569.129 364.289 li
cp
@
642.809 371.129 mo
652.77 371.129 li
652.77 381.09 li
642.809 381.09 li
cp
@
gsave
59.16 35.641 mo
648.601 35.641 li
648.601 474.84 li
59.16 474.84 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.281 320.879 mo
132.84 343.199 li
206.398 355.801 li
279.961 376.922 li
353.52 368.762 li
427.199 364.559 li
500.762 367.801 li
574.32 371.039 li
647.879 360.84 li
.62829 .284672 0 0 cmyk
@
grestore
54.09 315.691 mo
64.051 315.691 li
64.051 325.648 li
54.09 325.648 li
cp
.62829 .284672 0 0 cmyk
@
127.648 338.012 mo
137.609 338.012 li
137.609 347.969 li
127.648 347.969 li
cp
@
201.211 350.609 mo
211.172 350.609 li
211.172 360.57 li
201.211 360.57 li
cp
@
274.891 371.852 mo
284.852 371.852 li
284.852 381.809 li
274.891 381.809 li
cp
@
348.449 363.691 mo
358.41 363.691 li
358.41 373.648 li
348.449 373.648 li
cp
@
422.012 359.371 mo
431.969 359.371 li
431.969 369.328 li
422.012 369.328 li
cp
@
495.57 362.73 mo
505.531 362.73 li
505.531 372.691 li
495.57 372.691 li
cp
@
569.129 365.969 mo
579.09 365.969 li
579.09 375.93 li
569.129 375.93 li
cp
@
642.809 355.648 mo
652.77 355.648 li
652.77 365.609 li
642.809 365.609 li
cp
@
gsave
59.16 35.641 mo
648.601 35.641 li
648.601 474.84 li
59.16 474.84 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.281 324.961 mo
132.84 351.48 li
206.398 371.641 li
279.961 381 li
353.52 367.441 li
427.199 375.359 li
500.762 363.121 li
574.32 369.238 li
647.879 361.68 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
54.57 320.25 mo
63.57 320.25 li
63.57 329.25 li
54.57 329.25 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
128.129 346.891 mo
137.129 346.891 li
137.129 355.891 li
128.129 355.891 li
cp
@
201.691 367.051 mo
210.691 367.051 li
210.691 376.051 li
201.691 376.051 li
cp
@
275.371 376.41 mo
284.371 376.41 li
284.371 385.41 li
275.371 385.41 li
cp
@
348.93 362.852 mo
357.93 362.852 li
357.93 371.852 li
348.93 371.852 li
cp
@
422.488 370.648 mo
431.488 370.648 li
431.488 379.648 li
422.488 379.648 li
cp
@
496.051 358.41 mo
505.051 358.41 li
505.051 367.41 li
496.051 367.41 li
cp
@
569.609 364.648 mo
578.609 364.648 li
578.609 373.648 li
569.609 373.648 li
cp
@
643.289 356.969 mo
652.289 356.969 li
652.289 365.969 li
643.289 365.969 li
cp
@
gsave
59.16 35.641 mo
648.601 35.641 li
648.601 474.84 li
59.16 474.84 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.281 320.762 mo
132.84 344.762 li
206.398 355.441 li
279.961 384.719 li
353.52 368.16 li
427.199 365.398 li
500.762 358.32 li
574.32 351.84 li
647.879 377.281 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
54.09 315.691 mo
64.051 315.691 li
64.051 325.648 li
54.09 325.648 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
127.648 339.57 mo
137.609 339.57 li
137.609 349.531 li
127.648 349.531 li
cp
@
201.211 350.371 mo
211.172 350.371 li
211.172 360.328 li
201.211 360.328 li
cp
@
274.891 379.531 mo
284.852 379.531 li
284.852 389.488 li
274.891 389.488 li
cp
@
348.449 363.09 mo
358.41 363.09 li
358.41 373.051 li
348.449 373.051 li
cp
@
422.012 360.211 mo
431.969 360.211 li
431.969 370.172 li
422.012 370.172 li
cp
@
495.57 353.129 mo
505.531 353.129 li
505.531 363.09 li
495.57 363.09 li
cp
@
569.129 346.648 mo
579.09 346.648 li
579.09 356.609 li
569.129 356.609 li
cp
@
642.809 372.211 mo
652.77 372.211 li
652.77 382.172 li
642.809 382.172 li
cp
@
gsave
59.16 35.641 mo
648.601 35.641 li
648.601 474.84 li
59.16 474.84 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.281 303.719 mo
132.84 352.801 li
206.398 360.602 li
279.961 369.602 li
353.52 376.68 li
427.199 380.879 li
500.762 358.199 li
574.32 376.199 li
647.879 366 li
0 .993988 1 0 cmyk
@
grestore
54.09 298.531 mo
64.051 298.531 li
64.051 308.488 li
54.09 308.488 li
cp
0 .993988 1 0 cmyk
@
127.648 347.73 mo
137.609 347.73 li
137.609 357.691 li
127.648 357.691 li
cp
@
201.211 355.41 mo
211.172 355.41 li
211.172 365.371 li
201.211 365.371 li
cp
@
274.891 364.531 mo
284.852 364.531 li
284.852 374.488 li
274.891 374.488 li
cp
@
348.449 371.609 mo
358.41 371.609 li
358.41 381.57 li
348.449 381.57 li
cp
@
422.012 375.809 mo
431.969 375.809 li
431.969 385.77 li
422.012 385.77 li
cp
@
495.57 353.012 mo
505.531 353.012 li
505.531 362.969 li
495.57 362.969 li
cp
@
569.129 371.129 mo
579.09 371.129 li
579.09 381.09 li
569.129 381.09 li
cp
@
642.809 360.809 mo
652.77 360.809 li
652.77 370.77 li
642.809 370.77 li
cp
@
39.109 464.859 mo
46.203 464.859 li
46.203 481.949 li
39.109 481.949 li
cp
0 0 0 0 cmyk
ef
45.75 473.816 mo
45.746 474.5 45.695 475.121 45.59 475.684 cv
45.48 476.246 45.301 476.73 45.055 477.133 cv
44.801 477.539 44.473 477.852 44.074 478.07 cv
43.668 478.293 43.176 478.402 42.59 478.402 cv
42.031 478.402 41.559 478.305 41.18 478.105 cv
40.797 477.91 40.492 477.617 40.258 477.23 cv
40.023 476.844 39.855 476.371 39.762 475.805 cv
39.66 475.242 39.613 474.594 39.613 473.859 cv
39.613 473.187 39.668 472.566 39.777 472 cv
39.887 471.437 40.063 470.953 40.313 470.547 cv
40.555 470.145 40.879 469.832 41.285 469.605 cv
41.684 469.387 42.18 469.273 42.77 469.273 cv
43.328 469.273 43.801 469.375 44.184 469.57 cv
44.566 469.773 44.871 470.066 45.105 470.449 cv
45.336 470.84 45.504 471.312 45.602 471.875 cv
45.699 472.437 45.746 473.086 45.75 473.816 cv
cp
44.543 473.898 mo
44.539 473.457 44.523 473.059 44.496 472.707 cv
44.461 472.355 44.414 472.047 44.355 471.777 cv
44.289 471.508 44.211 471.277 44.113 471.082 cv
44.016 470.891 43.898 470.73 43.762 470.602 cv
43.621 470.477 43.461 470.383 43.289 470.324 cv
43.109 470.27 42.914 470.242 42.699 470.238 cv
42.309 470.242 41.992 470.332 41.754 470.516 cv
41.508 470.699 41.316 470.953 41.18 471.27 cv
41.039 471.59 40.945 471.961 40.895 472.391 cv
40.844 472.82 40.82 473.285 40.82 473.777 cv
40.82 474.441 40.852 475.004 40.922 475.465 cv
40.988 475.934 41.098 476.312 41.25 476.602 cv
41.395 476.898 41.586 477.109 41.816 477.238 cv
42.047 477.375 42.328 477.441 42.66 477.437 cv
42.914 477.441 43.137 477.402 43.332 477.316 cv
43.523 477.238 43.691 477.117 43.832 476.961 cv
43.973 476.809 44.086 476.625 44.18 476.41 cv
44.266 476.195 44.34 475.957 44.398 475.695 cv
44.449 475.437 44.488 475.156 44.512 474.852 cv
44.531 474.547 44.539 474.23 44.543 473.898 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.109 421.012 mo
46.203 421.012 li
46.203 438.102 li
39.109 438.102 li
cp
0 0 0 0 cmyk
ef
45.414 431.547 mo
45.414 432.023 45.332 432.445 45.172 432.816 cv
45.012 433.187 44.785 433.5 44.496 433.754 cv
44.199 434.008 43.852 434.203 43.449 434.332 cv
43.043 434.465 42.594 434.527 42.102 434.527 cv
41.824 434.527 41.563 434.508 41.32 434.469 cv
41.07 434.43 40.852 434.383 40.664 434.328 cv
40.469 434.273 40.313 434.219 40.188 434.16 cv
40.063 434.109 39.984 434.066 39.953 434.031 cv
39.918 434 39.895 433.969 39.883 433.941 cv
39.867 433.914 39.852 433.883 39.844 433.84 cv
39.828 433.805 39.82 433.754 39.82 433.691 cv
39.813 433.633 39.813 433.562 39.813 433.48 cv
39.813 433.406 39.816 433.336 39.824 433.273 cv
39.832 433.211 39.844 433.16 39.863 433.121 cv
39.879 433.082 39.898 433.055 39.926 433.035 cv
39.949 433.02 39.98 433.012 40.012 433.008 cv
40.059 433.012 40.129 433.039 40.223 433.094 cv
40.316 433.152 40.445 433.215 40.609 433.281 cv
40.773 433.348 40.973 433.41 41.215 433.469 cv
41.449 433.527 41.734 433.555 42.07 433.555 cv
42.371 433.555 42.652 433.52 42.91 433.445 cv
43.164 433.375 43.387 433.262 43.574 433.105 cv
43.758 432.953 43.902 432.758 44.008 432.52 cv
44.113 432.285 44.164 431.996 44.168 431.656 cv
44.164 431.375 44.121 431.125 44.031 430.906 cv
43.941 430.687 43.805 430.508 43.621 430.363 cv
43.434 430.223 43.199 430.117 42.918 430.043 cv
42.633 429.973 42.293 429.934 41.906 429.934 cv
41.621 429.934 41.383 429.949 41.184 429.977 cv
40.98 430.008 40.793 430.023 40.621 430.02 cv
40.492 430.023 40.398 429.992 40.348 429.93 cv
40.289 429.871 40.262 429.758 40.266 429.586 cv
40.266 425.973 li
40.262 425.824 40.297 425.715 40.371 425.637 cv
40.438 425.566 40.539 425.527 40.676 425.527 cv
44.605 425.527 li
44.641 425.527 44.676 425.539 44.711 425.559 cv
44.742 425.582 44.77 425.613 44.797 425.652 cv
44.816 425.695 44.832 425.746 44.848 425.809 cv
44.855 425.875 44.863 425.953 44.867 426.035 cv
44.863 426.203 44.84 426.328 44.801 426.418 cv
44.754 426.512 44.695 426.559 44.617 426.555 cv
41.445 426.555 li
41.445 429.043 li
41.598 429.023 41.754 429.012 41.918 429.004 cv
42.074 429 42.262 428.996 42.477 428.996 cv
42.961 428.996 43.387 429.059 43.754 429.18 cv
44.117 429.301 44.422 429.473 44.672 429.691 cv
44.914 429.918 45.102 430.184 45.227 430.496 cv
45.352 430.812 45.414 431.164 45.414 431.547 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.012 377.148 mo
46.2 377.148 li
46.2 394.238 li
32.012 394.238 li
cp
0 0 0 0 cmyk
ef
38.375 390.086 mo
38.371 390.176 38.363 390.246 38.352 390.305 cv
38.336 390.367 38.316 390.418 38.297 390.449 cv
38.273 390.488 38.25 390.512 38.219 390.527 cv
38.188 390.543 38.156 390.551 38.129 390.551 cv
33.492 390.551 li
33.457 390.551 33.43 390.543 33.402 390.527 cv
33.375 390.512 33.348 390.488 33.324 390.449 cv
33.297 390.418 33.277 390.367 33.266 390.305 cv
33.25 390.246 33.242 390.176 33.246 390.086 cv
33.242 390.008 33.25 389.934 33.266 389.871 cv
33.277 389.812 33.293 389.766 33.316 389.727 cv
33.332 389.691 33.359 389.66 33.391 389.637 cv
33.422 389.617 33.453 389.609 33.492 389.605 cv
35.344 389.605 li
35.344 382.859 li
33.629 383.879 li
33.539 383.93 33.469 383.957 33.422 383.965 cv
33.367 383.973 33.324 383.965 33.293 383.934 cv
33.258 383.906 33.238 383.855 33.227 383.785 cv
33.215 383.719 33.207 383.633 33.211 383.523 cv
33.207 383.449 33.211 383.383 33.223 383.324 cv
33.227 383.273 33.238 383.227 33.254 383.187 cv
33.266 383.152 33.285 383.121 33.309 383.094 cv
33.332 383.066 33.363 383.039 33.41 383.012 cv
35.453 381.699 li
35.469 381.687 35.488 381.676 35.52 381.668 cv
35.543 381.66 35.578 381.652 35.625 381.641 cv
35.664 381.633 35.715 381.625 35.77 381.621 cv
35.824 381.621 35.891 381.621 35.977 381.617 cv
36.082 381.621 36.176 381.625 36.25 381.633 cv
36.32 381.641 36.375 381.656 36.422 381.672 cv
36.461 381.691 36.488 381.711 36.504 381.734 cv
36.512 381.762 36.52 381.785 36.523 381.809 cv
36.523 389.605 li
38.129 389.605 li
38.164 389.609 38.199 389.617 38.23 389.637 cv
38.262 389.66 38.285 389.691 38.309 389.727 cv
38.324 389.766 38.34 389.812 38.355 389.871 cv
38.363 389.934 38.371 390.008 38.375 390.086 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.73 386.094 mo
45.727 386.777 45.676 387.398 45.57 387.961 cv
45.461 388.523 45.281 389.008 45.035 389.41 cv
44.781 389.816 44.453 390.129 44.055 390.348 cv
43.648 390.57 43.156 390.68 42.57 390.68 cv
42.012 390.68 41.539 390.582 41.16 390.383 cv
40.777 390.187 40.473 389.895 40.238 389.508 cv
40.004 389.121 39.836 388.648 39.742 388.082 cv
39.641 387.52 39.594 386.871 39.594 386.137 cv
39.594 385.465 39.648 384.844 39.758 384.277 cv
39.867 383.715 40.043 383.23 40.293 382.824 cv
40.535 382.422 40.859 382.109 41.266 381.883 cv
41.664 381.664 42.16 381.551 42.75 381.551 cv
43.309 381.551 43.781 381.652 44.164 381.848 cv
44.547 382.051 44.852 382.344 45.086 382.727 cv
45.316 383.117 45.484 383.59 45.582 384.152 cv
45.68 384.715 45.727 385.363 45.73 386.094 cv
cp
44.523 386.176 mo
44.52 385.734 44.504 385.336 44.477 384.984 cv
44.441 384.633 44.395 384.324 44.336 384.055 cv
44.27 383.785 44.191 383.555 44.094 383.359 cv
43.996 383.168 43.879 383.008 43.742 382.879 cv
43.602 382.754 43.441 382.66 43.27 382.602 cv
43.09 382.547 42.895 382.52 42.68 382.516 cv
42.289 382.52 41.973 382.609 41.734 382.793 cv
41.488 382.977 41.297 383.23 41.16 383.547 cv
41.02 383.867 40.926 384.238 40.875 384.668 cv
40.824 385.098 40.801 385.562 40.801 386.055 cv
40.801 386.719 40.832 387.281 40.902 387.742 cv
40.969 388.211 41.078 388.59 41.23 388.879 cv
41.375 389.176 41.566 389.387 41.797 389.516 cv
42.027 389.652 42.309 389.719 42.641 389.715 cv
42.895 389.719 43.117 389.68 43.313 389.594 cv
43.504 389.516 43.672 389.395 43.813 389.238 cv
43.953 389.086 44.066 388.902 44.16 388.687 cv
44.246 388.473 44.32 388.234 44.379 387.973 cv
44.43 387.715 44.469 387.434 44.492 387.129 cv
44.512 386.824 44.52 386.508 44.523 386.176 cv
cp
f
32.012 333.301 mo
46.2 333.301 li
46.2 350.391 li
32.012 350.391 li
cp
0 0 0 0 cmyk
ef
38.375 346.215 mo
38.371 346.305 38.363 346.375 38.352 346.434 cv
38.336 346.496 38.316 346.547 38.297 346.578 cv
38.273 346.617 38.25 346.641 38.219 346.656 cv
38.188 346.672 38.156 346.68 38.129 346.68 cv
33.492 346.68 li
33.457 346.68 33.43 346.672 33.402 346.656 cv
33.375 346.641 33.348 346.617 33.324 346.578 cv
33.297 346.547 33.277 346.496 33.266 346.434 cv
33.25 346.375 33.242 346.305 33.246 346.215 cv
33.242 346.137 33.25 346.062 33.266 346 cv
33.277 345.941 33.293 345.895 33.316 345.855 cv
33.332 345.82 33.359 345.789 33.391 345.766 cv
33.422 345.746 33.453 345.738 33.492 345.734 cv
35.344 345.734 li
35.344 338.988 li
33.629 340.008 li
33.539 340.059 33.469 340.086 33.422 340.094 cv
33.367 340.102 33.324 340.094 33.293 340.062 cv
33.258 340.035 33.238 339.984 33.227 339.914 cv
33.215 339.848 33.207 339.762 33.211 339.652 cv
33.207 339.578 33.211 339.512 33.223 339.453 cv
33.227 339.402 33.238 339.355 33.254 339.316 cv
33.266 339.281 33.285 339.25 33.309 339.223 cv
33.332 339.195 33.363 339.168 33.41 339.141 cv
35.453 337.828 li
35.469 337.816 35.488 337.805 35.52 337.797 cv
35.543 337.789 35.578 337.781 35.625 337.77 cv
35.664 337.762 35.715 337.754 35.77 337.75 cv
35.824 337.75 35.891 337.75 35.977 337.746 cv
36.082 337.75 36.176 337.754 36.25 337.762 cv
36.32 337.77 36.375 337.785 36.422 337.801 cv
36.461 337.82 36.488 337.84 36.504 337.863 cv
36.512 337.891 36.52 337.914 36.523 337.937 cv
36.523 345.734 li
38.129 345.734 li
38.164 345.738 38.199 345.746 38.23 345.766 cv
38.262 345.789 38.285 345.82 38.309 345.855 cv
38.324 345.895 38.34 345.941 38.355 346 cv
38.363 346.062 38.371 346.137 38.375 346.215 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.395 343.828 mo
45.395 344.305 45.313 344.727 45.152 345.098 cv
44.992 345.469 44.766 345.781 44.477 346.035 cv
44.18 346.289 43.832 346.484 43.43 346.613 cv
43.023 346.746 42.574 346.809 42.082 346.809 cv
41.805 346.809 41.543 346.789 41.301 346.75 cv
41.051 346.711 40.832 346.664 40.645 346.609 cv
40.449 346.555 40.293 346.5 40.168 346.441 cv
40.043 346.391 39.965 346.348 39.934 346.312 cv
39.898 346.281 39.875 346.25 39.863 346.223 cv
39.848 346.195 39.832 346.164 39.824 346.121 cv
39.809 346.086 39.801 346.035 39.801 345.973 cv
39.793 345.914 39.793 345.844 39.793 345.762 cv
39.793 345.687 39.797 345.617 39.805 345.555 cv
39.813 345.492 39.824 345.441 39.844 345.402 cv
39.859 345.363 39.879 345.336 39.906 345.316 cv
39.93 345.301 39.961 345.293 39.992 345.289 cv
40.039 345.293 40.109 345.32 40.203 345.375 cv
40.297 345.434 40.426 345.496 40.59 345.562 cv
40.754 345.629 40.953 345.691 41.195 345.75 cv
41.43 345.809 41.715 345.836 42.051 345.836 cv
42.352 345.836 42.633 345.801 42.891 345.727 cv
43.145 345.656 43.367 345.543 43.555 345.387 cv
43.738 345.234 43.883 345.039 43.988 344.801 cv
44.094 344.566 44.145 344.277 44.148 343.937 cv
44.145 343.656 44.102 343.406 44.012 343.187 cv
43.922 342.969 43.785 342.789 43.602 342.645 cv
43.414 342.504 43.18 342.398 42.898 342.324 cv
42.613 342.254 42.273 342.215 41.887 342.215 cv
41.602 342.215 41.363 342.23 41.164 342.258 cv
40.961 342.289 40.773 342.305 40.602 342.301 cv
40.473 342.305 40.379 342.273 40.328 342.211 cv
40.27 342.152 40.242 342.039 40.246 341.867 cv
40.246 338.254 li
40.242 338.105 40.277 337.996 40.352 337.918 cv
40.418 337.848 40.52 337.809 40.656 337.809 cv
44.586 337.809 li
44.621 337.809 44.656 337.82 44.691 337.84 cv
44.723 337.863 44.75 337.895 44.777 337.934 cv
44.797 337.977 44.813 338.027 44.828 338.09 cv
44.836 338.156 44.844 338.234 44.848 338.316 cv
44.844 338.484 44.82 338.609 44.781 338.699 cv
44.734 338.793 44.676 338.84 44.598 338.836 cv
41.426 338.836 li
41.426 341.324 li
41.578 341.305 41.734 341.293 41.898 341.285 cv
42.055 341.281 42.242 341.277 42.457 341.277 cv
42.941 341.277 43.367 341.34 43.734 341.461 cv
44.098 341.582 44.402 341.754 44.652 341.973 cv
44.895 342.199 45.082 342.465 45.207 342.777 cv
45.332 343.094 45.395 343.445 45.395 343.828 cv
cp
f
32.012 289.449 mo
46.2 289.449 li
46.2 306.539 li
32.012 306.539 li
cp
0 0 0 0 cmyk
ef
38.355 302.32 mo
38.352 302.406 38.348 302.48 38.336 302.543 cv
38.324 302.609 38.309 302.664 38.289 302.703 cv
38.266 302.75 38.238 302.781 38.207 302.797 cv
38.172 302.82 38.133 302.828 38.094 302.828 cv
33.191 302.828 li
33.129 302.828 33.07 302.82 33.023 302.805 cv
32.973 302.789 32.934 302.766 32.898 302.727 cv
32.863 302.695 32.836 302.641 32.824 302.57 cv
32.805 302.5 32.797 302.414 32.801 302.312 cv
32.797 302.223 32.801 302.145 32.809 302.074 cv
32.813 302.008 32.828 301.949 32.855 301.895 cv
32.879 301.844 32.91 301.789 32.945 301.734 cv
32.98 301.684 33.023 301.629 33.082 301.566 cv
34.855 299.742 li
35.266 299.324 35.594 298.949 35.844 298.613 cv
36.09 298.285 36.281 297.98 36.414 297.703 cv
36.547 297.43 36.633 297.18 36.68 296.953 cv
36.719 296.73 36.742 296.52 36.742 296.324 cv
36.742 296.129 36.707 295.945 36.641 295.766 cv
36.574 295.594 36.48 295.437 36.355 295.301 cv
36.23 295.172 36.074 295.066 35.887 294.984 cv
35.699 294.91 35.48 294.871 35.234 294.867 cv
34.945 294.871 34.688 294.91 34.461 294.984 cv
34.23 295.066 34.031 295.152 33.859 295.238 cv
33.688 295.332 33.543 295.414 33.426 295.492 cv
33.309 295.57 33.223 295.609 33.172 295.609 cv
33.137 295.609 33.105 295.602 33.082 295.582 cv
33.051 295.566 33.031 295.535 33.016 295.492 cv
33 295.453 32.984 295.398 32.977 295.328 cv
32.965 295.262 32.961 295.18 32.965 295.082 cv
32.961 295.016 32.965 294.957 32.973 294.906 cv
32.977 294.855 32.984 294.812 32.996 294.773 cv
33.004 294.738 33.02 294.703 33.039 294.672 cv
33.059 294.641 33.094 294.602 33.152 294.551 cv
33.203 294.504 33.297 294.437 33.434 294.355 cv
33.566 294.273 33.738 294.195 33.941 294.113 cv
34.145 294.035 34.367 293.965 34.613 293.91 cv
34.855 293.855 35.113 293.828 35.387 293.828 cv
35.813 293.828 36.188 293.891 36.512 294.012 cv
36.832 294.133 37.098 294.297 37.313 294.508 cv
37.523 294.719 37.684 294.965 37.789 295.238 cv
37.895 295.52 37.949 295.816 37.949 296.129 cv
37.949 296.418 37.922 296.699 37.871 296.977 cv
37.82 297.262 37.715 297.566 37.555 297.891 cv
37.391 298.219 37.156 298.582 36.852 298.98 cv
36.543 299.383 36.137 299.844 35.633 300.359 cv
34.227 301.828 li
38.086 301.828 li
38.117 301.832 38.152 301.844 38.191 301.859 cv
38.223 301.883 38.254 301.914 38.281 301.953 cv
38.305 301.996 38.324 302.047 38.336 302.105 cv
38.348 302.172 38.352 302.242 38.355 302.32 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.73 298.371 mo
45.727 299.055 45.676 299.676 45.57 300.238 cv
45.461 300.801 45.281 301.285 45.035 301.687 cv
44.781 302.094 44.453 302.406 44.055 302.625 cv
43.648 302.848 43.156 302.957 42.57 302.957 cv
42.012 302.957 41.539 302.859 41.16 302.66 cv
40.777 302.465 40.473 302.172 40.238 301.785 cv
40.004 301.398 39.836 300.926 39.742 300.359 cv
39.641 299.797 39.594 299.148 39.594 298.414 cv
39.594 297.742 39.648 297.121 39.758 296.555 cv
39.867 295.992 40.043 295.508 40.293 295.102 cv
40.535 294.699 40.859 294.387 41.266 294.16 cv
41.664 293.941 42.16 293.828 42.75 293.828 cv
43.309 293.828 43.781 293.93 44.164 294.125 cv
44.547 294.328 44.852 294.621 45.086 295.004 cv
45.316 295.395 45.484 295.867 45.582 296.43 cv
45.68 296.992 45.727 297.641 45.73 298.371 cv
cp
44.523 298.453 mo
44.52 298.012 44.504 297.613 44.477 297.262 cv
44.441 296.91 44.395 296.602 44.336 296.332 cv
44.27 296.062 44.191 295.832 44.094 295.637 cv
43.996 295.445 43.879 295.285 43.742 295.156 cv
43.602 295.031 43.441 294.937 43.27 294.879 cv
43.09 294.824 42.895 294.797 42.68 294.793 cv
42.289 294.797 41.973 294.887 41.734 295.07 cv
41.488 295.254 41.297 295.508 41.16 295.824 cv
41.02 296.145 40.926 296.516 40.875 296.945 cv
40.824 297.375 40.801 297.84 40.801 298.332 cv
40.801 298.996 40.832 299.559 40.902 300.02 cv
40.969 300.488 41.078 300.867 41.23 301.156 cv
41.375 301.453 41.566 301.664 41.797 301.793 cv
42.027 301.93 42.309 301.996 42.641 301.992 cv
42.895 301.996 43.117 301.957 43.313 301.871 cv
43.504 301.793 43.672 301.672 43.813 301.516 cv
43.953 301.363 44.066 301.18 44.16 300.965 cv
44.246 300.75 44.32 300.512 44.379 300.25 cv
44.43 299.992 44.469 299.711 44.492 299.406 cv
44.512 299.102 44.52 298.785 44.523 298.453 cv
cp
f
32.012 245.602 mo
46.2 245.602 li
46.2 262.692 li
32.012 262.692 li
cp
0 0 0 0 cmyk
ef
38.363 258.473 mo
38.359 258.559 38.355 258.633 38.348 258.695 cv
38.336 258.762 38.32 258.816 38.301 258.855 cv
38.277 258.902 38.246 258.934 38.215 258.949 cv
38.176 258.973 38.141 258.98 38.105 258.98 cv
33.195 258.98 li
33.129 258.98 33.07 258.973 33.023 258.957 cv
32.973 258.941 32.934 258.918 32.902 258.879 cv
32.867 258.848 32.84 258.793 32.824 258.723 cv
32.805 258.652 32.797 258.566 32.801 258.465 cv
32.797 258.375 32.801 258.297 32.813 258.227 cv
32.816 258.16 32.832 258.098 32.859 258.043 cv
32.879 257.992 32.91 257.941 32.945 257.887 cv
32.98 257.836 33.027 257.781 33.086 257.719 cv
34.863 255.891 li
35.27 255.473 35.598 255.094 35.848 254.758 cv
36.09 254.426 36.281 254.121 36.422 253.844 cv
36.555 253.574 36.645 253.324 36.688 253.098 cv
36.727 252.871 36.746 252.66 36.75 252.465 cv
36.746 252.27 36.715 252.086 36.648 251.906 cv
36.582 251.734 36.484 251.578 36.363 251.441 cv
36.234 251.312 36.078 251.207 35.891 251.125 cv
35.699 251.051 35.484 251.012 35.242 251.008 cv
34.953 251.012 34.691 251.051 34.465 251.125 cv
34.23 251.207 34.031 251.293 33.863 251.379 cv
33.688 251.473 33.543 251.555 33.43 251.633 cv
33.313 251.711 33.227 251.75 33.172 251.75 cv
33.137 251.75 33.109 251.742 33.086 251.723 cv
33.059 251.707 33.035 251.676 33.02 251.633 cv
33 251.594 32.988 251.539 32.98 251.469 cv
32.973 251.398 32.969 251.316 32.969 251.219 cv
32.969 251.152 32.969 251.094 32.973 251.043 cv
32.977 250.992 32.984 250.949 32.996 250.91 cv
33.008 250.879 33.023 250.844 33.043 250.809 cv
33.059 250.781 33.094 250.742 33.152 250.691 cv
33.203 250.645 33.301 250.578 33.438 250.492 cv
33.57 250.41 33.738 250.328 33.945 250.25 cv
34.145 250.172 34.367 250.105 34.617 250.047 cv
34.859 249.996 35.117 249.969 35.391 249.965 cv
35.816 249.969 36.195 250.031 36.52 250.148 cv
36.84 250.273 37.105 250.437 37.324 250.645 cv
37.535 250.859 37.695 251.105 37.801 251.379 cv
37.906 251.66 37.961 251.957 37.961 252.27 cv
37.961 252.559 37.934 252.84 37.883 253.121 cv
37.832 253.402 37.727 253.707 37.563 254.035 cv
37.398 254.363 37.164 254.727 36.859 255.125 cv
36.555 255.527 36.145 255.988 35.637 256.508 cv
34.23 257.977 li
38.098 257.977 li
38.129 257.98 38.164 257.988 38.203 258.008 cv
38.234 258.031 38.266 258.062 38.293 258.102 cv
38.316 258.145 38.336 258.199 38.348 258.258 cv
38.355 258.32 38.359 258.391 38.363 258.473 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.406 256.125 mo
45.406 256.605 45.324 257.027 45.164 257.395 cv
45.004 257.766 44.777 258.078 44.484 258.332 cv
44.191 258.586 43.844 258.777 43.438 258.91 cv
43.031 259.043 42.582 259.109 42.09 259.109 cv
41.813 259.109 41.551 259.09 41.305 259.051 cv
41.055 259.012 40.832 258.965 40.645 258.91 cv
40.449 258.855 40.293 258.801 40.172 258.742 cv
40.047 258.687 39.969 258.645 39.934 258.609 cv
39.898 258.582 39.875 258.551 39.863 258.523 cv
39.848 258.496 39.832 258.465 39.824 258.422 cv
39.809 258.387 39.801 258.336 39.801 258.273 cv
39.793 258.215 39.793 258.145 39.797 258.059 cv
39.793 257.988 39.797 257.918 39.805 257.852 cv
39.813 257.793 39.824 257.742 39.844 257.699 cv
39.859 257.664 39.879 257.637 39.906 257.613 cv
39.93 257.598 39.961 257.586 39.996 257.586 cv
40.039 257.586 40.109 257.617 40.207 257.672 cv
40.301 257.734 40.43 257.797 40.594 257.859 cv
40.754 257.93 40.957 257.992 41.199 258.047 cv
41.438 258.109 41.723 258.137 42.055 258.137 cv
42.359 258.137 42.641 258.102 42.898 258.027 cv
43.156 257.957 43.375 257.844 43.563 257.684 cv
43.742 257.531 43.887 257.336 43.996 257.098 cv
44.098 256.863 44.152 256.574 44.156 256.234 cv
44.152 255.953 44.105 255.703 44.02 255.484 cv
43.926 255.27 43.789 255.09 43.609 254.941 cv
43.422 254.801 43.188 254.691 42.906 254.617 cv
42.617 254.551 42.281 254.516 41.891 254.512 cv
41.609 254.516 41.367 254.531 41.168 254.555 cv
40.965 254.586 40.777 254.598 40.605 254.594 cv
40.477 254.598 40.387 254.566 40.332 254.504 cv
40.277 254.445 40.25 254.332 40.25 254.16 cv
40.25 250.539 li
40.25 250.391 40.285 250.277 40.355 250.203 cv
40.426 250.133 40.527 250.098 40.66 250.094 cv
44.594 250.094 li
44.625 250.098 44.66 250.109 44.699 250.125 cv
44.73 250.148 44.762 250.18 44.785 250.219 cv
44.809 250.266 44.824 250.316 44.836 250.379 cv
44.848 250.441 44.855 250.516 44.855 250.602 cv
44.855 250.77 44.832 250.898 44.789 250.988 cv
44.746 251.082 44.684 251.129 44.605 251.125 cv
41.43 251.125 li
41.43 253.617 li
41.578 253.598 41.738 253.582 41.902 253.578 cv
42.063 253.574 42.246 253.574 42.461 253.57 cv
42.945 253.574 43.375 253.633 43.742 253.754 cv
44.109 253.875 44.414 254.047 44.66 254.266 cv
44.902 254.488 45.086 254.758 45.215 255.074 cv
45.34 255.391 45.406 255.742 45.406 256.125 cv
cp
f
32.012 201.75 mo
46.2 201.75 li
46.2 218.84 li
32.012 218.84 li
cp
0 0 0 0 cmyk
ef
38.285 212.574 mo
38.281 212.984 38.211 213.352 38.07 213.676 cv
37.926 214.004 37.723 214.285 37.461 214.516 cv
37.195 214.75 36.867 214.926 36.48 215.051 cv
36.09 215.176 35.652 215.238 35.168 215.238 cv
34.863 215.238 34.586 215.211 34.332 215.164 cv
34.07 215.117 33.84 215.066 33.645 214.996 cv
33.441 214.934 33.277 214.863 33.145 214.793 cv
33.012 214.723 32.926 214.672 32.895 214.637 cv
32.855 214.609 32.832 214.578 32.816 214.543 cv
32.797 214.512 32.777 214.473 32.766 214.426 cv
32.75 214.383 32.742 214.328 32.734 214.258 cv
32.727 214.195 32.723 214.113 32.727 214.012 cv
32.723 213.852 32.738 213.738 32.773 213.672 cv
32.805 213.609 32.852 213.574 32.914 213.574 cv
32.957 213.574 33.039 213.613 33.164 213.684 cv
33.285 213.762 33.445 213.84 33.641 213.922 cv
33.832 214.008 34.059 214.086 34.324 214.156 cv
34.582 214.23 34.875 214.266 35.195 214.266 cv
35.504 214.266 35.773 214.227 36.012 214.148 cv
36.242 214.07 36.441 213.961 36.602 213.82 cv
36.758 213.68 36.875 213.512 36.957 213.316 cv
37.035 213.121 37.074 212.91 37.078 212.684 cv
37.074 212.434 37.023 212.207 36.926 212.004 cv
36.82 211.805 36.672 211.633 36.48 211.484 cv
36.281 211.34 36.043 211.227 35.758 211.148 cv
35.473 211.07 35.148 211.031 34.785 211.031 cv
33.914 211.031 li
33.871 211.031 33.836 211.023 33.801 211.008 cv
33.766 210.992 33.734 210.965 33.711 210.926 cv
33.684 210.891 33.664 210.844 33.648 210.785 cv
33.633 210.727 33.625 210.648 33.625 210.551 cv
33.625 210.465 33.629 210.395 33.645 210.336 cv
33.652 210.281 33.672 210.234 33.703 210.199 cv
33.727 210.164 33.758 210.141 33.789 210.121 cv
33.82 210.109 33.855 210.102 33.898 210.098 cv
34.672 210.098 li
34.973 210.102 35.242 210.062 35.484 209.98 cv
35.719 209.906 35.922 209.793 36.094 209.645 cv
36.258 209.5 36.387 209.324 36.477 209.121 cv
36.566 208.918 36.613 208.691 36.613 208.437 cv
36.613 208.258 36.582 208.082 36.523 207.914 cv
36.461 207.75 36.371 207.605 36.254 207.48 cv
36.133 207.355 35.98 207.258 35.801 207.187 cv
35.613 207.117 35.402 207.082 35.16 207.082 cv
34.895 207.082 34.648 207.125 34.43 207.203 cv
34.203 207.285 34.008 207.371 33.836 207.461 cv
33.66 207.555 33.516 207.641 33.402 207.719 cv
33.289 207.801 33.207 207.84 33.164 207.836 cv
33.129 207.84 33.102 207.832 33.078 207.82 cv
33.051 207.809 33.031 207.785 33.016 207.75 cv
33 207.719 32.988 207.672 32.98 207.605 cv
32.973 207.547 32.969 207.465 32.973 207.363 cv
32.969 207.297 32.969 207.238 32.977 207.184 cv
32.977 207.133 32.988 207.086 33.004 207.043 cv
33.02 207.008 33.035 206.973 33.055 206.937 cv
33.07 206.91 33.102 206.871 33.145 206.824 cv
33.188 206.781 33.273 206.719 33.41 206.637 cv
33.539 206.555 33.703 206.477 33.898 206.395 cv
34.09 206.316 34.313 206.246 34.57 206.191 cv
34.82 206.137 35.094 206.109 35.391 206.109 cv
35.797 206.109 36.16 206.164 36.473 206.266 cv
36.785 206.375 37.043 206.523 37.254 206.711 cv
37.457 206.906 37.613 207.137 37.719 207.402 cv
37.82 207.672 37.871 207.965 37.875 208.289 cv
37.871 208.57 37.836 208.832 37.766 209.066 cv
37.691 209.309 37.582 209.52 37.441 209.703 cv
37.297 209.891 37.125 210.047 36.922 210.176 cv
36.715 210.309 36.477 210.402 36.207 210.449 cv
36.207 210.461 li
36.512 210.496 36.793 210.57 37.047 210.691 cv
37.301 210.812 37.52 210.965 37.703 211.148 cv
37.883 211.332 38.023 211.547 38.129 211.789 cv
38.23 212.035 38.281 212.297 38.285 212.574 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.73 210.652 mo
45.727 211.336 45.676 211.957 45.57 212.52 cv
45.461 213.082 45.281 213.566 45.035 213.969 cv
44.781 214.375 44.453 214.687 44.055 214.906 cv
43.648 215.129 43.156 215.238 42.57 215.238 cv
42.012 215.238 41.539 215.141 41.16 214.941 cv
40.777 214.746 40.473 214.453 40.238 214.066 cv
40.004 213.68 39.836 213.207 39.742 212.641 cv
39.641 212.078 39.594 211.43 39.594 210.695 cv
39.594 210.023 39.648 209.402 39.758 208.836 cv
39.867 208.273 40.043 207.789 40.293 207.383 cv
40.535 206.98 40.859 206.668 41.266 206.441 cv
41.664 206.223 42.16 206.109 42.75 206.109 cv
43.309 206.109 43.781 206.211 44.164 206.406 cv
44.547 206.609 44.852 206.902 45.086 207.285 cv
45.316 207.676 45.484 208.148 45.582 208.711 cv
45.68 209.273 45.727 209.922 45.73 210.652 cv
cp
44.523 210.734 mo
44.52 210.293 44.504 209.895 44.477 209.543 cv
44.441 209.191 44.395 208.883 44.336 208.613 cv
44.27 208.344 44.191 208.113 44.094 207.918 cv
43.996 207.727 43.879 207.566 43.742 207.437 cv
43.602 207.312 43.441 207.219 43.27 207.16 cv
43.09 207.105 42.895 207.078 42.68 207.074 cv
42.289 207.078 41.973 207.168 41.734 207.352 cv
41.488 207.535 41.297 207.789 41.16 208.105 cv
41.02 208.426 40.926 208.797 40.875 209.227 cv
40.824 209.656 40.801 210.121 40.801 210.613 cv
40.801 211.277 40.832 211.84 40.902 212.301 cv
40.969 212.77 41.078 213.148 41.23 213.437 cv
41.375 213.734 41.566 213.945 41.797 214.074 cv
42.027 214.211 42.309 214.277 42.641 214.273 cv
42.895 214.277 43.117 214.238 43.313 214.152 cv
43.504 214.074 43.672 213.953 43.813 213.797 cv
43.953 213.645 44.066 213.461 44.16 213.246 cv
44.246 213.031 44.32 212.793 44.379 212.531 cv
44.43 212.273 44.469 211.992 44.492 211.687 cv
44.512 211.383 44.52 211.066 44.523 210.734 cv
cp
f
32.012 157.898 mo
46.2 157.898 li
46.2 174.988 li
32.012 174.988 li
cp
0 0 0 0 cmyk
ef
38.297 168.723 mo
38.293 169.133 38.223 169.5 38.082 169.824 cv
37.938 170.152 37.734 170.43 37.473 170.664 cv
37.203 170.898 36.875 171.078 36.488 171.203 cv
36.098 171.328 35.66 171.391 35.172 171.391 cv
34.875 171.391 34.594 171.363 34.336 171.316 cv
34.074 171.27 33.844 171.219 33.645 171.148 cv
33.441 171.086 33.277 171.016 33.145 170.945 cv
33.012 170.875 32.926 170.824 32.895 170.789 cv
32.855 170.758 32.832 170.727 32.816 170.691 cv
32.797 170.664 32.777 170.625 32.766 170.578 cv
32.75 170.535 32.742 170.48 32.734 170.41 cv
32.727 170.348 32.723 170.266 32.727 170.164 cv
32.723 170 32.738 169.883 32.773 169.82 cv
32.805 169.758 32.852 169.727 32.918 169.723 cv
32.957 169.727 33.043 169.762 33.168 169.832 cv
33.293 169.906 33.449 169.988 33.645 170.07 cv
33.836 170.16 34.066 170.238 34.328 170.309 cv
34.586 170.383 34.875 170.418 35.199 170.418 cv
35.508 170.418 35.781 170.379 36.016 170.301 cv
36.25 170.223 36.445 170.113 36.605 169.973 cv
36.766 169.832 36.887 169.664 36.965 169.469 cv
37.043 169.273 37.082 169.062 37.086 168.832 cv
37.082 168.582 37.031 168.355 36.934 168.152 cv
36.828 167.953 36.68 167.777 36.488 167.629 cv
36.289 167.484 36.047 167.375 35.766 167.293 cv
35.477 167.219 35.152 167.18 34.789 167.176 cv
33.918 167.176 li
33.879 167.18 33.84 167.172 33.805 167.152 cv
33.77 167.141 33.738 167.113 33.715 167.074 cv
33.684 167.039 33.664 166.992 33.648 166.93 cv
33.633 166.875 33.625 166.797 33.625 166.695 cv
33.625 166.613 33.629 166.539 33.645 166.48 cv
33.656 166.426 33.676 166.383 33.703 166.344 cv
33.727 166.312 33.758 166.285 33.789 166.266 cv
33.82 166.254 33.855 166.246 33.902 166.242 cv
34.676 166.242 li
34.973 166.246 35.246 166.207 35.488 166.125 cv
35.73 166.051 35.934 165.937 36.102 165.789 cv
36.266 165.645 36.395 165.473 36.484 165.266 cv
36.574 165.062 36.617 164.832 36.621 164.578 cv
36.617 164.398 36.59 164.223 36.531 164.055 cv
36.469 163.891 36.379 163.746 36.262 163.621 cv
36.145 163.496 35.992 163.398 35.805 163.328 cv
35.617 163.258 35.402 163.223 35.164 163.219 cv
34.895 163.223 34.652 163.262 34.434 163.34 cv
34.211 163.422 34.012 163.508 33.84 163.598 cv
33.664 163.691 33.52 163.777 33.406 163.855 cv
33.289 163.937 33.211 163.98 33.168 163.977 cv
33.133 163.98 33.102 163.973 33.078 163.961 cv
33.051 163.949 33.031 163.926 33.02 163.891 cv
33 163.859 32.988 163.812 32.984 163.746 cv
32.973 163.687 32.969 163.605 32.973 163.5 cv
32.969 163.434 32.973 163.375 32.98 163.32 cv
32.984 163.273 32.992 163.227 33.008 163.184 cv
33.02 163.148 33.035 163.113 33.055 163.078 cv
33.07 163.047 33.102 163.008 33.148 162.965 cv
33.191 162.922 33.281 162.859 33.414 162.773 cv
33.547 162.691 33.707 162.609 33.902 162.531 cv
34.094 162.453 34.32 162.387 34.574 162.328 cv
34.828 162.277 35.102 162.25 35.398 162.246 cv
35.809 162.25 36.168 162.305 36.48 162.406 cv
36.789 162.516 37.051 162.664 37.262 162.852 cv
37.469 163.047 37.625 163.273 37.727 163.539 cv
37.828 163.809 37.879 164.105 37.883 164.43 cv
37.879 164.711 37.844 164.973 37.773 165.211 cv
37.699 165.453 37.59 165.664 37.449 165.848 cv
37.305 166.035 37.133 166.195 36.93 166.32 cv
36.723 166.453 36.484 166.543 36.215 166.594 cv
36.215 166.605 li
36.52 166.641 36.797 166.719 37.055 166.836 cv
37.305 166.961 37.523 167.113 37.711 167.293 cv
37.891 167.48 38.035 167.691 38.141 167.934 cv
38.242 168.18 38.293 168.445 38.297 168.723 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.406 168.406 mo
45.406 168.887 45.324 169.309 45.164 169.676 cv
45.004 170.047 44.777 170.359 44.484 170.613 cv
44.191 170.867 43.844 171.059 43.438 171.191 cv
43.031 171.324 42.582 171.391 42.09 171.391 cv
41.813 171.391 41.551 171.371 41.305 171.332 cv
41.055 171.293 40.832 171.246 40.645 171.191 cv
40.449 171.137 40.293 171.082 40.172 171.023 cv
40.047 170.969 39.969 170.926 39.934 170.891 cv
39.898 170.863 39.875 170.832 39.863 170.805 cv
39.848 170.777 39.832 170.746 39.824 170.703 cv
39.809 170.668 39.801 170.617 39.801 170.555 cv
39.793 170.496 39.793 170.426 39.797 170.34 cv
39.793 170.27 39.797 170.199 39.805 170.133 cv
39.813 170.074 39.824 170.023 39.844 169.98 cv
39.859 169.945 39.879 169.918 39.906 169.895 cv
39.93 169.879 39.961 169.867 39.996 169.867 cv
40.039 169.867 40.109 169.898 40.207 169.953 cv
40.301 170.016 40.43 170.078 40.594 170.141 cv
40.754 170.211 40.957 170.273 41.199 170.328 cv
41.438 170.391 41.723 170.418 42.055 170.418 cv
42.359 170.418 42.641 170.383 42.898 170.309 cv
43.156 170.238 43.375 170.125 43.563 169.965 cv
43.742 169.812 43.887 169.617 43.996 169.379 cv
44.098 169.145 44.152 168.855 44.156 168.516 cv
44.152 168.234 44.105 167.984 44.02 167.766 cv
43.926 167.551 43.789 167.371 43.609 167.223 cv
43.422 167.082 43.188 166.973 42.906 166.898 cv
42.617 166.832 42.281 166.797 41.891 166.793 cv
41.609 166.797 41.367 166.812 41.168 166.836 cv
40.965 166.867 40.777 166.879 40.605 166.875 cv
40.477 166.879 40.387 166.848 40.332 166.785 cv
40.277 166.727 40.25 166.613 40.25 166.441 cv
40.25 162.82 li
40.25 162.672 40.285 162.559 40.355 162.484 cv
40.426 162.414 40.527 162.379 40.66 162.375 cv
44.594 162.375 li
44.625 162.379 44.66 162.391 44.699 162.406 cv
44.73 162.43 44.762 162.461 44.785 162.5 cv
44.809 162.547 44.824 162.598 44.836 162.66 cv
44.848 162.723 44.855 162.797 44.855 162.883 cv
44.855 163.051 44.832 163.18 44.789 163.27 cv
44.746 163.363 44.684 163.41 44.605 163.406 cv
41.43 163.406 li
41.43 165.898 li
41.578 165.879 41.738 165.863 41.902 165.859 cv
42.063 165.855 42.246 165.855 42.461 165.852 cv
42.945 165.855 43.375 165.914 43.742 166.035 cv
44.109 166.156 44.414 166.328 44.66 166.547 cv
44.902 166.77 45.086 167.039 45.215 167.355 cv
45.34 167.672 45.406 168.023 45.406 168.406 cv
cp
f
32.012 114.051 mo
46.2 114.051 li
46.2 131.141 li
32.012 131.141 li
cp
0 0 0 0 cmyk
ef
38.73 124.867 mo
38.727 125.02 38.703 125.141 38.66 125.227 cv
38.613 125.316 38.551 125.359 38.469 125.355 cv
37.469 125.355 li
37.469 127.219 li
37.469 127.258 37.457 127.289 37.441 127.312 cv
37.418 127.34 37.387 127.359 37.344 127.379 cv
37.293 127.395 37.23 127.406 37.16 127.418 cv
37.082 127.426 36.988 127.43 36.871 127.434 cv
36.754 127.43 36.656 127.426 36.586 127.418 cv
36.508 127.406 36.449 127.395 36.406 127.379 cv
36.359 127.359 36.328 127.34 36.313 127.312 cv
36.293 127.289 36.285 127.258 36.289 127.219 cv
36.289 125.355 li
32.66 125.355 li
32.602 125.359 32.559 125.352 32.523 125.336 cv
32.488 125.324 32.453 125.297 32.426 125.258 cv
32.395 125.223 32.375 125.172 32.363 125.102 cv
32.352 125.035 32.348 124.945 32.348 124.832 cv
32.348 124.75 32.348 124.672 32.355 124.602 cv
32.355 124.531 32.367 124.469 32.383 124.414 cv
32.395 124.359 32.41 124.305 32.438 124.25 cv
32.457 124.195 32.484 124.141 32.52 124.078 cv
35.68 118.691 li
35.699 118.656 35.734 118.625 35.781 118.598 cv
35.824 118.57 35.879 118.547 35.953 118.527 cv
36.02 118.512 36.105 118.5 36.211 118.488 cv
36.313 118.484 36.434 118.48 36.574 118.477 cv
36.723 118.48 36.859 118.484 36.977 118.496 cv
37.09 118.508 37.18 118.523 37.254 118.539 cv
37.32 118.559 37.375 118.582 37.414 118.613 cv
37.449 118.645 37.469 118.68 37.469 118.719 cv
37.469 124.383 li
38.469 124.383 li
38.543 124.387 38.605 124.426 38.656 124.504 cv
38.703 124.586 38.727 124.707 38.73 124.867 cv
cp
36.289 119.516 mo
36.277 119.516 li
33.426 124.383 li
36.289 124.383 li
cp
.629236 .549432 .540154 .282963 cmyk
f
45.73 122.934 mo
45.727 123.617 45.676 124.238 45.57 124.801 cv
45.461 125.363 45.281 125.848 45.035 126.25 cv
44.781 126.656 44.453 126.969 44.055 127.187 cv
43.648 127.41 43.156 127.52 42.57 127.52 cv
42.012 127.52 41.539 127.422 41.16 127.223 cv
40.777 127.027 40.473 126.734 40.238 126.348 cv
40.004 125.961 39.836 125.488 39.742 124.922 cv
39.641 124.359 39.594 123.711 39.594 122.977 cv
39.594 122.305 39.648 121.684 39.758 121.117 cv
39.867 120.555 40.043 120.07 40.293 119.664 cv
40.535 119.262 40.859 118.949 41.266 118.723 cv
41.664 118.504 42.16 118.391 42.75 118.391 cv
43.309 118.391 43.781 118.492 44.164 118.687 cv
44.547 118.891 44.852 119.184 45.086 119.566 cv
45.316 119.957 45.484 120.43 45.582 120.992 cv
45.68 121.555 45.727 122.203 45.73 122.934 cv
cp
44.523 123.016 mo
44.52 122.574 44.504 122.176 44.477 121.824 cv
44.441 121.473 44.395 121.164 44.336 120.895 cv
44.27 120.625 44.191 120.395 44.094 120.199 cv
43.996 120.008 43.879 119.848 43.742 119.719 cv
43.602 119.594 43.441 119.5 43.27 119.441 cv
43.09 119.387 42.895 119.359 42.68 119.355 cv
42.289 119.359 41.973 119.449 41.734 119.633 cv
41.488 119.816 41.297 120.07 41.16 120.387 cv
41.02 120.707 40.926 121.078 40.875 121.508 cv
40.824 121.937 40.801 122.402 40.801 122.895 cv
40.801 123.559 40.832 124.121 40.902 124.582 cv
40.969 125.051 41.078 125.43 41.23 125.719 cv
41.375 126.016 41.566 126.227 41.797 126.355 cv
42.027 126.492 42.309 126.559 42.641 126.555 cv
42.895 126.559 43.117 126.52 43.313 126.434 cv
43.504 126.355 43.672 126.234 43.813 126.078 cv
43.953 125.926 44.066 125.742 44.16 125.527 cv
44.246 125.312 44.32 125.074 44.379 124.812 cv
44.43 124.555 44.469 124.273 44.492 123.969 cv
44.512 123.664 44.52 123.348 44.523 123.016 cv
cp
f
32.012 70.191 mo
46.2 70.191 li
46.2 87.281 li
32.012 87.281 li
cp
0 0 0 0 cmyk
ef
38.73 81.016 mo
38.727 81.168 38.703 81.289 38.66 81.375 cv
38.613 81.465 38.551 81.508 38.469 81.504 cv
37.469 81.504 li
37.469 83.367 li
37.469 83.406 37.457 83.437 37.441 83.461 cv
37.418 83.488 37.387 83.508 37.344 83.527 cv
37.293 83.543 37.23 83.555 37.16 83.566 cv
37.082 83.574 36.988 83.578 36.871 83.582 cv
36.754 83.578 36.656 83.574 36.586 83.566 cv
36.508 83.555 36.449 83.543 36.406 83.527 cv
36.359 83.508 36.328 83.488 36.313 83.461 cv
36.293 83.437 36.285 83.406 36.289 83.367 cv
36.289 81.504 li
32.66 81.504 li
32.602 81.508 32.559 81.5 32.523 81.484 cv
32.488 81.473 32.453 81.445 32.426 81.406 cv
32.395 81.371 32.375 81.32 32.363 81.25 cv
32.352 81.184 32.348 81.094 32.348 80.98 cv
32.348 80.898 32.348 80.82 32.355 80.75 cv
32.355 80.68 32.367 80.617 32.383 80.562 cv
32.395 80.508 32.41 80.453 32.438 80.398 cv
32.457 80.344 32.484 80.289 32.52 80.227 cv
35.68 74.84 li
35.699 74.805 35.734 74.773 35.781 74.746 cv
35.824 74.719 35.879 74.695 35.953 74.676 cv
36.02 74.66 36.105 74.648 36.211 74.637 cv
36.313 74.633 36.434 74.629 36.574 74.625 cv
36.723 74.629 36.859 74.633 36.977 74.645 cv
37.09 74.656 37.18 74.672 37.254 74.687 cv
37.32 74.707 37.375 74.73 37.414 74.762 cv
37.449 74.793 37.469 74.828 37.469 74.867 cv
37.469 80.531 li
38.469 80.531 li
38.543 80.535 38.605 80.574 38.656 80.652 cv
38.703 80.734 38.727 80.855 38.73 81.016 cv
cp
36.289 75.664 mo
36.277 75.664 li
33.426 80.531 li
36.289 80.531 li
cp
.629236 .549432 .540154 .282963 cmyk
f
45.395 80.687 mo
45.395 81.164 45.313 81.586 45.152 81.957 cv
44.992 82.328 44.766 82.641 44.477 82.895 cv
44.18 83.148 43.832 83.344 43.43 83.473 cv
43.023 83.605 42.574 83.668 42.082 83.668 cv
41.805 83.668 41.543 83.648 41.301 83.609 cv
41.051 83.57 40.832 83.523 40.645 83.469 cv
40.449 83.414 40.293 83.359 40.168 83.301 cv
40.043 83.25 39.965 83.207 39.934 83.172 cv
39.898 83.141 39.875 83.109 39.863 83.082 cv
39.848 83.055 39.832 83.023 39.824 82.98 cv
39.809 82.945 39.801 82.895 39.801 82.832 cv
39.793 82.773 39.793 82.703 39.793 82.621 cv
39.793 82.547 39.797 82.477 39.805 82.414 cv
39.813 82.352 39.824 82.301 39.844 82.262 cv
39.859 82.223 39.879 82.195 39.906 82.176 cv
39.93 82.16 39.961 82.152 39.992 82.148 cv
40.039 82.152 40.109 82.18 40.203 82.234 cv
40.297 82.293 40.426 82.355 40.59 82.422 cv
40.754 82.488 40.953 82.551 41.195 82.609 cv
41.43 82.668 41.715 82.695 42.051 82.695 cv
42.352 82.695 42.633 82.66 42.891 82.586 cv
43.145 82.516 43.367 82.402 43.555 82.246 cv
43.738 82.094 43.883 81.898 43.988 81.66 cv
44.094 81.426 44.145 81.137 44.148 80.797 cv
44.145 80.516 44.102 80.266 44.012 80.047 cv
43.922 79.828 43.785 79.648 43.602 79.504 cv
43.414 79.363 43.18 79.258 42.898 79.184 cv
42.613 79.113 42.273 79.074 41.887 79.074 cv
41.602 79.074 41.363 79.09 41.164 79.117 cv
40.961 79.148 40.773 79.164 40.602 79.16 cv
40.473 79.164 40.379 79.133 40.328 79.07 cv
40.27 79.012 40.242 78.898 40.246 78.727 cv
40.246 75.113 li
40.242 74.965 40.277 74.855 40.352 74.777 cv
40.418 74.707 40.52 74.668 40.656 74.668 cv
44.586 74.668 li
44.621 74.668 44.656 74.68 44.691 74.699 cv
44.723 74.723 44.75 74.754 44.777 74.793 cv
44.797 74.836 44.813 74.887 44.828 74.949 cv
44.836 75.016 44.844 75.094 44.848 75.176 cv
44.844 75.344 44.82 75.469 44.781 75.559 cv
44.734 75.652 44.676 75.699 44.598 75.695 cv
41.426 75.695 li
41.426 78.184 li
41.578 78.164 41.734 78.152 41.898 78.145 cv
42.055 78.141 42.242 78.137 42.457 78.137 cv
42.941 78.137 43.367 78.199 43.734 78.32 cv
44.098 78.441 44.402 78.613 44.652 78.832 cv
44.895 79.059 45.082 79.324 45.207 79.637 cv
45.332 79.953 45.395 80.305 45.395 80.687 cv
cp
f
32.012 26.34 mo
46.2 26.34 li
46.2 43.43 li
32.012 43.43 li
cp
0 0 0 0 cmyk
ef
38.313 36.82 mo
38.313 37.297 38.23 37.719 38.07 38.09 cv
37.91 38.461 37.684 38.773 37.395 39.027 cv
37.098 39.281 36.75 39.477 36.348 39.605 cv
35.941 39.738 35.492 39.801 35 39.801 cv
34.723 39.801 34.461 39.781 34.219 39.742 cv
33.969 39.703 33.75 39.656 33.563 39.602 cv
33.367 39.547 33.211 39.492 33.086 39.434 cv
32.961 39.383 32.883 39.34 32.852 39.305 cv
32.816 39.273 32.793 39.242 32.781 39.215 cv
32.766 39.187 32.75 39.156 32.742 39.113 cv
32.727 39.078 32.719 39.027 32.719 38.965 cv
32.711 38.906 32.711 38.836 32.711 38.754 cv
32.711 38.68 32.715 38.609 32.723 38.547 cv
32.73 38.484 32.742 38.434 32.762 38.395 cv
32.777 38.355 32.797 38.328 32.824 38.309 cv
32.848 38.293 32.879 38.285 32.91 38.281 cv
32.957 38.285 33.027 38.312 33.121 38.367 cv
33.215 38.426 33.344 38.488 33.508 38.555 cv
33.672 38.621 33.871 38.684 34.113 38.742 cv
34.348 38.801 34.633 38.828 34.969 38.828 cv
35.27 38.828 35.551 38.793 35.809 38.719 cv
36.063 38.648 36.285 38.535 36.473 38.379 cv
36.656 38.227 36.801 38.031 36.906 37.793 cv
37.012 37.559 37.063 37.27 37.066 36.93 cv
37.063 36.648 37.02 36.398 36.93 36.18 cv
36.84 35.961 36.703 35.781 36.52 35.637 cv
36.332 35.496 36.098 35.391 35.816 35.316 cv
35.531 35.246 35.191 35.207 34.805 35.207 cv
34.52 35.207 34.281 35.223 34.082 35.25 cv
33.879 35.281 33.691 35.297 33.52 35.293 cv
33.391 35.297 33.297 35.266 33.246 35.203 cv
33.188 35.145 33.16 35.031 33.164 34.859 cv
33.164 31.246 li
33.16 31.098 33.195 30.988 33.27 30.91 cv
33.336 30.84 33.438 30.801 33.574 30.801 cv
37.504 30.801 li
37.539 30.801 37.574 30.812 37.609 30.832 cv
37.641 30.855 37.668 30.887 37.695 30.926 cv
37.715 30.969 37.73 31.02 37.746 31.082 cv
37.754 31.148 37.762 31.227 37.766 31.309 cv
37.762 31.477 37.738 31.602 37.699 31.691 cv
37.652 31.785 37.594 31.832 37.516 31.828 cv
34.344 31.828 li
34.344 34.316 li
34.496 34.297 34.652 34.285 34.816 34.277 cv
34.973 34.273 35.16 34.27 35.375 34.27 cv
35.859 34.27 36.285 34.332 36.652 34.453 cv
37.016 34.574 37.32 34.746 37.57 34.965 cv
37.813 35.191 38 35.457 38.125 35.77 cv
38.25 36.086 38.313 36.437 38.313 36.82 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.73 35.215 mo
45.727 35.898 45.676 36.52 45.57 37.082 cv
45.461 37.645 45.281 38.129 45.035 38.531 cv
44.781 38.937 44.453 39.25 44.055 39.469 cv
43.648 39.691 43.156 39.801 42.57 39.801 cv
42.012 39.801 41.539 39.703 41.16 39.504 cv
40.777 39.309 40.473 39.016 40.238 38.629 cv
40.004 38.242 39.836 37.77 39.742 37.203 cv
39.641 36.641 39.594 35.992 39.594 35.258 cv
39.594 34.586 39.648 33.965 39.758 33.398 cv
39.867 32.836 40.043 32.352 40.293 31.945 cv
40.535 31.543 40.859 31.23 41.266 31.004 cv
41.664 30.785 42.16 30.672 42.75 30.672 cv
43.309 30.672 43.781 30.773 44.164 30.969 cv
44.547 31.172 44.852 31.465 45.086 31.848 cv
45.316 32.238 45.484 32.711 45.582 33.273 cv
45.68 33.836 45.727 34.484 45.73 35.215 cv
cp
44.523 35.297 mo
44.52 34.855 44.504 34.457 44.477 34.105 cv
44.441 33.754 44.395 33.445 44.336 33.176 cv
44.27 32.906 44.191 32.676 44.094 32.48 cv
43.996 32.289 43.879 32.129 43.742 32 cv
43.602 31.875 43.441 31.781 43.27 31.723 cv
43.09 31.668 42.895 31.641 42.68 31.637 cv
42.289 31.641 41.973 31.73 41.734 31.914 cv
41.488 32.098 41.297 32.352 41.16 32.668 cv
41.02 32.988 40.926 33.359 40.875 33.789 cv
40.824 34.219 40.801 34.684 40.801 35.176 cv
40.801 35.84 40.832 36.402 40.902 36.863 cv
40.969 37.332 41.078 37.711 41.23 38 cv
41.375 38.297 41.566 38.508 41.797 38.637 cv
42.027 38.773 42.309 38.84 42.641 38.836 cv
42.895 38.84 43.117 38.801 43.313 38.715 cv
43.504 38.637 43.672 38.516 43.813 38.359 cv
43.953 38.207 44.066 38.023 44.16 37.809 cv
44.246 37.594 44.32 37.355 44.379 37.094 cv
44.43 36.836 44.469 36.555 44.492 36.25 cv
44.512 35.945 44.52 35.629 44.523 35.297 cv
cp
f
62.027 496.02 mo
62.023 496.109 62.016 496.184 62.004 496.242 cv
61.988 496.305 61.969 496.355 61.949 496.387 cv
61.926 496.426 61.902 496.449 61.871 496.465 cv
61.84 496.48 61.809 496.488 61.777 496.488 cv
57.137 496.488 li
57.105 496.488 57.074 496.48 57.047 496.465 cv
57.02 496.449 56.992 496.426 56.969 496.387 cv
56.938 496.355 56.918 496.305 56.91 496.242 cv
56.895 496.184 56.891 496.109 56.891 496.02 cv
56.891 495.941 56.895 495.871 56.91 495.809 cv
56.918 495.75 56.938 495.703 56.961 495.66 cv
56.98 495.625 57.004 495.594 57.035 495.57 cv
57.063 495.551 57.098 495.539 57.137 495.539 cv
58.992 495.539 li
58.992 488.785 li
57.273 489.805 li
57.184 489.855 57.113 489.883 57.063 489.891 cv
57.008 489.898 56.969 489.891 56.938 489.859 cv
56.906 489.832 56.883 489.781 56.871 489.711 cv
56.859 489.645 56.855 489.559 56.855 489.449 cv
56.855 489.375 56.855 489.309 56.863 489.25 cv
56.867 489.199 56.879 489.152 56.895 489.113 cv
56.906 489.078 56.926 489.047 56.953 489.02 cv
56.977 488.992 57.012 488.965 57.055 488.934 cv
59.102 487.621 li
59.117 487.613 59.141 487.602 59.168 487.59 cv
59.195 487.582 59.23 487.574 59.273 487.562 cv
59.313 487.555 59.359 487.547 59.418 487.543 cv
59.469 487.543 59.539 487.543 59.621 487.539 cv
59.73 487.543 59.82 487.547 59.898 487.555 cv
59.969 487.566 60.027 487.578 60.066 487.594 cv
60.105 487.609 60.133 487.633 60.148 487.656 cv
60.164 487.684 60.172 487.707 60.172 487.734 cv
60.172 495.539 li
61.777 495.539 li
61.813 495.539 61.844 495.551 61.879 495.57 cv
61.91 495.594 61.938 495.625 61.961 495.66 cv
61.977 495.703 61.992 495.75 62.008 495.809 cv
62.016 495.871 62.023 495.941 62.027 496.02 cv
cp
f
135.605 495.98 mo
135.602 496.066 135.598 496.141 135.59 496.203 cv
135.578 496.27 135.563 496.324 135.543 496.363 cv
135.52 496.41 135.488 496.441 135.457 496.457 cv
135.418 496.48 135.383 496.488 135.348 496.488 cv
130.438 496.488 li
130.371 496.488 130.313 496.48 130.266 496.465 cv
130.215 496.449 130.176 496.426 130.145 496.387 cv
130.109 496.355 130.082 496.301 130.066 496.23 cv
130.047 496.16 130.039 496.074 130.043 495.973 cv
130.039 495.883 130.043 495.805 130.055 495.734 cv
130.059 495.668 130.074 495.605 130.102 495.551 cv
130.121 495.5 130.152 495.449 130.188 495.395 cv
130.223 495.344 130.27 495.289 130.328 495.227 cv
132.105 493.398 li
132.512 492.98 132.84 492.602 133.09 492.266 cv
133.332 491.934 133.523 491.629 133.664 491.352 cv
133.797 491.082 133.887 490.832 133.93 490.605 cv
133.969 490.379 133.988 490.168 133.992 489.973 cv
133.988 489.777 133.957 489.594 133.891 489.414 cv
133.824 489.242 133.727 489.086 133.605 488.949 cv
133.477 488.82 133.32 488.715 133.133 488.633 cv
132.941 488.559 132.727 488.52 132.484 488.516 cv
132.195 488.52 131.934 488.559 131.707 488.633 cv
131.473 488.715 131.273 488.801 131.105 488.887 cv
130.93 488.98 130.785 489.062 130.672 489.141 cv
130.555 489.219 130.469 489.258 130.414 489.258 cv
130.379 489.258 130.352 489.25 130.328 489.23 cv
130.301 489.215 130.277 489.184 130.262 489.141 cv
130.242 489.102 130.23 489.047 130.223 488.977 cv
130.215 488.906 130.211 488.824 130.211 488.727 cv
130.211 488.66 130.211 488.602 130.215 488.551 cv
130.219 488.5 130.227 488.457 130.238 488.418 cv
130.25 488.387 130.266 488.352 130.285 488.316 cv
130.301 488.289 130.336 488.25 130.395 488.199 cv
130.445 488.152 130.543 488.086 130.68 488 cv
130.813 487.918 130.98 487.836 131.188 487.758 cv
131.387 487.68 131.609 487.613 131.859 487.555 cv
132.102 487.504 132.359 487.477 132.633 487.473 cv
133.059 487.477 133.438 487.539 133.762 487.656 cv
134.082 487.781 134.348 487.945 134.566 488.152 cv
134.777 488.367 134.938 488.613 135.043 488.887 cv
135.148 489.168 135.203 489.465 135.203 489.777 cv
135.203 490.066 135.176 490.348 135.125 490.629 cv
135.074 490.91 134.969 491.215 134.805 491.543 cv
134.641 491.871 134.406 492.234 134.102 492.633 cv
133.797 493.035 133.387 493.496 132.879 494.016 cv
131.473 495.484 li
135.34 495.484 li
135.371 495.488 135.406 495.496 135.445 495.516 cv
135.477 495.539 135.508 495.57 135.535 495.609 cv
135.559 495.652 135.578 495.707 135.59 495.766 cv
135.598 495.828 135.602 495.898 135.605 495.98 cv
cp
f
209.574 493.961 mo
209.57 494.117 209.547 494.234 209.504 494.32 cv
209.457 494.406 209.395 494.449 209.313 494.449 cv
208.313 494.449 li
208.313 496.316 li
208.313 496.355 208.301 496.387 208.281 496.41 cv
208.262 496.437 208.23 496.457 208.184 496.477 cv
208.137 496.492 208.074 496.504 208 496.516 cv
207.922 496.523 207.824 496.527 207.711 496.531 cv
207.594 496.527 207.5 496.523 207.426 496.516 cv
207.348 496.504 207.289 496.492 207.246 496.477 cv
207.199 496.457 207.168 496.437 207.152 496.41 cv
207.137 496.387 207.129 496.355 207.129 496.316 cv
207.129 494.449 li
203.496 494.449 li
203.441 494.449 203.395 494.445 203.359 494.43 cv
203.32 494.418 203.285 494.391 203.258 494.352 cv
203.227 494.316 203.207 494.266 203.195 494.195 cv
203.184 494.129 203.18 494.039 203.18 493.926 cv
203.18 493.844 203.18 493.766 203.188 493.695 cv
203.188 493.629 203.199 493.566 203.215 493.504 cv
203.227 493.449 203.242 493.395 203.27 493.34 cv
203.289 493.293 203.316 493.234 203.352 493.172 cv
206.52 487.773 li
206.543 487.742 206.574 487.711 206.621 487.68 cv
206.66 487.656 206.719 487.633 206.793 487.609 cv
206.859 487.594 206.945 487.582 207.051 487.574 cv
207.148 487.57 207.27 487.566 207.414 487.562 cv
207.566 487.566 207.699 487.57 207.816 487.578 cv
207.926 487.59 208.02 487.605 208.094 487.621 cv
208.16 487.645 208.215 487.668 208.254 487.695 cv
208.293 487.727 208.313 487.762 208.313 487.801 cv
208.313 493.473 li
209.313 493.473 li
209.387 493.477 209.449 493.516 209.5 493.594 cv
209.547 493.676 209.57 493.801 209.574 493.961 cv
cp
207.129 488.598 mo
207.117 488.598 li
204.258 493.473 li
207.129 493.473 li
cp
f
283 493.609 mo
282.996 494.004 282.938 494.379 282.82 494.742 cv
282.699 495.105 282.516 495.426 282.273 495.703 cv
282.023 495.98 281.711 496.203 281.332 496.367 cv
280.949 496.535 280.5 496.617 279.988 496.617 cv
279.613 496.617 279.285 496.574 279.004 496.48 cv
278.715 496.395 278.469 496.262 278.262 496.09 cv
278.051 495.922 277.875 495.715 277.738 495.465 cv
277.594 495.219 277.48 494.937 277.398 494.621 cv
277.313 494.309 277.254 493.965 277.219 493.586 cv
277.18 493.211 277.16 492.805 277.164 492.375 cv
277.16 491.996 277.184 491.613 277.227 491.223 cv
277.266 490.836 277.336 490.461 277.445 490.094 cv
277.547 489.734 277.691 489.395 277.875 489.074 cv
278.055 488.762 278.281 488.484 278.555 488.246 cv
278.824 488.012 279.152 487.824 279.535 487.687 cv
279.914 487.551 280.355 487.484 280.859 487.48 cv
281.027 487.484 281.199 487.492 281.375 487.512 cv
281.547 487.531 281.707 487.559 281.855 487.594 cv
282 487.629 282.121 487.668 282.223 487.707 cv
282.32 487.75 282.387 487.781 282.422 487.805 cv
282.453 487.832 282.477 487.863 282.496 487.891 cv
282.508 487.922 282.52 487.953 282.531 487.984 cv
282.539 488.023 282.547 488.062 282.555 488.102 cv
282.555 488.148 282.559 488.199 282.563 488.262 cv
282.559 488.348 282.559 488.422 282.559 488.477 cv
282.555 488.539 282.543 488.586 282.531 488.617 cv
282.512 488.656 282.492 488.684 282.469 488.699 cv
282.441 488.723 282.41 488.73 282.371 488.727 cv
282.316 488.73 282.246 488.715 282.164 488.68 cv
282.074 488.652 281.969 488.617 281.848 488.574 cv
281.723 488.539 281.574 488.504 281.398 488.469 cv
281.219 488.437 281.012 488.422 280.785 488.418 cv
280.355 488.422 279.988 488.508 279.684 488.68 cv
279.375 488.855 279.125 489.09 278.934 489.383 cv
278.734 489.676 278.59 490.016 278.5 490.402 cv
278.402 490.789 278.352 491.191 278.34 491.613 cv
278.457 491.543 278.59 491.477 278.738 491.406 cv
278.887 491.344 279.047 491.281 279.227 491.223 cv
279.398 491.172 279.586 491.129 279.785 491.09 cv
279.98 491.059 280.191 491.039 280.418 491.035 cv
280.898 491.039 281.305 491.105 281.633 491.23 cv
281.961 491.363 282.227 491.543 282.434 491.773 cv
282.637 492.008 282.781 492.281 282.871 492.594 cv
282.953 492.91 282.996 493.25 283 493.609 cv
cp
281.809 493.723 mo
281.809 493.457 281.781 493.219 281.727 493 cv
281.672 492.785 281.582 492.598 281.461 492.445 cv
281.336 492.297 281.172 492.18 280.969 492.094 cv
280.762 492.012 280.508 491.973 280.207 491.969 cv
280.035 491.973 279.867 491.988 279.699 492.016 cv
279.527 492.047 279.363 492.086 279.207 492.141 cv
279.047 492.195 278.895 492.258 278.754 492.324 cv
278.609 492.398 278.477 492.477 278.359 492.555 cv
278.355 493.148 278.395 493.641 278.473 494.035 cv
278.547 494.437 278.656 494.758 278.801 494.996 cv
278.945 495.238 279.125 495.41 279.34 495.512 cv
279.555 495.617 279.809 495.668 280.098 495.664 cv
280.387 495.668 280.641 495.613 280.859 495.5 cv
281.074 495.395 281.25 495.246 281.395 495.059 cv
281.535 494.871 281.641 494.664 281.707 494.434 cv
281.773 494.203 281.809 493.965 281.809 493.723 cv
cp
f
356.59 494.207 mo
356.59 494.598 356.52 494.937 356.383 495.234 cv
356.246 495.535 356.047 495.789 355.789 495.996 cv
355.527 496.203 355.211 496.359 354.832 496.461 cv
354.449 496.566 354.012 496.617 353.527 496.617 cv
353.066 496.617 352.656 496.57 352.297 496.477 cv
351.934 496.383 351.629 496.242 351.379 496.051 cv
351.125 495.863 350.934 495.633 350.801 495.355 cv
350.668 495.082 350.602 494.766 350.602 494.414 cv
350.602 494.137 350.645 493.883 350.738 493.648 cv
350.824 493.418 350.957 493.203 351.133 493 cv
351.301 492.805 351.512 492.617 351.77 492.445 cv
352.02 492.273 352.305 492.113 352.621 491.957 cv
352.344 491.816 352.102 491.664 351.895 491.508 cv
351.68 491.352 351.5 491.18 351.355 490.992 cv
351.207 490.809 351.098 490.613 351.023 490.398 cv
350.945 490.191 350.906 489.961 350.91 489.711 cv
350.906 489.402 350.961 489.109 351.078 488.836 cv
351.188 488.562 351.359 488.328 351.586 488.125 cv
351.813 487.926 352.098 487.766 352.449 487.648 cv
352.797 487.535 353.207 487.477 353.68 487.473 cv
354.125 487.477 354.512 487.531 354.84 487.633 cv
355.164 487.742 355.438 487.887 355.652 488.074 cv
355.863 488.262 356.02 488.48 356.121 488.73 cv
356.223 488.98 356.273 489.25 356.273 489.539 cv
356.273 489.773 356.234 490 356.16 490.215 cv
356.082 490.43 355.973 490.633 355.828 490.824 cv
355.68 491.016 355.5 491.195 355.289 491.363 cv
355.074 491.531 354.828 491.687 354.559 491.832 cv
354.879 491.996 355.168 492.16 355.426 492.328 cv
355.676 492.5 355.891 492.684 356.066 492.875 cv
356.234 493.07 356.363 493.277 356.457 493.492 cv
356.543 493.711 356.59 493.949 356.59 494.207 cv
cp
355.105 489.648 mo
355.102 489.461 355.066 489.285 355.004 489.129 cv
354.934 488.973 354.84 488.84 354.715 488.73 cv
354.586 488.621 354.426 488.539 354.238 488.477 cv
354.047 488.422 353.832 488.391 353.59 488.391 cv
353.094 488.391 352.719 488.504 352.465 488.73 cv
352.211 488.957 352.082 489.266 352.086 489.648 cv
352.082 489.832 352.113 489.996 352.176 490.148 cv
352.234 490.301 352.332 490.445 352.465 490.582 cv
352.598 490.723 352.762 490.859 352.961 490.984 cv
353.16 491.117 353.398 491.254 353.672 491.395 cv
354.133 491.16 354.484 490.895 354.734 490.605 cv
354.977 490.316 355.102 490 355.105 489.648 cv
cp
355.395 494.332 mo
355.395 494.121 355.355 493.93 355.277 493.758 cv
355.199 493.586 355.078 493.426 354.922 493.277 cv
354.762 493.129 354.566 492.988 354.332 492.848 cv
354.094 492.711 353.82 492.562 353.516 492.41 cv
353.223 492.551 352.969 492.695 352.754 492.836 cv
352.535 492.98 352.359 493.125 352.219 493.273 cv
352.078 493.426 351.973 493.586 351.902 493.754 cv
351.832 493.922 351.797 494.105 351.797 494.305 cv
351.797 494.75 351.949 495.094 352.254 495.336 cv
352.559 495.582 353.012 495.703 353.617 495.699 cv
354.199 495.703 354.641 495.582 354.945 495.332 cv
355.242 495.09 355.395 494.754 355.395 494.332 cv
cp
f
426.438 496.02 mo
426.434 496.109 426.426 496.184 426.414 496.242 cv
426.398 496.305 426.379 496.355 426.359 496.387 cv
426.336 496.426 426.313 496.449 426.281 496.465 cv
426.25 496.48 426.219 496.488 426.188 496.488 cv
421.547 496.488 li
421.516 496.488 421.484 496.48 421.457 496.465 cv
421.43 496.449 421.402 496.426 421.379 496.387 cv
421.348 496.355 421.328 496.305 421.32 496.242 cv
421.305 496.184 421.301 496.109 421.301 496.02 cv
421.301 495.941 421.305 495.871 421.32 495.809 cv
421.328 495.75 421.348 495.703 421.371 495.66 cv
421.391 495.625 421.414 495.594 421.445 495.57 cv
421.473 495.551 421.508 495.539 421.547 495.539 cv
423.402 495.539 li
423.402 488.785 li
421.684 489.805 li
421.594 489.855 421.523 489.883 421.473 489.891 cv
421.418 489.898 421.379 489.891 421.348 489.859 cv
421.316 489.832 421.293 489.781 421.281 489.711 cv
421.27 489.645 421.266 489.559 421.266 489.449 cv
421.266 489.375 421.266 489.309 421.273 489.25 cv
421.277 489.199 421.289 489.152 421.305 489.113 cv
421.316 489.078 421.336 489.047 421.363 489.02 cv
421.387 488.992 421.422 488.965 421.465 488.934 cv
423.512 487.621 li
423.527 487.613 423.551 487.602 423.578 487.59 cv
423.605 487.582 423.641 487.574 423.684 487.562 cv
423.723 487.555 423.77 487.547 423.828 487.543 cv
423.879 487.543 423.949 487.543 424.031 487.539 cv
424.141 487.543 424.23 487.547 424.309 487.555 cv
424.379 487.566 424.438 487.578 424.477 487.594 cv
424.516 487.609 424.543 487.633 424.559 487.656 cv
424.574 487.684 424.582 487.707 424.582 487.734 cv
424.582 495.539 li
426.188 495.539 li
426.223 495.539 426.254 495.551 426.289 495.57 cv
426.32 495.594 426.348 495.625 426.371 495.66 cv
426.387 495.703 426.402 495.75 426.418 495.809 cv
426.426 495.871 426.434 495.941 426.438 496.02 cv
cp
f
433.789 492.023 mo
433.785 492.707 433.73 493.332 433.625 493.895 cv
433.516 494.461 433.34 494.945 433.09 495.348 cv
432.84 495.754 432.512 496.066 432.113 496.285 cv
431.707 496.508 431.211 496.617 430.625 496.617 cv
430.063 496.617 429.594 496.52 429.211 496.32 cv
428.828 496.121 428.52 495.828 428.285 495.441 cv
428.051 495.055 427.883 494.578 427.789 494.012 cv
427.688 493.449 427.641 492.801 427.645 492.066 cv
427.641 491.391 427.695 490.77 427.809 490.203 cv
427.914 489.637 428.094 489.152 428.344 488.746 cv
428.59 488.344 428.914 488.027 429.316 487.805 cv
429.719 487.586 430.211 487.477 430.801 487.473 cv
431.359 487.477 431.832 487.578 432.219 487.773 cv
432.598 487.977 432.906 488.27 433.141 488.652 cv
433.371 489.043 433.539 489.516 433.641 490.078 cv
433.738 490.645 433.785 491.293 433.789 492.023 cv
cp
432.582 492.105 mo
432.578 491.664 432.563 491.27 432.531 490.914 cv
432.496 490.562 432.449 490.25 432.391 489.98 cv
432.324 489.711 432.242 489.477 432.148 489.281 cv
432.047 489.086 431.93 488.926 431.797 488.801 cv
431.656 488.676 431.5 488.586 431.324 488.527 cv
431.148 488.473 430.953 488.445 430.734 488.441 cv
430.344 488.445 430.027 488.535 429.785 488.715 cv
429.543 488.898 429.352 489.148 429.211 489.469 cv
429.07 489.789 428.973 490.168 428.926 490.598 cv
428.871 491.031 428.848 491.492 428.852 491.984 cv
428.848 492.652 428.883 493.219 428.953 493.68 cv
429.023 494.148 429.133 494.527 429.281 494.816 cv
429.43 495.113 429.617 495.324 429.852 495.453 cv
430.078 495.59 430.359 495.656 430.691 495.652 cv
430.945 495.656 431.172 495.613 431.367 495.527 cv
431.563 495.445 431.727 495.328 431.867 495.172 cv
432.004 495.02 432.121 494.836 432.215 494.621 cv
432.305 494.406 432.379 494.168 432.438 493.906 cv
432.488 493.648 432.527 493.367 432.551 493.059 cv
432.57 492.758 432.578 492.437 432.582 492.105 cv
cp
f
500.047 496.02 mo
500.043 496.109 500.035 496.184 500.023 496.242 cv
500.008 496.305 499.988 496.355 499.969 496.387 cv
499.945 496.426 499.922 496.449 499.891 496.465 cv
499.859 496.48 499.828 496.488 499.797 496.488 cv
495.156 496.488 li
495.125 496.488 495.094 496.48 495.066 496.465 cv
495.039 496.449 495.012 496.426 494.988 496.387 cv
494.957 496.355 494.938 496.305 494.93 496.242 cv
494.914 496.184 494.91 496.109 494.91 496.02 cv
494.91 495.941 494.914 495.871 494.93 495.809 cv
494.938 495.75 494.957 495.703 494.98 495.66 cv
495 495.625 495.023 495.594 495.055 495.57 cv
495.082 495.551 495.117 495.539 495.156 495.539 cv
497.012 495.539 li
497.012 488.785 li
495.293 489.805 li
495.203 489.855 495.133 489.883 495.082 489.891 cv
495.027 489.898 494.988 489.891 494.957 489.859 cv
494.926 489.832 494.902 489.781 494.891 489.711 cv
494.879 489.645 494.875 489.559 494.875 489.449 cv
494.875 489.375 494.875 489.309 494.883 489.25 cv
494.887 489.199 494.898 489.152 494.914 489.113 cv
494.926 489.078 494.945 489.047 494.973 489.02 cv
494.996 488.992 495.031 488.965 495.074 488.934 cv
497.121 487.621 li
497.137 487.613 497.16 487.602 497.188 487.59 cv
497.215 487.582 497.25 487.574 497.293 487.562 cv
497.332 487.555 497.379 487.547 497.438 487.543 cv
497.488 487.543 497.559 487.543 497.641 487.539 cv
497.75 487.543 497.84 487.547 497.918 487.555 cv
497.988 487.566 498.047 487.578 498.086 487.594 cv
498.125 487.609 498.152 487.633 498.168 487.656 cv
498.184 487.684 498.191 487.707 498.191 487.734 cv
498.191 495.539 li
499.797 495.539 li
499.832 495.539 499.863 495.551 499.898 495.57 cv
499.93 495.594 499.957 495.625 499.98 495.66 cv
499.996 495.703 500.012 495.75 500.027 495.809 cv
500.035 495.871 500.043 495.941 500.047 496.02 cv
cp
f
507.105 495.98 mo
507.102 496.066 507.098 496.141 507.09 496.203 cv
507.078 496.27 507.063 496.324 507.043 496.363 cv
507.02 496.41 506.988 496.441 506.957 496.457 cv
506.918 496.48 506.883 496.488 506.848 496.488 cv
501.938 496.488 li
501.871 496.488 501.813 496.48 501.766 496.465 cv
501.715 496.449 501.676 496.426 501.645 496.387 cv
501.609 496.355 501.582 496.301 501.566 496.23 cv
501.547 496.16 501.539 496.074 501.543 495.973 cv
501.539 495.883 501.543 495.805 501.555 495.734 cv
501.559 495.668 501.574 495.605 501.602 495.551 cv
501.621 495.5 501.652 495.449 501.688 495.395 cv
501.723 495.344 501.77 495.289 501.828 495.227 cv
503.605 493.398 li
504.012 492.98 504.34 492.602 504.59 492.266 cv
504.832 491.934 505.023 491.629 505.164 491.352 cv
505.297 491.082 505.387 490.832 505.43 490.605 cv
505.469 490.379 505.488 490.168 505.492 489.973 cv
505.488 489.777 505.457 489.594 505.391 489.414 cv
505.324 489.242 505.227 489.086 505.105 488.949 cv
504.977 488.82 504.82 488.715 504.633 488.633 cv
504.441 488.559 504.227 488.52 503.984 488.516 cv
503.695 488.52 503.434 488.559 503.207 488.633 cv
502.973 488.715 502.773 488.801 502.605 488.887 cv
502.43 488.98 502.285 489.062 502.172 489.141 cv
502.055 489.219 501.969 489.258 501.914 489.258 cv
501.879 489.258 501.852 489.25 501.828 489.23 cv
501.801 489.215 501.777 489.184 501.762 489.141 cv
501.742 489.102 501.73 489.047 501.723 488.977 cv
501.715 488.906 501.711 488.824 501.711 488.727 cv
501.711 488.66 501.711 488.602 501.715 488.551 cv
501.719 488.5 501.727 488.457 501.738 488.418 cv
501.75 488.387 501.766 488.352 501.785 488.316 cv
501.801 488.289 501.836 488.25 501.895 488.199 cv
501.945 488.152 502.043 488.086 502.18 488 cv
502.313 487.918 502.48 487.836 502.688 487.758 cv
502.887 487.68 503.109 487.613 503.359 487.555 cv
503.602 487.504 503.859 487.477 504.133 487.473 cv
504.559 487.477 504.938 487.539 505.262 487.656 cv
505.582 487.781 505.848 487.945 506.066 488.152 cv
506.277 488.367 506.438 488.613 506.543 488.887 cv
506.648 489.168 506.703 489.465 506.703 489.777 cv
506.703 490.066 506.676 490.348 506.625 490.629 cv
506.574 490.91 506.469 491.215 506.305 491.543 cv
506.141 491.871 505.906 492.234 505.602 492.633 cv
505.297 493.035 504.887 493.496 504.379 494.016 cv
502.973 495.484 li
506.84 495.484 li
506.871 495.488 506.906 495.496 506.945 495.516 cv
506.977 495.539 507.008 495.57 507.035 495.609 cv
507.059 495.652 507.078 495.707 507.09 495.766 cv
507.098 495.828 507.102 495.898 507.105 495.98 cv
cp
f
573.629 496.02 mo
573.625 496.109 573.617 496.184 573.605 496.242 cv
573.59 496.305 573.57 496.355 573.551 496.387 cv
573.527 496.426 573.504 496.449 573.473 496.465 cv
573.441 496.48 573.41 496.488 573.379 496.488 cv
568.738 496.488 li
568.707 496.488 568.676 496.48 568.648 496.465 cv
568.621 496.449 568.594 496.426 568.57 496.387 cv
568.539 496.355 568.52 496.305 568.512 496.242 cv
568.496 496.184 568.492 496.109 568.492 496.02 cv
568.492 495.941 568.496 495.871 568.512 495.809 cv
568.52 495.75 568.539 495.703 568.563 495.66 cv
568.582 495.625 568.605 495.594 568.637 495.57 cv
568.664 495.551 568.699 495.539 568.738 495.539 cv
570.594 495.539 li
570.594 488.785 li
568.875 489.805 li
568.785 489.855 568.715 489.883 568.664 489.891 cv
568.609 489.898 568.57 489.891 568.539 489.859 cv
568.508 489.832 568.484 489.781 568.473 489.711 cv
568.461 489.645 568.457 489.559 568.457 489.449 cv
568.457 489.375 568.457 489.309 568.465 489.25 cv
568.469 489.199 568.48 489.152 568.496 489.113 cv
568.508 489.078 568.527 489.047 568.555 489.02 cv
568.578 488.992 568.613 488.965 568.656 488.934 cv
570.703 487.621 li
570.719 487.613 570.742 487.602 570.77 487.59 cv
570.797 487.582 570.832 487.574 570.875 487.562 cv
570.914 487.555 570.961 487.547 571.02 487.543 cv
571.07 487.543 571.141 487.543 571.223 487.539 cv
571.332 487.543 571.422 487.547 571.5 487.555 cv
571.57 487.566 571.629 487.578 571.668 487.594 cv
571.707 487.609 571.734 487.633 571.75 487.656 cv
571.766 487.684 571.773 487.707 571.773 487.734 cv
571.773 495.539 li
573.379 495.539 li
573.414 495.539 573.445 495.551 573.48 495.57 cv
573.512 495.594 573.539 495.625 573.563 495.66 cv
573.578 495.703 573.594 495.75 573.609 495.809 cv
573.617 495.871 573.625 495.941 573.629 496.02 cv
cp
f
581.063 493.961 mo
581.059 494.117 581.035 494.234 580.992 494.32 cv
580.945 494.406 580.883 494.449 580.801 494.449 cv
579.801 494.449 li
579.801 496.316 li
579.801 496.355 579.789 496.387 579.77 496.41 cv
579.75 496.437 579.719 496.457 579.672 496.477 cv
579.625 496.492 579.563 496.504 579.488 496.516 cv
579.41 496.523 579.313 496.527 579.199 496.531 cv
579.082 496.527 578.988 496.523 578.914 496.516 cv
578.836 496.504 578.777 496.492 578.734 496.477 cv
578.688 496.457 578.656 496.437 578.641 496.41 cv
578.625 496.387 578.617 496.355 578.617 496.316 cv
578.617 494.449 li
574.984 494.449 li
574.93 494.449 574.883 494.445 574.848 494.43 cv
574.809 494.418 574.773 494.391 574.746 494.352 cv
574.715 494.316 574.695 494.266 574.684 494.195 cv
574.672 494.129 574.668 494.039 574.668 493.926 cv
574.668 493.844 574.668 493.766 574.676 493.695 cv
574.676 493.629 574.688 493.566 574.703 493.504 cv
574.715 493.449 574.73 493.395 574.758 493.34 cv
574.777 493.293 574.805 493.234 574.84 493.172 cv
578.008 487.773 li
578.031 487.742 578.063 487.711 578.109 487.68 cv
578.148 487.656 578.207 487.633 578.281 487.609 cv
578.348 487.594 578.434 487.582 578.539 487.574 cv
578.637 487.57 578.758 487.566 578.902 487.562 cv
579.055 487.566 579.188 487.57 579.305 487.578 cv
579.414 487.59 579.508 487.605 579.582 487.621 cv
579.648 487.645 579.703 487.668 579.742 487.695 cv
579.781 487.727 579.801 487.762 579.801 487.801 cv
579.801 493.473 li
580.801 493.473 li
580.875 493.477 580.938 493.516 580.988 493.594 cv
581.035 493.676 581.059 493.801 581.063 493.961 cv
cp
578.617 488.598 mo
578.605 488.598 li
575.746 493.473 li
578.617 493.473 li
cp
f
647.238 496.02 mo
647.234 496.109 647.227 496.184 647.215 496.242 cv
647.199 496.305 647.18 496.355 647.16 496.387 cv
647.137 496.426 647.113 496.449 647.082 496.465 cv
647.051 496.48 647.02 496.488 646.988 496.488 cv
642.348 496.488 li
642.316 496.488 642.285 496.48 642.258 496.465 cv
642.23 496.449 642.203 496.426 642.18 496.387 cv
642.148 496.355 642.129 496.305 642.121 496.242 cv
642.105 496.184 642.102 496.109 642.102 496.02 cv
642.102 495.941 642.105 495.871 642.121 495.809 cv
642.129 495.75 642.148 495.703 642.172 495.66 cv
642.191 495.625 642.215 495.594 642.246 495.57 cv
642.273 495.551 642.309 495.539 642.348 495.539 cv
644.203 495.539 li
644.203 488.785 li
642.484 489.805 li
642.395 489.855 642.324 489.883 642.273 489.891 cv
642.219 489.898 642.18 489.891 642.148 489.859 cv
642.117 489.832 642.094 489.781 642.082 489.711 cv
642.07 489.645 642.066 489.559 642.066 489.449 cv
642.066 489.375 642.066 489.309 642.074 489.25 cv
642.078 489.199 642.09 489.152 642.105 489.113 cv
642.117 489.078 642.137 489.047 642.164 489.02 cv
642.188 488.992 642.223 488.965 642.266 488.934 cv
644.313 487.621 li
644.328 487.613 644.352 487.602 644.379 487.59 cv
644.406 487.582 644.441 487.574 644.484 487.562 cv
644.523 487.555 644.57 487.547 644.629 487.543 cv
644.68 487.543 644.75 487.543 644.832 487.539 cv
644.941 487.543 645.031 487.547 645.109 487.555 cv
645.18 487.566 645.238 487.578 645.277 487.594 cv
645.316 487.609 645.344 487.633 645.359 487.656 cv
645.375 487.684 645.383 487.707 645.383 487.734 cv
645.383 495.539 li
646.988 495.539 li
647.023 495.539 647.055 495.551 647.09 495.57 cv
647.121 495.594 647.148 495.625 647.172 495.66 cv
647.188 495.703 647.203 495.75 647.219 495.809 cv
647.227 495.871 647.234 495.941 647.238 496.02 cv
cp
f
654.52 493.609 mo
654.516 494.004 654.457 494.379 654.34 494.742 cv
654.219 495.105 654.035 495.426 653.793 495.703 cv
653.543 495.98 653.23 496.203 652.852 496.367 cv
652.469 496.535 652.02 496.617 651.508 496.617 cv
651.133 496.617 650.805 496.574 650.523 496.48 cv
650.234 496.395 649.988 496.262 649.781 496.09 cv
649.57 495.922 649.395 495.715 649.258 495.465 cv
649.113 495.219 649 494.937 648.918 494.621 cv
648.832 494.309 648.773 493.965 648.738 493.586 cv
648.699 493.211 648.68 492.805 648.684 492.375 cv
648.68 491.996 648.703 491.613 648.746 491.223 cv
648.785 490.836 648.855 490.461 648.965 490.094 cv
649.066 489.734 649.211 489.395 649.395 489.074 cv
649.574 488.762 649.801 488.484 650.074 488.246 cv
650.344 488.012 650.672 487.824 651.055 487.687 cv
651.434 487.551 651.875 487.484 652.379 487.48 cv
652.547 487.484 652.719 487.492 652.895 487.512 cv
653.066 487.531 653.227 487.559 653.375 487.594 cv
653.52 487.629 653.641 487.668 653.742 487.707 cv
653.84 487.75 653.906 487.781 653.941 487.805 cv
653.973 487.832 653.996 487.863 654.016 487.891 cv
654.027 487.922 654.039 487.953 654.051 487.984 cv
654.059 488.023 654.066 488.062 654.074 488.102 cv
654.074 488.148 654.078 488.199 654.082 488.262 cv
654.078 488.348 654.078 488.422 654.078 488.477 cv
654.074 488.539 654.063 488.586 654.051 488.617 cv
654.031 488.656 654.012 488.684 653.988 488.699 cv
653.961 488.723 653.93 488.73 653.891 488.727 cv
653.836 488.73 653.766 488.715 653.684 488.68 cv
653.594 488.652 653.488 488.617 653.367 488.574 cv
653.242 488.539 653.094 488.504 652.918 488.469 cv
652.738 488.437 652.531 488.422 652.305 488.418 cv
651.875 488.422 651.508 488.508 651.203 488.68 cv
650.895 488.855 650.645 489.09 650.453 489.383 cv
650.254 489.676 650.109 490.016 650.02 490.402 cv
649.922 490.789 649.871 491.191 649.859 491.613 cv
649.977 491.543 650.109 491.477 650.258 491.406 cv
650.406 491.344 650.566 491.281 650.746 491.223 cv
650.918 491.172 651.105 491.129 651.305 491.09 cv
651.5 491.059 651.711 491.039 651.938 491.035 cv
652.418 491.039 652.824 491.105 653.152 491.23 cv
653.48 491.363 653.746 491.543 653.953 491.773 cv
654.156 492.008 654.301 492.281 654.391 492.594 cv
654.473 492.91 654.516 493.25 654.52 493.609 cv
cp
653.328 493.723 mo
653.328 493.457 653.301 493.219 653.246 493 cv
653.191 492.785 653.102 492.598 652.98 492.445 cv
652.855 492.297 652.691 492.18 652.488 492.094 cv
652.281 492.012 652.027 491.973 651.727 491.969 cv
651.555 491.973 651.387 491.988 651.219 492.016 cv
651.047 492.047 650.883 492.086 650.727 492.141 cv
650.566 492.195 650.414 492.258 650.273 492.324 cv
650.129 492.398 649.996 492.477 649.879 492.555 cv
649.875 493.148 649.914 493.641 649.992 494.035 cv
650.066 494.437 650.176 494.758 650.32 494.996 cv
650.465 495.238 650.645 495.41 650.859 495.512 cv
651.074 495.617 651.328 495.668 651.617 495.664 cv
651.906 495.668 652.16 495.613 652.379 495.5 cv
652.594 495.395 652.77 495.246 652.914 495.059 cv
653.055 494.871 653.16 494.664 653.227 494.434 cv
653.293 494.203 653.328 493.965 653.328 493.723 cv
cp
f
16.605 372.828 mo
16.703 372.832 16.785 372.836 16.852 372.844 cv
16.926 372.855 16.984 372.875 17.027 372.898 cv
17.078 372.926 17.113 372.957 17.129 372.988 cv
17.152 373.027 17.16 373.062 17.16 373.102 cv
17.16 377.941 li
17.16 378.062 17.121 378.176 17.039 378.281 cv
16.961 378.391 16.82 378.445 16.613 378.441 cv
7.621 378.441 li
7.418 378.445 7.277 378.391 7.195 378.281 cv
7.117 378.176 7.078 378.062 7.074 377.941 cv
7.074 373.156 li
7.078 373.117 7.086 373.078 7.105 373.043 cv
7.129 373.012 7.164 372.984 7.207 372.961 cv
7.258 372.941 7.316 372.926 7.383 372.91 cv
7.457 372.898 7.543 372.891 7.645 372.891 cv
7.738 372.891 7.82 372.898 7.891 372.91 cv
7.961 372.926 8.02 372.941 8.063 372.961 cv
8.109 372.984 8.141 373.012 8.16 373.043 cv
8.184 373.078 8.195 373.117 8.191 373.156 cv
8.191 377.102 li
11.355 377.102 li
11.355 373.719 li
11.359 373.68 11.371 373.641 11.391 373.605 cv
11.418 373.574 11.449 373.547 11.488 373.52 cv
11.531 373.5 11.59 373.484 11.66 373.469 cv
11.734 373.461 11.82 373.453 11.914 373.453 cv
12.012 373.453 12.09 373.461 12.156 373.469 cv
12.227 373.484 12.281 373.5 12.32 373.52 cv
12.363 373.547 12.395 373.574 12.41 373.605 cv
12.43 373.641 12.438 373.68 12.438 373.719 cv
12.438 377.102 li
16.047 377.102 li
16.047 373.102 li
16.047 373.062 16.059 373.027 16.078 372.988 cv
16.102 372.957 16.133 372.926 16.176 372.898 cv
16.223 372.875 16.281 372.855 16.348 372.844 cv
16.418 372.836 16.504 372.832 16.605 372.828 cv
cp
f
16.965 364.762 mo
17.012 364.762 17.047 364.773 17.07 364.793 cv
17.102 364.816 17.125 364.852 17.145 364.895 cv
17.164 364.945 17.176 365.008 17.191 365.09 cv
17.199 365.172 17.207 365.277 17.207 365.398 cv
17.207 365.531 17.199 365.637 17.191 365.719 cv
17.176 365.805 17.164 365.871 17.145 365.914 cv
17.125 365.965 17.102 365.996 17.07 366.016 cv
17.047 366.039 17.012 366.051 16.965 366.047 cv
12.859 366.047 li
12.461 366.051 12.141 366.082 11.895 366.141 cv
11.652 366.207 11.441 366.297 11.262 366.414 cv
11.086 366.531 10.949 366.687 10.855 366.875 cv
10.762 367.07 10.715 367.289 10.715 367.535 cv
10.715 367.859 10.832 368.184 11.059 368.504 cv
11.293 368.828 11.625 369.164 12.063 369.516 cv
16.965 369.516 li
17.012 369.52 17.047 369.531 17.07 369.547 cv
17.102 369.57 17.125 369.602 17.145 369.648 cv
17.164 369.695 17.176 369.762 17.191 369.84 cv
17.199 369.926 17.207 370.031 17.207 370.16 cv
17.207 370.289 17.199 370.395 17.191 370.473 cv
17.176 370.559 17.164 370.625 17.145 370.672 cv
17.125 370.727 17.102 370.758 17.07 370.773 cv
17.047 370.793 17.012 370.805 16.965 370.801 cv
9.953 370.801 li
9.914 370.805 9.879 370.797 9.848 370.777 cv
9.82 370.766 9.797 370.734 9.77 370.684 cv
9.75 370.641 9.734 370.578 9.723 370.504 cv
9.719 370.434 9.715 370.34 9.711 370.215 cv
9.715 370.105 9.719 370.008 9.723 369.93 cv
9.734 369.855 9.75 369.797 9.77 369.754 cv
9.797 369.715 9.82 369.687 9.848 369.668 cv
9.879 369.652 9.914 369.645 9.953 369.641 cv
10.879 369.641 li
10.438 369.25 10.117 368.855 9.91 368.461 cv
9.707 368.07 9.602 367.672 9.602 367.27 cv
9.602 366.801 9.684 366.41 9.84 366.09 cv
10.004 365.773 10.215 365.512 10.477 365.312 cv
10.742 365.117 11.051 364.977 11.406 364.891 cv
11.762 364.805 12.191 364.762 12.688 364.762 cv
cp
f
13.156 356.437 mo
13.359 356.441 13.5 356.492 13.586 356.59 cv
13.672 356.695 13.715 356.812 13.715 356.937 cv
13.715 361.555 li
14.105 361.559 14.457 361.52 14.77 361.437 cv
15.082 361.363 15.352 361.23 15.57 361.047 cv
15.797 360.867 15.969 360.633 16.086 360.336 cv
16.211 360.047 16.27 359.687 16.266 359.262 cv
16.27 358.93 16.242 358.633 16.184 358.371 cv
16.133 358.109 16.07 357.883 16 357.691 cv
15.934 357.504 15.875 357.348 15.816 357.223 cv
15.766 357.102 15.738 357.008 15.734 356.945 cv
15.738 356.91 15.746 356.879 15.762 356.848 cv
15.781 356.82 15.809 356.797 15.844 356.777 cv
15.883 356.766 15.934 356.754 15.996 356.742 cv
16.063 356.738 16.141 356.734 16.234 356.73 cv
16.305 356.734 16.363 356.738 16.41 356.738 cv
16.457 356.746 16.5 356.75 16.539 356.758 cv
16.578 356.766 16.613 356.781 16.645 356.797 cv
16.676 356.82 16.707 356.844 16.734 356.867 cv
16.766 356.898 16.813 356.98 16.875 357.121 cv
16.941 357.262 17.004 357.445 17.066 357.668 cv
17.129 357.895 17.184 358.152 17.234 358.445 cv
17.281 358.738 17.305 359.051 17.309 359.383 cv
17.305 359.961 17.227 360.469 17.066 360.898 cv
16.906 361.336 16.668 361.699 16.352 361.992 cv
16.035 362.293 15.641 362.516 15.16 362.664 cv
14.684 362.812 14.125 362.887 13.488 362.887 cv
12.891 362.887 12.352 362.812 11.867 362.656 cv
11.391 362.504 10.98 362.277 10.645 361.98 cv
10.309 361.687 10.051 361.332 9.871 360.918 cv
9.691 360.504 9.602 360.039 9.602 359.523 cv
9.602 358.973 9.691 358.504 9.867 358.117 cv
10.047 357.73 10.285 357.414 10.582 357.16 cv
10.883 356.914 11.234 356.73 11.633 356.613 cv
12.039 356.5 12.469 356.441 12.922 356.437 cv
cp
12.773 357.73 mo
12.098 357.715 11.566 357.867 11.184 358.184 cv
10.801 358.5 10.609 358.969 10.605 359.586 cv
10.609 359.91 10.668 360.191 10.785 360.43 cv
10.906 360.672 11.066 360.871 11.262 361.031 cv
11.461 361.195 11.691 361.32 11.953 361.406 cv
12.215 361.496 12.488 361.547 12.773 361.555 cv
cp
f
10.41 350.371 mo
10.527 350.375 10.625 350.375 10.699 350.379 cv
10.781 350.387 10.844 350.398 10.883 350.41 cv
10.93 350.43 10.961 350.449 10.984 350.469 cv
11.008 350.496 11.02 350.527 11.02 350.566 cv
11.02 350.609 11.008 350.66 10.984 350.719 cv
10.961 350.781 10.938 350.852 10.914 350.922 cv
10.891 351 10.871 351.082 10.848 351.176 cv
10.832 351.27 10.82 351.371 10.816 351.48 cv
10.82 351.613 10.848 351.742 10.895 351.863 cv
10.949 351.988 11.035 352.117 11.152 352.254 cv
11.277 352.395 11.434 352.539 11.629 352.687 cv
11.824 352.84 12.066 353.008 12.352 353.187 cv
16.965 353.187 li
17.012 353.191 17.047 353.203 17.07 353.219 cv
17.102 353.242 17.125 353.273 17.145 353.32 cv
17.164 353.367 17.176 353.434 17.191 353.512 cv
17.199 353.598 17.207 353.703 17.207 353.832 cv
17.207 353.961 17.199 354.066 17.191 354.145 cv
17.176 354.23 17.164 354.297 17.145 354.344 cv
17.125 354.398 17.102 354.43 17.07 354.445 cv
17.047 354.465 17.012 354.477 16.965 354.473 cv
9.953 354.473 li
9.914 354.477 9.879 354.469 9.848 354.449 cv
9.82 354.437 9.797 354.406 9.77 354.355 cv
9.75 354.312 9.734 354.25 9.723 354.176 cv
9.719 354.105 9.715 354.012 9.711 353.887 cv
9.715 353.777 9.719 353.68 9.723 353.602 cv
9.734 353.527 9.75 353.469 9.77 353.426 cv
9.797 353.387 9.82 353.359 9.848 353.34 cv
9.879 353.324 9.914 353.316 9.953 353.312 cv
10.973 353.312 li
10.691 353.125 10.465 352.941 10.289 352.77 cv
10.113 352.602 9.973 352.441 9.871 352.289 cv
9.77 352.141 9.699 351.992 9.66 351.844 cv
9.621 351.695 9.602 351.547 9.602 351.395 cv
9.602 351.328 9.605 351.25 9.613 351.164 cv
9.621 351.078 9.637 350.988 9.656 350.895 cv
9.68 350.801 9.703 350.719 9.727 350.641 cv
9.754 350.57 9.781 350.516 9.805 350.48 cv
9.836 350.453 9.859 350.434 9.879 350.418 cv
9.906 350.41 9.938 350.398 9.969 350.391 cv
10.008 350.383 10.059 350.379 10.129 350.375 cv
10.199 350.375 10.293 350.375 10.41 350.371 cv
cp
f
10.27 343.332 mo
10.453 343.336 10.586 343.359 10.664 343.406 cv
10.746 343.457 10.785 343.52 10.785 343.594 cv
10.785 344.602 li
10.973 344.422 11.18 344.293 11.406 344.219 cv
11.633 344.148 11.867 344.113 12.109 344.109 cv
12.516 344.113 12.875 344.18 13.188 344.305 cv
13.5 344.437 13.766 344.621 13.977 344.863 cv
14.195 345.105 14.359 345.395 14.473 345.723 cv
14.59 346.059 14.648 346.426 14.645 346.828 cv
14.648 347.117 14.609 347.391 14.531 347.645 cv
14.457 347.906 14.363 348.102 14.246 348.238 cv
14.344 348.332 14.449 348.41 14.566 348.469 cv
14.688 348.531 14.824 348.562 14.977 348.559 cv
15.16 348.562 15.313 348.477 15.43 348.305 cv
15.555 348.137 15.617 347.914 15.625 347.633 cv
15.703 345.801 li
15.715 345.453 15.762 345.137 15.848 344.844 cv
15.934 344.555 16.059 344.301 16.215 344.086 cv
16.375 343.875 16.566 343.707 16.797 343.586 cv
17.031 343.469 17.301 343.41 17.605 343.406 cv
17.926 343.41 18.23 343.477 18.523 343.609 cv
18.813 343.746 19.066 343.953 19.289 344.23 cv
19.508 344.512 19.684 344.867 19.813 345.297 cv
19.938 345.727 20 346.234 20.004 346.82 cv
20 347.391 19.953 347.875 19.859 348.27 cv
19.762 348.668 19.629 348.992 19.465 349.246 cv
19.297 349.5 19.102 349.684 18.871 349.797 cv
18.637 349.914 18.383 349.973 18.117 349.969 cv
17.945 349.973 17.781 349.953 17.621 349.906 cv
17.457 349.867 17.305 349.805 17.16 349.719 cv
17.016 349.637 16.879 349.527 16.742 349.398 cv
16.613 349.273 16.48 349.129 16.352 348.957 cv
16.223 349.215 16.059 349.402 15.859 349.523 cv
15.664 349.645 15.453 349.703 15.219 349.703 cv
14.906 349.703 14.621 349.641 14.371 349.512 cv
14.121 349.383 13.898 349.223 13.699 349.027 cv
13.508 349.191 13.293 349.316 13.051 349.41 cv
12.813 349.504 12.52 349.551 12.172 349.551 cv
11.777 349.551 11.418 349.484 11.098 349.348 cv
10.781 349.215 10.516 349.027 10.297 348.785 cv
10.082 348.547 9.914 348.262 9.793 347.926 cv
9.68 347.594 9.621 347.227 9.617 346.828 cv
9.621 346.617 9.633 346.418 9.652 346.234 cv
9.68 346.051 9.711 345.879 9.75 345.715 cv
9.75 343.594 li
9.754 343.508 9.797 343.441 9.879 343.398 cv
9.969 343.355 10.098 343.336 10.27 343.332 cv
cp
12.117 345.34 mo
11.645 345.344 11.273 345.477 11 345.734 cv
10.734 346 10.598 346.371 10.598 346.852 cv
10.598 347.105 10.641 347.324 10.723 347.504 cv
10.809 347.691 10.922 347.844 11.066 347.965 cv
11.215 348.086 11.383 348.176 11.57 348.234 cv
11.758 348.297 11.957 348.328 12.164 348.324 cv
12.629 348.328 12.992 348.195 13.258 347.934 cv
13.523 347.672 13.656 347.305 13.652 346.828 cv
13.656 346.578 13.617 346.359 13.531 346.168 cv
13.453 345.984 13.34 345.828 13.199 345.703 cv
13.059 345.582 12.895 345.492 12.703 345.43 cv
12.52 345.375 12.324 345.344 12.117 345.34 cv
cp
17.676 344.695 mo
17.371 344.699 17.141 344.824 16.977 345.066 cv
16.816 345.316 16.727 345.648 16.715 346.066 cv
16.652 347.883 li
16.785 348.051 16.91 348.187 17.023 348.289 cv
17.141 348.398 17.25 348.48 17.359 348.543 cv
17.465 348.605 17.57 348.648 17.676 348.672 cv
17.777 348.695 17.883 348.707 17.992 348.707 cv
18.328 348.707 18.582 348.539 18.762 348.195 cv
18.934 347.855 19.023 347.375 19.023 346.758 cv
19.023 346.371 18.984 346.047 18.91 345.781 cv
18.832 345.523 18.73 345.312 18.609 345.148 cv
18.48 344.992 18.34 344.875 18.18 344.801 cv
18.02 344.734 17.852 344.699 17.676 344.695 cv
cp
f
17.16 338.477 mo
19.738 339.41 li
19.82 339.445 19.883 339.523 19.93 339.648 cv
19.973 339.777 19.996 339.973 19.996 340.23 cv
19.996 340.371 19.988 340.48 19.977 340.559 cv
19.961 340.645 19.938 340.707 19.91 340.746 cv
19.875 340.793 19.836 340.816 19.785 340.82 cv
19.73 340.828 19.668 340.816 19.598 340.781 cv
17.16 339.816 li
17.141 339.863 17.109 339.91 17.059 339.949 cv
17.016 339.996 16.965 340.023 16.91 340.035 cv
10.207 342.535 li
10.102 342.578 10.016 342.602 9.953 342.598 cv
9.891 342.602 9.844 342.578 9.805 342.535 cv
9.773 342.496 9.746 342.43 9.73 342.332 cv
9.719 342.242 9.715 342.117 9.711 341.961 cv
9.715 341.805 9.719 341.684 9.723 341.594 cv
9.734 341.508 9.746 341.437 9.766 341.383 cv
9.789 341.332 9.82 341.293 9.855 341.27 cv
9.898 341.246 9.953 341.223 10.016 341.195 cv
15.641 339.191 li
15.641 339.168 li
9.984 337.238 li
9.887 337.207 9.824 337.172 9.793 337.125 cv
9.77 337.086 9.746 337.02 9.73 336.926 cv
9.719 336.84 9.715 336.711 9.711 336.543 cv
9.715 336.398 9.719 336.277 9.73 336.184 cv
9.746 336.09 9.773 336.023 9.805 335.977 cv
9.844 335.937 9.891 335.914 9.953 335.91 cv
10.016 335.914 10.094 335.93 10.184 335.957 cv
cp
f
15.734 323.84 mo
15.82 323.84 15.891 323.844 15.953 323.848 cv
16.016 323.855 16.07 323.863 16.117 323.875 cv
16.164 323.891 16.207 323.91 16.242 323.926 cv
16.281 323.949 16.324 323.984 16.375 324.035 cv
16.426 324.09 16.504 324.199 16.609 324.363 cv
16.719 324.531 16.824 324.738 16.922 324.984 cv
17.027 325.23 17.109 325.512 17.18 325.832 cv
17.246 326.152 17.281 326.504 17.285 326.879 cv
17.281 327.539 17.176 328.129 16.957 328.656 cv
16.742 329.184 16.422 329.633 15.992 330.004 cv
15.57 330.375 15.043 330.66 14.414 330.859 cv
13.789 331.059 13.066 331.16 12.25 331.156 cv
11.414 331.16 10.672 331.051 10.016 330.836 cv
9.363 330.621 8.809 330.32 8.352 329.93 cv
7.898 329.543 7.551 329.078 7.313 328.531 cv
7.074 327.992 6.953 327.387 6.953 326.723 cv
6.953 326.434 6.98 326.152 7.035 325.875 cv
7.09 325.602 7.16 325.348 7.238 325.113 cv
7.324 324.883 7.418 324.676 7.527 324.488 cv
7.637 324.309 7.727 324.18 7.797 324.109 cv
7.867 324.039 7.922 323.996 7.957 323.973 cv
7.996 323.957 8.039 323.937 8.086 323.922 cv
8.137 323.91 8.195 323.902 8.262 323.891 cv
8.332 323.887 8.414 323.883 8.504 323.879 cv
8.609 323.883 8.695 323.887 8.766 323.895 cv
8.84 323.906 8.902 323.922 8.949 323.941 cv
9.004 323.965 9.039 323.988 9.059 324.016 cv
9.086 324.047 9.098 324.082 9.094 324.121 cv
9.098 324.195 9.047 324.301 8.941 324.43 cv
8.844 324.562 8.734 324.73 8.609 324.934 cv
8.492 325.145 8.379 325.395 8.273 325.687 cv
8.176 325.984 8.125 326.336 8.121 326.746 cv
8.125 327.199 8.215 327.609 8.391 327.977 cv
8.57 328.344 8.832 328.66 9.18 328.918 cv
9.531 329.184 9.957 329.383 10.457 329.523 cv
10.957 329.668 11.531 329.742 12.172 329.738 cv
12.816 329.742 13.383 329.672 13.871 329.531 cv
14.363 329.395 14.773 329.195 15.102 328.937 cv
15.434 328.68 15.68 328.363 15.848 327.988 cv
16.02 327.613 16.105 327.187 16.102 326.707 cv
16.105 326.309 16.055 325.957 15.953 325.656 cv
15.855 325.355 15.746 325.102 15.621 324.887 cv
15.5 324.68 15.391 324.504 15.289 324.367 cv
15.195 324.23 15.145 324.125 15.141 324.043 cv
15.145 324.012 15.152 323.98 15.164 323.949 cv
15.184 323.926 15.215 323.902 15.254 323.887 cv
15.301 323.871 15.359 323.859 15.438 323.852 cv
15.516 323.844 15.617 323.84 15.734 323.84 cv
cp
f
13.379 315.695 mo
13.957 315.699 14.484 315.773 14.961 315.922 cv
15.445 316.074 15.859 316.301 16.203 316.598 cv
16.555 316.898 16.824 317.273 17.016 317.719 cv
17.211 318.172 17.305 318.691 17.309 319.281 cv
17.305 319.859 17.223 320.363 17.051 320.789 cv
16.883 321.219 16.633 321.574 16.305 321.859 cv
15.977 322.148 15.582 322.363 15.113 322.5 cv
14.648 322.641 14.117 322.707 13.52 322.707 cv
12.953 322.707 12.426 322.637 11.945 322.488 cv
11.465 322.344 11.051 322.117 10.699 321.816 cv
10.352 321.52 10.082 321.148 9.891 320.699 cv
9.699 320.254 9.602 319.73 9.602 319.133 cv
9.602 318.555 9.688 318.055 9.859 317.625 cv
10.031 317.199 10.281 316.84 10.609 316.555 cv
10.938 316.27 11.336 316.055 11.801 315.91 cv
12.27 315.77 12.797 315.699 13.379 315.695 cv
cp
13.465 317.027 mo
13.09 317.031 12.73 317.066 12.391 317.133 cv
12.055 317.207 11.762 317.324 11.504 317.484 cv
11.254 317.648 11.051 317.867 10.898 318.145 cv
10.754 318.426 10.68 318.773 10.676 319.184 cv
10.68 319.57 10.746 319.898 10.879 320.172 cv
11.016 320.449 11.207 320.676 11.453 320.852 cv
11.699 321.031 11.992 321.164 12.328 321.246 cv
12.668 321.336 13.035 321.379 13.434 321.375 cv
13.82 321.379 14.184 321.344 14.52 321.27 cv
14.859 321.203 15.152 321.086 15.402 320.918 cv
15.656 320.754 15.859 320.531 16.004 320.254 cv
16.156 319.977 16.23 319.629 16.227 319.215 cv
16.23 318.84 16.16 318.512 16.023 318.23 cv
15.891 317.953 15.703 317.727 15.453 317.547 cv
15.211 317.371 14.918 317.242 14.582 317.156 cv
14.246 317.074 13.875 317.031 13.465 317.027 cv
cp
f
16.965 307.77 mo
17.012 307.77 17.047 307.781 17.07 307.801 cv
17.102 307.824 17.125 307.859 17.145 307.902 cv
17.164 307.953 17.176 308.016 17.191 308.098 cv
17.199 308.18 17.207 308.285 17.207 308.406 cv
17.207 308.539 17.199 308.645 17.191 308.727 cv
17.176 308.812 17.164 308.879 17.145 308.922 cv
17.125 308.973 17.102 309.004 17.07 309.023 cv
17.047 309.047 17.012 309.059 16.965 309.055 cv
12.859 309.055 li
12.461 309.059 12.141 309.09 11.895 309.148 cv
11.652 309.215 11.441 309.305 11.262 309.422 cv
11.086 309.539 10.949 309.695 10.855 309.883 cv
10.762 310.078 10.715 310.297 10.715 310.543 cv
10.715 310.867 10.832 311.191 11.059 311.512 cv
11.293 311.836 11.625 312.172 12.063 312.523 cv
16.965 312.523 li
17.012 312.527 17.047 312.539 17.07 312.555 cv
17.102 312.578 17.125 312.609 17.145 312.656 cv
17.164 312.703 17.176 312.77 17.191 312.848 cv
17.199 312.934 17.207 313.039 17.207 313.168 cv
17.207 313.297 17.199 313.402 17.191 313.48 cv
17.176 313.566 17.164 313.633 17.145 313.68 cv
17.125 313.734 17.102 313.766 17.07 313.781 cv
17.047 313.801 17.012 313.812 16.965 313.809 cv
9.953 313.809 li
9.914 313.812 9.879 313.805 9.848 313.785 cv
9.82 313.773 9.797 313.742 9.77 313.691 cv
9.75 313.648 9.734 313.586 9.723 313.512 cv
9.719 313.441 9.715 313.348 9.711 313.223 cv
9.715 313.113 9.719 313.016 9.723 312.937 cv
9.734 312.863 9.75 312.805 9.77 312.762 cv
9.797 312.723 9.82 312.695 9.848 312.676 cv
9.879 312.66 9.914 312.652 9.953 312.648 cv
10.879 312.648 li
10.438 312.258 10.117 311.863 9.91 311.469 cv
9.707 311.078 9.602 310.68 9.602 310.277 cv
9.602 309.809 9.684 309.418 9.84 309.098 cv
10.004 308.781 10.215 308.52 10.477 308.32 cv
10.742 308.125 11.051 307.984 11.406 307.898 cv
11.762 307.812 12.191 307.77 12.688 307.77 cv
cp
f
15.055 301.027 mo
15.418 301.031 15.738 301.098 16.016 301.227 cv
16.297 301.359 16.531 301.547 16.723 301.789 cv
16.918 302.035 17.063 302.328 17.16 302.664 cv
17.258 303.004 17.305 303.375 17.309 303.777 cv
17.305 304.031 17.285 304.27 17.25 304.492 cv
17.207 304.719 17.16 304.918 17.102 305.098 cv
17.043 305.277 16.98 305.43 16.914 305.555 cv
16.852 305.68 16.793 305.773 16.738 305.828 cv
16.688 305.887 16.617 305.926 16.52 305.949 cv
16.43 305.977 16.301 305.988 16.141 305.988 cv
16.043 305.988 15.961 305.984 15.891 305.973 cv
15.824 305.965 15.77 305.953 15.727 305.934 cv
15.688 305.922 15.656 305.898 15.637 305.871 cv
15.621 305.844 15.613 305.812 15.609 305.773 cv
15.613 305.719 15.648 305.633 15.715 305.52 cv
15.789 305.41 15.867 305.273 15.945 305.105 cv
16.031 304.945 16.105 304.754 16.176 304.527 cv
16.246 304.309 16.281 304.051 16.281 303.754 cv
16.281 303.539 16.258 303.34 16.211 303.16 cv
16.164 302.984 16.098 302.832 16.004 302.703 cv
15.918 302.574 15.801 302.473 15.656 302.402 cv
15.52 302.332 15.352 302.297 15.156 302.297 cv
14.961 302.297 14.797 302.348 14.66 302.449 cv
14.527 302.551 14.406 302.687 14.301 302.852 cv
14.199 303.02 14.109 303.203 14.023 303.41 cv
13.945 303.621 13.859 303.836 13.77 304.055 cv
13.684 304.273 13.582 304.488 13.469 304.699 cv
13.359 304.91 13.227 305.102 13.063 305.266 cv
12.906 305.437 12.711 305.57 12.484 305.668 cv
12.262 305.773 11.996 305.824 11.684 305.82 cv
11.41 305.824 11.145 305.77 10.891 305.66 cv
10.641 305.555 10.422 305.395 10.23 305.18 cv
10.043 304.969 9.891 304.703 9.773 304.383 cv
9.66 304.062 9.602 303.691 9.602 303.262 cv
9.602 303.078 9.617 302.891 9.648 302.703 cv
9.68 302.52 9.719 302.352 9.766 302.195 cv
9.813 302.047 9.863 301.918 9.918 301.809 cv
9.973 301.707 10.023 301.625 10.063 301.566 cv
10.109 301.516 10.145 301.48 10.172 301.457 cv
10.203 301.441 10.238 301.426 10.273 301.418 cv
10.316 301.41 10.363 301.402 10.418 301.395 cv
10.477 301.387 10.547 301.383 10.629 301.383 cv
10.719 301.383 10.797 301.387 10.859 301.395 cv
10.93 301.402 10.98 301.418 11.02 301.434 cv
11.063 301.457 11.094 301.477 11.109 301.5 cv
11.129 301.527 11.137 301.559 11.137 301.586 cv
11.137 301.637 11.109 301.703 11.051 301.789 cv
10.996 301.879 10.934 301.992 10.867 302.133 cv
10.805 302.273 10.746 302.441 10.684 302.629 cv
10.629 302.82 10.598 303.035 10.598 303.277 cv
10.598 303.5 10.625 303.691 10.672 303.855 cv
10.727 304.023 10.797 304.16 10.883 304.266 cv
10.977 304.371 11.082 304.453 11.207 304.504 cv
11.332 304.562 11.469 304.59 11.613 304.586 cv
11.816 304.59 11.984 304.539 12.121 304.434 cv
12.262 304.332 12.383 304.195 12.484 304.027 cv
12.59 303.863 12.684 303.672 12.766 303.457 cv
12.852 303.246 12.938 303.031 13.023 302.809 cv
13.113 302.59 13.215 302.371 13.32 302.152 cv
13.43 301.937 13.559 301.746 13.715 301.578 cv
13.871 301.414 14.059 301.281 14.277 301.18 cv
14.496 301.082 14.758 301.031 15.055 301.027 cv
cp
f
16.965 293.18 mo
17.012 293.184 17.047 293.191 17.07 293.207 cv
17.102 293.227 17.125 293.262 17.145 293.305 cv
17.164 293.352 17.176 293.41 17.191 293.484 cv
17.199 293.562 17.207 293.656 17.207 293.762 cv
17.207 293.887 17.199 293.984 17.191 294.055 cv
17.176 294.133 17.164 294.191 17.145 294.234 cv
17.125 294.281 17.102 294.312 17.07 294.324 cv
17.047 294.344 17.012 294.352 16.965 294.348 cv
16.039 294.348 li
16.484 294.75 16.805 295.145 17.004 295.531 cv
17.207 295.926 17.305 296.32 17.309 296.715 cv
17.305 297.187 17.23 297.582 17.074 297.898 cv
16.922 298.219 16.711 298.477 16.441 298.672 cv
16.176 298.875 15.863 299.016 15.504 299.098 cv
15.148 299.187 14.715 299.23 14.207 299.227 cv
9.953 299.227 li
9.914 299.23 9.879 299.223 9.848 299.199 cv
9.82 299.184 9.797 299.148 9.77 299.094 cv
9.75 299.047 9.734 298.977 9.723 298.891 cv
9.719 298.809 9.715 298.707 9.711 298.578 cv
9.715 298.457 9.719 298.352 9.723 298.266 cv
9.734 298.184 9.75 298.117 9.77 298.07 cv
9.797 298.023 9.82 297.988 9.848 297.965 cv
9.879 297.945 9.914 297.937 9.953 297.934 cv
14.035 297.934 li
14.449 297.937 14.777 297.906 15.023 297.844 cv
15.27 297.785 15.48 297.695 15.652 297.57 cv
15.832 297.453 15.965 297.297 16.059 297.105 cv
16.156 296.922 16.207 296.703 16.203 296.453 cv
16.207 296.133 16.09 295.812 15.859 295.488 cv
15.633 295.172 15.297 294.832 14.852 294.473 cv
9.953 294.473 li
9.914 294.473 9.879 294.465 9.848 294.445 cv
9.82 294.43 9.797 294.395 9.77 294.34 cv
9.75 294.289 9.734 294.223 9.723 294.141 cv
9.719 294.062 9.715 293.957 9.711 293.824 cv
9.715 293.703 9.719 293.598 9.723 293.512 cv
9.734 293.43 9.75 293.367 9.77 293.32 cv
9.797 293.277 9.82 293.242 9.848 293.215 cv
9.879 293.195 9.914 293.184 9.953 293.18 cv
cp
f
16.965 280.402 mo
17.012 280.406 17.047 280.414 17.07 280.434 cv
17.102 280.457 17.125 280.492 17.145 280.535 cv
17.164 280.586 17.176 280.652 17.191 280.73 cv
17.199 280.816 17.207 280.918 17.207 281.043 cv
17.207 281.176 17.199 281.285 17.191 281.363 cv
17.176 281.449 17.164 281.516 17.145 281.562 cv
17.125 281.617 17.102 281.652 17.07 281.668 cv
17.047 281.691 17.012 281.699 16.965 281.699 cv
12.703 281.699 li
12.41 281.699 12.141 281.727 11.895 281.777 cv
11.652 281.832 11.441 281.914 11.262 282.027 cv
11.086 282.141 10.949 282.285 10.855 282.461 cv
10.762 282.641 10.715 282.852 10.715 283.086 cv
10.715 283.383 10.832 283.68 11.059 283.977 cv
11.293 284.281 11.625 284.609 12.063 284.965 cv
16.965 284.965 li
17.012 284.969 17.047 284.98 17.07 284.996 cv
17.102 285.02 17.125 285.051 17.145 285.098 cv
17.164 285.148 17.176 285.215 17.191 285.297 cv
17.199 285.383 17.207 285.488 17.207 285.609 cv
17.207 285.73 17.199 285.832 17.191 285.918 cv
17.176 286.004 17.164 286.074 17.145 286.121 cv
17.125 286.176 17.102 286.207 17.07 286.223 cv
17.047 286.242 17.012 286.254 16.965 286.25 cv
12.703 286.25 li
12.41 286.254 12.141 286.281 11.895 286.336 cv
11.652 286.395 11.441 286.48 11.262 286.594 cv
11.086 286.707 10.949 286.852 10.855 287.023 cv
10.762 287.203 10.715 287.41 10.715 287.645 cv
10.715 287.945 10.832 288.242 11.059 288.543 cv
11.293 288.844 11.625 289.172 12.063 289.523 cv
16.965 289.523 li
17.012 289.527 17.047 289.539 17.07 289.555 cv
17.102 289.578 17.125 289.609 17.145 289.656 cv
17.164 289.703 17.176 289.77 17.191 289.848 cv
17.199 289.934 17.207 290.039 17.207 290.168 cv
17.207 290.297 17.199 290.402 17.191 290.48 cv
17.176 290.566 17.164 290.633 17.145 290.68 cv
17.125 290.734 17.102 290.766 17.07 290.781 cv
17.047 290.801 17.012 290.812 16.965 290.809 cv
9.953 290.809 li
9.914 290.812 9.879 290.805 9.848 290.785 cv
9.82 290.773 9.797 290.742 9.77 290.691 cv
9.75 290.648 9.734 290.586 9.723 290.512 cv
9.719 290.441 9.715 290.348 9.711 290.223 cv
9.715 290.113 9.719 290.016 9.723 289.937 cv
9.734 289.863 9.75 289.805 9.77 289.762 cv
9.797 289.723 9.82 289.695 9.848 289.676 cv
9.879 289.66 9.914 289.652 9.953 289.648 cv
10.879 289.648 li
10.438 289.258 10.117 288.875 9.91 288.5 cv
9.707 288.133 9.602 287.754 9.602 287.371 cv
9.602 287.082 9.637 286.824 9.703 286.59 cv
9.773 286.363 9.867 286.156 9.988 285.977 cv
10.109 285.801 10.254 285.652 10.422 285.523 cv
10.594 285.402 10.785 285.297 10.988 285.211 cv
10.738 284.98 10.523 284.758 10.344 284.547 cv
10.172 284.336 10.027 284.133 9.914 283.937 cv
9.809 283.742 9.73 283.555 9.676 283.371 cv
9.629 283.187 9.602 283 9.602 282.812 cv
9.602 282.359 9.684 281.98 9.84 281.676 cv
10.004 281.371 10.215 281.125 10.477 280.93 cv
10.742 280.742 11.051 280.605 11.406 280.523 cv
11.762 280.445 12.137 280.406 12.531 280.402 cv
cp
f
13.348 271.602 mo
13.965 271.605 14.516 271.672 15.004 271.801 cv
15.492 271.937 15.906 272.133 16.246 272.387 cv
16.586 272.645 16.848 272.961 17.031 273.34 cv
17.215 273.719 17.305 274.152 17.309 274.641 cv
17.305 274.852 17.285 275.047 17.246 275.219 cv
17.203 275.398 17.141 275.57 17.051 275.734 cv
16.965 275.906 16.852 276.074 16.715 276.238 cv
16.582 276.41 16.426 276.586 16.242 276.77 cv
19.746 276.77 li
19.785 276.773 19.824 276.785 19.855 276.801 cv
19.887 276.824 19.91 276.855 19.934 276.902 cv
19.949 276.949 19.965 277.016 19.98 277.094 cv
19.988 277.18 19.996 277.285 19.996 277.414 cv
19.996 277.543 19.988 277.648 19.98 277.727 cv
19.965 277.812 19.949 277.879 19.934 277.926 cv
19.91 277.98 19.887 278.012 19.855 278.027 cv
19.824 278.047 19.785 278.059 19.746 278.055 cv
9.953 278.055 li
9.906 278.059 9.871 278.051 9.84 278.031 cv
9.816 278.02 9.789 277.988 9.766 277.937 cv
9.746 277.895 9.734 277.832 9.723 277.758 cv
9.719 277.687 9.715 277.602 9.711 277.492 cv
9.715 277.387 9.719 277.297 9.723 277.223 cv
9.734 277.156 9.746 277.098 9.766 277.047 cv
9.789 277.004 9.816 276.969 9.84 276.949 cv
9.871 276.934 9.906 276.926 9.953 276.922 cv
10.895 276.922 li
10.68 276.715 10.488 276.512 10.328 276.309 cv
10.168 276.113 10.035 275.914 9.926 275.711 cv
9.82 275.516 9.738 275.309 9.684 275.098 cv
9.629 274.887 9.602 274.664 9.602 274.43 cv
9.602 273.922 9.703 273.488 9.898 273.129 cv
10.098 272.77 10.367 272.48 10.707 272.254 cv
11.055 272.031 11.453 271.863 11.906 271.758 cv
12.363 271.656 12.844 271.605 13.348 271.602 cv
cp
13.496 272.934 mo
13.145 272.937 12.797 272.965 12.457 273.016 cv
12.125 273.074 11.828 273.168 11.566 273.301 cv
11.309 273.437 11.102 273.617 10.941 273.836 cv
10.789 274.062 10.711 274.34 10.707 274.676 cv
10.711 274.844 10.734 275.008 10.781 275.168 cv
10.832 275.332 10.91 275.5 11.016 275.664 cv
11.125 275.836 11.266 276.008 11.438 276.187 cv
11.613 276.371 11.828 276.566 12.078 276.77 cv
14.867 276.77 li
15.305 276.414 15.633 276.078 15.859 275.758 cv
16.09 275.441 16.207 275.105 16.203 274.754 cv
16.207 274.43 16.129 274.152 15.969 273.918 cv
15.816 273.691 15.605 273.504 15.344 273.355 cv
15.086 273.215 14.797 273.105 14.473 273.035 cv
14.152 272.969 13.828 272.937 13.496 272.934 cv
cp
f
16.449 266.109 mo
16.605 266.109 16.723 266.121 16.809 266.141 cv
16.898 266.164 16.965 266.195 17.004 266.234 cv
17.047 266.277 17.086 266.34 17.121 266.422 cv
17.156 266.508 17.184 266.602 17.211 266.707 cv
17.23 266.816 17.25 266.93 17.27 267.047 cv
17.281 267.164 17.289 267.285 17.293 267.402 cv
17.289 267.77 17.242 268.082 17.148 268.34 cv
17.055 268.602 16.91 268.812 16.711 268.977 cv
16.52 269.145 16.273 269.266 15.973 269.34 cv
15.676 269.418 15.324 269.457 14.914 269.453 cv
10.816 269.453 li
10.816 270.434 li
10.82 270.512 10.777 270.574 10.691 270.621 cv
10.609 270.668 10.477 270.691 10.285 270.691 cv
10.191 270.691 10.109 270.687 10.039 270.672 cv
9.977 270.664 9.918 270.645 9.871 270.621 cv
9.828 270.602 9.797 270.574 9.777 270.539 cv
9.762 270.508 9.754 270.473 9.75 270.426 cv
9.75 269.453 li
8.082 269.453 li
8.051 269.457 8.016 269.445 7.98 269.426 cv
7.953 269.41 7.926 269.379 7.898 269.324 cv
7.879 269.277 7.863 269.211 7.848 269.125 cv
7.84 269.047 7.832 268.941 7.832 268.812 cv
7.832 268.684 7.84 268.578 7.848 268.496 cv
7.863 268.414 7.879 268.348 7.898 268.301 cv
7.926 268.254 7.953 268.223 7.98 268.199 cv
8.016 268.184 8.051 268.172 8.082 268.168 cv
9.75 268.168 li
9.75 266.367 li
9.754 266.328 9.762 266.293 9.777 266.258 cv
9.797 266.23 9.828 266.203 9.871 266.176 cv
9.918 266.156 9.977 266.141 10.039 266.125 cv
10.109 266.117 10.191 266.109 10.285 266.109 cv
10.477 266.109 10.609 266.133 10.691 266.18 cv
10.777 266.227 10.82 266.289 10.816 266.367 cv
10.816 268.168 li
14.73 268.168 li
15.215 268.172 15.578 268.102 15.824 267.953 cv
16.074 267.812 16.199 267.555 16.195 267.184 cv
16.199 267.07 16.188 266.965 16.16 266.867 cv
16.141 266.777 16.117 266.695 16.086 266.617 cv
16.063 266.547 16.035 266.484 16.012 266.43 cv
15.988 266.383 15.977 266.336 15.977 266.289 cv
15.977 266.266 15.984 266.238 15.996 266.215 cv
16.012 266.191 16.035 266.176 16.07 266.16 cv
16.109 266.152 16.16 266.141 16.219 266.125 cv
16.285 266.117 16.363 266.109 16.449 266.109 cv
cp
f
16.965 263.094 mo
17.012 263.098 17.047 263.109 17.07 263.125 cv
17.102 263.148 17.125 263.18 17.145 263.227 cv
17.164 263.273 17.176 263.34 17.191 263.418 cv
17.199 263.504 17.207 263.609 17.207 263.738 cv
17.207 263.867 17.199 263.973 17.191 264.051 cv
17.176 264.137 17.164 264.203 17.145 264.25 cv
17.125 264.305 17.102 264.336 17.07 264.352 cv
17.047 264.371 17.012 264.383 16.965 264.379 cv
9.953 264.379 li
9.918 264.383 9.887 264.371 9.852 264.352 cv
9.824 264.336 9.797 264.305 9.773 264.25 cv
9.754 264.203 9.738 264.137 9.727 264.051 cv
9.719 263.973 9.715 263.867 9.711 263.738 cv
9.715 263.609 9.719 263.504 9.727 263.418 cv
9.738 263.34 9.754 263.273 9.773 263.227 cv
9.797 263.18 9.824 263.148 9.852 263.125 cv
9.887 263.109 9.918 263.098 9.953 263.094 cv
cp
7.582 262.945 mo
7.887 262.945 8.094 263.004 8.199 263.117 cv
8.313 263.23 8.367 263.441 8.363 263.746 cv
8.367 264.051 8.313 264.258 8.203 264.367 cv
8.098 264.484 7.895 264.539 7.598 264.535 cv
7.297 264.539 7.094 264.48 6.984 264.363 cv
6.879 264.25 6.824 264.039 6.82 263.73 cv
6.824 263.43 6.879 263.227 6.98 263.113 cv
7.09 263.004 7.289 262.945 7.582 262.945 cv
cp
f
13.379 254.152 mo
13.957 254.156 14.484 254.23 14.961 254.379 cv
15.445 254.531 15.859 254.758 16.203 255.055 cv
16.555 255.355 16.824 255.73 17.016 256.176 cv
17.211 256.629 17.305 257.148 17.309 257.738 cv
17.305 258.316 17.223 258.82 17.051 259.246 cv
16.883 259.676 16.633 260.031 16.305 260.316 cv
15.977 260.605 15.582 260.82 15.113 260.957 cv
14.648 261.098 14.117 261.164 13.52 261.164 cv
12.953 261.164 12.426 261.094 11.945 260.945 cv
11.465 260.801 11.051 260.574 10.699 260.273 cv
10.352 259.977 10.082 259.605 9.891 259.156 cv
9.699 258.711 9.602 258.187 9.602 257.59 cv
9.602 257.012 9.688 256.512 9.859 256.082 cv
10.031 255.656 10.281 255.297 10.609 255.012 cv
10.938 254.727 11.336 254.512 11.801 254.367 cv
12.27 254.227 12.797 254.156 13.379 254.152 cv
cp
13.465 255.484 mo
13.09 255.488 12.73 255.523 12.391 255.59 cv
12.055 255.664 11.762 255.781 11.504 255.941 cv
11.254 256.105 11.051 256.324 10.898 256.602 cv
10.754 256.883 10.68 257.23 10.676 257.641 cv
10.68 258.027 10.746 258.355 10.879 258.629 cv
11.016 258.906 11.207 259.133 11.453 259.309 cv
11.699 259.488 11.992 259.621 12.328 259.703 cv
12.668 259.793 13.035 259.836 13.434 259.832 cv
13.82 259.836 14.184 259.801 14.52 259.727 cv
14.859 259.66 15.152 259.543 15.402 259.375 cv
15.656 259.211 15.859 258.988 16.004 258.711 cv
16.156 258.434 16.23 258.086 16.227 257.672 cv
16.23 257.297 16.16 256.969 16.023 256.687 cv
15.891 256.41 15.703 256.184 15.453 256.004 cv
15.211 255.828 14.918 255.699 14.582 255.613 cv
14.246 255.531 13.875 255.488 13.465 255.484 cv
cp
f
16.965 246.227 mo
17.012 246.227 17.047 246.238 17.07 246.258 cv
17.102 246.281 17.125 246.316 17.145 246.359 cv
17.164 246.41 17.176 246.473 17.191 246.555 cv
17.199 246.637 17.207 246.742 17.207 246.863 cv
17.207 246.996 17.199 247.102 17.191 247.184 cv
17.176 247.27 17.164 247.336 17.145 247.379 cv
17.125 247.43 17.102 247.461 17.07 247.48 cv
17.047 247.504 17.012 247.516 16.965 247.512 cv
12.859 247.512 li
12.461 247.516 12.141 247.547 11.895 247.605 cv
11.652 247.672 11.441 247.762 11.262 247.879 cv
11.086 247.996 10.949 248.152 10.855 248.34 cv
10.762 248.535 10.715 248.754 10.715 249 cv
10.715 249.324 10.832 249.648 11.059 249.969 cv
11.293 250.293 11.625 250.629 12.063 250.98 cv
16.965 250.98 li
17.012 250.984 17.047 250.996 17.07 251.012 cv
17.102 251.035 17.125 251.066 17.145 251.113 cv
17.164 251.16 17.176 251.227 17.191 251.305 cv
17.199 251.391 17.207 251.496 17.207 251.625 cv
17.207 251.754 17.199 251.859 17.191 251.937 cv
17.176 252.023 17.164 252.09 17.145 252.137 cv
17.125 252.191 17.102 252.223 17.07 252.238 cv
17.047 252.258 17.012 252.27 16.965 252.266 cv
9.953 252.266 li
9.914 252.27 9.879 252.262 9.848 252.242 cv
9.82 252.23 9.797 252.199 9.77 252.148 cv
9.75 252.105 9.734 252.043 9.723 251.969 cv
9.719 251.898 9.715 251.805 9.711 251.68 cv
9.715 251.57 9.719 251.473 9.723 251.395 cv
9.734 251.32 9.75 251.262 9.77 251.219 cv
9.797 251.18 9.82 251.152 9.848 251.133 cv
9.879 251.117 9.914 251.109 9.953 251.105 cv
10.879 251.105 li
10.438 250.715 10.117 250.32 9.91 249.926 cv
9.707 249.535 9.602 249.137 9.602 248.734 cv
9.602 248.266 9.684 247.875 9.84 247.555 cv
10.004 247.238 10.215 246.977 10.477 246.777 cv
10.742 246.582 11.051 246.441 11.406 246.355 cv
11.762 246.27 12.191 246.227 12.688 246.227 cv
cp
f
6.422 237.387 mo
7.469 237.883 8.539 238.25 9.637 238.492 cv
10.738 238.734 11.844 238.855 12.953 238.855 cv
14.07 238.855 15.18 238.734 16.273 238.484 cv
17.371 238.242 18.441 237.879 19.496 237.402 cv
19.555 237.379 19.609 237.367 19.656 237.359 cv
19.699 237.359 19.734 237.375 19.766 237.41 cv
19.793 237.449 19.813 237.504 19.828 237.578 cv
19.836 237.656 19.844 237.762 19.848 237.887 cv
19.844 237.984 19.84 238.062 19.84 238.129 cv
19.832 238.199 19.824 238.258 19.809 238.305 cv
19.793 238.355 19.773 238.398 19.754 238.426 cv
19.73 238.461 19.707 238.484 19.684 238.496 cv
19.152 238.777 18.617 239.023 18.074 239.234 cv
17.531 239.453 16.98 239.633 16.422 239.773 cv
15.859 239.922 15.293 240.031 14.719 240.102 cv
14.145 240.18 13.563 240.215 12.977 240.211 cv
12.391 240.215 11.813 240.176 11.238 240.09 cv
10.668 240.012 10.102 239.895 9.535 239.746 cv
8.973 239.598 8.418 239.418 7.871 239.207 cv
7.328 238.996 6.785 238.758 6.25 238.488 cv
6.23 238.484 6.215 238.469 6.195 238.445 cv
6.184 238.422 6.168 238.391 6.148 238.348 cv
6.137 238.309 6.125 238.25 6.113 238.176 cv
6.109 238.105 6.105 238.012 6.102 237.895 cv
6.105 237.777 6.113 237.684 6.125 237.605 cv
6.145 237.535 6.164 237.477 6.188 237.434 cv
6.215 237.395 6.25 237.371 6.289 237.363 cv
6.336 237.359 6.379 237.367 6.422 237.387 cv
cp
f
16.941 228.492 mo
16.988 228.496 17.023 228.504 17.055 228.52 cv
17.09 228.539 17.117 228.574 17.137 228.625 cv
17.156 228.68 17.172 228.75 17.188 228.836 cv
17.199 228.926 17.207 229.039 17.207 229.18 cv
17.207 229.359 17.199 229.508 17.184 229.621 cv
17.168 229.738 17.141 229.824 17.098 229.879 cv
17.059 229.937 17.012 229.984 16.957 230.02 cv
11.914 233.73 li
16.957 233.73 li
16.996 233.734 17.031 233.742 17.063 233.762 cv
17.098 233.785 17.125 233.824 17.141 233.871 cv
17.16 233.926 17.172 233.992 17.188 234.078 cv
17.199 234.164 17.207 234.273 17.207 234.398 cv
17.207 234.527 17.199 234.633 17.188 234.719 cv
17.172 234.809 17.16 234.879 17.141 234.93 cv
17.125 234.984 17.098 235.02 17.063 235.039 cv
17.031 235.062 16.996 235.074 16.957 235.07 cv
7.277 235.07 li
7.238 235.074 7.203 235.062 7.168 235.039 cv
7.141 235.02 7.113 234.984 7.094 234.93 cv
7.078 234.879 7.063 234.809 7.047 234.719 cv
7.035 234.633 7.031 234.527 7.027 234.398 cv
7.031 234.273 7.035 234.164 7.047 234.078 cv
7.063 233.992 7.078 233.926 7.094 233.871 cv
7.113 233.824 7.141 233.785 7.168 233.762 cv
7.203 233.742 7.238 233.734 7.277 233.73 cv
11.758 233.73 li
7.277 230.16 li
7.234 230.133 7.195 230.098 7.16 230.051 cv
7.133 230.012 7.109 229.961 7.086 229.898 cv
7.07 229.844 7.055 229.77 7.043 229.68 cv
7.035 229.598 7.031 229.488 7.027 229.352 cv
7.031 229.219 7.035 229.109 7.047 229.023 cv
7.063 228.941 7.082 228.875 7.098 228.824 cv
7.121 228.777 7.145 228.742 7.176 228.723 cv
7.207 228.707 7.242 228.699 7.277 228.695 cv
7.348 228.699 7.414 228.715 7.48 228.746 cv
7.551 228.781 7.645 228.848 7.762 228.937 cv
11.758 232.281 li
16.543 228.68 li
16.684 228.594 16.773 228.539 16.82 228.52 cv
16.871 228.504 16.914 228.496 16.941 228.492 cv
cp
f
16.965 225.684 mo
17.012 225.687 17.047 225.699 17.07 225.715 cv
17.102 225.738 17.125 225.77 17.145 225.816 cv
17.164 225.863 17.176 225.93 17.191 226.008 cv
17.199 226.094 17.207 226.199 17.207 226.328 cv
17.207 226.457 17.199 226.562 17.191 226.641 cv
17.176 226.727 17.164 226.793 17.145 226.84 cv
17.125 226.895 17.102 226.926 17.07 226.941 cv
17.047 226.961 17.012 226.973 16.965 226.969 cv
9.953 226.969 li
9.918 226.973 9.887 226.961 9.852 226.941 cv
9.824 226.926 9.797 226.895 9.773 226.84 cv
9.754 226.793 9.738 226.727 9.727 226.641 cv
9.719 226.562 9.715 226.457 9.711 226.328 cv
9.715 226.199 9.719 226.094 9.727 226.008 cv
9.738 225.93 9.754 225.863 9.773 225.816 cv
9.797 225.77 9.824 225.738 9.852 225.715 cv
9.887 225.699 9.918 225.687 9.953 225.684 cv
cp
7.582 225.535 mo
7.887 225.535 8.094 225.594 8.199 225.707 cv
8.313 225.82 8.367 226.031 8.363 226.336 cv
8.367 226.641 8.313 226.848 8.203 226.957 cv
8.098 227.074 7.895 227.129 7.598 227.125 cv
7.297 227.129 7.094 227.07 6.984 226.953 cv
6.879 226.84 6.824 226.629 6.82 226.32 cv
6.824 226.02 6.879 225.816 6.98 225.703 cv
7.09 225.594 7.289 225.535 7.582 225.535 cv
cp
f
16.965 221.98 mo
17.012 221.984 17.047 221.996 17.07 222.012 cv
17.102 222.035 17.125 222.066 17.145 222.113 cv
17.164 222.16 17.176 222.227 17.191 222.305 cv
17.199 222.391 17.207 222.496 17.207 222.625 cv
17.207 222.754 17.199 222.859 17.191 222.937 cv
17.176 223.023 17.164 223.09 17.145 223.137 cv
17.125 223.191 17.102 223.223 17.07 223.238 cv
17.047 223.258 17.012 223.27 16.965 223.266 cv
6.555 223.266 li
6.516 223.27 6.48 223.258 6.445 223.238 cv
6.418 223.223 6.391 223.191 6.367 223.137 cv
6.348 223.09 6.332 223.023 6.32 222.937 cv
6.313 222.859 6.309 222.754 6.305 222.625 cv
6.309 222.496 6.313 222.391 6.32 222.305 cv
6.332 222.227 6.348 222.16 6.367 222.113 cv
6.391 222.066 6.418 222.035 6.445 222.012 cv
6.48 221.996 6.516 221.984 6.555 221.98 cv
cp
f
13.379 213.039 mo
13.957 213.043 14.484 213.117 14.961 213.266 cv
15.445 213.418 15.859 213.645 16.203 213.941 cv
16.555 214.242 16.824 214.617 17.016 215.062 cv
17.211 215.516 17.305 216.035 17.309 216.625 cv
17.305 217.203 17.223 217.707 17.051 218.133 cv
16.883 218.562 16.633 218.918 16.305 219.203 cv
15.977 219.492 15.582 219.707 15.113 219.844 cv
14.648 219.984 14.117 220.051 13.52 220.051 cv
12.953 220.051 12.426 219.98 11.945 219.832 cv
11.465 219.687 11.051 219.461 10.699 219.16 cv
10.352 218.863 10.082 218.492 9.891 218.043 cv
9.699 217.598 9.602 217.074 9.602 216.477 cv
9.602 215.898 9.688 215.398 9.859 214.969 cv
10.031 214.543 10.281 214.184 10.609 213.898 cv
10.938 213.613 11.336 213.398 11.801 213.254 cv
12.27 213.113 12.797 213.043 13.379 213.039 cv
cp
13.465 214.371 mo
13.09 214.375 12.73 214.41 12.391 214.477 cv
12.055 214.551 11.762 214.668 11.504 214.828 cv
11.254 214.992 11.051 215.211 10.898 215.488 cv
10.754 215.77 10.68 216.117 10.676 216.527 cv
10.68 216.914 10.746 217.242 10.879 217.516 cv
11.016 217.793 11.207 218.02 11.453 218.195 cv
11.699 218.375 11.992 218.508 12.328 218.59 cv
12.668 218.68 13.035 218.723 13.434 218.719 cv
13.82 218.723 14.184 218.687 14.52 218.613 cv
14.859 218.547 15.152 218.43 15.402 218.262 cv
15.656 218.098 15.859 217.875 16.004 217.598 cv
16.156 217.32 16.23 216.973 16.227 216.559 cv
16.23 216.184 16.16 215.855 16.023 215.574 cv
15.891 215.297 15.703 215.07 15.453 214.891 cv
15.211 214.715 14.918 214.586 14.582 214.5 cv
14.246 214.418 13.875 214.375 13.465 214.371 cv
cp
f
16.863 197.742 mo
16.938 197.766 16.996 197.797 17.039 197.836 cv
17.086 197.879 17.121 197.937 17.141 198.008 cv
17.164 198.086 17.176 198.176 17.191 198.277 cv
17.199 198.387 17.207 198.516 17.207 198.668 cv
17.207 198.832 17.199 198.969 17.191 199.078 cv
17.176 199.191 17.164 199.285 17.141 199.355 cv
17.121 199.434 17.086 199.488 17.039 199.52 cv
16.996 199.559 16.938 199.586 16.863 199.605 cv
9.25 201.719 li
9.25 201.73 li
16.863 203.68 li
16.938 203.699 16.996 203.723 17.039 203.758 cv
17.086 203.797 17.121 203.852 17.141 203.914 cv
17.164 203.984 17.176 204.07 17.191 204.176 cv
17.199 204.285 17.207 204.422 17.207 204.586 cv
17.207 204.758 17.199 204.898 17.191 205.012 cv
17.176 205.129 17.164 205.223 17.141 205.293 cv
17.121 205.367 17.086 205.426 17.039 205.461 cv
16.996 205.504 16.938 205.531 16.863 205.543 cv
7.551 208.207 li
7.434 208.242 7.34 208.258 7.27 208.258 cv
7.203 208.262 7.152 208.242 7.113 208.195 cv
7.078 208.152 7.055 208.082 7.043 207.984 cv
7.035 207.887 7.031 207.754 7.027 207.586 cv
7.031 207.426 7.035 207.297 7.039 207.203 cv
7.051 207.109 7.063 207.039 7.082 206.988 cv
7.105 206.941 7.137 206.906 7.168 206.887 cv
7.207 206.871 7.254 206.859 7.309 206.844 cv
15.758 204.578 li
15.758 204.57 li
7.324 202.418 li
7.27 202.406 7.223 202.387 7.18 202.359 cv
7.145 202.34 7.113 202.301 7.09 202.246 cv
7.07 202.195 7.055 202.121 7.043 202.023 cv
7.035 201.93 7.031 201.805 7.027 201.648 cv
7.031 201.504 7.035 201.391 7.043 201.301 cv
7.055 201.219 7.07 201.148 7.09 201.094 cv
7.113 201.043 7.145 201.004 7.18 200.98 cv
7.223 200.957 7.27 200.937 7.324 200.922 cv
15.758 198.605 li
15.758 198.594 li
7.316 196.371 li
7.266 196.359 7.223 196.344 7.18 196.324 cv
7.145 196.312 7.113 196.281 7.09 196.227 cv
7.07 196.18 7.055 196.109 7.043 196.016 cv
7.035 195.93 7.031 195.809 7.027 195.652 cv
7.031 195.504 7.035 195.379 7.047 195.285 cv
7.063 195.195 7.09 195.129 7.121 195.086 cv
7.16 195.047 7.211 195.027 7.277 195.027 cv
7.348 195.031 7.441 195.047 7.559 195.07 cv
cp
f
16.973 188.711 mo
17.035 188.715 17.082 188.734 17.113 188.773 cv
17.145 188.816 17.168 188.875 17.184 188.945 cv
17.199 189.023 17.207 189.129 17.207 189.266 cv
17.207 189.402 17.199 189.512 17.184 189.59 cv
17.168 189.676 17.145 189.734 17.113 189.766 cv
17.082 189.805 17.035 189.82 16.973 189.816 cv
16.273 189.816 li
16.602 190.125 16.855 190.469 17.035 190.844 cv
17.219 191.223 17.305 191.621 17.309 192.039 cv
17.305 192.414 17.258 192.746 17.164 193.043 cv
17.066 193.34 16.93 193.594 16.746 193.805 cv
16.566 194.016 16.344 194.18 16.078 194.297 cv
15.816 194.414 15.516 194.473 15.172 194.469 cv
14.781 194.473 14.438 194.395 14.145 194.23 cv
13.855 194.074 13.613 193.84 13.422 193.535 cv
13.23 193.234 13.086 192.867 12.988 192.43 cv
12.895 191.996 12.848 191.504 12.844 190.957 cv
12.844 189.988 li
12.297 189.988 li
12.027 189.992 11.789 190.02 11.582 190.074 cv
11.375 190.133 11.203 190.227 11.063 190.352 cv
10.926 190.484 10.82 190.648 10.75 190.848 cv
10.68 191.055 10.645 191.305 10.645 191.594 cv
10.645 191.914 10.684 192.199 10.758 192.449 cv
10.836 192.707 10.918 192.926 11.008 193.113 cv
11.102 193.301 11.188 193.461 11.258 193.586 cv
11.336 193.719 11.371 193.812 11.371 193.871 cv
11.371 193.914 11.363 193.949 11.34 193.98 cv
11.324 194.012 11.293 194.039 11.246 194.062 cv
11.207 194.086 11.152 194.105 11.086 194.113 cv
11.023 194.129 10.953 194.133 10.871 194.129 cv
10.746 194.133 10.641 194.125 10.563 194.102 cv
10.488 194.086 10.418 194.039 10.348 193.969 cv
10.281 193.898 10.203 193.777 10.113 193.605 cv
10.023 193.434 9.941 193.238 9.863 193.016 cv
9.793 192.793 9.73 192.547 9.676 192.281 cv
9.629 192.016 9.602 191.75 9.602 191.477 cv
9.602 190.977 9.66 190.547 9.773 190.195 cv
9.891 189.844 10.059 189.559 10.277 189.336 cv
10.5 189.121 10.773 188.961 11.098 188.859 cv
11.43 188.762 11.813 188.715 12.242 188.711 cv
cp
13.77 189.988 mo
13.77 191.09 li
13.773 191.445 13.805 191.75 13.859 192.008 cv
13.922 192.27 14.008 192.484 14.125 192.656 cv
14.242 192.828 14.383 192.953 14.547 193.031 cv
14.711 193.113 14.898 193.156 15.109 193.152 cv
15.477 193.156 15.77 193.039 15.98 192.809 cv
16.199 192.578 16.305 192.254 16.305 191.836 cv
16.305 191.5 16.219 191.187 16.047 190.898 cv
15.875 190.609 15.613 190.309 15.258 189.988 cv
cp
f
16.449 182.781 mo
16.605 182.781 16.723 182.793 16.809 182.812 cv
16.898 182.836 16.965 182.867 17.004 182.906 cv
17.047 182.949 17.086 183.012 17.121 183.094 cv
17.156 183.18 17.184 183.273 17.211 183.379 cv
17.23 183.488 17.25 183.602 17.27 183.719 cv
17.281 183.836 17.289 183.957 17.293 184.074 cv
17.289 184.441 17.242 184.754 17.148 185.012 cv
17.055 185.273 16.91 185.484 16.711 185.648 cv
16.52 185.816 16.273 185.937 15.973 186.012 cv
15.676 186.09 15.324 186.129 14.914 186.125 cv
10.816 186.125 li
10.816 187.105 li
10.82 187.184 10.777 187.246 10.691 187.293 cv
10.609 187.34 10.477 187.363 10.285 187.363 cv
10.191 187.363 10.109 187.359 10.039 187.344 cv
9.977 187.336 9.918 187.316 9.871 187.293 cv
9.828 187.273 9.797 187.246 9.777 187.211 cv
9.762 187.18 9.754 187.145 9.75 187.098 cv
9.75 186.125 li
8.082 186.125 li
8.051 186.129 8.016 186.117 7.98 186.098 cv
7.953 186.082 7.926 186.051 7.898 185.996 cv
7.879 185.949 7.863 185.883 7.848 185.797 cv
7.84 185.719 7.832 185.613 7.832 185.484 cv
7.832 185.355 7.84 185.25 7.848 185.168 cv
7.863 185.086 7.879 185.02 7.898 184.973 cv
7.926 184.926 7.953 184.895 7.98 184.871 cv
8.016 184.855 8.051 184.844 8.082 184.84 cv
9.75 184.84 li
9.75 183.039 li
9.754 183 9.762 182.965 9.777 182.93 cv
9.797 182.902 9.828 182.875 9.871 182.848 cv
9.918 182.828 9.977 182.812 10.039 182.797 cv
10.109 182.789 10.191 182.781 10.285 182.781 cv
10.477 182.781 10.609 182.805 10.691 182.852 cv
10.777 182.898 10.82 182.961 10.816 183.039 cv
10.816 184.84 li
14.73 184.84 li
15.215 184.844 15.578 184.773 15.824 184.625 cv
16.074 184.484 16.199 184.227 16.195 183.855 cv
16.199 183.742 16.188 183.637 16.16 183.539 cv
16.141 183.449 16.117 183.367 16.086 183.289 cv
16.063 183.219 16.035 183.156 16.012 183.102 cv
15.988 183.055 15.977 183.008 15.977 182.961 cv
15.977 182.937 15.984 182.91 15.996 182.887 cv
16.012 182.863 16.035 182.848 16.07 182.832 cv
16.109 182.824 16.16 182.812 16.219 182.797 cv
16.285 182.789 16.363 182.781 16.449 182.781 cv
cp
f
16.449 177.625 mo
16.605 177.625 16.723 177.637 16.809 177.656 cv
16.898 177.68 16.965 177.711 17.004 177.75 cv
17.047 177.793 17.086 177.855 17.121 177.937 cv
17.156 178.023 17.184 178.117 17.211 178.223 cv
17.23 178.332 17.25 178.445 17.27 178.562 cv
17.281 178.68 17.289 178.801 17.293 178.918 cv
17.289 179.285 17.242 179.598 17.148 179.855 cv
17.055 180.117 16.91 180.328 16.711 180.492 cv
16.52 180.66 16.273 180.781 15.973 180.855 cv
15.676 180.934 15.324 180.973 14.914 180.969 cv
10.816 180.969 li
10.816 181.949 li
10.82 182.027 10.777 182.09 10.691 182.137 cv
10.609 182.184 10.477 182.207 10.285 182.207 cv
10.191 182.207 10.109 182.203 10.039 182.187 cv
9.977 182.18 9.918 182.16 9.871 182.137 cv
9.828 182.117 9.797 182.09 9.777 182.055 cv
9.762 182.023 9.754 181.988 9.75 181.941 cv
9.75 180.969 li
8.082 180.969 li
8.051 180.973 8.016 180.961 7.98 180.941 cv
7.953 180.926 7.926 180.895 7.898 180.84 cv
7.879 180.793 7.863 180.727 7.848 180.641 cv
7.84 180.562 7.832 180.457 7.832 180.328 cv
7.832 180.199 7.84 180.094 7.848 180.012 cv
7.863 179.93 7.879 179.863 7.898 179.816 cv
7.926 179.77 7.953 179.738 7.98 179.715 cv
8.016 179.699 8.051 179.687 8.082 179.684 cv
9.75 179.684 li
9.75 177.883 li
9.754 177.844 9.762 177.809 9.777 177.773 cv
9.797 177.746 9.828 177.719 9.871 177.691 cv
9.918 177.672 9.977 177.656 10.039 177.641 cv
10.109 177.633 10.191 177.625 10.285 177.625 cv
10.477 177.625 10.609 177.648 10.691 177.695 cv
10.777 177.742 10.82 177.805 10.816 177.883 cv
10.816 179.684 li
14.73 179.684 li
15.215 179.687 15.578 179.617 15.824 179.469 cv
16.074 179.328 16.199 179.07 16.195 178.699 cv
16.199 178.586 16.188 178.48 16.16 178.383 cv
16.141 178.293 16.117 178.211 16.086 178.133 cv
16.063 178.062 16.035 178 16.012 177.945 cv
15.988 177.898 15.977 177.852 15.977 177.805 cv
15.977 177.781 15.984 177.754 15.996 177.73 cv
16.012 177.707 16.035 177.691 16.07 177.676 cv
16.109 177.668 16.16 177.656 16.219 177.641 cv
16.285 177.633 16.363 177.625 16.449 177.625 cv
cp
f
15.055 171.496 mo
15.418 171.5 15.738 171.566 16.016 171.695 cv
16.297 171.828 16.531 172.016 16.723 172.258 cv
16.918 172.504 17.063 172.797 17.16 173.133 cv
17.258 173.473 17.305 173.844 17.309 174.246 cv
17.305 174.5 17.285 174.738 17.25 174.961 cv
17.207 175.187 17.16 175.387 17.102 175.566 cv
17.043 175.746 16.98 175.898 16.914 176.023 cv
16.852 176.148 16.793 176.242 16.738 176.297 cv
16.688 176.355 16.617 176.395 16.52 176.418 cv
16.43 176.445 16.301 176.457 16.141 176.457 cv
16.043 176.457 15.961 176.453 15.891 176.441 cv
15.824 176.434 15.77 176.422 15.727 176.402 cv
15.688 176.391 15.656 176.367 15.637 176.34 cv
15.621 176.312 15.613 176.281 15.609 176.242 cv
15.613 176.187 15.648 176.102 15.715 175.988 cv
15.789 175.879 15.867 175.742 15.945 175.574 cv
16.031 175.414 16.105 175.223 16.176 174.996 cv
16.246 174.777 16.281 174.52 16.281 174.223 cv
16.281 174.008 16.258 173.809 16.211 173.629 cv
16.164 173.453 16.098 173.301 16.004 173.172 cv
15.918 173.043 15.801 172.941 15.656 172.871 cv
15.52 172.801 15.352 172.766 15.156 172.766 cv
14.961 172.766 14.797 172.816 14.66 172.918 cv
14.527 173.02 14.406 173.156 14.301 173.32 cv
14.199 173.488 14.109 173.672 14.023 173.879 cv
13.945 174.09 13.859 174.305 13.77 174.523 cv
13.684 174.742 13.582 174.957 13.469 175.168 cv
13.359 175.379 13.227 175.57 13.063 175.734 cv
12.906 175.906 12.711 176.039 12.484 176.137 cv
12.262 176.242 11.996 176.293 11.684 176.289 cv
11.41 176.293 11.145 176.238 10.891 176.129 cv
10.641 176.023 10.422 175.863 10.23 175.648 cv
10.043 175.437 9.891 175.172 9.773 174.852 cv
9.66 174.531 9.602 174.16 9.602 173.73 cv
9.602 173.547 9.617 173.359 9.648 173.172 cv
9.68 172.988 9.719 172.82 9.766 172.664 cv
9.813 172.516 9.863 172.387 9.918 172.277 cv
9.973 172.176 10.023 172.094 10.063 172.035 cv
10.109 171.984 10.145 171.949 10.172 171.926 cv
10.203 171.91 10.238 171.895 10.273 171.887 cv
10.316 171.879 10.363 171.871 10.418 171.863 cv
10.477 171.855 10.547 171.852 10.629 171.852 cv
10.719 171.852 10.797 171.855 10.859 171.863 cv
10.93 171.871 10.98 171.887 11.02 171.902 cv
11.063 171.926 11.094 171.945 11.109 171.969 cv
11.129 171.996 11.137 172.027 11.137 172.055 cv
11.137 172.105 11.109 172.172 11.051 172.258 cv
10.996 172.348 10.934 172.461 10.867 172.602 cv
10.805 172.742 10.746 172.91 10.684 173.098 cv
10.629 173.289 10.598 173.504 10.598 173.746 cv
10.598 173.969 10.625 174.16 10.672 174.324 cv
10.727 174.492 10.797 174.629 10.883 174.734 cv
10.977 174.84 11.082 174.922 11.207 174.973 cv
11.332 175.031 11.469 175.059 11.613 175.055 cv
11.816 175.059 11.984 175.008 12.121 174.902 cv
12.262 174.801 12.383 174.664 12.484 174.496 cv
12.59 174.332 12.684 174.141 12.766 173.926 cv
12.852 173.715 12.938 173.5 13.023 173.277 cv
13.113 173.059 13.215 172.84 13.32 172.621 cv
13.43 172.406 13.559 172.215 13.715 172.047 cv
13.871 171.883 14.059 171.75 14.277 171.648 cv
14.496 171.551 14.758 171.5 15.055 171.496 cv
cp
f
12.977 167.051 mo
13.563 167.051 14.145 167.09 14.719 167.16 cv
15.293 167.238 15.859 167.348 16.422 167.488 cv
16.98 167.637 17.531 167.812 18.074 168.023 cv
18.617 168.234 19.152 168.48 19.684 168.758 cv
19.707 168.777 19.73 168.801 19.754 168.828 cv
19.773 168.863 19.793 168.902 19.809 168.949 cv
19.824 169 19.832 169.059 19.84 169.125 cv
19.84 169.195 19.844 169.277 19.848 169.367 cv
19.844 169.504 19.836 169.609 19.828 169.684 cv
19.813 169.762 19.793 169.816 19.766 169.848 cv
19.734 169.883 19.699 169.898 19.656 169.895 cv
19.609 169.895 19.555 169.879 19.496 169.852 cv
18.445 169.375 17.375 169.016 16.277 168.77 cv
15.18 168.527 14.07 168.406 12.953 168.402 cv
11.844 168.406 10.738 168.527 9.637 168.77 cv
8.539 169.016 7.469 169.383 6.422 169.867 cv
6.379 169.891 6.336 169.898 6.289 169.891 cv
6.25 169.891 6.215 169.867 6.188 169.82 cv
6.164 169.781 6.145 169.723 6.125 169.648 cv
6.113 169.578 6.105 169.48 6.102 169.359 cv
6.105 169.25 6.109 169.16 6.113 169.086 cv
6.125 169.016 6.137 168.957 6.148 168.91 cv
6.168 168.867 6.184 168.836 6.195 168.812 cv
6.215 168.797 6.23 168.781 6.25 168.766 cv
7.316 168.234 8.414 167.812 9.535 167.508 cv
10.664 167.203 11.809 167.051 12.977 167.051 cv
cp
f
293.051 518.828 mo
293.047 518.934 293.031 519.023 292.996 519.094 cv
292.961 519.172 292.914 519.23 292.859 519.273 cv
292.801 519.324 292.738 519.359 292.672 519.375 cv
292.598 519.398 292.527 519.406 292.465 519.406 cv
292.02 519.406 li
291.879 519.406 291.758 519.395 291.652 519.363 cv
291.547 519.34 291.449 519.285 291.355 519.207 cv
291.262 519.133 291.168 519.031 291.074 518.898 cv
290.98 518.77 290.879 518.605 290.773 518.402 cv
287.699 512.664 li
287.535 512.371 287.371 512.062 287.211 511.734 cv
287.043 511.414 286.891 511.098 286.754 510.789 cv
286.738 510.789 li
286.746 511.164 286.754 511.547 286.762 511.934 cv
286.766 512.324 286.766 512.711 286.77 513.094 cv
286.77 519.18 li
286.766 519.219 286.754 519.254 286.734 519.285 cv
286.711 519.32 286.676 519.348 286.625 519.363 cv
286.57 519.383 286.5 519.395 286.418 519.41 cv
286.332 519.422 286.227 519.43 286.098 519.43 cv
285.961 519.43 285.852 519.422 285.77 519.41 cv
285.684 519.395 285.617 519.383 285.57 519.363 cv
285.52 519.348 285.484 519.32 285.461 519.285 cv
285.438 519.254 285.426 519.219 285.43 519.18 cv
285.43 509.875 li
285.426 509.668 285.484 509.52 285.605 509.43 cv
285.723 509.344 285.852 509.301 285.992 509.297 cv
286.652 509.297 li
286.805 509.301 286.938 509.312 287.043 509.336 cv
287.145 509.363 287.238 509.406 287.324 509.465 cv
287.406 509.527 287.484 509.609 287.566 509.715 cv
287.641 509.824 287.723 509.961 287.809 510.117 cv
290.176 514.543 li
290.32 514.816 290.461 515.082 290.598 515.336 cv
290.73 515.594 290.859 515.848 290.988 516.094 cv
291.109 516.348 291.234 516.594 291.359 516.832 cv
291.48 517.074 291.602 517.316 291.727 517.559 cv
291.734 517.559 li
291.723 517.152 291.715 516.723 291.715 516.277 cv
291.707 515.832 291.707 515.406 291.711 514.996 cv
291.711 509.523 li
291.707 509.488 291.719 509.453 291.742 509.422 cv
291.766 509.391 291.801 509.363 291.855 509.34 cv
291.902 509.316 291.973 509.301 292.059 509.289 cv
292.145 509.281 292.254 509.277 292.395 509.273 cv
292.512 509.277 292.617 509.281 292.707 509.289 cv
292.793 509.301 292.859 509.316 292.91 509.34 cv
292.957 509.363 292.992 509.391 293.016 509.422 cv
293.035 509.453 293.047 509.488 293.051 509.523 cv
cp
f
301.598 519.187 mo
301.594 519.234 301.586 519.27 301.57 519.293 cv
301.551 519.324 301.516 519.348 301.473 519.367 cv
301.426 519.387 301.367 519.398 301.293 519.414 cv
301.215 519.422 301.121 519.43 301.016 519.43 cv
300.891 519.43 300.793 519.422 300.723 519.414 cv
300.645 519.398 300.586 519.387 300.543 519.367 cv
300.496 519.348 300.465 519.324 300.453 519.293 cv
300.434 519.27 300.426 519.234 300.43 519.187 cv
300.43 518.262 li
300.027 518.707 299.633 519.027 299.246 519.227 cv
298.852 519.43 298.457 519.527 298.063 519.531 cv
297.59 519.527 297.195 519.453 296.879 519.297 cv
296.559 519.145 296.301 518.934 296.105 518.664 cv
295.902 518.398 295.762 518.086 295.68 517.727 cv
295.59 517.371 295.547 516.937 295.551 516.43 cv
295.551 512.176 li
295.547 512.137 295.555 512.102 295.578 512.07 cv
295.594 512.043 295.629 512.02 295.684 511.992 cv
295.73 511.973 295.801 511.957 295.887 511.945 cv
295.969 511.941 296.07 511.937 296.199 511.934 cv
296.32 511.937 296.426 511.941 296.512 511.945 cv
296.594 511.957 296.66 511.973 296.707 511.992 cv
296.754 512.02 296.789 512.043 296.813 512.07 cv
296.832 512.102 296.84 512.137 296.844 512.176 cv
296.844 516.258 li
296.84 516.672 296.871 517 296.934 517.246 cv
296.992 517.492 297.082 517.703 297.207 517.875 cv
297.324 518.055 297.48 518.187 297.672 518.281 cv
297.855 518.379 298.074 518.43 298.324 518.426 cv
298.645 518.43 298.965 518.312 299.289 518.082 cv
299.605 517.855 299.945 517.52 300.305 517.074 cv
300.305 512.176 li
300.305 512.137 300.313 512.102 300.332 512.07 cv
300.348 512.043 300.383 512.02 300.438 511.992 cv
300.488 511.973 300.555 511.957 300.637 511.945 cv
300.715 511.941 300.82 511.937 300.953 511.934 cv
301.074 511.937 301.18 511.941 301.266 511.945 cv
301.348 511.957 301.41 511.973 301.457 511.992 cv
301.5 512.02 301.535 512.043 301.563 512.07 cv
301.582 512.102 301.594 512.137 301.598 512.176 cv
cp
f
314.375 519.187 mo
314.371 519.234 314.363 519.27 314.344 519.293 cv
314.32 519.324 314.285 519.348 314.242 519.367 cv
314.191 519.387 314.125 519.398 314.047 519.414 cv
313.961 519.422 313.859 519.43 313.734 519.43 cv
313.602 519.43 313.492 519.422 313.414 519.414 cv
313.328 519.398 313.262 519.387 313.215 519.367 cv
313.16 519.348 313.125 519.324 313.109 519.293 cv
313.086 519.27 313.078 519.234 313.078 519.187 cv
313.078 514.926 li
313.078 514.633 313.051 514.363 313 514.117 cv
312.945 513.875 312.863 513.664 312.75 513.484 cv
312.637 513.309 312.492 513.172 312.316 513.078 cv
312.137 512.984 311.926 512.937 311.691 512.937 cv
311.395 512.937 311.098 513.055 310.801 513.281 cv
310.496 513.516 310.168 513.848 309.813 514.285 cv
309.813 519.187 li
309.809 519.234 309.797 519.27 309.781 519.293 cv
309.758 519.324 309.727 519.348 309.68 519.367 cv
309.629 519.387 309.563 519.398 309.48 519.414 cv
309.395 519.422 309.289 519.43 309.168 519.43 cv
309.047 519.43 308.945 519.422 308.859 519.414 cv
308.773 519.398 308.703 519.387 308.656 519.367 cv
308.602 519.348 308.57 519.324 308.555 519.293 cv
308.535 519.27 308.523 519.234 308.527 519.187 cv
308.527 514.926 li
308.523 514.633 308.496 514.363 308.441 514.117 cv
308.383 513.875 308.297 513.664 308.184 513.484 cv
308.07 513.309 307.926 513.172 307.754 513.078 cv
307.574 512.984 307.367 512.937 307.133 512.937 cv
306.832 512.937 306.535 513.055 306.234 513.281 cv
305.934 513.516 305.605 513.848 305.254 514.285 cv
305.254 519.187 li
305.25 519.234 305.238 519.27 305.223 519.293 cv
305.199 519.324 305.168 519.348 305.121 519.367 cv
305.074 519.387 305.008 519.398 304.93 519.414 cv
304.844 519.422 304.738 519.43 304.609 519.43 cv
304.48 519.43 304.375 519.422 304.297 519.414 cv
304.211 519.398 304.145 519.387 304.098 519.367 cv
304.043 519.348 304.012 519.324 303.996 519.293 cv
303.977 519.27 303.965 519.234 303.969 519.187 cv
303.969 512.176 li
303.965 512.137 303.973 512.102 303.992 512.07 cv
304.004 512.043 304.035 512.02 304.086 511.992 cv
304.129 511.973 304.191 511.957 304.266 511.945 cv
304.336 511.941 304.43 511.937 304.555 511.934 cv
304.664 511.937 304.762 511.941 304.84 511.945 cv
304.914 511.957 304.973 511.973 305.016 511.992 cv
305.055 512.02 305.082 512.043 305.102 512.07 cv
305.117 512.102 305.125 512.137 305.129 512.176 cv
305.129 513.102 li
305.52 512.66 305.902 512.34 306.277 512.133 cv
306.645 511.93 307.023 511.824 307.406 511.824 cv
307.695 511.824 307.953 511.859 308.188 511.926 cv
308.414 511.996 308.621 512.09 308.801 512.211 cv
308.977 512.332 309.125 512.477 309.254 512.645 cv
309.375 512.816 309.48 513.008 309.566 513.211 cv
309.797 512.961 310.02 512.746 310.23 512.566 cv
310.441 512.395 310.645 512.25 310.84 512.137 cv
311.035 512.031 311.223 511.953 311.406 511.898 cv
311.59 511.852 311.777 511.824 311.965 511.824 cv
312.418 511.824 312.797 511.906 313.102 512.062 cv
313.406 512.227 313.652 512.437 313.848 512.699 cv
314.035 512.965 314.172 513.273 314.254 513.629 cv
314.332 513.984 314.371 514.359 314.375 514.754 cv
cp
f
323.176 515.586 mo
323.172 516.195 323.105 516.746 322.977 517.23 cv
322.84 517.719 322.645 518.133 322.391 518.473 cv
322.133 518.816 321.816 519.078 321.445 519.258 cv
321.07 519.441 320.645 519.527 320.16 519.531 cv
319.934 519.527 319.727 519.508 319.539 519.465 cv
319.352 519.418 319.164 519.348 318.984 519.25 cv
318.797 519.152 318.617 519.027 318.438 518.875 cv
318.254 518.727 318.063 518.547 317.863 518.332 cv
317.863 519.187 li
317.863 519.234 317.852 519.27 317.832 519.297 cv
317.809 519.332 317.773 519.355 317.73 519.371 cv
317.68 519.387 317.621 519.398 317.555 519.414 cv
317.48 519.422 317.391 519.43 317.285 519.43 cv
317.176 519.43 317.09 519.422 317.02 519.414 cv
316.945 519.398 316.883 519.387 316.84 519.371 cv
316.789 519.355 316.758 519.332 316.746 519.297 cv
316.727 519.27 316.719 519.234 316.723 519.187 cv
316.723 508.777 li
316.719 508.738 316.73 508.703 316.75 508.668 cv
316.766 508.641 316.797 508.613 316.852 508.59 cv
316.898 508.57 316.965 508.555 317.051 508.543 cv
317.129 508.535 317.234 508.531 317.363 508.527 cv
317.492 508.531 317.598 508.535 317.684 508.543 cv
317.762 508.555 317.828 508.57 317.875 508.59 cv
317.922 508.613 317.953 508.641 317.977 508.668 cv
317.992 508.703 318.004 508.738 318.008 508.777 cv
318.008 512.977 li
318.215 512.766 318.418 512.586 318.613 512.441 cv
318.809 512.297 318.996 512.18 319.184 512.086 cv
319.367 512 319.555 511.934 319.746 511.887 cv
319.93 511.848 320.129 511.824 320.34 511.824 cv
320.844 511.824 321.277 511.926 321.645 512.129 cv
322.004 512.332 322.297 512.605 322.523 512.941 cv
322.746 513.285 322.914 513.684 323.02 514.141 cv
323.121 514.598 323.172 515.078 323.176 515.586 cv
cp
321.844 515.734 mo
321.84 515.379 321.813 515.031 321.762 514.691 cv
321.703 514.355 321.609 514.059 321.473 513.797 cv
321.336 513.539 321.156 513.328 320.934 513.168 cv
320.707 513.012 320.426 512.934 320.094 512.93 cv
319.926 512.934 319.762 512.957 319.602 513 cv
319.438 513.051 319.273 513.129 319.105 513.234 cv
318.938 513.348 318.762 513.488 318.586 513.656 cv
318.402 513.832 318.211 514.047 318.008 514.301 cv
318.008 517.098 li
318.363 517.531 318.703 517.863 319.027 518.086 cv
319.352 518.316 319.688 518.43 320.039 518.426 cv
320.359 518.43 320.637 518.352 320.871 518.191 cv
321.098 518.039 321.285 517.832 321.43 517.57 cv
321.574 517.316 321.68 517.027 321.746 516.707 cv
321.809 516.391 321.84 516.066 321.844 515.734 cv
cp
f
331.086 515.379 mo
331.082 515.582 331.031 515.723 330.934 515.809 cv
330.828 515.895 330.711 515.937 330.586 515.937 cv
325.969 515.937 li
325.965 516.328 326.004 516.68 326.086 516.992 cv
326.16 517.305 326.293 517.574 326.477 517.793 cv
326.656 518.02 326.891 518.191 327.188 518.309 cv
327.477 518.434 327.836 518.492 328.262 518.488 cv
328.594 518.492 328.891 518.465 329.152 518.406 cv
329.414 518.355 329.641 518.293 329.832 518.223 cv
330.02 518.156 330.176 518.098 330.301 518.039 cv
330.422 517.988 330.516 517.961 330.578 517.957 cv
330.613 517.961 330.645 517.969 330.676 517.984 cv
330.703 518.004 330.727 518.031 330.746 518.066 cv
330.758 518.105 330.77 518.156 330.781 518.219 cv
330.785 518.285 330.789 518.363 330.793 518.457 cv
330.789 518.527 330.785 518.586 330.785 518.633 cv
330.777 518.68 330.773 518.723 330.766 518.762 cv
330.758 518.801 330.742 518.836 330.727 518.867 cv
330.703 518.898 330.68 518.93 330.656 518.957 cv
330.625 518.988 330.543 519.035 330.402 519.098 cv
330.262 519.164 330.078 519.227 329.855 519.289 cv
329.629 519.352 329.371 519.406 329.078 519.457 cv
328.785 519.504 328.473 519.527 328.141 519.531 cv
327.563 519.527 327.055 519.449 326.625 519.289 cv
326.188 519.129 325.824 518.891 325.531 518.574 cv
325.23 518.258 325.008 517.863 324.859 517.383 cv
324.711 516.906 324.637 516.348 324.637 515.711 cv
324.637 515.113 324.711 514.574 324.867 514.09 cv
325.02 513.613 325.246 513.203 325.543 512.867 cv
325.836 512.531 326.191 512.273 326.605 512.094 cv
327.02 511.914 327.484 511.824 328 511.824 cv
328.551 511.824 329.02 511.914 329.406 512.09 cv
329.793 512.27 330.109 512.508 330.363 512.805 cv
330.609 513.105 330.793 513.457 330.91 513.855 cv
331.023 514.262 331.082 514.691 331.086 515.145 cv
cp
329.793 514.996 mo
329.809 514.32 329.656 513.789 329.34 513.406 cv
329.023 513.023 328.555 512.832 327.938 512.828 cv
327.613 512.832 327.332 512.891 327.094 513.008 cv
326.852 513.129 326.652 513.289 326.492 513.484 cv
326.328 513.684 326.203 513.914 326.117 514.176 cv
326.027 514.437 325.977 514.711 325.969 514.996 cv
cp
f
337.152 512.633 mo
337.148 512.75 337.148 512.848 337.145 512.922 cv
337.137 513.004 337.125 513.066 337.113 513.105 cv
337.094 513.152 337.074 513.184 337.055 513.207 cv
337.027 513.23 336.996 513.242 336.957 513.242 cv
336.914 513.242 336.863 513.23 336.805 513.207 cv
336.742 513.184 336.672 513.16 336.602 513.137 cv
336.523 513.113 336.441 513.094 336.348 513.07 cv
336.254 513.055 336.152 513.043 336.043 513.039 cv
335.91 513.043 335.781 513.07 335.66 513.117 cv
335.535 513.172 335.406 513.258 335.27 513.375 cv
335.129 513.5 334.984 513.656 334.836 513.852 cv
334.684 514.047 334.516 514.289 334.336 514.574 cv
334.336 519.187 li
334.332 519.234 334.32 519.27 334.305 519.293 cv
334.281 519.324 334.25 519.348 334.203 519.367 cv
334.156 519.387 334.09 519.398 334.012 519.414 cv
333.926 519.422 333.82 519.43 333.691 519.43 cv
333.563 519.43 333.457 519.422 333.379 519.414 cv
333.293 519.398 333.227 519.387 333.18 519.367 cv
333.125 519.348 333.094 519.324 333.078 519.293 cv
333.059 519.27 333.047 519.234 333.051 519.187 cv
333.051 512.176 li
333.047 512.137 333.055 512.102 333.074 512.07 cv
333.086 512.043 333.117 512.02 333.168 511.992 cv
333.211 511.973 333.273 511.957 333.348 511.945 cv
333.418 511.941 333.512 511.937 333.637 511.934 cv
333.746 511.937 333.844 511.941 333.922 511.945 cv
333.996 511.957 334.055 511.973 334.098 511.992 cv
334.137 512.02 334.164 512.043 334.184 512.07 cv
334.199 512.102 334.207 512.137 334.211 512.176 cv
334.211 513.195 li
334.398 512.914 334.582 512.687 334.754 512.512 cv
334.922 512.336 335.082 512.195 335.234 512.094 cv
335.383 511.992 335.531 511.922 335.68 511.883 cv
335.828 511.844 335.977 511.824 336.129 511.824 cv
336.195 511.824 336.273 511.828 336.359 511.836 cv
336.445 511.844 336.535 511.859 336.629 511.879 cv
336.723 511.902 336.805 511.926 336.883 511.949 cv
336.953 511.977 337.008 512.004 337.043 512.027 cv
337.07 512.059 337.09 512.082 337.105 512.102 cv
337.113 512.129 337.125 512.16 337.133 512.191 cv
337.141 512.23 337.145 512.281 337.148 512.352 cv
337.148 512.422 337.148 512.516 337.152 512.633 cv
cp
f
348.91 515.602 mo
348.906 516.18 348.832 516.707 348.684 517.184 cv
348.531 517.668 348.305 518.082 348.008 518.426 cv
347.707 518.777 347.332 519.047 346.887 519.238 cv
346.434 519.434 345.914 519.527 345.324 519.531 cv
344.746 519.527 344.242 519.445 343.816 519.273 cv
343.387 519.105 343.031 518.855 342.746 518.527 cv
342.457 518.199 342.242 517.805 342.105 517.336 cv
341.965 516.871 341.898 516.34 341.898 515.742 cv
341.898 515.176 341.969 514.648 342.117 514.168 cv
342.262 513.687 342.488 513.273 342.789 512.922 cv
343.086 512.574 343.457 512.305 343.906 512.113 cv
344.352 511.922 344.875 511.824 345.473 511.824 cv
346.051 511.824 346.551 511.91 346.98 512.082 cv
347.406 512.254 347.766 512.504 348.051 512.832 cv
348.336 513.16 348.551 513.559 348.695 514.023 cv
348.836 514.492 348.906 515.02 348.91 515.602 cv
cp
347.578 515.687 mo
347.574 515.312 347.539 514.953 347.473 514.613 cv
347.398 514.277 347.281 513.984 347.121 513.727 cv
346.957 513.477 346.738 513.273 346.461 513.121 cv
346.18 512.977 345.832 512.902 345.422 512.898 cv
345.035 512.902 344.707 512.969 344.434 513.102 cv
344.156 513.238 343.93 513.43 343.754 513.676 cv
343.574 513.922 343.441 514.215 343.359 514.551 cv
343.27 514.891 343.227 515.258 343.23 515.656 cv
343.227 516.043 343.262 516.406 343.336 516.742 cv
343.402 517.082 343.52 517.375 343.688 517.625 cv
343.852 517.879 344.074 518.082 344.352 518.227 cv
344.629 518.379 344.977 518.453 345.391 518.449 cv
345.766 518.453 346.094 518.383 346.375 518.246 cv
346.652 518.113 346.879 517.926 347.059 517.676 cv
347.234 517.434 347.363 517.141 347.449 516.805 cv
347.531 516.469 347.574 516.098 347.578 515.687 cv
cp
f
354.641 509.289 mo
354.637 509.391 354.633 509.469 354.625 509.527 cv
354.613 509.59 354.602 509.641 354.59 509.672 cv
354.574 509.711 354.559 509.734 354.539 509.746 cv
354.516 509.762 354.488 509.77 354.461 509.766 cv
354.422 509.77 354.375 509.758 354.324 509.73 cv
354.266 509.711 354.199 509.684 354.125 509.652 cv
354.043 509.625 353.953 509.598 353.848 509.574 cv
353.738 509.551 353.613 509.539 353.48 509.539 cv
353.285 509.539 353.121 509.57 352.988 509.633 cv
352.848 509.695 352.738 509.793 352.66 509.926 cv
352.574 510.059 352.516 510.23 352.48 510.441 cv
352.441 510.652 352.422 510.91 352.426 511.207 cv
352.426 511.973 li
353.992 511.973 li
354.031 511.977 354.066 511.984 354.098 512 cv
354.125 512.02 354.152 512.051 354.176 512.094 cv
354.199 512.141 354.215 512.199 354.23 512.262 cv
354.238 512.332 354.246 512.414 354.25 512.508 cv
354.246 512.699 354.223 512.832 354.18 512.914 cv
354.129 513 354.066 513.043 353.992 513.039 cv
352.426 513.039 li
352.426 519.187 li
352.422 519.234 352.414 519.27 352.395 519.293 cv
352.371 519.324 352.336 519.348 352.289 519.367 cv
352.238 519.387 352.172 519.398 352.09 519.414 cv
352.004 519.422 351.898 519.43 351.781 519.43 cv
351.652 519.43 351.551 519.422 351.469 519.414 cv
351.383 519.398 351.316 519.387 351.27 519.367 cv
351.219 519.348 351.184 519.324 351.164 519.293 cv
351.141 519.27 351.129 519.234 351.133 519.187 cv
351.133 513.039 li
350.145 513.039 li
350.059 513.043 349.996 513 349.957 512.914 cv
349.914 512.832 349.891 512.699 349.895 512.508 cv
349.891 512.414 349.898 512.332 349.91 512.262 cv
349.918 512.199 349.934 512.141 349.957 512.094 cv
349.977 512.051 350 512.02 350.035 512 cv
350.063 511.984 350.102 511.977 350.145 511.973 cv
351.133 511.973 li
351.133 511.246 li
351.129 510.762 351.176 510.344 351.27 509.988 cv
351.359 509.641 351.496 509.352 351.684 509.129 cv
351.867 508.906 352.102 508.742 352.391 508.633 cv
352.672 508.527 353.008 508.473 353.395 508.473 cv
353.57 508.473 353.746 508.492 353.922 508.523 cv
354.09 508.562 354.223 508.598 354.32 508.633 cv
354.41 508.676 354.473 508.711 354.508 508.738 cv
354.535 508.773 354.563 508.812 354.586 508.859 cv
354.605 508.91 354.617 508.973 354.629 509.039 cv
354.633 509.113 354.637 509.195 354.641 509.289 cv
cp
f
364.84 516.555 mo
364.836 517.027 364.75 517.449 364.578 517.816 cv
364.402 518.191 364.16 518.504 363.852 518.758 cv
363.543 519.016 363.18 519.207 362.762 519.336 cv
362.34 519.465 361.891 519.527 361.41 519.531 cv
361.07 519.527 360.754 519.5 360.469 519.445 cv
360.18 519.387 359.926 519.32 359.699 519.234 cv
359.473 519.156 359.281 519.07 359.129 518.977 cv
358.973 518.891 358.867 518.812 358.809 518.75 cv
358.75 518.687 358.707 518.609 358.68 518.516 cv
358.648 518.422 358.633 518.293 358.637 518.129 cv
358.633 518.016 358.637 517.922 358.652 517.844 cv
358.66 517.77 358.676 517.707 358.699 517.66 cv
358.715 517.613 358.742 517.582 358.777 517.562 cv
358.805 517.547 358.84 517.539 358.883 517.535 cv
358.953 517.539 359.055 517.582 359.191 517.668 cv
359.32 517.758 359.492 517.855 359.703 517.957 cv
359.91 518.066 360.16 518.164 360.453 518.25 cv
360.746 518.344 361.086 518.387 361.473 518.387 cv
361.762 518.387 362.027 518.348 362.27 518.27 cv
362.508 518.191 362.715 518.082 362.895 517.937 cv
363.066 517.797 363.203 517.621 363.297 517.41 cv
363.391 517.203 363.438 516.969 363.438 516.703 cv
363.438 516.422 363.371 516.176 363.242 515.969 cv
363.109 515.77 362.938 515.594 362.727 515.437 cv
362.512 515.289 362.27 515.148 361.996 515.016 cv
361.723 514.891 361.441 514.758 361.16 514.625 cv
360.871 514.492 360.594 514.348 360.324 514.184 cv
360.055 514.027 359.813 513.836 359.602 513.617 cv
359.383 513.398 359.211 513.145 359.082 512.848 cv
358.945 512.559 358.879 512.207 358.883 511.793 cv
358.879 511.375 358.957 511 359.113 510.668 cv
359.266 510.34 359.477 510.062 359.754 509.836 cv
360.023 509.617 360.348 509.445 360.727 509.328 cv
361.102 509.211 361.512 509.152 361.949 509.152 cv
362.168 509.152 362.391 509.172 362.621 509.211 cv
362.844 509.25 363.055 509.301 363.258 509.363 cv
363.453 509.43 363.633 509.504 363.793 509.582 cv
363.945 509.664 364.047 509.73 364.102 509.777 cv
364.148 509.832 364.184 509.871 364.199 509.895 cv
364.215 509.926 364.227 509.961 364.238 510.004 cv
364.246 510.051 364.254 510.105 364.262 510.164 cv
364.266 510.23 364.27 510.309 364.27 510.406 cv
364.27 510.5 364.266 510.586 364.258 510.656 cv
364.25 510.734 364.238 510.793 364.223 510.84 cv
364.207 510.887 364.184 510.922 364.156 510.945 cv
364.125 510.969 364.094 510.98 364.059 510.98 cv
364 510.98 363.91 510.945 363.789 510.875 cv
363.664 510.805 363.512 510.723 363.34 510.629 cv
363.16 510.539 362.953 510.457 362.715 510.379 cv
362.469 510.305 362.199 510.266 361.902 510.266 cv
361.621 510.266 361.375 510.305 361.168 510.379 cv
360.957 510.457 360.785 510.559 360.652 510.68 cv
360.516 510.805 360.414 510.949 360.348 511.121 cv
360.281 511.293 360.25 511.477 360.25 511.668 cv
360.25 511.953 360.313 512.195 360.441 512.395 cv
360.57 512.598 360.742 512.777 360.961 512.93 cv
361.172 513.09 361.418 513.23 361.695 513.359 cv
361.969 513.492 362.25 513.625 362.539 513.754 cv
362.824 513.887 363.105 514.031 363.379 514.187 cv
363.652 514.348 363.898 514.535 364.117 514.75 cv
364.332 514.969 364.504 515.223 364.641 515.516 cv
364.77 515.809 364.836 516.156 364.84 516.555 cv
cp
f
372.605 519.187 mo
372.602 519.234 372.594 519.27 372.578 519.293 cv
372.559 519.324 372.523 519.348 372.48 519.367 cv
372.434 519.387 372.375 519.398 372.301 519.414 cv
372.223 519.422 372.129 519.43 372.023 519.43 cv
371.898 519.43 371.801 519.422 371.73 519.414 cv
371.652 519.398 371.594 519.387 371.551 519.367 cv
371.504 519.348 371.473 519.324 371.461 519.293 cv
371.441 519.27 371.434 519.234 371.438 519.187 cv
371.438 518.262 li
371.035 518.707 370.641 519.027 370.254 519.227 cv
369.859 519.43 369.465 519.527 369.07 519.531 cv
368.598 519.527 368.203 519.453 367.887 519.297 cv
367.566 519.145 367.309 518.934 367.113 518.664 cv
366.91 518.398 366.77 518.086 366.688 517.727 cv
366.598 517.371 366.555 516.937 366.559 516.43 cv
366.559 512.176 li
366.555 512.137 366.563 512.102 366.586 512.07 cv
366.602 512.043 366.637 512.02 366.691 511.992 cv
366.738 511.973 366.809 511.957 366.895 511.945 cv
366.977 511.941 367.078 511.937 367.207 511.934 cv
367.328 511.937 367.434 511.941 367.52 511.945 cv
367.602 511.957 367.668 511.973 367.715 511.992 cv
367.762 512.02 367.797 512.043 367.82 512.07 cv
367.84 512.102 367.848 512.137 367.852 512.176 cv
367.852 516.258 li
367.848 516.672 367.879 517 367.941 517.246 cv
368 517.492 368.09 517.703 368.215 517.875 cv
368.332 518.055 368.488 518.187 368.68 518.281 cv
368.863 518.379 369.082 518.43 369.332 518.426 cv
369.652 518.43 369.973 518.312 370.297 518.082 cv
370.613 517.855 370.953 517.52 371.313 517.074 cv
371.313 512.176 li
371.313 512.137 371.32 512.102 371.34 512.07 cv
371.355 512.043 371.391 512.02 371.445 511.992 cv
371.496 511.973 371.563 511.957 371.645 511.945 cv
371.723 511.941 371.828 511.937 371.961 511.934 cv
372.082 511.937 372.188 511.941 372.273 511.945 cv
372.355 511.957 372.418 511.973 372.465 511.992 cv
372.508 512.02 372.543 512.043 372.57 512.07 cv
372.59 512.102 372.602 512.137 372.605 512.176 cv
cp
f
381.461 515.586 mo
381.457 516.195 381.391 516.746 381.262 517.23 cv
381.125 517.719 380.93 518.133 380.676 518.473 cv
380.418 518.816 380.102 519.078 379.73 519.258 cv
379.355 519.441 378.93 519.527 378.445 519.531 cv
378.219 519.527 378.012 519.508 377.824 519.465 cv
377.637 519.418 377.449 519.348 377.27 519.25 cv
377.082 519.152 376.902 519.027 376.723 518.875 cv
376.539 518.727 376.348 518.547 376.148 518.332 cv
376.148 519.187 li
376.148 519.234 376.137 519.27 376.117 519.297 cv
376.094 519.332 376.059 519.355 376.016 519.371 cv
375.965 519.387 375.906 519.398 375.84 519.414 cv
375.766 519.422 375.676 519.43 375.57 519.43 cv
375.461 519.43 375.375 519.422 375.305 519.414 cv
375.23 519.398 375.168 519.387 375.125 519.371 cv
375.074 519.355 375.043 519.332 375.031 519.297 cv
375.012 519.27 375.004 519.234 375.008 519.187 cv
375.008 508.777 li
375.004 508.738 375.016 508.703 375.035 508.668 cv
375.051 508.641 375.082 508.613 375.137 508.59 cv
375.184 508.57 375.25 508.555 375.336 508.543 cv
375.414 508.535 375.52 508.531 375.648 508.527 cv
375.777 508.531 375.883 508.535 375.969 508.543 cv
376.047 508.555 376.113 508.57 376.16 508.59 cv
376.207 508.613 376.238 508.641 376.262 508.668 cv
376.277 508.703 376.289 508.738 376.293 508.777 cv
376.293 512.977 li
376.5 512.766 376.703 512.586 376.898 512.441 cv
377.094 512.297 377.281 512.18 377.469 512.086 cv
377.652 512 377.84 511.934 378.031 511.887 cv
378.215 511.848 378.414 511.824 378.625 511.824 cv
379.129 511.824 379.563 511.926 379.93 512.129 cv
380.289 512.332 380.582 512.605 380.809 512.941 cv
381.031 513.285 381.199 513.684 381.305 514.141 cv
381.406 514.598 381.457 515.078 381.461 515.586 cv
cp
380.129 515.734 mo
380.125 515.379 380.098 515.031 380.047 514.691 cv
379.988 514.355 379.895 514.059 379.758 513.797 cv
379.621 513.539 379.441 513.328 379.219 513.168 cv
378.992 513.012 378.711 512.934 378.379 512.93 cv
378.211 512.934 378.047 512.957 377.887 513 cv
377.723 513.051 377.559 513.129 377.391 513.234 cv
377.223 513.348 377.047 513.488 376.871 513.656 cv
376.688 513.832 376.496 514.047 376.293 514.301 cv
376.293 517.098 li
376.648 517.531 376.988 517.863 377.313 518.086 cv
377.637 518.316 377.973 518.43 378.324 518.426 cv
378.645 518.43 378.922 518.352 379.156 518.191 cv
379.383 518.039 379.57 517.832 379.715 517.57 cv
379.859 517.316 379.965 517.027 380.031 516.707 cv
380.094 516.391 380.125 516.066 380.129 515.734 cv
cp
f
386.598 515.449 mo
386.598 515.652 386.574 515.789 386.527 515.867 cv
386.48 515.945 386.41 515.984 386.324 515.984 cv
383.066 515.984 li
382.973 515.984 382.906 515.945 382.859 515.863 cv
382.813 515.785 382.789 515.648 382.789 515.449 cv
382.789 515.254 382.813 515.113 382.859 515.035 cv
382.906 514.957 382.973 514.918 383.066 514.918 cv
386.324 514.918 li
386.363 514.918 386.402 514.926 386.438 514.941 cv
386.469 514.957 386.496 514.988 386.523 515.031 cv
386.543 515.078 386.563 515.133 386.578 515.199 cv
386.59 515.27 386.598 515.355 386.598 515.449 cv
cp
f
389.852 519.18 mo
389.848 519.223 389.84 519.258 389.82 519.289 cv
389.797 519.32 389.758 519.348 389.711 519.363 cv
389.656 519.383 389.59 519.395 389.504 519.41 cv
389.418 519.422 389.309 519.43 389.184 519.43 cv
389.055 519.43 388.949 519.422 388.863 519.41 cv
388.773 519.395 388.703 519.383 388.652 519.363 cv
388.598 519.348 388.563 519.32 388.543 519.289 cv
388.52 519.258 388.508 519.223 388.512 519.18 cv
388.512 509.5 li
388.508 509.461 388.52 509.426 388.547 509.391 cv
388.566 509.363 388.605 509.336 388.664 509.316 cv
388.715 509.301 388.785 509.285 388.875 509.27 cv
388.957 509.258 389.059 509.254 389.184 509.25 cv
389.309 509.254 389.418 509.258 389.504 509.27 cv
389.59 509.285 389.656 509.301 389.711 509.316 cv
389.758 509.336 389.797 509.363 389.82 509.391 cv
389.84 509.426 389.848 509.461 389.852 509.5 cv
cp
f
402.836 519.187 mo
402.832 519.234 402.824 519.27 402.805 519.293 cv
402.781 519.324 402.746 519.348 402.703 519.367 cv
402.652 519.387 402.586 519.398 402.508 519.414 cv
402.422 519.422 402.32 519.43 402.195 519.43 cv
402.063 519.43 401.953 519.422 401.875 519.414 cv
401.789 519.398 401.723 519.387 401.676 519.367 cv
401.621 519.348 401.586 519.324 401.57 519.293 cv
401.547 519.27 401.539 519.234 401.539 519.187 cv
401.539 514.926 li
401.539 514.633 401.512 514.363 401.461 514.117 cv
401.406 513.875 401.324 513.664 401.211 513.484 cv
401.098 513.309 400.953 513.172 400.777 513.078 cv
400.598 512.984 400.387 512.937 400.152 512.937 cv
399.855 512.937 399.559 513.055 399.262 513.281 cv
398.957 513.516 398.629 513.848 398.273 514.285 cv
398.273 519.187 li
398.27 519.234 398.258 519.27 398.242 519.293 cv
398.219 519.324 398.188 519.348 398.141 519.367 cv
398.09 519.387 398.023 519.398 397.941 519.414 cv
397.855 519.422 397.75 519.43 397.629 519.43 cv
397.508 519.43 397.406 519.422 397.32 519.414 cv
397.234 519.398 397.164 519.387 397.117 519.367 cv
397.063 519.348 397.031 519.324 397.016 519.293 cv
396.996 519.27 396.984 519.234 396.988 519.187 cv
396.988 514.926 li
396.984 514.633 396.957 514.363 396.902 514.117 cv
396.844 513.875 396.758 513.664 396.645 513.484 cv
396.531 513.309 396.387 513.172 396.215 513.078 cv
396.035 512.984 395.828 512.937 395.594 512.937 cv
395.293 512.937 394.996 513.055 394.695 513.281 cv
394.395 513.516 394.066 513.848 393.715 514.285 cv
393.715 519.187 li
393.711 519.234 393.699 519.27 393.684 519.293 cv
393.66 519.324 393.629 519.348 393.582 519.367 cv
393.535 519.387 393.469 519.398 393.391 519.414 cv
393.305 519.422 393.199 519.43 393.07 519.43 cv
392.941 519.43 392.836 519.422 392.758 519.414 cv
392.672 519.398 392.605 519.387 392.559 519.367 cv
392.504 519.348 392.473 519.324 392.457 519.293 cv
392.438 519.27 392.426 519.234 392.43 519.187 cv
392.43 512.176 li
392.426 512.137 392.434 512.102 392.453 512.07 cv
392.465 512.043 392.496 512.02 392.547 511.992 cv
392.59 511.973 392.652 511.957 392.727 511.945 cv
392.797 511.941 392.891 511.937 393.016 511.934 cv
393.125 511.937 393.223 511.941 393.301 511.945 cv
393.375 511.957 393.434 511.973 393.477 511.992 cv
393.516 512.02 393.543 512.043 393.563 512.07 cv
393.578 512.102 393.586 512.137 393.59 512.176 cv
393.59 513.102 li
393.98 512.66 394.363 512.34 394.738 512.133 cv
395.105 511.93 395.484 511.824 395.867 511.824 cv
396.156 511.824 396.414 511.859 396.648 511.926 cv
396.875 511.996 397.082 512.09 397.262 512.211 cv
397.438 512.332 397.586 512.477 397.715 512.645 cv
397.836 512.816 397.941 513.008 398.027 513.211 cv
398.258 512.961 398.48 512.746 398.691 512.566 cv
398.902 512.395 399.105 512.25 399.301 512.137 cv
399.496 512.031 399.684 511.953 399.867 511.898 cv
400.051 511.852 400.238 511.824 400.426 511.824 cv
400.879 511.824 401.258 511.906 401.563 512.062 cv
401.867 512.227 402.113 512.437 402.309 512.699 cv
402.496 512.965 402.633 513.273 402.715 513.629 cv
402.793 513.984 402.832 514.359 402.836 514.754 cv
cp
f
410.469 519.195 mo
410.465 519.258 410.445 519.305 410.406 519.336 cv
410.363 519.367 410.305 519.391 410.234 519.406 cv
410.156 519.422 410.051 519.43 409.914 519.43 cv
409.777 519.43 409.668 519.422 409.59 519.406 cv
409.504 519.391 409.445 519.367 409.414 519.336 cv
409.375 519.305 409.359 519.258 409.363 519.195 cv
409.363 518.496 li
409.055 518.824 408.711 519.078 408.336 519.258 cv
407.957 519.441 407.559 519.527 407.141 519.531 cv
406.766 519.527 406.434 519.48 406.137 519.387 cv
405.84 519.289 405.586 519.152 405.375 518.969 cv
405.164 518.789 405 518.566 404.883 518.301 cv
404.766 518.039 404.707 517.738 404.711 517.395 cv
404.707 517.004 404.785 516.66 404.949 516.367 cv
405.105 516.078 405.34 515.836 405.645 515.645 cv
405.945 515.453 406.313 515.309 406.75 515.211 cv
407.184 515.117 407.676 515.07 408.223 515.066 cv
409.191 515.066 li
409.191 514.52 li
409.188 514.25 409.16 514.012 409.105 513.805 cv
409.047 513.598 408.953 513.426 408.828 513.285 cv
408.695 513.148 408.531 513.043 408.332 512.973 cv
408.125 512.902 407.875 512.867 407.586 512.867 cv
407.266 512.867 406.98 512.906 406.73 512.98 cv
406.473 513.059 406.254 513.141 406.066 513.23 cv
405.879 513.324 405.719 513.41 405.594 513.48 cv
405.461 513.559 405.367 513.594 405.309 513.594 cv
405.266 513.594 405.23 513.586 405.199 513.562 cv
405.168 513.547 405.141 513.516 405.117 513.469 cv
405.094 513.43 405.074 513.375 405.066 513.309 cv
405.051 513.246 405.047 513.176 405.051 513.094 cv
405.047 512.969 405.055 512.863 405.078 512.785 cv
405.094 512.711 405.141 512.641 405.211 512.57 cv
405.281 512.504 405.402 512.426 405.574 512.336 cv
405.746 512.246 405.941 512.164 406.164 512.086 cv
406.387 512.016 406.633 511.953 406.898 511.898 cv
407.164 511.852 407.43 511.824 407.703 511.824 cv
408.203 511.824 408.633 511.883 408.984 511.996 cv
409.336 512.113 409.621 512.281 409.844 512.5 cv
410.059 512.723 410.219 512.996 410.32 513.32 cv
410.418 513.652 410.465 514.035 410.469 514.465 cv
cp
409.191 515.992 mo
408.09 515.992 li
407.734 515.996 407.43 516.027 407.172 516.082 cv
406.91 516.145 406.695 516.23 406.523 516.348 cv
406.352 516.465 406.227 516.605 406.148 516.77 cv
406.066 516.934 406.023 517.121 406.027 517.332 cv
406.023 517.699 406.141 517.992 406.371 518.203 cv
406.602 518.422 406.926 518.527 407.344 518.527 cv
407.68 518.527 407.992 518.441 408.281 518.27 cv
408.57 518.098 408.871 517.836 409.191 517.48 cv
cp
f
418.688 512.492 mo
418.684 512.676 418.66 512.809 418.613 512.887 cv
418.563 512.969 418.5 513.008 418.426 513.008 cv
417.418 513.008 li
417.598 513.195 417.727 513.402 417.801 513.629 cv
417.871 513.855 417.906 514.09 417.91 514.332 cv
417.906 514.738 417.84 515.098 417.715 515.41 cv
417.582 515.723 417.398 515.988 417.156 516.199 cv
416.914 516.418 416.625 516.582 416.297 516.695 cv
415.961 516.812 415.594 516.871 415.191 516.867 cv
414.902 516.871 414.629 516.832 414.375 516.754 cv
414.113 516.68 413.918 516.586 413.781 516.469 cv
413.688 516.566 413.609 516.672 413.551 516.789 cv
413.488 516.91 413.457 517.047 413.461 517.199 cv
413.457 517.383 413.543 517.535 413.715 517.652 cv
413.883 517.777 414.105 517.84 414.387 517.848 cv
416.219 517.926 li
416.566 517.937 416.883 517.984 417.176 518.07 cv
417.465 518.156 417.719 518.281 417.934 518.437 cv
418.145 518.598 418.313 518.789 418.434 519.02 cv
418.551 519.254 418.609 519.523 418.613 519.828 cv
418.609 520.148 418.543 520.453 418.41 520.746 cv
418.273 521.035 418.066 521.289 417.789 521.512 cv
417.508 521.73 417.152 521.906 416.723 522.035 cv
416.293 522.16 415.785 522.223 415.199 522.227 cv
414.629 522.223 414.145 522.176 413.75 522.082 cv
413.352 521.984 413.027 521.852 412.773 521.687 cv
412.52 521.52 412.336 521.324 412.223 521.094 cv
412.105 520.859 412.047 520.605 412.051 520.34 cv
412.047 520.168 412.066 520.004 412.113 519.844 cv
412.152 519.68 412.215 519.527 412.301 519.383 cv
412.383 519.238 412.492 519.102 412.621 518.965 cv
412.746 518.836 412.891 518.703 413.063 518.574 cv
412.805 518.445 412.617 518.281 412.496 518.082 cv
412.375 517.887 412.316 517.676 412.316 517.441 cv
412.316 517.129 412.379 516.844 412.508 516.594 cv
412.637 516.344 412.797 516.121 412.992 515.922 cv
412.828 515.73 412.703 515.516 412.609 515.273 cv
412.516 515.035 412.469 514.742 412.469 514.395 cv
412.469 514 412.535 513.641 412.672 513.32 cv
412.805 513.004 412.992 512.738 413.234 512.52 cv
413.473 512.305 413.758 512.137 414.094 512.016 cv
414.426 511.902 414.793 511.844 415.191 511.84 cv
415.402 511.844 415.602 511.855 415.785 511.875 cv
415.969 511.902 416.141 511.934 416.305 511.973 cv
418.426 511.973 li
418.512 511.977 418.578 512.02 418.621 512.102 cv
418.664 512.191 418.684 512.32 418.688 512.492 cv
cp
416.68 514.34 mo
416.676 513.867 416.543 513.496 416.285 513.223 cv
416.02 512.957 415.648 512.82 415.168 512.82 cv
414.914 512.82 414.695 512.863 414.516 512.945 cv
414.328 513.031 414.176 513.145 414.055 513.289 cv
413.934 513.437 413.844 513.605 413.785 513.793 cv
413.723 513.98 413.691 514.18 413.695 514.387 cv
413.691 514.852 413.824 515.215 414.086 515.48 cv
414.348 515.746 414.715 515.879 415.191 515.875 cv
415.441 515.879 415.66 515.84 415.852 515.754 cv
416.035 515.676 416.191 515.562 416.316 515.422 cv
416.438 515.281 416.527 515.117 416.59 514.926 cv
416.645 514.742 416.676 514.547 416.68 514.34 cv
cp
417.324 519.898 mo
417.32 519.594 417.195 519.363 416.953 519.199 cv
416.703 519.039 416.371 518.949 415.953 518.937 cv
414.137 518.875 li
413.969 519.008 413.832 519.133 413.73 519.246 cv
413.621 519.363 413.539 519.473 413.477 519.582 cv
413.414 519.687 413.371 519.793 413.348 519.898 cv
413.324 520 413.313 520.105 413.313 520.215 cv
413.313 520.551 413.48 520.805 413.824 520.984 cv
414.164 521.156 414.645 521.246 415.262 521.246 cv
415.648 521.246 415.973 521.207 416.238 521.133 cv
416.496 521.055 416.707 520.953 416.871 520.832 cv
417.027 520.703 417.145 520.562 417.219 520.402 cv
417.285 520.242 417.32 520.074 417.324 519.898 cv
cp
f
426.25 515.379 mo
426.246 515.582 426.195 515.723 426.098 515.809 cv
425.992 515.895 425.875 515.937 425.75 515.937 cv
421.133 515.937 li
421.129 516.328 421.168 516.68 421.25 516.992 cv
421.324 517.305 421.457 517.574 421.641 517.793 cv
421.82 518.02 422.055 518.191 422.352 518.309 cv
422.641 518.434 423 518.492 423.426 518.488 cv
423.758 518.492 424.055 518.465 424.316 518.406 cv
424.578 518.355 424.805 518.293 424.996 518.223 cv
425.184 518.156 425.34 518.098 425.465 518.039 cv
425.586 517.988 425.68 517.961 425.742 517.957 cv
425.777 517.961 425.809 517.969 425.84 517.984 cv
425.867 518.004 425.891 518.031 425.91 518.066 cv
425.922 518.105 425.934 518.156 425.945 518.219 cv
425.949 518.285 425.953 518.363 425.957 518.457 cv
425.953 518.527 425.949 518.586 425.949 518.633 cv
425.941 518.68 425.938 518.723 425.93 518.762 cv
425.922 518.801 425.906 518.836 425.891 518.867 cv
425.867 518.898 425.844 518.93 425.82 518.957 cv
425.789 518.988 425.707 519.035 425.566 519.098 cv
425.426 519.164 425.242 519.227 425.02 519.289 cv
424.793 519.352 424.535 519.406 424.242 519.457 cv
423.949 519.504 423.637 519.527 423.305 519.531 cv
422.727 519.527 422.219 519.449 421.789 519.289 cv
421.352 519.129 420.988 518.891 420.695 518.574 cv
420.395 518.258 420.172 517.863 420.023 517.383 cv
419.875 516.906 419.801 516.348 419.801 515.711 cv
419.801 515.113 419.875 514.574 420.031 514.09 cv
420.184 513.613 420.41 513.203 420.707 512.867 cv
421 512.531 421.355 512.273 421.77 512.094 cv
422.184 511.914 422.648 511.824 423.164 511.824 cv
423.715 511.824 424.184 511.914 424.57 512.09 cv
424.957 512.27 425.273 512.508 425.527 512.805 cv
425.773 513.105 425.957 513.457 426.074 513.855 cv
426.188 514.262 426.246 514.691 426.25 515.145 cv
cp
424.957 514.996 mo
424.973 514.32 424.82 513.789 424.504 513.406 cv
424.188 513.023 423.719 512.832 423.102 512.828 cv
422.777 512.832 422.496 512.891 422.258 513.008 cv
422.016 513.129 421.816 513.289 421.656 513.484 cv
421.492 513.684 421.367 513.914 421.281 514.176 cv
421.191 514.437 421.141 514.711 421.133 514.996 cv
cp
f
432.617 517.277 mo
432.613 517.641 432.547 517.961 432.418 518.238 cv
432.285 518.52 432.098 518.754 431.855 518.945 cv
431.609 519.141 431.316 519.285 430.98 519.383 cv
430.641 519.48 430.27 519.527 429.867 519.531 cv
429.613 519.527 429.375 519.508 429.152 519.473 cv
428.926 519.43 428.727 519.383 428.547 519.324 cv
428.367 519.266 428.215 519.203 428.09 519.137 cv
427.965 519.074 427.871 519.016 427.816 518.961 cv
427.758 518.91 427.719 518.84 427.695 518.742 cv
427.668 518.652 427.656 518.523 427.656 518.363 cv
427.656 518.266 427.66 518.184 427.672 518.113 cv
427.68 518.047 427.691 517.992 427.711 517.949 cv
427.723 517.91 427.746 517.879 427.773 517.859 cv
427.801 517.844 427.832 517.836 427.871 517.832 cv
427.926 517.836 428.012 517.871 428.125 517.937 cv
428.234 518.012 428.371 518.09 428.539 518.168 cv
428.699 518.254 428.891 518.328 429.117 518.398 cv
429.336 518.469 429.594 518.504 429.891 518.504 cv
430.105 518.504 430.305 518.48 430.484 518.434 cv
430.66 518.387 430.813 518.32 430.941 518.227 cv
431.07 518.141 431.172 518.023 431.242 517.879 cv
431.313 517.742 431.348 517.574 431.348 517.379 cv
431.348 517.184 431.297 517.02 431.195 516.883 cv
431.094 516.75 430.957 516.629 430.793 516.523 cv
430.625 516.422 430.441 516.332 430.234 516.246 cv
430.023 516.168 429.809 516.082 429.59 515.992 cv
429.371 515.906 429.156 515.805 428.945 515.691 cv
428.734 515.582 428.543 515.449 428.379 515.285 cv
428.207 515.129 428.074 514.934 427.977 514.707 cv
427.871 514.484 427.82 514.219 427.824 513.906 cv
427.82 513.633 427.875 513.367 427.984 513.113 cv
428.09 512.863 428.25 512.645 428.465 512.453 cv
428.676 512.266 428.941 512.113 429.262 511.996 cv
429.582 511.883 429.953 511.824 430.383 511.824 cv
430.566 511.824 430.754 511.84 430.941 511.871 cv
431.125 511.902 431.293 511.941 431.449 511.988 cv
431.598 512.035 431.727 512.086 431.836 512.141 cv
431.938 512.195 432.02 512.246 432.078 512.285 cv
432.129 512.332 432.164 512.367 432.188 512.395 cv
432.203 512.426 432.219 512.461 432.227 512.496 cv
432.234 512.539 432.242 512.586 432.25 512.641 cv
432.258 512.699 432.262 512.77 432.262 512.852 cv
432.262 512.941 432.258 513.02 432.25 513.082 cv
432.242 513.152 432.227 513.203 432.211 513.242 cv
432.188 513.285 432.168 513.316 432.145 513.332 cv
432.117 513.352 432.086 513.359 432.059 513.359 cv
432.008 513.359 431.941 513.332 431.855 513.273 cv
431.766 513.219 431.652 513.156 431.512 513.09 cv
431.371 513.027 431.203 512.969 431.016 512.906 cv
430.824 512.852 430.609 512.82 430.367 512.82 cv
430.145 512.82 429.953 512.848 429.789 512.895 cv
429.621 512.949 429.484 513.02 429.379 513.105 cv
429.273 513.199 429.191 513.305 429.141 513.43 cv
429.082 513.555 429.055 513.691 429.059 513.836 cv
429.055 514.039 429.105 514.207 429.211 514.344 cv
429.313 514.484 429.449 514.605 429.617 514.707 cv
429.781 514.812 429.973 514.906 430.188 514.988 cv
430.398 515.074 430.613 515.16 430.836 515.246 cv
431.055 515.336 431.273 515.437 431.492 515.543 cv
431.707 515.652 431.898 515.781 432.066 515.937 cv
432.23 516.094 432.363 516.281 432.465 516.5 cv
432.563 516.719 432.613 516.98 432.617 517.277 cv
cp
f
229.863 16.187 mo
229.859 16.34 229.855 16.465 229.844 16.562 cv
229.828 16.668 229.809 16.75 229.785 16.809 cv
229.762 16.875 229.73 16.922 229.691 16.945 cv
229.652 16.977 229.609 16.988 229.563 16.988 cv
224.496 16.988 li
224.32 16.988 224.176 16.937 224.063 16.836 cv
223.941 16.734 223.883 16.57 223.887 16.34 cv
223.887 7.55103 li
223.883 7.32397 223.941 7.15997 224.063 7.05499 cv
224.176 6.95697 224.32 6.90601 224.496 6.90198 cv
229.531 6.90198 li
229.574 6.90601 229.617 6.91803 229.656 6.94098 cv
229.691 6.96899 229.723 7.01599 229.75 7.078 cv
229.773 7.14801 229.789 7.22998 229.805 7.328 cv
229.813 7.43402 229.82 7.56201 229.824 7.71503 cv
229.82 7.86298 229.813 7.98798 229.805 8.086 cv
229.789 8.19098 229.773 8.27301 229.75 8.33197 cv
229.723 8.39502 229.691 8.43701 229.656 8.46503 cv
229.617 8.49597 229.574 8.51202 229.531 8.508 cv
225.93 8.508 li
225.93 10.973 li
228.977 10.973 li
229.023 10.977 229.066 10.992 229.105 11.016 cv
229.145 11.047 229.176 11.09 229.203 11.148 cv
229.227 11.211 229.246 11.293 229.262 11.391 cv
229.273 11.492 229.281 11.613 229.281 11.758 cv
229.281 11.91 229.273 12.035 229.262 12.133 cv
229.246 12.234 229.227 12.312 229.203 12.371 cv
229.176 12.434 229.145 12.477 229.105 12.5 cv
229.066 12.527 229.023 12.543 228.977 12.539 cv
225.93 12.539 li
225.93 15.383 li
229.563 15.383 li
229.609 15.383 229.652 15.398 229.691 15.426 cv
229.73 15.457 229.762 15.504 229.785 15.562 cv
229.809 15.629 229.828 15.711 229.844 15.809 cv
229.855 15.914 229.859 16.039 229.863 16.187 cv
cp
f
238.199 16.723 mo
238.195 16.777 238.18 16.82 238.152 16.859 cv
238.117 16.898 238.066 16.934 237.996 16.957 cv
237.922 16.984 237.82 17 237.695 17.016 cv
237.566 17.027 237.41 17.035 237.227 17.035 cv
237.031 17.035 236.871 17.027 236.746 17.016 cv
236.617 17 236.516 16.984 236.445 16.957 cv
236.367 16.934 236.316 16.898 236.289 16.859 cv
236.254 16.82 236.238 16.777 236.242 16.723 cv
236.242 12.758 li
236.238 12.422 236.215 12.156 236.168 11.961 cv
236.117 11.77 236.043 11.605 235.953 11.469 cv
235.859 11.332 235.742 11.227 235.594 11.148 cv
235.445 11.074 235.27 11.035 235.074 11.035 cv
234.82 11.035 234.57 11.129 234.316 11.309 cv
234.063 11.492 233.797 11.754 233.523 12.102 cv
233.523 16.723 li
233.52 16.777 233.504 16.82 233.477 16.859 cv
233.441 16.898 233.387 16.934 233.316 16.957 cv
233.238 16.984 233.141 17 233.016 17.016 cv
232.891 17.027 232.73 17.035 232.543 17.035 cv
232.348 17.035 232.191 17.027 232.066 17.016 cv
231.941 17 231.84 16.984 231.766 16.957 cv
231.688 16.934 231.633 16.898 231.605 16.859 cv
231.57 16.82 231.555 16.777 231.559 16.723 cv
231.559 9.77301 li
231.555 9.72699 231.57 9.67999 231.598 9.63702 cv
231.621 9.60199 231.668 9.57001 231.738 9.539 cv
231.805 9.51599 231.891 9.49597 232 9.47998 cv
232.105 9.47302 232.238 9.46503 232.402 9.461 cv
232.566 9.46503 232.703 9.47302 232.813 9.47998 cv
232.918 9.49597 233.004 9.51599 233.066 9.539 cv
233.125 9.57001 233.168 9.60199 233.195 9.63702 cv
233.219 9.67999 233.23 9.72699 233.234 9.77301 cv
233.234 10.574 li
233.617 10.164 234.008 9.85199 234.406 9.64099 cv
234.801 9.43402 235.219 9.33197 235.652 9.328 cv
236.121 9.33197 236.52 9.40997 236.848 9.56201 cv
237.172 9.72302 237.434 9.93402 237.633 10.199 cv
237.832 10.469 237.977 10.781 238.066 11.137 cv
238.152 11.496 238.195 11.926 238.199 12.43 cv
cp
f
246.551 13.047 mo
246.547 13.285 246.496 13.461 246.391 13.574 cv
246.281 13.691 246.133 13.75 245.953 13.746 cv
241.719 13.746 li
241.715 14.047 241.75 14.316 241.824 14.555 cv
241.891 14.797 242.004 15 242.16 15.168 cv
242.313 15.34 242.508 15.469 242.75 15.555 cv
242.988 15.645 243.277 15.687 243.621 15.687 cv
243.961 15.687 244.262 15.664 244.523 15.613 cv
244.781 15.566 245.008 15.512 245.199 15.449 cv
245.387 15.391 245.543 15.336 245.672 15.285 cv
245.793 15.238 245.895 15.215 245.977 15.211 cv
246.02 15.215 246.059 15.223 246.094 15.238 cv
246.121 15.258 246.148 15.289 246.168 15.336 cv
246.188 15.383 246.199 15.449 246.211 15.535 cv
246.215 15.621 246.219 15.73 246.223 15.859 cv
246.219 15.977 246.219 16.074 246.215 16.152 cv
246.207 16.234 246.199 16.301 246.191 16.355 cv
246.18 16.414 246.164 16.465 246.145 16.5 cv
246.125 16.543 246.098 16.578 246.066 16.613 cv
246.031 16.652 245.938 16.703 245.789 16.762 cv
245.633 16.828 245.441 16.891 245.211 16.945 cv
244.973 17.008 244.703 17.055 244.406 17.102 cv
244.102 17.141 243.781 17.164 243.441 17.168 cv
242.82 17.164 242.277 17.09 241.816 16.934 cv
241.348 16.781 240.961 16.543 240.652 16.227 cv
240.336 15.91 240.102 15.512 239.953 15.027 cv
239.797 14.547 239.723 13.98 239.727 13.324 cv
239.723 12.711 239.801 12.152 239.965 11.656 cv
240.121 11.16 240.355 10.742 240.668 10.395 cv
240.973 10.051 241.348 9.78497 241.785 9.60199 cv
242.223 9.422 242.715 9.33197 243.27 9.328 cv
243.848 9.33197 244.348 9.41803 244.762 9.586 cv
245.176 9.76202 245.512 10 245.777 10.301 cv
246.039 10.605 246.234 10.965 246.363 11.379 cv
246.484 11.797 246.547 12.246 246.551 12.734 cv
cp
244.648 12.484 mo
244.66 11.934 244.551 11.5 244.316 11.187 cv
244.082 10.875 243.715 10.719 243.223 10.715 cv
242.973 10.719 242.758 10.766 242.574 10.855 cv
242.387 10.953 242.234 11.078 242.113 11.234 cv
241.988 11.395 241.895 11.582 241.832 11.797 cv
241.766 12.012 241.727 12.242 241.719 12.484 cv
cp
f
252.625 10.418 mo
252.625 10.609 252.617 10.762 252.609 10.879 cv
252.594 11 252.578 11.094 252.563 11.16 cv
252.539 11.23 252.512 11.277 252.48 11.301 cv
252.441 11.328 252.398 11.34 252.352 11.34 cv
252.305 11.34 252.258 11.332 252.211 11.312 cv
252.156 11.297 252.098 11.277 252.035 11.254 cv
251.965 11.234 251.895 11.215 251.82 11.195 cv
251.738 11.18 251.652 11.172 251.563 11.168 cv
251.449 11.172 251.34 11.191 251.234 11.234 cv
251.125 11.281 251.012 11.352 250.898 11.441 cv
250.777 11.535 250.656 11.66 250.531 11.812 cv
250.402 11.973 250.266 12.164 250.121 12.391 cv
250.121 16.723 li
250.117 16.777 250.102 16.82 250.074 16.859 cv
250.039 16.898 249.984 16.934 249.914 16.957 cv
249.836 16.984 249.738 17 249.613 17.016 cv
249.488 17.027 249.328 17.035 249.141 17.035 cv
248.945 17.035 248.789 17.027 248.664 17.016 cv
248.539 17 248.438 16.984 248.363 16.957 cv
248.285 16.934 248.23 16.898 248.203 16.859 cv
248.168 16.82 248.152 16.777 248.156 16.723 cv
248.156 9.77301 li
248.152 9.72699 248.168 9.67999 248.195 9.63702 cv
248.219 9.60199 248.266 9.57001 248.336 9.539 cv
248.402 9.51599 248.488 9.49597 248.598 9.47998 cv
248.703 9.47302 248.836 9.46503 249 9.461 cv
249.164 9.46503 249.301 9.47302 249.41 9.47998 cv
249.516 9.49597 249.602 9.51599 249.664 9.539 cv
249.723 9.57001 249.766 9.60199 249.793 9.63702 cv
249.816 9.67999 249.828 9.72699 249.832 9.77301 cv
249.832 10.637 li
250.012 10.379 250.184 10.168 250.348 9.99597 cv
250.504 9.83197 250.66 9.69501 250.809 9.59399 cv
250.953 9.49597 251.098 9.42999 251.242 9.38702 cv
251.387 9.35199 251.531 9.33197 251.68 9.328 cv
251.746 9.33197 251.82 9.336 251.898 9.34003 cv
251.977 9.35199 252.055 9.36298 252.141 9.37903 cv
252.219 9.39801 252.293 9.41803 252.359 9.44098 cv
252.418 9.46503 252.465 9.492 252.496 9.51599 cv
252.523 9.547 252.543 9.57397 252.559 9.60199 cv
252.57 9.63702 252.582 9.67999 252.594 9.72998 cv
252.602 9.789 252.609 9.87097 252.617 9.97699 cv
252.621 10.086 252.625 10.234 252.625 10.418 cv
cp
f
259.801 10.254 mo
259.797 10.508 259.77 10.691 259.715 10.809 cv
259.656 10.93 259.586 10.988 259.508 10.988 cv
258.688 10.988 li
258.801 11.113 258.883 11.258 258.934 11.414 cv
258.98 11.574 259.004 11.738 259.008 11.906 cv
259.004 12.316 258.938 12.676 258.805 12.988 cv
258.668 13.305 258.473 13.57 258.223 13.781 cv
257.969 14 257.668 14.164 257.313 14.273 cv
256.953 14.391 256.555 14.445 256.125 14.441 cv
255.898 14.445 255.688 14.418 255.484 14.359 cv
255.281 14.309 255.125 14.246 255.016 14.168 cv
254.953 14.238 254.895 14.316 254.848 14.41 cv
254.797 14.504 254.773 14.609 254.777 14.719 cv
254.773 14.875 254.84 14.996 254.973 15.09 cv
255.102 15.187 255.289 15.242 255.531 15.25 cv
257.223 15.312 li
257.617 15.328 257.969 15.387 258.277 15.48 cv
258.586 15.582 258.848 15.715 259.059 15.887 cv
259.27 16.062 259.43 16.273 259.539 16.516 cv
259.648 16.762 259.703 17.035 259.707 17.348 cv
259.703 17.684 259.629 18.008 259.48 18.316 cv
259.332 18.617 259.105 18.879 258.805 19.105 cv
258.5 19.324 258.121 19.504 257.668 19.637 cv
257.211 19.766 256.68 19.828 256.078 19.832 cv
255.48 19.828 254.977 19.781 254.559 19.691 cv
254.141 19.594 253.797 19.465 253.531 19.301 cv
253.262 19.133 253.066 18.934 252.949 18.707 cv
252.824 18.473 252.766 18.219 252.766 17.945 cv
252.766 17.773 252.785 17.613 252.832 17.457 cv
252.871 17.301 252.938 17.148 253.027 17.008 cv
253.109 16.863 253.215 16.73 253.34 16.598 cv
253.465 16.469 253.605 16.344 253.77 16.223 cv
253.543 16.109 253.371 15.949 253.25 15.738 cv
253.129 15.535 253.07 15.309 253.07 15.062 cv
253.07 14.762 253.137 14.484 253.277 14.227 cv
253.414 13.977 253.598 13.746 253.824 13.543 cv
253.641 13.363 253.496 13.148 253.387 12.891 cv
253.277 12.641 253.223 12.32 253.227 11.937 cv
253.223 11.535 253.293 11.176 253.438 10.852 cv
253.578 10.535 253.777 10.266 254.035 10.043 cv
254.289 9.82397 254.594 9.65198 254.945 9.53497 cv
255.297 9.41803 255.688 9.35901 256.117 9.35901 cv
256.336 9.35901 256.543 9.375 256.742 9.39801 cv
256.941 9.42999 257.129 9.46503 257.301 9.508 cv
259.508 9.508 li
259.59 9.51202 259.66 9.57001 259.719 9.67999 cv
259.77 9.797 259.797 9.98798 259.801 10.254 cv
cp
257.285 11.898 mo
257.281 11.527 257.18 11.238 256.973 11.027 cv
256.762 10.824 256.469 10.719 256.094 10.715 cv
255.898 10.719 255.727 10.75 255.586 10.812 cv
255.438 10.879 255.316 10.969 255.223 11.078 cv
255.121 11.191 255.051 11.32 255.008 11.469 cv
254.957 11.617 254.934 11.773 254.938 11.93 cv
254.934 12.289 255.039 12.566 255.25 12.77 cv
255.457 12.977 255.746 13.082 256.117 13.078 cv
256.313 13.082 256.48 13.051 256.629 12.984 cv
256.77 12.926 256.891 12.84 256.992 12.727 cv
257.086 12.621 257.16 12.492 257.211 12.348 cv
257.258 12.207 257.281 12.059 257.285 11.898 cv
cp
257.746 17.449 mo
257.746 17.211 257.652 17.035 257.465 16.91 cv
257.277 16.789 257.02 16.719 256.691 16.707 cv
255.297 16.668 li
255.16 16.77 255.051 16.863 254.973 16.953 cv
254.891 17.043 254.828 17.129 254.781 17.215 cv
254.73 17.297 254.695 17.379 254.684 17.457 cv
254.664 17.535 254.656 17.613 254.66 17.699 cv
254.656 17.953 254.789 18.152 255.051 18.289 cv
255.313 18.422 255.684 18.488 256.164 18.492 cv
256.457 18.488 256.703 18.457 256.91 18.402 cv
257.109 18.34 257.273 18.262 257.402 18.164 cv
257.523 18.062 257.613 17.953 257.668 17.832 cv
257.719 17.711 257.746 17.582 257.746 17.449 cv
cp
f
265.133 16.988 mo
264.289 19.449 li
264.238 19.578 264.113 19.672 263.906 19.73 cv
263.699 19.785 263.395 19.812 262.996 19.816 cv
262.785 19.812 262.617 19.805 262.496 19.789 cv
262.371 19.77 262.281 19.738 262.219 19.699 cv
262.156 19.656 262.121 19.605 262.117 19.543 cv
262.109 19.48 262.125 19.406 262.164 19.32 cv
263.09 16.988 li
263.02 16.957 262.957 16.91 262.906 16.844 cv
262.848 16.781 262.809 16.711 262.785 16.637 cv
260.395 10.246 li
260.324 10.066 260.289 9.92999 260.293 9.83197 cv
260.289 9.73798 260.32 9.65997 260.387 9.60498 cv
260.445 9.55103 260.551 9.51599 260.699 9.492 cv
260.844 9.47699 261.039 9.46503 261.289 9.461 cv
261.508 9.46503 261.688 9.46899 261.82 9.47302 cv
261.949 9.48401 262.051 9.50403 262.125 9.53101 cv
262.195 9.56598 262.25 9.61298 262.289 9.67603 cv
262.324 9.742 262.359 9.836 262.398 9.953 cv
264.031 14.605 li
264.055 14.605 li
265.555 9.85901 li
265.578 9.72699 265.617 9.63702 265.672 9.59003 cv
265.719 9.547 265.801 9.51599 265.918 9.492 cv
266.027 9.47699 266.23 9.46503 266.52 9.461 cv
266.742 9.46503 266.926 9.47699 267.074 9.492 cv
267.219 9.51599 267.328 9.55499 267.402 9.60901 cv
267.469 9.672 267.504 9.74597 267.508 9.84003 cv
267.504 9.93402 267.484 10.047 267.445 10.176 cv
cp
f
279.574 15.461 mo
279.574 15.594 279.57 15.703 279.563 15.793 cv
279.555 15.887 279.543 15.965 279.527 16.027 cv
279.512 16.094 279.488 16.152 279.465 16.195 cv
279.434 16.242 279.395 16.293 279.34 16.352 cv
279.281 16.414 279.168 16.492 279.008 16.582 cv
278.84 16.68 278.641 16.77 278.406 16.852 cv
278.168 16.941 277.898 17.008 277.598 17.066 cv
277.289 17.121 276.961 17.152 276.613 17.152 cv
275.918 17.152 275.293 17.047 274.738 16.832 cv
274.18 16.621 273.707 16.305 273.32 15.879 cv
272.93 15.457 272.633 14.926 272.426 14.293 cv
272.219 13.66 272.113 12.922 272.117 12.078 cv
272.113 11.223 272.227 10.465 272.457 9.797 cv
272.684 9.133 273.004 8.57397 273.414 8.12097 cv
273.824 7.672 274.316 7.328 274.891 7.09399 cv
275.465 6.86298 276.098 6.74597 276.793 6.742 cv
277.066 6.74597 277.336 6.77002 277.602 6.81201 cv
277.859 6.85901 278.102 6.91803 278.32 6.992 cv
278.539 7.07001 278.738 7.15997 278.918 7.25403 cv
279.094 7.35498 279.215 7.43701 279.289 7.508 cv
279.355 7.578 279.406 7.63702 279.434 7.68402 cv
279.457 7.72998 279.477 7.79303 279.496 7.86298 cv
279.508 7.94098 279.52 8.02698 279.531 8.12097 cv
279.535 8.22302 279.539 8.34399 279.543 8.48401 cv
279.539 8.64502 279.535 8.77698 279.527 8.883 cv
279.516 8.99597 279.496 9.08197 279.473 9.14801 cv
279.445 9.21899 279.414 9.27002 279.379 9.297 cv
279.34 9.33197 279.297 9.34802 279.254 9.34399 cv
279.172 9.34802 279.074 9.30103 278.957 9.20697 cv
278.836 9.117 278.68 9.01599 278.492 8.90198 cv
278.301 8.79303 278.078 8.69098 277.816 8.59802 cv
277.551 8.508 277.238 8.46503 276.879 8.461 cv
276.477 8.46503 276.117 8.547 275.805 8.70697 cv
275.488 8.875 275.223 9.10901 275.004 9.40997 cv
274.781 9.71899 274.613 10.086 274.5 10.516 cv
274.383 10.949 274.324 11.434 274.328 11.969 cv
274.324 12.566 274.387 13.082 274.512 13.512 cv
274.633 13.949 274.805 14.305 275.035 14.582 cv
275.258 14.863 275.531 15.07 275.852 15.207 cv
276.168 15.348 276.527 15.418 276.934 15.414 cv
277.293 15.418 277.609 15.375 277.875 15.285 cv
278.141 15.203 278.367 15.109 278.555 15 cv
278.742 14.898 278.898 14.805 279.023 14.723 cv
279.145 14.641 279.238 14.598 279.309 14.598 cv
279.359 14.598 279.402 14.609 279.434 14.629 cv
279.465 14.648 279.488 14.687 279.512 14.75 cv
279.527 14.812 279.543 14.902 279.559 15.012 cv
279.566 15.129 279.574 15.277 279.574 15.461 cv
cp
f
287.953 13.176 mo
287.949 13.773 287.871 14.316 287.719 14.801 cv
287.559 15.293 287.324 15.711 287.008 16.062 cv
286.691 16.414 286.293 16.687 285.816 16.879 cv
285.336 17.07 284.777 17.164 284.141 17.168 cv
283.52 17.164 282.98 17.082 282.527 16.91 cv
282.066 16.742 281.688 16.492 281.391 16.164 cv
281.086 15.84 280.863 15.437 280.719 14.957 cv
280.574 14.48 280.504 13.934 280.504 13.316 cv
280.504 12.727 280.582 12.187 280.738 11.695 cv
280.895 11.207 281.133 10.785 281.453 10.434 cv
281.77 10.086 282.164 9.81201 282.641 9.617 cv
283.113 9.42603 283.672 9.33197 284.313 9.328 cv
284.938 9.33197 285.477 9.414 285.934 9.58197 cv
286.391 9.75403 286.77 10.004 287.066 10.328 cv
287.363 10.656 287.586 11.059 287.734 11.535 cv
287.879 12.016 287.949 12.562 287.953 13.176 cv
cp
285.934 13.254 mo
285.93 12.918 285.902 12.602 285.852 12.309 cv
285.793 12.023 285.699 11.773 285.574 11.559 cv
285.441 11.348 285.27 11.18 285.059 11.059 cv
284.84 10.941 284.57 10.883 284.242 10.879 cv
283.953 10.883 283.699 10.937 283.48 11.039 cv
283.262 11.148 283.082 11.305 282.941 11.508 cv
282.801 11.715 282.695 11.961 282.625 12.246 cv
282.555 12.539 282.52 12.867 282.52 13.23 cv
282.52 13.578 282.547 13.895 282.605 14.18 cv
282.66 14.473 282.754 14.723 282.883 14.934 cv
283.008 15.148 283.18 15.312 283.402 15.426 cv
283.617 15.547 283.887 15.605 284.211 15.602 cv
284.504 15.605 284.762 15.551 284.984 15.441 cv
285.199 15.336 285.379 15.184 285.52 14.977 cv
285.66 14.777 285.762 14.531 285.832 14.242 cv
285.895 13.957 285.93 13.629 285.934 13.254 cv
cp
f
296.148 16.723 mo
296.145 16.777 296.129 16.82 296.102 16.859 cv
296.066 16.898 296.016 16.934 295.945 16.957 cv
295.871 16.984 295.77 17 295.645 17.016 cv
295.516 17.027 295.359 17.035 295.176 17.035 cv
294.98 17.035 294.82 17.027 294.695 17.016 cv
294.566 17 294.465 16.984 294.395 16.957 cv
294.316 16.934 294.266 16.898 294.238 16.859 cv
294.203 16.82 294.188 16.777 294.191 16.723 cv
294.191 12.758 li
294.188 12.422 294.164 12.156 294.117 11.961 cv
294.066 11.77 293.992 11.605 293.902 11.469 cv
293.809 11.332 293.691 11.227 293.543 11.148 cv
293.395 11.074 293.219 11.035 293.023 11.035 cv
292.77 11.035 292.52 11.129 292.266 11.309 cv
292.012 11.492 291.746 11.754 291.473 12.102 cv
291.473 16.723 li
291.469 16.777 291.453 16.82 291.426 16.859 cv
291.391 16.898 291.336 16.934 291.266 16.957 cv
291.188 16.984 291.09 17 290.965 17.016 cv
290.84 17.027 290.68 17.035 290.492 17.035 cv
290.297 17.035 290.141 17.027 290.016 17.016 cv
289.891 17 289.789 16.984 289.715 16.957 cv
289.637 16.934 289.582 16.898 289.555 16.859 cv
289.52 16.82 289.504 16.777 289.508 16.723 cv
289.508 9.77301 li
289.504 9.72699 289.52 9.67999 289.547 9.63702 cv
289.57 9.60199 289.617 9.57001 289.688 9.539 cv
289.754 9.51599 289.84 9.49597 289.949 9.47998 cv
290.055 9.47302 290.188 9.46503 290.352 9.461 cv
290.516 9.46503 290.652 9.47302 290.762 9.47998 cv
290.867 9.49597 290.953 9.51599 291.016 9.539 cv
291.074 9.57001 291.117 9.60199 291.145 9.63702 cv
291.168 9.67999 291.18 9.72699 291.184 9.77301 cv
291.184 10.574 li
291.566 10.164 291.957 9.85199 292.355 9.64099 cv
292.75 9.43402 293.168 9.33197 293.602 9.328 cv
294.07 9.33197 294.469 9.40997 294.797 9.56201 cv
295.121 9.72302 295.383 9.93402 295.582 10.199 cv
295.781 10.469 295.926 10.781 296.016 11.137 cv
296.102 11.496 296.145 11.926 296.148 12.43 cv
cp
f
302.977 14.758 mo
302.973 15.156 302.898 15.504 302.754 15.805 cv
302.605 16.105 302.398 16.359 302.129 16.559 cv
301.855 16.766 301.535 16.914 301.168 17.016 cv
300.801 17.113 300.398 17.164 299.969 17.168 cv
299.703 17.164 299.457 17.145 299.223 17.109 cv
298.988 17.066 298.777 17.02 298.59 16.961 cv
298.402 16.902 298.246 16.84 298.121 16.777 cv
297.996 16.715 297.902 16.656 297.848 16.602 cv
297.789 16.547 297.746 16.465 297.719 16.348 cv
297.684 16.234 297.668 16.059 297.672 15.828 cv
297.668 15.68 297.676 15.559 297.688 15.465 cv
297.695 15.375 297.711 15.305 297.734 15.246 cv
297.754 15.195 297.777 15.156 297.813 15.137 cv
297.84 15.121 297.879 15.113 297.926 15.109 cv
297.98 15.113 298.066 15.145 298.18 15.207 cv
298.289 15.273 298.426 15.348 298.598 15.422 cv
298.762 15.504 298.957 15.574 299.176 15.641 cv
299.395 15.711 299.645 15.746 299.93 15.742 cv
300.105 15.746 300.262 15.727 300.402 15.687 cv
300.535 15.652 300.656 15.602 300.762 15.531 cv
300.859 15.465 300.934 15.379 300.988 15.273 cv
301.035 15.172 301.063 15.051 301.066 14.914 cv
301.063 14.758 301.016 14.625 300.922 14.516 cv
300.828 14.406 300.699 14.309 300.543 14.223 cv
300.379 14.141 300.199 14.062 300.004 13.988 cv
299.801 13.918 299.598 13.84 299.387 13.746 cv
299.176 13.66 298.969 13.559 298.773 13.441 cv
298.57 13.332 298.391 13.191 298.234 13.023 cv
298.07 12.859 297.945 12.66 297.852 12.422 cv
297.758 12.191 297.711 11.91 297.711 11.578 cv
297.711 11.25 297.773 10.945 297.902 10.664 cv
298.031 10.391 298.219 10.152 298.465 9.953 cv
298.707 9.758 299.004 9.60498 299.355 9.492 cv
299.703 9.38702 300.098 9.33197 300.539 9.328 cv
300.754 9.33197 300.965 9.34802 301.172 9.375 cv
301.375 9.40997 301.563 9.44897 301.73 9.492 cv
301.895 9.54303 302.035 9.59399 302.152 9.64502 cv
302.266 9.703 302.348 9.75 302.398 9.78497 cv
302.445 9.828 302.48 9.867 302.504 9.90198 cv
302.523 9.94501 302.535 9.992 302.547 10.043 cv
302.555 10.098 302.566 10.164 302.574 10.242 cv
302.582 10.328 302.586 10.426 302.586 10.543 cv
302.586 10.684 302.582 10.801 302.574 10.887 cv
302.566 10.98 302.551 11.051 302.535 11.098 cv
302.516 11.152 302.492 11.187 302.465 11.203 cv
302.43 11.227 302.395 11.234 302.355 11.23 cv
302.305 11.234 302.23 11.207 302.137 11.148 cv
302.035 11.098 301.914 11.039 301.766 10.973 cv
301.617 10.914 301.445 10.855 301.25 10.797 cv
301.055 10.746 300.832 10.719 300.586 10.715 cv
300.406 10.719 300.254 10.738 300.125 10.77 cv
299.992 10.809 299.883 10.859 299.805 10.926 cv
299.719 10.996 299.656 11.074 299.617 11.164 cv
299.57 11.258 299.551 11.355 299.555 11.457 cv
299.551 11.617 299.602 11.754 299.703 11.859 cv
299.801 11.973 299.93 12.066 300.094 12.148 cv
300.254 12.234 300.438 12.312 300.645 12.383 cv
300.848 12.457 301.055 12.539 301.266 12.621 cv
301.473 12.711 301.68 12.809 301.891 12.922 cv
302.094 13.035 302.277 13.176 302.438 13.34 cv
302.598 13.508 302.727 13.707 302.828 13.937 cv
302.922 14.172 302.973 14.445 302.977 14.758 cv
cp
f
311.043 16.723 mo
311.039 16.777 311.027 16.82 311.004 16.859 cv
310.977 16.898 310.93 16.934 310.867 16.957 cv
310.801 16.984 310.715 17 310.609 17.016 cv
310.504 17.027 310.371 17.035 310.211 17.035 cv
310.035 17.035 309.895 17.027 309.793 17.016 cv
309.684 17 309.602 16.984 309.539 16.957 cv
309.477 16.934 309.43 16.898 309.406 16.859 cv
309.375 16.82 309.363 16.777 309.367 16.723 cv
309.367 15.922 li
308.98 16.336 308.59 16.648 308.195 16.855 cv
307.793 17.062 307.383 17.164 306.961 17.168 cv
306.48 17.164 306.078 17.09 305.754 16.934 cv
305.43 16.781 305.168 16.566 304.969 16.297 cv
304.766 16.027 304.621 15.715 304.539 15.355 cv
304.449 15 304.406 14.559 304.41 14.027 cv
304.41 9.77301 li
304.406 9.72699 304.422 9.67999 304.453 9.63702 cv
304.48 9.60199 304.531 9.57001 304.609 9.539 cv
304.684 9.51599 304.785 9.49597 304.914 9.47998 cv
305.039 9.47302 305.195 9.46503 305.387 9.461 cv
305.574 9.46503 305.734 9.47302 305.859 9.47998 cv
305.984 9.49597 306.082 9.51599 306.16 9.539 cv
306.23 9.57001 306.285 9.60199 306.32 9.63702 cv
306.348 9.67999 306.363 9.72699 306.367 9.77301 cv
306.367 13.699 li
306.363 14.066 306.387 14.344 306.438 14.535 cv
306.48 14.727 306.551 14.891 306.652 15.027 cv
306.746 15.168 306.871 15.273 307.02 15.348 cv
307.168 15.426 307.34 15.465 307.535 15.461 cv
307.785 15.465 308.035 15.375 308.289 15.187 cv
308.539 15.008 308.809 14.742 309.094 14.395 cv
309.094 9.77301 li
309.094 9.72699 309.105 9.67999 309.137 9.63702 cv
309.16 9.60199 309.215 9.57001 309.293 9.539 cv
309.367 9.51599 309.465 9.49597 309.594 9.47998 cv
309.715 9.47302 309.875 9.46503 310.07 9.461 cv
310.262 9.46503 310.418 9.47302 310.543 9.47998 cv
310.664 9.49597 310.766 9.51599 310.84 9.539 cv
310.91 9.57001 310.961 9.60199 310.996 9.63702 cv
311.023 9.67999 311.039 9.72699 311.043 9.77301 cv
cp
f
323.98 16.723 mo
323.977 16.777 323.961 16.82 323.934 16.859 cv
323.898 16.898 323.848 16.934 323.777 16.957 cv
323.703 16.984 323.602 17 323.48 17.016 cv
323.355 17.027 323.199 17.035 323.008 17.035 cv
322.809 17.035 322.648 17.027 322.523 17.016 cv
322.398 17 322.297 16.984 322.223 16.957 cv
322.145 16.934 322.094 16.898 322.066 16.859 cv
322.039 16.82 322.023 16.777 322.027 16.723 cv
322.027 12.602 li
322.023 12.371 322.004 12.156 321.961 11.961 cv
321.914 11.77 321.844 11.605 321.758 11.469 cv
321.664 11.332 321.551 11.227 321.414 11.148 cv
321.273 11.074 321.109 11.035 320.918 11.035 cv
320.684 11.035 320.445 11.129 320.207 11.309 cv
319.969 11.492 319.711 11.754 319.43 12.102 cv
319.43 16.723 li
319.43 16.777 319.414 16.82 319.383 16.859 cv
319.352 16.898 319.297 16.934 319.223 16.957 cv
319.145 16.984 319.043 17 318.922 17.016 cv
318.797 17.027 318.645 17.035 318.457 17.035 cv
318.262 17.035 318.102 17.027 317.98 17.016 cv
317.852 17 317.75 16.984 317.68 16.957 cv
317.602 16.934 317.551 16.898 317.52 16.859 cv
317.488 16.82 317.473 16.777 317.473 16.723 cv
317.473 12.602 li
317.473 12.371 317.449 12.156 317.406 11.961 cv
317.363 11.77 317.297 11.605 317.211 11.469 cv
317.117 11.332 317.004 11.227 316.867 11.148 cv
316.723 11.074 316.559 11.035 316.375 11.035 cv
316.133 11.035 315.895 11.129 315.656 11.309 cv
315.418 11.492 315.16 11.754 314.887 12.102 cv
314.887 16.723 li
314.883 16.777 314.867 16.82 314.84 16.859 cv
314.805 16.898 314.75 16.934 314.68 16.957 cv
314.602 16.984 314.504 17 314.379 17.016 cv
314.254 17.027 314.094 17.035 313.906 17.035 cv
313.711 17.035 313.555 17.027 313.43 17.016 cv
313.305 17 313.203 16.984 313.129 16.957 cv
313.051 16.934 312.996 16.898 312.969 16.859 cv
312.934 16.82 312.918 16.777 312.922 16.723 cv
312.922 9.77301 li
312.918 9.72699 312.934 9.67999 312.961 9.63702 cv
312.984 9.60199 313.031 9.57001 313.102 9.539 cv
313.168 9.51599 313.254 9.49597 313.363 9.47998 cv
313.469 9.47302 313.602 9.46503 313.766 9.461 cv
313.93 9.46503 314.066 9.47302 314.176 9.47998 cv
314.281 9.49597 314.367 9.51599 314.43 9.539 cv
314.488 9.57001 314.531 9.60199 314.559 9.63702 cv
314.582 9.67999 314.594 9.72699 314.598 9.77301 cv
314.598 10.574 li
314.98 10.164 315.363 9.85199 315.746 9.64099 cv
316.125 9.43402 316.527 9.33197 316.945 9.328 cv
317.23 9.33197 317.484 9.35901 317.715 9.41803 cv
317.941 9.47998 318.148 9.56598 318.328 9.67603 cv
318.508 9.789 318.66 9.92603 318.789 10.078 cv
318.918 10.234 319.027 10.406 319.117 10.598 cv
319.324 10.375 319.527 10.184 319.73 10.023 cv
319.926 9.86298 320.125 9.72998 320.32 9.62903 cv
320.516 9.52698 320.711 9.453 320.906 9.40198 cv
321.102 9.35498 321.301 9.33197 321.504 9.328 cv
321.965 9.33197 322.352 9.40997 322.672 9.56201 cv
322.984 9.72302 323.242 9.93402 323.438 10.199 cv
323.633 10.469 323.77 10.781 323.855 11.137 cv
323.934 11.496 323.977 11.875 323.98 12.273 cv
cp
f
332.898 13.145 mo
332.898 13.766 332.832 14.324 332.699 14.82 cv
332.566 15.316 332.371 15.738 332.117 16.086 cv
331.863 16.434 331.547 16.703 331.168 16.887 cv
330.785 17.074 330.352 17.164 329.867 17.168 cv
329.66 17.164 329.473 17.145 329.309 17.109 cv
329.137 17.066 328.973 17.008 328.816 16.93 cv
328.656 16.852 328.5 16.754 328.348 16.629 cv
328.188 16.512 328.027 16.371 327.863 16.207 cv
327.863 19.48 li
327.859 19.527 327.844 19.574 327.816 19.621 cv
327.781 19.66 327.727 19.695 327.656 19.727 cv
327.578 19.75 327.48 19.773 327.355 19.793 cv
327.23 19.805 327.07 19.812 326.883 19.816 cv
326.688 19.812 326.531 19.805 326.406 19.793 cv
326.281 19.773 326.18 19.75 326.105 19.727 cv
326.027 19.695 325.973 19.66 325.945 19.621 cv
325.91 19.574 325.895 19.527 325.898 19.48 cv
325.898 9.77301 li
325.895 9.72699 325.91 9.67999 325.938 9.63702 cv
325.961 9.60199 326.004 9.57001 326.074 9.539 cv
326.137 9.51599 326.223 9.49597 326.332 9.47998 cv
326.434 9.47302 326.57 9.46503 326.734 9.461 cv
326.891 9.46503 327.02 9.47302 327.125 9.47998 cv
327.23 9.49597 327.316 9.51599 327.383 9.539 cv
327.445 9.57001 327.492 9.60199 327.52 9.63702 cv
327.543 9.67999 327.555 9.72699 327.559 9.77301 cv
327.559 10.59 li
327.758 10.383 327.957 10.203 328.156 10.043 cv
328.348 9.88702 328.547 9.75403 328.75 9.64502 cv
328.953 9.54303 329.16 9.461 329.379 9.40601 cv
329.59 9.35498 329.82 9.33197 330.07 9.328 cv
330.574 9.33197 331.008 9.42999 331.371 9.62903 cv
331.727 9.83197 332.02 10.109 332.246 10.453 cv
332.469 10.805 332.633 11.207 332.742 11.668 cv
332.844 12.129 332.898 12.621 332.898 13.145 cv
cp
330.855 13.285 mo
330.852 12.992 330.832 12.711 330.789 12.434 cv
330.742 12.164 330.664 11.922 330.563 11.707 cv
330.453 11.496 330.313 11.324 330.141 11.195 cv
329.965 11.07 329.75 11.008 329.492 11.004 cv
329.359 11.008 329.23 11.027 329.105 11.062 cv
328.977 11.105 328.848 11.168 328.715 11.254 cv
328.582 11.344 328.445 11.457 328.309 11.598 cv
328.164 11.738 328.016 11.914 327.863 12.117 cv
327.863 14.41 li
328.137 14.758 328.398 15.027 328.648 15.215 cv
328.895 15.406 329.156 15.5 329.43 15.5 cv
329.684 15.5 329.898 15.437 330.082 15.305 cv
330.258 15.18 330.406 15.008 330.52 14.797 cv
330.633 14.586 330.715 14.348 330.773 14.082 cv
330.824 13.816 330.852 13.551 330.855 13.285 cv
cp
f
338.395 16.039 mo
338.395 16.266 338.379 16.441 338.352 16.562 cv
338.32 16.687 338.281 16.773 338.238 16.82 cv
338.188 16.871 338.121 16.914 338.031 16.953 cv
337.938 16.992 337.828 17.023 337.711 17.055 cv
337.586 17.078 337.453 17.102 337.313 17.121 cv
337.168 17.133 337.027 17.141 336.883 17.145 cv
336.492 17.141 336.152 17.09 335.867 16.996 cv
335.582 16.895 335.348 16.746 335.16 16.539 cv
334.973 16.336 334.832 16.078 334.746 15.766 cv
334.652 15.457 334.609 15.086 334.613 14.656 cv
334.613 11.098 li
333.781 11.098 li
333.68 11.102 333.605 11.039 333.555 10.914 cv
333.5 10.793 333.473 10.59 333.477 10.301 cv
333.473 10.152 333.48 10.023 333.496 9.922 cv
333.508 9.82001 333.527 9.73798 333.555 9.67603 cv
333.578 9.617 333.609 9.57397 333.652 9.547 cv
333.688 9.52301 333.734 9.51202 333.789 9.508 cv
334.613 9.508 li
334.613 7.95697 li
334.609 7.90997 334.625 7.86298 334.656 7.81598 cv
334.684 7.77698 334.734 7.742 334.813 7.711 cv
334.887 7.68701 334.988 7.664 335.117 7.64801 cv
335.242 7.63702 335.398 7.633 335.59 7.62903 cv
335.777 7.633 335.938 7.63702 336.066 7.64801 cv
336.191 7.664 336.293 7.68701 336.367 7.711 cv
336.438 7.742 336.488 7.77698 336.523 7.81598 cv
336.551 7.86298 336.566 7.90997 336.57 7.95697 cv
336.57 9.508 li
338.082 9.508 li
338.133 9.51202 338.18 9.52301 338.219 9.547 cv
338.258 9.57397 338.289 9.617 338.316 9.67603 cv
338.34 9.73798 338.359 9.82001 338.375 9.922 cv
338.387 10.023 338.395 10.152 338.395 10.301 cv
338.395 10.59 338.367 10.793 338.316 10.914 cv
338.262 11.039 338.188 11.102 338.09 11.098 cv
336.57 11.098 li
336.57 14.363 li
336.566 14.742 336.625 15.027 336.75 15.215 cv
336.867 15.406 337.082 15.5 337.387 15.5 cv
337.488 15.5 337.582 15.492 337.668 15.473 cv
337.75 15.457 337.824 15.437 337.891 15.41 cv
337.953 15.391 338.008 15.367 338.055 15.348 cv
338.098 15.332 338.137 15.324 338.176 15.32 cv
338.203 15.324 338.234 15.332 338.266 15.348 cv
338.293 15.367 338.313 15.406 338.332 15.457 cv
338.344 15.516 338.359 15.59 338.375 15.68 cv
338.387 15.777 338.395 15.895 338.395 16.039 cv
cp
f
341.781 16.723 mo
341.777 16.777 341.762 16.82 341.734 16.859 cv
341.699 16.898 341.645 16.934 341.574 16.957 cv
341.496 16.984 341.398 17 341.273 17.016 cv
341.148 17.027 340.988 17.035 340.801 17.035 cv
340.605 17.035 340.449 17.027 340.324 17.016 cv
340.199 17 340.098 16.984 340.023 16.957 cv
339.945 16.934 339.891 16.898 339.863 16.859 cv
339.828 16.82 339.813 16.777 339.816 16.723 cv
339.816 9.789 li
339.813 9.73798 339.828 9.69098 339.863 9.65198 cv
339.891 9.61298 339.945 9.58197 340.023 9.55103 cv
340.098 9.52698 340.199 9.50403 340.324 9.48401 cv
340.449 9.47302 340.605 9.46503 340.801 9.461 cv
340.988 9.46503 341.148 9.47302 341.273 9.48401 cv
341.398 9.50403 341.496 9.52698 341.574 9.55103 cv
341.645 9.58197 341.699 9.61298 341.734 9.65198 cv
341.762 9.69098 341.777 9.73798 341.781 9.789 cv
cp
341.93 7.41803 mo
341.93 7.81598 341.848 8.09003 341.688 8.23798 cv
341.523 8.39099 341.227 8.46503 340.793 8.461 cv
340.348 8.46503 340.047 8.39099 339.898 8.24597 cv
339.742 8.10199 339.668 7.84003 339.668 7.45697 cv
339.668 7.06201 339.746 6.789 339.906 6.63702 cv
340.063 6.48401 340.363 6.40601 340.809 6.40601 cv
341.242 6.40601 341.539 6.47998 341.695 6.62903 cv
341.852 6.77698 341.93 7.04303 341.93 7.41803 cv
cp
f
350.773 13.176 mo
350.77 13.773 350.691 14.316 350.539 14.801 cv
350.379 15.293 350.145 15.711 349.828 16.062 cv
349.512 16.414 349.113 16.687 348.637 16.879 cv
348.156 17.07 347.598 17.164 346.961 17.168 cv
346.34 17.164 345.801 17.082 345.348 16.91 cv
344.887 16.742 344.508 16.492 344.211 16.164 cv
343.906 15.84 343.684 15.437 343.539 14.957 cv
343.395 14.48 343.324 13.934 343.324 13.316 cv
343.324 12.727 343.402 12.187 343.559 11.695 cv
343.715 11.207 343.953 10.785 344.273 10.434 cv
344.59 10.086 344.984 9.81201 345.461 9.617 cv
345.934 9.42603 346.492 9.33197 347.133 9.328 cv
347.758 9.33197 348.297 9.414 348.754 9.58197 cv
349.211 9.75403 349.59 10.004 349.887 10.328 cv
350.184 10.656 350.406 11.059 350.555 11.535 cv
350.699 12.016 350.77 12.562 350.773 13.176 cv
cp
348.754 13.254 mo
348.75 12.918 348.723 12.602 348.672 12.309 cv
348.613 12.023 348.52 11.773 348.395 11.559 cv
348.262 11.348 348.09 11.18 347.879 11.059 cv
347.66 10.941 347.391 10.883 347.063 10.879 cv
346.773 10.883 346.52 10.937 346.301 11.039 cv
346.082 11.148 345.902 11.305 345.762 11.508 cv
345.621 11.715 345.516 11.961 345.445 12.246 cv
345.375 12.539 345.34 12.867 345.34 13.23 cv
345.34 13.578 345.367 13.895 345.426 14.18 cv
345.48 14.473 345.574 14.723 345.703 14.934 cv
345.828 15.148 346 15.312 346.223 15.426 cv
346.438 15.547 346.707 15.605 347.031 15.602 cv
347.324 15.605 347.582 15.551 347.805 15.441 cv
348.02 15.336 348.199 15.184 348.34 14.977 cv
348.48 14.777 348.582 14.531 348.652 14.242 cv
348.715 13.957 348.75 13.629 348.754 13.254 cv
cp
f
359.016 16.723 mo
359.012 16.777 358.996 16.82 358.969 16.859 cv
358.934 16.898 358.883 16.934 358.813 16.957 cv
358.738 16.984 358.637 17 358.512 17.016 cv
358.383 17.027 358.227 17.035 358.043 17.035 cv
357.848 17.035 357.688 17.027 357.563 17.016 cv
357.434 17 357.332 16.984 357.262 16.957 cv
357.184 16.934 357.133 16.898 357.105 16.859 cv
357.07 16.82 357.055 16.777 357.059 16.723 cv
357.059 12.758 li
357.055 12.422 357.031 12.156 356.984 11.961 cv
356.934 11.77 356.859 11.605 356.77 11.469 cv
356.676 11.332 356.559 11.227 356.41 11.148 cv
356.262 11.074 356.086 11.035 355.891 11.035 cv
355.637 11.035 355.387 11.129 355.133 11.309 cv
354.879 11.492 354.613 11.754 354.34 12.102 cv
354.34 16.723 li
354.336 16.777 354.32 16.82 354.293 16.859 cv
354.258 16.898 354.203 16.934 354.133 16.957 cv
354.055 16.984 353.957 17 353.832 17.016 cv
353.707 17.027 353.547 17.035 353.359 17.035 cv
353.164 17.035 353.008 17.027 352.883 17.016 cv
352.758 17 352.656 16.984 352.582 16.957 cv
352.504 16.934 352.449 16.898 352.422 16.859 cv
352.387 16.82 352.371 16.777 352.375 16.723 cv
352.375 9.77301 li
352.371 9.72699 352.387 9.67999 352.414 9.63702 cv
352.438 9.60199 352.484 9.57001 352.555 9.539 cv
352.621 9.51599 352.707 9.49597 352.816 9.47998 cv
352.922 9.47302 353.055 9.46503 353.219 9.461 cv
353.383 9.46503 353.52 9.47302 353.629 9.47998 cv
353.734 9.49597 353.82 9.51599 353.883 9.539 cv
353.941 9.57001 353.984 9.60199 354.012 9.63702 cv
354.035 9.67999 354.047 9.72699 354.051 9.77301 cv
354.051 10.574 li
354.434 10.164 354.824 9.85199 355.223 9.64099 cv
355.617 9.43402 356.035 9.33197 356.469 9.328 cv
356.938 9.33197 357.336 9.40997 357.664 9.56201 cv
357.988 9.72302 358.25 9.93402 358.449 10.199 cv
358.648 10.469 358.793 10.781 358.883 11.137 cv
358.969 11.496 359.012 11.926 359.016 12.43 cv
cp
f
368.336 13.07 mo
368.332 13.371 368.305 13.582 368.25 13.699 cv
368.191 13.824 368.102 13.883 367.977 13.879 cv
364.734 13.879 li
364.605 13.883 364.512 13.82 364.457 13.695 cv
364.395 13.574 364.367 13.367 364.371 13.07 cv
364.367 12.781 364.395 12.574 364.457 12.453 cv
364.512 12.336 364.605 12.277 364.734 12.273 cv
367.977 12.273 li
368.039 12.277 368.09 12.289 368.137 12.312 cv
368.176 12.34 368.215 12.387 368.25 12.445 cv
368.277 12.512 368.301 12.594 368.316 12.695 cv
368.328 12.801 368.332 12.926 368.336 13.07 cv
cp
f
381.008 16.723 mo
381.008 16.785 380.996 16.832 380.977 16.867 cv
380.957 16.91 380.91 16.941 380.832 16.965 cv
380.754 16.988 380.637 17.004 380.488 17.02 cv
380.332 17.027 380.129 17.035 379.871 17.035 cv
379.652 17.035 379.477 17.027 379.348 17.02 cv
379.219 17.004 379.117 16.988 379.043 16.961 cv
378.965 16.934 378.91 16.898 378.883 16.852 cv
378.848 16.812 378.824 16.758 378.805 16.691 cv
377.898 14.441 li
377.789 14.187 377.684 13.961 377.582 13.762 cv
377.473 13.566 377.359 13.402 377.234 13.27 cv
377.105 13.141 376.957 13.039 376.793 12.969 cv
376.625 12.902 376.434 12.871 376.219 12.867 cv
375.578 12.867 li
375.578 16.707 li
375.574 16.762 375.559 16.809 375.527 16.848 cv
375.492 16.891 375.438 16.926 375.359 16.949 cv
375.281 16.977 375.176 16.996 375.047 17.012 cv
374.914 17.027 374.75 17.035 374.551 17.035 cv
374.352 17.035 374.184 17.027 374.055 17.012 cv
373.918 16.996 373.813 16.977 373.738 16.949 cv
373.656 16.926 373.602 16.891 373.574 16.848 cv
373.539 16.809 373.523 16.762 373.527 16.707 cv
373.527 7.55103 li
373.523 7.32397 373.582 7.15997 373.703 7.05499 cv
373.816 6.95697 373.961 6.90601 374.137 6.90198 cv
376.746 6.90198 li
377.008 6.90601 377.227 6.90997 377.402 6.91803 cv
377.57 6.92999 377.727 6.94098 377.871 6.95697 cv
378.273 7.01599 378.637 7.117 378.961 7.25403 cv
379.285 7.39801 379.563 7.58197 379.789 7.80499 cv
380.016 8.03497 380.188 8.30103 380.309 8.60901 cv
380.426 8.91803 380.484 9.27301 380.488 9.672 cv
380.484 10.012 380.441 10.32 380.359 10.594 cv
380.27 10.875 380.145 11.121 379.98 11.34 cv
379.813 11.559 379.605 11.75 379.363 11.906 cv
379.117 12.07 378.84 12.199 378.531 12.297 cv
378.68 12.371 378.824 12.461 378.957 12.562 cv
379.09 12.672 379.211 12.797 379.328 12.941 cv
379.441 13.09 379.555 13.258 379.66 13.445 cv
379.762 13.637 379.863 13.852 379.965 14.09 cv
380.816 16.078 li
380.891 16.277 380.941 16.418 380.969 16.508 cv
380.992 16.602 381.008 16.676 381.008 16.723 cv
cp
378.367 9.883 mo
378.363 9.55103 378.289 9.27002 378.141 9.039 cv
377.988 8.81201 377.742 8.65198 377.402 8.55499 cv
377.297 8.53101 377.18 8.508 377.047 8.492 cv
376.914 8.47699 376.73 8.46899 376.496 8.46899 cv
375.578 8.46899 li
375.578 11.332 li
376.621 11.332 li
376.91 11.336 377.168 11.301 377.387 11.227 cv
377.605 11.16 377.785 11.059 377.93 10.93 cv
378.074 10.805 378.184 10.652 378.258 10.473 cv
378.328 10.297 378.363 10.102 378.367 9.883 cv
cp
f
388.594 13.047 mo
388.59 13.285 388.539 13.461 388.434 13.574 cv
388.324 13.691 388.176 13.75 387.996 13.746 cv
383.762 13.746 li
383.758 14.047 383.793 14.316 383.867 14.555 cv
383.934 14.797 384.047 15 384.203 15.168 cv
384.355 15.34 384.551 15.469 384.793 15.555 cv
385.031 15.645 385.32 15.687 385.664 15.687 cv
386.004 15.687 386.305 15.664 386.566 15.613 cv
386.824 15.566 387.051 15.512 387.242 15.449 cv
387.43 15.391 387.586 15.336 387.715 15.285 cv
387.836 15.238 387.938 15.215 388.02 15.211 cv
388.063 15.215 388.102 15.223 388.137 15.238 cv
388.164 15.258 388.191 15.289 388.211 15.336 cv
388.23 15.383 388.242 15.449 388.254 15.535 cv
388.258 15.621 388.262 15.73 388.266 15.859 cv
388.262 15.977 388.262 16.074 388.258 16.152 cv
388.25 16.234 388.242 16.301 388.234 16.355 cv
388.223 16.414 388.207 16.465 388.188 16.5 cv
388.168 16.543 388.141 16.578 388.109 16.613 cv
388.074 16.652 387.98 16.703 387.832 16.762 cv
387.676 16.828 387.484 16.891 387.254 16.945 cv
387.016 17.008 386.746 17.055 386.449 17.102 cv
386.145 17.141 385.824 17.164 385.484 17.168 cv
384.863 17.164 384.32 17.09 383.859 16.934 cv
383.391 16.781 383.004 16.543 382.695 16.227 cv
382.379 15.91 382.145 15.512 381.996 15.027 cv
381.84 14.547 381.766 13.98 381.77 13.324 cv
381.766 12.711 381.844 12.152 382.008 11.656 cv
382.164 11.16 382.398 10.742 382.711 10.395 cv
383.016 10.051 383.391 9.78497 383.828 9.60199 cv
384.266 9.422 384.758 9.33197 385.313 9.328 cv
385.891 9.33197 386.391 9.41803 386.805 9.586 cv
387.219 9.76202 387.555 10 387.82 10.301 cv
388.082 10.605 388.277 10.965 388.406 11.379 cv
388.527 11.797 388.59 12.246 388.594 12.734 cv
cp
386.691 12.484 mo
386.703 11.934 386.594 11.5 386.359 11.187 cv
386.125 10.875 385.758 10.719 385.266 10.715 cv
385.016 10.719 384.801 10.766 384.617 10.855 cv
384.43 10.953 384.277 11.078 384.156 11.234 cv
384.031 11.395 383.938 11.582 383.875 11.797 cv
383.809 12.012 383.77 12.242 383.762 12.484 cv
cp
f
401.258 16.723 mo
401.254 16.777 401.238 16.82 401.211 16.859 cv
401.176 16.898 401.125 16.934 401.055 16.957 cv
400.98 16.984 400.879 17 400.758 17.016 cv
400.633 17.027 400.477 17.035 400.285 17.035 cv
400.086 17.035 399.926 17.027 399.801 17.016 cv
399.676 17 399.574 16.984 399.5 16.957 cv
399.422 16.934 399.371 16.898 399.344 16.859 cv
399.316 16.82 399.301 16.777 399.305 16.723 cv
399.305 12.602 li
399.301 12.371 399.281 12.156 399.238 11.961 cv
399.191 11.77 399.121 11.605 399.035 11.469 cv
398.941 11.332 398.828 11.227 398.691 11.148 cv
398.551 11.074 398.387 11.035 398.195 11.035 cv
397.961 11.035 397.723 11.129 397.484 11.309 cv
397.246 11.492 396.988 11.754 396.707 12.102 cv
396.707 16.723 li
396.707 16.777 396.691 16.82 396.66 16.859 cv
396.629 16.898 396.574 16.934 396.5 16.957 cv
396.422 16.984 396.32 17 396.199 17.016 cv
396.074 17.027 395.922 17.035 395.734 17.035 cv
395.539 17.035 395.379 17.027 395.258 17.016 cv
395.129 17 395.027 16.984 394.957 16.957 cv
394.879 16.934 394.828 16.898 394.797 16.859 cv
394.766 16.82 394.75 16.777 394.75 16.723 cv
394.75 12.602 li
394.75 12.371 394.727 12.156 394.684 11.961 cv
394.641 11.77 394.574 11.605 394.488 11.469 cv
394.395 11.332 394.281 11.227 394.145 11.148 cv
394 11.074 393.836 11.035 393.652 11.035 cv
393.41 11.035 393.172 11.129 392.934 11.309 cv
392.695 11.492 392.438 11.754 392.164 12.102 cv
392.164 16.723 li
392.16 16.777 392.145 16.82 392.117 16.859 cv
392.082 16.898 392.027 16.934 391.957 16.957 cv
391.879 16.984 391.781 17 391.656 17.016 cv
391.531 17.027 391.371 17.035 391.184 17.035 cv
390.988 17.035 390.832 17.027 390.707 17.016 cv
390.582 17 390.48 16.984 390.406 16.957 cv
390.328 16.934 390.273 16.898 390.246 16.859 cv
390.211 16.82 390.195 16.777 390.199 16.723 cv
390.199 9.77301 li
390.195 9.72699 390.211 9.67999 390.238 9.63702 cv
390.262 9.60199 390.309 9.57001 390.379 9.539 cv
390.445 9.51599 390.531 9.49597 390.641 9.47998 cv
390.746 9.47302 390.879 9.46503 391.043 9.461 cv
391.207 9.46503 391.344 9.47302 391.453 9.47998 cv
391.559 9.49597 391.645 9.51599 391.707 9.539 cv
391.766 9.57001 391.809 9.60199 391.836 9.63702 cv
391.859 9.67999 391.871 9.72699 391.875 9.77301 cv
391.875 10.574 li
392.258 10.164 392.641 9.85199 393.023 9.64099 cv
393.402 9.43402 393.805 9.33197 394.223 9.328 cv
394.508 9.33197 394.762 9.35901 394.992 9.41803 cv
395.219 9.47998 395.426 9.56598 395.605 9.67603 cv
395.785 9.789 395.938 9.92603 396.066 10.078 cv
396.195 10.234 396.305 10.406 396.395 10.598 cv
396.602 10.375 396.805 10.184 397.008 10.023 cv
397.203 9.86298 397.402 9.72998 397.598 9.62903 cv
397.793 9.52698 397.988 9.453 398.184 9.40198 cv
398.379 9.35498 398.578 9.33197 398.781 9.328 cv
399.242 9.33197 399.629 9.40997 399.949 9.56201 cv
400.262 9.72302 400.52 9.93402 400.715 10.199 cv
400.91 10.469 401.047 10.781 401.133 11.137 cv
401.211 11.496 401.254 11.875 401.258 12.273 cv
cp
f
410.207 13.176 mo
410.203 13.773 410.125 14.316 409.973 14.801 cv
409.813 15.293 409.578 15.711 409.262 16.062 cv
408.945 16.414 408.547 16.687 408.07 16.879 cv
407.59 17.07 407.031 17.164 406.395 17.168 cv
405.773 17.164 405.234 17.082 404.781 16.91 cv
404.32 16.742 403.941 16.492 403.645 16.164 cv
403.34 15.84 403.117 15.437 402.973 14.957 cv
402.828 14.48 402.758 13.934 402.758 13.316 cv
402.758 12.727 402.836 12.187 402.992 11.695 cv
403.148 11.207 403.387 10.785 403.707 10.434 cv
404.023 10.086 404.418 9.81201 404.895 9.617 cv
405.367 9.42603 405.926 9.33197 406.566 9.328 cv
407.191 9.33197 407.73 9.414 408.188 9.58197 cv
408.645 9.75403 409.023 10.004 409.32 10.328 cv
409.617 10.656 409.84 11.059 409.988 11.535 cv
410.133 12.016 410.203 12.562 410.207 13.176 cv
cp
408.188 13.254 mo
408.184 12.918 408.156 12.602 408.105 12.309 cv
408.047 12.023 407.953 11.773 407.828 11.559 cv
407.695 11.348 407.523 11.18 407.313 11.059 cv
407.094 10.941 406.824 10.883 406.496 10.879 cv
406.207 10.883 405.953 10.937 405.734 11.039 cv
405.516 11.148 405.336 11.305 405.195 11.508 cv
405.055 11.715 404.949 11.961 404.879 12.246 cv
404.809 12.539 404.773 12.867 404.773 13.23 cv
404.773 13.578 404.801 13.895 404.859 14.18 cv
404.914 14.473 405.008 14.723 405.137 14.934 cv
405.262 15.148 405.434 15.312 405.656 15.426 cv
405.871 15.547 406.141 15.605 406.465 15.602 cv
406.758 15.605 407.016 15.551 407.238 15.441 cv
407.453 15.336 407.633 15.184 407.773 14.977 cv
407.914 14.777 408.016 14.531 408.086 14.242 cv
408.148 13.957 408.184 13.629 408.188 13.254 cv
cp
f
415.91 16.039 mo
415.91 16.266 415.895 16.441 415.867 16.562 cv
415.836 16.687 415.797 16.773 415.754 16.82 cv
415.703 16.871 415.637 16.914 415.547 16.953 cv
415.453 16.992 415.344 17.023 415.227 17.055 cv
415.102 17.078 414.969 17.102 414.828 17.121 cv
414.684 17.133 414.543 17.141 414.398 17.145 cv
414.008 17.141 413.668 17.09 413.383 16.996 cv
413.098 16.895 412.863 16.746 412.676 16.539 cv
412.488 16.336 412.348 16.078 412.262 15.766 cv
412.168 15.457 412.125 15.086 412.129 14.656 cv
412.129 11.098 li
411.297 11.098 li
411.195 11.102 411.121 11.039 411.07 10.914 cv
411.016 10.793 410.988 10.59 410.992 10.301 cv
410.988 10.152 410.996 10.023 411.012 9.922 cv
411.023 9.82001 411.043 9.73798 411.07 9.67603 cv
411.094 9.617 411.125 9.57397 411.168 9.547 cv
411.203 9.52301 411.25 9.51202 411.305 9.508 cv
412.129 9.508 li
412.129 7.95697 li
412.125 7.90997 412.141 7.86298 412.172 7.81598 cv
412.199 7.77698 412.25 7.742 412.328 7.711 cv
412.402 7.68701 412.504 7.664 412.633 7.64801 cv
412.758 7.63702 412.914 7.633 413.105 7.62903 cv
413.293 7.633 413.453 7.63702 413.582 7.64801 cv
413.707 7.664 413.809 7.68701 413.883 7.711 cv
413.953 7.742 414.004 7.77698 414.039 7.81598 cv
414.066 7.86298 414.082 7.90997 414.086 7.95697 cv
414.086 9.508 li
415.598 9.508 li
415.648 9.51202 415.695 9.52301 415.734 9.547 cv
415.773 9.57397 415.805 9.617 415.832 9.67603 cv
415.855 9.73798 415.875 9.82001 415.891 9.922 cv
415.902 10.023 415.91 10.152 415.91 10.301 cv
415.91 10.59 415.883 10.793 415.832 10.914 cv
415.777 11.039 415.703 11.102 415.605 11.098 cv
414.086 11.098 li
414.086 14.363 li
414.082 14.742 414.141 15.027 414.266 15.215 cv
414.383 15.406 414.598 15.5 414.902 15.5 cv
415.004 15.5 415.098 15.492 415.184 15.473 cv
415.266 15.457 415.34 15.437 415.406 15.41 cv
415.469 15.391 415.523 15.367 415.57 15.348 cv
415.613 15.332 415.652 15.324 415.691 15.32 cv
415.719 15.324 415.75 15.332 415.781 15.348 cv
415.809 15.367 415.828 15.406 415.848 15.457 cv
415.859 15.516 415.875 15.59 415.891 15.68 cv
415.902 15.777 415.91 15.895 415.91 16.039 cv
cp
f
423.5 13.047 mo
423.496 13.285 423.445 13.461 423.34 13.574 cv
423.23 13.691 423.082 13.75 422.902 13.746 cv
418.668 13.746 li
418.664 14.047 418.699 14.316 418.773 14.555 cv
418.84 14.797 418.953 15 419.109 15.168 cv
419.262 15.34 419.457 15.469 419.699 15.555 cv
419.938 15.645 420.227 15.687 420.57 15.687 cv
420.91 15.687 421.211 15.664 421.473 15.613 cv
421.73 15.566 421.957 15.512 422.148 15.449 cv
422.336 15.391 422.492 15.336 422.621 15.285 cv
422.742 15.238 422.844 15.215 422.926 15.211 cv
422.969 15.215 423.008 15.223 423.043 15.238 cv
423.07 15.258 423.098 15.289 423.117 15.336 cv
423.137 15.383 423.148 15.449 423.16 15.535 cv
423.164 15.621 423.168 15.73 423.172 15.859 cv
423.168 15.977 423.168 16.074 423.164 16.152 cv
423.156 16.234 423.148 16.301 423.141 16.355 cv
423.129 16.414 423.113 16.465 423.094 16.5 cv
423.074 16.543 423.047 16.578 423.016 16.613 cv
422.98 16.652 422.887 16.703 422.738 16.762 cv
422.582 16.828 422.391 16.891 422.16 16.945 cv
421.922 17.008 421.652 17.055 421.355 17.102 cv
421.051 17.141 420.73 17.164 420.391 17.168 cv
419.77 17.164 419.227 17.09 418.766 16.934 cv
418.297 16.781 417.91 16.543 417.602 16.227 cv
417.285 15.91 417.051 15.512 416.902 15.027 cv
416.746 14.547 416.672 13.98 416.676 13.324 cv
416.672 12.711 416.75 12.152 416.914 11.656 cv
417.07 11.16 417.305 10.742 417.617 10.395 cv
417.922 10.051 418.297 9.78497 418.734 9.60199 cv
419.172 9.422 419.664 9.33197 420.219 9.328 cv
420.797 9.33197 421.297 9.41803 421.711 9.586 cv
422.125 9.76202 422.461 10 422.727 10.301 cv
422.988 10.605 423.184 10.965 423.313 11.379 cv
423.434 11.797 423.496 12.246 423.5 12.734 cv
cp
421.598 12.484 mo
421.609 11.934 421.5 11.5 421.266 11.187 cv
421.031 10.875 420.664 10.719 420.172 10.715 cv
419.922 10.719 419.707 10.766 419.523 10.855 cv
419.336 10.953 419.184 11.078 419.063 11.234 cv
418.938 11.395 418.844 11.582 418.781 11.797 cv
418.715 12.012 418.676 12.242 418.668 12.484 cv
cp
f
440.805 16.707 mo
440.801 16.762 440.789 16.809 440.762 16.848 cv
440.73 16.891 440.676 16.926 440.605 16.949 cv
440.527 16.977 440.43 16.996 440.305 17.012 cv
440.18 17.027 440.02 17.035 439.828 17.035 cv
439.641 17.035 439.484 17.027 439.363 17.012 cv
439.234 16.996 439.137 16.977 439.066 16.949 cv
438.992 16.926 438.941 16.891 438.91 16.848 cv
438.879 16.809 438.863 16.762 438.863 16.707 cv
438.863 8.5 li
438.848 8.5 li
435.926 16.699 li
435.902 16.77 435.867 16.824 435.824 16.867 cv
435.773 16.914 435.711 16.949 435.633 16.973 cv
435.551 17 435.449 17.016 435.324 17.023 cv
435.199 17.031 435.047 17.035 434.875 17.035 cv
434.695 17.035 434.547 17.027 434.422 17.016 cv
434.297 17 434.191 16.98 434.113 16.953 cv
434.027 16.926 433.965 16.891 433.922 16.848 cv
433.871 16.809 433.84 16.762 433.828 16.699 cv
431.008 8.5 li
430.992 8.5 li
430.992 16.707 li
430.988 16.762 430.973 16.809 430.949 16.848 cv
430.918 16.891 430.867 16.926 430.789 16.949 cv
430.711 16.977 430.609 16.996 430.488 17.012 cv
430.363 17.027 430.207 17.035 430.02 17.035 cv
429.828 17.035 429.672 17.027 429.551 17.012 cv
429.422 16.996 429.32 16.977 429.25 16.949 cv
429.172 16.926 429.121 16.891 429.094 16.848 cv
429.063 16.809 429.047 16.762 429.051 16.707 cv
429.051 7.72302 li
429.047 7.461 429.117 7.258 429.262 7.11298 cv
429.398 6.97699 429.586 6.90601 429.824 6.90198 cv
431.164 6.90198 li
431.402 6.90601 431.605 6.92603 431.777 6.961 cv
431.945 7.00403 432.094 7.06598 432.223 7.15601 cv
432.344 7.25 432.449 7.37097 432.535 7.51599 cv
432.617 7.66803 432.688 7.85199 432.754 8.06598 cv
434.938 14.074 li
434.969 14.074 li
437.227 8.08197 li
437.293 7.86298 437.367 7.67999 437.449 7.52698 cv
437.527 7.37903 437.621 7.258 437.73 7.15997 cv
437.836 7.07001 437.961 7.00403 438.105 6.961 cv
438.25 6.92603 438.418 6.90601 438.613 6.90198 cv
439.992 6.90198 li
440.129 6.90601 440.25 6.922 440.355 6.95697 cv
440.453 6.99597 440.535 7.05103 440.605 7.117 cv
440.668 7.19098 440.719 7.27698 440.754 7.375 cv
440.785 7.47998 440.801 7.59802 440.805 7.72302 cv
cp
f
449.914 13.176 mo
449.91 13.773 449.832 14.316 449.68 14.801 cv
449.52 15.293 449.285 15.711 448.969 16.062 cv
448.652 16.414 448.254 16.687 447.777 16.879 cv
447.297 17.07 446.738 17.164 446.102 17.168 cv
445.48 17.164 444.941 17.082 444.488 16.91 cv
444.027 16.742 443.648 16.492 443.352 16.164 cv
443.047 15.84 442.824 15.437 442.68 14.957 cv
442.535 14.48 442.465 13.934 442.465 13.316 cv
442.465 12.727 442.543 12.187 442.699 11.695 cv
442.855 11.207 443.094 10.785 443.414 10.434 cv
443.73 10.086 444.125 9.81201 444.602 9.617 cv
445.074 9.42603 445.633 9.33197 446.273 9.328 cv
446.898 9.33197 447.438 9.414 447.895 9.58197 cv
448.352 9.75403 448.73 10.004 449.027 10.328 cv
449.324 10.656 449.547 11.059 449.695 11.535 cv
449.84 12.016 449.91 12.562 449.914 13.176 cv
cp
447.895 13.254 mo
447.891 12.918 447.863 12.602 447.813 12.309 cv
447.754 12.023 447.66 11.773 447.535 11.559 cv
447.402 11.348 447.23 11.18 447.02 11.059 cv
446.801 10.941 446.531 10.883 446.203 10.879 cv
445.914 10.883 445.66 10.937 445.441 11.039 cv
445.223 11.148 445.043 11.305 444.902 11.508 cv
444.762 11.715 444.656 11.961 444.586 12.246 cv
444.516 12.539 444.48 12.867 444.48 13.23 cv
444.48 13.578 444.508 13.895 444.566 14.18 cv
444.621 14.473 444.715 14.723 444.844 14.934 cv
444.969 15.148 445.141 15.312 445.363 15.426 cv
445.578 15.547 445.848 15.605 446.172 15.602 cv
446.465 15.605 446.723 15.551 446.945 15.441 cv
447.16 15.336 447.34 15.184 447.48 14.977 cv
447.621 14.777 447.723 14.531 447.793 14.242 cv
447.855 13.957 447.891 13.629 447.895 13.254 cv
cp
f
458.066 16.723 mo
458.063 16.785 458.051 16.832 458.027 16.867 cv
458 16.91 457.953 16.941 457.895 16.965 cv
457.828 16.988 457.746 17.004 457.641 17.02 cv
457.535 17.027 457.402 17.035 457.25 17.035 cv
457.078 17.035 456.945 17.027 456.844 17.02 cv
456.738 17.004 456.652 16.988 456.59 16.965 cv
456.523 16.941 456.477 16.91 456.449 16.867 cv
456.418 16.832 456.402 16.785 456.406 16.723 cv
456.406 15.953 li
456.047 16.34 455.672 16.637 455.281 16.848 cv
454.883 17.059 454.449 17.164 453.977 17.168 cv
453.441 17.164 452.992 17.062 452.629 16.859 cv
452.262 16.656 451.965 16.383 451.734 16.031 cv
451.5 15.687 451.332 15.281 451.23 14.812 cv
451.129 14.352 451.078 13.859 451.078 13.34 cv
451.078 12.727 451.141 12.172 451.273 11.676 cv
451.402 11.184 451.598 10.762 451.855 10.414 cv
452.109 10.066 452.426 9.80103 452.805 9.60901 cv
453.184 9.42603 453.621 9.33197 454.117 9.328 cv
454.504 9.33197 454.855 9.40997 455.176 9.56598 cv
455.488 9.72699 455.805 9.95697 456.117 10.262 cv
456.117 6.5 li
456.117 6.44897 456.129 6.40198 456.16 6.35901 cv
456.184 6.32001 456.238 6.28497 456.316 6.25403 cv
456.391 6.22699 456.488 6.20697 456.617 6.18701 cv
456.738 6.17603 456.898 6.16803 457.094 6.164 cv
457.285 6.16803 457.441 6.17603 457.566 6.18701 cv
457.688 6.20697 457.789 6.22699 457.863 6.25403 cv
457.934 6.28497 457.984 6.32001 458.02 6.35901 cv
458.047 6.40198 458.063 6.44897 458.066 6.5 cv
cp
456.117 12.078 mo
455.836 11.727 455.566 11.457 455.313 11.27 cv
455.051 11.082 454.781 10.988 454.504 10.988 cv
454.25 10.988 454.031 11.055 453.848 11.18 cv
453.66 11.312 453.512 11.48 453.402 11.691 cv
453.289 11.902 453.207 12.141 453.152 12.402 cv
453.098 12.668 453.07 12.937 453.07 13.207 cv
453.07 13.504 453.094 13.785 453.141 14.059 cv
453.188 14.336 453.262 14.582 453.371 14.797 cv
453.473 15.012 453.617 15.184 453.797 15.312 cv
453.973 15.445 454.195 15.512 454.465 15.508 cv
454.598 15.512 454.727 15.492 454.859 15.449 cv
454.984 15.414 455.117 15.352 455.25 15.258 cv
455.383 15.172 455.52 15.055 455.66 14.91 cv
455.801 14.77 455.953 14.594 456.117 14.387 cv
cp
f
466.465 13.047 mo
466.461 13.285 466.41 13.461 466.305 13.574 cv
466.195 13.691 466.047 13.75 465.867 13.746 cv
461.633 13.746 li
461.629 14.047 461.664 14.316 461.738 14.555 cv
461.805 14.797 461.918 15 462.074 15.168 cv
462.227 15.34 462.422 15.469 462.664 15.555 cv
462.902 15.645 463.191 15.687 463.535 15.687 cv
463.875 15.687 464.176 15.664 464.438 15.613 cv
464.695 15.566 464.922 15.512 465.113 15.449 cv
465.301 15.391 465.457 15.336 465.586 15.285 cv
465.707 15.238 465.809 15.215 465.891 15.211 cv
465.934 15.215 465.973 15.223 466.008 15.238 cv
466.035 15.258 466.063 15.289 466.082 15.336 cv
466.102 15.383 466.113 15.449 466.125 15.535 cv
466.129 15.621 466.133 15.73 466.137 15.859 cv
466.133 15.977 466.133 16.074 466.129 16.152 cv
466.121 16.234 466.113 16.301 466.105 16.355 cv
466.094 16.414 466.078 16.465 466.059 16.5 cv
466.039 16.543 466.012 16.578 465.98 16.613 cv
465.945 16.652 465.852 16.703 465.703 16.762 cv
465.547 16.828 465.355 16.891 465.125 16.945 cv
464.887 17.008 464.617 17.055 464.32 17.102 cv
464.016 17.141 463.695 17.164 463.355 17.168 cv
462.734 17.164 462.191 17.09 461.73 16.934 cv
461.262 16.781 460.875 16.543 460.566 16.227 cv
460.25 15.91 460.016 15.512 459.867 15.027 cv
459.711 14.547 459.637 13.98 459.641 13.324 cv
459.637 12.711 459.715 12.152 459.879 11.656 cv
460.035 11.16 460.27 10.742 460.582 10.395 cv
460.887 10.051 461.262 9.78497 461.699 9.60199 cv
462.137 9.422 462.629 9.33197 463.184 9.328 cv
463.762 9.33197 464.262 9.41803 464.676 9.586 cv
465.09 9.76202 465.426 10 465.691 10.301 cv
465.953 10.605 466.148 10.965 466.277 11.379 cv
466.398 11.797 466.461 12.246 466.465 12.734 cv
cp
464.563 12.484 mo
464.574 11.934 464.465 11.5 464.23 11.187 cv
463.996 10.875 463.629 10.719 463.137 10.715 cv
462.887 10.719 462.672 10.766 462.488 10.855 cv
462.301 10.953 462.148 11.078 462.027 11.234 cv
461.902 11.395 461.809 11.582 461.746 11.797 cv
461.68 12.012 461.641 12.242 461.633 12.484 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
