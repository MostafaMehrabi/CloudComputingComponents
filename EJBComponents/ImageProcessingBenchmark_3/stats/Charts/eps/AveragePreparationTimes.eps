%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AveragePreparationTimes.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:55:04 p.m.
%%BoundingBox: 0 0 715 543
%%HiResBoundingBox: 0 0 714.9601 542.5201
%%CropBox: 0 0 714.9601 542.5201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -542.52 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 542.52 li
714.96 542.52 li
714.96 0 li
cp
clp
gsave
0 542.52 mo
715 542.52 li
715 -.47998 li
0 -.47998 li
cp
clp
0 0 mo
714.961 0 li
714.961 542.52 li
0 542.52 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
52.199 469.559 mo
697.441 469.559 li
52.199 417.238 mo
697.441 417.238 li
52.199 364.922 mo
697.441 364.922 li
52.199 312.602 mo
697.441 312.602 li
52.199 260.281 mo
697.441 260.281 li
52.199 207.961 mo
697.441 207.961 li
52.199 155.52 mo
697.441 155.52 li
52.199 103.199 mo
697.441 103.199 li
52.199 50.879 mo
697.441 50.879 li
.135805 .104005 .108583 0 cmyk
@
52.199 443.398 mo
697.441 443.398 li
52.199 391.078 mo
697.441 391.078 li
52.199 338.762 mo
697.441 338.762 li
52.199 286.441 mo
697.441 286.441 li
52.199 234.121 mo
697.441 234.121 li
52.199 181.68 mo
697.441 181.68 li
52.199 129.359 mo
697.441 129.359 li
52.199 77.039 mo
697.441 77.039 li
52.199 24.719 mo
697.441 24.719 li
.326574 .281529 .277562 0 cmyk
@
92.52 24.719 mo
92.52 495.84 li
173.16 24.719 mo
173.16 495.84 li
253.801 24.719 mo
253.801 495.84 li
334.441 24.719 mo
334.441 495.84 li
415.078 24.719 mo
415.078 495.84 li
495.84 24.719 mo
495.84 495.84 li
576.48 24.719 mo
576.48 495.84 li
657.121 24.719 mo
657.121 495.84 li
.175235 .144778 .143648 0 cmyk
@
52.199 24.719 mo
52.199 495.84 li
132.84 24.719 mo
132.84 495.84 li
213.48 24.719 mo
213.48 495.84 li
294.121 24.719 mo
294.121 495.84 li
374.762 24.719 mo
374.762 495.84 li
455.52 24.719 mo
455.52 495.84 li
536.16 24.719 mo
536.16 495.84 li
616.801 24.719 mo
616.801 495.84 li
697.441 24.719 mo
697.441 495.84 li
.326574 .281529 .277562 0 cmyk
@
32.039 486.48 mo
39.121 486.48 li
39.121 503.519 li
32.039 503.519 li
cp
0 0 0 0 cmyk
ef
32.039 434.16 mo
39.121 434.16 li
39.121 451.199 li
32.039 451.199 li
cp
ef
32.039 381.84 mo
39.121 381.84 li
39.121 398.879 li
32.039 398.879 li
cp
ef
32.039 329.398 mo
39.121 329.398 li
39.121 346.558 li
32.039 346.558 li
cp
ef
32.039 277.078 mo
39.121 277.078 li
39.121 294.238 li
32.039 294.238 li
cp
ef
32.039 224.762 mo
39.121 224.762 li
39.121 241.801 li
32.039 241.801 li
cp
ef
32.039 172.441 mo
39.121 172.441 li
39.121 189.48 li
32.039 189.48 li
cp
ef
32.039 120.121 mo
39.121 120.121 li
39.121 137.16 li
32.039 137.16 li
cp
ef
32.039 67.68 mo
39.121 67.68 li
39.121 84.84 li
32.039 84.84 li
cp
ef
32.039 15.359 mo
39.121 15.359 li
39.121 32.519 li
32.039 32.519 li
cp
ef
.96 lw
52.199 495.84 mo
697.441 495.84 li
.369879 .299321 .304356 .000976577 cmyk
@
52.199 495.84 mo
52.199 500.281 li
132.84 495.84 mo
132.84 500.281 li
213.48 495.84 mo
213.48 500.281 li
294.121 495.84 mo
294.121 500.281 li
374.762 495.84 mo
374.762 500.281 li
455.52 495.84 mo
455.52 500.281 li
536.16 495.84 mo
536.16 500.281 li
616.801 495.84 mo
616.801 500.281 li
697.441 495.84 mo
697.441 500.281 li
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
1 lc
52.199 138.238 mo
132.84 345 li
213.48 421.801 li
294.121 447 li
374.762 450.48 li
455.52 459.602 li
536.16 465.602 li
616.801 470.039 li
697.441 473.16 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
57.121 143.211 mo
47.039 133.129 li
47.039 143.211 mo
57.121 133.129 li
.62829 .284672 0 0 cmyk
@
137.762 349.969 mo
127.68 339.891 li
127.68 349.969 mo
137.762 339.891 li
@
218.52 426.891 mo
208.441 416.809 li
208.441 426.891 mo
218.52 416.809 li
@
299.16 451.969 mo
289.078 441.891 li
289.078 451.969 mo
299.16 441.891 li
@
379.801 455.57 mo
369.719 445.488 li
369.719 455.57 mo
379.801 445.488 li
@
460.441 464.691 mo
450.359 454.609 li
450.359 464.691 mo
460.441 454.609 li
@
541.078 470.691 mo
531 460.609 li
531 470.691 mo
541.078 460.609 li
@
621.719 475.012 mo
611.641 464.93 li
611.641 475.012 mo
621.719 464.93 li
@
702.48 478.25 mo
692.398 468.172 li
692.398 478.25 mo
702.48 468.172 li
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
52.199 126.719 mo
132.84 308.879 li
213.48 420.602 li
294.121 445.801 li
374.762 449.281 li
455.52 459 li
536.16 465 li
616.801 474.84 li
697.441 472.68 li
@
grestore
47.039 121.609 mo
57 121.609 li
57 131.57 li
47.039 131.57 li
cp
@
127.68 303.891 mo
137.641 303.891 li
137.641 313.852 li
127.68 313.852 li
cp
@
208.441 415.488 mo
218.398 415.488 li
218.398 425.449 li
208.441 425.449 li
cp
@
289.078 440.691 mo
299.039 440.691 li
299.039 450.648 li
289.078 450.648 li
cp
@
369.719 444.289 mo
379.68 444.289 li
379.68 454.25 li
369.719 454.25 li
cp
@
450.359 454.012 mo
460.32 454.012 li
460.32 463.969 li
450.359 463.969 li
cp
@
531 460.012 mo
540.961 460.012 li
540.961 469.969 li
531 469.969 li
cp
@
611.641 469.852 mo
621.602 469.852 li
621.602 479.809 li
611.641 479.809 li
cp
@
692.398 467.691 mo
702.359 467.691 li
702.359 477.648 li
692.398 477.648 li
cp
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
52.199 84.121 mo
132.84 341.398 li
213.48 420.719 li
294.121 434.641 li
374.762 450 li
455.52 459.121 li
536.16 465.359 li
616.801 469.68 li
697.441 472.922 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
57.121 89.09 mo
47.039 79.012 li
47.039 89.09 mo
57.121 79.012 li
.0321965 .622736 .922606 .000579843 cmyk
@
137.762 346.371 mo
127.68 336.289 li
127.68 346.371 mo
137.762 336.289 li
@
218.52 425.809 mo
208.441 415.73 li
208.441 425.809 mo
218.52 415.73 li
@
299.16 439.73 mo
289.078 429.648 li
289.078 439.73 mo
299.16 429.648 li
@
379.801 454.969 mo
369.719 444.891 li
369.719 454.969 mo
379.801 444.891 li
@
460.441 464.211 mo
450.359 454.129 li
450.359 464.211 mo
460.441 454.129 li
@
541.078 470.328 mo
531 460.25 li
531 470.328 mo
541.078 460.25 li
@
621.719 474.77 mo
611.641 464.691 li
611.641 474.77 mo
621.719 464.691 li
@
702.48 477.891 mo
692.398 467.809 li
692.398 477.891 mo
702.48 467.809 li
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
52.199 117.719 mo
132.84 307.922 li
213.48 421.559 li
294.121 434.762 li
374.762 450.121 li
455.52 459.238 li
536.16 465.359 li
616.801 469.559 li
697.441 472.922 li
@
grestore
47.039 112.609 mo
57 112.609 li
57 122.57 li
47.039 122.57 li
cp
@
127.68 302.809 mo
137.641 302.809 li
137.641 312.77 li
127.68 312.77 li
cp
@
208.441 416.449 mo
218.398 416.449 li
218.398 426.41 li
208.441 426.41 li
cp
@
289.078 429.648 mo
299.039 429.648 li
299.039 439.609 li
289.078 439.609 li
cp
@
369.719 445.012 mo
379.68 445.012 li
379.68 454.969 li
369.719 454.969 li
cp
@
450.359 454.25 mo
460.32 454.25 li
460.32 464.211 li
450.359 464.211 li
cp
@
531 460.25 mo
540.961 460.25 li
540.961 470.211 li
531 470.211 li
cp
@
611.641 464.57 mo
621.602 464.57 li
621.602 474.531 li
611.641 474.531 li
cp
@
692.398 467.809 mo
702.359 467.809 li
702.359 477.77 li
692.398 477.77 li
cp
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
52.199 80.039 mo
132.84 309.602 li
213.48 420.238 li
294.121 445.68 li
374.762 449.641 li
455.52 458.879 li
536.16 465.121 li
616.801 469.559 li
697.441 472.922 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
57.121 85.012 mo
47.039 74.93 li
47.039 85.012 mo
57.121 74.93 li
.621118 .109194 .980743 .0040589 cmyk
@
137.762 314.691 mo
127.68 304.609 li
127.68 314.691 mo
137.762 304.609 li
@
218.52 425.328 mo
208.441 415.25 li
208.441 425.328 mo
218.52 415.25 li
@
299.16 450.77 mo
289.078 440.691 li
289.078 450.77 mo
299.16 440.691 li
@
379.801 454.73 mo
369.719 444.648 li
369.719 454.73 mo
379.801 444.648 li
@
460.441 463.969 mo
450.359 453.891 li
450.359 463.969 mo
460.441 453.891 li
@
541.078 470.211 mo
531 460.129 li
531 470.211 mo
541.078 460.129 li
@
621.719 474.531 mo
611.641 464.449 li
611.641 474.531 mo
621.719 464.449 li
@
702.48 477.891 mo
692.398 467.809 li
692.398 477.891 mo
702.48 467.809 li
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
52.199 69.48 mo
132.84 303.359 li
213.48 401.52 li
294.121 433.441 li
374.762 449.039 li
455.52 458.281 li
536.16 464.52 li
616.801 469.078 li
697.441 472.441 li
@
grestore
47.039 64.488 mo
57 64.488 li
57 74.449 li
47.039 74.449 li
cp
@
127.68 298.371 mo
137.641 298.371 li
137.641 308.328 li
127.68 308.328 li
cp
@
208.441 396.41 mo
218.398 396.41 li
218.398 406.371 li
208.441 406.371 li
cp
@
289.078 428.449 mo
299.039 428.449 li
299.039 438.41 li
289.078 438.41 li
cp
@
369.719 443.93 mo
379.68 443.93 li
379.68 453.891 li
369.719 453.891 li
cp
@
450.359 453.289 mo
460.32 453.289 li
460.32 463.25 li
450.359 463.25 li
cp
@
531 459.531 mo
540.961 459.531 li
540.961 469.488 li
531 469.488 li
cp
@
611.641 464.09 mo
621.602 464.09 li
621.602 474.051 li
611.641 474.051 li
cp
@
692.398 467.328 mo
702.359 467.328 li
702.359 477.289 li
692.398 477.289 li
cp
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
52.199 71.16 mo
132.84 335.641 li
213.48 417.359 li
294.121 433.68 li
374.762 457.559 li
455.52 458.52 li
536.16 464.762 li
616.801 469.199 li
697.441 472.441 li
0 .993988 1 0 cmyk
@
grestore
57.121 76.129 mo
47.039 66.051 li
47.039 76.129 mo
57.121 66.051 li
0 .993988 1 0 cmyk
@
137.762 340.73 mo
127.68 330.648 li
127.68 340.73 mo
137.762 330.648 li
@
218.52 422.328 mo
208.441 412.25 li
208.441 422.328 mo
218.52 412.25 li
@
299.16 438.77 mo
289.078 428.691 li
289.078 438.77 mo
299.16 428.691 li
@
379.801 462.648 mo
369.719 452.57 li
369.719 462.648 mo
379.801 452.57 li
@
460.441 463.488 mo
450.359 453.41 li
450.359 463.488 mo
460.441 453.41 li
@
541.078 469.73 mo
531 459.648 li
531 469.73 mo
541.078 459.648 li
@
621.719 474.289 mo
611.641 464.211 li
611.641 474.289 mo
621.719 464.211 li
@
702.48 477.531 mo
692.398 467.449 li
692.398 477.531 mo
702.48 467.449 li
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
52.199 69.602 mo
132.84 303.121 li
213.48 403.559 li
294.121 433.559 li
374.762 448.922 li
455.52 458.398 li
536.16 464.641 li
616.801 469.199 li
697.441 476.879 li
@
grestore
47.039 64.609 mo
57 64.609 li
57 74.57 li
47.039 74.57 li
cp
@
127.68 298.012 mo
137.641 298.012 li
137.641 307.969 li
127.68 307.969 li
cp
@
208.441 398.449 mo
218.398 398.449 li
218.398 408.41 li
208.441 408.41 li
cp
@
289.078 428.449 mo
299.039 428.449 li
299.039 438.41 li
289.078 438.41 li
cp
@
369.719 443.93 mo
379.68 443.93 li
379.68 453.891 li
369.719 453.891 li
cp
@
450.359 453.41 mo
460.32 453.41 li
460.32 463.371 li
450.359 463.371 li
cp
@
531 459.648 mo
540.961 459.648 li
540.961 469.609 li
531 469.609 li
cp
@
611.641 464.09 mo
621.602 464.09 li
621.602 474.051 li
611.641 474.051 li
cp
@
692.398 471.77 mo
702.359 471.77 li
702.359 481.731 li
692.398 481.731 li
cp
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.199 77.879 mo
132.84 339.961 li
213.48 417.121 li
294.121 420.359 li
374.762 438.359 li
455.52 450 li
536.16 457.441 li
616.801 464.281 li
697.441 467.039 li
.62829 .284672 0 0 cmyk
@
grestore
57.121 82.969 mo
47.039 72.891 li
47.039 82.969 mo
57.121 72.891 li
.62829 .284672 0 0 cmyk
@
137.762 345.051 mo
127.68 334.969 li
127.68 345.051 mo
137.762 334.969 li
@
218.52 422.09 mo
208.441 412.012 li
208.441 422.09 mo
218.52 412.012 li
@
299.16 425.449 mo
289.078 415.371 li
289.078 425.449 mo
299.16 415.371 li
@
379.801 443.449 mo
369.719 433.371 li
369.719 443.449 mo
379.801 433.371 li
@
460.441 454.969 mo
450.359 444.891 li
450.359 454.969 mo
460.441 444.891 li
@
541.078 462.41 mo
531 452.328 li
531 462.41 mo
541.078 452.328 li
@
621.719 469.25 mo
611.641 459.172 li
611.641 469.25 mo
621.719 459.172 li
@
702.48 472.012 mo
692.398 461.93 li
692.398 472.012 mo
702.48 461.93 li
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.199 116.879 mo
132.84 308.039 li
213.48 401.281 li
294.121 421.441 li
374.762 451.922 li
455.52 449.52 li
536.16 458.281 li
616.801 463.801 li
697.441 472.559 li
@
grestore
[4 3 ] 0 dsh
47.039 111.891 mo
57 111.891 li
57 121.852 li
47.039 121.852 li
cp
@
127.68 302.93 mo
137.641 302.93 li
137.641 312.891 li
127.68 312.891 li
cp
@
208.441 396.172 mo
218.398 396.172 li
218.398 406.129 li
208.441 406.129 li
cp
@
289.078 416.328 mo
299.039 416.328 li
299.039 426.289 li
289.078 426.289 li
cp
@
369.719 446.93 mo
379.68 446.93 li
379.68 456.891 li
369.719 456.891 li
cp
@
450.359 444.41 mo
460.32 444.41 li
460.32 454.371 li
450.359 454.371 li
cp
@
531 453.289 mo
540.961 453.289 li
540.961 463.25 li
531 463.25 li
cp
@
611.641 458.809 mo
621.602 458.809 li
621.602 468.77 li
611.641 468.77 li
cp
@
692.398 467.449 mo
702.359 467.449 li
702.359 477.41 li
692.398 477.41 li
cp
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.199 70.68 mo
132.84 337.922 li
213.48 417.121 li
294.121 421.199 li
374.762 427.441 li
455.52 446.762 li
536.16 451.078 li
616.801 457.559 li
697.441 463.441 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
[] 0 dsh
57.121 75.77 mo
47.039 65.691 li
47.039 75.77 mo
57.121 65.691 li
.0321965 .622736 .922606 .000579843 cmyk
@
137.762 343.012 mo
127.68 332.93 li
127.68 343.012 mo
137.762 332.93 li
@
218.52 422.09 mo
208.441 412.012 li
208.441 422.09 mo
218.52 412.012 li
@
299.16 426.172 mo
289.078 416.09 li
289.078 426.172 mo
299.16 416.09 li
@
379.801 432.531 mo
369.719 422.449 li
369.719 432.531 mo
379.801 422.449 li
@
460.441 451.73 mo
450.359 441.648 li
450.359 451.73 mo
460.441 441.648 li
@
541.078 456.172 mo
531 446.09 li
531 456.172 mo
541.078 446.09 li
@
621.719 462.648 mo
611.641 452.57 li
611.641 462.648 mo
621.719 452.57 li
@
702.48 468.41 mo
692.398 458.328 li
692.398 468.41 mo
702.48 458.328 li
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.199 126.602 mo
132.84 307.68 li
213.48 403.559 li
294.121 402.359 li
374.762 432.48 li
455.52 446.398 li
536.16 458.039 li
616.801 458.039 li
697.441 463.199 li
@
grestore
47.039 121.609 mo
57 121.609 li
57 131.57 li
47.039 131.57 li
cp
@
127.68 302.57 mo
137.641 302.57 li
137.641 312.531 li
127.68 312.531 li
cp
@
208.441 398.449 mo
218.398 398.449 li
218.398 408.41 li
208.441 408.41 li
cp
@
289.078 397.371 mo
299.039 397.371 li
299.039 407.328 li
289.078 407.328 li
cp
@
369.719 427.371 mo
379.68 427.371 li
379.68 437.328 li
369.719 437.328 li
cp
@
450.359 441.289 mo
460.32 441.289 li
460.32 451.25 li
450.359 451.25 li
cp
@
531 453.051 mo
540.961 453.051 li
540.961 463.012 li
531 463.012 li
cp
@
611.641 453.051 mo
621.602 453.051 li
621.602 463.012 li
611.641 463.012 li
cp
@
692.398 458.09 mo
702.359 458.09 li
702.359 468.051 li
692.398 468.051 li
cp
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.199 70.199 mo
132.84 340.199 li
213.48 416.762 li
294.121 397.078 li
374.762 423 li
455.52 435.121 li
536.16 446.52 li
616.801 451.199 li
697.441 456.602 li
.467353 0 .87747 0 cmyk
@
grestore
57.121 75.172 mo
47.039 65.09 li
47.039 75.172 mo
57.121 65.09 li
.621118 .109194 .980743 .0040589 cmyk
@
137.762 345.172 mo
127.68 335.09 li
127.68 345.172 mo
137.762 335.09 li
@
218.52 421.852 mo
208.441 411.77 li
208.441 421.852 mo
218.52 411.77 li
@
299.16 402.172 mo
289.078 392.09 li
289.078 402.172 mo
299.16 392.09 li
@
379.801 428.09 mo
369.719 418.012 li
369.719 428.09 mo
379.801 418.012 li
@
460.441 440.211 mo
450.359 430.129 li
450.359 440.211 mo
460.441 430.129 li
@
541.078 451.488 mo
531 441.41 li
531 451.488 mo
541.078 441.41 li
@
621.719 456.172 mo
611.641 446.09 li
611.641 456.172 mo
621.719 446.09 li
@
702.48 461.57 mo
692.398 451.488 li
692.398 461.57 mo
702.48 451.488 li
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.199 117 mo
132.84 303.238 li
213.48 403.559 li
294.121 402.359 li
374.762 419.762 li
455.52 439.199 li
536.16 447 li
616.801 449.879 li
697.441 457.68 li
.467353 0 .87747 0 cmyk
@
grestore
47.039 111.891 mo
57 111.891 li
57 121.852 li
47.039 121.852 li
cp
@
127.68 298.25 mo
137.641 298.25 li
137.641 308.211 li
127.68 308.211 li
cp
@
208.441 398.449 mo
218.398 398.449 li
218.398 408.41 li
208.441 408.41 li
cp
@
289.078 397.25 mo
299.039 397.25 li
299.039 407.211 li
289.078 407.211 li
cp
@
369.719 414.648 mo
379.68 414.648 li
379.68 424.609 li
369.719 424.609 li
cp
@
450.359 434.09 mo
460.32 434.09 li
460.32 444.051 li
450.359 444.051 li
cp
@
531 442.012 mo
540.961 442.012 li
540.961 451.969 li
531 451.969 li
cp
@
611.641 444.891 mo
621.602 444.891 li
621.602 454.852 li
611.641 454.852 li
cp
@
692.398 452.57 mo
702.359 452.57 li
702.359 462.531 li
692.398 462.531 li
cp
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.199 131.879 mo
132.84 307.922 li
213.48 416.762 li
294.121 415.078 li
374.762 424.559 li
455.52 429.359 li
536.16 443.641 li
616.801 446.762 li
697.441 451.559 li
0 .993988 1 0 cmyk
@
grestore
57.121 136.969 mo
47.039 126.891 li
47.039 136.969 mo
57.121 126.891 li
0 .993988 1 0 cmyk
@
137.762 312.891 mo
127.68 302.809 li
127.68 312.891 mo
137.762 302.809 li
@
218.52 421.852 mo
208.441 411.77 li
208.441 421.852 mo
218.52 411.77 li
@
299.16 420.051 mo
289.078 409.969 li
289.078 420.051 mo
299.16 409.969 li
@
379.801 429.648 mo
369.719 419.57 li
369.719 429.648 mo
379.801 419.57 li
@
460.441 434.328 mo
450.359 424.25 li
450.359 434.328 mo
460.441 424.25 li
@
541.078 448.73 mo
531 438.648 li
531 448.73 mo
541.078 438.648 li
@
621.719 451.852 mo
611.641 441.77 li
611.641 451.852 mo
621.719 441.77 li
@
702.48 456.531 mo
692.398 446.449 li
692.398 456.531 mo
702.48 446.449 li
@
gsave
52.078 24.719 mo
698.16 24.719 li
698.16 496.442 li
52.078 496.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.199 69.719 mo
132.84 308.281 li
213.48 403.559 li
294.121 402.121 li
374.762 420.121 li
455.52 429.84 li
536.16 453.719 li
616.801 456.961 li
697.441 450.359 li
@
grestore
47.039 64.73 mo
57 64.73 li
57 74.691 li
47.039 74.691 li
cp
@
127.68 303.289 mo
137.641 303.289 li
137.641 313.25 li
127.68 313.25 li
cp
@
208.441 398.449 mo
218.398 398.449 li
218.398 408.41 li
208.441 408.41 li
cp
@
289.078 397.129 mo
299.039 397.129 li
299.039 407.09 li
289.078 407.09 li
cp
@
369.719 415.129 mo
379.68 415.129 li
379.68 425.09 li
369.719 425.09 li
cp
@
450.359 424.852 mo
460.32 424.852 li
460.32 434.809 li
450.359 434.809 li
cp
@
531 448.609 mo
540.961 448.609 li
540.961 458.57 li
531 458.57 li
cp
@
611.641 451.852 mo
621.602 451.852 li
621.602 461.809 li
611.641 461.809 li
cp
@
692.398 445.25 mo
702.359 445.25 li
702.359 455.211 li
692.398 455.211 li
cp
@
32.078 486.52 mo
39.176 486.52 li
39.176 503.61 li
32.078 503.61 li
cp
0 0 0 0 cmyk
ef
38.73 495.48 mo
38.727 496.164 38.672 496.789 38.566 497.352 cv
38.457 497.918 38.281 498.402 38.031 498.805 cv
37.781 499.211 37.453 499.523 37.055 499.742 cv
36.648 499.965 36.152 500.074 35.566 500.074 cv
35.004 500.074 34.535 499.977 34.152 499.777 cv
33.77 499.578 33.461 499.285 33.227 498.898 cv
32.992 498.512 32.824 498.035 32.73 497.469 cv
32.629 496.906 32.582 496.258 32.586 495.523 cv
32.582 494.848 32.637 494.227 32.75 493.66 cv
32.855 493.094 33.035 492.609 33.285 492.203 cv
33.531 491.801 33.855 491.484 34.258 491.262 cv
34.66 491.043 35.152 490.934 35.742 490.93 cv
36.301 490.934 36.773 491.035 37.16 491.23 cv
37.539 491.434 37.848 491.727 38.082 492.109 cv
38.313 492.5 38.48 492.973 38.582 493.535 cv
38.68 494.102 38.727 494.75 38.73 495.48 cv
cp
37.523 495.562 mo
37.52 495.121 37.504 494.727 37.473 494.371 cv
37.438 494.02 37.391 493.707 37.332 493.437 cv
37.266 493.168 37.184 492.934 37.09 492.738 cv
36.988 492.543 36.871 492.383 36.738 492.258 cv
36.598 492.133 36.441 492.043 36.266 491.984 cv
36.09 491.93 35.895 491.902 35.676 491.898 cv
35.285 491.902 34.969 491.992 34.727 492.172 cv
34.484 492.355 34.293 492.605 34.152 492.926 cv
34.012 493.246 33.914 493.625 33.867 494.055 cv
33.813 494.488 33.789 494.949 33.793 495.441 cv
33.789 496.109 33.824 496.676 33.895 497.137 cv
33.965 497.605 34.074 497.984 34.223 498.273 cv
34.371 498.57 34.559 498.781 34.793 498.91 cv
35.02 499.047 35.301 499.113 35.633 499.109 cv
35.887 499.113 36.113 499.07 36.309 498.984 cv
36.504 498.902 36.668 498.785 36.809 498.629 cv
36.945 498.477 37.063 498.293 37.156 498.078 cv
37.246 497.863 37.32 497.625 37.379 497.363 cv
37.43 497.105 37.469 496.824 37.492 496.516 cv
37.512 496.215 37.52 495.895 37.523 495.562 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.078 434.18 mo
39.176 434.18 li
39.176 451.27 li
32.078 451.27 li
cp
0 0 0 0 cmyk
ef
38.445 447.113 mo
38.441 447.203 38.434 447.273 38.422 447.332 cv
38.406 447.395 38.387 447.445 38.367 447.477 cv
38.344 447.516 38.32 447.539 38.289 447.555 cv
38.258 447.57 38.227 447.578 38.199 447.578 cv
33.563 447.578 li
33.527 447.578 33.5 447.57 33.473 447.555 cv
33.445 447.539 33.418 447.516 33.395 447.477 cv
33.367 447.445 33.348 447.395 33.336 447.332 cv
33.32 447.273 33.313 447.203 33.316 447.113 cv
33.313 447.035 33.32 446.961 33.336 446.898 cv
33.348 446.84 33.363 446.793 33.387 446.754 cv
33.402 446.719 33.43 446.687 33.461 446.664 cv
33.492 446.645 33.523 446.637 33.563 446.633 cv
35.414 446.633 li
35.414 439.887 li
33.699 440.906 li
33.609 440.957 33.539 440.984 33.492 440.992 cv
33.438 441 33.395 440.992 33.363 440.961 cv
33.328 440.934 33.309 440.883 33.297 440.812 cv
33.285 440.746 33.277 440.66 33.281 440.551 cv
33.277 440.477 33.281 440.41 33.293 440.352 cv
33.297 440.301 33.309 440.254 33.324 440.215 cv
33.336 440.18 33.355 440.148 33.379 440.121 cv
33.402 440.094 33.434 440.066 33.48 440.039 cv
35.523 438.727 li
35.539 438.715 35.559 438.703 35.59 438.695 cv
35.613 438.687 35.648 438.68 35.695 438.668 cv
35.734 438.66 35.785 438.652 35.84 438.648 cv
35.895 438.648 35.961 438.648 36.047 438.645 cv
36.152 438.648 36.246 438.652 36.32 438.66 cv
36.391 438.668 36.445 438.684 36.492 438.699 cv
36.531 438.719 36.559 438.738 36.574 438.762 cv
36.582 438.789 36.59 438.812 36.594 438.836 cv
36.594 446.633 li
38.199 446.633 li
38.234 446.637 38.27 446.645 38.301 446.664 cv
38.332 446.687 38.355 446.719 38.379 446.754 cv
38.395 446.793 38.41 446.84 38.426 446.898 cv
38.434 446.961 38.441 447.035 38.445 447.113 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.078 381.828 mo
39.176 381.828 li
39.176 398.922 li
32.078 398.922 li
cp
0 0 0 0 cmyk
ef
38.426 394.723 mo
38.422 394.809 38.418 394.883 38.406 394.945 cv
38.395 395.012 38.379 395.066 38.359 395.105 cv
38.336 395.152 38.309 395.184 38.277 395.199 cv
38.242 395.223 38.203 395.23 38.164 395.23 cv
33.262 395.23 li
33.199 395.23 33.141 395.223 33.094 395.207 cv
33.043 395.191 33.004 395.168 32.969 395.129 cv
32.934 395.098 32.906 395.043 32.895 394.973 cv
32.875 394.902 32.867 394.816 32.871 394.715 cv
32.867 394.625 32.871 394.547 32.879 394.477 cv
32.883 394.41 32.898 394.352 32.926 394.297 cv
32.949 394.246 32.98 394.191 33.016 394.137 cv
33.051 394.086 33.094 394.031 33.152 393.969 cv
34.926 392.145 li
35.336 391.727 35.664 391.352 35.914 391.016 cv
36.16 390.687 36.352 390.383 36.484 390.105 cv
36.617 389.832 36.703 389.582 36.75 389.355 cv
36.789 389.133 36.813 388.922 36.813 388.727 cv
36.813 388.531 36.777 388.348 36.711 388.168 cv
36.645 387.996 36.551 387.84 36.426 387.703 cv
36.301 387.574 36.145 387.469 35.957 387.387 cv
35.77 387.312 35.551 387.273 35.305 387.27 cv
35.016 387.273 34.758 387.312 34.531 387.387 cv
34.301 387.469 34.102 387.555 33.93 387.641 cv
33.758 387.734 33.613 387.816 33.496 387.895 cv
33.379 387.973 33.293 388.012 33.242 388.012 cv
33.207 388.012 33.176 388.004 33.152 387.984 cv
33.121 387.969 33.102 387.937 33.086 387.895 cv
33.07 387.855 33.055 387.801 33.047 387.73 cv
33.035 387.664 33.031 387.582 33.035 387.484 cv
33.031 387.418 33.035 387.359 33.043 387.309 cv
33.047 387.258 33.055 387.215 33.066 387.176 cv
33.074 387.141 33.09 387.105 33.109 387.074 cv
33.129 387.043 33.164 387.004 33.223 386.953 cv
33.273 386.906 33.367 386.84 33.504 386.758 cv
33.637 386.676 33.809 386.598 34.012 386.516 cv
34.215 386.437 34.438 386.367 34.684 386.312 cv
34.926 386.258 35.184 386.23 35.457 386.23 cv
35.883 386.23 36.258 386.293 36.582 386.414 cv
36.902 386.535 37.168 386.699 37.383 386.91 cv
37.594 387.121 37.754 387.367 37.859 387.641 cv
37.965 387.922 38.02 388.219 38.02 388.531 cv
38.02 388.82 37.992 389.102 37.941 389.379 cv
37.891 389.664 37.785 389.969 37.625 390.293 cv
37.461 390.621 37.227 390.984 36.922 391.383 cv
36.613 391.785 36.207 392.246 35.703 392.762 cv
34.297 394.23 li
38.156 394.23 li
38.188 394.234 38.223 394.246 38.262 394.262 cv
38.293 394.285 38.324 394.316 38.352 394.355 cv
38.375 394.398 38.395 394.449 38.406 394.508 cv
38.418 394.574 38.422 394.645 38.426 394.723 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.078 329.488 mo
39.176 329.488 li
39.176 346.578 li
32.078 346.578 li
cp
0 0 0 0 cmyk
ef
38.367 340.352 mo
38.363 340.762 38.293 341.129 38.152 341.453 cv
38.008 341.781 37.805 342.059 37.543 342.293 cv
37.273 342.527 36.945 342.707 36.559 342.832 cv
36.168 342.957 35.73 343.02 35.242 343.02 cv
34.945 343.02 34.664 342.992 34.406 342.945 cv
34.145 342.898 33.914 342.848 33.715 342.777 cv
33.512 342.715 33.348 342.645 33.215 342.574 cv
33.082 342.504 32.996 342.453 32.965 342.418 cv
32.926 342.387 32.902 342.355 32.887 342.32 cv
32.867 342.293 32.848 342.254 32.836 342.207 cv
32.82 342.164 32.813 342.109 32.805 342.039 cv
32.797 341.977 32.793 341.895 32.797 341.793 cv
32.793 341.629 32.809 341.512 32.844 341.449 cv
32.875 341.387 32.922 341.355 32.988 341.352 cv
33.027 341.355 33.113 341.391 33.238 341.461 cv
33.363 341.535 33.52 341.617 33.715 341.699 cv
33.906 341.789 34.137 341.867 34.398 341.937 cv
34.656 342.012 34.945 342.047 35.27 342.047 cv
35.578 342.047 35.852 342.008 36.086 341.93 cv
36.32 341.852 36.516 341.742 36.676 341.602 cv
36.836 341.461 36.957 341.293 37.035 341.098 cv
37.113 340.902 37.152 340.691 37.156 340.461 cv
37.152 340.211 37.102 339.984 37.004 339.781 cv
36.898 339.582 36.75 339.406 36.559 339.258 cv
36.359 339.113 36.117 339.004 35.836 338.922 cv
35.547 338.848 35.223 338.809 34.859 338.805 cv
33.988 338.805 li
33.949 338.809 33.91 338.801 33.875 338.781 cv
33.84 338.77 33.809 338.742 33.785 338.703 cv
33.754 338.668 33.734 338.621 33.719 338.559 cv
33.703 338.504 33.695 338.426 33.695 338.324 cv
33.695 338.242 33.699 338.168 33.715 338.109 cv
33.727 338.055 33.746 338.012 33.773 337.973 cv
33.797 337.941 33.828 337.914 33.859 337.895 cv
33.891 337.883 33.926 337.875 33.973 337.871 cv
34.746 337.871 li
35.043 337.875 35.316 337.836 35.559 337.754 cv
35.801 337.68 36.004 337.566 36.172 337.418 cv
36.336 337.273 36.465 337.102 36.555 336.895 cv
36.645 336.691 36.688 336.461 36.691 336.207 cv
36.688 336.027 36.66 335.852 36.602 335.684 cv
36.539 335.52 36.449 335.375 36.332 335.25 cv
36.215 335.125 36.063 335.027 35.875 334.957 cv
35.688 334.887 35.473 334.852 35.234 334.848 cv
34.965 334.852 34.723 334.891 34.504 334.969 cv
34.281 335.051 34.082 335.137 33.91 335.227 cv
33.734 335.32 33.59 335.406 33.477 335.484 cv
33.359 335.566 33.281 335.609 33.238 335.605 cv
33.203 335.609 33.172 335.602 33.148 335.59 cv
33.121 335.578 33.102 335.555 33.09 335.52 cv
33.07 335.488 33.059 335.441 33.055 335.375 cv
33.043 335.316 33.039 335.234 33.043 335.129 cv
33.039 335.062 33.043 335.004 33.051 334.949 cv
33.055 334.902 33.063 334.855 33.078 334.812 cv
33.09 334.777 33.105 334.742 33.125 334.707 cv
33.141 334.676 33.172 334.637 33.219 334.594 cv
33.262 334.551 33.352 334.488 33.484 334.402 cv
33.617 334.32 33.777 334.238 33.973 334.16 cv
34.164 334.082 34.391 334.016 34.645 333.957 cv
34.898 333.906 35.172 333.879 35.469 333.875 cv
35.879 333.879 36.238 333.934 36.551 334.035 cv
36.859 334.145 37.121 334.293 37.332 334.48 cv
37.539 334.676 37.695 334.902 37.797 335.168 cv
37.898 335.437 37.949 335.734 37.953 336.059 cv
37.949 336.34 37.914 336.602 37.844 336.84 cv
37.77 337.082 37.66 337.293 37.52 337.477 cv
37.375 337.664 37.203 337.824 37 337.949 cv
36.793 338.082 36.555 338.172 36.285 338.223 cv
36.285 338.234 li
36.59 338.27 36.867 338.348 37.125 338.465 cv
37.375 338.59 37.594 338.742 37.781 338.922 cv
37.961 339.109 38.105 339.32 38.211 339.562 cv
38.313 339.809 38.363 340.074 38.367 340.352 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.078 277.148 mo
39.176 277.148 li
39.176 294.238 li
32.078 294.238 li
cp
0 0 0 0 cmyk
ef
38.801 287.996 mo
38.797 288.148 38.773 288.27 38.73 288.355 cv
38.684 288.445 38.621 288.488 38.539 288.484 cv
37.539 288.484 li
37.539 290.348 li
37.539 290.387 37.527 290.418 37.512 290.441 cv
37.488 290.469 37.457 290.488 37.414 290.508 cv
37.363 290.523 37.301 290.535 37.23 290.547 cv
37.152 290.555 37.059 290.559 36.941 290.562 cv
36.824 290.559 36.727 290.555 36.656 290.547 cv
36.578 290.535 36.52 290.523 36.477 290.508 cv
36.43 290.488 36.398 290.469 36.383 290.441 cv
36.363 290.418 36.355 290.387 36.359 290.348 cv
36.359 288.484 li
32.73 288.484 li
32.672 288.488 32.629 288.48 32.594 288.465 cv
32.559 288.453 32.523 288.426 32.496 288.387 cv
32.465 288.352 32.445 288.301 32.434 288.23 cv
32.422 288.164 32.418 288.074 32.418 287.961 cv
32.418 287.879 32.418 287.801 32.426 287.73 cv
32.426 287.66 32.438 287.598 32.453 287.543 cv
32.465 287.488 32.48 287.434 32.508 287.379 cv
32.527 287.324 32.555 287.27 32.59 287.207 cv
35.75 281.82 li
35.77 281.785 35.805 281.754 35.852 281.727 cv
35.895 281.699 35.949 281.676 36.023 281.656 cv
36.09 281.641 36.176 281.629 36.281 281.617 cv
36.383 281.613 36.504 281.609 36.645 281.605 cv
36.793 281.609 36.93 281.613 37.047 281.625 cv
37.16 281.637 37.25 281.652 37.324 281.668 cv
37.391 281.687 37.445 281.711 37.484 281.742 cv
37.52 281.773 37.539 281.809 37.539 281.848 cv
37.539 287.512 li
38.539 287.512 li
38.613 287.516 38.676 287.555 38.727 287.633 cv
38.773 287.715 38.797 287.836 38.801 287.996 cv
cp
36.359 282.645 mo
36.348 282.645 li
33.496 287.512 li
36.359 287.512 li
cp
.629236 .549432 .540154 .282963 cmyk
f
32.078 224.809 mo
39.176 224.809 li
39.176 241.899 li
32.078 241.899 li
cp
0 0 0 0 cmyk
ef
38.383 235.328 mo
38.383 235.805 38.301 236.227 38.141 236.598 cv
37.98 236.969 37.754 237.281 37.465 237.535 cv
37.168 237.789 36.82 237.984 36.418 238.113 cv
36.012 238.246 35.563 238.309 35.07 238.309 cv
34.793 238.309 34.531 238.289 34.289 238.25 cv
34.039 238.211 33.82 238.164 33.633 238.109 cv
33.438 238.055 33.281 238 33.156 237.941 cv
33.031 237.891 32.953 237.848 32.922 237.812 cv
32.887 237.781 32.863 237.75 32.852 237.723 cv
32.836 237.695 32.82 237.664 32.813 237.621 cv
32.797 237.586 32.789 237.535 32.789 237.473 cv
32.781 237.414 32.781 237.344 32.781 237.262 cv
32.781 237.187 32.785 237.117 32.793 237.055 cv
32.801 236.992 32.813 236.941 32.832 236.902 cv
32.848 236.863 32.867 236.836 32.895 236.816 cv
32.918 236.801 32.949 236.793 32.98 236.789 cv
33.027 236.793 33.098 236.82 33.191 236.875 cv
33.285 236.934 33.414 236.996 33.578 237.062 cv
33.742 237.129 33.941 237.191 34.184 237.25 cv
34.418 237.309 34.703 237.336 35.039 237.336 cv
35.34 237.336 35.621 237.301 35.879 237.227 cv
36.133 237.156 36.355 237.043 36.543 236.887 cv
36.727 236.734 36.871 236.539 36.977 236.301 cv
37.082 236.066 37.133 235.777 37.137 235.437 cv
37.133 235.156 37.09 234.906 37 234.687 cv
36.91 234.469 36.773 234.289 36.59 234.145 cv
36.402 234.004 36.168 233.898 35.887 233.824 cv
35.602 233.754 35.262 233.715 34.875 233.715 cv
34.59 233.715 34.352 233.73 34.152 233.758 cv
33.949 233.789 33.762 233.805 33.59 233.801 cv
33.461 233.805 33.367 233.773 33.316 233.711 cv
33.258 233.652 33.23 233.539 33.234 233.367 cv
33.234 229.754 li
33.23 229.605 33.266 229.496 33.34 229.418 cv
33.406 229.348 33.508 229.309 33.645 229.309 cv
37.574 229.309 li
37.609 229.309 37.645 229.32 37.68 229.34 cv
37.711 229.363 37.738 229.395 37.766 229.434 cv
37.785 229.477 37.801 229.527 37.816 229.59 cv
37.824 229.656 37.832 229.734 37.836 229.816 cv
37.832 229.984 37.809 230.109 37.77 230.199 cv
37.723 230.293 37.664 230.34 37.586 230.336 cv
34.414 230.336 li
34.414 232.824 li
34.566 232.805 34.723 232.793 34.887 232.785 cv
35.043 232.781 35.23 232.777 35.445 232.777 cv
35.93 232.777 36.355 232.84 36.723 232.961 cv
37.086 233.082 37.391 233.254 37.641 233.473 cv
37.883 233.699 38.07 233.965 38.195 234.277 cv
38.32 234.594 38.383 234.945 38.383 235.328 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.078 172.469 mo
39.176 172.469 li
39.176 189.559 li
32.078 189.559 li
cp
0 0 0 0 cmyk
ef
38.652 182.957 mo
38.652 183.348 38.59 183.727 38.473 184.086 cv
38.348 184.453 38.164 184.77 37.922 185.043 cv
37.672 185.32 37.359 185.543 36.984 185.707 cv
36.602 185.875 36.156 185.957 35.641 185.957 cv
35.27 185.957 34.941 185.914 34.66 185.82 cv
34.375 185.734 34.129 185.602 33.918 185.43 cv
33.707 185.262 33.531 185.055 33.395 184.809 cv
33.254 184.562 33.141 184.281 33.059 183.965 cv
32.973 183.652 32.914 183.309 32.879 182.93 cv
32.84 182.559 32.82 182.156 32.824 181.723 cv
32.82 181.344 32.84 180.961 32.883 180.57 cv
32.922 180.187 32.996 179.812 33.102 179.445 cv
33.207 179.086 33.352 178.746 33.531 178.43 cv
33.711 178.113 33.938 177.836 34.211 177.602 cv
34.484 177.367 34.809 177.18 35.188 177.039 cv
35.566 176.902 36.008 176.836 36.512 176.832 cv
36.68 176.836 36.852 176.844 37.023 176.863 cv
37.195 176.887 37.355 176.918 37.504 176.949 cv
37.652 176.988 37.773 177.023 37.875 177.062 cv
37.973 177.102 38.039 177.137 38.074 177.16 cv
38.102 177.187 38.125 177.215 38.145 177.242 cv
38.16 177.273 38.176 177.305 38.184 177.34 cv
38.191 177.375 38.195 177.414 38.203 177.457 cv
38.203 177.5 38.207 177.555 38.211 177.617 cv
38.207 177.703 38.207 177.773 38.207 177.828 cv
38.203 177.891 38.191 177.937 38.18 177.973 cv
38.16 178.012 38.141 178.039 38.117 178.055 cv
38.09 178.074 38.059 178.082 38.02 178.082 cv
37.969 178.082 37.898 178.066 37.813 178.035 cv
37.723 178.004 37.617 177.969 37.496 177.926 cv
37.371 177.891 37.223 177.855 37.047 177.82 cv
36.871 177.793 36.668 177.777 36.438 177.773 cv
36.008 177.777 35.641 177.863 35.336 178.035 cv
35.031 178.207 34.781 178.441 34.586 178.734 cv
34.391 179.027 34.246 179.367 34.156 179.75 cv
34.059 180.141 34.004 180.543 33.996 180.961 cv
34.113 180.895 34.25 180.828 34.398 180.758 cv
34.547 180.691 34.707 180.629 34.883 180.57 cv
35.059 180.52 35.246 180.473 35.441 180.437 cv
35.637 180.406 35.848 180.391 36.074 180.387 cv
36.551 180.391 36.953 180.457 37.285 180.582 cv
37.613 180.715 37.879 180.895 38.086 181.125 cv
38.285 181.355 38.43 181.625 38.52 181.937 cv
38.605 182.25 38.652 182.59 38.652 182.957 cv
cp
37.457 183.066 mo
37.457 182.805 37.43 182.562 37.379 182.344 cv
37.324 182.129 37.234 181.945 37.113 181.789 cv
36.988 181.641 36.824 181.523 36.621 181.441 cv
36.41 181.359 36.156 181.316 35.859 181.316 cv
35.688 181.316 35.52 181.332 35.352 181.363 cv
35.18 181.395 35.016 181.437 34.859 181.484 cv
34.699 181.539 34.551 181.602 34.41 181.672 cv
34.266 181.746 34.133 181.82 34.016 181.898 cv
34.012 182.492 34.051 182.988 34.129 183.383 cv
34.203 183.781 34.313 184.098 34.457 184.336 cv
34.602 184.578 34.781 184.75 34.996 184.852 cv
35.211 184.957 35.461 185.008 35.75 185.004 cv
36.039 185.008 36.293 184.953 36.508 184.84 cv
36.723 184.734 36.898 184.586 37.043 184.398 cv
37.184 184.215 37.289 184.008 37.355 183.777 cv
37.422 183.547 37.457 183.312 37.457 183.066 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.078 120.121 mo
39.176 120.121 li
39.176 137.211 li
32.078 137.211 li
cp
0 0 0 0 cmyk
ef
38.555 125.098 mo
38.551 125.184 38.547 125.258 38.543 125.32 cv
38.535 125.391 38.527 125.453 38.516 125.512 cv
38.504 125.578 38.488 125.637 38.469 125.691 cv
38.445 125.75 38.422 125.812 38.398 125.871 cv
35.203 133.234 li
35.176 133.293 35.148 133.336 35.117 133.367 cv
35.082 133.402 35.039 133.43 34.984 133.449 cv
34.93 133.469 34.859 133.48 34.781 133.492 cv
34.695 133.496 34.598 133.5 34.48 133.504 cv
34.324 133.5 34.203 133.492 34.117 133.48 cv
34.031 133.465 33.969 133.449 33.93 133.418 cv
33.891 133.391 33.871 133.352 33.879 133.309 cv
33.879 133.266 33.895 133.215 33.926 133.152 cv
37.285 125.625 li
33.027 125.625 li
32.941 125.629 32.875 125.582 32.832 125.488 cv
32.789 125.398 32.77 125.27 32.77 125.105 cv
32.77 125.02 32.773 124.945 32.785 124.879 cv
32.797 124.816 32.813 124.762 32.836 124.719 cv
32.855 124.676 32.883 124.645 32.918 124.621 cv
32.949 124.602 32.988 124.59 33.027 124.59 cv
38.199 124.59 li
38.258 124.59 38.313 124.598 38.363 124.613 cv
38.41 124.629 38.445 124.656 38.473 124.695 cv
38.496 124.734 38.516 124.789 38.531 124.852 cv
38.543 124.918 38.551 125 38.555 125.098 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.078 67.781 mo
39.176 67.781 li
39.176 84.871 li
32.078 84.871 li
cp
0 0 0 0 cmyk
ef
38.629 78.844 mo
38.629 79.23 38.559 79.574 38.422 79.871 cv
38.285 80.176 38.09 80.426 37.832 80.629 cv
37.574 80.836 37.254 80.992 36.875 81.094 cv
36.492 81.199 36.059 81.25 35.574 81.25 cv
35.113 81.25 34.703 81.203 34.344 81.109 cv
33.98 81.016 33.676 80.875 33.426 80.684 cv
33.176 80.5 32.984 80.27 32.852 79.992 cv
32.719 79.719 32.652 79.406 32.652 79.051 cv
32.652 78.777 32.695 78.52 32.789 78.285 cv
32.875 78.051 33.008 77.836 33.184 77.641 cv
33.352 77.445 33.563 77.262 33.816 77.086 cv
34.066 76.918 34.352 76.754 34.668 76.598 cv
34.395 76.457 34.152 76.309 33.941 76.148 cv
33.73 75.992 33.551 75.82 33.406 75.633 cv
33.258 75.449 33.148 75.254 33.074 75.043 cv
32.996 74.836 32.957 74.605 32.961 74.355 cv
32.957 74.047 33.012 73.754 33.129 73.48 cv
33.238 73.211 33.41 72.977 33.637 72.773 cv
33.863 72.574 34.148 72.414 34.5 72.297 cv
34.844 72.18 35.254 72.121 35.723 72.121 cv
36.168 72.121 36.555 72.176 36.883 72.281 cv
37.211 72.391 37.48 72.535 37.691 72.719 cv
37.902 72.906 38.059 73.125 38.164 73.375 cv
38.262 73.625 38.313 73.895 38.316 74.184 cv
38.313 74.418 38.273 74.645 38.203 74.855 cv
38.125 75.074 38.016 75.277 37.867 75.465 cv
37.719 75.66 37.539 75.84 37.328 76.004 cv
37.117 76.176 36.875 76.332 36.602 76.473 cv
36.922 76.637 37.207 76.801 37.465 76.969 cv
37.715 77.137 37.93 77.316 38.105 77.512 cv
38.273 77.707 38.402 77.914 38.496 78.129 cv
38.582 78.348 38.629 78.586 38.629 78.844 cv
cp
37.148 74.293 mo
37.145 74.105 37.113 73.93 37.047 73.773 cv
36.98 73.617 36.883 73.484 36.758 73.375 cv
36.629 73.266 36.469 73.184 36.281 73.125 cv
36.086 73.07 35.871 73.043 35.633 73.039 cv
35.137 73.043 34.762 73.152 34.512 73.375 cv
34.254 73.602 34.129 73.91 34.133 74.293 cv
34.129 74.473 34.16 74.637 34.223 74.789 cv
34.285 74.945 34.379 75.09 34.512 75.227 cv
34.637 75.363 34.801 75.496 35.004 75.625 cv
35.199 75.758 35.438 75.895 35.715 76.035 cv
36.176 75.801 36.531 75.539 36.777 75.246 cv
37.023 74.961 37.145 74.645 37.148 74.293 cv
cp
37.438 78.969 mo
37.434 78.762 37.395 78.57 37.32 78.398 cv
37.238 78.23 37.121 78.07 36.965 77.918 cv
36.809 77.77 36.609 77.625 36.375 77.484 cv
36.137 77.348 35.867 77.203 35.559 77.051 cv
35.27 77.195 35.016 77.336 34.801 77.477 cv
34.582 77.617 34.402 77.766 34.266 77.914 cv
34.125 78.07 34.02 78.227 33.949 78.391 cv
33.875 78.559 33.84 78.742 33.844 78.941 cv
33.84 79.387 33.992 79.73 34.301 79.969 cv
34.602 80.215 35.055 80.336 35.66 80.332 cv
36.242 80.336 36.688 80.215 36.988 79.965 cv
37.285 79.723 37.434 79.391 37.438 78.969 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.078 15.441 mo
39.176 15.441 li
39.176 32.531 li
32.078 32.531 li
cp
0 0 0 0 cmyk
ef
38.492 23.996 mo
38.488 24.383 38.465 24.77 38.422 25.16 cv
38.375 25.555 38.297 25.934 38.191 26.297 cv
38.078 26.66 37.934 27 37.75 27.316 cv
37.563 27.637 37.328 27.918 37.051 28.152 cv
36.766 28.395 36.43 28.578 36.047 28.711 cv
35.656 28.844 35.211 28.91 34.703 28.91 cv
34.504 28.91 34.313 28.895 34.129 28.871 cv
33.941 28.844 33.773 28.816 33.629 28.781 cv
33.477 28.746 33.352 28.707 33.254 28.664 cv
33.152 28.625 33.078 28.586 33.035 28.543 cv
32.988 28.504 32.957 28.449 32.938 28.375 cv
32.914 28.305 32.902 28.207 32.906 28.09 cv
32.902 27.988 32.906 27.91 32.914 27.852 cv
32.918 27.793 32.93 27.746 32.945 27.715 cv
32.961 27.684 32.98 27.664 33.004 27.648 cv
33.027 27.641 33.059 27.633 33.098 27.629 cv
33.145 27.633 33.215 27.648 33.309 27.68 cv
33.398 27.715 33.512 27.754 33.656 27.793 cv
33.793 27.836 33.957 27.875 34.145 27.906 cv
34.328 27.945 34.539 27.961 34.777 27.957 cv
35.219 27.961 35.598 27.875 35.918 27.703 cv
36.23 27.531 36.492 27.305 36.695 27.016 cv
36.898 26.73 37.047 26.395 37.148 26.012 cv
37.246 25.633 37.301 25.234 37.313 24.812 cv
37.066 24.957 36.777 25.082 36.441 25.187 cv
36.102 25.301 35.715 25.355 35.277 25.352 cv
34.785 25.355 34.371 25.289 34.035 25.152 cv
33.699 25.02 33.426 24.836 33.223 24.602 cv
33.016 24.371 32.871 24.094 32.785 23.77 cv
32.695 23.453 32.652 23.102 32.652 22.723 cv
32.652 22.332 32.707 21.961 32.824 21.602 cv
32.934 21.25 33.113 20.937 33.359 20.668 cv
33.598 20.398 33.906 20.184 34.285 20.023 cv
34.656 19.863 35.105 19.781 35.629 19.781 cv
35.996 19.781 36.32 19.828 36.609 19.922 cv
36.891 20.016 37.141 20.152 37.355 20.328 cv
37.563 20.504 37.742 20.715 37.891 20.965 cv
38.035 21.215 38.152 21.496 38.242 21.809 cv
38.328 22.125 38.391 22.469 38.434 22.836 cv
38.469 23.207 38.488 23.594 38.492 23.996 cv
cp
37.293 23.867 mo
37.293 23.285 37.254 22.793 37.176 22.391 cv
37.098 21.992 36.98 21.668 36.832 21.418 cv
36.68 21.172 36.496 20.992 36.277 20.883 cv
36.055 20.773 35.801 20.719 35.52 20.719 cv
35.215 20.719 34.961 20.773 34.754 20.883 cv
34.543 20.992 34.371 21.137 34.238 21.312 cv
34.102 21.496 34 21.699 33.938 21.926 cv
33.871 22.156 33.84 22.395 33.844 22.633 cv
33.84 22.906 33.871 23.152 33.93 23.371 cv
33.984 23.598 34.074 23.785 34.207 23.941 cv
34.332 24.098 34.5 24.219 34.707 24.305 cv
34.91 24.391 35.164 24.434 35.469 24.43 cv
35.809 24.434 36.141 24.383 36.465 24.277 cv
36.781 24.176 37.059 24.039 37.293 23.867 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
54.977 517.672 mo
54.973 517.762 54.965 517.832 54.953 517.891 cv
54.938 517.953 54.918 518.004 54.898 518.035 cv
54.875 518.074 54.852 518.098 54.82 518.113 cv
54.789 518.129 54.758 518.137 54.73 518.137 cv
50.094 518.137 li
50.059 518.137 50.031 518.129 50.004 518.113 cv
49.977 518.098 49.949 518.074 49.926 518.035 cv
49.898 518.004 49.879 517.953 49.867 517.891 cv
49.852 517.832 49.844 517.762 49.848 517.672 cv
49.844 517.594 49.852 517.52 49.867 517.457 cv
49.879 517.398 49.895 517.352 49.918 517.312 cv
49.934 517.277 49.961 517.246 49.992 517.223 cv
50.023 517.203 50.055 517.195 50.094 517.191 cv
51.945 517.191 li
51.945 510.445 li
50.23 511.465 li
50.141 511.516 50.07 511.543 50.023 511.551 cv
49.969 511.559 49.926 511.551 49.895 511.52 cv
49.859 511.492 49.84 511.441 49.828 511.371 cv
49.816 511.305 49.809 511.219 49.813 511.109 cv
49.809 511.035 49.813 510.969 49.824 510.91 cv
49.828 510.859 49.84 510.812 49.855 510.773 cv
49.867 510.738 49.887 510.707 49.91 510.68 cv
49.934 510.652 49.965 510.625 50.012 510.598 cv
52.055 509.285 li
52.07 509.273 52.09 509.262 52.121 509.254 cv
52.145 509.246 52.18 509.238 52.227 509.227 cv
52.266 509.219 52.316 509.211 52.371 509.207 cv
52.426 509.207 52.492 509.207 52.578 509.203 cv
52.684 509.207 52.777 509.211 52.852 509.219 cv
52.922 509.227 52.977 509.242 53.023 509.258 cv
53.063 509.277 53.09 509.297 53.105 509.32 cv
53.113 509.348 53.121 509.371 53.125 509.395 cv
53.125 517.191 li
54.73 517.191 li
54.766 517.195 54.801 517.203 54.832 517.223 cv
54.863 517.246 54.887 517.277 54.91 517.312 cv
54.926 517.352 54.941 517.398 54.957 517.457 cv
54.965 517.52 54.973 517.594 54.977 517.672 cv
cp
f
135.645 517.629 mo
135.641 517.715 135.637 517.789 135.625 517.852 cv
135.613 517.918 135.598 517.973 135.578 518.012 cv
135.555 518.059 135.527 518.09 135.496 518.105 cv
135.461 518.129 135.422 518.137 135.383 518.137 cv
130.48 518.137 li
130.418 518.137 130.359 518.129 130.313 518.113 cv
130.262 518.098 130.223 518.074 130.188 518.035 cv
130.152 518.004 130.125 517.949 130.113 517.879 cv
130.094 517.809 130.086 517.723 130.09 517.621 cv
130.086 517.531 130.09 517.453 130.098 517.383 cv
130.102 517.316 130.117 517.258 130.145 517.203 cv
130.168 517.152 130.199 517.098 130.234 517.043 cv
130.27 516.992 130.313 516.937 130.371 516.875 cv
132.145 515.051 li
132.555 514.633 132.883 514.258 133.133 513.922 cv
133.379 513.594 133.57 513.289 133.703 513.012 cv
133.836 512.738 133.922 512.488 133.969 512.262 cv
134.008 512.039 134.031 511.828 134.031 511.633 cv
134.031 511.437 133.996 511.254 133.93 511.074 cv
133.863 510.902 133.77 510.746 133.645 510.609 cv
133.52 510.48 133.363 510.375 133.176 510.293 cv
132.988 510.219 132.77 510.18 132.523 510.176 cv
132.234 510.18 131.977 510.219 131.75 510.293 cv
131.52 510.375 131.32 510.461 131.148 510.547 cv
130.977 510.641 130.832 510.723 130.715 510.801 cv
130.598 510.879 130.512 510.918 130.461 510.918 cv
130.426 510.918 130.395 510.91 130.371 510.891 cv
130.34 510.875 130.32 510.844 130.305 510.801 cv
130.289 510.762 130.273 510.707 130.266 510.637 cv
130.254 510.57 130.25 510.488 130.254 510.391 cv
130.25 510.324 130.254 510.266 130.262 510.215 cv
130.266 510.164 130.273 510.121 130.285 510.082 cv
130.293 510.047 130.309 510.012 130.328 509.98 cv
130.348 509.949 130.383 509.91 130.441 509.859 cv
130.492 509.812 130.586 509.746 130.723 509.664 cv
130.855 509.582 131.027 509.504 131.23 509.422 cv
131.434 509.344 131.656 509.273 131.902 509.219 cv
132.145 509.164 132.402 509.137 132.676 509.137 cv
133.102 509.137 133.477 509.199 133.801 509.32 cv
134.121 509.441 134.387 509.605 134.602 509.816 cv
134.813 510.027 134.973 510.273 135.078 510.547 cv
135.184 510.828 135.238 511.125 135.238 511.437 cv
135.238 511.727 135.211 512.008 135.16 512.285 cv
135.109 512.57 135.004 512.875 134.844 513.199 cv
134.68 513.527 134.445 513.891 134.141 514.289 cv
133.832 514.691 133.426 515.152 132.922 515.668 cv
131.516 517.137 li
135.375 517.137 li
135.406 517.141 135.441 517.152 135.48 517.168 cv
135.512 517.191 135.543 517.223 135.57 517.262 cv
135.594 517.305 135.613 517.355 135.625 517.414 cv
135.637 517.48 135.641 517.551 135.645 517.629 cv
cp
f
216.691 515.613 mo
216.688 515.766 216.664 515.887 216.621 515.973 cv
216.574 516.062 216.512 516.105 216.43 516.102 cv
215.43 516.102 li
215.43 517.965 li
215.43 518.004 215.418 518.035 215.402 518.059 cv
215.379 518.086 215.348 518.105 215.305 518.125 cv
215.254 518.141 215.191 518.152 215.121 518.164 cv
215.043 518.172 214.949 518.176 214.832 518.18 cv
214.715 518.176 214.617 518.172 214.547 518.164 cv
214.469 518.152 214.41 518.141 214.367 518.125 cv
214.32 518.105 214.289 518.086 214.273 518.059 cv
214.254 518.035 214.246 518.004 214.25 517.965 cv
214.25 516.102 li
210.621 516.102 li
210.563 516.105 210.52 516.098 210.484 516.082 cv
210.449 516.07 210.414 516.043 210.387 516.004 cv
210.355 515.969 210.336 515.918 210.324 515.848 cv
210.313 515.781 210.309 515.691 210.309 515.578 cv
210.309 515.496 210.309 515.418 210.316 515.348 cv
210.316 515.277 210.328 515.215 210.344 515.16 cv
210.355 515.105 210.371 515.051 210.398 514.996 cv
210.418 514.941 210.445 514.887 210.48 514.824 cv
213.641 509.437 li
213.66 509.402 213.695 509.371 213.742 509.344 cv
213.785 509.316 213.84 509.293 213.914 509.273 cv
213.98 509.258 214.066 509.246 214.172 509.234 cv
214.273 509.23 214.395 509.227 214.535 509.223 cv
214.684 509.227 214.82 509.23 214.938 509.242 cv
215.051 509.254 215.141 509.27 215.215 509.285 cv
215.281 509.305 215.336 509.328 215.375 509.359 cv
215.41 509.391 215.43 509.426 215.43 509.465 cv
215.43 515.129 li
216.43 515.129 li
216.504 515.133 216.566 515.172 216.617 515.25 cv
216.664 515.332 216.688 515.453 216.691 515.613 cv
cp
214.25 510.262 mo
214.238 510.262 li
211.387 515.129 li
214.25 515.129 li
cp
f
297.203 515.266 mo
297.203 515.656 297.141 516.035 297.023 516.395 cv
296.898 516.762 296.715 517.078 296.473 517.352 cv
296.223 517.629 295.91 517.852 295.535 518.016 cv
295.152 518.184 294.707 518.266 294.191 518.266 cv
293.82 518.266 293.492 518.223 293.211 518.129 cv
292.926 518.043 292.68 517.91 292.469 517.738 cv
292.258 517.57 292.082 517.363 291.945 517.117 cv
291.805 516.871 291.691 516.59 291.609 516.273 cv
291.523 515.961 291.465 515.617 291.43 515.238 cv
291.391 514.867 291.371 514.465 291.375 514.031 cv
291.371 513.652 291.391 513.27 291.434 512.879 cv
291.473 512.496 291.547 512.121 291.652 511.754 cv
291.758 511.395 291.902 511.055 292.082 510.738 cv
292.262 510.422 292.488 510.145 292.762 509.91 cv
293.035 509.676 293.359 509.488 293.738 509.348 cv
294.117 509.211 294.559 509.145 295.063 509.141 cv
295.23 509.145 295.402 509.152 295.574 509.172 cv
295.746 509.195 295.906 509.227 296.055 509.258 cv
296.203 509.297 296.324 509.332 296.426 509.371 cv
296.523 509.41 296.59 509.445 296.625 509.469 cv
296.652 509.496 296.676 509.523 296.695 509.551 cv
296.711 509.582 296.727 509.613 296.734 509.648 cv
296.742 509.684 296.746 509.723 296.754 509.766 cv
296.754 509.809 296.758 509.863 296.762 509.926 cv
296.758 510.012 296.758 510.082 296.758 510.137 cv
296.754 510.199 296.742 510.246 296.73 510.281 cv
296.711 510.32 296.691 510.348 296.668 510.363 cv
296.641 510.383 296.609 510.391 296.57 510.391 cv
296.52 510.391 296.449 510.375 296.363 510.344 cv
296.273 510.312 296.168 510.277 296.047 510.234 cv
295.922 510.199 295.773 510.164 295.598 510.129 cv
295.422 510.102 295.219 510.086 294.988 510.082 cv
294.559 510.086 294.191 510.172 293.887 510.344 cv
293.582 510.516 293.332 510.75 293.137 511.043 cv
292.941 511.336 292.797 511.676 292.707 512.059 cv
292.609 512.449 292.555 512.852 292.547 513.27 cv
292.664 513.203 292.801 513.137 292.949 513.066 cv
293.098 513 293.258 512.937 293.434 512.879 cv
293.609 512.828 293.797 512.781 293.992 512.746 cv
294.188 512.715 294.398 512.699 294.625 512.695 cv
295.102 512.699 295.504 512.766 295.836 512.891 cv
296.164 513.023 296.43 513.203 296.637 513.434 cv
296.836 513.664 296.98 513.934 297.07 514.246 cv
297.156 514.559 297.203 514.898 297.203 515.266 cv
cp
296.008 515.375 mo
296.008 515.113 295.98 514.871 295.93 514.652 cv
295.875 514.437 295.785 514.254 295.664 514.098 cv
295.539 513.949 295.375 513.832 295.172 513.75 cv
294.961 513.668 294.707 513.625 294.41 513.625 cv
294.238 513.625 294.07 513.641 293.902 513.672 cv
293.73 513.703 293.566 513.746 293.41 513.793 cv
293.25 513.848 293.102 513.91 292.961 513.98 cv
292.816 514.055 292.684 514.129 292.566 514.207 cv
292.563 514.801 292.602 515.297 292.68 515.691 cv
292.754 516.09 292.863 516.406 293.008 516.645 cv
293.152 516.887 293.332 517.059 293.547 517.16 cv
293.762 517.266 294.012 517.316 294.301 517.312 cv
294.59 517.316 294.844 517.262 295.059 517.148 cv
295.273 517.043 295.449 516.895 295.594 516.707 cv
295.734 516.523 295.84 516.316 295.906 516.086 cv
295.973 515.855 296.008 515.621 296.008 515.375 cv
cp
f
377.867 515.859 mo
377.867 516.246 377.797 516.59 377.66 516.887 cv
377.523 517.191 377.328 517.441 377.07 517.645 cv
376.813 517.852 376.492 518.008 376.113 518.109 cv
375.73 518.215 375.297 518.266 374.813 518.266 cv
374.352 518.266 373.941 518.219 373.582 518.125 cv
373.219 518.031 372.914 517.891 372.664 517.699 cv
372.414 517.516 372.223 517.285 372.09 517.008 cv
371.957 516.734 371.891 516.422 371.891 516.066 cv
371.891 515.793 371.934 515.535 372.027 515.301 cv
372.113 515.066 372.246 514.852 372.422 514.656 cv
372.59 514.461 372.801 514.277 373.055 514.102 cv
373.305 513.934 373.59 513.77 373.906 513.613 cv
373.633 513.473 373.391 513.324 373.18 513.164 cv
372.969 513.008 372.789 512.836 372.645 512.648 cv
372.496 512.465 372.387 512.27 372.313 512.059 cv
372.234 511.852 372.195 511.621 372.199 511.371 cv
372.195 511.062 372.25 510.77 372.367 510.496 cv
372.477 510.227 372.648 509.992 372.875 509.789 cv
373.102 509.59 373.387 509.43 373.738 509.312 cv
374.082 509.195 374.492 509.137 374.961 509.137 cv
375.406 509.137 375.793 509.191 376.121 509.297 cv
376.449 509.406 376.719 509.551 376.93 509.734 cv
377.141 509.922 377.297 510.141 377.402 510.391 cv
377.5 510.641 377.551 510.91 377.555 511.199 cv
377.551 511.434 377.512 511.66 377.441 511.871 cv
377.363 512.09 377.254 512.293 377.105 512.48 cv
376.957 512.676 376.777 512.855 376.566 513.02 cv
376.355 513.191 376.113 513.348 375.84 513.488 cv
376.16 513.652 376.445 513.816 376.703 513.984 cv
376.953 514.152 377.168 514.332 377.344 514.527 cv
377.512 514.723 377.641 514.93 377.734 515.145 cv
377.82 515.363 377.867 515.602 377.867 515.859 cv
cp
376.387 511.309 mo
376.383 511.121 376.352 510.945 376.285 510.789 cv
376.219 510.633 376.121 510.5 375.996 510.391 cv
375.867 510.281 375.707 510.199 375.52 510.141 cv
375.324 510.086 375.109 510.059 374.871 510.055 cv
374.375 510.059 374 510.168 373.75 510.391 cv
373.492 510.617 373.367 510.926 373.371 511.309 cv
373.367 511.488 373.398 511.652 373.461 511.805 cv
373.523 511.961 373.617 512.105 373.75 512.242 cv
373.875 512.379 374.039 512.512 374.242 512.641 cv
374.438 512.773 374.676 512.91 374.953 513.051 cv
375.414 512.816 375.77 512.555 376.016 512.262 cv
376.262 511.977 376.383 511.66 376.387 511.309 cv
cp
376.676 515.984 mo
376.672 515.777 376.633 515.586 376.559 515.414 cv
376.477 515.246 376.359 515.086 376.203 514.934 cv
376.047 514.785 375.848 514.641 375.613 514.5 cv
375.375 514.363 375.105 514.219 374.797 514.066 cv
374.508 514.211 374.254 514.352 374.039 514.492 cv
373.82 514.633 373.641 514.781 373.504 514.93 cv
373.363 515.086 373.258 515.242 373.188 515.406 cv
373.113 515.574 373.078 515.758 373.082 515.957 cv
373.078 516.402 373.23 516.746 373.539 516.984 cv
373.84 517.23 374.293 517.352 374.898 517.348 cv
375.48 517.352 375.926 517.23 376.227 516.98 cv
376.523 516.738 376.672 516.406 376.676 515.984 cv
cp
f
454.797 517.672 mo
454.793 517.762 454.785 517.832 454.773 517.891 cv
454.758 517.953 454.738 518.004 454.719 518.035 cv
454.695 518.074 454.672 518.098 454.641 518.113 cv
454.609 518.129 454.578 518.137 454.551 518.137 cv
449.914 518.137 li
449.879 518.137 449.852 518.129 449.824 518.113 cv
449.797 518.098 449.77 518.074 449.746 518.035 cv
449.719 518.004 449.699 517.953 449.688 517.891 cv
449.672 517.832 449.664 517.762 449.668 517.672 cv
449.664 517.594 449.672 517.52 449.688 517.457 cv
449.699 517.398 449.715 517.352 449.738 517.312 cv
449.754 517.277 449.781 517.246 449.813 517.223 cv
449.844 517.203 449.875 517.195 449.914 517.191 cv
451.766 517.191 li
451.766 510.445 li
450.051 511.465 li
449.961 511.516 449.891 511.543 449.844 511.551 cv
449.789 511.559 449.746 511.551 449.715 511.52 cv
449.68 511.492 449.66 511.441 449.648 511.371 cv
449.637 511.305 449.629 511.219 449.633 511.109 cv
449.629 511.035 449.633 510.969 449.645 510.91 cv
449.648 510.859 449.66 510.812 449.676 510.773 cv
449.688 510.738 449.707 510.707 449.73 510.68 cv
449.754 510.652 449.785 510.625 449.832 510.598 cv
451.875 509.285 li
451.891 509.273 451.91 509.262 451.941 509.254 cv
451.965 509.246 452 509.238 452.047 509.227 cv
452.086 509.219 452.137 509.211 452.191 509.207 cv
452.246 509.207 452.313 509.207 452.398 509.203 cv
452.504 509.207 452.598 509.211 452.672 509.219 cv
452.742 509.227 452.797 509.242 452.844 509.258 cv
452.883 509.277 452.91 509.297 452.926 509.32 cv
452.934 509.348 452.941 509.371 452.945 509.395 cv
452.945 517.191 li
454.551 517.191 li
454.586 517.195 454.621 517.203 454.652 517.223 cv
454.684 517.246 454.707 517.277 454.73 517.312 cv
454.746 517.352 454.762 517.398 454.777 517.457 cv
454.785 517.52 454.793 517.594 454.797 517.672 cv
cp
f
462.148 513.68 mo
462.145 514.363 462.094 514.984 461.988 515.547 cv
461.879 516.109 461.699 516.594 461.453 516.996 cv
461.199 517.402 460.871 517.715 460.473 517.934 cv
460.066 518.156 459.574 518.266 458.988 518.266 cv
458.43 518.266 457.957 518.168 457.578 517.969 cv
457.195 517.773 456.891 517.48 456.656 517.094 cv
456.422 516.707 456.254 516.234 456.16 515.668 cv
456.059 515.105 456.012 514.457 456.012 513.723 cv
456.012 513.051 456.066 512.43 456.176 511.863 cv
456.285 511.301 456.461 510.816 456.711 510.41 cv
456.953 510.008 457.277 509.695 457.684 509.469 cv
458.082 509.25 458.578 509.137 459.168 509.137 cv
459.727 509.137 460.199 509.238 460.582 509.434 cv
460.965 509.637 461.27 509.93 461.504 510.312 cv
461.734 510.703 461.902 511.176 462 511.738 cv
462.098 512.301 462.145 512.949 462.148 513.68 cv
cp
460.941 513.762 mo
460.938 513.32 460.922 512.922 460.895 512.57 cv
460.859 512.219 460.813 511.91 460.754 511.641 cv
460.688 511.371 460.609 511.141 460.512 510.945 cv
460.414 510.754 460.297 510.594 460.16 510.465 cv
460.02 510.34 459.859 510.246 459.688 510.187 cv
459.508 510.133 459.313 510.105 459.098 510.102 cv
458.707 510.105 458.391 510.195 458.152 510.379 cv
457.906 510.562 457.715 510.816 457.578 511.133 cv
457.438 511.453 457.344 511.824 457.293 512.254 cv
457.242 512.684 457.219 513.148 457.219 513.641 cv
457.219 514.305 457.25 514.867 457.32 515.328 cv
457.387 515.797 457.496 516.176 457.648 516.465 cv
457.793 516.762 457.984 516.973 458.215 517.102 cv
458.445 517.238 458.727 517.305 459.059 517.301 cv
459.313 517.305 459.535 517.266 459.73 517.18 cv
459.922 517.102 460.09 516.98 460.23 516.824 cv
460.371 516.672 460.484 516.488 460.578 516.273 cv
460.664 516.059 460.738 515.82 460.797 515.559 cv
460.848 515.301 460.887 515.02 460.91 514.715 cv
460.93 514.41 460.938 514.094 460.941 513.762 cv
cp
f
535.457 517.672 mo
535.453 517.762 535.445 517.832 535.434 517.891 cv
535.418 517.953 535.398 518.004 535.379 518.035 cv
535.355 518.074 535.332 518.098 535.301 518.113 cv
535.27 518.129 535.238 518.137 535.211 518.137 cv
530.574 518.137 li
530.539 518.137 530.512 518.129 530.484 518.113 cv
530.457 518.098 530.43 518.074 530.406 518.035 cv
530.379 518.004 530.359 517.953 530.348 517.891 cv
530.332 517.832 530.324 517.762 530.328 517.672 cv
530.324 517.594 530.332 517.52 530.348 517.457 cv
530.359 517.398 530.375 517.352 530.398 517.312 cv
530.414 517.277 530.441 517.246 530.473 517.223 cv
530.504 517.203 530.535 517.195 530.574 517.191 cv
532.426 517.191 li
532.426 510.445 li
530.711 511.465 li
530.621 511.516 530.551 511.543 530.504 511.551 cv
530.449 511.559 530.406 511.551 530.375 511.52 cv
530.34 511.492 530.32 511.441 530.309 511.371 cv
530.297 511.305 530.289 511.219 530.293 511.109 cv
530.289 511.035 530.293 510.969 530.305 510.91 cv
530.309 510.859 530.32 510.812 530.336 510.773 cv
530.348 510.738 530.367 510.707 530.391 510.68 cv
530.414 510.652 530.445 510.625 530.492 510.598 cv
532.535 509.285 li
532.551 509.273 532.57 509.262 532.602 509.254 cv
532.625 509.246 532.66 509.238 532.707 509.227 cv
532.746 509.219 532.797 509.211 532.852 509.207 cv
532.906 509.207 532.973 509.207 533.059 509.203 cv
533.164 509.207 533.258 509.211 533.332 509.219 cv
533.402 509.227 533.457 509.242 533.504 509.258 cv
533.543 509.277 533.57 509.297 533.586 509.32 cv
533.594 509.348 533.602 509.371 533.605 509.395 cv
533.605 517.191 li
535.211 517.191 li
535.246 517.195 535.281 517.203 535.313 517.223 cv
535.344 517.246 535.367 517.277 535.391 517.312 cv
535.406 517.352 535.422 517.398 535.438 517.457 cv
535.445 517.52 535.453 517.594 535.457 517.672 cv
cp
f
542.516 517.629 mo
542.512 517.715 542.508 517.789 542.496 517.852 cv
542.484 517.918 542.469 517.973 542.449 518.012 cv
542.426 518.059 542.398 518.09 542.367 518.105 cv
542.332 518.129 542.293 518.137 542.254 518.137 cv
537.352 518.137 li
537.289 518.137 537.23 518.129 537.184 518.113 cv
537.133 518.098 537.094 518.074 537.059 518.035 cv
537.023 518.004 536.996 517.949 536.984 517.879 cv
536.965 517.809 536.957 517.723 536.961 517.621 cv
536.957 517.531 536.961 517.453 536.969 517.383 cv
536.973 517.316 536.988 517.258 537.016 517.203 cv
537.039 517.152 537.07 517.098 537.105 517.043 cv
537.141 516.992 537.184 516.937 537.242 516.875 cv
539.016 515.051 li
539.426 514.633 539.754 514.258 540.004 513.922 cv
540.25 513.594 540.441 513.289 540.574 513.012 cv
540.707 512.738 540.793 512.488 540.84 512.262 cv
540.879 512.039 540.902 511.828 540.902 511.633 cv
540.902 511.437 540.867 511.254 540.801 511.074 cv
540.734 510.902 540.641 510.746 540.516 510.609 cv
540.391 510.48 540.234 510.375 540.047 510.293 cv
539.859 510.219 539.641 510.18 539.395 510.176 cv
539.105 510.18 538.848 510.219 538.621 510.293 cv
538.391 510.375 538.191 510.461 538.02 510.547 cv
537.848 510.641 537.703 510.723 537.586 510.801 cv
537.469 510.879 537.383 510.918 537.332 510.918 cv
537.297 510.918 537.266 510.91 537.242 510.891 cv
537.211 510.875 537.191 510.844 537.176 510.801 cv
537.16 510.762 537.145 510.707 537.137 510.637 cv
537.125 510.57 537.121 510.488 537.125 510.391 cv
537.121 510.324 537.125 510.266 537.133 510.215 cv
537.137 510.164 537.145 510.121 537.156 510.082 cv
537.164 510.047 537.18 510.012 537.199 509.98 cv
537.219 509.949 537.254 509.91 537.313 509.859 cv
537.363 509.812 537.457 509.746 537.594 509.664 cv
537.727 509.582 537.898 509.504 538.102 509.422 cv
538.305 509.344 538.527 509.273 538.773 509.219 cv
539.016 509.164 539.273 509.137 539.547 509.137 cv
539.973 509.137 540.348 509.199 540.672 509.32 cv
540.992 509.441 541.258 509.605 541.473 509.816 cv
541.684 510.027 541.844 510.273 541.949 510.547 cv
542.055 510.828 542.109 511.125 542.109 511.437 cv
542.109 511.727 542.082 512.008 542.031 512.285 cv
541.98 512.57 541.875 512.875 541.715 513.199 cv
541.551 513.527 541.316 513.891 541.012 514.289 cv
540.703 514.691 540.297 515.152 539.793 515.668 cv
538.387 517.137 li
542.246 517.137 li
542.277 517.141 542.313 517.152 542.352 517.168 cv
542.383 517.191 542.414 517.223 542.441 517.262 cv
542.465 517.305 542.484 517.355 542.496 517.414 cv
542.508 517.48 542.512 517.551 542.516 517.629 cv
cp
f
616.145 517.672 mo
616.141 517.762 616.133 517.832 616.121 517.891 cv
616.105 517.953 616.086 518.004 616.066 518.035 cv
616.043 518.074 616.02 518.098 615.988 518.113 cv
615.957 518.129 615.926 518.137 615.898 518.137 cv
611.262 518.137 li
611.227 518.137 611.199 518.129 611.172 518.113 cv
611.145 518.098 611.117 518.074 611.094 518.035 cv
611.066 518.004 611.047 517.953 611.035 517.891 cv
611.02 517.832 611.012 517.762 611.016 517.672 cv
611.012 517.594 611.02 517.52 611.035 517.457 cv
611.047 517.398 611.063 517.352 611.086 517.312 cv
611.102 517.277 611.129 517.246 611.16 517.223 cv
611.191 517.203 611.223 517.195 611.262 517.191 cv
613.113 517.191 li
613.113 510.445 li
611.398 511.465 li
611.309 511.516 611.238 511.543 611.191 511.551 cv
611.137 511.559 611.094 511.551 611.063 511.52 cv
611.027 511.492 611.008 511.441 610.996 511.371 cv
610.984 511.305 610.977 511.219 610.98 511.109 cv
610.977 511.035 610.98 510.969 610.992 510.91 cv
610.996 510.859 611.008 510.812 611.023 510.773 cv
611.035 510.738 611.055 510.707 611.078 510.68 cv
611.102 510.652 611.133 510.625 611.18 510.598 cv
613.223 509.285 li
613.238 509.273 613.258 509.262 613.289 509.254 cv
613.313 509.246 613.348 509.238 613.395 509.227 cv
613.434 509.219 613.484 509.211 613.539 509.207 cv
613.594 509.207 613.66 509.207 613.746 509.203 cv
613.852 509.207 613.945 509.211 614.02 509.219 cv
614.09 509.227 614.145 509.242 614.191 509.258 cv
614.23 509.277 614.258 509.297 614.273 509.32 cv
614.281 509.348 614.289 509.371 614.293 509.395 cv
614.293 517.191 li
615.898 517.191 li
615.934 517.195 615.969 517.203 616 517.223 cv
616.031 517.246 616.055 517.277 616.078 517.312 cv
616.094 517.352 616.109 517.398 616.125 517.457 cv
616.133 517.52 616.141 517.594 616.145 517.672 cv
cp
f
623.582 515.613 mo
623.578 515.766 623.555 515.887 623.512 515.973 cv
623.465 516.062 623.402 516.105 623.32 516.102 cv
622.32 516.102 li
622.32 517.965 li
622.32 518.004 622.309 518.035 622.293 518.059 cv
622.27 518.086 622.238 518.105 622.195 518.125 cv
622.145 518.141 622.082 518.152 622.012 518.164 cv
621.934 518.172 621.84 518.176 621.723 518.18 cv
621.605 518.176 621.508 518.172 621.438 518.164 cv
621.359 518.152 621.301 518.141 621.258 518.125 cv
621.211 518.105 621.18 518.086 621.164 518.059 cv
621.145 518.035 621.137 518.004 621.141 517.965 cv
621.141 516.102 li
617.512 516.102 li
617.453 516.105 617.41 516.098 617.375 516.082 cv
617.34 516.07 617.305 516.043 617.277 516.004 cv
617.246 515.969 617.227 515.918 617.215 515.848 cv
617.203 515.781 617.199 515.691 617.199 515.578 cv
617.199 515.496 617.199 515.418 617.207 515.348 cv
617.207 515.277 617.219 515.215 617.234 515.16 cv
617.246 515.105 617.262 515.051 617.289 514.996 cv
617.309 514.941 617.336 514.887 617.371 514.824 cv
620.531 509.437 li
620.551 509.402 620.586 509.371 620.633 509.344 cv
620.676 509.316 620.73 509.293 620.805 509.273 cv
620.871 509.258 620.957 509.246 621.063 509.234 cv
621.164 509.23 621.285 509.227 621.426 509.223 cv
621.574 509.227 621.711 509.23 621.828 509.242 cv
621.941 509.254 622.031 509.27 622.105 509.285 cv
622.172 509.305 622.227 509.328 622.266 509.359 cv
622.301 509.391 622.32 509.426 622.32 509.465 cv
622.32 515.129 li
623.32 515.129 li
623.395 515.133 623.457 515.172 623.508 515.25 cv
623.555 515.332 623.578 515.453 623.582 515.613 cv
cp
621.141 510.262 mo
621.129 510.262 li
618.277 515.129 li
621.141 515.129 li
cp
f
696.816 517.672 mo
696.813 517.762 696.805 517.832 696.793 517.891 cv
696.777 517.953 696.758 518.004 696.738 518.035 cv
696.715 518.074 696.691 518.098 696.66 518.113 cv
696.629 518.129 696.598 518.137 696.57 518.137 cv
691.934 518.137 li
691.898 518.137 691.871 518.129 691.844 518.113 cv
691.816 518.098 691.789 518.074 691.766 518.035 cv
691.738 518.004 691.719 517.953 691.707 517.891 cv
691.691 517.832 691.684 517.762 691.688 517.672 cv
691.684 517.594 691.691 517.52 691.707 517.457 cv
691.719 517.398 691.734 517.352 691.758 517.312 cv
691.773 517.277 691.801 517.246 691.832 517.223 cv
691.863 517.203 691.895 517.195 691.934 517.191 cv
693.785 517.191 li
693.785 510.445 li
692.07 511.465 li
691.98 511.516 691.91 511.543 691.863 511.551 cv
691.809 511.559 691.766 511.551 691.734 511.52 cv
691.699 511.492 691.68 511.441 691.668 511.371 cv
691.656 511.305 691.648 511.219 691.652 511.109 cv
691.648 511.035 691.652 510.969 691.664 510.91 cv
691.668 510.859 691.68 510.812 691.695 510.773 cv
691.707 510.738 691.727 510.707 691.75 510.68 cv
691.773 510.652 691.805 510.625 691.852 510.598 cv
693.895 509.285 li
693.91 509.273 693.93 509.262 693.961 509.254 cv
693.984 509.246 694.02 509.238 694.066 509.227 cv
694.105 509.219 694.156 509.211 694.211 509.207 cv
694.266 509.207 694.332 509.207 694.418 509.203 cv
694.523 509.207 694.617 509.211 694.691 509.219 cv
694.762 509.227 694.816 509.242 694.863 509.258 cv
694.902 509.277 694.93 509.297 694.945 509.32 cv
694.953 509.348 694.961 509.371 694.965 509.395 cv
694.965 517.191 li
696.57 517.191 li
696.605 517.195 696.641 517.203 696.672 517.223 cv
696.703 517.246 696.727 517.277 696.75 517.312 cv
696.766 517.352 696.781 517.398 696.797 517.457 cv
696.805 517.52 696.813 517.594 696.816 517.672 cv
cp
f
704.102 515.266 mo
704.102 515.656 704.039 516.035 703.922 516.395 cv
703.797 516.762 703.613 517.078 703.371 517.352 cv
703.121 517.629 702.809 517.852 702.434 518.016 cv
702.051 518.184 701.605 518.266 701.09 518.266 cv
700.719 518.266 700.391 518.223 700.109 518.129 cv
699.824 518.043 699.578 517.91 699.367 517.738 cv
699.156 517.57 698.98 517.363 698.844 517.117 cv
698.703 516.871 698.59 516.59 698.508 516.273 cv
698.422 515.961 698.363 515.617 698.328 515.238 cv
698.289 514.867 698.27 514.465 698.273 514.031 cv
698.27 513.652 698.289 513.27 698.332 512.879 cv
698.371 512.496 698.445 512.121 698.551 511.754 cv
698.656 511.395 698.801 511.055 698.98 510.738 cv
699.16 510.422 699.387 510.145 699.66 509.91 cv
699.934 509.676 700.258 509.488 700.637 509.348 cv
701.016 509.211 701.457 509.145 701.961 509.141 cv
702.129 509.145 702.301 509.152 702.473 509.172 cv
702.645 509.195 702.805 509.227 702.953 509.258 cv
703.102 509.297 703.223 509.332 703.324 509.371 cv
703.422 509.41 703.488 509.445 703.523 509.469 cv
703.551 509.496 703.574 509.523 703.594 509.551 cv
703.609 509.582 703.625 509.613 703.633 509.648 cv
703.641 509.684 703.645 509.723 703.652 509.766 cv
703.652 509.809 703.656 509.863 703.66 509.926 cv
703.656 510.012 703.656 510.082 703.656 510.137 cv
703.652 510.199 703.641 510.246 703.629 510.281 cv
703.609 510.32 703.59 510.348 703.566 510.363 cv
703.539 510.383 703.508 510.391 703.469 510.391 cv
703.418 510.391 703.348 510.375 703.262 510.344 cv
703.172 510.312 703.066 510.277 702.945 510.234 cv
702.82 510.199 702.672 510.164 702.496 510.129 cv
702.32 510.102 702.117 510.086 701.887 510.082 cv
701.457 510.086 701.09 510.172 700.785 510.344 cv
700.48 510.516 700.23 510.75 700.035 511.043 cv
699.84 511.336 699.695 511.676 699.605 512.059 cv
699.508 512.449 699.453 512.852 699.445 513.27 cv
699.563 513.203 699.699 513.137 699.848 513.066 cv
699.996 513 700.156 512.937 700.332 512.879 cv
700.508 512.828 700.695 512.781 700.891 512.746 cv
701.086 512.715 701.297 512.699 701.523 512.695 cv
702 512.699 702.402 512.766 702.734 512.891 cv
703.063 513.023 703.328 513.203 703.535 513.434 cv
703.734 513.664 703.879 513.934 703.969 514.246 cv
704.055 514.559 704.102 514.898 704.102 515.266 cv
cp
702.906 515.375 mo
702.906 515.113 702.879 514.871 702.828 514.652 cv
702.773 514.437 702.684 514.254 702.563 514.098 cv
702.438 513.949 702.273 513.832 702.07 513.75 cv
701.859 513.668 701.605 513.625 701.309 513.625 cv
701.137 513.625 700.969 513.641 700.801 513.672 cv
700.629 513.703 700.465 513.746 700.309 513.793 cv
700.148 513.848 700 513.91 699.859 513.98 cv
699.715 514.055 699.582 514.129 699.465 514.207 cv
699.461 514.801 699.5 515.297 699.578 515.691 cv
699.652 516.09 699.762 516.406 699.906 516.645 cv
700.051 516.887 700.23 517.059 700.445 517.16 cv
700.66 517.266 700.91 517.316 701.199 517.312 cv
701.488 517.316 701.742 517.262 701.957 517.148 cv
702.172 517.043 702.348 516.895 702.492 516.707 cv
702.633 516.523 702.738 516.316 702.805 516.086 cv
702.871 515.855 702.906 515.621 702.906 515.375 cv
cp
f
7.699 297.738 mo
7.801 297.742 7.887 297.746 7.957 297.754 cv
8.031 297.766 8.09 297.781 8.133 297.805 cv
8.18 297.828 8.211 297.859 8.23 297.891 cv
8.254 297.93 8.266 297.965 8.262 298.004 cv
8.262 300.84 li
17.004 300.84 li
17.047 300.84 17.082 300.852 17.113 300.871 cv
17.145 300.895 17.172 300.93 17.188 300.98 cv
17.207 301.035 17.219 301.105 17.234 301.187 cv
17.246 301.277 17.254 301.383 17.254 301.508 cv
17.254 301.633 17.246 301.742 17.234 301.828 cv
17.219 301.922 17.207 301.992 17.188 302.039 cv
17.172 302.094 17.145 302.129 17.113 302.148 cv
17.082 302.172 17.047 302.184 17.004 302.18 cv
8.262 302.18 li
8.262 305.016 li
8.266 305.062 8.254 305.098 8.23 305.129 cv
8.211 305.164 8.18 305.191 8.133 305.211 cv
8.09 305.234 8.031 305.254 7.957 305.262 cv
7.887 305.277 7.801 305.281 7.699 305.281 cv
7.602 305.281 7.516 305.277 7.438 305.262 cv
7.367 305.254 7.305 305.234 7.254 305.211 cv
7.211 305.191 7.176 305.164 7.152 305.129 cv
7.133 305.098 7.125 305.062 7.121 305.016 cv
7.121 298.004 li
7.125 297.965 7.133 297.93 7.152 297.891 cv
7.176 297.859 7.211 297.828 7.254 297.805 cv
7.305 297.781 7.367 297.766 7.438 297.754 cv
7.516 297.746 7.602 297.742 7.699 297.738 cv
cp
f
17.012 295.152 mo
17.059 295.156 17.094 295.168 17.117 295.184 cv
17.148 295.207 17.172 295.238 17.191 295.285 cv
17.211 295.332 17.223 295.398 17.238 295.477 cv
17.246 295.562 17.254 295.668 17.254 295.797 cv
17.254 295.926 17.246 296.031 17.238 296.109 cv
17.223 296.195 17.211 296.262 17.191 296.309 cv
17.172 296.363 17.148 296.395 17.117 296.41 cv
17.094 296.43 17.059 296.441 17.012 296.437 cv
10 296.437 li
9.965 296.441 9.934 296.43 9.898 296.41 cv
9.871 296.395 9.844 296.363 9.82 296.309 cv
9.801 296.262 9.785 296.195 9.773 296.109 cv
9.766 296.031 9.762 295.926 9.758 295.797 cv
9.762 295.668 9.766 295.562 9.773 295.477 cv
9.785 295.398 9.801 295.332 9.82 295.285 cv
9.844 295.238 9.871 295.207 9.898 295.184 cv
9.934 295.168 9.965 295.156 10 295.152 cv
cp
7.629 295.004 mo
7.934 295.004 8.141 295.062 8.246 295.176 cv
8.359 295.289 8.414 295.5 8.41 295.805 cv
8.414 296.109 8.359 296.316 8.25 296.426 cv
8.145 296.543 7.941 296.598 7.645 296.594 cv
7.344 296.598 7.141 296.539 7.031 296.422 cv
6.926 296.309 6.871 296.098 6.867 295.789 cv
6.871 295.488 6.926 295.285 7.027 295.172 cv
7.137 295.062 7.336 295.004 7.629 295.004 cv
cp
f
17.012 282.297 mo
17.059 282.301 17.094 282.309 17.117 282.328 cv
17.148 282.352 17.172 282.387 17.191 282.43 cv
17.211 282.48 17.223 282.547 17.238 282.625 cv
17.246 282.711 17.254 282.812 17.254 282.937 cv
17.254 283.07 17.246 283.18 17.238 283.258 cv
17.223 283.344 17.211 283.41 17.191 283.457 cv
17.172 283.512 17.148 283.547 17.117 283.562 cv
17.094 283.586 17.059 283.594 17.012 283.594 cv
12.75 283.594 li
12.457 283.594 12.188 283.621 11.941 283.672 cv
11.699 283.727 11.488 283.809 11.309 283.922 cv
11.133 284.035 10.996 284.18 10.902 284.355 cv
10.809 284.535 10.762 284.746 10.762 284.98 cv
10.762 285.277 10.879 285.574 11.105 285.871 cv
11.34 286.176 11.672 286.504 12.109 286.859 cv
17.012 286.859 li
17.059 286.863 17.094 286.875 17.117 286.891 cv
17.148 286.914 17.172 286.945 17.191 286.992 cv
17.211 287.043 17.223 287.109 17.238 287.191 cv
17.246 287.277 17.254 287.383 17.254 287.504 cv
17.254 287.625 17.246 287.727 17.238 287.812 cv
17.223 287.898 17.211 287.969 17.191 288.016 cv
17.172 288.07 17.148 288.102 17.117 288.117 cv
17.094 288.137 17.059 288.148 17.012 288.145 cv
12.75 288.145 li
12.457 288.148 12.188 288.176 11.941 288.23 cv
11.699 288.289 11.488 288.375 11.309 288.488 cv
11.133 288.602 10.996 288.746 10.902 288.918 cv
10.809 289.098 10.762 289.305 10.762 289.539 cv
10.762 289.84 10.879 290.137 11.105 290.437 cv
11.34 290.738 11.672 291.066 12.109 291.418 cv
17.012 291.418 li
17.059 291.422 17.094 291.434 17.117 291.449 cv
17.148 291.473 17.172 291.504 17.191 291.551 cv
17.211 291.598 17.223 291.664 17.238 291.742 cv
17.246 291.828 17.254 291.934 17.254 292.062 cv
17.254 292.191 17.246 292.297 17.238 292.375 cv
17.223 292.461 17.211 292.527 17.191 292.574 cv
17.172 292.629 17.148 292.66 17.117 292.676 cv
17.094 292.695 17.059 292.707 17.012 292.703 cv
10 292.703 li
9.961 292.707 9.926 292.699 9.895 292.68 cv
9.867 292.668 9.844 292.637 9.816 292.586 cv
9.797 292.543 9.781 292.48 9.77 292.406 cv
9.766 292.336 9.762 292.242 9.758 292.117 cv
9.762 292.008 9.766 291.91 9.77 291.832 cv
9.781 291.758 9.797 291.699 9.816 291.656 cv
9.844 291.617 9.867 291.59 9.895 291.57 cv
9.926 291.555 9.961 291.547 10 291.543 cv
10.926 291.543 li
10.484 291.152 10.164 290.77 9.957 290.395 cv
9.754 290.027 9.648 289.648 9.648 289.266 cv
9.648 288.977 9.684 288.719 9.75 288.484 cv
9.82 288.258 9.914 288.051 10.035 287.871 cv
10.156 287.695 10.301 287.547 10.469 287.418 cv
10.641 287.297 10.832 287.191 11.035 287.105 cv
10.785 286.875 10.57 286.652 10.391 286.441 cv
10.219 286.23 10.074 286.027 9.961 285.832 cv
9.855 285.637 9.777 285.449 9.723 285.266 cv
9.676 285.082 9.648 284.895 9.648 284.707 cv
9.648 284.254 9.73 283.875 9.887 283.57 cv
10.051 283.266 10.262 283.02 10.523 282.824 cv
10.789 282.637 11.098 282.5 11.453 282.418 cv
11.809 282.34 12.184 282.301 12.578 282.297 cv
cp
f
13.203 273.965 mo
13.406 273.969 13.547 274.02 13.633 274.117 cv
13.719 274.223 13.762 274.34 13.762 274.465 cv
13.762 279.082 li
14.152 279.086 14.504 279.047 14.816 278.965 cv
15.129 278.891 15.398 278.758 15.617 278.574 cv
15.844 278.395 16.016 278.16 16.133 277.863 cv
16.258 277.574 16.316 277.215 16.313 276.789 cv
16.316 276.457 16.289 276.16 16.23 275.898 cv
16.18 275.637 16.117 275.41 16.047 275.219 cv
15.98 275.031 15.922 274.875 15.863 274.75 cv
15.813 274.629 15.785 274.535 15.781 274.473 cv
15.785 274.437 15.793 274.406 15.809 274.375 cv
15.828 274.348 15.855 274.324 15.891 274.305 cv
15.93 274.293 15.98 274.281 16.043 274.27 cv
16.109 274.266 16.188 274.262 16.281 274.258 cv
16.352 274.262 16.41 274.266 16.457 274.266 cv
16.504 274.273 16.547 274.277 16.586 274.285 cv
16.625 274.293 16.66 274.309 16.691 274.324 cv
16.723 274.348 16.754 274.371 16.781 274.395 cv
16.813 274.426 16.859 274.508 16.922 274.648 cv
16.988 274.789 17.051 274.973 17.113 275.195 cv
17.176 275.422 17.23 275.68 17.281 275.973 cv
17.328 276.266 17.352 276.578 17.355 276.91 cv
17.352 277.488 17.273 277.996 17.113 278.426 cv
16.953 278.863 16.715 279.227 16.398 279.52 cv
16.082 279.82 15.688 280.043 15.207 280.191 cv
14.73 280.34 14.172 280.414 13.535 280.414 cv
12.938 280.414 12.398 280.34 11.914 280.184 cv
11.438 280.031 11.027 279.805 10.691 279.508 cv
10.355 279.215 10.098 278.859 9.918 278.445 cv
9.738 278.031 9.648 277.566 9.648 277.051 cv
9.648 276.5 9.738 276.031 9.914 275.645 cv
10.094 275.258 10.332 274.941 10.629 274.687 cv
10.93 274.441 11.281 274.258 11.68 274.141 cv
12.086 274.027 12.516 273.969 12.969 273.965 cv
cp
12.82 275.258 mo
12.145 275.242 11.613 275.395 11.23 275.711 cv
10.848 276.027 10.656 276.496 10.652 277.113 cv
10.656 277.437 10.715 277.719 10.832 277.957 cv
10.953 278.199 11.113 278.398 11.309 278.559 cv
11.508 278.723 11.738 278.848 12 278.934 cv
12.262 279.023 12.535 279.074 12.82 279.082 cv
cp
f
6.469 265.789 mo
7.516 266.285 8.586 266.652 9.684 266.895 cv
10.785 267.137 11.891 267.258 13 267.258 cv
14.117 267.258 15.227 267.137 16.32 266.887 cv
17.418 266.645 18.488 266.281 19.543 265.805 cv
19.602 265.781 19.656 265.77 19.703 265.762 cv
19.746 265.762 19.781 265.777 19.813 265.812 cv
19.84 265.852 19.859 265.906 19.875 265.98 cv
19.883 266.059 19.891 266.164 19.895 266.289 cv
19.891 266.387 19.887 266.465 19.887 266.531 cv
19.879 266.602 19.871 266.66 19.855 266.707 cv
19.84 266.758 19.82 266.801 19.801 266.828 cv
19.777 266.863 19.754 266.887 19.73 266.898 cv
19.199 267.18 18.664 267.426 18.121 267.637 cv
17.578 267.855 17.027 268.035 16.469 268.176 cv
15.906 268.324 15.34 268.434 14.766 268.504 cv
14.191 268.582 13.609 268.617 13.023 268.613 cv
12.438 268.617 11.859 268.578 11.285 268.492 cv
10.715 268.414 10.148 268.297 9.582 268.148 cv
9.02 268 8.465 267.82 7.918 267.609 cv
7.375 267.398 6.832 267.16 6.297 266.891 cv
6.277 266.887 6.262 266.871 6.242 266.848 cv
6.23 266.824 6.215 266.793 6.195 266.75 cv
6.184 266.711 6.172 266.652 6.16 266.578 cv
6.156 266.508 6.152 266.414 6.148 266.297 cv
6.152 266.18 6.16 266.086 6.172 266.008 cv
6.191 265.937 6.211 265.879 6.234 265.836 cv
6.262 265.797 6.297 265.773 6.336 265.766 cv
6.383 265.762 6.426 265.77 6.469 265.789 cv
cp
f
14.379 258.055 mo
14.852 258.059 15.273 258.145 15.641 258.316 cv
16.016 258.492 16.328 258.734 16.582 259.043 cv
16.84 259.352 17.031 259.715 17.16 260.133 cv
17.289 260.555 17.352 261.004 17.355 261.484 cv
17.352 261.824 17.324 262.141 17.27 262.426 cv
17.211 262.715 17.145 262.969 17.059 263.195 cv
16.98 263.422 16.895 263.613 16.801 263.766 cv
16.715 263.922 16.637 264.027 16.574 264.086 cv
16.512 264.145 16.434 264.187 16.34 264.215 cv
16.246 264.246 16.117 264.262 15.953 264.258 cv
15.84 264.262 15.746 264.258 15.668 264.242 cv
15.594 264.234 15.531 264.219 15.484 264.195 cv
15.438 264.18 15.406 264.152 15.387 264.117 cv
15.371 264.09 15.363 264.055 15.359 264.012 cv
15.363 263.941 15.406 263.84 15.492 263.703 cv
15.582 263.574 15.68 263.402 15.781 263.191 cv
15.891 262.984 15.988 262.734 16.074 262.441 cv
16.168 262.148 16.211 261.809 16.211 261.422 cv
16.211 261.133 16.172 260.867 16.094 260.625 cv
16.016 260.387 15.906 260.18 15.762 260 cv
15.621 259.828 15.445 259.691 15.234 259.598 cv
15.027 259.504 14.793 259.457 14.527 259.457 cv
14.246 259.457 14 259.523 13.793 259.652 cv
13.594 259.785 13.418 259.957 13.262 260.168 cv
13.113 260.383 12.973 260.625 12.84 260.898 cv
12.715 261.172 12.582 261.453 12.449 261.734 cv
12.316 262.023 12.172 262.301 12.008 262.57 cv
11.852 262.84 11.66 263.082 11.441 263.293 cv
11.223 263.512 10.969 263.684 10.672 263.812 cv
10.383 263.949 10.031 264.016 9.617 264.012 cv
9.199 264.016 8.824 263.937 8.492 263.781 cv
8.164 263.629 7.887 263.418 7.66 263.141 cv
7.441 262.871 7.27 262.547 7.152 262.168 cv
7.035 261.793 6.977 261.383 6.977 260.945 cv
6.977 260.727 6.996 260.504 7.035 260.273 cv
7.074 260.051 7.125 259.84 7.188 259.637 cv
7.254 259.441 7.328 259.262 7.406 259.102 cv
7.488 258.949 7.555 258.848 7.602 258.793 cv
7.656 258.746 7.695 258.711 7.719 258.695 cv
7.75 258.68 7.785 258.668 7.828 258.656 cv
7.875 258.648 7.93 258.641 7.988 258.633 cv
8.055 258.629 8.133 258.625 8.23 258.625 cv
8.324 258.625 8.41 258.629 8.48 258.637 cv
8.559 258.645 8.617 258.656 8.664 258.672 cv
8.711 258.687 8.746 258.711 8.77 258.738 cv
8.793 258.77 8.805 258.801 8.805 258.836 cv
8.805 258.895 8.77 258.984 8.699 259.105 cv
8.629 259.23 8.547 259.383 8.453 259.555 cv
8.363 259.734 8.281 259.941 8.203 260.18 cv
8.129 260.426 8.09 260.695 8.09 260.992 cv
8.09 261.273 8.129 261.52 8.203 261.727 cv
8.281 261.937 8.383 262.109 8.504 262.242 cv
8.629 262.379 8.773 262.48 8.945 262.547 cv
9.117 262.613 9.301 262.645 9.492 262.645 cv
9.777 262.645 10.02 262.582 10.219 262.453 cv
10.422 262.324 10.602 262.152 10.754 261.934 cv
10.914 261.723 11.055 261.477 11.184 261.199 cv
11.316 260.926 11.449 260.645 11.578 260.355 cv
11.711 260.07 11.855 259.789 12.012 259.516 cv
12.172 259.242 12.359 258.996 12.574 258.777 cv
12.793 258.562 13.047 258.391 13.34 258.254 cv
13.633 258.125 13.98 258.059 14.379 258.055 cv
cp
f
13.203 250.359 mo
13.406 250.363 13.547 250.414 13.633 250.512 cv
13.719 250.617 13.762 250.734 13.762 250.859 cv
13.762 255.477 li
14.152 255.48 14.504 255.441 14.816 255.359 cv
15.129 255.285 15.398 255.152 15.617 254.969 cv
15.844 254.789 16.016 254.555 16.133 254.258 cv
16.258 253.969 16.316 253.609 16.313 253.184 cv
16.316 252.852 16.289 252.555 16.23 252.293 cv
16.18 252.031 16.117 251.805 16.047 251.613 cv
15.98 251.426 15.922 251.27 15.863 251.145 cv
15.813 251.023 15.785 250.93 15.781 250.867 cv
15.785 250.832 15.793 250.801 15.809 250.77 cv
15.828 250.742 15.855 250.719 15.891 250.699 cv
15.93 250.687 15.98 250.676 16.043 250.664 cv
16.109 250.66 16.188 250.656 16.281 250.652 cv
16.352 250.656 16.41 250.66 16.457 250.66 cv
16.504 250.668 16.547 250.672 16.586 250.68 cv
16.625 250.687 16.66 250.703 16.691 250.719 cv
16.723 250.742 16.754 250.766 16.781 250.789 cv
16.813 250.82 16.859 250.902 16.922 251.043 cv
16.988 251.184 17.051 251.367 17.113 251.59 cv
17.176 251.816 17.23 252.074 17.281 252.367 cv
17.328 252.66 17.352 252.973 17.355 253.305 cv
17.352 253.883 17.273 254.391 17.113 254.82 cv
16.953 255.258 16.715 255.621 16.398 255.914 cv
16.082 256.215 15.688 256.437 15.207 256.586 cv
14.73 256.734 14.172 256.809 13.535 256.809 cv
12.938 256.809 12.398 256.734 11.914 256.578 cv
11.438 256.426 11.027 256.199 10.691 255.902 cv
10.355 255.609 10.098 255.254 9.918 254.84 cv
9.738 254.426 9.648 253.961 9.648 253.445 cv
9.648 252.895 9.738 252.426 9.914 252.039 cv
10.094 251.652 10.332 251.336 10.629 251.082 cv
10.93 250.836 11.281 250.652 11.68 250.535 cv
12.086 250.422 12.516 250.363 12.969 250.359 cv
cp
12.82 251.652 mo
12.145 251.637 11.613 251.789 11.23 252.105 cv
10.848 252.422 10.656 252.891 10.652 253.508 cv
10.656 253.832 10.715 254.113 10.832 254.352 cv
10.953 254.594 11.113 254.793 11.309 254.953 cv
11.508 255.117 11.738 255.242 12 255.328 cv
12.262 255.418 12.535 255.469 12.82 255.477 cv
cp
f
15.945 243.352 mo
16.039 243.352 16.113 243.355 16.176 243.359 cv
16.242 243.367 16.297 243.375 16.34 243.387 cv
16.387 243.402 16.426 243.418 16.457 243.434 cv
16.488 243.453 16.539 243.496 16.602 243.559 cv
16.672 243.625 16.75 243.734 16.844 243.891 cv
16.941 244.047 17.027 244.223 17.102 244.418 cv
17.176 244.613 17.234 244.824 17.285 245.051 cv
17.328 245.281 17.352 245.52 17.355 245.758 cv
17.352 246.266 17.273 246.711 17.105 247.102 cv
16.941 247.492 16.699 247.82 16.379 248.078 cv
16.063 248.344 15.668 248.543 15.203 248.68 cv
14.738 248.816 14.203 248.883 13.59 248.883 cv
12.902 248.883 12.309 248.801 11.813 248.633 cv
11.316 248.465 10.91 248.234 10.594 247.937 cv
10.277 247.648 10.043 247.301 9.887 246.902 cv
9.738 246.504 9.66 246.074 9.656 245.613 cv
9.66 245.391 9.68 245.176 9.719 244.961 cv
9.762 244.754 9.816 244.559 9.883 244.383 cv
9.953 244.207 10.031 244.051 10.117 243.91 cv
10.203 243.773 10.277 243.672 10.34 243.609 cv
10.402 243.547 10.453 243.504 10.488 243.48 cv
10.527 243.457 10.57 243.437 10.617 243.422 cv
10.668 243.406 10.723 243.398 10.785 243.391 cv
10.848 243.391 10.926 243.387 11.02 243.383 cv
11.223 243.387 11.367 243.41 11.445 243.453 cv
11.531 243.504 11.57 243.562 11.566 243.625 cv
11.57 243.707 11.527 243.797 11.438 243.895 cv
11.355 244 11.262 244.129 11.152 244.281 cv
11.051 244.437 10.953 244.625 10.867 244.844 cv
10.781 245.07 10.738 245.332 10.738 245.629 cv
10.738 246.25 10.977 246.723 11.453 247.051 cv
11.93 247.383 12.621 247.547 13.52 247.543 cv
13.977 247.547 14.371 247.504 14.711 247.414 cv
15.051 247.332 15.336 247.207 15.563 247.039 cv
15.793 246.875 15.965 246.672 16.074 246.426 cv
16.191 246.187 16.246 245.91 16.242 245.598 cv
16.246 245.305 16.199 245.043 16.102 244.816 cv
16.012 244.594 15.91 244.402 15.793 244.238 cv
15.684 244.078 15.582 243.941 15.488 243.824 cv
15.402 243.715 15.355 243.625 15.352 243.562 cv
15.355 243.527 15.367 243.496 15.383 243.469 cv
15.406 243.445 15.441 243.426 15.488 243.402 cv
15.543 243.387 15.605 243.371 15.676 243.363 cv
15.754 243.355 15.844 243.352 15.945 243.352 cv
cp
f
13.426 235.297 mo
14.004 235.301 14.531 235.375 15.008 235.523 cv
15.492 235.676 15.906 235.902 16.25 236.199 cv
16.602 236.5 16.871 236.875 17.063 237.32 cv
17.258 237.773 17.352 238.293 17.355 238.883 cv
17.352 239.461 17.27 239.965 17.098 240.391 cv
16.93 240.82 16.68 241.176 16.352 241.461 cv
16.023 241.75 15.629 241.965 15.16 242.102 cv
14.695 242.242 14.164 242.309 13.566 242.309 cv
13 242.309 12.473 242.238 11.992 242.09 cv
11.512 241.945 11.098 241.719 10.746 241.418 cv
10.398 241.121 10.129 240.75 9.938 240.301 cv
9.746 239.855 9.648 239.332 9.648 238.734 cv
9.648 238.156 9.734 237.656 9.906 237.227 cv
10.078 236.801 10.328 236.441 10.656 236.156 cv
10.984 235.871 11.383 235.656 11.848 235.512 cv
12.316 235.371 12.844 235.301 13.426 235.297 cv
cp
13.512 236.629 mo
13.137 236.633 12.777 236.668 12.438 236.734 cv
12.102 236.809 11.809 236.926 11.551 237.086 cv
11.301 237.25 11.098 237.469 10.945 237.746 cv
10.801 238.027 10.727 238.375 10.723 238.785 cv
10.727 239.172 10.793 239.5 10.926 239.773 cv
11.063 240.051 11.254 240.277 11.5 240.453 cv
11.746 240.633 12.039 240.766 12.375 240.848 cv
12.715 240.937 13.082 240.98 13.48 240.977 cv
13.867 240.98 14.23 240.945 14.566 240.871 cv
14.906 240.805 15.199 240.687 15.449 240.52 cv
15.703 240.355 15.906 240.133 16.051 239.855 cv
16.203 239.578 16.277 239.23 16.273 238.816 cv
16.277 238.441 16.207 238.113 16.07 237.832 cv
15.938 237.555 15.75 237.328 15.5 237.148 cv
15.258 236.973 14.965 236.844 14.629 236.758 cv
14.293 236.676 13.922 236.633 13.512 236.629 cv
cp
f
17.012 227.371 mo
17.059 227.371 17.094 227.383 17.117 227.402 cv
17.148 227.426 17.172 227.461 17.191 227.504 cv
17.211 227.555 17.223 227.617 17.238 227.699 cv
17.246 227.781 17.254 227.887 17.254 228.008 cv
17.254 228.141 17.246 228.246 17.238 228.328 cv
17.223 228.414 17.211 228.48 17.191 228.523 cv
17.172 228.574 17.148 228.605 17.117 228.625 cv
17.094 228.648 17.059 228.66 17.012 228.656 cv
12.906 228.656 li
12.508 228.66 12.188 228.691 11.941 228.75 cv
11.699 228.816 11.488 228.906 11.309 229.023 cv
11.133 229.141 10.996 229.297 10.902 229.484 cv
10.809 229.68 10.762 229.898 10.762 230.145 cv
10.762 230.469 10.879 230.793 11.105 231.113 cv
11.34 231.437 11.672 231.773 12.109 232.125 cv
17.012 232.125 li
17.059 232.129 17.094 232.141 17.117 232.156 cv
17.148 232.18 17.172 232.211 17.191 232.258 cv
17.211 232.305 17.223 232.371 17.238 232.449 cv
17.246 232.535 17.254 232.641 17.254 232.77 cv
17.254 232.898 17.246 233.004 17.238 233.082 cv
17.223 233.168 17.211 233.234 17.191 233.281 cv
17.172 233.336 17.148 233.367 17.117 233.383 cv
17.094 233.402 17.059 233.414 17.012 233.41 cv
10 233.41 li
9.961 233.414 9.926 233.406 9.895 233.387 cv
9.867 233.375 9.844 233.344 9.816 233.293 cv
9.797 233.25 9.781 233.187 9.77 233.113 cv
9.766 233.043 9.762 232.949 9.758 232.824 cv
9.762 232.715 9.766 232.617 9.77 232.539 cv
9.781 232.465 9.797 232.406 9.816 232.363 cv
9.844 232.324 9.867 232.297 9.895 232.277 cv
9.926 232.262 9.961 232.254 10 232.25 cv
10.926 232.25 li
10.484 231.859 10.164 231.465 9.957 231.07 cv
9.754 230.68 9.648 230.281 9.648 229.879 cv
9.648 229.41 9.73 229.02 9.887 228.699 cv
10.051 228.383 10.262 228.121 10.523 227.922 cv
10.789 227.727 11.098 227.586 11.453 227.5 cv
11.809 227.414 12.238 227.371 12.734 227.371 cv
cp
f
17.012 219.023 mo
17.059 219.027 17.094 219.035 17.121 219.051 cv
17.156 219.07 17.18 219.102 17.195 219.145 cv
17.211 219.187 17.223 219.246 17.238 219.316 cv
17.246 219.391 17.254 219.48 17.254 219.582 cv
17.254 219.695 17.246 219.785 17.238 219.855 cv
17.223 219.93 17.211 219.988 17.195 220.035 cv
17.18 220.082 17.156 220.117 17.121 220.137 cv
17.094 220.16 17.059 220.172 17.012 220.168 cv
16.086 220.168 li
16.488 220.543 16.797 220.926 17.02 221.32 cv
17.242 221.719 17.352 222.152 17.355 222.621 cv
17.352 223.141 17.254 223.582 17.055 223.941 cv
16.855 224.309 16.586 224.602 16.246 224.824 cv
15.906 225.055 15.508 225.219 15.047 225.32 cv
14.59 225.422 14.105 225.473 13.59 225.473 cv
12.992 225.473 12.449 225.41 11.961 225.281 cv
11.477 225.152 11.059 224.961 10.715 224.703 cv
10.371 224.453 10.109 224.137 9.926 223.758 cv
9.742 223.383 9.648 222.945 9.648 222.449 cv
9.648 222.043 9.738 221.668 9.918 221.324 cv
10.098 220.984 10.363 220.648 10.707 220.316 cv
6.633 220.316 li
6.598 220.316 6.563 220.309 6.527 220.289 cv
6.496 220.273 6.469 220.238 6.449 220.184 cv
6.434 220.133 6.418 220.066 6.402 219.984 cv
6.391 219.906 6.387 219.805 6.383 219.676 cv
6.387 219.551 6.391 219.441 6.402 219.355 cv
6.418 219.273 6.434 219.211 6.449 219.164 cv
6.469 219.121 6.496 219.086 6.527 219.059 cv
6.563 219.039 6.598 219.027 6.633 219.023 cv
cp
12.078 220.316 mo
11.652 220.664 11.324 221 11.094 221.324 cv
10.871 221.652 10.758 221.992 10.754 222.34 cv
10.758 222.672 10.836 222.949 10.988 223.176 cv
11.148 223.406 11.352 223.594 11.605 223.734 cv
11.859 223.879 12.148 223.98 12.469 224.043 cv
12.793 224.109 13.121 224.145 13.449 224.141 cv
13.809 224.145 14.152 224.117 14.488 224.059 cv
14.824 224.008 15.125 223.914 15.387 223.777 cv
15.652 223.645 15.863 223.465 16.02 223.238 cv
16.18 223.02 16.258 222.738 16.258 222.395 cv
16.258 222.23 16.234 222.066 16.188 221.902 cv
16.141 221.746 16.063 221.582 15.953 221.414 cv
15.844 221.25 15.703 221.078 15.527 220.895 cv
15.355 220.715 15.141 220.52 14.883 220.316 cv
cp
f
15.102 212.25 mo
15.465 212.254 15.785 212.32 16.063 212.449 cv
16.344 212.582 16.578 212.77 16.77 213.012 cv
16.965 213.258 17.109 213.551 17.207 213.887 cv
17.305 214.227 17.352 214.598 17.355 215 cv
17.352 215.254 17.332 215.492 17.297 215.715 cv
17.254 215.941 17.207 216.141 17.148 216.32 cv
17.09 216.5 17.027 216.652 16.961 216.777 cv
16.898 216.902 16.84 216.996 16.785 217.051 cv
16.734 217.109 16.664 217.148 16.566 217.172 cv
16.477 217.199 16.348 217.211 16.188 217.211 cv
16.09 217.211 16.008 217.207 15.938 217.195 cv
15.871 217.187 15.816 217.176 15.773 217.156 cv
15.734 217.145 15.703 217.121 15.684 217.094 cv
15.668 217.066 15.66 217.035 15.656 216.996 cv
15.66 216.941 15.695 216.855 15.762 216.742 cv
15.836 216.633 15.914 216.496 15.992 216.328 cv
16.078 216.168 16.152 215.977 16.223 215.75 cv
16.293 215.531 16.328 215.273 16.328 214.977 cv
16.328 214.762 16.305 214.562 16.258 214.383 cv
16.211 214.207 16.145 214.055 16.051 213.926 cv
15.965 213.797 15.848 213.695 15.703 213.625 cv
15.566 213.555 15.398 213.52 15.203 213.52 cv
15.008 213.52 14.844 213.57 14.707 213.672 cv
14.574 213.773 14.453 213.91 14.348 214.074 cv
14.246 214.242 14.156 214.426 14.07 214.633 cv
13.992 214.844 13.906 215.059 13.816 215.277 cv
13.73 215.496 13.629 215.711 13.516 215.922 cv
13.406 216.133 13.273 216.324 13.109 216.488 cv
12.953 216.66 12.758 216.793 12.531 216.891 cv
12.309 216.996 12.043 217.047 11.73 217.043 cv
11.457 217.047 11.191 216.992 10.938 216.883 cv
10.688 216.777 10.469 216.617 10.277 216.402 cv
10.09 216.191 9.938 215.926 9.82 215.605 cv
9.707 215.285 9.648 214.914 9.648 214.484 cv
9.648 214.301 9.664 214.113 9.695 213.926 cv
9.727 213.742 9.766 213.574 9.813 213.418 cv
9.859 213.27 9.91 213.141 9.965 213.031 cv
10.02 212.93 10.07 212.848 10.109 212.789 cv
10.156 212.738 10.191 212.703 10.219 212.68 cv
10.25 212.664 10.285 212.648 10.32 212.641 cv
10.363 212.633 10.41 212.625 10.465 212.617 cv
10.523 212.609 10.594 212.605 10.676 212.605 cv
10.766 212.605 10.844 212.609 10.906 212.617 cv
10.977 212.625 11.027 212.641 11.066 212.656 cv
11.109 212.68 11.141 212.699 11.156 212.723 cv
11.176 212.75 11.184 212.781 11.184 212.809 cv
11.184 212.859 11.156 212.926 11.098 213.012 cv
11.043 213.102 10.98 213.215 10.914 213.355 cv
10.852 213.496 10.793 213.664 10.73 213.852 cv
10.676 214.043 10.645 214.258 10.645 214.5 cv
10.645 214.723 10.672 214.914 10.719 215.078 cv
10.773 215.246 10.844 215.383 10.93 215.488 cv
11.023 215.594 11.129 215.676 11.254 215.727 cv
11.379 215.785 11.516 215.812 11.66 215.809 cv
11.863 215.812 12.031 215.762 12.168 215.656 cv
12.309 215.555 12.43 215.418 12.531 215.25 cv
12.637 215.086 12.73 214.895 12.813 214.68 cv
12.898 214.469 12.984 214.254 13.07 214.031 cv
13.16 213.812 13.262 213.594 13.367 213.375 cv
13.477 213.16 13.605 212.969 13.762 212.801 cv
13.918 212.637 14.105 212.504 14.324 212.402 cv
14.543 212.305 14.805 212.254 15.102 212.25 cv
cp
f
13.023 207.805 mo
13.609 207.805 14.191 207.844 14.766 207.914 cv
15.34 207.992 15.906 208.102 16.469 208.242 cv
17.027 208.391 17.578 208.566 18.121 208.777 cv
18.664 208.988 19.199 209.234 19.73 209.512 cv
19.754 209.531 19.777 209.555 19.801 209.582 cv
19.82 209.617 19.84 209.656 19.855 209.703 cv
19.871 209.754 19.879 209.812 19.887 209.879 cv
19.887 209.949 19.891 210.031 19.895 210.121 cv
19.891 210.258 19.883 210.363 19.875 210.437 cv
19.859 210.516 19.84 210.57 19.813 210.602 cv
19.781 210.637 19.746 210.652 19.703 210.648 cv
19.656 210.648 19.602 210.633 19.543 210.605 cv
18.492 210.129 17.422 209.77 16.324 209.523 cv
15.227 209.281 14.117 209.16 13 209.156 cv
11.891 209.16 10.785 209.281 9.684 209.523 cv
8.586 209.77 7.516 210.137 6.469 210.621 cv
6.426 210.645 6.383 210.652 6.336 210.645 cv
6.297 210.645 6.262 210.621 6.234 210.574 cv
6.211 210.535 6.191 210.477 6.172 210.402 cv
6.16 210.332 6.152 210.234 6.148 210.113 cv
6.152 210.004 6.156 209.914 6.16 209.84 cv
6.172 209.77 6.184 209.711 6.195 209.664 cv
6.215 209.621 6.23 209.59 6.242 209.566 cv
6.262 209.551 6.277 209.535 6.297 209.52 cv
7.363 208.988 8.461 208.566 9.582 208.262 cv
10.711 207.957 11.855 207.805 13.023 207.805 cv
cp
f
292.16 536.301 mo
292.156 536.406 292.141 536.496 292.105 536.566 cv
292.07 536.645 292.023 536.703 291.969 536.746 cv
291.91 536.797 291.848 536.832 291.781 536.848 cv
291.707 536.871 291.637 536.879 291.574 536.879 cv
291.129 536.879 li
290.988 536.879 290.867 536.867 290.762 536.836 cv
290.656 536.812 290.559 536.758 290.465 536.68 cv
290.371 536.605 290.277 536.504 290.184 536.371 cv
290.09 536.242 289.988 536.078 289.883 535.875 cv
286.809 530.137 li
286.645 529.844 286.48 529.535 286.32 529.207 cv
286.152 528.887 286 528.57 285.863 528.262 cv
285.848 528.262 li
285.855 528.637 285.863 529.02 285.871 529.406 cv
285.875 529.797 285.875 530.184 285.879 530.566 cv
285.879 536.652 li
285.875 536.691 285.863 536.727 285.844 536.758 cv
285.82 536.793 285.785 536.82 285.734 536.836 cv
285.68 536.855 285.609 536.867 285.527 536.883 cv
285.441 536.895 285.336 536.902 285.207 536.902 cv
285.07 536.902 284.961 536.895 284.879 536.883 cv
284.793 536.867 284.727 536.855 284.68 536.836 cv
284.629 536.82 284.594 536.793 284.57 536.758 cv
284.547 536.727 284.535 536.691 284.539 536.652 cv
284.539 527.348 li
284.535 527.141 284.594 526.992 284.715 526.902 cv
284.832 526.816 284.961 526.773 285.102 526.77 cv
285.762 526.77 li
285.914 526.773 286.047 526.785 286.152 526.809 cv
286.254 526.836 286.348 526.879 286.434 526.937 cv
286.516 527 286.594 527.082 286.676 527.187 cv
286.75 527.297 286.832 527.434 286.918 527.59 cv
289.285 532.016 li
289.43 532.289 289.57 532.555 289.707 532.809 cv
289.84 533.066 289.969 533.32 290.098 533.566 cv
290.219 533.82 290.344 534.066 290.469 534.305 cv
290.59 534.547 290.711 534.789 290.836 535.031 cv
290.844 535.031 li
290.832 534.625 290.824 534.195 290.824 533.75 cv
290.816 533.305 290.816 532.879 290.82 532.469 cv
290.82 526.996 li
290.816 526.961 290.828 526.926 290.852 526.895 cv
290.875 526.863 290.91 526.836 290.965 526.812 cv
291.012 526.789 291.082 526.773 291.168 526.762 cv
291.254 526.754 291.363 526.75 291.504 526.746 cv
291.621 526.75 291.727 526.754 291.816 526.762 cv
291.902 526.773 291.969 526.789 292.02 526.812 cv
292.066 526.836 292.102 526.863 292.125 526.895 cv
292.145 526.926 292.156 526.961 292.16 526.996 cv
cp
f
300.711 536.66 mo
300.707 536.707 300.699 536.742 300.684 536.766 cv
300.664 536.797 300.629 536.82 300.586 536.84 cv
300.539 536.859 300.48 536.871 300.406 536.887 cv
300.328 536.895 300.234 536.902 300.129 536.902 cv
300.004 536.902 299.906 536.895 299.836 536.887 cv
299.758 536.871 299.699 536.859 299.656 536.84 cv
299.609 536.82 299.578 536.797 299.566 536.766 cv
299.547 536.742 299.539 536.707 299.543 536.66 cv
299.543 535.734 li
299.141 536.18 298.746 536.5 298.359 536.699 cv
297.965 536.902 297.57 537 297.176 537.004 cv
296.703 537 296.309 536.926 295.992 536.77 cv
295.672 536.617 295.414 536.406 295.219 536.137 cv
295.016 535.871 294.875 535.559 294.793 535.199 cv
294.703 534.844 294.66 534.41 294.664 533.902 cv
294.664 529.648 li
294.66 529.609 294.668 529.574 294.691 529.543 cv
294.707 529.516 294.742 529.492 294.797 529.465 cv
294.844 529.445 294.914 529.43 295 529.418 cv
295.082 529.414 295.184 529.41 295.313 529.406 cv
295.434 529.41 295.539 529.414 295.625 529.418 cv
295.707 529.43 295.773 529.445 295.82 529.465 cv
295.867 529.492 295.902 529.516 295.926 529.543 cv
295.945 529.574 295.953 529.609 295.957 529.648 cv
295.957 533.73 li
295.953 534.145 295.984 534.473 296.047 534.719 cv
296.105 534.965 296.195 535.176 296.32 535.348 cv
296.438 535.527 296.594 535.66 296.785 535.754 cv
296.969 535.852 297.188 535.902 297.438 535.898 cv
297.758 535.902 298.078 535.785 298.402 535.555 cv
298.719 535.328 299.059 534.992 299.418 534.547 cv
299.418 529.648 li
299.418 529.609 299.426 529.574 299.445 529.543 cv
299.461 529.516 299.496 529.492 299.551 529.465 cv
299.602 529.445 299.668 529.43 299.75 529.418 cv
299.828 529.414 299.934 529.41 300.066 529.406 cv
300.188 529.41 300.293 529.414 300.379 529.418 cv
300.461 529.43 300.523 529.445 300.57 529.465 cv
300.613 529.492 300.648 529.516 300.676 529.543 cv
300.695 529.574 300.707 529.609 300.711 529.648 cv
cp
f
313.488 536.66 mo
313.484 536.707 313.477 536.742 313.457 536.766 cv
313.434 536.797 313.398 536.82 313.355 536.84 cv
313.305 536.859 313.238 536.871 313.16 536.887 cv
313.074 536.895 312.973 536.902 312.848 536.902 cv
312.715 536.902 312.605 536.895 312.527 536.887 cv
312.441 536.871 312.375 536.859 312.328 536.84 cv
312.273 536.82 312.238 536.797 312.223 536.766 cv
312.199 536.742 312.191 536.707 312.191 536.66 cv
312.191 532.398 li
312.191 532.105 312.164 531.836 312.113 531.59 cv
312.059 531.348 311.977 531.137 311.863 530.957 cv
311.75 530.781 311.605 530.645 311.43 530.551 cv
311.25 530.457 311.039 530.41 310.805 530.41 cv
310.508 530.41 310.211 530.527 309.914 530.754 cv
309.609 530.988 309.281 531.32 308.926 531.758 cv
308.926 536.66 li
308.922 536.707 308.91 536.742 308.895 536.766 cv
308.871 536.797 308.84 536.82 308.793 536.84 cv
308.742 536.859 308.676 536.871 308.594 536.887 cv
308.508 536.895 308.402 536.902 308.281 536.902 cv
308.16 536.902 308.059 536.895 307.973 536.887 cv
307.887 536.871 307.816 536.859 307.77 536.84 cv
307.715 536.82 307.684 536.797 307.668 536.766 cv
307.648 536.742 307.637 536.707 307.641 536.66 cv
307.641 532.398 li
307.637 532.105 307.609 531.836 307.555 531.59 cv
307.496 531.348 307.41 531.137 307.297 530.957 cv
307.184 530.781 307.039 530.645 306.867 530.551 cv
306.688 530.457 306.48 530.41 306.246 530.41 cv
305.945 530.41 305.648 530.527 305.348 530.754 cv
305.047 530.988 304.719 531.32 304.367 531.758 cv
304.367 536.66 li
304.363 536.707 304.352 536.742 304.336 536.766 cv
304.313 536.797 304.281 536.82 304.234 536.84 cv
304.188 536.859 304.121 536.871 304.043 536.887 cv
303.957 536.895 303.852 536.902 303.723 536.902 cv
303.594 536.902 303.488 536.895 303.41 536.887 cv
303.324 536.871 303.258 536.859 303.211 536.84 cv
303.156 536.82 303.125 536.797 303.109 536.766 cv
303.09 536.742 303.078 536.707 303.082 536.66 cv
303.082 529.648 li
303.078 529.609 303.086 529.574 303.105 529.543 cv
303.117 529.516 303.148 529.492 303.199 529.465 cv
303.242 529.445 303.305 529.43 303.379 529.418 cv
303.449 529.414 303.543 529.41 303.668 529.406 cv
303.777 529.41 303.875 529.414 303.953 529.418 cv
304.027 529.43 304.086 529.445 304.129 529.465 cv
304.168 529.492 304.195 529.516 304.215 529.543 cv
304.23 529.574 304.238 529.609 304.242 529.648 cv
304.242 530.574 li
304.633 530.133 305.016 529.812 305.391 529.605 cv
305.758 529.402 306.137 529.297 306.52 529.297 cv
306.809 529.297 307.066 529.332 307.301 529.398 cv
307.527 529.469 307.734 529.562 307.914 529.684 cv
308.09 529.805 308.238 529.949 308.367 530.117 cv
308.488 530.289 308.594 530.48 308.68 530.684 cv
308.91 530.434 309.133 530.219 309.344 530.039 cv
309.555 529.867 309.758 529.723 309.953 529.609 cv
310.148 529.504 310.336 529.426 310.52 529.371 cv
310.703 529.324 310.891 529.297 311.078 529.297 cv
311.531 529.297 311.91 529.379 312.215 529.535 cv
312.52 529.699 312.766 529.91 312.961 530.172 cv
313.148 530.437 313.285 530.746 313.367 531.102 cv
313.445 531.457 313.484 531.832 313.488 532.227 cv
cp
f
322.285 533.059 mo
322.281 533.668 322.215 534.219 322.086 534.703 cv
321.949 535.191 321.754 535.605 321.5 535.945 cv
321.242 536.289 320.926 536.551 320.555 536.73 cv
320.18 536.914 319.754 537 319.27 537.004 cv
319.043 537 318.836 536.98 318.648 536.937 cv
318.461 536.891 318.273 536.82 318.094 536.723 cv
317.906 536.625 317.727 536.5 317.547 536.348 cv
317.363 536.199 317.172 536.02 316.973 535.805 cv
316.973 536.66 li
316.973 536.707 316.961 536.742 316.941 536.77 cv
316.918 536.805 316.883 536.828 316.84 536.844 cv
316.789 536.859 316.73 536.871 316.664 536.887 cv
316.59 536.895 316.5 536.902 316.395 536.902 cv
316.285 536.902 316.199 536.895 316.129 536.887 cv
316.055 536.871 315.992 536.859 315.949 536.844 cv
315.898 536.828 315.867 536.805 315.855 536.77 cv
315.836 536.742 315.828 536.707 315.832 536.66 cv
315.832 526.25 li
315.828 526.211 315.84 526.176 315.859 526.141 cv
315.875 526.113 315.906 526.086 315.961 526.062 cv
316.008 526.043 316.074 526.027 316.16 526.016 cv
316.238 526.008 316.344 526.004 316.473 526 cv
316.602 526.004 316.707 526.008 316.793 526.016 cv
316.871 526.027 316.938 526.043 316.984 526.062 cv
317.031 526.086 317.063 526.113 317.086 526.141 cv
317.102 526.176 317.113 526.211 317.117 526.25 cv
317.117 530.449 li
317.324 530.238 317.527 530.059 317.723 529.914 cv
317.918 529.77 318.105 529.652 318.293 529.559 cv
318.477 529.473 318.664 529.406 318.855 529.359 cv
319.039 529.32 319.238 529.297 319.449 529.297 cv
319.953 529.297 320.387 529.398 320.754 529.602 cv
321.113 529.805 321.406 530.078 321.633 530.414 cv
321.855 530.758 322.023 531.156 322.129 531.613 cv
322.23 532.07 322.281 532.551 322.285 533.059 cv
cp
320.953 533.207 mo
320.949 532.852 320.922 532.504 320.871 532.164 cv
320.813 531.828 320.719 531.531 320.582 531.27 cv
320.445 531.012 320.266 530.801 320.043 530.641 cv
319.816 530.484 319.535 530.406 319.203 530.402 cv
319.035 530.406 318.871 530.43 318.711 530.473 cv
318.547 530.523 318.383 530.602 318.215 530.707 cv
318.047 530.82 317.871 530.961 317.695 531.129 cv
317.512 531.305 317.32 531.52 317.117 531.773 cv
317.117 534.57 li
317.473 535.004 317.813 535.336 318.137 535.559 cv
318.461 535.789 318.797 535.902 319.148 535.898 cv
319.469 535.902 319.746 535.824 319.98 535.664 cv
320.207 535.512 320.395 535.305 320.539 535.043 cv
320.684 534.789 320.789 534.5 320.855 534.18 cv
320.918 533.863 320.949 533.539 320.953 533.207 cv
cp
f
330.195 532.852 mo
330.191 533.055 330.141 533.195 330.043 533.281 cv
329.938 533.367 329.82 533.41 329.695 533.41 cv
325.078 533.41 li
325.074 533.801 325.113 534.152 325.195 534.465 cv
325.27 534.777 325.402 535.047 325.586 535.266 cv
325.766 535.492 326 535.664 326.297 535.781 cv
326.586 535.906 326.945 535.965 327.371 535.961 cv
327.703 535.965 328 535.937 328.262 535.879 cv
328.523 535.828 328.75 535.766 328.941 535.695 cv
329.129 535.629 329.285 535.57 329.41 535.512 cv
329.531 535.461 329.625 535.434 329.688 535.43 cv
329.723 535.434 329.754 535.441 329.785 535.457 cv
329.813 535.477 329.836 535.504 329.855 535.539 cv
329.867 535.578 329.879 535.629 329.891 535.691 cv
329.895 535.758 329.898 535.836 329.902 535.93 cv
329.898 536 329.895 536.059 329.895 536.105 cv
329.887 536.152 329.883 536.195 329.875 536.234 cv
329.867 536.273 329.852 536.309 329.836 536.34 cv
329.813 536.371 329.789 536.402 329.766 536.43 cv
329.734 536.461 329.652 536.508 329.512 536.57 cv
329.371 536.637 329.188 536.699 328.965 536.762 cv
328.738 536.824 328.48 536.879 328.188 536.93 cv
327.895 536.977 327.582 537 327.25 537.004 cv
326.672 537 326.164 536.922 325.734 536.762 cv
325.297 536.602 324.934 536.363 324.641 536.047 cv
324.34 535.73 324.117 535.336 323.969 534.855 cv
323.82 534.379 323.746 533.82 323.746 533.184 cv
323.746 532.586 323.82 532.047 323.977 531.562 cv
324.129 531.086 324.355 530.676 324.652 530.34 cv
324.945 530.004 325.301 529.746 325.715 529.566 cv
326.129 529.387 326.594 529.297 327.109 529.297 cv
327.66 529.297 328.129 529.387 328.516 529.562 cv
328.902 529.742 329.219 529.98 329.473 530.277 cv
329.719 530.578 329.902 530.93 330.02 531.328 cv
330.133 531.734 330.191 532.164 330.195 532.617 cv
cp
328.902 532.469 mo
328.918 531.793 328.766 531.262 328.449 530.879 cv
328.133 530.496 327.664 530.305 327.047 530.301 cv
326.723 530.305 326.441 530.363 326.203 530.48 cv
325.961 530.602 325.762 530.762 325.602 530.957 cv
325.438 531.156 325.313 531.387 325.227 531.648 cv
325.137 531.91 325.086 532.184 325.078 532.469 cv
cp
f
336.262 530.105 mo
336.258 530.223 336.258 530.32 336.254 530.395 cv
336.246 530.477 336.234 530.539 336.223 530.578 cv
336.203 530.625 336.184 530.656 336.164 530.68 cv
336.137 530.703 336.105 530.715 336.066 530.715 cv
336.023 530.715 335.973 530.703 335.914 530.68 cv
335.852 530.656 335.781 530.633 335.711 530.609 cv
335.633 530.586 335.551 530.566 335.457 530.543 cv
335.363 530.527 335.262 530.516 335.152 530.512 cv
335.02 530.516 334.891 530.543 334.77 530.59 cv
334.645 530.645 334.516 530.73 334.379 530.848 cv
334.238 530.973 334.094 531.129 333.945 531.324 cv
333.793 531.52 333.625 531.762 333.445 532.047 cv
333.445 536.66 li
333.441 536.707 333.43 536.742 333.414 536.766 cv
333.391 536.797 333.359 536.82 333.313 536.84 cv
333.266 536.859 333.199 536.871 333.121 536.887 cv
333.035 536.895 332.93 536.902 332.801 536.902 cv
332.672 536.902 332.566 536.895 332.488 536.887 cv
332.402 536.871 332.336 536.859 332.289 536.84 cv
332.234 536.82 332.203 536.797 332.188 536.766 cv
332.168 536.742 332.156 536.707 332.16 536.66 cv
332.16 529.648 li
332.156 529.609 332.164 529.574 332.184 529.543 cv
332.195 529.516 332.227 529.492 332.277 529.465 cv
332.32 529.445 332.383 529.43 332.457 529.418 cv
332.527 529.414 332.621 529.41 332.746 529.406 cv
332.855 529.41 332.953 529.414 333.031 529.418 cv
333.105 529.43 333.164 529.445 333.207 529.465 cv
333.246 529.492 333.273 529.516 333.293 529.543 cv
333.309 529.574 333.316 529.609 333.32 529.648 cv
333.32 530.668 li
333.508 530.387 333.691 530.16 333.863 529.984 cv
334.031 529.809 334.191 529.668 334.344 529.566 cv
334.492 529.465 334.641 529.395 334.789 529.355 cv
334.938 529.316 335.086 529.297 335.238 529.297 cv
335.305 529.297 335.383 529.301 335.469 529.309 cv
335.555 529.316 335.645 529.332 335.738 529.352 cv
335.832 529.375 335.914 529.398 335.992 529.422 cv
336.063 529.449 336.117 529.477 336.152 529.5 cv
336.18 529.531 336.199 529.555 336.215 529.574 cv
336.223 529.602 336.234 529.633 336.242 529.664 cv
336.25 529.703 336.254 529.754 336.258 529.824 cv
336.258 529.895 336.258 529.988 336.262 530.105 cv
cp
f
348.02 533.074 mo
348.016 533.652 347.941 534.18 347.793 534.656 cv
347.641 535.141 347.414 535.555 347.117 535.898 cv
346.816 536.25 346.441 536.52 345.996 536.711 cv
345.543 536.906 345.023 537 344.434 537.004 cv
343.855 537 343.352 536.918 342.926 536.746 cv
342.496 536.578 342.141 536.328 341.855 536 cv
341.566 535.672 341.352 535.277 341.215 534.809 cv
341.074 534.344 341.008 533.812 341.008 533.215 cv
341.008 532.648 341.078 532.121 341.227 531.641 cv
341.371 531.16 341.598 530.746 341.898 530.395 cv
342.195 530.047 342.566 529.777 343.016 529.586 cv
343.461 529.395 343.984 529.297 344.582 529.297 cv
345.16 529.297 345.66 529.383 346.09 529.555 cv
346.516 529.727 346.875 529.977 347.16 530.305 cv
347.445 530.633 347.66 531.031 347.805 531.496 cv
347.945 531.965 348.016 532.492 348.02 533.074 cv
cp
346.688 533.16 mo
346.684 532.785 346.648 532.426 346.582 532.086 cv
346.508 531.75 346.391 531.457 346.23 531.199 cv
346.066 530.949 345.848 530.746 345.57 530.594 cv
345.289 530.449 344.941 530.375 344.531 530.371 cv
344.145 530.375 343.816 530.441 343.543 530.574 cv
343.266 530.711 343.039 530.902 342.863 531.148 cv
342.684 531.395 342.551 531.687 342.469 532.023 cv
342.379 532.363 342.336 532.73 342.34 533.129 cv
342.336 533.516 342.371 533.879 342.445 534.215 cv
342.512 534.555 342.629 534.848 342.797 535.098 cv
342.961 535.352 343.184 535.555 343.461 535.699 cv
343.738 535.852 344.086 535.926 344.5 535.922 cv
344.875 535.926 345.203 535.855 345.484 535.719 cv
345.762 535.586 345.988 535.398 346.168 535.148 cv
346.344 534.906 346.473 534.613 346.559 534.277 cv
346.641 533.941 346.684 533.57 346.688 533.16 cv
cp
f
353.75 526.762 mo
353.746 526.863 353.742 526.941 353.734 527 cv
353.723 527.062 353.711 527.113 353.699 527.145 cv
353.684 527.184 353.668 527.207 353.648 527.219 cv
353.625 527.234 353.598 527.242 353.57 527.238 cv
353.531 527.242 353.484 527.23 353.434 527.203 cv
353.375 527.184 353.309 527.156 353.234 527.125 cv
353.152 527.098 353.063 527.07 352.957 527.047 cv
352.848 527.023 352.723 527.012 352.59 527.012 cv
352.395 527.012 352.23 527.043 352.098 527.105 cv
351.957 527.168 351.848 527.266 351.77 527.398 cv
351.684 527.531 351.625 527.703 351.59 527.914 cv
351.551 528.125 351.531 528.383 351.535 528.68 cv
351.535 529.445 li
353.102 529.445 li
353.141 529.449 353.176 529.457 353.207 529.473 cv
353.234 529.492 353.262 529.523 353.285 529.566 cv
353.309 529.613 353.324 529.672 353.34 529.734 cv
353.348 529.805 353.355 529.887 353.359 529.98 cv
353.355 530.172 353.332 530.305 353.289 530.387 cv
353.238 530.473 353.176 530.516 353.102 530.512 cv
351.535 530.512 li
351.535 536.66 li
351.531 536.707 351.523 536.742 351.504 536.766 cv
351.48 536.797 351.445 536.82 351.398 536.84 cv
351.348 536.859 351.281 536.871 351.199 536.887 cv
351.113 536.895 351.008 536.902 350.891 536.902 cv
350.762 536.902 350.66 536.895 350.578 536.887 cv
350.492 536.871 350.426 536.859 350.379 536.84 cv
350.328 536.82 350.293 536.797 350.273 536.766 cv
350.25 536.742 350.238 536.707 350.242 536.66 cv
350.242 530.512 li
349.254 530.512 li
349.168 530.516 349.105 530.473 349.066 530.387 cv
349.023 530.305 349 530.172 349.004 529.98 cv
349 529.887 349.008 529.805 349.02 529.734 cv
349.027 529.672 349.043 529.613 349.066 529.566 cv
349.086 529.523 349.109 529.492 349.145 529.473 cv
349.172 529.457 349.211 529.449 349.254 529.445 cv
350.242 529.445 li
350.242 528.719 li
350.238 528.234 350.285 527.816 350.379 527.461 cv
350.469 527.113 350.605 526.824 350.793 526.602 cv
350.977 526.379 351.211 526.215 351.5 526.105 cv
351.781 526 352.117 525.945 352.504 525.945 cv
352.68 525.945 352.855 525.965 353.031 525.996 cv
353.199 526.035 353.332 526.07 353.43 526.105 cv
353.52 526.148 353.582 526.184 353.617 526.211 cv
353.645 526.246 353.672 526.285 353.695 526.332 cv
353.715 526.383 353.727 526.445 353.738 526.512 cv
353.742 526.586 353.746 526.668 353.75 526.762 cv
cp
f
363.949 534.027 mo
363.945 534.5 363.859 534.922 363.688 535.289 cv
363.512 535.664 363.27 535.977 362.961 536.23 cv
362.652 536.488 362.289 536.68 361.871 536.809 cv
361.449 536.937 361 537 360.52 537.004 cv
360.18 537 359.863 536.973 359.578 536.918 cv
359.289 536.859 359.035 536.793 358.809 536.707 cv
358.582 536.629 358.391 536.543 358.238 536.449 cv
358.082 536.363 357.977 536.285 357.918 536.223 cv
357.859 536.16 357.816 536.082 357.789 535.988 cv
357.758 535.895 357.742 535.766 357.746 535.602 cv
357.742 535.488 357.746 535.395 357.762 535.316 cv
357.77 535.242 357.785 535.18 357.809 535.133 cv
357.824 535.086 357.852 535.055 357.887 535.035 cv
357.914 535.02 357.949 535.012 357.992 535.008 cv
358.063 535.012 358.164 535.055 358.301 535.141 cv
358.43 535.23 358.602 535.328 358.813 535.43 cv
359.02 535.539 359.27 535.637 359.563 535.723 cv
359.855 535.816 360.195 535.859 360.582 535.859 cv
360.871 535.859 361.137 535.82 361.379 535.742 cv
361.617 535.664 361.824 535.555 362.004 535.41 cv
362.176 535.27 362.313 535.094 362.406 534.883 cv
362.5 534.676 362.547 534.441 362.547 534.176 cv
362.547 533.895 362.48 533.648 362.352 533.441 cv
362.219 533.242 362.047 533.066 361.836 532.91 cv
361.621 532.762 361.379 532.621 361.105 532.488 cv
360.832 532.363 360.551 532.23 360.27 532.098 cv
359.98 531.965 359.703 531.82 359.434 531.656 cv
359.164 531.5 358.922 531.309 358.711 531.09 cv
358.492 530.871 358.32 530.617 358.191 530.32 cv
358.055 530.031 357.988 529.68 357.992 529.266 cv
357.988 528.848 358.066 528.473 358.223 528.141 cv
358.375 527.812 358.586 527.535 358.863 527.309 cv
359.133 527.09 359.457 526.918 359.836 526.801 cv
360.211 526.684 360.621 526.625 361.059 526.625 cv
361.277 526.625 361.5 526.645 361.73 526.684 cv
361.953 526.723 362.164 526.773 362.367 526.836 cv
362.563 526.902 362.742 526.977 362.902 527.055 cv
363.055 527.137 363.156 527.203 363.211 527.25 cv
363.258 527.305 363.293 527.344 363.309 527.367 cv
363.324 527.398 363.336 527.434 363.348 527.477 cv
363.355 527.523 363.363 527.578 363.371 527.637 cv
363.375 527.703 363.379 527.781 363.379 527.879 cv
363.379 527.973 363.375 528.059 363.367 528.129 cv
363.359 528.207 363.348 528.266 363.332 528.312 cv
363.316 528.359 363.293 528.395 363.266 528.418 cv
363.234 528.441 363.203 528.453 363.168 528.453 cv
363.109 528.453 363.02 528.418 362.898 528.348 cv
362.773 528.277 362.621 528.195 362.449 528.102 cv
362.27 528.012 362.063 527.93 361.824 527.852 cv
361.578 527.777 361.309 527.738 361.012 527.738 cv
360.73 527.738 360.484 527.777 360.277 527.852 cv
360.066 527.93 359.895 528.031 359.762 528.152 cv
359.625 528.277 359.523 528.422 359.457 528.594 cv
359.391 528.766 359.359 528.949 359.359 529.141 cv
359.359 529.426 359.422 529.668 359.551 529.867 cv
359.68 530.07 359.852 530.25 360.07 530.402 cv
360.281 530.562 360.527 530.703 360.805 530.832 cv
361.078 530.965 361.359 531.098 361.648 531.227 cv
361.934 531.359 362.215 531.504 362.488 531.66 cv
362.762 531.82 363.008 532.008 363.227 532.223 cv
363.441 532.441 363.613 532.695 363.75 532.988 cv
363.879 533.281 363.945 533.629 363.949 534.027 cv
cp
f
371.715 536.66 mo
371.711 536.707 371.703 536.742 371.688 536.766 cv
371.668 536.797 371.633 536.82 371.59 536.84 cv
371.543 536.859 371.484 536.871 371.41 536.887 cv
371.332 536.895 371.238 536.902 371.133 536.902 cv
371.008 536.902 370.91 536.895 370.84 536.887 cv
370.762 536.871 370.703 536.859 370.66 536.84 cv
370.613 536.82 370.582 536.797 370.57 536.766 cv
370.551 536.742 370.543 536.707 370.547 536.66 cv
370.547 535.734 li
370.145 536.18 369.75 536.5 369.363 536.699 cv
368.969 536.902 368.574 537 368.18 537.004 cv
367.707 537 367.313 536.926 366.996 536.77 cv
366.676 536.617 366.418 536.406 366.223 536.137 cv
366.02 535.871 365.879 535.559 365.797 535.199 cv
365.707 534.844 365.664 534.41 365.668 533.902 cv
365.668 529.648 li
365.664 529.609 365.672 529.574 365.695 529.543 cv
365.711 529.516 365.746 529.492 365.801 529.465 cv
365.848 529.445 365.918 529.43 366.004 529.418 cv
366.086 529.414 366.188 529.41 366.316 529.406 cv
366.438 529.41 366.543 529.414 366.629 529.418 cv
366.711 529.43 366.777 529.445 366.824 529.465 cv
366.871 529.492 366.906 529.516 366.93 529.543 cv
366.949 529.574 366.957 529.609 366.961 529.648 cv
366.961 533.73 li
366.957 534.145 366.988 534.473 367.051 534.719 cv
367.109 534.965 367.199 535.176 367.324 535.348 cv
367.441 535.527 367.598 535.66 367.789 535.754 cv
367.973 535.852 368.191 535.902 368.441 535.898 cv
368.762 535.902 369.082 535.785 369.406 535.555 cv
369.723 535.328 370.063 534.992 370.422 534.547 cv
370.422 529.648 li
370.422 529.609 370.43 529.574 370.449 529.543 cv
370.465 529.516 370.5 529.492 370.555 529.465 cv
370.605 529.445 370.672 529.43 370.754 529.418 cv
370.832 529.414 370.938 529.41 371.07 529.406 cv
371.191 529.41 371.297 529.414 371.383 529.418 cv
371.465 529.43 371.527 529.445 371.574 529.465 cv
371.617 529.492 371.652 529.516 371.68 529.543 cv
371.699 529.574 371.711 529.609 371.715 529.648 cv
cp
f
380.57 533.059 mo
380.566 533.668 380.5 534.219 380.371 534.703 cv
380.234 535.191 380.039 535.605 379.785 535.945 cv
379.527 536.289 379.211 536.551 378.84 536.73 cv
378.465 536.914 378.039 537 377.555 537.004 cv
377.328 537 377.121 536.98 376.934 536.937 cv
376.746 536.891 376.559 536.82 376.379 536.723 cv
376.191 536.625 376.012 536.5 375.832 536.348 cv
375.648 536.199 375.457 536.02 375.258 535.805 cv
375.258 536.66 li
375.258 536.707 375.246 536.742 375.227 536.77 cv
375.203 536.805 375.168 536.828 375.125 536.844 cv
375.074 536.859 375.016 536.871 374.949 536.887 cv
374.875 536.895 374.785 536.902 374.68 536.902 cv
374.57 536.902 374.484 536.895 374.414 536.887 cv
374.34 536.871 374.277 536.859 374.234 536.844 cv
374.184 536.828 374.152 536.805 374.141 536.77 cv
374.121 536.742 374.113 536.707 374.117 536.66 cv
374.117 526.25 li
374.113 526.211 374.125 526.176 374.145 526.141 cv
374.16 526.113 374.191 526.086 374.246 526.062 cv
374.293 526.043 374.359 526.027 374.445 526.016 cv
374.523 526.008 374.629 526.004 374.758 526 cv
374.887 526.004 374.992 526.008 375.078 526.016 cv
375.156 526.027 375.223 526.043 375.27 526.062 cv
375.316 526.086 375.348 526.113 375.371 526.141 cv
375.387 526.176 375.398 526.211 375.402 526.25 cv
375.402 530.449 li
375.609 530.238 375.813 530.059 376.008 529.914 cv
376.203 529.77 376.391 529.652 376.578 529.559 cv
376.762 529.473 376.949 529.406 377.141 529.359 cv
377.324 529.32 377.523 529.297 377.734 529.297 cv
378.238 529.297 378.672 529.398 379.039 529.602 cv
379.398 529.805 379.691 530.078 379.918 530.414 cv
380.141 530.758 380.309 531.156 380.414 531.613 cv
380.516 532.07 380.566 532.551 380.57 533.059 cv
cp
379.238 533.207 mo
379.234 532.852 379.207 532.504 379.156 532.164 cv
379.098 531.828 379.004 531.531 378.867 531.27 cv
378.73 531.012 378.551 530.801 378.328 530.641 cv
378.102 530.484 377.82 530.406 377.488 530.402 cv
377.32 530.406 377.156 530.43 376.996 530.473 cv
376.832 530.523 376.668 530.602 376.5 530.707 cv
376.332 530.82 376.156 530.961 375.98 531.129 cv
375.797 531.305 375.605 531.52 375.402 531.773 cv
375.402 534.57 li
375.758 535.004 376.098 535.336 376.422 535.559 cv
376.746 535.789 377.082 535.902 377.434 535.898 cv
377.754 535.902 378.031 535.824 378.266 535.664 cv
378.492 535.512 378.68 535.305 378.824 535.043 cv
378.969 534.789 379.074 534.5 379.141 534.18 cv
379.203 533.863 379.234 533.539 379.238 533.207 cv
cp
f
385.707 532.922 mo
385.707 533.125 385.684 533.262 385.637 533.34 cv
385.59 533.418 385.52 533.457 385.434 533.457 cv
382.176 533.457 li
382.082 533.457 382.016 533.418 381.969 533.336 cv
381.922 533.258 381.898 533.121 381.898 532.922 cv
381.898 532.727 381.922 532.586 381.969 532.508 cv
382.016 532.43 382.082 532.391 382.176 532.391 cv
385.434 532.391 li
385.473 532.391 385.512 532.398 385.547 532.414 cv
385.578 532.43 385.605 532.461 385.633 532.504 cv
385.652 532.551 385.672 532.605 385.688 532.672 cv
385.699 532.742 385.707 532.828 385.707 532.922 cv
cp
f
388.961 536.652 mo
388.957 536.695 388.949 536.73 388.93 536.762 cv
388.906 536.793 388.867 536.82 388.82 536.836 cv
388.766 536.855 388.699 536.867 388.613 536.883 cv
388.527 536.895 388.418 536.902 388.293 536.902 cv
388.164 536.902 388.059 536.895 387.973 536.883 cv
387.883 536.867 387.813 536.855 387.762 536.836 cv
387.707 536.82 387.672 536.793 387.652 536.762 cv
387.629 536.73 387.617 536.695 387.621 536.652 cv
387.621 526.973 li
387.617 526.934 387.629 526.898 387.656 526.863 cv
387.676 526.836 387.715 526.809 387.773 526.789 cv
387.824 526.773 387.895 526.758 387.984 526.742 cv
388.066 526.73 388.168 526.727 388.293 526.723 cv
388.418 526.727 388.527 526.73 388.613 526.742 cv
388.699 526.758 388.766 526.773 388.82 526.789 cv
388.867 526.809 388.906 526.836 388.93 526.863 cv
388.949 526.898 388.957 526.934 388.961 526.973 cv
cp
f
401.949 536.66 mo
401.945 536.707 401.938 536.742 401.918 536.766 cv
401.895 536.797 401.859 536.82 401.816 536.84 cv
401.766 536.859 401.699 536.871 401.621 536.887 cv
401.535 536.895 401.434 536.902 401.309 536.902 cv
401.176 536.902 401.066 536.895 400.988 536.887 cv
400.902 536.871 400.836 536.859 400.789 536.84 cv
400.734 536.82 400.699 536.797 400.684 536.766 cv
400.66 536.742 400.652 536.707 400.652 536.66 cv
400.652 532.398 li
400.652 532.105 400.625 531.836 400.574 531.59 cv
400.52 531.348 400.438 531.137 400.324 530.957 cv
400.211 530.781 400.066 530.645 399.891 530.551 cv
399.711 530.457 399.5 530.41 399.266 530.41 cv
398.969 530.41 398.672 530.527 398.375 530.754 cv
398.07 530.988 397.742 531.32 397.387 531.758 cv
397.387 536.66 li
397.383 536.707 397.371 536.742 397.355 536.766 cv
397.332 536.797 397.301 536.82 397.254 536.84 cv
397.203 536.859 397.137 536.871 397.055 536.887 cv
396.969 536.895 396.863 536.902 396.742 536.902 cv
396.621 536.902 396.52 536.895 396.434 536.887 cv
396.348 536.871 396.277 536.859 396.23 536.84 cv
396.176 536.82 396.145 536.797 396.129 536.766 cv
396.109 536.742 396.098 536.707 396.102 536.66 cv
396.102 532.398 li
396.098 532.105 396.07 531.836 396.016 531.59 cv
395.957 531.348 395.871 531.137 395.758 530.957 cv
395.645 530.781 395.5 530.645 395.328 530.551 cv
395.148 530.457 394.941 530.41 394.707 530.41 cv
394.406 530.41 394.109 530.527 393.809 530.754 cv
393.508 530.988 393.18 531.32 392.828 531.758 cv
392.828 536.66 li
392.824 536.707 392.813 536.742 392.797 536.766 cv
392.773 536.797 392.742 536.82 392.695 536.84 cv
392.648 536.859 392.582 536.871 392.504 536.887 cv
392.418 536.895 392.313 536.902 392.184 536.902 cv
392.055 536.902 391.949 536.895 391.871 536.887 cv
391.785 536.871 391.719 536.859 391.672 536.84 cv
391.617 536.82 391.586 536.797 391.57 536.766 cv
391.551 536.742 391.539 536.707 391.543 536.66 cv
391.543 529.648 li
391.539 529.609 391.547 529.574 391.566 529.543 cv
391.578 529.516 391.609 529.492 391.66 529.465 cv
391.703 529.445 391.766 529.43 391.84 529.418 cv
391.91 529.414 392.004 529.41 392.129 529.406 cv
392.238 529.41 392.336 529.414 392.414 529.418 cv
392.488 529.43 392.547 529.445 392.59 529.465 cv
392.629 529.492 392.656 529.516 392.676 529.543 cv
392.691 529.574 392.699 529.609 392.703 529.648 cv
392.703 530.574 li
393.094 530.133 393.477 529.812 393.852 529.605 cv
394.219 529.402 394.598 529.297 394.98 529.297 cv
395.27 529.297 395.527 529.332 395.762 529.398 cv
395.988 529.469 396.195 529.562 396.375 529.684 cv
396.551 529.805 396.699 529.949 396.828 530.117 cv
396.949 530.289 397.055 530.48 397.141 530.684 cv
397.371 530.434 397.594 530.219 397.805 530.039 cv
398.016 529.867 398.219 529.723 398.414 529.609 cv
398.609 529.504 398.797 529.426 398.98 529.371 cv
399.164 529.324 399.352 529.297 399.539 529.297 cv
399.992 529.297 400.371 529.379 400.676 529.535 cv
400.98 529.699 401.227 529.91 401.422 530.172 cv
401.609 530.437 401.746 530.746 401.828 531.102 cv
401.906 531.457 401.945 531.832 401.949 532.227 cv
cp
f
409.578 536.668 mo
409.574 536.73 409.555 536.777 409.516 536.809 cv
409.473 536.84 409.414 536.863 409.344 536.879 cv
409.266 536.895 409.16 536.902 409.023 536.902 cv
408.887 536.902 408.777 536.895 408.699 536.879 cv
408.613 536.863 408.555 536.84 408.523 536.809 cv
408.484 536.777 408.469 536.73 408.473 536.668 cv
408.473 535.969 li
408.164 536.297 407.82 536.551 407.445 536.73 cv
407.066 536.914 406.668 537 406.25 537.004 cv
405.875 537 405.543 536.953 405.246 536.859 cv
404.949 536.762 404.695 536.625 404.484 536.441 cv
404.273 536.262 404.109 536.039 403.992 535.773 cv
403.875 535.512 403.816 535.211 403.82 534.867 cv
403.816 534.477 403.895 534.133 404.059 533.84 cv
404.215 533.551 404.449 533.309 404.754 533.117 cv
405.055 532.926 405.422 532.781 405.859 532.684 cv
406.293 532.59 406.785 532.543 407.332 532.539 cv
408.301 532.539 li
408.301 531.992 li
408.297 531.723 408.27 531.484 408.215 531.277 cv
408.156 531.07 408.063 530.898 407.938 530.758 cv
407.805 530.621 407.641 530.516 407.441 530.445 cv
407.234 530.375 406.984 530.34 406.695 530.34 cv
406.375 530.34 406.09 530.379 405.84 530.453 cv
405.582 530.531 405.363 530.613 405.176 530.703 cv
404.988 530.797 404.828 530.883 404.703 530.953 cv
404.57 531.031 404.477 531.066 404.418 531.066 cv
404.375 531.066 404.34 531.059 404.309 531.035 cv
404.277 531.02 404.25 530.988 404.227 530.941 cv
404.203 530.902 404.184 530.848 404.176 530.781 cv
404.16 530.719 404.156 530.648 404.16 530.566 cv
404.156 530.441 404.164 530.336 404.188 530.258 cv
404.203 530.184 404.25 530.113 404.32 530.043 cv
404.391 529.977 404.512 529.898 404.684 529.809 cv
404.855 529.719 405.051 529.637 405.273 529.559 cv
405.496 529.488 405.742 529.426 406.008 529.371 cv
406.273 529.324 406.539 529.297 406.813 529.297 cv
407.313 529.297 407.742 529.355 408.094 529.469 cv
408.445 529.586 408.73 529.754 408.953 529.973 cv
409.168 530.195 409.328 530.469 409.43 530.793 cv
409.527 531.125 409.574 531.508 409.578 531.937 cv
cp
408.301 533.465 mo
407.199 533.465 li
406.844 533.469 406.539 533.5 406.281 533.555 cv
406.02 533.617 405.805 533.703 405.633 533.82 cv
405.461 533.937 405.336 534.078 405.258 534.242 cv
405.176 534.406 405.133 534.594 405.137 534.805 cv
405.133 535.172 405.25 535.465 405.48 535.676 cv
405.711 535.895 406.035 536 406.453 536 cv
406.789 536 407.102 535.914 407.391 535.742 cv
407.68 535.57 407.98 535.309 408.301 534.953 cv
cp
f
417.797 529.965 mo
417.793 530.148 417.77 530.281 417.723 530.359 cv
417.672 530.441 417.609 530.48 417.535 530.48 cv
416.527 530.48 li
416.707 530.668 416.836 530.875 416.91 531.102 cv
416.98 531.328 417.016 531.562 417.02 531.805 cv
417.016 532.211 416.949 532.57 416.824 532.883 cv
416.691 533.195 416.508 533.461 416.266 533.672 cv
416.023 533.891 415.734 534.055 415.406 534.168 cv
415.07 534.285 414.703 534.344 414.301 534.34 cv
414.012 534.344 413.738 534.305 413.484 534.227 cv
413.223 534.152 413.027 534.059 412.891 533.941 cv
412.797 534.039 412.719 534.145 412.66 534.262 cv
412.598 534.383 412.566 534.52 412.57 534.672 cv
412.566 534.855 412.652 535.008 412.824 535.125 cv
412.992 535.25 413.215 535.312 413.496 535.32 cv
415.328 535.398 li
415.676 535.41 415.992 535.457 416.285 535.543 cv
416.574 535.629 416.828 535.754 417.043 535.91 cv
417.254 536.07 417.422 536.262 417.543 536.492 cv
417.66 536.727 417.719 536.996 417.723 537.301 cv
417.719 537.621 417.652 537.926 417.52 538.219 cv
417.383 538.508 417.176 538.762 416.898 538.984 cv
416.617 539.203 416.262 539.379 415.832 539.508 cv
415.402 539.633 414.895 539.695 414.309 539.699 cv
413.738 539.695 413.254 539.648 412.859 539.555 cv
412.461 539.457 412.137 539.324 411.883 539.16 cv
411.629 538.992 411.445 538.797 411.332 538.566 cv
411.215 538.332 411.156 538.078 411.16 537.812 cv
411.156 537.641 411.176 537.477 411.223 537.316 cv
411.262 537.152 411.324 537 411.41 536.855 cv
411.492 536.711 411.602 536.574 411.73 536.437 cv
411.855 536.309 412 536.176 412.172 536.047 cv
411.914 535.918 411.727 535.754 411.605 535.555 cv
411.484 535.359 411.426 535.148 411.426 534.914 cv
411.426 534.602 411.488 534.316 411.617 534.066 cv
411.746 533.816 411.906 533.594 412.102 533.395 cv
411.938 533.203 411.813 532.988 411.719 532.746 cv
411.625 532.508 411.578 532.215 411.578 531.867 cv
411.578 531.473 411.645 531.113 411.781 530.793 cv
411.914 530.477 412.102 530.211 412.344 529.992 cv
412.582 529.777 412.867 529.609 413.203 529.488 cv
413.535 529.375 413.902 529.316 414.301 529.312 cv
414.512 529.316 414.711 529.328 414.895 529.348 cv
415.078 529.375 415.25 529.406 415.414 529.445 cv
417.535 529.445 li
417.621 529.449 417.688 529.492 417.73 529.574 cv
417.773 529.664 417.793 529.793 417.797 529.965 cv
cp
415.789 531.812 mo
415.785 531.34 415.652 530.969 415.395 530.695 cv
415.129 530.43 414.758 530.293 414.277 530.293 cv
414.023 530.293 413.805 530.336 413.625 530.418 cv
413.438 530.504 413.285 530.617 413.164 530.762 cv
413.043 530.91 412.953 531.078 412.895 531.266 cv
412.832 531.453 412.801 531.652 412.805 531.859 cv
412.801 532.324 412.934 532.687 413.195 532.953 cv
413.457 533.219 413.824 533.352 414.301 533.348 cv
414.551 533.352 414.77 533.312 414.961 533.227 cv
415.145 533.148 415.301 533.035 415.426 532.895 cv
415.547 532.754 415.637 532.59 415.699 532.398 cv
415.754 532.215 415.785 532.02 415.789 531.812 cv
cp
416.434 537.371 mo
416.43 537.066 416.305 536.836 416.063 536.672 cv
415.813 536.512 415.48 536.422 415.063 536.41 cv
413.246 536.348 li
413.078 536.48 412.941 536.605 412.84 536.719 cv
412.73 536.836 412.648 536.945 412.586 537.055 cv
412.523 537.16 412.48 537.266 412.457 537.371 cv
412.434 537.473 412.422 537.578 412.422 537.687 cv
412.422 538.023 412.59 538.277 412.934 538.457 cv
413.273 538.629 413.754 538.719 414.371 538.719 cv
414.758 538.719 415.082 538.68 415.348 538.605 cv
415.605 538.527 415.816 538.426 415.98 538.305 cv
416.137 538.176 416.254 538.035 416.328 537.875 cv
416.395 537.715 416.43 537.547 416.434 537.371 cv
cp
f
425.359 532.852 mo
425.355 533.055 425.305 533.195 425.207 533.281 cv
425.102 533.367 424.984 533.41 424.859 533.41 cv
420.242 533.41 li
420.238 533.801 420.277 534.152 420.359 534.465 cv
420.434 534.777 420.566 535.047 420.75 535.266 cv
420.93 535.492 421.164 535.664 421.461 535.781 cv
421.75 535.906 422.109 535.965 422.535 535.961 cv
422.867 535.965 423.164 535.937 423.426 535.879 cv
423.688 535.828 423.914 535.766 424.105 535.695 cv
424.293 535.629 424.449 535.57 424.574 535.512 cv
424.695 535.461 424.789 535.434 424.852 535.43 cv
424.887 535.434 424.918 535.441 424.949 535.457 cv
424.977 535.477 425 535.504 425.02 535.539 cv
425.031 535.578 425.043 535.629 425.055 535.691 cv
425.059 535.758 425.063 535.836 425.066 535.93 cv
425.063 536 425.059 536.059 425.059 536.105 cv
425.051 536.152 425.047 536.195 425.039 536.234 cv
425.031 536.273 425.016 536.309 425 536.34 cv
424.977 536.371 424.953 536.402 424.93 536.43 cv
424.898 536.461 424.816 536.508 424.676 536.57 cv
424.535 536.637 424.352 536.699 424.129 536.762 cv
423.902 536.824 423.645 536.879 423.352 536.93 cv
423.059 536.977 422.746 537 422.414 537.004 cv
421.836 537 421.328 536.922 420.898 536.762 cv
420.461 536.602 420.098 536.363 419.805 536.047 cv
419.504 535.73 419.281 535.336 419.133 534.855 cv
418.984 534.379 418.91 533.82 418.91 533.184 cv
418.91 532.586 418.984 532.047 419.141 531.562 cv
419.293 531.086 419.52 530.676 419.816 530.34 cv
420.109 530.004 420.465 529.746 420.879 529.566 cv
421.293 529.387 421.758 529.297 422.273 529.297 cv
422.824 529.297 423.293 529.387 423.68 529.562 cv
424.066 529.742 424.383 529.98 424.637 530.277 cv
424.883 530.578 425.066 530.93 425.184 531.328 cv
425.297 531.734 425.355 532.164 425.359 532.617 cv
cp
424.066 532.469 mo
424.082 531.793 423.93 531.262 423.613 530.879 cv
423.297 530.496 422.828 530.305 422.211 530.301 cv
421.887 530.305 421.605 530.363 421.367 530.48 cv
421.125 530.602 420.926 530.762 420.766 530.957 cv
420.602 531.156 420.477 531.387 420.391 531.648 cv
420.301 531.91 420.25 532.184 420.242 532.469 cv
cp
f
431.727 534.75 mo
431.723 535.113 431.656 535.434 431.527 535.711 cv
431.395 535.992 431.207 536.227 430.965 536.418 cv
430.719 536.613 430.426 536.758 430.09 536.855 cv
429.75 536.953 429.379 537 428.977 537.004 cv
428.723 537 428.484 536.98 428.262 536.945 cv
428.035 536.902 427.836 536.855 427.656 536.797 cv
427.477 536.738 427.324 536.676 427.199 536.609 cv
427.074 536.547 426.98 536.488 426.926 536.434 cv
426.867 536.383 426.828 536.312 426.805 536.215 cv
426.777 536.125 426.766 535.996 426.766 535.836 cv
426.766 535.738 426.77 535.656 426.781 535.586 cv
426.789 535.52 426.801 535.465 426.82 535.422 cv
426.832 535.383 426.855 535.352 426.883 535.332 cv
426.91 535.316 426.941 535.309 426.98 535.305 cv
427.035 535.309 427.121 535.344 427.234 535.41 cv
427.344 535.484 427.48 535.562 427.648 535.641 cv
427.809 535.727 428 535.801 428.227 535.871 cv
428.445 535.941 428.703 535.977 429 535.977 cv
429.215 535.977 429.414 535.953 429.594 535.906 cv
429.77 535.859 429.922 535.793 430.051 535.699 cv
430.18 535.613 430.281 535.496 430.352 535.352 cv
430.422 535.215 430.457 535.047 430.457 534.852 cv
430.457 534.656 430.406 534.492 430.305 534.355 cv
430.203 534.223 430.066 534.102 429.902 533.996 cv
429.734 533.895 429.551 533.805 429.344 533.719 cv
429.133 533.641 428.918 533.555 428.699 533.465 cv
428.48 533.379 428.266 533.277 428.055 533.164 cv
427.844 533.055 427.652 532.922 427.488 532.758 cv
427.316 532.602 427.184 532.406 427.086 532.18 cv
426.98 531.957 426.93 531.691 426.934 531.379 cv
426.93 531.105 426.984 530.84 427.094 530.586 cv
427.199 530.336 427.359 530.117 427.574 529.926 cv
427.785 529.738 428.051 529.586 428.371 529.469 cv
428.691 529.355 429.063 529.297 429.492 529.297 cv
429.676 529.297 429.863 529.312 430.051 529.344 cv
430.234 529.375 430.402 529.414 430.559 529.461 cv
430.707 529.508 430.836 529.559 430.945 529.613 cv
431.047 529.668 431.129 529.719 431.188 529.758 cv
431.238 529.805 431.273 529.84 431.297 529.867 cv
431.313 529.898 431.328 529.934 431.336 529.969 cv
431.344 530.012 431.352 530.059 431.359 530.113 cv
431.367 530.172 431.371 530.242 431.371 530.324 cv
431.371 530.414 431.367 530.492 431.359 530.555 cv
431.352 530.625 431.336 530.676 431.32 530.715 cv
431.297 530.758 431.277 530.789 431.254 530.805 cv
431.227 530.824 431.195 530.832 431.168 530.832 cv
431.117 530.832 431.051 530.805 430.965 530.746 cv
430.875 530.691 430.762 530.629 430.621 530.562 cv
430.48 530.5 430.313 530.441 430.125 530.379 cv
429.934 530.324 429.719 530.293 429.477 530.293 cv
429.254 530.293 429.063 530.32 428.898 530.367 cv
428.73 530.422 428.594 530.492 428.488 530.578 cv
428.383 530.672 428.301 530.777 428.25 530.902 cv
428.191 531.027 428.164 531.164 428.168 531.309 cv
428.164 531.512 428.215 531.68 428.32 531.816 cv
428.422 531.957 428.559 532.078 428.727 532.18 cv
428.891 532.285 429.082 532.379 429.297 532.461 cv
429.508 532.547 429.723 532.633 429.945 532.719 cv
430.164 532.809 430.383 532.91 430.602 533.016 cv
430.816 533.125 431.008 533.254 431.176 533.41 cv
431.34 533.566 431.473 533.754 431.574 533.973 cv
431.672 534.191 431.723 534.453 431.727 534.75 cv
cp
f
260.688 16.035 mo
260.746 16.227 260.785 16.375 260.805 16.48 cv
260.816 16.594 260.797 16.676 260.742 16.727 cv
260.684 16.781 260.582 16.812 260.438 16.828 cv
260.289 16.84 260.09 16.848 259.84 16.848 cv
259.57 16.848 259.363 16.844 259.219 16.836 cv
259.066 16.828 258.953 16.812 258.879 16.789 cv
258.797 16.766 258.742 16.734 258.715 16.691 cv
258.68 16.652 258.652 16.598 258.637 16.527 cv
257.961 14.5 li
254.172 14.5 li
253.535 16.473 li
253.512 16.547 253.484 16.609 253.453 16.656 cv
253.418 16.707 253.363 16.746 253.289 16.773 cv
253.211 16.801 253.105 16.816 252.969 16.832 cv
252.828 16.84 252.645 16.848 252.426 16.848 cv
252.184 16.848 252 16.84 251.867 16.824 cv
251.73 16.809 251.637 16.773 251.586 16.711 cv
251.531 16.656 251.512 16.57 251.531 16.457 cv
251.543 16.352 251.582 16.207 251.648 16.02 cv
254.758 7.07397 li
254.785 6.98798 254.824 6.91803 254.867 6.85901 cv
254.906 6.80902 254.973 6.76599 255.066 6.73401 cv
255.156 6.70697 255.281 6.69098 255.441 6.67999 cv
255.602 6.67603 255.813 6.672 256.082 6.66803 cv
256.387 6.672 256.633 6.67603 256.813 6.67999 cv
256.992 6.69098 257.133 6.70697 257.238 6.73401 cv
257.336 6.76599 257.41 6.80902 257.457 6.86298 cv
257.5 6.922 257.535 7 257.57 7.09802 cv
cp
256.059 8.64099 mo
256.051 8.64099 li
254.625 12.926 li
257.484 12.926 li
cp
f
268.063 9.578 mo
268.059 9.60498 268.059 9.63702 268.059 9.672 cv
268.055 9.711 268.051 9.75 268.043 9.79303 cv
268.035 9.836 268.023 9.88702 268.012 9.94098 cv
267.996 10 267.98 10.066 267.961 10.137 cv
265.875 16.426 li
265.848 16.516 265.813 16.59 265.77 16.641 cv
265.723 16.699 265.648 16.742 265.551 16.77 cv
265.445 16.801 265.309 16.816 265.137 16.832 cv
264.961 16.84 264.734 16.848 264.457 16.848 cv
264.18 16.848 263.953 16.84 263.781 16.828 cv
263.605 16.812 263.469 16.793 263.371 16.762 cv
263.27 16.734 263.199 16.691 263.156 16.633 cv
263.109 16.582 263.074 16.512 263.051 16.426 cv
260.965 10.137 li
260.934 10.035 260.906 9.94098 260.891 9.85901 cv
260.867 9.77698 260.859 9.71899 260.859 9.67999 cv
260.855 9.64801 260.852 9.61298 260.855 9.578 cv
260.852 9.52698 260.867 9.47998 260.898 9.44098 cv
260.926 9.40198 260.977 9.37097 261.051 9.34399 cv
261.121 9.32001 261.219 9.30103 261.348 9.289 cv
261.473 9.28101 261.633 9.27698 261.828 9.27301 cv
262.039 9.27698 262.211 9.28497 262.344 9.29303 cv
262.469 9.30902 262.574 9.32397 262.652 9.34802 cv
262.727 9.37097 262.777 9.40601 262.813 9.44897 cv
262.84 9.49597 262.867 9.55103 262.891 9.60901 cv
264.473 14.711 li
264.52 14.906 li
264.566 14.711 li
266.125 9.60901 li
266.137 9.55103 266.16 9.49597 266.195 9.44897 cv
266.227 9.40601 266.281 9.37097 266.355 9.34802 cv
266.426 9.32397 266.523 9.30902 266.648 9.29303 cv
266.77 9.28497 266.93 9.27698 267.129 9.27301 cv
267.32 9.27698 267.477 9.28101 267.598 9.289 cv
267.719 9.30103 267.813 9.32001 267.883 9.34399 cv
267.949 9.37097 267.996 9.40198 268.023 9.44098 cv
268.047 9.47998 268.059 9.52698 268.063 9.578 cv
cp
f
275.523 12.859 mo
275.52 13.098 275.469 13.273 275.363 13.387 cv
275.254 13.504 275.105 13.562 274.926 13.559 cv
270.691 13.559 li
270.688 13.859 270.723 14.129 270.797 14.367 cv
270.863 14.609 270.977 14.812 271.133 14.98 cv
271.285 15.152 271.48 15.281 271.723 15.367 cv
271.961 15.457 272.25 15.5 272.594 15.5 cv
272.934 15.5 273.234 15.477 273.496 15.426 cv
273.754 15.379 273.98 15.324 274.172 15.262 cv
274.359 15.203 274.516 15.148 274.645 15.098 cv
274.766 15.051 274.867 15.027 274.949 15.023 cv
274.992 15.027 275.031 15.035 275.066 15.051 cv
275.094 15.07 275.121 15.102 275.141 15.148 cv
275.16 15.195 275.172 15.262 275.184 15.348 cv
275.188 15.434 275.191 15.543 275.195 15.672 cv
275.191 15.789 275.191 15.887 275.188 15.965 cv
275.18 16.047 275.172 16.113 275.164 16.168 cv
275.152 16.227 275.137 16.277 275.117 16.312 cv
275.098 16.355 275.07 16.391 275.039 16.426 cv
275.004 16.465 274.91 16.516 274.762 16.574 cv
274.605 16.641 274.414 16.703 274.184 16.758 cv
273.945 16.82 273.676 16.867 273.379 16.914 cv
273.074 16.953 272.754 16.977 272.414 16.98 cv
271.793 16.977 271.25 16.902 270.789 16.746 cv
270.32 16.594 269.934 16.355 269.625 16.039 cv
269.309 15.723 269.074 15.324 268.926 14.84 cv
268.77 14.359 268.695 13.793 268.699 13.137 cv
268.695 12.523 268.773 11.965 268.938 11.469 cv
269.094 10.973 269.328 10.555 269.641 10.207 cv
269.945 9.86298 270.32 9.59802 270.758 9.414 cv
271.195 9.23401 271.688 9.14502 272.242 9.14099 cv
272.82 9.14502 273.32 9.22998 273.734 9.39801 cv
274.148 9.57397 274.484 9.81201 274.75 10.113 cv
275.012 10.418 275.207 10.777 275.336 11.191 cv
275.457 11.609 275.52 12.059 275.523 12.547 cv
cp
273.621 12.297 mo
273.633 11.746 273.523 11.312 273.289 11 cv
273.055 10.687 272.688 10.531 272.195 10.527 cv
271.945 10.531 271.73 10.578 271.547 10.668 cv
271.359 10.766 271.207 10.891 271.086 11.047 cv
270.961 11.207 270.867 11.395 270.805 11.609 cv
270.738 11.824 270.699 12.055 270.691 12.297 cv
cp
f
281.598 10.23 mo
281.598 10.422 281.59 10.574 281.582 10.691 cv
281.566 10.812 281.551 10.906 281.535 10.973 cv
281.512 11.043 281.484 11.09 281.453 11.113 cv
281.414 11.141 281.371 11.152 281.324 11.152 cv
281.277 11.152 281.23 11.145 281.184 11.125 cv
281.129 11.109 281.07 11.09 281.008 11.066 cv
280.938 11.047 280.867 11.027 280.793 11.008 cv
280.711 10.992 280.625 10.984 280.535 10.98 cv
280.422 10.984 280.313 11.004 280.207 11.047 cv
280.098 11.094 279.984 11.164 279.871 11.254 cv
279.75 11.348 279.629 11.473 279.504 11.625 cv
279.375 11.785 279.238 11.977 279.094 12.203 cv
279.094 16.535 li
279.09 16.59 279.074 16.633 279.047 16.672 cv
279.012 16.711 278.957 16.746 278.887 16.77 cv
278.809 16.797 278.711 16.812 278.586 16.828 cv
278.461 16.84 278.301 16.848 278.113 16.848 cv
277.918 16.848 277.762 16.84 277.637 16.828 cv
277.512 16.812 277.41 16.797 277.336 16.77 cv
277.258 16.746 277.203 16.711 277.176 16.672 cv
277.141 16.633 277.125 16.59 277.129 16.535 cv
277.129 9.586 li
277.125 9.539 277.141 9.492 277.168 9.44897 cv
277.191 9.414 277.238 9.383 277.309 9.35199 cv
277.375 9.328 277.461 9.30902 277.57 9.29303 cv
277.676 9.28497 277.809 9.27698 277.973 9.27301 cv
278.137 9.27698 278.273 9.28497 278.383 9.29303 cv
278.488 9.30902 278.574 9.328 278.637 9.35199 cv
278.695 9.383 278.738 9.414 278.766 9.44897 cv
278.789 9.492 278.801 9.539 278.805 9.586 cv
278.805 10.449 li
278.984 10.191 279.156 9.97998 279.32 9.80902 cv
279.477 9.64502 279.633 9.508 279.781 9.40601 cv
279.926 9.30902 280.07 9.242 280.215 9.19897 cv
280.359 9.164 280.504 9.14502 280.652 9.14099 cv
280.719 9.14502 280.793 9.14801 280.871 9.15198 cv
280.949 9.164 281.027 9.17603 281.113 9.19098 cv
281.191 9.211 281.266 9.22998 281.332 9.25403 cv
281.391 9.27698 281.438 9.30499 281.469 9.328 cv
281.496 9.35901 281.516 9.38702 281.531 9.414 cv
281.543 9.44897 281.555 9.492 281.566 9.54303 cv
281.574 9.60199 281.582 9.68402 281.59 9.789 cv
281.594 9.89801 281.598 10.047 281.598 10.23 cv
cp
f
288.352 16.559 mo
288.348 16.637 288.32 16.691 288.273 16.73 cv
288.219 16.773 288.137 16.801 288.027 16.82 cv
287.91 16.836 287.746 16.848 287.531 16.848 cv
287.293 16.848 287.121 16.836 287.02 16.82 cv
286.91 16.801 286.836 16.773 286.797 16.73 cv
286.75 16.691 286.73 16.637 286.73 16.559 cv
286.73 16.008 li
286.441 16.316 286.113 16.555 285.75 16.723 cv
285.383 16.895 284.977 16.977 284.531 16.98 cv
284.16 16.977 283.82 16.93 283.512 16.836 cv
283.203 16.742 282.938 16.602 282.711 16.406 cv
282.484 16.219 282.309 15.984 282.184 15.703 cv
282.059 15.426 281.996 15.098 282 14.719 cv
281.996 14.32 282.074 13.969 282.234 13.664 cv
282.391 13.367 282.629 13.121 282.945 12.926 cv
283.258 12.734 283.648 12.59 284.117 12.492 cv
284.586 12.402 285.129 12.355 285.746 12.352 cv
286.426 12.352 li
286.426 11.93 li
286.426 11.715 286.402 11.523 286.359 11.359 cv
286.313 11.199 286.238 11.062 286.141 10.949 cv
286.035 10.844 285.902 10.762 285.734 10.707 cv
285.563 10.656 285.352 10.633 285.109 10.629 cv
284.777 10.633 284.484 10.668 284.23 10.738 cv
283.969 10.812 283.742 10.895 283.547 10.98 cv
283.348 11.074 283.184 11.152 283.055 11.223 cv
282.918 11.297 282.809 11.336 282.73 11.332 cv
282.668 11.336 282.617 11.316 282.578 11.277 cv
282.531 11.242 282.496 11.191 282.469 11.121 cv
282.438 11.059 282.414 10.973 282.402 10.871 cv
282.383 10.773 282.375 10.664 282.379 10.543 cv
282.375 10.383 282.391 10.258 282.418 10.16 cv
282.441 10.07 282.488 9.98401 282.566 9.90601 cv
282.637 9.83197 282.766 9.75 282.949 9.65997 cv
283.129 9.57001 283.34 9.48401 283.586 9.40601 cv
283.828 9.328 284.098 9.26599 284.387 9.21503 cv
284.676 9.16803 284.973 9.14502 285.281 9.14099 cv
285.824 9.14502 286.289 9.19501 286.676 9.30103 cv
287.063 9.40997 287.383 9.57397 287.633 9.79303 cv
287.883 10.012 288.063 10.297 288.18 10.645 cv
288.289 10.996 288.348 11.41 288.352 11.883 cv
cp
286.426 13.582 mo
285.676 13.582 li
285.359 13.586 285.09 13.609 284.867 13.652 cv
284.641 13.703 284.457 13.773 284.32 13.863 cv
284.176 13.961 284.074 14.074 284.012 14.203 cv
283.945 14.34 283.91 14.488 283.914 14.656 cv
283.91 14.949 284.004 15.18 284.191 15.344 cv
284.375 15.512 284.633 15.594 284.961 15.594 cv
285.234 15.594 285.484 15.523 285.719 15.383 cv
285.945 15.242 286.184 15.039 286.426 14.766 cv
cp
f
296.578 10.066 mo
296.574 10.32 296.547 10.504 296.492 10.621 cv
296.434 10.742 296.363 10.801 296.285 10.801 cv
295.465 10.801 li
295.578 10.926 295.66 11.07 295.711 11.227 cv
295.758 11.387 295.781 11.551 295.785 11.719 cv
295.781 12.129 295.715 12.488 295.582 12.801 cv
295.445 13.117 295.25 13.383 295 13.594 cv
294.746 13.812 294.445 13.977 294.09 14.086 cv
293.73 14.203 293.332 14.258 292.902 14.254 cv
292.676 14.258 292.465 14.23 292.262 14.172 cv
292.059 14.121 291.902 14.059 291.793 13.98 cv
291.73 14.051 291.672 14.129 291.625 14.223 cv
291.574 14.316 291.551 14.422 291.555 14.531 cv
291.551 14.687 291.617 14.809 291.75 14.902 cv
291.879 15 292.066 15.055 292.309 15.062 cv
294 15.125 li
294.395 15.141 294.746 15.199 295.055 15.293 cv
295.363 15.395 295.625 15.527 295.836 15.699 cv
296.047 15.875 296.207 16.086 296.316 16.328 cv
296.426 16.574 296.48 16.848 296.484 17.16 cv
296.48 17.496 296.406 17.82 296.258 18.129 cv
296.109 18.43 295.883 18.691 295.582 18.918 cv
295.277 19.137 294.898 19.316 294.445 19.449 cv
293.988 19.578 293.457 19.641 292.855 19.645 cv
292.258 19.641 291.754 19.594 291.336 19.504 cv
290.918 19.406 290.574 19.277 290.309 19.113 cv
290.039 18.945 289.844 18.746 289.727 18.52 cv
289.602 18.285 289.543 18.031 289.543 17.758 cv
289.543 17.586 289.563 17.426 289.609 17.27 cv
289.648 17.113 289.715 16.961 289.805 16.82 cv
289.887 16.676 289.992 16.543 290.117 16.41 cv
290.242 16.281 290.383 16.156 290.547 16.035 cv
290.32 15.922 290.148 15.762 290.027 15.551 cv
289.906 15.348 289.848 15.121 289.848 14.875 cv
289.848 14.574 289.914 14.297 290.055 14.039 cv
290.191 13.789 290.375 13.559 290.602 13.355 cv
290.418 13.176 290.273 12.961 290.164 12.703 cv
290.055 12.453 290 12.133 290.004 11.75 cv
290 11.348 290.07 10.988 290.215 10.664 cv
290.355 10.348 290.555 10.078 290.813 9.85498 cv
291.066 9.63702 291.371 9.46503 291.723 9.34802 cv
292.074 9.22998 292.465 9.172 292.895 9.172 cv
293.113 9.172 293.32 9.18701 293.52 9.211 cv
293.719 9.242 293.906 9.27698 294.078 9.32001 cv
296.285 9.32001 li
296.367 9.32397 296.438 9.383 296.496 9.492 cv
296.547 9.60901 296.574 9.80103 296.578 10.066 cv
cp
294.063 11.711 mo
294.059 11.34 293.957 11.051 293.75 10.84 cv
293.539 10.637 293.246 10.531 292.871 10.527 cv
292.676 10.531 292.504 10.562 292.363 10.625 cv
292.215 10.691 292.094 10.781 292 10.891 cv
291.898 11.004 291.828 11.133 291.785 11.281 cv
291.734 11.43 291.711 11.586 291.715 11.742 cv
291.711 12.102 291.816 12.379 292.027 12.582 cv
292.234 12.789 292.523 12.895 292.895 12.891 cv
293.09 12.895 293.258 12.863 293.406 12.797 cv
293.547 12.738 293.668 12.652 293.77 12.539 cv
293.863 12.434 293.938 12.305 293.988 12.16 cv
294.035 12.02 294.059 11.871 294.063 11.711 cv
cp
294.523 17.262 mo
294.523 17.023 294.43 16.848 294.242 16.723 cv
294.055 16.602 293.797 16.531 293.469 16.52 cv
292.074 16.48 li
291.938 16.582 291.828 16.676 291.75 16.766 cv
291.668 16.855 291.605 16.941 291.559 17.027 cv
291.508 17.109 291.473 17.191 291.461 17.27 cv
291.441 17.348 291.434 17.426 291.438 17.512 cv
291.434 17.766 291.566 17.965 291.828 18.102 cv
292.09 18.234 292.461 18.301 292.941 18.305 cv
293.234 18.301 293.48 18.27 293.688 18.215 cv
293.887 18.152 294.051 18.074 294.18 17.977 cv
294.301 17.875 294.391 17.766 294.445 17.645 cv
294.496 17.523 294.523 17.395 294.523 17.262 cv
cp
f
304.203 12.859 mo
304.199 13.098 304.148 13.273 304.043 13.387 cv
303.934 13.504 303.785 13.562 303.605 13.559 cv
299.371 13.559 li
299.367 13.859 299.402 14.129 299.477 14.367 cv
299.543 14.609 299.656 14.812 299.813 14.98 cv
299.965 15.152 300.16 15.281 300.402 15.367 cv
300.641 15.457 300.93 15.5 301.273 15.5 cv
301.613 15.5 301.914 15.477 302.176 15.426 cv
302.434 15.379 302.66 15.324 302.852 15.262 cv
303.039 15.203 303.195 15.148 303.324 15.098 cv
303.445 15.051 303.547 15.027 303.629 15.023 cv
303.672 15.027 303.711 15.035 303.746 15.051 cv
303.773 15.07 303.801 15.102 303.82 15.148 cv
303.84 15.195 303.852 15.262 303.863 15.348 cv
303.867 15.434 303.871 15.543 303.875 15.672 cv
303.871 15.789 303.871 15.887 303.867 15.965 cv
303.859 16.047 303.852 16.113 303.844 16.168 cv
303.832 16.227 303.816 16.277 303.797 16.312 cv
303.777 16.355 303.75 16.391 303.719 16.426 cv
303.684 16.465 303.59 16.516 303.441 16.574 cv
303.285 16.641 303.094 16.703 302.863 16.758 cv
302.625 16.82 302.355 16.867 302.059 16.914 cv
301.754 16.953 301.434 16.977 301.094 16.98 cv
300.473 16.977 299.93 16.902 299.469 16.746 cv
299 16.594 298.613 16.355 298.305 16.039 cv
297.988 15.723 297.754 15.324 297.605 14.84 cv
297.449 14.359 297.375 13.793 297.379 13.137 cv
297.375 12.523 297.453 11.965 297.617 11.469 cv
297.773 10.973 298.008 10.555 298.32 10.207 cv
298.625 9.86298 299 9.59802 299.438 9.414 cv
299.875 9.23401 300.367 9.14502 300.922 9.14099 cv
301.5 9.14502 302 9.22998 302.414 9.39801 cv
302.828 9.57397 303.164 9.81201 303.43 10.113 cv
303.691 10.418 303.887 10.777 304.016 11.191 cv
304.137 11.609 304.199 12.059 304.203 12.547 cv
cp
302.301 12.297 mo
302.313 11.746 302.203 11.312 301.969 11 cv
301.734 10.687 301.367 10.531 300.875 10.527 cv
300.625 10.531 300.41 10.578 300.227 10.668 cv
300.039 10.766 299.887 10.891 299.766 11.047 cv
299.641 11.207 299.547 11.395 299.484 11.609 cv
299.418 11.824 299.379 12.055 299.371 12.297 cv
cp
f
316.438 9.78101 mo
316.438 10.348 316.348 10.852 316.172 11.285 cv
315.992 11.723 315.734 12.09 315.398 12.387 cv
315.059 12.691 314.645 12.918 314.156 13.07 cv
313.664 13.227 313.086 13.305 312.422 13.301 cv
311.582 13.301 li
311.582 16.52 li
311.578 16.574 311.563 16.621 311.531 16.66 cv
311.496 16.703 311.441 16.738 311.363 16.762 cv
311.285 16.789 311.18 16.809 311.051 16.824 cv
310.918 16.84 310.754 16.848 310.555 16.848 cv
310.355 16.848 310.188 16.84 310.059 16.824 cv
309.922 16.809 309.816 16.789 309.742 16.762 cv
309.66 16.738 309.605 16.703 309.578 16.66 cv
309.543 16.621 309.527 16.574 309.531 16.52 cv
309.531 7.44897 li
309.527 7.20697 309.594 7.02301 309.723 6.89801 cv
309.848 6.77698 310.016 6.71899 310.227 6.71503 cv
312.602 6.71503 li
312.836 6.71899 313.066 6.72699 313.285 6.742 cv
313.5 6.76202 313.758 6.80103 314.059 6.85901 cv
314.359 6.922 314.664 7.03101 314.977 7.19098 cv
315.285 7.35498 315.547 7.56201 315.766 7.80499 cv
315.98 8.05499 316.148 8.34399 316.266 8.672 cv
316.379 9.00403 316.438 9.37097 316.438 9.78101 cv
cp
314.293 9.92603 mo
314.293 9.578 314.23 9.28497 314.105 9.05499 cv
313.98 8.828 313.824 8.65997 313.645 8.547 cv
313.461 8.44098 313.273 8.37097 313.074 8.34003 cv
312.871 8.31201 312.664 8.30103 312.453 8.297 cv
311.582 8.297 li
311.582 11.719 li
312.5 11.719 li
312.828 11.723 313.102 11.676 313.324 11.586 cv
313.543 11.5 313.723 11.379 313.863 11.219 cv
314 11.062 314.105 10.871 314.184 10.648 cv
314.254 10.43 314.293 10.191 314.293 9.92603 cv
cp
f
322.375 10.23 mo
322.375 10.422 322.367 10.574 322.359 10.691 cv
322.344 10.812 322.328 10.906 322.313 10.973 cv
322.289 11.043 322.262 11.09 322.23 11.113 cv
322.191 11.141 322.148 11.152 322.102 11.152 cv
322.055 11.152 322.008 11.145 321.961 11.125 cv
321.906 11.109 321.848 11.09 321.785 11.066 cv
321.715 11.047 321.645 11.027 321.57 11.008 cv
321.488 10.992 321.402 10.984 321.313 10.98 cv
321.199 10.984 321.09 11.004 320.984 11.047 cv
320.875 11.094 320.762 11.164 320.648 11.254 cv
320.527 11.348 320.406 11.473 320.281 11.625 cv
320.152 11.785 320.016 11.977 319.871 12.203 cv
319.871 16.535 li
319.867 16.59 319.852 16.633 319.824 16.672 cv
319.789 16.711 319.734 16.746 319.664 16.77 cv
319.586 16.797 319.488 16.812 319.363 16.828 cv
319.238 16.84 319.078 16.848 318.891 16.848 cv
318.695 16.848 318.539 16.84 318.414 16.828 cv
318.289 16.812 318.188 16.797 318.113 16.77 cv
318.035 16.746 317.98 16.711 317.953 16.672 cv
317.918 16.633 317.902 16.59 317.906 16.535 cv
317.906 9.586 li
317.902 9.539 317.918 9.492 317.945 9.44897 cv
317.969 9.414 318.016 9.383 318.086 9.35199 cv
318.152 9.328 318.238 9.30902 318.348 9.29303 cv
318.453 9.28497 318.586 9.27698 318.75 9.27301 cv
318.914 9.27698 319.051 9.28497 319.16 9.29303 cv
319.266 9.30902 319.352 9.328 319.414 9.35199 cv
319.473 9.383 319.516 9.414 319.543 9.44897 cv
319.566 9.492 319.578 9.539 319.582 9.586 cv
319.582 10.449 li
319.762 10.191 319.934 9.97998 320.098 9.80902 cv
320.254 9.64502 320.41 9.508 320.559 9.40601 cv
320.703 9.30902 320.848 9.242 320.992 9.19897 cv
321.137 9.164 321.281 9.14502 321.43 9.14099 cv
321.496 9.14502 321.57 9.14801 321.648 9.15198 cv
321.727 9.164 321.805 9.17603 321.891 9.19098 cv
321.969 9.211 322.043 9.22998 322.109 9.25403 cv
322.168 9.27698 322.215 9.30499 322.246 9.328 cv
322.273 9.35901 322.293 9.38702 322.309 9.414 cv
322.32 9.44897 322.332 9.492 322.344 9.54303 cv
322.352 9.60199 322.359 9.68402 322.367 9.789 cv
322.371 9.89801 322.375 10.047 322.375 10.23 cv
cp
f
329.883 12.859 mo
329.879 13.098 329.828 13.273 329.723 13.387 cv
329.613 13.504 329.465 13.562 329.285 13.559 cv
325.051 13.559 li
325.047 13.859 325.082 14.129 325.156 14.367 cv
325.223 14.609 325.336 14.812 325.492 14.98 cv
325.645 15.152 325.84 15.281 326.082 15.367 cv
326.32 15.457 326.609 15.5 326.953 15.5 cv
327.293 15.5 327.594 15.477 327.855 15.426 cv
328.113 15.379 328.34 15.324 328.531 15.262 cv
328.719 15.203 328.875 15.148 329.004 15.098 cv
329.125 15.051 329.227 15.027 329.309 15.023 cv
329.352 15.027 329.391 15.035 329.426 15.051 cv
329.453 15.07 329.48 15.102 329.5 15.148 cv
329.52 15.195 329.531 15.262 329.543 15.348 cv
329.547 15.434 329.551 15.543 329.555 15.672 cv
329.551 15.789 329.551 15.887 329.547 15.965 cv
329.539 16.047 329.531 16.113 329.523 16.168 cv
329.512 16.227 329.496 16.277 329.477 16.312 cv
329.457 16.355 329.43 16.391 329.398 16.426 cv
329.363 16.465 329.27 16.516 329.121 16.574 cv
328.965 16.641 328.773 16.703 328.543 16.758 cv
328.305 16.82 328.035 16.867 327.738 16.914 cv
327.434 16.953 327.113 16.977 326.773 16.98 cv
326.152 16.977 325.609 16.902 325.148 16.746 cv
324.68 16.594 324.293 16.355 323.984 16.039 cv
323.668 15.723 323.434 15.324 323.285 14.84 cv
323.129 14.359 323.055 13.793 323.059 13.137 cv
323.055 12.523 323.133 11.965 323.297 11.469 cv
323.453 10.973 323.688 10.555 324 10.207 cv
324.305 9.86298 324.68 9.59802 325.117 9.414 cv
325.555 9.23401 326.047 9.14502 326.602 9.14099 cv
327.18 9.14502 327.68 9.22998 328.094 9.39801 cv
328.508 9.57397 328.844 9.81201 329.109 10.113 cv
329.371 10.418 329.566 10.777 329.695 11.191 cv
329.816 11.609 329.879 12.059 329.883 12.547 cv
cp
327.98 12.297 mo
327.992 11.746 327.883 11.312 327.648 11 cv
327.414 10.687 327.047 10.531 326.555 10.527 cv
326.305 10.531 326.09 10.578 325.906 10.668 cv
325.719 10.766 325.566 10.891 325.445 11.047 cv
325.32 11.207 325.227 11.395 325.164 11.609 cv
325.098 11.824 325.059 12.055 325.051 12.297 cv
cp
f
338.488 12.957 mo
338.488 13.578 338.422 14.137 338.289 14.633 cv
338.156 15.129 337.961 15.551 337.707 15.898 cv
337.453 16.246 337.137 16.516 336.758 16.699 cv
336.375 16.887 335.941 16.977 335.457 16.98 cv
335.25 16.977 335.063 16.957 334.898 16.922 cv
334.727 16.879 334.563 16.82 334.406 16.742 cv
334.246 16.664 334.09 16.566 333.938 16.441 cv
333.777 16.324 333.617 16.184 333.453 16.02 cv
333.453 19.293 li
333.449 19.34 333.434 19.387 333.406 19.434 cv
333.371 19.473 333.316 19.508 333.246 19.539 cv
333.168 19.562 333.07 19.586 332.945 19.605 cv
332.82 19.617 332.66 19.625 332.473 19.629 cv
332.277 19.625 332.121 19.617 331.996 19.605 cv
331.871 19.586 331.77 19.562 331.695 19.539 cv
331.617 19.508 331.563 19.473 331.535 19.434 cv
331.5 19.387 331.484 19.34 331.488 19.293 cv
331.488 9.586 li
331.484 9.539 331.5 9.492 331.527 9.44897 cv
331.551 9.414 331.594 9.383 331.664 9.35199 cv
331.727 9.328 331.813 9.30902 331.922 9.29303 cv
332.023 9.28497 332.16 9.27698 332.324 9.27301 cv
332.48 9.27698 332.609 9.28497 332.715 9.29303 cv
332.82 9.30902 332.906 9.328 332.973 9.35199 cv
333.035 9.383 333.082 9.414 333.109 9.44897 cv
333.133 9.492 333.145 9.539 333.148 9.586 cv
333.148 10.402 li
333.348 10.195 333.547 10.016 333.746 9.85498 cv
333.938 9.69897 334.137 9.56598 334.34 9.45697 cv
334.543 9.35498 334.75 9.27301 334.969 9.21899 cv
335.18 9.16803 335.41 9.14502 335.66 9.14099 cv
336.164 9.14502 336.598 9.242 336.961 9.44098 cv
337.316 9.64502 337.609 9.922 337.836 10.266 cv
338.059 10.617 338.223 11.02 338.332 11.48 cv
338.434 11.941 338.488 12.434 338.488 12.957 cv
cp
336.445 13.098 mo
336.441 12.805 336.422 12.523 336.379 12.246 cv
336.332 11.977 336.254 11.734 336.152 11.52 cv
336.043 11.309 335.902 11.137 335.73 11.008 cv
335.555 10.883 335.34 10.82 335.082 10.816 cv
334.949 10.82 334.82 10.84 334.695 10.875 cv
334.566 10.918 334.438 10.98 334.305 11.066 cv
334.172 11.156 334.035 11.27 333.898 11.41 cv
333.754 11.551 333.605 11.727 333.453 11.93 cv
333.453 14.223 li
333.727 14.57 333.988 14.84 334.238 15.027 cv
334.484 15.219 334.746 15.312 335.02 15.312 cv
335.273 15.312 335.488 15.25 335.672 15.117 cv
335.848 14.992 335.996 14.82 336.109 14.609 cv
336.223 14.398 336.305 14.16 336.363 13.895 cv
336.414 13.629 336.441 13.363 336.445 13.098 cv
cp
f
345.984 16.559 mo
345.98 16.637 345.953 16.691 345.906 16.73 cv
345.852 16.773 345.77 16.801 345.66 16.82 cv
345.543 16.836 345.379 16.848 345.164 16.848 cv
344.926 16.848 344.754 16.836 344.652 16.82 cv
344.543 16.801 344.469 16.773 344.43 16.73 cv
344.383 16.691 344.363 16.637 344.363 16.559 cv
344.363 16.008 li
344.074 16.316 343.746 16.555 343.383 16.723 cv
343.016 16.895 342.609 16.977 342.164 16.98 cv
341.793 16.977 341.453 16.93 341.145 16.836 cv
340.836 16.742 340.57 16.602 340.344 16.406 cv
340.117 16.219 339.941 15.984 339.816 15.703 cv
339.691 15.426 339.629 15.098 339.633 14.719 cv
339.629 14.32 339.707 13.969 339.867 13.664 cv
340.023 13.367 340.262 13.121 340.578 12.926 cv
340.891 12.734 341.281 12.59 341.75 12.492 cv
342.219 12.402 342.762 12.355 343.379 12.352 cv
344.059 12.352 li
344.059 11.93 li
344.059 11.715 344.035 11.523 343.992 11.359 cv
343.945 11.199 343.871 11.062 343.773 10.949 cv
343.668 10.844 343.535 10.762 343.367 10.707 cv
343.195 10.656 342.984 10.633 342.742 10.629 cv
342.41 10.633 342.117 10.668 341.863 10.738 cv
341.602 10.812 341.375 10.895 341.18 10.98 cv
340.98 11.074 340.816 11.152 340.688 11.223 cv
340.551 11.297 340.441 11.336 340.363 11.332 cv
340.301 11.336 340.25 11.316 340.211 11.277 cv
340.164 11.242 340.129 11.191 340.102 11.121 cv
340.07 11.059 340.047 10.973 340.035 10.871 cv
340.016 10.773 340.008 10.664 340.012 10.543 cv
340.008 10.383 340.023 10.258 340.051 10.16 cv
340.074 10.07 340.121 9.98401 340.199 9.90601 cv
340.27 9.83197 340.398 9.75 340.582 9.65997 cv
340.762 9.57001 340.973 9.48401 341.219 9.40601 cv
341.461 9.328 341.73 9.26599 342.02 9.21503 cv
342.309 9.16803 342.605 9.14502 342.914 9.14099 cv
343.457 9.14502 343.922 9.19501 344.309 9.30103 cv
344.695 9.40997 345.016 9.57397 345.266 9.79303 cv
345.516 10.012 345.695 10.297 345.813 10.645 cv
345.922 10.996 345.98 11.41 345.984 11.883 cv
cp
344.059 13.582 mo
343.309 13.582 li
342.992 13.586 342.723 13.609 342.5 13.652 cv
342.273 13.703 342.09 13.773 341.953 13.863 cv
341.809 13.961 341.707 14.074 341.645 14.203 cv
341.578 14.34 341.543 14.488 341.547 14.656 cv
341.543 14.949 341.637 15.18 341.824 15.344 cv
342.008 15.512 342.266 15.594 342.594 15.594 cv
342.867 15.594 343.117 15.523 343.352 15.383 cv
343.578 15.242 343.816 15.039 344.059 14.766 cv
cp
f
352.41 10.23 mo
352.41 10.422 352.402 10.574 352.395 10.691 cv
352.379 10.812 352.363 10.906 352.348 10.973 cv
352.324 11.043 352.297 11.09 352.266 11.113 cv
352.227 11.141 352.184 11.152 352.137 11.152 cv
352.09 11.152 352.043 11.145 351.996 11.125 cv
351.941 11.109 351.883 11.09 351.82 11.066 cv
351.75 11.047 351.68 11.027 351.605 11.008 cv
351.523 10.992 351.438 10.984 351.348 10.98 cv
351.234 10.984 351.125 11.004 351.02 11.047 cv
350.91 11.094 350.797 11.164 350.684 11.254 cv
350.563 11.348 350.441 11.473 350.316 11.625 cv
350.188 11.785 350.051 11.977 349.906 12.203 cv
349.906 16.535 li
349.902 16.59 349.887 16.633 349.859 16.672 cv
349.824 16.711 349.77 16.746 349.699 16.77 cv
349.621 16.797 349.523 16.812 349.398 16.828 cv
349.273 16.84 349.113 16.848 348.926 16.848 cv
348.73 16.848 348.574 16.84 348.449 16.828 cv
348.324 16.812 348.223 16.797 348.148 16.77 cv
348.07 16.746 348.016 16.711 347.988 16.672 cv
347.953 16.633 347.938 16.59 347.941 16.535 cv
347.941 9.586 li
347.938 9.539 347.953 9.492 347.98 9.44897 cv
348.004 9.414 348.051 9.383 348.121 9.35199 cv
348.188 9.328 348.273 9.30902 348.383 9.29303 cv
348.488 9.28497 348.621 9.27698 348.785 9.27301 cv
348.949 9.27698 349.086 9.28497 349.195 9.29303 cv
349.301 9.30902 349.387 9.328 349.449 9.35199 cv
349.508 9.383 349.551 9.414 349.578 9.44897 cv
349.602 9.492 349.613 9.539 349.617 9.586 cv
349.617 10.449 li
349.797 10.191 349.969 9.97998 350.133 9.80902 cv
350.289 9.64502 350.445 9.508 350.594 9.40601 cv
350.738 9.30902 350.883 9.242 351.027 9.19897 cv
351.172 9.164 351.316 9.14502 351.465 9.14099 cv
351.531 9.14502 351.605 9.14801 351.684 9.15198 cv
351.762 9.164 351.84 9.17603 351.926 9.19098 cv
352.004 9.211 352.078 9.22998 352.145 9.25403 cv
352.203 9.27698 352.25 9.30499 352.281 9.328 cv
352.309 9.35901 352.328 9.38702 352.344 9.414 cv
352.355 9.44897 352.367 9.492 352.379 9.54303 cv
352.387 9.60199 352.395 9.68402 352.402 9.789 cv
352.406 9.89801 352.41 10.047 352.41 10.23 cv
cp
f
359.152 16.559 mo
359.148 16.637 359.121 16.691 359.074 16.73 cv
359.02 16.773 358.938 16.801 358.828 16.82 cv
358.711 16.836 358.547 16.848 358.332 16.848 cv
358.094 16.848 357.922 16.836 357.82 16.82 cv
357.711 16.801 357.637 16.773 357.598 16.73 cv
357.551 16.691 357.531 16.637 357.531 16.559 cv
357.531 16.008 li
357.242 16.316 356.914 16.555 356.551 16.723 cv
356.184 16.895 355.777 16.977 355.332 16.98 cv
354.961 16.977 354.621 16.93 354.313 16.836 cv
354.004 16.742 353.738 16.602 353.512 16.406 cv
353.285 16.219 353.109 15.984 352.984 15.703 cv
352.859 15.426 352.797 15.098 352.801 14.719 cv
352.797 14.32 352.875 13.969 353.035 13.664 cv
353.191 13.367 353.43 13.121 353.746 12.926 cv
354.059 12.734 354.449 12.59 354.918 12.492 cv
355.387 12.402 355.93 12.355 356.547 12.352 cv
357.227 12.352 li
357.227 11.93 li
357.227 11.715 357.203 11.523 357.16 11.359 cv
357.113 11.199 357.039 11.062 356.941 10.949 cv
356.836 10.844 356.703 10.762 356.535 10.707 cv
356.363 10.656 356.152 10.633 355.91 10.629 cv
355.578 10.633 355.285 10.668 355.031 10.738 cv
354.77 10.812 354.543 10.895 354.348 10.98 cv
354.148 11.074 353.984 11.152 353.855 11.223 cv
353.719 11.297 353.609 11.336 353.531 11.332 cv
353.469 11.336 353.418 11.316 353.379 11.277 cv
353.332 11.242 353.297 11.191 353.27 11.121 cv
353.238 11.059 353.215 10.973 353.203 10.871 cv
353.184 10.773 353.176 10.664 353.18 10.543 cv
353.176 10.383 353.191 10.258 353.219 10.16 cv
353.242 10.07 353.289 9.98401 353.367 9.90601 cv
353.438 9.83197 353.566 9.75 353.75 9.65997 cv
353.93 9.57001 354.141 9.48401 354.387 9.40601 cv
354.629 9.328 354.898 9.26599 355.188 9.21503 cv
355.477 9.16803 355.773 9.14502 356.082 9.14099 cv
356.625 9.14502 357.09 9.19501 357.477 9.30103 cv
357.863 9.40997 358.184 9.57397 358.434 9.79303 cv
358.684 10.012 358.863 10.297 358.98 10.645 cv
359.09 10.996 359.148 11.41 359.152 11.883 cv
cp
357.227 13.582 mo
356.477 13.582 li
356.16 13.586 355.891 13.609 355.668 13.652 cv
355.441 13.703 355.258 13.773 355.121 13.863 cv
354.977 13.961 354.875 14.074 354.813 14.203 cv
354.746 14.34 354.711 14.488 354.715 14.656 cv
354.711 14.949 354.805 15.18 354.992 15.344 cv
355.176 15.512 355.434 15.594 355.762 15.594 cv
356.035 15.594 356.285 15.523 356.52 15.383 cv
356.746 15.242 356.984 15.039 357.227 14.766 cv
cp
f
365.148 15.852 mo
365.148 16.078 365.133 16.254 365.105 16.375 cv
365.074 16.5 365.035 16.586 364.992 16.633 cv
364.941 16.684 364.875 16.727 364.785 16.766 cv
364.691 16.805 364.582 16.836 364.465 16.867 cv
364.34 16.891 364.207 16.914 364.066 16.934 cv
363.922 16.945 363.781 16.953 363.637 16.957 cv
363.246 16.953 362.906 16.902 362.621 16.809 cv
362.336 16.707 362.102 16.559 361.914 16.352 cv
361.727 16.148 361.586 15.891 361.5 15.578 cv
361.406 15.27 361.363 14.898 361.367 14.469 cv
361.367 10.91 li
360.535 10.91 li
360.434 10.914 360.359 10.852 360.309 10.727 cv
360.254 10.605 360.227 10.402 360.23 10.113 cv
360.227 9.96503 360.234 9.836 360.25 9.73401 cv
360.262 9.633 360.281 9.55103 360.309 9.48798 cv
360.332 9.42999 360.363 9.38702 360.406 9.35901 cv
360.441 9.336 360.488 9.32397 360.543 9.32001 cv
361.367 9.32001 li
361.367 7.77002 li
361.363 7.72302 361.379 7.67603 361.41 7.62903 cv
361.438 7.59003 361.488 7.55499 361.566 7.52301 cv
361.641 7.5 361.742 7.47699 361.871 7.461 cv
361.996 7.44897 362.152 7.44501 362.344 7.44098 cv
362.531 7.44501 362.691 7.44897 362.82 7.461 cv
362.945 7.47699 363.047 7.5 363.121 7.52301 cv
363.191 7.55499 363.242 7.59003 363.277 7.62903 cv
363.305 7.67603 363.32 7.72302 363.324 7.77002 cv
363.324 9.32001 li
364.836 9.32001 li
364.887 9.32397 364.934 9.336 364.973 9.35901 cv
365.012 9.38702 365.043 9.42999 365.07 9.48798 cv
365.094 9.55103 365.113 9.633 365.129 9.73401 cv
365.141 9.836 365.148 9.96503 365.148 10.113 cv
365.148 10.402 365.121 10.605 365.07 10.727 cv
365.016 10.852 364.941 10.914 364.844 10.91 cv
363.324 10.91 li
363.324 14.176 li
363.32 14.555 363.379 14.84 363.504 15.027 cv
363.621 15.219 363.836 15.312 364.141 15.312 cv
364.242 15.312 364.336 15.305 364.422 15.285 cv
364.504 15.27 364.578 15.25 364.645 15.223 cv
364.707 15.203 364.762 15.18 364.809 15.16 cv
364.852 15.145 364.891 15.137 364.93 15.133 cv
364.957 15.137 364.988 15.145 365.02 15.16 cv
365.047 15.18 365.066 15.219 365.086 15.27 cv
365.098 15.328 365.113 15.402 365.129 15.492 cv
365.141 15.59 365.148 15.707 365.148 15.852 cv
cp
f
368.531 16.535 mo
368.527 16.59 368.512 16.633 368.484 16.672 cv
368.449 16.711 368.395 16.746 368.324 16.77 cv
368.246 16.797 368.148 16.812 368.023 16.828 cv
367.898 16.84 367.738 16.848 367.551 16.848 cv
367.355 16.848 367.199 16.84 367.074 16.828 cv
366.949 16.812 366.848 16.797 366.773 16.77 cv
366.695 16.746 366.641 16.711 366.613 16.672 cv
366.578 16.633 366.563 16.59 366.566 16.535 cv
366.566 9.60199 li
366.563 9.55103 366.578 9.50403 366.613 9.46503 cv
366.641 9.42603 366.695 9.39502 366.773 9.36298 cv
366.848 9.34003 366.949 9.31598 367.074 9.297 cv
367.199 9.28497 367.355 9.27698 367.551 9.27301 cv
367.738 9.27698 367.898 9.28497 368.023 9.297 cv
368.148 9.31598 368.246 9.34003 368.324 9.36298 cv
368.395 9.39502 368.449 9.42603 368.484 9.46503 cv
368.512 9.50403 368.527 9.55103 368.531 9.60199 cv
cp
368.68 7.22998 mo
368.68 7.62903 368.598 7.90198 368.438 8.05103 cv
368.273 8.203 367.977 8.27698 367.543 8.27301 cv
367.098 8.27698 366.797 8.203 366.648 8.05902 cv
366.492 7.914 366.418 7.65198 366.418 7.27002 cv
366.418 6.875 366.496 6.60199 366.656 6.44897 cv
366.813 6.297 367.113 6.21899 367.559 6.21899 cv
367.992 6.21899 368.289 6.29303 368.445 6.44098 cv
368.602 6.59003 368.68 6.85498 368.68 7.22998 cv
cp
f
377.527 12.988 mo
377.523 13.586 377.445 14.129 377.293 14.613 cv
377.133 15.105 376.898 15.523 376.582 15.875 cv
376.266 16.227 375.867 16.5 375.391 16.691 cv
374.91 16.883 374.352 16.977 373.715 16.98 cv
373.094 16.977 372.555 16.895 372.102 16.723 cv
371.641 16.555 371.262 16.305 370.965 15.977 cv
370.66 15.652 370.438 15.25 370.293 14.77 cv
370.148 14.293 370.078 13.746 370.078 13.129 cv
370.078 12.539 370.156 12 370.313 11.508 cv
370.469 11.02 370.707 10.598 371.027 10.246 cv
371.344 9.89801 371.738 9.625 372.215 9.42999 cv
372.688 9.23798 373.246 9.14502 373.887 9.14099 cv
374.512 9.14502 375.051 9.22699 375.508 9.39502 cv
375.965 9.56598 376.344 9.81598 376.641 10.141 cv
376.938 10.469 377.16 10.871 377.309 11.348 cv
377.453 11.828 377.523 12.375 377.527 12.988 cv
cp
375.508 13.066 mo
375.504 12.73 375.477 12.414 375.426 12.121 cv
375.367 11.836 375.273 11.586 375.148 11.371 cv
375.016 11.16 374.844 10.992 374.633 10.871 cv
374.414 10.754 374.145 10.695 373.816 10.691 cv
373.527 10.695 373.273 10.75 373.055 10.852 cv
372.836 10.961 372.656 11.117 372.516 11.32 cv
372.375 11.527 372.27 11.773 372.199 12.059 cv
372.129 12.352 372.094 12.68 372.094 13.043 cv
372.094 13.391 372.121 13.707 372.18 13.992 cv
372.234 14.285 372.328 14.535 372.457 14.746 cv
372.582 14.961 372.754 15.125 372.977 15.238 cv
373.191 15.359 373.461 15.418 373.785 15.414 cv
374.078 15.418 374.336 15.363 374.559 15.254 cv
374.773 15.148 374.953 14.996 375.094 14.789 cv
375.234 14.59 375.336 14.344 375.406 14.055 cv
375.469 13.77 375.504 13.441 375.508 13.066 cv
cp
f
385.77 16.535 mo
385.766 16.59 385.75 16.633 385.723 16.672 cv
385.688 16.711 385.637 16.746 385.566 16.77 cv
385.492 16.797 385.391 16.812 385.266 16.828 cv
385.137 16.84 384.98 16.848 384.797 16.848 cv
384.602 16.848 384.441 16.84 384.316 16.828 cv
384.188 16.812 384.086 16.797 384.016 16.77 cv
383.938 16.746 383.887 16.711 383.859 16.672 cv
383.824 16.633 383.809 16.59 383.813 16.535 cv
383.813 12.57 li
383.809 12.234 383.785 11.969 383.738 11.773 cv
383.688 11.582 383.613 11.418 383.523 11.281 cv
383.43 11.145 383.313 11.039 383.164 10.961 cv
383.016 10.887 382.84 10.848 382.645 10.848 cv
382.391 10.848 382.141 10.941 381.887 11.121 cv
381.633 11.305 381.367 11.566 381.094 11.914 cv
381.094 16.535 li
381.09 16.59 381.074 16.633 381.047 16.672 cv
381.012 16.711 380.957 16.746 380.887 16.77 cv
380.809 16.797 380.711 16.812 380.586 16.828 cv
380.461 16.84 380.301 16.848 380.113 16.848 cv
379.918 16.848 379.762 16.84 379.637 16.828 cv
379.512 16.812 379.41 16.797 379.336 16.77 cv
379.258 16.746 379.203 16.711 379.176 16.672 cv
379.141 16.633 379.125 16.59 379.129 16.535 cv
379.129 9.586 li
379.125 9.539 379.141 9.492 379.168 9.44897 cv
379.191 9.414 379.238 9.383 379.309 9.35199 cv
379.375 9.328 379.461 9.30902 379.57 9.29303 cv
379.676 9.28497 379.809 9.27698 379.973 9.27301 cv
380.137 9.27698 380.273 9.28497 380.383 9.29303 cv
380.488 9.30902 380.574 9.328 380.637 9.35199 cv
380.695 9.383 380.738 9.414 380.766 9.44897 cv
380.789 9.492 380.801 9.539 380.805 9.586 cv
380.805 10.387 li
381.188 9.97699 381.578 9.664 381.977 9.453 cv
382.371 9.24597 382.789 9.14502 383.223 9.14099 cv
383.691 9.14502 384.09 9.22302 384.418 9.375 cv
384.742 9.53497 385.004 9.74597 385.203 10.012 cv
385.402 10.281 385.547 10.594 385.637 10.949 cv
385.723 11.309 385.766 11.738 385.77 12.242 cv
cp
f
398.184 7.55902 mo
398.18 7.71503 398.172 7.84399 398.164 7.94501 cv
398.148 8.05499 398.129 8.14099 398.105 8.203 cv
398.074 8.27002 398.043 8.31598 398.008 8.34399 cv
397.965 8.37903 397.922 8.39502 397.879 8.39099 cv
395.355 8.39099 li
395.355 16.52 li
395.355 16.574 395.336 16.621 395.305 16.66 cv
395.266 16.703 395.211 16.738 395.137 16.762 cv
395.055 16.789 394.949 16.809 394.82 16.824 cv
394.684 16.84 394.52 16.848 394.324 16.848 cv
394.129 16.848 393.965 16.84 393.832 16.824 cv
393.699 16.809 393.594 16.789 393.516 16.762 cv
393.438 16.738 393.379 16.703 393.348 16.66 cv
393.309 16.621 393.293 16.574 393.297 16.52 cv
393.297 8.39099 li
390.773 8.39099 li
390.719 8.39502 390.672 8.37903 390.641 8.34399 cv
390.602 8.31598 390.57 8.27002 390.547 8.203 cv
390.516 8.14099 390.496 8.05499 390.488 7.94501 cv
390.473 7.84399 390.469 7.71503 390.469 7.55902 cv
390.469 7.40601 390.473 7.27301 390.488 7.15997 cv
390.496 7.05499 390.516 6.96503 390.547 6.89801 cv
390.57 6.836 390.602 6.789 390.641 6.758 cv
390.672 6.72998 390.719 6.71899 390.773 6.71503 cv
397.879 6.71503 li
397.922 6.71899 397.965 6.72998 398.008 6.758 cv
398.043 6.789 398.074 6.836 398.105 6.89801 cv
398.129 6.96503 398.148 7.05499 398.164 7.15997 cv
398.172 7.27301 398.18 7.40601 398.184 7.55902 cv
cp
f
401.219 16.535 mo
401.215 16.59 401.199 16.633 401.172 16.672 cv
401.137 16.711 401.082 16.746 401.012 16.77 cv
400.934 16.797 400.836 16.812 400.711 16.828 cv
400.586 16.84 400.426 16.848 400.238 16.848 cv
400.043 16.848 399.887 16.84 399.762 16.828 cv
399.637 16.812 399.535 16.797 399.461 16.77 cv
399.383 16.746 399.328 16.711 399.301 16.672 cv
399.266 16.633 399.25 16.59 399.254 16.535 cv
399.254 9.60199 li
399.25 9.55103 399.266 9.50403 399.301 9.46503 cv
399.328 9.42603 399.383 9.39502 399.461 9.36298 cv
399.535 9.34003 399.637 9.31598 399.762 9.297 cv
399.887 9.28497 400.043 9.27698 400.238 9.27301 cv
400.426 9.27698 400.586 9.28497 400.711 9.297 cv
400.836 9.31598 400.934 9.34003 401.012 9.36298 cv
401.082 9.39502 401.137 9.42603 401.172 9.46503 cv
401.199 9.50403 401.215 9.55103 401.219 9.60199 cv
cp
401.367 7.22998 mo
401.367 7.62903 401.285 7.90198 401.125 8.05103 cv
400.961 8.203 400.664 8.27698 400.23 8.27301 cv
399.785 8.27698 399.484 8.203 399.336 8.05902 cv
399.18 7.914 399.105 7.65198 399.105 7.27002 cv
399.105 6.875 399.184 6.60199 399.344 6.44897 cv
399.5 6.297 399.801 6.21899 400.246 6.21899 cv
400.68 6.21899 400.977 6.29303 401.133 6.44098 cv
401.289 6.59003 401.367 6.85498 401.367 7.22998 cv
cp
f
414.27 16.535 mo
414.266 16.59 414.25 16.633 414.223 16.672 cv
414.188 16.711 414.137 16.746 414.066 16.77 cv
413.992 16.797 413.891 16.812 413.77 16.828 cv
413.645 16.84 413.488 16.848 413.297 16.848 cv
413.098 16.848 412.938 16.84 412.813 16.828 cv
412.688 16.812 412.586 16.797 412.512 16.77 cv
412.434 16.746 412.383 16.711 412.355 16.672 cv
412.328 16.633 412.313 16.59 412.316 16.535 cv
412.316 12.414 li
412.313 12.184 412.293 11.969 412.25 11.773 cv
412.203 11.582 412.133 11.418 412.047 11.281 cv
411.953 11.145 411.84 11.039 411.703 10.961 cv
411.563 10.887 411.398 10.848 411.207 10.848 cv
410.973 10.848 410.734 10.941 410.496 11.121 cv
410.258 11.305 410 11.566 409.719 11.914 cv
409.719 16.535 li
409.719 16.59 409.703 16.633 409.672 16.672 cv
409.641 16.711 409.586 16.746 409.512 16.77 cv
409.434 16.797 409.332 16.812 409.211 16.828 cv
409.086 16.84 408.934 16.848 408.746 16.848 cv
408.551 16.848 408.391 16.84 408.27 16.828 cv
408.141 16.812 408.039 16.797 407.969 16.77 cv
407.891 16.746 407.84 16.711 407.809 16.672 cv
407.777 16.633 407.762 16.59 407.762 16.535 cv
407.762 12.414 li
407.762 12.184 407.738 11.969 407.695 11.773 cv
407.652 11.582 407.586 11.418 407.5 11.281 cv
407.406 11.145 407.293 11.039 407.156 10.961 cv
407.012 10.887 406.848 10.848 406.664 10.848 cv
406.422 10.848 406.184 10.941 405.945 11.121 cv
405.707 11.305 405.449 11.566 405.176 11.914 cv
405.176 16.535 li
405.172 16.59 405.156 16.633 405.129 16.672 cv
405.094 16.711 405.039 16.746 404.969 16.77 cv
404.891 16.797 404.793 16.812 404.668 16.828 cv
404.543 16.84 404.383 16.848 404.195 16.848 cv
404 16.848 403.844 16.84 403.719 16.828 cv
403.594 16.812 403.492 16.797 403.418 16.77 cv
403.34 16.746 403.285 16.711 403.258 16.672 cv
403.223 16.633 403.207 16.59 403.211 16.535 cv
403.211 9.586 li
403.207 9.539 403.223 9.492 403.25 9.44897 cv
403.273 9.414 403.32 9.383 403.391 9.35199 cv
403.457 9.328 403.543 9.30902 403.652 9.29303 cv
403.758 9.28497 403.891 9.27698 404.055 9.27301 cv
404.219 9.27698 404.355 9.28497 404.465 9.29303 cv
404.57 9.30902 404.656 9.328 404.719 9.35199 cv
404.777 9.383 404.82 9.414 404.848 9.44897 cv
404.871 9.492 404.883 9.539 404.887 9.586 cv
404.887 10.387 li
405.27 9.97699 405.652 9.664 406.035 9.453 cv
406.414 9.24597 406.816 9.14502 407.234 9.14099 cv
407.52 9.14502 407.773 9.172 408.004 9.22998 cv
408.23 9.29303 408.438 9.37903 408.617 9.48798 cv
408.797 9.60199 408.949 9.73798 409.078 9.89099 cv
409.207 10.047 409.316 10.219 409.406 10.41 cv
409.613 10.187 409.816 9.99597 410.02 9.836 cv
410.215 9.67603 410.414 9.54303 410.609 9.44098 cv
410.805 9.34003 411 9.26599 411.195 9.21503 cv
411.391 9.16803 411.59 9.14502 411.793 9.14099 cv
412.254 9.14502 412.641 9.22302 412.961 9.375 cv
413.273 9.53497 413.531 9.74597 413.727 10.012 cv
413.922 10.281 414.059 10.594 414.145 10.949 cv
414.223 11.309 414.266 11.687 414.27 12.086 cv
cp
f
422.609 12.859 mo
422.605 13.098 422.555 13.273 422.449 13.387 cv
422.34 13.504 422.191 13.562 422.012 13.559 cv
417.777 13.559 li
417.773 13.859 417.809 14.129 417.883 14.367 cv
417.949 14.609 418.063 14.812 418.219 14.98 cv
418.371 15.152 418.566 15.281 418.809 15.367 cv
419.047 15.457 419.336 15.5 419.68 15.5 cv
420.02 15.5 420.32 15.477 420.582 15.426 cv
420.84 15.379 421.066 15.324 421.258 15.262 cv
421.445 15.203 421.602 15.148 421.73 15.098 cv
421.852 15.051 421.953 15.027 422.035 15.023 cv
422.078 15.027 422.117 15.035 422.152 15.051 cv
422.18 15.07 422.207 15.102 422.227 15.148 cv
422.246 15.195 422.258 15.262 422.27 15.348 cv
422.273 15.434 422.277 15.543 422.281 15.672 cv
422.277 15.789 422.277 15.887 422.273 15.965 cv
422.266 16.047 422.258 16.113 422.25 16.168 cv
422.238 16.227 422.223 16.277 422.203 16.312 cv
422.184 16.355 422.156 16.391 422.125 16.426 cv
422.09 16.465 421.996 16.516 421.848 16.574 cv
421.691 16.641 421.5 16.703 421.27 16.758 cv
421.031 16.82 420.762 16.867 420.465 16.914 cv
420.16 16.953 419.84 16.977 419.5 16.98 cv
418.879 16.977 418.336 16.902 417.875 16.746 cv
417.406 16.594 417.02 16.355 416.711 16.039 cv
416.395 15.723 416.16 15.324 416.012 14.84 cv
415.855 14.359 415.781 13.793 415.785 13.137 cv
415.781 12.523 415.859 11.965 416.023 11.469 cv
416.18 10.973 416.414 10.555 416.727 10.207 cv
417.031 9.86298 417.406 9.59802 417.844 9.414 cv
418.281 9.23401 418.773 9.14502 419.328 9.14099 cv
419.906 9.14502 420.406 9.22998 420.82 9.39801 cv
421.234 9.57397 421.57 9.81201 421.836 10.113 cv
422.098 10.418 422.293 10.777 422.422 11.191 cv
422.543 11.609 422.605 12.059 422.609 12.547 cv
cp
420.707 12.297 mo
420.719 11.746 420.609 11.312 420.375 11 cv
420.141 10.687 419.773 10.531 419.281 10.527 cv
419.031 10.531 418.816 10.578 418.633 10.668 cv
418.445 10.766 418.293 10.891 418.172 11.047 cv
418.047 11.207 417.953 11.395 417.891 11.609 cv
417.824 11.824 417.785 12.055 417.777 12.297 cv
cp
f
429.109 14.57 mo
429.105 14.969 429.031 15.316 428.887 15.617 cv
428.738 15.918 428.531 16.172 428.262 16.371 cv
427.988 16.578 427.668 16.727 427.301 16.828 cv
426.934 16.926 426.531 16.977 426.102 16.98 cv
425.836 16.977 425.59 16.957 425.355 16.922 cv
425.121 16.879 424.91 16.832 424.723 16.773 cv
424.535 16.715 424.379 16.652 424.254 16.59 cv
424.129 16.527 424.035 16.469 423.98 16.414 cv
423.922 16.359 423.879 16.277 423.852 16.16 cv
423.816 16.047 423.801 15.871 423.805 15.641 cv
423.801 15.492 423.809 15.371 423.82 15.277 cv
423.828 15.187 423.844 15.117 423.867 15.059 cv
423.887 15.008 423.91 14.969 423.945 14.949 cv
423.973 14.934 424.012 14.926 424.059 14.922 cv
424.113 14.926 424.199 14.957 424.313 15.02 cv
424.422 15.086 424.559 15.16 424.73 15.234 cv
424.895 15.316 425.09 15.387 425.309 15.453 cv
425.527 15.523 425.777 15.559 426.063 15.555 cv
426.238 15.559 426.395 15.539 426.535 15.5 cv
426.668 15.465 426.789 15.414 426.895 15.344 cv
426.992 15.277 427.066 15.191 427.121 15.086 cv
427.168 14.984 427.195 14.863 427.199 14.727 cv
427.195 14.57 427.148 14.437 427.055 14.328 cv
426.961 14.219 426.832 14.121 426.676 14.035 cv
426.512 13.953 426.332 13.875 426.137 13.801 cv
425.934 13.73 425.73 13.652 425.52 13.559 cv
425.309 13.473 425.102 13.371 424.906 13.254 cv
424.703 13.145 424.523 13.004 424.367 12.836 cv
424.203 12.672 424.078 12.473 423.984 12.234 cv
423.891 12.004 423.844 11.723 423.844 11.391 cv
423.844 11.062 423.906 10.758 424.035 10.477 cv
424.164 10.203 424.352 9.96503 424.598 9.76599 cv
424.84 9.57001 425.137 9.41803 425.488 9.30499 cv
425.836 9.19897 426.23 9.14502 426.672 9.14099 cv
426.887 9.14502 427.098 9.15997 427.305 9.18701 cv
427.508 9.22302 427.695 9.26202 427.863 9.30499 cv
428.027 9.35498 428.168 9.40601 428.285 9.45697 cv
428.398 9.51599 428.48 9.56201 428.531 9.59802 cv
428.578 9.64099 428.613 9.67999 428.637 9.71503 cv
428.656 9.758 428.668 9.80499 428.68 9.85498 cv
428.688 9.90997 428.699 9.97699 428.707 10.055 cv
428.715 10.141 428.719 10.238 428.719 10.355 cv
428.719 10.496 428.715 10.613 428.707 10.699 cv
428.699 10.793 428.684 10.863 428.668 10.91 cv
428.648 10.965 428.625 11 428.598 11.016 cv
428.563 11.039 428.527 11.047 428.488 11.043 cv
428.438 11.047 428.363 11.02 428.27 10.961 cv
428.168 10.91 428.047 10.852 427.898 10.785 cv
427.75 10.727 427.578 10.668 427.383 10.609 cv
427.188 10.559 426.965 10.531 426.719 10.527 cv
426.539 10.531 426.387 10.551 426.258 10.582 cv
426.125 10.621 426.016 10.672 425.938 10.738 cv
425.852 10.809 425.789 10.887 425.75 10.977 cv
425.703 11.07 425.684 11.168 425.688 11.27 cv
425.684 11.43 425.734 11.566 425.836 11.672 cv
425.934 11.785 426.063 11.879 426.227 11.961 cv
426.387 12.047 426.57 12.125 426.777 12.195 cv
426.98 12.27 427.188 12.352 427.398 12.434 cv
427.605 12.523 427.813 12.621 428.023 12.734 cv
428.227 12.848 428.41 12.988 428.57 13.152 cv
428.73 13.32 428.859 13.52 428.961 13.75 cv
429.055 13.984 429.105 14.258 429.109 14.57 cv
cp
f
441.223 12.988 mo
441.219 13.586 441.141 14.129 440.988 14.613 cv
440.828 15.105 440.594 15.523 440.277 15.875 cv
439.961 16.227 439.563 16.5 439.086 16.691 cv
438.605 16.883 438.047 16.977 437.41 16.98 cv
436.789 16.977 436.25 16.895 435.797 16.723 cv
435.336 16.555 434.957 16.305 434.66 15.977 cv
434.355 15.652 434.133 15.25 433.988 14.77 cv
433.844 14.293 433.773 13.746 433.773 13.129 cv
433.773 12.539 433.852 12 434.008 11.508 cv
434.164 11.02 434.402 10.598 434.723 10.246 cv
435.039 9.89801 435.434 9.625 435.91 9.42999 cv
436.383 9.23798 436.941 9.14502 437.582 9.14099 cv
438.207 9.14502 438.746 9.22699 439.203 9.39502 cv
439.66 9.56598 440.039 9.81598 440.336 10.141 cv
440.633 10.469 440.855 10.871 441.004 11.348 cv
441.148 11.828 441.219 12.375 441.223 12.988 cv
cp
439.203 13.066 mo
439.199 12.73 439.172 12.414 439.121 12.121 cv
439.063 11.836 438.969 11.586 438.844 11.371 cv
438.711 11.16 438.539 10.992 438.328 10.871 cv
438.109 10.754 437.84 10.695 437.512 10.691 cv
437.223 10.695 436.969 10.75 436.75 10.852 cv
436.531 10.961 436.352 11.117 436.211 11.32 cv
436.07 11.527 435.965 11.773 435.895 12.059 cv
435.824 12.352 435.789 12.68 435.789 13.043 cv
435.789 13.391 435.816 13.707 435.875 13.992 cv
435.93 14.285 436.023 14.535 436.152 14.746 cv
436.277 14.961 436.449 15.125 436.672 15.238 cv
436.887 15.359 437.156 15.418 437.48 15.414 cv
437.773 15.418 438.031 15.363 438.254 15.254 cv
438.469 15.148 438.648 14.996 438.789 14.789 cv
438.93 14.59 439.031 14.344 439.102 14.055 cv
439.164 13.77 439.199 13.441 439.203 13.066 cv
cp
f
446.973 6.93402 mo
446.969 7.086 446.965 7.20697 446.957 7.297 cv
446.945 7.39099 446.93 7.461 446.91 7.508 cv
446.887 7.55902 446.863 7.59399 446.84 7.60901 cv
446.813 7.62903 446.785 7.63702 446.754 7.63702 cv
446.715 7.63702 446.672 7.62903 446.633 7.60901 cv
446.586 7.59399 446.531 7.57397 446.469 7.55103 cv
446.398 7.53101 446.324 7.51202 446.238 7.492 cv
446.148 7.47699 446.043 7.46899 445.926 7.46503 cv
445.781 7.46899 445.66 7.48798 445.563 7.53101 cv
445.461 7.578 445.379 7.64801 445.313 7.742 cv
445.242 7.84003 445.191 7.96503 445.164 8.117 cv
445.129 8.27002 445.113 8.45697 445.117 8.67999 cv
445.117 9.32001 li
446.387 9.32001 li
446.43 9.32397 446.473 9.336 446.516 9.35901 cv
446.551 9.38702 446.586 9.42999 446.613 9.48798 cv
446.637 9.55103 446.656 9.633 446.672 9.73401 cv
446.684 9.836 446.688 9.96503 446.691 10.113 cv
446.688 10.402 446.664 10.605 446.613 10.727 cv
446.559 10.852 446.48 10.914 446.387 10.91 cv
445.117 10.91 li
445.117 16.535 li
445.113 16.59 445.098 16.633 445.07 16.672 cv
445.035 16.711 444.984 16.746 444.914 16.77 cv
444.84 16.797 444.738 16.812 444.609 16.828 cv
444.477 16.84 444.316 16.848 444.133 16.848 cv
443.945 16.848 443.789 16.84 443.664 16.828 cv
443.535 16.812 443.434 16.797 443.359 16.77 cv
443.281 16.746 443.23 16.711 443.203 16.672 cv
443.172 16.633 443.156 16.59 443.16 16.535 cv
443.16 10.91 li
442.289 10.91 li
442.188 10.914 442.113 10.852 442.066 10.727 cv
442.016 10.605 441.988 10.402 441.992 10.113 cv
441.988 9.96503 441.996 9.836 442.012 9.73401 cv
442.023 9.633 442.043 9.55103 442.066 9.48798 cv
442.09 9.42999 442.121 9.38702 442.16 9.35901 cv
442.199 9.336 442.242 9.32397 442.297 9.32001 cv
443.16 9.32001 li
443.16 8.73401 li
443.156 8.26599 443.203 7.85199 443.301 7.492 cv
443.391 7.13702 443.539 6.84003 443.742 6.60498 cv
443.941 6.37097 444.195 6.19501 444.504 6.07001 cv
444.813 5.953 445.176 5.89099 445.602 5.89099 cv
445.797 5.89099 445.988 5.90997 446.176 5.94098 cv
446.355 5.97998 446.5 6.01599 446.605 6.05103 cv
446.707 6.09399 446.777 6.12903 446.816 6.15997 cv
446.852 6.19501 446.883 6.24597 446.906 6.30902 cv
446.93 6.375 446.945 6.45697 446.957 6.55902 cv
446.965 6.65997 446.969 6.78497 446.973 6.93402 cv
cp
f
457.52 13.777 mo
457.516 14.309 457.418 14.773 457.223 15.172 cv
457.023 15.574 456.758 15.91 456.422 16.176 cv
456.082 16.445 455.684 16.645 455.234 16.777 cv
454.781 16.91 454.301 16.977 453.789 16.98 cv
453.438 16.977 453.113 16.949 452.816 16.895 cv
452.516 16.836 452.254 16.77 452.027 16.687 cv
451.797 16.609 451.605 16.523 451.453 16.434 cv
451.301 16.348 451.191 16.27 451.125 16.199 cv
451.055 16.133 451.004 16.035 450.98 15.91 cv
450.949 15.785 450.938 15.602 450.938 15.359 cv
450.938 15.199 450.941 15.066 450.953 14.953 cv
450.961 14.848 450.977 14.758 451.004 14.687 cv
451.023 14.621 451.055 14.574 451.098 14.543 cv
451.133 14.52 451.18 14.504 451.23 14.5 cv
451.301 14.504 451.402 14.547 451.539 14.629 cv
451.668 14.719 451.84 14.812 452.051 14.914 cv
452.258 15.02 452.504 15.117 452.793 15.199 cv
453.078 15.289 453.414 15.332 453.797 15.328 cv
454.047 15.332 454.27 15.301 454.465 15.238 cv
454.66 15.18 454.828 15.094 454.969 14.984 cv
455.105 14.875 455.211 14.742 455.285 14.582 cv
455.355 14.422 455.391 14.242 455.395 14.043 cv
455.391 13.816 455.328 13.621 455.207 13.453 cv
455.078 13.293 454.914 13.148 454.719 13.02 cv
454.516 12.895 454.289 12.773 454.035 12.66 cv
453.781 12.551 453.52 12.434 453.25 12.305 cv
452.977 12.184 452.715 12.039 452.461 11.879 cv
452.207 11.723 451.98 11.535 451.781 11.312 cv
451.578 11.094 451.414 10.832 451.293 10.527 cv
451.168 10.227 451.105 9.867 451.109 9.44501 cv
451.105 8.96503 451.195 8.539 451.375 8.172 cv
451.551 7.80902 451.793 7.50403 452.102 7.258 cv
452.402 7.02002 452.762 6.84003 453.176 6.71899 cv
453.59 6.60199 454.027 6.54303 454.488 6.539 cv
454.727 6.54303 454.965 6.55902 455.207 6.59399 cv
455.445 6.633 455.668 6.68402 455.875 6.742 cv
456.082 6.80499 456.266 6.875 456.43 6.94897 cv
456.586 7.03101 456.695 7.09399 456.75 7.14502 cv
456.801 7.19897 456.836 7.24597 456.855 7.27698 cv
456.871 7.31598 456.887 7.36298 456.902 7.422 cv
456.914 7.48401 456.922 7.55902 456.93 7.64801 cv
456.934 7.742 456.938 7.85498 456.938 7.98798 cv
456.938 8.14099 456.934 8.27002 456.926 8.37097 cv
456.918 8.47699 456.902 8.56201 456.887 8.625 cv
456.863 8.69501 456.84 8.742 456.809 8.77301 cv
456.773 8.80499 456.727 8.82001 456.672 8.82001 cv
456.613 8.82001 456.523 8.78497 456.398 8.711 cv
456.273 8.64099 456.117 8.56201 455.938 8.47302 cv
455.754 8.39099 455.547 8.31201 455.309 8.242 cv
455.066 8.17603 454.801 8.14099 454.52 8.13702 cv
454.293 8.14099 454.102 8.16803 453.938 8.21899 cv
453.77 8.27301 453.629 8.34802 453.52 8.44098 cv
453.406 8.539 453.324 8.65601 453.27 8.789 cv
453.215 8.92999 453.188 9.07001 453.188 9.21899 cv
453.188 9.44501 453.246 9.64099 453.371 9.80103 cv
453.488 9.96503 453.652 10.109 453.863 10.234 cv
454.066 10.363 454.301 10.484 454.559 10.594 cv
454.816 10.711 455.082 10.828 455.355 10.949 cv
455.625 11.078 455.887 11.219 456.148 11.375 cv
456.406 11.531 456.641 11.723 456.844 11.941 cv
457.047 12.168 457.207 12.426 457.332 12.723 cv
457.453 13.02 457.516 13.371 457.52 13.777 cv
cp
f
465.57 16.535 mo
465.566 16.59 465.555 16.633 465.531 16.672 cv
465.504 16.711 465.457 16.746 465.395 16.77 cv
465.328 16.797 465.242 16.812 465.137 16.828 cv
465.031 16.84 464.898 16.848 464.738 16.848 cv
464.563 16.848 464.422 16.84 464.32 16.828 cv
464.211 16.812 464.129 16.797 464.066 16.77 cv
464.004 16.746 463.957 16.711 463.934 16.672 cv
463.902 16.633 463.891 16.59 463.895 16.535 cv
463.895 15.734 li
463.508 16.148 463.117 16.461 462.723 16.668 cv
462.32 16.875 461.91 16.977 461.488 16.98 cv
461.008 16.977 460.605 16.902 460.281 16.746 cv
459.957 16.594 459.695 16.379 459.496 16.109 cv
459.293 15.84 459.148 15.527 459.066 15.168 cv
458.977 14.812 458.934 14.371 458.938 13.84 cv
458.938 9.586 li
458.934 9.539 458.949 9.492 458.98 9.44897 cv
459.008 9.414 459.059 9.383 459.137 9.35199 cv
459.211 9.328 459.313 9.30902 459.441 9.29303 cv
459.566 9.28497 459.723 9.27698 459.914 9.27301 cv
460.102 9.27698 460.262 9.28497 460.387 9.29303 cv
460.512 9.30902 460.609 9.328 460.688 9.35199 cv
460.758 9.383 460.813 9.414 460.848 9.44897 cv
460.875 9.492 460.891 9.539 460.895 9.586 cv
460.895 13.512 li
460.891 13.879 460.914 14.156 460.965 14.348 cv
461.008 14.539 461.078 14.703 461.18 14.84 cv
461.273 14.98 461.398 15.086 461.547 15.16 cv
461.695 15.238 461.867 15.277 462.063 15.273 cv
462.313 15.277 462.563 15.187 462.816 15 cv
463.066 14.82 463.336 14.555 463.621 14.207 cv
463.621 9.586 li
463.621 9.539 463.633 9.492 463.664 9.44897 cv
463.688 9.414 463.742 9.383 463.82 9.35199 cv
463.895 9.328 463.992 9.30902 464.121 9.29303 cv
464.242 9.28497 464.402 9.27698 464.598 9.27301 cv
464.789 9.27698 464.945 9.28497 465.07 9.29303 cv
465.191 9.30902 465.293 9.328 465.367 9.35199 cv
465.438 9.383 465.488 9.414 465.523 9.44897 cv
465.551 9.492 465.566 9.539 465.57 9.586 cv
cp
f
474.547 12.965 mo
474.547 13.586 474.477 14.145 474.344 14.637 cv
474.203 15.133 474.008 15.551 473.758 15.898 cv
473.5 16.246 473.188 16.516 472.82 16.699 cv
472.445 16.887 472.023 16.977 471.555 16.98 cv
471.316 16.977 471.098 16.953 470.898 16.914 cv
470.691 16.867 470.5 16.801 470.316 16.699 cv
470.133 16.605 469.949 16.48 469.773 16.324 cv
469.59 16.176 469.406 15.992 469.223 15.781 cv
469.223 16.535 li
469.219 16.598 469.207 16.645 469.18 16.68 cv
469.148 16.723 469.102 16.754 469.039 16.777 cv
468.973 16.801 468.883 16.816 468.777 16.832 cv
468.668 16.84 468.539 16.848 468.383 16.848 cv
468.219 16.848 468.082 16.84 467.98 16.832 cv
467.871 16.816 467.785 16.801 467.723 16.777 cv
467.652 16.754 467.609 16.723 467.586 16.68 cv
467.559 16.645 467.543 16.598 467.547 16.535 cv
467.547 6.289 li
467.543 6.23798 467.559 6.19098 467.594 6.14801 cv
467.621 6.10901 467.676 6.07397 467.754 6.04303 cv
467.828 6.01599 467.93 5.99597 468.055 5.97699 cv
468.18 5.96503 468.336 5.95697 468.531 5.953 cv
468.719 5.95697 468.879 5.96503 469.004 5.97699 cv
469.129 5.99597 469.227 6.01599 469.305 6.04303 cv
469.375 6.07397 469.43 6.10901 469.465 6.14801 cv
469.492 6.19098 469.508 6.23798 469.512 6.289 cv
469.512 10.129 li
469.688 9.953 469.863 9.80499 470.043 9.67999 cv
470.215 9.55902 470.391 9.453 470.57 9.37097 cv
470.742 9.29303 470.926 9.23401 471.117 9.19501 cv
471.301 9.15997 471.5 9.14502 471.711 9.14099 cv
472.223 9.14502 472.656 9.24597 473.02 9.44897 cv
473.375 9.65601 473.668 9.93402 473.895 10.281 cv
474.117 10.629 474.281 11.035 474.391 11.5 cv
474.492 11.965 474.547 12.453 474.547 12.965 cv
cp
472.512 13.105 mo
472.508 12.812 472.484 12.527 472.445 12.25 cv
472.398 11.977 472.324 11.734 472.215 11.52 cv
472.105 11.309 471.961 11.137 471.789 11.008 cv
471.613 10.883 471.395 10.82 471.133 10.816 cv
471 10.82 470.875 10.836 470.75 10.871 cv
470.625 10.91 470.496 10.973 470.363 11.059 cv
470.23 11.148 470.094 11.266 469.957 11.402 cv
469.813 11.543 469.664 11.715 469.512 11.922 cv
469.512 14.23 li
469.785 14.586 470.047 14.855 470.301 15.035 cv
470.551 15.223 470.816 15.312 471.094 15.312 cv
471.348 15.312 471.563 15.25 471.742 15.117 cv
471.914 14.992 472.063 14.824 472.18 14.613 cv
472.297 14.41 472.379 14.172 472.434 13.902 cv
472.48 13.641 472.508 13.375 472.512 13.105 cv
cp
f
479.605 12.883 mo
479.602 13.184 479.574 13.395 479.52 13.512 cv
479.461 13.637 479.371 13.695 479.246 13.691 cv
476.004 13.691 li
475.875 13.695 475.781 13.633 475.727 13.508 cv
475.664 13.387 475.637 13.18 475.641 12.883 cv
475.637 12.594 475.664 12.387 475.727 12.266 cv
475.781 12.148 475.875 12.09 476.004 12.086 cv
479.246 12.086 li
479.309 12.09 479.359 12.102 479.406 12.125 cv
479.445 12.152 479.484 12.199 479.52 12.258 cv
479.547 12.324 479.57 12.406 479.586 12.508 cv
479.598 12.613 479.602 12.738 479.605 12.883 cv
cp
f
483.258 16.52 mo
483.254 16.574 483.238 16.621 483.207 16.66 cv
483.172 16.703 483.113 16.738 483.039 16.762 cv
482.957 16.789 482.855 16.809 482.727 16.824 cv
482.594 16.84 482.426 16.848 482.23 16.848 cv
482.027 16.848 481.863 16.84 481.734 16.824 cv
481.598 16.809 481.492 16.789 481.418 16.762 cv
481.336 16.738 481.281 16.703 481.25 16.66 cv
481.215 16.621 481.195 16.574 481.199 16.52 cv
481.199 6.99597 li
481.195 6.94897 481.215 6.90198 481.25 6.85498 cv
481.281 6.81598 481.336 6.78101 481.422 6.75403 cv
481.5 6.72998 481.605 6.711 481.738 6.69098 cv
481.863 6.67999 482.027 6.672 482.23 6.66803 cv
482.426 6.672 482.594 6.67999 482.727 6.69098 cv
482.855 6.711 482.957 6.72998 483.039 6.75403 cv
483.113 6.78101 483.172 6.81598 483.207 6.85498 cv
483.238 6.90198 483.254 6.94897 483.258 6.99597 cv
cp
f
496.336 16.535 mo
496.332 16.59 496.316 16.633 496.289 16.672 cv
496.254 16.711 496.203 16.746 496.133 16.77 cv
496.059 16.797 495.957 16.812 495.836 16.828 cv
495.711 16.84 495.555 16.848 495.363 16.848 cv
495.164 16.848 495.004 16.84 494.879 16.828 cv
494.754 16.812 494.652 16.797 494.578 16.77 cv
494.5 16.746 494.449 16.711 494.422 16.672 cv
494.395 16.633 494.379 16.59 494.383 16.535 cv
494.383 12.414 li
494.379 12.184 494.359 11.969 494.316 11.773 cv
494.27 11.582 494.199 11.418 494.113 11.281 cv
494.02 11.145 493.906 11.039 493.77 10.961 cv
493.629 10.887 493.465 10.848 493.273 10.848 cv
493.039 10.848 492.801 10.941 492.563 11.121 cv
492.324 11.305 492.066 11.566 491.785 11.914 cv
491.785 16.535 li
491.785 16.59 491.77 16.633 491.738 16.672 cv
491.707 16.711 491.652 16.746 491.578 16.77 cv
491.5 16.797 491.398 16.812 491.277 16.828 cv
491.152 16.84 491 16.848 490.813 16.848 cv
490.617 16.848 490.457 16.84 490.336 16.828 cv
490.207 16.812 490.105 16.797 490.035 16.77 cv
489.957 16.746 489.906 16.711 489.875 16.672 cv
489.844 16.633 489.828 16.59 489.828 16.535 cv
489.828 12.414 li
489.828 12.184 489.805 11.969 489.762 11.773 cv
489.719 11.582 489.652 11.418 489.566 11.281 cv
489.473 11.145 489.359 11.039 489.223 10.961 cv
489.078 10.887 488.914 10.848 488.73 10.848 cv
488.488 10.848 488.25 10.941 488.012 11.121 cv
487.773 11.305 487.516 11.566 487.242 11.914 cv
487.242 16.535 li
487.238 16.59 487.223 16.633 487.195 16.672 cv
487.16 16.711 487.105 16.746 487.035 16.77 cv
486.957 16.797 486.859 16.812 486.734 16.828 cv
486.609 16.84 486.449 16.848 486.262 16.848 cv
486.066 16.848 485.91 16.84 485.785 16.828 cv
485.66 16.812 485.559 16.797 485.484 16.77 cv
485.406 16.746 485.352 16.711 485.324 16.672 cv
485.289 16.633 485.273 16.59 485.277 16.535 cv
485.277 9.586 li
485.273 9.539 485.289 9.492 485.316 9.44897 cv
485.34 9.414 485.387 9.383 485.457 9.35199 cv
485.523 9.328 485.609 9.30902 485.719 9.29303 cv
485.824 9.28497 485.957 9.27698 486.121 9.27301 cv
486.285 9.27698 486.422 9.28497 486.531 9.29303 cv
486.637 9.30902 486.723 9.328 486.785 9.35199 cv
486.844 9.383 486.887 9.414 486.914 9.44897 cv
486.938 9.492 486.949 9.539 486.953 9.586 cv
486.953 10.387 li
487.336 9.97699 487.719 9.664 488.102 9.453 cv
488.48 9.24597 488.883 9.14502 489.301 9.14099 cv
489.586 9.14502 489.84 9.172 490.07 9.22998 cv
490.297 9.29303 490.504 9.37903 490.684 9.48798 cv
490.863 9.60199 491.016 9.73798 491.145 9.89099 cv
491.273 10.047 491.383 10.219 491.473 10.41 cv
491.68 10.187 491.883 9.99597 492.086 9.836 cv
492.281 9.67603 492.48 9.54303 492.676 9.44098 cv
492.871 9.34003 493.066 9.26599 493.262 9.21503 cv
493.457 9.16803 493.656 9.14502 493.859 9.14099 cv
494.32 9.14502 494.707 9.22302 495.027 9.375 cv
495.34 9.53497 495.598 9.74597 495.793 10.012 cv
495.988 10.281 496.125 10.594 496.211 10.949 cv
496.289 11.309 496.332 11.687 496.336 12.086 cv
cp
f
504.18 16.559 mo
504.176 16.637 504.148 16.691 504.102 16.73 cv
504.047 16.773 503.965 16.801 503.855 16.82 cv
503.738 16.836 503.574 16.848 503.359 16.848 cv
503.121 16.848 502.949 16.836 502.848 16.82 cv
502.738 16.801 502.664 16.773 502.625 16.73 cv
502.578 16.691 502.559 16.637 502.559 16.559 cv
502.559 16.008 li
502.27 16.316 501.941 16.555 501.578 16.723 cv
501.211 16.895 500.805 16.977 500.359 16.98 cv
499.988 16.977 499.648 16.93 499.34 16.836 cv
499.031 16.742 498.766 16.602 498.539 16.406 cv
498.313 16.219 498.137 15.984 498.012 15.703 cv
497.887 15.426 497.824 15.098 497.828 14.719 cv
497.824 14.32 497.902 13.969 498.063 13.664 cv
498.219 13.367 498.457 13.121 498.773 12.926 cv
499.086 12.734 499.477 12.59 499.945 12.492 cv
500.414 12.402 500.957 12.355 501.574 12.352 cv
502.254 12.352 li
502.254 11.93 li
502.254 11.715 502.23 11.523 502.188 11.359 cv
502.141 11.199 502.066 11.062 501.969 10.949 cv
501.863 10.844 501.73 10.762 501.563 10.707 cv
501.391 10.656 501.18 10.633 500.938 10.629 cv
500.605 10.633 500.313 10.668 500.059 10.738 cv
499.797 10.812 499.57 10.895 499.375 10.98 cv
499.176 11.074 499.012 11.152 498.883 11.223 cv
498.746 11.297 498.637 11.336 498.559 11.332 cv
498.496 11.336 498.445 11.316 498.406 11.277 cv
498.359 11.242 498.324 11.191 498.297 11.121 cv
498.266 11.059 498.242 10.973 498.23 10.871 cv
498.211 10.773 498.203 10.664 498.207 10.543 cv
498.203 10.383 498.219 10.258 498.246 10.16 cv
498.27 10.07 498.316 9.98401 498.395 9.90601 cv
498.465 9.83197 498.594 9.75 498.777 9.65997 cv
498.957 9.57001 499.168 9.48401 499.414 9.40601 cv
499.656 9.328 499.926 9.26599 500.215 9.21503 cv
500.504 9.16803 500.801 9.14502 501.109 9.14099 cv
501.652 9.14502 502.117 9.19501 502.504 9.30103 cv
502.891 9.40997 503.211 9.57397 503.461 9.79303 cv
503.711 10.012 503.891 10.297 504.008 10.645 cv
504.117 10.996 504.176 11.41 504.18 11.883 cv
cp
502.254 13.582 mo
501.504 13.582 li
501.188 13.586 500.918 13.609 500.695 13.652 cv
500.469 13.703 500.285 13.773 500.148 13.863 cv
500.004 13.961 499.902 14.074 499.84 14.203 cv
499.773 14.34 499.738 14.488 499.742 14.656 cv
499.738 14.949 499.832 15.18 500.02 15.344 cv
500.203 15.512 500.461 15.594 500.789 15.594 cv
501.063 15.594 501.313 15.523 501.547 15.383 cv
501.773 15.242 502.012 15.039 502.254 14.766 cv
cp
f
512.402 10.066 mo
512.398 10.32 512.371 10.504 512.316 10.621 cv
512.258 10.742 512.188 10.801 512.109 10.801 cv
511.289 10.801 li
511.402 10.926 511.484 11.07 511.535 11.227 cv
511.582 11.387 511.605 11.551 511.609 11.719 cv
511.605 12.129 511.539 12.488 511.406 12.801 cv
511.27 13.117 511.074 13.383 510.824 13.594 cv
510.57 13.812 510.27 13.977 509.914 14.086 cv
509.555 14.203 509.156 14.258 508.727 14.254 cv
508.5 14.258 508.289 14.23 508.086 14.172 cv
507.883 14.121 507.727 14.059 507.617 13.98 cv
507.555 14.051 507.496 14.129 507.449 14.223 cv
507.398 14.316 507.375 14.422 507.379 14.531 cv
507.375 14.687 507.441 14.809 507.574 14.902 cv
507.703 15 507.891 15.055 508.133 15.062 cv
509.824 15.125 li
510.219 15.141 510.57 15.199 510.879 15.293 cv
511.188 15.395 511.449 15.527 511.66 15.699 cv
511.871 15.875 512.031 16.086 512.141 16.328 cv
512.25 16.574 512.305 16.848 512.309 17.16 cv
512.305 17.496 512.23 17.82 512.082 18.129 cv
511.934 18.43 511.707 18.691 511.406 18.918 cv
511.102 19.137 510.723 19.316 510.27 19.449 cv
509.813 19.578 509.281 19.641 508.68 19.645 cv
508.082 19.641 507.578 19.594 507.16 19.504 cv
506.742 19.406 506.398 19.277 506.133 19.113 cv
505.863 18.945 505.668 18.746 505.551 18.52 cv
505.426 18.285 505.367 18.031 505.367 17.758 cv
505.367 17.586 505.387 17.426 505.434 17.27 cv
505.473 17.113 505.539 16.961 505.629 16.82 cv
505.711 16.676 505.816 16.543 505.941 16.41 cv
506.066 16.281 506.207 16.156 506.371 16.035 cv
506.145 15.922 505.973 15.762 505.852 15.551 cv
505.73 15.348 505.672 15.121 505.672 14.875 cv
505.672 14.574 505.738 14.297 505.879 14.039 cv
506.016 13.789 506.199 13.559 506.426 13.355 cv
506.242 13.176 506.098 12.961 505.988 12.703 cv
505.879 12.453 505.824 12.133 505.828 11.75 cv
505.824 11.348 505.895 10.988 506.039 10.664 cv
506.18 10.348 506.379 10.078 506.637 9.85498 cv
506.891 9.63702 507.195 9.46503 507.547 9.34802 cv
507.898 9.22998 508.289 9.172 508.719 9.172 cv
508.938 9.172 509.145 9.18701 509.344 9.211 cv
509.543 9.242 509.73 9.27698 509.902 9.32001 cv
512.109 9.32001 li
512.191 9.32397 512.262 9.383 512.32 9.492 cv
512.371 9.60901 512.398 9.80103 512.402 10.066 cv
cp
509.887 11.711 mo
509.883 11.34 509.781 11.051 509.574 10.84 cv
509.363 10.637 509.07 10.531 508.695 10.527 cv
508.5 10.531 508.328 10.562 508.188 10.625 cv
508.039 10.691 507.918 10.781 507.824 10.891 cv
507.723 11.004 507.652 11.133 507.609 11.281 cv
507.559 11.43 507.535 11.586 507.539 11.742 cv
507.535 12.102 507.641 12.379 507.852 12.582 cv
508.059 12.789 508.348 12.895 508.719 12.891 cv
508.914 12.895 509.082 12.863 509.23 12.797 cv
509.371 12.738 509.492 12.652 509.594 12.539 cv
509.688 12.434 509.762 12.305 509.813 12.16 cv
509.859 12.02 509.883 11.871 509.887 11.711 cv
cp
510.348 17.262 mo
510.348 17.023 510.254 16.848 510.066 16.723 cv
509.879 16.602 509.621 16.531 509.293 16.52 cv
507.898 16.48 li
507.762 16.582 507.652 16.676 507.574 16.766 cv
507.492 16.855 507.43 16.941 507.383 17.027 cv
507.332 17.109 507.297 17.191 507.285 17.27 cv
507.266 17.348 507.258 17.426 507.262 17.512 cv
507.258 17.766 507.391 17.965 507.652 18.102 cv
507.914 18.234 508.285 18.301 508.766 18.305 cv
509.059 18.301 509.305 18.27 509.512 18.215 cv
509.711 18.152 509.875 18.074 510.004 17.977 cv
510.125 17.875 510.215 17.766 510.27 17.645 cv
510.32 17.523 510.348 17.395 510.348 17.262 cv
cp
f
520.012 12.859 mo
520.008 13.098 519.957 13.273 519.852 13.387 cv
519.742 13.504 519.594 13.562 519.414 13.559 cv
515.18 13.559 li
515.176 13.859 515.211 14.129 515.285 14.367 cv
515.352 14.609 515.465 14.812 515.621 14.98 cv
515.773 15.152 515.969 15.281 516.211 15.367 cv
516.449 15.457 516.738 15.5 517.082 15.5 cv
517.422 15.5 517.723 15.477 517.984 15.426 cv
518.242 15.379 518.469 15.324 518.66 15.262 cv
518.848 15.203 519.004 15.148 519.133 15.098 cv
519.254 15.051 519.355 15.027 519.438 15.023 cv
519.48 15.027 519.52 15.035 519.555 15.051 cv
519.582 15.07 519.609 15.102 519.629 15.148 cv
519.648 15.195 519.66 15.262 519.672 15.348 cv
519.676 15.434 519.68 15.543 519.684 15.672 cv
519.68 15.789 519.68 15.887 519.676 15.965 cv
519.668 16.047 519.66 16.113 519.652 16.168 cv
519.641 16.227 519.625 16.277 519.605 16.312 cv
519.586 16.355 519.559 16.391 519.527 16.426 cv
519.492 16.465 519.398 16.516 519.25 16.574 cv
519.094 16.641 518.902 16.703 518.672 16.758 cv
518.434 16.82 518.164 16.867 517.867 16.914 cv
517.563 16.953 517.242 16.977 516.902 16.98 cv
516.281 16.977 515.738 16.902 515.277 16.746 cv
514.809 16.594 514.422 16.355 514.113 16.039 cv
513.797 15.723 513.563 15.324 513.414 14.84 cv
513.258 14.359 513.184 13.793 513.188 13.137 cv
513.184 12.523 513.262 11.965 513.426 11.469 cv
513.582 10.973 513.816 10.555 514.129 10.207 cv
514.434 9.86298 514.809 9.59802 515.246 9.414 cv
515.684 9.23401 516.176 9.14502 516.73 9.14099 cv
517.309 9.14502 517.809 9.22998 518.223 9.39801 cv
518.637 9.57397 518.973 9.81201 519.238 10.113 cv
519.5 10.418 519.695 10.777 519.824 11.191 cv
519.945 11.609 520.008 12.059 520.012 12.547 cv
cp
518.109 12.297 mo
518.121 11.746 518.012 11.312 517.777 11 cv
517.543 10.687 517.176 10.531 516.684 10.527 cv
516.434 10.531 516.219 10.578 516.035 10.668 cv
515.848 10.766 515.695 10.891 515.574 11.047 cv
515.449 11.207 515.355 11.395 515.293 11.609 cv
515.227 11.824 515.188 12.055 515.18 12.297 cv
cp
f
526.512 14.57 mo
526.508 14.969 526.434 15.316 526.289 15.617 cv
526.141 15.918 525.934 16.172 525.664 16.371 cv
525.391 16.578 525.07 16.727 524.703 16.828 cv
524.336 16.926 523.934 16.977 523.504 16.98 cv
523.238 16.977 522.992 16.957 522.758 16.922 cv
522.523 16.879 522.313 16.832 522.125 16.773 cv
521.938 16.715 521.781 16.652 521.656 16.59 cv
521.531 16.527 521.438 16.469 521.383 16.414 cv
521.324 16.359 521.281 16.277 521.254 16.16 cv
521.219 16.047 521.203 15.871 521.207 15.641 cv
521.203 15.492 521.211 15.371 521.223 15.277 cv
521.23 15.187 521.246 15.117 521.27 15.059 cv
521.289 15.008 521.313 14.969 521.348 14.949 cv
521.375 14.934 521.414 14.926 521.461 14.922 cv
521.516 14.926 521.602 14.957 521.715 15.02 cv
521.824 15.086 521.961 15.16 522.133 15.234 cv
522.297 15.316 522.492 15.387 522.711 15.453 cv
522.93 15.523 523.18 15.559 523.465 15.555 cv
523.641 15.559 523.797 15.539 523.938 15.5 cv
524.07 15.465 524.191 15.414 524.297 15.344 cv
524.395 15.277 524.469 15.191 524.523 15.086 cv
524.57 14.984 524.598 14.863 524.602 14.727 cv
524.598 14.57 524.551 14.437 524.457 14.328 cv
524.363 14.219 524.234 14.121 524.078 14.035 cv
523.914 13.953 523.734 13.875 523.539 13.801 cv
523.336 13.73 523.133 13.652 522.922 13.559 cv
522.711 13.473 522.504 13.371 522.309 13.254 cv
522.105 13.145 521.926 13.004 521.77 12.836 cv
521.605 12.672 521.48 12.473 521.387 12.234 cv
521.293 12.004 521.246 11.723 521.246 11.391 cv
521.246 11.062 521.309 10.758 521.438 10.477 cv
521.566 10.203 521.754 9.96503 522 9.76599 cv
522.242 9.57001 522.539 9.41803 522.891 9.30499 cv
523.238 9.19897 523.633 9.14502 524.074 9.14099 cv
524.289 9.14502 524.5 9.15997 524.707 9.18701 cv
524.91 9.22302 525.098 9.26202 525.266 9.30499 cv
525.43 9.35498 525.57 9.40601 525.688 9.45697 cv
525.801 9.51599 525.883 9.56201 525.934 9.59802 cv
525.98 9.64099 526.016 9.67999 526.039 9.71503 cv
526.059 9.758 526.07 9.80499 526.082 9.85498 cv
526.09 9.90997 526.102 9.97699 526.109 10.055 cv
526.117 10.141 526.121 10.238 526.121 10.355 cv
526.121 10.496 526.117 10.613 526.109 10.699 cv
526.102 10.793 526.086 10.863 526.07 10.91 cv
526.051 10.965 526.027 11 526 11.016 cv
525.965 11.039 525.93 11.047 525.891 11.043 cv
525.84 11.047 525.766 11.02 525.672 10.961 cv
525.57 10.91 525.449 10.852 525.301 10.785 cv
525.152 10.727 524.98 10.668 524.785 10.609 cv
524.59 10.559 524.367 10.531 524.121 10.527 cv
523.941 10.531 523.789 10.551 523.66 10.582 cv
523.527 10.621 523.418 10.672 523.34 10.738 cv
523.254 10.809 523.191 10.887 523.152 10.977 cv
523.105 11.07 523.086 11.168 523.09 11.27 cv
523.086 11.43 523.137 11.566 523.238 11.672 cv
523.336 11.785 523.465 11.879 523.629 11.961 cv
523.789 12.047 523.973 12.125 524.18 12.195 cv
524.383 12.27 524.59 12.352 524.801 12.434 cv
525.008 12.523 525.215 12.621 525.426 12.734 cv
525.629 12.848 525.813 12.988 525.973 13.152 cv
526.133 13.32 526.262 13.52 526.363 13.75 cv
526.457 13.984 526.508 14.258 526.512 14.57 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
