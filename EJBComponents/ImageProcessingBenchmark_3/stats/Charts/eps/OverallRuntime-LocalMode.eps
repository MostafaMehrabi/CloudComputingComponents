%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntime-LocalMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:56:14 p.m.
%%BoundingBox: 0 0 666 552
%%HiResBoundingBox: 0 0 665.2800 551.5201
%%CropBox: 0 0 665.2800 551.5201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -551.52 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 551.52 li
665.28 551.52 li
665.28 0 li
cp
clp
gsave
0 551.52 mo
666 551.52 li
666 -.47998 li
0 -.47998 li
cp
clp
0 0 mo
665.281 0 li
665.281 551.52 li
0 551.52 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
71.039 477.719 mo
648.961 477.719 li
71.039 424.559 mo
648.961 424.559 li
71.039 371.281 mo
648.961 371.281 li
71.039 318 mo
648.961 318 li
71.039 264.719 mo
648.961 264.719 li
71.039 211.559 mo
648.961 211.559 li
71.039 158.281 mo
648.961 158.281 li
71.039 105 mo
648.961 105 li
71.039 51.719 mo
648.961 51.719 li
.135805 .104005 .108583 0 cmyk
@
71.039 451.199 mo
648.961 451.199 li
71.039 397.922 mo
648.961 397.922 li
71.039 344.641 mo
648.961 344.641 li
71.039 291.359 mo
648.961 291.359 li
71.039 238.078 mo
648.961 238.078 li
71.039 184.922 mo
648.961 184.922 li
71.039 131.641 mo
648.961 131.641 li
71.039 78.359 mo
648.961 78.359 li
71.039 25.078 mo
648.961 25.078 li
.326574 .281529 .277562 0 cmyk
@
107.16 25.078 mo
107.16 504.359 li
179.398 25.078 mo
179.398 504.359 li
251.641 25.078 mo
251.641 504.359 li
323.879 25.078 mo
323.879 504.359 li
396.121 25.078 mo
396.121 504.359 li
468.359 25.078 mo
468.359 504.359 li
540.602 25.078 mo
540.602 504.359 li
612.84 25.078 mo
612.84 504.359 li
.175235 .144778 .143648 0 cmyk
@
71.039 25.078 mo
71.039 504.359 li
143.281 25.078 mo
143.281 504.359 li
215.52 25.078 mo
215.52 504.359 li
287.762 25.078 mo
287.762 504.359 li
360 25.078 mo
360 504.359 li
432.238 25.078 mo
432.238 504.359 li
504.48 25.078 mo
504.48 504.359 li
576.719 25.078 mo
576.719 504.359 li
648.961 25.078 mo
648.961 504.359 li
.326574 .281529 .277562 0 cmyk
@
37.078 495.121 mo
57.961 495.121 li
57.961 512.16 li
37.078 512.16 li
cp
0 0 0 0 cmyk
ef
37.078 441.84 mo
57.961 441.84 li
57.961 458.879 li
37.078 458.879 li
cp
ef
37.078 388.559 mo
57.961 388.559 li
57.961 405.719 li
37.078 405.719 li
cp
ef
37.078 335.281 mo
57.961 335.281 li
57.961 352.441 li
37.078 352.441 li
cp
ef
30 282.121 mo
57.961 282.121 li
57.961 299.16 li
30 299.16 li
cp
ef
30 228.84 mo
57.961 228.84 li
57.961 245.879 li
30 245.879 li
cp
ef
30 175.559 mo
57.961 175.559 li
57.961 192.602 li
30 192.602 li
cp
ef
30 122.281 mo
57.961 122.281 li
57.961 139.441 li
30 139.441 li
cp
ef
30 69 mo
57.961 69 li
57.961 86.16 li
30 86.16 li
cp
ef
30 15.84 mo
57.961 15.84 li
57.961 32.879 li
30 32.879 li
cp
ef
.96 lw
71.039 504.359 mo
648.961 504.359 li
.369879 .299321 .304356 .000976577 cmyk
@
71.039 504.359 mo
71.039 508.801 li
143.281 504.359 mo
143.281 508.801 li
215.52 504.359 mo
215.52 508.801 li
287.762 504.359 mo
287.762 508.801 li
360 504.359 mo
360 508.801 li
432.238 504.359 mo
432.238 508.801 li
504.48 504.359 mo
504.48 508.801 li
576.719 504.359 mo
576.719 508.801 li
648.961 504.359 mo
648.961 508.801 li
@
gsave
70.922 25.078 mo
649.68 25.078 li
649.68 505.078 li
70.922 505.078 li
cp
clp
1 lc
71.039 44.762 mo
143.281 136.32 li
215.52 129.961 li
287.762 126.238 li
360 111.121 li
432.238 111.121 li
504.48 110.16 li
576.719 110.762 li
648.961 109.199 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
75.93 49.672 mo
65.852 39.59 li
65.852 49.672 mo
75.93 39.59 li
.62829 .284672 0 0 cmyk
@
148.172 141.23 mo
138.09 131.148 li
138.09 141.23 mo
148.172 131.148 li
@
220.41 134.871 mo
210.328 124.789 li
210.328 134.871 mo
220.41 124.789 li
@
292.648 131.27 mo
282.57 121.191 li
282.57 131.27 mo
292.648 121.191 li
@
364.891 116.148 mo
354.809 106.07 li
354.809 116.148 mo
364.891 106.07 li
@
437.129 116.148 mo
427.051 106.07 li
427.051 116.148 mo
437.129 106.07 li
@
509.371 115.07 mo
499.289 104.988 li
499.289 115.07 mo
509.371 104.988 li
@
581.73 115.672 mo
571.648 105.59 li
571.648 115.672 mo
581.73 105.59 li
@
653.969 114.23 mo
643.891 104.148 li
643.891 114.23 mo
653.969 104.148 li
@
gsave
70.922 25.078 mo
649.68 25.078 li
649.68 505.078 li
70.922 505.078 li
cp
clp
.96 lw
1 lc
71.039 262.68 mo
143.281 345.121 li
215.52 315.84 li
287.762 305.641 li
360 305.281 li
432.238 305.039 li
504.48 305.281 li
576.719 305.281 li
648.961 304.559 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
75.93 267.59 mo
65.852 257.512 li
65.852 267.59 mo
75.93 257.512 li
.0321965 .622736 .922606 .000579843 cmyk
@
148.172 350.031 mo
138.09 339.949 li
138.09 350.031 mo
148.172 339.949 li
@
220.41 320.871 mo
210.328 310.789 li
210.328 320.871 mo
220.41 310.789 li
@
292.648 310.672 mo
282.57 300.59 li
282.57 310.672 mo
292.648 300.59 li
@
364.891 310.191 mo
354.809 300.109 li
354.809 310.191 mo
364.891 300.109 li
@
437.129 309.949 mo
427.051 299.871 li
427.051 309.949 mo
437.129 299.871 li
@
509.371 310.191 mo
499.289 300.109 li
499.289 310.191 mo
509.371 300.109 li
@
581.73 310.191 mo
571.648 300.109 li
571.648 310.191 mo
581.73 300.109 li
@
653.969 309.59 mo
643.891 299.512 li
643.891 309.59 mo
653.969 299.512 li
@
gsave
70.922 25.078 mo
649.68 25.078 li
649.68 505.078 li
70.922 505.078 li
cp
clp
.96 lw
1 lc
71.039 337.199 mo
143.281 373.199 li
215.52 350.762 li
287.762 351 li
360 345.121 li
432.238 344.641 li
504.48 345.48 li
576.719 344.641 li
648.961 344.641 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
75.93 342.109 mo
65.852 332.031 li
65.852 342.109 mo
75.93 332.031 li
.621118 .109194 .980743 .0040589 cmyk
@
148.172 378.109 mo
138.09 368.031 li
138.09 378.109 mo
148.172 368.031 li
@
220.41 355.789 mo
210.328 345.711 li
210.328 355.789 mo
220.41 345.711 li
@
292.648 356.031 mo
282.57 345.949 li
282.57 356.031 mo
292.648 345.949 li
@
364.891 350.031 mo
354.809 339.949 li
354.809 350.031 mo
364.891 339.949 li
@
437.129 349.551 mo
427.051 339.469 li
427.051 349.551 mo
437.129 339.469 li
@
509.371 350.512 mo
499.289 340.43 li
499.289 350.512 mo
509.371 340.43 li
@
581.73 349.551 mo
571.648 339.469 li
571.648 349.551 mo
581.73 339.469 li
@
653.969 349.551 mo
643.891 339.469 li
643.891 349.551 mo
653.969 339.469 li
@
gsave
70.922 25.078 mo
649.68 25.078 li
649.68 505.078 li
70.922 505.078 li
cp
clp
.96 lw
1 lc
71.039 370.68 mo
143.281 391.441 li
215.52 404.762 li
287.762 382.922 li
360 384.84 li
432.238 382.922 li
504.48 382.32 li
576.719 382.801 li
648.961 380.641 li
0 .993988 1 0 cmyk
@
grestore
75.93 375.59 mo
65.852 365.512 li
65.852 375.59 mo
75.93 365.512 li
0 .993988 1 0 cmyk
@
148.172 396.469 mo
138.09 386.391 li
138.09 396.469 mo
148.172 386.391 li
@
220.41 409.672 mo
210.328 399.59 li
210.328 409.672 mo
220.41 399.59 li
@
292.648 387.949 mo
282.57 377.871 li
282.57 387.949 mo
292.648 377.871 li
@
364.891 389.871 mo
354.809 379.789 li
354.809 389.871 mo
364.891 379.789 li
@
437.129 387.949 mo
427.051 377.871 li
427.051 387.949 mo
437.129 377.871 li
@
509.371 387.352 mo
499.289 377.27 li
499.289 387.352 mo
509.371 377.27 li
@
581.73 387.711 mo
571.648 377.629 li
571.648 387.711 mo
581.73 377.629 li
@
653.969 385.551 mo
643.891 375.469 li
643.891 385.551 mo
653.969 375.469 li
@
gsave
70.922 25.078 mo
649.68 25.078 li
649.68 505.078 li
70.922 505.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
71.039 371.641 mo
143.281 392.398 li
215.52 388.68 li
287.762 381.719 li
360 382.922 li
432.238 380.879 li
504.48 382.801 li
576.719 382.32 li
648.961 381.719 li
.62829 .284672 0 0 cmyk
@
grestore
75.449 376.191 mo
66.328 367.07 li
66.328 376.191 mo
75.449 367.07 li
.62829 .284672 0 0 cmyk
@
147.691 396.828 mo
138.57 387.711 li
138.57 396.828 mo
147.691 387.711 li
@
219.93 393.23 mo
210.809 384.109 li
210.809 393.23 mo
219.93 384.109 li
@
292.172 386.148 mo
283.051 377.031 li
283.051 386.148 mo
292.172 377.031 li
@
364.41 387.469 mo
355.289 378.352 li
355.289 387.469 mo
364.41 378.352 li
@
436.648 385.309 mo
427.531 376.191 li
427.531 385.309 mo
436.648 376.191 li
@
508.891 387.23 mo
499.77 378.109 li
499.77 387.23 mo
508.891 378.109 li
@
581.25 386.871 mo
572.129 377.75 li
572.129 386.871 mo
581.25 377.75 li
@
653.488 386.148 mo
644.371 377.031 li
644.371 386.148 mo
653.488 377.031 li
@
gsave
70.922 25.078 mo
649.68 25.078 li
649.68 505.078 li
70.922 505.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
71.039 370.199 mo
143.281 391.922 li
215.52 405.359 li
287.762 386.641 li
360 382.922 li
432.238 382.922 li
504.48 380.879 li
576.719 381.961 li
648.961 382.801 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
75.93 375.109 mo
65.852 365.031 li
65.852 375.109 mo
75.93 365.031 li
.0321965 .622736 .922606 .000579843 cmyk
@
148.172 396.949 mo
138.09 386.871 li
138.09 396.949 mo
148.172 386.871 li
@
220.41 410.27 mo
210.328 400.191 li
210.328 410.27 mo
220.41 400.191 li
@
292.648 391.551 mo
282.57 381.469 li
282.57 391.551 mo
292.648 381.469 li
@
364.891 387.949 mo
354.809 377.871 li
354.809 387.949 mo
364.891 377.871 li
@
437.129 387.949 mo
427.051 377.871 li
427.051 387.949 mo
437.129 377.871 li
@
509.371 385.789 mo
499.289 375.711 li
499.289 385.789 mo
509.371 375.711 li
@
581.73 386.871 mo
571.648 376.789 li
571.648 386.871 mo
581.73 376.789 li
@
653.969 387.711 mo
643.891 377.629 li
643.891 387.711 mo
653.969 377.629 li
@
gsave
70.922 25.078 mo
649.68 25.078 li
649.68 505.078 li
70.922 505.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
71.039 370.199 mo
143.281 404.039 li
215.52 404.762 li
287.762 382.922 li
360 382.801 li
432.238 383.398 li
504.48 382.32 li
576.719 381.238 li
648.961 381.961 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
75.93 375.109 mo
65.852 365.031 li
65.852 375.109 mo
75.93 365.031 li
.621118 .109194 .980743 .0040589 cmyk
@
148.172 409.07 mo
138.09 398.988 li
138.09 409.07 mo
148.172 398.988 li
@
220.41 409.672 mo
210.328 399.59 li
210.328 409.672 mo
220.41 399.59 li
@
292.648 387.949 mo
282.57 377.871 li
282.57 387.949 mo
292.648 377.871 li
@
364.891 387.711 mo
354.809 377.629 li
354.809 387.711 mo
364.891 377.629 li
@
437.129 388.43 mo
427.051 378.352 li
427.051 388.43 mo
437.129 378.352 li
@
509.371 387.352 mo
499.289 377.27 li
499.289 387.352 mo
509.371 377.27 li
@
581.73 386.27 mo
571.648 376.191 li
571.648 386.27 mo
581.73 376.191 li
@
653.969 386.871 mo
643.891 376.789 li
643.891 386.871 mo
653.969 376.789 li
@
gsave
70.922 25.078 mo
649.68 25.078 li
649.68 505.078 li
70.922 505.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
71.039 375.359 mo
143.281 388.32 li
215.52 405.719 li
287.762 402.602 li
360 385.922 li
432.238 381.961 li
504.48 398.281 li
576.719 382.32 li
648.961 381.238 li
0 .993988 1 0 cmyk
@
grestore
75.93 380.27 mo
65.852 370.191 li
65.852 380.27 mo
75.93 370.191 li
0 .993988 1 0 cmyk
@
148.172 393.23 mo
138.09 383.148 li
138.09 393.23 mo
148.172 383.148 li
@
220.41 410.75 mo
210.328 400.672 li
210.328 410.75 mo
220.41 400.672 li
@
292.648 407.512 mo
282.57 397.43 li
282.57 407.512 mo
292.648 397.43 li
@
364.891 390.949 mo
354.809 380.871 li
354.809 390.949 mo
364.891 380.871 li
@
437.129 386.871 mo
427.051 376.789 li
427.051 386.871 mo
437.129 376.789 li
@
509.371 403.309 mo
499.289 393.23 li
499.289 403.309 mo
509.371 393.23 li
@
581.73 387.352 mo
571.648 377.27 li
571.648 387.352 mo
581.73 377.27 li
@
653.969 386.27 mo
643.891 376.191 li
643.891 386.27 mo
653.969 376.191 li
@
37.098 495.066 mo
57.985 495.066 li
57.985 512.156 li
37.098 512.156 li
cp
0 0 0 0 cmyk
ef
43.734 504.031 mo
43.73 504.715 43.68 505.336 43.574 505.898 cv
43.465 506.461 43.285 506.945 43.039 507.348 cv
42.785 507.754 42.457 508.066 42.059 508.285 cv
41.652 508.508 41.16 508.617 40.574 508.617 cv
40.016 508.617 39.543 508.52 39.164 508.32 cv
38.781 508.125 38.477 507.832 38.242 507.445 cv
38.008 507.059 37.84 506.586 37.746 506.02 cv
37.645 505.457 37.598 504.809 37.598 504.074 cv
37.598 503.402 37.652 502.781 37.762 502.215 cv
37.871 501.652 38.047 501.168 38.297 500.762 cv
38.539 500.359 38.863 500.047 39.27 499.82 cv
39.668 499.602 40.164 499.488 40.754 499.488 cv
41.313 499.488 41.785 499.59 42.168 499.785 cv
42.551 499.988 42.855 500.281 43.09 500.664 cv
43.32 501.055 43.488 501.527 43.586 502.09 cv
43.684 502.652 43.73 503.301 43.734 504.031 cv
cp
42.527 504.113 mo
42.523 503.672 42.508 503.273 42.48 502.922 cv
42.445 502.57 42.398 502.262 42.34 501.992 cv
42.273 501.723 42.195 501.492 42.098 501.297 cv
42 501.105 41.883 500.945 41.746 500.816 cv
41.605 500.691 41.445 500.598 41.273 500.539 cv
41.094 500.484 40.898 500.457 40.684 500.453 cv
40.293 500.457 39.977 500.547 39.738 500.73 cv
39.492 500.914 39.301 501.168 39.164 501.484 cv
39.023 501.805 38.93 502.176 38.879 502.605 cv
38.828 503.035 38.805 503.5 38.805 503.992 cv
38.805 504.656 38.836 505.219 38.906 505.68 cv
38.973 506.148 39.082 506.527 39.234 506.816 cv
39.379 507.113 39.57 507.324 39.801 507.453 cv
40.031 507.59 40.313 507.656 40.645 507.652 cv
40.898 507.656 41.121 507.617 41.316 507.531 cv
41.508 507.453 41.676 507.332 41.816 507.176 cv
41.957 507.023 42.07 506.84 42.164 506.625 cv
42.25 506.41 42.324 506.172 42.383 505.91 cv
42.434 505.652 42.473 505.371 42.496 505.066 cv
42.516 504.762 42.523 504.445 42.527 504.113 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
46.73 507.742 mo
46.73 508.07 46.676 508.285 46.57 508.391 cv
46.461 508.496 46.266 508.547 45.984 508.551 cv
45.707 508.547 45.516 508.496 45.414 508.395 cv
45.305 508.289 45.254 508.078 45.258 507.762 cv
45.254 507.437 45.309 507.223 45.418 507.113 cv
45.523 507.008 45.719 506.953 46.004 506.953 cv
46.277 506.953 46.465 507.008 46.574 507.113 cv
46.676 507.219 46.73 507.43 46.73 507.742 cv
cp
f
54.391 504.031 mo
54.387 504.715 54.336 505.336 54.23 505.898 cv
54.121 506.461 53.941 506.945 53.695 507.348 cv
53.441 507.754 53.113 508.066 52.715 508.285 cv
52.309 508.508 51.816 508.617 51.23 508.617 cv
50.672 508.617 50.199 508.52 49.82 508.32 cv
49.438 508.125 49.133 507.832 48.898 507.445 cv
48.664 507.059 48.496 506.586 48.402 506.02 cv
48.301 505.457 48.254 504.809 48.254 504.074 cv
48.254 503.402 48.309 502.781 48.418 502.215 cv
48.527 501.652 48.703 501.168 48.953 500.762 cv
49.195 500.359 49.52 500.047 49.926 499.82 cv
50.324 499.602 50.82 499.488 51.41 499.488 cv
51.969 499.488 52.441 499.59 52.824 499.785 cv
53.207 499.988 53.512 500.281 53.746 500.664 cv
53.977 501.055 54.145 501.527 54.242 502.09 cv
54.34 502.652 54.387 503.301 54.391 504.031 cv
cp
53.184 504.113 mo
53.18 503.672 53.164 503.273 53.137 502.922 cv
53.102 502.57 53.055 502.262 52.996 501.992 cv
52.93 501.723 52.852 501.492 52.754 501.297 cv
52.656 501.105 52.539 500.945 52.402 500.816 cv
52.262 500.691 52.102 500.598 51.93 500.539 cv
51.75 500.484 51.555 500.457 51.34 500.453 cv
50.949 500.457 50.633 500.547 50.395 500.73 cv
50.148 500.914 49.957 501.168 49.82 501.484 cv
49.68 501.805 49.586 502.176 49.535 502.605 cv
49.484 503.035 49.461 503.5 49.461 503.992 cv
49.461 504.656 49.492 505.219 49.563 505.68 cv
49.629 506.148 49.738 506.527 49.891 506.816 cv
50.035 507.113 50.227 507.324 50.457 507.453 cv
50.688 507.59 50.969 507.656 51.301 507.652 cv
51.555 507.656 51.777 507.617 51.973 507.531 cv
52.164 507.453 52.332 507.332 52.473 507.176 cv
52.613 507.023 52.727 506.84 52.82 506.625 cv
52.906 506.41 52.98 506.172 53.039 505.91 cv
53.09 505.652 53.129 505.371 53.152 505.066 cv
53.172 504.762 53.18 504.445 53.184 504.113 cv
cp
f
37.098 441.82 mo
57.985 441.82 li
57.985 458.91 li
37.098 458.91 li
cp
0 0 0 0 cmyk
ef
43.449 454.723 mo
43.445 454.809 43.441 454.883 43.434 454.945 cv
43.422 455.012 43.406 455.066 43.387 455.105 cv
43.363 455.152 43.332 455.184 43.301 455.199 cv
43.262 455.223 43.227 455.23 43.191 455.23 cv
38.281 455.23 li
38.215 455.23 38.156 455.223 38.109 455.207 cv
38.059 455.191 38.02 455.168 37.988 455.129 cv
37.953 455.098 37.926 455.043 37.91 454.973 cv
37.891 454.902 37.883 454.816 37.887 454.715 cv
37.883 454.625 37.887 454.547 37.898 454.477 cv
37.902 454.41 37.918 454.348 37.945 454.293 cv
37.965 454.242 37.996 454.191 38.031 454.137 cv
38.066 454.086 38.113 454.031 38.172 453.969 cv
39.949 452.141 li
40.355 451.723 40.684 451.344 40.934 451.008 cv
41.176 450.676 41.367 450.371 41.508 450.094 cv
41.641 449.824 41.73 449.574 41.773 449.348 cv
41.813 449.121 41.832 448.91 41.836 448.715 cv
41.832 448.52 41.801 448.336 41.734 448.156 cv
41.668 447.984 41.57 447.828 41.449 447.691 cv
41.32 447.562 41.164 447.457 40.977 447.375 cv
40.785 447.301 40.57 447.262 40.328 447.258 cv
40.039 447.262 39.777 447.301 39.551 447.375 cv
39.316 447.457 39.117 447.543 38.949 447.629 cv
38.773 447.723 38.629 447.805 38.516 447.883 cv
38.398 447.961 38.313 448 38.258 448 cv
38.223 448 38.195 447.992 38.172 447.973 cv
38.145 447.957 38.121 447.926 38.105 447.883 cv
38.086 447.844 38.074 447.789 38.066 447.719 cv
38.059 447.648 38.055 447.566 38.055 447.469 cv
38.055 447.402 38.055 447.344 38.059 447.293 cv
38.063 447.242 38.07 447.199 38.082 447.16 cv
38.094 447.129 38.109 447.094 38.129 447.059 cv
38.145 447.031 38.18 446.992 38.238 446.941 cv
38.289 446.895 38.387 446.828 38.523 446.742 cv
38.656 446.66 38.824 446.578 39.031 446.5 cv
39.23 446.422 39.453 446.355 39.703 446.297 cv
39.945 446.246 40.203 446.219 40.477 446.215 cv
40.902 446.219 41.281 446.281 41.605 446.398 cv
41.926 446.523 42.191 446.687 42.41 446.895 cv
42.621 447.109 42.781 447.355 42.887 447.629 cv
42.992 447.91 43.047 448.207 43.047 448.52 cv
43.047 448.809 43.02 449.09 42.969 449.371 cv
42.918 449.652 42.813 449.957 42.648 450.285 cv
42.484 450.613 42.25 450.977 41.945 451.375 cv
41.641 451.777 41.23 452.238 40.723 452.758 cv
39.316 454.227 li
43.184 454.227 li
43.215 454.23 43.25 454.238 43.289 454.258 cv
43.32 454.281 43.352 454.312 43.379 454.352 cv
43.402 454.395 43.422 454.449 43.434 454.508 cv
43.441 454.57 43.445 454.641 43.449 454.723 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
46.691 454.48 mo
46.688 454.809 46.633 455.027 46.531 455.133 cv
46.422 455.238 46.227 455.289 45.945 455.293 cv
45.664 455.289 45.473 455.238 45.371 455.137 cv
45.262 455.031 45.211 454.82 45.215 454.504 cv
45.211 454.18 45.266 453.965 45.375 453.855 cv
45.484 453.75 45.68 453.695 45.965 453.691 cv
46.238 453.695 46.43 453.75 46.535 453.852 cv
46.637 453.961 46.688 454.168 46.691 454.48 cv
cp
f
54.07 452.375 mo
54.07 452.855 53.988 453.277 53.828 453.645 cv
53.668 454.016 53.441 454.328 53.148 454.582 cv
52.855 454.836 52.508 455.027 52.102 455.16 cv
51.695 455.293 51.246 455.359 50.754 455.359 cv
50.477 455.359 50.215 455.34 49.969 455.301 cv
49.719 455.262 49.496 455.215 49.309 455.16 cv
49.113 455.105 48.957 455.051 48.836 454.992 cv
48.711 454.937 48.633 454.895 48.598 454.859 cv
48.563 454.832 48.539 454.801 48.527 454.773 cv
48.512 454.746 48.496 454.715 48.488 454.672 cv
48.473 454.637 48.465 454.586 48.465 454.523 cv
48.457 454.465 48.457 454.395 48.461 454.309 cv
48.457 454.238 48.461 454.168 48.469 454.102 cv
48.477 454.043 48.488 453.992 48.508 453.949 cv
48.523 453.914 48.543 453.887 48.57 453.863 cv
48.594 453.848 48.625 453.836 48.66 453.836 cv
48.703 453.836 48.773 453.867 48.871 453.922 cv
48.965 453.984 49.094 454.047 49.258 454.109 cv
49.418 454.18 49.621 454.242 49.863 454.297 cv
50.102 454.359 50.387 454.387 50.719 454.387 cv
51.023 454.387 51.305 454.352 51.563 454.277 cv
51.82 454.207 52.039 454.094 52.227 453.934 cv
52.406 453.781 52.551 453.586 52.66 453.348 cv
52.762 453.113 52.816 452.824 52.82 452.484 cv
52.816 452.203 52.77 451.953 52.684 451.734 cv
52.59 451.52 52.453 451.34 52.273 451.191 cv
52.086 451.051 51.852 450.941 51.57 450.867 cv
51.281 450.801 50.945 450.766 50.555 450.762 cv
50.273 450.766 50.031 450.781 49.832 450.805 cv
49.629 450.836 49.441 450.848 49.27 450.844 cv
49.141 450.848 49.051 450.816 48.996 450.754 cv
48.941 450.695 48.914 450.582 48.914 450.41 cv
48.914 446.789 li
48.914 446.641 48.949 446.527 49.02 446.453 cv
49.09 446.383 49.191 446.348 49.324 446.344 cv
53.258 446.344 li
53.289 446.348 53.324 446.359 53.363 446.375 cv
53.395 446.398 53.426 446.43 53.449 446.469 cv
53.473 446.516 53.488 446.566 53.5 446.629 cv
53.512 446.691 53.52 446.766 53.52 446.852 cv
53.52 447.02 53.496 447.148 53.453 447.238 cv
53.41 447.332 53.348 447.379 53.27 447.375 cv
50.094 447.375 li
50.094 449.867 li
50.242 449.848 50.402 449.832 50.566 449.828 cv
50.727 449.824 50.91 449.824 51.125 449.82 cv
51.609 449.824 52.039 449.883 52.406 450.004 cv
52.773 450.125 53.078 450.297 53.324 450.516 cv
53.566 450.738 53.75 451.008 53.879 451.324 cv
54.004 451.641 54.07 451.992 54.07 452.375 cv
cp
f
37.098 388.559 mo
57.985 388.559 li
57.985 405.649 li
37.098 405.649 li
cp
0 0 0 0 cmyk
ef
43.398 399.098 mo
43.398 399.574 43.316 399.996 43.156 400.367 cv
42.996 400.738 42.77 401.051 42.48 401.305 cv
42.184 401.559 41.836 401.754 41.434 401.883 cv
41.027 402.016 40.578 402.078 40.086 402.078 cv
39.809 402.078 39.547 402.059 39.305 402.02 cv
39.055 401.98 38.836 401.934 38.648 401.879 cv
38.453 401.824 38.297 401.77 38.172 401.711 cv
38.047 401.66 37.969 401.617 37.938 401.582 cv
37.902 401.551 37.879 401.52 37.867 401.492 cv
37.852 401.465 37.836 401.434 37.828 401.391 cv
37.813 401.355 37.805 401.305 37.805 401.242 cv
37.797 401.184 37.797 401.113 37.797 401.031 cv
37.797 400.957 37.801 400.887 37.809 400.824 cv
37.816 400.762 37.828 400.711 37.848 400.672 cv
37.863 400.633 37.883 400.605 37.91 400.586 cv
37.934 400.57 37.965 400.562 37.996 400.559 cv
38.043 400.562 38.113 400.59 38.207 400.645 cv
38.301 400.703 38.43 400.766 38.594 400.832 cv
38.758 400.898 38.957 400.961 39.199 401.02 cv
39.434 401.078 39.719 401.105 40.055 401.105 cv
40.355 401.105 40.637 401.07 40.895 400.996 cv
41.148 400.926 41.371 400.812 41.559 400.656 cv
41.742 400.504 41.887 400.309 41.992 400.07 cv
42.098 399.836 42.148 399.547 42.152 399.207 cv
42.148 398.926 42.105 398.676 42.016 398.457 cv
41.926 398.238 41.789 398.059 41.605 397.914 cv
41.418 397.773 41.184 397.668 40.902 397.594 cv
40.617 397.523 40.277 397.484 39.891 397.484 cv
39.605 397.484 39.367 397.5 39.168 397.527 cv
38.965 397.559 38.777 397.574 38.605 397.57 cv
38.477 397.574 38.383 397.543 38.332 397.48 cv
38.273 397.422 38.246 397.309 38.25 397.137 cv
38.25 393.523 li
38.246 393.375 38.281 393.266 38.355 393.187 cv
38.422 393.117 38.523 393.078 38.66 393.078 cv
42.59 393.078 li
42.625 393.078 42.66 393.09 42.695 393.109 cv
42.727 393.133 42.754 393.164 42.781 393.203 cv
42.801 393.246 42.816 393.297 42.832 393.359 cv
42.84 393.426 42.848 393.504 42.852 393.586 cv
42.848 393.754 42.824 393.879 42.785 393.969 cv
42.738 394.062 42.68 394.109 42.602 394.105 cv
39.43 394.105 li
39.43 396.594 li
39.582 396.574 39.738 396.562 39.902 396.555 cv
40.059 396.551 40.246 396.547 40.461 396.547 cv
40.945 396.547 41.371 396.609 41.738 396.73 cv
42.102 396.852 42.406 397.023 42.656 397.242 cv
42.898 397.469 43.086 397.734 43.211 398.047 cv
43.336 398.363 43.398 398.715 43.398 399.098 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
46.73 401.203 mo
46.73 401.531 46.676 401.746 46.57 401.852 cv
46.461 401.957 46.266 402.008 45.984 402.012 cv
45.707 402.008 45.516 401.957 45.414 401.855 cv
45.305 401.75 45.254 401.539 45.258 401.223 cv
45.254 400.898 45.309 400.684 45.418 400.574 cv
45.523 400.469 45.719 400.414 46.004 400.414 cv
46.277 400.414 46.465 400.469 46.574 400.574 cv
46.676 400.68 46.73 400.891 46.73 401.203 cv
cp
f
54.391 397.492 mo
54.387 398.176 54.336 398.797 54.23 399.359 cv
54.121 399.922 53.941 400.406 53.695 400.809 cv
53.441 401.215 53.113 401.527 52.715 401.746 cv
52.309 401.969 51.816 402.078 51.23 402.078 cv
50.672 402.078 50.199 401.98 49.82 401.781 cv
49.438 401.586 49.133 401.293 48.898 400.906 cv
48.664 400.52 48.496 400.047 48.402 399.48 cv
48.301 398.918 48.254 398.27 48.254 397.535 cv
48.254 396.863 48.309 396.242 48.418 395.676 cv
48.527 395.113 48.703 394.629 48.953 394.223 cv
49.195 393.82 49.52 393.508 49.926 393.281 cv
50.324 393.062 50.82 392.949 51.41 392.949 cv
51.969 392.949 52.441 393.051 52.824 393.246 cv
53.207 393.449 53.512 393.742 53.746 394.125 cv
53.977 394.516 54.145 394.988 54.242 395.551 cv
54.34 396.113 54.387 396.762 54.391 397.492 cv
cp
53.184 397.574 mo
53.18 397.133 53.164 396.734 53.137 396.383 cv
53.102 396.031 53.055 395.723 52.996 395.453 cv
52.93 395.184 52.852 394.953 52.754 394.758 cv
52.656 394.566 52.539 394.406 52.402 394.277 cv
52.262 394.152 52.102 394.059 51.93 394 cv
51.75 393.945 51.555 393.918 51.34 393.914 cv
50.949 393.918 50.633 394.008 50.395 394.191 cv
50.148 394.375 49.957 394.629 49.82 394.945 cv
49.68 395.266 49.586 395.637 49.535 396.066 cv
49.484 396.496 49.461 396.961 49.461 397.453 cv
49.461 398.117 49.492 398.68 49.563 399.141 cv
49.629 399.609 49.738 399.988 49.891 400.277 cv
50.035 400.574 50.227 400.785 50.457 400.914 cv
50.688 401.051 50.969 401.117 51.301 401.113 cv
51.555 401.117 51.777 401.078 51.973 400.992 cv
52.164 400.914 52.332 400.793 52.473 400.637 cv
52.613 400.484 52.727 400.301 52.82 400.086 cv
52.906 399.871 52.98 399.633 53.039 399.371 cv
53.09 399.113 53.129 398.832 53.152 398.527 cv
53.172 398.223 53.18 397.906 53.184 397.574 cv
cp
f
37.098 335.309 mo
57.985 335.309 li
57.985 352.399 li
37.098 352.399 li
cp
0 0 0 0 cmyk
ef
43.57 340.336 mo
43.566 340.422 43.563 340.496 43.559 340.559 cv
43.551 340.629 43.543 340.691 43.531 340.75 cv
43.52 340.816 43.504 340.875 43.484 340.93 cv
43.461 340.988 43.438 341.051 43.414 341.109 cv
40.219 348.473 li
40.191 348.531 40.164 348.574 40.133 348.605 cv
40.098 348.641 40.055 348.668 40 348.687 cv
39.945 348.707 39.875 348.719 39.797 348.73 cv
39.711 348.734 39.613 348.738 39.496 348.742 cv
39.34 348.738 39.219 348.73 39.133 348.719 cv
39.047 348.703 38.984 348.687 38.945 348.656 cv
38.906 348.629 38.887 348.59 38.895 348.547 cv
38.895 348.504 38.91 348.453 38.941 348.391 cv
42.301 340.863 li
38.043 340.863 li
37.957 340.867 37.891 340.82 37.848 340.727 cv
37.805 340.637 37.785 340.508 37.785 340.344 cv
37.785 340.258 37.789 340.184 37.801 340.117 cv
37.813 340.055 37.828 340 37.852 339.957 cv
37.871 339.914 37.898 339.883 37.934 339.859 cv
37.965 339.84 38.004 339.828 38.043 339.828 cv
43.215 339.828 li
43.273 339.828 43.328 339.836 43.379 339.852 cv
43.426 339.867 43.461 339.895 43.488 339.934 cv
43.512 339.973 43.531 340.027 43.547 340.09 cv
43.559 340.156 43.566 340.238 43.57 340.336 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
46.73 347.953 mo
46.73 348.281 46.676 348.496 46.57 348.602 cv
46.461 348.707 46.266 348.758 45.984 348.762 cv
45.707 348.758 45.516 348.707 45.414 348.605 cv
45.305 348.5 45.254 348.289 45.258 347.973 cv
45.254 347.648 45.309 347.434 45.418 347.324 cv
45.523 347.219 45.719 347.164 46.004 347.164 cv
46.277 347.164 46.465 347.219 46.574 347.324 cv
46.676 347.43 46.73 347.641 46.73 347.953 cv
cp
f
54.055 345.848 mo
54.055 346.324 53.973 346.746 53.813 347.117 cv
53.652 347.488 53.426 347.801 53.137 348.055 cv
52.84 348.309 52.492 348.504 52.09 348.633 cv
51.684 348.766 51.234 348.828 50.742 348.828 cv
50.465 348.828 50.203 348.809 49.961 348.77 cv
49.711 348.73 49.492 348.684 49.305 348.629 cv
49.109 348.574 48.953 348.52 48.828 348.461 cv
48.703 348.41 48.625 348.367 48.594 348.332 cv
48.559 348.301 48.535 348.27 48.523 348.242 cv
48.508 348.215 48.492 348.184 48.484 348.141 cv
48.469 348.105 48.461 348.055 48.461 347.992 cv
48.453 347.934 48.453 347.863 48.453 347.781 cv
48.453 347.707 48.457 347.637 48.465 347.574 cv
48.473 347.512 48.484 347.461 48.504 347.422 cv
48.52 347.383 48.539 347.355 48.566 347.336 cv
48.59 347.32 48.621 347.312 48.652 347.309 cv
48.699 347.312 48.77 347.34 48.863 347.395 cv
48.957 347.453 49.086 347.516 49.25 347.582 cv
49.414 347.648 49.613 347.711 49.855 347.77 cv
50.09 347.828 50.375 347.855 50.711 347.855 cv
51.012 347.855 51.293 347.82 51.551 347.746 cv
51.805 347.676 52.027 347.562 52.215 347.406 cv
52.398 347.254 52.543 347.059 52.648 346.82 cv
52.754 346.586 52.805 346.297 52.809 345.957 cv
52.805 345.676 52.762 345.426 52.672 345.207 cv
52.582 344.988 52.445 344.809 52.262 344.664 cv
52.074 344.523 51.84 344.418 51.559 344.344 cv
51.273 344.273 50.934 344.234 50.547 344.234 cv
50.262 344.234 50.023 344.25 49.824 344.277 cv
49.621 344.309 49.434 344.324 49.262 344.32 cv
49.133 344.324 49.039 344.293 48.988 344.23 cv
48.93 344.172 48.902 344.059 48.906 343.887 cv
48.906 340.273 li
48.902 340.125 48.938 340.016 49.012 339.937 cv
49.078 339.867 49.18 339.828 49.316 339.828 cv
53.246 339.828 li
53.281 339.828 53.316 339.84 53.352 339.859 cv
53.383 339.883 53.41 339.914 53.438 339.953 cv
53.457 339.996 53.473 340.047 53.488 340.109 cv
53.496 340.176 53.504 340.254 53.508 340.336 cv
53.504 340.504 53.48 340.629 53.441 340.719 cv
53.395 340.812 53.336 340.859 53.258 340.855 cv
50.086 340.855 li
50.086 343.344 li
50.238 343.324 50.395 343.312 50.559 343.305 cv
50.715 343.301 50.902 343.297 51.117 343.297 cv
51.602 343.297 52.027 343.359 52.395 343.48 cv
52.758 343.602 53.063 343.773 53.313 343.992 cv
53.555 344.219 53.742 344.484 53.867 344.797 cv
53.992 345.113 54.055 345.465 54.055 345.848 cv
cp
f
30 282.059 mo
57.984 282.059 li
57.984 299.149 li
30 299.149 li
cp
0 0 0 0 cmyk
ef
36.379 294.977 mo
36.375 295.066 36.367 295.137 36.355 295.195 cv
36.34 295.258 36.32 295.309 36.301 295.34 cv
36.277 295.379 36.254 295.402 36.223 295.418 cv
36.191 295.434 36.16 295.441 36.133 295.441 cv
31.496 295.441 li
31.461 295.441 31.434 295.434 31.406 295.418 cv
31.379 295.402 31.352 295.379 31.328 295.34 cv
31.301 295.309 31.281 295.258 31.27 295.195 cv
31.254 295.137 31.246 295.066 31.25 294.977 cv
31.246 294.898 31.254 294.824 31.27 294.762 cv
31.281 294.703 31.297 294.656 31.32 294.617 cv
31.336 294.582 31.363 294.551 31.395 294.527 cv
31.426 294.508 31.457 294.5 31.496 294.496 cv
33.348 294.496 li
33.348 287.75 li
31.633 288.77 li
31.543 288.82 31.473 288.848 31.426 288.855 cv
31.371 288.863 31.328 288.855 31.297 288.824 cv
31.262 288.797 31.242 288.746 31.23 288.676 cv
31.219 288.609 31.211 288.523 31.215 288.414 cv
31.211 288.34 31.215 288.273 31.227 288.215 cv
31.23 288.164 31.242 288.117 31.258 288.078 cv
31.27 288.043 31.289 288.012 31.313 287.984 cv
31.336 287.957 31.367 287.93 31.414 287.902 cv
33.457 286.59 li
33.473 286.578 33.492 286.566 33.523 286.559 cv
33.547 286.551 33.582 286.543 33.629 286.531 cv
33.668 286.523 33.719 286.516 33.773 286.512 cv
33.828 286.512 33.895 286.512 33.98 286.508 cv
34.086 286.512 34.18 286.516 34.254 286.523 cv
34.324 286.531 34.379 286.547 34.426 286.562 cv
34.465 286.582 34.492 286.602 34.508 286.625 cv
34.516 286.652 34.523 286.676 34.527 286.699 cv
34.527 294.496 li
36.133 294.496 li
36.168 294.5 36.203 294.508 36.234 294.527 cv
36.266 294.551 36.289 294.582 36.313 294.617 cv
36.328 294.656 36.344 294.703 36.359 294.762 cv
36.367 294.824 36.375 294.898 36.379 294.977 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.77 290.984 mo
43.766 291.668 43.715 292.289 43.609 292.852 cv
43.5 293.414 43.32 293.898 43.074 294.301 cv
42.82 294.707 42.492 295.02 42.094 295.238 cv
41.688 295.461 41.195 295.57 40.609 295.57 cv
40.051 295.57 39.578 295.473 39.199 295.273 cv
38.816 295.078 38.512 294.785 38.277 294.398 cv
38.043 294.012 37.875 293.539 37.781 292.973 cv
37.68 292.41 37.633 291.762 37.633 291.027 cv
37.633 290.355 37.688 289.734 37.797 289.168 cv
37.906 288.605 38.082 288.121 38.332 287.715 cv
38.574 287.312 38.898 287 39.305 286.773 cv
39.703 286.555 40.199 286.441 40.789 286.441 cv
41.348 286.441 41.82 286.543 42.203 286.738 cv
42.586 286.941 42.891 287.234 43.125 287.617 cv
43.355 288.008 43.523 288.48 43.621 289.043 cv
43.719 289.605 43.766 290.254 43.77 290.984 cv
cp
42.563 291.066 mo
42.559 290.625 42.543 290.227 42.516 289.875 cv
42.48 289.523 42.434 289.215 42.375 288.945 cv
42.309 288.676 42.23 288.445 42.133 288.25 cv
42.035 288.059 41.918 287.898 41.781 287.77 cv
41.641 287.645 41.48 287.551 41.309 287.492 cv
41.129 287.437 40.934 287.41 40.719 287.406 cv
40.328 287.41 40.012 287.5 39.773 287.684 cv
39.527 287.867 39.336 288.121 39.199 288.437 cv
39.059 288.758 38.965 289.129 38.914 289.559 cv
38.863 289.988 38.84 290.453 38.84 290.945 cv
38.84 291.609 38.871 292.172 38.941 292.633 cv
39.008 293.102 39.117 293.48 39.27 293.77 cv
39.414 294.066 39.605 294.277 39.836 294.406 cv
40.066 294.543 40.348 294.609 40.68 294.605 cv
40.934 294.609 41.156 294.57 41.352 294.484 cv
41.543 294.406 41.711 294.285 41.852 294.129 cv
41.992 293.977 42.105 293.793 42.199 293.578 cv
42.285 293.363 42.359 293.125 42.418 292.863 cv
42.469 292.605 42.508 292.324 42.531 292.02 cv
42.551 291.715 42.559 291.398 42.563 291.066 cv
cp
f
46.699 294.695 mo
46.699 295.023 46.645 295.238 46.539 295.344 cv
46.43 295.449 46.234 295.5 45.953 295.504 cv
45.676 295.5 45.484 295.449 45.383 295.348 cv
45.273 295.242 45.223 295.031 45.227 294.715 cv
45.223 294.391 45.277 294.176 45.387 294.066 cv
45.492 293.961 45.688 293.906 45.973 293.906 cv
46.246 293.906 46.434 293.961 46.543 294.066 cv
46.645 294.172 46.699 294.383 46.699 294.695 cv
cp
f
54.398 290.984 mo
54.395 291.668 54.344 292.289 54.238 292.852 cv
54.129 293.414 53.949 293.898 53.703 294.301 cv
53.449 294.707 53.121 295.02 52.723 295.238 cv
52.316 295.461 51.824 295.57 51.238 295.57 cv
50.68 295.57 50.207 295.473 49.828 295.273 cv
49.445 295.078 49.141 294.785 48.906 294.398 cv
48.672 294.012 48.504 293.539 48.41 292.973 cv
48.309 292.41 48.262 291.762 48.262 291.027 cv
48.262 290.355 48.316 289.734 48.426 289.168 cv
48.535 288.605 48.711 288.121 48.961 287.715 cv
49.203 287.312 49.527 287 49.934 286.773 cv
50.332 286.555 50.828 286.441 51.418 286.441 cv
51.977 286.441 52.449 286.543 52.832 286.738 cv
53.215 286.941 53.52 287.234 53.754 287.617 cv
53.984 288.008 54.152 288.48 54.25 289.043 cv
54.348 289.605 54.395 290.254 54.398 290.984 cv
cp
53.191 291.066 mo
53.188 290.625 53.172 290.227 53.145 289.875 cv
53.109 289.523 53.063 289.215 53.004 288.945 cv
52.938 288.676 52.859 288.445 52.762 288.25 cv
52.664 288.059 52.547 287.898 52.41 287.77 cv
52.27 287.645 52.109 287.551 51.938 287.492 cv
51.758 287.437 51.563 287.41 51.348 287.406 cv
50.957 287.41 50.641 287.5 50.402 287.684 cv
50.156 287.867 49.965 288.121 49.828 288.437 cv
49.688 288.758 49.594 289.129 49.543 289.559 cv
49.492 289.988 49.469 290.453 49.469 290.945 cv
49.469 291.609 49.5 292.172 49.57 292.633 cv
49.637 293.102 49.746 293.48 49.898 293.77 cv
50.043 294.066 50.234 294.277 50.465 294.406 cv
50.695 294.543 50.977 294.609 51.309 294.605 cv
51.563 294.609 51.785 294.57 51.98 294.484 cv
52.172 294.406 52.34 294.285 52.48 294.129 cv
52.621 293.977 52.734 293.793 52.828 293.578 cv
52.914 293.363 52.988 293.125 53.047 292.863 cv
53.098 292.605 53.137 292.324 53.16 292.02 cv
53.18 291.715 53.188 291.398 53.191 291.066 cv
cp
f
30 228.801 mo
57.984 228.801 li
57.984 245.891 li
30 245.891 li
cp
0 0 0 0 cmyk
ef
36.379 241.695 mo
36.375 241.785 36.367 241.855 36.355 241.914 cv
36.34 241.977 36.32 242.027 36.301 242.059 cv
36.277 242.098 36.254 242.121 36.223 242.137 cv
36.191 242.152 36.16 242.16 36.133 242.16 cv
31.496 242.16 li
31.461 242.16 31.434 242.152 31.406 242.137 cv
31.379 242.121 31.352 242.098 31.328 242.059 cv
31.301 242.027 31.281 241.977 31.27 241.914 cv
31.254 241.855 31.246 241.785 31.25 241.695 cv
31.246 241.617 31.254 241.543 31.27 241.48 cv
31.281 241.422 31.297 241.375 31.32 241.336 cv
31.336 241.301 31.363 241.27 31.395 241.246 cv
31.426 241.227 31.457 241.219 31.496 241.215 cv
33.348 241.215 li
33.348 234.469 li
31.633 235.488 li
31.543 235.539 31.473 235.566 31.426 235.574 cv
31.371 235.582 31.328 235.574 31.297 235.543 cv
31.262 235.516 31.242 235.465 31.23 235.395 cv
31.219 235.328 31.211 235.242 31.215 235.133 cv
31.211 235.059 31.215 234.992 31.227 234.934 cv
31.23 234.883 31.242 234.836 31.258 234.797 cv
31.27 234.762 31.289 234.73 31.313 234.703 cv
31.336 234.676 31.367 234.648 31.414 234.621 cv
33.457 233.309 li
33.473 233.297 33.492 233.285 33.523 233.277 cv
33.547 233.27 33.582 233.262 33.629 233.25 cv
33.668 233.242 33.719 233.234 33.773 233.23 cv
33.828 233.23 33.895 233.23 33.98 233.227 cv
34.086 233.23 34.18 233.234 34.254 233.242 cv
34.324 233.25 34.379 233.266 34.426 233.281 cv
34.465 233.301 34.492 233.32 34.508 233.344 cv
34.516 233.371 34.523 233.395 34.527 233.418 cv
34.527 241.215 li
36.133 241.215 li
36.168 241.219 36.203 241.227 36.234 241.246 cv
36.266 241.27 36.289 241.301 36.313 241.336 cv
36.328 241.375 36.344 241.422 36.359 241.48 cv
36.367 241.543 36.375 241.617 36.379 241.695 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.477 241.652 mo
43.473 241.738 43.469 241.812 43.457 241.875 cv
43.445 241.941 43.43 241.996 43.41 242.035 cv
43.387 242.082 43.359 242.113 43.328 242.129 cv
43.293 242.152 43.254 242.16 43.215 242.16 cv
38.313 242.16 li
38.25 242.16 38.191 242.152 38.145 242.137 cv
38.094 242.121 38.055 242.098 38.02 242.059 cv
37.984 242.027 37.957 241.973 37.945 241.902 cv
37.926 241.832 37.918 241.746 37.922 241.645 cv
37.918 241.555 37.922 241.477 37.93 241.406 cv
37.934 241.34 37.949 241.281 37.977 241.227 cv
38 241.176 38.031 241.121 38.066 241.066 cv
38.102 241.016 38.145 240.961 38.203 240.898 cv
39.977 239.074 li
40.387 238.656 40.715 238.281 40.965 237.945 cv
41.211 237.617 41.402 237.312 41.535 237.035 cv
41.668 236.762 41.754 236.512 41.801 236.285 cv
41.84 236.062 41.863 235.852 41.863 235.656 cv
41.863 235.461 41.828 235.277 41.762 235.098 cv
41.695 234.926 41.602 234.77 41.477 234.633 cv
41.352 234.504 41.195 234.398 41.008 234.316 cv
40.82 234.242 40.602 234.203 40.355 234.199 cv
40.066 234.203 39.809 234.242 39.582 234.316 cv
39.352 234.398 39.152 234.484 38.98 234.57 cv
38.809 234.664 38.664 234.746 38.547 234.824 cv
38.43 234.902 38.344 234.941 38.293 234.941 cv
38.258 234.941 38.227 234.934 38.203 234.914 cv
38.172 234.898 38.152 234.867 38.137 234.824 cv
38.121 234.785 38.105 234.73 38.098 234.66 cv
38.086 234.594 38.082 234.512 38.086 234.414 cv
38.082 234.348 38.086 234.289 38.094 234.238 cv
38.098 234.187 38.105 234.145 38.117 234.105 cv
38.125 234.07 38.141 234.035 38.16 234.004 cv
38.18 233.973 38.215 233.934 38.273 233.883 cv
38.324 233.836 38.418 233.77 38.555 233.687 cv
38.688 233.605 38.859 233.527 39.063 233.445 cv
39.266 233.367 39.488 233.297 39.734 233.242 cv
39.977 233.187 40.234 233.16 40.508 233.16 cv
40.934 233.16 41.309 233.223 41.633 233.344 cv
41.953 233.465 42.219 233.629 42.434 233.84 cv
42.645 234.051 42.805 234.297 42.91 234.57 cv
43.016 234.852 43.07 235.148 43.07 235.461 cv
43.07 235.75 43.043 236.031 42.992 236.309 cv
42.941 236.594 42.836 236.898 42.676 237.223 cv
42.512 237.551 42.277 237.914 41.973 238.312 cv
41.664 238.715 41.258 239.176 40.754 239.691 cv
39.348 241.16 li
43.207 241.16 li
43.238 241.164 43.273 241.176 43.313 241.191 cv
43.344 241.215 43.375 241.246 43.402 241.285 cv
43.426 241.328 43.445 241.379 43.457 241.437 cv
43.469 241.504 43.473 241.574 43.477 241.652 cv
cp
f
46.699 241.414 mo
46.699 241.742 46.645 241.957 46.539 242.062 cv
46.43 242.168 46.234 242.219 45.953 242.223 cv
45.676 242.219 45.484 242.168 45.383 242.066 cv
45.273 241.961 45.223 241.75 45.227 241.434 cv
45.223 241.109 45.277 240.895 45.387 240.785 cv
45.492 240.68 45.688 240.625 45.973 240.625 cv
46.246 240.625 46.434 240.68 46.543 240.785 cv
46.645 240.891 46.699 241.102 46.699 241.414 cv
cp
f
54.063 239.309 mo
54.063 239.785 53.98 240.207 53.82 240.578 cv
53.66 240.949 53.434 241.262 53.145 241.516 cv
52.848 241.77 52.5 241.965 52.098 242.094 cv
51.691 242.227 51.242 242.289 50.75 242.289 cv
50.473 242.289 50.211 242.27 49.969 242.23 cv
49.719 242.191 49.5 242.145 49.313 242.09 cv
49.117 242.035 48.961 241.98 48.836 241.922 cv
48.711 241.871 48.633 241.828 48.602 241.793 cv
48.566 241.762 48.543 241.73 48.531 241.703 cv
48.516 241.676 48.5 241.645 48.492 241.602 cv
48.477 241.566 48.469 241.516 48.469 241.453 cv
48.461 241.395 48.461 241.324 48.461 241.242 cv
48.461 241.168 48.465 241.098 48.473 241.035 cv
48.48 240.973 48.492 240.922 48.512 240.883 cv
48.527 240.844 48.547 240.816 48.574 240.797 cv
48.598 240.781 48.629 240.773 48.66 240.77 cv
48.707 240.773 48.777 240.801 48.871 240.855 cv
48.965 240.914 49.094 240.977 49.258 241.043 cv
49.422 241.109 49.621 241.172 49.863 241.23 cv
50.098 241.289 50.383 241.316 50.719 241.316 cv
51.02 241.316 51.301 241.281 51.559 241.207 cv
51.813 241.137 52.035 241.023 52.223 240.867 cv
52.406 240.715 52.551 240.52 52.656 240.281 cv
52.762 240.047 52.813 239.758 52.816 239.418 cv
52.813 239.137 52.77 238.887 52.68 238.668 cv
52.59 238.449 52.453 238.27 52.27 238.125 cv
52.082 237.984 51.848 237.879 51.566 237.805 cv
51.281 237.734 50.941 237.695 50.555 237.695 cv
50.27 237.695 50.031 237.711 49.832 237.738 cv
49.629 237.77 49.441 237.785 49.27 237.781 cv
49.141 237.785 49.047 237.754 48.996 237.691 cv
48.938 237.633 48.91 237.52 48.914 237.348 cv
48.914 233.734 li
48.91 233.586 48.945 233.477 49.02 233.398 cv
49.086 233.328 49.188 233.289 49.324 233.289 cv
53.254 233.289 li
53.289 233.289 53.324 233.301 53.359 233.32 cv
53.391 233.344 53.418 233.375 53.445 233.414 cv
53.465 233.457 53.48 233.508 53.496 233.57 cv
53.504 233.637 53.512 233.715 53.516 233.797 cv
53.512 233.965 53.488 234.09 53.449 234.18 cv
53.402 234.273 53.344 234.32 53.266 234.316 cv
50.094 234.316 li
50.094 236.805 li
50.246 236.785 50.402 236.773 50.566 236.766 cv
50.723 236.762 50.91 236.758 51.125 236.758 cv
51.609 236.758 52.035 236.82 52.402 236.941 cv
52.766 237.062 53.07 237.234 53.32 237.453 cv
53.563 237.68 53.75 237.945 53.875 238.258 cv
54 238.574 54.063 238.926 54.063 239.309 cv
cp
f
30 175.551 mo
57.984 175.551 li
57.984 192.641 li
30 192.641 li
cp
0 0 0 0 cmyk
ef
36.379 188.434 mo
36.375 188.523 36.367 188.594 36.355 188.652 cv
36.34 188.715 36.32 188.766 36.301 188.797 cv
36.277 188.836 36.254 188.859 36.223 188.875 cv
36.191 188.891 36.16 188.898 36.133 188.898 cv
31.496 188.898 li
31.461 188.898 31.434 188.891 31.406 188.875 cv
31.379 188.859 31.352 188.836 31.328 188.797 cv
31.301 188.766 31.281 188.715 31.27 188.652 cv
31.254 188.594 31.246 188.523 31.25 188.434 cv
31.246 188.355 31.254 188.281 31.27 188.219 cv
31.281 188.16 31.297 188.113 31.32 188.074 cv
31.336 188.039 31.363 188.008 31.395 187.984 cv
31.426 187.965 31.457 187.957 31.496 187.953 cv
33.348 187.953 li
33.348 181.207 li
31.633 182.227 li
31.543 182.277 31.473 182.305 31.426 182.312 cv
31.371 182.32 31.328 182.312 31.297 182.281 cv
31.262 182.254 31.242 182.203 31.23 182.133 cv
31.219 182.066 31.211 181.98 31.215 181.871 cv
31.211 181.797 31.215 181.73 31.227 181.672 cv
31.23 181.621 31.242 181.574 31.258 181.535 cv
31.27 181.5 31.289 181.469 31.313 181.441 cv
31.336 181.414 31.367 181.387 31.414 181.359 cv
33.457 180.047 li
33.473 180.035 33.492 180.023 33.523 180.016 cv
33.547 180.008 33.582 180 33.629 179.988 cv
33.668 179.98 33.719 179.973 33.773 179.969 cv
33.828 179.969 33.895 179.969 33.98 179.965 cv
34.086 179.969 34.18 179.973 34.254 179.98 cv
34.324 179.988 34.379 180.004 34.426 180.02 cv
34.465 180.039 34.492 180.059 34.508 180.082 cv
34.516 180.109 34.523 180.133 34.527 180.156 cv
34.527 187.953 li
36.133 187.953 li
36.168 187.957 36.203 187.965 36.234 187.984 cv
36.266 188.008 36.289 188.039 36.313 188.074 cv
36.328 188.113 36.344 188.16 36.359 188.219 cv
36.367 188.281 36.375 188.355 36.379 188.434 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.434 186.047 mo
43.434 186.523 43.352 186.945 43.191 187.316 cv
43.031 187.687 42.805 188 42.516 188.254 cv
42.219 188.508 41.871 188.703 41.469 188.832 cv
41.063 188.965 40.613 189.027 40.121 189.027 cv
39.844 189.027 39.582 189.008 39.34 188.969 cv
39.09 188.93 38.871 188.883 38.684 188.828 cv
38.488 188.773 38.332 188.719 38.207 188.66 cv
38.082 188.609 38.004 188.566 37.973 188.531 cv
37.938 188.5 37.914 188.469 37.902 188.441 cv
37.887 188.414 37.871 188.383 37.863 188.34 cv
37.848 188.305 37.84 188.254 37.84 188.191 cv
37.832 188.133 37.832 188.062 37.832 187.98 cv
37.832 187.906 37.836 187.836 37.844 187.773 cv
37.852 187.711 37.863 187.66 37.883 187.621 cv
37.898 187.582 37.918 187.555 37.945 187.535 cv
37.969 187.52 38 187.512 38.031 187.508 cv
38.078 187.512 38.148 187.539 38.242 187.594 cv
38.336 187.652 38.465 187.715 38.629 187.781 cv
38.793 187.848 38.992 187.91 39.234 187.969 cv
39.469 188.027 39.754 188.055 40.09 188.055 cv
40.391 188.055 40.672 188.02 40.93 187.945 cv
41.184 187.875 41.406 187.762 41.594 187.605 cv
41.777 187.453 41.922 187.258 42.027 187.02 cv
42.133 186.785 42.184 186.496 42.188 186.156 cv
42.184 185.875 42.141 185.625 42.051 185.406 cv
41.961 185.187 41.824 185.008 41.641 184.863 cv
41.453 184.723 41.219 184.617 40.938 184.543 cv
40.652 184.473 40.313 184.434 39.926 184.434 cv
39.641 184.434 39.402 184.449 39.203 184.477 cv
39 184.508 38.813 184.523 38.641 184.52 cv
38.512 184.523 38.418 184.492 38.367 184.43 cv
38.309 184.371 38.281 184.258 38.285 184.086 cv
38.285 180.473 li
38.281 180.324 38.316 180.215 38.391 180.137 cv
38.457 180.066 38.559 180.027 38.695 180.027 cv
42.625 180.027 li
42.66 180.027 42.695 180.039 42.73 180.059 cv
42.762 180.082 42.789 180.113 42.816 180.152 cv
42.836 180.195 42.852 180.246 42.867 180.309 cv
42.875 180.375 42.883 180.453 42.887 180.535 cv
42.883 180.703 42.859 180.828 42.82 180.918 cv
42.773 181.012 42.715 181.059 42.637 181.055 cv
39.465 181.055 li
39.465 183.543 li
39.617 183.523 39.773 183.512 39.938 183.504 cv
40.094 183.5 40.281 183.496 40.496 183.496 cv
40.98 183.496 41.406 183.559 41.773 183.68 cv
42.137 183.801 42.441 183.973 42.691 184.191 cv
42.934 184.418 43.121 184.684 43.246 184.996 cv
43.371 185.312 43.434 185.664 43.434 186.047 cv
cp
f
46.699 188.152 mo
46.699 188.48 46.645 188.695 46.539 188.801 cv
46.43 188.906 46.234 188.957 45.953 188.961 cv
45.676 188.957 45.484 188.906 45.383 188.805 cv
45.273 188.699 45.223 188.488 45.227 188.172 cv
45.223 187.848 45.277 187.633 45.387 187.523 cv
45.492 187.418 45.688 187.363 45.973 187.363 cv
46.246 187.363 46.434 187.418 46.543 187.523 cv
46.645 187.629 46.699 187.84 46.699 188.152 cv
cp
f
54.398 184.441 mo
54.395 185.125 54.344 185.746 54.238 186.309 cv
54.129 186.871 53.949 187.355 53.703 187.758 cv
53.449 188.164 53.121 188.477 52.723 188.695 cv
52.316 188.918 51.824 189.027 51.238 189.027 cv
50.68 189.027 50.207 188.93 49.828 188.73 cv
49.445 188.535 49.141 188.242 48.906 187.855 cv
48.672 187.469 48.504 186.996 48.41 186.43 cv
48.309 185.867 48.262 185.219 48.262 184.484 cv
48.262 183.812 48.316 183.191 48.426 182.625 cv
48.535 182.062 48.711 181.578 48.961 181.172 cv
49.203 180.77 49.527 180.457 49.934 180.23 cv
50.332 180.012 50.828 179.898 51.418 179.898 cv
51.977 179.898 52.449 180 52.832 180.195 cv
53.215 180.398 53.52 180.691 53.754 181.074 cv
53.984 181.465 54.152 181.937 54.25 182.5 cv
54.348 183.062 54.395 183.711 54.398 184.441 cv
cp
53.191 184.523 mo
53.188 184.082 53.172 183.684 53.145 183.332 cv
53.109 182.98 53.063 182.672 53.004 182.402 cv
52.938 182.133 52.859 181.902 52.762 181.707 cv
52.664 181.516 52.547 181.355 52.41 181.227 cv
52.27 181.102 52.109 181.008 51.938 180.949 cv
51.758 180.895 51.563 180.867 51.348 180.863 cv
50.957 180.867 50.641 180.957 50.402 181.141 cv
50.156 181.324 49.965 181.578 49.828 181.895 cv
49.688 182.215 49.594 182.586 49.543 183.016 cv
49.492 183.445 49.469 183.91 49.469 184.402 cv
49.469 185.066 49.5 185.629 49.57 186.09 cv
49.637 186.559 49.746 186.937 49.898 187.227 cv
50.043 187.523 50.234 187.734 50.465 187.863 cv
50.695 188 50.977 188.066 51.309 188.062 cv
51.563 188.066 51.785 188.027 51.98 187.941 cv
52.172 187.863 52.34 187.742 52.48 187.586 cv
52.621 187.434 52.734 187.25 52.828 187.035 cv
52.914 186.82 52.988 186.582 53.047 186.32 cv
53.098 186.062 53.137 185.781 53.16 185.477 cv
53.18 185.172 53.188 184.855 53.191 184.523 cv
cp
f
30 122.301 mo
57.984 122.301 li
57.984 139.391 li
30 139.391 li
cp
0 0 0 0 cmyk
ef
36.379 135.184 mo
36.375 135.273 36.367 135.344 36.355 135.402 cv
36.34 135.465 36.32 135.516 36.301 135.547 cv
36.277 135.586 36.254 135.609 36.223 135.625 cv
36.191 135.641 36.16 135.648 36.133 135.648 cv
31.496 135.648 li
31.461 135.648 31.434 135.641 31.406 135.625 cv
31.379 135.609 31.352 135.586 31.328 135.547 cv
31.301 135.516 31.281 135.465 31.27 135.402 cv
31.254 135.344 31.246 135.273 31.25 135.184 cv
31.246 135.105 31.254 135.031 31.27 134.969 cv
31.281 134.91 31.297 134.863 31.32 134.824 cv
31.336 134.789 31.363 134.758 31.395 134.734 cv
31.426 134.715 31.457 134.707 31.496 134.703 cv
33.348 134.703 li
33.348 127.957 li
31.633 128.977 li
31.543 129.027 31.473 129.055 31.426 129.062 cv
31.371 129.07 31.328 129.062 31.297 129.031 cv
31.262 129.004 31.242 128.953 31.23 128.883 cv
31.219 128.816 31.211 128.73 31.215 128.621 cv
31.211 128.547 31.215 128.48 31.227 128.422 cv
31.23 128.371 31.242 128.324 31.258 128.285 cv
31.27 128.25 31.289 128.219 31.313 128.191 cv
31.336 128.164 31.367 128.137 31.414 128.109 cv
33.457 126.797 li
33.473 126.785 33.492 126.773 33.523 126.766 cv
33.547 126.758 33.582 126.75 33.629 126.738 cv
33.668 126.73 33.719 126.723 33.773 126.719 cv
33.828 126.719 33.895 126.719 33.98 126.715 cv
34.086 126.719 34.18 126.723 34.254 126.73 cv
34.324 126.738 34.379 126.754 34.426 126.77 cv
34.465 126.789 34.492 126.809 34.508 126.832 cv
34.516 126.859 34.523 126.883 34.527 126.906 cv
34.527 134.703 li
36.133 134.703 li
36.168 134.707 36.203 134.715 36.234 134.734 cv
36.266 134.758 36.289 134.789 36.313 134.824 cv
36.328 134.863 36.344 134.91 36.359 134.969 cv
36.367 135.031 36.375 135.105 36.379 135.184 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.605 127.285 mo
43.602 127.371 43.598 127.445 43.594 127.508 cv
43.586 127.578 43.578 127.641 43.566 127.699 cv
43.555 127.766 43.539 127.824 43.52 127.879 cv
43.496 127.937 43.473 128 43.449 128.059 cv
40.254 135.422 li
40.227 135.48 40.199 135.523 40.168 135.555 cv
40.133 135.59 40.09 135.617 40.035 135.637 cv
39.98 135.656 39.91 135.668 39.832 135.68 cv
39.746 135.684 39.648 135.687 39.531 135.691 cv
39.375 135.687 39.254 135.68 39.168 135.668 cv
39.082 135.652 39.02 135.637 38.98 135.605 cv
38.941 135.578 38.922 135.539 38.93 135.496 cv
38.93 135.453 38.945 135.402 38.977 135.34 cv
42.336 127.812 li
38.078 127.812 li
37.992 127.816 37.926 127.77 37.883 127.676 cv
37.84 127.586 37.82 127.457 37.82 127.293 cv
37.82 127.207 37.824 127.133 37.836 127.066 cv
37.848 127.004 37.863 126.949 37.887 126.906 cv
37.906 126.863 37.934 126.832 37.969 126.809 cv
38 126.789 38.039 126.777 38.078 126.777 cv
43.25 126.777 li
43.309 126.777 43.363 126.785 43.414 126.801 cv
43.461 126.816 43.496 126.844 43.523 126.883 cv
43.547 126.922 43.566 126.977 43.582 127.039 cv
43.594 127.105 43.602 127.187 43.605 127.285 cv
cp
f
46.699 134.902 mo
46.699 135.23 46.645 135.445 46.539 135.551 cv
46.43 135.656 46.234 135.707 45.953 135.711 cv
45.676 135.707 45.484 135.656 45.383 135.555 cv
45.273 135.449 45.223 135.238 45.227 134.922 cv
45.223 134.598 45.277 134.383 45.387 134.273 cv
45.492 134.168 45.688 134.113 45.973 134.113 cv
46.246 134.113 46.434 134.168 46.543 134.273 cv
46.645 134.379 46.699 134.59 46.699 134.902 cv
cp
f
54.063 132.797 mo
54.063 133.273 53.98 133.695 53.82 134.066 cv
53.66 134.437 53.434 134.75 53.145 135.004 cv
52.848 135.258 52.5 135.453 52.098 135.582 cv
51.691 135.715 51.242 135.777 50.75 135.777 cv
50.473 135.777 50.211 135.758 49.969 135.719 cv
49.719 135.68 49.5 135.633 49.313 135.578 cv
49.117 135.523 48.961 135.469 48.836 135.41 cv
48.711 135.359 48.633 135.316 48.602 135.281 cv
48.566 135.25 48.543 135.219 48.531 135.191 cv
48.516 135.164 48.5 135.133 48.492 135.09 cv
48.477 135.055 48.469 135.004 48.469 134.941 cv
48.461 134.883 48.461 134.812 48.461 134.73 cv
48.461 134.656 48.465 134.586 48.473 134.523 cv
48.48 134.461 48.492 134.41 48.512 134.371 cv
48.527 134.332 48.547 134.305 48.574 134.285 cv
48.598 134.27 48.629 134.262 48.66 134.258 cv
48.707 134.262 48.777 134.289 48.871 134.344 cv
48.965 134.402 49.094 134.465 49.258 134.531 cv
49.422 134.598 49.621 134.66 49.863 134.719 cv
50.098 134.777 50.383 134.805 50.719 134.805 cv
51.02 134.805 51.301 134.77 51.559 134.695 cv
51.813 134.625 52.035 134.512 52.223 134.355 cv
52.406 134.203 52.551 134.008 52.656 133.77 cv
52.762 133.535 52.813 133.246 52.816 132.906 cv
52.813 132.625 52.77 132.375 52.68 132.156 cv
52.59 131.937 52.453 131.758 52.27 131.613 cv
52.082 131.473 51.848 131.367 51.566 131.293 cv
51.281 131.223 50.941 131.184 50.555 131.184 cv
50.27 131.184 50.031 131.199 49.832 131.227 cv
49.629 131.258 49.441 131.273 49.27 131.27 cv
49.141 131.273 49.047 131.242 48.996 131.18 cv
48.938 131.121 48.91 131.008 48.914 130.836 cv
48.914 127.223 li
48.91 127.074 48.945 126.965 49.02 126.887 cv
49.086 126.816 49.188 126.777 49.324 126.777 cv
53.254 126.777 li
53.289 126.777 53.324 126.789 53.359 126.809 cv
53.391 126.832 53.418 126.863 53.445 126.902 cv
53.465 126.945 53.48 126.996 53.496 127.059 cv
53.504 127.125 53.512 127.203 53.516 127.285 cv
53.512 127.453 53.488 127.578 53.449 127.668 cv
53.402 127.762 53.344 127.809 53.266 127.805 cv
50.094 127.805 li
50.094 130.293 li
50.246 130.273 50.402 130.262 50.566 130.254 cv
50.723 130.25 50.91 130.246 51.125 130.246 cv
51.609 130.246 52.035 130.309 52.402 130.43 cv
52.766 130.551 53.07 130.723 53.32 130.941 cv
53.563 131.168 53.75 131.434 53.875 131.746 cv
54 132.062 54.063 132.414 54.063 132.797 cv
cp
f
30 69.039 mo
57.984 69.039 li
57.984 86.129 li
30 86.129 li
cp
0 0 0 0 cmyk
ef
36.359 81.883 mo
36.355 81.969 36.352 82.043 36.34 82.105 cv
36.328 82.172 36.313 82.227 36.293 82.266 cv
36.27 82.312 36.242 82.344 36.211 82.359 cv
36.176 82.383 36.137 82.391 36.098 82.391 cv
31.195 82.391 li
31.133 82.391 31.074 82.383 31.027 82.367 cv
30.977 82.352 30.938 82.328 30.902 82.289 cv
30.867 82.258 30.84 82.203 30.828 82.133 cv
30.809 82.062 30.801 81.977 30.805 81.875 cv
30.801 81.785 30.805 81.707 30.813 81.637 cv
30.816 81.57 30.832 81.512 30.859 81.457 cv
30.883 81.406 30.914 81.352 30.949 81.297 cv
30.984 81.246 31.027 81.191 31.086 81.129 cv
32.859 79.305 li
33.27 78.887 33.598 78.512 33.848 78.176 cv
34.094 77.848 34.285 77.543 34.418 77.266 cv
34.551 76.992 34.637 76.742 34.684 76.516 cv
34.723 76.293 34.746 76.082 34.746 75.887 cv
34.746 75.691 34.711 75.508 34.645 75.328 cv
34.578 75.156 34.484 75 34.359 74.863 cv
34.234 74.734 34.078 74.629 33.891 74.547 cv
33.703 74.473 33.484 74.434 33.238 74.43 cv
32.949 74.434 32.691 74.473 32.465 74.547 cv
32.234 74.629 32.035 74.715 31.863 74.801 cv
31.691 74.895 31.547 74.977 31.43 75.055 cv
31.313 75.133 31.227 75.172 31.176 75.172 cv
31.141 75.172 31.109 75.164 31.086 75.145 cv
31.055 75.129 31.035 75.098 31.02 75.055 cv
31.004 75.016 30.988 74.961 30.98 74.891 cv
30.969 74.824 30.965 74.742 30.969 74.645 cv
30.965 74.578 30.969 74.52 30.977 74.469 cv
30.98 74.418 30.988 74.375 31 74.336 cv
31.008 74.301 31.023 74.266 31.043 74.234 cv
31.063 74.203 31.098 74.164 31.156 74.113 cv
31.207 74.066 31.301 74 31.438 73.918 cv
31.57 73.836 31.742 73.758 31.945 73.676 cv
32.148 73.598 32.371 73.527 32.617 73.473 cv
32.859 73.418 33.117 73.391 33.391 73.391 cv
33.816 73.391 34.191 73.453 34.516 73.574 cv
34.836 73.695 35.102 73.859 35.316 74.07 cv
35.527 74.281 35.688 74.527 35.793 74.801 cv
35.898 75.082 35.953 75.379 35.953 75.691 cv
35.953 75.98 35.926 76.262 35.875 76.539 cv
35.824 76.824 35.719 77.129 35.559 77.453 cv
35.395 77.781 35.16 78.145 34.855 78.543 cv
34.547 78.945 34.141 79.406 33.637 79.922 cv
32.23 81.391 li
36.09 81.391 li
36.121 81.395 36.156 81.406 36.195 81.422 cv
36.227 81.445 36.258 81.477 36.285 81.516 cv
36.309 81.559 36.328 81.609 36.34 81.668 cv
36.352 81.734 36.355 81.805 36.359 81.883 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.77 77.934 mo
43.766 78.617 43.715 79.238 43.609 79.801 cv
43.5 80.363 43.32 80.848 43.074 81.25 cv
42.82 81.656 42.492 81.969 42.094 82.187 cv
41.688 82.41 41.195 82.52 40.609 82.52 cv
40.051 82.52 39.578 82.422 39.199 82.223 cv
38.816 82.027 38.512 81.734 38.277 81.348 cv
38.043 80.961 37.875 80.488 37.781 79.922 cv
37.68 79.359 37.633 78.711 37.633 77.977 cv
37.633 77.305 37.688 76.684 37.797 76.117 cv
37.906 75.555 38.082 75.07 38.332 74.664 cv
38.574 74.262 38.898 73.949 39.305 73.723 cv
39.703 73.504 40.199 73.391 40.789 73.391 cv
41.348 73.391 41.82 73.492 42.203 73.687 cv
42.586 73.891 42.891 74.184 43.125 74.566 cv
43.355 74.957 43.523 75.43 43.621 75.992 cv
43.719 76.555 43.766 77.203 43.77 77.934 cv
cp
42.563 78.016 mo
42.559 77.574 42.543 77.176 42.516 76.824 cv
42.48 76.473 42.434 76.164 42.375 75.895 cv
42.309 75.625 42.23 75.395 42.133 75.199 cv
42.035 75.008 41.918 74.848 41.781 74.719 cv
41.641 74.594 41.48 74.5 41.309 74.441 cv
41.129 74.387 40.934 74.359 40.719 74.355 cv
40.328 74.359 40.012 74.449 39.773 74.633 cv
39.527 74.816 39.336 75.07 39.199 75.387 cv
39.059 75.707 38.965 76.078 38.914 76.508 cv
38.863 76.937 38.84 77.402 38.84 77.895 cv
38.84 78.559 38.871 79.121 38.941 79.582 cv
39.008 80.051 39.117 80.43 39.27 80.719 cv
39.414 81.016 39.605 81.227 39.836 81.355 cv
40.066 81.492 40.348 81.559 40.68 81.555 cv
40.934 81.559 41.156 81.52 41.352 81.434 cv
41.543 81.355 41.711 81.234 41.852 81.078 cv
41.992 80.926 42.105 80.742 42.199 80.527 cv
42.285 80.312 42.359 80.074 42.418 79.812 cv
42.469 79.555 42.508 79.273 42.531 78.969 cv
42.551 78.664 42.559 78.348 42.563 78.016 cv
cp
f
46.699 81.645 mo
46.699 81.973 46.645 82.187 46.539 82.293 cv
46.43 82.398 46.234 82.449 45.953 82.453 cv
45.676 82.449 45.484 82.398 45.383 82.297 cv
45.273 82.191 45.223 81.98 45.227 81.664 cv
45.223 81.34 45.277 81.125 45.387 81.016 cv
45.492 80.91 45.688 80.855 45.973 80.855 cv
46.246 80.855 46.434 80.91 46.543 81.016 cv
46.645 81.121 46.699 81.332 46.699 81.645 cv
cp
f
54.398 77.934 mo
54.395 78.617 54.344 79.238 54.238 79.801 cv
54.129 80.363 53.949 80.848 53.703 81.25 cv
53.449 81.656 53.121 81.969 52.723 82.187 cv
52.316 82.41 51.824 82.52 51.238 82.52 cv
50.68 82.52 50.207 82.422 49.828 82.223 cv
49.445 82.027 49.141 81.734 48.906 81.348 cv
48.672 80.961 48.504 80.488 48.41 79.922 cv
48.309 79.359 48.262 78.711 48.262 77.977 cv
48.262 77.305 48.316 76.684 48.426 76.117 cv
48.535 75.555 48.711 75.07 48.961 74.664 cv
49.203 74.262 49.527 73.949 49.934 73.723 cv
50.332 73.504 50.828 73.391 51.418 73.391 cv
51.977 73.391 52.449 73.492 52.832 73.687 cv
53.215 73.891 53.52 74.184 53.754 74.566 cv
53.984 74.957 54.152 75.43 54.25 75.992 cv
54.348 76.555 54.395 77.203 54.398 77.934 cv
cp
53.191 78.016 mo
53.188 77.574 53.172 77.176 53.145 76.824 cv
53.109 76.473 53.063 76.164 53.004 75.895 cv
52.938 75.625 52.859 75.395 52.762 75.199 cv
52.664 75.008 52.547 74.848 52.41 74.719 cv
52.27 74.594 52.109 74.5 51.938 74.441 cv
51.758 74.387 51.563 74.359 51.348 74.355 cv
50.957 74.359 50.641 74.449 50.402 74.633 cv
50.156 74.816 49.965 75.07 49.828 75.387 cv
49.688 75.707 49.594 76.078 49.543 76.508 cv
49.492 76.937 49.469 77.402 49.469 77.895 cv
49.469 78.559 49.5 79.121 49.57 79.582 cv
49.637 80.051 49.746 80.43 49.898 80.719 cv
50.043 81.016 50.234 81.227 50.465 81.355 cv
50.695 81.492 50.977 81.559 51.309 81.555 cv
51.563 81.559 51.785 81.52 51.98 81.434 cv
52.172 81.355 52.34 81.234 52.48 81.078 cv
52.621 80.926 52.734 80.742 52.828 80.527 cv
52.914 80.312 52.988 80.074 53.047 79.812 cv
53.098 79.555 53.137 79.273 53.16 78.969 cv
53.18 78.664 53.188 78.348 53.191 78.016 cv
cp
f
30 15.789 mo
57.984 15.789 li
57.984 32.879 li
30 32.879 li
cp
0 0 0 0 cmyk
ef
36.359 28.602 mo
36.355 28.687 36.352 28.762 36.34 28.824 cv
36.328 28.891 36.313 28.945 36.293 28.984 cv
36.27 29.031 36.242 29.062 36.211 29.078 cv
36.176 29.102 36.137 29.109 36.098 29.109 cv
31.195 29.109 li
31.133 29.109 31.074 29.102 31.027 29.086 cv
30.977 29.07 30.938 29.047 30.902 29.008 cv
30.867 28.977 30.84 28.922 30.828 28.852 cv
30.809 28.781 30.801 28.695 30.805 28.594 cv
30.801 28.504 30.805 28.426 30.813 28.355 cv
30.816 28.289 30.832 28.23 30.859 28.176 cv
30.883 28.125 30.914 28.07 30.949 28.016 cv
30.984 27.965 31.027 27.91 31.086 27.848 cv
32.859 26.023 li
33.27 25.605 33.598 25.23 33.848 24.895 cv
34.094 24.566 34.285 24.262 34.418 23.984 cv
34.551 23.711 34.637 23.461 34.684 23.234 cv
34.723 23.012 34.746 22.801 34.746 22.605 cv
34.746 22.41 34.711 22.227 34.645 22.047 cv
34.578 21.875 34.484 21.719 34.359 21.582 cv
34.234 21.453 34.078 21.348 33.891 21.266 cv
33.703 21.191 33.484 21.152 33.238 21.148 cv
32.949 21.152 32.691 21.191 32.465 21.266 cv
32.234 21.348 32.035 21.434 31.863 21.52 cv
31.691 21.613 31.547 21.695 31.43 21.773 cv
31.313 21.852 31.227 21.891 31.176 21.891 cv
31.141 21.891 31.109 21.883 31.086 21.863 cv
31.055 21.848 31.035 21.816 31.02 21.773 cv
31.004 21.734 30.988 21.68 30.98 21.609 cv
30.969 21.543 30.965 21.461 30.969 21.363 cv
30.965 21.297 30.969 21.238 30.977 21.187 cv
30.98 21.137 30.988 21.094 31 21.055 cv
31.008 21.02 31.023 20.984 31.043 20.953 cv
31.063 20.922 31.098 20.883 31.156 20.832 cv
31.207 20.785 31.301 20.719 31.438 20.637 cv
31.57 20.555 31.742 20.477 31.945 20.395 cv
32.148 20.316 32.371 20.246 32.617 20.191 cv
32.859 20.137 33.117 20.109 33.391 20.109 cv
33.816 20.109 34.191 20.172 34.516 20.293 cv
34.836 20.414 35.102 20.578 35.316 20.789 cv
35.527 21 35.688 21.246 35.793 21.52 cv
35.898 21.801 35.953 22.098 35.953 22.41 cv
35.953 22.699 35.926 22.98 35.875 23.258 cv
35.824 23.543 35.719 23.848 35.559 24.172 cv
35.395 24.5 35.16 24.863 34.855 25.262 cv
34.547 25.664 34.141 26.125 33.637 26.641 cv
32.23 28.109 li
36.09 28.109 li
36.121 28.113 36.156 28.125 36.195 28.141 cv
36.227 28.164 36.258 28.195 36.285 28.234 cv
36.309 28.277 36.328 28.328 36.34 28.387 cv
36.352 28.453 36.355 28.523 36.359 28.602 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.477 28.602 mo
43.473 28.687 43.469 28.762 43.457 28.824 cv
43.445 28.891 43.43 28.945 43.41 28.984 cv
43.387 29.031 43.359 29.062 43.328 29.078 cv
43.293 29.102 43.254 29.109 43.215 29.109 cv
38.313 29.109 li
38.25 29.109 38.191 29.102 38.145 29.086 cv
38.094 29.07 38.055 29.047 38.02 29.008 cv
37.984 28.977 37.957 28.922 37.945 28.852 cv
37.926 28.781 37.918 28.695 37.922 28.594 cv
37.918 28.504 37.922 28.426 37.93 28.355 cv
37.934 28.289 37.949 28.23 37.977 28.176 cv
38 28.125 38.031 28.07 38.066 28.016 cv
38.102 27.965 38.145 27.91 38.203 27.848 cv
39.977 26.023 li
40.387 25.605 40.715 25.23 40.965 24.895 cv
41.211 24.566 41.402 24.262 41.535 23.984 cv
41.668 23.711 41.754 23.461 41.801 23.234 cv
41.84 23.012 41.863 22.801 41.863 22.605 cv
41.863 22.41 41.828 22.227 41.762 22.047 cv
41.695 21.875 41.602 21.719 41.477 21.582 cv
41.352 21.453 41.195 21.348 41.008 21.266 cv
40.82 21.191 40.602 21.152 40.355 21.148 cv
40.066 21.152 39.809 21.191 39.582 21.266 cv
39.352 21.348 39.152 21.434 38.98 21.52 cv
38.809 21.613 38.664 21.695 38.547 21.773 cv
38.43 21.852 38.344 21.891 38.293 21.891 cv
38.258 21.891 38.227 21.883 38.203 21.863 cv
38.172 21.848 38.152 21.816 38.137 21.773 cv
38.121 21.734 38.105 21.68 38.098 21.609 cv
38.086 21.543 38.082 21.461 38.086 21.363 cv
38.082 21.297 38.086 21.238 38.094 21.187 cv
38.098 21.137 38.105 21.094 38.117 21.055 cv
38.125 21.02 38.141 20.984 38.16 20.953 cv
38.18 20.922 38.215 20.883 38.273 20.832 cv
38.324 20.785 38.418 20.719 38.555 20.637 cv
38.688 20.555 38.859 20.477 39.063 20.395 cv
39.266 20.316 39.488 20.246 39.734 20.191 cv
39.977 20.137 40.234 20.109 40.508 20.109 cv
40.934 20.109 41.309 20.172 41.633 20.293 cv
41.953 20.414 42.219 20.578 42.434 20.789 cv
42.645 21 42.805 21.246 42.91 21.52 cv
43.016 21.801 43.07 22.098 43.07 22.41 cv
43.07 22.699 43.043 22.98 42.992 23.258 cv
42.941 23.543 42.836 23.848 42.676 24.172 cv
42.512 24.5 42.277 24.863 41.973 25.262 cv
41.664 25.664 41.258 26.125 40.754 26.641 cv
39.348 28.109 li
43.207 28.109 li
43.238 28.113 43.273 28.125 43.313 28.141 cv
43.344 28.164 43.375 28.195 43.402 28.234 cv
43.426 28.277 43.445 28.328 43.457 28.387 cv
43.469 28.453 43.473 28.523 43.477 28.602 cv
cp
f
46.699 28.363 mo
46.699 28.691 46.645 28.906 46.539 29.012 cv
46.43 29.117 46.234 29.168 45.953 29.172 cv
45.676 29.168 45.484 29.117 45.383 29.016 cv
45.273 28.91 45.223 28.699 45.227 28.383 cv
45.223 28.059 45.277 27.844 45.387 27.734 cv
45.492 27.629 45.688 27.574 45.973 27.574 cv
46.246 27.574 46.434 27.629 46.543 27.734 cv
46.645 27.84 46.699 28.051 46.699 28.363 cv
cp
f
54.063 26.258 mo
54.063 26.734 53.98 27.156 53.82 27.527 cv
53.66 27.898 53.434 28.211 53.145 28.465 cv
52.848 28.719 52.5 28.914 52.098 29.043 cv
51.691 29.176 51.242 29.238 50.75 29.238 cv
50.473 29.238 50.211 29.219 49.969 29.18 cv
49.719 29.141 49.5 29.094 49.313 29.039 cv
49.117 28.984 48.961 28.93 48.836 28.871 cv
48.711 28.82 48.633 28.777 48.602 28.742 cv
48.566 28.711 48.543 28.68 48.531 28.652 cv
48.516 28.625 48.5 28.594 48.492 28.551 cv
48.477 28.516 48.469 28.465 48.469 28.402 cv
48.461 28.344 48.461 28.273 48.461 28.191 cv
48.461 28.117 48.465 28.047 48.473 27.984 cv
48.48 27.922 48.492 27.871 48.512 27.832 cv
48.527 27.793 48.547 27.766 48.574 27.746 cv
48.598 27.73 48.629 27.723 48.66 27.719 cv
48.707 27.723 48.777 27.75 48.871 27.805 cv
48.965 27.863 49.094 27.926 49.258 27.992 cv
49.422 28.059 49.621 28.121 49.863 28.18 cv
50.098 28.238 50.383 28.266 50.719 28.266 cv
51.02 28.266 51.301 28.23 51.559 28.156 cv
51.813 28.086 52.035 27.973 52.223 27.816 cv
52.406 27.664 52.551 27.469 52.656 27.23 cv
52.762 26.996 52.813 26.707 52.816 26.367 cv
52.813 26.086 52.77 25.836 52.68 25.617 cv
52.59 25.398 52.453 25.219 52.27 25.074 cv
52.082 24.934 51.848 24.828 51.566 24.754 cv
51.281 24.684 50.941 24.645 50.555 24.645 cv
50.27 24.645 50.031 24.66 49.832 24.687 cv
49.629 24.719 49.441 24.734 49.27 24.73 cv
49.141 24.734 49.047 24.703 48.996 24.641 cv
48.938 24.582 48.91 24.469 48.914 24.297 cv
48.914 20.684 li
48.91 20.535 48.945 20.426 49.02 20.348 cv
49.086 20.277 49.188 20.238 49.324 20.238 cv
53.254 20.238 li
53.289 20.238 53.324 20.25 53.359 20.27 cv
53.391 20.293 53.418 20.324 53.445 20.363 cv
53.465 20.406 53.48 20.457 53.496 20.52 cv
53.504 20.586 53.512 20.664 53.516 20.746 cv
53.512 20.914 53.488 21.039 53.449 21.129 cv
53.402 21.223 53.344 21.27 53.266 21.266 cv
50.094 21.266 li
50.094 23.754 li
50.246 23.734 50.402 23.723 50.566 23.715 cv
50.723 23.711 50.91 23.707 51.125 23.707 cv
51.609 23.707 52.035 23.77 52.402 23.891 cv
52.766 24.012 53.07 24.184 53.32 24.402 cv
53.563 24.629 53.75 24.895 53.875 25.207 cv
54 25.523 54.063 25.875 54.063 26.258 cv
cp
f
73.797 526.215 mo
73.793 526.305 73.785 526.375 73.773 526.434 cv
73.758 526.496 73.738 526.547 73.719 526.578 cv
73.695 526.617 73.672 526.641 73.641 526.656 cv
73.609 526.672 73.578 526.68 73.551 526.68 cv
68.914 526.68 li
68.879 526.68 68.852 526.672 68.824 526.656 cv
68.797 526.641 68.77 526.617 68.746 526.578 cv
68.719 526.547 68.699 526.496 68.688 526.434 cv
68.672 526.375 68.664 526.305 68.668 526.215 cv
68.664 526.137 68.672 526.062 68.688 526 cv
68.699 525.941 68.715 525.895 68.738 525.855 cv
68.754 525.82 68.781 525.789 68.813 525.766 cv
68.844 525.746 68.875 525.738 68.914 525.734 cv
70.766 525.734 li
70.766 518.988 li
69.051 520.008 li
68.961 520.059 68.891 520.086 68.844 520.094 cv
68.789 520.102 68.746 520.094 68.715 520.062 cv
68.68 520.035 68.66 519.984 68.648 519.914 cv
68.637 519.848 68.629 519.762 68.633 519.652 cv
68.629 519.578 68.633 519.512 68.645 519.453 cv
68.648 519.402 68.66 519.355 68.676 519.316 cv
68.688 519.281 68.707 519.25 68.73 519.223 cv
68.754 519.195 68.785 519.168 68.832 519.141 cv
70.875 517.828 li
70.891 517.816 70.91 517.805 70.941 517.797 cv
70.965 517.789 71 517.781 71.047 517.77 cv
71.086 517.762 71.137 517.754 71.191 517.75 cv
71.246 517.75 71.313 517.75 71.398 517.746 cv
71.504 517.75 71.598 517.754 71.672 517.762 cv
71.742 517.77 71.797 517.785 71.844 517.801 cv
71.883 517.82 71.91 517.84 71.926 517.863 cv
71.934 517.891 71.941 517.914 71.945 517.937 cv
71.945 525.734 li
73.551 525.734 li
73.586 525.738 73.621 525.746 73.652 525.766 cv
73.684 525.789 73.707 525.82 73.73 525.855 cv
73.746 525.895 73.762 525.941 73.777 526 cv
73.785 526.062 73.793 526.137 73.797 526.215 cv
cp
f
146.035 526.172 mo
146.031 526.258 146.027 526.332 146.016 526.395 cv
146.004 526.461 145.988 526.516 145.969 526.555 cv
145.945 526.602 145.918 526.633 145.887 526.648 cv
145.852 526.672 145.813 526.68 145.773 526.68 cv
140.871 526.68 li
140.809 526.68 140.75 526.672 140.703 526.656 cv
140.652 526.641 140.613 526.617 140.578 526.578 cv
140.543 526.547 140.516 526.492 140.504 526.422 cv
140.484 526.352 140.477 526.266 140.48 526.164 cv
140.477 526.074 140.48 525.996 140.488 525.926 cv
140.492 525.859 140.508 525.801 140.535 525.746 cv
140.559 525.695 140.59 525.641 140.625 525.586 cv
140.66 525.535 140.703 525.48 140.762 525.418 cv
142.535 523.594 li
142.945 523.176 143.273 522.801 143.523 522.465 cv
143.77 522.137 143.961 521.832 144.094 521.555 cv
144.227 521.281 144.313 521.031 144.359 520.805 cv
144.398 520.582 144.422 520.371 144.422 520.176 cv
144.422 519.98 144.387 519.797 144.32 519.617 cv
144.254 519.445 144.16 519.289 144.035 519.152 cv
143.91 519.023 143.754 518.918 143.566 518.836 cv
143.379 518.762 143.16 518.723 142.914 518.719 cv
142.625 518.723 142.367 518.762 142.141 518.836 cv
141.91 518.918 141.711 519.004 141.539 519.09 cv
141.367 519.184 141.223 519.266 141.105 519.344 cv
140.988 519.422 140.902 519.461 140.852 519.461 cv
140.816 519.461 140.785 519.453 140.762 519.434 cv
140.73 519.418 140.711 519.387 140.695 519.344 cv
140.68 519.305 140.664 519.25 140.656 519.18 cv
140.645 519.113 140.641 519.031 140.645 518.934 cv
140.641 518.867 140.645 518.809 140.652 518.758 cv
140.656 518.707 140.664 518.664 140.676 518.625 cv
140.684 518.59 140.699 518.555 140.719 518.523 cv
140.738 518.492 140.773 518.453 140.832 518.402 cv
140.883 518.355 140.977 518.289 141.113 518.207 cv
141.246 518.125 141.418 518.047 141.621 517.965 cv
141.824 517.887 142.047 517.816 142.293 517.762 cv
142.535 517.707 142.793 517.68 143.066 517.68 cv
143.492 517.68 143.867 517.742 144.191 517.863 cv
144.512 517.984 144.777 518.148 144.992 518.359 cv
145.203 518.57 145.363 518.816 145.469 519.09 cv
145.574 519.371 145.629 519.668 145.629 519.98 cv
145.629 520.27 145.602 520.551 145.551 520.828 cv
145.5 521.113 145.395 521.418 145.234 521.742 cv
145.07 522.07 144.836 522.434 144.531 522.832 cv
144.223 523.234 143.816 523.695 143.313 524.211 cv
141.906 525.68 li
145.766 525.68 li
145.797 525.684 145.832 525.695 145.871 525.711 cv
145.902 525.734 145.934 525.766 145.961 525.805 cv
145.984 525.848 146.004 525.898 146.016 525.957 cv
146.027 526.023 146.031 526.094 146.035 526.172 cv
cp
f
218.652 524.156 mo
218.648 524.309 218.625 524.43 218.582 524.516 cv
218.535 524.605 218.473 524.648 218.391 524.645 cv
217.391 524.645 li
217.391 526.508 li
217.391 526.547 217.379 526.578 217.363 526.602 cv
217.34 526.629 217.309 526.648 217.266 526.668 cv
217.215 526.684 217.152 526.695 217.082 526.707 cv
217.004 526.715 216.91 526.719 216.793 526.723 cv
216.676 526.719 216.578 526.715 216.508 526.707 cv
216.43 526.695 216.371 526.684 216.328 526.668 cv
216.281 526.648 216.25 526.629 216.234 526.602 cv
216.215 526.578 216.207 526.547 216.211 526.508 cv
216.211 524.645 li
212.582 524.645 li
212.523 524.648 212.48 524.641 212.445 524.625 cv
212.41 524.613 212.375 524.586 212.348 524.547 cv
212.316 524.512 212.297 524.461 212.285 524.391 cv
212.273 524.324 212.27 524.234 212.27 524.121 cv
212.27 524.039 212.27 523.961 212.277 523.891 cv
212.277 523.82 212.289 523.758 212.305 523.703 cv
212.316 523.648 212.332 523.594 212.359 523.539 cv
212.379 523.484 212.406 523.43 212.441 523.367 cv
215.602 517.98 li
215.621 517.945 215.656 517.914 215.703 517.887 cv
215.746 517.859 215.801 517.836 215.875 517.816 cv
215.941 517.801 216.027 517.789 216.133 517.777 cv
216.234 517.773 216.355 517.77 216.496 517.766 cv
216.645 517.77 216.781 517.773 216.898 517.785 cv
217.012 517.797 217.102 517.812 217.176 517.828 cv
217.242 517.848 217.297 517.871 217.336 517.902 cv
217.371 517.934 217.391 517.969 217.391 518.008 cv
217.391 523.672 li
218.391 523.672 li
218.465 523.676 218.527 523.715 218.578 523.793 cv
218.625 523.875 218.648 523.996 218.652 524.156 cv
cp
216.211 518.805 mo
216.199 518.805 li
213.348 523.672 li
216.211 523.672 li
cp
f
290.773 523.809 mo
290.773 524.199 290.711 524.578 290.594 524.937 cv
290.469 525.305 290.285 525.621 290.043 525.895 cv
289.793 526.172 289.48 526.395 289.105 526.559 cv
288.723 526.727 288.277 526.809 287.762 526.809 cv
287.391 526.809 287.063 526.766 286.781 526.672 cv
286.496 526.586 286.25 526.453 286.039 526.281 cv
285.828 526.113 285.652 525.906 285.516 525.66 cv
285.375 525.414 285.262 525.133 285.18 524.816 cv
285.094 524.504 285.035 524.16 285 523.781 cv
284.961 523.41 284.941 523.008 284.945 522.574 cv
284.941 522.195 284.961 521.812 285.004 521.422 cv
285.043 521.039 285.117 520.664 285.223 520.297 cv
285.328 519.937 285.473 519.598 285.652 519.281 cv
285.832 518.965 286.059 518.687 286.332 518.453 cv
286.605 518.219 286.93 518.031 287.309 517.891 cv
287.688 517.754 288.129 517.687 288.633 517.684 cv
288.801 517.687 288.973 517.695 289.145 517.715 cv
289.316 517.738 289.477 517.77 289.625 517.801 cv
289.773 517.84 289.895 517.875 289.996 517.914 cv
290.094 517.953 290.16 517.988 290.195 518.012 cv
290.223 518.039 290.246 518.066 290.266 518.094 cv
290.281 518.125 290.297 518.156 290.305 518.191 cv
290.313 518.227 290.316 518.266 290.324 518.309 cv
290.324 518.352 290.328 518.406 290.332 518.469 cv
290.328 518.555 290.328 518.625 290.328 518.68 cv
290.324 518.742 290.313 518.789 290.301 518.824 cv
290.281 518.863 290.262 518.891 290.238 518.906 cv
290.211 518.926 290.18 518.934 290.141 518.934 cv
290.09 518.934 290.02 518.918 289.934 518.887 cv
289.844 518.855 289.738 518.82 289.617 518.777 cv
289.492 518.742 289.344 518.707 289.168 518.672 cv
288.992 518.645 288.789 518.629 288.559 518.625 cv
288.129 518.629 287.762 518.715 287.457 518.887 cv
287.152 519.059 286.902 519.293 286.707 519.586 cv
286.512 519.879 286.367 520.219 286.277 520.602 cv
286.18 520.992 286.125 521.395 286.117 521.812 cv
286.234 521.746 286.371 521.68 286.52 521.609 cv
286.668 521.543 286.828 521.48 287.004 521.422 cv
287.18 521.371 287.367 521.324 287.563 521.289 cv
287.758 521.258 287.969 521.242 288.195 521.238 cv
288.672 521.242 289.074 521.309 289.406 521.434 cv
289.734 521.566 290 521.746 290.207 521.977 cv
290.406 522.207 290.551 522.477 290.641 522.789 cv
290.727 523.102 290.773 523.441 290.773 523.809 cv
cp
289.578 523.918 mo
289.578 523.656 289.551 523.414 289.5 523.195 cv
289.445 522.98 289.355 522.797 289.234 522.641 cv
289.109 522.492 288.945 522.375 288.742 522.293 cv
288.531 522.211 288.277 522.168 287.98 522.168 cv
287.809 522.168 287.641 522.184 287.473 522.215 cv
287.301 522.246 287.137 522.289 286.98 522.336 cv
286.82 522.391 286.672 522.453 286.531 522.523 cv
286.387 522.598 286.254 522.672 286.137 522.75 cv
286.133 523.344 286.172 523.84 286.25 524.234 cv
286.324 524.633 286.434 524.949 286.578 525.187 cv
286.723 525.43 286.902 525.602 287.117 525.703 cv
287.332 525.809 287.582 525.859 287.871 525.855 cv
288.16 525.859 288.414 525.805 288.629 525.691 cv
288.844 525.586 289.02 525.437 289.164 525.25 cv
289.305 525.066 289.41 524.859 289.477 524.629 cv
289.543 524.398 289.578 524.164 289.578 523.918 cv
cp
f
363.008 524.402 mo
363.008 524.789 362.938 525.133 362.801 525.43 cv
362.664 525.734 362.469 525.984 362.211 526.187 cv
361.953 526.395 361.633 526.551 361.254 526.652 cv
360.871 526.758 360.438 526.809 359.953 526.809 cv
359.492 526.809 359.082 526.762 358.723 526.668 cv
358.359 526.574 358.055 526.434 357.805 526.242 cv
357.555 526.059 357.363 525.828 357.23 525.551 cv
357.098 525.277 357.031 524.965 357.031 524.609 cv
357.031 524.336 357.074 524.078 357.168 523.844 cv
357.254 523.609 357.387 523.395 357.563 523.199 cv
357.73 523.004 357.941 522.82 358.195 522.645 cv
358.445 522.477 358.73 522.312 359.047 522.156 cv
358.773 522.016 358.531 521.867 358.32 521.707 cv
358.109 521.551 357.93 521.379 357.785 521.191 cv
357.637 521.008 357.527 520.812 357.453 520.602 cv
357.375 520.395 357.336 520.164 357.34 519.914 cv
357.336 519.605 357.391 519.312 357.508 519.039 cv
357.617 518.77 357.789 518.535 358.016 518.332 cv
358.242 518.133 358.527 517.973 358.879 517.855 cv
359.223 517.738 359.633 517.68 360.102 517.68 cv
360.547 517.68 360.934 517.734 361.262 517.84 cv
361.59 517.949 361.859 518.094 362.07 518.277 cv
362.281 518.465 362.438 518.684 362.543 518.934 cv
362.641 519.184 362.691 519.453 362.695 519.742 cv
362.691 519.977 362.652 520.203 362.582 520.414 cv
362.504 520.633 362.395 520.836 362.246 521.023 cv
362.098 521.219 361.918 521.398 361.707 521.562 cv
361.496 521.734 361.254 521.891 360.98 522.031 cv
361.301 522.195 361.586 522.359 361.844 522.527 cv
362.094 522.695 362.309 522.875 362.484 523.07 cv
362.652 523.266 362.781 523.473 362.875 523.687 cv
362.961 523.906 363.008 524.145 363.008 524.402 cv
cp
361.527 519.852 mo
361.523 519.664 361.492 519.488 361.426 519.332 cv
361.359 519.176 361.262 519.043 361.137 518.934 cv
361.008 518.824 360.848 518.742 360.66 518.684 cv
360.465 518.629 360.25 518.602 360.012 518.598 cv
359.516 518.602 359.141 518.711 358.891 518.934 cv
358.633 519.16 358.508 519.469 358.512 519.852 cv
358.508 520.031 358.539 520.195 358.602 520.348 cv
358.664 520.504 358.758 520.648 358.891 520.785 cv
359.016 520.922 359.18 521.055 359.383 521.184 cv
359.578 521.316 359.816 521.453 360.094 521.594 cv
360.555 521.359 360.91 521.098 361.156 520.805 cv
361.402 520.52 361.523 520.203 361.527 519.852 cv
cp
361.816 524.527 mo
361.813 524.32 361.773 524.129 361.699 523.957 cv
361.617 523.789 361.5 523.629 361.344 523.477 cv
361.188 523.328 360.988 523.184 360.754 523.043 cv
360.516 522.906 360.246 522.762 359.938 522.609 cv
359.648 522.754 359.395 522.895 359.18 523.035 cv
358.961 523.176 358.781 523.324 358.645 523.473 cv
358.504 523.629 358.398 523.785 358.328 523.949 cv
358.254 524.117 358.219 524.301 358.223 524.5 cv
358.219 524.945 358.371 525.289 358.68 525.527 cv
358.98 525.773 359.434 525.895 360.039 525.891 cv
360.621 525.895 361.066 525.773 361.367 525.523 cv
361.664 525.281 361.813 524.949 361.816 524.527 cv
cp
f
431.516 526.215 mo
431.512 526.305 431.504 526.375 431.492 526.434 cv
431.477 526.496 431.457 526.547 431.438 526.578 cv
431.414 526.617 431.391 526.641 431.359 526.656 cv
431.328 526.672 431.297 526.68 431.27 526.68 cv
426.633 526.68 li
426.598 526.68 426.57 526.672 426.543 526.656 cv
426.516 526.641 426.488 526.617 426.465 526.578 cv
426.438 526.547 426.418 526.496 426.406 526.434 cv
426.391 526.375 426.383 526.305 426.387 526.215 cv
426.383 526.137 426.391 526.062 426.406 526 cv
426.418 525.941 426.434 525.895 426.457 525.855 cv
426.473 525.82 426.5 525.789 426.531 525.766 cv
426.563 525.746 426.594 525.738 426.633 525.734 cv
428.484 525.734 li
428.484 518.988 li
426.77 520.008 li
426.68 520.059 426.609 520.086 426.563 520.094 cv
426.508 520.102 426.465 520.094 426.434 520.062 cv
426.398 520.035 426.379 519.984 426.367 519.914 cv
426.355 519.848 426.348 519.762 426.352 519.652 cv
426.348 519.578 426.352 519.512 426.363 519.453 cv
426.367 519.402 426.379 519.355 426.395 519.316 cv
426.406 519.281 426.426 519.25 426.449 519.223 cv
426.473 519.195 426.504 519.168 426.551 519.141 cv
428.594 517.828 li
428.609 517.816 428.629 517.805 428.66 517.797 cv
428.684 517.789 428.719 517.781 428.766 517.77 cv
428.805 517.762 428.855 517.754 428.91 517.75 cv
428.965 517.75 429.031 517.75 429.117 517.746 cv
429.223 517.75 429.316 517.754 429.391 517.762 cv
429.461 517.77 429.516 517.785 429.563 517.801 cv
429.602 517.82 429.629 517.84 429.645 517.863 cv
429.652 517.891 429.66 517.914 429.664 517.937 cv
429.664 525.734 li
431.27 525.734 li
431.305 525.738 431.34 525.746 431.371 525.766 cv
431.402 525.789 431.426 525.82 431.449 525.855 cv
431.465 525.895 431.48 525.941 431.496 526 cv
431.504 526.062 431.512 526.137 431.516 526.215 cv
cp
f
438.867 522.223 mo
438.863 522.906 438.813 523.527 438.707 524.09 cv
438.598 524.652 438.418 525.137 438.172 525.539 cv
437.918 525.945 437.59 526.258 437.191 526.477 cv
436.785 526.699 436.293 526.809 435.707 526.809 cv
435.148 526.809 434.676 526.711 434.297 526.512 cv
433.914 526.316 433.609 526.023 433.375 525.637 cv
433.141 525.25 432.973 524.777 432.879 524.211 cv
432.777 523.648 432.73 523 432.73 522.266 cv
432.73 521.594 432.785 520.973 432.895 520.406 cv
433.004 519.844 433.18 519.359 433.43 518.953 cv
433.672 518.551 433.996 518.238 434.402 518.012 cv
434.801 517.793 435.297 517.68 435.887 517.68 cv
436.445 517.68 436.918 517.781 437.301 517.977 cv
437.684 518.18 437.988 518.473 438.223 518.855 cv
438.453 519.246 438.621 519.719 438.719 520.281 cv
438.816 520.844 438.863 521.492 438.867 522.223 cv
cp
437.66 522.305 mo
437.656 521.863 437.641 521.465 437.613 521.113 cv
437.578 520.762 437.531 520.453 437.473 520.184 cv
437.406 519.914 437.328 519.684 437.23 519.488 cv
437.133 519.297 437.016 519.137 436.879 519.008 cv
436.738 518.883 436.578 518.789 436.406 518.73 cv
436.227 518.676 436.031 518.648 435.816 518.645 cv
435.426 518.648 435.109 518.738 434.871 518.922 cv
434.625 519.105 434.434 519.359 434.297 519.676 cv
434.156 519.996 434.063 520.367 434.012 520.797 cv
433.961 521.227 433.938 521.691 433.938 522.184 cv
433.938 522.848 433.969 523.41 434.039 523.871 cv
434.105 524.34 434.215 524.719 434.367 525.008 cv
434.512 525.305 434.703 525.516 434.934 525.645 cv
435.164 525.781 435.445 525.848 435.777 525.844 cv
436.031 525.848 436.254 525.809 436.449 525.723 cv
436.641 525.645 436.809 525.523 436.949 525.367 cv
437.09 525.215 437.203 525.031 437.297 524.816 cv
437.383 524.602 437.457 524.363 437.516 524.102 cv
437.566 523.844 437.605 523.562 437.629 523.258 cv
437.648 522.953 437.656 522.637 437.66 522.305 cv
cp
f
503.777 526.215 mo
503.773 526.305 503.766 526.375 503.754 526.434 cv
503.738 526.496 503.719 526.547 503.699 526.578 cv
503.676 526.617 503.652 526.641 503.621 526.656 cv
503.59 526.672 503.559 526.68 503.531 526.68 cv
498.895 526.68 li
498.859 526.68 498.832 526.672 498.805 526.656 cv
498.777 526.641 498.75 526.617 498.727 526.578 cv
498.699 526.547 498.68 526.496 498.668 526.434 cv
498.652 526.375 498.645 526.305 498.648 526.215 cv
498.645 526.137 498.652 526.062 498.668 526 cv
498.68 525.941 498.695 525.895 498.719 525.855 cv
498.734 525.82 498.762 525.789 498.793 525.766 cv
498.824 525.746 498.855 525.738 498.895 525.734 cv
500.746 525.734 li
500.746 518.988 li
499.031 520.008 li
498.941 520.059 498.871 520.086 498.824 520.094 cv
498.77 520.102 498.727 520.094 498.695 520.062 cv
498.66 520.035 498.641 519.984 498.629 519.914 cv
498.617 519.848 498.609 519.762 498.613 519.652 cv
498.609 519.578 498.613 519.512 498.625 519.453 cv
498.629 519.402 498.641 519.355 498.656 519.316 cv
498.668 519.281 498.688 519.25 498.711 519.223 cv
498.734 519.195 498.766 519.168 498.813 519.141 cv
500.855 517.828 li
500.871 517.816 500.891 517.805 500.922 517.797 cv
500.945 517.789 500.98 517.781 501.027 517.77 cv
501.066 517.762 501.117 517.754 501.172 517.75 cv
501.227 517.75 501.293 517.75 501.379 517.746 cv
501.484 517.75 501.578 517.754 501.652 517.762 cv
501.723 517.77 501.777 517.785 501.824 517.801 cv
501.863 517.82 501.891 517.84 501.906 517.863 cv
501.914 517.891 501.922 517.914 501.926 517.937 cv
501.926 525.734 li
503.531 525.734 li
503.566 525.738 503.602 525.746 503.633 525.766 cv
503.664 525.789 503.688 525.82 503.711 525.855 cv
503.727 525.895 503.742 525.941 503.758 526 cv
503.766 526.062 503.773 526.137 503.777 526.215 cv
cp
f
510.836 526.172 mo
510.832 526.258 510.828 526.332 510.816 526.395 cv
510.805 526.461 510.789 526.516 510.77 526.555 cv
510.746 526.602 510.719 526.633 510.688 526.648 cv
510.652 526.672 510.613 526.68 510.574 526.68 cv
505.672 526.68 li
505.609 526.68 505.551 526.672 505.504 526.656 cv
505.453 526.641 505.414 526.617 505.379 526.578 cv
505.344 526.547 505.316 526.492 505.305 526.422 cv
505.285 526.352 505.277 526.266 505.281 526.164 cv
505.277 526.074 505.281 525.996 505.289 525.926 cv
505.293 525.859 505.309 525.801 505.336 525.746 cv
505.359 525.695 505.391 525.641 505.426 525.586 cv
505.461 525.535 505.504 525.48 505.563 525.418 cv
507.336 523.594 li
507.746 523.176 508.074 522.801 508.324 522.465 cv
508.57 522.137 508.762 521.832 508.895 521.555 cv
509.027 521.281 509.113 521.031 509.16 520.805 cv
509.199 520.582 509.223 520.371 509.223 520.176 cv
509.223 519.98 509.188 519.797 509.121 519.617 cv
509.055 519.445 508.961 519.289 508.836 519.152 cv
508.711 519.023 508.555 518.918 508.367 518.836 cv
508.18 518.762 507.961 518.723 507.715 518.719 cv
507.426 518.723 507.168 518.762 506.941 518.836 cv
506.711 518.918 506.512 519.004 506.34 519.09 cv
506.168 519.184 506.023 519.266 505.906 519.344 cv
505.789 519.422 505.703 519.461 505.652 519.461 cv
505.617 519.461 505.586 519.453 505.563 519.434 cv
505.531 519.418 505.512 519.387 505.496 519.344 cv
505.48 519.305 505.465 519.25 505.457 519.18 cv
505.445 519.113 505.441 519.031 505.445 518.934 cv
505.441 518.867 505.445 518.809 505.453 518.758 cv
505.457 518.707 505.465 518.664 505.477 518.625 cv
505.484 518.59 505.5 518.555 505.52 518.523 cv
505.539 518.492 505.574 518.453 505.633 518.402 cv
505.684 518.355 505.777 518.289 505.914 518.207 cv
506.047 518.125 506.219 518.047 506.422 517.965 cv
506.625 517.887 506.848 517.816 507.094 517.762 cv
507.336 517.707 507.594 517.68 507.867 517.68 cv
508.293 517.68 508.668 517.742 508.992 517.863 cv
509.313 517.984 509.578 518.148 509.793 518.359 cv
510.004 518.57 510.164 518.816 510.27 519.09 cv
510.375 519.371 510.43 519.668 510.43 519.98 cv
510.43 520.27 510.402 520.551 510.352 520.828 cv
510.301 521.113 510.195 521.418 510.035 521.742 cv
509.871 522.07 509.637 522.434 509.332 522.832 cv
509.023 523.234 508.617 523.695 508.113 524.211 cv
506.707 525.68 li
510.566 525.68 li
510.598 525.684 510.633 525.695 510.672 525.711 cv
510.703 525.734 510.734 525.766 510.762 525.805 cv
510.785 525.848 510.805 525.898 510.816 525.957 cv
510.828 526.023 510.832 526.094 510.836 526.172 cv
cp
f
576.047 526.215 mo
576.043 526.305 576.035 526.375 576.023 526.434 cv
576.008 526.496 575.988 526.547 575.969 526.578 cv
575.945 526.617 575.922 526.641 575.891 526.656 cv
575.859 526.672 575.828 526.68 575.801 526.68 cv
571.164 526.68 li
571.129 526.68 571.102 526.672 571.074 526.656 cv
571.047 526.641 571.02 526.617 570.996 526.578 cv
570.969 526.547 570.949 526.496 570.938 526.434 cv
570.922 526.375 570.914 526.305 570.918 526.215 cv
570.914 526.137 570.922 526.062 570.938 526 cv
570.949 525.941 570.965 525.895 570.988 525.855 cv
571.004 525.82 571.031 525.789 571.063 525.766 cv
571.094 525.746 571.125 525.738 571.164 525.734 cv
573.016 525.734 li
573.016 518.988 li
571.301 520.008 li
571.211 520.059 571.141 520.086 571.094 520.094 cv
571.039 520.102 570.996 520.094 570.965 520.062 cv
570.93 520.035 570.91 519.984 570.898 519.914 cv
570.887 519.848 570.879 519.762 570.883 519.652 cv
570.879 519.578 570.883 519.512 570.895 519.453 cv
570.898 519.402 570.91 519.355 570.926 519.316 cv
570.938 519.281 570.957 519.25 570.98 519.223 cv
571.004 519.195 571.035 519.168 571.082 519.141 cv
573.125 517.828 li
573.141 517.816 573.16 517.805 573.191 517.797 cv
573.215 517.789 573.25 517.781 573.297 517.77 cv
573.336 517.762 573.387 517.754 573.441 517.75 cv
573.496 517.75 573.563 517.75 573.648 517.746 cv
573.754 517.75 573.848 517.754 573.922 517.762 cv
573.992 517.77 574.047 517.785 574.094 517.801 cv
574.133 517.82 574.16 517.84 574.176 517.863 cv
574.184 517.891 574.191 517.914 574.195 517.937 cv
574.195 525.734 li
575.801 525.734 li
575.836 525.738 575.871 525.746 575.902 525.766 cv
575.934 525.789 575.957 525.82 575.98 525.855 cv
575.996 525.895 576.012 525.941 576.027 526 cv
576.035 526.062 576.043 526.137 576.047 526.215 cv
cp
f
583.48 524.156 mo
583.477 524.309 583.453 524.43 583.41 524.516 cv
583.363 524.605 583.301 524.648 583.219 524.645 cv
582.219 524.645 li
582.219 526.508 li
582.219 526.547 582.207 526.578 582.191 526.602 cv
582.168 526.629 582.137 526.648 582.094 526.668 cv
582.043 526.684 581.98 526.695 581.91 526.707 cv
581.832 526.715 581.738 526.719 581.621 526.723 cv
581.504 526.719 581.406 526.715 581.336 526.707 cv
581.258 526.695 581.199 526.684 581.156 526.668 cv
581.109 526.648 581.078 526.629 581.063 526.602 cv
581.043 526.578 581.035 526.547 581.039 526.508 cv
581.039 524.645 li
577.41 524.645 li
577.352 524.648 577.309 524.641 577.273 524.625 cv
577.238 524.613 577.203 524.586 577.176 524.547 cv
577.145 524.512 577.125 524.461 577.113 524.391 cv
577.102 524.324 577.098 524.234 577.098 524.121 cv
577.098 524.039 577.098 523.961 577.105 523.891 cv
577.105 523.82 577.117 523.758 577.133 523.703 cv
577.145 523.648 577.16 523.594 577.188 523.539 cv
577.207 523.484 577.234 523.43 577.27 523.367 cv
580.43 517.98 li
580.449 517.945 580.484 517.914 580.531 517.887 cv
580.574 517.859 580.629 517.836 580.703 517.816 cv
580.77 517.801 580.855 517.789 580.961 517.777 cv
581.063 517.773 581.184 517.77 581.324 517.766 cv
581.473 517.77 581.609 517.773 581.727 517.785 cv
581.84 517.797 581.93 517.812 582.004 517.828 cv
582.07 517.848 582.125 517.871 582.164 517.902 cv
582.199 517.934 582.219 517.969 582.219 518.008 cv
582.219 523.672 li
583.219 523.672 li
583.293 523.676 583.355 523.715 583.406 523.793 cv
583.453 523.875 583.477 523.996 583.48 524.156 cv
cp
581.039 518.805 mo
581.027 518.805 li
578.176 523.672 li
581.039 523.672 li
cp
f
648.285 526.215 mo
648.281 526.305 648.273 526.375 648.262 526.434 cv
648.246 526.496 648.227 526.547 648.207 526.578 cv
648.184 526.617 648.16 526.641 648.129 526.656 cv
648.098 526.672 648.066 526.68 648.039 526.68 cv
643.402 526.68 li
643.367 526.68 643.34 526.672 643.313 526.656 cv
643.285 526.641 643.258 526.617 643.234 526.578 cv
643.207 526.547 643.188 526.496 643.176 526.434 cv
643.16 526.375 643.152 526.305 643.156 526.215 cv
643.152 526.137 643.16 526.062 643.176 526 cv
643.188 525.941 643.203 525.895 643.227 525.855 cv
643.242 525.82 643.27 525.789 643.301 525.766 cv
643.332 525.746 643.363 525.738 643.402 525.734 cv
645.254 525.734 li
645.254 518.988 li
643.539 520.008 li
643.449 520.059 643.379 520.086 643.332 520.094 cv
643.277 520.102 643.234 520.094 643.203 520.062 cv
643.168 520.035 643.148 519.984 643.137 519.914 cv
643.125 519.848 643.117 519.762 643.121 519.652 cv
643.117 519.578 643.121 519.512 643.133 519.453 cv
643.137 519.402 643.148 519.355 643.164 519.316 cv
643.176 519.281 643.195 519.25 643.219 519.223 cv
643.242 519.195 643.273 519.168 643.32 519.141 cv
645.363 517.828 li
645.379 517.816 645.398 517.805 645.43 517.797 cv
645.453 517.789 645.488 517.781 645.535 517.77 cv
645.574 517.762 645.625 517.754 645.68 517.75 cv
645.734 517.75 645.801 517.75 645.887 517.746 cv
645.992 517.75 646.086 517.754 646.16 517.762 cv
646.23 517.77 646.285 517.785 646.332 517.801 cv
646.371 517.82 646.398 517.84 646.414 517.863 cv
646.422 517.891 646.43 517.914 646.434 517.937 cv
646.434 525.734 li
648.039 525.734 li
648.074 525.738 648.109 525.746 648.141 525.766 cv
648.172 525.789 648.195 525.82 648.219 525.855 cv
648.234 525.895 648.25 525.941 648.266 526 cv
648.273 526.062 648.281 526.137 648.285 526.215 cv
cp
f
655.574 523.809 mo
655.574 524.199 655.512 524.578 655.395 524.937 cv
655.27 525.305 655.086 525.621 654.844 525.895 cv
654.594 526.172 654.281 526.395 653.906 526.559 cv
653.523 526.727 653.078 526.809 652.563 526.809 cv
652.191 526.809 651.863 526.766 651.582 526.672 cv
651.297 526.586 651.051 526.453 650.84 526.281 cv
650.629 526.113 650.453 525.906 650.316 525.66 cv
650.176 525.414 650.063 525.133 649.98 524.816 cv
649.895 524.504 649.836 524.16 649.801 523.781 cv
649.762 523.41 649.742 523.008 649.746 522.574 cv
649.742 522.195 649.762 521.812 649.805 521.422 cv
649.844 521.039 649.918 520.664 650.023 520.297 cv
650.129 519.937 650.273 519.598 650.453 519.281 cv
650.633 518.965 650.859 518.687 651.133 518.453 cv
651.406 518.219 651.73 518.031 652.109 517.891 cv
652.488 517.754 652.93 517.687 653.434 517.684 cv
653.602 517.687 653.773 517.695 653.945 517.715 cv
654.117 517.738 654.277 517.77 654.426 517.801 cv
654.574 517.84 654.695 517.875 654.797 517.914 cv
654.895 517.953 654.961 517.988 654.996 518.012 cv
655.023 518.039 655.047 518.066 655.066 518.094 cv
655.082 518.125 655.098 518.156 655.105 518.191 cv
655.113 518.227 655.117 518.266 655.125 518.309 cv
655.125 518.352 655.129 518.406 655.133 518.469 cv
655.129 518.555 655.129 518.625 655.129 518.68 cv
655.125 518.742 655.113 518.789 655.102 518.824 cv
655.082 518.863 655.063 518.891 655.039 518.906 cv
655.012 518.926 654.98 518.934 654.941 518.934 cv
654.891 518.934 654.82 518.918 654.734 518.887 cv
654.645 518.855 654.539 518.82 654.418 518.777 cv
654.293 518.742 654.145 518.707 653.969 518.672 cv
653.793 518.645 653.59 518.629 653.359 518.625 cv
652.93 518.629 652.563 518.715 652.258 518.887 cv
651.953 519.059 651.703 519.293 651.508 519.586 cv
651.313 519.879 651.168 520.219 651.078 520.602 cv
650.98 520.992 650.926 521.395 650.918 521.812 cv
651.035 521.746 651.172 521.68 651.32 521.609 cv
651.469 521.543 651.629 521.48 651.805 521.422 cv
651.98 521.371 652.168 521.324 652.363 521.289 cv
652.559 521.258 652.77 521.242 652.996 521.238 cv
653.473 521.242 653.875 521.309 654.207 521.434 cv
654.535 521.566 654.801 521.746 655.008 521.977 cv
655.207 522.207 655.352 522.477 655.441 522.789 cv
655.527 523.102 655.574 523.441 655.574 523.809 cv
cp
654.379 523.918 mo
654.379 523.656 654.352 523.414 654.301 523.195 cv
654.246 522.98 654.156 522.797 654.035 522.641 cv
653.91 522.492 653.746 522.375 653.543 522.293 cv
653.332 522.211 653.078 522.168 652.781 522.168 cv
652.609 522.168 652.441 522.184 652.273 522.215 cv
652.102 522.246 651.938 522.289 651.781 522.336 cv
651.621 522.391 651.473 522.453 651.332 522.523 cv
651.188 522.598 651.055 522.672 650.938 522.75 cv
650.934 523.344 650.973 523.84 651.051 524.234 cv
651.125 524.633 651.234 524.949 651.379 525.187 cv
651.523 525.43 651.703 525.602 651.918 525.703 cv
652.133 525.809 652.383 525.859 652.672 525.855 cv
652.961 525.859 653.215 525.805 653.43 525.691 cv
653.645 525.586 653.82 525.437 653.965 525.25 cv
654.105 525.066 654.211 524.859 654.277 524.629 cv
654.344 524.398 654.379 524.164 654.379 523.918 cv
cp
f
16.719 325.16 mo
16.762 325.164 16.797 325.172 16.828 325.184 cv
16.859 325.203 16.887 325.238 16.906 325.285 cv
16.926 325.34 16.938 325.41 16.953 325.504 cv
16.961 325.598 16.969 325.723 16.969 325.879 cv
16.969 326.016 16.961 326.129 16.953 326.211 cv
16.938 326.301 16.926 326.367 16.902 326.418 cv
16.883 326.473 16.848 326.516 16.805 326.539 cv
16.766 326.57 16.715 326.594 16.648 326.613 cv
14.27 327.539 li
14 327.652 13.75 327.766 13.523 327.879 cv
13.297 328 13.102 328.141 12.938 328.297 cv
12.773 328.461 12.648 328.648 12.555 328.867 cv
12.469 329.086 12.422 329.352 12.418 329.656 cv
12.418 330.555 li
16.719 330.555 li
16.762 330.555 16.797 330.566 16.828 330.59 cv
16.859 330.613 16.887 330.652 16.902 330.699 cv
16.922 330.754 16.934 330.82 16.949 330.902 cv
16.961 330.992 16.969 331.102 16.969 331.227 cv
16.969 331.359 16.961 331.465 16.949 331.547 cv
16.934 331.637 16.922 331.707 16.902 331.754 cv
16.887 331.809 16.859 331.844 16.828 331.863 cv
16.797 331.887 16.762 331.898 16.719 331.895 cv
7.367 331.895 li
7.168 331.898 7.027 331.844 6.945 331.734 cv
6.867 331.629 6.828 331.516 6.824 331.395 cv
6.824 329.25 li
6.828 328.996 6.832 328.785 6.844 328.613 cv
6.859 328.449 6.875 328.297 6.887 328.156 cv
6.957 327.77 7.063 327.426 7.207 327.125 cv
7.352 326.828 7.535 326.574 7.758 326.371 cv
7.984 326.168 8.242 326.016 8.527 325.914 cv
8.82 325.812 9.141 325.762 9.484 325.762 cv
9.828 325.762 10.129 325.809 10.395 325.898 cv
10.664 325.992 10.902 326.125 11.105 326.293 cv
11.313 326.469 11.488 326.672 11.637 326.91 cv
11.789 327.152 11.918 327.422 12.02 327.711 cv
12.094 327.547 12.188 327.395 12.297 327.262 cv
12.414 327.129 12.547 327.004 12.699 326.883 cv
12.859 326.77 13.039 326.66 13.238 326.551 cv
13.445 326.449 13.676 326.344 13.926 326.238 cv
16.148 325.332 li
16.336 325.262 16.469 325.215 16.543 325.191 cv
16.621 325.176 16.68 325.164 16.719 325.16 cv
cp
9.625 327.184 mo
9.234 327.187 8.898 327.273 8.621 327.449 cv
8.352 327.625 8.156 327.922 8.031 328.336 cv
8 328.469 7.973 328.617 7.953 328.777 cv
7.941 328.945 7.934 329.16 7.93 329.422 cv
7.93 330.555 li
11.332 330.555 li
11.332 329.242 li
11.332 328.891 11.289 328.586 11.203 328.324 cv
11.117 328.07 11 327.855 10.848 327.68 cv
10.695 327.512 10.516 327.387 10.305 327.305 cv
10.102 327.227 9.875 327.187 9.625 327.184 cv
cp
f
16.727 317.352 mo
16.773 317.355 16.809 317.363 16.832 317.379 cv
16.863 317.398 16.887 317.434 16.906 317.477 cv
16.926 317.527 16.938 317.586 16.953 317.66 cv
16.961 317.738 16.969 317.832 16.969 317.937 cv
16.969 318.059 16.961 318.156 16.953 318.23 cv
16.938 318.309 16.926 318.367 16.906 318.41 cv
16.887 318.457 16.863 318.488 16.832 318.5 cv
16.809 318.52 16.773 318.527 16.727 318.523 cv
15.797 318.523 li
16.242 318.926 16.566 319.32 16.766 319.707 cv
16.969 320.102 17.066 320.496 17.07 320.895 cv
17.066 321.363 16.992 321.758 16.836 322.078 cv
16.684 322.398 16.473 322.66 16.199 322.855 cv
15.934 323.055 15.621 323.195 15.266 323.277 cv
14.91 323.367 14.477 323.41 13.965 323.406 cv
9.703 323.406 li
9.664 323.41 9.629 323.398 9.598 323.379 cv
9.57 323.363 9.547 323.328 9.52 323.273 cv
9.5 323.223 9.484 323.156 9.473 323.07 cv
9.469 322.988 9.465 322.883 9.461 322.758 cv
9.465 322.637 9.469 322.535 9.473 322.449 cv
9.484 322.367 9.5 322.301 9.52 322.25 cv
9.547 322.203 9.57 322.168 9.598 322.145 cv
9.629 322.125 9.664 322.113 9.703 322.113 cv
13.793 322.113 li
14.207 322.113 14.539 322.086 14.781 322.023 cv
15.031 321.969 15.238 321.875 15.41 321.75 cv
15.586 321.629 15.723 321.477 15.816 321.285 cv
15.914 321.102 15.961 320.883 15.961 320.629 cv
15.961 320.309 15.848 319.984 15.617 319.664 cv
15.391 319.344 15.055 319.008 14.613 318.648 cv
9.703 318.648 li
9.664 318.652 9.629 318.641 9.598 318.621 cv
9.57 318.605 9.547 318.57 9.52 318.516 cv
9.5 318.465 9.484 318.398 9.473 318.316 cv
9.469 318.238 9.465 318.133 9.461 318 cv
9.465 317.875 9.469 317.773 9.473 317.687 cv
9.484 317.609 9.5 317.543 9.52 317.492 cv
9.547 317.449 9.57 317.414 9.598 317.387 cv
9.629 317.367 9.664 317.355 9.703 317.352 cv
cp
f
16.727 308.926 mo
16.773 308.926 16.809 308.937 16.832 308.957 cv
16.863 308.98 16.887 309.016 16.906 309.059 cv
16.926 309.109 16.938 309.172 16.953 309.254 cv
16.961 309.34 16.969 309.445 16.969 309.566 cv
16.969 309.699 16.961 309.805 16.953 309.887 cv
16.938 309.973 16.926 310.039 16.906 310.082 cv
16.887 310.133 16.863 310.168 16.832 310.184 cv
16.809 310.207 16.773 310.215 16.727 310.215 cv
12.613 310.215 li
12.215 310.215 11.891 310.246 11.645 310.309 cv
11.402 310.371 11.191 310.461 11.016 310.578 cv
10.84 310.699 10.707 310.855 10.609 311.043 cv
10.52 311.234 10.473 311.453 10.469 311.703 cv
10.473 312.027 10.586 312.352 10.813 312.672 cv
11.043 312.996 11.379 313.336 11.816 313.687 cv
16.727 313.687 li
16.773 313.691 16.809 313.699 16.832 313.719 cv
16.863 313.742 16.887 313.777 16.906 313.82 cv
16.926 313.871 16.938 313.937 16.953 314.016 cv
16.961 314.102 16.969 314.207 16.969 314.332 cv
16.969 314.461 16.961 314.562 16.953 314.645 cv
16.938 314.73 16.926 314.797 16.906 314.844 cv
16.887 314.895 16.863 314.93 16.832 314.945 cv
16.809 314.965 16.773 314.973 16.727 314.973 cv
9.703 314.973 li
9.664 314.973 9.629 314.965 9.598 314.949 cv
9.57 314.934 9.547 314.902 9.52 314.855 cv
9.5 314.809 9.484 314.75 9.473 314.676 cv
9.469 314.605 9.465 314.508 9.461 314.387 cv
9.465 314.273 9.469 314.18 9.473 314.105 cv
9.484 314.031 9.5 313.973 9.52 313.93 cv
9.547 313.891 9.57 313.863 9.598 313.84 cv
9.629 313.824 9.664 313.812 9.703 313.812 cv
10.633 313.812 li
10.195 313.418 9.871 313.023 9.66 312.629 cv
9.457 312.238 9.352 311.844 9.352 311.437 cv
9.352 310.973 9.434 310.578 9.59 310.258 cv
9.754 309.941 9.965 309.684 10.227 309.48 cv
10.496 309.285 10.809 309.141 11.16 309.055 cv
11.52 308.969 11.945 308.926 12.441 308.926 cv
cp
f
16.211 303.074 mo
16.367 303.078 16.484 303.086 16.57 303.105 cv
16.66 303.129 16.727 303.16 16.766 303.199 cv
16.809 303.242 16.848 303.305 16.883 303.387 cv
16.918 303.473 16.945 303.57 16.973 303.672 cv
16.992 303.781 17.012 303.895 17.031 304.012 cv
17.043 304.137 17.051 304.254 17.055 304.371 cv
17.051 304.738 17.004 305.051 16.91 305.309 cv
16.816 305.57 16.672 305.785 16.473 305.949 cv
16.281 306.117 16.035 306.238 15.73 306.309 cv
15.434 306.387 15.082 306.422 14.676 306.422 cv
10.57 306.422 li
10.57 307.406 li
10.57 307.484 10.531 307.547 10.445 307.594 cv
10.367 307.641 10.23 307.664 10.039 307.664 cv
9.941 307.664 9.859 307.66 9.789 307.645 cv
9.727 307.637 9.668 307.617 9.621 307.594 cv
9.578 307.574 9.547 307.547 9.527 307.512 cv
9.512 307.48 9.504 307.445 9.5 307.398 cv
9.5 306.422 li
7.828 306.422 li
7.793 306.422 7.762 306.414 7.727 306.395 cv
7.699 306.379 7.672 306.344 7.645 306.293 cv
7.625 306.246 7.605 306.18 7.594 306.094 cv
7.586 306.012 7.582 305.91 7.578 305.785 cv
7.582 305.656 7.586 305.551 7.594 305.465 cv
7.605 305.387 7.625 305.32 7.645 305.27 cv
7.672 305.227 7.699 305.191 7.727 305.168 cv
7.762 305.148 7.793 305.141 7.828 305.137 cv
9.5 305.137 li
9.5 303.332 li
9.504 303.293 9.512 303.254 9.527 303.223 cv
9.547 303.191 9.578 303.164 9.621 303.141 cv
9.668 303.117 9.727 303.102 9.789 303.09 cv
9.859 303.082 9.941 303.078 10.039 303.074 cv
10.23 303.078 10.367 303.102 10.445 303.145 cv
10.531 303.195 10.57 303.258 10.57 303.332 cv
10.57 305.137 li
14.488 305.137 li
14.973 305.141 15.336 305.066 15.582 304.922 cv
15.832 304.781 15.957 304.527 15.953 304.152 cv
15.957 304.035 15.945 303.926 15.918 303.832 cv
15.898 303.738 15.871 303.656 15.844 303.582 cv
15.82 303.512 15.797 303.449 15.77 303.395 cv
15.75 303.344 15.738 303.297 15.734 303.254 cv
15.738 303.23 15.746 303.207 15.754 303.18 cv
15.77 303.16 15.793 303.141 15.828 303.125 cv
15.867 303.113 15.918 303.102 15.977 303.09 cv
16.043 303.082 16.121 303.078 16.211 303.074 cv
cp
f
16.727 300.086 mo
16.773 300.09 16.809 300.098 16.832 300.117 cv
16.863 300.141 16.887 300.176 16.906 300.219 cv
16.926 300.27 16.938 300.336 16.953 300.414 cv
16.961 300.5 16.969 300.605 16.969 300.73 cv
16.969 300.859 16.961 300.961 16.953 301.043 cv
16.938 301.129 16.926 301.195 16.906 301.242 cv
16.887 301.293 16.863 301.328 16.832 301.344 cv
16.809 301.363 16.773 301.371 16.727 301.371 cv
9.703 301.371 li
9.668 301.371 9.637 301.363 9.602 301.344 cv
9.574 301.328 9.547 301.293 9.523 301.242 cv
9.504 301.195 9.488 301.129 9.477 301.043 cv
9.469 300.961 9.465 300.859 9.461 300.73 cv
9.465 300.605 9.469 300.5 9.477 300.414 cv
9.488 300.336 9.504 300.27 9.523 300.219 cv
9.547 300.176 9.574 300.141 9.602 300.117 cv
9.637 300.098 9.668 300.09 9.703 300.086 cv
cp
7.328 299.937 mo
7.633 299.941 7.836 300 7.945 300.109 cv
8.055 300.227 8.109 300.434 8.109 300.738 cv
8.109 301.043 8.059 301.25 7.949 301.359 cv
7.848 301.473 7.645 301.531 7.344 301.527 cv
7.047 301.531 6.844 301.473 6.73 301.355 cv
6.625 301.242 6.57 301.031 6.566 300.723 cv
6.57 300.426 6.621 300.219 6.727 300.105 cv
6.836 299.996 7.039 299.941 7.328 299.937 cv
cp
f
16.727 287.195 mo
16.773 287.195 16.809 287.207 16.832 287.227 cv
16.863 287.25 16.887 287.285 16.906 287.328 cv
16.926 287.379 16.938 287.441 16.953 287.523 cv
16.961 287.609 16.969 287.715 16.969 287.836 cv
16.969 287.969 16.961 288.074 16.953 288.156 cv
16.938 288.242 16.926 288.309 16.906 288.355 cv
16.887 288.406 16.863 288.441 16.832 288.461 cv
16.809 288.484 16.773 288.496 16.727 288.492 cv
12.457 288.492 li
12.16 288.496 11.891 288.523 11.645 288.57 cv
11.402 288.625 11.191 288.707 11.016 288.82 cv
10.84 288.937 10.707 289.082 10.609 289.258 cv
10.52 289.434 10.473 289.641 10.469 289.879 cv
10.473 290.176 10.586 290.477 10.813 290.773 cv
11.043 291.078 11.379 291.406 11.816 291.762 cv
16.727 291.762 li
16.773 291.766 16.809 291.777 16.832 291.793 cv
16.863 291.816 16.887 291.852 16.906 291.898 cv
16.926 291.953 16.938 292.02 16.953 292.098 cv
16.961 292.184 16.969 292.285 16.969 292.41 cv
16.969 292.531 16.961 292.637 16.953 292.719 cv
16.938 292.809 16.926 292.875 16.906 292.922 cv
16.887 292.973 16.863 293.004 16.832 293.02 cv
16.809 293.039 16.773 293.051 16.727 293.047 cv
12.457 293.047 li
12.16 293.051 11.891 293.078 11.645 293.133 cv
11.402 293.191 11.191 293.277 11.016 293.391 cv
10.84 293.508 10.707 293.652 10.609 293.824 cv
10.52 294 10.473 294.207 10.469 294.445 cv
10.473 294.746 10.586 295.047 10.813 295.344 cv
11.043 295.648 11.379 295.977 11.816 296.328 cv
16.727 296.328 li
16.773 296.332 16.809 296.34 16.832 296.359 cv
16.863 296.383 16.887 296.418 16.906 296.461 cv
16.926 296.512 16.938 296.578 16.953 296.656 cv
16.961 296.742 16.969 296.848 16.969 296.973 cv
16.969 297.102 16.961 297.203 16.953 297.285 cv
16.938 297.371 16.926 297.437 16.906 297.484 cv
16.887 297.535 16.863 297.57 16.832 297.586 cv
16.809 297.605 16.773 297.613 16.727 297.613 cv
9.703 297.613 li
9.664 297.613 9.629 297.605 9.598 297.59 cv
9.57 297.574 9.547 297.543 9.52 297.496 cv
9.5 297.449 9.484 297.391 9.473 297.316 cv
9.469 297.246 9.465 297.148 9.461 297.027 cv
9.465 296.914 9.469 296.82 9.473 296.746 cv
9.484 296.672 9.5 296.613 9.52 296.57 cv
9.547 296.531 9.57 296.504 9.598 296.48 cv
9.629 296.465 9.664 296.453 9.703 296.453 cv
10.633 296.453 li
10.195 296.059 9.871 295.676 9.66 295.301 cv
9.457 294.93 9.352 294.555 9.352 294.172 cv
9.352 293.883 9.387 293.621 9.453 293.387 cv
9.523 293.16 9.617 292.957 9.738 292.777 cv
9.863 292.605 10.012 292.453 10.176 292.324 cv
10.348 292.203 10.535 292.098 10.742 292.012 cv
10.488 291.777 10.273 291.555 10.094 291.344 cv
9.922 291.133 9.777 290.93 9.664 290.734 cv
9.559 290.539 9.48 290.352 9.426 290.164 cv
9.379 289.984 9.352 289.797 9.352 289.605 cv
9.352 289.156 9.434 288.777 9.59 288.469 cv
9.754 288.164 9.965 287.914 10.227 287.723 cv
10.496 287.535 10.809 287.402 11.16 287.316 cv
11.52 287.238 11.895 287.195 12.285 287.195 cv
cp
f
12.91 278.898 mo
13.117 278.902 13.262 278.953 13.344 279.051 cv
13.434 279.156 13.477 279.273 13.473 279.398 cv
13.473 284.027 li
13.867 284.031 14.219 283.992 14.527 283.91 cv
14.84 283.832 15.105 283.699 15.328 283.516 cv
15.555 283.336 15.727 283.098 15.844 282.805 cv
15.965 282.512 16.027 282.152 16.023 281.727 cv
16.027 281.395 16 281.098 15.941 280.836 cv
15.891 280.574 15.828 280.348 15.758 280.156 cv
15.691 279.965 15.629 279.809 15.574 279.684 cv
15.52 279.562 15.492 279.469 15.492 279.406 cv
15.492 279.371 15.504 279.34 15.52 279.309 cv
15.543 279.281 15.57 279.258 15.602 279.242 cv
15.641 279.227 15.691 279.215 15.754 279.207 cv
15.824 279.199 15.902 279.195 15.992 279.195 cv
16.063 279.195 16.121 279.199 16.168 279.203 cv
16.219 279.211 16.262 279.219 16.301 279.223 cv
16.34 279.234 16.375 279.246 16.406 279.262 cv
16.438 279.281 16.469 279.305 16.496 279.332 cv
16.527 279.363 16.574 279.449 16.637 279.586 cv
16.703 279.73 16.766 279.91 16.828 280.133 cv
16.891 280.355 16.945 280.613 16.996 280.906 cv
17.043 281.203 17.066 281.52 17.07 281.848 cv
17.066 282.43 16.988 282.934 16.828 283.367 cv
16.668 283.805 16.43 284.172 16.109 284.465 cv
15.793 284.762 15.395 284.984 14.918 285.133 cv
14.441 285.285 13.887 285.359 13.246 285.359 cv
12.645 285.359 12.102 285.281 11.621 285.125 cv
11.141 284.969 10.73 284.746 10.395 284.453 cv
10.059 284.16 9.801 283.805 9.621 283.387 cv
9.441 282.973 9.352 282.508 9.352 281.988 cv
9.352 281.441 9.441 280.973 9.617 280.582 cv
9.797 280.199 10.035 279.879 10.332 279.625 cv
10.633 279.379 10.984 279.195 11.387 279.074 cv
11.789 278.961 12.219 278.902 12.676 278.898 cv
cp
12.527 280.195 mo
11.852 280.184 11.324 280.332 10.938 280.648 cv
10.555 280.965 10.359 281.434 10.359 282.055 cv
10.359 282.375 10.422 282.656 10.539 282.898 cv
10.664 283.141 10.82 283.344 11.016 283.5 cv
11.211 283.664 11.441 283.789 11.703 283.879 cv
11.969 283.969 12.242 284.02 12.527 284.027 cv
cp
f
6.168 270.699 mo
7.215 271.199 8.285 271.566 9.387 271.805 cv
10.488 272.051 11.598 272.172 12.707 272.168 cv
13.832 272.172 14.941 272.047 16.035 271.797 cv
17.133 271.551 18.203 271.191 19.262 270.715 cv
19.32 270.691 19.375 270.676 19.422 270.672 cv
19.465 270.672 19.5 270.691 19.531 270.723 cv
19.555 270.762 19.578 270.816 19.594 270.891 cv
19.605 270.969 19.609 271.07 19.613 271.199 cv
19.609 271.293 19.609 271.375 19.605 271.441 cv
19.598 271.512 19.586 271.57 19.574 271.617 cv
19.555 271.668 19.535 271.707 19.52 271.738 cv
19.496 271.77 19.473 271.793 19.449 271.809 cv
18.918 272.09 18.383 272.34 17.84 272.551 cv
17.293 272.766 16.742 272.941 16.18 273.086 cv
15.621 273.234 15.055 273.344 14.477 273.414 cv
13.906 273.488 13.324 273.527 12.73 273.523 cv
12.145 273.527 11.563 273.484 10.992 273.402 cv
10.422 273.324 9.855 273.211 9.285 273.059 cv
8.723 272.914 8.168 272.734 7.621 272.52 cv
7.078 272.309 6.535 272.07 5.996 271.801 cv
5.977 271.801 5.957 271.785 5.941 271.758 cv
5.926 271.738 5.91 271.707 5.895 271.66 cv
5.879 271.621 5.867 271.562 5.859 271.488 cv
5.852 271.418 5.848 271.324 5.848 271.207 cv
5.848 271.09 5.855 270.992 5.871 270.918 cv
5.887 270.848 5.91 270.793 5.934 270.746 cv
5.965 270.707 5.996 270.684 6.035 270.676 cv
6.078 270.676 6.125 270.684 6.168 270.699 cv
cp
f
16.719 257.395 mo
16.762 257.398 16.797 257.41 16.828 257.43 cv
16.859 257.453 16.887 257.488 16.902 257.543 cv
16.922 257.598 16.934 257.668 16.949 257.746 cv
16.961 257.832 16.969 257.937 16.969 258.07 cv
16.969 258.195 16.961 258.301 16.949 258.387 cv
16.934 258.477 16.922 258.547 16.902 258.598 cv
16.887 258.648 16.859 258.687 16.828 258.707 cv
16.797 258.73 16.762 258.738 16.719 258.738 cv
7.922 258.738 li
7.922 258.754 li
16.758 262.312 li
16.797 262.328 16.828 262.352 16.852 262.379 cv
16.879 262.41 16.902 262.453 16.918 262.504 cv
16.938 262.562 16.949 262.625 16.957 262.699 cv
16.965 262.777 16.969 262.867 16.969 262.969 cv
16.969 263.078 16.961 263.172 16.953 263.25 cv
16.938 263.328 16.926 263.395 16.91 263.445 cv
16.895 263.5 16.875 263.539 16.844 263.566 cv
16.82 263.598 16.789 263.617 16.758 263.625 cv
7.922 267.027 li
7.922 267.035 li
16.719 267.035 li
16.762 267.035 16.797 267.047 16.828 267.066 cv
16.859 267.09 16.887 267.129 16.902 267.18 cv
16.922 267.234 16.934 267.301 16.949 267.387 cv
16.961 267.473 16.969 267.586 16.969 267.719 cv
16.969 267.852 16.961 267.957 16.949 268.039 cv
16.934 268.129 16.922 268.199 16.902 268.246 cv
16.887 268.301 16.859 268.332 16.828 268.348 cv
16.797 268.367 16.762 268.379 16.719 268.375 cv
7.43 268.375 li
7.215 268.379 7.063 268.32 6.965 268.203 cv
6.875 268.09 6.828 267.961 6.824 267.812 cv
6.824 266.988 li
6.828 266.82 6.844 266.676 6.871 266.547 cv
6.906 266.422 6.953 266.309 7.02 266.215 cv
7.09 266.121 7.176 266.043 7.277 265.977 cv
7.379 265.914 7.5 265.859 7.641 265.809 cv
14.957 262.922 li
14.957 262.883 li
7.664 259.879 li
7.508 259.824 7.379 259.758 7.27 259.687 cv
7.164 259.617 7.074 259.543 7.008 259.461 cv
6.945 259.379 6.898 259.289 6.867 259.187 cv
6.84 259.09 6.828 258.973 6.824 258.84 cv
6.824 257.973 li
6.828 257.898 6.84 257.824 6.859 257.75 cv
6.887 257.68 6.922 257.617 6.969 257.566 cv
7.02 257.52 7.082 257.48 7.156 257.445 cv
7.23 257.414 7.32 257.398 7.43 257.395 cv
cp
f
16.727 253.574 mo
16.773 253.578 16.809 253.586 16.832 253.605 cv
16.863 253.629 16.887 253.664 16.906 253.707 cv
16.926 253.758 16.938 253.824 16.953 253.902 cv
16.961 253.988 16.969 254.094 16.969 254.219 cv
16.969 254.348 16.961 254.449 16.953 254.531 cv
16.938 254.617 16.926 254.684 16.906 254.73 cv
16.887 254.781 16.863 254.816 16.832 254.832 cv
16.809 254.852 16.773 254.859 16.727 254.859 cv
9.703 254.859 li
9.668 254.859 9.637 254.852 9.602 254.832 cv
9.574 254.816 9.547 254.781 9.523 254.73 cv
9.504 254.684 9.488 254.617 9.477 254.531 cv
9.469 254.449 9.465 254.348 9.461 254.219 cv
9.465 254.094 9.469 253.988 9.477 253.902 cv
9.488 253.824 9.504 253.758 9.523 253.707 cv
9.547 253.664 9.574 253.629 9.602 253.605 cv
9.637 253.586 9.668 253.578 9.703 253.574 cv
cp
7.328 253.426 mo
7.633 253.43 7.836 253.488 7.945 253.598 cv
8.055 253.715 8.109 253.922 8.109 254.227 cv
8.109 254.531 8.059 254.738 7.949 254.848 cv
7.848 254.961 7.645 255.02 7.344 255.016 cv
7.047 255.02 6.844 254.961 6.73 254.844 cv
6.625 254.73 6.57 254.52 6.566 254.211 cv
6.57 253.914 6.621 253.707 6.727 253.594 cv
6.836 253.484 7.039 253.43 7.328 253.426 cv
cp
f
16.727 245.133 mo
16.773 245.133 16.809 245.145 16.832 245.164 cv
16.863 245.187 16.887 245.223 16.906 245.266 cv
16.926 245.316 16.938 245.379 16.953 245.461 cv
16.961 245.547 16.969 245.652 16.969 245.773 cv
16.969 245.906 16.961 246.012 16.953 246.094 cv
16.938 246.18 16.926 246.246 16.906 246.289 cv
16.887 246.34 16.863 246.375 16.832 246.391 cv
16.809 246.414 16.773 246.422 16.727 246.422 cv
12.613 246.422 li
12.215 246.422 11.891 246.453 11.645 246.516 cv
11.402 246.578 11.191 246.668 11.016 246.785 cv
10.84 246.906 10.707 247.062 10.609 247.25 cv
10.52 247.441 10.473 247.66 10.469 247.91 cv
10.473 248.234 10.586 248.559 10.813 248.879 cv
11.043 249.203 11.379 249.543 11.816 249.895 cv
16.727 249.895 li
16.773 249.898 16.809 249.906 16.832 249.926 cv
16.863 249.949 16.887 249.984 16.906 250.027 cv
16.926 250.078 16.938 250.145 16.953 250.223 cv
16.961 250.309 16.969 250.414 16.969 250.539 cv
16.969 250.668 16.961 250.77 16.953 250.852 cv
16.938 250.937 16.926 251.004 16.906 251.051 cv
16.887 251.102 16.863 251.137 16.832 251.152 cv
16.809 251.172 16.773 251.18 16.727 251.18 cv
9.703 251.18 li
9.664 251.18 9.629 251.172 9.598 251.156 cv
9.57 251.141 9.547 251.109 9.52 251.062 cv
9.5 251.016 9.484 250.957 9.473 250.883 cv
9.469 250.812 9.465 250.715 9.461 250.594 cv
9.465 250.48 9.469 250.387 9.473 250.312 cv
9.484 250.238 9.5 250.18 9.52 250.137 cv
9.547 250.098 9.57 250.07 9.598 250.047 cv
9.629 250.031 9.664 250.02 9.703 250.02 cv
10.633 250.02 li
10.195 249.625 9.871 249.23 9.66 248.836 cv
9.457 248.445 9.352 248.051 9.352 247.645 cv
9.352 247.18 9.434 246.785 9.59 246.465 cv
9.754 246.148 9.965 245.891 10.227 245.687 cv
10.496 245.492 10.809 245.348 11.16 245.262 cv
11.52 245.176 11.945 245.133 12.441 245.133 cv
cp
f
16.727 236.773 mo
16.773 236.777 16.809 236.785 16.832 236.801 cv
16.863 236.82 16.887 236.855 16.906 236.898 cv
16.926 236.949 16.938 237.008 16.953 237.082 cv
16.961 237.16 16.969 237.254 16.969 237.359 cv
16.969 237.48 16.961 237.578 16.953 237.652 cv
16.938 237.73 16.926 237.789 16.906 237.832 cv
16.887 237.879 16.863 237.91 16.832 237.922 cv
16.809 237.941 16.773 237.949 16.727 237.945 cv
15.797 237.945 li
16.242 238.348 16.566 238.742 16.766 239.129 cv
16.969 239.523 17.066 239.918 17.07 240.316 cv
17.066 240.785 16.992 241.18 16.836 241.5 cv
16.684 241.82 16.473 242.082 16.199 242.277 cv
15.934 242.477 15.621 242.617 15.266 242.699 cv
14.91 242.789 14.477 242.832 13.965 242.828 cv
9.703 242.828 li
9.664 242.832 9.629 242.82 9.598 242.801 cv
9.57 242.785 9.547 242.75 9.52 242.695 cv
9.5 242.645 9.484 242.578 9.473 242.492 cv
9.469 242.41 9.465 242.305 9.461 242.18 cv
9.465 242.059 9.469 241.957 9.473 241.871 cv
9.484 241.789 9.5 241.723 9.52 241.672 cv
9.547 241.625 9.57 241.59 9.598 241.566 cv
9.629 241.547 9.664 241.535 9.703 241.535 cv
13.793 241.535 li
14.207 241.535 14.539 241.508 14.781 241.445 cv
15.031 241.391 15.238 241.297 15.41 241.172 cv
15.586 241.051 15.723 240.898 15.816 240.707 cv
15.914 240.523 15.961 240.305 15.961 240.051 cv
15.961 239.73 15.848 239.406 15.617 239.086 cv
15.391 238.766 15.055 238.43 14.613 238.07 cv
9.703 238.07 li
9.664 238.074 9.629 238.062 9.598 238.043 cv
9.57 238.027 9.547 237.992 9.52 237.937 cv
9.5 237.887 9.484 237.82 9.473 237.738 cv
9.469 237.66 9.465 237.555 9.461 237.422 cv
9.465 237.297 9.469 237.195 9.473 237.109 cv
9.484 237.031 9.5 236.965 9.52 236.914 cv
9.547 236.871 9.57 236.836 9.598 236.809 cv
9.629 236.789 9.664 236.777 9.703 236.773 cv
cp
f
16.211 230.746 mo
16.367 230.75 16.484 230.758 16.57 230.777 cv
16.66 230.801 16.727 230.832 16.766 230.871 cv
16.809 230.914 16.848 230.977 16.883 231.059 cv
16.918 231.145 16.945 231.242 16.973 231.344 cv
16.992 231.453 17.012 231.566 17.031 231.684 cv
17.043 231.809 17.051 231.926 17.055 232.043 cv
17.051 232.41 17.004 232.723 16.91 232.98 cv
16.816 233.242 16.672 233.457 16.473 233.621 cv
16.281 233.789 16.035 233.91 15.73 233.98 cv
15.434 234.059 15.082 234.094 14.676 234.094 cv
10.57 234.094 li
10.57 235.078 li
10.57 235.156 10.531 235.219 10.445 235.266 cv
10.367 235.312 10.23 235.336 10.039 235.336 cv
9.941 235.336 9.859 235.332 9.789 235.316 cv
9.727 235.309 9.668 235.289 9.621 235.266 cv
9.578 235.246 9.547 235.219 9.527 235.184 cv
9.512 235.152 9.504 235.117 9.5 235.07 cv
9.5 234.094 li
7.828 234.094 li
7.793 234.094 7.762 234.086 7.727 234.066 cv
7.699 234.051 7.672 234.016 7.645 233.965 cv
7.625 233.918 7.605 233.852 7.594 233.766 cv
7.586 233.684 7.582 233.582 7.578 233.457 cv
7.582 233.328 7.586 233.223 7.594 233.137 cv
7.605 233.059 7.625 232.992 7.645 232.941 cv
7.672 232.898 7.699 232.863 7.727 232.84 cv
7.762 232.82 7.793 232.812 7.828 232.809 cv
9.5 232.809 li
9.5 231.004 li
9.504 230.965 9.512 230.926 9.527 230.895 cv
9.547 230.863 9.578 230.836 9.621 230.812 cv
9.668 230.789 9.727 230.773 9.789 230.762 cv
9.859 230.754 9.941 230.75 10.039 230.746 cv
10.23 230.75 10.367 230.773 10.445 230.816 cv
10.531 230.867 10.57 230.93 10.57 231.004 cv
10.57 232.809 li
14.488 232.809 li
14.973 232.812 15.336 232.738 15.582 232.594 cv
15.832 232.453 15.957 232.199 15.953 231.824 cv
15.957 231.707 15.945 231.598 15.918 231.504 cv
15.898 231.41 15.871 231.328 15.844 231.254 cv
15.82 231.184 15.797 231.121 15.77 231.066 cv
15.75 231.016 15.738 230.969 15.734 230.926 cv
15.738 230.902 15.746 230.879 15.754 230.852 cv
15.77 230.832 15.793 230.812 15.828 230.797 cv
15.867 230.785 15.918 230.773 15.977 230.762 cv
16.043 230.754 16.121 230.75 16.211 230.746 cv
cp
f
12.91 223.051 mo
13.117 223.055 13.262 223.105 13.344 223.203 cv
13.434 223.309 13.477 223.426 13.473 223.551 cv
13.473 228.18 li
13.867 228.184 14.219 228.145 14.527 228.062 cv
14.84 227.984 15.105 227.852 15.328 227.668 cv
15.555 227.488 15.727 227.25 15.844 226.957 cv
15.965 226.664 16.027 226.305 16.023 225.879 cv
16.027 225.547 16 225.25 15.941 224.988 cv
15.891 224.727 15.828 224.5 15.758 224.309 cv
15.691 224.117 15.629 223.961 15.574 223.836 cv
15.52 223.715 15.492 223.621 15.492 223.559 cv
15.492 223.523 15.504 223.492 15.52 223.461 cv
15.543 223.434 15.57 223.41 15.602 223.395 cv
15.641 223.379 15.691 223.367 15.754 223.359 cv
15.824 223.352 15.902 223.348 15.992 223.348 cv
16.063 223.348 16.121 223.352 16.168 223.355 cv
16.219 223.363 16.262 223.371 16.301 223.375 cv
16.34 223.387 16.375 223.398 16.406 223.414 cv
16.438 223.434 16.469 223.457 16.496 223.484 cv
16.527 223.516 16.574 223.602 16.637 223.738 cv
16.703 223.883 16.766 224.062 16.828 224.285 cv
16.891 224.508 16.945 224.766 16.996 225.059 cv
17.043 225.355 17.066 225.672 17.07 226 cv
17.066 226.582 16.988 227.086 16.828 227.52 cv
16.668 227.957 16.43 228.324 16.109 228.617 cv
15.793 228.914 15.395 229.137 14.918 229.285 cv
14.441 229.437 13.887 229.512 13.246 229.512 cv
12.645 229.512 12.102 229.434 11.621 229.277 cv
11.141 229.121 10.73 228.898 10.395 228.605 cv
10.059 228.312 9.801 227.957 9.621 227.539 cv
9.441 227.125 9.352 226.66 9.352 226.141 cv
9.352 225.594 9.441 225.125 9.617 224.734 cv
9.797 224.352 10.035 224.031 10.332 223.777 cv
10.633 223.531 10.984 223.348 11.387 223.227 cv
11.789 223.113 12.219 223.055 12.676 223.051 cv
cp
12.527 224.348 mo
11.852 224.336 11.324 224.484 10.938 224.801 cv
10.555 225.117 10.359 225.586 10.359 226.207 cv
10.359 226.527 10.422 226.809 10.539 227.051 cv
10.664 227.293 10.82 227.496 11.016 227.652 cv
11.211 227.816 11.441 227.941 11.703 228.031 cv
11.969 228.121 12.242 228.172 12.527 228.18 cv
cp
f
14.816 216.754 mo
15.176 216.758 15.492 216.824 15.773 216.953 cv
16.055 217.09 16.293 217.277 16.484 217.52 cv
16.68 217.766 16.824 218.059 16.922 218.395 cv
17.02 218.734 17.066 219.105 17.07 219.512 cv
17.066 219.762 17.047 220 17.012 220.227 cv
16.969 220.453 16.922 220.656 16.863 220.832 cv
16.805 221.016 16.742 221.168 16.676 221.289 cv
16.613 221.418 16.555 221.508 16.5 221.562 cv
16.449 221.621 16.379 221.664 16.281 221.687 cv
16.191 221.715 16.063 221.727 15.898 221.727 cv
15.801 221.727 15.719 221.723 15.648 221.711 cv
15.586 221.703 15.531 221.691 15.484 221.672 cv
15.445 221.66 15.414 221.637 15.395 221.605 cv
15.379 221.578 15.371 221.547 15.367 221.508 cv
15.371 221.453 15.406 221.367 15.473 221.254 cv
15.547 221.145 15.621 221.008 15.703 220.84 cv
15.789 220.68 15.867 220.484 15.934 220.262 cv
16.008 220.039 16.043 219.781 16.039 219.488 cv
16.043 219.27 16.02 219.074 15.969 218.895 cv
15.926 218.723 15.855 218.566 15.762 218.434 cv
15.672 218.305 15.559 218.207 15.414 218.133 cv
15.277 218.066 15.109 218.031 14.918 218.027 cv
14.723 218.031 14.559 218.082 14.418 218.18 cv
14.285 218.285 14.164 218.418 14.059 218.582 cv
13.957 218.75 13.863 218.937 13.781 219.145 cv
13.703 219.355 13.621 219.57 13.527 219.789 cv
13.441 220.012 13.34 220.227 13.227 220.437 cv
13.117 220.648 12.98 220.836 12.816 221 cv
12.656 221.168 12.465 221.305 12.238 221.402 cv
12.02 221.508 11.75 221.559 11.434 221.555 cv
11.164 221.559 10.902 221.504 10.645 221.395 cv
10.395 221.289 10.172 221.129 9.98 220.914 cv
9.793 220.703 9.641 220.437 9.523 220.117 cv
9.41 219.801 9.352 219.426 9.352 218.996 cv
9.352 218.809 9.367 218.621 9.398 218.434 cv
9.43 218.246 9.469 218.078 9.516 217.926 cv
9.563 217.777 9.613 217.648 9.668 217.539 cv
9.723 217.434 9.773 217.352 9.813 217.297 cv
9.859 217.242 9.895 217.207 9.922 217.187 cv
9.957 217.172 9.992 217.16 10.027 217.148 cv
10.07 217.145 10.117 217.137 10.172 217.125 cv
10.23 217.121 10.301 217.117 10.383 217.113 cv
10.473 217.117 10.551 217.121 10.613 217.125 cv
10.68 217.137 10.734 217.148 10.773 217.164 cv
10.82 217.184 10.848 217.207 10.863 217.23 cv
10.883 217.262 10.895 217.289 10.891 217.316 cv
10.895 217.367 10.863 217.434 10.805 217.52 cv
10.75 217.609 10.691 217.727 10.621 217.863 cv
10.559 218.008 10.496 218.172 10.438 218.359 cv
10.383 218.551 10.355 218.77 10.352 219.012 cv
10.355 219.234 10.379 219.426 10.426 219.59 cv
10.477 219.758 10.547 219.895 10.637 220 cv
10.73 220.109 10.84 220.191 10.961 220.242 cv
11.086 220.301 11.219 220.328 11.363 220.324 cv
11.57 220.328 11.742 220.273 11.875 220.168 cv
12.016 220.066 12.137 219.934 12.238 219.762 cv
12.348 219.598 12.441 219.406 12.52 219.191 cv
12.605 218.98 12.691 218.762 12.777 218.539 cv
12.871 218.32 12.969 218.102 13.074 217.883 cv
13.188 217.668 13.32 217.477 13.473 217.309 cv
13.633 217.145 13.82 217.012 14.035 216.906 cv
14.258 216.809 14.52 216.758 14.816 216.754 cv
cp
f
12.73 212.309 mo
13.324 212.312 13.906 212.348 14.477 212.418 cv
15.055 212.492 15.621 212.602 16.18 212.746 cv
16.742 212.895 17.293 213.074 17.84 213.281 cv
18.383 213.496 18.918 213.742 19.449 214.02 cv
19.473 214.039 19.496 214.062 19.52 214.09 cv
19.535 214.125 19.555 214.164 19.574 214.211 cv
19.586 214.258 19.598 214.316 19.605 214.383 cv
19.609 214.453 19.609 214.535 19.613 214.625 cv
19.609 214.766 19.605 214.871 19.594 214.941 cv
19.578 215.02 19.555 215.074 19.531 215.105 cv
19.5 215.145 19.465 215.16 19.422 215.152 cv
19.375 215.152 19.32 215.137 19.262 215.109 cv
18.207 214.633 17.137 214.273 16.039 214.027 cv
14.941 213.785 13.832 213.66 12.707 213.66 cv
11.598 213.66 10.488 213.785 9.387 214.027 cv
8.285 214.273 7.215 214.637 6.168 215.125 cv
6.125 215.148 6.078 215.156 6.035 215.148 cv
5.996 215.145 5.965 215.121 5.934 215.078 cv
5.91 215.039 5.887 214.984 5.871 214.906 cv
5.855 214.836 5.848 214.738 5.848 214.617 cv
5.848 214.512 5.852 214.422 5.859 214.344 cv
5.867 214.273 5.879 214.215 5.895 214.172 cv
5.91 214.129 5.926 214.098 5.941 214.074 cv
5.957 214.059 5.977 214.043 5.996 214.027 cv
7.063 213.496 8.16 213.074 9.285 212.766 cv
10.418 212.465 11.566 212.312 12.73 212.309 cv
cp
f
277.16 544.941 mo
277.156 545.047 277.141 545.137 277.105 545.207 cv
277.07 545.285 277.023 545.344 276.969 545.387 cv
276.91 545.437 276.848 545.473 276.781 545.488 cv
276.707 545.512 276.637 545.52 276.574 545.52 cv
276.129 545.52 li
275.988 545.52 275.867 545.508 275.762 545.477 cv
275.656 545.453 275.559 545.398 275.465 545.32 cv
275.371 545.246 275.277 545.145 275.184 545.012 cv
275.09 544.883 274.988 544.719 274.883 544.516 cv
271.809 538.777 li
271.645 538.484 271.48 538.176 271.32 537.848 cv
271.152 537.527 271 537.211 270.863 536.902 cv
270.848 536.902 li
270.855 537.277 270.863 537.66 270.871 538.047 cv
270.875 538.437 270.875 538.824 270.879 539.207 cv
270.879 545.293 li
270.875 545.332 270.863 545.367 270.844 545.398 cv
270.82 545.434 270.785 545.461 270.734 545.477 cv
270.68 545.496 270.609 545.508 270.527 545.523 cv
270.441 545.535 270.336 545.543 270.207 545.543 cv
270.07 545.543 269.961 545.535 269.879 545.523 cv
269.793 545.508 269.727 545.496 269.68 545.477 cv
269.629 545.461 269.594 545.434 269.57 545.398 cv
269.547 545.367 269.535 545.332 269.539 545.293 cv
269.539 535.988 li
269.535 535.781 269.594 535.633 269.715 535.543 cv
269.832 535.457 269.961 535.414 270.102 535.41 cv
270.762 535.41 li
270.914 535.414 271.047 535.426 271.152 535.449 cv
271.254 535.477 271.348 535.52 271.434 535.578 cv
271.516 535.641 271.594 535.723 271.676 535.828 cv
271.75 535.937 271.832 536.074 271.918 536.23 cv
274.285 540.656 li
274.43 540.93 274.57 541.195 274.707 541.449 cv
274.84 541.707 274.969 541.961 275.098 542.207 cv
275.219 542.461 275.344 542.707 275.469 542.945 cv
275.59 543.187 275.711 543.43 275.836 543.672 cv
275.844 543.672 li
275.832 543.266 275.824 542.836 275.824 542.391 cv
275.816 541.945 275.816 541.52 275.82 541.109 cv
275.82 535.637 li
275.816 535.602 275.828 535.566 275.852 535.535 cv
275.875 535.504 275.91 535.477 275.965 535.453 cv
276.012 535.43 276.082 535.414 276.168 535.402 cv
276.254 535.395 276.363 535.391 276.504 535.387 cv
276.621 535.391 276.727 535.395 276.816 535.402 cv
276.902 535.414 276.969 535.43 277.02 535.453 cv
277.066 535.477 277.102 535.504 277.125 535.535 cv
277.145 535.566 277.156 535.602 277.16 535.637 cv
cp
f
285.711 545.301 mo
285.707 545.348 285.699 545.383 285.684 545.406 cv
285.664 545.437 285.629 545.461 285.586 545.48 cv
285.539 545.5 285.48 545.512 285.406 545.527 cv
285.328 545.535 285.234 545.543 285.129 545.543 cv
285.004 545.543 284.906 545.535 284.836 545.527 cv
284.758 545.512 284.699 545.5 284.656 545.48 cv
284.609 545.461 284.578 545.437 284.566 545.406 cv
284.547 545.383 284.539 545.348 284.543 545.301 cv
284.543 544.375 li
284.141 544.82 283.746 545.141 283.359 545.34 cv
282.965 545.543 282.57 545.641 282.176 545.645 cv
281.703 545.641 281.309 545.566 280.992 545.41 cv
280.672 545.258 280.414 545.047 280.219 544.777 cv
280.016 544.512 279.875 544.199 279.793 543.84 cv
279.703 543.484 279.66 543.051 279.664 542.543 cv
279.664 538.289 li
279.66 538.25 279.668 538.215 279.691 538.184 cv
279.707 538.156 279.742 538.133 279.797 538.105 cv
279.844 538.086 279.914 538.07 280 538.059 cv
280.082 538.055 280.184 538.051 280.313 538.047 cv
280.434 538.051 280.539 538.055 280.625 538.059 cv
280.707 538.07 280.773 538.086 280.82 538.105 cv
280.867 538.133 280.902 538.156 280.926 538.184 cv
280.945 538.215 280.953 538.25 280.957 538.289 cv
280.957 542.371 li
280.953 542.785 280.984 543.113 281.047 543.359 cv
281.105 543.605 281.195 543.816 281.32 543.988 cv
281.438 544.168 281.594 544.301 281.785 544.395 cv
281.969 544.492 282.188 544.543 282.438 544.539 cv
282.758 544.543 283.078 544.426 283.402 544.195 cv
283.719 543.969 284.059 543.633 284.418 543.187 cv
284.418 538.289 li
284.418 538.25 284.426 538.215 284.445 538.184 cv
284.461 538.156 284.496 538.133 284.551 538.105 cv
284.602 538.086 284.668 538.07 284.75 538.059 cv
284.828 538.055 284.934 538.051 285.066 538.047 cv
285.188 538.051 285.293 538.055 285.379 538.059 cv
285.461 538.07 285.523 538.086 285.57 538.105 cv
285.613 538.133 285.648 538.156 285.676 538.184 cv
285.695 538.215 285.707 538.25 285.711 538.289 cv
cp
f
298.488 545.301 mo
298.484 545.348 298.477 545.383 298.457 545.406 cv
298.434 545.437 298.398 545.461 298.355 545.48 cv
298.305 545.5 298.238 545.512 298.16 545.527 cv
298.074 545.535 297.973 545.543 297.848 545.543 cv
297.715 545.543 297.605 545.535 297.527 545.527 cv
297.441 545.512 297.375 545.5 297.328 545.48 cv
297.273 545.461 297.238 545.437 297.223 545.406 cv
297.199 545.383 297.191 545.348 297.191 545.301 cv
297.191 541.039 li
297.191 540.746 297.164 540.477 297.113 540.23 cv
297.059 539.988 296.977 539.777 296.863 539.598 cv
296.75 539.422 296.605 539.285 296.43 539.191 cv
296.25 539.098 296.039 539.051 295.805 539.051 cv
295.508 539.051 295.211 539.168 294.914 539.395 cv
294.609 539.629 294.281 539.961 293.926 540.398 cv
293.926 545.301 li
293.922 545.348 293.91 545.383 293.895 545.406 cv
293.871 545.437 293.84 545.461 293.793 545.48 cv
293.742 545.5 293.676 545.512 293.594 545.527 cv
293.508 545.535 293.402 545.543 293.281 545.543 cv
293.16 545.543 293.059 545.535 292.973 545.527 cv
292.887 545.512 292.816 545.5 292.77 545.48 cv
292.715 545.461 292.684 545.437 292.668 545.406 cv
292.648 545.383 292.637 545.348 292.641 545.301 cv
292.641 541.039 li
292.637 540.746 292.609 540.477 292.555 540.23 cv
292.496 539.988 292.41 539.777 292.297 539.598 cv
292.184 539.422 292.039 539.285 291.867 539.191 cv
291.688 539.098 291.48 539.051 291.246 539.051 cv
290.945 539.051 290.648 539.168 290.348 539.395 cv
290.047 539.629 289.719 539.961 289.367 540.398 cv
289.367 545.301 li
289.363 545.348 289.352 545.383 289.336 545.406 cv
289.313 545.437 289.281 545.461 289.234 545.48 cv
289.188 545.5 289.121 545.512 289.043 545.527 cv
288.957 545.535 288.852 545.543 288.723 545.543 cv
288.594 545.543 288.488 545.535 288.41 545.527 cv
288.324 545.512 288.258 545.5 288.211 545.48 cv
288.156 545.461 288.125 545.437 288.109 545.406 cv
288.09 545.383 288.078 545.348 288.082 545.301 cv
288.082 538.289 li
288.078 538.25 288.086 538.215 288.105 538.184 cv
288.117 538.156 288.148 538.133 288.199 538.105 cv
288.242 538.086 288.305 538.07 288.379 538.059 cv
288.449 538.055 288.543 538.051 288.668 538.047 cv
288.777 538.051 288.875 538.055 288.953 538.059 cv
289.027 538.07 289.086 538.086 289.129 538.105 cv
289.168 538.133 289.195 538.156 289.215 538.184 cv
289.23 538.215 289.238 538.25 289.242 538.289 cv
289.242 539.215 li
289.633 538.773 290.016 538.453 290.391 538.246 cv
290.758 538.043 291.137 537.937 291.52 537.937 cv
291.809 537.937 292.066 537.973 292.301 538.039 cv
292.527 538.109 292.734 538.203 292.914 538.324 cv
293.09 538.445 293.238 538.59 293.367 538.758 cv
293.488 538.93 293.594 539.121 293.68 539.324 cv
293.91 539.074 294.133 538.859 294.344 538.68 cv
294.555 538.508 294.758 538.363 294.953 538.25 cv
295.148 538.145 295.336 538.066 295.52 538.012 cv
295.703 537.965 295.891 537.937 296.078 537.937 cv
296.531 537.937 296.91 538.02 297.215 538.176 cv
297.52 538.34 297.766 538.551 297.961 538.812 cv
298.148 539.078 298.285 539.387 298.367 539.742 cv
298.445 540.098 298.484 540.473 298.488 540.867 cv
cp
f
307.285 541.699 mo
307.281 542.309 307.215 542.859 307.086 543.344 cv
306.949 543.832 306.754 544.246 306.5 544.586 cv
306.242 544.93 305.926 545.191 305.555 545.371 cv
305.18 545.555 304.754 545.641 304.27 545.645 cv
304.043 545.641 303.836 545.621 303.648 545.578 cv
303.461 545.531 303.273 545.461 303.094 545.363 cv
302.906 545.266 302.727 545.141 302.547 544.988 cv
302.363 544.84 302.172 544.66 301.973 544.445 cv
301.973 545.301 li
301.973 545.348 301.961 545.383 301.941 545.41 cv
301.918 545.445 301.883 545.469 301.84 545.484 cv
301.789 545.5 301.73 545.512 301.664 545.527 cv
301.59 545.535 301.5 545.543 301.395 545.543 cv
301.285 545.543 301.199 545.535 301.129 545.527 cv
301.055 545.512 300.992 545.5 300.949 545.484 cv
300.898 545.469 300.867 545.445 300.855 545.41 cv
300.836 545.383 300.828 545.348 300.832 545.301 cv
300.832 534.891 li
300.828 534.852 300.84 534.816 300.859 534.781 cv
300.875 534.754 300.906 534.727 300.961 534.703 cv
301.008 534.684 301.074 534.668 301.16 534.656 cv
301.238 534.648 301.344 534.645 301.473 534.641 cv
301.602 534.645 301.707 534.648 301.793 534.656 cv
301.871 534.668 301.938 534.684 301.984 534.703 cv
302.031 534.727 302.063 534.754 302.086 534.781 cv
302.102 534.816 302.113 534.852 302.117 534.891 cv
302.117 539.09 li
302.324 538.879 302.527 538.699 302.723 538.555 cv
302.918 538.41 303.105 538.293 303.293 538.199 cv
303.477 538.113 303.664 538.047 303.855 538 cv
304.039 537.961 304.238 537.937 304.449 537.937 cv
304.953 537.937 305.387 538.039 305.754 538.242 cv
306.113 538.445 306.406 538.719 306.633 539.055 cv
306.855 539.398 307.023 539.797 307.129 540.254 cv
307.23 540.711 307.281 541.191 307.285 541.699 cv
cp
305.953 541.848 mo
305.949 541.492 305.922 541.145 305.871 540.805 cv
305.813 540.469 305.719 540.172 305.582 539.91 cv
305.445 539.652 305.266 539.441 305.043 539.281 cv
304.816 539.125 304.535 539.047 304.203 539.043 cv
304.035 539.047 303.871 539.07 303.711 539.113 cv
303.547 539.164 303.383 539.242 303.215 539.348 cv
303.047 539.461 302.871 539.602 302.695 539.77 cv
302.512 539.945 302.32 540.16 302.117 540.414 cv
302.117 543.211 li
302.473 543.645 302.813 543.977 303.137 544.199 cv
303.461 544.43 303.797 544.543 304.148 544.539 cv
304.469 544.543 304.746 544.465 304.98 544.305 cv
305.207 544.152 305.395 543.945 305.539 543.684 cv
305.684 543.43 305.789 543.141 305.855 542.82 cv
305.918 542.504 305.949 542.18 305.953 541.848 cv
cp
f
315.195 541.492 mo
315.191 541.695 315.141 541.836 315.043 541.922 cv
314.938 542.008 314.82 542.051 314.695 542.051 cv
310.078 542.051 li
310.074 542.441 310.113 542.793 310.195 543.105 cv
310.27 543.418 310.402 543.687 310.586 543.906 cv
310.766 544.133 311 544.305 311.297 544.422 cv
311.586 544.547 311.945 544.605 312.371 544.602 cv
312.703 544.605 313 544.578 313.262 544.52 cv
313.523 544.469 313.75 544.406 313.941 544.336 cv
314.129 544.27 314.285 544.211 314.41 544.152 cv
314.531 544.102 314.625 544.074 314.688 544.07 cv
314.723 544.074 314.754 544.082 314.785 544.098 cv
314.813 544.117 314.836 544.145 314.855 544.18 cv
314.867 544.219 314.879 544.27 314.891 544.332 cv
314.895 544.398 314.898 544.477 314.902 544.57 cv
314.898 544.641 314.895 544.699 314.895 544.746 cv
314.887 544.793 314.883 544.836 314.875 544.875 cv
314.867 544.914 314.852 544.949 314.836 544.98 cv
314.813 545.012 314.789 545.043 314.766 545.07 cv
314.734 545.102 314.652 545.148 314.512 545.211 cv
314.371 545.277 314.188 545.34 313.965 545.402 cv
313.738 545.465 313.48 545.52 313.188 545.57 cv
312.895 545.617 312.582 545.641 312.25 545.645 cv
311.672 545.641 311.164 545.562 310.734 545.402 cv
310.297 545.242 309.934 545.004 309.641 544.687 cv
309.34 544.371 309.117 543.977 308.969 543.496 cv
308.82 543.02 308.746 542.461 308.746 541.824 cv
308.746 541.227 308.82 540.687 308.977 540.203 cv
309.129 539.727 309.355 539.316 309.652 538.98 cv
309.945 538.645 310.301 538.387 310.715 538.207 cv
311.129 538.027 311.594 537.937 312.109 537.937 cv
312.66 537.937 313.129 538.027 313.516 538.203 cv
313.902 538.383 314.219 538.621 314.473 538.918 cv
314.719 539.219 314.902 539.57 315.02 539.969 cv
315.133 540.375 315.191 540.805 315.195 541.258 cv
cp
313.902 541.109 mo
313.918 540.434 313.766 539.902 313.449 539.52 cv
313.133 539.137 312.664 538.945 312.047 538.941 cv
311.723 538.945 311.441 539.004 311.203 539.121 cv
310.961 539.242 310.762 539.402 310.602 539.598 cv
310.438 539.797 310.313 540.027 310.227 540.289 cv
310.137 540.551 310.086 540.824 310.078 541.109 cv
cp
f
321.262 538.746 mo
321.258 538.863 321.258 538.961 321.254 539.035 cv
321.246 539.117 321.234 539.18 321.223 539.219 cv
321.203 539.266 321.184 539.297 321.164 539.32 cv
321.137 539.344 321.105 539.355 321.066 539.355 cv
321.023 539.355 320.973 539.344 320.914 539.32 cv
320.852 539.297 320.781 539.273 320.711 539.25 cv
320.633 539.227 320.551 539.207 320.457 539.184 cv
320.363 539.168 320.262 539.156 320.152 539.152 cv
320.02 539.156 319.891 539.184 319.77 539.23 cv
319.645 539.285 319.516 539.371 319.379 539.488 cv
319.238 539.613 319.094 539.77 318.945 539.965 cv
318.793 540.16 318.625 540.402 318.445 540.687 cv
318.445 545.301 li
318.441 545.348 318.43 545.383 318.414 545.406 cv
318.391 545.437 318.359 545.461 318.313 545.48 cv
318.266 545.5 318.199 545.512 318.121 545.527 cv
318.035 545.535 317.93 545.543 317.801 545.543 cv
317.672 545.543 317.566 545.535 317.488 545.527 cv
317.402 545.512 317.336 545.5 317.289 545.48 cv
317.234 545.461 317.203 545.437 317.188 545.406 cv
317.168 545.383 317.156 545.348 317.16 545.301 cv
317.16 538.289 li
317.156 538.25 317.164 538.215 317.184 538.184 cv
317.195 538.156 317.227 538.133 317.277 538.105 cv
317.32 538.086 317.383 538.07 317.457 538.059 cv
317.527 538.055 317.621 538.051 317.746 538.047 cv
317.855 538.051 317.953 538.055 318.031 538.059 cv
318.105 538.07 318.164 538.086 318.207 538.105 cv
318.246 538.133 318.273 538.156 318.293 538.184 cv
318.309 538.215 318.316 538.25 318.32 538.289 cv
318.32 539.309 li
318.508 539.027 318.691 538.801 318.863 538.625 cv
319.031 538.449 319.191 538.309 319.344 538.207 cv
319.492 538.105 319.641 538.035 319.789 537.996 cv
319.938 537.957 320.086 537.937 320.238 537.937 cv
320.305 537.937 320.383 537.941 320.469 537.949 cv
320.555 537.957 320.645 537.973 320.738 537.992 cv
320.832 538.016 320.914 538.039 320.992 538.062 cv
321.063 538.09 321.117 538.117 321.152 538.141 cv
321.18 538.172 321.199 538.195 321.215 538.215 cv
321.223 538.242 321.234 538.273 321.242 538.305 cv
321.25 538.344 321.254 538.395 321.258 538.465 cv
321.258 538.535 321.258 538.629 321.262 538.746 cv
cp
f
333.02 541.715 mo
333.016 542.293 332.941 542.82 332.793 543.297 cv
332.641 543.781 332.414 544.195 332.117 544.539 cv
331.816 544.891 331.441 545.16 330.996 545.352 cv
330.543 545.547 330.023 545.641 329.434 545.645 cv
328.855 545.641 328.352 545.559 327.926 545.387 cv
327.496 545.219 327.141 544.969 326.855 544.641 cv
326.566 544.312 326.352 543.918 326.215 543.449 cv
326.074 542.984 326.008 542.453 326.008 541.855 cv
326.008 541.289 326.078 540.762 326.227 540.281 cv
326.371 539.801 326.598 539.387 326.898 539.035 cv
327.195 538.687 327.566 538.418 328.016 538.227 cv
328.461 538.035 328.984 537.937 329.582 537.937 cv
330.16 537.937 330.66 538.023 331.09 538.195 cv
331.516 538.367 331.875 538.617 332.16 538.945 cv
332.445 539.273 332.66 539.672 332.805 540.137 cv
332.945 540.605 333.016 541.133 333.02 541.715 cv
cp
331.688 541.801 mo
331.684 541.426 331.648 541.066 331.582 540.727 cv
331.508 540.391 331.391 540.098 331.23 539.84 cv
331.066 539.59 330.848 539.387 330.57 539.234 cv
330.289 539.09 329.941 539.016 329.531 539.012 cv
329.145 539.016 328.816 539.082 328.543 539.215 cv
328.266 539.352 328.039 539.543 327.863 539.789 cv
327.684 540.035 327.551 540.328 327.469 540.664 cv
327.379 541.004 327.336 541.371 327.34 541.77 cv
327.336 542.156 327.371 542.52 327.445 542.855 cv
327.512 543.195 327.629 543.488 327.797 543.738 cv
327.961 543.992 328.184 544.195 328.461 544.34 cv
328.738 544.492 329.086 544.566 329.5 544.562 cv
329.875 544.566 330.203 544.496 330.484 544.359 cv
330.762 544.227 330.988 544.039 331.168 543.789 cv
331.344 543.547 331.473 543.254 331.559 542.918 cv
331.641 542.582 331.684 542.211 331.688 541.801 cv
cp
f
338.75 535.402 mo
338.746 535.504 338.742 535.582 338.734 535.641 cv
338.723 535.703 338.711 535.754 338.699 535.785 cv
338.684 535.824 338.668 535.848 338.648 535.859 cv
338.625 535.875 338.598 535.883 338.57 535.879 cv
338.531 535.883 338.484 535.871 338.434 535.844 cv
338.375 535.824 338.309 535.797 338.234 535.766 cv
338.152 535.738 338.063 535.711 337.957 535.687 cv
337.848 535.664 337.723 535.652 337.59 535.652 cv
337.395 535.652 337.23 535.684 337.098 535.746 cv
336.957 535.809 336.848 535.906 336.77 536.039 cv
336.684 536.172 336.625 536.344 336.59 536.555 cv
336.551 536.766 336.531 537.023 336.535 537.32 cv
336.535 538.086 li
338.102 538.086 li
338.141 538.09 338.176 538.098 338.207 538.113 cv
338.234 538.133 338.262 538.164 338.285 538.207 cv
338.309 538.254 338.324 538.312 338.34 538.375 cv
338.348 538.445 338.355 538.527 338.359 538.621 cv
338.355 538.812 338.332 538.945 338.289 539.027 cv
338.238 539.113 338.176 539.156 338.102 539.152 cv
336.535 539.152 li
336.535 545.301 li
336.531 545.348 336.523 545.383 336.504 545.406 cv
336.48 545.437 336.445 545.461 336.398 545.48 cv
336.348 545.5 336.281 545.512 336.199 545.527 cv
336.113 545.535 336.008 545.543 335.891 545.543 cv
335.762 545.543 335.66 545.535 335.578 545.527 cv
335.492 545.512 335.426 545.5 335.379 545.48 cv
335.328 545.461 335.293 545.437 335.273 545.406 cv
335.25 545.383 335.238 545.348 335.242 545.301 cv
335.242 539.152 li
334.254 539.152 li
334.168 539.156 334.105 539.113 334.066 539.027 cv
334.023 538.945 334 538.812 334.004 538.621 cv
334 538.527 334.008 538.445 334.02 538.375 cv
334.027 538.312 334.043 538.254 334.066 538.207 cv
334.086 538.164 334.109 538.133 334.145 538.113 cv
334.172 538.098 334.211 538.09 334.254 538.086 cv
335.242 538.086 li
335.242 537.359 li
335.238 536.875 335.285 536.457 335.379 536.102 cv
335.469 535.754 335.605 535.465 335.793 535.242 cv
335.977 535.02 336.211 534.855 336.5 534.746 cv
336.781 534.641 337.117 534.586 337.504 534.586 cv
337.68 534.586 337.855 534.605 338.031 534.637 cv
338.199 534.676 338.332 534.711 338.43 534.746 cv
338.52 534.789 338.582 534.824 338.617 534.852 cv
338.645 534.887 338.672 534.926 338.695 534.973 cv
338.715 535.023 338.727 535.086 338.738 535.152 cv
338.742 535.227 338.746 535.309 338.75 535.402 cv
cp
f
348.949 542.668 mo
348.945 543.141 348.859 543.562 348.688 543.93 cv
348.512 544.305 348.27 544.617 347.961 544.871 cv
347.652 545.129 347.289 545.32 346.871 545.449 cv
346.449 545.578 346 545.641 345.52 545.645 cv
345.18 545.641 344.863 545.613 344.578 545.559 cv
344.289 545.5 344.035 545.434 343.809 545.348 cv
343.582 545.27 343.391 545.184 343.238 545.09 cv
343.082 545.004 342.977 544.926 342.918 544.863 cv
342.859 544.801 342.816 544.723 342.789 544.629 cv
342.758 544.535 342.742 544.406 342.746 544.242 cv
342.742 544.129 342.746 544.035 342.762 543.957 cv
342.77 543.883 342.785 543.82 342.809 543.773 cv
342.824 543.727 342.852 543.695 342.887 543.676 cv
342.914 543.66 342.949 543.652 342.992 543.648 cv
343.063 543.652 343.164 543.695 343.301 543.781 cv
343.43 543.871 343.602 543.969 343.813 544.07 cv
344.02 544.18 344.27 544.277 344.563 544.363 cv
344.855 544.457 345.195 544.5 345.582 544.5 cv
345.871 544.5 346.137 544.461 346.379 544.383 cv
346.617 544.305 346.824 544.195 347.004 544.051 cv
347.176 543.91 347.313 543.734 347.406 543.523 cv
347.5 543.316 347.547 543.082 347.547 542.816 cv
347.547 542.535 347.48 542.289 347.352 542.082 cv
347.219 541.883 347.047 541.707 346.836 541.551 cv
346.621 541.402 346.379 541.262 346.105 541.129 cv
345.832 541.004 345.551 540.871 345.27 540.738 cv
344.98 540.605 344.703 540.461 344.434 540.297 cv
344.164 540.141 343.922 539.949 343.711 539.73 cv
343.492 539.512 343.32 539.258 343.191 538.961 cv
343.055 538.672 342.988 538.32 342.992 537.906 cv
342.988 537.488 343.066 537.113 343.223 536.781 cv
343.375 536.453 343.586 536.176 343.863 535.949 cv
344.133 535.73 344.457 535.559 344.836 535.441 cv
345.211 535.324 345.621 535.266 346.059 535.266 cv
346.277 535.266 346.5 535.285 346.73 535.324 cv
346.953 535.363 347.164 535.414 347.367 535.477 cv
347.563 535.543 347.742 535.617 347.902 535.695 cv
348.055 535.777 348.156 535.844 348.211 535.891 cv
348.258 535.945 348.293 535.984 348.309 536.008 cv
348.324 536.039 348.336 536.074 348.348 536.117 cv
348.355 536.164 348.363 536.219 348.371 536.277 cv
348.375 536.344 348.379 536.422 348.379 536.52 cv
348.379 536.613 348.375 536.699 348.367 536.77 cv
348.359 536.848 348.348 536.906 348.332 536.953 cv
348.316 537 348.293 537.035 348.266 537.059 cv
348.234 537.082 348.203 537.094 348.168 537.094 cv
348.109 537.094 348.02 537.059 347.898 536.988 cv
347.773 536.918 347.621 536.836 347.449 536.742 cv
347.27 536.652 347.063 536.57 346.824 536.492 cv
346.578 536.418 346.309 536.379 346.012 536.379 cv
345.73 536.379 345.484 536.418 345.277 536.492 cv
345.066 536.57 344.895 536.672 344.762 536.793 cv
344.625 536.918 344.523 537.062 344.457 537.234 cv
344.391 537.406 344.359 537.59 344.359 537.781 cv
344.359 538.066 344.422 538.309 344.551 538.508 cv
344.68 538.711 344.852 538.891 345.07 539.043 cv
345.281 539.203 345.527 539.344 345.805 539.473 cv
346.078 539.605 346.359 539.738 346.648 539.867 cv
346.934 540 347.215 540.145 347.488 540.301 cv
347.762 540.461 348.008 540.648 348.227 540.863 cv
348.441 541.082 348.613 541.336 348.75 541.629 cv
348.879 541.922 348.945 542.27 348.949 542.668 cv
cp
f
356.715 545.301 mo
356.711 545.348 356.703 545.383 356.688 545.406 cv
356.668 545.437 356.633 545.461 356.59 545.48 cv
356.543 545.5 356.484 545.512 356.41 545.527 cv
356.332 545.535 356.238 545.543 356.133 545.543 cv
356.008 545.543 355.91 545.535 355.84 545.527 cv
355.762 545.512 355.703 545.5 355.66 545.48 cv
355.613 545.461 355.582 545.437 355.57 545.406 cv
355.551 545.383 355.543 545.348 355.547 545.301 cv
355.547 544.375 li
355.145 544.82 354.75 545.141 354.363 545.34 cv
353.969 545.543 353.574 545.641 353.18 545.645 cv
352.707 545.641 352.313 545.566 351.996 545.41 cv
351.676 545.258 351.418 545.047 351.223 544.777 cv
351.02 544.512 350.879 544.199 350.797 543.84 cv
350.707 543.484 350.664 543.051 350.668 542.543 cv
350.668 538.289 li
350.664 538.25 350.672 538.215 350.695 538.184 cv
350.711 538.156 350.746 538.133 350.801 538.105 cv
350.848 538.086 350.918 538.07 351.004 538.059 cv
351.086 538.055 351.188 538.051 351.316 538.047 cv
351.438 538.051 351.543 538.055 351.629 538.059 cv
351.711 538.07 351.777 538.086 351.824 538.105 cv
351.871 538.133 351.906 538.156 351.93 538.184 cv
351.949 538.215 351.957 538.25 351.961 538.289 cv
351.961 542.371 li
351.957 542.785 351.988 543.113 352.051 543.359 cv
352.109 543.605 352.199 543.816 352.324 543.988 cv
352.441 544.168 352.598 544.301 352.789 544.395 cv
352.973 544.492 353.191 544.543 353.441 544.539 cv
353.762 544.543 354.082 544.426 354.406 544.195 cv
354.723 543.969 355.063 543.633 355.422 543.187 cv
355.422 538.289 li
355.422 538.25 355.43 538.215 355.449 538.184 cv
355.465 538.156 355.5 538.133 355.555 538.105 cv
355.605 538.086 355.672 538.07 355.754 538.059 cv
355.832 538.055 355.938 538.051 356.07 538.047 cv
356.191 538.051 356.297 538.055 356.383 538.059 cv
356.465 538.07 356.527 538.086 356.574 538.105 cv
356.617 538.133 356.652 538.156 356.68 538.184 cv
356.699 538.215 356.711 538.25 356.715 538.289 cv
cp
f
365.57 541.699 mo
365.566 542.309 365.5 542.859 365.371 543.344 cv
365.234 543.832 365.039 544.246 364.785 544.586 cv
364.527 544.93 364.211 545.191 363.84 545.371 cv
363.465 545.555 363.039 545.641 362.555 545.645 cv
362.328 545.641 362.121 545.621 361.934 545.578 cv
361.746 545.531 361.559 545.461 361.379 545.363 cv
361.191 545.266 361.012 545.141 360.832 544.988 cv
360.648 544.84 360.457 544.66 360.258 544.445 cv
360.258 545.301 li
360.258 545.348 360.246 545.383 360.227 545.41 cv
360.203 545.445 360.168 545.469 360.125 545.484 cv
360.074 545.5 360.016 545.512 359.949 545.527 cv
359.875 545.535 359.785 545.543 359.68 545.543 cv
359.57 545.543 359.484 545.535 359.414 545.527 cv
359.34 545.512 359.277 545.5 359.234 545.484 cv
359.184 545.469 359.152 545.445 359.141 545.41 cv
359.121 545.383 359.113 545.348 359.117 545.301 cv
359.117 534.891 li
359.113 534.852 359.125 534.816 359.145 534.781 cv
359.16 534.754 359.191 534.727 359.246 534.703 cv
359.293 534.684 359.359 534.668 359.445 534.656 cv
359.523 534.648 359.629 534.645 359.758 534.641 cv
359.887 534.645 359.992 534.648 360.078 534.656 cv
360.156 534.668 360.223 534.684 360.27 534.703 cv
360.316 534.727 360.348 534.754 360.371 534.781 cv
360.387 534.816 360.398 534.852 360.402 534.891 cv
360.402 539.09 li
360.609 538.879 360.813 538.699 361.008 538.555 cv
361.203 538.41 361.391 538.293 361.578 538.199 cv
361.762 538.113 361.949 538.047 362.141 538 cv
362.324 537.961 362.523 537.937 362.734 537.937 cv
363.238 537.937 363.672 538.039 364.039 538.242 cv
364.398 538.445 364.691 538.719 364.918 539.055 cv
365.141 539.398 365.309 539.797 365.414 540.254 cv
365.516 540.711 365.566 541.191 365.57 541.699 cv
cp
364.238 541.848 mo
364.234 541.492 364.207 541.145 364.156 540.805 cv
364.098 540.469 364.004 540.172 363.867 539.91 cv
363.73 539.652 363.551 539.441 363.328 539.281 cv
363.102 539.125 362.82 539.047 362.488 539.043 cv
362.32 539.047 362.156 539.07 361.996 539.113 cv
361.832 539.164 361.668 539.242 361.5 539.348 cv
361.332 539.461 361.156 539.602 360.98 539.77 cv
360.797 539.945 360.605 540.16 360.402 540.414 cv
360.402 543.211 li
360.758 543.645 361.098 543.977 361.422 544.199 cv
361.746 544.43 362.082 544.543 362.434 544.539 cv
362.754 544.543 363.031 544.465 363.266 544.305 cv
363.492 544.152 363.68 543.945 363.824 543.684 cv
363.969 543.43 364.074 543.141 364.141 542.82 cv
364.203 542.504 364.234 542.18 364.238 541.848 cv
cp
f
370.707 541.562 mo
370.707 541.766 370.684 541.902 370.637 541.98 cv
370.59 542.059 370.52 542.098 370.434 542.098 cv
367.176 542.098 li
367.082 542.098 367.016 542.059 366.969 541.977 cv
366.922 541.898 366.898 541.762 366.898 541.562 cv
366.898 541.367 366.922 541.227 366.969 541.148 cv
367.016 541.07 367.082 541.031 367.176 541.031 cv
370.434 541.031 li
370.473 541.031 370.512 541.039 370.547 541.055 cv
370.578 541.07 370.605 541.102 370.633 541.145 cv
370.652 541.191 370.672 541.246 370.688 541.312 cv
370.699 541.383 370.707 541.469 370.707 541.562 cv
cp
f
373.961 545.293 mo
373.957 545.336 373.949 545.371 373.93 545.402 cv
373.906 545.434 373.867 545.461 373.82 545.477 cv
373.766 545.496 373.699 545.508 373.613 545.523 cv
373.527 545.535 373.418 545.543 373.293 545.543 cv
373.164 545.543 373.059 545.535 372.973 545.523 cv
372.883 545.508 372.813 545.496 372.762 545.477 cv
372.707 545.461 372.672 545.434 372.652 545.402 cv
372.629 545.371 372.617 545.336 372.621 545.293 cv
372.621 535.613 li
372.617 535.574 372.629 535.539 372.656 535.504 cv
372.676 535.477 372.715 535.449 372.773 535.43 cv
372.824 535.414 372.895 535.398 372.984 535.383 cv
373.066 535.371 373.168 535.367 373.293 535.363 cv
373.418 535.367 373.527 535.371 373.613 535.383 cv
373.699 535.398 373.766 535.414 373.82 535.43 cv
373.867 535.449 373.906 535.477 373.93 535.504 cv
373.949 535.539 373.957 535.574 373.961 535.613 cv
cp
f
386.949 545.301 mo
386.945 545.348 386.938 545.383 386.918 545.406 cv
386.895 545.437 386.859 545.461 386.816 545.48 cv
386.766 545.5 386.699 545.512 386.621 545.527 cv
386.535 545.535 386.434 545.543 386.309 545.543 cv
386.176 545.543 386.066 545.535 385.988 545.527 cv
385.902 545.512 385.836 545.5 385.789 545.48 cv
385.734 545.461 385.699 545.437 385.684 545.406 cv
385.66 545.383 385.652 545.348 385.652 545.301 cv
385.652 541.039 li
385.652 540.746 385.625 540.477 385.574 540.23 cv
385.52 539.988 385.438 539.777 385.324 539.598 cv
385.211 539.422 385.066 539.285 384.891 539.191 cv
384.711 539.098 384.5 539.051 384.266 539.051 cv
383.969 539.051 383.672 539.168 383.375 539.395 cv
383.07 539.629 382.742 539.961 382.387 540.398 cv
382.387 545.301 li
382.383 545.348 382.371 545.383 382.355 545.406 cv
382.332 545.437 382.301 545.461 382.254 545.48 cv
382.203 545.5 382.137 545.512 382.055 545.527 cv
381.969 545.535 381.863 545.543 381.742 545.543 cv
381.621 545.543 381.52 545.535 381.434 545.527 cv
381.348 545.512 381.277 545.5 381.23 545.48 cv
381.176 545.461 381.145 545.437 381.129 545.406 cv
381.109 545.383 381.098 545.348 381.102 545.301 cv
381.102 541.039 li
381.098 540.746 381.07 540.477 381.016 540.23 cv
380.957 539.988 380.871 539.777 380.758 539.598 cv
380.645 539.422 380.5 539.285 380.328 539.191 cv
380.148 539.098 379.941 539.051 379.707 539.051 cv
379.406 539.051 379.109 539.168 378.809 539.395 cv
378.508 539.629 378.18 539.961 377.828 540.398 cv
377.828 545.301 li
377.824 545.348 377.813 545.383 377.797 545.406 cv
377.773 545.437 377.742 545.461 377.695 545.48 cv
377.648 545.5 377.582 545.512 377.504 545.527 cv
377.418 545.535 377.313 545.543 377.184 545.543 cv
377.055 545.543 376.949 545.535 376.871 545.527 cv
376.785 545.512 376.719 545.5 376.672 545.48 cv
376.617 545.461 376.586 545.437 376.57 545.406 cv
376.551 545.383 376.539 545.348 376.543 545.301 cv
376.543 538.289 li
376.539 538.25 376.547 538.215 376.566 538.184 cv
376.578 538.156 376.609 538.133 376.66 538.105 cv
376.703 538.086 376.766 538.07 376.84 538.059 cv
376.91 538.055 377.004 538.051 377.129 538.047 cv
377.238 538.051 377.336 538.055 377.414 538.059 cv
377.488 538.07 377.547 538.086 377.59 538.105 cv
377.629 538.133 377.656 538.156 377.676 538.184 cv
377.691 538.215 377.699 538.25 377.703 538.289 cv
377.703 539.215 li
378.094 538.773 378.477 538.453 378.852 538.246 cv
379.219 538.043 379.598 537.937 379.98 537.937 cv
380.27 537.937 380.527 537.973 380.762 538.039 cv
380.988 538.109 381.195 538.203 381.375 538.324 cv
381.551 538.445 381.699 538.59 381.828 538.758 cv
381.949 538.93 382.055 539.121 382.141 539.324 cv
382.371 539.074 382.594 538.859 382.805 538.68 cv
383.016 538.508 383.219 538.363 383.414 538.25 cv
383.609 538.145 383.797 538.066 383.98 538.012 cv
384.164 537.965 384.352 537.937 384.539 537.937 cv
384.992 537.937 385.371 538.02 385.676 538.176 cv
385.98 538.34 386.227 538.551 386.422 538.812 cv
386.609 539.078 386.746 539.387 386.828 539.742 cv
386.906 540.098 386.945 540.473 386.949 540.867 cv
cp
f
394.578 545.309 mo
394.574 545.371 394.555 545.418 394.516 545.449 cv
394.473 545.48 394.414 545.504 394.344 545.52 cv
394.266 545.535 394.16 545.543 394.023 545.543 cv
393.887 545.543 393.777 545.535 393.699 545.52 cv
393.613 545.504 393.555 545.48 393.523 545.449 cv
393.484 545.418 393.469 545.371 393.473 545.309 cv
393.473 544.609 li
393.164 544.937 392.82 545.191 392.445 545.371 cv
392.066 545.555 391.668 545.641 391.25 545.645 cv
390.875 545.641 390.543 545.594 390.246 545.5 cv
389.949 545.402 389.695 545.266 389.484 545.082 cv
389.273 544.902 389.109 544.68 388.992 544.414 cv
388.875 544.152 388.816 543.852 388.82 543.508 cv
388.816 543.117 388.895 542.773 389.059 542.48 cv
389.215 542.191 389.449 541.949 389.754 541.758 cv
390.055 541.566 390.422 541.422 390.859 541.324 cv
391.293 541.23 391.785 541.184 392.332 541.18 cv
393.301 541.18 li
393.301 540.633 li
393.297 540.363 393.27 540.125 393.215 539.918 cv
393.156 539.711 393.063 539.539 392.938 539.398 cv
392.805 539.262 392.641 539.156 392.441 539.086 cv
392.234 539.016 391.984 538.98 391.695 538.98 cv
391.375 538.98 391.09 539.02 390.84 539.094 cv
390.582 539.172 390.363 539.254 390.176 539.344 cv
389.988 539.437 389.828 539.523 389.703 539.594 cv
389.57 539.672 389.477 539.707 389.418 539.707 cv
389.375 539.707 389.34 539.699 389.309 539.676 cv
389.277 539.66 389.25 539.629 389.227 539.582 cv
389.203 539.543 389.184 539.488 389.176 539.422 cv
389.16 539.359 389.156 539.289 389.16 539.207 cv
389.156 539.082 389.164 538.977 389.188 538.898 cv
389.203 538.824 389.25 538.754 389.32 538.684 cv
389.391 538.617 389.512 538.539 389.684 538.449 cv
389.855 538.359 390.051 538.277 390.273 538.199 cv
390.496 538.129 390.742 538.066 391.008 538.012 cv
391.273 537.965 391.539 537.937 391.813 537.937 cv
392.313 537.937 392.742 537.996 393.094 538.109 cv
393.445 538.227 393.73 538.395 393.953 538.613 cv
394.168 538.836 394.328 539.109 394.43 539.434 cv
394.527 539.766 394.574 540.148 394.578 540.578 cv
cp
393.301 542.105 mo
392.199 542.105 li
391.844 542.109 391.539 542.141 391.281 542.195 cv
391.02 542.258 390.805 542.344 390.633 542.461 cv
390.461 542.578 390.336 542.719 390.258 542.883 cv
390.176 543.047 390.133 543.234 390.137 543.445 cv
390.133 543.812 390.25 544.105 390.48 544.316 cv
390.711 544.535 391.035 544.641 391.453 544.641 cv
391.789 544.641 392.102 544.555 392.391 544.383 cv
392.68 544.211 392.98 543.949 393.301 543.594 cv
cp
f
402.797 538.605 mo
402.793 538.789 402.77 538.922 402.723 539 cv
402.672 539.082 402.609 539.121 402.535 539.121 cv
401.527 539.121 li
401.707 539.309 401.836 539.516 401.91 539.742 cv
401.98 539.969 402.016 540.203 402.02 540.445 cv
402.016 540.852 401.949 541.211 401.824 541.523 cv
401.691 541.836 401.508 542.102 401.266 542.312 cv
401.023 542.531 400.734 542.695 400.406 542.809 cv
400.07 542.926 399.703 542.984 399.301 542.98 cv
399.012 542.984 398.738 542.945 398.484 542.867 cv
398.223 542.793 398.027 542.699 397.891 542.582 cv
397.797 542.68 397.719 542.785 397.66 542.902 cv
397.598 543.023 397.566 543.16 397.57 543.312 cv
397.566 543.496 397.652 543.648 397.824 543.766 cv
397.992 543.891 398.215 543.953 398.496 543.961 cv
400.328 544.039 li
400.676 544.051 400.992 544.098 401.285 544.184 cv
401.574 544.27 401.828 544.395 402.043 544.551 cv
402.254 544.711 402.422 544.902 402.543 545.133 cv
402.66 545.367 402.719 545.637 402.723 545.941 cv
402.719 546.262 402.652 546.566 402.52 546.859 cv
402.383 547.148 402.176 547.402 401.898 547.625 cv
401.617 547.844 401.262 548.02 400.832 548.148 cv
400.402 548.273 399.895 548.336 399.309 548.34 cv
398.738 548.336 398.254 548.289 397.859 548.195 cv
397.461 548.098 397.137 547.965 396.883 547.801 cv
396.629 547.633 396.445 547.437 396.332 547.207 cv
396.215 546.973 396.156 546.719 396.16 546.453 cv
396.156 546.281 396.176 546.117 396.223 545.957 cv
396.262 545.793 396.324 545.641 396.41 545.496 cv
396.492 545.352 396.602 545.215 396.73 545.078 cv
396.855 544.949 397 544.816 397.172 544.687 cv
396.914 544.559 396.727 544.395 396.605 544.195 cv
396.484 544 396.426 543.789 396.426 543.555 cv
396.426 543.242 396.488 542.957 396.617 542.707 cv
396.746 542.457 396.906 542.234 397.102 542.035 cv
396.938 541.844 396.813 541.629 396.719 541.387 cv
396.625 541.148 396.578 540.855 396.578 540.508 cv
396.578 540.113 396.645 539.754 396.781 539.434 cv
396.914 539.117 397.102 538.852 397.344 538.633 cv
397.582 538.418 397.867 538.25 398.203 538.129 cv
398.535 538.016 398.902 537.957 399.301 537.953 cv
399.512 537.957 399.711 537.969 399.895 537.988 cv
400.078 538.016 400.25 538.047 400.414 538.086 cv
402.535 538.086 li
402.621 538.09 402.688 538.133 402.73 538.215 cv
402.773 538.305 402.793 538.434 402.797 538.605 cv
cp
400.789 540.453 mo
400.785 539.98 400.652 539.609 400.395 539.336 cv
400.129 539.07 399.758 538.934 399.277 538.934 cv
399.023 538.934 398.805 538.977 398.625 539.059 cv
398.438 539.145 398.285 539.258 398.164 539.402 cv
398.043 539.551 397.953 539.719 397.895 539.906 cv
397.832 540.094 397.801 540.293 397.805 540.5 cv
397.801 540.965 397.934 541.328 398.195 541.594 cv
398.457 541.859 398.824 541.992 399.301 541.988 cv
399.551 541.992 399.77 541.953 399.961 541.867 cv
400.145 541.789 400.301 541.676 400.426 541.535 cv
400.547 541.395 400.637 541.23 400.699 541.039 cv
400.754 540.855 400.785 540.66 400.789 540.453 cv
cp
401.434 546.012 mo
401.43 545.707 401.305 545.477 401.063 545.312 cv
400.813 545.152 400.48 545.062 400.063 545.051 cv
398.246 544.988 li
398.078 545.121 397.941 545.246 397.84 545.359 cv
397.73 545.477 397.648 545.586 397.586 545.695 cv
397.523 545.801 397.48 545.906 397.457 546.012 cv
397.434 546.113 397.422 546.219 397.422 546.328 cv
397.422 546.664 397.59 546.918 397.934 547.098 cv
398.273 547.27 398.754 547.359 399.371 547.359 cv
399.758 547.359 400.082 547.32 400.348 547.246 cv
400.605 547.168 400.816 547.066 400.98 546.945 cv
401.137 546.816 401.254 546.676 401.328 546.516 cv
401.395 546.355 401.43 546.187 401.434 546.012 cv
cp
f
410.359 541.492 mo
410.355 541.695 410.305 541.836 410.207 541.922 cv
410.102 542.008 409.984 542.051 409.859 542.051 cv
405.242 542.051 li
405.238 542.441 405.277 542.793 405.359 543.105 cv
405.434 543.418 405.566 543.687 405.75 543.906 cv
405.93 544.133 406.164 544.305 406.461 544.422 cv
406.75 544.547 407.109 544.605 407.535 544.602 cv
407.867 544.605 408.164 544.578 408.426 544.52 cv
408.688 544.469 408.914 544.406 409.105 544.336 cv
409.293 544.27 409.449 544.211 409.574 544.152 cv
409.695 544.102 409.789 544.074 409.852 544.07 cv
409.887 544.074 409.918 544.082 409.949 544.098 cv
409.977 544.117 410 544.145 410.02 544.18 cv
410.031 544.219 410.043 544.27 410.055 544.332 cv
410.059 544.398 410.063 544.477 410.066 544.57 cv
410.063 544.641 410.059 544.699 410.059 544.746 cv
410.051 544.793 410.047 544.836 410.039 544.875 cv
410.031 544.914 410.016 544.949 410 544.98 cv
409.977 545.012 409.953 545.043 409.93 545.07 cv
409.898 545.102 409.816 545.148 409.676 545.211 cv
409.535 545.277 409.352 545.34 409.129 545.402 cv
408.902 545.465 408.645 545.52 408.352 545.57 cv
408.059 545.617 407.746 545.641 407.414 545.645 cv
406.836 545.641 406.328 545.562 405.898 545.402 cv
405.461 545.242 405.098 545.004 404.805 544.687 cv
404.504 544.371 404.281 543.977 404.133 543.496 cv
403.984 543.02 403.91 542.461 403.91 541.824 cv
403.91 541.227 403.984 540.687 404.141 540.203 cv
404.293 539.727 404.52 539.316 404.816 538.98 cv
405.109 538.645 405.465 538.387 405.879 538.207 cv
406.293 538.027 406.758 537.937 407.273 537.937 cv
407.824 537.937 408.293 538.027 408.68 538.203 cv
409.066 538.383 409.383 538.621 409.637 538.918 cv
409.883 539.219 410.066 539.57 410.184 539.969 cv
410.297 540.375 410.355 540.805 410.359 541.258 cv
cp
409.066 541.109 mo
409.082 540.434 408.93 539.902 408.613 539.52 cv
408.297 539.137 407.828 538.945 407.211 538.941 cv
406.887 538.945 406.605 539.004 406.367 539.121 cv
406.125 539.242 405.926 539.402 405.766 539.598 cv
405.602 539.797 405.477 540.027 405.391 540.289 cv
405.301 540.551 405.25 540.824 405.242 541.109 cv
cp
f
416.727 543.391 mo
416.723 543.754 416.656 544.074 416.527 544.352 cv
416.395 544.633 416.207 544.867 415.965 545.059 cv
415.719 545.254 415.426 545.398 415.09 545.496 cv
414.75 545.594 414.379 545.641 413.977 545.645 cv
413.723 545.641 413.484 545.621 413.262 545.586 cv
413.035 545.543 412.836 545.496 412.656 545.437 cv
412.477 545.379 412.324 545.316 412.199 545.25 cv
412.074 545.187 411.98 545.129 411.926 545.074 cv
411.867 545.023 411.828 544.953 411.805 544.855 cv
411.777 544.766 411.766 544.637 411.766 544.477 cv
411.766 544.379 411.77 544.297 411.781 544.227 cv
411.789 544.16 411.801 544.105 411.82 544.062 cv
411.832 544.023 411.855 543.992 411.883 543.973 cv
411.91 543.957 411.941 543.949 411.98 543.945 cv
412.035 543.949 412.121 543.984 412.234 544.051 cv
412.344 544.125 412.48 544.203 412.648 544.281 cv
412.809 544.367 413 544.441 413.227 544.512 cv
413.445 544.582 413.703 544.617 414 544.617 cv
414.215 544.617 414.414 544.594 414.594 544.547 cv
414.77 544.5 414.922 544.434 415.051 544.34 cv
415.18 544.254 415.281 544.137 415.352 543.992 cv
415.422 543.855 415.457 543.687 415.457 543.492 cv
415.457 543.297 415.406 543.133 415.305 542.996 cv
415.203 542.863 415.066 542.742 414.902 542.637 cv
414.734 542.535 414.551 542.445 414.344 542.359 cv
414.133 542.281 413.918 542.195 413.699 542.105 cv
413.48 542.02 413.266 541.918 413.055 541.805 cv
412.844 541.695 412.652 541.562 412.488 541.398 cv
412.316 541.242 412.184 541.047 412.086 540.82 cv
411.98 540.598 411.93 540.332 411.934 540.02 cv
411.93 539.746 411.984 539.48 412.094 539.227 cv
412.199 538.977 412.359 538.758 412.574 538.566 cv
412.785 538.379 413.051 538.227 413.371 538.109 cv
413.691 537.996 414.063 537.937 414.492 537.937 cv
414.676 537.937 414.863 537.953 415.051 537.984 cv
415.234 538.016 415.402 538.055 415.559 538.102 cv
415.707 538.148 415.836 538.199 415.945 538.254 cv
416.047 538.309 416.129 538.359 416.188 538.398 cv
416.238 538.445 416.273 538.48 416.297 538.508 cv
416.313 538.539 416.328 538.574 416.336 538.609 cv
416.344 538.652 416.352 538.699 416.359 538.754 cv
416.367 538.812 416.371 538.883 416.371 538.965 cv
416.371 539.055 416.367 539.133 416.359 539.195 cv
416.352 539.266 416.336 539.316 416.32 539.355 cv
416.297 539.398 416.277 539.43 416.254 539.445 cv
416.227 539.465 416.195 539.473 416.168 539.473 cv
416.117 539.473 416.051 539.445 415.965 539.387 cv
415.875 539.332 415.762 539.27 415.621 539.203 cv
415.48 539.141 415.313 539.082 415.125 539.02 cv
414.934 538.965 414.719 538.934 414.477 538.934 cv
414.254 538.934 414.063 538.961 413.898 539.008 cv
413.73 539.062 413.594 539.133 413.488 539.219 cv
413.383 539.312 413.301 539.418 413.25 539.543 cv
413.191 539.668 413.164 539.805 413.168 539.949 cv
413.164 540.152 413.215 540.32 413.32 540.457 cv
413.422 540.598 413.559 540.719 413.727 540.82 cv
413.891 540.926 414.082 541.02 414.297 541.102 cv
414.508 541.187 414.723 541.273 414.945 541.359 cv
415.164 541.449 415.383 541.551 415.602 541.656 cv
415.816 541.766 416.008 541.895 416.176 542.051 cv
416.34 542.207 416.473 542.395 416.574 542.613 cv
416.672 542.832 416.723 543.094 416.727 543.391 cv
cp
f
235.527 11.711 mo
235.523 12.551 235.422 13.301 235.215 13.957 cv
235.008 14.621 234.699 15.18 234.289 15.637 cv
233.879 16.098 233.371 16.449 232.766 16.687 cv
232.16 16.93 231.461 17.047 230.668 17.051 cv
229.879 17.047 229.191 16.945 228.609 16.742 cv
228.023 16.539 227.535 16.227 227.148 15.805 cv
226.758 15.383 226.469 14.848 226.273 14.199 cv
226.078 13.551 225.98 12.781 225.984 11.891 cv
225.98 11.078 226.082 10.348 226.293 9.69098 cv
226.496 9.04303 226.805 8.48798 227.219 8.02698 cv
227.625 7.57397 228.133 7.22302 228.742 6.97699 cv
229.344 6.73401 230.047 6.61298 230.852 6.60901 cv
231.613 6.61298 232.289 6.71503 232.875 6.914 cv
233.457 7.117 233.945 7.42603 234.34 7.84802 cv
234.73 8.27002 235.027 8.80103 235.227 9.44098 cv
235.426 10.082 235.523 10.84 235.527 11.711 cv
cp
233.379 11.82 mo
233.375 11.293 233.332 10.812 233.254 10.379 cv
233.168 9.94501 233.027 9.57397 232.828 9.26202 cv
232.625 8.953 232.359 8.71503 232.027 8.547 cv
231.695 8.37903 231.281 8.29303 230.785 8.29303 cv
230.277 8.29303 229.855 8.39099 229.52 8.578 cv
229.184 8.77002 228.91 9.02002 228.703 9.336 cv
228.492 9.65601 228.344 10.027 228.262 10.449 cv
228.172 10.871 228.129 11.32 228.133 11.789 cv
228.129 12.344 228.172 12.84 228.258 13.277 cv
228.34 13.719 228.48 14.094 228.68 14.402 cv
228.875 14.715 229.141 14.949 229.473 15.113 cv
229.805 15.277 230.223 15.359 230.73 15.359 cv
231.23 15.359 231.648 15.266 231.988 15.078 cv
232.324 14.891 232.598 14.637 232.809 14.316 cv
233.012 13.996 233.16 13.621 233.25 13.191 cv
233.332 12.762 233.375 12.305 233.379 11.82 cv
cp
f
243.527 9.64801 mo
243.523 9.67603 243.523 9.70697 243.523 9.742 cv
243.52 9.78101 243.516 9.82001 243.508 9.86298 cv
243.5 9.90601 243.488 9.95697 243.477 10.012 cv
243.461 10.07 243.445 10.137 243.426 10.207 cv
241.34 16.496 li
241.313 16.586 241.277 16.66 241.234 16.711 cv
241.188 16.77 241.113 16.812 241.016 16.84 cv
240.91 16.871 240.773 16.887 240.602 16.902 cv
240.426 16.91 240.199 16.918 239.922 16.918 cv
239.645 16.918 239.418 16.91 239.246 16.898 cv
239.07 16.883 238.934 16.863 238.836 16.832 cv
238.734 16.805 238.664 16.762 238.621 16.703 cv
238.574 16.652 238.539 16.582 238.516 16.496 cv
236.43 10.207 li
236.398 10.105 236.371 10.012 236.355 9.92999 cv
236.332 9.84802 236.324 9.789 236.324 9.75 cv
236.32 9.71899 236.316 9.68402 236.32 9.64801 cv
236.316 9.59802 236.332 9.55103 236.363 9.51202 cv
236.391 9.47302 236.441 9.44098 236.516 9.414 cv
236.586 9.39099 236.684 9.37097 236.813 9.35901 cv
236.938 9.35199 237.098 9.34802 237.293 9.34399 cv
237.504 9.34802 237.676 9.35498 237.809 9.36298 cv
237.934 9.37903 238.039 9.39502 238.117 9.41803 cv
238.191 9.44098 238.242 9.47699 238.277 9.52002 cv
238.305 9.56598 238.332 9.62097 238.355 9.67999 cv
239.938 14.781 li
239.984 14.977 li
240.031 14.781 li
241.59 9.67999 li
241.602 9.62097 241.625 9.56598 241.66 9.52002 cv
241.691 9.47699 241.746 9.44098 241.82 9.41803 cv
241.891 9.39502 241.988 9.37903 242.113 9.36298 cv
242.234 9.35498 242.395 9.34802 242.594 9.34399 cv
242.785 9.34802 242.941 9.35199 243.063 9.35901 cv
243.184 9.37097 243.277 9.39099 243.348 9.414 cv
243.414 9.44098 243.461 9.47302 243.488 9.51202 cv
243.512 9.55103 243.523 9.59802 243.527 9.64801 cv
cp
f
251.004 12.93 mo
251 13.168 250.949 13.344 250.844 13.457 cv
250.734 13.574 250.586 13.633 250.406 13.629 cv
246.172 13.629 li
246.168 13.93 246.203 14.199 246.277 14.437 cv
246.344 14.68 246.457 14.883 246.613 15.051 cv
246.766 15.223 246.961 15.352 247.203 15.437 cv
247.441 15.527 247.73 15.57 248.074 15.57 cv
248.414 15.57 248.715 15.547 248.977 15.496 cv
249.234 15.449 249.461 15.395 249.652 15.332 cv
249.84 15.273 249.996 15.219 250.125 15.168 cv
250.246 15.121 250.348 15.098 250.43 15.094 cv
250.473 15.098 250.512 15.105 250.547 15.121 cv
250.574 15.141 250.602 15.172 250.621 15.219 cv
250.641 15.266 250.652 15.332 250.664 15.418 cv
250.668 15.504 250.672 15.613 250.676 15.742 cv
250.672 15.859 250.672 15.957 250.668 16.035 cv
250.66 16.117 250.652 16.184 250.645 16.238 cv
250.633 16.297 250.617 16.348 250.598 16.383 cv
250.578 16.426 250.551 16.461 250.52 16.496 cv
250.484 16.535 250.391 16.586 250.242 16.645 cv
250.086 16.711 249.895 16.773 249.664 16.828 cv
249.426 16.891 249.156 16.937 248.859 16.984 cv
248.555 17.023 248.234 17.047 247.895 17.051 cv
247.273 17.047 246.73 16.973 246.27 16.816 cv
245.801 16.664 245.414 16.426 245.105 16.109 cv
244.789 15.793 244.555 15.395 244.406 14.91 cv
244.25 14.43 244.176 13.863 244.18 13.207 cv
244.176 12.594 244.254 12.035 244.418 11.539 cv
244.574 11.043 244.809 10.625 245.121 10.277 cv
245.426 9.93402 245.801 9.66803 246.238 9.48401 cv
246.676 9.30499 247.168 9.21503 247.723 9.211 cv
248.301 9.21503 248.801 9.30103 249.215 9.46899 cv
249.629 9.64502 249.965 9.883 250.23 10.184 cv
250.492 10.488 250.688 10.848 250.816 11.262 cv
250.938 11.68 251 12.129 251.004 12.617 cv
cp
249.102 12.367 mo
249.113 11.816 249.004 11.383 248.77 11.07 cv
248.535 10.758 248.168 10.602 247.676 10.598 cv
247.426 10.602 247.211 10.648 247.027 10.738 cv
246.84 10.836 246.688 10.961 246.566 11.117 cv
246.441 11.277 246.348 11.465 246.285 11.68 cv
246.219 11.895 246.18 12.125 246.172 12.367 cv
cp
f
257.078 10.301 mo
257.078 10.492 257.07 10.645 257.063 10.762 cv
257.047 10.883 257.031 10.977 257.016 11.043 cv
256.992 11.113 256.965 11.16 256.934 11.184 cv
256.895 11.211 256.852 11.223 256.805 11.223 cv
256.758 11.223 256.711 11.215 256.664 11.195 cv
256.609 11.18 256.551 11.16 256.488 11.137 cv
256.418 11.117 256.348 11.098 256.273 11.078 cv
256.191 11.062 256.105 11.055 256.016 11.051 cv
255.902 11.055 255.793 11.074 255.688 11.117 cv
255.578 11.164 255.465 11.234 255.352 11.324 cv
255.23 11.418 255.109 11.543 254.984 11.695 cv
254.855 11.855 254.719 12.047 254.574 12.273 cv
254.574 16.605 li
254.57 16.66 254.555 16.703 254.527 16.742 cv
254.492 16.781 254.438 16.816 254.367 16.84 cv
254.289 16.867 254.191 16.883 254.066 16.898 cv
253.941 16.91 253.781 16.918 253.594 16.918 cv
253.398 16.918 253.242 16.91 253.117 16.898 cv
252.992 16.883 252.891 16.867 252.816 16.84 cv
252.738 16.816 252.684 16.781 252.656 16.742 cv
252.621 16.703 252.605 16.66 252.609 16.605 cv
252.609 9.65601 li
252.605 9.60901 252.621 9.56201 252.648 9.52002 cv
252.672 9.48401 252.719 9.453 252.789 9.422 cv
252.855 9.39801 252.941 9.37903 253.051 9.36298 cv
253.156 9.35498 253.289 9.34802 253.453 9.34399 cv
253.617 9.34802 253.754 9.35498 253.863 9.36298 cv
253.969 9.37903 254.055 9.39801 254.117 9.422 cv
254.176 9.453 254.219 9.48401 254.246 9.52002 cv
254.27 9.56201 254.281 9.60901 254.285 9.65601 cv
254.285 10.52 li
254.465 10.262 254.637 10.051 254.801 9.87903 cv
254.957 9.71503 255.113 9.578 255.262 9.47699 cv
255.406 9.37903 255.551 9.31201 255.695 9.27002 cv
255.84 9.23401 255.984 9.21503 256.133 9.211 cv
256.199 9.21503 256.273 9.21899 256.352 9.22302 cv
256.43 9.23401 256.508 9.24597 256.594 9.26202 cv
256.672 9.28101 256.746 9.30103 256.813 9.32397 cv
256.871 9.34802 256.918 9.375 256.949 9.39801 cv
256.977 9.42999 256.996 9.45697 257.012 9.48401 cv
257.023 9.52002 257.035 9.56201 257.047 9.61298 cv
257.055 9.672 257.063 9.75403 257.07 9.85901 cv
257.074 9.96899 257.078 10.117 257.078 10.301 cv
cp
f
263.836 16.629 mo
263.832 16.707 263.805 16.762 263.758 16.801 cv
263.703 16.844 263.621 16.871 263.512 16.891 cv
263.395 16.906 263.23 16.918 263.016 16.918 cv
262.777 16.918 262.605 16.906 262.504 16.891 cv
262.395 16.871 262.32 16.844 262.281 16.801 cv
262.234 16.762 262.215 16.707 262.215 16.629 cv
262.215 16.078 li
261.926 16.387 261.598 16.625 261.234 16.793 cv
260.867 16.965 260.461 17.047 260.016 17.051 cv
259.645 17.047 259.305 17 258.996 16.906 cv
258.688 16.812 258.422 16.672 258.195 16.477 cv
257.969 16.289 257.793 16.055 257.668 15.773 cv
257.543 15.496 257.48 15.168 257.484 14.789 cv
257.48 14.391 257.559 14.039 257.719 13.734 cv
257.875 13.437 258.113 13.191 258.43 12.996 cv
258.742 12.805 259.133 12.66 259.602 12.562 cv
260.07 12.473 260.613 12.426 261.23 12.422 cv
261.91 12.422 li
261.91 12 li
261.91 11.785 261.887 11.594 261.844 11.43 cv
261.797 11.27 261.723 11.133 261.625 11.02 cv
261.52 10.914 261.387 10.832 261.219 10.777 cv
261.047 10.727 260.836 10.703 260.594 10.699 cv
260.262 10.703 259.969 10.738 259.715 10.809 cv
259.453 10.883 259.227 10.965 259.031 11.051 cv
258.832 11.145 258.668 11.223 258.539 11.293 cv
258.402 11.367 258.293 11.406 258.215 11.402 cv
258.152 11.406 258.102 11.387 258.063 11.348 cv
258.016 11.312 257.98 11.262 257.953 11.191 cv
257.922 11.129 257.898 11.043 257.887 10.941 cv
257.867 10.844 257.859 10.734 257.863 10.613 cv
257.859 10.453 257.875 10.328 257.902 10.23 cv
257.926 10.141 257.973 10.055 258.051 9.97699 cv
258.121 9.90198 258.25 9.82001 258.434 9.72998 cv
258.613 9.64099 258.824 9.55499 259.07 9.47699 cv
259.313 9.39801 259.582 9.336 259.871 9.28497 cv
260.16 9.23798 260.457 9.21503 260.766 9.211 cv
261.309 9.21503 261.773 9.26599 262.16 9.37097 cv
262.547 9.47998 262.867 9.64502 263.117 9.86298 cv
263.367 10.082 263.547 10.367 263.664 10.715 cv
263.773 11.066 263.832 11.48 263.836 11.953 cv
cp
261.91 13.652 mo
261.16 13.652 li
260.844 13.656 260.574 13.68 260.352 13.723 cv
260.125 13.773 259.941 13.844 259.805 13.934 cv
259.66 14.031 259.559 14.145 259.496 14.273 cv
259.43 14.41 259.395 14.559 259.398 14.727 cv
259.395 15.02 259.488 15.25 259.676 15.414 cv
259.859 15.582 260.117 15.664 260.445 15.664 cv
260.719 15.664 260.969 15.594 261.203 15.453 cv
261.43 15.312 261.668 15.109 261.91 14.836 cv
cp
f
267.758 16.605 mo
267.754 16.66 267.738 16.703 267.711 16.742 cv
267.676 16.781 267.621 16.816 267.551 16.84 cv
267.473 16.867 267.375 16.883 267.25 16.898 cv
267.125 16.91 266.965 16.918 266.777 16.918 cv
266.582 16.918 266.426 16.91 266.301 16.898 cv
266.176 16.883 266.074 16.867 266 16.84 cv
265.922 16.816 265.867 16.781 265.84 16.742 cv
265.805 16.703 265.789 16.66 265.793 16.605 cv
265.793 6.35901 li
265.789 6.30902 265.805 6.26202 265.84 6.21899 cv
265.867 6.17999 265.922 6.14502 266 6.11298 cv
266.074 6.086 266.176 6.06598 266.301 6.047 cv
266.426 6.03497 266.582 6.02698 266.777 6.02301 cv
266.965 6.02698 267.125 6.03497 267.25 6.047 cv
267.375 6.06598 267.473 6.086 267.551 6.11298 cv
267.621 6.14502 267.676 6.17999 267.711 6.21899 cv
267.738 6.26202 267.754 6.30902 267.758 6.35901 cv
cp
f
271.734 16.605 mo
271.73 16.66 271.715 16.703 271.688 16.742 cv
271.652 16.781 271.598 16.816 271.527 16.84 cv
271.449 16.867 271.352 16.883 271.227 16.898 cv
271.102 16.91 270.941 16.918 270.754 16.918 cv
270.559 16.918 270.402 16.91 270.277 16.898 cv
270.152 16.883 270.051 16.867 269.977 16.84 cv
269.898 16.816 269.844 16.781 269.816 16.742 cv
269.781 16.703 269.766 16.66 269.77 16.605 cv
269.77 6.35901 li
269.766 6.30902 269.781 6.26202 269.816 6.21899 cv
269.844 6.17999 269.898 6.14502 269.977 6.11298 cv
270.051 6.086 270.152 6.06598 270.277 6.047 cv
270.402 6.03497 270.559 6.02698 270.754 6.02301 cv
270.941 6.02698 271.102 6.03497 271.227 6.047 cv
271.352 6.06598 271.449 6.086 271.527 6.11298 cv
271.598 6.14502 271.652 6.17999 271.688 6.21899 cv
271.715 6.26202 271.73 6.30902 271.734 6.35901 cv
cp
f
284.898 16.605 mo
284.898 16.668 284.887 16.715 284.867 16.75 cv
284.848 16.793 284.801 16.824 284.723 16.848 cv
284.645 16.871 284.527 16.887 284.379 16.902 cv
284.223 16.91 284.02 16.918 283.762 16.918 cv
283.543 16.918 283.367 16.91 283.238 16.902 cv
283.109 16.887 283.008 16.871 282.934 16.844 cv
282.855 16.816 282.801 16.781 282.773 16.734 cv
282.738 16.695 282.715 16.641 282.695 16.574 cv
281.789 14.324 li
281.68 14.07 281.574 13.844 281.473 13.645 cv
281.363 13.449 281.25 13.285 281.125 13.152 cv
280.996 13.023 280.848 12.922 280.684 12.852 cv
280.516 12.785 280.324 12.754 280.109 12.75 cv
279.469 12.75 li
279.469 16.59 li
279.465 16.645 279.449 16.691 279.418 16.73 cv
279.383 16.773 279.328 16.809 279.25 16.832 cv
279.172 16.859 279.066 16.879 278.938 16.895 cv
278.805 16.91 278.641 16.918 278.441 16.918 cv
278.242 16.918 278.074 16.91 277.945 16.895 cv
277.809 16.879 277.703 16.859 277.629 16.832 cv
277.547 16.809 277.492 16.773 277.465 16.73 cv
277.43 16.691 277.414 16.645 277.418 16.59 cv
277.418 7.43402 li
277.414 7.20697 277.473 7.04303 277.594 6.93701 cv
277.707 6.84003 277.852 6.789 278.027 6.78497 cv
280.637 6.78497 li
280.898 6.789 281.117 6.79303 281.293 6.80103 cv
281.461 6.81201 281.617 6.82397 281.762 6.84003 cv
282.164 6.89801 282.527 7 282.852 7.13702 cv
283.176 7.28101 283.453 7.46503 283.68 7.68701 cv
283.906 7.91803 284.078 8.18402 284.199 8.492 cv
284.316 8.80103 284.375 9.15601 284.379 9.55499 cv
284.375 9.89502 284.332 10.203 284.25 10.477 cv
284.16 10.758 284.035 11.004 283.871 11.223 cv
283.703 11.441 283.496 11.633 283.254 11.789 cv
283.008 11.953 282.73 12.082 282.422 12.18 cv
282.57 12.254 282.715 12.344 282.848 12.445 cv
282.98 12.555 283.102 12.68 283.219 12.824 cv
283.332 12.973 283.445 13.141 283.551 13.328 cv
283.652 13.52 283.754 13.734 283.855 13.973 cv
284.707 15.961 li
284.781 16.16 284.832 16.301 284.859 16.391 cv
284.883 16.484 284.898 16.559 284.898 16.605 cv
cp
282.258 9.76599 mo
282.254 9.43402 282.18 9.15198 282.031 8.922 cv
281.879 8.69501 281.633 8.53497 281.293 8.43701 cv
281.188 8.414 281.07 8.39099 280.938 8.375 cv
280.805 8.35901 280.621 8.35199 280.387 8.35199 cv
279.469 8.35199 li
279.469 11.215 li
280.512 11.215 li
280.801 11.219 281.059 11.184 281.277 11.109 cv
281.496 11.043 281.676 10.941 281.82 10.812 cv
281.965 10.687 282.074 10.535 282.148 10.355 cv
282.219 10.18 282.254 9.98401 282.258 9.76599 cv
cp
f
292.879 16.605 mo
292.875 16.66 292.863 16.703 292.84 16.742 cv
292.813 16.781 292.766 16.816 292.703 16.84 cv
292.637 16.867 292.551 16.883 292.445 16.898 cv
292.34 16.91 292.207 16.918 292.047 16.918 cv
291.871 16.918 291.73 16.91 291.629 16.898 cv
291.52 16.883 291.438 16.867 291.375 16.84 cv
291.313 16.816 291.266 16.781 291.242 16.742 cv
291.211 16.703 291.199 16.66 291.203 16.605 cv
291.203 15.805 li
290.816 16.219 290.426 16.531 290.031 16.738 cv
289.629 16.945 289.219 17.047 288.797 17.051 cv
288.316 17.047 287.914 16.973 287.59 16.816 cv
287.266 16.664 287.004 16.449 286.805 16.18 cv
286.602 15.91 286.457 15.598 286.375 15.238 cv
286.285 14.883 286.242 14.441 286.246 13.91 cv
286.246 9.65601 li
286.242 9.60901 286.258 9.56201 286.289 9.52002 cv
286.316 9.48401 286.367 9.453 286.445 9.422 cv
286.52 9.39801 286.621 9.37903 286.75 9.36298 cv
286.875 9.35498 287.031 9.34802 287.223 9.34399 cv
287.41 9.34802 287.57 9.35498 287.695 9.36298 cv
287.82 9.37903 287.918 9.39801 287.996 9.422 cv
288.066 9.453 288.121 9.48401 288.156 9.52002 cv
288.184 9.56201 288.199 9.60901 288.203 9.65601 cv
288.203 13.582 li
288.199 13.949 288.223 14.227 288.273 14.418 cv
288.316 14.609 288.387 14.773 288.488 14.91 cv
288.582 15.051 288.707 15.156 288.855 15.23 cv
289.004 15.309 289.176 15.348 289.371 15.344 cv
289.621 15.348 289.871 15.258 290.125 15.07 cv
290.375 14.891 290.645 14.625 290.93 14.277 cv
290.93 9.65601 li
290.93 9.60901 290.941 9.56201 290.973 9.52002 cv
290.996 9.48401 291.051 9.453 291.129 9.422 cv
291.203 9.39801 291.301 9.37903 291.43 9.36298 cv
291.551 9.35498 291.711 9.34802 291.906 9.34399 cv
292.098 9.34802 292.254 9.35498 292.379 9.36298 cv
292.5 9.37903 292.602 9.39801 292.676 9.422 cv
292.746 9.453 292.797 9.48401 292.832 9.52002 cv
292.859 9.56201 292.875 9.60901 292.879 9.65601 cv
cp
f
301.496 16.605 mo
301.492 16.66 301.477 16.703 301.449 16.742 cv
301.414 16.781 301.363 16.816 301.293 16.84 cv
301.219 16.867 301.117 16.883 300.992 16.898 cv
300.863 16.91 300.707 16.918 300.523 16.918 cv
300.328 16.918 300.168 16.91 300.043 16.898 cv
299.914 16.883 299.813 16.867 299.742 16.84 cv
299.664 16.816 299.613 16.781 299.586 16.742 cv
299.551 16.703 299.535 16.66 299.539 16.605 cv
299.539 12.641 li
299.535 12.305 299.512 12.039 299.465 11.844 cv
299.414 11.652 299.34 11.488 299.25 11.352 cv
299.156 11.215 299.039 11.109 298.891 11.031 cv
298.742 10.957 298.566 10.918 298.371 10.918 cv
298.117 10.918 297.867 11.012 297.613 11.191 cv
297.359 11.375 297.094 11.637 296.82 11.984 cv
296.82 16.605 li
296.816 16.66 296.801 16.703 296.773 16.742 cv
296.738 16.781 296.684 16.816 296.613 16.84 cv
296.535 16.867 296.438 16.883 296.313 16.898 cv
296.188 16.91 296.027 16.918 295.84 16.918 cv
295.645 16.918 295.488 16.91 295.363 16.898 cv
295.238 16.883 295.137 16.867 295.063 16.84 cv
294.984 16.816 294.93 16.781 294.902 16.742 cv
294.867 16.703 294.852 16.66 294.855 16.605 cv
294.855 9.65601 li
294.852 9.60901 294.867 9.56201 294.895 9.52002 cv
294.918 9.48401 294.965 9.453 295.035 9.422 cv
295.102 9.39801 295.188 9.37903 295.297 9.36298 cv
295.402 9.35498 295.535 9.34802 295.699 9.34399 cv
295.863 9.34802 296 9.35498 296.109 9.36298 cv
296.215 9.37903 296.301 9.39801 296.363 9.422 cv
296.422 9.453 296.465 9.48401 296.492 9.52002 cv
296.516 9.56201 296.527 9.60901 296.531 9.65601 cv
296.531 10.457 li
296.914 10.047 297.305 9.73401 297.703 9.52301 cv
298.098 9.31598 298.516 9.21503 298.949 9.211 cv
299.418 9.21503 299.816 9.29303 300.145 9.44501 cv
300.469 9.60498 300.73 9.81598 300.93 10.082 cv
301.129 10.352 301.273 10.664 301.363 11.02 cv
301.449 11.379 301.492 11.809 301.496 12.312 cv
cp
f
307.367 15.922 mo
307.367 16.148 307.352 16.324 307.324 16.445 cv
307.293 16.57 307.254 16.656 307.211 16.703 cv
307.16 16.754 307.094 16.797 307.004 16.836 cv
306.91 16.875 306.801 16.906 306.684 16.937 cv
306.559 16.961 306.426 16.984 306.285 17.004 cv
306.141 17.016 306 17.023 305.855 17.027 cv
305.465 17.023 305.125 16.973 304.84 16.879 cv
304.555 16.777 304.32 16.629 304.133 16.422 cv
303.945 16.219 303.805 15.961 303.719 15.648 cv
303.625 15.34 303.582 14.969 303.586 14.539 cv
303.586 10.98 li
302.754 10.98 li
302.652 10.984 302.578 10.922 302.527 10.797 cv
302.473 10.676 302.445 10.473 302.449 10.184 cv
302.445 10.035 302.453 9.90601 302.469 9.80499 cv
302.48 9.703 302.5 9.62097 302.527 9.55902 cv
302.551 9.5 302.582 9.45697 302.625 9.42999 cv
302.66 9.40601 302.707 9.39502 302.762 9.39099 cv
303.586 9.39099 li
303.586 7.84003 li
303.582 7.79303 303.598 7.74597 303.629 7.69897 cv
303.656 7.65997 303.707 7.625 303.785 7.59399 cv
303.859 7.57001 303.961 7.547 304.09 7.53101 cv
304.215 7.52002 304.371 7.51599 304.563 7.51202 cv
304.75 7.51599 304.91 7.52002 305.039 7.53101 cv
305.164 7.547 305.266 7.57001 305.34 7.59399 cv
305.41 7.625 305.461 7.65997 305.496 7.69897 cv
305.523 7.74597 305.539 7.79303 305.543 7.84003 cv
305.543 9.39099 li
307.055 9.39099 li
307.105 9.39502 307.152 9.40601 307.191 9.42999 cv
307.23 9.45697 307.262 9.5 307.289 9.55902 cv
307.313 9.62097 307.332 9.703 307.348 9.80499 cv
307.359 9.90601 307.367 10.035 307.367 10.184 cv
307.367 10.473 307.34 10.676 307.289 10.797 cv
307.234 10.922 307.16 10.984 307.063 10.98 cv
305.543 10.98 li
305.543 14.246 li
305.539 14.625 305.598 14.91 305.723 15.098 cv
305.84 15.289 306.055 15.383 306.359 15.383 cv
306.461 15.383 306.555 15.375 306.641 15.355 cv
306.723 15.34 306.797 15.32 306.863 15.293 cv
306.926 15.273 306.98 15.25 307.027 15.23 cv
307.07 15.215 307.109 15.207 307.148 15.203 cv
307.176 15.207 307.207 15.215 307.238 15.23 cv
307.266 15.25 307.285 15.289 307.305 15.34 cv
307.316 15.398 307.332 15.473 307.348 15.562 cv
307.359 15.66 307.367 15.777 307.367 15.922 cv
cp
f
310.754 16.605 mo
310.75 16.66 310.734 16.703 310.707 16.742 cv
310.672 16.781 310.617 16.816 310.547 16.84 cv
310.469 16.867 310.371 16.883 310.246 16.898 cv
310.121 16.91 309.961 16.918 309.773 16.918 cv
309.578 16.918 309.422 16.91 309.297 16.898 cv
309.172 16.883 309.07 16.867 308.996 16.84 cv
308.918 16.816 308.863 16.781 308.836 16.742 cv
308.801 16.703 308.785 16.66 308.789 16.605 cv
308.789 9.672 li
308.785 9.62097 308.801 9.57397 308.836 9.53497 cv
308.863 9.49597 308.918 9.46503 308.996 9.43402 cv
309.07 9.40997 309.172 9.38702 309.297 9.367 cv
309.422 9.35498 309.578 9.34802 309.773 9.34399 cv
309.961 9.34802 310.121 9.35498 310.246 9.367 cv
310.371 9.38702 310.469 9.40997 310.547 9.43402 cv
310.617 9.46503 310.672 9.49597 310.707 9.53497 cv
310.734 9.57397 310.75 9.62097 310.754 9.672 cv
cp
310.902 7.30103 mo
310.902 7.69897 310.82 7.97302 310.66 8.12097 cv
310.496 8.27301 310.199 8.34802 309.766 8.34399 cv
309.32 8.34802 309.02 8.27301 308.871 8.12903 cv
308.715 7.98401 308.641 7.72302 308.641 7.34003 cv
308.641 6.94501 308.719 6.672 308.879 6.52002 cv
309.035 6.367 309.336 6.289 309.781 6.289 cv
310.215 6.289 310.512 6.36298 310.668 6.51202 cv
310.824 6.65997 310.902 6.92603 310.902 7.30103 cv
cp
f
323.773 16.605 mo
323.77 16.66 323.754 16.703 323.727 16.742 cv
323.691 16.781 323.641 16.816 323.57 16.84 cv
323.496 16.867 323.395 16.883 323.273 16.898 cv
323.148 16.91 322.992 16.918 322.801 16.918 cv
322.602 16.918 322.441 16.91 322.316 16.898 cv
322.191 16.883 322.09 16.867 322.016 16.84 cv
321.938 16.816 321.887 16.781 321.859 16.742 cv
321.832 16.703 321.816 16.66 321.82 16.605 cv
321.82 12.484 li
321.816 12.254 321.797 12.039 321.754 11.844 cv
321.707 11.652 321.637 11.488 321.551 11.352 cv
321.457 11.215 321.344 11.109 321.207 11.031 cv
321.066 10.957 320.902 10.918 320.711 10.918 cv
320.477 10.918 320.238 11.012 320 11.191 cv
319.762 11.375 319.504 11.637 319.223 11.984 cv
319.223 16.605 li
319.223 16.66 319.207 16.703 319.176 16.742 cv
319.145 16.781 319.09 16.816 319.016 16.84 cv
318.938 16.867 318.836 16.883 318.715 16.898 cv
318.59 16.91 318.438 16.918 318.25 16.918 cv
318.055 16.918 317.895 16.91 317.773 16.898 cv
317.645 16.883 317.543 16.867 317.473 16.84 cv
317.395 16.816 317.344 16.781 317.313 16.742 cv
317.281 16.703 317.266 16.66 317.266 16.605 cv
317.266 12.484 li
317.266 12.254 317.242 12.039 317.199 11.844 cv
317.156 11.652 317.09 11.488 317.004 11.352 cv
316.91 11.215 316.797 11.109 316.66 11.031 cv
316.516 10.957 316.352 10.918 316.168 10.918 cv
315.926 10.918 315.688 11.012 315.449 11.191 cv
315.211 11.375 314.953 11.637 314.68 11.984 cv
314.68 16.605 li
314.676 16.66 314.66 16.703 314.633 16.742 cv
314.598 16.781 314.543 16.816 314.473 16.84 cv
314.395 16.867 314.297 16.883 314.172 16.898 cv
314.047 16.91 313.887 16.918 313.699 16.918 cv
313.504 16.918 313.348 16.91 313.223 16.898 cv
313.098 16.883 312.996 16.867 312.922 16.84 cv
312.844 16.816 312.789 16.781 312.762 16.742 cv
312.727 16.703 312.711 16.66 312.715 16.605 cv
312.715 9.65601 li
312.711 9.60901 312.727 9.56201 312.754 9.52002 cv
312.777 9.48401 312.824 9.453 312.895 9.422 cv
312.961 9.39801 313.047 9.37903 313.156 9.36298 cv
313.262 9.35498 313.395 9.34802 313.559 9.34399 cv
313.723 9.34802 313.859 9.35498 313.969 9.36298 cv
314.074 9.37903 314.16 9.39801 314.223 9.422 cv
314.281 9.453 314.324 9.48401 314.352 9.52002 cv
314.375 9.56201 314.387 9.60901 314.391 9.65601 cv
314.391 10.457 li
314.773 10.047 315.156 9.73401 315.539 9.52301 cv
315.918 9.31598 316.32 9.21503 316.738 9.211 cv
317.023 9.21503 317.277 9.242 317.508 9.30103 cv
317.734 9.36298 317.941 9.44897 318.121 9.55902 cv
318.301 9.672 318.453 9.80902 318.582 9.961 cv
318.711 10.117 318.82 10.289 318.91 10.48 cv
319.117 10.258 319.32 10.066 319.523 9.90601 cv
319.719 9.74597 319.918 9.61298 320.113 9.51202 cv
320.309 9.40997 320.504 9.336 320.699 9.28497 cv
320.895 9.23798 321.094 9.21503 321.297 9.211 cv
321.758 9.21503 322.145 9.29303 322.465 9.44501 cv
322.777 9.60498 323.035 9.81598 323.23 10.082 cv
323.426 10.352 323.563 10.664 323.648 11.02 cv
323.727 11.379 323.77 11.758 323.773 12.156 cv
cp
f
332.113 12.93 mo
332.109 13.168 332.059 13.344 331.953 13.457 cv
331.844 13.574 331.695 13.633 331.516 13.629 cv
327.281 13.629 li
327.277 13.93 327.313 14.199 327.387 14.437 cv
327.453 14.68 327.566 14.883 327.723 15.051 cv
327.875 15.223 328.07 15.352 328.313 15.437 cv
328.551 15.527 328.84 15.57 329.184 15.57 cv
329.523 15.57 329.824 15.547 330.086 15.496 cv
330.344 15.449 330.57 15.395 330.762 15.332 cv
330.949 15.273 331.105 15.219 331.234 15.168 cv
331.355 15.121 331.457 15.098 331.539 15.094 cv
331.582 15.098 331.621 15.105 331.656 15.121 cv
331.684 15.141 331.711 15.172 331.73 15.219 cv
331.75 15.266 331.762 15.332 331.773 15.418 cv
331.777 15.504 331.781 15.613 331.785 15.742 cv
331.781 15.859 331.781 15.957 331.777 16.035 cv
331.77 16.117 331.762 16.184 331.754 16.238 cv
331.742 16.297 331.727 16.348 331.707 16.383 cv
331.688 16.426 331.66 16.461 331.629 16.496 cv
331.594 16.535 331.5 16.586 331.352 16.645 cv
331.195 16.711 331.004 16.773 330.773 16.828 cv
330.535 16.891 330.266 16.937 329.969 16.984 cv
329.664 17.023 329.344 17.047 329.004 17.051 cv
328.383 17.047 327.84 16.973 327.379 16.816 cv
326.91 16.664 326.523 16.426 326.215 16.109 cv
325.898 15.793 325.664 15.395 325.516 14.91 cv
325.359 14.43 325.285 13.863 325.289 13.207 cv
325.285 12.594 325.363 12.035 325.527 11.539 cv
325.684 11.043 325.918 10.625 326.23 10.277 cv
326.535 9.93402 326.91 9.66803 327.348 9.48401 cv
327.785 9.30499 328.277 9.21503 328.832 9.211 cv
329.41 9.21503 329.91 9.30103 330.324 9.46899 cv
330.738 9.64502 331.074 9.883 331.34 10.184 cv
331.602 10.488 331.797 10.848 331.926 11.262 cv
332.047 11.68 332.109 12.129 332.113 12.617 cv
cp
330.211 12.367 mo
330.223 11.816 330.113 11.383 329.879 11.07 cv
329.645 10.758 329.277 10.602 328.785 10.598 cv
328.535 10.602 328.32 10.648 328.137 10.738 cv
327.949 10.836 327.797 10.961 327.676 11.117 cv
327.551 11.277 327.457 11.465 327.395 11.68 cv
327.328 11.895 327.289 12.125 327.281 12.367 cv
cp
f
338.613 14.641 mo
338.609 15.039 338.535 15.387 338.391 15.687 cv
338.242 15.988 338.035 16.242 337.766 16.441 cv
337.492 16.648 337.172 16.797 336.805 16.898 cv
336.438 16.996 336.035 17.047 335.605 17.051 cv
335.34 17.047 335.094 17.027 334.859 16.992 cv
334.625 16.949 334.414 16.902 334.227 16.844 cv
334.039 16.785 333.883 16.723 333.758 16.66 cv
333.633 16.598 333.539 16.539 333.484 16.484 cv
333.426 16.43 333.383 16.348 333.355 16.23 cv
333.32 16.117 333.305 15.941 333.309 15.711 cv
333.305 15.562 333.313 15.441 333.324 15.348 cv
333.332 15.258 333.348 15.187 333.371 15.129 cv
333.391 15.078 333.414 15.039 333.449 15.02 cv
333.477 15.004 333.516 14.996 333.563 14.992 cv
333.617 14.996 333.703 15.027 333.816 15.09 cv
333.926 15.156 334.063 15.23 334.234 15.305 cv
334.398 15.387 334.594 15.457 334.813 15.523 cv
335.031 15.594 335.281 15.629 335.566 15.625 cv
335.742 15.629 335.898 15.609 336.039 15.57 cv
336.172 15.535 336.293 15.484 336.398 15.414 cv
336.496 15.348 336.57 15.262 336.625 15.156 cv
336.672 15.055 336.699 14.934 336.703 14.797 cv
336.699 14.641 336.652 14.508 336.559 14.398 cv
336.465 14.289 336.336 14.191 336.18 14.105 cv
336.016 14.023 335.836 13.945 335.641 13.871 cv
335.438 13.801 335.234 13.723 335.023 13.629 cv
334.813 13.543 334.605 13.441 334.41 13.324 cv
334.207 13.215 334.027 13.074 333.871 12.906 cv
333.707 12.742 333.582 12.543 333.488 12.305 cv
333.395 12.074 333.348 11.793 333.348 11.461 cv
333.348 11.133 333.41 10.828 333.539 10.547 cv
333.668 10.273 333.855 10.035 334.102 9.836 cv
334.344 9.64099 334.641 9.48798 334.992 9.375 cv
335.34 9.27002 335.734 9.21503 336.176 9.211 cv
336.391 9.21503 336.602 9.22998 336.809 9.258 cv
337.012 9.29303 337.199 9.33197 337.367 9.375 cv
337.531 9.42603 337.672 9.47699 337.789 9.52698 cv
337.902 9.586 337.984 9.633 338.035 9.66803 cv
338.082 9.711 338.117 9.75 338.141 9.78497 cv
338.16 9.828 338.172 9.875 338.184 9.92603 cv
338.191 9.97998 338.203 10.047 338.211 10.125 cv
338.219 10.211 338.223 10.309 338.223 10.426 cv
338.223 10.566 338.219 10.684 338.211 10.77 cv
338.203 10.863 338.188 10.934 338.172 10.98 cv
338.152 11.035 338.129 11.07 338.102 11.086 cv
338.066 11.109 338.031 11.117 337.992 11.113 cv
337.941 11.117 337.867 11.09 337.773 11.031 cv
337.672 10.98 337.551 10.922 337.402 10.855 cv
337.254 10.797 337.082 10.738 336.887 10.68 cv
336.691 10.629 336.469 10.602 336.223 10.598 cv
336.043 10.602 335.891 10.621 335.762 10.652 cv
335.629 10.691 335.52 10.742 335.441 10.809 cv
335.355 10.879 335.293 10.957 335.254 11.047 cv
335.207 11.141 335.188 11.238 335.191 11.34 cv
335.188 11.5 335.238 11.637 335.34 11.742 cv
335.438 11.855 335.566 11.949 335.73 12.031 cv
335.891 12.117 336.074 12.195 336.281 12.266 cv
336.484 12.34 336.691 12.422 336.902 12.504 cv
337.109 12.594 337.316 12.691 337.527 12.805 cv
337.73 12.918 337.914 13.059 338.074 13.223 cv
338.234 13.391 338.363 13.59 338.465 13.82 cv
338.559 14.055 338.609 14.328 338.613 14.641 cv
cp
f
347.406 12.953 mo
347.402 13.254 347.375 13.465 347.32 13.582 cv
347.262 13.707 347.172 13.766 347.047 13.762 cv
343.805 13.762 li
343.676 13.766 343.582 13.703 343.527 13.578 cv
343.465 13.457 343.438 13.25 343.441 12.953 cv
343.438 12.664 343.465 12.457 343.527 12.336 cv
343.582 12.219 343.676 12.16 343.805 12.156 cv
347.047 12.156 li
347.109 12.16 347.16 12.172 347.207 12.195 cv
347.246 12.223 347.285 12.27 347.32 12.328 cv
347.348 12.395 347.371 12.477 347.387 12.578 cv
347.398 12.684 347.402 12.809 347.406 12.953 cv
cp
f
358.141 16.016 mo
358.137 16.172 358.133 16.305 358.121 16.406 cv
358.105 16.516 358.086 16.602 358.063 16.672 cv
358.035 16.742 358 16.793 357.965 16.824 cv
357.922 16.855 357.879 16.871 357.828 16.871 cv
353.207 16.871 li
353.031 16.871 352.887 16.82 352.773 16.719 cv
352.652 16.617 352.594 16.453 352.598 16.223 cv
352.598 7.06598 li
352.594 7.02002 352.613 6.97302 352.648 6.92603 cv
352.68 6.88702 352.734 6.85199 352.816 6.82397 cv
352.891 6.80103 352.996 6.78101 353.133 6.76202 cv
353.262 6.75 353.426 6.742 353.629 6.73798 cv
353.824 6.742 353.992 6.75 354.125 6.76202 cv
354.254 6.78101 354.355 6.80103 354.438 6.82397 cv
354.512 6.85199 354.57 6.88702 354.605 6.92603 cv
354.637 6.97302 354.652 7.02002 354.656 7.06598 cv
354.656 15.18 li
357.828 15.18 li
357.879 15.184 357.922 15.199 357.965 15.223 cv
358 15.254 358.035 15.301 358.063 15.363 cv
358.086 15.434 358.105 15.52 358.121 15.621 cv
358.133 15.73 358.137 15.859 358.141 16.016 cv
cp
f
366.262 13.059 mo
366.258 13.656 366.18 14.199 366.027 14.684 cv
365.867 15.176 365.633 15.594 365.316 15.945 cv
365 16.297 364.602 16.57 364.125 16.762 cv
363.645 16.953 363.086 17.047 362.449 17.051 cv
361.828 17.047 361.289 16.965 360.836 16.793 cv
360.375 16.625 359.996 16.375 359.699 16.047 cv
359.395 15.723 359.172 15.32 359.027 14.84 cv
358.883 14.363 358.813 13.816 358.813 13.199 cv
358.813 12.609 358.891 12.07 359.047 11.578 cv
359.203 11.09 359.441 10.668 359.762 10.316 cv
360.078 9.96899 360.473 9.69501 360.949 9.5 cv
361.422 9.30902 361.98 9.21503 362.621 9.211 cv
363.246 9.21503 363.785 9.297 364.242 9.46503 cv
364.699 9.63702 365.078 9.88702 365.375 10.211 cv
365.672 10.539 365.895 10.941 366.043 11.418 cv
366.188 11.898 366.258 12.445 366.262 13.059 cv
cp
364.242 13.137 mo
364.238 12.801 364.211 12.484 364.16 12.191 cv
364.102 11.906 364.008 11.656 363.883 11.441 cv
363.75 11.23 363.578 11.062 363.367 10.941 cv
363.148 10.824 362.879 10.766 362.551 10.762 cv
362.262 10.766 362.008 10.82 361.789 10.922 cv
361.57 11.031 361.391 11.187 361.25 11.391 cv
361.109 11.598 361.004 11.844 360.934 12.129 cv
360.863 12.422 360.828 12.75 360.828 13.113 cv
360.828 13.461 360.855 13.777 360.914 14.062 cv
360.969 14.355 361.063 14.605 361.191 14.816 cv
361.316 15.031 361.488 15.195 361.711 15.309 cv
361.926 15.43 362.195 15.488 362.52 15.484 cv
362.813 15.488 363.07 15.434 363.293 15.324 cv
363.508 15.219 363.688 15.066 363.828 14.859 cv
363.969 14.66 364.07 14.414 364.141 14.125 cv
364.203 13.84 364.238 13.512 364.242 13.137 cv
cp
f
373.078 15.5 mo
373.074 15.637 373.07 15.75 373.066 15.84 cv
373.055 15.934 373.047 16.012 373.035 16.07 cv
373.02 16.133 373.004 16.184 372.988 16.219 cv
372.969 16.262 372.926 16.309 372.867 16.367 cv
372.801 16.43 372.695 16.504 372.547 16.586 cv
372.395 16.676 372.223 16.754 372.031 16.816 cv
371.84 16.887 371.633 16.937 371.406 16.98 cv
371.18 17.02 370.945 17.039 370.711 17.043 cv
370.172 17.039 369.699 16.961 369.285 16.793 cv
368.871 16.629 368.523 16.383 368.246 16.059 cv
367.961 15.734 367.75 15.34 367.609 14.871 cv
367.469 14.406 367.398 13.867 367.398 13.262 cv
367.398 12.566 367.484 11.969 367.656 11.461 cv
367.828 10.957 368.07 10.535 368.387 10.203 cv
368.695 9.87097 369.063 9.625 369.492 9.461 cv
369.914 9.30103 370.383 9.21899 370.895 9.21899 cv
371.102 9.21899 371.305 9.23798 371.508 9.27301 cv
371.703 9.31201 371.891 9.36298 372.066 9.422 cv
372.238 9.48798 372.395 9.55902 372.535 9.633 cv
372.672 9.71503 372.77 9.78101 372.828 9.836 cv
372.883 9.89502 372.922 9.94098 372.949 9.97699 cv
372.969 10.02 372.988 10.07 373.004 10.129 cv
373.016 10.195 373.027 10.273 373.035 10.359 cv
373.043 10.453 373.047 10.562 373.047 10.691 cv
373.047 10.996 373.02 11.207 372.969 11.328 cv
372.914 11.449 372.848 11.512 372.766 11.508 cv
372.676 11.512 372.582 11.477 372.484 11.402 cv
372.383 11.332 372.266 11.25 372.133 11.16 cv
372 11.074 371.84 10.992 371.652 10.918 cv
371.465 10.848 371.238 10.812 370.98 10.809 cv
370.469 10.812 370.082 11.008 369.813 11.398 cv
369.539 11.789 369.402 12.363 369.406 13.121 cv
369.402 13.496 369.438 13.828 369.508 14.113 cv
369.574 14.398 369.672 14.637 369.809 14.828 cv
369.938 15.023 370.105 15.168 370.309 15.262 cv
370.508 15.359 370.738 15.406 371.004 15.406 cv
371.27 15.406 371.504 15.367 371.703 15.285 cv
371.895 15.207 372.063 15.117 372.211 15.016 cv
372.352 14.918 372.477 14.828 372.578 14.746 cv
372.676 14.668 372.758 14.629 372.828 14.625 cv
372.871 14.629 372.91 14.641 372.945 14.664 cv
372.973 14.691 372.996 14.738 373.02 14.809 cv
373.035 14.879 373.051 14.969 373.063 15.078 cv
373.07 15.187 373.074 15.328 373.078 15.5 cv
cp
f
380.367 16.629 mo
380.363 16.707 380.336 16.762 380.289 16.801 cv
380.234 16.844 380.152 16.871 380.043 16.891 cv
379.926 16.906 379.762 16.918 379.547 16.918 cv
379.309 16.918 379.137 16.906 379.035 16.891 cv
378.926 16.871 378.852 16.844 378.813 16.801 cv
378.766 16.762 378.746 16.707 378.746 16.629 cv
378.746 16.078 li
378.457 16.387 378.129 16.625 377.766 16.793 cv
377.398 16.965 376.992 17.047 376.547 17.051 cv
376.176 17.047 375.836 17 375.527 16.906 cv
375.219 16.812 374.953 16.672 374.727 16.477 cv
374.5 16.289 374.324 16.055 374.199 15.773 cv
374.074 15.496 374.012 15.168 374.016 14.789 cv
374.012 14.391 374.09 14.039 374.25 13.734 cv
374.406 13.437 374.645 13.191 374.961 12.996 cv
375.273 12.805 375.664 12.66 376.133 12.562 cv
376.602 12.473 377.145 12.426 377.762 12.422 cv
378.441 12.422 li
378.441 12 li
378.441 11.785 378.418 11.594 378.375 11.43 cv
378.328 11.27 378.254 11.133 378.156 11.02 cv
378.051 10.914 377.918 10.832 377.75 10.777 cv
377.578 10.727 377.367 10.703 377.125 10.699 cv
376.793 10.703 376.5 10.738 376.246 10.809 cv
375.984 10.883 375.758 10.965 375.563 11.051 cv
375.363 11.145 375.199 11.223 375.07 11.293 cv
374.934 11.367 374.824 11.406 374.746 11.402 cv
374.684 11.406 374.633 11.387 374.594 11.348 cv
374.547 11.312 374.512 11.262 374.484 11.191 cv
374.453 11.129 374.43 11.043 374.418 10.941 cv
374.398 10.844 374.391 10.734 374.395 10.613 cv
374.391 10.453 374.406 10.328 374.434 10.23 cv
374.457 10.141 374.504 10.055 374.582 9.97699 cv
374.652 9.90198 374.781 9.82001 374.965 9.72998 cv
375.145 9.64099 375.355 9.55499 375.602 9.47699 cv
375.844 9.39801 376.113 9.336 376.402 9.28497 cv
376.691 9.23798 376.988 9.21503 377.297 9.211 cv
377.84 9.21503 378.305 9.26599 378.691 9.37097 cv
379.078 9.47998 379.398 9.64502 379.648 9.86298 cv
379.898 10.082 380.078 10.367 380.195 10.715 cv
380.305 11.066 380.363 11.48 380.367 11.953 cv
cp
378.441 13.652 mo
377.691 13.652 li
377.375 13.656 377.105 13.68 376.883 13.723 cv
376.656 13.773 376.473 13.844 376.336 13.934 cv
376.191 14.031 376.09 14.145 376.027 14.273 cv
375.961 14.41 375.926 14.559 375.93 14.727 cv
375.926 15.02 376.02 15.25 376.207 15.414 cv
376.391 15.582 376.648 15.664 376.977 15.664 cv
377.25 15.664 377.5 15.594 377.734 15.453 cv
377.961 15.312 378.199 15.109 378.441 14.836 cv
cp
f
384.289 16.605 mo
384.285 16.66 384.27 16.703 384.242 16.742 cv
384.207 16.781 384.152 16.816 384.082 16.84 cv
384.004 16.867 383.906 16.883 383.781 16.898 cv
383.656 16.91 383.496 16.918 383.309 16.918 cv
383.113 16.918 382.957 16.91 382.832 16.898 cv
382.707 16.883 382.605 16.867 382.531 16.84 cv
382.453 16.816 382.398 16.781 382.371 16.742 cv
382.336 16.703 382.32 16.66 382.324 16.605 cv
382.324 6.35901 li
382.32 6.30902 382.336 6.26202 382.371 6.21899 cv
382.398 6.17999 382.453 6.14502 382.531 6.11298 cv
382.605 6.086 382.707 6.06598 382.832 6.047 cv
382.957 6.03497 383.113 6.02698 383.309 6.02301 cv
383.496 6.02698 383.656 6.03497 383.781 6.047 cv
383.906 6.06598 384.004 6.086 384.082 6.11298 cv
384.152 6.14502 384.207 6.17999 384.242 6.21899 cv
384.27 6.26202 384.285 6.30902 384.289 6.35901 cv
cp
f
401.777 16.59 mo
401.773 16.645 401.762 16.691 401.734 16.73 cv
401.703 16.773 401.648 16.809 401.578 16.832 cv
401.5 16.859 401.402 16.879 401.277 16.895 cv
401.152 16.91 400.992 16.918 400.801 16.918 cv
400.613 16.918 400.457 16.91 400.336 16.895 cv
400.207 16.879 400.109 16.859 400.039 16.832 cv
399.965 16.809 399.914 16.773 399.883 16.73 cv
399.852 16.691 399.836 16.645 399.836 16.59 cv
399.836 8.383 li
399.82 8.383 li
396.898 16.582 li
396.875 16.652 396.84 16.707 396.797 16.75 cv
396.746 16.797 396.684 16.832 396.605 16.855 cv
396.523 16.883 396.422 16.898 396.297 16.906 cv
396.172 16.914 396.02 16.918 395.848 16.918 cv
395.668 16.918 395.52 16.91 395.395 16.898 cv
395.27 16.883 395.164 16.863 395.086 16.836 cv
395 16.809 394.938 16.773 394.895 16.73 cv
394.844 16.691 394.813 16.645 394.801 16.582 cv
391.98 8.383 li
391.965 8.383 li
391.965 16.59 li
391.961 16.645 391.945 16.691 391.922 16.73 cv
391.891 16.773 391.84 16.809 391.762 16.832 cv
391.684 16.859 391.582 16.879 391.461 16.895 cv
391.336 16.91 391.18 16.918 390.992 16.918 cv
390.801 16.918 390.645 16.91 390.523 16.895 cv
390.395 16.879 390.293 16.859 390.223 16.832 cv
390.145 16.809 390.094 16.773 390.066 16.73 cv
390.035 16.691 390.02 16.645 390.023 16.59 cv
390.023 7.60498 li
390.02 7.34399 390.09 7.14099 390.234 6.99597 cv
390.371 6.85901 390.559 6.789 390.797 6.78497 cv
392.137 6.78497 li
392.375 6.789 392.578 6.80902 392.75 6.84399 cv
392.918 6.88702 393.066 6.94897 393.195 7.039 cv
393.316 7.133 393.422 7.25403 393.508 7.39801 cv
393.59 7.55103 393.66 7.73401 393.727 7.94897 cv
395.91 13.957 li
395.941 13.957 li
398.199 7.96503 li
398.266 7.74597 398.34 7.56201 398.422 7.40997 cv
398.5 7.26202 398.594 7.14099 398.703 7.04303 cv
398.809 6.953 398.934 6.88702 399.078 6.84399 cv
399.223 6.80902 399.391 6.789 399.586 6.78497 cv
400.965 6.78497 li
401.102 6.789 401.223 6.80499 401.328 6.84003 cv
401.426 6.87903 401.508 6.93402 401.578 7 cv
401.641 7.07397 401.691 7.15997 401.727 7.258 cv
401.758 7.36298 401.773 7.47998 401.777 7.60498 cv
cp
f
410.887 13.059 mo
410.883 13.656 410.805 14.199 410.652 14.684 cv
410.492 15.176 410.258 15.594 409.941 15.945 cv
409.625 16.297 409.227 16.57 408.75 16.762 cv
408.27 16.953 407.711 17.047 407.074 17.051 cv
406.453 17.047 405.914 16.965 405.461 16.793 cv
405 16.625 404.621 16.375 404.324 16.047 cv
404.02 15.723 403.797 15.32 403.652 14.84 cv
403.508 14.363 403.438 13.816 403.438 13.199 cv
403.438 12.609 403.516 12.07 403.672 11.578 cv
403.828 11.09 404.066 10.668 404.387 10.316 cv
404.703 9.96899 405.098 9.69501 405.574 9.5 cv
406.047 9.30902 406.605 9.21503 407.246 9.211 cv
407.871 9.21503 408.41 9.297 408.867 9.46503 cv
409.324 9.63702 409.703 9.88702 410 10.211 cv
410.297 10.539 410.52 10.941 410.668 11.418 cv
410.813 11.898 410.883 12.445 410.887 13.059 cv
cp
408.867 13.137 mo
408.863 12.801 408.836 12.484 408.785 12.191 cv
408.727 11.906 408.633 11.656 408.508 11.441 cv
408.375 11.23 408.203 11.062 407.992 10.941 cv
407.773 10.824 407.504 10.766 407.176 10.762 cv
406.887 10.766 406.633 10.82 406.414 10.922 cv
406.195 11.031 406.016 11.187 405.875 11.391 cv
405.734 11.598 405.629 11.844 405.559 12.129 cv
405.488 12.422 405.453 12.75 405.453 13.113 cv
405.453 13.461 405.48 13.777 405.539 14.062 cv
405.594 14.355 405.688 14.605 405.816 14.816 cv
405.941 15.031 406.113 15.195 406.336 15.309 cv
406.551 15.43 406.82 15.488 407.145 15.484 cv
407.438 15.488 407.695 15.434 407.918 15.324 cv
408.133 15.219 408.313 15.066 408.453 14.859 cv
408.594 14.66 408.695 14.414 408.766 14.125 cv
408.828 13.84 408.863 13.512 408.867 13.137 cv
cp
f
419.035 16.605 mo
419.031 16.668 419.02 16.715 418.996 16.75 cv
418.969 16.793 418.922 16.824 418.863 16.848 cv
418.797 16.871 418.715 16.887 418.609 16.902 cv
418.504 16.91 418.371 16.918 418.219 16.918 cv
418.047 16.918 417.914 16.91 417.813 16.902 cv
417.707 16.887 417.621 16.871 417.559 16.848 cv
417.492 16.824 417.445 16.793 417.418 16.75 cv
417.387 16.715 417.371 16.668 417.375 16.605 cv
417.375 15.836 li
417.016 16.223 416.641 16.52 416.25 16.73 cv
415.852 16.941 415.418 17.047 414.945 17.051 cv
414.41 17.047 413.961 16.945 413.598 16.742 cv
413.23 16.539 412.934 16.266 412.703 15.914 cv
412.469 15.57 412.301 15.164 412.199 14.695 cv
412.098 14.234 412.047 13.742 412.047 13.223 cv
412.047 12.609 412.109 12.055 412.242 11.559 cv
412.371 11.066 412.566 10.645 412.824 10.297 cv
413.078 9.94897 413.395 9.68402 413.773 9.492 cv
414.152 9.30902 414.59 9.21503 415.086 9.211 cv
415.473 9.21503 415.824 9.29303 416.145 9.44897 cv
416.457 9.60901 416.773 9.84003 417.086 10.145 cv
417.086 6.383 li
417.086 6.33197 417.098 6.28497 417.129 6.242 cv
417.152 6.203 417.207 6.16803 417.285 6.13702 cv
417.359 6.10901 417.457 6.09003 417.586 6.07001 cv
417.707 6.05902 417.867 6.05103 418.063 6.047 cv
418.254 6.05103 418.41 6.05902 418.535 6.07001 cv
418.656 6.09003 418.758 6.10901 418.832 6.13702 cv
418.902 6.16803 418.953 6.203 418.988 6.242 cv
419.016 6.28497 419.031 6.33197 419.035 6.383 cv
cp
417.086 11.961 mo
416.805 11.609 416.535 11.34 416.281 11.152 cv
416.02 10.965 415.75 10.871 415.473 10.871 cv
415.219 10.871 415 10.937 414.816 11.062 cv
414.629 11.195 414.48 11.363 414.371 11.574 cv
414.258 11.785 414.176 12.023 414.121 12.285 cv
414.066 12.551 414.039 12.82 414.039 13.09 cv
414.039 13.387 414.063 13.668 414.109 13.941 cv
414.156 14.219 414.23 14.465 414.34 14.68 cv
414.441 14.895 414.586 15.066 414.766 15.195 cv
414.941 15.328 415.164 15.395 415.434 15.391 cv
415.566 15.395 415.695 15.375 415.828 15.332 cv
415.953 15.297 416.086 15.234 416.219 15.141 cv
416.352 15.055 416.488 14.937 416.629 14.793 cv
416.77 14.652 416.922 14.477 417.086 14.27 cv
cp
f
427.434 12.93 mo
427.43 13.168 427.379 13.344 427.273 13.457 cv
427.164 13.574 427.016 13.633 426.836 13.629 cv
422.602 13.629 li
422.598 13.93 422.633 14.199 422.707 14.437 cv
422.773 14.68 422.887 14.883 423.043 15.051 cv
423.195 15.223 423.391 15.352 423.633 15.437 cv
423.871 15.527 424.16 15.57 424.504 15.57 cv
424.844 15.57 425.145 15.547 425.406 15.496 cv
425.664 15.449 425.891 15.395 426.082 15.332 cv
426.27 15.273 426.426 15.219 426.555 15.168 cv
426.676 15.121 426.777 15.098 426.859 15.094 cv
426.902 15.098 426.941 15.105 426.977 15.121 cv
427.004 15.141 427.031 15.172 427.051 15.219 cv
427.07 15.266 427.082 15.332 427.094 15.418 cv
427.098 15.504 427.102 15.613 427.105 15.742 cv
427.102 15.859 427.102 15.957 427.098 16.035 cv
427.09 16.117 427.082 16.184 427.074 16.238 cv
427.063 16.297 427.047 16.348 427.027 16.383 cv
427.008 16.426 426.98 16.461 426.949 16.496 cv
426.914 16.535 426.82 16.586 426.672 16.645 cv
426.516 16.711 426.324 16.773 426.094 16.828 cv
425.855 16.891 425.586 16.937 425.289 16.984 cv
424.984 17.023 424.664 17.047 424.324 17.051 cv
423.703 17.047 423.16 16.973 422.699 16.816 cv
422.23 16.664 421.844 16.426 421.535 16.109 cv
421.219 15.793 420.984 15.395 420.836 14.91 cv
420.68 14.43 420.605 13.863 420.609 13.207 cv
420.605 12.594 420.684 12.035 420.848 11.539 cv
421.004 11.043 421.238 10.625 421.551 10.277 cv
421.855 9.93402 422.23 9.66803 422.668 9.48401 cv
423.105 9.30499 423.598 9.21503 424.152 9.211 cv
424.73 9.21503 425.23 9.30103 425.645 9.46899 cv
426.059 9.64502 426.395 9.883 426.66 10.184 cv
426.922 10.488 427.117 10.848 427.246 11.262 cv
427.367 11.68 427.43 12.129 427.434 12.617 cv
cp
425.531 12.367 mo
425.543 11.816 425.434 11.383 425.199 11.07 cv
424.965 10.758 424.598 10.602 424.105 10.598 cv
423.855 10.602 423.641 10.648 423.457 10.738 cv
423.27 10.836 423.117 10.961 422.996 11.117 cv
422.871 11.277 422.777 11.465 422.715 11.68 cv
422.648 11.895 422.609 12.125 422.602 12.367 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
