%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FirstScenario-OverallRuntime-LocalMode.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:52:23 PM
%%BoundingBox: 0 0 625 544
%%HiResBoundingBox: 0 0 624.6000 543.2400
%%CropBox: 0 0 624.6000 543.2400
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -543.24 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 543.24 li
624.6 543.24 li
624.6 0 li
cp
clp
0 0 mo
624.602 0 li
624.602 543.238 li
0 543.238 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
58.199 491.16 mo
609.359 491.16 li
58.199 480.48 mo
609.359 480.48 li
58.199 469.922 mo
609.359 469.922 li
58.199 459.359 mo
609.359 459.359 li
58.199 438.121 mo
609.359 438.121 li
58.199 427.559 mo
609.359 427.559 li
58.199 416.879 mo
609.359 416.879 li
58.199 406.32 mo
609.359 406.32 li
58.199 385.078 mo
609.359 385.078 li
58.199 374.52 mo
609.359 374.52 li
58.199 363.961 mo
609.359 363.961 li
58.199 353.281 mo
609.359 353.281 li
58.199 332.16 mo
609.359 332.16 li
58.199 321.48 mo
609.359 321.48 li
58.199 310.922 mo
609.359 310.922 li
58.199 300.359 mo
609.359 300.359 li
58.199 279.121 mo
609.359 279.121 li
58.199 268.559 mo
609.359 268.559 li
58.199 257.879 mo
609.359 257.879 li
58.199 247.32 mo
609.359 247.32 li
58.199 226.078 mo
609.359 226.078 li
58.199 215.52 mo
609.359 215.52 li
58.199 204.961 mo
609.359 204.961 li
58.199 194.281 mo
609.359 194.281 li
58.199 173.16 mo
609.359 173.16 li
58.199 162.48 mo
609.359 162.48 li
58.199 151.922 mo
609.359 151.922 li
58.199 141.359 mo
609.359 141.359 li
58.199 120.121 mo
609.359 120.121 li
58.199 109.559 mo
609.359 109.559 li
58.199 98.879 mo
609.359 98.879 li
58.199 88.32 mo
609.359 88.32 li
58.199 67.078 mo
609.359 67.078 li
58.199 56.52 mo
609.359 56.52 li
58.199 45.961 mo
609.359 45.961 li
58.199 35.398 mo
609.359 35.398 li
.140414 .108034 .108034 0 cmyk
@
58.199 448.68 mo
609.359 448.68 li
58.199 395.762 mo
609.359 395.762 li
58.199 342.719 mo
609.359 342.719 li
58.199 289.68 mo
609.359 289.68 li
58.199 236.762 mo
609.359 236.762 li
58.199 183.719 mo
609.359 183.719 li
58.199 130.68 mo
609.359 130.68 li
58.199 77.762 mo
609.359 77.762 li
58.199 24.719 mo
609.359 24.719 li
.328344 .284215 .278569 .000915541 cmyk
@
92.641 24.719 mo
92.641 501.719 li
161.52 24.719 mo
161.52 501.719 li
230.398 24.719 mo
230.398 501.719 li
299.281 24.719 mo
299.281 501.719 li
368.16 24.719 mo
368.16 501.719 li
437.039 24.719 mo
437.039 501.719 li
506.039 24.719 mo
506.039 501.719 li
574.922 24.719 mo
574.922 501.719 li
.178592 .148898 .143923 0 cmyk
@
58.199 24.719 mo
58.199 501.719 li
127.078 24.719 mo
127.078 501.719 li
195.961 24.719 mo
195.961 501.719 li
264.84 24.719 mo
264.84 501.719 li
333.719 24.719 mo
333.719 501.719 li
402.602 24.719 mo
402.602 501.719 li
471.48 24.719 mo
471.48 501.719 li
540.48 24.719 mo
540.48 501.719 li
609.359 24.719 mo
609.359 501.719 li
.328344 .284215 .278569 .000915541 cmyk
@
29.16 493.801 mo
47.039 493.801 li
47.039 508.442 li
29.16 508.442 li
cp
0 0 0 0 cmyk
ef
29.16 440.762 mo
47.039 440.762 li
47.039 455.399 li
29.16 455.399 li
cp
ef
29.16 387.719 mo
47.039 387.719 li
47.039 402.36 li
29.16 402.36 li
cp
ef
29.16 334.801 mo
47.039 334.801 li
47.039 349.442 li
29.16 349.442 li
cp
ef
23.039 281.762 mo
47.039 281.762 li
47.039 296.399 li
23.039 296.399 li
cp
ef
23.039 228.719 mo
47.039 228.719 li
47.039 243.36 li
23.039 243.36 li
cp
ef
23.039 175.801 mo
47.039 175.801 li
47.039 190.442 li
23.039 190.442 li
cp
ef
23.039 122.762 mo
47.039 122.762 li
47.039 137.399 li
23.039 137.399 li
cp
ef
23.039 69.719 mo
47.039 69.719 li
47.039 84.36 li
23.039 84.36 li
cp
ef
23.039 16.801 mo
47.039 16.801 li
47.039 31.442 li
23.039 31.442 li
cp
ef
.96 lw
58.199 501.719 mo
609.359 501.719 li
.367803 .29575 .300999 .00198367 cmyk
@
58.199 501.719 mo
58.199 505.559 li
127.078 501.719 mo
127.078 505.559 li
195.961 501.719 mo
195.961 505.559 li
264.84 501.719 mo
264.84 505.559 li
333.719 501.719 mo
333.719 505.559 li
402.602 501.719 mo
402.602 505.559 li
471.48 501.719 mo
471.48 505.559 li
540.48 501.719 mo
540.48 505.559 li
609.359 501.719 mo
609.359 505.559 li
@
gsave
58.199 24.719 mo
609.961 24.719 li
609.961 502.442 li
58.199 502.442 li
cp
clp
1 lc
58.199 44.281 mo
127.078 135.359 li
195.961 129 li
264.84 125.398 li
333.719 110.398 li
402.602 110.398 li
471.48 109.32 li
540.48 109.922 li
609.359 108.48 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
63.281 49.211 mo
53.199 39.129 li
53.199 49.211 mo
63.281 39.129 li
.62768 .285466 0 0 cmyk
@
132.16 140.41 mo
122.078 130.328 li
122.078 140.41 mo
132.16 130.328 li
@
201.039 134.051 mo
190.961 123.969 li
190.961 134.051 mo
201.039 123.969 li
@
269.922 130.449 mo
259.84 120.371 li
259.84 130.449 mo
269.922 120.371 li
@
338.801 115.328 mo
328.719 105.25 li
328.719 115.328 mo
338.801 105.25 li
@
407.68 115.328 mo
397.602 105.25 li
397.602 115.328 mo
407.68 105.25 li
@
476.559 114.371 mo
466.48 104.289 li
466.48 114.371 mo
476.559 104.289 li
@
545.441 114.969 mo
535.359 104.891 li
535.359 114.969 mo
545.441 104.891 li
@
614.32 113.41 mo
604.238 103.328 li
604.238 113.41 mo
614.32 103.328 li
@
gsave
58.199 24.719 mo
609.961 24.719 li
609.961 502.442 li
58.199 502.442 li
cp
clp
.96 lw
1 lc
58.199 261.121 mo
127.078 343.199 li
195.961 314.16 li
264.84 303.961 li
333.719 303.48 li
402.602 303.359 li
471.48 303.48 li
540.48 303.48 li
609.359 302.879 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
63.281 266.051 mo
53.199 255.969 li
53.199 266.051 mo
63.281 255.969 li
.0319219 .621851 .911223 .000427253 cmyk
@
132.16 348.129 mo
122.078 338.051 li
122.078 348.129 mo
132.16 338.051 li
@
201.039 319.09 mo
190.961 309.012 li
190.961 319.09 mo
201.039 309.012 li
@
269.922 308.891 mo
259.84 298.809 li
259.84 308.891 mo
269.922 298.809 li
@
338.801 308.531 mo
328.719 298.449 li
328.719 308.531 mo
338.801 298.449 li
@
407.68 308.289 mo
397.602 298.211 li
397.602 308.289 mo
407.68 298.211 li
@
476.559 308.531 mo
466.48 298.449 li
466.48 308.531 mo
476.559 298.449 li
@
545.441 308.531 mo
535.359 298.449 li
535.359 308.531 mo
545.441 298.449 li
@
614.32 307.809 mo
604.238 297.73 li
604.238 307.809 mo
614.32 297.73 li
@
gsave
58.199 24.719 mo
609.961 24.719 li
609.961 502.442 li
58.199 502.442 li
cp
clp
.96 lw
1 lc
58.199 335.281 mo
127.078 371.16 li
195.961 348.84 li
264.84 349.078 li
333.719 343.199 li
402.602 342.719 li
471.48 343.559 li
540.48 342.719 li
609.359 342.719 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
63.281 340.328 mo
53.199 330.25 li
53.199 340.328 mo
63.281 330.25 li
.619135 .109529 .981689 .00570687 cmyk
@
132.16 376.09 mo
122.078 366.012 li
122.078 376.09 mo
132.16 366.012 li
@
201.039 353.891 mo
190.961 343.809 li
190.961 353.891 mo
201.039 343.809 li
@
269.922 354.129 mo
259.84 344.051 li
259.84 354.129 mo
269.922 344.051 li
@
338.801 348.129 mo
328.719 338.051 li
328.719 348.129 mo
338.801 338.051 li
@
407.68 347.77 mo
397.602 337.691 li
397.602 347.77 mo
407.68 337.691 li
@
476.559 348.609 mo
466.48 338.531 li
466.48 348.609 mo
476.559 338.531 li
@
545.441 347.77 mo
535.359 337.691 li
535.359 347.77 mo
545.441 337.691 li
@
614.32 347.77 mo
604.238 337.691 li
604.238 347.77 mo
614.32 337.691 li
@
gsave
58.199 24.719 mo
609.961 24.719 li
609.961 502.442 li
58.199 502.442 li
cp
clp
.96 lw
1 lc
58.199 368.641 mo
127.078 389.398 li
195.961 402.48 li
264.84 380.879 li
333.719 382.801 li
402.602 380.879 li
471.48 380.281 li
540.48 380.641 li
609.359 378.602 li
0 .990631 1 .000396735 cmyk
@
grestore
63.281 373.57 mo
53.199 363.488 li
53.199 373.57 mo
63.281 363.488 li
0 .990631 1 .000396735 cmyk
@
132.16 394.328 mo
122.078 384.25 li
122.078 394.328 mo
132.16 384.25 li
@
201.039 407.531 mo
190.961 397.449 li
190.961 407.531 mo
201.039 397.449 li
@
269.922 385.93 mo
259.84 375.852 li
259.84 385.93 mo
269.922 375.852 li
@
338.801 387.852 mo
328.719 377.77 li
328.719 387.852 mo
338.801 377.77 li
@
407.68 385.93 mo
397.602 375.852 li
397.602 385.93 mo
407.68 375.852 li
@
476.559 385.211 mo
466.48 375.129 li
466.48 385.211 mo
476.559 375.129 li
@
545.441 385.691 mo
535.359 375.609 li
535.359 385.691 mo
545.441 375.609 li
@
614.32 383.531 mo
604.238 373.449 li
604.238 383.531 mo
614.32 373.449 li
@
gsave
58.199 24.719 mo
609.961 24.719 li
609.961 502.442 li
58.199 502.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
58.199 369.602 mo
127.078 390.238 li
195.961 386.641 li
264.84 379.68 li
333.719 380.879 li
402.602 378.719 li
471.48 380.641 li
540.48 380.281 li
609.359 379.68 li
.62768 .285466 0 0 cmyk
@
grestore
62.801 374.172 mo
53.68 365.051 li
53.68 374.172 mo
62.801 365.051 li
.62768 .285466 0 0 cmyk
@
131.68 394.691 mo
122.559 385.57 li
122.559 394.691 mo
131.68 385.57 li
@
200.559 391.09 mo
191.441 381.969 li
191.441 391.09 mo
200.559 381.969 li
@
269.441 384.129 mo
260.32 375.012 li
260.32 384.129 mo
269.441 375.012 li
@
338.32 385.449 mo
329.199 376.328 li
329.199 385.449 mo
338.32 376.328 li
@
407.199 383.289 mo
398.078 374.172 li
398.078 383.289 mo
407.199 374.172 li
@
476.078 385.211 mo
466.961 376.09 li
466.961 385.211 mo
476.078 376.09 li
@
544.961 384.73 mo
535.84 375.609 li
535.84 384.73 mo
544.961 375.609 li
@
613.84 384.129 mo
604.719 375.012 li
604.719 384.129 mo
613.84 375.012 li
@
gsave
58.199 24.719 mo
609.961 24.719 li
609.961 502.442 li
58.199 502.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
58.199 368.16 mo
127.078 389.762 li
195.961 403.199 li
264.84 384.48 li
333.719 380.879 li
402.602 380.879 li
471.48 378.719 li
540.48 379.801 li
609.359 380.641 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
63.281 373.211 mo
53.199 363.129 li
53.199 373.211 mo
63.281 363.129 li
.0319219 .621851 .911223 .000427253 cmyk
@
132.16 394.809 mo
122.078 384.73 li
122.078 394.809 mo
132.16 384.73 li
@
201.039 408.129 mo
190.961 398.051 li
190.961 408.129 mo
201.039 398.051 li
@
269.922 389.531 mo
259.84 379.449 li
259.84 389.531 mo
269.922 379.449 li
@
338.801 385.93 mo
328.719 375.852 li
328.719 385.93 mo
338.801 375.852 li
@
407.68 385.93 mo
397.602 375.852 li
397.602 385.93 mo
407.68 375.852 li
@
476.559 383.77 mo
466.48 373.691 li
466.48 383.77 mo
476.559 373.691 li
@
545.441 384.852 mo
535.359 374.77 li
535.359 384.852 mo
545.441 374.77 li
@
614.32 385.691 mo
604.238 375.609 li
604.238 385.691 mo
614.32 375.609 li
@
gsave
58.199 24.719 mo
609.961 24.719 li
609.961 502.442 li
58.199 502.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
58.199 368.16 mo
127.078 401.879 li
195.961 402.48 li
264.84 380.879 li
333.719 380.641 li
402.602 381.359 li
471.48 380.281 li
540.48 379.199 li
609.359 379.801 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
63.281 373.211 mo
53.199 363.129 li
53.199 373.211 mo
63.281 363.129 li
.619135 .109529 .981689 .00570687 cmyk
@
132.16 406.93 mo
122.078 396.852 li
122.078 406.93 mo
132.16 396.852 li
@
201.039 407.531 mo
190.961 397.449 li
190.961 407.531 mo
201.039 397.449 li
@
269.922 385.93 mo
259.84 375.852 li
259.84 385.93 mo
269.922 375.852 li
@
338.801 385.691 mo
328.719 375.609 li
328.719 385.691 mo
338.801 375.609 li
@
407.68 386.289 mo
397.602 376.211 li
397.602 386.289 mo
407.68 376.211 li
@
476.559 385.211 mo
466.48 375.129 li
466.48 385.211 mo
476.559 375.129 li
@
545.441 384.129 mo
535.359 374.051 li
535.359 384.129 mo
545.441 374.051 li
@
614.32 384.852 mo
604.238 374.77 li
604.238 384.852 mo
614.32 374.77 li
@
gsave
58.199 24.719 mo
609.961 24.719 li
609.961 502.442 li
58.199 502.442 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
58.199 373.32 mo
127.078 386.16 li
195.961 403.559 li
264.84 400.441 li
333.719 383.879 li
402.602 379.801 li
471.48 396.121 li
540.48 380.281 li
609.359 379.199 li
0 .990631 1 .000396735 cmyk
@
grestore
63.281 378.25 mo
53.199 368.172 li
53.199 378.25 mo
63.281 368.172 li
0 .990631 1 .000396735 cmyk
@
132.16 391.211 mo
122.078 381.129 li
122.078 391.211 mo
132.16 381.129 li
@
201.039 408.609 mo
190.961 398.531 li
190.961 408.609 mo
201.039 398.531 li
@
269.922 405.371 mo
259.84 395.289 li
259.84 405.371 mo
269.922 395.289 li
@
338.801 388.809 mo
328.719 378.73 li
328.719 388.809 mo
338.801 378.73 li
@
407.68 384.852 mo
397.602 374.77 li
397.602 384.852 mo
407.68 374.77 li
@
476.559 401.172 mo
466.48 391.09 li
466.48 401.172 mo
476.559 391.09 li
@
545.441 385.211 mo
535.359 375.129 li
535.359 385.211 mo
545.441 375.129 li
@
614.32 384.129 mo
604.238 374.051 li
604.238 384.129 mo
614.32 374.051 li
@
29.219 493.754 mo
47.121 493.754 li
47.121 508.402 li
29.219 508.402 li
cp
0 0 0 0 cmyk
ef
34.895 501.437 mo
34.891 502.02 34.844 502.551 34.758 503.031 cv
34.664 503.516 34.512 503.93 34.301 504.273 cv
34.082 504.617 33.805 504.887 33.465 505.074 cv
33.117 505.262 32.695 505.352 32.195 505.355 cv
31.719 505.352 31.316 505.27 30.992 505.102 cv
30.664 504.934 30.402 504.684 30.203 504.352 cv
30 504.023 29.855 503.617 29.777 503.133 cv
29.691 502.652 29.652 502.098 29.652 501.473 cv
29.652 500.895 29.699 500.367 29.793 499.883 cv
29.887 499.406 30.039 498.992 30.25 498.641 cv
30.461 498.297 30.738 498.027 31.082 497.836 cv
31.426 497.648 31.848 497.555 32.348 497.551 cv
32.824 497.555 33.227 497.641 33.555 497.809 cv
33.883 497.98 34.145 498.23 34.344 498.559 cv
34.543 498.891 34.684 499.297 34.77 499.777 cv
34.848 500.262 34.891 500.812 34.895 501.437 cv
cp
33.863 501.508 mo
33.859 501.133 33.848 500.793 33.824 500.488 cv
33.797 500.187 33.754 499.922 33.703 499.691 cv
33.648 499.465 33.582 499.27 33.496 499.098 cv
33.41 498.934 33.309 498.797 33.195 498.687 cv
33.074 498.586 32.941 498.508 32.793 498.453 cv
32.645 498.406 32.477 498.379 32.289 498.379 cv
31.957 498.379 31.688 498.457 31.48 498.613 cv
31.27 498.77 31.105 498.984 30.988 499.258 cv
30.871 499.531 30.789 499.852 30.746 500.219 cv
30.703 500.586 30.684 500.98 30.684 501.402 cv
30.684 501.973 30.711 502.457 30.77 502.848 cv
30.828 503.246 30.922 503.566 31.047 503.816 cv
31.172 504.066 31.332 504.25 31.535 504.363 cv
31.73 504.477 31.973 504.531 32.254 504.531 cv
32.473 504.531 32.664 504.496 32.832 504.426 cv
32.996 504.355 33.137 504.258 33.258 504.125 cv
33.375 503.996 33.477 503.836 33.555 503.652 cv
33.633 503.473 33.695 503.27 33.742 503.043 cv
33.789 502.82 33.82 502.582 33.836 502.32 cv
33.852 502.062 33.859 501.789 33.863 501.508 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.461 504.605 mo
37.461 504.887 37.414 505.07 37.32 505.164 cv
37.227 505.254 37.059 505.297 36.824 505.301 cv
36.586 505.297 36.426 505.254 36.336 505.164 cv
36.242 505.074 36.195 504.895 36.199 504.625 cv
36.195 504.348 36.242 504.164 36.336 504.07 cv
36.43 503.98 36.598 503.934 36.84 503.934 cv
37.074 503.934 37.234 503.98 37.324 504.07 cv
37.414 504.16 37.461 504.34 37.461 504.605 cv
cp
f
44.004 501.437 mo
44 502.02 43.953 502.551 43.867 503.031 cv
43.773 503.516 43.621 503.93 43.41 504.273 cv
43.191 504.617 42.914 504.887 42.574 505.074 cv
42.227 505.262 41.805 505.352 41.305 505.355 cv
40.828 505.352 40.426 505.27 40.102 505.102 cv
39.773 504.934 39.512 504.684 39.313 504.352 cv
39.109 504.023 38.965 503.617 38.887 503.133 cv
38.801 502.652 38.762 502.098 38.762 501.473 cv
38.762 500.895 38.809 500.367 38.902 499.883 cv
38.996 499.406 39.148 498.992 39.359 498.641 cv
39.57 498.297 39.848 498.027 40.191 497.836 cv
40.535 497.648 40.957 497.555 41.457 497.551 cv
41.934 497.555 42.336 497.641 42.664 497.809 cv
42.992 497.98 43.254 498.23 43.453 498.559 cv
43.652 498.891 43.793 499.297 43.879 499.777 cv
43.957 500.262 44 500.812 44.004 501.437 cv
cp
42.973 501.508 mo
42.969 501.133 42.957 500.793 42.934 500.488 cv
42.906 500.187 42.863 499.922 42.813 499.691 cv
42.758 499.465 42.691 499.27 42.605 499.098 cv
42.52 498.934 42.418 498.797 42.305 498.687 cv
42.184 498.586 42.051 498.508 41.902 498.453 cv
41.754 498.406 41.586 498.379 41.398 498.379 cv
41.066 498.379 40.797 498.457 40.59 498.613 cv
40.379 498.77 40.215 498.984 40.098 499.258 cv
39.98 499.531 39.898 499.852 39.855 500.219 cv
39.813 500.586 39.793 500.98 39.793 501.402 cv
39.793 501.973 39.82 502.457 39.879 502.848 cv
39.938 503.246 40.031 503.566 40.156 503.816 cv
40.281 504.066 40.441 504.25 40.645 504.363 cv
40.84 504.477 41.082 504.531 41.363 504.531 cv
41.582 504.531 41.773 504.496 41.941 504.426 cv
42.105 504.355 42.246 504.258 42.367 504.125 cv
42.484 503.996 42.586 503.836 42.664 503.652 cv
42.742 503.473 42.805 503.27 42.852 503.043 cv
42.898 502.82 42.93 502.582 42.945 502.32 cv
42.961 502.062 42.969 501.789 42.973 501.508 cv
cp
f
29.219 440.75 mo
47.121 440.75 li
47.121 455.398 li
29.219 455.398 li
cp
0 0 0 0 cmyk
ef
34.645 451.797 mo
34.645 451.867 34.637 451.93 34.629 451.984 cv
34.613 452.039 34.602 452.086 34.586 452.121 cv
34.57 452.16 34.547 452.187 34.516 452.203 cv
34.484 452.223 34.453 452.23 34.422 452.23 cv
30.23 452.23 li
30.176 452.23 30.129 452.227 30.09 452.211 cv
30.047 452.203 30.012 452.18 29.984 452.145 cv
29.953 452.117 29.93 452.07 29.918 452.008 cv
29.902 451.949 29.898 451.879 29.898 451.793 cv
29.898 451.719 29.898 451.648 29.906 451.586 cv
29.91 451.527 29.926 451.477 29.945 451.43 cv
29.965 451.387 29.988 451.344 30.02 451.297 cv
30.047 451.258 30.086 451.207 30.141 451.152 cv
31.656 449.594 li
32.004 449.234 32.281 448.914 32.496 448.629 cv
32.707 448.344 32.871 448.082 32.988 447.848 cv
33.098 447.613 33.176 447.402 33.215 447.211 cv
33.25 447.02 33.266 446.84 33.27 446.668 cv
33.266 446.504 33.238 446.344 33.184 446.191 cv
33.125 446.043 33.043 445.91 32.938 445.797 cv
32.828 445.687 32.695 445.598 32.535 445.527 cv
32.371 445.461 32.184 445.43 31.98 445.426 cv
31.73 445.43 31.512 445.461 31.316 445.527 cv
31.121 445.598 30.949 445.672 30.801 445.746 cv
30.652 445.828 30.527 445.898 30.434 445.961 cv
30.332 446.027 30.262 446.062 30.215 446.059 cv
30.184 446.062 30.156 446.055 30.137 446.035 cv
30.113 446.023 30.094 445.996 30.082 445.961 cv
30.066 445.93 30.059 445.883 30.051 445.82 cv
30.043 445.762 30.039 445.691 30.039 445.609 cv
30.039 445.551 30.039 445.5 30.043 445.457 cv
30.047 445.418 30.055 445.383 30.066 445.348 cv
30.074 445.32 30.086 445.289 30.105 445.258 cv
30.117 445.23 30.148 445.199 30.199 445.156 cv
30.242 445.117 30.324 445.059 30.441 444.988 cv
30.555 444.918 30.699 444.852 30.875 444.781 cv
31.047 444.715 31.238 444.656 31.449 444.605 cv
31.656 444.562 31.875 444.539 32.105 444.535 cv
32.473 444.539 32.793 444.59 33.07 444.691 cv
33.344 444.797 33.574 444.937 33.754 445.117 cv
33.934 445.297 34.07 445.508 34.164 445.746 cv
34.254 445.984 34.297 446.238 34.301 446.504 cv
34.297 446.754 34.277 446.996 34.234 447.23 cv
34.188 447.473 34.094 447.73 33.961 448.008 cv
33.82 448.289 33.621 448.602 33.359 448.941 cv
33.098 449.285 32.75 449.676 32.316 450.121 cv
31.117 451.375 li
34.418 451.375 li
34.445 451.375 34.477 451.387 34.508 451.402 cv
34.535 451.422 34.559 451.445 34.582 451.48 cv
34.598 451.52 34.613 451.566 34.629 451.613 cv
34.637 451.668 34.645 451.727 34.645 451.797 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.461 451.59 mo
37.461 451.871 37.414 452.055 37.32 452.148 cv
37.227 452.238 37.059 452.281 36.824 452.285 cv
36.586 452.281 36.426 452.238 36.336 452.148 cv
36.242 452.059 36.195 451.879 36.199 451.609 cv
36.195 451.332 36.242 451.148 36.336 451.055 cv
36.43 450.965 36.598 450.918 36.84 450.918 cv
37.074 450.918 37.234 450.965 37.324 451.055 cv
37.414 451.145 37.461 451.324 37.461 451.59 cv
cp
f
43.719 449.793 mo
43.719 450.199 43.648 450.562 43.512 450.879 cv
43.375 451.195 43.184 451.461 42.934 451.68 cv
42.684 451.898 42.383 452.062 42.039 452.172 cv
41.688 452.281 41.305 452.336 40.887 452.34 cv
40.648 452.336 40.426 452.32 40.219 452.289 cv
40.004 452.258 39.816 452.219 39.656 452.172 cv
39.488 452.125 39.355 452.078 39.254 452.027 cv
39.148 451.984 39.078 451.945 39.051 451.914 cv
39.02 451.887 39 451.863 38.988 451.836 cv
38.977 451.816 38.965 451.789 38.957 451.754 cv
38.941 451.723 38.938 451.68 38.938 451.629 cv
38.934 451.578 38.93 451.516 38.934 451.445 cv
38.93 451.383 38.934 451.324 38.941 451.27 cv
38.945 451.215 38.957 451.172 38.973 451.141 cv
38.988 451.109 39.004 451.086 39.027 451.066 cv
39.043 451.055 39.07 451.047 39.102 451.043 cv
39.141 451.047 39.199 451.07 39.281 451.117 cv
39.363 451.164 39.473 451.219 39.613 451.273 cv
39.75 451.332 39.922 451.383 40.129 451.434 cv
40.332 451.488 40.578 451.516 40.859 451.512 cv
41.121 451.516 41.359 451.484 41.582 451.418 cv
41.797 451.359 41.984 451.262 42.145 451.125 cv
42.301 450.996 42.426 450.828 42.516 450.625 cv
42.605 450.422 42.652 450.176 42.652 449.887 cv
42.652 449.645 42.613 449.434 42.539 449.246 cv
42.461 449.062 42.344 448.906 42.188 448.781 cv
42.027 448.66 41.828 448.57 41.586 448.508 cv
41.344 448.453 41.055 448.422 40.719 448.418 cv
40.48 448.422 40.273 448.434 40.105 448.453 cv
39.93 448.48 39.77 448.492 39.621 448.488 cv
39.508 448.492 39.43 448.465 39.387 448.41 cv
39.336 448.359 39.313 448.262 39.316 448.117 cv
39.316 445.027 li
39.313 444.902 39.344 444.805 39.406 444.742 cv
39.469 444.68 39.555 444.648 39.668 444.648 cv
43.027 444.648 li
43.059 444.648 43.086 444.66 43.117 444.676 cv
43.141 444.695 43.168 444.719 43.191 444.754 cv
43.211 444.793 43.223 444.84 43.234 444.891 cv
43.242 444.949 43.25 445.012 43.25 445.082 cv
43.25 445.223 43.23 445.332 43.191 445.41 cv
43.152 445.488 43.098 445.527 43.035 445.527 cv
40.324 445.527 li
40.324 447.652 li
40.453 447.637 40.59 447.625 40.73 447.621 cv
40.867 447.617 41.023 447.613 41.207 447.613 cv
41.621 447.613 41.988 447.668 42.301 447.77 cv
42.613 447.879 42.871 448.023 43.082 448.211 cv
43.289 448.398 43.449 448.629 43.559 448.898 cv
43.664 449.168 43.719 449.465 43.719 449.793 cv
cp
f
29.219 387.75 mo
47.121 387.75 li
47.121 402.398 li
29.219 402.398 li
cp
0 0 0 0 cmyk
ef
34.609 396.801 mo
34.609 397.207 34.539 397.57 34.402 397.887 cv
34.266 398.203 34.074 398.469 33.824 398.687 cv
33.574 398.906 33.273 399.07 32.93 399.18 cv
32.578 399.289 32.195 399.344 31.777 399.348 cv
31.539 399.344 31.316 399.328 31.109 399.297 cv
30.895 399.266 30.707 399.227 30.547 399.18 cv
30.379 399.133 30.246 399.086 30.145 399.035 cv
30.039 398.992 29.969 398.953 29.941 398.922 cv
29.91 398.895 29.891 398.871 29.879 398.844 cv
29.867 398.824 29.855 398.797 29.848 398.762 cv
29.832 398.73 29.828 398.687 29.828 398.637 cv
29.824 398.586 29.82 398.523 29.824 398.453 cv
29.82 398.391 29.824 398.332 29.832 398.277 cv
29.836 398.223 29.848 398.18 29.863 398.148 cv
29.879 398.117 29.895 398.094 29.918 398.074 cv
29.934 398.062 29.961 398.055 29.992 398.051 cv
30.031 398.055 30.09 398.078 30.172 398.125 cv
30.254 398.172 30.363 398.227 30.504 398.281 cv
30.641 398.34 30.813 398.391 31.02 398.441 cv
31.223 398.496 31.469 398.523 31.75 398.52 cv
32.012 398.523 32.25 398.492 32.473 398.426 cv
32.688 398.367 32.875 398.27 33.035 398.133 cv
33.191 398.004 33.316 397.836 33.406 397.633 cv
33.496 397.43 33.543 397.184 33.543 396.895 cv
33.543 396.652 33.504 396.441 33.43 396.254 cv
33.352 396.07 33.234 395.914 33.078 395.789 cv
32.918 395.668 32.719 395.578 32.477 395.516 cv
32.234 395.461 31.945 395.43 31.609 395.426 cv
31.371 395.43 31.164 395.441 30.996 395.461 cv
30.82 395.488 30.66 395.5 30.512 395.496 cv
30.398 395.5 30.32 395.473 30.277 395.418 cv
30.227 395.367 30.203 395.27 30.207 395.125 cv
30.207 392.035 li
30.203 391.91 30.234 391.812 30.297 391.75 cv
30.359 391.687 30.445 391.656 30.559 391.656 cv
33.918 391.656 li
33.949 391.656 33.977 391.668 34.008 391.684 cv
34.031 391.703 34.059 391.727 34.082 391.762 cv
34.102 391.801 34.113 391.848 34.125 391.898 cv
34.133 391.957 34.141 392.02 34.141 392.09 cv
34.141 392.23 34.121 392.34 34.082 392.418 cv
34.043 392.496 33.988 392.535 33.926 392.535 cv
31.215 392.535 li
31.215 394.66 li
31.344 394.645 31.48 394.633 31.621 394.629 cv
31.758 394.625 31.914 394.621 32.098 394.621 cv
32.512 394.621 32.879 394.676 33.191 394.777 cv
33.504 394.887 33.762 395.031 33.973 395.219 cv
34.18 395.406 34.34 395.637 34.449 395.906 cv
34.555 396.176 34.609 396.473 34.609 396.801 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.461 398.598 mo
37.461 398.879 37.414 399.062 37.32 399.156 cv
37.227 399.246 37.059 399.289 36.824 399.293 cv
36.586 399.289 36.426 399.246 36.336 399.156 cv
36.242 399.066 36.195 398.887 36.199 398.617 cv
36.195 398.34 36.242 398.156 36.336 398.062 cv
36.43 397.973 36.598 397.926 36.84 397.926 cv
37.074 397.926 37.234 397.973 37.324 398.062 cv
37.414 398.152 37.461 398.332 37.461 398.598 cv
cp
f
44.004 395.43 mo
44 396.012 43.953 396.543 43.867 397.023 cv
43.773 397.508 43.621 397.922 43.41 398.266 cv
43.191 398.609 42.914 398.879 42.574 399.066 cv
42.227 399.254 41.805 399.344 41.305 399.348 cv
40.828 399.344 40.426 399.262 40.102 399.094 cv
39.773 398.926 39.512 398.676 39.313 398.344 cv
39.109 398.016 38.965 397.609 38.887 397.125 cv
38.801 396.645 38.762 396.09 38.762 395.465 cv
38.762 394.887 38.809 394.359 38.902 393.875 cv
38.996 393.398 39.148 392.984 39.359 392.633 cv
39.57 392.289 39.848 392.02 40.191 391.828 cv
40.535 391.641 40.957 391.547 41.457 391.543 cv
41.934 391.547 42.336 391.633 42.664 391.801 cv
42.992 391.973 43.254 392.223 43.453 392.551 cv
43.652 392.883 43.793 393.289 43.879 393.77 cv
43.957 394.254 44 394.805 44.004 395.43 cv
cp
42.973 395.5 mo
42.969 395.125 42.957 394.785 42.934 394.48 cv
42.906 394.18 42.863 393.914 42.813 393.684 cv
42.758 393.457 42.691 393.262 42.605 393.09 cv
42.52 392.926 42.418 392.789 42.305 392.68 cv
42.184 392.578 42.051 392.5 41.902 392.445 cv
41.754 392.398 41.586 392.371 41.398 392.371 cv
41.066 392.371 40.797 392.449 40.59 392.605 cv
40.379 392.762 40.215 392.977 40.098 393.25 cv
39.98 393.523 39.898 393.844 39.855 394.211 cv
39.813 394.578 39.793 394.973 39.793 395.395 cv
39.793 395.965 39.82 396.449 39.879 396.84 cv
39.938 397.238 40.031 397.559 40.156 397.809 cv
40.281 398.059 40.441 398.242 40.645 398.355 cv
40.84 398.469 41.082 398.523 41.363 398.523 cv
41.582 398.523 41.773 398.488 41.941 398.418 cv
42.105 398.348 42.246 398.25 42.367 398.117 cv
42.484 397.988 42.586 397.828 42.664 397.645 cv
42.742 397.465 42.805 397.262 42.852 397.035 cv
42.898 396.812 42.93 396.574 42.945 396.312 cv
42.961 396.055 42.969 395.781 42.973 395.5 cv
cp
f
29.219 334.762 mo
47.121 334.762 li
47.121 349.41 li
29.219 349.41 li
cp
0 0 0 0 cmyk
ef
34.754 339.07 mo
34.75 339.141 34.746 339.207 34.746 339.262 cv
34.738 339.32 34.73 339.375 34.723 339.426 cv
34.707 339.48 34.695 339.531 34.68 339.578 cv
34.664 339.629 34.645 339.68 34.621 339.734 cv
31.891 346.023 li
31.871 346.074 31.844 346.113 31.816 346.141 cv
31.785 346.172 31.75 346.195 31.703 346.211 cv
31.656 346.227 31.598 346.234 31.531 346.242 cv
31.457 346.25 31.371 346.254 31.277 346.254 cv
31.137 346.254 31.035 346.246 30.965 346.234 cv
30.891 346.223 30.836 346.207 30.805 346.18 cv
30.77 346.156 30.754 346.125 30.758 346.086 cv
30.762 346.051 30.777 346.008 30.801 345.953 cv
33.672 339.523 li
30.035 339.523 li
29.957 339.527 29.902 339.488 29.863 339.406 cv
29.824 339.332 29.805 339.223 29.809 339.078 cv
29.805 339.004 29.809 338.937 29.824 338.883 cv
29.832 338.828 29.848 338.785 29.867 338.746 cv
29.887 338.711 29.91 338.684 29.938 338.664 cv
29.965 338.648 29.996 338.637 30.035 338.637 cv
34.449 338.637 li
34.504 338.637 34.551 338.645 34.594 338.656 cv
34.633 338.668 34.664 338.691 34.688 338.727 cv
34.707 338.762 34.727 338.805 34.738 338.859 cv
34.746 338.914 34.75 338.984 34.754 339.07 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.461 345.578 mo
37.461 345.859 37.414 346.043 37.32 346.137 cv
37.227 346.227 37.059 346.27 36.824 346.273 cv
36.586 346.27 36.426 346.227 36.336 346.137 cv
36.242 346.047 36.195 345.867 36.199 345.598 cv
36.195 345.32 36.242 345.137 36.336 345.043 cv
36.43 344.953 36.598 344.906 36.84 344.906 cv
37.074 344.906 37.234 344.953 37.324 345.043 cv
37.414 345.133 37.461 345.312 37.461 345.578 cv
cp
f
43.719 343.781 mo
43.719 344.187 43.648 344.551 43.512 344.867 cv
43.375 345.184 43.184 345.449 42.934 345.668 cv
42.684 345.887 42.383 346.051 42.039 346.16 cv
41.688 346.27 41.305 346.324 40.887 346.328 cv
40.648 346.324 40.426 346.309 40.219 346.277 cv
40.004 346.246 39.816 346.207 39.656 346.16 cv
39.488 346.113 39.355 346.066 39.254 346.016 cv
39.148 345.973 39.078 345.934 39.051 345.902 cv
39.02 345.875 39 345.852 38.988 345.824 cv
38.977 345.805 38.965 345.777 38.957 345.742 cv
38.941 345.711 38.938 345.668 38.938 345.617 cv
38.934 345.566 38.93 345.504 38.934 345.434 cv
38.93 345.371 38.934 345.312 38.941 345.258 cv
38.945 345.203 38.957 345.16 38.973 345.129 cv
38.988 345.098 39.004 345.074 39.027 345.055 cv
39.043 345.043 39.07 345.035 39.102 345.031 cv
39.141 345.035 39.199 345.059 39.281 345.105 cv
39.363 345.152 39.473 345.207 39.613 345.262 cv
39.75 345.32 39.922 345.371 40.129 345.422 cv
40.332 345.477 40.578 345.504 40.859 345.5 cv
41.121 345.504 41.359 345.473 41.582 345.406 cv
41.797 345.348 41.984 345.25 42.145 345.113 cv
42.301 344.984 42.426 344.816 42.516 344.613 cv
42.605 344.41 42.652 344.164 42.652 343.875 cv
42.652 343.633 42.613 343.422 42.539 343.234 cv
42.461 343.051 42.344 342.895 42.188 342.77 cv
42.027 342.648 41.828 342.559 41.586 342.496 cv
41.344 342.441 41.055 342.41 40.719 342.406 cv
40.48 342.41 40.273 342.422 40.105 342.441 cv
39.93 342.469 39.77 342.48 39.621 342.477 cv
39.508 342.48 39.43 342.453 39.387 342.398 cv
39.336 342.348 39.313 342.25 39.316 342.105 cv
39.316 339.016 li
39.313 338.891 39.344 338.793 39.406 338.73 cv
39.469 338.668 39.555 338.637 39.668 338.637 cv
43.027 338.637 li
43.059 338.637 43.086 338.648 43.117 338.664 cv
43.141 338.684 43.168 338.707 43.191 338.742 cv
43.211 338.781 43.223 338.828 43.234 338.879 cv
43.242 338.937 43.25 339 43.25 339.07 cv
43.25 339.211 43.23 339.32 43.191 339.398 cv
43.152 339.477 43.098 339.516 43.035 339.516 cv
40.324 339.516 li
40.324 341.641 li
40.453 341.625 40.59 341.613 40.73 341.609 cv
40.867 341.605 41.023 341.602 41.207 341.602 cv
41.621 341.602 41.988 341.656 42.301 341.758 cv
42.613 341.867 42.871 342.012 43.082 342.199 cv
43.289 342.387 43.449 342.617 43.559 342.887 cv
43.664 343.156 43.719 343.453 43.719 343.781 cv
cp
f
23.137 281.762 mo
47.121 281.762 li
47.121 296.41 li
23.137 296.41 li
cp
0 0 0 0 cmyk
ef
28.59 292.812 mo
28.586 292.887 28.582 292.949 28.574 293 cv
28.563 293.055 28.547 293.098 28.527 293.125 cv
28.504 293.16 28.48 293.184 28.457 293.191 cv
28.434 293.207 28.406 293.211 28.379 293.211 cv
24.418 293.211 li
24.391 293.211 24.367 293.207 24.344 293.191 cv
24.32 293.184 24.297 293.16 24.277 293.125 cv
24.254 293.098 24.238 293.055 24.227 293 cv
24.211 292.949 24.203 292.887 24.207 292.812 cv
24.203 292.742 24.211 292.684 24.227 292.633 cv
24.238 292.582 24.25 292.539 24.27 292.504 cv
24.285 292.473 24.309 292.449 24.332 292.43 cv
24.355 292.414 24.383 292.402 24.418 292.402 cv
26.004 292.402 li
26.004 286.637 li
24.535 287.508 li
24.461 287.555 24.402 287.578 24.359 287.582 cv
24.313 287.594 24.277 287.586 24.25 287.555 cv
24.219 287.531 24.199 287.488 24.191 287.43 cv
24.184 287.371 24.18 287.297 24.18 287.203 cv
24.18 287.141 24.18 287.082 24.188 287.035 cv
24.191 286.988 24.203 286.949 24.215 286.918 cv
24.223 286.887 24.238 286.859 24.262 286.836 cv
24.285 286.812 24.313 286.789 24.348 286.766 cv
26.098 285.648 li
26.109 285.637 26.129 285.625 26.156 285.617 cv
26.176 285.609 26.207 285.602 26.242 285.594 cv
26.273 285.586 26.313 285.582 26.363 285.582 cv
26.406 285.582 26.465 285.582 26.543 285.578 cv
26.633 285.582 26.711 285.586 26.777 285.59 cv
26.836 285.602 26.887 285.613 26.922 285.621 cv
26.953 285.637 26.977 285.652 26.992 285.672 cv
27.004 285.695 27.008 285.719 27.012 285.742 cv
27.012 292.402 li
28.379 292.402 li
28.406 292.402 28.438 292.414 28.469 292.43 cv
28.496 292.449 28.516 292.473 28.535 292.504 cv
28.551 292.539 28.566 292.582 28.574 292.633 cv
28.582 292.684 28.586 292.742 28.59 292.812 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.906 289.402 mo
34.902 289.984 34.855 290.516 34.77 290.996 cv
34.676 291.48 34.523 291.895 34.313 292.238 cv
34.094 292.582 33.816 292.852 33.477 293.039 cv
33.129 293.227 32.707 293.316 32.207 293.32 cv
31.73 293.316 31.328 293.234 31.004 293.066 cv
30.676 292.898 30.414 292.648 30.215 292.316 cv
30.012 291.988 29.867 291.582 29.789 291.098 cv
29.703 290.617 29.664 290.062 29.664 289.437 cv
29.664 288.859 29.711 288.332 29.805 287.848 cv
29.898 287.371 30.051 286.957 30.262 286.605 cv
30.473 286.262 30.75 285.992 31.094 285.801 cv
31.438 285.613 31.859 285.52 32.359 285.516 cv
32.836 285.52 33.238 285.605 33.566 285.773 cv
33.895 285.945 34.156 286.195 34.355 286.523 cv
34.555 286.855 34.695 287.262 34.781 287.742 cv
34.859 288.227 34.902 288.777 34.906 289.402 cv
cp
33.875 289.473 mo
33.871 289.098 33.859 288.758 33.836 288.453 cv
33.809 288.152 33.766 287.887 33.715 287.656 cv
33.66 287.43 33.594 287.234 33.508 287.062 cv
33.422 286.898 33.32 286.762 33.207 286.652 cv
33.086 286.551 32.953 286.473 32.805 286.418 cv
32.656 286.371 32.488 286.344 32.301 286.344 cv
31.969 286.344 31.699 286.422 31.492 286.578 cv
31.281 286.734 31.117 286.949 31 287.223 cv
30.883 287.496 30.801 287.816 30.758 288.184 cv
30.715 288.551 30.695 288.945 30.695 289.367 cv
30.695 289.937 30.723 290.422 30.781 290.812 cv
30.84 291.211 30.934 291.531 31.059 291.781 cv
31.184 292.031 31.344 292.215 31.547 292.328 cv
31.742 292.441 31.984 292.496 32.266 292.496 cv
32.484 292.496 32.676 292.461 32.844 292.391 cv
33.008 292.32 33.148 292.223 33.27 292.09 cv
33.387 291.961 33.488 291.801 33.566 291.617 cv
33.645 291.437 33.707 291.234 33.754 291.008 cv
33.801 290.785 33.832 290.547 33.848 290.285 cv
33.863 290.027 33.871 289.754 33.875 289.473 cv
cp
f
37.426 292.57 mo
37.426 292.852 37.379 293.035 37.285 293.129 cv
37.191 293.219 37.023 293.262 36.789 293.266 cv
36.551 293.262 36.391 293.219 36.301 293.129 cv
36.207 293.039 36.16 292.859 36.164 292.59 cv
36.16 292.312 36.207 292.129 36.301 292.035 cv
36.395 291.945 36.563 291.898 36.805 291.898 cv
37.039 291.898 37.199 291.945 37.289 292.035 cv
37.379 292.125 37.426 292.305 37.426 292.57 cv
cp
f
44.051 289.402 mo
44.047 289.984 44 290.516 43.914 290.996 cv
43.82 291.48 43.668 291.895 43.457 292.238 cv
43.238 292.582 42.961 292.852 42.621 293.039 cv
42.273 293.227 41.852 293.316 41.352 293.32 cv
40.875 293.316 40.473 293.234 40.148 293.066 cv
39.82 292.898 39.559 292.648 39.359 292.316 cv
39.156 291.988 39.012 291.582 38.934 291.098 cv
38.848 290.617 38.809 290.062 38.809 289.437 cv
38.809 288.859 38.855 288.332 38.949 287.848 cv
39.043 287.371 39.195 286.957 39.406 286.605 cv
39.617 286.262 39.895 285.992 40.238 285.801 cv
40.582 285.613 41.004 285.52 41.504 285.516 cv
41.98 285.52 42.383 285.605 42.711 285.773 cv
43.039 285.945 43.301 286.195 43.5 286.523 cv
43.699 286.855 43.84 287.262 43.926 287.742 cv
44.004 288.227 44.047 288.777 44.051 289.402 cv
cp
43.02 289.473 mo
43.016 289.098 43.004 288.758 42.98 288.453 cv
42.953 288.152 42.91 287.887 42.859 287.656 cv
42.805 287.43 42.738 287.234 42.652 287.062 cv
42.566 286.898 42.465 286.762 42.352 286.652 cv
42.23 286.551 42.098 286.473 41.949 286.418 cv
41.801 286.371 41.633 286.344 41.445 286.344 cv
41.113 286.344 40.844 286.422 40.637 286.578 cv
40.426 286.734 40.262 286.949 40.145 287.223 cv
40.027 287.496 39.945 287.816 39.902 288.184 cv
39.859 288.551 39.84 288.945 39.84 289.367 cv
39.84 289.937 39.867 290.422 39.926 290.812 cv
39.984 291.211 40.078 291.531 40.203 291.781 cv
40.328 292.031 40.488 292.215 40.691 292.328 cv
40.887 292.441 41.129 292.496 41.41 292.496 cv
41.629 292.496 41.82 292.461 41.988 292.391 cv
42.152 292.32 42.293 292.223 42.414 292.09 cv
42.531 291.961 42.633 291.801 42.711 291.617 cv
42.789 291.437 42.852 291.234 42.898 291.008 cv
42.945 290.785 42.977 290.547 42.992 290.285 cv
43.008 290.027 43.016 289.754 43.02 289.473 cv
cp
f
23.137 228.762 mo
47.121 228.762 li
47.121 243.41 li
23.137 243.41 li
cp
0 0 0 0 cmyk
ef
28.59 239.82 mo
28.586 239.895 28.582 239.957 28.574 240.008 cv
28.563 240.062 28.547 240.105 28.527 240.133 cv
28.504 240.168 28.48 240.191 28.457 240.199 cv
28.434 240.215 28.406 240.219 28.379 240.219 cv
24.418 240.219 li
24.391 240.219 24.367 240.215 24.344 240.199 cv
24.32 240.191 24.297 240.168 24.277 240.133 cv
24.254 240.105 24.238 240.062 24.227 240.008 cv
24.211 239.957 24.203 239.895 24.207 239.82 cv
24.203 239.75 24.211 239.691 24.227 239.641 cv
24.238 239.59 24.25 239.547 24.27 239.512 cv
24.285 239.48 24.309 239.457 24.332 239.437 cv
24.355 239.422 24.383 239.41 24.418 239.41 cv
26.004 239.41 li
26.004 233.645 li
24.535 234.516 li
24.461 234.562 24.402 234.586 24.359 234.59 cv
24.313 234.602 24.277 234.594 24.25 234.562 cv
24.219 234.539 24.199 234.496 24.191 234.437 cv
24.184 234.379 24.18 234.305 24.18 234.211 cv
24.18 234.148 24.18 234.09 24.188 234.043 cv
24.191 233.996 24.203 233.957 24.215 233.926 cv
24.223 233.895 24.238 233.867 24.262 233.844 cv
24.285 233.82 24.313 233.797 24.348 233.773 cv
26.098 232.656 li
26.109 232.645 26.129 232.633 26.156 232.625 cv
26.176 232.617 26.207 232.609 26.242 232.602 cv
26.273 232.594 26.313 232.59 26.363 232.59 cv
26.406 232.59 26.465 232.59 26.543 232.586 cv
26.633 232.59 26.711 232.594 26.777 232.598 cv
26.836 232.609 26.887 232.621 26.922 232.629 cv
26.953 232.645 26.977 232.66 26.992 232.68 cv
27.004 232.703 27.008 232.727 27.012 232.75 cv
27.012 239.41 li
28.379 239.41 li
28.406 239.41 28.438 239.422 28.469 239.437 cv
28.496 239.457 28.516 239.48 28.535 239.512 cv
28.551 239.547 28.566 239.59 28.574 239.641 cv
28.582 239.691 28.586 239.75 28.59 239.82 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.656 239.785 mo
34.656 239.855 34.648 239.918 34.641 239.973 cv
34.625 240.027 34.613 240.074 34.598 240.109 cv
34.582 240.148 34.559 240.176 34.527 240.191 cv
34.496 240.211 34.465 240.219 34.434 240.219 cv
30.242 240.219 li
30.188 240.219 30.141 240.215 30.102 240.199 cv
30.059 240.191 30.023 240.168 29.996 240.133 cv
29.965 240.105 29.941 240.059 29.93 239.996 cv
29.914 239.937 29.91 239.867 29.91 239.781 cv
29.91 239.707 29.91 239.637 29.918 239.574 cv
29.922 239.516 29.938 239.465 29.957 239.418 cv
29.977 239.375 30 239.332 30.031 239.285 cv
30.059 239.246 30.098 239.195 30.152 239.141 cv
31.668 237.582 li
32.016 237.223 32.293 236.902 32.508 236.617 cv
32.719 236.332 32.883 236.07 33 235.836 cv
33.109 235.602 33.188 235.391 33.227 235.199 cv
33.262 235.008 33.277 234.828 33.281 234.656 cv
33.277 234.492 33.25 234.332 33.195 234.18 cv
33.137 234.031 33.055 233.898 32.949 233.785 cv
32.84 233.676 32.707 233.586 32.547 233.516 cv
32.383 233.449 32.195 233.418 31.992 233.414 cv
31.742 233.418 31.523 233.449 31.328 233.516 cv
31.133 233.586 30.961 233.66 30.813 233.734 cv
30.664 233.816 30.539 233.887 30.445 233.949 cv
30.344 234.016 30.273 234.051 30.227 234.047 cv
30.195 234.051 30.168 234.043 30.148 234.023 cv
30.125 234.012 30.105 233.984 30.094 233.949 cv
30.078 233.918 30.07 233.871 30.063 233.809 cv
30.055 233.75 30.051 233.68 30.051 233.598 cv
30.051 233.539 30.051 233.488 30.055 233.445 cv
30.059 233.406 30.066 233.371 30.078 233.336 cv
30.086 233.309 30.098 233.277 30.117 233.246 cv
30.129 233.219 30.16 233.187 30.211 233.145 cv
30.254 233.105 30.336 233.047 30.453 232.977 cv
30.566 232.906 30.711 232.84 30.887 232.77 cv
31.059 232.703 31.25 232.645 31.461 232.594 cv
31.668 232.551 31.887 232.527 32.117 232.523 cv
32.484 232.527 32.805 232.578 33.082 232.68 cv
33.355 232.785 33.586 232.926 33.766 233.105 cv
33.945 233.285 34.082 233.496 34.176 233.734 cv
34.266 233.973 34.309 234.227 34.313 234.492 cv
34.309 234.742 34.289 234.984 34.246 235.219 cv
34.199 235.461 34.105 235.719 33.973 235.996 cv
33.832 236.277 33.633 236.59 33.371 236.93 cv
33.109 237.273 32.762 237.664 32.328 238.109 cv
31.129 239.363 li
34.43 239.363 li
34.457 239.363 34.488 239.375 34.52 239.391 cv
34.547 239.41 34.57 239.434 34.594 239.469 cv
34.609 239.508 34.625 239.555 34.641 239.602 cv
34.648 239.656 34.656 239.715 34.656 239.785 cv
cp
f
37.426 239.578 mo
37.426 239.859 37.379 240.043 37.285 240.137 cv
37.191 240.227 37.023 240.27 36.789 240.273 cv
36.551 240.27 36.391 240.227 36.301 240.137 cv
36.207 240.047 36.16 239.867 36.164 239.598 cv
36.16 239.32 36.207 239.137 36.301 239.043 cv
36.395 238.953 36.563 238.906 36.805 238.906 cv
37.039 238.906 37.199 238.953 37.289 239.043 cv
37.379 239.133 37.426 239.312 37.426 239.578 cv
cp
f
43.766 237.781 mo
43.766 238.187 43.695 238.551 43.559 238.867 cv
43.422 239.184 43.23 239.449 42.98 239.668 cv
42.73 239.887 42.43 240.051 42.086 240.16 cv
41.734 240.27 41.352 240.324 40.934 240.328 cv
40.695 240.324 40.473 240.309 40.266 240.277 cv
40.051 240.246 39.863 240.207 39.703 240.16 cv
39.535 240.113 39.402 240.066 39.301 240.016 cv
39.195 239.973 39.125 239.934 39.098 239.902 cv
39.066 239.875 39.047 239.852 39.035 239.824 cv
39.023 239.805 39.012 239.777 39.004 239.742 cv
38.988 239.711 38.984 239.668 38.984 239.617 cv
38.98 239.566 38.977 239.504 38.98 239.434 cv
38.977 239.371 38.98 239.312 38.988 239.258 cv
38.992 239.203 39.004 239.16 39.02 239.129 cv
39.035 239.098 39.051 239.074 39.074 239.055 cv
39.09 239.043 39.117 239.035 39.148 239.031 cv
39.188 239.035 39.246 239.059 39.328 239.105 cv
39.41 239.152 39.52 239.207 39.66 239.262 cv
39.797 239.32 39.969 239.371 40.176 239.422 cv
40.379 239.477 40.625 239.504 40.906 239.5 cv
41.168 239.504 41.406 239.473 41.629 239.406 cv
41.844 239.348 42.031 239.25 42.191 239.113 cv
42.348 238.984 42.473 238.816 42.563 238.613 cv
42.652 238.41 42.699 238.164 42.699 237.875 cv
42.699 237.633 42.66 237.422 42.586 237.234 cv
42.508 237.051 42.391 236.895 42.234 236.77 cv
42.074 236.648 41.875 236.559 41.633 236.496 cv
41.391 236.441 41.102 236.41 40.766 236.406 cv
40.527 236.41 40.32 236.422 40.152 236.441 cv
39.977 236.469 39.816 236.48 39.668 236.477 cv
39.555 236.48 39.477 236.453 39.434 236.398 cv
39.383 236.348 39.359 236.25 39.363 236.105 cv
39.363 233.016 li
39.359 232.891 39.391 232.793 39.453 232.73 cv
39.516 232.668 39.602 232.637 39.715 232.637 cv
43.074 232.637 li
43.105 232.637 43.133 232.648 43.164 232.664 cv
43.188 232.684 43.215 232.707 43.238 232.742 cv
43.258 232.781 43.27 232.828 43.281 232.879 cv
43.289 232.937 43.297 233 43.297 233.07 cv
43.297 233.211 43.277 233.32 43.238 233.398 cv
43.199 233.477 43.145 233.516 43.082 233.516 cv
40.371 233.516 li
40.371 235.641 li
40.5 235.625 40.637 235.613 40.777 235.609 cv
40.914 235.605 41.07 235.602 41.254 235.602 cv
41.668 235.602 42.035 235.656 42.348 235.758 cv
42.66 235.867 42.918 236.012 43.129 236.199 cv
43.336 236.387 43.496 236.617 43.605 236.887 cv
43.711 237.156 43.766 237.453 43.766 237.781 cv
cp
f
23.137 175.762 mo
47.121 175.762 li
47.121 190.41 li
23.137 190.41 li
cp
0 0 0 0 cmyk
ef
28.59 186.801 mo
28.586 186.875 28.582 186.937 28.574 186.988 cv
28.563 187.043 28.547 187.086 28.527 187.113 cv
28.504 187.148 28.48 187.172 28.457 187.18 cv
28.434 187.195 28.406 187.199 28.379 187.199 cv
24.418 187.199 li
24.391 187.199 24.367 187.195 24.344 187.18 cv
24.32 187.172 24.297 187.148 24.277 187.113 cv
24.254 187.086 24.238 187.043 24.227 186.988 cv
24.211 186.937 24.203 186.875 24.207 186.801 cv
24.203 186.73 24.211 186.672 24.227 186.621 cv
24.238 186.57 24.25 186.527 24.27 186.492 cv
24.285 186.461 24.309 186.437 24.332 186.418 cv
24.355 186.402 24.383 186.391 24.418 186.391 cv
26.004 186.391 li
26.004 180.625 li
24.535 181.496 li
24.461 181.543 24.402 181.566 24.359 181.57 cv
24.313 181.582 24.277 181.574 24.25 181.543 cv
24.219 181.52 24.199 181.477 24.191 181.418 cv
24.184 181.359 24.18 181.285 24.18 181.191 cv
24.18 181.129 24.18 181.07 24.188 181.023 cv
24.191 180.977 24.203 180.937 24.215 180.906 cv
24.223 180.875 24.238 180.848 24.262 180.824 cv
24.285 180.801 24.313 180.777 24.348 180.754 cv
26.098 179.637 li
26.109 179.625 26.129 179.613 26.156 179.605 cv
26.176 179.598 26.207 179.59 26.242 179.582 cv
26.273 179.574 26.313 179.57 26.363 179.57 cv
26.406 179.57 26.465 179.57 26.543 179.566 cv
26.633 179.57 26.711 179.574 26.777 179.578 cv
26.836 179.59 26.887 179.602 26.922 179.609 cv
26.953 179.625 26.977 179.641 26.992 179.66 cv
27.004 179.684 27.008 179.707 27.012 179.73 cv
27.012 186.391 li
28.379 186.391 li
28.406 186.391 28.438 186.402 28.469 186.418 cv
28.496 186.437 28.516 186.461 28.535 186.492 cv
28.551 186.527 28.566 186.57 28.574 186.621 cv
28.582 186.672 28.586 186.73 28.59 186.801 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.621 184.762 mo
34.621 185.168 34.551 185.531 34.414 185.848 cv
34.277 186.164 34.086 186.43 33.836 186.648 cv
33.586 186.867 33.285 187.031 32.941 187.141 cv
32.59 187.25 32.207 187.305 31.789 187.309 cv
31.551 187.305 31.328 187.289 31.121 187.258 cv
30.906 187.227 30.719 187.187 30.559 187.141 cv
30.391 187.094 30.258 187.047 30.156 186.996 cv
30.051 186.953 29.98 186.914 29.953 186.883 cv
29.922 186.855 29.902 186.832 29.891 186.805 cv
29.879 186.785 29.867 186.758 29.859 186.723 cv
29.844 186.691 29.84 186.648 29.84 186.598 cv
29.836 186.547 29.832 186.484 29.836 186.414 cv
29.832 186.352 29.836 186.293 29.844 186.238 cv
29.848 186.184 29.859 186.141 29.875 186.109 cv
29.891 186.078 29.906 186.055 29.93 186.035 cv
29.945 186.023 29.973 186.016 30.004 186.012 cv
30.043 186.016 30.102 186.039 30.184 186.086 cv
30.266 186.133 30.375 186.187 30.516 186.242 cv
30.652 186.301 30.824 186.352 31.031 186.402 cv
31.234 186.457 31.48 186.484 31.762 186.48 cv
32.023 186.484 32.262 186.453 32.484 186.387 cv
32.699 186.328 32.887 186.23 33.047 186.094 cv
33.203 185.965 33.328 185.797 33.418 185.594 cv
33.508 185.391 33.555 185.145 33.555 184.855 cv
33.555 184.613 33.516 184.402 33.441 184.215 cv
33.363 184.031 33.246 183.875 33.09 183.75 cv
32.93 183.629 32.73 183.539 32.488 183.477 cv
32.246 183.422 31.957 183.391 31.621 183.387 cv
31.383 183.391 31.176 183.402 31.008 183.422 cv
30.832 183.449 30.672 183.461 30.523 183.457 cv
30.41 183.461 30.332 183.434 30.289 183.379 cv
30.238 183.328 30.215 183.23 30.219 183.086 cv
30.219 179.996 li
30.215 179.871 30.246 179.773 30.309 179.711 cv
30.371 179.648 30.457 179.617 30.57 179.617 cv
33.93 179.617 li
33.961 179.617 33.988 179.629 34.02 179.645 cv
34.043 179.664 34.07 179.687 34.094 179.723 cv
34.113 179.762 34.125 179.809 34.137 179.859 cv
34.145 179.918 34.152 179.98 34.152 180.051 cv
34.152 180.191 34.133 180.301 34.094 180.379 cv
34.055 180.457 34 180.496 33.938 180.496 cv
31.227 180.496 li
31.227 182.621 li
31.355 182.605 31.492 182.594 31.633 182.59 cv
31.77 182.586 31.926 182.582 32.109 182.582 cv
32.523 182.582 32.891 182.637 33.203 182.738 cv
33.516 182.848 33.773 182.992 33.984 183.18 cv
34.191 183.367 34.352 183.598 34.461 183.867 cv
34.566 184.137 34.621 184.434 34.621 184.762 cv
cp
f
37.426 186.559 mo
37.426 186.84 37.379 187.023 37.285 187.117 cv
37.191 187.207 37.023 187.25 36.789 187.254 cv
36.551 187.25 36.391 187.207 36.301 187.117 cv
36.207 187.027 36.16 186.848 36.164 186.578 cv
36.16 186.301 36.207 186.117 36.301 186.023 cv
36.395 185.934 36.563 185.887 36.805 185.887 cv
37.039 185.887 37.199 185.934 37.289 186.023 cv
37.379 186.113 37.426 186.293 37.426 186.559 cv
cp
f
44.051 183.391 mo
44.047 183.973 44 184.504 43.914 184.984 cv
43.82 185.469 43.668 185.883 43.457 186.227 cv
43.238 186.57 42.961 186.84 42.621 187.027 cv
42.273 187.215 41.852 187.305 41.352 187.309 cv
40.875 187.305 40.473 187.223 40.148 187.055 cv
39.82 186.887 39.559 186.637 39.359 186.305 cv
39.156 185.977 39.012 185.57 38.934 185.086 cv
38.848 184.605 38.809 184.051 38.809 183.426 cv
38.809 182.848 38.855 182.32 38.949 181.836 cv
39.043 181.359 39.195 180.945 39.406 180.594 cv
39.617 180.25 39.895 179.98 40.238 179.789 cv
40.582 179.602 41.004 179.508 41.504 179.504 cv
41.98 179.508 42.383 179.594 42.711 179.762 cv
43.039 179.934 43.301 180.184 43.5 180.512 cv
43.699 180.844 43.84 181.25 43.926 181.73 cv
44.004 182.215 44.047 182.766 44.051 183.391 cv
cp
43.02 183.461 mo
43.016 183.086 43.004 182.746 42.98 182.441 cv
42.953 182.141 42.91 181.875 42.859 181.645 cv
42.805 181.418 42.738 181.223 42.652 181.051 cv
42.566 180.887 42.465 180.75 42.352 180.641 cv
42.23 180.539 42.098 180.461 41.949 180.406 cv
41.801 180.359 41.633 180.332 41.445 180.332 cv
41.113 180.332 40.844 180.41 40.637 180.566 cv
40.426 180.723 40.262 180.937 40.145 181.211 cv
40.027 181.484 39.945 181.805 39.902 182.172 cv
39.859 182.539 39.84 182.934 39.84 183.355 cv
39.84 183.926 39.867 184.41 39.926 184.801 cv
39.984 185.199 40.078 185.52 40.203 185.77 cv
40.328 186.02 40.488 186.203 40.691 186.316 cv
40.887 186.43 41.129 186.484 41.41 186.484 cv
41.629 186.484 41.82 186.449 41.988 186.379 cv
42.152 186.309 42.293 186.211 42.414 186.078 cv
42.531 185.949 42.633 185.789 42.711 185.605 cv
42.789 185.426 42.852 185.223 42.898 184.996 cv
42.945 184.773 42.977 184.535 42.992 184.273 cv
43.008 184.016 43.016 183.742 43.02 183.461 cv
cp
f
23.137 122.762 mo
47.121 122.762 li
47.121 137.41 li
23.137 137.41 li
cp
0 0 0 0 cmyk
ef
28.59 133.781 mo
28.586 133.855 28.582 133.918 28.574 133.969 cv
28.563 134.023 28.547 134.066 28.527 134.094 cv
28.504 134.129 28.48 134.152 28.457 134.16 cv
28.434 134.176 28.406 134.18 28.379 134.18 cv
24.418 134.18 li
24.391 134.18 24.367 134.176 24.344 134.16 cv
24.32 134.152 24.297 134.129 24.277 134.094 cv
24.254 134.066 24.238 134.023 24.227 133.969 cv
24.211 133.918 24.203 133.855 24.207 133.781 cv
24.203 133.711 24.211 133.652 24.227 133.602 cv
24.238 133.551 24.25 133.508 24.27 133.473 cv
24.285 133.441 24.309 133.418 24.332 133.398 cv
24.355 133.383 24.383 133.371 24.418 133.371 cv
26.004 133.371 li
26.004 127.605 li
24.535 128.477 li
24.461 128.523 24.402 128.547 24.359 128.551 cv
24.313 128.562 24.277 128.555 24.25 128.523 cv
24.219 128.5 24.199 128.457 24.191 128.398 cv
24.184 128.34 24.18 128.266 24.18 128.172 cv
24.18 128.109 24.18 128.051 24.188 128.004 cv
24.191 127.957 24.203 127.918 24.215 127.887 cv
24.223 127.855 24.238 127.828 24.262 127.805 cv
24.285 127.781 24.313 127.758 24.348 127.734 cv
26.098 126.617 li
26.109 126.605 26.129 126.594 26.156 126.586 cv
26.176 126.578 26.207 126.57 26.242 126.562 cv
26.273 126.555 26.313 126.551 26.363 126.551 cv
26.406 126.551 26.465 126.551 26.543 126.547 cv
26.633 126.551 26.711 126.555 26.777 126.559 cv
26.836 126.57 26.887 126.582 26.922 126.59 cv
26.953 126.605 26.977 126.621 26.992 126.641 cv
27.004 126.664 27.008 126.687 27.012 126.711 cv
27.012 133.371 li
28.379 133.371 li
28.406 133.371 28.438 133.383 28.469 133.398 cv
28.496 133.418 28.516 133.441 28.535 133.473 cv
28.551 133.508 28.566 133.551 28.574 133.602 cv
28.582 133.652 28.586 133.711 28.59 133.781 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.766 127.031 mo
34.762 127.102 34.758 127.168 34.758 127.223 cv
34.75 127.281 34.742 127.336 34.734 127.387 cv
34.719 127.441 34.707 127.492 34.691 127.539 cv
34.676 127.59 34.656 127.641 34.633 127.695 cv
31.902 133.984 li
31.883 134.035 31.855 134.074 31.828 134.102 cv
31.797 134.133 31.762 134.156 31.715 134.172 cv
31.668 134.187 31.609 134.195 31.543 134.203 cv
31.469 134.211 31.383 134.215 31.289 134.215 cv
31.148 134.215 31.047 134.207 30.977 134.195 cv
30.902 134.184 30.848 134.168 30.816 134.141 cv
30.781 134.117 30.766 134.086 30.77 134.047 cv
30.773 134.012 30.789 133.969 30.813 133.914 cv
33.684 127.484 li
30.047 127.484 li
29.969 127.488 29.914 127.449 29.875 127.367 cv
29.836 127.293 29.816 127.184 29.82 127.039 cv
29.816 126.965 29.82 126.898 29.836 126.844 cv
29.844 126.789 29.859 126.746 29.879 126.707 cv
29.898 126.672 29.922 126.645 29.949 126.625 cv
29.977 126.609 30.008 126.598 30.047 126.598 cv
34.461 126.598 li
34.516 126.598 34.563 126.605 34.605 126.617 cv
34.645 126.629 34.676 126.652 34.699 126.687 cv
34.719 126.723 34.738 126.766 34.75 126.82 cv
34.758 126.875 34.762 126.945 34.766 127.031 cv
cp
f
37.426 133.539 mo
37.426 133.82 37.379 134.004 37.285 134.098 cv
37.191 134.187 37.023 134.23 36.789 134.234 cv
36.551 134.23 36.391 134.187 36.301 134.098 cv
36.207 134.008 36.16 133.828 36.164 133.559 cv
36.16 133.281 36.207 133.098 36.301 133.004 cv
36.395 132.914 36.563 132.867 36.805 132.867 cv
37.039 132.867 37.199 132.914 37.289 133.004 cv
37.379 133.094 37.426 133.273 37.426 133.539 cv
cp
f
43.766 131.742 mo
43.766 132.148 43.695 132.512 43.559 132.828 cv
43.422 133.145 43.23 133.41 42.98 133.629 cv
42.73 133.848 42.43 134.012 42.086 134.121 cv
41.734 134.23 41.352 134.285 40.934 134.289 cv
40.695 134.285 40.473 134.27 40.266 134.238 cv
40.051 134.207 39.863 134.168 39.703 134.121 cv
39.535 134.074 39.402 134.027 39.301 133.977 cv
39.195 133.934 39.125 133.895 39.098 133.863 cv
39.066 133.836 39.047 133.812 39.035 133.785 cv
39.023 133.766 39.012 133.738 39.004 133.703 cv
38.988 133.672 38.984 133.629 38.984 133.578 cv
38.98 133.527 38.977 133.465 38.98 133.395 cv
38.977 133.332 38.98 133.273 38.988 133.219 cv
38.992 133.164 39.004 133.121 39.02 133.09 cv
39.035 133.059 39.051 133.035 39.074 133.016 cv
39.09 133.004 39.117 132.996 39.148 132.992 cv
39.188 132.996 39.246 133.02 39.328 133.066 cv
39.41 133.113 39.52 133.168 39.66 133.223 cv
39.797 133.281 39.969 133.332 40.176 133.383 cv
40.379 133.437 40.625 133.465 40.906 133.461 cv
41.168 133.465 41.406 133.434 41.629 133.367 cv
41.844 133.309 42.031 133.211 42.191 133.074 cv
42.348 132.945 42.473 132.777 42.563 132.574 cv
42.652 132.371 42.699 132.125 42.699 131.836 cv
42.699 131.594 42.66 131.383 42.586 131.195 cv
42.508 131.012 42.391 130.855 42.234 130.73 cv
42.074 130.609 41.875 130.52 41.633 130.457 cv
41.391 130.402 41.102 130.371 40.766 130.367 cv
40.527 130.371 40.32 130.383 40.152 130.402 cv
39.977 130.43 39.816 130.441 39.668 130.437 cv
39.555 130.441 39.477 130.414 39.434 130.359 cv
39.383 130.309 39.359 130.211 39.363 130.066 cv
39.363 126.977 li
39.359 126.852 39.391 126.754 39.453 126.691 cv
39.516 126.629 39.602 126.598 39.715 126.598 cv
43.074 126.598 li
43.105 126.598 43.133 126.609 43.164 126.625 cv
43.188 126.645 43.215 126.668 43.238 126.703 cv
43.258 126.742 43.27 126.789 43.281 126.84 cv
43.289 126.898 43.297 126.961 43.297 127.031 cv
43.297 127.172 43.277 127.281 43.238 127.359 cv
43.199 127.437 43.145 127.477 43.082 127.477 cv
40.371 127.477 li
40.371 129.602 li
40.5 129.586 40.637 129.574 40.777 129.57 cv
40.914 129.566 41.07 129.562 41.254 129.562 cv
41.668 129.562 42.035 129.617 42.348 129.719 cv
42.66 129.828 42.918 129.973 43.129 130.16 cv
43.336 130.348 43.496 130.578 43.605 130.848 cv
43.711 131.117 43.766 131.414 43.766 131.742 cv
cp
f
23.137 69.762 mo
47.121 69.762 li
47.121 84.41 li
23.137 84.41 li
cp
0 0 0 0 cmyk
ef
28.586 80.758 mo
28.586 80.828 28.578 80.891 28.57 80.945 cv
28.555 81 28.543 81.047 28.527 81.082 cv
28.512 81.121 28.488 81.148 28.457 81.164 cv
28.426 81.184 28.395 81.191 28.363 81.191 cv
24.164 81.191 li
24.105 81.191 24.059 81.187 24.02 81.172 cv
23.977 81.16 23.941 81.137 23.914 81.102 cv
23.883 81.074 23.859 81.027 23.848 80.969 cv
23.832 80.91 23.828 80.84 23.828 80.75 cv
23.828 80.676 23.828 80.605 23.836 80.547 cv
23.84 80.488 23.855 80.437 23.875 80.391 cv
23.895 80.348 23.918 80.305 23.953 80.258 cv
23.98 80.215 24.02 80.164 24.07 80.109 cv
25.59 78.551 li
25.938 78.191 26.219 77.867 26.434 77.582 cv
26.641 77.297 26.805 77.039 26.922 76.801 cv
27.039 76.57 27.113 76.355 27.152 76.16 cv
27.184 75.969 27.203 75.789 27.207 75.621 cv
27.203 75.453 27.176 75.293 27.121 75.141 cv
27.063 74.992 26.98 74.859 26.875 74.746 cv
26.766 74.633 26.629 74.543 26.473 74.477 cv
26.309 74.41 26.125 74.379 25.914 74.375 cv
25.668 74.379 25.445 74.41 25.25 74.477 cv
25.051 74.543 24.879 74.617 24.734 74.691 cv
24.586 74.773 24.465 74.844 24.367 74.91 cv
24.266 74.977 24.191 75.012 24.145 75.008 cv
24.117 75.012 24.09 75.004 24.07 74.984 cv
24.043 74.973 24.027 74.945 24.016 74.91 cv
24 74.875 23.988 74.828 23.98 74.77 cv
23.973 74.711 23.969 74.641 23.969 74.559 cv
23.969 74.5 23.969 74.449 23.973 74.406 cv
23.977 74.363 23.984 74.328 23.996 74.293 cv
24.004 74.266 24.016 74.234 24.035 74.207 cv
24.047 74.18 24.078 74.145 24.129 74.102 cv
24.172 74.062 24.254 74.008 24.371 73.934 cv
24.484 73.867 24.629 73.797 24.805 73.727 cv
24.977 73.66 25.168 73.605 25.379 73.555 cv
25.586 73.512 25.809 73.488 26.043 73.484 cv
26.41 73.488 26.73 73.539 27.008 73.641 cv
27.281 73.746 27.512 73.887 27.695 74.062 cv
27.875 74.246 28.008 74.457 28.102 74.691 cv
28.188 74.934 28.234 75.187 28.238 75.457 cv
28.234 75.703 28.211 75.945 28.172 76.184 cv
28.125 76.426 28.035 76.687 27.898 76.965 cv
27.758 77.246 27.559 77.555 27.297 77.898 cv
27.035 78.242 26.688 78.637 26.254 79.078 cv
25.051 80.336 li
28.355 80.336 li
28.383 80.336 28.414 80.348 28.445 80.363 cv
28.477 80.383 28.5 80.406 28.523 80.441 cv
28.539 80.477 28.555 80.523 28.57 80.574 cv
28.578 80.629 28.586 80.687 28.586 80.758 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.934 77.375 mo
34.93 77.961 34.883 78.492 34.797 78.973 cv
34.703 79.457 34.551 79.871 34.34 80.215 cv
34.121 80.562 33.844 80.832 33.5 81.02 cv
33.156 81.211 32.73 81.301 32.23 81.305 cv
31.746 81.301 31.344 81.219 31.02 81.051 cv
30.691 80.879 30.43 80.629 30.23 80.297 cv
30.031 79.969 29.887 79.562 29.805 79.078 cv
29.719 78.598 29.68 78.043 29.68 77.41 cv
29.68 76.836 29.727 76.305 29.82 75.816 cv
29.914 75.336 30.066 74.918 30.277 74.57 cv
30.488 74.227 30.766 73.961 31.113 73.77 cv
31.453 73.582 31.875 73.488 32.383 73.484 cv
32.859 73.488 33.262 73.57 33.59 73.738 cv
33.914 73.91 34.18 74.16 34.383 74.488 cv
34.582 74.82 34.723 75.23 34.809 75.711 cv
34.887 76.199 34.93 76.754 34.934 77.375 cv
cp
33.902 77.445 mo
33.898 77.07 33.883 76.73 33.859 76.426 cv
33.828 76.129 33.789 75.859 33.738 75.625 cv
33.684 75.395 33.617 75.199 33.535 75.031 cv
33.449 74.867 33.348 74.73 33.23 74.621 cv
33.113 74.516 32.977 74.434 32.828 74.383 cv
32.676 74.336 32.508 74.312 32.324 74.309 cv
31.988 74.312 31.719 74.391 31.512 74.547 cv
31.301 74.703 31.137 74.918 31.02 75.191 cv
30.898 75.465 30.816 75.789 30.777 76.156 cv
30.73 76.527 30.711 76.922 30.715 77.34 cv
30.711 77.91 30.738 78.391 30.801 78.789 cv
30.855 79.187 30.949 79.512 31.082 79.758 cv
31.207 80.012 31.371 80.195 31.566 80.305 cv
31.762 80.422 32 80.477 32.289 80.477 cv
32.504 80.477 32.695 80.441 32.863 80.371 cv
33.027 80.301 33.172 80.203 33.293 80.07 cv
33.41 79.941 33.508 79.781 33.59 79.598 cv
33.664 79.414 33.727 79.211 33.777 78.984 cv
33.82 78.762 33.855 78.52 33.875 78.258 cv
33.891 78 33.898 77.73 33.902 77.445 cv
cp
f
37.43 80.551 mo
37.426 80.832 37.379 81.016 37.289 81.109 cv
37.195 81.199 37.027 81.242 36.789 81.246 cv
36.551 81.242 36.391 81.199 36.301 81.109 cv
36.211 81.02 36.164 80.84 36.168 80.57 cv
36.164 80.293 36.211 80.109 36.305 80.016 cv
36.395 79.926 36.563 79.879 36.809 79.875 cv
37.039 79.879 37.199 79.926 37.293 80.012 cv
37.379 80.105 37.426 80.285 37.43 80.551 cv
cp
f
44.059 77.375 mo
44.055 77.961 44.008 78.492 43.922 78.973 cv
43.828 79.457 43.676 79.871 43.465 80.215 cv
43.246 80.562 42.969 80.832 42.625 81.02 cv
42.281 81.211 41.855 81.301 41.355 81.305 cv
40.871 81.301 40.469 81.219 40.145 81.051 cv
39.816 80.879 39.555 80.629 39.355 80.297 cv
39.156 79.969 39.012 79.562 38.93 79.078 cv
38.844 78.598 38.805 78.043 38.805 77.41 cv
38.805 76.836 38.852 76.305 38.945 75.816 cv
39.039 75.336 39.191 74.918 39.402 74.57 cv
39.613 74.227 39.891 73.961 40.238 73.77 cv
40.578 73.582 41 73.488 41.508 73.484 cv
41.984 73.488 42.387 73.57 42.715 73.738 cv
43.039 73.91 43.305 74.16 43.508 74.488 cv
43.707 74.82 43.848 75.23 43.934 75.711 cv
44.012 76.199 44.055 76.754 44.059 77.375 cv
cp
43.027 77.445 mo
43.023 77.07 43.008 76.73 42.984 76.426 cv
42.953 76.129 42.914 75.859 42.863 75.625 cv
42.809 75.395 42.742 75.199 42.66 75.031 cv
42.574 74.867 42.473 74.73 42.355 74.621 cv
42.238 74.516 42.102 74.434 41.953 74.383 cv
41.801 74.336 41.633 74.312 41.449 74.309 cv
41.113 74.312 40.844 74.391 40.637 74.547 cv
40.426 74.703 40.262 74.918 40.145 75.191 cv
40.023 75.465 39.941 75.789 39.902 76.156 cv
39.855 76.527 39.836 76.922 39.84 77.34 cv
39.836 77.91 39.863 78.391 39.926 78.789 cv
39.98 79.187 40.074 79.512 40.207 79.758 cv
40.332 80.012 40.496 80.195 40.691 80.305 cv
40.887 80.422 41.125 80.477 41.414 80.477 cv
41.629 80.477 41.82 80.441 41.988 80.371 cv
42.152 80.301 42.297 80.203 42.418 80.07 cv
42.535 79.941 42.633 79.781 42.715 79.598 cv
42.789 79.414 42.852 79.211 42.902 78.984 cv
42.945 78.762 42.98 78.52 43 78.258 cv
43.016 78 43.023 77.73 43.027 77.445 cv
cp
f
23.137 16.762 mo
47.121 16.762 li
47.121 31.41 li
23.137 31.41 li
cp
0 0 0 0 cmyk
ef
28.574 27.746 mo
28.574 27.816 28.566 27.879 28.559 27.934 cv
28.543 27.988 28.531 28.035 28.516 28.07 cv
28.5 28.109 28.477 28.137 28.445 28.152 cv
28.414 28.172 28.383 28.18 28.352 28.18 cv
24.16 28.18 li
24.105 28.18 24.059 28.176 24.02 28.16 cv
23.977 28.152 23.941 28.129 23.914 28.094 cv
23.883 28.066 23.859 28.02 23.848 27.957 cv
23.832 27.898 23.828 27.828 23.828 27.742 cv
23.828 27.668 23.828 27.598 23.836 27.535 cv
23.84 27.477 23.855 27.426 23.875 27.379 cv
23.895 27.336 23.918 27.293 23.949 27.246 cv
23.977 27.207 24.016 27.156 24.07 27.102 cv
25.586 25.543 li
25.934 25.184 26.211 24.863 26.426 24.578 cv
26.637 24.293 26.801 24.031 26.918 23.797 cv
27.027 23.562 27.105 23.352 27.145 23.16 cv
27.18 22.969 27.195 22.789 27.199 22.617 cv
27.195 22.453 27.168 22.293 27.113 22.141 cv
27.055 21.992 26.973 21.859 26.867 21.746 cv
26.758 21.637 26.625 21.547 26.465 21.477 cv
26.301 21.41 26.113 21.379 25.91 21.375 cv
25.66 21.379 25.441 21.41 25.246 21.477 cv
25.051 21.547 24.879 21.621 24.73 21.695 cv
24.582 21.777 24.457 21.848 24.363 21.91 cv
24.262 21.977 24.191 22.012 24.145 22.008 cv
24.113 22.012 24.086 22.004 24.066 21.984 cv
24.043 21.973 24.023 21.945 24.012 21.91 cv
23.996 21.879 23.988 21.832 23.98 21.77 cv
23.973 21.711 23.969 21.641 23.969 21.559 cv
23.969 21.5 23.969 21.449 23.973 21.406 cv
23.977 21.367 23.984 21.332 23.996 21.297 cv
24.004 21.27 24.016 21.238 24.035 21.207 cv
24.047 21.18 24.078 21.148 24.129 21.105 cv
24.172 21.066 24.254 21.008 24.371 20.937 cv
24.484 20.867 24.629 20.801 24.805 20.73 cv
24.977 20.664 25.168 20.605 25.379 20.555 cv
25.586 20.512 25.805 20.488 26.035 20.484 cv
26.402 20.488 26.723 20.539 27 20.641 cv
27.273 20.746 27.504 20.887 27.684 21.066 cv
27.863 21.246 28 21.457 28.094 21.695 cv
28.184 21.934 28.227 22.187 28.23 22.453 cv
28.227 22.703 28.207 22.945 28.164 23.18 cv
28.117 23.422 28.023 23.68 27.891 23.957 cv
27.75 24.238 27.551 24.551 27.289 24.891 cv
27.027 25.234 26.68 25.625 26.246 26.07 cv
25.047 27.324 li
28.348 27.324 li
28.375 27.324 28.406 27.336 28.438 27.352 cv
28.465 27.371 28.488 27.395 28.512 27.43 cv
28.527 27.469 28.543 27.516 28.559 27.562 cv
28.566 27.617 28.574 27.676 28.574 27.746 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.656 27.746 mo
34.656 27.816 34.648 27.879 34.641 27.934 cv
34.625 27.988 34.613 28.035 34.598 28.07 cv
34.582 28.109 34.559 28.137 34.527 28.152 cv
34.496 28.172 34.465 28.18 34.434 28.18 cv
30.242 28.18 li
30.188 28.18 30.141 28.176 30.102 28.16 cv
30.059 28.152 30.023 28.129 29.996 28.094 cv
29.965 28.066 29.941 28.02 29.93 27.957 cv
29.914 27.898 29.91 27.828 29.91 27.742 cv
29.91 27.668 29.91 27.598 29.918 27.535 cv
29.922 27.477 29.938 27.426 29.957 27.379 cv
29.977 27.336 30 27.293 30.031 27.246 cv
30.059 27.207 30.098 27.156 30.152 27.102 cv
31.668 25.543 li
32.016 25.184 32.293 24.863 32.508 24.578 cv
32.719 24.293 32.883 24.031 33 23.797 cv
33.109 23.562 33.188 23.352 33.227 23.16 cv
33.262 22.969 33.277 22.789 33.281 22.617 cv
33.277 22.453 33.25 22.293 33.195 22.141 cv
33.137 21.992 33.055 21.859 32.949 21.746 cv
32.84 21.637 32.707 21.547 32.547 21.477 cv
32.383 21.41 32.195 21.379 31.992 21.375 cv
31.742 21.379 31.523 21.41 31.328 21.477 cv
31.133 21.547 30.961 21.621 30.813 21.695 cv
30.664 21.777 30.539 21.848 30.445 21.91 cv
30.344 21.977 30.273 22.012 30.227 22.008 cv
30.195 22.012 30.168 22.004 30.148 21.984 cv
30.125 21.973 30.105 21.945 30.094 21.91 cv
30.078 21.879 30.07 21.832 30.063 21.77 cv
30.055 21.711 30.051 21.641 30.051 21.559 cv
30.051 21.5 30.051 21.449 30.055 21.406 cv
30.059 21.367 30.066 21.332 30.078 21.297 cv
30.086 21.27 30.098 21.238 30.117 21.207 cv
30.129 21.18 30.16 21.148 30.211 21.105 cv
30.254 21.066 30.336 21.008 30.453 20.937 cv
30.566 20.867 30.711 20.801 30.887 20.73 cv
31.059 20.664 31.25 20.605 31.461 20.555 cv
31.668 20.512 31.887 20.488 32.117 20.484 cv
32.484 20.488 32.805 20.539 33.082 20.641 cv
33.355 20.746 33.586 20.887 33.766 21.066 cv
33.945 21.246 34.082 21.457 34.176 21.695 cv
34.266 21.934 34.309 22.187 34.313 22.453 cv
34.309 22.703 34.289 22.945 34.246 23.18 cv
34.199 23.422 34.105 23.68 33.973 23.957 cv
33.832 24.238 33.633 24.551 33.371 24.891 cv
33.109 25.234 32.762 25.625 32.328 26.07 cv
31.129 27.324 li
34.43 27.324 li
34.457 27.324 34.488 27.336 34.52 27.352 cv
34.547 27.371 34.57 27.395 34.594 27.43 cv
34.609 27.469 34.625 27.516 34.641 27.562 cv
34.648 27.617 34.656 27.676 34.656 27.746 cv
cp
f
37.426 27.539 mo
37.426 27.82 37.379 28.004 37.285 28.098 cv
37.191 28.187 37.023 28.23 36.789 28.234 cv
36.551 28.23 36.391 28.187 36.301 28.098 cv
36.207 28.008 36.16 27.828 36.164 27.559 cv
36.16 27.281 36.207 27.098 36.301 27.004 cv
36.395 26.914 36.563 26.867 36.805 26.867 cv
37.039 26.867 37.199 26.914 37.289 27.004 cv
37.379 27.094 37.426 27.273 37.426 27.539 cv
cp
f
43.766 25.742 mo
43.766 26.148 43.695 26.512 43.559 26.828 cv
43.422 27.145 43.23 27.41 42.98 27.629 cv
42.73 27.848 42.43 28.012 42.086 28.121 cv
41.734 28.23 41.352 28.285 40.934 28.289 cv
40.695 28.285 40.473 28.27 40.266 28.238 cv
40.051 28.207 39.863 28.168 39.703 28.121 cv
39.535 28.074 39.402 28.027 39.301 27.977 cv
39.195 27.934 39.125 27.895 39.098 27.863 cv
39.066 27.836 39.047 27.812 39.035 27.785 cv
39.023 27.766 39.012 27.738 39.004 27.703 cv
38.988 27.672 38.984 27.629 38.984 27.578 cv
38.98 27.527 38.977 27.465 38.98 27.395 cv
38.977 27.332 38.98 27.273 38.988 27.219 cv
38.992 27.164 39.004 27.121 39.02 27.09 cv
39.035 27.059 39.051 27.035 39.074 27.016 cv
39.09 27.004 39.117 26.996 39.148 26.992 cv
39.188 26.996 39.246 27.02 39.328 27.066 cv
39.41 27.113 39.52 27.168 39.66 27.223 cv
39.797 27.281 39.969 27.332 40.176 27.383 cv
40.379 27.437 40.625 27.465 40.906 27.461 cv
41.168 27.465 41.406 27.434 41.629 27.367 cv
41.844 27.309 42.031 27.211 42.191 27.074 cv
42.348 26.945 42.473 26.777 42.563 26.574 cv
42.652 26.371 42.699 26.125 42.699 25.836 cv
42.699 25.594 42.66 25.383 42.586 25.195 cv
42.508 25.012 42.391 24.855 42.234 24.73 cv
42.074 24.609 41.875 24.52 41.633 24.457 cv
41.391 24.402 41.102 24.371 40.766 24.367 cv
40.527 24.371 40.32 24.383 40.152 24.402 cv
39.977 24.43 39.816 24.441 39.668 24.437 cv
39.555 24.441 39.477 24.414 39.434 24.359 cv
39.383 24.309 39.359 24.211 39.363 24.066 cv
39.363 20.977 li
39.359 20.852 39.391 20.754 39.453 20.691 cv
39.516 20.629 39.602 20.598 39.715 20.598 cv
43.074 20.598 li
43.105 20.598 43.133 20.609 43.164 20.625 cv
43.188 20.645 43.215 20.668 43.238 20.703 cv
43.258 20.742 43.27 20.789 43.281 20.84 cv
43.289 20.898 43.297 20.961 43.297 21.031 cv
43.297 21.172 43.277 21.281 43.238 21.359 cv
43.199 21.437 43.145 21.477 43.082 21.477 cv
40.371 21.477 li
40.371 23.602 li
40.5 23.586 40.637 23.574 40.777 23.57 cv
40.914 23.566 41.07 23.562 41.254 23.562 cv
41.668 23.562 42.035 23.617 42.348 23.719 cv
42.66 23.828 42.918 23.973 43.129 24.16 cv
43.336 24.348 43.496 24.578 43.605 24.848 cv
43.711 25.117 43.766 25.414 43.766 25.742 cv
cp
f
60.648 520.449 mo
60.645 520.523 60.641 520.586 60.633 520.637 cv
60.621 520.691 60.605 520.734 60.586 520.762 cv
60.563 520.797 60.539 520.82 60.516 520.828 cv
60.492 520.844 60.465 520.848 60.438 520.848 cv
56.477 520.848 li
56.449 520.848 56.426 520.844 56.402 520.828 cv
56.379 520.82 56.355 520.797 56.336 520.762 cv
56.313 520.734 56.297 520.691 56.285 520.637 cv
56.27 520.586 56.262 520.523 56.266 520.449 cv
56.262 520.379 56.27 520.32 56.285 520.27 cv
56.297 520.219 56.309 520.176 56.328 520.141 cv
56.344 520.109 56.367 520.086 56.391 520.066 cv
56.414 520.051 56.441 520.039 56.477 520.039 cv
58.063 520.039 li
58.063 514.273 li
56.594 515.145 li
56.52 515.191 56.461 515.215 56.418 515.219 cv
56.371 515.23 56.336 515.223 56.309 515.191 cv
56.277 515.168 56.258 515.125 56.25 515.066 cv
56.242 515.008 56.238 514.934 56.238 514.84 cv
56.238 514.777 56.238 514.719 56.246 514.672 cv
56.25 514.625 56.262 514.586 56.273 514.555 cv
56.281 514.523 56.297 514.496 56.32 514.473 cv
56.344 514.449 56.371 514.426 56.406 514.402 cv
58.156 513.285 li
58.168 513.273 58.188 513.262 58.215 513.254 cv
58.234 513.246 58.266 513.238 58.301 513.23 cv
58.332 513.223 58.371 513.219 58.422 513.219 cv
58.465 513.219 58.523 513.219 58.602 513.215 cv
58.691 513.219 58.77 513.223 58.836 513.227 cv
58.895 513.238 58.945 513.25 58.98 513.258 cv
59.012 513.273 59.035 513.289 59.051 513.309 cv
59.063 513.332 59.066 513.355 59.07 513.379 cv
59.07 520.039 li
60.438 520.039 li
60.465 520.039 60.496 520.051 60.527 520.066 cv
60.555 520.086 60.574 520.109 60.594 520.141 cv
60.609 520.176 60.625 520.219 60.633 520.27 cv
60.641 520.32 60.645 520.379 60.648 520.449 cv
cp
f
129.543 520.414 mo
129.543 520.484 129.535 520.547 129.527 520.602 cv
129.512 520.656 129.5 520.703 129.484 520.738 cv
129.469 520.777 129.445 520.805 129.414 520.82 cv
129.383 520.84 129.352 520.848 129.32 520.848 cv
125.129 520.848 li
125.074 520.848 125.027 520.844 124.988 520.828 cv
124.945 520.82 124.91 520.797 124.883 520.762 cv
124.852 520.734 124.828 520.687 124.816 520.625 cv
124.801 520.566 124.797 520.496 124.797 520.41 cv
124.797 520.336 124.797 520.266 124.805 520.203 cv
124.809 520.145 124.824 520.094 124.844 520.047 cv
124.863 520.004 124.887 519.961 124.918 519.914 cv
124.945 519.875 124.984 519.824 125.039 519.77 cv
126.555 518.211 li
126.902 517.852 127.18 517.531 127.395 517.246 cv
127.605 516.961 127.77 516.699 127.887 516.465 cv
127.996 516.23 128.074 516.02 128.113 515.828 cv
128.148 515.637 128.164 515.457 128.168 515.285 cv
128.164 515.121 128.137 514.961 128.082 514.809 cv
128.023 514.66 127.941 514.527 127.836 514.414 cv
127.727 514.305 127.594 514.215 127.434 514.145 cv
127.27 514.078 127.082 514.047 126.879 514.043 cv
126.629 514.047 126.41 514.078 126.215 514.145 cv
126.02 514.215 125.848 514.289 125.699 514.363 cv
125.551 514.445 125.426 514.516 125.332 514.578 cv
125.23 514.645 125.16 514.68 125.113 514.676 cv
125.082 514.68 125.055 514.672 125.035 514.652 cv
125.012 514.641 124.992 514.613 124.98 514.578 cv
124.965 514.547 124.957 514.5 124.949 514.437 cv
124.941 514.379 124.938 514.309 124.938 514.227 cv
124.938 514.168 124.938 514.117 124.941 514.074 cv
124.945 514.035 124.953 514 124.965 513.965 cv
124.973 513.937 124.984 513.906 125.004 513.875 cv
125.016 513.848 125.047 513.816 125.098 513.773 cv
125.141 513.734 125.223 513.676 125.34 513.605 cv
125.453 513.535 125.598 513.469 125.773 513.398 cv
125.945 513.332 126.137 513.273 126.348 513.223 cv
126.555 513.18 126.773 513.156 127.004 513.152 cv
127.371 513.156 127.691 513.207 127.969 513.309 cv
128.242 513.414 128.473 513.555 128.652 513.734 cv
128.832 513.914 128.969 514.125 129.063 514.363 cv
129.152 514.602 129.195 514.855 129.199 515.121 cv
129.195 515.371 129.176 515.613 129.133 515.848 cv
129.086 516.09 128.992 516.348 128.859 516.625 cv
128.719 516.906 128.52 517.219 128.258 517.559 cv
127.996 517.902 127.648 518.293 127.215 518.738 cv
126.016 519.992 li
129.316 519.992 li
129.344 519.992 129.375 520.004 129.406 520.02 cv
129.434 520.039 129.457 520.062 129.48 520.098 cv
129.496 520.137 129.512 520.184 129.527 520.23 cv
129.535 520.285 129.543 520.344 129.543 520.414 cv
cp
f
198.766 518.691 mo
198.762 518.824 198.742 518.926 198.707 518.996 cv
198.664 519.07 198.609 519.109 198.547 519.105 cv
197.688 519.105 li
197.688 520.699 li
197.684 520.734 197.676 520.762 197.664 520.781 cv
197.645 520.805 197.617 520.82 197.578 520.836 cv
197.539 520.852 197.484 520.863 197.422 520.871 cv
197.355 520.879 197.273 520.883 197.176 520.883 cv
197.074 520.883 196.996 520.879 196.934 520.871 cv
196.871 520.863 196.82 520.852 196.781 520.836 cv
196.742 520.82 196.715 520.805 196.699 520.781 cv
196.684 520.762 196.676 520.734 196.68 520.699 cv
196.68 519.105 li
193.578 519.105 li
193.531 519.109 193.496 519.102 193.465 519.09 cv
193.434 519.082 193.402 519.062 193.379 519.027 cv
193.348 519 193.332 518.953 193.324 518.891 cv
193.316 518.832 193.313 518.758 193.313 518.66 cv
193.313 518.59 193.313 518.523 193.316 518.465 cv
193.32 518.406 193.328 518.352 193.34 518.305 cv
193.352 518.258 193.367 518.211 193.387 518.164 cv
193.406 518.117 193.43 518.07 193.457 518.02 cv
196.16 513.41 li
196.18 513.383 196.207 513.355 196.246 513.328 cv
196.281 513.309 196.332 513.289 196.395 513.27 cv
196.453 513.258 196.523 513.246 196.613 513.238 cv
196.699 513.234 196.805 513.23 196.926 513.23 cv
197.055 513.23 197.168 513.238 197.266 513.246 cv
197.363 513.262 197.441 513.273 197.504 513.285 cv
197.559 513.305 197.605 513.324 197.641 513.348 cv
197.668 513.371 197.684 513.402 197.688 513.434 cv
197.688 518.277 li
198.547 518.277 li
198.609 518.281 198.664 518.316 198.703 518.379 cv
198.742 518.449 198.762 518.551 198.766 518.691 cv
cp
196.68 514.113 mo
196.672 514.113 li
194.234 518.277 li
196.68 518.277 li
cp
f
267.52 518.395 mo
267.516 518.727 267.465 519.047 267.367 519.359 cv
267.262 519.672 267.105 519.945 266.898 520.18 cv
266.684 520.414 266.418 520.605 266.094 520.746 cv
265.766 520.887 265.383 520.953 264.945 520.957 cv
264.629 520.953 264.348 520.918 264.109 520.84 cv
263.863 520.766 263.652 520.652 263.477 520.508 cv
263.293 520.367 263.145 520.191 263.027 519.977 cv
262.906 519.77 262.809 519.527 262.738 519.254 cv
262.66 518.984 262.609 518.691 262.582 518.367 cv
262.547 518.051 262.531 517.707 262.535 517.34 cv
262.531 517.016 262.551 516.687 262.59 516.355 cv
262.625 516.023 262.688 515.703 262.777 515.395 cv
262.863 515.086 262.984 514.797 263.141 514.523 cv
263.297 514.254 263.488 514.016 263.723 513.812 cv
263.953 513.613 264.234 513.453 264.559 513.336 cv
264.879 513.219 265.254 513.16 265.691 513.16 cv
265.832 513.16 265.98 513.172 266.129 513.187 cv
266.277 513.211 266.414 513.234 266.539 513.258 cv
266.664 513.289 266.77 513.32 266.855 513.355 cv
266.941 513.391 266.996 513.418 267.023 513.441 cv
267.051 513.465 267.07 513.488 267.086 513.512 cv
267.094 513.535 267.105 513.562 267.117 513.594 cv
267.121 513.625 267.129 513.66 267.137 513.691 cv
267.141 513.73 267.141 513.773 267.145 513.828 cv
267.141 513.898 267.141 513.961 267.141 514.012 cv
267.137 514.062 267.129 514.102 267.117 514.133 cv
267.102 514.164 267.082 514.187 267.063 514.203 cv
267.039 514.219 267.012 514.227 266.98 514.227 cv
266.934 514.227 266.875 514.215 266.801 514.187 cv
266.727 514.16 266.637 514.129 266.531 514.094 cv
266.426 514.062 266.297 514.031 266.148 514.004 cv
265.996 513.98 265.824 513.969 265.625 513.965 cv
265.262 513.969 264.949 514.043 264.688 514.187 cv
264.422 514.34 264.207 514.539 264.043 514.785 cv
263.879 515.039 263.754 515.328 263.676 515.656 cv
263.594 515.984 263.551 516.328 263.539 516.687 cv
263.641 516.629 263.754 516.57 263.883 516.512 cv
264.008 516.457 264.145 516.406 264.297 516.355 cv
264.445 516.312 264.605 516.273 264.773 516.242 cv
264.941 516.211 265.121 516.195 265.316 516.195 cv
265.723 516.195 266.07 516.254 266.352 516.363 cv
266.633 516.477 266.859 516.629 267.031 516.824 cv
267.203 517.023 267.328 517.258 267.406 517.523 cv
267.48 517.797 267.516 518.086 267.52 518.395 cv
cp
266.496 518.488 mo
266.492 518.262 266.469 518.055 266.43 517.867 cv
266.383 517.684 266.309 517.527 266.203 517.398 cv
266.098 517.27 265.957 517.168 265.781 517.098 cv
265.605 517.027 265.391 516.992 265.133 516.992 cv
264.988 516.992 264.844 517.008 264.699 517.031 cv
264.551 517.059 264.41 517.094 264.277 517.137 cv
264.145 517.184 264.016 517.234 263.891 517.297 cv
263.766 517.359 263.652 517.426 263.559 517.488 cv
263.555 517.996 263.586 518.418 263.652 518.758 cv
263.715 519.098 263.809 519.371 263.934 519.574 cv
264.055 519.781 264.211 519.926 264.395 520.012 cv
264.574 520.102 264.789 520.145 265.039 520.145 cv
265.289 520.145 265.504 520.098 265.688 520.004 cv
265.871 519.91 266.023 519.785 266.145 519.625 cv
266.266 519.469 266.355 519.293 266.41 519.094 cv
266.465 518.898 266.492 518.695 266.496 518.488 cv
cp
f
336.41 518.902 mo
336.41 519.23 336.352 519.523 336.234 519.777 cv
336.117 520.035 335.945 520.25 335.727 520.426 cv
335.504 520.605 335.234 520.738 334.91 520.824 cv
334.582 520.91 334.211 520.953 333.797 520.957 cv
333.406 520.953 333.055 520.914 332.746 520.836 cv
332.438 520.758 332.176 520.637 331.961 520.473 cv
331.746 520.312 331.582 520.117 331.469 519.879 cv
331.355 519.648 331.301 519.379 331.301 519.078 cv
331.301 518.844 331.34 518.625 331.418 518.422 cv
331.496 518.223 331.605 518.039 331.754 517.871 cv
331.898 517.707 332.082 517.551 332.297 517.402 cv
332.508 517.254 332.75 517.113 333.023 516.98 cv
332.789 516.863 332.582 516.738 332.402 516.598 cv
332.223 516.465 332.07 516.316 331.945 516.156 cv
331.82 516 331.723 515.832 331.66 515.648 cv
331.59 515.473 331.559 515.277 331.563 515.066 cv
331.559 514.805 331.605 514.555 331.707 514.32 cv
331.801 514.086 331.945 513.883 332.141 513.711 cv
332.328 513.539 332.574 513.406 332.879 513.305 cv
333.176 513.207 333.527 513.156 333.926 513.152 cv
334.309 513.156 334.637 513.203 334.918 513.293 cv
335.191 513.387 335.422 513.512 335.609 513.668 cv
335.789 513.828 335.926 514.012 336.012 514.227 cv
336.098 514.445 336.141 514.676 336.141 514.918 cv
336.141 515.117 336.105 515.309 336.043 515.492 cv
335.973 515.68 335.879 515.855 335.758 516.016 cv
335.629 516.184 335.477 516.336 335.297 516.477 cv
335.117 516.617 334.91 516.75 334.676 516.875 cv
334.953 517.016 335.199 517.156 335.418 517.297 cv
335.633 517.441 335.813 517.598 335.961 517.762 cv
336.102 517.93 336.215 518.105 336.293 518.289 cv
336.371 518.477 336.41 518.68 336.41 518.902 cv
cp
335.145 515.012 mo
335.145 514.848 335.113 514.699 335.059 514.566 cv
335 514.434 334.918 514.32 334.813 514.227 cv
334.699 514.133 334.563 514.062 334.402 514.016 cv
334.238 513.969 334.055 513.945 333.852 513.941 cv
333.426 513.945 333.105 514.039 332.891 514.227 cv
332.672 514.418 332.566 514.68 332.566 515.012 cv
332.566 515.164 332.59 515.309 332.645 515.437 cv
332.695 515.57 332.777 515.691 332.891 515.809 cv
333 515.926 333.141 516.043 333.313 516.152 cv
333.48 516.266 333.684 516.379 333.922 516.5 cv
334.313 516.297 334.617 516.074 334.828 515.828 cv
335.039 515.582 335.145 515.309 335.145 515.012 cv
cp
335.391 519.008 mo
335.391 518.828 335.355 518.668 335.289 518.52 cv
335.223 518.379 335.121 518.242 334.988 518.109 cv
334.852 517.984 334.684 517.859 334.484 517.738 cv
334.281 517.621 334.051 517.496 333.785 517.367 cv
333.535 517.492 333.316 517.613 333.137 517.73 cv
332.949 517.852 332.797 517.977 332.68 518.105 cv
332.555 518.238 332.465 518.375 332.41 518.516 cv
332.348 518.656 332.32 518.812 332.32 518.984 cv
332.32 519.363 332.449 519.656 332.711 519.863 cv
332.969 520.074 333.355 520.18 333.875 520.176 cv
334.371 520.18 334.75 520.074 335.008 519.863 cv
335.262 519.652 335.391 519.367 335.391 519.008 cv
cp
f
402.102 520.449 mo
402.098 520.523 402.094 520.586 402.086 520.637 cv
402.074 520.691 402.059 520.734 402.039 520.762 cv
402.016 520.797 401.992 520.82 401.969 520.828 cv
401.945 520.844 401.918 520.848 401.891 520.848 cv
397.93 520.848 li
397.902 520.848 397.879 520.844 397.855 520.828 cv
397.832 520.82 397.809 520.797 397.789 520.762 cv
397.766 520.734 397.75 520.691 397.738 520.637 cv
397.723 520.586 397.715 520.523 397.719 520.449 cv
397.715 520.379 397.723 520.32 397.738 520.27 cv
397.75 520.219 397.762 520.176 397.781 520.141 cv
397.797 520.109 397.82 520.086 397.844 520.066 cv
397.867 520.051 397.895 520.039 397.93 520.039 cv
399.516 520.039 li
399.516 514.273 li
398.047 515.145 li
397.973 515.191 397.914 515.215 397.871 515.219 cv
397.824 515.23 397.789 515.223 397.762 515.191 cv
397.73 515.168 397.711 515.125 397.703 515.066 cv
397.695 515.008 397.691 514.934 397.691 514.84 cv
397.691 514.777 397.691 514.719 397.699 514.672 cv
397.703 514.625 397.715 514.586 397.727 514.555 cv
397.734 514.523 397.75 514.496 397.773 514.473 cv
397.797 514.449 397.824 514.426 397.859 514.402 cv
399.609 513.285 li
399.621 513.273 399.641 513.262 399.668 513.254 cv
399.688 513.246 399.719 513.238 399.754 513.23 cv
399.785 513.223 399.824 513.219 399.875 513.219 cv
399.918 513.219 399.977 513.219 400.055 513.215 cv
400.145 513.219 400.223 513.223 400.289 513.227 cv
400.348 513.238 400.398 513.25 400.434 513.258 cv
400.465 513.273 400.488 513.289 400.504 513.309 cv
400.516 513.332 400.52 513.355 400.523 513.379 cv
400.523 520.039 li
401.891 520.039 li
401.918 520.039 401.949 520.051 401.98 520.066 cv
402.008 520.086 402.027 520.109 402.047 520.141 cv
402.063 520.176 402.078 520.219 402.086 520.27 cv
402.094 520.32 402.098 520.379 402.102 520.449 cv
cp
f
408.453 517.039 mo
408.449 517.621 408.402 518.152 408.316 518.633 cv
408.223 519.117 408.07 519.531 407.859 519.875 cv
407.641 520.219 407.363 520.488 407.023 520.676 cv
406.676 520.863 406.254 520.953 405.754 520.957 cv
405.277 520.953 404.875 520.871 404.551 520.703 cv
404.223 520.535 403.961 520.285 403.762 519.953 cv
403.559 519.625 403.414 519.219 403.336 518.734 cv
403.25 518.254 403.211 517.699 403.211 517.074 cv
403.211 516.496 403.258 515.969 403.352 515.484 cv
403.445 515.008 403.598 514.594 403.809 514.242 cv
404.02 513.898 404.297 513.629 404.641 513.437 cv
404.984 513.25 405.406 513.156 405.906 513.152 cv
406.383 513.156 406.785 513.242 407.113 513.41 cv
407.441 513.582 407.703 513.832 407.902 514.16 cv
408.102 514.492 408.242 514.898 408.328 515.379 cv
408.406 515.863 408.449 516.414 408.453 517.039 cv
cp
407.422 517.109 mo
407.418 516.734 407.406 516.395 407.383 516.09 cv
407.355 515.789 407.313 515.523 407.262 515.293 cv
407.207 515.066 407.141 514.871 407.055 514.699 cv
406.969 514.535 406.867 514.398 406.754 514.289 cv
406.633 514.187 406.5 514.109 406.352 514.055 cv
406.203 514.008 406.035 513.98 405.848 513.98 cv
405.516 513.98 405.246 514.059 405.039 514.215 cv
404.828 514.371 404.664 514.586 404.547 514.859 cv
404.43 515.133 404.348 515.453 404.305 515.82 cv
404.262 516.187 404.242 516.582 404.242 517.004 cv
404.242 517.574 404.27 518.059 404.328 518.449 cv
404.387 518.848 404.48 519.168 404.605 519.418 cv
404.73 519.668 404.891 519.852 405.094 519.965 cv
405.289 520.078 405.531 520.133 405.813 520.133 cv
406.031 520.133 406.223 520.098 406.391 520.027 cv
406.555 519.957 406.695 519.859 406.816 519.727 cv
406.934 519.598 407.035 519.437 407.113 519.254 cv
407.191 519.074 407.254 518.871 407.301 518.645 cv
407.348 518.422 407.379 518.184 407.395 517.922 cv
407.41 517.664 407.418 517.391 407.422 517.109 cv
cp
f
471.008 520.449 mo
471.004 520.523 471 520.586 470.992 520.637 cv
470.98 520.691 470.965 520.734 470.945 520.762 cv
470.922 520.797 470.898 520.82 470.875 520.828 cv
470.852 520.844 470.824 520.848 470.797 520.848 cv
466.836 520.848 li
466.809 520.848 466.785 520.844 466.762 520.828 cv
466.738 520.82 466.715 520.797 466.695 520.762 cv
466.672 520.734 466.656 520.691 466.645 520.637 cv
466.629 520.586 466.621 520.523 466.625 520.449 cv
466.621 520.379 466.629 520.32 466.645 520.27 cv
466.656 520.219 466.668 520.176 466.688 520.141 cv
466.703 520.109 466.727 520.086 466.75 520.066 cv
466.773 520.051 466.801 520.039 466.836 520.039 cv
468.422 520.039 li
468.422 514.273 li
466.953 515.145 li
466.879 515.191 466.82 515.215 466.777 515.219 cv
466.73 515.23 466.695 515.223 466.668 515.191 cv
466.637 515.168 466.617 515.125 466.609 515.066 cv
466.602 515.008 466.598 514.934 466.598 514.84 cv
466.598 514.777 466.598 514.719 466.605 514.672 cv
466.609 514.625 466.621 514.586 466.633 514.555 cv
466.641 514.523 466.656 514.496 466.68 514.473 cv
466.703 514.449 466.73 514.426 466.766 514.402 cv
468.516 513.285 li
468.527 513.273 468.547 513.262 468.574 513.254 cv
468.594 513.246 468.625 513.238 468.66 513.23 cv
468.691 513.223 468.73 513.219 468.781 513.219 cv
468.824 513.219 468.883 513.219 468.961 513.215 cv
469.051 513.219 469.129 513.223 469.195 513.227 cv
469.254 513.238 469.305 513.25 469.34 513.258 cv
469.371 513.273 469.395 513.289 469.41 513.309 cv
469.422 513.332 469.426 513.355 469.43 513.379 cv
469.43 520.039 li
470.797 520.039 li
470.824 520.039 470.855 520.051 470.887 520.066 cv
470.914 520.086 470.934 520.109 470.953 520.141 cv
470.969 520.176 470.984 520.219 470.992 520.27 cv
471 520.32 471.004 520.379 471.008 520.449 cv
cp
f
477.113 520.414 mo
477.113 520.484 477.105 520.547 477.098 520.602 cv
477.082 520.656 477.07 520.703 477.055 520.738 cv
477.039 520.777 477.016 520.805 476.984 520.82 cv
476.953 520.84 476.922 520.848 476.891 520.848 cv
472.699 520.848 li
472.645 520.848 472.598 520.844 472.559 520.828 cv
472.516 520.82 472.48 520.797 472.453 520.762 cv
472.422 520.734 472.398 520.687 472.387 520.625 cv
472.371 520.566 472.367 520.496 472.367 520.41 cv
472.367 520.336 472.367 520.266 472.375 520.203 cv
472.379 520.145 472.395 520.094 472.414 520.047 cv
472.434 520.004 472.457 519.961 472.488 519.914 cv
472.516 519.875 472.555 519.824 472.609 519.77 cv
474.125 518.211 li
474.473 517.852 474.75 517.531 474.965 517.246 cv
475.176 516.961 475.34 516.699 475.457 516.465 cv
475.566 516.23 475.645 516.02 475.684 515.828 cv
475.719 515.637 475.734 515.457 475.738 515.285 cv
475.734 515.121 475.707 514.961 475.652 514.809 cv
475.594 514.66 475.512 514.527 475.406 514.414 cv
475.297 514.305 475.164 514.215 475.004 514.145 cv
474.84 514.078 474.652 514.047 474.449 514.043 cv
474.199 514.047 473.98 514.078 473.785 514.145 cv
473.59 514.215 473.418 514.289 473.27 514.363 cv
473.121 514.445 472.996 514.516 472.902 514.578 cv
472.801 514.645 472.73 514.68 472.684 514.676 cv
472.652 514.68 472.625 514.672 472.605 514.652 cv
472.582 514.641 472.563 514.613 472.551 514.578 cv
472.535 514.547 472.527 514.5 472.52 514.437 cv
472.512 514.379 472.508 514.309 472.508 514.227 cv
472.508 514.168 472.508 514.117 472.512 514.074 cv
472.516 514.035 472.523 514 472.535 513.965 cv
472.543 513.937 472.555 513.906 472.574 513.875 cv
472.586 513.848 472.617 513.816 472.668 513.773 cv
472.711 513.734 472.793 513.676 472.91 513.605 cv
473.023 513.535 473.168 513.469 473.344 513.398 cv
473.516 513.332 473.707 513.273 473.918 513.223 cv
474.125 513.18 474.344 513.156 474.574 513.152 cv
474.941 513.156 475.262 513.207 475.539 513.309 cv
475.813 513.414 476.043 513.555 476.223 513.734 cv
476.402 513.914 476.539 514.125 476.633 514.363 cv
476.723 514.602 476.766 514.855 476.77 515.121 cv
476.766 515.371 476.746 515.613 476.703 515.848 cv
476.656 516.09 476.563 516.348 476.43 516.625 cv
476.289 516.906 476.09 517.219 475.828 517.559 cv
475.566 517.902 475.219 518.293 474.785 518.738 cv
473.586 519.992 li
476.887 519.992 li
476.914 519.992 476.945 520.004 476.977 520.02 cv
477.004 520.039 477.027 520.062 477.051 520.098 cv
477.066 520.137 477.082 520.184 477.098 520.23 cv
477.105 520.285 477.113 520.344 477.113 520.414 cv
cp
f
539.891 520.449 mo
539.887 520.523 539.883 520.586 539.875 520.637 cv
539.863 520.691 539.848 520.734 539.828 520.762 cv
539.805 520.797 539.781 520.82 539.758 520.828 cv
539.734 520.844 539.707 520.848 539.68 520.848 cv
535.719 520.848 li
535.691 520.848 535.668 520.844 535.645 520.828 cv
535.621 520.82 535.598 520.797 535.578 520.762 cv
535.555 520.734 535.539 520.691 535.527 520.637 cv
535.512 520.586 535.504 520.523 535.508 520.449 cv
535.504 520.379 535.512 520.32 535.527 520.27 cv
535.539 520.219 535.551 520.176 535.57 520.141 cv
535.586 520.109 535.609 520.086 535.633 520.066 cv
535.656 520.051 535.684 520.039 535.719 520.039 cv
537.305 520.039 li
537.305 514.273 li
535.836 515.145 li
535.762 515.191 535.703 515.215 535.66 515.219 cv
535.613 515.23 535.578 515.223 535.551 515.191 cv
535.52 515.168 535.5 515.125 535.492 515.066 cv
535.484 515.008 535.48 514.934 535.48 514.84 cv
535.48 514.777 535.48 514.719 535.488 514.672 cv
535.492 514.625 535.504 514.586 535.516 514.555 cv
535.523 514.523 535.539 514.496 535.563 514.473 cv
535.586 514.449 535.613 514.426 535.648 514.402 cv
537.398 513.285 li
537.41 513.273 537.43 513.262 537.457 513.254 cv
537.477 513.246 537.508 513.238 537.543 513.23 cv
537.574 513.223 537.613 513.219 537.664 513.219 cv
537.707 513.219 537.766 513.219 537.844 513.215 cv
537.934 513.219 538.012 513.223 538.078 513.227 cv
538.137 513.238 538.188 513.25 538.223 513.258 cv
538.254 513.273 538.277 513.289 538.293 513.309 cv
538.305 513.332 538.309 513.355 538.313 513.379 cv
538.313 520.039 li
539.68 520.039 li
539.707 520.039 539.738 520.051 539.77 520.066 cv
539.797 520.086 539.816 520.109 539.836 520.141 cv
539.852 520.176 539.867 520.219 539.875 520.27 cv
539.883 520.32 539.887 520.379 539.891 520.449 cv
cp
f
546.313 518.691 mo
546.309 518.824 546.289 518.926 546.254 518.996 cv
546.211 519.07 546.156 519.109 546.094 519.105 cv
545.234 519.105 li
545.234 520.699 li
545.23 520.734 545.223 520.762 545.211 520.781 cv
545.191 520.805 545.164 520.82 545.125 520.836 cv
545.086 520.852 545.031 520.863 544.969 520.871 cv
544.902 520.879 544.82 520.883 544.723 520.883 cv
544.621 520.883 544.543 520.879 544.48 520.871 cv
544.418 520.863 544.367 520.852 544.328 520.836 cv
544.289 520.82 544.262 520.805 544.246 520.781 cv
544.23 520.762 544.223 520.734 544.227 520.699 cv
544.227 519.105 li
541.125 519.105 li
541.078 519.109 541.043 519.102 541.012 519.09 cv
540.98 519.082 540.949 519.062 540.926 519.027 cv
540.895 519 540.879 518.953 540.871 518.891 cv
540.863 518.832 540.859 518.758 540.859 518.66 cv
540.859 518.59 540.859 518.523 540.863 518.465 cv
540.867 518.406 540.875 518.352 540.887 518.305 cv
540.898 518.258 540.914 518.211 540.934 518.164 cv
540.953 518.117 540.977 518.07 541.004 518.02 cv
543.707 513.41 li
543.727 513.383 543.754 513.355 543.793 513.328 cv
543.828 513.309 543.879 513.289 543.941 513.27 cv
544 513.258 544.07 513.246 544.16 513.238 cv
544.246 513.234 544.352 513.23 544.473 513.23 cv
544.602 513.23 544.715 513.238 544.813 513.246 cv
544.91 513.262 544.988 513.273 545.051 513.285 cv
545.105 513.305 545.152 513.324 545.188 513.348 cv
545.215 513.371 545.23 513.402 545.234 513.434 cv
545.234 518.277 li
546.094 518.277 li
546.156 518.281 546.211 518.316 546.25 518.379 cv
546.289 518.449 546.309 518.551 546.313 518.691 cv
cp
544.227 514.113 mo
544.219 514.113 li
541.781 518.277 li
544.227 518.277 li
cp
f
608.789 520.449 mo
608.785 520.523 608.781 520.586 608.773 520.637 cv
608.762 520.691 608.746 520.734 608.727 520.762 cv
608.703 520.797 608.68 520.82 608.656 520.828 cv
608.633 520.844 608.605 520.848 608.578 520.848 cv
604.617 520.848 li
604.59 520.848 604.566 520.844 604.543 520.828 cv
604.52 520.82 604.496 520.797 604.477 520.762 cv
604.453 520.734 604.438 520.691 604.426 520.637 cv
604.41 520.586 604.402 520.523 604.406 520.449 cv
604.402 520.379 604.41 520.32 604.426 520.27 cv
604.438 520.219 604.449 520.176 604.469 520.141 cv
604.484 520.109 604.508 520.086 604.531 520.066 cv
604.555 520.051 604.582 520.039 604.617 520.039 cv
606.203 520.039 li
606.203 514.273 li
604.734 515.145 li
604.66 515.191 604.602 515.215 604.559 515.219 cv
604.512 515.23 604.477 515.223 604.449 515.191 cv
604.418 515.168 604.398 515.125 604.391 515.066 cv
604.383 515.008 604.379 514.934 604.379 514.84 cv
604.379 514.777 604.379 514.719 604.387 514.672 cv
604.391 514.625 604.402 514.586 604.414 514.555 cv
604.422 514.523 604.438 514.496 604.461 514.473 cv
604.484 514.449 604.512 514.426 604.547 514.402 cv
606.297 513.285 li
606.309 513.273 606.328 513.262 606.355 513.254 cv
606.375 513.246 606.406 513.238 606.441 513.23 cv
606.473 513.223 606.512 513.219 606.563 513.219 cv
606.605 513.219 606.664 513.219 606.742 513.215 cv
606.832 513.219 606.91 513.223 606.977 513.227 cv
607.035 513.238 607.086 513.25 607.121 513.258 cv
607.152 513.273 607.176 513.289 607.191 513.309 cv
607.203 513.332 607.207 513.355 607.211 513.379 cv
607.211 520.039 li
608.578 520.039 li
608.605 520.039 608.637 520.051 608.668 520.066 cv
608.695 520.086 608.715 520.109 608.734 520.141 cv
608.75 520.176 608.766 520.219 608.773 520.27 cv
608.781 520.32 608.785 520.379 608.789 520.449 cv
cp
f
615.09 518.395 mo
615.086 518.727 615.035 519.047 614.938 519.359 cv
614.832 519.672 614.676 519.945 614.469 520.18 cv
614.254 520.414 613.988 520.605 613.664 520.746 cv
613.336 520.887 612.953 520.953 612.516 520.957 cv
612.199 520.953 611.918 520.918 611.68 520.84 cv
611.434 520.766 611.223 520.652 611.047 520.508 cv
610.863 520.367 610.715 520.191 610.598 519.977 cv
610.477 519.77 610.379 519.527 610.309 519.254 cv
610.23 518.984 610.18 518.691 610.152 518.367 cv
610.117 518.051 610.102 517.707 610.105 517.34 cv
610.102 517.016 610.121 516.687 610.16 516.355 cv
610.195 516.023 610.258 515.703 610.348 515.395 cv
610.434 515.086 610.555 514.797 610.711 514.523 cv
610.867 514.254 611.059 514.016 611.293 513.812 cv
611.523 513.613 611.805 513.453 612.129 513.336 cv
612.449 513.219 612.824 513.16 613.262 513.16 cv
613.402 513.16 613.551 513.172 613.699 513.187 cv
613.848 513.211 613.984 513.234 614.109 513.258 cv
614.234 513.289 614.34 513.32 614.426 513.355 cv
614.512 513.391 614.566 513.418 614.594 513.441 cv
614.621 513.465 614.641 513.488 614.656 513.512 cv
614.664 513.535 614.676 513.562 614.688 513.594 cv
614.691 513.625 614.699 513.66 614.707 513.691 cv
614.711 513.73 614.711 513.773 614.715 513.828 cv
614.711 513.898 614.711 513.961 614.711 514.012 cv
614.707 514.062 614.699 514.102 614.688 514.133 cv
614.672 514.164 614.652 514.187 614.633 514.203 cv
614.609 514.219 614.582 514.227 614.551 514.227 cv
614.504 514.227 614.445 514.215 614.371 514.187 cv
614.297 514.16 614.207 514.129 614.102 514.094 cv
613.996 514.062 613.867 514.031 613.719 514.004 cv
613.566 513.98 613.395 513.969 613.195 513.965 cv
612.832 513.969 612.52 514.043 612.258 514.187 cv
611.992 514.34 611.777 514.539 611.613 514.785 cv
611.449 515.039 611.324 515.328 611.246 515.656 cv
611.164 515.984 611.121 516.328 611.109 516.687 cv
611.211 516.629 611.324 516.57 611.453 516.512 cv
611.578 516.457 611.715 516.406 611.867 516.355 cv
612.016 516.312 612.176 516.273 612.344 516.242 cv
612.512 516.211 612.691 516.195 612.887 516.195 cv
613.293 516.195 613.641 516.254 613.922 516.363 cv
614.203 516.477 614.43 516.629 614.602 516.824 cv
614.773 517.023 614.898 517.258 614.977 517.523 cv
615.051 517.797 615.086 518.086 615.09 518.395 cv
cp
614.066 518.488 mo
614.063 518.262 614.039 518.055 614 517.867 cv
613.953 517.684 613.879 517.527 613.773 517.398 cv
613.668 517.27 613.527 517.168 613.352 517.098 cv
613.176 517.027 612.961 516.992 612.703 516.992 cv
612.559 516.992 612.414 517.008 612.27 517.031 cv
612.121 517.059 611.98 517.094 611.848 517.137 cv
611.715 517.184 611.586 517.234 611.461 517.297 cv
611.336 517.359 611.223 517.426 611.129 517.488 cv
611.125 517.996 611.156 518.418 611.223 518.758 cv
611.285 519.098 611.379 519.371 611.504 519.574 cv
611.625 519.781 611.781 519.926 611.965 520.012 cv
612.145 520.102 612.359 520.145 612.609 520.145 cv
612.859 520.145 613.074 520.098 613.258 520.004 cv
613.441 519.91 613.594 519.785 613.715 519.625 cv
613.836 519.469 613.926 519.293 613.98 519.094 cv
614.035 518.898 614.063 518.695 614.066 518.488 cv
cp
f
16.766 328.992 mo
16.809 328.996 16.844 329.004 16.875 329.016 cv
16.906 329.035 16.934 329.07 16.953 329.117 cv
16.973 329.172 16.984 329.242 17 329.336 cv
17.008 329.43 17.016 329.555 17.016 329.711 cv
17.016 329.848 17.008 329.961 17 330.043 cv
16.984 330.129 16.973 330.195 16.949 330.246 cv
16.93 330.301 16.895 330.34 16.852 330.367 cv
16.813 330.398 16.762 330.426 16.695 330.441 cv
14.32 331.371 li
14.051 331.484 13.805 331.598 13.574 331.711 cv
13.352 331.828 13.156 331.965 12.992 332.125 cv
12.832 332.289 12.703 332.48 12.609 332.695 cv
12.52 332.918 12.477 333.18 12.473 333.48 cv
12.473 334.379 li
16.766 334.379 li
16.809 334.383 16.844 334.395 16.875 334.414 cv
16.906 334.441 16.934 334.477 16.949 334.523 cv
16.969 334.574 16.98 334.641 16.996 334.727 cv
17.008 334.812 17.016 334.922 17.016 335.047 cv
17.016 335.18 17.008 335.285 16.996 335.371 cv
16.98 335.457 16.969 335.527 16.949 335.578 cv
16.934 335.633 16.906 335.668 16.875 335.687 cv
16.844 335.711 16.809 335.723 16.766 335.719 cv
7.43 335.719 li
7.227 335.723 7.086 335.668 7.004 335.559 cv
6.926 335.453 6.887 335.34 6.883 335.219 cv
6.883 333.078 li
6.887 332.828 6.891 332.613 6.902 332.441 cv
6.918 332.273 6.934 332.121 6.945 331.984 cv
7.016 331.598 7.121 331.254 7.266 330.953 cv
7.414 330.656 7.602 330.406 7.82 330.203 cv
8.047 330 8.301 329.848 8.59 329.746 cv
8.879 329.645 9.199 329.594 9.543 329.594 cv
9.883 329.594 10.184 329.641 10.449 329.73 cv
10.719 329.824 10.957 329.957 11.16 330.125 cv
11.371 330.297 11.547 330.5 11.695 330.738 cv
11.844 330.98 11.973 331.25 12.074 331.543 cv
12.152 331.379 12.242 331.227 12.352 331.09 cv
12.465 330.957 12.602 330.832 12.754 330.711 cv
12.914 330.598 13.094 330.484 13.293 330.379 cv
13.496 330.277 13.723 330.176 13.977 330.066 cv
16.195 329.164 li
16.383 329.094 16.516 329.047 16.59 329.023 cv
16.668 329.008 16.727 328.996 16.766 328.992 cv
cp
9.684 331.012 mo
9.293 331.012 8.957 331.102 8.684 331.277 cv
8.41 331.457 8.215 331.754 8.094 332.164 cv
8.059 332.297 8.031 332.441 8.016 332.605 cv
8 332.77 7.992 332.984 7.992 333.246 cv
7.992 334.379 li
11.391 334.379 li
11.391 333.07 li
11.391 332.719 11.348 332.414 11.262 332.152 cv
11.176 331.898 11.059 331.684 10.902 331.512 cv
10.754 331.344 10.57 331.219 10.359 331.133 cv
10.152 331.055 9.93 331.012 9.684 331.012 cv
cp
f
16.773 321.195 mo
16.82 321.199 16.855 321.207 16.879 321.223 cv
16.91 321.242 16.934 321.277 16.953 321.32 cv
16.973 321.367 16.984 321.426 17 321.5 cv
17.008 321.578 17.016 321.672 17.016 321.777 cv
17.016 321.902 17.008 322 17 322.07 cv
16.984 322.148 16.973 322.207 16.953 322.25 cv
16.934 322.297 16.91 322.328 16.879 322.34 cv
16.855 322.359 16.82 322.367 16.773 322.363 cv
15.848 322.363 li
16.293 322.766 16.613 323.16 16.813 323.547 cv
17.016 323.941 17.113 324.336 17.117 324.73 cv
17.113 325.203 17.039 325.598 16.883 325.914 cv
16.73 326.234 16.52 326.492 16.25 326.687 cv
15.984 326.891 15.672 327.031 15.313 327.113 cv
14.957 327.203 14.523 327.246 14.016 327.242 cv
9.762 327.242 li
9.723 327.246 9.688 327.238 9.656 327.215 cv
9.629 327.199 9.605 327.164 9.578 327.109 cv
9.559 327.062 9.543 326.992 9.531 326.906 cv
9.527 326.824 9.523 326.723 9.52 326.594 cv
9.523 326.473 9.527 326.367 9.531 326.281 cv
9.543 326.199 9.559 326.133 9.578 326.086 cv
9.605 326.039 9.629 326.004 9.656 325.98 cv
9.688 325.961 9.723 325.953 9.762 325.949 cv
13.844 325.949 li
14.258 325.953 14.586 325.922 14.832 325.859 cv
15.078 325.801 15.289 325.711 15.461 325.586 cv
15.641 325.469 15.773 325.312 15.867 325.121 cv
15.965 324.937 16.016 324.719 16.012 324.469 cv
16.016 324.148 15.898 323.828 15.668 323.504 cv
15.441 323.187 15.105 322.848 14.66 322.488 cv
9.762 322.488 li
9.723 322.488 9.688 322.48 9.656 322.461 cv
9.629 322.445 9.605 322.41 9.578 322.355 cv
9.559 322.305 9.543 322.238 9.531 322.156 cv
9.527 322.078 9.523 321.973 9.52 321.84 cv
9.523 321.719 9.527 321.613 9.531 321.527 cv
9.543 321.445 9.559 321.383 9.578 321.336 cv
9.605 321.293 9.629 321.258 9.656 321.23 cv
9.688 321.211 9.723 321.199 9.762 321.195 cv
cp
f
16.773 312.785 mo
16.82 312.785 16.855 312.797 16.879 312.816 cv
16.91 312.84 16.934 312.875 16.953 312.918 cv
16.973 312.969 16.984 313.031 17 313.113 cv
17.008 313.195 17.016 313.301 17.016 313.422 cv
17.016 313.555 17.008 313.66 17 313.742 cv
16.984 313.828 16.973 313.895 16.953 313.937 cv
16.934 313.988 16.91 314.02 16.879 314.039 cv
16.855 314.062 16.82 314.074 16.773 314.07 cv
12.668 314.07 li
12.27 314.074 11.949 314.105 11.703 314.164 cv
11.461 314.23 11.25 314.32 11.07 314.437 cv
10.895 314.555 10.758 314.711 10.664 314.898 cv
10.57 315.094 10.523 315.312 10.523 315.559 cv
10.523 315.883 10.641 316.207 10.867 316.527 cv
11.102 316.852 11.434 317.187 11.871 317.539 cv
16.773 317.539 li
16.82 317.543 16.855 317.555 16.879 317.57 cv
16.91 317.594 16.934 317.625 16.953 317.672 cv
16.973 317.719 16.984 317.785 17 317.863 cv
17.008 317.949 17.016 318.055 17.016 318.184 cv
17.016 318.312 17.008 318.418 17 318.496 cv
16.984 318.582 16.973 318.648 16.953 318.695 cv
16.934 318.75 16.91 318.781 16.879 318.797 cv
16.855 318.816 16.82 318.828 16.773 318.824 cv
9.762 318.824 li
9.723 318.828 9.688 318.82 9.656 318.801 cv
9.629 318.789 9.605 318.758 9.578 318.707 cv
9.559 318.664 9.543 318.602 9.531 318.527 cv
9.527 318.457 9.523 318.363 9.52 318.238 cv
9.523 318.129 9.527 318.031 9.531 317.953 cv
9.543 317.879 9.559 317.82 9.578 317.777 cv
9.605 317.738 9.629 317.711 9.656 317.691 cv
9.688 317.676 9.723 317.668 9.762 317.664 cv
10.688 317.664 li
10.246 317.273 9.926 316.879 9.719 316.484 cv
9.516 316.094 9.41 315.695 9.41 315.293 cv
9.41 314.824 9.492 314.434 9.648 314.113 cv
9.813 313.797 10.023 313.535 10.285 313.336 cv
10.551 313.141 10.859 313 11.215 312.914 cv
11.57 312.828 12 312.785 12.496 312.785 cv
cp
f
16.258 306.906 mo
16.414 306.906 16.531 306.918 16.617 306.937 cv
16.707 306.961 16.773 306.992 16.813 307.031 cv
16.855 307.074 16.895 307.137 16.93 307.219 cv
16.965 307.305 16.992 307.398 17.02 307.504 cv
17.039 307.613 17.059 307.727 17.078 307.844 cv
17.09 307.961 17.098 308.082 17.102 308.199 cv
17.098 308.566 17.051 308.879 16.957 309.137 cv
16.863 309.398 16.719 309.609 16.52 309.773 cv
16.328 309.941 16.082 310.062 15.781 310.137 cv
15.484 310.215 15.133 310.254 14.723 310.25 cv
10.625 310.25 li
10.625 311.23 li
10.629 311.309 10.586 311.371 10.5 311.418 cv
10.418 311.465 10.285 311.488 10.094 311.488 cv
10 311.488 9.918 311.484 9.848 311.469 cv
9.785 311.461 9.727 311.441 9.68 311.418 cv
9.637 311.398 9.605 311.371 9.586 311.336 cv
9.57 311.305 9.563 311.27 9.559 311.223 cv
9.559 310.25 li
7.891 310.25 li
7.859 310.254 7.824 310.242 7.789 310.223 cv
7.762 310.207 7.734 310.176 7.707 310.121 cv
7.688 310.074 7.672 310.008 7.656 309.922 cv
7.648 309.844 7.641 309.738 7.641 309.609 cv
7.641 309.48 7.648 309.375 7.656 309.293 cv
7.672 309.211 7.688 309.145 7.707 309.098 cv
7.734 309.051 7.762 309.02 7.789 308.996 cv
7.824 308.98 7.859 308.969 7.891 308.965 cv
9.559 308.965 li
9.559 307.164 li
9.563 307.125 9.57 307.09 9.586 307.055 cv
9.605 307.027 9.637 307 9.68 306.973 cv
9.727 306.953 9.785 306.937 9.848 306.922 cv
9.918 306.914 10 306.906 10.094 306.906 cv
10.285 306.906 10.418 306.93 10.5 306.977 cv
10.586 307.023 10.629 307.086 10.625 307.164 cv
10.625 308.965 li
14.539 308.965 li
15.023 308.969 15.387 308.898 15.633 308.75 cv
15.883 308.609 16.008 308.352 16.004 307.98 cv
16.008 307.867 15.996 307.762 15.969 307.664 cv
15.949 307.574 15.926 307.492 15.895 307.414 cv
15.871 307.344 15.844 307.281 15.82 307.227 cv
15.797 307.18 15.785 307.133 15.785 307.086 cv
15.785 307.062 15.793 307.035 15.805 307.012 cv
15.82 306.988 15.844 306.973 15.879 306.957 cv
15.918 306.949 15.969 306.937 16.027 306.922 cv
16.094 306.914 16.172 306.906 16.258 306.906 cv
cp
f
16.773 303.891 mo
16.82 303.895 16.855 303.906 16.879 303.922 cv
16.91 303.945 16.934 303.977 16.953 304.023 cv
16.973 304.07 16.984 304.137 17 304.215 cv
17.008 304.301 17.016 304.406 17.016 304.535 cv
17.016 304.664 17.008 304.77 17 304.848 cv
16.984 304.934 16.973 305 16.953 305.047 cv
16.934 305.102 16.91 305.133 16.879 305.148 cv
16.855 305.168 16.82 305.18 16.773 305.176 cv
9.762 305.176 li
9.727 305.18 9.695 305.168 9.66 305.148 cv
9.633 305.133 9.605 305.102 9.582 305.047 cv
9.563 305 9.547 304.934 9.535 304.848 cv
9.527 304.77 9.523 304.664 9.52 304.535 cv
9.523 304.406 9.527 304.301 9.535 304.215 cv
9.547 304.137 9.563 304.07 9.582 304.023 cv
9.605 303.977 9.633 303.945 9.66 303.922 cv
9.695 303.906 9.727 303.895 9.762 303.891 cv
cp
7.391 303.742 mo
7.695 303.742 7.902 303.801 8.008 303.914 cv
8.121 304.027 8.176 304.238 8.172 304.543 cv
8.176 304.848 8.121 305.055 8.012 305.164 cv
7.906 305.281 7.703 305.336 7.406 305.332 cv
7.105 305.336 6.902 305.277 6.793 305.16 cv
6.688 305.047 6.633 304.836 6.629 304.527 cv
6.633 304.227 6.688 304.023 6.789 303.91 cv
6.898 303.801 7.098 303.742 7.391 303.742 cv
cp
f
16.773 291.07 mo
16.82 291.074 16.855 291.082 16.879 291.102 cv
16.91 291.125 16.934 291.16 16.953 291.203 cv
16.973 291.254 16.984 291.32 17 291.398 cv
17.008 291.484 17.016 291.586 17.016 291.711 cv
17.016 291.844 17.008 291.953 17 292.031 cv
16.984 292.117 16.973 292.184 16.953 292.23 cv
16.934 292.285 16.91 292.32 16.879 292.336 cv
16.855 292.359 16.82 292.367 16.773 292.367 cv
12.512 292.367 li
12.219 292.367 11.949 292.395 11.703 292.445 cv
11.461 292.5 11.25 292.582 11.07 292.695 cv
10.895 292.809 10.758 292.953 10.664 293.129 cv
10.57 293.309 10.523 293.52 10.523 293.754 cv
10.523 294.051 10.641 294.348 10.867 294.645 cv
11.102 294.949 11.434 295.277 11.871 295.633 cv
16.773 295.633 li
16.82 295.637 16.855 295.648 16.879 295.664 cv
16.91 295.687 16.934 295.719 16.953 295.766 cv
16.973 295.816 16.984 295.883 17 295.965 cv
17.008 296.051 17.016 296.156 17.016 296.277 cv
17.016 296.398 17.008 296.5 17 296.586 cv
16.984 296.672 16.973 296.742 16.953 296.789 cv
16.934 296.844 16.91 296.875 16.879 296.891 cv
16.855 296.91 16.82 296.922 16.773 296.918 cv
12.512 296.918 li
12.219 296.922 11.949 296.949 11.703 297.004 cv
11.461 297.062 11.25 297.148 11.07 297.262 cv
10.895 297.375 10.758 297.52 10.664 297.691 cv
10.57 297.871 10.523 298.078 10.523 298.312 cv
10.523 298.613 10.641 298.91 10.867 299.211 cv
11.102 299.512 11.434 299.84 11.871 300.191 cv
16.773 300.191 li
16.82 300.195 16.855 300.207 16.879 300.223 cv
16.91 300.246 16.934 300.277 16.953 300.324 cv
16.973 300.371 16.984 300.437 17 300.516 cv
17.008 300.602 17.016 300.707 17.016 300.836 cv
17.016 300.965 17.008 301.07 17 301.148 cv
16.984 301.234 16.973 301.301 16.953 301.348 cv
16.934 301.402 16.91 301.434 16.879 301.449 cv
16.855 301.469 16.82 301.48 16.773 301.477 cv
9.762 301.477 li
9.723 301.48 9.688 301.473 9.656 301.453 cv
9.629 301.441 9.605 301.41 9.578 301.359 cv
9.559 301.316 9.543 301.254 9.531 301.18 cv
9.527 301.109 9.523 301.016 9.52 300.891 cv
9.523 300.781 9.527 300.684 9.531 300.605 cv
9.543 300.531 9.559 300.473 9.578 300.43 cv
9.605 300.391 9.629 300.363 9.656 300.344 cv
9.688 300.328 9.723 300.32 9.762 300.316 cv
10.688 300.316 li
10.246 299.926 9.926 299.543 9.719 299.168 cv
9.516 298.801 9.41 298.422 9.41 298.039 cv
9.41 297.75 9.445 297.492 9.512 297.258 cv
9.582 297.031 9.676 296.824 9.797 296.645 cv
9.918 296.469 10.063 296.32 10.23 296.191 cv
10.402 296.07 10.594 295.965 10.797 295.879 cv
10.547 295.648 10.332 295.426 10.152 295.215 cv
9.98 295.004 9.836 294.801 9.723 294.605 cv
9.617 294.41 9.539 294.223 9.484 294.039 cv
9.438 293.855 9.41 293.668 9.41 293.48 cv
9.41 293.027 9.492 292.648 9.648 292.344 cv
9.813 292.039 10.023 291.793 10.285 291.598 cv
10.551 291.41 10.859 291.273 11.215 291.191 cv
11.57 291.113 11.945 291.074 12.34 291.07 cv
cp
f
12.965 282.738 mo
13.168 282.742 13.309 282.793 13.395 282.891 cv
13.48 282.996 13.523 283.113 13.523 283.238 cv
13.523 287.855 li
13.914 287.859 14.266 287.82 14.578 287.738 cv
14.891 287.664 15.16 287.531 15.379 287.348 cv
15.605 287.168 15.777 286.934 15.895 286.637 cv
16.02 286.348 16.078 285.988 16.074 285.562 cv
16.078 285.23 16.051 284.934 15.992 284.672 cv
15.941 284.41 15.879 284.184 15.809 283.992 cv
15.742 283.805 15.684 283.648 15.625 283.523 cv
15.574 283.402 15.547 283.309 15.543 283.246 cv
15.547 283.211 15.555 283.18 15.57 283.148 cv
15.59 283.121 15.617 283.098 15.652 283.078 cv
15.691 283.066 15.742 283.055 15.805 283.043 cv
15.871 283.039 15.949 283.035 16.043 283.031 cv
16.113 283.035 16.172 283.039 16.219 283.039 cv
16.266 283.047 16.309 283.051 16.348 283.059 cv
16.387 283.066 16.422 283.082 16.453 283.098 cv
16.484 283.121 16.516 283.145 16.543 283.168 cv
16.574 283.199 16.621 283.281 16.684 283.422 cv
16.75 283.562 16.813 283.746 16.875 283.969 cv
16.938 284.195 16.992 284.453 17.043 284.746 cv
17.09 285.039 17.113 285.352 17.117 285.684 cv
17.113 286.262 17.035 286.77 16.875 287.199 cv
16.715 287.637 16.477 288 16.16 288.293 cv
15.844 288.594 15.449 288.816 14.969 288.965 cv
14.492 289.113 13.934 289.187 13.297 289.187 cv
12.699 289.187 12.16 289.113 11.676 288.957 cv
11.199 288.805 10.789 288.578 10.453 288.281 cv
10.117 287.988 9.859 287.633 9.68 287.219 cv
9.5 286.805 9.41 286.34 9.41 285.824 cv
9.41 285.273 9.5 284.805 9.676 284.418 cv
9.855 284.031 10.094 283.715 10.391 283.461 cv
10.691 283.215 11.043 283.031 11.441 282.914 cv
11.848 282.801 12.277 282.742 12.73 282.738 cv
cp
12.582 284.031 mo
11.906 284.016 11.375 284.168 10.992 284.484 cv
10.609 284.801 10.418 285.27 10.414 285.887 cv
10.418 286.211 10.477 286.492 10.594 286.73 cv
10.715 286.973 10.875 287.172 11.07 287.332 cv
11.27 287.496 11.5 287.621 11.762 287.707 cv
12.023 287.797 12.297 287.848 12.582 287.855 cv
cp
f
6.23 274.562 mo
7.277 275.059 8.348 275.426 9.445 275.668 cv
10.547 275.91 11.652 276.031 12.762 276.031 cv
13.879 276.031 14.988 275.91 16.082 275.66 cv
17.18 275.418 18.25 275.055 19.305 274.578 cv
19.363 274.555 19.418 274.543 19.465 274.535 cv
19.508 274.535 19.543 274.551 19.574 274.586 cv
19.602 274.625 19.621 274.68 19.637 274.754 cv
19.645 274.832 19.652 274.937 19.656 275.062 cv
19.652 275.16 19.648 275.238 19.648 275.305 cv
19.641 275.375 19.633 275.434 19.617 275.48 cv
19.602 275.531 19.582 275.574 19.563 275.602 cv
19.539 275.637 19.516 275.66 19.492 275.672 cv
18.961 275.953 18.426 276.199 17.883 276.41 cv
17.34 276.629 16.789 276.809 16.23 276.949 cv
15.668 277.098 15.102 277.207 14.527 277.277 cv
13.953 277.355 13.371 277.391 12.785 277.387 cv
12.199 277.391 11.621 277.352 11.047 277.266 cv
10.477 277.187 9.91 277.07 9.344 276.922 cv
8.781 276.773 8.227 276.594 7.68 276.383 cv
7.137 276.172 6.594 275.934 6.059 275.664 cv
6.039 275.66 6.023 275.645 6.004 275.621 cv
5.992 275.598 5.977 275.566 5.957 275.523 cv
5.945 275.484 5.934 275.426 5.922 275.352 cv
5.918 275.281 5.914 275.187 5.91 275.07 cv
5.914 274.953 5.922 274.859 5.934 274.781 cv
5.953 274.711 5.973 274.652 5.996 274.609 cv
6.023 274.57 6.059 274.547 6.098 274.539 cv
6.145 274.535 6.188 274.543 6.23 274.562 cv
cp
f
16.766 261.281 mo
16.809 261.281 16.844 261.293 16.875 261.312 cv
16.906 261.336 16.934 261.375 16.949 261.426 cv
16.969 261.48 16.98 261.547 16.996 261.629 cv
17.008 261.715 17.016 261.824 17.016 261.953 cv
17.016 262.082 17.008 262.187 16.996 262.273 cv
16.98 262.363 16.969 262.434 16.949 262.484 cv
16.934 262.535 16.906 262.57 16.875 262.59 cv
16.844 262.613 16.809 262.625 16.766 262.621 cv
7.984 262.621 li
7.984 262.637 li
16.805 266.191 li
16.844 266.207 16.875 266.23 16.898 266.258 cv
16.926 266.289 16.949 266.332 16.965 266.383 cv
16.984 266.441 16.996 266.504 17.004 266.578 cv
17.012 266.652 17.016 266.742 17.016 266.844 cv
17.016 266.957 17.008 267.051 17 267.125 cv
16.984 267.207 16.973 267.273 16.957 267.32 cv
16.941 267.375 16.922 267.414 16.891 267.441 cv
16.867 267.473 16.836 267.492 16.805 267.5 cv
7.984 270.898 li
7.984 270.906 li
16.766 270.906 li
16.809 270.91 16.844 270.918 16.875 270.937 cv
16.906 270.961 16.934 271 16.949 271.051 cv
16.969 271.105 16.98 271.176 16.996 271.258 cv
17.008 271.348 17.016 271.457 17.016 271.586 cv
17.016 271.719 17.008 271.824 16.996 271.91 cv
16.98 271.996 16.969 272.066 16.949 272.113 cv
16.934 272.168 16.906 272.203 16.875 272.219 cv
16.844 272.242 16.809 272.25 16.766 272.246 cv
7.492 272.246 li
7.277 272.25 7.121 272.191 7.023 272.074 cv
6.934 271.957 6.887 271.828 6.883 271.684 cv
6.883 270.859 li
6.887 270.695 6.902 270.547 6.93 270.418 cv
6.965 270.293 7.012 270.184 7.078 270.086 cv
7.148 269.992 7.234 269.91 7.336 269.848 cv
7.441 269.785 7.566 269.73 7.703 269.684 cv
15.004 266.797 li
15.004 266.758 li
7.727 263.758 li
7.574 263.703 7.441 263.641 7.328 263.57 cv
7.223 263.504 7.133 263.426 7.066 263.344 cv
7.004 263.262 6.957 263.172 6.926 263.07 cv
6.898 262.973 6.887 262.855 6.883 262.723 cv
6.883 261.859 li
6.887 261.781 6.898 261.703 6.918 261.633 cv
6.945 261.562 6.98 261.504 7.027 261.453 cv
7.078 261.402 7.141 261.359 7.215 261.328 cv
7.293 261.297 7.387 261.281 7.492 261.281 cv
cp
f
16.773 257.465 mo
16.82 257.469 16.855 257.48 16.879 257.496 cv
16.91 257.52 16.934 257.551 16.953 257.598 cv
16.973 257.645 16.984 257.711 17 257.789 cv
17.008 257.875 17.016 257.98 17.016 258.109 cv
17.016 258.238 17.008 258.344 17 258.422 cv
16.984 258.508 16.973 258.574 16.953 258.621 cv
16.934 258.676 16.91 258.707 16.879 258.723 cv
16.855 258.742 16.82 258.754 16.773 258.75 cv
9.762 258.75 li
9.727 258.754 9.695 258.742 9.66 258.723 cv
9.633 258.707 9.605 258.676 9.582 258.621 cv
9.563 258.574 9.547 258.508 9.535 258.422 cv
9.527 258.344 9.523 258.238 9.52 258.109 cv
9.523 257.98 9.527 257.875 9.535 257.789 cv
9.547 257.711 9.563 257.645 9.582 257.598 cv
9.605 257.551 9.633 257.52 9.66 257.496 cv
9.695 257.48 9.727 257.469 9.762 257.465 cv
cp
7.391 257.316 mo
7.695 257.316 7.902 257.375 8.008 257.488 cv
8.121 257.602 8.176 257.812 8.172 258.117 cv
8.176 258.422 8.121 258.629 8.012 258.738 cv
7.906 258.855 7.703 258.91 7.406 258.906 cv
7.105 258.91 6.902 258.852 6.793 258.734 cv
6.688 258.621 6.633 258.41 6.629 258.102 cv
6.633 257.801 6.688 257.598 6.789 257.484 cv
6.898 257.375 7.098 257.316 7.391 257.316 cv
cp
f
16.773 249.039 mo
16.82 249.039 16.855 249.051 16.879 249.07 cv
16.91 249.094 16.934 249.129 16.953 249.172 cv
16.973 249.223 16.984 249.285 17 249.367 cv
17.008 249.449 17.016 249.555 17.016 249.676 cv
17.016 249.809 17.008 249.914 17 249.996 cv
16.984 250.082 16.973 250.148 16.953 250.191 cv
16.934 250.242 16.91 250.273 16.879 250.293 cv
16.855 250.316 16.82 250.328 16.773 250.324 cv
12.668 250.324 li
12.27 250.328 11.949 250.359 11.703 250.418 cv
11.461 250.484 11.25 250.574 11.07 250.691 cv
10.895 250.809 10.758 250.965 10.664 251.152 cv
10.57 251.348 10.523 251.566 10.523 251.812 cv
10.523 252.137 10.641 252.461 10.867 252.781 cv
11.102 253.105 11.434 253.441 11.871 253.793 cv
16.773 253.793 li
16.82 253.797 16.855 253.809 16.879 253.824 cv
16.91 253.848 16.934 253.879 16.953 253.926 cv
16.973 253.973 16.984 254.039 17 254.117 cv
17.008 254.203 17.016 254.309 17.016 254.437 cv
17.016 254.566 17.008 254.672 17 254.75 cv
16.984 254.836 16.973 254.902 16.953 254.949 cv
16.934 255.004 16.91 255.035 16.879 255.051 cv
16.855 255.07 16.82 255.082 16.773 255.078 cv
9.762 255.078 li
9.723 255.082 9.688 255.074 9.656 255.055 cv
9.629 255.043 9.605 255.012 9.578 254.961 cv
9.559 254.918 9.543 254.855 9.531 254.781 cv
9.527 254.711 9.523 254.617 9.52 254.492 cv
9.523 254.383 9.527 254.285 9.531 254.207 cv
9.543 254.133 9.559 254.074 9.578 254.031 cv
9.605 253.992 9.629 253.965 9.656 253.945 cv
9.688 253.93 9.723 253.922 9.762 253.918 cv
10.688 253.918 li
10.246 253.527 9.926 253.133 9.719 252.738 cv
9.516 252.348 9.41 251.949 9.41 251.547 cv
9.41 251.078 9.492 250.687 9.648 250.367 cv
9.813 250.051 10.023 249.789 10.285 249.59 cv
10.551 249.395 10.859 249.254 11.215 249.168 cv
11.57 249.082 12 249.039 12.496 249.039 cv
cp
f
16.773 240.645 mo
16.82 240.648 16.855 240.656 16.879 240.672 cv
16.91 240.691 16.934 240.727 16.953 240.77 cv
16.973 240.816 16.984 240.875 17 240.949 cv
17.008 241.027 17.016 241.121 17.016 241.227 cv
17.016 241.352 17.008 241.449 17 241.52 cv
16.984 241.598 16.973 241.656 16.953 241.699 cv
16.934 241.746 16.91 241.777 16.879 241.789 cv
16.855 241.809 16.82 241.816 16.773 241.812 cv
15.848 241.812 li
16.293 242.215 16.613 242.609 16.813 242.996 cv
17.016 243.391 17.113 243.785 17.117 244.18 cv
17.113 244.652 17.039 245.047 16.883 245.363 cv
16.73 245.684 16.52 245.941 16.25 246.137 cv
15.984 246.34 15.672 246.48 15.313 246.562 cv
14.957 246.652 14.523 246.695 14.016 246.691 cv
9.762 246.691 li
9.723 246.695 9.688 246.687 9.656 246.664 cv
9.629 246.648 9.605 246.613 9.578 246.559 cv
9.559 246.512 9.543 246.441 9.531 246.355 cv
9.527 246.273 9.523 246.172 9.52 246.043 cv
9.523 245.922 9.527 245.816 9.531 245.73 cv
9.543 245.648 9.559 245.582 9.578 245.535 cv
9.605 245.488 9.629 245.453 9.656 245.43 cv
9.688 245.41 9.723 245.402 9.762 245.398 cv
13.844 245.398 li
14.258 245.402 14.586 245.371 14.832 245.309 cv
15.078 245.25 15.289 245.16 15.461 245.035 cv
15.641 244.918 15.773 244.762 15.867 244.57 cv
15.965 244.387 16.016 244.168 16.012 243.918 cv
16.016 243.598 15.898 243.277 15.668 242.953 cv
15.441 242.637 15.105 242.297 14.66 241.937 cv
9.762 241.937 li
9.723 241.937 9.688 241.93 9.656 241.91 cv
9.629 241.895 9.605 241.859 9.578 241.805 cv
9.559 241.754 9.543 241.687 9.531 241.605 cv
9.527 241.527 9.523 241.422 9.52 241.289 cv
9.523 241.168 9.527 241.062 9.531 240.977 cv
9.543 240.895 9.559 240.832 9.578 240.785 cv
9.605 240.742 9.629 240.707 9.656 240.68 cv
9.688 240.66 9.723 240.648 9.762 240.645 cv
cp
f
16.258 234.625 mo
16.414 234.625 16.531 234.637 16.617 234.656 cv
16.707 234.68 16.773 234.711 16.813 234.75 cv
16.855 234.793 16.895 234.855 16.93 234.937 cv
16.965 235.023 16.992 235.117 17.02 235.223 cv
17.039 235.332 17.059 235.445 17.078 235.562 cv
17.09 235.68 17.098 235.801 17.102 235.918 cv
17.098 236.285 17.051 236.598 16.957 236.855 cv
16.863 237.117 16.719 237.328 16.52 237.492 cv
16.328 237.66 16.082 237.781 15.781 237.855 cv
15.484 237.934 15.133 237.973 14.723 237.969 cv
10.625 237.969 li
10.625 238.949 li
10.629 239.027 10.586 239.09 10.5 239.137 cv
10.418 239.184 10.285 239.207 10.094 239.207 cv
10 239.207 9.918 239.203 9.848 239.187 cv
9.785 239.18 9.727 239.16 9.68 239.137 cv
9.637 239.117 9.605 239.09 9.586 239.055 cv
9.57 239.023 9.563 238.988 9.559 238.941 cv
9.559 237.969 li
7.891 237.969 li
7.859 237.973 7.824 237.961 7.789 237.941 cv
7.762 237.926 7.734 237.895 7.707 237.84 cv
7.688 237.793 7.672 237.727 7.656 237.641 cv
7.648 237.562 7.641 237.457 7.641 237.328 cv
7.641 237.199 7.648 237.094 7.656 237.012 cv
7.672 236.93 7.688 236.863 7.707 236.816 cv
7.734 236.77 7.762 236.738 7.789 236.715 cv
7.824 236.699 7.859 236.687 7.891 236.684 cv
9.559 236.684 li
9.559 234.883 li
9.563 234.844 9.57 234.809 9.586 234.773 cv
9.605 234.746 9.637 234.719 9.68 234.691 cv
9.727 234.672 9.785 234.656 9.848 234.641 cv
9.918 234.633 10 234.625 10.094 234.625 cv
10.285 234.625 10.418 234.648 10.5 234.695 cv
10.586 234.742 10.629 234.805 10.625 234.883 cv
10.625 236.684 li
14.539 236.684 li
15.023 236.687 15.387 236.617 15.633 236.469 cv
15.883 236.328 16.008 236.07 16.004 235.699 cv
16.008 235.586 15.996 235.48 15.969 235.383 cv
15.949 235.293 15.926 235.211 15.895 235.133 cv
15.871 235.062 15.844 235 15.82 234.945 cv
15.797 234.898 15.785 234.852 15.785 234.805 cv
15.785 234.781 15.793 234.754 15.805 234.73 cv
15.82 234.707 15.844 234.691 15.879 234.676 cv
15.918 234.668 15.969 234.656 16.027 234.641 cv
16.094 234.633 16.172 234.625 16.258 234.625 cv
cp
f
12.965 226.941 mo
13.168 226.945 13.309 226.996 13.395 227.094 cv
13.48 227.199 13.523 227.316 13.523 227.441 cv
13.523 232.059 li
13.914 232.062 14.266 232.023 14.578 231.941 cv
14.891 231.867 15.16 231.734 15.379 231.551 cv
15.605 231.371 15.777 231.137 15.895 230.84 cv
16.02 230.551 16.078 230.191 16.074 229.766 cv
16.078 229.434 16.051 229.137 15.992 228.875 cv
15.941 228.613 15.879 228.387 15.809 228.195 cv
15.742 228.008 15.684 227.852 15.625 227.727 cv
15.574 227.605 15.547 227.512 15.543 227.449 cv
15.547 227.414 15.555 227.383 15.57 227.352 cv
15.59 227.324 15.617 227.301 15.652 227.281 cv
15.691 227.27 15.742 227.258 15.805 227.246 cv
15.871 227.242 15.949 227.238 16.043 227.234 cv
16.113 227.238 16.172 227.242 16.219 227.242 cv
16.266 227.25 16.309 227.254 16.348 227.262 cv
16.387 227.27 16.422 227.285 16.453 227.301 cv
16.484 227.324 16.516 227.348 16.543 227.371 cv
16.574 227.402 16.621 227.484 16.684 227.625 cv
16.75 227.766 16.813 227.949 16.875 228.172 cv
16.938 228.398 16.992 228.656 17.043 228.949 cv
17.09 229.242 17.113 229.555 17.117 229.887 cv
17.113 230.465 17.035 230.973 16.875 231.402 cv
16.715 231.84 16.477 232.203 16.16 232.496 cv
15.844 232.797 15.449 233.02 14.969 233.168 cv
14.492 233.316 13.934 233.391 13.297 233.391 cv
12.699 233.391 12.16 233.316 11.676 233.16 cv
11.199 233.008 10.789 232.781 10.453 232.484 cv
10.117 232.191 9.859 231.836 9.68 231.422 cv
9.5 231.008 9.41 230.543 9.41 230.027 cv
9.41 229.477 9.5 229.008 9.676 228.621 cv
9.855 228.234 10.094 227.918 10.391 227.664 cv
10.691 227.418 11.043 227.234 11.441 227.117 cv
11.848 227.004 12.277 226.945 12.73 226.941 cv
cp
12.582 228.234 mo
11.906 228.219 11.375 228.371 10.992 228.687 cv
10.609 229.004 10.418 229.473 10.414 230.09 cv
10.418 230.414 10.477 230.695 10.594 230.934 cv
10.715 231.176 10.875 231.375 11.07 231.535 cv
11.27 231.699 11.5 231.824 11.762 231.91 cv
12.023 232 12.297 232.051 12.582 232.059 cv
cp
f
14.863 220.656 mo
15.227 220.66 15.547 220.727 15.824 220.855 cv
16.105 220.988 16.34 221.176 16.531 221.418 cv
16.727 221.664 16.871 221.957 16.969 222.293 cv
17.066 222.633 17.113 223.004 17.117 223.406 cv
17.113 223.66 17.094 223.898 17.059 224.121 cv
17.016 224.348 16.969 224.547 16.91 224.727 cv
16.852 224.906 16.789 225.059 16.723 225.184 cv
16.66 225.309 16.602 225.402 16.547 225.457 cv
16.496 225.516 16.426 225.555 16.328 225.578 cv
16.238 225.605 16.109 225.617 15.949 225.617 cv
15.852 225.617 15.77 225.613 15.699 225.602 cv
15.633 225.594 15.578 225.582 15.535 225.562 cv
15.496 225.551 15.465 225.527 15.445 225.5 cv
15.43 225.473 15.422 225.441 15.418 225.402 cv
15.422 225.348 15.457 225.262 15.523 225.148 cv
15.598 225.039 15.676 224.902 15.754 224.734 cv
15.84 224.574 15.914 224.383 15.984 224.156 cv
16.055 223.937 16.09 223.68 16.09 223.383 cv
16.09 223.168 16.066 222.969 16.02 222.789 cv
15.973 222.613 15.906 222.461 15.813 222.332 cv
15.727 222.203 15.609 222.102 15.465 222.031 cv
15.328 221.961 15.16 221.926 14.965 221.926 cv
14.77 221.926 14.605 221.977 14.469 222.078 cv
14.336 222.18 14.215 222.316 14.109 222.48 cv
14.008 222.648 13.918 222.832 13.832 223.039 cv
13.754 223.25 13.668 223.465 13.578 223.684 cv
13.492 223.902 13.391 224.117 13.277 224.328 cv
13.168 224.539 13.035 224.73 12.871 224.895 cv
12.715 225.066 12.52 225.199 12.293 225.297 cv
12.07 225.402 11.805 225.453 11.492 225.449 cv
11.219 225.453 10.953 225.398 10.699 225.289 cv
10.449 225.184 10.23 225.023 10.039 224.809 cv
9.852 224.598 9.699 224.332 9.582 224.012 cv
9.469 223.691 9.41 223.32 9.41 222.891 cv
9.41 222.707 9.426 222.52 9.457 222.332 cv
9.488 222.148 9.527 221.98 9.574 221.824 cv
9.621 221.676 9.672 221.547 9.727 221.437 cv
9.781 221.336 9.832 221.254 9.871 221.195 cv
9.918 221.145 9.953 221.109 9.98 221.086 cv
10.012 221.07 10.047 221.055 10.082 221.047 cv
10.125 221.039 10.172 221.031 10.227 221.023 cv
10.285 221.016 10.355 221.012 10.438 221.012 cv
10.527 221.012 10.605 221.016 10.668 221.023 cv
10.738 221.031 10.789 221.047 10.828 221.062 cv
10.871 221.086 10.902 221.105 10.918 221.129 cv
10.938 221.156 10.945 221.187 10.945 221.215 cv
10.945 221.266 10.918 221.332 10.859 221.418 cv
10.805 221.508 10.742 221.621 10.676 221.762 cv
10.613 221.902 10.555 222.07 10.492 222.258 cv
10.438 222.449 10.406 222.664 10.406 222.906 cv
10.406 223.129 10.434 223.32 10.48 223.484 cv
10.535 223.652 10.605 223.789 10.691 223.895 cv
10.785 224 10.891 224.082 11.016 224.133 cv
11.141 224.191 11.277 224.219 11.422 224.215 cv
11.625 224.219 11.793 224.168 11.93 224.062 cv
12.07 223.961 12.191 223.824 12.293 223.656 cv
12.398 223.492 12.492 223.301 12.574 223.086 cv
12.66 222.875 12.746 222.66 12.832 222.437 cv
12.922 222.219 13.023 222 13.129 221.781 cv
13.238 221.566 13.367 221.375 13.523 221.207 cv
13.68 221.043 13.867 220.91 14.086 220.809 cv
14.305 220.711 14.566 220.66 14.863 220.656 cv
cp
f
12.785 216.211 mo
13.371 216.211 13.953 216.25 14.527 216.32 cv
15.102 216.398 15.668 216.508 16.23 216.648 cv
16.789 216.797 17.34 216.973 17.883 217.184 cv
18.426 217.395 18.961 217.641 19.492 217.918 cv
19.516 217.937 19.539 217.961 19.563 217.988 cv
19.582 218.023 19.602 218.062 19.617 218.109 cv
19.633 218.16 19.641 218.219 19.648 218.285 cv
19.648 218.355 19.652 218.437 19.656 218.527 cv
19.652 218.664 19.645 218.77 19.637 218.844 cv
19.621 218.922 19.602 218.977 19.574 219.008 cv
19.543 219.043 19.508 219.059 19.465 219.055 cv
19.418 219.055 19.363 219.039 19.305 219.012 cv
18.254 218.535 17.184 218.176 16.086 217.93 cv
14.988 217.687 13.879 217.566 12.762 217.562 cv
11.652 217.566 10.547 217.687 9.445 217.93 cv
8.348 218.176 7.277 218.543 6.23 219.027 cv
6.188 219.051 6.145 219.059 6.098 219.051 cv
6.059 219.051 6.023 219.027 5.996 218.98 cv
5.973 218.941 5.953 218.883 5.934 218.809 cv
5.922 218.738 5.914 218.641 5.91 218.52 cv
5.914 218.41 5.918 218.32 5.922 218.246 cv
5.934 218.176 5.945 218.117 5.957 218.07 cv
5.977 218.027 5.992 217.996 6.004 217.973 cv
6.023 217.957 6.039 217.941 6.059 217.926 cv
7.125 217.395 8.223 216.973 9.344 216.668 cv
10.473 216.363 11.617 216.211 12.785 216.211 cv
cp
f
263.789 537.02 mo
263.785 537.125 263.77 537.215 263.734 537.285 cv
263.699 537.363 263.652 537.422 263.598 537.465 cv
263.539 537.516 263.477 537.551 263.41 537.566 cv
263.336 537.59 263.266 537.598 263.203 537.598 cv
262.758 537.598 li
262.617 537.598 262.496 537.586 262.391 537.555 cv
262.285 537.531 262.188 537.477 262.094 537.398 cv
262 537.324 261.906 537.223 261.813 537.09 cv
261.719 536.961 261.617 536.797 261.512 536.594 cv
258.438 530.855 li
258.273 530.562 258.109 530.254 257.949 529.926 cv
257.781 529.605 257.629 529.289 257.492 528.98 cv
257.477 528.98 li
257.484 529.355 257.492 529.738 257.5 530.125 cv
257.504 530.516 257.504 530.902 257.508 531.285 cv
257.508 537.371 li
257.504 537.41 257.492 537.445 257.473 537.477 cv
257.449 537.512 257.414 537.539 257.363 537.555 cv
257.309 537.574 257.238 537.586 257.156 537.602 cv
257.07 537.613 256.965 537.621 256.836 537.621 cv
256.699 537.621 256.59 537.613 256.508 537.602 cv
256.422 537.586 256.355 537.574 256.309 537.555 cv
256.258 537.539 256.223 537.512 256.199 537.477 cv
256.176 537.445 256.164 537.41 256.168 537.371 cv
256.168 528.066 li
256.164 527.859 256.223 527.711 256.344 527.621 cv
256.461 527.535 256.59 527.492 256.73 527.488 cv
257.391 527.488 li
257.543 527.492 257.676 527.504 257.781 527.527 cv
257.883 527.555 257.977 527.598 258.063 527.656 cv
258.145 527.719 258.223 527.801 258.305 527.906 cv
258.379 528.016 258.461 528.152 258.547 528.309 cv
260.914 532.734 li
261.059 533.008 261.199 533.273 261.336 533.527 cv
261.469 533.785 261.598 534.039 261.727 534.285 cv
261.848 534.539 261.973 534.785 262.098 535.023 cv
262.219 535.266 262.34 535.508 262.465 535.75 cv
262.473 535.75 li
262.461 535.344 262.453 534.914 262.453 534.469 cv
262.445 534.023 262.445 533.598 262.449 533.187 cv
262.449 527.715 li
262.445 527.68 262.457 527.645 262.48 527.613 cv
262.504 527.582 262.539 527.555 262.594 527.531 cv
262.641 527.508 262.711 527.492 262.797 527.48 cv
262.883 527.473 262.992 527.469 263.133 527.465 cv
263.25 527.469 263.355 527.473 263.445 527.48 cv
263.531 527.492 263.598 527.508 263.648 527.531 cv
263.695 527.555 263.73 527.582 263.754 527.613 cv
263.773 527.645 263.785 527.68 263.789 527.715 cv
cp
f
272.34 537.379 mo
272.336 537.426 272.328 537.461 272.313 537.484 cv
272.293 537.516 272.258 537.539 272.215 537.559 cv
272.168 537.578 272.109 537.59 272.035 537.605 cv
271.957 537.613 271.863 537.621 271.758 537.621 cv
271.633 537.621 271.535 537.613 271.465 537.605 cv
271.387 537.59 271.328 537.578 271.285 537.559 cv
271.238 537.539 271.207 537.516 271.195 537.484 cv
271.176 537.461 271.168 537.426 271.172 537.379 cv
271.172 536.453 li
270.77 536.898 270.375 537.219 269.988 537.418 cv
269.594 537.621 269.199 537.719 268.805 537.723 cv
268.332 537.719 267.938 537.645 267.621 537.488 cv
267.301 537.336 267.043 537.125 266.848 536.855 cv
266.645 536.59 266.504 536.277 266.422 535.918 cv
266.332 535.562 266.289 535.129 266.293 534.621 cv
266.293 530.367 li
266.289 530.328 266.297 530.293 266.32 530.262 cv
266.336 530.234 266.371 530.211 266.426 530.184 cv
266.473 530.164 266.543 530.148 266.629 530.137 cv
266.711 530.133 266.813 530.129 266.941 530.125 cv
267.063 530.129 267.168 530.133 267.254 530.137 cv
267.336 530.148 267.402 530.164 267.449 530.184 cv
267.496 530.211 267.531 530.234 267.555 530.262 cv
267.574 530.293 267.582 530.328 267.586 530.367 cv
267.586 534.449 li
267.582 534.863 267.613 535.191 267.676 535.437 cv
267.734 535.684 267.824 535.895 267.949 536.066 cv
268.066 536.246 268.223 536.379 268.414 536.473 cv
268.598 536.57 268.816 536.621 269.066 536.617 cv
269.387 536.621 269.707 536.504 270.031 536.273 cv
270.348 536.047 270.688 535.711 271.047 535.266 cv
271.047 530.367 li
271.047 530.328 271.055 530.293 271.074 530.262 cv
271.09 530.234 271.125 530.211 271.18 530.184 cv
271.23 530.164 271.297 530.148 271.379 530.137 cv
271.457 530.133 271.563 530.129 271.695 530.125 cv
271.816 530.129 271.922 530.133 272.008 530.137 cv
272.09 530.148 272.152 530.164 272.199 530.184 cv
272.242 530.211 272.277 530.234 272.305 530.262 cv
272.324 530.293 272.336 530.328 272.34 530.367 cv
cp
f
285.117 537.379 mo
285.113 537.426 285.105 537.461 285.086 537.484 cv
285.063 537.516 285.027 537.539 284.984 537.559 cv
284.934 537.578 284.867 537.59 284.789 537.605 cv
284.703 537.613 284.602 537.621 284.477 537.621 cv
284.344 537.621 284.234 537.613 284.156 537.605 cv
284.07 537.59 284.004 537.578 283.957 537.559 cv
283.902 537.539 283.867 537.516 283.852 537.484 cv
283.828 537.461 283.82 537.426 283.82 537.379 cv
283.82 533.117 li
283.82 532.824 283.793 532.555 283.742 532.309 cv
283.688 532.066 283.605 531.855 283.492 531.676 cv
283.379 531.5 283.234 531.363 283.059 531.27 cv
282.879 531.176 282.668 531.129 282.434 531.129 cv
282.137 531.129 281.84 531.246 281.543 531.473 cv
281.238 531.707 280.91 532.039 280.555 532.477 cv
280.555 537.379 li
280.551 537.426 280.539 537.461 280.523 537.484 cv
280.5 537.516 280.469 537.539 280.422 537.559 cv
280.371 537.578 280.305 537.59 280.223 537.605 cv
280.137 537.613 280.031 537.621 279.91 537.621 cv
279.789 537.621 279.688 537.613 279.602 537.605 cv
279.516 537.59 279.445 537.578 279.398 537.559 cv
279.344 537.539 279.313 537.516 279.297 537.484 cv
279.277 537.461 279.266 537.426 279.27 537.379 cv
279.27 533.117 li
279.266 532.824 279.238 532.555 279.184 532.309 cv
279.125 532.066 279.039 531.855 278.926 531.676 cv
278.813 531.5 278.668 531.363 278.496 531.27 cv
278.316 531.176 278.109 531.129 277.875 531.129 cv
277.574 531.129 277.277 531.246 276.977 531.473 cv
276.676 531.707 276.348 532.039 275.996 532.477 cv
275.996 537.379 li
275.992 537.426 275.98 537.461 275.965 537.484 cv
275.941 537.516 275.91 537.539 275.863 537.559 cv
275.816 537.578 275.75 537.59 275.672 537.605 cv
275.586 537.613 275.48 537.621 275.352 537.621 cv
275.223 537.621 275.117 537.613 275.039 537.605 cv
274.953 537.59 274.887 537.578 274.84 537.559 cv
274.785 537.539 274.754 537.516 274.738 537.484 cv
274.719 537.461 274.707 537.426 274.711 537.379 cv
274.711 530.367 li
274.707 530.328 274.715 530.293 274.734 530.262 cv
274.746 530.234 274.777 530.211 274.828 530.184 cv
274.871 530.164 274.934 530.148 275.008 530.137 cv
275.078 530.133 275.172 530.129 275.297 530.125 cv
275.406 530.129 275.504 530.133 275.582 530.137 cv
275.656 530.148 275.715 530.164 275.758 530.184 cv
275.797 530.211 275.824 530.234 275.844 530.262 cv
275.859 530.293 275.867 530.328 275.871 530.367 cv
275.871 531.293 li
276.262 530.852 276.645 530.531 277.02 530.324 cv
277.387 530.121 277.766 530.016 278.148 530.016 cv
278.438 530.016 278.695 530.051 278.93 530.117 cv
279.156 530.187 279.363 530.281 279.543 530.402 cv
279.719 530.523 279.867 530.668 279.996 530.836 cv
280.117 531.008 280.223 531.199 280.309 531.402 cv
280.539 531.152 280.762 530.937 280.973 530.758 cv
281.184 530.586 281.387 530.441 281.582 530.328 cv
281.777 530.223 281.965 530.145 282.148 530.09 cv
282.332 530.043 282.52 530.016 282.707 530.016 cv
283.16 530.016 283.539 530.098 283.844 530.254 cv
284.148 530.418 284.395 530.629 284.59 530.891 cv
284.777 531.156 284.914 531.465 284.996 531.82 cv
285.074 532.176 285.113 532.551 285.117 532.945 cv
cp
f
293.914 533.777 mo
293.91 534.387 293.844 534.937 293.715 535.422 cv
293.578 535.91 293.383 536.324 293.129 536.664 cv
292.871 537.008 292.555 537.27 292.184 537.449 cv
291.809 537.633 291.383 537.719 290.898 537.723 cv
290.672 537.719 290.465 537.699 290.277 537.656 cv
290.09 537.609 289.902 537.539 289.723 537.441 cv
289.535 537.344 289.355 537.219 289.176 537.066 cv
288.992 536.918 288.801 536.738 288.602 536.523 cv
288.602 537.379 li
288.602 537.426 288.59 537.461 288.57 537.488 cv
288.547 537.523 288.512 537.547 288.469 537.562 cv
288.418 537.578 288.359 537.59 288.293 537.605 cv
288.219 537.613 288.129 537.621 288.023 537.621 cv
287.914 537.621 287.828 537.613 287.758 537.605 cv
287.684 537.59 287.621 537.578 287.578 537.562 cv
287.527 537.547 287.496 537.523 287.484 537.488 cv
287.465 537.461 287.457 537.426 287.461 537.379 cv
287.461 526.969 li
287.457 526.93 287.469 526.895 287.488 526.859 cv
287.504 526.832 287.535 526.805 287.59 526.781 cv
287.637 526.762 287.703 526.746 287.789 526.734 cv
287.867 526.727 287.973 526.723 288.102 526.719 cv
288.23 526.723 288.336 526.727 288.422 526.734 cv
288.5 526.746 288.566 526.762 288.613 526.781 cv
288.66 526.805 288.691 526.832 288.715 526.859 cv
288.73 526.895 288.742 526.93 288.746 526.969 cv
288.746 531.168 li
288.953 530.957 289.156 530.777 289.352 530.633 cv
289.547 530.488 289.734 530.371 289.922 530.277 cv
290.105 530.191 290.293 530.125 290.484 530.078 cv
290.668 530.039 290.867 530.016 291.078 530.016 cv
291.582 530.016 292.016 530.117 292.383 530.32 cv
292.742 530.523 293.035 530.797 293.262 531.133 cv
293.484 531.477 293.652 531.875 293.758 532.332 cv
293.859 532.789 293.91 533.27 293.914 533.777 cv
cp
292.582 533.926 mo
292.578 533.57 292.551 533.223 292.5 532.883 cv
292.441 532.547 292.348 532.25 292.211 531.988 cv
292.074 531.73 291.895 531.52 291.672 531.359 cv
291.445 531.203 291.164 531.125 290.832 531.121 cv
290.664 531.125 290.5 531.148 290.34 531.191 cv
290.176 531.242 290.012 531.32 289.844 531.426 cv
289.676 531.539 289.5 531.68 289.324 531.848 cv
289.141 532.023 288.949 532.238 288.746 532.492 cv
288.746 535.289 li
289.102 535.723 289.441 536.055 289.766 536.277 cv
290.09 536.508 290.426 536.621 290.777 536.617 cv
291.098 536.621 291.375 536.543 291.609 536.383 cv
291.836 536.23 292.023 536.023 292.168 535.762 cv
292.313 535.508 292.418 535.219 292.484 534.898 cv
292.547 534.582 292.578 534.258 292.582 533.926 cv
cp
f
301.824 533.57 mo
301.82 533.773 301.77 533.914 301.672 534 cv
301.566 534.086 301.449 534.129 301.324 534.129 cv
296.707 534.129 li
296.703 534.52 296.742 534.871 296.824 535.184 cv
296.898 535.496 297.031 535.766 297.215 535.984 cv
297.395 536.211 297.629 536.383 297.926 536.5 cv
298.215 536.625 298.574 536.684 299 536.68 cv
299.332 536.684 299.629 536.656 299.891 536.598 cv
300.152 536.547 300.379 536.484 300.57 536.414 cv
300.758 536.348 300.914 536.289 301.039 536.23 cv
301.16 536.18 301.254 536.152 301.316 536.148 cv
301.352 536.152 301.383 536.16 301.414 536.176 cv
301.441 536.195 301.465 536.223 301.484 536.258 cv
301.496 536.297 301.508 536.348 301.52 536.41 cv
301.523 536.477 301.527 536.555 301.531 536.648 cv
301.527 536.719 301.523 536.777 301.523 536.824 cv
301.516 536.871 301.512 536.914 301.504 536.953 cv
301.496 536.992 301.48 537.027 301.465 537.059 cv
301.441 537.09 301.418 537.121 301.395 537.148 cv
301.363 537.18 301.281 537.227 301.141 537.289 cv
301 537.355 300.816 537.418 300.594 537.48 cv
300.367 537.543 300.109 537.598 299.816 537.648 cv
299.523 537.695 299.211 537.719 298.879 537.723 cv
298.301 537.719 297.793 537.641 297.363 537.48 cv
296.926 537.32 296.563 537.082 296.27 536.766 cv
295.969 536.449 295.746 536.055 295.598 535.574 cv
295.449 535.098 295.375 534.539 295.375 533.902 cv
295.375 533.305 295.449 532.766 295.605 532.281 cv
295.758 531.805 295.984 531.395 296.281 531.059 cv
296.574 530.723 296.93 530.465 297.344 530.285 cv
297.758 530.105 298.223 530.016 298.738 530.016 cv
299.289 530.016 299.758 530.105 300.145 530.281 cv
300.531 530.461 300.848 530.699 301.102 530.996 cv
301.348 531.297 301.531 531.648 301.648 532.047 cv
301.762 532.453 301.82 532.883 301.824 533.336 cv
cp
300.531 533.187 mo
300.547 532.512 300.395 531.98 300.078 531.598 cv
299.762 531.215 299.293 531.023 298.676 531.02 cv
298.352 531.023 298.07 531.082 297.832 531.199 cv
297.59 531.32 297.391 531.48 297.23 531.676 cv
297.066 531.875 296.941 532.105 296.855 532.367 cv
296.766 532.629 296.715 532.902 296.707 533.187 cv
cp
f
307.891 530.824 mo
307.887 530.941 307.887 531.039 307.883 531.113 cv
307.875 531.195 307.863 531.258 307.852 531.297 cv
307.832 531.344 307.813 531.375 307.793 531.398 cv
307.766 531.422 307.734 531.434 307.695 531.434 cv
307.652 531.434 307.602 531.422 307.543 531.398 cv
307.48 531.375 307.41 531.352 307.34 531.328 cv
307.262 531.305 307.18 531.285 307.086 531.262 cv
306.992 531.246 306.891 531.234 306.781 531.23 cv
306.648 531.234 306.52 531.262 306.398 531.309 cv
306.273 531.363 306.145 531.449 306.008 531.566 cv
305.867 531.691 305.723 531.848 305.574 532.043 cv
305.422 532.238 305.254 532.48 305.074 532.766 cv
305.074 537.379 li
305.07 537.426 305.059 537.461 305.043 537.484 cv
305.02 537.516 304.988 537.539 304.941 537.559 cv
304.895 537.578 304.828 537.59 304.75 537.605 cv
304.664 537.613 304.559 537.621 304.43 537.621 cv
304.301 537.621 304.195 537.613 304.117 537.605 cv
304.031 537.59 303.965 537.578 303.918 537.559 cv
303.863 537.539 303.832 537.516 303.816 537.484 cv
303.797 537.461 303.785 537.426 303.789 537.379 cv
303.789 530.367 li
303.785 530.328 303.793 530.293 303.813 530.262 cv
303.824 530.234 303.855 530.211 303.906 530.184 cv
303.949 530.164 304.012 530.148 304.086 530.137 cv
304.156 530.133 304.25 530.129 304.375 530.125 cv
304.484 530.129 304.582 530.133 304.66 530.137 cv
304.734 530.148 304.793 530.164 304.836 530.184 cv
304.875 530.211 304.902 530.234 304.922 530.262 cv
304.938 530.293 304.945 530.328 304.949 530.367 cv
304.949 531.387 li
305.137 531.105 305.32 530.879 305.492 530.703 cv
305.66 530.527 305.82 530.387 305.973 530.285 cv
306.121 530.184 306.27 530.113 306.418 530.074 cv
306.566 530.035 306.715 530.016 306.867 530.016 cv
306.934 530.016 307.012 530.02 307.098 530.027 cv
307.184 530.035 307.273 530.051 307.367 530.07 cv
307.461 530.094 307.543 530.117 307.621 530.141 cv
307.691 530.168 307.746 530.195 307.781 530.219 cv
307.809 530.25 307.828 530.273 307.844 530.293 cv
307.852 530.32 307.863 530.352 307.871 530.383 cv
307.879 530.422 307.883 530.473 307.887 530.543 cv
307.887 530.613 307.887 530.707 307.891 530.824 cv
cp
f
319.648 533.793 mo
319.645 534.371 319.57 534.898 319.422 535.375 cv
319.27 535.859 319.043 536.273 318.746 536.617 cv
318.445 536.969 318.07 537.238 317.625 537.43 cv
317.172 537.625 316.652 537.719 316.063 537.723 cv
315.484 537.719 314.98 537.637 314.555 537.465 cv
314.125 537.297 313.77 537.047 313.484 536.719 cv
313.195 536.391 312.98 535.996 312.844 535.527 cv
312.703 535.062 312.637 534.531 312.637 533.934 cv
312.637 533.367 312.707 532.84 312.855 532.359 cv
313 531.879 313.227 531.465 313.527 531.113 cv
313.824 530.766 314.195 530.496 314.645 530.305 cv
315.09 530.113 315.613 530.016 316.211 530.016 cv
316.789 530.016 317.289 530.102 317.719 530.273 cv
318.145 530.445 318.504 530.695 318.789 531.023 cv
319.074 531.352 319.289 531.75 319.434 532.215 cv
319.574 532.684 319.645 533.211 319.648 533.793 cv
cp
318.316 533.879 mo
318.313 533.504 318.277 533.145 318.211 532.805 cv
318.137 532.469 318.02 532.176 317.859 531.918 cv
317.695 531.668 317.477 531.465 317.199 531.312 cv
316.918 531.168 316.57 531.094 316.16 531.09 cv
315.773 531.094 315.445 531.16 315.172 531.293 cv
314.895 531.43 314.668 531.621 314.492 531.867 cv
314.313 532.113 314.18 532.406 314.098 532.742 cv
314.008 533.082 313.965 533.449 313.969 533.848 cv
313.965 534.234 314 534.598 314.074 534.934 cv
314.141 535.273 314.258 535.566 314.426 535.816 cv
314.59 536.07 314.813 536.273 315.09 536.418 cv
315.367 536.57 315.715 536.645 316.129 536.641 cv
316.504 536.645 316.832 536.574 317.113 536.437 cv
317.391 536.305 317.617 536.117 317.797 535.867 cv
317.973 535.625 318.102 535.332 318.188 534.996 cv
318.27 534.66 318.313 534.289 318.316 533.879 cv
cp
f
325.383 527.48 mo
325.379 527.582 325.375 527.66 325.367 527.719 cv
325.355 527.781 325.344 527.832 325.332 527.863 cv
325.316 527.902 325.301 527.926 325.281 527.937 cv
325.258 527.953 325.23 527.961 325.203 527.957 cv
325.164 527.961 325.117 527.949 325.066 527.922 cv
325.008 527.902 324.941 527.875 324.867 527.844 cv
324.785 527.816 324.695 527.789 324.59 527.766 cv
324.48 527.742 324.355 527.73 324.223 527.73 cv
324.027 527.73 323.863 527.762 323.73 527.824 cv
323.59 527.887 323.48 527.984 323.402 528.117 cv
323.316 528.25 323.258 528.422 323.223 528.633 cv
323.184 528.844 323.164 529.102 323.168 529.398 cv
323.168 530.164 li
324.734 530.164 li
324.773 530.168 324.809 530.176 324.84 530.191 cv
324.867 530.211 324.895 530.242 324.918 530.285 cv
324.941 530.332 324.957 530.391 324.973 530.453 cv
324.98 530.523 324.988 530.605 324.992 530.699 cv
324.988 530.891 324.965 531.023 324.922 531.105 cv
324.871 531.191 324.809 531.234 324.734 531.23 cv
323.168 531.23 li
323.168 537.379 li
323.164 537.426 323.156 537.461 323.137 537.484 cv
323.113 537.516 323.078 537.539 323.031 537.559 cv
322.98 537.578 322.914 537.59 322.832 537.605 cv
322.746 537.613 322.641 537.621 322.523 537.621 cv
322.395 537.621 322.293 537.613 322.211 537.605 cv
322.125 537.59 322.059 537.578 322.012 537.559 cv
321.961 537.539 321.926 537.516 321.906 537.484 cv
321.883 537.461 321.871 537.426 321.875 537.379 cv
321.875 531.23 li
320.887 531.23 li
320.801 531.234 320.738 531.191 320.699 531.105 cv
320.656 531.023 320.633 530.891 320.637 530.699 cv
320.633 530.605 320.641 530.523 320.652 530.453 cv
320.66 530.391 320.676 530.332 320.699 530.285 cv
320.719 530.242 320.742 530.211 320.777 530.191 cv
320.805 530.176 320.844 530.168 320.887 530.164 cv
321.875 530.164 li
321.875 529.437 li
321.871 528.953 321.918 528.535 322.012 528.18 cv
322.102 527.832 322.238 527.543 322.426 527.32 cv
322.609 527.098 322.844 526.934 323.133 526.824 cv
323.414 526.719 323.75 526.664 324.137 526.664 cv
324.313 526.664 324.488 526.684 324.664 526.715 cv
324.832 526.754 324.965 526.789 325.063 526.824 cv
325.152 526.867 325.215 526.902 325.25 526.93 cv
325.277 526.965 325.305 527.004 325.328 527.051 cv
325.348 527.102 325.359 527.164 325.371 527.23 cv
325.375 527.305 325.379 527.387 325.383 527.48 cv
cp
f
335.578 534.746 mo
335.574 535.219 335.488 535.641 335.316 536.008 cv
335.141 536.383 334.898 536.695 334.59 536.949 cv
334.281 537.207 333.918 537.398 333.5 537.527 cv
333.078 537.656 332.629 537.719 332.148 537.723 cv
331.809 537.719 331.492 537.691 331.207 537.637 cv
330.918 537.578 330.664 537.512 330.438 537.426 cv
330.211 537.348 330.02 537.262 329.867 537.168 cv
329.711 537.082 329.605 537.004 329.547 536.941 cv
329.488 536.879 329.445 536.801 329.418 536.707 cv
329.387 536.613 329.371 536.484 329.375 536.32 cv
329.371 536.207 329.375 536.113 329.391 536.035 cv
329.398 535.961 329.414 535.898 329.438 535.852 cv
329.453 535.805 329.48 535.773 329.516 535.754 cv
329.543 535.738 329.578 535.73 329.621 535.727 cv
329.691 535.73 329.793 535.773 329.93 535.859 cv
330.059 535.949 330.23 536.047 330.441 536.148 cv
330.648 536.258 330.898 536.355 331.191 536.441 cv
331.484 536.535 331.824 536.578 332.211 536.578 cv
332.5 536.578 332.766 536.539 333.008 536.461 cv
333.246 536.383 333.453 536.273 333.633 536.129 cv
333.805 535.988 333.941 535.812 334.035 535.602 cv
334.129 535.395 334.176 535.16 334.176 534.895 cv
334.176 534.613 334.109 534.367 333.98 534.16 cv
333.848 533.961 333.676 533.785 333.465 533.629 cv
333.25 533.48 333.008 533.34 332.734 533.207 cv
332.461 533.082 332.18 532.949 331.898 532.816 cv
331.609 532.684 331.332 532.539 331.063 532.375 cv
330.793 532.219 330.551 532.027 330.34 531.809 cv
330.121 531.59 329.949 531.336 329.82 531.039 cv
329.684 530.75 329.617 530.398 329.621 529.984 cv
329.617 529.566 329.695 529.191 329.852 528.859 cv
330.004 528.531 330.215 528.254 330.492 528.027 cv
330.762 527.809 331.086 527.637 331.465 527.52 cv
331.84 527.402 332.25 527.344 332.688 527.344 cv
332.906 527.344 333.129 527.363 333.359 527.402 cv
333.582 527.441 333.793 527.492 333.996 527.555 cv
334.191 527.621 334.371 527.695 334.531 527.773 cv
334.684 527.855 334.785 527.922 334.84 527.969 cv
334.887 528.023 334.922 528.062 334.938 528.086 cv
334.953 528.117 334.965 528.152 334.977 528.195 cv
334.984 528.242 334.992 528.297 335 528.355 cv
335.004 528.422 335.008 528.5 335.008 528.598 cv
335.008 528.691 335.004 528.777 334.996 528.848 cv
334.988 528.926 334.977 528.984 334.961 529.031 cv
334.945 529.078 334.922 529.113 334.895 529.137 cv
334.863 529.16 334.832 529.172 334.797 529.172 cv
334.738 529.172 334.648 529.137 334.527 529.066 cv
334.402 528.996 334.25 528.914 334.078 528.82 cv
333.898 528.73 333.691 528.648 333.453 528.57 cv
333.207 528.496 332.938 528.457 332.641 528.457 cv
332.359 528.457 332.113 528.496 331.906 528.57 cv
331.695 528.648 331.523 528.75 331.391 528.871 cv
331.254 528.996 331.152 529.141 331.086 529.312 cv
331.02 529.484 330.988 529.668 330.988 529.859 cv
330.988 530.145 331.051 530.387 331.18 530.586 cv
331.309 530.789 331.48 530.969 331.699 531.121 cv
331.91 531.281 332.156 531.422 332.434 531.551 cv
332.707 531.684 332.988 531.816 333.277 531.945 cv
333.563 532.078 333.844 532.223 334.117 532.379 cv
334.391 532.539 334.637 532.727 334.855 532.941 cv
335.07 533.16 335.242 533.414 335.379 533.707 cv
335.508 534 335.574 534.348 335.578 534.746 cv
cp
f
343.344 537.379 mo
343.34 537.426 343.332 537.461 343.316 537.484 cv
343.297 537.516 343.262 537.539 343.219 537.559 cv
343.172 537.578 343.113 537.59 343.039 537.605 cv
342.961 537.613 342.867 537.621 342.762 537.621 cv
342.637 537.621 342.539 537.613 342.469 537.605 cv
342.391 537.59 342.332 537.578 342.289 537.559 cv
342.242 537.539 342.211 537.516 342.199 537.484 cv
342.18 537.461 342.172 537.426 342.176 537.379 cv
342.176 536.453 li
341.773 536.898 341.379 537.219 340.992 537.418 cv
340.598 537.621 340.203 537.719 339.809 537.723 cv
339.336 537.719 338.941 537.645 338.625 537.488 cv
338.305 537.336 338.047 537.125 337.852 536.855 cv
337.648 536.59 337.508 536.277 337.426 535.918 cv
337.336 535.562 337.293 535.129 337.297 534.621 cv
337.297 530.367 li
337.293 530.328 337.301 530.293 337.324 530.262 cv
337.34 530.234 337.375 530.211 337.43 530.184 cv
337.477 530.164 337.547 530.148 337.633 530.137 cv
337.715 530.133 337.816 530.129 337.945 530.125 cv
338.066 530.129 338.172 530.133 338.258 530.137 cv
338.34 530.148 338.406 530.164 338.453 530.184 cv
338.5 530.211 338.535 530.234 338.559 530.262 cv
338.578 530.293 338.586 530.328 338.59 530.367 cv
338.59 534.449 li
338.586 534.863 338.617 535.191 338.68 535.437 cv
338.738 535.684 338.828 535.895 338.953 536.066 cv
339.07 536.246 339.227 536.379 339.418 536.473 cv
339.602 536.57 339.82 536.621 340.07 536.617 cv
340.391 536.621 340.711 536.504 341.035 536.273 cv
341.352 536.047 341.691 535.711 342.051 535.266 cv
342.051 530.367 li
342.051 530.328 342.059 530.293 342.078 530.262 cv
342.094 530.234 342.129 530.211 342.184 530.184 cv
342.234 530.164 342.301 530.148 342.383 530.137 cv
342.461 530.133 342.566 530.129 342.699 530.125 cv
342.82 530.129 342.926 530.133 343.012 530.137 cv
343.094 530.148 343.156 530.164 343.203 530.184 cv
343.246 530.211 343.281 530.234 343.309 530.262 cv
343.328 530.293 343.34 530.328 343.344 530.367 cv
cp
f
352.203 533.777 mo
352.199 534.387 352.133 534.937 352.004 535.422 cv
351.867 535.91 351.672 536.324 351.418 536.664 cv
351.16 537.008 350.844 537.27 350.473 537.449 cv
350.098 537.633 349.672 537.719 349.188 537.723 cv
348.961 537.719 348.754 537.699 348.566 537.656 cv
348.379 537.609 348.191 537.539 348.012 537.441 cv
347.824 537.344 347.645 537.219 347.465 537.066 cv
347.281 536.918 347.09 536.738 346.891 536.523 cv
346.891 537.379 li
346.891 537.426 346.879 537.461 346.859 537.488 cv
346.836 537.523 346.801 537.547 346.758 537.562 cv
346.707 537.578 346.648 537.59 346.582 537.605 cv
346.508 537.613 346.418 537.621 346.313 537.621 cv
346.203 537.621 346.117 537.613 346.047 537.605 cv
345.973 537.59 345.91 537.578 345.867 537.562 cv
345.816 537.547 345.785 537.523 345.773 537.488 cv
345.754 537.461 345.746 537.426 345.75 537.379 cv
345.75 526.969 li
345.746 526.93 345.758 526.895 345.777 526.859 cv
345.793 526.832 345.824 526.805 345.879 526.781 cv
345.926 526.762 345.992 526.746 346.078 526.734 cv
346.156 526.727 346.262 526.723 346.391 526.719 cv
346.52 526.723 346.625 526.727 346.711 526.734 cv
346.789 526.746 346.855 526.762 346.902 526.781 cv
346.949 526.805 346.98 526.832 347.004 526.859 cv
347.02 526.895 347.031 526.93 347.035 526.969 cv
347.035 531.168 li
347.242 530.957 347.445 530.777 347.641 530.633 cv
347.836 530.488 348.023 530.371 348.211 530.277 cv
348.395 530.191 348.582 530.125 348.773 530.078 cv
348.957 530.039 349.156 530.016 349.367 530.016 cv
349.871 530.016 350.305 530.117 350.672 530.32 cv
351.031 530.523 351.324 530.797 351.551 531.133 cv
351.773 531.477 351.941 531.875 352.047 532.332 cv
352.148 532.789 352.199 533.27 352.203 533.777 cv
cp
350.871 533.926 mo
350.867 533.57 350.84 533.223 350.789 532.883 cv
350.73 532.547 350.637 532.25 350.5 531.988 cv
350.363 531.73 350.184 531.52 349.961 531.359 cv
349.734 531.203 349.453 531.125 349.121 531.121 cv
348.953 531.125 348.789 531.148 348.629 531.191 cv
348.465 531.242 348.301 531.32 348.133 531.426 cv
347.965 531.539 347.789 531.68 347.613 531.848 cv
347.43 532.023 347.238 532.238 347.035 532.492 cv
347.035 535.289 li
347.391 535.723 347.73 536.055 348.055 536.277 cv
348.379 536.508 348.715 536.621 349.066 536.617 cv
349.387 536.621 349.664 536.543 349.898 536.383 cv
350.125 536.23 350.313 536.023 350.457 535.762 cv
350.602 535.508 350.707 535.219 350.773 534.898 cv
350.836 534.582 350.867 534.258 350.871 533.926 cv
cp
f
357.367 533.641 mo
357.367 533.844 357.344 533.98 357.297 534.059 cv
357.25 534.137 357.18 534.176 357.094 534.176 cv
353.836 534.176 li
353.742 534.176 353.676 534.137 353.629 534.055 cv
353.582 533.977 353.559 533.84 353.559 533.641 cv
353.559 533.445 353.582 533.305 353.629 533.227 cv
353.676 533.148 353.742 533.109 353.836 533.109 cv
357.094 533.109 li
357.133 533.109 357.172 533.117 357.207 533.133 cv
357.238 533.148 357.266 533.18 357.293 533.223 cv
357.313 533.27 357.332 533.324 357.348 533.391 cv
357.359 533.461 357.367 533.547 357.367 533.641 cv
cp
f
360.621 537.371 mo
360.617 537.414 360.609 537.449 360.59 537.48 cv
360.566 537.512 360.527 537.539 360.48 537.555 cv
360.426 537.574 360.359 537.586 360.273 537.602 cv
360.188 537.613 360.078 537.621 359.953 537.621 cv
359.824 537.621 359.719 537.613 359.633 537.602 cv
359.543 537.586 359.473 537.574 359.422 537.555 cv
359.367 537.539 359.332 537.512 359.313 537.48 cv
359.289 537.449 359.277 537.414 359.281 537.371 cv
359.281 527.691 li
359.277 527.652 359.289 527.617 359.316 527.582 cv
359.336 527.555 359.375 527.527 359.434 527.508 cv
359.484 527.492 359.555 527.477 359.645 527.461 cv
359.727 527.449 359.828 527.445 359.953 527.441 cv
360.078 527.445 360.188 527.449 360.273 527.461 cv
360.359 527.477 360.426 527.492 360.48 527.508 cv
360.527 527.527 360.566 527.555 360.59 527.582 cv
360.609 527.617 360.617 527.652 360.621 527.691 cv
cp
f
373.609 537.379 mo
373.605 537.426 373.598 537.461 373.578 537.484 cv
373.555 537.516 373.52 537.539 373.477 537.559 cv
373.426 537.578 373.359 537.59 373.281 537.605 cv
373.195 537.613 373.094 537.621 372.969 537.621 cv
372.836 537.621 372.727 537.613 372.648 537.605 cv
372.563 537.59 372.496 537.578 372.449 537.559 cv
372.395 537.539 372.359 537.516 372.344 537.484 cv
372.32 537.461 372.313 537.426 372.313 537.379 cv
372.313 533.117 li
372.313 532.824 372.285 532.555 372.234 532.309 cv
372.18 532.066 372.098 531.855 371.984 531.676 cv
371.871 531.5 371.727 531.363 371.551 531.27 cv
371.371 531.176 371.16 531.129 370.926 531.129 cv
370.629 531.129 370.332 531.246 370.035 531.473 cv
369.73 531.707 369.402 532.039 369.047 532.477 cv
369.047 537.379 li
369.043 537.426 369.031 537.461 369.016 537.484 cv
368.992 537.516 368.961 537.539 368.914 537.559 cv
368.863 537.578 368.797 537.59 368.715 537.605 cv
368.629 537.613 368.523 537.621 368.402 537.621 cv
368.281 537.621 368.18 537.613 368.094 537.605 cv
368.008 537.59 367.938 537.578 367.891 537.559 cv
367.836 537.539 367.805 537.516 367.789 537.484 cv
367.77 537.461 367.758 537.426 367.762 537.379 cv
367.762 533.117 li
367.758 532.824 367.73 532.555 367.676 532.309 cv
367.617 532.066 367.531 531.855 367.418 531.676 cv
367.305 531.5 367.16 531.363 366.988 531.27 cv
366.809 531.176 366.602 531.129 366.367 531.129 cv
366.066 531.129 365.77 531.246 365.469 531.473 cv
365.168 531.707 364.84 532.039 364.488 532.477 cv
364.488 537.379 li
364.484 537.426 364.473 537.461 364.457 537.484 cv
364.434 537.516 364.402 537.539 364.355 537.559 cv
364.309 537.578 364.242 537.59 364.164 537.605 cv
364.078 537.613 363.973 537.621 363.844 537.621 cv
363.715 537.621 363.609 537.613 363.531 537.605 cv
363.445 537.59 363.379 537.578 363.332 537.559 cv
363.277 537.539 363.246 537.516 363.23 537.484 cv
363.211 537.461 363.199 537.426 363.203 537.379 cv
363.203 530.367 li
363.199 530.328 363.207 530.293 363.227 530.262 cv
363.238 530.234 363.27 530.211 363.32 530.184 cv
363.363 530.164 363.426 530.148 363.5 530.137 cv
363.57 530.133 363.664 530.129 363.789 530.125 cv
363.898 530.129 363.996 530.133 364.074 530.137 cv
364.148 530.148 364.207 530.164 364.25 530.184 cv
364.289 530.211 364.316 530.234 364.336 530.262 cv
364.352 530.293 364.359 530.328 364.363 530.367 cv
364.363 531.293 li
364.754 530.852 365.137 530.531 365.512 530.324 cv
365.879 530.121 366.258 530.016 366.641 530.016 cv
366.93 530.016 367.188 530.051 367.422 530.117 cv
367.648 530.187 367.855 530.281 368.035 530.402 cv
368.211 530.523 368.359 530.668 368.488 530.836 cv
368.609 531.008 368.715 531.199 368.801 531.402 cv
369.031 531.152 369.254 530.937 369.465 530.758 cv
369.676 530.586 369.879 530.441 370.074 530.328 cv
370.27 530.223 370.457 530.145 370.641 530.09 cv
370.824 530.043 371.012 530.016 371.199 530.016 cv
371.652 530.016 372.031 530.098 372.336 530.254 cv
372.641 530.418 372.887 530.629 373.082 530.891 cv
373.27 531.156 373.406 531.465 373.488 531.82 cv
373.566 532.176 373.605 532.551 373.609 532.945 cv
cp
f
381.238 537.387 mo
381.234 537.449 381.215 537.496 381.176 537.527 cv
381.133 537.559 381.074 537.582 381.004 537.598 cv
380.926 537.613 380.82 537.621 380.684 537.621 cv
380.547 537.621 380.438 537.613 380.359 537.598 cv
380.273 537.582 380.215 537.559 380.184 537.527 cv
380.145 537.496 380.129 537.449 380.133 537.387 cv
380.133 536.687 li
379.824 537.016 379.48 537.27 379.105 537.449 cv
378.727 537.633 378.328 537.719 377.91 537.723 cv
377.535 537.719 377.203 537.672 376.906 537.578 cv
376.609 537.48 376.355 537.344 376.145 537.16 cv
375.934 536.98 375.77 536.758 375.652 536.492 cv
375.535 536.23 375.477 535.93 375.48 535.586 cv
375.477 535.195 375.555 534.852 375.719 534.559 cv
375.875 534.27 376.109 534.027 376.414 533.836 cv
376.715 533.645 377.082 533.5 377.52 533.402 cv
377.953 533.309 378.445 533.262 378.992 533.258 cv
379.961 533.258 li
379.961 532.711 li
379.957 532.441 379.93 532.203 379.875 531.996 cv
379.816 531.789 379.723 531.617 379.598 531.477 cv
379.465 531.34 379.301 531.234 379.102 531.164 cv
378.895 531.094 378.645 531.059 378.355 531.059 cv
378.035 531.059 377.75 531.098 377.5 531.172 cv
377.242 531.25 377.023 531.332 376.836 531.422 cv
376.648 531.516 376.488 531.602 376.363 531.672 cv
376.23 531.75 376.137 531.785 376.078 531.785 cv
376.035 531.785 376 531.777 375.969 531.754 cv
375.938 531.738 375.91 531.707 375.887 531.66 cv
375.863 531.621 375.844 531.566 375.836 531.5 cv
375.82 531.437 375.816 531.367 375.82 531.285 cv
375.816 531.16 375.824 531.055 375.848 530.977 cv
375.863 530.902 375.91 530.832 375.98 530.762 cv
376.051 530.695 376.172 530.617 376.344 530.527 cv
376.516 530.437 376.711 530.355 376.934 530.277 cv
377.156 530.207 377.402 530.145 377.668 530.09 cv
377.934 530.043 378.199 530.016 378.473 530.016 cv
378.973 530.016 379.402 530.074 379.754 530.187 cv
380.105 530.305 380.391 530.473 380.613 530.691 cv
380.828 530.914 380.988 531.187 381.09 531.512 cv
381.188 531.844 381.234 532.227 381.238 532.656 cv
cp
379.961 534.184 mo
378.859 534.184 li
378.504 534.187 378.199 534.219 377.941 534.273 cv
377.68 534.336 377.465 534.422 377.293 534.539 cv
377.121 534.656 376.996 534.797 376.918 534.961 cv
376.836 535.125 376.793 535.312 376.797 535.523 cv
376.793 535.891 376.91 536.184 377.141 536.395 cv
377.371 536.613 377.695 536.719 378.113 536.719 cv
378.449 536.719 378.762 536.633 379.051 536.461 cv
379.34 536.289 379.641 536.027 379.961 535.672 cv
cp
f
389.457 530.684 mo
389.453 530.867 389.43 531 389.383 531.078 cv
389.332 531.16 389.27 531.199 389.195 531.199 cv
388.188 531.199 li
388.367 531.387 388.496 531.594 388.57 531.82 cv
388.641 532.047 388.676 532.281 388.68 532.523 cv
388.676 532.93 388.609 533.289 388.484 533.602 cv
388.352 533.914 388.168 534.18 387.926 534.391 cv
387.684 534.609 387.395 534.773 387.066 534.887 cv
386.73 535.004 386.363 535.062 385.961 535.059 cv
385.672 535.062 385.398 535.023 385.145 534.945 cv
384.883 534.871 384.688 534.777 384.551 534.66 cv
384.457 534.758 384.379 534.863 384.32 534.98 cv
384.258 535.102 384.227 535.238 384.23 535.391 cv
384.227 535.574 384.313 535.727 384.484 535.844 cv
384.652 535.969 384.875 536.031 385.156 536.039 cv
386.988 536.117 li
387.336 536.129 387.652 536.176 387.945 536.262 cv
388.234 536.348 388.488 536.473 388.703 536.629 cv
388.914 536.789 389.082 536.98 389.203 537.211 cv
389.32 537.445 389.379 537.715 389.383 538.02 cv
389.379 538.34 389.313 538.645 389.18 538.937 cv
389.043 539.227 388.836 539.48 388.559 539.703 cv
388.277 539.922 387.922 540.098 387.492 540.227 cv
387.063 540.352 386.555 540.414 385.969 540.418 cv
385.398 540.414 384.914 540.367 384.52 540.273 cv
384.121 540.176 383.797 540.043 383.543 539.879 cv
383.289 539.711 383.105 539.516 382.992 539.285 cv
382.875 539.051 382.816 538.797 382.82 538.531 cv
382.816 538.359 382.836 538.195 382.883 538.035 cv
382.922 537.871 382.984 537.719 383.07 537.574 cv
383.152 537.43 383.262 537.293 383.391 537.156 cv
383.516 537.027 383.66 536.895 383.832 536.766 cv
383.574 536.637 383.387 536.473 383.266 536.273 cv
383.145 536.078 383.086 535.867 383.086 535.633 cv
383.086 535.32 383.148 535.035 383.277 534.785 cv
383.406 534.535 383.566 534.312 383.762 534.113 cv
383.598 533.922 383.473 533.707 383.379 533.465 cv
383.285 533.227 383.238 532.934 383.238 532.586 cv
383.238 532.191 383.305 531.832 383.441 531.512 cv
383.574 531.195 383.762 530.93 384.004 530.711 cv
384.242 530.496 384.527 530.328 384.863 530.207 cv
385.195 530.094 385.563 530.035 385.961 530.031 cv
386.172 530.035 386.371 530.047 386.555 530.066 cv
386.738 530.094 386.91 530.125 387.074 530.164 cv
389.195 530.164 li
389.281 530.168 389.348 530.211 389.391 530.293 cv
389.434 530.383 389.453 530.512 389.457 530.684 cv
cp
387.449 532.531 mo
387.445 532.059 387.313 531.687 387.055 531.414 cv
386.789 531.148 386.418 531.012 385.938 531.012 cv
385.684 531.012 385.465 531.055 385.285 531.137 cv
385.098 531.223 384.945 531.336 384.824 531.48 cv
384.703 531.629 384.613 531.797 384.555 531.984 cv
384.492 532.172 384.461 532.371 384.465 532.578 cv
384.461 533.043 384.594 533.406 384.855 533.672 cv
385.117 533.937 385.484 534.07 385.961 534.066 cv
386.211 534.07 386.43 534.031 386.621 533.945 cv
386.805 533.867 386.961 533.754 387.086 533.613 cv
387.207 533.473 387.297 533.309 387.359 533.117 cv
387.414 532.934 387.445 532.738 387.449 532.531 cv
cp
388.094 538.09 mo
388.09 537.785 387.965 537.555 387.723 537.391 cv
387.473 537.23 387.141 537.141 386.723 537.129 cv
384.906 537.066 li
384.738 537.199 384.602 537.324 384.5 537.437 cv
384.391 537.555 384.309 537.664 384.246 537.773 cv
384.184 537.879 384.141 537.984 384.117 538.09 cv
384.094 538.191 384.082 538.297 384.082 538.406 cv
384.082 538.742 384.25 538.996 384.594 539.176 cv
384.934 539.348 385.414 539.437 386.031 539.437 cv
386.418 539.437 386.742 539.398 387.008 539.324 cv
387.266 539.246 387.477 539.145 387.641 539.023 cv
387.797 538.895 387.914 538.754 387.988 538.594 cv
388.055 538.434 388.09 538.266 388.094 538.09 cv
cp
f
397.02 533.57 mo
397.016 533.773 396.965 533.914 396.867 534 cv
396.762 534.086 396.645 534.129 396.52 534.129 cv
391.902 534.129 li
391.898 534.52 391.938 534.871 392.02 535.184 cv
392.094 535.496 392.227 535.766 392.41 535.984 cv
392.59 536.211 392.824 536.383 393.121 536.5 cv
393.41 536.625 393.77 536.684 394.195 536.68 cv
394.527 536.684 394.824 536.656 395.086 536.598 cv
395.348 536.547 395.574 536.484 395.766 536.414 cv
395.953 536.348 396.109 536.289 396.234 536.23 cv
396.355 536.18 396.449 536.152 396.512 536.148 cv
396.547 536.152 396.578 536.16 396.609 536.176 cv
396.637 536.195 396.66 536.223 396.68 536.258 cv
396.691 536.297 396.703 536.348 396.715 536.41 cv
396.719 536.477 396.723 536.555 396.727 536.648 cv
396.723 536.719 396.719 536.777 396.719 536.824 cv
396.711 536.871 396.707 536.914 396.699 536.953 cv
396.691 536.992 396.676 537.027 396.66 537.059 cv
396.637 537.09 396.613 537.121 396.59 537.148 cv
396.559 537.18 396.477 537.227 396.336 537.289 cv
396.195 537.355 396.012 537.418 395.789 537.48 cv
395.563 537.543 395.305 537.598 395.012 537.648 cv
394.719 537.695 394.406 537.719 394.074 537.723 cv
393.496 537.719 392.988 537.641 392.559 537.48 cv
392.121 537.32 391.758 537.082 391.465 536.766 cv
391.164 536.449 390.941 536.055 390.793 535.574 cv
390.645 535.098 390.57 534.539 390.57 533.902 cv
390.57 533.305 390.645 532.766 390.801 532.281 cv
390.953 531.805 391.18 531.395 391.477 531.059 cv
391.77 530.723 392.125 530.465 392.539 530.285 cv
392.953 530.105 393.418 530.016 393.934 530.016 cv
394.484 530.016 394.953 530.105 395.34 530.281 cv
395.727 530.461 396.043 530.699 396.297 530.996 cv
396.543 531.297 396.727 531.648 396.844 532.047 cv
396.957 532.453 397.016 532.883 397.02 533.336 cv
cp
395.727 533.187 mo
395.742 532.512 395.59 531.98 395.273 531.598 cv
394.957 531.215 394.488 531.023 393.871 531.02 cv
393.547 531.023 393.266 531.082 393.027 531.199 cv
392.785 531.32 392.586 531.48 392.426 531.676 cv
392.262 531.875 392.137 532.105 392.051 532.367 cv
391.961 532.629 391.91 532.902 391.902 533.187 cv
cp
f
403.387 535.469 mo
403.383 535.832 403.316 536.152 403.188 536.43 cv
403.055 536.711 402.867 536.945 402.625 537.137 cv
402.379 537.332 402.086 537.477 401.75 537.574 cv
401.41 537.672 401.039 537.719 400.637 537.723 cv
400.383 537.719 400.145 537.699 399.922 537.664 cv
399.695 537.621 399.496 537.574 399.316 537.516 cv
399.137 537.457 398.984 537.395 398.859 537.328 cv
398.734 537.266 398.641 537.207 398.586 537.152 cv
398.527 537.102 398.488 537.031 398.465 536.934 cv
398.438 536.844 398.426 536.715 398.426 536.555 cv
398.426 536.457 398.43 536.375 398.441 536.305 cv
398.449 536.238 398.461 536.184 398.48 536.141 cv
398.492 536.102 398.516 536.07 398.543 536.051 cv
398.57 536.035 398.602 536.027 398.641 536.023 cv
398.695 536.027 398.781 536.062 398.895 536.129 cv
399.004 536.203 399.141 536.281 399.309 536.359 cv
399.469 536.445 399.66 536.52 399.887 536.59 cv
400.105 536.66 400.363 536.695 400.66 536.695 cv
400.875 536.695 401.074 536.672 401.254 536.625 cv
401.43 536.578 401.582 536.512 401.711 536.418 cv
401.84 536.332 401.941 536.215 402.012 536.07 cv
402.082 535.934 402.117 535.766 402.117 535.57 cv
402.117 535.375 402.066 535.211 401.965 535.074 cv
401.863 534.941 401.727 534.82 401.563 534.715 cv
401.395 534.613 401.211 534.523 401.004 534.437 cv
400.793 534.359 400.578 534.273 400.359 534.184 cv
400.141 534.098 399.926 533.996 399.715 533.883 cv
399.504 533.773 399.313 533.641 399.148 533.477 cv
398.977 533.32 398.844 533.125 398.746 532.898 cv
398.641 532.676 398.59 532.41 398.594 532.098 cv
398.59 531.824 398.645 531.559 398.754 531.305 cv
398.859 531.055 399.02 530.836 399.234 530.645 cv
399.445 530.457 399.711 530.305 400.031 530.187 cv
400.352 530.074 400.723 530.016 401.152 530.016 cv
401.336 530.016 401.523 530.031 401.711 530.062 cv
401.895 530.094 402.063 530.133 402.219 530.18 cv
402.367 530.227 402.496 530.277 402.605 530.332 cv
402.707 530.387 402.789 530.437 402.848 530.477 cv
402.898 530.523 402.934 530.559 402.957 530.586 cv
402.973 530.617 402.988 530.652 402.996 530.687 cv
403.004 530.73 403.012 530.777 403.02 530.832 cv
403.027 530.891 403.031 530.961 403.031 531.043 cv
403.031 531.133 403.027 531.211 403.02 531.273 cv
403.012 531.344 402.996 531.395 402.98 531.434 cv
402.957 531.477 402.938 531.508 402.914 531.523 cv
402.887 531.543 402.855 531.551 402.828 531.551 cv
402.777 531.551 402.711 531.523 402.625 531.465 cv
402.535 531.41 402.422 531.348 402.281 531.281 cv
402.141 531.219 401.973 531.16 401.785 531.098 cv
401.594 531.043 401.379 531.012 401.137 531.012 cv
400.914 531.012 400.723 531.039 400.559 531.086 cv
400.391 531.141 400.254 531.211 400.148 531.297 cv
400.043 531.391 399.961 531.496 399.91 531.621 cv
399.852 531.746 399.824 531.883 399.828 532.027 cv
399.824 532.23 399.875 532.398 399.98 532.535 cv
400.082 532.676 400.219 532.797 400.387 532.898 cv
400.551 533.004 400.742 533.098 400.957 533.18 cv
401.168 533.266 401.383 533.352 401.605 533.437 cv
401.824 533.527 402.043 533.629 402.262 533.734 cv
402.477 533.844 402.668 533.973 402.836 534.129 cv
403 534.285 403.133 534.473 403.234 534.691 cv
403.332 534.91 403.383 535.172 403.387 535.469 cv
cp
f
221.949 11.711 mo
221.945 12.551 221.844 13.301 221.637 13.957 cv
221.43 14.621 221.121 15.18 220.711 15.637 cv
220.301 16.098 219.793 16.449 219.188 16.687 cv
218.582 16.93 217.883 17.047 217.09 17.051 cv
216.301 17.047 215.613 16.945 215.031 16.742 cv
214.445 16.539 213.957 16.227 213.57 15.805 cv
213.18 15.383 212.891 14.848 212.695 14.199 cv
212.5 13.551 212.402 12.781 212.406 11.891 cv
212.402 11.078 212.504 10.348 212.715 9.69098 cv
212.918 9.04303 213.227 8.48798 213.641 8.02698 cv
214.047 7.57397 214.555 7.22302 215.164 6.97699 cv
215.766 6.73401 216.469 6.61298 217.273 6.60901 cv
218.035 6.61298 218.711 6.71503 219.297 6.914 cv
219.879 7.117 220.367 7.42603 220.762 7.84802 cv
221.152 8.27002 221.449 8.80103 221.648 9.44098 cv
221.848 10.082 221.945 10.84 221.949 11.711 cv
cp
219.801 11.82 mo
219.797 11.293 219.754 10.812 219.676 10.379 cv
219.59 9.94501 219.449 9.57397 219.25 9.26202 cv
219.047 8.953 218.781 8.71503 218.449 8.547 cv
218.117 8.37903 217.703 8.29303 217.207 8.29303 cv
216.699 8.29303 216.277 8.39099 215.941 8.578 cv
215.605 8.77002 215.332 9.02002 215.125 9.336 cv
214.914 9.65601 214.766 10.027 214.684 10.449 cv
214.594 10.871 214.551 11.32 214.555 11.789 cv
214.551 12.344 214.594 12.84 214.68 13.277 cv
214.762 13.719 214.902 14.094 215.102 14.402 cv
215.297 14.715 215.563 14.949 215.895 15.113 cv
216.227 15.277 216.645 15.359 217.152 15.359 cv
217.652 15.359 218.07 15.266 218.41 15.078 cv
218.746 14.891 219.02 14.637 219.23 14.316 cv
219.434 13.996 219.582 13.621 219.672 13.191 cv
219.754 12.762 219.797 12.305 219.801 11.82 cv
cp
f
229.949 9.64801 mo
229.945 9.67603 229.945 9.70697 229.945 9.742 cv
229.941 9.78101 229.938 9.82001 229.93 9.86298 cv
229.922 9.90601 229.91 9.95697 229.898 10.012 cv
229.883 10.07 229.867 10.137 229.848 10.207 cv
227.762 16.496 li
227.734 16.586 227.699 16.66 227.656 16.711 cv
227.609 16.77 227.535 16.812 227.438 16.84 cv
227.332 16.871 227.195 16.887 227.023 16.902 cv
226.848 16.91 226.621 16.918 226.344 16.918 cv
226.066 16.918 225.84 16.91 225.668 16.898 cv
225.492 16.883 225.355 16.863 225.258 16.832 cv
225.156 16.805 225.086 16.762 225.043 16.703 cv
224.996 16.652 224.961 16.582 224.938 16.496 cv
222.852 10.207 li
222.82 10.105 222.793 10.012 222.777 9.92999 cv
222.754 9.84802 222.746 9.789 222.746 9.75 cv
222.742 9.71899 222.738 9.68402 222.742 9.64801 cv
222.738 9.59802 222.754 9.55103 222.785 9.51202 cv
222.813 9.47302 222.863 9.44098 222.938 9.414 cv
223.008 9.39099 223.105 9.37097 223.234 9.35901 cv
223.359 9.35199 223.52 9.34802 223.715 9.34399 cv
223.926 9.34802 224.098 9.35498 224.23 9.36298 cv
224.355 9.37903 224.461 9.39502 224.539 9.41803 cv
224.613 9.44098 224.664 9.47699 224.699 9.52002 cv
224.727 9.56598 224.754 9.62097 224.777 9.67999 cv
226.359 14.781 li
226.406 14.977 li
226.453 14.781 li
228.012 9.67999 li
228.023 9.62097 228.047 9.56598 228.082 9.52002 cv
228.113 9.47699 228.168 9.44098 228.242 9.41803 cv
228.313 9.39502 228.41 9.37903 228.535 9.36298 cv
228.656 9.35498 228.816 9.34802 229.016 9.34399 cv
229.207 9.34802 229.363 9.35199 229.484 9.35901 cv
229.605 9.37097 229.699 9.39099 229.77 9.414 cv
229.836 9.44098 229.883 9.47302 229.91 9.51202 cv
229.934 9.55103 229.945 9.59802 229.949 9.64801 cv
cp
f
237.426 12.93 mo
237.422 13.168 237.371 13.344 237.266 13.457 cv
237.156 13.574 237.008 13.633 236.828 13.629 cv
232.594 13.629 li
232.59 13.93 232.625 14.199 232.699 14.437 cv
232.766 14.68 232.879 14.883 233.035 15.051 cv
233.188 15.223 233.383 15.352 233.625 15.437 cv
233.863 15.527 234.152 15.57 234.496 15.57 cv
234.836 15.57 235.137 15.547 235.398 15.496 cv
235.656 15.449 235.883 15.395 236.074 15.332 cv
236.262 15.273 236.418 15.219 236.547 15.168 cv
236.668 15.121 236.77 15.098 236.852 15.094 cv
236.895 15.098 236.934 15.105 236.969 15.121 cv
236.996 15.141 237.023 15.172 237.043 15.219 cv
237.063 15.266 237.074 15.332 237.086 15.418 cv
237.09 15.504 237.094 15.613 237.098 15.742 cv
237.094 15.859 237.094 15.957 237.09 16.035 cv
237.082 16.117 237.074 16.184 237.066 16.238 cv
237.055 16.297 237.039 16.348 237.02 16.383 cv
237 16.426 236.973 16.461 236.941 16.496 cv
236.906 16.535 236.813 16.586 236.664 16.645 cv
236.508 16.711 236.316 16.773 236.086 16.828 cv
235.848 16.891 235.578 16.937 235.281 16.984 cv
234.977 17.023 234.656 17.047 234.316 17.051 cv
233.695 17.047 233.152 16.973 232.691 16.816 cv
232.223 16.664 231.836 16.426 231.527 16.109 cv
231.211 15.793 230.977 15.395 230.828 14.91 cv
230.672 14.43 230.598 13.863 230.602 13.207 cv
230.598 12.594 230.676 12.035 230.84 11.539 cv
230.996 11.043 231.23 10.625 231.543 10.277 cv
231.848 9.93402 232.223 9.66803 232.66 9.48401 cv
233.098 9.30499 233.59 9.21503 234.145 9.211 cv
234.723 9.21503 235.223 9.30103 235.637 9.46899 cv
236.051 9.64502 236.387 9.883 236.652 10.184 cv
236.914 10.488 237.109 10.848 237.238 11.262 cv
237.359 11.68 237.422 12.129 237.426 12.617 cv
cp
235.523 12.367 mo
235.535 11.816 235.426 11.383 235.191 11.07 cv
234.957 10.758 234.59 10.602 234.098 10.598 cv
233.848 10.602 233.633 10.648 233.449 10.738 cv
233.262 10.836 233.109 10.961 232.988 11.117 cv
232.863 11.277 232.77 11.465 232.707 11.68 cv
232.641 11.895 232.602 12.125 232.594 12.367 cv
cp
f
243.5 10.301 mo
243.5 10.492 243.492 10.645 243.484 10.762 cv
243.469 10.883 243.453 10.977 243.438 11.043 cv
243.414 11.113 243.387 11.16 243.355 11.184 cv
243.316 11.211 243.273 11.223 243.227 11.223 cv
243.18 11.223 243.133 11.215 243.086 11.195 cv
243.031 11.18 242.973 11.16 242.91 11.137 cv
242.84 11.117 242.77 11.098 242.695 11.078 cv
242.613 11.062 242.527 11.055 242.438 11.051 cv
242.324 11.055 242.215 11.074 242.109 11.117 cv
242 11.164 241.887 11.234 241.773 11.324 cv
241.652 11.418 241.531 11.543 241.406 11.695 cv
241.277 11.855 241.141 12.047 240.996 12.273 cv
240.996 16.605 li
240.992 16.66 240.977 16.703 240.949 16.742 cv
240.914 16.781 240.859 16.816 240.789 16.84 cv
240.711 16.867 240.613 16.883 240.488 16.898 cv
240.363 16.91 240.203 16.918 240.016 16.918 cv
239.82 16.918 239.664 16.91 239.539 16.898 cv
239.414 16.883 239.313 16.867 239.238 16.84 cv
239.16 16.816 239.105 16.781 239.078 16.742 cv
239.043 16.703 239.027 16.66 239.031 16.605 cv
239.031 9.65601 li
239.027 9.60901 239.043 9.56201 239.07 9.52002 cv
239.094 9.48401 239.141 9.453 239.211 9.422 cv
239.277 9.39801 239.363 9.37903 239.473 9.36298 cv
239.578 9.35498 239.711 9.34802 239.875 9.34399 cv
240.039 9.34802 240.176 9.35498 240.285 9.36298 cv
240.391 9.37903 240.477 9.39801 240.539 9.422 cv
240.598 9.453 240.641 9.48401 240.668 9.52002 cv
240.691 9.56201 240.703 9.60901 240.707 9.65601 cv
240.707 10.52 li
240.887 10.262 241.059 10.051 241.223 9.87903 cv
241.379 9.71503 241.535 9.578 241.684 9.47699 cv
241.828 9.37903 241.973 9.31201 242.117 9.27002 cv
242.262 9.23401 242.406 9.21503 242.555 9.211 cv
242.621 9.21503 242.695 9.21899 242.773 9.22302 cv
242.852 9.23401 242.93 9.24597 243.016 9.26202 cv
243.094 9.28101 243.168 9.30103 243.234 9.32397 cv
243.293 9.34802 243.34 9.375 243.371 9.39801 cv
243.398 9.42999 243.418 9.45697 243.434 9.48401 cv
243.445 9.52002 243.457 9.56201 243.469 9.61298 cv
243.477 9.672 243.484 9.75403 243.492 9.85901 cv
243.496 9.96899 243.5 10.117 243.5 10.301 cv
cp
f
250.254 16.629 mo
250.25 16.707 250.223 16.762 250.176 16.801 cv
250.121 16.844 250.039 16.871 249.93 16.891 cv
249.813 16.906 249.648 16.918 249.434 16.918 cv
249.195 16.918 249.023 16.906 248.922 16.891 cv
248.813 16.871 248.738 16.844 248.699 16.801 cv
248.652 16.762 248.633 16.707 248.633 16.629 cv
248.633 16.078 li
248.344 16.387 248.016 16.625 247.652 16.793 cv
247.285 16.965 246.879 17.047 246.434 17.051 cv
246.063 17.047 245.723 17 245.414 16.906 cv
245.105 16.812 244.84 16.672 244.613 16.477 cv
244.387 16.289 244.211 16.055 244.086 15.773 cv
243.961 15.496 243.898 15.168 243.902 14.789 cv
243.898 14.391 243.977 14.039 244.137 13.734 cv
244.293 13.437 244.531 13.191 244.848 12.996 cv
245.16 12.805 245.551 12.66 246.02 12.562 cv
246.488 12.473 247.031 12.426 247.648 12.422 cv
248.328 12.422 li
248.328 12 li
248.328 11.785 248.305 11.594 248.262 11.43 cv
248.215 11.27 248.141 11.133 248.043 11.02 cv
247.938 10.914 247.805 10.832 247.637 10.777 cv
247.465 10.727 247.254 10.703 247.012 10.699 cv
246.68 10.703 246.387 10.738 246.133 10.809 cv
245.871 10.883 245.645 10.965 245.449 11.051 cv
245.25 11.145 245.086 11.223 244.957 11.293 cv
244.82 11.367 244.711 11.406 244.633 11.402 cv
244.57 11.406 244.52 11.387 244.48 11.348 cv
244.434 11.312 244.398 11.262 244.371 11.191 cv
244.34 11.129 244.316 11.043 244.305 10.941 cv
244.285 10.844 244.277 10.734 244.281 10.613 cv
244.277 10.453 244.293 10.328 244.32 10.23 cv
244.344 10.141 244.391 10.055 244.469 9.97699 cv
244.539 9.90198 244.668 9.82001 244.852 9.72998 cv
245.031 9.64099 245.242 9.55499 245.488 9.47699 cv
245.73 9.39801 246 9.336 246.289 9.28497 cv
246.578 9.23798 246.875 9.21503 247.184 9.211 cv
247.727 9.21503 248.191 9.26599 248.578 9.37097 cv
248.965 9.47998 249.285 9.64502 249.535 9.86298 cv
249.785 10.082 249.965 10.367 250.082 10.715 cv
250.191 11.066 250.25 11.48 250.254 11.953 cv
cp
248.328 13.652 mo
247.578 13.652 li
247.262 13.656 246.992 13.68 246.77 13.723 cv
246.543 13.773 246.359 13.844 246.223 13.934 cv
246.078 14.031 245.977 14.145 245.914 14.273 cv
245.848 14.41 245.813 14.559 245.816 14.727 cv
245.813 15.02 245.906 15.25 246.094 15.414 cv
246.277 15.582 246.535 15.664 246.863 15.664 cv
247.137 15.664 247.387 15.594 247.621 15.453 cv
247.848 15.312 248.086 15.109 248.328 14.836 cv
cp
f
254.18 16.605 mo
254.176 16.66 254.16 16.703 254.133 16.742 cv
254.098 16.781 254.043 16.816 253.973 16.84 cv
253.895 16.867 253.797 16.883 253.672 16.898 cv
253.547 16.91 253.387 16.918 253.199 16.918 cv
253.004 16.918 252.848 16.91 252.723 16.898 cv
252.598 16.883 252.496 16.867 252.422 16.84 cv
252.344 16.816 252.289 16.781 252.262 16.742 cv
252.227 16.703 252.211 16.66 252.215 16.605 cv
252.215 6.35901 li
252.211 6.30902 252.227 6.26202 252.262 6.21899 cv
252.289 6.17999 252.344 6.14502 252.422 6.11298 cv
252.496 6.086 252.598 6.06598 252.723 6.047 cv
252.848 6.03497 253.004 6.02698 253.199 6.02301 cv
253.387 6.02698 253.547 6.03497 253.672 6.047 cv
253.797 6.06598 253.895 6.086 253.973 6.11298 cv
254.043 6.14502 254.098 6.17999 254.133 6.21899 cv
254.16 6.26202 254.176 6.30902 254.18 6.35901 cv
cp
f
258.152 16.605 mo
258.148 16.66 258.133 16.703 258.105 16.742 cv
258.07 16.781 258.016 16.816 257.945 16.84 cv
257.867 16.867 257.77 16.883 257.645 16.898 cv
257.52 16.91 257.359 16.918 257.172 16.918 cv
256.977 16.918 256.82 16.91 256.695 16.898 cv
256.57 16.883 256.469 16.867 256.395 16.84 cv
256.316 16.816 256.262 16.781 256.234 16.742 cv
256.199 16.703 256.184 16.66 256.188 16.605 cv
256.188 6.35901 li
256.184 6.30902 256.199 6.26202 256.234 6.21899 cv
256.262 6.17999 256.316 6.14502 256.395 6.11298 cv
256.469 6.086 256.57 6.06598 256.695 6.047 cv
256.82 6.03497 256.977 6.02698 257.172 6.02301 cv
257.359 6.02698 257.52 6.03497 257.645 6.047 cv
257.77 6.06598 257.867 6.086 257.945 6.11298 cv
258.016 6.14502 258.07 6.17999 258.105 6.21899 cv
258.133 6.26202 258.148 6.30902 258.152 6.35901 cv
cp
f
271.32 16.605 mo
271.32 16.668 271.309 16.715 271.289 16.75 cv
271.27 16.793 271.223 16.824 271.145 16.848 cv
271.066 16.871 270.949 16.887 270.801 16.902 cv
270.645 16.91 270.441 16.918 270.184 16.918 cv
269.965 16.918 269.789 16.91 269.66 16.902 cv
269.531 16.887 269.43 16.871 269.355 16.844 cv
269.277 16.816 269.223 16.781 269.195 16.734 cv
269.16 16.695 269.137 16.641 269.117 16.574 cv
268.211 14.324 li
268.102 14.07 267.996 13.844 267.895 13.645 cv
267.785 13.449 267.672 13.285 267.547 13.152 cv
267.418 13.023 267.27 12.922 267.105 12.852 cv
266.938 12.785 266.746 12.754 266.531 12.75 cv
265.891 12.75 li
265.891 16.59 li
265.887 16.645 265.871 16.691 265.84 16.73 cv
265.805 16.773 265.75 16.809 265.672 16.832 cv
265.594 16.859 265.488 16.879 265.359 16.895 cv
265.227 16.91 265.063 16.918 264.863 16.918 cv
264.664 16.918 264.496 16.91 264.367 16.895 cv
264.23 16.879 264.125 16.859 264.051 16.832 cv
263.969 16.809 263.914 16.773 263.887 16.73 cv
263.852 16.691 263.836 16.645 263.84 16.59 cv
263.84 7.43402 li
263.836 7.20697 263.895 7.04303 264.016 6.93701 cv
264.129 6.84003 264.273 6.789 264.449 6.78497 cv
267.059 6.78497 li
267.32 6.789 267.539 6.79303 267.715 6.80103 cv
267.883 6.81201 268.039 6.82397 268.184 6.84003 cv
268.586 6.89801 268.949 7 269.273 7.13702 cv
269.598 7.28101 269.875 7.46503 270.102 7.68701 cv
270.328 7.91803 270.5 8.18402 270.621 8.492 cv
270.738 8.80103 270.797 9.15601 270.801 9.55499 cv
270.797 9.89502 270.754 10.203 270.672 10.477 cv
270.582 10.758 270.457 11.004 270.293 11.223 cv
270.125 11.441 269.918 11.633 269.676 11.789 cv
269.43 11.953 269.152 12.082 268.844 12.18 cv
268.992 12.254 269.137 12.344 269.27 12.445 cv
269.402 12.555 269.523 12.68 269.641 12.824 cv
269.754 12.973 269.867 13.141 269.973 13.328 cv
270.074 13.52 270.176 13.734 270.277 13.973 cv
271.129 15.961 li
271.203 16.16 271.254 16.301 271.281 16.391 cv
271.305 16.484 271.32 16.559 271.32 16.605 cv
cp
268.68 9.76599 mo
268.676 9.43402 268.602 9.15198 268.453 8.922 cv
268.301 8.69501 268.055 8.53497 267.715 8.43701 cv
267.609 8.414 267.492 8.39099 267.359 8.375 cv
267.227 8.35901 267.043 8.35199 266.809 8.35199 cv
265.891 8.35199 li
265.891 11.215 li
266.934 11.215 li
267.223 11.219 267.48 11.184 267.699 11.109 cv
267.918 11.043 268.098 10.941 268.242 10.812 cv
268.387 10.687 268.496 10.535 268.57 10.355 cv
268.641 10.18 268.676 9.98401 268.68 9.76599 cv
cp
f
279.301 16.605 mo
279.297 16.66 279.285 16.703 279.262 16.742 cv
279.234 16.781 279.188 16.816 279.125 16.84 cv
279.059 16.867 278.973 16.883 278.867 16.898 cv
278.762 16.91 278.629 16.918 278.469 16.918 cv
278.293 16.918 278.152 16.91 278.051 16.898 cv
277.941 16.883 277.859 16.867 277.797 16.84 cv
277.734 16.816 277.688 16.781 277.664 16.742 cv
277.633 16.703 277.621 16.66 277.625 16.605 cv
277.625 15.805 li
277.238 16.219 276.848 16.531 276.453 16.738 cv
276.051 16.945 275.641 17.047 275.219 17.051 cv
274.738 17.047 274.336 16.973 274.012 16.816 cv
273.688 16.664 273.426 16.449 273.227 16.18 cv
273.023 15.91 272.879 15.598 272.797 15.238 cv
272.707 14.883 272.664 14.441 272.668 13.91 cv
272.668 9.65601 li
272.664 9.60901 272.68 9.56201 272.711 9.52002 cv
272.738 9.48401 272.789 9.453 272.867 9.422 cv
272.941 9.39801 273.043 9.37903 273.172 9.36298 cv
273.297 9.35498 273.453 9.34802 273.645 9.34399 cv
273.832 9.34802 273.992 9.35498 274.117 9.36298 cv
274.242 9.37903 274.34 9.39801 274.418 9.422 cv
274.488 9.453 274.543 9.48401 274.578 9.52002 cv
274.605 9.56201 274.621 9.60901 274.625 9.65601 cv
274.625 13.582 li
274.621 13.949 274.645 14.227 274.695 14.418 cv
274.738 14.609 274.809 14.773 274.91 14.91 cv
275.004 15.051 275.129 15.156 275.277 15.23 cv
275.426 15.309 275.598 15.348 275.793 15.344 cv
276.043 15.348 276.293 15.258 276.547 15.07 cv
276.797 14.891 277.066 14.625 277.352 14.277 cv
277.352 9.65601 li
277.352 9.60901 277.363 9.56201 277.395 9.52002 cv
277.418 9.48401 277.473 9.453 277.551 9.422 cv
277.625 9.39801 277.723 9.37903 277.852 9.36298 cv
277.973 9.35498 278.133 9.34802 278.328 9.34399 cv
278.52 9.34802 278.676 9.35498 278.801 9.36298 cv
278.922 9.37903 279.023 9.39801 279.098 9.422 cv
279.168 9.453 279.219 9.48401 279.254 9.52002 cv
279.281 9.56201 279.297 9.60901 279.301 9.65601 cv
cp
f
287.918 16.605 mo
287.914 16.66 287.898 16.703 287.871 16.742 cv
287.836 16.781 287.785 16.816 287.715 16.84 cv
287.641 16.867 287.539 16.883 287.414 16.898 cv
287.285 16.91 287.129 16.918 286.945 16.918 cv
286.75 16.918 286.59 16.91 286.465 16.898 cv
286.336 16.883 286.234 16.867 286.164 16.84 cv
286.086 16.816 286.035 16.781 286.008 16.742 cv
285.973 16.703 285.957 16.66 285.961 16.605 cv
285.961 12.641 li
285.957 12.305 285.934 12.039 285.887 11.844 cv
285.836 11.652 285.762 11.488 285.672 11.352 cv
285.578 11.215 285.461 11.109 285.313 11.031 cv
285.164 10.957 284.988 10.918 284.793 10.918 cv
284.539 10.918 284.289 11.012 284.035 11.191 cv
283.781 11.375 283.516 11.637 283.242 11.984 cv
283.242 16.605 li
283.238 16.66 283.223 16.703 283.195 16.742 cv
283.16 16.781 283.105 16.816 283.035 16.84 cv
282.957 16.867 282.859 16.883 282.734 16.898 cv
282.609 16.91 282.449 16.918 282.262 16.918 cv
282.066 16.918 281.91 16.91 281.785 16.898 cv
281.66 16.883 281.559 16.867 281.484 16.84 cv
281.406 16.816 281.352 16.781 281.324 16.742 cv
281.289 16.703 281.273 16.66 281.277 16.605 cv
281.277 9.65601 li
281.273 9.60901 281.289 9.56201 281.316 9.52002 cv
281.34 9.48401 281.387 9.453 281.457 9.422 cv
281.523 9.39801 281.609 9.37903 281.719 9.36298 cv
281.824 9.35498 281.957 9.34802 282.121 9.34399 cv
282.285 9.34802 282.422 9.35498 282.531 9.36298 cv
282.637 9.37903 282.723 9.39801 282.785 9.422 cv
282.844 9.453 282.887 9.48401 282.914 9.52002 cv
282.938 9.56201 282.949 9.60901 282.953 9.65601 cv
282.953 10.457 li
283.336 10.047 283.727 9.73401 284.125 9.52301 cv
284.52 9.31598 284.938 9.21503 285.371 9.211 cv
285.84 9.21503 286.238 9.29303 286.566 9.44501 cv
286.891 9.60498 287.152 9.81598 287.352 10.082 cv
287.551 10.352 287.695 10.664 287.785 11.02 cv
287.871 11.379 287.914 11.809 287.918 12.312 cv
cp
f
293.789 15.922 mo
293.789 16.148 293.773 16.324 293.746 16.445 cv
293.715 16.57 293.676 16.656 293.633 16.703 cv
293.582 16.754 293.516 16.797 293.426 16.836 cv
293.332 16.875 293.223 16.906 293.105 16.937 cv
292.98 16.961 292.848 16.984 292.707 17.004 cv
292.563 17.016 292.422 17.023 292.277 17.027 cv
291.887 17.023 291.547 16.973 291.262 16.879 cv
290.977 16.777 290.742 16.629 290.555 16.422 cv
290.367 16.219 290.227 15.961 290.141 15.648 cv
290.047 15.34 290.004 14.969 290.008 14.539 cv
290.008 10.98 li
289.176 10.98 li
289.074 10.984 289 10.922 288.949 10.797 cv
288.895 10.676 288.867 10.473 288.871 10.184 cv
288.867 10.035 288.875 9.90601 288.891 9.80499 cv
288.902 9.703 288.922 9.62097 288.949 9.55902 cv
288.973 9.5 289.004 9.45697 289.047 9.42999 cv
289.082 9.40601 289.129 9.39502 289.184 9.39099 cv
290.008 9.39099 li
290.008 7.84003 li
290.004 7.79303 290.02 7.74597 290.051 7.69897 cv
290.078 7.65997 290.129 7.625 290.207 7.59399 cv
290.281 7.57001 290.383 7.547 290.512 7.53101 cv
290.637 7.52002 290.793 7.51599 290.984 7.51202 cv
291.172 7.51599 291.332 7.52002 291.461 7.53101 cv
291.586 7.547 291.688 7.57001 291.762 7.59399 cv
291.832 7.625 291.883 7.65997 291.918 7.69897 cv
291.945 7.74597 291.961 7.79303 291.965 7.84003 cv
291.965 9.39099 li
293.477 9.39099 li
293.527 9.39502 293.574 9.40601 293.613 9.42999 cv
293.652 9.45697 293.684 9.5 293.711 9.55902 cv
293.734 9.62097 293.754 9.703 293.77 9.80499 cv
293.781 9.90601 293.789 10.035 293.789 10.184 cv
293.789 10.473 293.762 10.676 293.711 10.797 cv
293.656 10.922 293.582 10.984 293.484 10.98 cv
291.965 10.98 li
291.965 14.246 li
291.961 14.625 292.02 14.91 292.145 15.098 cv
292.262 15.289 292.477 15.383 292.781 15.383 cv
292.883 15.383 292.977 15.375 293.063 15.355 cv
293.145 15.34 293.219 15.32 293.285 15.293 cv
293.348 15.273 293.402 15.25 293.449 15.23 cv
293.492 15.215 293.531 15.207 293.57 15.203 cv
293.598 15.207 293.629 15.215 293.66 15.23 cv
293.688 15.25 293.707 15.289 293.727 15.34 cv
293.738 15.398 293.754 15.473 293.77 15.562 cv
293.781 15.66 293.789 15.777 293.789 15.922 cv
cp
f
297.176 16.605 mo
297.172 16.66 297.156 16.703 297.129 16.742 cv
297.094 16.781 297.039 16.816 296.969 16.84 cv
296.891 16.867 296.793 16.883 296.668 16.898 cv
296.543 16.91 296.383 16.918 296.195 16.918 cv
296 16.918 295.844 16.91 295.719 16.898 cv
295.594 16.883 295.492 16.867 295.418 16.84 cv
295.34 16.816 295.285 16.781 295.258 16.742 cv
295.223 16.703 295.207 16.66 295.211 16.605 cv
295.211 9.672 li
295.207 9.62097 295.223 9.57397 295.258 9.53497 cv
295.285 9.49597 295.34 9.46503 295.418 9.43402 cv
295.492 9.40997 295.594 9.38702 295.719 9.367 cv
295.844 9.35498 296 9.34802 296.195 9.34399 cv
296.383 9.34802 296.543 9.35498 296.668 9.367 cv
296.793 9.38702 296.891 9.40997 296.969 9.43402 cv
297.039 9.46503 297.094 9.49597 297.129 9.53497 cv
297.156 9.57397 297.172 9.62097 297.176 9.672 cv
cp
297.324 7.30103 mo
297.324 7.69897 297.242 7.97302 297.082 8.12097 cv
296.918 8.27301 296.621 8.34802 296.188 8.34399 cv
295.742 8.34802 295.441 8.27301 295.293 8.12903 cv
295.137 7.98401 295.063 7.72302 295.063 7.34003 cv
295.063 6.94501 295.141 6.672 295.301 6.52002 cv
295.457 6.367 295.758 6.289 296.203 6.289 cv
296.637 6.289 296.934 6.36298 297.09 6.51202 cv
297.246 6.65997 297.324 6.92603 297.324 7.30103 cv
cp
f
310.195 16.605 mo
310.191 16.66 310.176 16.703 310.148 16.742 cv
310.113 16.781 310.063 16.816 309.992 16.84 cv
309.918 16.867 309.816 16.883 309.695 16.898 cv
309.57 16.91 309.414 16.918 309.223 16.918 cv
309.023 16.918 308.863 16.91 308.738 16.898 cv
308.613 16.883 308.512 16.867 308.438 16.84 cv
308.359 16.816 308.309 16.781 308.281 16.742 cv
308.254 16.703 308.238 16.66 308.242 16.605 cv
308.242 12.484 li
308.238 12.254 308.219 12.039 308.176 11.844 cv
308.129 11.652 308.059 11.488 307.973 11.352 cv
307.879 11.215 307.766 11.109 307.629 11.031 cv
307.488 10.957 307.324 10.918 307.133 10.918 cv
306.898 10.918 306.66 11.012 306.422 11.191 cv
306.184 11.375 305.926 11.637 305.645 11.984 cv
305.645 16.605 li
305.645 16.66 305.629 16.703 305.598 16.742 cv
305.566 16.781 305.512 16.816 305.438 16.84 cv
305.359 16.867 305.258 16.883 305.137 16.898 cv
305.012 16.91 304.859 16.918 304.672 16.918 cv
304.477 16.918 304.316 16.91 304.195 16.898 cv
304.066 16.883 303.965 16.867 303.895 16.84 cv
303.816 16.816 303.766 16.781 303.734 16.742 cv
303.703 16.703 303.688 16.66 303.688 16.605 cv
303.688 12.484 li
303.688 12.254 303.664 12.039 303.621 11.844 cv
303.578 11.652 303.512 11.488 303.426 11.352 cv
303.332 11.215 303.219 11.109 303.082 11.031 cv
302.938 10.957 302.773 10.918 302.59 10.918 cv
302.348 10.918 302.109 11.012 301.871 11.191 cv
301.633 11.375 301.375 11.637 301.102 11.984 cv
301.102 16.605 li
301.098 16.66 301.082 16.703 301.055 16.742 cv
301.02 16.781 300.965 16.816 300.895 16.84 cv
300.816 16.867 300.719 16.883 300.594 16.898 cv
300.469 16.91 300.309 16.918 300.121 16.918 cv
299.926 16.918 299.77 16.91 299.645 16.898 cv
299.52 16.883 299.418 16.867 299.344 16.84 cv
299.266 16.816 299.211 16.781 299.184 16.742 cv
299.148 16.703 299.133 16.66 299.137 16.605 cv
299.137 9.65601 li
299.133 9.60901 299.148 9.56201 299.176 9.52002 cv
299.199 9.48401 299.246 9.453 299.316 9.422 cv
299.383 9.39801 299.469 9.37903 299.578 9.36298 cv
299.684 9.35498 299.816 9.34802 299.98 9.34399 cv
300.145 9.34802 300.281 9.35498 300.391 9.36298 cv
300.496 9.37903 300.582 9.39801 300.645 9.422 cv
300.703 9.453 300.746 9.48401 300.773 9.52002 cv
300.797 9.56201 300.809 9.60901 300.813 9.65601 cv
300.813 10.457 li
301.195 10.047 301.578 9.73401 301.961 9.52301 cv
302.34 9.31598 302.742 9.21503 303.16 9.211 cv
303.445 9.21503 303.699 9.242 303.93 9.30103 cv
304.156 9.36298 304.363 9.44897 304.543 9.55902 cv
304.723 9.672 304.875 9.80902 305.004 9.961 cv
305.133 10.117 305.242 10.289 305.332 10.48 cv
305.539 10.258 305.742 10.066 305.945 9.90601 cv
306.141 9.74597 306.34 9.61298 306.535 9.51202 cv
306.73 9.40997 306.926 9.336 307.121 9.28497 cv
307.316 9.23798 307.516 9.21503 307.719 9.211 cv
308.18 9.21503 308.566 9.29303 308.887 9.44501 cv
309.199 9.60498 309.457 9.81598 309.652 10.082 cv
309.848 10.352 309.984 10.664 310.07 11.02 cv
310.148 11.379 310.191 11.758 310.195 12.156 cv
cp
f
318.535 12.93 mo
318.531 13.168 318.48 13.344 318.375 13.457 cv
318.266 13.574 318.117 13.633 317.938 13.629 cv
313.703 13.629 li
313.699 13.93 313.734 14.199 313.809 14.437 cv
313.875 14.68 313.988 14.883 314.145 15.051 cv
314.297 15.223 314.492 15.352 314.734 15.437 cv
314.973 15.527 315.262 15.57 315.605 15.57 cv
315.945 15.57 316.246 15.547 316.508 15.496 cv
316.766 15.449 316.992 15.395 317.184 15.332 cv
317.371 15.273 317.527 15.219 317.656 15.168 cv
317.777 15.121 317.879 15.098 317.961 15.094 cv
318.004 15.098 318.043 15.105 318.078 15.121 cv
318.105 15.141 318.133 15.172 318.152 15.219 cv
318.172 15.266 318.184 15.332 318.195 15.418 cv
318.199 15.504 318.203 15.613 318.207 15.742 cv
318.203 15.859 318.203 15.957 318.199 16.035 cv
318.191 16.117 318.184 16.184 318.176 16.238 cv
318.164 16.297 318.148 16.348 318.129 16.383 cv
318.109 16.426 318.082 16.461 318.051 16.496 cv
318.016 16.535 317.922 16.586 317.773 16.645 cv
317.617 16.711 317.426 16.773 317.195 16.828 cv
316.957 16.891 316.688 16.937 316.391 16.984 cv
316.086 17.023 315.766 17.047 315.426 17.051 cv
314.805 17.047 314.262 16.973 313.801 16.816 cv
313.332 16.664 312.945 16.426 312.637 16.109 cv
312.32 15.793 312.086 15.395 311.938 14.91 cv
311.781 14.43 311.707 13.863 311.711 13.207 cv
311.707 12.594 311.785 12.035 311.949 11.539 cv
312.105 11.043 312.34 10.625 312.652 10.277 cv
312.957 9.93402 313.332 9.66803 313.77 9.48401 cv
314.207 9.30499 314.699 9.21503 315.254 9.211 cv
315.832 9.21503 316.332 9.30103 316.746 9.46899 cv
317.16 9.64502 317.496 9.883 317.762 10.184 cv
318.023 10.488 318.219 10.848 318.348 11.262 cv
318.469 11.68 318.531 12.129 318.535 12.617 cv
cp
316.633 12.367 mo
316.645 11.816 316.535 11.383 316.301 11.07 cv
316.066 10.758 315.699 10.602 315.207 10.598 cv
314.957 10.602 314.742 10.648 314.559 10.738 cv
314.371 10.836 314.219 10.961 314.098 11.117 cv
313.973 11.277 313.879 11.465 313.816 11.68 cv
313.75 11.895 313.711 12.125 313.703 12.367 cv
cp
f
325.035 14.641 mo
325.031 15.039 324.957 15.387 324.813 15.687 cv
324.664 15.988 324.457 16.242 324.188 16.441 cv
323.914 16.648 323.594 16.797 323.227 16.898 cv
322.859 16.996 322.457 17.047 322.027 17.051 cv
321.762 17.047 321.516 17.027 321.281 16.992 cv
321.047 16.949 320.836 16.902 320.648 16.844 cv
320.461 16.785 320.305 16.723 320.18 16.66 cv
320.055 16.598 319.961 16.539 319.906 16.484 cv
319.848 16.43 319.805 16.348 319.777 16.23 cv
319.742 16.117 319.727 15.941 319.73 15.711 cv
319.727 15.562 319.734 15.441 319.746 15.348 cv
319.754 15.258 319.77 15.187 319.793 15.129 cv
319.813 15.078 319.836 15.039 319.871 15.02 cv
319.898 15.004 319.938 14.996 319.984 14.992 cv
320.039 14.996 320.125 15.027 320.238 15.09 cv
320.348 15.156 320.484 15.23 320.656 15.305 cv
320.82 15.387 321.016 15.457 321.234 15.523 cv
321.453 15.594 321.703 15.629 321.988 15.625 cv
322.164 15.629 322.32 15.609 322.461 15.57 cv
322.594 15.535 322.715 15.484 322.82 15.414 cv
322.918 15.348 322.992 15.262 323.047 15.156 cv
323.094 15.055 323.121 14.934 323.125 14.797 cv
323.121 14.641 323.074 14.508 322.98 14.398 cv
322.887 14.289 322.758 14.191 322.602 14.105 cv
322.438 14.023 322.258 13.945 322.063 13.871 cv
321.859 13.801 321.656 13.723 321.445 13.629 cv
321.234 13.543 321.027 13.441 320.832 13.324 cv
320.629 13.215 320.449 13.074 320.293 12.906 cv
320.129 12.742 320.004 12.543 319.91 12.305 cv
319.816 12.074 319.77 11.793 319.77 11.461 cv
319.77 11.133 319.832 10.828 319.961 10.547 cv
320.09 10.273 320.277 10.035 320.523 9.836 cv
320.766 9.64099 321.063 9.48798 321.414 9.375 cv
321.762 9.27002 322.156 9.21503 322.598 9.211 cv
322.813 9.21503 323.023 9.22998 323.23 9.258 cv
323.434 9.29303 323.621 9.33197 323.789 9.375 cv
323.953 9.42603 324.094 9.47699 324.211 9.52698 cv
324.324 9.586 324.406 9.633 324.457 9.66803 cv
324.504 9.711 324.539 9.75 324.563 9.78497 cv
324.582 9.828 324.594 9.875 324.605 9.92603 cv
324.613 9.97998 324.625 10.047 324.633 10.125 cv
324.641 10.211 324.645 10.309 324.645 10.426 cv
324.645 10.566 324.641 10.684 324.633 10.77 cv
324.625 10.863 324.609 10.934 324.594 10.98 cv
324.574 11.035 324.551 11.07 324.523 11.086 cv
324.488 11.109 324.453 11.117 324.414 11.113 cv
324.363 11.117 324.289 11.09 324.195 11.031 cv
324.094 10.98 323.973 10.922 323.824 10.855 cv
323.676 10.797 323.504 10.738 323.309 10.68 cv
323.113 10.629 322.891 10.602 322.645 10.598 cv
322.465 10.602 322.313 10.621 322.184 10.652 cv
322.051 10.691 321.941 10.742 321.863 10.809 cv
321.777 10.879 321.715 10.957 321.676 11.047 cv
321.629 11.141 321.609 11.238 321.613 11.34 cv
321.609 11.5 321.66 11.637 321.762 11.742 cv
321.859 11.855 321.988 11.949 322.152 12.031 cv
322.313 12.117 322.496 12.195 322.703 12.266 cv
322.906 12.34 323.113 12.422 323.324 12.504 cv
323.531 12.594 323.738 12.691 323.949 12.805 cv
324.152 12.918 324.336 13.059 324.496 13.223 cv
324.656 13.391 324.785 13.59 324.887 13.82 cv
324.98 14.055 325.031 14.328 325.035 14.641 cv
cp
f
333.824 12.953 mo
333.82 13.254 333.793 13.465 333.738 13.582 cv
333.68 13.707 333.59 13.766 333.465 13.762 cv
330.223 13.762 li
330.094 13.766 330 13.703 329.945 13.578 cv
329.883 13.457 329.855 13.25 329.859 12.953 cv
329.855 12.664 329.883 12.457 329.945 12.336 cv
330 12.219 330.094 12.16 330.223 12.156 cv
333.465 12.156 li
333.527 12.16 333.578 12.172 333.625 12.195 cv
333.664 12.223 333.703 12.27 333.738 12.328 cv
333.766 12.395 333.789 12.477 333.805 12.578 cv
333.816 12.684 333.82 12.809 333.824 12.953 cv
cp
f
344.563 16.016 mo
344.559 16.172 344.555 16.305 344.543 16.406 cv
344.527 16.516 344.508 16.602 344.484 16.672 cv
344.457 16.742 344.422 16.793 344.387 16.824 cv
344.344 16.855 344.301 16.871 344.25 16.871 cv
339.629 16.871 li
339.453 16.871 339.309 16.82 339.195 16.719 cv
339.074 16.617 339.016 16.453 339.02 16.223 cv
339.02 7.06598 li
339.016 7.02002 339.035 6.97302 339.07 6.92603 cv
339.102 6.88702 339.156 6.85199 339.238 6.82397 cv
339.313 6.80103 339.418 6.78101 339.555 6.76202 cv
339.684 6.75 339.848 6.742 340.051 6.73798 cv
340.246 6.742 340.414 6.75 340.547 6.76202 cv
340.676 6.78101 340.777 6.80103 340.859 6.82397 cv
340.934 6.85199 340.992 6.88702 341.027 6.92603 cv
341.059 6.97302 341.074 7.02002 341.078 7.06598 cv
341.078 15.18 li
344.25 15.18 li
344.301 15.184 344.344 15.199 344.387 15.223 cv
344.422 15.254 344.457 15.301 344.484 15.363 cv
344.508 15.434 344.527 15.52 344.543 15.621 cv
344.555 15.73 344.559 15.859 344.563 16.016 cv
cp
f
352.684 13.059 mo
352.68 13.656 352.602 14.199 352.449 14.684 cv
352.289 15.176 352.055 15.594 351.738 15.945 cv
351.422 16.297 351.023 16.57 350.547 16.762 cv
350.066 16.953 349.508 17.047 348.871 17.051 cv
348.25 17.047 347.711 16.965 347.258 16.793 cv
346.797 16.625 346.418 16.375 346.121 16.047 cv
345.816 15.723 345.594 15.32 345.449 14.84 cv
345.305 14.363 345.234 13.816 345.234 13.199 cv
345.234 12.609 345.313 12.07 345.469 11.578 cv
345.625 11.09 345.863 10.668 346.184 10.316 cv
346.5 9.96899 346.895 9.69501 347.371 9.5 cv
347.844 9.30902 348.402 9.21503 349.043 9.211 cv
349.668 9.21503 350.207 9.297 350.664 9.46503 cv
351.121 9.63702 351.5 9.88702 351.797 10.211 cv
352.094 10.539 352.316 10.941 352.465 11.418 cv
352.609 11.898 352.68 12.445 352.684 13.059 cv
cp
350.664 13.137 mo
350.66 12.801 350.633 12.484 350.582 12.191 cv
350.523 11.906 350.43 11.656 350.305 11.441 cv
350.172 11.23 350 11.062 349.789 10.941 cv
349.57 10.824 349.301 10.766 348.973 10.762 cv
348.684 10.766 348.43 10.82 348.211 10.922 cv
347.992 11.031 347.813 11.187 347.672 11.391 cv
347.531 11.598 347.426 11.844 347.355 12.129 cv
347.285 12.422 347.25 12.75 347.25 13.113 cv
347.25 13.461 347.277 13.777 347.336 14.062 cv
347.391 14.355 347.484 14.605 347.613 14.816 cv
347.738 15.031 347.91 15.195 348.133 15.309 cv
348.348 15.43 348.617 15.488 348.941 15.484 cv
349.234 15.488 349.492 15.434 349.715 15.324 cv
349.93 15.219 350.109 15.066 350.25 14.859 cv
350.391 14.66 350.492 14.414 350.563 14.125 cv
350.625 13.84 350.66 13.512 350.664 13.137 cv
cp
f
359.5 15.5 mo
359.496 15.637 359.492 15.75 359.488 15.84 cv
359.477 15.934 359.469 16.012 359.457 16.07 cv
359.441 16.133 359.426 16.184 359.41 16.219 cv
359.391 16.262 359.348 16.309 359.289 16.367 cv
359.223 16.43 359.117 16.504 358.969 16.586 cv
358.816 16.676 358.645 16.754 358.453 16.816 cv
358.262 16.887 358.055 16.937 357.828 16.98 cv
357.602 17.02 357.367 17.039 357.133 17.043 cv
356.594 17.039 356.121 16.961 355.707 16.793 cv
355.293 16.629 354.945 16.383 354.668 16.059 cv
354.383 15.734 354.172 15.34 354.031 14.871 cv
353.891 14.406 353.82 13.867 353.82 13.262 cv
353.82 12.566 353.906 11.969 354.078 11.461 cv
354.25 10.957 354.492 10.535 354.809 10.203 cv
355.117 9.87097 355.484 9.625 355.914 9.461 cv
356.336 9.30103 356.805 9.21899 357.316 9.21899 cv
357.523 9.21899 357.727 9.23798 357.93 9.27301 cv
358.125 9.31201 358.313 9.36298 358.488 9.422 cv
358.66 9.48798 358.816 9.55902 358.957 9.633 cv
359.094 9.71503 359.191 9.78101 359.25 9.836 cv
359.305 9.89502 359.344 9.94098 359.371 9.97699 cv
359.391 10.02 359.41 10.07 359.426 10.129 cv
359.438 10.195 359.449 10.273 359.457 10.359 cv
359.465 10.453 359.469 10.562 359.469 10.691 cv
359.469 10.996 359.441 11.207 359.391 11.328 cv
359.336 11.449 359.27 11.512 359.188 11.508 cv
359.098 11.512 359.004 11.477 358.906 11.402 cv
358.805 11.332 358.688 11.25 358.555 11.16 cv
358.422 11.074 358.262 10.992 358.074 10.918 cv
357.887 10.848 357.66 10.812 357.402 10.809 cv
356.891 10.812 356.504 11.008 356.234 11.398 cv
355.961 11.789 355.824 12.363 355.828 13.121 cv
355.824 13.496 355.859 13.828 355.93 14.113 cv
355.996 14.398 356.094 14.637 356.23 14.828 cv
356.359 15.023 356.527 15.168 356.73 15.262 cv
356.93 15.359 357.16 15.406 357.426 15.406 cv
357.691 15.406 357.926 15.367 358.125 15.285 cv
358.316 15.207 358.484 15.117 358.633 15.016 cv
358.773 14.918 358.898 14.828 359 14.746 cv
359.098 14.668 359.18 14.629 359.25 14.625 cv
359.293 14.629 359.332 14.641 359.367 14.664 cv
359.395 14.691 359.418 14.738 359.441 14.809 cv
359.457 14.879 359.473 14.969 359.484 15.078 cv
359.492 15.187 359.496 15.328 359.5 15.5 cv
cp
f
366.789 16.629 mo
366.785 16.707 366.758 16.762 366.711 16.801 cv
366.656 16.844 366.574 16.871 366.465 16.891 cv
366.348 16.906 366.184 16.918 365.969 16.918 cv
365.73 16.918 365.559 16.906 365.457 16.891 cv
365.348 16.871 365.273 16.844 365.234 16.801 cv
365.188 16.762 365.168 16.707 365.168 16.629 cv
365.168 16.078 li
364.879 16.387 364.551 16.625 364.188 16.793 cv
363.82 16.965 363.414 17.047 362.969 17.051 cv
362.598 17.047 362.258 17 361.949 16.906 cv
361.641 16.812 361.375 16.672 361.148 16.477 cv
360.922 16.289 360.746 16.055 360.621 15.773 cv
360.496 15.496 360.434 15.168 360.438 14.789 cv
360.434 14.391 360.512 14.039 360.672 13.734 cv
360.828 13.437 361.066 13.191 361.383 12.996 cv
361.695 12.805 362.086 12.66 362.555 12.562 cv
363.023 12.473 363.566 12.426 364.184 12.422 cv
364.863 12.422 li
364.863 12 li
364.863 11.785 364.84 11.594 364.797 11.43 cv
364.75 11.27 364.676 11.133 364.578 11.02 cv
364.473 10.914 364.34 10.832 364.172 10.777 cv
364 10.727 363.789 10.703 363.547 10.699 cv
363.215 10.703 362.922 10.738 362.668 10.809 cv
362.406 10.883 362.18 10.965 361.984 11.051 cv
361.785 11.145 361.621 11.223 361.492 11.293 cv
361.355 11.367 361.246 11.406 361.168 11.402 cv
361.105 11.406 361.055 11.387 361.016 11.348 cv
360.969 11.312 360.934 11.262 360.906 11.191 cv
360.875 11.129 360.852 11.043 360.84 10.941 cv
360.82 10.844 360.813 10.734 360.816 10.613 cv
360.813 10.453 360.828 10.328 360.855 10.23 cv
360.879 10.141 360.926 10.055 361.004 9.97699 cv
361.074 9.90198 361.203 9.82001 361.387 9.72998 cv
361.566 9.64099 361.777 9.55499 362.023 9.47699 cv
362.266 9.39801 362.535 9.336 362.824 9.28497 cv
363.113 9.23798 363.41 9.21503 363.719 9.211 cv
364.262 9.21503 364.727 9.26599 365.113 9.37097 cv
365.5 9.47998 365.82 9.64502 366.07 9.86298 cv
366.32 10.082 366.5 10.367 366.617 10.715 cv
366.727 11.066 366.785 11.48 366.789 11.953 cv
cp
364.863 13.652 mo
364.113 13.652 li
363.797 13.656 363.527 13.68 363.305 13.723 cv
363.078 13.773 362.895 13.844 362.758 13.934 cv
362.613 14.031 362.512 14.145 362.449 14.273 cv
362.383 14.41 362.348 14.559 362.352 14.727 cv
362.348 15.02 362.441 15.25 362.629 15.414 cv
362.813 15.582 363.07 15.664 363.398 15.664 cv
363.672 15.664 363.922 15.594 364.156 15.453 cv
364.383 15.312 364.621 15.109 364.863 14.836 cv
cp
f
370.711 16.605 mo
370.707 16.66 370.691 16.703 370.664 16.742 cv
370.629 16.781 370.574 16.816 370.504 16.84 cv
370.426 16.867 370.328 16.883 370.203 16.898 cv
370.078 16.91 369.918 16.918 369.73 16.918 cv
369.535 16.918 369.379 16.91 369.254 16.898 cv
369.129 16.883 369.027 16.867 368.953 16.84 cv
368.875 16.816 368.82 16.781 368.793 16.742 cv
368.758 16.703 368.742 16.66 368.746 16.605 cv
368.746 6.35901 li
368.742 6.30902 368.758 6.26202 368.793 6.21899 cv
368.82 6.17999 368.875 6.14502 368.953 6.11298 cv
369.027 6.086 369.129 6.06598 369.254 6.047 cv
369.379 6.03497 369.535 6.02698 369.73 6.02301 cv
369.918 6.02698 370.078 6.03497 370.203 6.047 cv
370.328 6.06598 370.426 6.086 370.504 6.11298 cv
370.574 6.14502 370.629 6.17999 370.664 6.21899 cv
370.691 6.26202 370.707 6.30902 370.711 6.35901 cv
cp
f
388.199 16.59 mo
388.195 16.645 388.184 16.691 388.156 16.73 cv
388.125 16.773 388.07 16.809 388 16.832 cv
387.922 16.859 387.824 16.879 387.699 16.895 cv
387.574 16.91 387.414 16.918 387.223 16.918 cv
387.035 16.918 386.879 16.91 386.758 16.895 cv
386.629 16.879 386.531 16.859 386.461 16.832 cv
386.387 16.809 386.336 16.773 386.305 16.73 cv
386.273 16.691 386.258 16.645 386.258 16.59 cv
386.258 8.383 li
386.242 8.383 li
383.32 16.582 li
383.297 16.652 383.262 16.707 383.219 16.75 cv
383.168 16.797 383.105 16.832 383.027 16.855 cv
382.945 16.883 382.844 16.898 382.719 16.906 cv
382.594 16.914 382.441 16.918 382.27 16.918 cv
382.09 16.918 381.941 16.91 381.816 16.898 cv
381.691 16.883 381.586 16.863 381.508 16.836 cv
381.422 16.809 381.359 16.773 381.316 16.73 cv
381.266 16.691 381.234 16.645 381.223 16.582 cv
378.402 8.383 li
378.387 8.383 li
378.387 16.59 li
378.383 16.645 378.367 16.691 378.344 16.73 cv
378.313 16.773 378.262 16.809 378.184 16.832 cv
378.105 16.859 378.004 16.879 377.883 16.895 cv
377.758 16.91 377.602 16.918 377.414 16.918 cv
377.223 16.918 377.066 16.91 376.945 16.895 cv
376.816 16.879 376.715 16.859 376.645 16.832 cv
376.566 16.809 376.516 16.773 376.488 16.73 cv
376.457 16.691 376.441 16.645 376.445 16.59 cv
376.445 7.60498 li
376.441 7.34399 376.512 7.14099 376.656 6.99597 cv
376.793 6.85901 376.98 6.789 377.219 6.78497 cv
378.559 6.78497 li
378.797 6.789 379 6.80902 379.172 6.84399 cv
379.34 6.88702 379.488 6.94897 379.617 7.039 cv
379.738 7.133 379.844 7.25403 379.93 7.39801 cv
380.012 7.55103 380.082 7.73401 380.148 7.94897 cv
382.332 13.957 li
382.363 13.957 li
384.621 7.96503 li
384.688 7.74597 384.762 7.56201 384.844 7.40997 cv
384.922 7.26202 385.016 7.14099 385.125 7.04303 cv
385.23 6.953 385.355 6.88702 385.5 6.84399 cv
385.645 6.80902 385.813 6.789 386.008 6.78497 cv
387.387 6.78497 li
387.523 6.789 387.645 6.80499 387.75 6.84003 cv
387.848 6.87903 387.93 6.93402 388 7 cv
388.063 7.07397 388.113 7.15997 388.148 7.258 cv
388.18 7.36298 388.195 7.47998 388.199 7.60498 cv
cp
f
397.309 13.059 mo
397.305 13.656 397.227 14.199 397.074 14.684 cv
396.914 15.176 396.68 15.594 396.363 15.945 cv
396.047 16.297 395.648 16.57 395.172 16.762 cv
394.691 16.953 394.133 17.047 393.496 17.051 cv
392.875 17.047 392.336 16.965 391.883 16.793 cv
391.422 16.625 391.043 16.375 390.746 16.047 cv
390.441 15.723 390.219 15.32 390.074 14.84 cv
389.93 14.363 389.859 13.816 389.859 13.199 cv
389.859 12.609 389.938 12.07 390.094 11.578 cv
390.25 11.09 390.488 10.668 390.809 10.316 cv
391.125 9.96899 391.52 9.69501 391.996 9.5 cv
392.469 9.30902 393.027 9.21503 393.668 9.211 cv
394.293 9.21503 394.832 9.297 395.289 9.46503 cv
395.746 9.63702 396.125 9.88702 396.422 10.211 cv
396.719 10.539 396.941 10.941 397.09 11.418 cv
397.234 11.898 397.305 12.445 397.309 13.059 cv
cp
395.289 13.137 mo
395.285 12.801 395.258 12.484 395.207 12.191 cv
395.148 11.906 395.055 11.656 394.93 11.441 cv
394.797 11.23 394.625 11.062 394.414 10.941 cv
394.195 10.824 393.926 10.766 393.598 10.762 cv
393.309 10.766 393.055 10.82 392.836 10.922 cv
392.617 11.031 392.438 11.187 392.297 11.391 cv
392.156 11.598 392.051 11.844 391.98 12.129 cv
391.91 12.422 391.875 12.75 391.875 13.113 cv
391.875 13.461 391.902 13.777 391.961 14.062 cv
392.016 14.355 392.109 14.605 392.238 14.816 cv
392.363 15.031 392.535 15.195 392.758 15.309 cv
392.973 15.43 393.242 15.488 393.566 15.484 cv
393.859 15.488 394.117 15.434 394.34 15.324 cv
394.555 15.219 394.734 15.066 394.875 14.859 cv
395.016 14.66 395.117 14.414 395.188 14.125 cv
395.25 13.84 395.285 13.512 395.289 13.137 cv
cp
f
405.457 16.605 mo
405.453 16.668 405.441 16.715 405.418 16.75 cv
405.391 16.793 405.344 16.824 405.285 16.848 cv
405.219 16.871 405.137 16.887 405.031 16.902 cv
404.926 16.91 404.793 16.918 404.641 16.918 cv
404.469 16.918 404.336 16.91 404.234 16.902 cv
404.129 16.887 404.043 16.871 403.98 16.848 cv
403.914 16.824 403.867 16.793 403.84 16.75 cv
403.809 16.715 403.793 16.668 403.797 16.605 cv
403.797 15.836 li
403.438 16.223 403.063 16.52 402.672 16.73 cv
402.273 16.941 401.84 17.047 401.367 17.051 cv
400.832 17.047 400.383 16.945 400.02 16.742 cv
399.652 16.539 399.355 16.266 399.125 15.914 cv
398.891 15.57 398.723 15.164 398.621 14.695 cv
398.52 14.234 398.469 13.742 398.469 13.223 cv
398.469 12.609 398.531 12.055 398.664 11.559 cv
398.793 11.066 398.988 10.645 399.246 10.297 cv
399.5 9.94897 399.816 9.68402 400.195 9.492 cv
400.574 9.30902 401.012 9.21503 401.508 9.211 cv
401.895 9.21503 402.246 9.29303 402.566 9.44897 cv
402.879 9.60901 403.195 9.84003 403.508 10.145 cv
403.508 6.383 li
403.508 6.33197 403.52 6.28497 403.551 6.242 cv
403.574 6.203 403.629 6.16803 403.707 6.13702 cv
403.781 6.10901 403.879 6.09003 404.008 6.07001 cv
404.129 6.05902 404.289 6.05103 404.484 6.047 cv
404.676 6.05103 404.832 6.05902 404.957 6.07001 cv
405.078 6.09003 405.18 6.10901 405.254 6.13702 cv
405.324 6.16803 405.375 6.203 405.41 6.242 cv
405.438 6.28497 405.453 6.33197 405.457 6.383 cv
cp
403.508 11.961 mo
403.227 11.609 402.957 11.34 402.703 11.152 cv
402.441 10.965 402.172 10.871 401.895 10.871 cv
401.641 10.871 401.422 10.937 401.238 11.062 cv
401.051 11.195 400.902 11.363 400.793 11.574 cv
400.68 11.785 400.598 12.023 400.543 12.285 cv
400.488 12.551 400.461 12.82 400.461 13.09 cv
400.461 13.387 400.484 13.668 400.531 13.941 cv
400.578 14.219 400.652 14.465 400.762 14.68 cv
400.863 14.895 401.008 15.066 401.188 15.195 cv
401.363 15.328 401.586 15.395 401.855 15.391 cv
401.988 15.395 402.117 15.375 402.25 15.332 cv
402.375 15.297 402.508 15.234 402.641 15.141 cv
402.773 15.055 402.91 14.937 403.051 14.793 cv
403.191 14.652 403.344 14.477 403.508 14.27 cv
cp
f
413.855 12.93 mo
413.852 13.168 413.801 13.344 413.695 13.457 cv
413.586 13.574 413.438 13.633 413.258 13.629 cv
409.023 13.629 li
409.02 13.93 409.055 14.199 409.129 14.437 cv
409.195 14.68 409.309 14.883 409.465 15.051 cv
409.617 15.223 409.813 15.352 410.055 15.437 cv
410.293 15.527 410.582 15.57 410.926 15.57 cv
411.266 15.57 411.566 15.547 411.828 15.496 cv
412.086 15.449 412.313 15.395 412.504 15.332 cv
412.691 15.273 412.848 15.219 412.977 15.168 cv
413.098 15.121 413.199 15.098 413.281 15.094 cv
413.324 15.098 413.363 15.105 413.398 15.121 cv
413.426 15.141 413.453 15.172 413.473 15.219 cv
413.492 15.266 413.504 15.332 413.516 15.418 cv
413.52 15.504 413.523 15.613 413.527 15.742 cv
413.523 15.859 413.523 15.957 413.52 16.035 cv
413.512 16.117 413.504 16.184 413.496 16.238 cv
413.484 16.297 413.469 16.348 413.449 16.383 cv
413.43 16.426 413.402 16.461 413.371 16.496 cv
413.336 16.535 413.242 16.586 413.094 16.645 cv
412.938 16.711 412.746 16.773 412.516 16.828 cv
412.277 16.891 412.008 16.937 411.711 16.984 cv
411.406 17.023 411.086 17.047 410.746 17.051 cv
410.125 17.047 409.582 16.973 409.121 16.816 cv
408.652 16.664 408.266 16.426 407.957 16.109 cv
407.641 15.793 407.406 15.395 407.258 14.91 cv
407.102 14.43 407.027 13.863 407.031 13.207 cv
407.027 12.594 407.105 12.035 407.27 11.539 cv
407.426 11.043 407.66 10.625 407.973 10.277 cv
408.277 9.93402 408.652 9.66803 409.09 9.48401 cv
409.527 9.30499 410.02 9.21503 410.574 9.211 cv
411.152 9.21503 411.652 9.30103 412.066 9.46899 cv
412.48 9.64502 412.816 9.883 413.082 10.184 cv
413.344 10.488 413.539 10.848 413.668 11.262 cv
413.789 11.68 413.852 12.129 413.855 12.617 cv
cp
411.953 12.367 mo
411.965 11.816 411.855 11.383 411.621 11.07 cv
411.387 10.758 411.02 10.602 410.527 10.598 cv
410.277 10.602 410.063 10.648 409.879 10.738 cv
409.691 10.836 409.539 10.961 409.418 11.117 cv
409.293 11.277 409.199 11.465 409.137 11.68 cv
409.07 11.895 409.031 12.125 409.023 12.367 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
