%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: EnergyConsumption.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:55:24 p.m.
%%BoundingBox: 0 0 679 568
%%HiResBoundingBox: 0 0 678.3600 567.3600
%%CropBox: 0 0 678.3600 567.3600
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -567.36 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 567.36 li
678.36 567.36 li
678.36 0 li
cp
clp
gsave
0 567.36 mo
679 567.36 li
679 -.640015 li
0 -.640015 li
cp
clp
0 0 mo
678.359 0 li
678.359 567.359 li
0 567.359 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
54.238 494.039 mo
661.801 494.039 li
54.238 445.199 mo
661.801 445.199 li
54.238 396.238 mo
661.801 396.238 li
54.238 347.398 mo
661.801 347.398 li
54.238 298.559 mo
661.801 298.559 li
54.238 249.719 mo
661.801 249.719 li
54.238 200.879 mo
661.801 200.879 li
54.238 152.039 mo
661.801 152.039 li
54.238 103.199 mo
661.801 103.199 li
54.238 54.359 mo
661.801 54.359 li
.135805 .104005 .108583 0 cmyk
@
54.238 469.559 mo
661.801 469.559 li
54.238 420.719 mo
661.801 420.719 li
54.238 371.879 mo
661.801 371.879 li
54.238 323.039 mo
661.801 323.039 li
54.238 274.199 mo
661.801 274.199 li
54.238 225.359 mo
661.801 225.359 li
54.238 176.52 mo
661.801 176.52 li
54.238 127.68 mo
661.801 127.68 li
54.238 78.719 mo
661.801 78.719 li
54.238 29.879 mo
661.801 29.879 li
.326574 .281529 .277562 0 cmyk
@
92.16 29.879 mo
92.16 518.398 li
168.121 29.879 mo
168.121 518.398 li
244.078 29.879 mo
244.078 518.398 li
320.039 29.879 mo
320.039 518.398 li
396 29.879 mo
396 518.398 li
471.961 29.879 mo
471.961 518.398 li
547.922 29.879 mo
547.922 518.398 li
623.762 29.879 mo
623.762 518.398 li
.175235 .144778 .143648 0 cmyk
@
54.238 29.879 mo
54.238 518.398 li
130.078 29.879 mo
130.078 518.398 li
206.039 29.879 mo
206.039 518.398 li
282 29.879 mo
282 518.398 li
357.961 29.879 mo
357.961 518.398 li
433.922 29.879 mo
433.922 518.398 li
509.879 29.879 mo
509.879 518.398 li
585.84 29.879 mo
585.84 518.398 li
661.801 29.879 mo
661.801 518.398 li
.326574 .281529 .277562 0 cmyk
@
34.078 509.16 mo
41.16 509.16 li
41.16 526.199 li
34.078 526.199 li
cp
0 0 0 0 cmyk
ef
34.078 460.199 mo
41.16 460.199 li
41.16 477.359 li
34.078 477.359 li
cp
ef
27 411.359 mo
41.16 411.359 li
41.16 428.519 li
27 428.519 li
cp
ef
27 362.52 mo
41.16 362.52 li
41.16 379.68 li
27 379.68 li
cp
ef
27 313.68 mo
41.16 313.68 li
41.16 330.84 li
27 330.84 li
cp
ef
27 264.84 mo
41.16 264.84 li
41.16 282 li
27 282 li
cp
ef
27 216 mo
41.16 216 li
41.16 233.039 li
27 233.039 li
cp
ef
27 167.16 mo
41.16 167.16 li
41.16 184.199 li
27 184.199 li
cp
ef
27 118.32 mo
41.16 118.32 li
41.16 135.359 li
27 135.359 li
cp
ef
27 69.48 mo
41.16 69.48 li
41.16 86.519 li
27 86.519 li
cp
ef
27 20.641 mo
41.16 20.641 li
41.16 37.68 li
27 37.68 li
cp
ef
.96 lw
54.238 518.398 mo
661.801 518.398 li
.369879 .299321 .304356 .000976577 cmyk
@
54.238 518.398 mo
54.238 522.84 li
130.078 518.398 mo
130.078 522.84 li
206.039 518.398 mo
206.039 522.84 li
282 518.398 mo
282 522.84 li
357.961 518.398 mo
357.961 522.84 li
433.922 518.398 mo
433.922 522.84 li
509.879 518.398 mo
509.879 522.84 li
585.84 518.398 mo
585.84 522.84 li
661.801 518.398 mo
661.801 522.84 li
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
1 lc
54.238 37.68 mo
130.078 133.441 li
206.039 106.199 li
282 123 li
357.961 96.359 li
433.922 96.359 li
509.879 95.281 li
585.84 95.879 li
661.801 94.32 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
59.129 42.691 mo
49.051 32.609 li
49.051 42.691 mo
59.129 32.609 li
.62829 .284672 0 0 cmyk
@
135.09 138.449 mo
125.012 128.371 li
125.012 138.449 mo
135.09 128.371 li
@
211.051 111.211 mo
200.969 101.129 li
200.969 111.211 mo
211.051 101.129 li
@
287.012 128.012 mo
276.93 117.93 li
276.93 128.012 mo
287.012 117.93 li
@
362.969 101.371 mo
352.891 91.289 li
352.891 101.371 mo
362.969 91.289 li
@
438.93 101.371 mo
428.852 91.289 li
428.852 101.371 mo
438.93 91.289 li
@
514.891 100.172 mo
504.809 90.09 li
504.809 100.172 mo
514.891 90.09 li
@
590.73 100.891 mo
580.648 90.809 li
580.648 100.891 mo
590.73 90.809 li
@
666.691 99.328 mo
656.609 89.25 li
656.609 99.328 mo
666.691 89.25 li
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
54.238 356.281 mo
130.078 362.641 li
206.039 370.199 li
282 384.719 li
357.961 373.922 li
433.922 372.961 li
509.879 381.961 li
585.84 394.68 li
661.801 374.879 li
@
grestore
49.051 351.211 mo
59.012 351.211 li
59.012 361.172 li
49.051 361.172 li
cp
@
125.012 357.449 mo
134.969 357.449 li
134.969 367.41 li
125.012 367.41 li
cp
@
200.969 365.012 mo
210.93 365.012 li
210.93 374.969 li
200.969 374.969 li
cp
@
276.93 379.648 mo
286.891 379.648 li
286.891 389.609 li
276.93 389.609 li
cp
@
352.891 368.852 mo
362.852 368.852 li
362.852 378.809 li
352.891 378.809 li
cp
@
428.852 367.77 mo
438.809 367.77 li
438.809 377.731 li
428.852 377.731 li
cp
@
504.809 376.77 mo
514.77 376.77 li
514.77 386.731 li
504.809 386.731 li
cp
@
580.648 389.488 mo
590.609 389.488 li
590.609 399.449 li
580.648 399.449 li
cp
@
656.609 369.809 mo
666.57 369.809 li
666.57 379.77 li
656.609 379.77 li
cp
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
54.238 192.359 mo
130.078 303.602 li
206.039 259.078 li
282 244.922 li
357.961 244.32 li
433.922 244.078 li
509.879 244.32 li
585.84 244.32 li
661.801 243.48 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
59.129 197.371 mo
49.051 187.289 li
49.051 197.371 mo
59.129 187.289 li
.0321965 .622736 .922606 .000579843 cmyk
@
135.09 308.488 mo
125.012 298.41 li
125.012 308.488 mo
135.09 298.41 li
@
211.051 263.969 mo
200.969 253.891 li
200.969 263.969 mo
211.051 253.891 li
@
287.012 249.93 mo
276.93 239.852 li
276.93 249.93 mo
287.012 239.852 li
@
362.969 249.328 mo
352.891 239.25 li
352.891 249.328 mo
362.969 239.25 li
@
438.93 249.09 mo
428.852 239.012 li
428.852 249.09 mo
438.93 239.012 li
@
514.891 249.328 mo
504.809 239.25 li
504.809 249.328 mo
514.891 239.25 li
@
590.73 249.328 mo
580.648 239.25 li
580.648 249.328 mo
590.73 239.25 li
@
666.691 248.488 mo
656.609 238.41 li
656.609 248.488 mo
666.691 238.41 li
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
54.238 340.32 mo
130.078 375.602 li
206.039 394.68 li
282 414.48 li
357.961 389.281 li
433.922 414.961 li
509.879 407.879 li
585.84 415.559 li
661.801 413.52 li
@
grestore
49.051 335.25 mo
59.012 335.25 li
59.012 345.211 li
49.051 345.211 li
cp
@
125.012 370.531 mo
134.969 370.531 li
134.969 380.488 li
125.012 380.488 li
cp
@
200.969 389.488 mo
210.93 389.488 li
210.93 399.449 li
200.969 399.449 li
cp
@
276.93 409.289 mo
286.891 409.289 li
286.891 419.25 li
276.93 419.25 li
cp
@
352.891 384.09 mo
362.852 384.09 li
362.852 394.051 li
352.891 394.051 li
cp
@
428.852 409.891 mo
438.809 409.891 li
438.809 419.852 li
428.852 419.852 li
cp
@
504.809 402.691 mo
514.77 402.691 li
514.77 412.648 li
504.809 412.648 li
cp
@
580.648 410.371 mo
590.609 410.371 li
590.609 420.328 li
580.648 420.328 li
cp
@
656.609 408.328 mo
666.57 408.328 li
666.57 418.289 li
656.609 418.289 li
cp
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
54.238 237.719 mo
130.078 298.199 li
206.039 269.039 li
282 269.398 li
357.961 255.359 li
433.922 254.641 li
509.879 256.078 li
585.84 254.641 li
661.801 254.641 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
59.129 242.73 mo
49.051 232.648 li
49.051 242.73 mo
59.129 232.648 li
.621118 .109194 .980743 .0040589 cmyk
@
135.09 303.09 mo
125.012 293.012 li
125.012 303.09 mo
135.09 293.012 li
@
211.051 274.051 mo
200.969 263.969 li
200.969 274.051 mo
211.051 263.969 li
@
287.012 274.41 mo
276.93 264.328 li
276.93 274.41 mo
287.012 264.328 li
@
362.969 260.25 mo
352.891 250.172 li
352.891 260.25 mo
362.969 250.172 li
@
438.93 259.531 mo
428.852 249.449 li
428.852 259.531 mo
438.93 249.449 li
@
514.891 260.969 mo
504.809 250.891 li
504.809 260.969 mo
514.891 250.891 li
@
590.73 259.531 mo
580.648 249.449 li
580.648 259.531 mo
590.73 249.449 li
@
666.691 259.531 mo
656.609 249.449 li
656.609 259.531 mo
666.691 249.449 li
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
54.238 325.801 mo
130.078 387.48 li
206.039 396 li
282 417.719 li
357.961 415.559 li
433.922 397.559 li
509.879 406.199 li
585.84 411.121 li
661.801 411.48 li
@
grestore
49.051 320.609 mo
59.012 320.609 li
59.012 330.57 li
49.051 330.57 li
cp
@
125.012 382.41 mo
134.969 382.41 li
134.969 392.371 li
125.012 392.371 li
cp
@
200.969 390.809 mo
210.93 390.809 li
210.93 400.77 li
200.969 400.77 li
cp
@
276.93 412.648 mo
286.891 412.648 li
286.891 422.609 li
276.93 422.609 li
cp
@
352.891 410.371 mo
362.852 410.371 li
362.852 420.328 li
352.891 420.328 li
cp
@
428.852 392.371 mo
438.809 392.371 li
438.809 402.328 li
428.852 402.328 li
cp
@
504.809 401.129 mo
514.77 401.129 li
514.77 411.09 li
504.809 411.09 li
cp
@
580.648 405.93 mo
590.609 405.93 li
590.609 415.891 li
580.648 415.891 li
cp
@
656.609 406.289 mo
666.57 406.289 li
666.57 416.25 li
656.609 416.25 li
cp
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
54.238 264.359 mo
130.078 300.961 li
206.039 323.641 li
282 281.16 li
357.961 284.879 li
433.922 277.801 li
509.879 276.602 li
585.84 274.078 li
661.801 269.762 li
0 .993988 1 0 cmyk
@
grestore
59.129 269.371 mo
49.051 259.289 li
49.051 269.371 mo
59.129 259.289 li
0 .993988 1 0 cmyk
@
135.09 305.852 mo
125.012 295.77 li
125.012 305.852 mo
135.09 295.77 li
@
211.051 328.648 mo
200.969 318.57 li
200.969 328.648 mo
211.051 318.57 li
@
287.012 286.172 mo
276.93 276.09 li
276.93 286.172 mo
287.012 276.09 li
@
362.969 289.891 mo
352.891 279.809 li
352.891 289.891 mo
362.969 279.809 li
@
438.93 282.809 mo
428.852 272.73 li
428.852 282.809 mo
438.93 272.73 li
@
514.891 281.488 mo
504.809 271.41 li
504.809 281.488 mo
514.891 271.41 li
@
590.73 278.969 mo
580.648 268.891 li
580.648 278.969 mo
590.73 268.891 li
@
666.691 274.77 mo
656.609 264.691 li
656.609 274.77 mo
666.691 264.691 li
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
54.238 334.559 mo
130.078 371.398 li
206.039 388.32 li
282 391.68 li
357.961 384.719 li
433.922 402 li
509.879 379.68 li
585.84 390.602 li
661.801 409.32 li
@
grestore
49.051 329.371 mo
59.012 329.371 li
59.012 339.328 li
49.051 339.328 li
cp
@
125.012 366.328 mo
134.969 366.328 li
134.969 376.289 li
125.012 376.289 li
cp
@
200.969 383.129 mo
210.93 383.129 li
210.93 393.09 li
200.969 393.09 li
cp
@
276.93 386.609 mo
286.891 386.609 li
286.891 396.57 li
276.93 396.57 li
cp
@
352.891 379.648 mo
362.852 379.648 li
362.852 389.609 li
352.891 389.609 li
cp
@
428.852 396.93 mo
438.809 396.93 li
438.809 406.891 li
428.852 406.891 li
cp
@
504.809 374.609 mo
514.77 374.609 li
514.77 384.57 li
504.809 384.57 li
cp
@
580.648 385.41 mo
590.609 385.41 li
590.609 395.371 li
580.648 395.371 li
cp
@
656.609 404.129 mo
666.57 404.129 li
666.57 414.09 li
656.609 414.09 li
cp
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.238 277.441 mo
130.078 302.641 li
206.039 292.441 li
282 278.641 li
357.961 277.801 li
433.922 273.602 li
509.879 277.441 li
585.84 276.602 li
661.801 275.281 li
.62829 .284672 0 0 cmyk
@
grestore
58.648 281.852 mo
49.531 272.73 li
49.531 281.852 mo
58.648 272.73 li
.62829 .284672 0 0 cmyk
@
134.609 307.051 mo
125.488 297.93 li
125.488 307.051 mo
134.609 297.93 li
@
210.57 296.852 mo
201.449 287.73 li
201.449 296.852 mo
210.57 287.73 li
@
286.531 283.172 mo
277.41 274.051 li
277.41 283.172 mo
286.531 274.051 li
@
362.488 282.328 mo
353.371 273.211 li
353.371 282.328 mo
362.488 273.211 li
@
438.449 278.129 mo
429.328 269.012 li
429.328 278.129 mo
438.449 269.012 li
@
514.41 281.852 mo
505.289 272.73 li
505.289 281.852 mo
514.41 272.73 li
@
590.25 281.012 mo
581.129 271.891 li
581.129 281.012 mo
590.25 271.891 li
@
666.211 279.809 mo
657.09 270.691 li
657.09 279.809 mo
666.211 270.691 li
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.238 347.641 mo
130.078 372.48 li
206.039 386.52 li
282 410.039 li
357.961 401.039 li
433.922 396.238 li
509.879 399.961 li
585.84 403.559 li
661.801 392.039 li
@
grestore
49.051 342.449 mo
59.012 342.449 li
59.012 352.41 li
49.051 352.41 li
cp
@
125.012 367.289 mo
134.969 367.289 li
134.969 377.25 li
125.012 377.25 li
cp
@
200.969 381.328 mo
210.93 381.328 li
210.93 391.289 li
200.969 391.289 li
cp
@
276.93 404.969 mo
286.891 404.969 li
286.891 414.93 li
276.93 414.93 li
cp
@
352.891 395.852 mo
362.852 395.852 li
362.852 405.809 li
352.891 405.809 li
cp
@
428.852 391.051 mo
438.809 391.051 li
438.809 401.012 li
428.852 401.012 li
cp
@
504.809 394.77 mo
514.77 394.77 li
514.77 404.731 li
504.809 404.731 li
cp
@
580.648 398.371 mo
590.609 398.371 li
590.609 408.328 li
580.648 408.328 li
cp
@
656.609 386.969 mo
666.57 386.969 li
666.57 396.93 li
656.609 396.93 li
cp
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.238 270.961 mo
130.078 298.68 li
206.039 322.199 li
282 285 li
357.961 277.801 li
433.922 277.801 li
509.879 273.602 li
585.84 275.762 li
661.801 274.078 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
59.129 275.969 mo
49.051 265.891 li
49.051 275.969 mo
59.129 265.891 li
.0321965 .622736 .922606 .000579843 cmyk
@
135.09 303.57 mo
125.012 293.488 li
125.012 303.57 mo
135.09 293.488 li
@
211.051 327.09 mo
200.969 317.012 li
200.969 327.09 mo
211.051 317.012 li
@
287.012 290.012 mo
276.93 279.93 li
276.93 290.012 mo
287.012 279.93 li
@
362.969 282.809 mo
352.891 272.73 li
352.891 282.809 mo
362.969 272.73 li
@
438.93 282.809 mo
428.852 272.73 li
428.852 282.809 mo
438.93 272.73 li
@
514.891 278.609 mo
504.809 268.531 li
504.809 278.609 mo
514.891 268.531 li
@
590.73 280.648 mo
580.648 270.57 li
580.648 280.648 mo
590.73 270.57 li
@
666.691 278.969 mo
656.609 268.891 li
656.609 278.969 mo
666.691 268.891 li
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.238 352.199 mo
130.078 381.719 li
206.039 404.16 li
282 414.602 li
357.961 399.602 li
433.922 408.238 li
509.879 394.68 li
585.84 401.52 li
661.801 393.121 li
@
grestore
49.531 347.488 mo
58.531 347.488 li
58.531 356.488 li
49.531 356.488 li
cp
@
125.488 377.129 mo
134.488 377.129 li
134.488 386.129 li
125.488 386.129 li
cp
@
201.449 399.57 mo
210.449 399.57 li
210.449 408.57 li
201.449 408.57 li
cp
@
277.41 409.891 mo
286.41 409.891 li
286.41 418.891 li
277.41 418.891 li
cp
@
353.371 394.891 mo
362.371 394.891 li
362.371 403.891 li
353.371 403.891 li
cp
@
429.328 403.648 mo
438.328 403.648 li
438.328 412.648 li
429.328 412.648 li
cp
@
505.289 389.969 mo
514.289 389.969 li
514.289 398.969 li
505.289 398.969 li
cp
@
581.129 396.93 mo
590.129 396.93 li
590.129 405.93 li
581.129 405.93 li
cp
@
657.09 388.41 mo
666.09 388.41 li
666.09 397.41 li
657.09 397.41 li
cp
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.238 270.961 mo
130.078 325.199 li
206.039 320.879 li
282 277.801 li
357.961 277.441 li
433.922 275.398 li
509.879 276.602 li
585.84 281.281 li
661.801 279.121 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
59.129 275.969 mo
49.051 265.891 li
49.051 275.969 mo
59.129 265.891 li
.621118 .109194 .980743 .0040589 cmyk
@
135.09 330.09 mo
125.012 320.012 li
125.012 330.09 mo
135.09 320.012 li
@
211.051 325.891 mo
200.969 315.809 li
200.969 325.891 mo
211.051 315.809 li
@
287.012 282.809 mo
276.93 272.73 li
276.93 282.809 mo
287.012 272.73 li
@
362.969 282.328 mo
352.891 272.25 li
352.891 282.328 mo
362.969 272.25 li
@
438.93 280.289 mo
428.852 270.211 li
428.852 280.289 mo
438.93 270.211 li
@
514.891 281.488 mo
504.809 271.41 li
504.809 281.488 mo
514.891 271.41 li
@
590.73 286.172 mo
580.648 276.09 li
580.648 286.172 mo
590.73 276.09 li
@
666.691 284.012 mo
656.609 273.93 li
656.609 284.012 mo
666.691 273.93 li
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.238 347.52 mo
130.078 374.16 li
206.039 386.16 li
282 418.68 li
357.961 400.32 li
433.922 397.199 li
509.879 389.281 li
585.84 382.078 li
661.801 410.52 li
@
grestore
49.051 342.328 mo
59.012 342.328 li
59.012 352.289 li
49.051 352.289 li
cp
@
125.012 369.09 mo
134.969 369.09 li
134.969 379.051 li
125.012 379.051 li
cp
@
200.969 380.969 mo
210.93 380.969 li
210.93 390.93 li
200.969 390.93 li
cp
@
276.93 413.609 mo
286.891 413.609 li
286.891 423.57 li
276.93 423.57 li
cp
@
352.891 395.25 mo
362.852 395.25 li
362.852 405.211 li
352.891 405.211 li
cp
@
428.852 392.012 mo
438.809 392.012 li
438.809 401.969 li
428.852 401.969 li
cp
@
504.809 384.09 mo
514.77 384.09 li
514.77 394.051 li
504.809 394.051 li
cp
@
580.648 376.891 mo
590.609 376.891 li
590.609 386.852 li
580.648 386.852 li
cp
@
656.609 405.328 mo
666.57 405.328 li
666.57 415.289 li
656.609 415.289 li
cp
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.238 273.359 mo
130.078 294.84 li
206.039 323.039 li
282 316.68 li
357.961 287.039 li
433.922 275.762 li
509.879 308.281 li
585.84 276.602 li
661.801 274.441 li
0 .993988 1 0 cmyk
@
grestore
59.129 278.25 mo
49.051 268.172 li
49.051 278.25 mo
59.129 268.172 li
0 .993988 1 0 cmyk
@
135.09 299.73 mo
125.012 289.648 li
125.012 299.73 mo
135.09 289.648 li
@
211.051 327.93 mo
200.969 317.852 li
200.969 327.93 mo
211.051 317.852 li
@
287.012 321.57 mo
276.93 311.488 li
276.93 321.57 mo
287.012 311.488 li
@
362.969 291.93 mo
352.891 281.852 li
352.891 291.93 mo
362.969 281.852 li
@
438.93 280.648 mo
428.852 270.57 li
428.852 280.648 mo
438.93 270.57 li
@
514.891 313.172 mo
504.809 303.09 li
504.809 313.172 mo
514.891 303.09 li
@
590.73 281.488 mo
580.648 271.41 li
580.648 281.488 mo
590.73 271.41 li
@
666.691 279.449 mo
656.609 269.371 li
656.609 279.449 mo
666.691 269.371 li
@
gsave
54.121 29.879 mo
662.398 29.879 li
662.398 519.121 li
54.121 519.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.238 328.441 mo
130.078 383.16 li
206.039 391.801 li
282 401.879 li
357.961 409.801 li
433.922 414.48 li
509.879 389.16 li
585.84 409.32 li
661.801 397.801 li
@
grestore
49.051 323.371 mo
59.012 323.371 li
59.012 333.328 li
49.051 333.328 li
cp
@
125.012 378.09 mo
134.969 378.09 li
134.969 388.051 li
125.012 388.051 li
cp
@
200.969 386.73 mo
210.93 386.73 li
210.93 396.691 li
200.969 396.691 li
cp
@
276.93 396.809 mo
286.891 396.809 li
286.891 406.77 li
276.93 406.77 li
cp
@
352.891 404.73 mo
362.852 404.73 li
362.852 414.691 li
352.891 414.691 li
cp
@
428.852 409.289 mo
438.809 409.289 li
438.809 419.25 li
428.852 419.25 li
cp
@
504.809 384.09 mo
514.77 384.09 li
514.77 394.051 li
504.809 394.051 li
cp
@
580.648 404.129 mo
590.609 404.129 li
590.609 414.09 li
580.648 414.09 li
cp
@
656.609 392.73 mo
666.57 392.73 li
666.57 402.691 li
656.609 402.691 li
cp
@
34.07 509.078 mo
41.164 509.078 li
41.164 526.168 li
34.07 526.168 li
cp
0 0 0 0 cmyk
ef
40.707 518.047 mo
40.703 518.73 40.652 519.352 40.547 519.914 cv
40.438 520.477 40.258 520.961 40.012 521.363 cv
39.758 521.77 39.43 522.082 39.031 522.301 cv
38.625 522.523 38.133 522.633 37.547 522.633 cv
36.988 522.633 36.516 522.535 36.137 522.336 cv
35.754 522.141 35.449 521.848 35.215 521.461 cv
34.98 521.074 34.813 520.602 34.719 520.035 cv
34.617 519.473 34.57 518.824 34.57 518.09 cv
34.57 517.418 34.625 516.797 34.734 516.23 cv
34.844 515.668 35.02 515.184 35.27 514.777 cv
35.512 514.375 35.836 514.062 36.242 513.836 cv
36.641 513.617 37.137 513.504 37.727 513.504 cv
38.285 513.504 38.758 513.605 39.141 513.801 cv
39.523 514.004 39.828 514.297 40.063 514.68 cv
40.293 515.07 40.461 515.543 40.559 516.105 cv
40.656 516.668 40.703 517.316 40.707 518.047 cv
cp
39.5 518.129 mo
39.496 517.687 39.48 517.289 39.453 516.937 cv
39.418 516.586 39.371 516.277 39.313 516.008 cv
39.246 515.738 39.168 515.508 39.07 515.312 cv
38.973 515.121 38.855 514.961 38.719 514.832 cv
38.578 514.707 38.418 514.613 38.246 514.555 cv
38.066 514.5 37.871 514.473 37.656 514.469 cv
37.266 514.473 36.949 514.562 36.711 514.746 cv
36.465 514.93 36.273 515.184 36.137 515.5 cv
35.996 515.82 35.902 516.191 35.852 516.621 cv
35.801 517.051 35.777 517.516 35.777 518.008 cv
35.777 518.672 35.809 519.234 35.879 519.695 cv
35.945 520.164 36.055 520.543 36.207 520.832 cv
36.352 521.129 36.543 521.34 36.773 521.469 cv
37.004 521.605 37.285 521.672 37.617 521.668 cv
37.871 521.672 38.094 521.633 38.289 521.547 cv
38.48 521.469 38.648 521.348 38.789 521.191 cv
38.93 521.039 39.043 520.855 39.137 520.641 cv
39.223 520.426 39.297 520.187 39.355 519.926 cv
39.406 519.668 39.445 519.387 39.469 519.082 cv
39.488 518.777 39.496 518.461 39.5 518.129 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
34.07 460.23 mo
41.164 460.23 li
41.164 477.32 li
34.07 477.32 li
cp
0 0 0 0 cmyk
ef
40.371 470.789 mo
40.371 471.266 40.289 471.687 40.129 472.059 cv
39.969 472.43 39.742 472.742 39.453 472.996 cv
39.156 473.25 38.809 473.445 38.406 473.574 cv
38 473.707 37.551 473.77 37.059 473.77 cv
36.781 473.77 36.52 473.75 36.277 473.711 cv
36.027 473.672 35.809 473.625 35.621 473.57 cv
35.426 473.516 35.27 473.461 35.145 473.402 cv
35.02 473.352 34.941 473.309 34.91 473.273 cv
34.875 473.242 34.852 473.211 34.84 473.184 cv
34.824 473.156 34.809 473.125 34.801 473.082 cv
34.785 473.047 34.777 472.996 34.777 472.934 cv
34.77 472.875 34.77 472.805 34.77 472.723 cv
34.77 472.648 34.773 472.578 34.781 472.516 cv
34.789 472.453 34.801 472.402 34.82 472.363 cv
34.836 472.324 34.855 472.297 34.883 472.277 cv
34.906 472.262 34.938 472.254 34.969 472.25 cv
35.016 472.254 35.086 472.281 35.18 472.336 cv
35.273 472.395 35.402 472.457 35.566 472.523 cv
35.73 472.59 35.93 472.652 36.172 472.711 cv
36.406 472.77 36.691 472.797 37.027 472.797 cv
37.328 472.797 37.609 472.762 37.867 472.687 cv
38.121 472.617 38.344 472.504 38.531 472.348 cv
38.715 472.195 38.859 472 38.965 471.762 cv
39.07 471.527 39.121 471.238 39.125 470.898 cv
39.121 470.617 39.078 470.367 38.988 470.148 cv
38.898 469.93 38.762 469.75 38.578 469.605 cv
38.391 469.465 38.156 469.359 37.875 469.285 cv
37.59 469.215 37.25 469.176 36.863 469.176 cv
36.578 469.176 36.34 469.191 36.141 469.219 cv
35.938 469.25 35.75 469.266 35.578 469.262 cv
35.449 469.266 35.355 469.234 35.305 469.172 cv
35.246 469.113 35.219 469 35.223 468.828 cv
35.223 465.215 li
35.219 465.066 35.254 464.957 35.328 464.879 cv
35.395 464.809 35.496 464.77 35.633 464.77 cv
39.563 464.77 li
39.598 464.77 39.633 464.781 39.668 464.801 cv
39.699 464.824 39.727 464.855 39.754 464.895 cv
39.773 464.937 39.789 464.988 39.805 465.051 cv
39.813 465.117 39.82 465.195 39.824 465.277 cv
39.82 465.445 39.797 465.57 39.758 465.66 cv
39.711 465.754 39.652 465.801 39.574 465.797 cv
36.402 465.797 li
36.402 468.285 li
36.555 468.266 36.711 468.254 36.875 468.246 cv
37.031 468.242 37.219 468.238 37.434 468.238 cv
37.918 468.238 38.344 468.301 38.711 468.422 cv
39.074 468.543 39.379 468.715 39.629 468.934 cv
39.871 469.16 40.059 469.426 40.184 469.738 cv
40.309 470.055 40.371 470.406 40.371 470.789 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
26.973 411.379 mo
41.164 411.379 li
41.164 428.469 li
26.973 428.469 li
cp
0 0 0 0 cmyk
ef
33.332 424.316 mo
33.328 424.406 33.32 424.477 33.309 424.535 cv
33.293 424.598 33.273 424.648 33.254 424.68 cv
33.23 424.719 33.207 424.742 33.176 424.758 cv
33.145 424.773 33.113 424.781 33.086 424.781 cv
28.449 424.781 li
28.414 424.781 28.387 424.773 28.359 424.758 cv
28.332 424.742 28.305 424.719 28.281 424.68 cv
28.254 424.648 28.234 424.598 28.223 424.535 cv
28.207 424.477 28.199 424.406 28.203 424.316 cv
28.199 424.238 28.207 424.164 28.223 424.102 cv
28.234 424.043 28.25 423.996 28.273 423.957 cv
28.289 423.922 28.316 423.891 28.348 423.867 cv
28.379 423.848 28.41 423.84 28.449 423.836 cv
30.301 423.836 li
30.301 417.09 li
28.586 418.109 li
28.496 418.16 28.426 418.187 28.379 418.195 cv
28.324 418.203 28.281 418.195 28.25 418.164 cv
28.215 418.137 28.195 418.086 28.184 418.016 cv
28.172 417.949 28.164 417.863 28.168 417.754 cv
28.164 417.68 28.168 417.613 28.18 417.555 cv
28.184 417.504 28.195 417.457 28.211 417.418 cv
28.223 417.383 28.242 417.352 28.266 417.324 cv
28.289 417.297 28.32 417.27 28.367 417.242 cv
30.41 415.93 li
30.426 415.918 30.445 415.906 30.477 415.898 cv
30.5 415.891 30.535 415.883 30.582 415.871 cv
30.621 415.863 30.672 415.855 30.727 415.852 cv
30.781 415.852 30.848 415.852 30.934 415.848 cv
31.039 415.852 31.133 415.855 31.207 415.863 cv
31.277 415.871 31.332 415.887 31.379 415.902 cv
31.418 415.922 31.445 415.941 31.461 415.965 cv
31.469 415.992 31.477 416.016 31.48 416.039 cv
31.48 423.836 li
33.086 423.836 li
33.121 423.84 33.156 423.848 33.188 423.867 cv
33.219 423.891 33.242 423.922 33.266 423.957 cv
33.281 423.996 33.297 424.043 33.313 424.102 cv
33.32 424.164 33.328 424.238 33.332 424.316 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.684 420.324 mo
40.68 421.008 40.629 421.629 40.523 422.191 cv
40.414 422.754 40.234 423.238 39.988 423.641 cv
39.734 424.047 39.406 424.359 39.008 424.578 cv
38.602 424.801 38.109 424.91 37.523 424.91 cv
36.965 424.91 36.492 424.812 36.113 424.613 cv
35.73 424.418 35.426 424.125 35.191 423.738 cv
34.957 423.352 34.789 422.879 34.695 422.312 cv
34.594 421.75 34.547 421.102 34.547 420.367 cv
34.547 419.695 34.602 419.074 34.711 418.508 cv
34.82 417.945 34.996 417.461 35.246 417.055 cv
35.488 416.652 35.813 416.34 36.219 416.113 cv
36.617 415.895 37.113 415.781 37.703 415.781 cv
38.262 415.781 38.734 415.883 39.117 416.078 cv
39.5 416.281 39.805 416.574 40.039 416.957 cv
40.27 417.348 40.438 417.82 40.535 418.383 cv
40.633 418.945 40.68 419.594 40.684 420.324 cv
cp
39.477 420.406 mo
39.473 419.965 39.457 419.566 39.43 419.215 cv
39.395 418.863 39.348 418.555 39.289 418.285 cv
39.223 418.016 39.145 417.785 39.047 417.59 cv
38.949 417.398 38.832 417.238 38.695 417.109 cv
38.555 416.984 38.395 416.891 38.223 416.832 cv
38.043 416.777 37.848 416.75 37.633 416.746 cv
37.242 416.75 36.926 416.84 36.688 417.023 cv
36.441 417.207 36.25 417.461 36.113 417.777 cv
35.973 418.098 35.879 418.469 35.828 418.898 cv
35.777 419.328 35.754 419.793 35.754 420.285 cv
35.754 420.949 35.785 421.512 35.855 421.973 cv
35.922 422.441 36.031 422.82 36.184 423.109 cv
36.328 423.406 36.52 423.617 36.75 423.746 cv
36.98 423.883 37.262 423.949 37.594 423.945 cv
37.848 423.949 38.07 423.91 38.266 423.824 cv
38.457 423.746 38.625 423.625 38.766 423.469 cv
38.906 423.316 39.02 423.133 39.113 422.918 cv
39.199 422.703 39.273 422.465 39.332 422.203 cv
39.383 421.945 39.422 421.664 39.445 421.359 cv
39.465 421.055 39.473 420.738 39.477 420.406 cv
cp
f
26.973 362.531 mo
41.164 362.531 li
41.164 379.621 li
26.973 379.621 li
cp
0 0 0 0 cmyk
ef
33.332 375.445 mo
33.328 375.535 33.32 375.605 33.309 375.664 cv
33.293 375.727 33.273 375.777 33.254 375.809 cv
33.23 375.848 33.207 375.871 33.176 375.887 cv
33.145 375.902 33.113 375.91 33.086 375.91 cv
28.449 375.91 li
28.414 375.91 28.387 375.902 28.359 375.887 cv
28.332 375.871 28.305 375.848 28.281 375.809 cv
28.254 375.777 28.234 375.727 28.223 375.664 cv
28.207 375.605 28.199 375.535 28.203 375.445 cv
28.199 375.367 28.207 375.293 28.223 375.23 cv
28.234 375.172 28.25 375.125 28.273 375.086 cv
28.289 375.051 28.316 375.02 28.348 374.996 cv
28.379 374.977 28.41 374.969 28.449 374.965 cv
30.301 374.965 li
30.301 368.219 li
28.586 369.238 li
28.496 369.289 28.426 369.316 28.379 369.324 cv
28.324 369.332 28.281 369.324 28.25 369.293 cv
28.215 369.266 28.195 369.215 28.184 369.145 cv
28.172 369.078 28.164 368.992 28.168 368.883 cv
28.164 368.809 28.168 368.742 28.18 368.684 cv
28.184 368.633 28.195 368.586 28.211 368.547 cv
28.223 368.512 28.242 368.48 28.266 368.453 cv
28.289 368.426 28.32 368.398 28.367 368.371 cv
30.41 367.059 li
30.426 367.047 30.445 367.035 30.477 367.027 cv
30.5 367.02 30.535 367.012 30.582 367 cv
30.621 366.992 30.672 366.984 30.727 366.98 cv
30.781 366.98 30.848 366.98 30.934 366.977 cv
31.039 366.98 31.133 366.984 31.207 366.992 cv
31.277 367 31.332 367.016 31.379 367.031 cv
31.418 367.051 31.445 367.07 31.461 367.094 cv
31.469 367.121 31.477 367.145 31.48 367.168 cv
31.48 374.965 li
33.086 374.965 li
33.121 374.969 33.156 374.977 33.188 374.996 cv
33.219 375.02 33.242 375.051 33.266 375.086 cv
33.281 375.125 33.297 375.172 33.313 375.23 cv
33.32 375.293 33.328 375.367 33.332 375.445 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.348 373.059 mo
40.348 373.535 40.266 373.957 40.105 374.328 cv
39.945 374.699 39.719 375.012 39.43 375.266 cv
39.133 375.52 38.785 375.715 38.383 375.844 cv
37.977 375.977 37.527 376.039 37.035 376.039 cv
36.758 376.039 36.496 376.02 36.254 375.98 cv
36.004 375.941 35.785 375.895 35.598 375.84 cv
35.402 375.785 35.246 375.73 35.121 375.672 cv
34.996 375.621 34.918 375.578 34.887 375.543 cv
34.852 375.512 34.828 375.48 34.816 375.453 cv
34.801 375.426 34.785 375.395 34.777 375.352 cv
34.762 375.316 34.754 375.266 34.754 375.203 cv
34.746 375.145 34.746 375.074 34.746 374.992 cv
34.746 374.918 34.75 374.848 34.758 374.785 cv
34.766 374.723 34.777 374.672 34.797 374.633 cv
34.813 374.594 34.832 374.566 34.859 374.547 cv
34.883 374.531 34.914 374.523 34.945 374.52 cv
34.992 374.523 35.063 374.551 35.156 374.605 cv
35.25 374.664 35.379 374.727 35.543 374.793 cv
35.707 374.859 35.906 374.922 36.148 374.98 cv
36.383 375.039 36.668 375.066 37.004 375.066 cv
37.305 375.066 37.586 375.031 37.844 374.957 cv
38.098 374.887 38.32 374.773 38.508 374.617 cv
38.691 374.465 38.836 374.27 38.941 374.031 cv
39.047 373.797 39.098 373.508 39.102 373.168 cv
39.098 372.887 39.055 372.637 38.965 372.418 cv
38.875 372.199 38.738 372.02 38.555 371.875 cv
38.367 371.734 38.133 371.629 37.852 371.555 cv
37.566 371.484 37.227 371.445 36.84 371.445 cv
36.555 371.445 36.316 371.461 36.117 371.488 cv
35.914 371.52 35.727 371.535 35.555 371.531 cv
35.426 371.535 35.332 371.504 35.281 371.441 cv
35.223 371.383 35.195 371.27 35.199 371.098 cv
35.199 367.484 li
35.195 367.336 35.23 367.227 35.305 367.148 cv
35.371 367.078 35.473 367.039 35.609 367.039 cv
39.539 367.039 li
39.574 367.039 39.609 367.051 39.645 367.07 cv
39.676 367.094 39.703 367.125 39.73 367.164 cv
39.75 367.207 39.766 367.258 39.781 367.32 cv
39.789 367.387 39.797 367.465 39.801 367.547 cv
39.797 367.715 39.773 367.84 39.734 367.93 cv
39.688 368.023 39.629 368.07 39.551 368.066 cv
36.379 368.066 li
36.379 370.555 li
36.531 370.535 36.688 370.523 36.852 370.516 cv
37.008 370.512 37.195 370.508 37.41 370.508 cv
37.895 370.508 38.32 370.57 38.688 370.691 cv
39.051 370.812 39.355 370.984 39.605 371.203 cv
39.848 371.43 40.035 371.695 40.16 372.008 cv
40.285 372.324 40.348 372.676 40.348 373.059 cv
cp
f
26.973 313.68 mo
41.164 313.68 li
41.164 330.77 li
26.973 330.77 li
cp
0 0 0 0 cmyk
ef
33.313 326.543 mo
33.309 326.629 33.305 326.703 33.293 326.766 cv
33.281 326.832 33.266 326.887 33.246 326.926 cv
33.223 326.973 33.195 327.004 33.164 327.02 cv
33.129 327.043 33.09 327.051 33.051 327.051 cv
28.148 327.051 li
28.086 327.051 28.027 327.043 27.98 327.027 cv
27.93 327.012 27.891 326.988 27.855 326.949 cv
27.82 326.918 27.793 326.863 27.781 326.793 cv
27.762 326.723 27.754 326.637 27.758 326.535 cv
27.754 326.445 27.758 326.367 27.766 326.297 cv
27.77 326.23 27.785 326.172 27.813 326.117 cv
27.836 326.066 27.867 326.012 27.902 325.957 cv
27.938 325.906 27.98 325.852 28.039 325.789 cv
29.813 323.965 li
30.223 323.547 30.551 323.172 30.801 322.836 cv
31.047 322.508 31.238 322.203 31.371 321.926 cv
31.504 321.652 31.59 321.402 31.637 321.176 cv
31.676 320.953 31.699 320.742 31.699 320.547 cv
31.699 320.352 31.664 320.168 31.598 319.988 cv
31.531 319.816 31.438 319.66 31.313 319.523 cv
31.188 319.395 31.031 319.289 30.844 319.207 cv
30.656 319.133 30.438 319.094 30.191 319.09 cv
29.902 319.094 29.645 319.133 29.418 319.207 cv
29.188 319.289 28.988 319.375 28.816 319.461 cv
28.645 319.555 28.5 319.637 28.383 319.715 cv
28.266 319.793 28.18 319.832 28.129 319.832 cv
28.094 319.832 28.063 319.824 28.039 319.805 cv
28.008 319.789 27.988 319.758 27.973 319.715 cv
27.957 319.676 27.941 319.621 27.934 319.551 cv
27.922 319.484 27.918 319.402 27.922 319.305 cv
27.918 319.238 27.922 319.18 27.93 319.129 cv
27.934 319.078 27.941 319.035 27.953 318.996 cv
27.961 318.961 27.977 318.926 27.996 318.895 cv
28.016 318.863 28.051 318.824 28.109 318.773 cv
28.16 318.727 28.254 318.66 28.391 318.578 cv
28.523 318.496 28.695 318.418 28.898 318.336 cv
29.102 318.258 29.324 318.187 29.57 318.133 cv
29.813 318.078 30.07 318.051 30.344 318.051 cv
30.77 318.051 31.145 318.113 31.469 318.234 cv
31.789 318.355 32.055 318.52 32.27 318.73 cv
32.48 318.941 32.641 319.187 32.746 319.461 cv
32.852 319.742 32.906 320.039 32.906 320.352 cv
32.906 320.641 32.879 320.922 32.828 321.199 cv
32.777 321.484 32.672 321.789 32.512 322.113 cv
32.348 322.441 32.113 322.805 31.809 323.203 cv
31.5 323.605 31.094 324.066 30.59 324.582 cv
29.184 326.051 li
33.043 326.051 li
33.074 326.055 33.109 326.066 33.148 326.082 cv
33.18 326.105 33.211 326.137 33.238 326.176 cv
33.262 326.219 33.281 326.27 33.293 326.328 cv
33.305 326.395 33.309 326.465 33.313 326.543 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.684 322.594 mo
40.68 323.277 40.629 323.898 40.523 324.461 cv
40.414 325.023 40.234 325.508 39.988 325.91 cv
39.734 326.316 39.406 326.629 39.008 326.848 cv
38.602 327.07 38.109 327.18 37.523 327.18 cv
36.965 327.18 36.492 327.082 36.113 326.883 cv
35.73 326.687 35.426 326.395 35.191 326.008 cv
34.957 325.621 34.789 325.148 34.695 324.582 cv
34.594 324.02 34.547 323.371 34.547 322.637 cv
34.547 321.965 34.602 321.344 34.711 320.777 cv
34.82 320.215 34.996 319.73 35.246 319.324 cv
35.488 318.922 35.813 318.609 36.219 318.383 cv
36.617 318.164 37.113 318.051 37.703 318.051 cv
38.262 318.051 38.734 318.152 39.117 318.348 cv
39.5 318.551 39.805 318.844 40.039 319.227 cv
40.27 319.617 40.438 320.09 40.535 320.652 cv
40.633 321.215 40.68 321.863 40.684 322.594 cv
cp
39.477 322.676 mo
39.473 322.234 39.457 321.836 39.43 321.484 cv
39.395 321.133 39.348 320.824 39.289 320.555 cv
39.223 320.285 39.145 320.055 39.047 319.859 cv
38.949 319.668 38.832 319.508 38.695 319.379 cv
38.555 319.254 38.395 319.16 38.223 319.102 cv
38.043 319.047 37.848 319.02 37.633 319.016 cv
37.242 319.02 36.926 319.109 36.688 319.293 cv
36.441 319.477 36.25 319.73 36.113 320.047 cv
35.973 320.367 35.879 320.738 35.828 321.168 cv
35.777 321.598 35.754 322.062 35.754 322.555 cv
35.754 323.219 35.785 323.781 35.855 324.242 cv
35.922 324.711 36.031 325.09 36.184 325.379 cv
36.328 325.676 36.52 325.887 36.75 326.016 cv
36.98 326.152 37.262 326.219 37.594 326.215 cv
37.848 326.219 38.07 326.18 38.266 326.094 cv
38.457 326.016 38.625 325.895 38.766 325.738 cv
38.906 325.586 39.02 325.402 39.113 325.187 cv
39.199 324.973 39.273 324.734 39.332 324.473 cv
39.383 324.215 39.422 323.934 39.445 323.629 cv
39.465 323.324 39.473 323.008 39.477 322.676 cv
cp
f
26.973 264.828 mo
41.164 264.828 li
41.164 281.922 li
26.973 281.922 li
cp
0 0 0 0 cmyk
ef
33.32 277.703 mo
33.316 277.789 33.313 277.863 33.305 277.926 cv
33.293 277.992 33.277 278.047 33.258 278.086 cv
33.234 278.133 33.203 278.164 33.172 278.18 cv
33.133 278.203 33.098 278.211 33.063 278.211 cv
28.152 278.211 li
28.086 278.211 28.027 278.203 27.98 278.187 cv
27.93 278.172 27.891 278.148 27.859 278.109 cv
27.824 278.078 27.797 278.023 27.781 277.953 cv
27.762 277.883 27.754 277.797 27.758 277.695 cv
27.754 277.605 27.758 277.527 27.77 277.457 cv
27.773 277.391 27.789 277.328 27.816 277.273 cv
27.836 277.223 27.867 277.172 27.902 277.117 cv
27.938 277.066 27.984 277.012 28.043 276.949 cv
29.82 275.121 li
30.227 274.703 30.555 274.324 30.805 273.988 cv
31.047 273.656 31.238 273.352 31.379 273.074 cv
31.512 272.805 31.602 272.555 31.645 272.328 cv
31.684 272.102 31.703 271.891 31.707 271.695 cv
31.703 271.5 31.672 271.316 31.605 271.137 cv
31.539 270.965 31.441 270.809 31.32 270.672 cv
31.191 270.543 31.035 270.437 30.848 270.355 cv
30.656 270.281 30.441 270.242 30.199 270.238 cv
29.91 270.242 29.648 270.281 29.422 270.355 cv
29.188 270.437 28.988 270.523 28.82 270.609 cv
28.645 270.703 28.5 270.785 28.387 270.863 cv
28.27 270.941 28.184 270.98 28.129 270.98 cv
28.094 270.98 28.066 270.973 28.043 270.953 cv
28.016 270.937 27.992 270.906 27.977 270.863 cv
27.957 270.824 27.945 270.77 27.938 270.699 cv
27.93 270.629 27.926 270.547 27.926 270.449 cv
27.926 270.383 27.926 270.324 27.93 270.273 cv
27.934 270.223 27.941 270.18 27.953 270.141 cv
27.965 270.109 27.98 270.074 28 270.039 cv
28.016 270.012 28.051 269.973 28.109 269.922 cv
28.16 269.875 28.258 269.809 28.395 269.723 cv
28.527 269.641 28.695 269.559 28.902 269.48 cv
29.102 269.402 29.324 269.336 29.574 269.277 cv
29.816 269.227 30.074 269.199 30.348 269.195 cv
30.773 269.199 31.152 269.262 31.477 269.379 cv
31.797 269.504 32.063 269.668 32.281 269.875 cv
32.492 270.09 32.652 270.336 32.758 270.609 cv
32.863 270.891 32.918 271.187 32.918 271.5 cv
32.918 271.789 32.891 272.07 32.84 272.352 cv
32.789 272.633 32.684 272.937 32.52 273.266 cv
32.355 273.594 32.121 273.957 31.816 274.355 cv
31.512 274.758 31.102 275.219 30.594 275.738 cv
29.188 277.207 li
33.055 277.207 li
33.086 277.211 33.121 277.219 33.16 277.238 cv
33.191 277.262 33.223 277.293 33.25 277.332 cv
33.273 277.375 33.293 277.43 33.305 277.488 cv
33.313 277.551 33.316 277.621 33.32 277.703 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.359 275.355 mo
40.359 275.836 40.277 276.258 40.117 276.625 cv
39.957 276.996 39.73 277.309 39.438 277.562 cv
39.145 277.816 38.797 278.008 38.391 278.141 cv
37.984 278.273 37.535 278.34 37.043 278.34 cv
36.766 278.34 36.504 278.32 36.258 278.281 cv
36.008 278.242 35.785 278.195 35.598 278.141 cv
35.402 278.086 35.246 278.031 35.125 277.973 cv
35 277.918 34.922 277.875 34.887 277.84 cv
34.852 277.812 34.828 277.781 34.816 277.754 cv
34.801 277.727 34.785 277.695 34.777 277.652 cv
34.762 277.617 34.754 277.566 34.754 277.504 cv
34.746 277.445 34.746 277.375 34.75 277.289 cv
34.746 277.219 34.75 277.148 34.758 277.082 cv
34.766 277.023 34.777 276.973 34.797 276.93 cv
34.813 276.895 34.832 276.867 34.859 276.844 cv
34.883 276.828 34.914 276.816 34.949 276.816 cv
34.992 276.816 35.063 276.848 35.16 276.902 cv
35.254 276.965 35.383 277.027 35.547 277.09 cv
35.707 277.16 35.91 277.223 36.152 277.277 cv
36.391 277.34 36.676 277.367 37.008 277.367 cv
37.313 277.367 37.594 277.332 37.852 277.258 cv
38.109 277.187 38.328 277.074 38.516 276.914 cv
38.695 276.762 38.84 276.566 38.949 276.328 cv
39.051 276.094 39.105 275.805 39.109 275.465 cv
39.105 275.184 39.059 274.934 38.973 274.715 cv
38.879 274.5 38.742 274.32 38.563 274.172 cv
38.375 274.031 38.141 273.922 37.859 273.848 cv
37.57 273.781 37.234 273.746 36.844 273.742 cv
36.563 273.746 36.32 273.762 36.121 273.785 cv
35.918 273.816 35.73 273.828 35.559 273.824 cv
35.43 273.828 35.34 273.797 35.285 273.734 cv
35.23 273.676 35.203 273.562 35.203 273.391 cv
35.203 269.77 li
35.203 269.621 35.238 269.508 35.309 269.434 cv
35.379 269.363 35.48 269.328 35.613 269.324 cv
39.547 269.324 li
39.578 269.328 39.613 269.34 39.652 269.355 cv
39.684 269.379 39.715 269.41 39.738 269.449 cv
39.762 269.496 39.777 269.547 39.789 269.609 cv
39.801 269.672 39.809 269.746 39.809 269.832 cv
39.809 270 39.785 270.129 39.742 270.219 cv
39.699 270.312 39.637 270.359 39.559 270.355 cv
36.383 270.355 li
36.383 272.848 li
36.531 272.828 36.691 272.812 36.855 272.809 cv
37.016 272.805 37.199 272.805 37.414 272.801 cv
37.898 272.805 38.328 272.863 38.695 272.984 cv
39.063 273.105 39.367 273.277 39.613 273.496 cv
39.855 273.719 40.039 273.988 40.168 274.305 cv
40.293 274.621 40.359 274.973 40.359 275.355 cv
cp
f
26.973 215.969 mo
41.164 215.969 li
41.164 233.059 li
26.973 233.059 li
cp
0 0 0 0 cmyk
ef
33.242 226.805 mo
33.238 227.215 33.168 227.582 33.027 227.906 cv
32.883 228.234 32.68 228.516 32.418 228.746 cv
32.152 228.98 31.824 229.156 31.438 229.281 cv
31.047 229.406 30.609 229.469 30.125 229.469 cv
29.82 229.469 29.543 229.441 29.289 229.395 cv
29.027 229.348 28.797 229.297 28.602 229.227 cv
28.398 229.164 28.234 229.094 28.102 229.023 cv
27.969 228.953 27.883 228.902 27.852 228.867 cv
27.813 228.84 27.789 228.809 27.773 228.773 cv
27.754 228.742 27.734 228.703 27.723 228.656 cv
27.707 228.613 27.699 228.559 27.691 228.488 cv
27.684 228.426 27.68 228.344 27.684 228.242 cv
27.68 228.082 27.695 227.969 27.73 227.902 cv
27.762 227.84 27.809 227.805 27.871 227.805 cv
27.914 227.805 27.996 227.844 28.121 227.914 cv
28.242 227.992 28.402 228.07 28.598 228.152 cv
28.789 228.238 29.016 228.316 29.281 228.387 cv
29.539 228.461 29.832 228.496 30.152 228.496 cv
30.461 228.496 30.73 228.457 30.969 228.379 cv
31.199 228.301 31.398 228.191 31.559 228.051 cv
31.715 227.91 31.832 227.742 31.914 227.547 cv
31.992 227.352 32.031 227.141 32.035 226.914 cv
32.031 226.664 31.98 226.437 31.883 226.234 cv
31.777 226.035 31.629 225.863 31.438 225.715 cv
31.238 225.57 31 225.457 30.715 225.379 cv
30.43 225.301 30.105 225.262 29.742 225.262 cv
28.871 225.262 li
28.828 225.262 28.793 225.254 28.758 225.238 cv
28.723 225.223 28.691 225.195 28.668 225.156 cv
28.641 225.121 28.621 225.074 28.605 225.016 cv
28.59 224.957 28.582 224.879 28.582 224.781 cv
28.582 224.695 28.586 224.625 28.602 224.566 cv
28.609 224.512 28.629 224.465 28.66 224.43 cv
28.684 224.395 28.715 224.371 28.746 224.352 cv
28.777 224.34 28.813 224.332 28.855 224.328 cv
29.629 224.328 li
29.93 224.332 30.199 224.293 30.441 224.211 cv
30.676 224.137 30.879 224.023 31.051 223.875 cv
31.215 223.73 31.344 223.555 31.434 223.352 cv
31.523 223.148 31.57 222.922 31.57 222.668 cv
31.57 222.488 31.539 222.312 31.48 222.145 cv
31.418 221.98 31.328 221.836 31.211 221.711 cv
31.09 221.586 30.938 221.488 30.758 221.418 cv
30.57 221.348 30.359 221.312 30.117 221.312 cv
29.852 221.312 29.605 221.355 29.387 221.434 cv
29.16 221.516 28.965 221.602 28.793 221.691 cv
28.617 221.785 28.473 221.871 28.359 221.949 cv
28.246 222.031 28.164 222.07 28.121 222.066 cv
28.086 222.07 28.059 222.062 28.035 222.051 cv
28.008 222.039 27.988 222.016 27.973 221.98 cv
27.957 221.949 27.945 221.902 27.938 221.836 cv
27.93 221.777 27.926 221.695 27.93 221.594 cv
27.926 221.527 27.926 221.469 27.934 221.414 cv
27.934 221.363 27.945 221.316 27.961 221.273 cv
27.977 221.238 27.992 221.203 28.012 221.168 cv
28.027 221.141 28.059 221.102 28.102 221.055 cv
28.145 221.012 28.23 220.949 28.367 220.867 cv
28.496 220.785 28.66 220.707 28.855 220.625 cv
29.047 220.547 29.27 220.477 29.527 220.422 cv
29.777 220.367 30.051 220.34 30.348 220.34 cv
30.754 220.34 31.117 220.395 31.43 220.496 cv
31.742 220.605 32 220.754 32.211 220.941 cv
32.414 221.137 32.57 221.367 32.676 221.633 cv
32.777 221.902 32.828 222.195 32.832 222.52 cv
32.828 222.801 32.793 223.062 32.723 223.297 cv
32.648 223.539 32.539 223.75 32.398 223.934 cv
32.254 224.121 32.082 224.277 31.879 224.406 cv
31.672 224.539 31.434 224.633 31.164 224.68 cv
31.164 224.691 li
31.469 224.727 31.75 224.801 32.004 224.922 cv
32.258 225.043 32.477 225.195 32.66 225.379 cv
32.84 225.562 32.98 225.777 33.086 226.02 cv
33.188 226.266 33.238 226.527 33.242 226.805 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.684 224.883 mo
40.68 225.566 40.629 226.187 40.523 226.75 cv
40.414 227.312 40.234 227.797 39.988 228.199 cv
39.734 228.605 39.406 228.918 39.008 229.137 cv
38.602 229.359 38.109 229.469 37.523 229.469 cv
36.965 229.469 36.492 229.371 36.113 229.172 cv
35.73 228.977 35.426 228.684 35.191 228.297 cv
34.957 227.91 34.789 227.437 34.695 226.871 cv
34.594 226.309 34.547 225.66 34.547 224.926 cv
34.547 224.254 34.602 223.633 34.711 223.066 cv
34.82 222.504 34.996 222.02 35.246 221.613 cv
35.488 221.211 35.813 220.898 36.219 220.672 cv
36.617 220.453 37.113 220.34 37.703 220.34 cv
38.262 220.34 38.734 220.441 39.117 220.637 cv
39.5 220.84 39.805 221.133 40.039 221.516 cv
40.27 221.906 40.438 222.379 40.535 222.941 cv
40.633 223.504 40.68 224.152 40.684 224.883 cv
cp
39.477 224.965 mo
39.473 224.523 39.457 224.125 39.43 223.773 cv
39.395 223.422 39.348 223.113 39.289 222.844 cv
39.223 222.574 39.145 222.344 39.047 222.148 cv
38.949 221.957 38.832 221.797 38.695 221.668 cv
38.555 221.543 38.395 221.449 38.223 221.391 cv
38.043 221.336 37.848 221.309 37.633 221.305 cv
37.242 221.309 36.926 221.398 36.688 221.582 cv
36.441 221.766 36.25 222.02 36.113 222.336 cv
35.973 222.656 35.879 223.027 35.828 223.457 cv
35.777 223.887 35.754 224.352 35.754 224.844 cv
35.754 225.508 35.785 226.07 35.855 226.531 cv
35.922 227 36.031 227.379 36.184 227.668 cv
36.328 227.965 36.52 228.176 36.75 228.305 cv
36.98 228.441 37.262 228.508 37.594 228.504 cv
37.848 228.508 38.07 228.469 38.266 228.383 cv
38.457 228.305 38.625 228.184 38.766 228.027 cv
38.906 227.875 39.02 227.691 39.113 227.477 cv
39.199 227.262 39.273 227.023 39.332 226.762 cv
39.383 226.504 39.422 226.223 39.445 225.918 cv
39.465 225.613 39.473 225.297 39.477 224.965 cv
cp
f
26.973 167.121 mo
41.164 167.121 li
41.164 184.211 li
26.973 184.211 li
cp
0 0 0 0 cmyk
ef
33.242 177.945 mo
33.238 178.355 33.168 178.723 33.027 179.047 cv
32.883 179.375 32.68 179.656 32.418 179.887 cv
32.152 180.121 31.824 180.297 31.438 180.422 cv
31.047 180.547 30.609 180.609 30.125 180.609 cv
29.82 180.609 29.543 180.582 29.289 180.535 cv
29.027 180.488 28.797 180.437 28.602 180.367 cv
28.398 180.305 28.234 180.234 28.102 180.164 cv
27.969 180.094 27.883 180.043 27.852 180.008 cv
27.813 179.98 27.789 179.949 27.773 179.914 cv
27.754 179.883 27.734 179.844 27.723 179.797 cv
27.707 179.754 27.699 179.699 27.691 179.629 cv
27.684 179.566 27.68 179.484 27.684 179.383 cv
27.68 179.223 27.695 179.109 27.73 179.043 cv
27.762 178.98 27.809 178.945 27.871 178.945 cv
27.914 178.945 27.996 178.984 28.121 179.055 cv
28.242 179.133 28.402 179.211 28.598 179.293 cv
28.789 179.379 29.016 179.457 29.281 179.527 cv
29.539 179.602 29.832 179.637 30.152 179.637 cv
30.461 179.637 30.73 179.598 30.969 179.52 cv
31.199 179.441 31.398 179.332 31.559 179.191 cv
31.715 179.051 31.832 178.883 31.914 178.687 cv
31.992 178.492 32.031 178.281 32.035 178.055 cv
32.031 177.805 31.98 177.578 31.883 177.375 cv
31.777 177.176 31.629 177.004 31.438 176.855 cv
31.238 176.711 31 176.598 30.715 176.52 cv
30.43 176.441 30.105 176.402 29.742 176.402 cv
28.871 176.402 li
28.828 176.402 28.793 176.395 28.758 176.379 cv
28.723 176.363 28.691 176.336 28.668 176.297 cv
28.641 176.262 28.621 176.215 28.605 176.156 cv
28.59 176.098 28.582 176.02 28.582 175.922 cv
28.582 175.836 28.586 175.766 28.602 175.707 cv
28.609 175.652 28.629 175.605 28.66 175.57 cv
28.684 175.535 28.715 175.512 28.746 175.492 cv
28.777 175.48 28.813 175.473 28.855 175.469 cv
29.629 175.469 li
29.93 175.473 30.199 175.434 30.441 175.352 cv
30.676 175.277 30.879 175.164 31.051 175.016 cv
31.215 174.871 31.344 174.695 31.434 174.492 cv
31.523 174.289 31.57 174.062 31.57 173.809 cv
31.57 173.629 31.539 173.453 31.48 173.285 cv
31.418 173.121 31.328 172.977 31.211 172.852 cv
31.09 172.727 30.938 172.629 30.758 172.559 cv
30.57 172.488 30.359 172.453 30.117 172.453 cv
29.852 172.453 29.605 172.496 29.387 172.574 cv
29.16 172.656 28.965 172.742 28.793 172.832 cv
28.617 172.926 28.473 173.012 28.359 173.09 cv
28.246 173.172 28.164 173.211 28.121 173.207 cv
28.086 173.211 28.059 173.203 28.035 173.191 cv
28.008 173.18 27.988 173.156 27.973 173.121 cv
27.957 173.09 27.945 173.043 27.938 172.977 cv
27.93 172.918 27.926 172.836 27.93 172.734 cv
27.926 172.668 27.926 172.609 27.934 172.555 cv
27.934 172.504 27.945 172.457 27.961 172.414 cv
27.977 172.379 27.992 172.344 28.012 172.309 cv
28.027 172.281 28.059 172.242 28.102 172.195 cv
28.145 172.152 28.23 172.09 28.367 172.008 cv
28.496 171.926 28.66 171.848 28.855 171.766 cv
29.047 171.687 29.27 171.617 29.527 171.562 cv
29.777 171.508 30.051 171.48 30.348 171.48 cv
30.754 171.48 31.117 171.535 31.43 171.637 cv
31.742 171.746 32 171.895 32.211 172.082 cv
32.414 172.277 32.57 172.508 32.676 172.773 cv
32.777 173.043 32.828 173.336 32.832 173.66 cv
32.828 173.941 32.793 174.203 32.723 174.437 cv
32.648 174.68 32.539 174.891 32.398 175.074 cv
32.254 175.262 32.082 175.418 31.879 175.547 cv
31.672 175.68 31.434 175.773 31.164 175.82 cv
31.164 175.832 li
31.469 175.867 31.75 175.941 32.004 176.062 cv
32.258 176.184 32.477 176.336 32.66 176.52 cv
32.84 176.703 32.98 176.918 33.086 177.16 cv
33.188 177.406 33.238 177.668 33.242 177.945 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.348 177.629 mo
40.348 178.105 40.266 178.527 40.105 178.898 cv
39.945 179.27 39.719 179.582 39.43 179.836 cv
39.133 180.09 38.785 180.285 38.383 180.414 cv
37.977 180.547 37.527 180.609 37.035 180.609 cv
36.758 180.609 36.496 180.59 36.254 180.551 cv
36.004 180.512 35.785 180.465 35.598 180.41 cv
35.402 180.355 35.246 180.301 35.121 180.242 cv
34.996 180.191 34.918 180.148 34.887 180.113 cv
34.852 180.082 34.828 180.051 34.816 180.023 cv
34.801 179.996 34.785 179.965 34.777 179.922 cv
34.762 179.887 34.754 179.836 34.754 179.773 cv
34.746 179.715 34.746 179.645 34.746 179.562 cv
34.746 179.488 34.75 179.418 34.758 179.355 cv
34.766 179.293 34.777 179.242 34.797 179.203 cv
34.813 179.164 34.832 179.137 34.859 179.117 cv
34.883 179.102 34.914 179.094 34.945 179.09 cv
34.992 179.094 35.063 179.121 35.156 179.176 cv
35.25 179.234 35.379 179.297 35.543 179.363 cv
35.707 179.43 35.906 179.492 36.148 179.551 cv
36.383 179.609 36.668 179.637 37.004 179.637 cv
37.305 179.637 37.586 179.602 37.844 179.527 cv
38.098 179.457 38.32 179.344 38.508 179.187 cv
38.691 179.035 38.836 178.84 38.941 178.602 cv
39.047 178.367 39.098 178.078 39.102 177.738 cv
39.098 177.457 39.055 177.207 38.965 176.988 cv
38.875 176.77 38.738 176.59 38.555 176.445 cv
38.367 176.305 38.133 176.199 37.852 176.125 cv
37.566 176.055 37.227 176.016 36.84 176.016 cv
36.555 176.016 36.316 176.031 36.117 176.059 cv
35.914 176.09 35.727 176.105 35.555 176.102 cv
35.426 176.105 35.332 176.074 35.281 176.012 cv
35.223 175.953 35.195 175.84 35.199 175.668 cv
35.199 172.055 li
35.195 171.906 35.23 171.797 35.305 171.719 cv
35.371 171.648 35.473 171.609 35.609 171.609 cv
39.539 171.609 li
39.574 171.609 39.609 171.621 39.645 171.641 cv
39.676 171.664 39.703 171.695 39.73 171.734 cv
39.75 171.777 39.766 171.828 39.781 171.891 cv
39.789 171.957 39.797 172.035 39.801 172.117 cv
39.797 172.285 39.773 172.41 39.734 172.5 cv
39.688 172.594 39.629 172.641 39.551 172.637 cv
36.379 172.637 li
36.379 175.125 li
36.531 175.105 36.688 175.094 36.852 175.086 cv
37.008 175.082 37.195 175.078 37.41 175.078 cv
37.895 175.078 38.32 175.141 38.688 175.262 cv
39.051 175.383 39.355 175.555 39.605 175.773 cv
39.848 176 40.035 176.266 40.16 176.578 cv
40.285 176.895 40.348 177.246 40.348 177.629 cv
cp
f
26.973 118.27 mo
41.164 118.27 li
41.164 135.36 li
26.973 135.36 li
cp
0 0 0 0 cmyk
ef
33.688 129.098 mo
33.684 129.25 33.66 129.371 33.617 129.457 cv
33.57 129.547 33.508 129.59 33.426 129.586 cv
32.426 129.586 li
32.426 131.449 li
32.426 131.488 32.414 131.52 32.398 131.543 cv
32.375 131.57 32.344 131.59 32.301 131.609 cv
32.25 131.625 32.188 131.637 32.117 131.648 cv
32.039 131.656 31.945 131.66 31.828 131.664 cv
31.711 131.66 31.613 131.656 31.543 131.648 cv
31.465 131.637 31.406 131.625 31.363 131.609 cv
31.316 131.59 31.285 131.57 31.27 131.543 cv
31.25 131.52 31.242 131.488 31.246 131.449 cv
31.246 129.586 li
27.617 129.586 li
27.559 129.59 27.516 129.582 27.48 129.566 cv
27.445 129.555 27.41 129.527 27.383 129.488 cv
27.352 129.453 27.332 129.402 27.32 129.332 cv
27.309 129.266 27.305 129.176 27.305 129.062 cv
27.305 128.98 27.305 128.902 27.313 128.832 cv
27.313 128.762 27.324 128.699 27.34 128.645 cv
27.352 128.59 27.367 128.535 27.395 128.48 cv
27.414 128.426 27.441 128.371 27.477 128.309 cv
30.637 122.922 li
30.656 122.887 30.691 122.855 30.738 122.828 cv
30.781 122.801 30.836 122.777 30.91 122.758 cv
30.977 122.742 31.063 122.73 31.168 122.719 cv
31.27 122.715 31.391 122.711 31.531 122.707 cv
31.68 122.711 31.816 122.715 31.934 122.727 cv
32.047 122.738 32.137 122.754 32.211 122.77 cv
32.277 122.789 32.332 122.812 32.371 122.844 cv
32.406 122.875 32.426 122.91 32.426 122.949 cv
32.426 128.613 li
33.426 128.613 li
33.5 128.617 33.563 128.656 33.613 128.734 cv
33.66 128.816 33.684 128.937 33.688 129.098 cv
cp
31.246 123.746 mo
31.234 123.746 li
28.383 128.613 li
31.246 128.613 li
cp
.629236 .549432 .540154 .282963 cmyk
f
40.684 127.164 mo
40.68 127.848 40.629 128.469 40.523 129.031 cv
40.414 129.594 40.234 130.078 39.988 130.48 cv
39.734 130.887 39.406 131.199 39.008 131.418 cv
38.602 131.641 38.109 131.75 37.523 131.75 cv
36.965 131.75 36.492 131.652 36.113 131.453 cv
35.73 131.258 35.426 130.965 35.191 130.578 cv
34.957 130.191 34.789 129.719 34.695 129.152 cv
34.594 128.59 34.547 127.941 34.547 127.207 cv
34.547 126.535 34.602 125.914 34.711 125.348 cv
34.82 124.785 34.996 124.301 35.246 123.895 cv
35.488 123.492 35.813 123.18 36.219 122.953 cv
36.617 122.734 37.113 122.621 37.703 122.621 cv
38.262 122.621 38.734 122.723 39.117 122.918 cv
39.5 123.121 39.805 123.414 40.039 123.797 cv
40.27 124.187 40.438 124.66 40.535 125.223 cv
40.633 125.785 40.68 126.434 40.684 127.164 cv
cp
39.477 127.246 mo
39.473 126.805 39.457 126.406 39.43 126.055 cv
39.395 125.703 39.348 125.395 39.289 125.125 cv
39.223 124.855 39.145 124.625 39.047 124.43 cv
38.949 124.238 38.832 124.078 38.695 123.949 cv
38.555 123.824 38.395 123.73 38.223 123.672 cv
38.043 123.617 37.848 123.59 37.633 123.586 cv
37.242 123.59 36.926 123.68 36.688 123.863 cv
36.441 124.047 36.25 124.301 36.113 124.617 cv
35.973 124.937 35.879 125.309 35.828 125.738 cv
35.777 126.168 35.754 126.633 35.754 127.125 cv
35.754 127.789 35.785 128.352 35.855 128.812 cv
35.922 129.281 36.031 129.66 36.184 129.949 cv
36.328 130.246 36.52 130.457 36.75 130.586 cv
36.98 130.723 37.262 130.789 37.594 130.785 cv
37.848 130.789 38.07 130.75 38.266 130.664 cv
38.457 130.586 38.625 130.465 38.766 130.309 cv
38.906 130.156 39.02 129.973 39.113 129.758 cv
39.199 129.543 39.273 129.305 39.332 129.043 cv
39.383 128.785 39.422 128.504 39.445 128.199 cv
39.465 127.895 39.473 127.578 39.477 127.246 cv
cp
f
26.973 69.422 mo
41.164 69.422 li
41.164 86.512 li
26.973 86.512 li
cp
0 0 0 0 cmyk
ef
33.688 80.227 mo
33.684 80.379 33.66 80.5 33.617 80.586 cv
33.57 80.676 33.508 80.719 33.426 80.715 cv
32.426 80.715 li
32.426 82.578 li
32.426 82.617 32.414 82.648 32.398 82.672 cv
32.375 82.699 32.344 82.719 32.301 82.738 cv
32.25 82.754 32.188 82.766 32.117 82.777 cv
32.039 82.785 31.945 82.789 31.828 82.793 cv
31.711 82.789 31.613 82.785 31.543 82.777 cv
31.465 82.766 31.406 82.754 31.363 82.738 cv
31.316 82.719 31.285 82.699 31.27 82.672 cv
31.25 82.648 31.242 82.617 31.246 82.578 cv
31.246 80.715 li
27.617 80.715 li
27.559 80.719 27.516 80.711 27.48 80.695 cv
27.445 80.684 27.41 80.656 27.383 80.617 cv
27.352 80.582 27.332 80.531 27.32 80.461 cv
27.309 80.395 27.305 80.305 27.305 80.191 cv
27.305 80.109 27.305 80.031 27.313 79.961 cv
27.313 79.891 27.324 79.828 27.34 79.773 cv
27.352 79.719 27.367 79.664 27.395 79.609 cv
27.414 79.555 27.441 79.5 27.477 79.437 cv
30.637 74.051 li
30.656 74.016 30.691 73.984 30.738 73.957 cv
30.781 73.93 30.836 73.906 30.91 73.887 cv
30.977 73.871 31.063 73.859 31.168 73.848 cv
31.27 73.844 31.391 73.84 31.531 73.836 cv
31.68 73.84 31.816 73.844 31.934 73.855 cv
32.047 73.867 32.137 73.883 32.211 73.898 cv
32.277 73.918 32.332 73.941 32.371 73.973 cv
32.406 74.004 32.426 74.039 32.426 74.078 cv
32.426 79.742 li
33.426 79.742 li
33.5 79.746 33.563 79.785 33.613 79.863 cv
33.66 79.945 33.684 80.066 33.688 80.227 cv
cp
31.246 74.875 mo
31.234 74.875 li
28.383 79.742 li
31.246 79.742 li
cp
.629236 .549432 .540154 .282963 cmyk
f
40.348 79.898 mo
40.348 80.375 40.266 80.797 40.105 81.168 cv
39.945 81.539 39.719 81.852 39.43 82.105 cv
39.133 82.359 38.785 82.555 38.383 82.684 cv
37.977 82.816 37.527 82.879 37.035 82.879 cv
36.758 82.879 36.496 82.859 36.254 82.82 cv
36.004 82.781 35.785 82.734 35.598 82.68 cv
35.402 82.625 35.246 82.57 35.121 82.512 cv
34.996 82.461 34.918 82.418 34.887 82.383 cv
34.852 82.352 34.828 82.32 34.816 82.293 cv
34.801 82.266 34.785 82.234 34.777 82.191 cv
34.762 82.156 34.754 82.105 34.754 82.043 cv
34.746 81.984 34.746 81.914 34.746 81.832 cv
34.746 81.758 34.75 81.687 34.758 81.625 cv
34.766 81.562 34.777 81.512 34.797 81.473 cv
34.813 81.434 34.832 81.406 34.859 81.387 cv
34.883 81.371 34.914 81.363 34.945 81.359 cv
34.992 81.363 35.063 81.391 35.156 81.445 cv
35.25 81.504 35.379 81.566 35.543 81.633 cv
35.707 81.699 35.906 81.762 36.148 81.82 cv
36.383 81.879 36.668 81.906 37.004 81.906 cv
37.305 81.906 37.586 81.871 37.844 81.797 cv
38.098 81.727 38.32 81.613 38.508 81.457 cv
38.691 81.305 38.836 81.109 38.941 80.871 cv
39.047 80.637 39.098 80.348 39.102 80.008 cv
39.098 79.727 39.055 79.477 38.965 79.258 cv
38.875 79.039 38.738 78.859 38.555 78.715 cv
38.367 78.574 38.133 78.469 37.852 78.395 cv
37.566 78.324 37.227 78.285 36.84 78.285 cv
36.555 78.285 36.316 78.301 36.117 78.328 cv
35.914 78.359 35.727 78.375 35.555 78.371 cv
35.426 78.375 35.332 78.344 35.281 78.281 cv
35.223 78.223 35.195 78.109 35.199 77.937 cv
35.199 74.324 li
35.195 74.176 35.23 74.066 35.305 73.988 cv
35.371 73.918 35.473 73.879 35.609 73.879 cv
39.539 73.879 li
39.574 73.879 39.609 73.891 39.645 73.91 cv
39.676 73.934 39.703 73.965 39.73 74.004 cv
39.75 74.047 39.766 74.098 39.781 74.16 cv
39.789 74.227 39.797 74.305 39.801 74.387 cv
39.797 74.555 39.773 74.68 39.734 74.77 cv
39.688 74.863 39.629 74.91 39.551 74.906 cv
36.379 74.906 li
36.379 77.395 li
36.531 77.375 36.688 77.363 36.852 77.355 cv
37.008 77.352 37.195 77.348 37.41 77.348 cv
37.895 77.348 38.32 77.41 38.688 77.531 cv
39.051 77.652 39.355 77.824 39.605 78.043 cv
39.848 78.27 40.035 78.535 40.16 78.848 cv
40.285 79.164 40.348 79.516 40.348 79.898 cv
cp
f
26.973 20.57 mo
41.164 20.57 li
41.164 37.66 li
26.973 37.66 li
cp
0 0 0 0 cmyk
ef
33.281 31.055 mo
33.281 31.535 33.199 31.957 33.039 32.324 cv
32.879 32.695 32.652 33.008 32.359 33.262 cv
32.066 33.516 31.719 33.707 31.313 33.84 cv
30.906 33.973 30.457 34.039 29.965 34.039 cv
29.688 34.039 29.426 34.02 29.18 33.98 cv
28.93 33.941 28.707 33.895 28.52 33.84 cv
28.324 33.785 28.168 33.73 28.047 33.672 cv
27.922 33.617 27.844 33.574 27.809 33.539 cv
27.773 33.512 27.75 33.48 27.738 33.453 cv
27.723 33.426 27.707 33.395 27.699 33.352 cv
27.684 33.316 27.676 33.266 27.676 33.203 cv
27.668 33.145 27.668 33.074 27.672 32.988 cv
27.668 32.918 27.672 32.848 27.68 32.781 cv
27.688 32.723 27.699 32.672 27.719 32.629 cv
27.734 32.594 27.754 32.566 27.781 32.543 cv
27.805 32.527 27.836 32.516 27.871 32.516 cv
27.914 32.516 27.984 32.547 28.082 32.602 cv
28.176 32.664 28.305 32.727 28.469 32.789 cv
28.629 32.859 28.832 32.922 29.074 32.977 cv
29.313 33.039 29.598 33.066 29.93 33.066 cv
30.234 33.066 30.516 33.031 30.773 32.957 cv
31.031 32.887 31.25 32.773 31.438 32.613 cv
31.617 32.461 31.762 32.266 31.871 32.027 cv
31.973 31.793 32.027 31.504 32.031 31.164 cv
32.027 30.883 31.98 30.633 31.895 30.414 cv
31.801 30.199 31.664 30.02 31.484 29.871 cv
31.297 29.73 31.063 29.621 30.781 29.547 cv
30.492 29.48 30.156 29.445 29.766 29.441 cv
29.484 29.445 29.242 29.461 29.043 29.484 cv
28.84 29.516 28.652 29.527 28.48 29.523 cv
28.352 29.527 28.262 29.496 28.207 29.434 cv
28.152 29.375 28.125 29.262 28.125 29.09 cv
28.125 25.469 li
28.125 25.32 28.16 25.207 28.23 25.133 cv
28.301 25.062 28.402 25.027 28.535 25.023 cv
32.469 25.023 li
32.5 25.027 32.535 25.039 32.574 25.055 cv
32.605 25.078 32.637 25.109 32.66 25.148 cv
32.684 25.195 32.699 25.246 32.711 25.309 cv
32.723 25.371 32.73 25.445 32.73 25.531 cv
32.73 25.699 32.707 25.828 32.664 25.918 cv
32.621 26.012 32.559 26.059 32.48 26.055 cv
29.305 26.055 li
29.305 28.547 li
29.453 28.527 29.613 28.512 29.777 28.508 cv
29.938 28.504 30.121 28.504 30.336 28.5 cv
30.82 28.504 31.25 28.562 31.617 28.684 cv
31.984 28.805 32.289 28.977 32.535 29.195 cv
32.777 29.418 32.961 29.687 33.09 30.004 cv
33.215 30.32 33.281 30.672 33.281 31.055 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.695 29.445 mo
40.691 30.129 40.637 30.754 40.531 31.316 cv
40.422 31.883 40.246 32.367 39.996 32.77 cv
39.746 33.176 39.418 33.488 39.02 33.707 cv
38.613 33.93 38.117 34.039 37.531 34.039 cv
36.969 34.039 36.5 33.941 36.117 33.742 cv
35.734 33.543 35.426 33.25 35.191 32.863 cv
34.957 32.477 34.789 32 34.695 31.434 cv
34.594 30.871 34.547 30.223 34.551 29.488 cv
34.547 28.812 34.602 28.191 34.715 27.625 cv
34.82 27.059 35 26.574 35.25 26.168 cv
35.496 25.766 35.82 25.449 36.223 25.227 cv
36.625 25.008 37.117 24.898 37.707 24.895 cv
38.266 24.898 38.738 25 39.125 25.195 cv
39.504 25.398 39.813 25.691 40.047 26.074 cv
40.277 26.465 40.445 26.937 40.547 27.5 cv
40.645 28.066 40.691 28.715 40.695 29.445 cv
cp
39.488 29.527 mo
39.484 29.086 39.469 28.691 39.438 28.336 cv
39.402 27.984 39.355 27.672 39.297 27.402 cv
39.23 27.133 39.148 26.898 39.055 26.703 cv
38.953 26.508 38.836 26.348 38.703 26.223 cv
38.563 26.098 38.406 26.008 38.23 25.949 cv
38.055 25.895 37.859 25.867 37.641 25.863 cv
37.25 25.867 36.934 25.957 36.691 26.137 cv
36.449 26.32 36.258 26.57 36.117 26.891 cv
35.977 27.211 35.879 27.59 35.832 28.02 cv
35.777 28.453 35.754 28.914 35.758 29.406 cv
35.754 30.074 35.789 30.641 35.859 31.102 cv
35.93 31.57 36.039 31.949 36.188 32.238 cv
36.336 32.535 36.523 32.746 36.758 32.875 cv
36.984 33.012 37.266 33.078 37.598 33.074 cv
37.852 33.078 38.078 33.035 38.273 32.949 cv
38.469 32.867 38.633 32.75 38.773 32.594 cv
38.91 32.441 39.027 32.258 39.121 32.043 cv
39.211 31.828 39.285 31.59 39.344 31.328 cv
39.395 31.07 39.434 30.789 39.457 30.48 cv
39.477 30.18 39.484 29.859 39.488 29.527 cv
cp
f
56.977 540.23 mo
56.973 540.32 56.965 540.391 56.953 540.449 cv
56.938 540.512 56.918 540.562 56.898 540.594 cv
56.875 540.633 56.852 540.656 56.82 540.672 cv
56.789 540.687 56.758 540.695 56.73 540.695 cv
52.094 540.695 li
52.059 540.695 52.031 540.687 52.004 540.672 cv
51.977 540.656 51.949 540.633 51.926 540.594 cv
51.898 540.562 51.879 540.512 51.867 540.449 cv
51.852 540.391 51.844 540.32 51.848 540.23 cv
51.844 540.152 51.852 540.078 51.867 540.016 cv
51.879 539.957 51.895 539.91 51.918 539.871 cv
51.934 539.836 51.961 539.805 51.992 539.781 cv
52.023 539.762 52.055 539.754 52.094 539.75 cv
53.945 539.75 li
53.945 533.004 li
52.23 534.023 li
52.141 534.074 52.07 534.102 52.023 534.109 cv
51.969 534.117 51.926 534.109 51.895 534.078 cv
51.859 534.051 51.84 534 51.828 533.93 cv
51.816 533.863 51.809 533.777 51.813 533.668 cv
51.809 533.594 51.813 533.527 51.824 533.469 cv
51.828 533.418 51.84 533.371 51.855 533.332 cv
51.867 533.297 51.887 533.266 51.91 533.238 cv
51.934 533.211 51.965 533.184 52.012 533.156 cv
54.055 531.844 li
54.07 531.832 54.09 531.82 54.121 531.812 cv
54.145 531.805 54.18 531.797 54.227 531.785 cv
54.266 531.777 54.316 531.77 54.371 531.766 cv
54.426 531.766 54.492 531.766 54.578 531.762 cv
54.684 531.766 54.777 531.77 54.852 531.777 cv
54.922 531.785 54.977 531.801 55.023 531.816 cv
55.063 531.836 55.09 531.855 55.105 531.879 cv
55.113 531.906 55.121 531.93 55.125 531.953 cv
55.125 539.75 li
56.73 539.75 li
56.766 539.754 56.801 539.762 56.832 539.781 cv
56.863 539.805 56.887 539.836 56.91 539.871 cv
56.926 539.91 56.941 539.957 56.957 540.016 cv
56.965 540.078 56.973 540.152 56.977 540.23 cv
cp
f
132.914 540.187 mo
132.91 540.273 132.906 540.348 132.895 540.41 cv
132.883 540.477 132.867 540.531 132.848 540.57 cv
132.824 540.617 132.797 540.648 132.766 540.664 cv
132.73 540.687 132.691 540.695 132.652 540.695 cv
127.75 540.695 li
127.688 540.695 127.629 540.687 127.582 540.672 cv
127.531 540.656 127.492 540.633 127.457 540.594 cv
127.422 540.562 127.395 540.508 127.383 540.437 cv
127.363 540.367 127.355 540.281 127.359 540.18 cv
127.355 540.09 127.359 540.012 127.367 539.941 cv
127.371 539.875 127.387 539.816 127.414 539.762 cv
127.438 539.711 127.469 539.656 127.504 539.602 cv
127.539 539.551 127.582 539.496 127.641 539.434 cv
129.414 537.609 li
129.824 537.191 130.152 536.816 130.402 536.48 cv
130.648 536.152 130.84 535.848 130.973 535.57 cv
131.105 535.297 131.191 535.047 131.238 534.82 cv
131.277 534.598 131.301 534.387 131.301 534.191 cv
131.301 533.996 131.266 533.812 131.199 533.633 cv
131.133 533.461 131.039 533.305 130.914 533.168 cv
130.789 533.039 130.633 532.934 130.445 532.852 cv
130.258 532.777 130.039 532.738 129.793 532.734 cv
129.504 532.738 129.246 532.777 129.02 532.852 cv
128.789 532.934 128.59 533.02 128.418 533.105 cv
128.246 533.199 128.102 533.281 127.984 533.359 cv
127.867 533.437 127.781 533.477 127.73 533.477 cv
127.695 533.477 127.664 533.469 127.641 533.449 cv
127.609 533.434 127.59 533.402 127.574 533.359 cv
127.559 533.32 127.543 533.266 127.535 533.195 cv
127.523 533.129 127.52 533.047 127.523 532.949 cv
127.52 532.883 127.523 532.824 127.531 532.773 cv
127.535 532.723 127.543 532.68 127.555 532.641 cv
127.563 532.605 127.578 532.57 127.598 532.539 cv
127.617 532.508 127.652 532.469 127.711 532.418 cv
127.762 532.371 127.855 532.305 127.992 532.223 cv
128.125 532.141 128.297 532.062 128.5 531.98 cv
128.703 531.902 128.926 531.832 129.172 531.777 cv
129.414 531.723 129.672 531.695 129.945 531.695 cv
130.371 531.695 130.746 531.758 131.07 531.879 cv
131.391 532 131.656 532.164 131.871 532.375 cv
132.082 532.586 132.242 532.832 132.348 533.105 cv
132.453 533.387 132.508 533.684 132.508 533.996 cv
132.508 534.285 132.48 534.566 132.43 534.844 cv
132.379 535.129 132.273 535.434 132.113 535.758 cv
131.949 536.086 131.715 536.449 131.41 536.848 cv
131.102 537.25 130.695 537.711 130.191 538.227 cv
128.785 539.695 li
132.645 539.695 li
132.676 539.699 132.711 539.711 132.75 539.727 cv
132.781 539.75 132.813 539.781 132.84 539.82 cv
132.863 539.863 132.883 539.914 132.895 539.973 cv
132.906 540.039 132.91 540.109 132.914 540.187 cv
cp
f
209.25 538.172 mo
209.246 538.324 209.223 538.445 209.18 538.531 cv
209.133 538.621 209.07 538.664 208.988 538.66 cv
207.988 538.66 li
207.988 540.523 li
207.988 540.562 207.977 540.594 207.961 540.617 cv
207.938 540.645 207.906 540.664 207.863 540.684 cv
207.813 540.699 207.75 540.711 207.68 540.723 cv
207.602 540.73 207.508 540.734 207.391 540.738 cv
207.273 540.734 207.176 540.73 207.105 540.723 cv
207.027 540.711 206.969 540.699 206.926 540.684 cv
206.879 540.664 206.848 540.645 206.832 540.617 cv
206.813 540.594 206.805 540.562 206.809 540.523 cv
206.809 538.66 li
203.18 538.66 li
203.121 538.664 203.078 538.656 203.043 538.641 cv
203.008 538.629 202.973 538.602 202.945 538.562 cv
202.914 538.527 202.895 538.477 202.883 538.406 cv
202.871 538.34 202.867 538.25 202.867 538.137 cv
202.867 538.055 202.867 537.977 202.875 537.906 cv
202.875 537.836 202.887 537.773 202.902 537.719 cv
202.914 537.664 202.93 537.609 202.957 537.555 cv
202.977 537.5 203.004 537.445 203.039 537.383 cv
206.199 531.996 li
206.219 531.961 206.254 531.93 206.301 531.902 cv
206.344 531.875 206.398 531.852 206.473 531.832 cv
206.539 531.816 206.625 531.805 206.73 531.793 cv
206.832 531.789 206.953 531.785 207.094 531.781 cv
207.242 531.785 207.379 531.789 207.496 531.801 cv
207.609 531.812 207.699 531.828 207.773 531.844 cv
207.84 531.863 207.895 531.887 207.934 531.918 cv
207.969 531.949 207.988 531.984 207.988 532.023 cv
207.988 537.687 li
208.988 537.687 li
209.063 537.691 209.125 537.73 209.176 537.809 cv
209.223 537.891 209.246 538.012 209.25 538.172 cv
cp
206.809 532.82 mo
206.797 532.82 li
203.945 537.687 li
206.809 537.687 li
cp
f
285.063 537.824 mo
285.063 538.215 285 538.594 284.883 538.953 cv
284.758 539.32 284.574 539.637 284.332 539.91 cv
284.082 540.187 283.77 540.41 283.395 540.574 cv
283.012 540.742 282.566 540.824 282.051 540.824 cv
281.68 540.824 281.352 540.781 281.07 540.687 cv
280.785 540.602 280.539 540.469 280.328 540.297 cv
280.117 540.129 279.941 539.922 279.805 539.676 cv
279.664 539.43 279.551 539.148 279.469 538.832 cv
279.383 538.52 279.324 538.176 279.289 537.797 cv
279.25 537.426 279.23 537.023 279.234 536.59 cv
279.23 536.211 279.25 535.828 279.293 535.437 cv
279.332 535.055 279.406 534.68 279.512 534.312 cv
279.617 533.953 279.762 533.613 279.941 533.297 cv
280.121 532.98 280.348 532.703 280.621 532.469 cv
280.895 532.234 281.219 532.047 281.598 531.906 cv
281.977 531.77 282.418 531.703 282.922 531.699 cv
283.09 531.703 283.262 531.711 283.434 531.73 cv
283.605 531.754 283.766 531.785 283.914 531.816 cv
284.063 531.855 284.184 531.891 284.285 531.93 cv
284.383 531.969 284.449 532.004 284.484 532.027 cv
284.512 532.055 284.535 532.082 284.555 532.109 cv
284.57 532.141 284.586 532.172 284.594 532.207 cv
284.602 532.242 284.605 532.281 284.613 532.324 cv
284.613 532.367 284.617 532.422 284.621 532.484 cv
284.617 532.57 284.617 532.641 284.617 532.695 cv
284.613 532.758 284.602 532.805 284.59 532.84 cv
284.57 532.879 284.551 532.906 284.527 532.922 cv
284.5 532.941 284.469 532.949 284.43 532.949 cv
284.379 532.949 284.309 532.934 284.223 532.902 cv
284.133 532.871 284.027 532.836 283.906 532.793 cv
283.781 532.758 283.633 532.723 283.457 532.687 cv
283.281 532.66 283.078 532.645 282.848 532.641 cv
282.418 532.645 282.051 532.73 281.746 532.902 cv
281.441 533.074 281.191 533.309 280.996 533.602 cv
280.801 533.895 280.656 534.234 280.566 534.617 cv
280.469 535.008 280.414 535.41 280.406 535.828 cv
280.523 535.762 280.66 535.695 280.809 535.625 cv
280.957 535.559 281.117 535.496 281.293 535.437 cv
281.469 535.387 281.656 535.34 281.852 535.305 cv
282.047 535.273 282.258 535.258 282.484 535.254 cv
282.961 535.258 283.363 535.324 283.695 535.449 cv
284.023 535.582 284.289 535.762 284.496 535.992 cv
284.695 536.223 284.84 536.492 284.93 536.805 cv
285.016 537.117 285.063 537.457 285.063 537.824 cv
cp
283.867 537.934 mo
283.867 537.672 283.84 537.43 283.789 537.211 cv
283.734 536.996 283.645 536.812 283.523 536.656 cv
283.398 536.508 283.234 536.391 283.031 536.309 cv
282.82 536.227 282.566 536.184 282.27 536.184 cv
282.098 536.184 281.93 536.199 281.762 536.23 cv
281.59 536.262 281.426 536.305 281.27 536.352 cv
281.109 536.406 280.961 536.469 280.82 536.539 cv
280.676 536.613 280.543 536.687 280.426 536.766 cv
280.422 537.359 280.461 537.855 280.539 538.25 cv
280.613 538.648 280.723 538.965 280.867 539.203 cv
281.012 539.445 281.191 539.617 281.406 539.719 cv
281.621 539.824 281.871 539.875 282.16 539.871 cv
282.449 539.875 282.703 539.82 282.918 539.707 cv
283.133 539.602 283.309 539.453 283.453 539.266 cv
283.594 539.082 283.699 538.875 283.766 538.645 cv
283.832 538.414 283.867 538.18 283.867 537.934 cv
cp
f
361 538.418 mo
361 538.805 360.93 539.148 360.793 539.445 cv
360.656 539.75 360.461 540 360.203 540.203 cv
359.945 540.41 359.625 540.566 359.246 540.668 cv
358.863 540.773 358.43 540.824 357.945 540.824 cv
357.484 540.824 357.074 540.777 356.715 540.684 cv
356.352 540.59 356.047 540.449 355.797 540.258 cv
355.547 540.074 355.355 539.844 355.223 539.566 cv
355.09 539.293 355.023 538.98 355.023 538.625 cv
355.023 538.352 355.066 538.094 355.16 537.859 cv
355.246 537.625 355.379 537.41 355.555 537.215 cv
355.723 537.02 355.934 536.836 356.188 536.66 cv
356.438 536.492 356.723 536.328 357.039 536.172 cv
356.766 536.031 356.523 535.883 356.313 535.723 cv
356.102 535.566 355.922 535.395 355.777 535.207 cv
355.629 535.023 355.52 534.828 355.445 534.617 cv
355.367 534.41 355.328 534.18 355.332 533.93 cv
355.328 533.621 355.383 533.328 355.5 533.055 cv
355.609 532.785 355.781 532.551 356.008 532.348 cv
356.234 532.148 356.52 531.988 356.871 531.871 cv
357.215 531.754 357.625 531.695 358.094 531.695 cv
358.539 531.695 358.926 531.75 359.254 531.855 cv
359.582 531.965 359.852 532.109 360.063 532.293 cv
360.273 532.48 360.43 532.699 360.535 532.949 cv
360.633 533.199 360.684 533.469 360.688 533.758 cv
360.684 533.992 360.645 534.219 360.574 534.43 cv
360.496 534.648 360.387 534.852 360.238 535.039 cv
360.09 535.234 359.91 535.414 359.699 535.578 cv
359.488 535.75 359.246 535.906 358.973 536.047 cv
359.293 536.211 359.578 536.375 359.836 536.543 cv
360.086 536.711 360.301 536.891 360.477 537.086 cv
360.645 537.281 360.773 537.488 360.867 537.703 cv
360.953 537.922 361 538.16 361 538.418 cv
cp
359.52 533.867 mo
359.516 533.68 359.484 533.504 359.418 533.348 cv
359.352 533.191 359.254 533.059 359.129 532.949 cv
359 532.84 358.84 532.758 358.652 532.699 cv
358.457 532.645 358.242 532.617 358.004 532.613 cv
357.508 532.617 357.133 532.727 356.883 532.949 cv
356.625 533.176 356.5 533.484 356.504 533.867 cv
356.5 534.047 356.531 534.211 356.594 534.363 cv
356.656 534.52 356.75 534.664 356.883 534.801 cv
357.008 534.937 357.172 535.07 357.375 535.199 cv
357.57 535.332 357.809 535.469 358.086 535.609 cv
358.547 535.375 358.902 535.113 359.148 534.82 cv
359.395 534.535 359.516 534.219 359.52 533.867 cv
cp
359.809 538.543 mo
359.805 538.336 359.766 538.145 359.691 537.973 cv
359.609 537.805 359.492 537.645 359.336 537.492 cv
359.18 537.344 358.98 537.199 358.746 537.059 cv
358.508 536.922 358.238 536.777 357.93 536.625 cv
357.641 536.77 357.387 536.91 357.172 537.051 cv
356.953 537.191 356.773 537.34 356.637 537.488 cv
356.496 537.645 356.391 537.801 356.32 537.965 cv
356.246 538.133 356.211 538.316 356.215 538.516 cv
356.211 538.961 356.363 539.305 356.672 539.543 cv
356.973 539.789 357.426 539.91 358.031 539.906 cv
358.613 539.91 359.059 539.789 359.359 539.539 cv
359.656 539.297 359.805 538.965 359.809 538.543 cv
cp
f
433.215 540.23 mo
433.211 540.32 433.203 540.391 433.191 540.449 cv
433.176 540.512 433.156 540.562 433.137 540.594 cv
433.113 540.633 433.09 540.656 433.059 540.672 cv
433.027 540.687 432.996 540.695 432.969 540.695 cv
428.332 540.695 li
428.297 540.695 428.27 540.687 428.242 540.672 cv
428.215 540.656 428.188 540.633 428.164 540.594 cv
428.137 540.562 428.117 540.512 428.105 540.449 cv
428.09 540.391 428.082 540.32 428.086 540.23 cv
428.082 540.152 428.09 540.078 428.105 540.016 cv
428.117 539.957 428.133 539.91 428.156 539.871 cv
428.172 539.836 428.199 539.805 428.23 539.781 cv
428.262 539.762 428.293 539.754 428.332 539.75 cv
430.184 539.75 li
430.184 533.004 li
428.469 534.023 li
428.379 534.074 428.309 534.102 428.262 534.109 cv
428.207 534.117 428.164 534.109 428.133 534.078 cv
428.098 534.051 428.078 534 428.066 533.93 cv
428.055 533.863 428.047 533.777 428.051 533.668 cv
428.047 533.594 428.051 533.527 428.063 533.469 cv
428.066 533.418 428.078 533.371 428.094 533.332 cv
428.105 533.297 428.125 533.266 428.148 533.238 cv
428.172 533.211 428.203 533.184 428.25 533.156 cv
430.293 531.844 li
430.309 531.832 430.328 531.82 430.359 531.812 cv
430.383 531.805 430.418 531.797 430.465 531.785 cv
430.504 531.777 430.555 531.77 430.609 531.766 cv
430.664 531.766 430.73 531.766 430.816 531.762 cv
430.922 531.766 431.016 531.77 431.09 531.777 cv
431.16 531.785 431.215 531.801 431.262 531.816 cv
431.301 531.836 431.328 531.855 431.344 531.879 cv
431.352 531.906 431.359 531.93 431.363 531.953 cv
431.363 539.75 li
432.969 539.75 li
433.004 539.754 433.039 539.762 433.07 539.781 cv
433.102 539.805 433.125 539.836 433.148 539.871 cv
433.164 539.91 433.18 539.957 433.195 540.016 cv
433.203 540.078 433.211 540.152 433.215 540.23 cv
cp
f
440.57 536.238 mo
440.566 536.922 440.516 537.543 440.41 538.105 cv
440.301 538.668 440.121 539.152 439.875 539.555 cv
439.621 539.961 439.293 540.273 438.895 540.492 cv
438.488 540.715 437.996 540.824 437.41 540.824 cv
436.852 540.824 436.379 540.727 436 540.527 cv
435.617 540.332 435.313 540.039 435.078 539.652 cv
434.844 539.266 434.676 538.793 434.582 538.227 cv
434.48 537.664 434.434 537.016 434.434 536.281 cv
434.434 535.609 434.488 534.988 434.598 534.422 cv
434.707 533.859 434.883 533.375 435.133 532.969 cv
435.375 532.566 435.699 532.254 436.105 532.027 cv
436.504 531.809 437 531.695 437.59 531.695 cv
438.148 531.695 438.621 531.797 439.004 531.992 cv
439.387 532.195 439.691 532.488 439.926 532.871 cv
440.156 533.262 440.324 533.734 440.422 534.297 cv
440.52 534.859 440.566 535.508 440.57 536.238 cv
cp
439.363 536.32 mo
439.359 535.879 439.344 535.48 439.316 535.129 cv
439.281 534.777 439.234 534.469 439.176 534.199 cv
439.109 533.93 439.031 533.699 438.934 533.504 cv
438.836 533.312 438.719 533.152 438.582 533.023 cv
438.441 532.898 438.281 532.805 438.109 532.746 cv
437.93 532.691 437.734 532.664 437.52 532.66 cv
437.129 532.664 436.813 532.754 436.574 532.937 cv
436.328 533.121 436.137 533.375 436 533.691 cv
435.859 534.012 435.766 534.383 435.715 534.812 cv
435.664 535.242 435.641 535.707 435.641 536.199 cv
435.641 536.863 435.672 537.426 435.742 537.887 cv
435.809 538.355 435.918 538.734 436.07 539.023 cv
436.215 539.32 436.406 539.531 436.637 539.66 cv
436.867 539.797 437.148 539.863 437.48 539.859 cv
437.734 539.863 437.957 539.824 438.152 539.738 cv
438.344 539.66 438.512 539.539 438.652 539.383 cv
438.793 539.23 438.906 539.047 439 538.832 cv
439.086 538.617 439.16 538.379 439.219 538.117 cv
439.27 537.859 439.309 537.578 439.332 537.273 cv
439.352 536.969 439.359 536.652 439.363 536.32 cv
cp
f
509.176 540.23 mo
509.172 540.32 509.164 540.391 509.152 540.449 cv
509.137 540.512 509.117 540.562 509.098 540.594 cv
509.074 540.633 509.051 540.656 509.02 540.672 cv
508.988 540.687 508.957 540.695 508.93 540.695 cv
504.293 540.695 li
504.258 540.695 504.23 540.687 504.203 540.672 cv
504.176 540.656 504.148 540.633 504.125 540.594 cv
504.098 540.562 504.078 540.512 504.066 540.449 cv
504.051 540.391 504.043 540.32 504.047 540.23 cv
504.043 540.152 504.051 540.078 504.066 540.016 cv
504.078 539.957 504.094 539.91 504.117 539.871 cv
504.133 539.836 504.16 539.805 504.191 539.781 cv
504.223 539.762 504.254 539.754 504.293 539.75 cv
506.145 539.75 li
506.145 533.004 li
504.43 534.023 li
504.34 534.074 504.27 534.102 504.223 534.109 cv
504.168 534.117 504.125 534.109 504.094 534.078 cv
504.059 534.051 504.039 534 504.027 533.93 cv
504.016 533.863 504.008 533.777 504.012 533.668 cv
504.008 533.594 504.012 533.527 504.023 533.469 cv
504.027 533.418 504.039 533.371 504.055 533.332 cv
504.066 533.297 504.086 533.266 504.109 533.238 cv
504.133 533.211 504.164 533.184 504.211 533.156 cv
506.254 531.844 li
506.27 531.832 506.289 531.82 506.32 531.812 cv
506.344 531.805 506.379 531.797 506.426 531.785 cv
506.465 531.777 506.516 531.77 506.57 531.766 cv
506.625 531.766 506.691 531.766 506.777 531.762 cv
506.883 531.766 506.977 531.77 507.051 531.777 cv
507.121 531.785 507.176 531.801 507.223 531.816 cv
507.262 531.836 507.289 531.855 507.305 531.879 cv
507.313 531.906 507.32 531.93 507.324 531.953 cv
507.324 539.75 li
508.93 539.75 li
508.965 539.754 509 539.762 509.031 539.781 cv
509.063 539.805 509.086 539.836 509.109 539.871 cv
509.125 539.91 509.141 539.957 509.156 540.016 cv
509.164 540.078 509.172 540.152 509.176 540.23 cv
cp
f
516.234 540.187 mo
516.23 540.273 516.227 540.348 516.215 540.41 cv
516.203 540.477 516.188 540.531 516.168 540.57 cv
516.145 540.617 516.117 540.648 516.086 540.664 cv
516.051 540.687 516.012 540.695 515.973 540.695 cv
511.07 540.695 li
511.008 540.695 510.949 540.687 510.902 540.672 cv
510.852 540.656 510.813 540.633 510.777 540.594 cv
510.742 540.562 510.715 540.508 510.703 540.437 cv
510.684 540.367 510.676 540.281 510.68 540.18 cv
510.676 540.09 510.68 540.012 510.688 539.941 cv
510.691 539.875 510.707 539.816 510.734 539.762 cv
510.758 539.711 510.789 539.656 510.824 539.602 cv
510.859 539.551 510.902 539.496 510.961 539.434 cv
512.734 537.609 li
513.145 537.191 513.473 536.816 513.723 536.48 cv
513.969 536.152 514.16 535.848 514.293 535.57 cv
514.426 535.297 514.512 535.047 514.559 534.82 cv
514.598 534.598 514.621 534.387 514.621 534.191 cv
514.621 533.996 514.586 533.812 514.52 533.633 cv
514.453 533.461 514.359 533.305 514.234 533.168 cv
514.109 533.039 513.953 532.934 513.766 532.852 cv
513.578 532.777 513.359 532.738 513.113 532.734 cv
512.824 532.738 512.566 532.777 512.34 532.852 cv
512.109 532.934 511.91 533.02 511.738 533.105 cv
511.566 533.199 511.422 533.281 511.305 533.359 cv
511.188 533.437 511.102 533.477 511.051 533.477 cv
511.016 533.477 510.984 533.469 510.961 533.449 cv
510.93 533.434 510.91 533.402 510.895 533.359 cv
510.879 533.32 510.863 533.266 510.855 533.195 cv
510.844 533.129 510.84 533.047 510.844 532.949 cv
510.84 532.883 510.844 532.824 510.852 532.773 cv
510.855 532.723 510.863 532.68 510.875 532.641 cv
510.883 532.605 510.898 532.57 510.918 532.539 cv
510.938 532.508 510.973 532.469 511.031 532.418 cv
511.082 532.371 511.176 532.305 511.313 532.223 cv
511.445 532.141 511.617 532.062 511.82 531.98 cv
512.023 531.902 512.246 531.832 512.492 531.777 cv
512.734 531.723 512.992 531.695 513.266 531.695 cv
513.691 531.695 514.066 531.758 514.391 531.879 cv
514.711 532 514.977 532.164 515.191 532.375 cv
515.402 532.586 515.563 532.832 515.668 533.105 cv
515.773 533.387 515.828 533.684 515.828 533.996 cv
515.828 534.285 515.801 534.566 515.75 534.844 cv
515.699 535.129 515.594 535.434 515.434 535.758 cv
515.27 536.086 515.035 536.449 514.73 536.848 cv
514.422 537.25 514.016 537.711 513.512 538.227 cv
512.105 539.695 li
515.965 539.695 li
515.996 539.699 516.031 539.711 516.07 539.727 cv
516.102 539.75 516.133 539.781 516.16 539.82 cv
516.184 539.863 516.203 539.914 516.215 539.973 cv
516.227 540.039 516.23 540.109 516.234 540.187 cv
cp
f
585.137 540.23 mo
585.133 540.32 585.125 540.391 585.113 540.449 cv
585.098 540.512 585.078 540.562 585.059 540.594 cv
585.035 540.633 585.012 540.656 584.98 540.672 cv
584.949 540.687 584.918 540.695 584.891 540.695 cv
580.254 540.695 li
580.219 540.695 580.191 540.687 580.164 540.672 cv
580.137 540.656 580.109 540.633 580.086 540.594 cv
580.059 540.562 580.039 540.512 580.027 540.449 cv
580.012 540.391 580.004 540.32 580.008 540.23 cv
580.004 540.152 580.012 540.078 580.027 540.016 cv
580.039 539.957 580.055 539.91 580.078 539.871 cv
580.094 539.836 580.121 539.805 580.152 539.781 cv
580.184 539.762 580.215 539.754 580.254 539.75 cv
582.105 539.75 li
582.105 533.004 li
580.391 534.023 li
580.301 534.074 580.23 534.102 580.184 534.109 cv
580.129 534.117 580.086 534.109 580.055 534.078 cv
580.02 534.051 580 534 579.988 533.93 cv
579.977 533.863 579.969 533.777 579.973 533.668 cv
579.969 533.594 579.973 533.527 579.984 533.469 cv
579.988 533.418 580 533.371 580.016 533.332 cv
580.027 533.297 580.047 533.266 580.07 533.238 cv
580.094 533.211 580.125 533.184 580.172 533.156 cv
582.215 531.844 li
582.23 531.832 582.25 531.82 582.281 531.812 cv
582.305 531.805 582.34 531.797 582.387 531.785 cv
582.426 531.777 582.477 531.77 582.531 531.766 cv
582.586 531.766 582.652 531.766 582.738 531.762 cv
582.844 531.766 582.938 531.77 583.012 531.777 cv
583.082 531.785 583.137 531.801 583.184 531.816 cv
583.223 531.836 583.25 531.855 583.266 531.879 cv
583.273 531.906 583.281 531.93 583.285 531.953 cv
583.285 539.75 li
584.891 539.75 li
584.926 539.754 584.961 539.762 584.992 539.781 cv
585.023 539.805 585.047 539.836 585.07 539.871 cv
585.086 539.91 585.102 539.957 585.117 540.016 cv
585.125 540.078 585.133 540.152 585.137 540.23 cv
cp
f
592.57 538.172 mo
592.566 538.324 592.543 538.445 592.5 538.531 cv
592.453 538.621 592.391 538.664 592.309 538.66 cv
591.309 538.66 li
591.309 540.523 li
591.309 540.562 591.297 540.594 591.281 540.617 cv
591.258 540.645 591.227 540.664 591.184 540.684 cv
591.133 540.699 591.07 540.711 591 540.723 cv
590.922 540.73 590.828 540.734 590.711 540.738 cv
590.594 540.734 590.496 540.73 590.426 540.723 cv
590.348 540.711 590.289 540.699 590.246 540.684 cv
590.199 540.664 590.168 540.645 590.152 540.617 cv
590.133 540.594 590.125 540.562 590.129 540.523 cv
590.129 538.66 li
586.5 538.66 li
586.441 538.664 586.398 538.656 586.363 538.641 cv
586.328 538.629 586.293 538.602 586.266 538.562 cv
586.234 538.527 586.215 538.477 586.203 538.406 cv
586.191 538.34 586.188 538.25 586.188 538.137 cv
586.188 538.055 586.188 537.977 586.195 537.906 cv
586.195 537.836 586.207 537.773 586.223 537.719 cv
586.234 537.664 586.25 537.609 586.277 537.555 cv
586.297 537.5 586.324 537.445 586.359 537.383 cv
589.52 531.996 li
589.539 531.961 589.574 531.93 589.621 531.902 cv
589.664 531.875 589.719 531.852 589.793 531.832 cv
589.859 531.816 589.945 531.805 590.051 531.793 cv
590.152 531.789 590.273 531.785 590.414 531.781 cv
590.563 531.785 590.699 531.789 590.816 531.801 cv
590.93 531.812 591.02 531.828 591.094 531.844 cv
591.16 531.863 591.215 531.887 591.254 531.918 cv
591.289 531.949 591.309 531.984 591.309 532.023 cv
591.309 537.687 li
592.309 537.687 li
592.383 537.691 592.445 537.73 592.496 537.809 cv
592.543 537.891 592.566 538.012 592.57 538.172 cv
cp
590.129 532.82 mo
590.117 532.82 li
587.266 537.687 li
590.129 537.687 li
cp
f
661.094 540.23 mo
661.09 540.32 661.082 540.391 661.07 540.449 cv
661.055 540.512 661.035 540.562 661.016 540.594 cv
660.992 540.633 660.969 540.656 660.938 540.672 cv
660.906 540.687 660.875 540.695 660.848 540.695 cv
656.211 540.695 li
656.176 540.695 656.148 540.687 656.121 540.672 cv
656.094 540.656 656.066 540.633 656.043 540.594 cv
656.016 540.562 655.996 540.512 655.984 540.449 cv
655.969 540.391 655.961 540.32 655.965 540.23 cv
655.961 540.152 655.969 540.078 655.984 540.016 cv
655.996 539.957 656.012 539.91 656.035 539.871 cv
656.051 539.836 656.078 539.805 656.109 539.781 cv
656.141 539.762 656.172 539.754 656.211 539.75 cv
658.063 539.75 li
658.063 533.004 li
656.348 534.023 li
656.258 534.074 656.188 534.102 656.141 534.109 cv
656.086 534.117 656.043 534.109 656.012 534.078 cv
655.977 534.051 655.957 534 655.945 533.93 cv
655.934 533.863 655.926 533.777 655.93 533.668 cv
655.926 533.594 655.93 533.527 655.941 533.469 cv
655.945 533.418 655.957 533.371 655.973 533.332 cv
655.984 533.297 656.004 533.266 656.027 533.238 cv
656.051 533.211 656.082 533.184 656.129 533.156 cv
658.172 531.844 li
658.188 531.832 658.207 531.82 658.238 531.812 cv
658.262 531.805 658.297 531.797 658.344 531.785 cv
658.383 531.777 658.434 531.77 658.488 531.766 cv
658.543 531.766 658.609 531.766 658.695 531.762 cv
658.801 531.766 658.895 531.77 658.969 531.777 cv
659.039 531.785 659.094 531.801 659.141 531.816 cv
659.18 531.836 659.207 531.855 659.223 531.879 cv
659.23 531.906 659.238 531.93 659.242 531.953 cv
659.242 539.75 li
660.848 539.75 li
660.883 539.754 660.918 539.762 660.949 539.781 cv
660.98 539.805 661.004 539.836 661.027 539.871 cv
661.043 539.91 661.059 539.957 661.074 540.016 cv
661.082 540.078 661.09 540.152 661.094 540.23 cv
cp
f
668.383 537.824 mo
668.383 538.215 668.32 538.594 668.203 538.953 cv
668.078 539.32 667.895 539.637 667.652 539.91 cv
667.402 540.187 667.09 540.41 666.715 540.574 cv
666.332 540.742 665.887 540.824 665.371 540.824 cv
665 540.824 664.672 540.781 664.391 540.687 cv
664.105 540.602 663.859 540.469 663.648 540.297 cv
663.438 540.129 663.262 539.922 663.125 539.676 cv
662.984 539.43 662.871 539.148 662.789 538.832 cv
662.703 538.52 662.645 538.176 662.609 537.797 cv
662.57 537.426 662.551 537.023 662.555 536.59 cv
662.551 536.211 662.57 535.828 662.613 535.437 cv
662.652 535.055 662.727 534.68 662.832 534.312 cv
662.938 533.953 663.082 533.613 663.262 533.297 cv
663.441 532.98 663.668 532.703 663.941 532.469 cv
664.215 532.234 664.539 532.047 664.918 531.906 cv
665.297 531.77 665.738 531.703 666.242 531.699 cv
666.41 531.703 666.582 531.711 666.754 531.73 cv
666.926 531.754 667.086 531.785 667.234 531.816 cv
667.383 531.855 667.504 531.891 667.605 531.93 cv
667.703 531.969 667.77 532.004 667.805 532.027 cv
667.832 532.055 667.855 532.082 667.875 532.109 cv
667.891 532.141 667.906 532.172 667.914 532.207 cv
667.922 532.242 667.926 532.281 667.934 532.324 cv
667.934 532.367 667.938 532.422 667.941 532.484 cv
667.938 532.57 667.938 532.641 667.938 532.695 cv
667.934 532.758 667.922 532.805 667.91 532.84 cv
667.891 532.879 667.871 532.906 667.848 532.922 cv
667.82 532.941 667.789 532.949 667.75 532.949 cv
667.699 532.949 667.629 532.934 667.543 532.902 cv
667.453 532.871 667.348 532.836 667.227 532.793 cv
667.102 532.758 666.953 532.723 666.777 532.687 cv
666.602 532.66 666.398 532.645 666.168 532.641 cv
665.738 532.645 665.371 532.73 665.066 532.902 cv
664.762 533.074 664.512 533.309 664.316 533.602 cv
664.121 533.895 663.977 534.234 663.887 534.617 cv
663.789 535.008 663.734 535.41 663.727 535.828 cv
663.844 535.762 663.98 535.695 664.129 535.625 cv
664.277 535.559 664.438 535.496 664.613 535.437 cv
664.789 535.387 664.977 535.34 665.172 535.305 cv
665.367 535.273 665.578 535.258 665.805 535.254 cv
666.281 535.258 666.684 535.324 667.016 535.449 cv
667.344 535.582 667.609 535.762 667.816 535.992 cv
668.016 536.223 668.16 536.492 668.25 536.805 cv
668.336 537.117 668.383 537.457 668.383 537.824 cv
cp
667.188 537.934 mo
667.188 537.672 667.16 537.43 667.109 537.211 cv
667.055 536.996 666.965 536.812 666.844 536.656 cv
666.719 536.508 666.555 536.391 666.352 536.309 cv
666.141 536.227 665.887 536.184 665.59 536.184 cv
665.418 536.184 665.25 536.199 665.082 536.23 cv
664.91 536.262 664.746 536.305 664.59 536.352 cv
664.43 536.406 664.281 536.469 664.141 536.539 cv
663.996 536.613 663.863 536.687 663.746 536.766 cv
663.742 537.359 663.781 537.855 663.859 538.25 cv
663.934 538.648 664.043 538.965 664.188 539.203 cv
664.332 539.445 664.512 539.617 664.727 539.719 cv
664.941 539.824 665.191 539.875 665.48 539.871 cv
665.77 539.875 666.023 539.82 666.238 539.707 cv
666.453 539.602 666.629 539.453 666.773 539.266 cv
666.914 539.082 667.02 538.875 667.086 538.645 cv
667.152 538.414 667.188 538.18 667.188 537.934 cv
cp
f
16.605 359.238 mo
16.703 359.242 16.785 359.246 16.852 359.254 cv
16.926 359.266 16.984 359.285 17.027 359.309 cv
17.078 359.336 17.113 359.367 17.129 359.398 cv
17.152 359.437 17.16 359.473 17.16 359.512 cv
17.16 364.352 li
17.16 364.473 17.121 364.586 17.039 364.691 cv
16.961 364.801 16.82 364.855 16.613 364.852 cv
7.621 364.852 li
7.418 364.855 7.277 364.801 7.195 364.691 cv
7.117 364.586 7.078 364.473 7.074 364.352 cv
7.074 359.566 li
7.078 359.527 7.086 359.488 7.105 359.453 cv
7.129 359.422 7.164 359.395 7.207 359.371 cv
7.258 359.352 7.316 359.336 7.383 359.32 cv
7.457 359.309 7.543 359.301 7.645 359.301 cv
7.738 359.301 7.82 359.309 7.891 359.32 cv
7.961 359.336 8.02 359.352 8.063 359.371 cv
8.109 359.395 8.141 359.422 8.16 359.453 cv
8.184 359.488 8.195 359.527 8.191 359.566 cv
8.191 363.512 li
11.355 363.512 li
11.355 360.129 li
11.359 360.09 11.371 360.051 11.391 360.016 cv
11.418 359.984 11.449 359.957 11.488 359.93 cv
11.531 359.91 11.59 359.895 11.66 359.879 cv
11.734 359.871 11.82 359.863 11.914 359.863 cv
12.012 359.863 12.09 359.871 12.156 359.879 cv
12.227 359.895 12.281 359.91 12.32 359.93 cv
12.363 359.957 12.395 359.984 12.41 360.016 cv
12.43 360.051 12.438 360.09 12.438 360.129 cv
12.438 363.512 li
16.047 363.512 li
16.047 359.512 li
16.047 359.473 16.059 359.437 16.078 359.398 cv
16.102 359.367 16.133 359.336 16.176 359.309 cv
16.223 359.285 16.281 359.266 16.348 359.254 cv
16.418 359.246 16.504 359.242 16.605 359.238 cv
cp
f
16.965 351.172 mo
17.012 351.172 17.047 351.184 17.07 351.203 cv
17.102 351.227 17.125 351.262 17.145 351.305 cv
17.164 351.355 17.176 351.418 17.191 351.5 cv
17.199 351.582 17.207 351.687 17.207 351.809 cv
17.207 351.941 17.199 352.047 17.191 352.129 cv
17.176 352.215 17.164 352.281 17.145 352.324 cv
17.125 352.375 17.102 352.406 17.07 352.426 cv
17.047 352.449 17.012 352.461 16.965 352.457 cv
12.859 352.457 li
12.461 352.461 12.141 352.492 11.895 352.551 cv
11.652 352.617 11.441 352.707 11.262 352.824 cv
11.086 352.941 10.949 353.098 10.855 353.285 cv
10.762 353.48 10.715 353.699 10.715 353.945 cv
10.715 354.27 10.832 354.594 11.059 354.914 cv
11.293 355.238 11.625 355.574 12.063 355.926 cv
16.965 355.926 li
17.012 355.93 17.047 355.941 17.07 355.957 cv
17.102 355.98 17.125 356.012 17.145 356.059 cv
17.164 356.105 17.176 356.172 17.191 356.25 cv
17.199 356.336 17.207 356.441 17.207 356.57 cv
17.207 356.699 17.199 356.805 17.191 356.883 cv
17.176 356.969 17.164 357.035 17.145 357.082 cv
17.125 357.137 17.102 357.168 17.07 357.184 cv
17.047 357.203 17.012 357.215 16.965 357.211 cv
9.953 357.211 li
9.914 357.215 9.879 357.207 9.848 357.187 cv
9.82 357.176 9.797 357.145 9.77 357.094 cv
9.75 357.051 9.734 356.988 9.723 356.914 cv
9.719 356.844 9.715 356.75 9.711 356.625 cv
9.715 356.516 9.719 356.418 9.723 356.34 cv
9.734 356.266 9.75 356.207 9.77 356.164 cv
9.797 356.125 9.82 356.098 9.848 356.078 cv
9.879 356.062 9.914 356.055 9.953 356.051 cv
10.879 356.051 li
10.438 355.66 10.117 355.266 9.91 354.871 cv
9.707 354.48 9.602 354.082 9.602 353.68 cv
9.602 353.211 9.684 352.82 9.84 352.5 cv
10.004 352.184 10.215 351.922 10.477 351.723 cv
10.742 351.527 11.051 351.387 11.406 351.301 cv
11.762 351.215 12.191 351.172 12.688 351.172 cv
cp
f
13.156 342.848 mo
13.359 342.852 13.5 342.902 13.586 343 cv
13.672 343.105 13.715 343.223 13.715 343.348 cv
13.715 347.965 li
14.105 347.969 14.457 347.93 14.77 347.848 cv
15.082 347.773 15.352 347.641 15.57 347.457 cv
15.797 347.277 15.969 347.043 16.086 346.746 cv
16.211 346.457 16.27 346.098 16.266 345.672 cv
16.27 345.34 16.242 345.043 16.184 344.781 cv
16.133 344.52 16.07 344.293 16 344.102 cv
15.934 343.914 15.875 343.758 15.816 343.633 cv
15.766 343.512 15.738 343.418 15.734 343.355 cv
15.738 343.32 15.746 343.289 15.762 343.258 cv
15.781 343.23 15.809 343.207 15.844 343.187 cv
15.883 343.176 15.934 343.164 15.996 343.152 cv
16.063 343.148 16.141 343.145 16.234 343.141 cv
16.305 343.145 16.363 343.148 16.41 343.148 cv
16.457 343.156 16.5 343.16 16.539 343.168 cv
16.578 343.176 16.613 343.191 16.645 343.207 cv
16.676 343.23 16.707 343.254 16.734 343.277 cv
16.766 343.309 16.813 343.391 16.875 343.531 cv
16.941 343.672 17.004 343.855 17.066 344.078 cv
17.129 344.305 17.184 344.562 17.234 344.855 cv
17.281 345.148 17.305 345.461 17.309 345.793 cv
17.305 346.371 17.227 346.879 17.066 347.309 cv
16.906 347.746 16.668 348.109 16.352 348.402 cv
16.035 348.703 15.641 348.926 15.16 349.074 cv
14.684 349.223 14.125 349.297 13.488 349.297 cv
12.891 349.297 12.352 349.223 11.867 349.066 cv
11.391 348.914 10.98 348.687 10.645 348.391 cv
10.309 348.098 10.051 347.742 9.871 347.328 cv
9.691 346.914 9.602 346.449 9.602 345.934 cv
9.602 345.383 9.691 344.914 9.867 344.527 cv
10.047 344.141 10.285 343.824 10.582 343.57 cv
10.883 343.324 11.234 343.141 11.633 343.023 cv
12.039 342.91 12.469 342.852 12.922 342.848 cv
cp
12.773 344.141 mo
12.098 344.125 11.566 344.277 11.184 344.594 cv
10.801 344.91 10.609 345.379 10.605 345.996 cv
10.609 346.32 10.668 346.602 10.785 346.84 cv
10.906 347.082 11.066 347.281 11.262 347.441 cv
11.461 347.605 11.691 347.73 11.953 347.816 cv
12.215 347.906 12.488 347.957 12.773 347.965 cv
cp
f
10.41 336.781 mo
10.527 336.785 10.625 336.785 10.699 336.789 cv
10.781 336.797 10.844 336.809 10.883 336.82 cv
10.93 336.84 10.961 336.859 10.984 336.879 cv
11.008 336.906 11.02 336.937 11.02 336.977 cv
11.02 337.02 11.008 337.07 10.984 337.129 cv
10.961 337.191 10.938 337.262 10.914 337.332 cv
10.891 337.41 10.871 337.492 10.848 337.586 cv
10.832 337.68 10.82 337.781 10.816 337.891 cv
10.82 338.023 10.848 338.152 10.895 338.273 cv
10.949 338.398 11.035 338.527 11.152 338.664 cv
11.277 338.805 11.434 338.949 11.629 339.098 cv
11.824 339.25 12.066 339.418 12.352 339.598 cv
16.965 339.598 li
17.012 339.602 17.047 339.613 17.07 339.629 cv
17.102 339.652 17.125 339.684 17.145 339.73 cv
17.164 339.777 17.176 339.844 17.191 339.922 cv
17.199 340.008 17.207 340.113 17.207 340.242 cv
17.207 340.371 17.199 340.477 17.191 340.555 cv
17.176 340.641 17.164 340.707 17.145 340.754 cv
17.125 340.809 17.102 340.84 17.07 340.855 cv
17.047 340.875 17.012 340.887 16.965 340.883 cv
9.953 340.883 li
9.914 340.887 9.879 340.879 9.848 340.859 cv
9.82 340.848 9.797 340.816 9.77 340.766 cv
9.75 340.723 9.734 340.66 9.723 340.586 cv
9.719 340.516 9.715 340.422 9.711 340.297 cv
9.715 340.187 9.719 340.09 9.723 340.012 cv
9.734 339.937 9.75 339.879 9.77 339.836 cv
9.797 339.797 9.82 339.77 9.848 339.75 cv
9.879 339.734 9.914 339.727 9.953 339.723 cv
10.973 339.723 li
10.691 339.535 10.465 339.352 10.289 339.18 cv
10.113 339.012 9.973 338.852 9.871 338.699 cv
9.77 338.551 9.699 338.402 9.66 338.254 cv
9.621 338.105 9.602 337.957 9.602 337.805 cv
9.602 337.738 9.605 337.66 9.613 337.574 cv
9.621 337.488 9.637 337.398 9.656 337.305 cv
9.68 337.211 9.703 337.129 9.727 337.051 cv
9.754 336.98 9.781 336.926 9.805 336.891 cv
9.836 336.863 9.859 336.844 9.879 336.828 cv
9.906 336.82 9.938 336.809 9.969 336.801 cv
10.008 336.793 10.059 336.789 10.129 336.785 cv
10.199 336.785 10.293 336.785 10.41 336.781 cv
cp
f
10.27 329.742 mo
10.453 329.746 10.586 329.77 10.664 329.816 cv
10.746 329.867 10.785 329.93 10.785 330.004 cv
10.785 331.012 li
10.973 330.832 11.18 330.703 11.406 330.629 cv
11.633 330.559 11.867 330.523 12.109 330.52 cv
12.516 330.523 12.875 330.59 13.188 330.715 cv
13.5 330.848 13.766 331.031 13.977 331.273 cv
14.195 331.516 14.359 331.805 14.473 332.133 cv
14.59 332.469 14.648 332.836 14.645 333.238 cv
14.648 333.527 14.609 333.801 14.531 334.055 cv
14.457 334.316 14.363 334.512 14.246 334.648 cv
14.344 334.742 14.449 334.82 14.566 334.879 cv
14.688 334.941 14.824 334.973 14.977 334.969 cv
15.16 334.973 15.313 334.887 15.43 334.715 cv
15.555 334.547 15.617 334.324 15.625 334.043 cv
15.703 332.211 li
15.715 331.863 15.762 331.547 15.848 331.254 cv
15.934 330.965 16.059 330.711 16.215 330.496 cv
16.375 330.285 16.566 330.117 16.797 329.996 cv
17.031 329.879 17.301 329.82 17.605 329.816 cv
17.926 329.82 18.23 329.887 18.523 330.02 cv
18.813 330.156 19.066 330.363 19.289 330.641 cv
19.508 330.922 19.684 331.277 19.813 331.707 cv
19.938 332.137 20 332.645 20.004 333.23 cv
20 333.801 19.953 334.285 19.859 334.68 cv
19.762 335.078 19.629 335.402 19.465 335.656 cv
19.297 335.91 19.102 336.094 18.871 336.207 cv
18.637 336.324 18.383 336.383 18.117 336.379 cv
17.945 336.383 17.781 336.363 17.621 336.316 cv
17.457 336.277 17.305 336.215 17.16 336.129 cv
17.016 336.047 16.879 335.937 16.742 335.809 cv
16.613 335.684 16.48 335.539 16.352 335.367 cv
16.223 335.625 16.059 335.812 15.859 335.934 cv
15.664 336.055 15.453 336.113 15.219 336.113 cv
14.906 336.113 14.621 336.051 14.371 335.922 cv
14.121 335.793 13.898 335.633 13.699 335.437 cv
13.508 335.602 13.293 335.727 13.051 335.82 cv
12.813 335.914 12.52 335.961 12.172 335.961 cv
11.777 335.961 11.418 335.895 11.098 335.758 cv
10.781 335.625 10.516 335.437 10.297 335.195 cv
10.082 334.957 9.914 334.672 9.793 334.336 cv
9.68 334.004 9.621 333.637 9.617 333.238 cv
9.621 333.027 9.633 332.828 9.652 332.645 cv
9.68 332.461 9.711 332.289 9.75 332.125 cv
9.75 330.004 li
9.754 329.918 9.797 329.852 9.879 329.809 cv
9.969 329.766 10.098 329.746 10.27 329.742 cv
cp
12.117 331.75 mo
11.645 331.754 11.273 331.887 11 332.145 cv
10.734 332.41 10.598 332.781 10.598 333.262 cv
10.598 333.516 10.641 333.734 10.723 333.914 cv
10.809 334.102 10.922 334.254 11.066 334.375 cv
11.215 334.496 11.383 334.586 11.57 334.645 cv
11.758 334.707 11.957 334.738 12.164 334.734 cv
12.629 334.738 12.992 334.605 13.258 334.344 cv
13.523 334.082 13.656 333.715 13.652 333.238 cv
13.656 332.988 13.617 332.77 13.531 332.578 cv
13.453 332.395 13.34 332.238 13.199 332.113 cv
13.059 331.992 12.895 331.902 12.703 331.84 cv
12.52 331.785 12.324 331.754 12.117 331.75 cv
cp
17.676 331.105 mo
17.371 331.109 17.141 331.234 16.977 331.477 cv
16.816 331.727 16.727 332.059 16.715 332.477 cv
16.652 334.293 li
16.785 334.461 16.91 334.598 17.023 334.699 cv
17.141 334.809 17.25 334.891 17.359 334.953 cv
17.465 335.016 17.57 335.059 17.676 335.082 cv
17.777 335.105 17.883 335.117 17.992 335.117 cv
18.328 335.117 18.582 334.949 18.762 334.605 cv
18.934 334.266 19.023 333.785 19.023 333.168 cv
19.023 332.781 18.984 332.457 18.91 332.191 cv
18.832 331.934 18.73 331.723 18.609 331.559 cv
18.48 331.402 18.34 331.285 18.18 331.211 cv
18.02 331.145 17.852 331.109 17.676 331.105 cv
cp
f
17.16 324.887 mo
19.738 325.82 li
19.82 325.855 19.883 325.934 19.93 326.059 cv
19.973 326.187 19.996 326.383 19.996 326.641 cv
19.996 326.781 19.988 326.891 19.977 326.969 cv
19.961 327.055 19.938 327.117 19.91 327.156 cv
19.875 327.203 19.836 327.227 19.785 327.23 cv
19.73 327.238 19.668 327.227 19.598 327.191 cv
17.16 326.227 li
17.141 326.273 17.109 326.32 17.059 326.359 cv
17.016 326.406 16.965 326.434 16.91 326.445 cv
10.207 328.945 li
10.102 328.988 10.016 329.012 9.953 329.008 cv
9.891 329.012 9.844 328.988 9.805 328.945 cv
9.773 328.906 9.746 328.84 9.73 328.742 cv
9.719 328.652 9.715 328.527 9.711 328.371 cv
9.715 328.215 9.719 328.094 9.723 328.004 cv
9.734 327.918 9.746 327.848 9.766 327.793 cv
9.789 327.742 9.82 327.703 9.855 327.68 cv
9.898 327.656 9.953 327.633 10.016 327.605 cv
15.641 325.602 li
15.641 325.578 li
9.984 323.648 li
9.887 323.617 9.824 323.582 9.793 323.535 cv
9.77 323.496 9.746 323.43 9.73 323.336 cv
9.719 323.25 9.715 323.121 9.711 322.953 cv
9.715 322.809 9.719 322.687 9.73 322.594 cv
9.746 322.5 9.773 322.434 9.805 322.387 cv
9.844 322.348 9.891 322.324 9.953 322.32 cv
10.016 322.324 10.094 322.34 10.184 322.367 cv
cp
f
15.734 310.25 mo
15.82 310.25 15.891 310.254 15.953 310.258 cv
16.016 310.266 16.07 310.273 16.117 310.285 cv
16.164 310.301 16.207 310.32 16.242 310.336 cv
16.281 310.359 16.324 310.395 16.375 310.445 cv
16.426 310.5 16.504 310.609 16.609 310.773 cv
16.719 310.941 16.824 311.148 16.922 311.395 cv
17.027 311.641 17.109 311.922 17.18 312.242 cv
17.246 312.562 17.281 312.914 17.285 313.289 cv
17.281 313.949 17.176 314.539 16.957 315.066 cv
16.742 315.594 16.422 316.043 15.992 316.414 cv
15.57 316.785 15.043 317.07 14.414 317.27 cv
13.789 317.469 13.066 317.57 12.25 317.566 cv
11.414 317.57 10.672 317.461 10.016 317.246 cv
9.363 317.031 8.809 316.73 8.352 316.34 cv
7.898 315.953 7.551 315.488 7.313 314.941 cv
7.074 314.402 6.953 313.797 6.953 313.133 cv
6.953 312.844 6.98 312.562 7.035 312.285 cv
7.09 312.012 7.16 311.758 7.238 311.523 cv
7.324 311.293 7.418 311.086 7.527 310.898 cv
7.637 310.719 7.727 310.59 7.797 310.52 cv
7.867 310.449 7.922 310.406 7.957 310.383 cv
7.996 310.367 8.039 310.348 8.086 310.332 cv
8.137 310.32 8.195 310.312 8.262 310.301 cv
8.332 310.297 8.414 310.293 8.504 310.289 cv
8.609 310.293 8.695 310.297 8.766 310.305 cv
8.84 310.316 8.902 310.332 8.949 310.352 cv
9.004 310.375 9.039 310.398 9.059 310.426 cv
9.086 310.457 9.098 310.492 9.094 310.531 cv
9.098 310.605 9.047 310.711 8.941 310.84 cv
8.844 310.973 8.734 311.141 8.609 311.344 cv
8.492 311.555 8.379 311.805 8.273 312.098 cv
8.176 312.395 8.125 312.746 8.121 313.156 cv
8.125 313.609 8.215 314.02 8.391 314.387 cv
8.57 314.754 8.832 315.07 9.18 315.328 cv
9.531 315.594 9.957 315.793 10.457 315.934 cv
10.957 316.078 11.531 316.152 12.172 316.148 cv
12.816 316.152 13.383 316.082 13.871 315.941 cv
14.363 315.805 14.773 315.605 15.102 315.348 cv
15.434 315.09 15.68 314.773 15.848 314.398 cv
16.02 314.023 16.105 313.598 16.102 313.117 cv
16.105 312.719 16.055 312.367 15.953 312.066 cv
15.855 311.766 15.746 311.512 15.621 311.297 cv
15.5 311.09 15.391 310.914 15.289 310.777 cv
15.195 310.641 15.145 310.535 15.141 310.453 cv
15.145 310.422 15.152 310.391 15.164 310.359 cv
15.184 310.336 15.215 310.312 15.254 310.297 cv
15.301 310.281 15.359 310.27 15.438 310.262 cv
15.516 310.254 15.617 310.25 15.734 310.25 cv
cp
f
13.379 302.105 mo
13.957 302.109 14.484 302.184 14.961 302.332 cv
15.445 302.484 15.859 302.711 16.203 303.008 cv
16.555 303.309 16.824 303.684 17.016 304.129 cv
17.211 304.582 17.305 305.102 17.309 305.691 cv
17.305 306.27 17.223 306.773 17.051 307.199 cv
16.883 307.629 16.633 307.984 16.305 308.27 cv
15.977 308.559 15.582 308.773 15.113 308.91 cv
14.648 309.051 14.117 309.117 13.52 309.117 cv
12.953 309.117 12.426 309.047 11.945 308.898 cv
11.465 308.754 11.051 308.527 10.699 308.227 cv
10.352 307.93 10.082 307.559 9.891 307.109 cv
9.699 306.664 9.602 306.141 9.602 305.543 cv
9.602 304.965 9.688 304.465 9.859 304.035 cv
10.031 303.609 10.281 303.25 10.609 302.965 cv
10.938 302.68 11.336 302.465 11.801 302.32 cv
12.27 302.18 12.797 302.109 13.379 302.105 cv
cp
13.465 303.437 mo
13.09 303.441 12.73 303.477 12.391 303.543 cv
12.055 303.617 11.762 303.734 11.504 303.895 cv
11.254 304.059 11.051 304.277 10.898 304.555 cv
10.754 304.836 10.68 305.184 10.676 305.594 cv
10.68 305.98 10.746 306.309 10.879 306.582 cv
11.016 306.859 11.207 307.086 11.453 307.262 cv
11.699 307.441 11.992 307.574 12.328 307.656 cv
12.668 307.746 13.035 307.789 13.434 307.785 cv
13.82 307.789 14.184 307.754 14.52 307.68 cv
14.859 307.613 15.152 307.496 15.402 307.328 cv
15.656 307.164 15.859 306.941 16.004 306.664 cv
16.156 306.387 16.23 306.039 16.227 305.625 cv
16.23 305.25 16.16 304.922 16.023 304.641 cv
15.891 304.363 15.703 304.137 15.453 303.957 cv
15.211 303.781 14.918 303.652 14.582 303.566 cv
14.246 303.484 13.875 303.441 13.465 303.437 cv
cp
f
16.965 294.18 mo
17.012 294.18 17.047 294.191 17.07 294.211 cv
17.102 294.234 17.125 294.27 17.145 294.312 cv
17.164 294.363 17.176 294.426 17.191 294.508 cv
17.199 294.59 17.207 294.695 17.207 294.816 cv
17.207 294.949 17.199 295.055 17.191 295.137 cv
17.176 295.223 17.164 295.289 17.145 295.332 cv
17.125 295.383 17.102 295.414 17.07 295.434 cv
17.047 295.457 17.012 295.469 16.965 295.465 cv
12.859 295.465 li
12.461 295.469 12.141 295.5 11.895 295.559 cv
11.652 295.625 11.441 295.715 11.262 295.832 cv
11.086 295.949 10.949 296.105 10.855 296.293 cv
10.762 296.488 10.715 296.707 10.715 296.953 cv
10.715 297.277 10.832 297.602 11.059 297.922 cv
11.293 298.246 11.625 298.582 12.063 298.934 cv
16.965 298.934 li
17.012 298.937 17.047 298.949 17.07 298.965 cv
17.102 298.988 17.125 299.02 17.145 299.066 cv
17.164 299.113 17.176 299.18 17.191 299.258 cv
17.199 299.344 17.207 299.449 17.207 299.578 cv
17.207 299.707 17.199 299.812 17.191 299.891 cv
17.176 299.977 17.164 300.043 17.145 300.09 cv
17.125 300.145 17.102 300.176 17.07 300.191 cv
17.047 300.211 17.012 300.223 16.965 300.219 cv
9.953 300.219 li
9.914 300.223 9.879 300.215 9.848 300.195 cv
9.82 300.184 9.797 300.152 9.77 300.102 cv
9.75 300.059 9.734 299.996 9.723 299.922 cv
9.719 299.852 9.715 299.758 9.711 299.633 cv
9.715 299.523 9.719 299.426 9.723 299.348 cv
9.734 299.273 9.75 299.215 9.77 299.172 cv
9.797 299.133 9.82 299.105 9.848 299.086 cv
9.879 299.07 9.914 299.062 9.953 299.059 cv
10.879 299.059 li
10.438 298.668 10.117 298.273 9.91 297.879 cv
9.707 297.488 9.602 297.09 9.602 296.687 cv
9.602 296.219 9.684 295.828 9.84 295.508 cv
10.004 295.191 10.215 294.93 10.477 294.73 cv
10.742 294.535 11.051 294.395 11.406 294.309 cv
11.762 294.223 12.191 294.18 12.688 294.18 cv
cp
f
15.055 287.437 mo
15.418 287.441 15.738 287.508 16.016 287.637 cv
16.297 287.77 16.531 287.957 16.723 288.199 cv
16.918 288.445 17.063 288.738 17.16 289.074 cv
17.258 289.414 17.305 289.785 17.309 290.187 cv
17.305 290.441 17.285 290.68 17.25 290.902 cv
17.207 291.129 17.16 291.328 17.102 291.508 cv
17.043 291.687 16.98 291.84 16.914 291.965 cv
16.852 292.09 16.793 292.184 16.738 292.238 cv
16.688 292.297 16.617 292.336 16.52 292.359 cv
16.43 292.387 16.301 292.398 16.141 292.398 cv
16.043 292.398 15.961 292.395 15.891 292.383 cv
15.824 292.375 15.77 292.363 15.727 292.344 cv
15.688 292.332 15.656 292.309 15.637 292.281 cv
15.621 292.254 15.613 292.223 15.609 292.184 cv
15.613 292.129 15.648 292.043 15.715 291.93 cv
15.789 291.82 15.867 291.684 15.945 291.516 cv
16.031 291.355 16.105 291.164 16.176 290.937 cv
16.246 290.719 16.281 290.461 16.281 290.164 cv
16.281 289.949 16.258 289.75 16.211 289.57 cv
16.164 289.395 16.098 289.242 16.004 289.113 cv
15.918 288.984 15.801 288.883 15.656 288.812 cv
15.52 288.742 15.352 288.707 15.156 288.707 cv
14.961 288.707 14.797 288.758 14.66 288.859 cv
14.527 288.961 14.406 289.098 14.301 289.262 cv
14.199 289.43 14.109 289.613 14.023 289.82 cv
13.945 290.031 13.859 290.246 13.77 290.465 cv
13.684 290.684 13.582 290.898 13.469 291.109 cv
13.359 291.32 13.227 291.512 13.063 291.676 cv
12.906 291.848 12.711 291.98 12.484 292.078 cv
12.262 292.184 11.996 292.234 11.684 292.23 cv
11.41 292.234 11.145 292.18 10.891 292.07 cv
10.641 291.965 10.422 291.805 10.23 291.59 cv
10.043 291.379 9.891 291.113 9.773 290.793 cv
9.66 290.473 9.602 290.102 9.602 289.672 cv
9.602 289.488 9.617 289.301 9.648 289.113 cv
9.68 288.93 9.719 288.762 9.766 288.605 cv
9.813 288.457 9.863 288.328 9.918 288.219 cv
9.973 288.117 10.023 288.035 10.063 287.977 cv
10.109 287.926 10.145 287.891 10.172 287.867 cv
10.203 287.852 10.238 287.836 10.273 287.828 cv
10.316 287.82 10.363 287.812 10.418 287.805 cv
10.477 287.797 10.547 287.793 10.629 287.793 cv
10.719 287.793 10.797 287.797 10.859 287.805 cv
10.93 287.812 10.98 287.828 11.02 287.844 cv
11.063 287.867 11.094 287.887 11.109 287.91 cv
11.129 287.937 11.137 287.969 11.137 287.996 cv
11.137 288.047 11.109 288.113 11.051 288.199 cv
10.996 288.289 10.934 288.402 10.867 288.543 cv
10.805 288.684 10.746 288.852 10.684 289.039 cv
10.629 289.23 10.598 289.445 10.598 289.687 cv
10.598 289.91 10.625 290.102 10.672 290.266 cv
10.727 290.434 10.797 290.57 10.883 290.676 cv
10.977 290.781 11.082 290.863 11.207 290.914 cv
11.332 290.973 11.469 291 11.613 290.996 cv
11.816 291 11.984 290.949 12.121 290.844 cv
12.262 290.742 12.383 290.605 12.484 290.437 cv
12.59 290.273 12.684 290.082 12.766 289.867 cv
12.852 289.656 12.938 289.441 13.023 289.219 cv
13.113 289 13.215 288.781 13.32 288.562 cv
13.43 288.348 13.559 288.156 13.715 287.988 cv
13.871 287.824 14.059 287.691 14.277 287.59 cv
14.496 287.492 14.758 287.441 15.055 287.437 cv
cp
f
16.965 279.59 mo
17.012 279.594 17.047 279.602 17.07 279.617 cv
17.102 279.637 17.125 279.672 17.145 279.715 cv
17.164 279.762 17.176 279.82 17.191 279.895 cv
17.199 279.973 17.207 280.066 17.207 280.172 cv
17.207 280.297 17.199 280.395 17.191 280.465 cv
17.176 280.543 17.164 280.602 17.145 280.645 cv
17.125 280.691 17.102 280.723 17.07 280.734 cv
17.047 280.754 17.012 280.762 16.965 280.758 cv
16.039 280.758 li
16.484 281.16 16.805 281.555 17.004 281.941 cv
17.207 282.336 17.305 282.73 17.309 283.125 cv
17.305 283.598 17.23 283.992 17.074 284.309 cv
16.922 284.629 16.711 284.887 16.441 285.082 cv
16.176 285.285 15.863 285.426 15.504 285.508 cv
15.148 285.598 14.715 285.641 14.207 285.637 cv
9.953 285.637 li
9.914 285.641 9.879 285.633 9.848 285.609 cv
9.82 285.594 9.797 285.559 9.77 285.504 cv
9.75 285.457 9.734 285.387 9.723 285.301 cv
9.719 285.219 9.715 285.117 9.711 284.988 cv
9.715 284.867 9.719 284.762 9.723 284.676 cv
9.734 284.594 9.75 284.527 9.77 284.48 cv
9.797 284.434 9.82 284.398 9.848 284.375 cv
9.879 284.355 9.914 284.348 9.953 284.344 cv
14.035 284.344 li
14.449 284.348 14.777 284.316 15.023 284.254 cv
15.27 284.195 15.48 284.105 15.652 283.98 cv
15.832 283.863 15.965 283.707 16.059 283.516 cv
16.156 283.332 16.207 283.113 16.203 282.863 cv
16.207 282.543 16.09 282.223 15.859 281.898 cv
15.633 281.582 15.297 281.242 14.852 280.883 cv
9.953 280.883 li
9.914 280.883 9.879 280.875 9.848 280.855 cv
9.82 280.84 9.797 280.805 9.77 280.75 cv
9.75 280.699 9.734 280.633 9.723 280.551 cv
9.719 280.473 9.715 280.367 9.711 280.234 cv
9.715 280.113 9.719 280.008 9.723 279.922 cv
9.734 279.84 9.75 279.777 9.77 279.73 cv
9.797 279.687 9.82 279.652 9.848 279.625 cv
9.879 279.605 9.914 279.594 9.953 279.59 cv
cp
f
16.965 266.812 mo
17.012 266.816 17.047 266.824 17.07 266.844 cv
17.102 266.867 17.125 266.902 17.145 266.945 cv
17.164 266.996 17.176 267.062 17.191 267.141 cv
17.199 267.227 17.207 267.328 17.207 267.453 cv
17.207 267.586 17.199 267.695 17.191 267.773 cv
17.176 267.859 17.164 267.926 17.145 267.973 cv
17.125 268.027 17.102 268.062 17.07 268.078 cv
17.047 268.102 17.012 268.109 16.965 268.109 cv
12.703 268.109 li
12.41 268.109 12.141 268.137 11.895 268.187 cv
11.652 268.242 11.441 268.324 11.262 268.437 cv
11.086 268.551 10.949 268.695 10.855 268.871 cv
10.762 269.051 10.715 269.262 10.715 269.496 cv
10.715 269.793 10.832 270.09 11.059 270.387 cv
11.293 270.691 11.625 271.02 12.063 271.375 cv
16.965 271.375 li
17.012 271.379 17.047 271.391 17.07 271.406 cv
17.102 271.43 17.125 271.461 17.145 271.508 cv
17.164 271.559 17.176 271.625 17.191 271.707 cv
17.199 271.793 17.207 271.898 17.207 272.02 cv
17.207 272.141 17.199 272.242 17.191 272.328 cv
17.176 272.414 17.164 272.484 17.145 272.531 cv
17.125 272.586 17.102 272.617 17.07 272.633 cv
17.047 272.652 17.012 272.664 16.965 272.66 cv
12.703 272.66 li
12.41 272.664 12.141 272.691 11.895 272.746 cv
11.652 272.805 11.441 272.891 11.262 273.004 cv
11.086 273.117 10.949 273.262 10.855 273.434 cv
10.762 273.613 10.715 273.82 10.715 274.055 cv
10.715 274.355 10.832 274.652 11.059 274.953 cv
11.293 275.254 11.625 275.582 12.063 275.934 cv
16.965 275.934 li
17.012 275.937 17.047 275.949 17.07 275.965 cv
17.102 275.988 17.125 276.02 17.145 276.066 cv
17.164 276.113 17.176 276.18 17.191 276.258 cv
17.199 276.344 17.207 276.449 17.207 276.578 cv
17.207 276.707 17.199 276.812 17.191 276.891 cv
17.176 276.977 17.164 277.043 17.145 277.09 cv
17.125 277.145 17.102 277.176 17.07 277.191 cv
17.047 277.211 17.012 277.223 16.965 277.219 cv
9.953 277.219 li
9.914 277.223 9.879 277.215 9.848 277.195 cv
9.82 277.184 9.797 277.152 9.77 277.102 cv
9.75 277.059 9.734 276.996 9.723 276.922 cv
9.719 276.852 9.715 276.758 9.711 276.633 cv
9.715 276.523 9.719 276.426 9.723 276.348 cv
9.734 276.273 9.75 276.215 9.77 276.172 cv
9.797 276.133 9.82 276.105 9.848 276.086 cv
9.879 276.07 9.914 276.062 9.953 276.059 cv
10.879 276.059 li
10.438 275.668 10.117 275.285 9.91 274.91 cv
9.707 274.543 9.602 274.164 9.602 273.781 cv
9.602 273.492 9.637 273.234 9.703 273 cv
9.773 272.773 9.867 272.566 9.988 272.387 cv
10.109 272.211 10.254 272.062 10.422 271.934 cv
10.594 271.812 10.785 271.707 10.988 271.621 cv
10.738 271.391 10.523 271.168 10.344 270.957 cv
10.172 270.746 10.027 270.543 9.914 270.348 cv
9.809 270.152 9.73 269.965 9.676 269.781 cv
9.629 269.598 9.602 269.41 9.602 269.223 cv
9.602 268.77 9.684 268.391 9.84 268.086 cv
10.004 267.781 10.215 267.535 10.477 267.34 cv
10.742 267.152 11.051 267.016 11.406 266.934 cv
11.762 266.855 12.137 266.816 12.531 266.812 cv
cp
f
13.348 258.012 mo
13.965 258.016 14.516 258.082 15.004 258.211 cv
15.492 258.348 15.906 258.543 16.246 258.797 cv
16.586 259.055 16.848 259.371 17.031 259.75 cv
17.215 260.129 17.305 260.562 17.309 261.051 cv
17.305 261.262 17.285 261.457 17.246 261.629 cv
17.203 261.809 17.141 261.98 17.051 262.145 cv
16.965 262.316 16.852 262.484 16.715 262.648 cv
16.582 262.82 16.426 262.996 16.242 263.18 cv
19.746 263.18 li
19.785 263.184 19.824 263.195 19.855 263.211 cv
19.887 263.234 19.91 263.266 19.934 263.312 cv
19.949 263.359 19.965 263.426 19.98 263.504 cv
19.988 263.59 19.996 263.695 19.996 263.824 cv
19.996 263.953 19.988 264.059 19.98 264.137 cv
19.965 264.223 19.949 264.289 19.934 264.336 cv
19.91 264.391 19.887 264.422 19.855 264.437 cv
19.824 264.457 19.785 264.469 19.746 264.465 cv
9.953 264.465 li
9.906 264.469 9.871 264.461 9.84 264.441 cv
9.816 264.43 9.789 264.398 9.766 264.348 cv
9.746 264.305 9.734 264.242 9.723 264.168 cv
9.719 264.098 9.715 264.012 9.711 263.902 cv
9.715 263.797 9.719 263.707 9.723 263.633 cv
9.734 263.566 9.746 263.508 9.766 263.457 cv
9.789 263.414 9.816 263.379 9.84 263.359 cv
9.871 263.344 9.906 263.336 9.953 263.332 cv
10.895 263.332 li
10.68 263.125 10.488 262.922 10.328 262.719 cv
10.168 262.523 10.035 262.324 9.926 262.121 cv
9.82 261.926 9.738 261.719 9.684 261.508 cv
9.629 261.297 9.602 261.074 9.602 260.84 cv
9.602 260.332 9.703 259.898 9.898 259.539 cv
10.098 259.18 10.367 258.891 10.707 258.664 cv
11.055 258.441 11.453 258.273 11.906 258.168 cv
12.363 258.066 12.844 258.016 13.348 258.012 cv
cp
13.496 259.344 mo
13.145 259.348 12.797 259.375 12.457 259.426 cv
12.125 259.484 11.828 259.578 11.566 259.711 cv
11.309 259.848 11.102 260.027 10.941 260.246 cv
10.789 260.473 10.711 260.75 10.707 261.086 cv
10.711 261.254 10.734 261.418 10.781 261.578 cv
10.832 261.742 10.91 261.91 11.016 262.074 cv
11.125 262.246 11.266 262.418 11.438 262.598 cv
11.613 262.781 11.828 262.977 12.078 263.18 cv
14.867 263.18 li
15.305 262.824 15.633 262.488 15.859 262.168 cv
16.09 261.852 16.207 261.516 16.203 261.164 cv
16.207 260.84 16.129 260.562 15.969 260.328 cv
15.816 260.102 15.605 259.914 15.344 259.766 cv
15.086 259.625 14.797 259.516 14.473 259.445 cv
14.152 259.379 13.828 259.348 13.496 259.344 cv
cp
f
16.449 252.52 mo
16.605 252.52 16.723 252.531 16.809 252.551 cv
16.898 252.574 16.965 252.605 17.004 252.645 cv
17.047 252.687 17.086 252.75 17.121 252.832 cv
17.156 252.918 17.184 253.012 17.211 253.117 cv
17.23 253.227 17.25 253.34 17.27 253.457 cv
17.281 253.574 17.289 253.695 17.293 253.812 cv
17.289 254.18 17.242 254.492 17.148 254.75 cv
17.055 255.012 16.91 255.223 16.711 255.387 cv
16.52 255.555 16.273 255.676 15.973 255.75 cv
15.676 255.828 15.324 255.867 14.914 255.863 cv
10.816 255.863 li
10.816 256.844 li
10.82 256.922 10.777 256.984 10.691 257.031 cv
10.609 257.078 10.477 257.102 10.285 257.102 cv
10.191 257.102 10.109 257.098 10.039 257.082 cv
9.977 257.074 9.918 257.055 9.871 257.031 cv
9.828 257.012 9.797 256.984 9.777 256.949 cv
9.762 256.918 9.754 256.883 9.75 256.836 cv
9.75 255.863 li
8.082 255.863 li
8.051 255.867 8.016 255.855 7.98 255.836 cv
7.953 255.82 7.926 255.789 7.898 255.734 cv
7.879 255.687 7.863 255.621 7.848 255.535 cv
7.84 255.457 7.832 255.352 7.832 255.223 cv
7.832 255.094 7.84 254.988 7.848 254.906 cv
7.863 254.824 7.879 254.758 7.898 254.711 cv
7.926 254.664 7.953 254.633 7.98 254.609 cv
8.016 254.594 8.051 254.582 8.082 254.578 cv
9.75 254.578 li
9.75 252.777 li
9.754 252.738 9.762 252.703 9.777 252.668 cv
9.797 252.641 9.828 252.613 9.871 252.586 cv
9.918 252.566 9.977 252.551 10.039 252.535 cv
10.109 252.527 10.191 252.52 10.285 252.52 cv
10.477 252.52 10.609 252.543 10.691 252.59 cv
10.777 252.637 10.82 252.699 10.816 252.777 cv
10.816 254.578 li
14.73 254.578 li
15.215 254.582 15.578 254.512 15.824 254.363 cv
16.074 254.223 16.199 253.965 16.195 253.594 cv
16.199 253.48 16.188 253.375 16.16 253.277 cv
16.141 253.187 16.117 253.105 16.086 253.027 cv
16.063 252.957 16.035 252.895 16.012 252.84 cv
15.988 252.793 15.977 252.746 15.977 252.699 cv
15.977 252.676 15.984 252.648 15.996 252.625 cv
16.012 252.602 16.035 252.586 16.07 252.57 cv
16.109 252.562 16.16 252.551 16.219 252.535 cv
16.285 252.527 16.363 252.52 16.449 252.52 cv
cp
f
16.965 249.504 mo
17.012 249.508 17.047 249.52 17.07 249.535 cv
17.102 249.559 17.125 249.59 17.145 249.637 cv
17.164 249.684 17.176 249.75 17.191 249.828 cv
17.199 249.914 17.207 250.02 17.207 250.148 cv
17.207 250.277 17.199 250.383 17.191 250.461 cv
17.176 250.547 17.164 250.613 17.145 250.66 cv
17.125 250.715 17.102 250.746 17.07 250.762 cv
17.047 250.781 17.012 250.793 16.965 250.789 cv
9.953 250.789 li
9.918 250.793 9.887 250.781 9.852 250.762 cv
9.824 250.746 9.797 250.715 9.773 250.66 cv
9.754 250.613 9.738 250.547 9.727 250.461 cv
9.719 250.383 9.715 250.277 9.711 250.148 cv
9.715 250.02 9.719 249.914 9.727 249.828 cv
9.738 249.75 9.754 249.684 9.773 249.637 cv
9.797 249.59 9.824 249.559 9.852 249.535 cv
9.887 249.52 9.918 249.508 9.953 249.504 cv
cp
7.582 249.355 mo
7.887 249.355 8.094 249.414 8.199 249.527 cv
8.313 249.641 8.367 249.852 8.363 250.156 cv
8.367 250.461 8.313 250.668 8.203 250.777 cv
8.098 250.895 7.895 250.949 7.598 250.945 cv
7.297 250.949 7.094 250.891 6.984 250.773 cv
6.879 250.66 6.824 250.449 6.82 250.141 cv
6.824 249.84 6.879 249.637 6.98 249.523 cv
7.09 249.414 7.289 249.355 7.582 249.355 cv
cp
f
13.379 240.562 mo
13.957 240.566 14.484 240.641 14.961 240.789 cv
15.445 240.941 15.859 241.168 16.203 241.465 cv
16.555 241.766 16.824 242.141 17.016 242.586 cv
17.211 243.039 17.305 243.559 17.309 244.148 cv
17.305 244.727 17.223 245.23 17.051 245.656 cv
16.883 246.086 16.633 246.441 16.305 246.727 cv
15.977 247.016 15.582 247.23 15.113 247.367 cv
14.648 247.508 14.117 247.574 13.52 247.574 cv
12.953 247.574 12.426 247.504 11.945 247.355 cv
11.465 247.211 11.051 246.984 10.699 246.684 cv
10.352 246.387 10.082 246.016 9.891 245.566 cv
9.699 245.121 9.602 244.598 9.602 244 cv
9.602 243.422 9.688 242.922 9.859 242.492 cv
10.031 242.066 10.281 241.707 10.609 241.422 cv
10.938 241.137 11.336 240.922 11.801 240.777 cv
12.27 240.637 12.797 240.566 13.379 240.562 cv
cp
13.465 241.895 mo
13.09 241.898 12.73 241.934 12.391 242 cv
12.055 242.074 11.762 242.191 11.504 242.352 cv
11.254 242.516 11.051 242.734 10.898 243.012 cv
10.754 243.293 10.68 243.641 10.676 244.051 cv
10.68 244.437 10.746 244.766 10.879 245.039 cv
11.016 245.316 11.207 245.543 11.453 245.719 cv
11.699 245.898 11.992 246.031 12.328 246.113 cv
12.668 246.203 13.035 246.246 13.434 246.242 cv
13.82 246.246 14.184 246.211 14.52 246.137 cv
14.859 246.07 15.152 245.953 15.402 245.785 cv
15.656 245.621 15.859 245.398 16.004 245.121 cv
16.156 244.844 16.23 244.496 16.227 244.082 cv
16.23 243.707 16.16 243.379 16.023 243.098 cv
15.891 242.82 15.703 242.594 15.453 242.414 cv
15.211 242.238 14.918 242.109 14.582 242.023 cv
14.246 241.941 13.875 241.898 13.465 241.895 cv
cp
f
16.965 232.637 mo
17.012 232.637 17.047 232.648 17.07 232.668 cv
17.102 232.691 17.125 232.727 17.145 232.77 cv
17.164 232.82 17.176 232.883 17.191 232.965 cv
17.199 233.047 17.207 233.152 17.207 233.273 cv
17.207 233.406 17.199 233.512 17.191 233.594 cv
17.176 233.68 17.164 233.746 17.145 233.789 cv
17.125 233.84 17.102 233.871 17.07 233.891 cv
17.047 233.914 17.012 233.926 16.965 233.922 cv
12.859 233.922 li
12.461 233.926 12.141 233.957 11.895 234.016 cv
11.652 234.082 11.441 234.172 11.262 234.289 cv
11.086 234.406 10.949 234.562 10.855 234.75 cv
10.762 234.945 10.715 235.164 10.715 235.41 cv
10.715 235.734 10.832 236.059 11.059 236.379 cv
11.293 236.703 11.625 237.039 12.063 237.391 cv
16.965 237.391 li
17.012 237.395 17.047 237.406 17.07 237.422 cv
17.102 237.445 17.125 237.477 17.145 237.523 cv
17.164 237.57 17.176 237.637 17.191 237.715 cv
17.199 237.801 17.207 237.906 17.207 238.035 cv
17.207 238.164 17.199 238.27 17.191 238.348 cv
17.176 238.434 17.164 238.5 17.145 238.547 cv
17.125 238.602 17.102 238.633 17.07 238.648 cv
17.047 238.668 17.012 238.68 16.965 238.676 cv
9.953 238.676 li
9.914 238.68 9.879 238.672 9.848 238.652 cv
9.82 238.641 9.797 238.609 9.77 238.559 cv
9.75 238.516 9.734 238.453 9.723 238.379 cv
9.719 238.309 9.715 238.215 9.711 238.09 cv
9.715 237.98 9.719 237.883 9.723 237.805 cv
9.734 237.73 9.75 237.672 9.77 237.629 cv
9.797 237.59 9.82 237.562 9.848 237.543 cv
9.879 237.527 9.914 237.52 9.953 237.516 cv
10.879 237.516 li
10.438 237.125 10.117 236.73 9.91 236.336 cv
9.707 235.945 9.602 235.547 9.602 235.145 cv
9.602 234.676 9.684 234.285 9.84 233.965 cv
10.004 233.648 10.215 233.387 10.477 233.187 cv
10.742 232.992 11.051 232.852 11.406 232.766 cv
11.762 232.68 12.191 232.637 12.688 232.637 cv
cp
f
6.422 223.797 mo
7.469 224.293 8.539 224.66 9.637 224.902 cv
10.738 225.145 11.844 225.266 12.953 225.266 cv
14.07 225.266 15.18 225.145 16.273 224.895 cv
17.371 224.652 18.441 224.289 19.496 223.812 cv
19.555 223.789 19.609 223.777 19.656 223.77 cv
19.699 223.77 19.734 223.785 19.766 223.82 cv
19.793 223.859 19.813 223.914 19.828 223.988 cv
19.836 224.066 19.844 224.172 19.848 224.297 cv
19.844 224.395 19.84 224.473 19.84 224.539 cv
19.832 224.609 19.824 224.668 19.809 224.715 cv
19.793 224.766 19.773 224.809 19.754 224.836 cv
19.73 224.871 19.707 224.895 19.684 224.906 cv
19.152 225.187 18.617 225.434 18.074 225.645 cv
17.531 225.863 16.98 226.043 16.422 226.184 cv
15.859 226.332 15.293 226.441 14.719 226.512 cv
14.145 226.59 13.563 226.625 12.977 226.621 cv
12.391 226.625 11.813 226.586 11.238 226.5 cv
10.668 226.422 10.102 226.305 9.535 226.156 cv
8.973 226.008 8.418 225.828 7.871 225.617 cv
7.328 225.406 6.785 225.168 6.25 224.898 cv
6.23 224.895 6.215 224.879 6.195 224.855 cv
6.184 224.832 6.168 224.801 6.148 224.758 cv
6.137 224.719 6.125 224.66 6.113 224.586 cv
6.109 224.516 6.105 224.422 6.102 224.305 cv
6.105 224.187 6.113 224.094 6.125 224.016 cv
6.145 223.945 6.164 223.887 6.188 223.844 cv
6.215 223.805 6.25 223.781 6.289 223.773 cv
6.336 223.77 6.379 223.777 6.422 223.797 cv
cp
f
16.941 214.902 mo
16.988 214.906 17.023 214.914 17.055 214.93 cv
17.09 214.949 17.117 214.984 17.137 215.035 cv
17.156 215.09 17.172 215.16 17.188 215.246 cv
17.199 215.336 17.207 215.449 17.207 215.59 cv
17.207 215.77 17.199 215.918 17.184 216.031 cv
17.168 216.148 17.141 216.234 17.098 216.289 cv
17.059 216.348 17.012 216.395 16.957 216.43 cv
11.914 220.141 li
16.957 220.141 li
16.996 220.145 17.031 220.152 17.063 220.172 cv
17.098 220.195 17.125 220.234 17.141 220.281 cv
17.16 220.336 17.172 220.402 17.188 220.488 cv
17.199 220.574 17.207 220.684 17.207 220.809 cv
17.207 220.937 17.199 221.043 17.188 221.129 cv
17.172 221.219 17.16 221.289 17.141 221.34 cv
17.125 221.395 17.098 221.43 17.063 221.449 cv
17.031 221.473 16.996 221.484 16.957 221.48 cv
7.277 221.48 li
7.238 221.484 7.203 221.473 7.168 221.449 cv
7.141 221.43 7.113 221.395 7.094 221.34 cv
7.078 221.289 7.063 221.219 7.047 221.129 cv
7.035 221.043 7.031 220.937 7.027 220.809 cv
7.031 220.684 7.035 220.574 7.047 220.488 cv
7.063 220.402 7.078 220.336 7.094 220.281 cv
7.113 220.234 7.141 220.195 7.168 220.172 cv
7.203 220.152 7.238 220.145 7.277 220.141 cv
11.758 220.141 li
7.277 216.57 li
7.234 216.543 7.195 216.508 7.16 216.461 cv
7.133 216.422 7.109 216.371 7.086 216.309 cv
7.07 216.254 7.055 216.18 7.043 216.09 cv
7.035 216.008 7.031 215.898 7.027 215.762 cv
7.031 215.629 7.035 215.52 7.047 215.434 cv
7.063 215.352 7.082 215.285 7.098 215.234 cv
7.121 215.187 7.145 215.152 7.176 215.133 cv
7.207 215.117 7.242 215.109 7.277 215.105 cv
7.348 215.109 7.414 215.125 7.48 215.156 cv
7.551 215.191 7.645 215.258 7.762 215.348 cv
11.758 218.691 li
16.543 215.09 li
16.684 215.004 16.773 214.949 16.82 214.93 cv
16.871 214.914 16.914 214.906 16.941 214.902 cv
cp
f
16.965 212.094 mo
17.012 212.098 17.047 212.109 17.07 212.125 cv
17.102 212.148 17.125 212.18 17.145 212.227 cv
17.164 212.273 17.176 212.34 17.191 212.418 cv
17.199 212.504 17.207 212.609 17.207 212.738 cv
17.207 212.867 17.199 212.973 17.191 213.051 cv
17.176 213.137 17.164 213.203 17.145 213.25 cv
17.125 213.305 17.102 213.336 17.07 213.352 cv
17.047 213.371 17.012 213.383 16.965 213.379 cv
9.953 213.379 li
9.918 213.383 9.887 213.371 9.852 213.352 cv
9.824 213.336 9.797 213.305 9.773 213.25 cv
9.754 213.203 9.738 213.137 9.727 213.051 cv
9.719 212.973 9.715 212.867 9.711 212.738 cv
9.715 212.609 9.719 212.504 9.727 212.418 cv
9.738 212.34 9.754 212.273 9.773 212.227 cv
9.797 212.18 9.824 212.148 9.852 212.125 cv
9.887 212.109 9.918 212.098 9.953 212.094 cv
cp
7.582 211.945 mo
7.887 211.945 8.094 212.004 8.199 212.117 cv
8.313 212.23 8.367 212.441 8.363 212.746 cv
8.367 213.051 8.313 213.258 8.203 213.367 cv
8.098 213.484 7.895 213.539 7.598 213.535 cv
7.297 213.539 7.094 213.48 6.984 213.363 cv
6.879 213.25 6.824 213.039 6.82 212.73 cv
6.824 212.43 6.879 212.227 6.98 212.113 cv
7.09 212.004 7.289 211.945 7.582 211.945 cv
cp
f
16.965 208.391 mo
17.012 208.395 17.047 208.406 17.07 208.422 cv
17.102 208.445 17.125 208.477 17.145 208.523 cv
17.164 208.57 17.176 208.637 17.191 208.715 cv
17.199 208.801 17.207 208.906 17.207 209.035 cv
17.207 209.164 17.199 209.27 17.191 209.348 cv
17.176 209.434 17.164 209.5 17.145 209.547 cv
17.125 209.602 17.102 209.633 17.07 209.648 cv
17.047 209.668 17.012 209.68 16.965 209.676 cv
6.555 209.676 li
6.516 209.68 6.48 209.668 6.445 209.648 cv
6.418 209.633 6.391 209.602 6.367 209.547 cv
6.348 209.5 6.332 209.434 6.32 209.348 cv
6.313 209.27 6.309 209.164 6.305 209.035 cv
6.309 208.906 6.313 208.801 6.32 208.715 cv
6.332 208.637 6.348 208.57 6.367 208.523 cv
6.391 208.477 6.418 208.445 6.445 208.422 cv
6.48 208.406 6.516 208.395 6.555 208.391 cv
cp
f
13.379 199.449 mo
13.957 199.453 14.484 199.527 14.961 199.676 cv
15.445 199.828 15.859 200.055 16.203 200.352 cv
16.555 200.652 16.824 201.027 17.016 201.473 cv
17.211 201.926 17.305 202.445 17.309 203.035 cv
17.305 203.613 17.223 204.117 17.051 204.543 cv
16.883 204.973 16.633 205.328 16.305 205.613 cv
15.977 205.902 15.582 206.117 15.113 206.254 cv
14.648 206.395 14.117 206.461 13.52 206.461 cv
12.953 206.461 12.426 206.391 11.945 206.242 cv
11.465 206.098 11.051 205.871 10.699 205.57 cv
10.352 205.273 10.082 204.902 9.891 204.453 cv
9.699 204.008 9.602 203.484 9.602 202.887 cv
9.602 202.309 9.688 201.809 9.859 201.379 cv
10.031 200.953 10.281 200.594 10.609 200.309 cv
10.938 200.023 11.336 199.809 11.801 199.664 cv
12.27 199.523 12.797 199.453 13.379 199.449 cv
cp
13.465 200.781 mo
13.09 200.785 12.73 200.82 12.391 200.887 cv
12.055 200.961 11.762 201.078 11.504 201.238 cv
11.254 201.402 11.051 201.621 10.898 201.898 cv
10.754 202.18 10.68 202.527 10.676 202.937 cv
10.68 203.324 10.746 203.652 10.879 203.926 cv
11.016 204.203 11.207 204.43 11.453 204.605 cv
11.699 204.785 11.992 204.918 12.328 205 cv
12.668 205.09 13.035 205.133 13.434 205.129 cv
13.82 205.133 14.184 205.098 14.52 205.023 cv
14.859 204.957 15.152 204.84 15.402 204.672 cv
15.656 204.508 15.859 204.285 16.004 204.008 cv
16.156 203.73 16.23 203.383 16.227 202.969 cv
16.23 202.594 16.16 202.266 16.023 201.984 cv
15.891 201.707 15.703 201.48 15.453 201.301 cv
15.211 201.125 14.918 200.996 14.582 200.91 cv
14.246 200.828 13.875 200.785 13.465 200.781 cv
cp
f
16.863 184.152 mo
16.938 184.176 16.996 184.207 17.039 184.246 cv
17.086 184.289 17.121 184.348 17.141 184.418 cv
17.164 184.496 17.176 184.586 17.191 184.687 cv
17.199 184.797 17.207 184.926 17.207 185.078 cv
17.207 185.242 17.199 185.379 17.191 185.488 cv
17.176 185.602 17.164 185.695 17.141 185.766 cv
17.121 185.844 17.086 185.898 17.039 185.93 cv
16.996 185.969 16.938 185.996 16.863 186.016 cv
9.25 188.129 li
9.25 188.141 li
16.863 190.09 li
16.938 190.109 16.996 190.133 17.039 190.168 cv
17.086 190.207 17.121 190.262 17.141 190.324 cv
17.164 190.395 17.176 190.48 17.191 190.586 cv
17.199 190.695 17.207 190.832 17.207 190.996 cv
17.207 191.168 17.199 191.309 17.191 191.422 cv
17.176 191.539 17.164 191.633 17.141 191.703 cv
17.121 191.777 17.086 191.836 17.039 191.871 cv
16.996 191.914 16.938 191.941 16.863 191.953 cv
7.551 194.617 li
7.434 194.652 7.34 194.668 7.27 194.668 cv
7.203 194.672 7.152 194.652 7.113 194.605 cv
7.078 194.562 7.055 194.492 7.043 194.395 cv
7.035 194.297 7.031 194.164 7.027 193.996 cv
7.031 193.836 7.035 193.707 7.039 193.613 cv
7.051 193.52 7.063 193.449 7.082 193.398 cv
7.105 193.352 7.137 193.316 7.168 193.297 cv
7.207 193.281 7.254 193.27 7.309 193.254 cv
15.758 190.988 li
15.758 190.98 li
7.324 188.828 li
7.27 188.816 7.223 188.797 7.18 188.77 cv
7.145 188.75 7.113 188.711 7.09 188.656 cv
7.07 188.605 7.055 188.531 7.043 188.434 cv
7.035 188.34 7.031 188.215 7.027 188.059 cv
7.031 187.914 7.035 187.801 7.043 187.711 cv
7.055 187.629 7.07 187.559 7.09 187.504 cv
7.113 187.453 7.145 187.414 7.18 187.391 cv
7.223 187.367 7.27 187.348 7.324 187.332 cv
15.758 185.016 li
15.758 185.004 li
7.316 182.781 li
7.266 182.77 7.223 182.754 7.18 182.734 cv
7.145 182.723 7.113 182.691 7.09 182.637 cv
7.07 182.59 7.055 182.52 7.043 182.426 cv
7.035 182.34 7.031 182.219 7.027 182.062 cv
7.031 181.914 7.035 181.789 7.047 181.695 cv
7.063 181.605 7.09 181.539 7.121 181.496 cv
7.16 181.457 7.211 181.437 7.277 181.437 cv
7.348 181.441 7.441 181.457 7.559 181.48 cv
cp
f
16.973 175.121 mo
17.035 175.125 17.082 175.145 17.113 175.184 cv
17.145 175.227 17.168 175.285 17.184 175.355 cv
17.199 175.434 17.207 175.539 17.207 175.676 cv
17.207 175.812 17.199 175.922 17.184 176 cv
17.168 176.086 17.145 176.145 17.113 176.176 cv
17.082 176.215 17.035 176.23 16.973 176.227 cv
16.273 176.227 li
16.602 176.535 16.855 176.879 17.035 177.254 cv
17.219 177.633 17.305 178.031 17.309 178.449 cv
17.305 178.824 17.258 179.156 17.164 179.453 cv
17.066 179.75 16.93 180.004 16.746 180.215 cv
16.566 180.426 16.344 180.59 16.078 180.707 cv
15.816 180.824 15.516 180.883 15.172 180.879 cv
14.781 180.883 14.438 180.805 14.145 180.641 cv
13.855 180.484 13.613 180.25 13.422 179.945 cv
13.23 179.645 13.086 179.277 12.988 178.84 cv
12.895 178.406 12.848 177.914 12.844 177.367 cv
12.844 176.398 li
12.297 176.398 li
12.027 176.402 11.789 176.43 11.582 176.484 cv
11.375 176.543 11.203 176.637 11.063 176.762 cv
10.926 176.895 10.82 177.059 10.75 177.258 cv
10.68 177.465 10.645 177.715 10.645 178.004 cv
10.645 178.324 10.684 178.609 10.758 178.859 cv
10.836 179.117 10.918 179.336 11.008 179.523 cv
11.102 179.711 11.188 179.871 11.258 179.996 cv
11.336 180.129 11.371 180.223 11.371 180.281 cv
11.371 180.324 11.363 180.359 11.34 180.391 cv
11.324 180.422 11.293 180.449 11.246 180.473 cv
11.207 180.496 11.152 180.516 11.086 180.523 cv
11.023 180.539 10.953 180.543 10.871 180.539 cv
10.746 180.543 10.641 180.535 10.563 180.512 cv
10.488 180.496 10.418 180.449 10.348 180.379 cv
10.281 180.309 10.203 180.187 10.113 180.016 cv
10.023 179.844 9.941 179.648 9.863 179.426 cv
9.793 179.203 9.73 178.957 9.676 178.691 cv
9.629 178.426 9.602 178.16 9.602 177.887 cv
9.602 177.387 9.66 176.957 9.773 176.605 cv
9.891 176.254 10.059 175.969 10.277 175.746 cv
10.5 175.531 10.773 175.371 11.098 175.27 cv
11.43 175.172 11.813 175.125 12.242 175.121 cv
cp
13.77 176.398 mo
13.77 177.5 li
13.773 177.855 13.805 178.16 13.859 178.418 cv
13.922 178.68 14.008 178.895 14.125 179.066 cv
14.242 179.238 14.383 179.363 14.547 179.441 cv
14.711 179.523 14.898 179.566 15.109 179.562 cv
15.477 179.566 15.77 179.449 15.98 179.219 cv
16.199 178.988 16.305 178.664 16.305 178.246 cv
16.305 177.91 16.219 177.598 16.047 177.309 cv
15.875 177.02 15.613 176.719 15.258 176.398 cv
cp
f
16.449 169.191 mo
16.605 169.191 16.723 169.203 16.809 169.223 cv
16.898 169.246 16.965 169.277 17.004 169.316 cv
17.047 169.359 17.086 169.422 17.121 169.504 cv
17.156 169.59 17.184 169.684 17.211 169.789 cv
17.23 169.898 17.25 170.012 17.27 170.129 cv
17.281 170.246 17.289 170.367 17.293 170.484 cv
17.289 170.852 17.242 171.164 17.148 171.422 cv
17.055 171.684 16.91 171.895 16.711 172.059 cv
16.52 172.227 16.273 172.348 15.973 172.422 cv
15.676 172.5 15.324 172.539 14.914 172.535 cv
10.816 172.535 li
10.816 173.516 li
10.82 173.594 10.777 173.656 10.691 173.703 cv
10.609 173.75 10.477 173.773 10.285 173.773 cv
10.191 173.773 10.109 173.77 10.039 173.754 cv
9.977 173.746 9.918 173.727 9.871 173.703 cv
9.828 173.684 9.797 173.656 9.777 173.621 cv
9.762 173.59 9.754 173.555 9.75 173.508 cv
9.75 172.535 li
8.082 172.535 li
8.051 172.539 8.016 172.527 7.98 172.508 cv
7.953 172.492 7.926 172.461 7.898 172.406 cv
7.879 172.359 7.863 172.293 7.848 172.207 cv
7.84 172.129 7.832 172.023 7.832 171.895 cv
7.832 171.766 7.84 171.66 7.848 171.578 cv
7.863 171.496 7.879 171.43 7.898 171.383 cv
7.926 171.336 7.953 171.305 7.98 171.281 cv
8.016 171.266 8.051 171.254 8.082 171.25 cv
9.75 171.25 li
9.75 169.449 li
9.754 169.41 9.762 169.375 9.777 169.34 cv
9.797 169.312 9.828 169.285 9.871 169.258 cv
9.918 169.238 9.977 169.223 10.039 169.207 cv
10.109 169.199 10.191 169.191 10.285 169.191 cv
10.477 169.191 10.609 169.215 10.691 169.262 cv
10.777 169.309 10.82 169.371 10.816 169.449 cv
10.816 171.25 li
14.73 171.25 li
15.215 171.254 15.578 171.184 15.824 171.035 cv
16.074 170.895 16.199 170.637 16.195 170.266 cv
16.199 170.152 16.188 170.047 16.16 169.949 cv
16.141 169.859 16.117 169.777 16.086 169.699 cv
16.063 169.629 16.035 169.566 16.012 169.512 cv
15.988 169.465 15.977 169.418 15.977 169.371 cv
15.977 169.348 15.984 169.32 15.996 169.297 cv
16.012 169.273 16.035 169.258 16.07 169.242 cv
16.109 169.234 16.16 169.223 16.219 169.207 cv
16.285 169.199 16.363 169.191 16.449 169.191 cv
cp
f
16.449 164.035 mo
16.605 164.035 16.723 164.047 16.809 164.066 cv
16.898 164.09 16.965 164.121 17.004 164.16 cv
17.047 164.203 17.086 164.266 17.121 164.348 cv
17.156 164.434 17.184 164.527 17.211 164.633 cv
17.23 164.742 17.25 164.855 17.27 164.973 cv
17.281 165.09 17.289 165.211 17.293 165.328 cv
17.289 165.695 17.242 166.008 17.148 166.266 cv
17.055 166.527 16.91 166.738 16.711 166.902 cv
16.52 167.07 16.273 167.191 15.973 167.266 cv
15.676 167.344 15.324 167.383 14.914 167.379 cv
10.816 167.379 li
10.816 168.359 li
10.82 168.437 10.777 168.5 10.691 168.547 cv
10.609 168.594 10.477 168.617 10.285 168.617 cv
10.191 168.617 10.109 168.613 10.039 168.598 cv
9.977 168.59 9.918 168.57 9.871 168.547 cv
9.828 168.527 9.797 168.5 9.777 168.465 cv
9.762 168.434 9.754 168.398 9.75 168.352 cv
9.75 167.379 li
8.082 167.379 li
8.051 167.383 8.016 167.371 7.98 167.352 cv
7.953 167.336 7.926 167.305 7.898 167.25 cv
7.879 167.203 7.863 167.137 7.848 167.051 cv
7.84 166.973 7.832 166.867 7.832 166.738 cv
7.832 166.609 7.84 166.504 7.848 166.422 cv
7.863 166.34 7.879 166.273 7.898 166.227 cv
7.926 166.18 7.953 166.148 7.98 166.125 cv
8.016 166.109 8.051 166.098 8.082 166.094 cv
9.75 166.094 li
9.75 164.293 li
9.754 164.254 9.762 164.219 9.777 164.184 cv
9.797 164.156 9.828 164.129 9.871 164.102 cv
9.918 164.082 9.977 164.066 10.039 164.051 cv
10.109 164.043 10.191 164.035 10.285 164.035 cv
10.477 164.035 10.609 164.059 10.691 164.105 cv
10.777 164.152 10.82 164.215 10.816 164.293 cv
10.816 166.094 li
14.73 166.094 li
15.215 166.098 15.578 166.027 15.824 165.879 cv
16.074 165.738 16.199 165.48 16.195 165.109 cv
16.199 164.996 16.188 164.891 16.16 164.793 cv
16.141 164.703 16.117 164.621 16.086 164.543 cv
16.063 164.473 16.035 164.41 16.012 164.355 cv
15.988 164.309 15.977 164.262 15.977 164.215 cv
15.977 164.191 15.984 164.164 15.996 164.141 cv
16.012 164.117 16.035 164.102 16.07 164.086 cv
16.109 164.078 16.16 164.066 16.219 164.051 cv
16.285 164.043 16.363 164.035 16.449 164.035 cv
cp
f
15.055 157.902 mo
15.418 157.906 15.738 157.973 16.016 158.102 cv
16.297 158.234 16.531 158.422 16.723 158.664 cv
16.918 158.91 17.063 159.203 17.16 159.539 cv
17.258 159.879 17.305 160.25 17.309 160.652 cv
17.305 160.906 17.285 161.145 17.25 161.367 cv
17.207 161.594 17.16 161.793 17.102 161.973 cv
17.043 162.152 16.98 162.305 16.914 162.43 cv
16.852 162.555 16.793 162.648 16.738 162.703 cv
16.688 162.762 16.617 162.801 16.52 162.824 cv
16.43 162.852 16.301 162.863 16.141 162.863 cv
16.043 162.863 15.961 162.859 15.891 162.848 cv
15.824 162.84 15.77 162.828 15.727 162.809 cv
15.688 162.797 15.656 162.773 15.637 162.746 cv
15.621 162.719 15.613 162.687 15.609 162.648 cv
15.613 162.594 15.648 162.508 15.715 162.395 cv
15.789 162.285 15.867 162.148 15.945 161.98 cv
16.031 161.82 16.105 161.629 16.176 161.402 cv
16.246 161.184 16.281 160.926 16.281 160.629 cv
16.281 160.414 16.258 160.215 16.211 160.035 cv
16.164 159.859 16.098 159.707 16.004 159.578 cv
15.918 159.449 15.801 159.348 15.656 159.277 cv
15.52 159.207 15.352 159.172 15.156 159.172 cv
14.961 159.172 14.797 159.223 14.66 159.324 cv
14.527 159.426 14.406 159.562 14.301 159.727 cv
14.199 159.895 14.109 160.078 14.023 160.285 cv
13.945 160.496 13.859 160.711 13.77 160.93 cv
13.684 161.148 13.582 161.363 13.469 161.574 cv
13.359 161.785 13.227 161.977 13.063 162.141 cv
12.906 162.312 12.711 162.445 12.484 162.543 cv
12.262 162.648 11.996 162.699 11.684 162.695 cv
11.41 162.699 11.145 162.645 10.891 162.535 cv
10.641 162.43 10.422 162.27 10.23 162.055 cv
10.043 161.844 9.891 161.578 9.773 161.258 cv
9.66 160.937 9.602 160.566 9.602 160.137 cv
9.602 159.953 9.617 159.766 9.648 159.578 cv
9.68 159.395 9.719 159.227 9.766 159.07 cv
9.813 158.922 9.863 158.793 9.918 158.684 cv
9.973 158.582 10.023 158.5 10.063 158.441 cv
10.109 158.391 10.145 158.355 10.172 158.332 cv
10.203 158.316 10.238 158.301 10.273 158.293 cv
10.316 158.285 10.363 158.277 10.418 158.27 cv
10.477 158.262 10.547 158.258 10.629 158.258 cv
10.719 158.258 10.797 158.262 10.859 158.27 cv
10.93 158.277 10.98 158.293 11.02 158.309 cv
11.063 158.332 11.094 158.352 11.109 158.375 cv
11.129 158.402 11.137 158.434 11.137 158.461 cv
11.137 158.512 11.109 158.578 11.051 158.664 cv
10.996 158.754 10.934 158.867 10.867 159.008 cv
10.805 159.148 10.746 159.316 10.684 159.504 cv
10.629 159.695 10.598 159.91 10.598 160.152 cv
10.598 160.375 10.625 160.566 10.672 160.73 cv
10.727 160.898 10.797 161.035 10.883 161.141 cv
10.977 161.246 11.082 161.328 11.207 161.379 cv
11.332 161.437 11.469 161.465 11.613 161.461 cv
11.816 161.465 11.984 161.414 12.121 161.309 cv
12.262 161.207 12.383 161.07 12.484 160.902 cv
12.59 160.738 12.684 160.547 12.766 160.332 cv
12.852 160.121 12.938 159.906 13.023 159.684 cv
13.113 159.465 13.215 159.246 13.32 159.027 cv
13.43 158.812 13.559 158.621 13.715 158.453 cv
13.871 158.289 14.059 158.156 14.277 158.055 cv
14.496 157.957 14.758 157.906 15.055 157.902 cv
cp
f
12.977 153.461 mo
13.563 153.461 14.145 153.5 14.719 153.57 cv
15.293 153.648 15.859 153.758 16.422 153.898 cv
16.98 154.047 17.531 154.223 18.074 154.434 cv
18.617 154.645 19.152 154.891 19.684 155.168 cv
19.707 155.187 19.73 155.211 19.754 155.238 cv
19.773 155.273 19.793 155.312 19.809 155.359 cv
19.824 155.41 19.832 155.469 19.84 155.535 cv
19.84 155.605 19.844 155.687 19.848 155.777 cv
19.844 155.914 19.836 156.02 19.828 156.094 cv
19.813 156.172 19.793 156.227 19.766 156.258 cv
19.734 156.293 19.699 156.309 19.656 156.305 cv
19.609 156.305 19.555 156.289 19.496 156.262 cv
18.445 155.785 17.375 155.426 16.277 155.18 cv
15.18 154.937 14.07 154.816 12.953 154.812 cv
11.844 154.816 10.738 154.937 9.637 155.18 cv
8.539 155.426 7.469 155.793 6.422 156.277 cv
6.379 156.301 6.336 156.309 6.289 156.301 cv
6.25 156.301 6.215 156.277 6.188 156.23 cv
6.164 156.191 6.145 156.133 6.125 156.059 cv
6.113 155.988 6.105 155.891 6.102 155.77 cv
6.105 155.66 6.109 155.57 6.113 155.496 cv
6.125 155.426 6.137 155.367 6.148 155.32 cv
6.168 155.277 6.184 155.246 6.195 155.223 cv
6.215 155.207 6.23 155.191 6.25 155.176 cv
7.316 154.645 8.414 154.223 9.535 153.918 cv
10.664 153.613 11.809 153.461 12.977 153.461 cv
cp
f
273.25 561.117 mo
273.246 561.223 273.23 561.312 273.195 561.383 cv
273.16 561.461 273.113 561.52 273.059 561.562 cv
273 561.613 272.938 561.648 272.871 561.664 cv
272.797 561.687 272.727 561.695 272.664 561.695 cv
272.219 561.695 li
272.078 561.695 271.957 561.684 271.852 561.652 cv
271.746 561.629 271.648 561.574 271.555 561.496 cv
271.461 561.422 271.367 561.32 271.273 561.187 cv
271.18 561.059 271.078 560.895 270.973 560.691 cv
267.898 554.953 li
267.734 554.66 267.57 554.352 267.41 554.023 cv
267.242 553.703 267.09 553.387 266.953 553.078 cv
266.938 553.078 li
266.945 553.453 266.953 553.836 266.961 554.223 cv
266.965 554.613 266.965 555 266.969 555.383 cv
266.969 561.469 li
266.965 561.508 266.953 561.543 266.934 561.574 cv
266.91 561.609 266.875 561.637 266.824 561.652 cv
266.77 561.672 266.699 561.684 266.617 561.699 cv
266.531 561.711 266.426 561.719 266.297 561.719 cv
266.16 561.719 266.051 561.711 265.969 561.699 cv
265.883 561.684 265.816 561.672 265.77 561.652 cv
265.719 561.637 265.684 561.609 265.66 561.574 cv
265.637 561.543 265.625 561.508 265.629 561.469 cv
265.629 552.164 li
265.625 551.957 265.684 551.809 265.805 551.719 cv
265.922 551.633 266.051 551.59 266.191 551.586 cv
266.852 551.586 li
267.004 551.59 267.137 551.602 267.242 551.625 cv
267.344 551.652 267.438 551.695 267.523 551.754 cv
267.605 551.816 267.684 551.898 267.766 552.004 cv
267.84 552.113 267.922 552.25 268.008 552.406 cv
270.375 556.832 li
270.52 557.105 270.66 557.371 270.797 557.625 cv
270.93 557.883 271.059 558.137 271.188 558.383 cv
271.309 558.637 271.434 558.883 271.559 559.121 cv
271.68 559.363 271.801 559.605 271.926 559.848 cv
271.934 559.848 li
271.922 559.441 271.914 559.012 271.914 558.566 cv
271.906 558.121 271.906 557.695 271.91 557.285 cv
271.91 551.812 li
271.906 551.777 271.918 551.742 271.941 551.711 cv
271.965 551.68 272 551.652 272.055 551.629 cv
272.102 551.605 272.172 551.59 272.258 551.578 cv
272.344 551.57 272.453 551.566 272.594 551.562 cv
272.711 551.566 272.816 551.57 272.906 551.578 cv
272.992 551.59 273.059 551.605 273.109 551.629 cv
273.156 551.652 273.191 551.68 273.215 551.711 cv
273.234 551.742 273.246 551.777 273.25 551.812 cv
cp
f
281.801 561.477 mo
281.797 561.523 281.789 561.559 281.773 561.582 cv
281.754 561.613 281.719 561.637 281.676 561.656 cv
281.629 561.676 281.57 561.687 281.496 561.703 cv
281.418 561.711 281.324 561.719 281.219 561.719 cv
281.094 561.719 280.996 561.711 280.926 561.703 cv
280.848 561.687 280.789 561.676 280.746 561.656 cv
280.699 561.637 280.668 561.613 280.656 561.582 cv
280.637 561.559 280.629 561.523 280.633 561.477 cv
280.633 560.551 li
280.23 560.996 279.836 561.316 279.449 561.516 cv
279.055 561.719 278.66 561.816 278.266 561.82 cv
277.793 561.816 277.398 561.742 277.082 561.586 cv
276.762 561.434 276.504 561.223 276.309 560.953 cv
276.105 560.687 275.965 560.375 275.883 560.016 cv
275.793 559.66 275.75 559.227 275.754 558.719 cv
275.754 554.465 li
275.75 554.426 275.758 554.391 275.781 554.359 cv
275.797 554.332 275.832 554.309 275.887 554.281 cv
275.934 554.262 276.004 554.246 276.09 554.234 cv
276.172 554.23 276.273 554.227 276.402 554.223 cv
276.523 554.227 276.629 554.23 276.715 554.234 cv
276.797 554.246 276.863 554.262 276.91 554.281 cv
276.957 554.309 276.992 554.332 277.016 554.359 cv
277.035 554.391 277.043 554.426 277.047 554.465 cv
277.047 558.547 li
277.043 558.961 277.074 559.289 277.137 559.535 cv
277.195 559.781 277.285 559.992 277.41 560.164 cv
277.527 560.344 277.684 560.477 277.875 560.57 cv
278.059 560.668 278.277 560.719 278.527 560.715 cv
278.848 560.719 279.168 560.602 279.492 560.371 cv
279.809 560.145 280.148 559.809 280.508 559.363 cv
280.508 554.465 li
280.508 554.426 280.516 554.391 280.535 554.359 cv
280.551 554.332 280.586 554.309 280.641 554.281 cv
280.691 554.262 280.758 554.246 280.84 554.234 cv
280.918 554.23 281.023 554.227 281.156 554.223 cv
281.277 554.227 281.383 554.23 281.469 554.234 cv
281.551 554.246 281.613 554.262 281.66 554.281 cv
281.703 554.309 281.738 554.332 281.766 554.359 cv
281.785 554.391 281.797 554.426 281.801 554.465 cv
cp
f
294.578 561.477 mo
294.574 561.523 294.566 561.559 294.547 561.582 cv
294.523 561.613 294.488 561.637 294.445 561.656 cv
294.395 561.676 294.328 561.687 294.25 561.703 cv
294.164 561.711 294.063 561.719 293.938 561.719 cv
293.805 561.719 293.695 561.711 293.617 561.703 cv
293.531 561.687 293.465 561.676 293.418 561.656 cv
293.363 561.637 293.328 561.613 293.313 561.582 cv
293.289 561.559 293.281 561.523 293.281 561.477 cv
293.281 557.215 li
293.281 556.922 293.254 556.652 293.203 556.406 cv
293.148 556.164 293.066 555.953 292.953 555.773 cv
292.84 555.598 292.695 555.461 292.52 555.367 cv
292.34 555.273 292.129 555.227 291.895 555.227 cv
291.598 555.227 291.301 555.344 291.004 555.57 cv
290.699 555.805 290.371 556.137 290.016 556.574 cv
290.016 561.477 li
290.012 561.523 290 561.559 289.984 561.582 cv
289.961 561.613 289.93 561.637 289.883 561.656 cv
289.832 561.676 289.766 561.687 289.684 561.703 cv
289.598 561.711 289.492 561.719 289.371 561.719 cv
289.25 561.719 289.148 561.711 289.063 561.703 cv
288.977 561.687 288.906 561.676 288.859 561.656 cv
288.805 561.637 288.773 561.613 288.758 561.582 cv
288.738 561.559 288.727 561.523 288.73 561.477 cv
288.73 557.215 li
288.727 556.922 288.699 556.652 288.645 556.406 cv
288.586 556.164 288.5 555.953 288.387 555.773 cv
288.273 555.598 288.129 555.461 287.957 555.367 cv
287.777 555.273 287.57 555.227 287.336 555.227 cv
287.035 555.227 286.738 555.344 286.438 555.57 cv
286.137 555.805 285.809 556.137 285.457 556.574 cv
285.457 561.477 li
285.453 561.523 285.441 561.559 285.426 561.582 cv
285.402 561.613 285.371 561.637 285.324 561.656 cv
285.277 561.676 285.211 561.687 285.133 561.703 cv
285.047 561.711 284.941 561.719 284.813 561.719 cv
284.684 561.719 284.578 561.711 284.5 561.703 cv
284.414 561.687 284.348 561.676 284.301 561.656 cv
284.246 561.637 284.215 561.613 284.199 561.582 cv
284.18 561.559 284.168 561.523 284.172 561.477 cv
284.172 554.465 li
284.168 554.426 284.176 554.391 284.195 554.359 cv
284.207 554.332 284.238 554.309 284.289 554.281 cv
284.332 554.262 284.395 554.246 284.469 554.234 cv
284.539 554.23 284.633 554.227 284.758 554.223 cv
284.867 554.227 284.965 554.23 285.043 554.234 cv
285.117 554.246 285.176 554.262 285.219 554.281 cv
285.258 554.309 285.285 554.332 285.305 554.359 cv
285.32 554.391 285.328 554.426 285.332 554.465 cv
285.332 555.391 li
285.723 554.949 286.105 554.629 286.48 554.422 cv
286.848 554.219 287.227 554.113 287.609 554.113 cv
287.898 554.113 288.156 554.148 288.391 554.215 cv
288.617 554.285 288.824 554.379 289.004 554.5 cv
289.18 554.621 289.328 554.766 289.457 554.934 cv
289.578 555.105 289.684 555.297 289.77 555.5 cv
290 555.25 290.223 555.035 290.434 554.855 cv
290.645 554.684 290.848 554.539 291.043 554.426 cv
291.238 554.32 291.426 554.242 291.609 554.187 cv
291.793 554.141 291.98 554.113 292.168 554.113 cv
292.621 554.113 293 554.195 293.305 554.352 cv
293.609 554.516 293.855 554.727 294.051 554.988 cv
294.238 555.254 294.375 555.562 294.457 555.918 cv
294.535 556.273 294.574 556.648 294.578 557.043 cv
cp
f
303.375 557.875 mo
303.371 558.484 303.305 559.035 303.176 559.52 cv
303.039 560.008 302.844 560.422 302.59 560.762 cv
302.332 561.105 302.016 561.367 301.645 561.547 cv
301.27 561.73 300.844 561.816 300.359 561.82 cv
300.133 561.816 299.926 561.797 299.738 561.754 cv
299.551 561.707 299.363 561.637 299.184 561.539 cv
298.996 561.441 298.816 561.316 298.637 561.164 cv
298.453 561.016 298.262 560.836 298.063 560.621 cv
298.063 561.477 li
298.063 561.523 298.051 561.559 298.031 561.586 cv
298.008 561.621 297.973 561.645 297.93 561.66 cv
297.879 561.676 297.82 561.687 297.754 561.703 cv
297.68 561.711 297.59 561.719 297.484 561.719 cv
297.375 561.719 297.289 561.711 297.219 561.703 cv
297.145 561.687 297.082 561.676 297.039 561.66 cv
296.988 561.645 296.957 561.621 296.945 561.586 cv
296.926 561.559 296.918 561.523 296.922 561.477 cv
296.922 551.066 li
296.918 551.027 296.93 550.992 296.949 550.957 cv
296.965 550.93 296.996 550.902 297.051 550.879 cv
297.098 550.859 297.164 550.844 297.25 550.832 cv
297.328 550.824 297.434 550.82 297.563 550.816 cv
297.691 550.82 297.797 550.824 297.883 550.832 cv
297.961 550.844 298.027 550.859 298.074 550.879 cv
298.121 550.902 298.152 550.93 298.176 550.957 cv
298.191 550.992 298.203 551.027 298.207 551.066 cv
298.207 555.266 li
298.414 555.055 298.617 554.875 298.813 554.73 cv
299.008 554.586 299.195 554.469 299.383 554.375 cv
299.566 554.289 299.754 554.223 299.945 554.176 cv
300.129 554.137 300.328 554.113 300.539 554.113 cv
301.043 554.113 301.477 554.215 301.844 554.418 cv
302.203 554.621 302.496 554.895 302.723 555.23 cv
302.945 555.574 303.113 555.973 303.219 556.43 cv
303.32 556.887 303.371 557.367 303.375 557.875 cv
cp
302.043 558.023 mo
302.039 557.668 302.012 557.32 301.961 556.98 cv
301.902 556.645 301.809 556.348 301.672 556.086 cv
301.535 555.828 301.355 555.617 301.133 555.457 cv
300.906 555.301 300.625 555.223 300.293 555.219 cv
300.125 555.223 299.961 555.246 299.801 555.289 cv
299.637 555.34 299.473 555.418 299.305 555.523 cv
299.137 555.637 298.961 555.777 298.785 555.945 cv
298.602 556.121 298.41 556.336 298.207 556.59 cv
298.207 559.387 li
298.563 559.82 298.902 560.152 299.227 560.375 cv
299.551 560.605 299.887 560.719 300.238 560.715 cv
300.559 560.719 300.836 560.641 301.07 560.48 cv
301.297 560.328 301.484 560.121 301.629 559.859 cv
301.773 559.605 301.879 559.316 301.945 558.996 cv
302.008 558.68 302.039 558.355 302.043 558.023 cv
cp
f
311.285 557.668 mo
311.281 557.871 311.23 558.012 311.133 558.098 cv
311.027 558.184 310.91 558.227 310.785 558.227 cv
306.168 558.227 li
306.164 558.617 306.203 558.969 306.285 559.281 cv
306.359 559.594 306.492 559.863 306.676 560.082 cv
306.855 560.309 307.09 560.48 307.387 560.598 cv
307.676 560.723 308.035 560.781 308.461 560.777 cv
308.793 560.781 309.09 560.754 309.352 560.695 cv
309.613 560.645 309.84 560.582 310.031 560.512 cv
310.219 560.445 310.375 560.387 310.5 560.328 cv
310.621 560.277 310.715 560.25 310.777 560.246 cv
310.813 560.25 310.844 560.258 310.875 560.273 cv
310.902 560.293 310.926 560.32 310.945 560.355 cv
310.957 560.395 310.969 560.445 310.98 560.508 cv
310.984 560.574 310.988 560.652 310.992 560.746 cv
310.988 560.816 310.984 560.875 310.984 560.922 cv
310.977 560.969 310.973 561.012 310.965 561.051 cv
310.957 561.09 310.941 561.125 310.926 561.156 cv
310.902 561.187 310.879 561.219 310.855 561.246 cv
310.824 561.277 310.742 561.324 310.602 561.387 cv
310.461 561.453 310.277 561.516 310.055 561.578 cv
309.828 561.641 309.57 561.695 309.277 561.746 cv
308.984 561.793 308.672 561.816 308.34 561.82 cv
307.762 561.816 307.254 561.738 306.824 561.578 cv
306.387 561.418 306.023 561.18 305.73 560.863 cv
305.43 560.547 305.207 560.152 305.059 559.672 cv
304.91 559.195 304.836 558.637 304.836 558 cv
304.836 557.402 304.91 556.863 305.066 556.379 cv
305.219 555.902 305.445 555.492 305.742 555.156 cv
306.035 554.82 306.391 554.562 306.805 554.383 cv
307.219 554.203 307.684 554.113 308.199 554.113 cv
308.75 554.113 309.219 554.203 309.605 554.379 cv
309.992 554.559 310.309 554.797 310.563 555.094 cv
310.809 555.395 310.992 555.746 311.109 556.145 cv
311.223 556.551 311.281 556.98 311.285 557.434 cv
cp
309.992 557.285 mo
310.008 556.609 309.855 556.078 309.539 555.695 cv
309.223 555.312 308.754 555.121 308.137 555.117 cv
307.813 555.121 307.531 555.18 307.293 555.297 cv
307.051 555.418 306.852 555.578 306.691 555.773 cv
306.527 555.973 306.402 556.203 306.316 556.465 cv
306.227 556.727 306.176 557 306.168 557.285 cv
cp
f
317.352 554.922 mo
317.348 555.039 317.348 555.137 317.344 555.211 cv
317.336 555.293 317.324 555.355 317.313 555.395 cv
317.293 555.441 317.273 555.473 317.254 555.496 cv
317.227 555.52 317.195 555.531 317.156 555.531 cv
317.113 555.531 317.063 555.52 317.004 555.496 cv
316.941 555.473 316.871 555.449 316.801 555.426 cv
316.723 555.402 316.641 555.383 316.547 555.359 cv
316.453 555.344 316.352 555.332 316.242 555.328 cv
316.109 555.332 315.98 555.359 315.859 555.406 cv
315.734 555.461 315.605 555.547 315.469 555.664 cv
315.328 555.789 315.184 555.945 315.035 556.141 cv
314.883 556.336 314.715 556.578 314.535 556.863 cv
314.535 561.477 li
314.531 561.523 314.52 561.559 314.504 561.582 cv
314.48 561.613 314.449 561.637 314.402 561.656 cv
314.355 561.676 314.289 561.687 314.211 561.703 cv
314.125 561.711 314.02 561.719 313.891 561.719 cv
313.762 561.719 313.656 561.711 313.578 561.703 cv
313.492 561.687 313.426 561.676 313.379 561.656 cv
313.324 561.637 313.293 561.613 313.277 561.582 cv
313.258 561.559 313.246 561.523 313.25 561.477 cv
313.25 554.465 li
313.246 554.426 313.254 554.391 313.273 554.359 cv
313.285 554.332 313.316 554.309 313.367 554.281 cv
313.41 554.262 313.473 554.246 313.547 554.234 cv
313.617 554.23 313.711 554.227 313.836 554.223 cv
313.945 554.227 314.043 554.23 314.121 554.234 cv
314.195 554.246 314.254 554.262 314.297 554.281 cv
314.336 554.309 314.363 554.332 314.383 554.359 cv
314.398 554.391 314.406 554.426 314.41 554.465 cv
314.41 555.484 li
314.598 555.203 314.781 554.977 314.953 554.801 cv
315.121 554.625 315.281 554.484 315.434 554.383 cv
315.582 554.281 315.73 554.211 315.879 554.172 cv
316.027 554.133 316.176 554.113 316.328 554.113 cv
316.395 554.113 316.473 554.117 316.559 554.125 cv
316.645 554.133 316.734 554.148 316.828 554.168 cv
316.922 554.191 317.004 554.215 317.082 554.238 cv
317.152 554.266 317.207 554.293 317.242 554.316 cv
317.27 554.348 317.289 554.371 317.305 554.391 cv
317.313 554.418 317.324 554.449 317.332 554.48 cv
317.34 554.52 317.344 554.57 317.348 554.641 cv
317.348 554.711 317.348 554.805 317.352 554.922 cv
cp
f
329.109 557.891 mo
329.105 558.469 329.031 558.996 328.883 559.473 cv
328.73 559.957 328.504 560.371 328.207 560.715 cv
327.906 561.066 327.531 561.336 327.086 561.527 cv
326.633 561.723 326.113 561.816 325.523 561.82 cv
324.945 561.816 324.441 561.734 324.016 561.562 cv
323.586 561.395 323.23 561.145 322.945 560.816 cv
322.656 560.488 322.441 560.094 322.305 559.625 cv
322.164 559.16 322.098 558.629 322.098 558.031 cv
322.098 557.465 322.168 556.937 322.316 556.457 cv
322.461 555.977 322.688 555.562 322.988 555.211 cv
323.285 554.863 323.656 554.594 324.105 554.402 cv
324.551 554.211 325.074 554.113 325.672 554.113 cv
326.25 554.113 326.75 554.199 327.18 554.371 cv
327.605 554.543 327.965 554.793 328.25 555.121 cv
328.535 555.449 328.75 555.848 328.895 556.312 cv
329.035 556.781 329.105 557.309 329.109 557.891 cv
cp
327.777 557.977 mo
327.773 557.602 327.738 557.242 327.672 556.902 cv
327.598 556.566 327.48 556.273 327.32 556.016 cv
327.156 555.766 326.938 555.562 326.66 555.41 cv
326.379 555.266 326.031 555.191 325.621 555.187 cv
325.234 555.191 324.906 555.258 324.633 555.391 cv
324.355 555.527 324.129 555.719 323.953 555.965 cv
323.773 556.211 323.641 556.504 323.559 556.84 cv
323.469 557.18 323.426 557.547 323.43 557.945 cv
323.426 558.332 323.461 558.695 323.535 559.031 cv
323.602 559.371 323.719 559.664 323.887 559.914 cv
324.051 560.168 324.273 560.371 324.551 560.516 cv
324.828 560.668 325.176 560.742 325.59 560.738 cv
325.965 560.742 326.293 560.672 326.574 560.535 cv
326.852 560.402 327.078 560.215 327.258 559.965 cv
327.434 559.723 327.563 559.43 327.648 559.094 cv
327.73 558.758 327.773 558.387 327.777 557.977 cv
cp
f
334.84 551.578 mo
334.836 551.68 334.832 551.758 334.824 551.816 cv
334.813 551.879 334.801 551.93 334.789 551.961 cv
334.773 552 334.758 552.023 334.738 552.035 cv
334.715 552.051 334.688 552.059 334.66 552.055 cv
334.621 552.059 334.574 552.047 334.523 552.02 cv
334.465 552 334.398 551.973 334.324 551.941 cv
334.242 551.914 334.152 551.887 334.047 551.863 cv
333.938 551.84 333.813 551.828 333.68 551.828 cv
333.484 551.828 333.32 551.859 333.188 551.922 cv
333.047 551.984 332.938 552.082 332.859 552.215 cv
332.773 552.348 332.715 552.52 332.68 552.73 cv
332.641 552.941 332.621 553.199 332.625 553.496 cv
332.625 554.262 li
334.191 554.262 li
334.23 554.266 334.266 554.273 334.297 554.289 cv
334.324 554.309 334.352 554.34 334.375 554.383 cv
334.398 554.43 334.414 554.488 334.43 554.551 cv
334.438 554.621 334.445 554.703 334.449 554.797 cv
334.445 554.988 334.422 555.121 334.379 555.203 cv
334.328 555.289 334.266 555.332 334.191 555.328 cv
332.625 555.328 li
332.625 561.477 li
332.621 561.523 332.613 561.559 332.594 561.582 cv
332.57 561.613 332.535 561.637 332.488 561.656 cv
332.438 561.676 332.371 561.687 332.289 561.703 cv
332.203 561.711 332.098 561.719 331.98 561.719 cv
331.852 561.719 331.75 561.711 331.668 561.703 cv
331.582 561.687 331.516 561.676 331.469 561.656 cv
331.418 561.637 331.383 561.613 331.363 561.582 cv
331.34 561.559 331.328 561.523 331.332 561.477 cv
331.332 555.328 li
330.344 555.328 li
330.258 555.332 330.195 555.289 330.156 555.203 cv
330.113 555.121 330.09 554.988 330.094 554.797 cv
330.09 554.703 330.098 554.621 330.109 554.551 cv
330.117 554.488 330.133 554.43 330.156 554.383 cv
330.176 554.34 330.199 554.309 330.234 554.289 cv
330.262 554.273 330.301 554.266 330.344 554.262 cv
331.332 554.262 li
331.332 553.535 li
331.328 553.051 331.375 552.633 331.469 552.277 cv
331.559 551.93 331.695 551.641 331.883 551.418 cv
332.066 551.195 332.301 551.031 332.59 550.922 cv
332.871 550.816 333.207 550.762 333.594 550.762 cv
333.77 550.762 333.945 550.781 334.121 550.812 cv
334.289 550.852 334.422 550.887 334.52 550.922 cv
334.609 550.965 334.672 551 334.707 551.027 cv
334.734 551.062 334.762 551.102 334.785 551.148 cv
334.805 551.199 334.816 551.262 334.828 551.328 cv
334.832 551.402 334.836 551.484 334.84 551.578 cv
cp
f
345.039 558.844 mo
345.035 559.316 344.949 559.738 344.777 560.105 cv
344.602 560.48 344.359 560.793 344.051 561.047 cv
343.742 561.305 343.379 561.496 342.961 561.625 cv
342.539 561.754 342.09 561.816 341.609 561.82 cv
341.27 561.816 340.953 561.789 340.668 561.734 cv
340.379 561.676 340.125 561.609 339.898 561.523 cv
339.672 561.445 339.48 561.359 339.328 561.266 cv
339.172 561.18 339.066 561.102 339.008 561.039 cv
338.949 560.977 338.906 560.898 338.879 560.805 cv
338.848 560.711 338.832 560.582 338.836 560.418 cv
338.832 560.305 338.836 560.211 338.852 560.133 cv
338.859 560.059 338.875 559.996 338.898 559.949 cv
338.914 559.902 338.941 559.871 338.977 559.852 cv
339.004 559.836 339.039 559.828 339.082 559.824 cv
339.152 559.828 339.254 559.871 339.391 559.957 cv
339.52 560.047 339.691 560.145 339.902 560.246 cv
340.109 560.355 340.359 560.453 340.652 560.539 cv
340.945 560.633 341.285 560.676 341.672 560.676 cv
341.961 560.676 342.227 560.637 342.469 560.559 cv
342.707 560.48 342.914 560.371 343.094 560.227 cv
343.266 560.086 343.402 559.91 343.496 559.699 cv
343.59 559.492 343.637 559.258 343.637 558.992 cv
343.637 558.711 343.57 558.465 343.441 558.258 cv
343.309 558.059 343.137 557.883 342.926 557.727 cv
342.711 557.578 342.469 557.437 342.195 557.305 cv
341.922 557.18 341.641 557.047 341.359 556.914 cv
341.07 556.781 340.793 556.637 340.523 556.473 cv
340.254 556.316 340.012 556.125 339.801 555.906 cv
339.582 555.687 339.41 555.434 339.281 555.137 cv
339.145 554.848 339.078 554.496 339.082 554.082 cv
339.078 553.664 339.156 553.289 339.313 552.957 cv
339.465 552.629 339.676 552.352 339.953 552.125 cv
340.223 551.906 340.547 551.734 340.926 551.617 cv
341.301 551.5 341.711 551.441 342.148 551.441 cv
342.367 551.441 342.59 551.461 342.82 551.5 cv
343.043 551.539 343.254 551.59 343.457 551.652 cv
343.652 551.719 343.832 551.793 343.992 551.871 cv
344.145 551.953 344.246 552.02 344.301 552.066 cv
344.348 552.121 344.383 552.16 344.398 552.184 cv
344.414 552.215 344.426 552.25 344.438 552.293 cv
344.445 552.34 344.453 552.395 344.461 552.453 cv
344.465 552.52 344.469 552.598 344.469 552.695 cv
344.469 552.789 344.465 552.875 344.457 552.945 cv
344.449 553.023 344.438 553.082 344.422 553.129 cv
344.406 553.176 344.383 553.211 344.355 553.234 cv
344.324 553.258 344.293 553.27 344.258 553.27 cv
344.199 553.27 344.109 553.234 343.988 553.164 cv
343.863 553.094 343.711 553.012 343.539 552.918 cv
343.359 552.828 343.152 552.746 342.914 552.668 cv
342.668 552.594 342.398 552.555 342.102 552.555 cv
341.82 552.555 341.574 552.594 341.367 552.668 cv
341.156 552.746 340.984 552.848 340.852 552.969 cv
340.715 553.094 340.613 553.238 340.547 553.41 cv
340.48 553.582 340.449 553.766 340.449 553.957 cv
340.449 554.242 340.512 554.484 340.641 554.684 cv
340.77 554.887 340.941 555.066 341.16 555.219 cv
341.371 555.379 341.617 555.52 341.895 555.648 cv
342.168 555.781 342.449 555.914 342.738 556.043 cv
343.023 556.176 343.305 556.32 343.578 556.477 cv
343.852 556.637 344.098 556.824 344.316 557.039 cv
344.531 557.258 344.703 557.512 344.84 557.805 cv
344.969 558.098 345.035 558.445 345.039 558.844 cv
cp
f
352.805 561.477 mo
352.801 561.523 352.793 561.559 352.777 561.582 cv
352.758 561.613 352.723 561.637 352.68 561.656 cv
352.633 561.676 352.574 561.687 352.5 561.703 cv
352.422 561.711 352.328 561.719 352.223 561.719 cv
352.098 561.719 352 561.711 351.93 561.703 cv
351.852 561.687 351.793 561.676 351.75 561.656 cv
351.703 561.637 351.672 561.613 351.66 561.582 cv
351.641 561.559 351.633 561.523 351.637 561.477 cv
351.637 560.551 li
351.234 560.996 350.84 561.316 350.453 561.516 cv
350.059 561.719 349.664 561.816 349.27 561.82 cv
348.797 561.816 348.402 561.742 348.086 561.586 cv
347.766 561.434 347.508 561.223 347.313 560.953 cv
347.109 560.687 346.969 560.375 346.887 560.016 cv
346.797 559.66 346.754 559.227 346.758 558.719 cv
346.758 554.465 li
346.754 554.426 346.762 554.391 346.785 554.359 cv
346.801 554.332 346.836 554.309 346.891 554.281 cv
346.938 554.262 347.008 554.246 347.094 554.234 cv
347.176 554.23 347.277 554.227 347.406 554.223 cv
347.527 554.227 347.633 554.23 347.719 554.234 cv
347.801 554.246 347.867 554.262 347.914 554.281 cv
347.961 554.309 347.996 554.332 348.02 554.359 cv
348.039 554.391 348.047 554.426 348.051 554.465 cv
348.051 558.547 li
348.047 558.961 348.078 559.289 348.141 559.535 cv
348.199 559.781 348.289 559.992 348.414 560.164 cv
348.531 560.344 348.688 560.477 348.879 560.57 cv
349.063 560.668 349.281 560.719 349.531 560.715 cv
349.852 560.719 350.172 560.602 350.496 560.371 cv
350.813 560.145 351.152 559.809 351.512 559.363 cv
351.512 554.465 li
351.512 554.426 351.52 554.391 351.539 554.359 cv
351.555 554.332 351.59 554.309 351.645 554.281 cv
351.695 554.262 351.762 554.246 351.844 554.234 cv
351.922 554.23 352.027 554.227 352.16 554.223 cv
352.281 554.227 352.387 554.23 352.473 554.234 cv
352.555 554.246 352.617 554.262 352.664 554.281 cv
352.707 554.309 352.742 554.332 352.77 554.359 cv
352.789 554.391 352.801 554.426 352.805 554.465 cv
cp
f
361.66 557.875 mo
361.656 558.484 361.59 559.035 361.461 559.52 cv
361.324 560.008 361.129 560.422 360.875 560.762 cv
360.617 561.105 360.301 561.367 359.93 561.547 cv
359.555 561.73 359.129 561.816 358.645 561.82 cv
358.418 561.816 358.211 561.797 358.023 561.754 cv
357.836 561.707 357.648 561.637 357.469 561.539 cv
357.281 561.441 357.102 561.316 356.922 561.164 cv
356.738 561.016 356.547 560.836 356.348 560.621 cv
356.348 561.477 li
356.348 561.523 356.336 561.559 356.316 561.586 cv
356.293 561.621 356.258 561.645 356.215 561.66 cv
356.164 561.676 356.105 561.687 356.039 561.703 cv
355.965 561.711 355.875 561.719 355.77 561.719 cv
355.66 561.719 355.574 561.711 355.504 561.703 cv
355.43 561.687 355.367 561.676 355.324 561.66 cv
355.273 561.645 355.242 561.621 355.23 561.586 cv
355.211 561.559 355.203 561.523 355.207 561.477 cv
355.207 551.066 li
355.203 551.027 355.215 550.992 355.234 550.957 cv
355.25 550.93 355.281 550.902 355.336 550.879 cv
355.383 550.859 355.449 550.844 355.535 550.832 cv
355.613 550.824 355.719 550.82 355.848 550.816 cv
355.977 550.82 356.082 550.824 356.168 550.832 cv
356.246 550.844 356.313 550.859 356.359 550.879 cv
356.406 550.902 356.438 550.93 356.461 550.957 cv
356.477 550.992 356.488 551.027 356.492 551.066 cv
356.492 555.266 li
356.699 555.055 356.902 554.875 357.098 554.73 cv
357.293 554.586 357.48 554.469 357.668 554.375 cv
357.852 554.289 358.039 554.223 358.23 554.176 cv
358.414 554.137 358.613 554.113 358.824 554.113 cv
359.328 554.113 359.762 554.215 360.129 554.418 cv
360.488 554.621 360.781 554.895 361.008 555.23 cv
361.23 555.574 361.398 555.973 361.504 556.43 cv
361.605 556.887 361.656 557.367 361.66 557.875 cv
cp
360.328 558.023 mo
360.324 557.668 360.297 557.32 360.246 556.98 cv
360.188 556.645 360.094 556.348 359.957 556.086 cv
359.82 555.828 359.641 555.617 359.418 555.457 cv
359.191 555.301 358.91 555.223 358.578 555.219 cv
358.41 555.223 358.246 555.246 358.086 555.289 cv
357.922 555.34 357.758 555.418 357.59 555.523 cv
357.422 555.637 357.246 555.777 357.07 555.945 cv
356.887 556.121 356.695 556.336 356.492 556.59 cv
356.492 559.387 li
356.848 559.82 357.188 560.152 357.512 560.375 cv
357.836 560.605 358.172 560.719 358.523 560.715 cv
358.844 560.719 359.121 560.641 359.355 560.48 cv
359.582 560.328 359.77 560.121 359.914 559.859 cv
360.059 559.605 360.164 559.316 360.23 558.996 cv
360.293 558.68 360.324 558.355 360.328 558.023 cv
cp
f
366.816 557.738 mo
366.816 557.941 366.793 558.078 366.746 558.156 cv
366.699 558.234 366.629 558.273 366.543 558.273 cv
363.285 558.273 li
363.191 558.273 363.125 558.234 363.078 558.152 cv
363.031 558.074 363.008 557.937 363.008 557.738 cv
363.008 557.543 363.031 557.402 363.078 557.324 cv
363.125 557.246 363.191 557.207 363.285 557.207 cv
366.543 557.207 li
366.582 557.207 366.621 557.215 366.656 557.23 cv
366.688 557.246 366.715 557.277 366.742 557.32 cv
366.762 557.367 366.781 557.422 366.797 557.488 cv
366.809 557.559 366.816 557.645 366.816 557.738 cv
cp
f
370.07 561.469 mo
370.066 561.512 370.059 561.547 370.039 561.578 cv
370.016 561.609 369.977 561.637 369.93 561.652 cv
369.875 561.672 369.809 561.684 369.723 561.699 cv
369.637 561.711 369.527 561.719 369.402 561.719 cv
369.273 561.719 369.168 561.711 369.082 561.699 cv
368.992 561.684 368.922 561.672 368.871 561.652 cv
368.816 561.637 368.781 561.609 368.762 561.578 cv
368.738 561.547 368.727 561.512 368.73 561.469 cv
368.73 551.789 li
368.727 551.75 368.738 551.715 368.766 551.68 cv
368.785 551.652 368.824 551.625 368.883 551.605 cv
368.934 551.59 369.004 551.574 369.094 551.559 cv
369.176 551.547 369.277 551.543 369.402 551.539 cv
369.527 551.543 369.637 551.547 369.723 551.559 cv
369.809 551.574 369.875 551.59 369.93 551.605 cv
369.977 551.625 370.016 551.652 370.039 551.68 cv
370.059 551.715 370.066 551.75 370.07 551.789 cv
cp
f
383.059 561.477 mo
383.055 561.523 383.047 561.559 383.027 561.582 cv
383.004 561.613 382.969 561.637 382.926 561.656 cv
382.875 561.676 382.809 561.687 382.73 561.703 cv
382.645 561.711 382.543 561.719 382.418 561.719 cv
382.285 561.719 382.176 561.711 382.098 561.703 cv
382.012 561.687 381.945 561.676 381.898 561.656 cv
381.844 561.637 381.809 561.613 381.793 561.582 cv
381.77 561.559 381.762 561.523 381.762 561.477 cv
381.762 557.215 li
381.762 556.922 381.734 556.652 381.684 556.406 cv
381.629 556.164 381.547 555.953 381.434 555.773 cv
381.32 555.598 381.176 555.461 381 555.367 cv
380.82 555.273 380.609 555.227 380.375 555.227 cv
380.078 555.227 379.781 555.344 379.484 555.57 cv
379.18 555.805 378.852 556.137 378.496 556.574 cv
378.496 561.477 li
378.492 561.523 378.48 561.559 378.465 561.582 cv
378.441 561.613 378.41 561.637 378.363 561.656 cv
378.313 561.676 378.246 561.687 378.164 561.703 cv
378.078 561.711 377.973 561.719 377.852 561.719 cv
377.73 561.719 377.629 561.711 377.543 561.703 cv
377.457 561.687 377.387 561.676 377.34 561.656 cv
377.285 561.637 377.254 561.613 377.238 561.582 cv
377.219 561.559 377.207 561.523 377.211 561.477 cv
377.211 557.215 li
377.207 556.922 377.18 556.652 377.125 556.406 cv
377.066 556.164 376.98 555.953 376.867 555.773 cv
376.754 555.598 376.609 555.461 376.438 555.367 cv
376.258 555.273 376.051 555.227 375.816 555.227 cv
375.516 555.227 375.219 555.344 374.918 555.57 cv
374.617 555.805 374.289 556.137 373.938 556.574 cv
373.938 561.477 li
373.934 561.523 373.922 561.559 373.906 561.582 cv
373.883 561.613 373.852 561.637 373.805 561.656 cv
373.758 561.676 373.691 561.687 373.613 561.703 cv
373.527 561.711 373.422 561.719 373.293 561.719 cv
373.164 561.719 373.059 561.711 372.98 561.703 cv
372.895 561.687 372.828 561.676 372.781 561.656 cv
372.727 561.637 372.695 561.613 372.68 561.582 cv
372.66 561.559 372.648 561.523 372.652 561.477 cv
372.652 554.465 li
372.648 554.426 372.656 554.391 372.676 554.359 cv
372.688 554.332 372.719 554.309 372.77 554.281 cv
372.813 554.262 372.875 554.246 372.949 554.234 cv
373.02 554.23 373.113 554.227 373.238 554.223 cv
373.348 554.227 373.445 554.23 373.523 554.234 cv
373.598 554.246 373.656 554.262 373.699 554.281 cv
373.738 554.309 373.766 554.332 373.785 554.359 cv
373.801 554.391 373.809 554.426 373.813 554.465 cv
373.813 555.391 li
374.203 554.949 374.586 554.629 374.961 554.422 cv
375.328 554.219 375.707 554.113 376.09 554.113 cv
376.379 554.113 376.637 554.148 376.871 554.215 cv
377.098 554.285 377.305 554.379 377.484 554.5 cv
377.66 554.621 377.809 554.766 377.938 554.934 cv
378.059 555.105 378.164 555.297 378.25 555.5 cv
378.48 555.25 378.703 555.035 378.914 554.855 cv
379.125 554.684 379.328 554.539 379.523 554.426 cv
379.719 554.32 379.906 554.242 380.09 554.187 cv
380.273 554.141 380.461 554.113 380.648 554.113 cv
381.102 554.113 381.48 554.195 381.785 554.352 cv
382.09 554.516 382.336 554.727 382.531 554.988 cv
382.719 555.254 382.855 555.562 382.938 555.918 cv
383.016 556.273 383.055 556.648 383.059 557.043 cv
cp
f
390.688 561.484 mo
390.684 561.547 390.664 561.594 390.625 561.625 cv
390.582 561.656 390.523 561.68 390.453 561.695 cv
390.375 561.711 390.27 561.719 390.133 561.719 cv
389.996 561.719 389.887 561.711 389.809 561.695 cv
389.723 561.68 389.664 561.656 389.633 561.625 cv
389.594 561.594 389.578 561.547 389.582 561.484 cv
389.582 560.785 li
389.273 561.113 388.93 561.367 388.555 561.547 cv
388.176 561.73 387.777 561.816 387.359 561.82 cv
386.984 561.816 386.652 561.77 386.355 561.676 cv
386.059 561.578 385.805 561.441 385.594 561.258 cv
385.383 561.078 385.219 560.855 385.102 560.59 cv
384.984 560.328 384.926 560.027 384.93 559.684 cv
384.926 559.293 385.004 558.949 385.168 558.656 cv
385.324 558.367 385.559 558.125 385.863 557.934 cv
386.164 557.742 386.531 557.598 386.969 557.5 cv
387.402 557.406 387.895 557.359 388.441 557.355 cv
389.41 557.355 li
389.41 556.809 li
389.406 556.539 389.379 556.301 389.324 556.094 cv
389.266 555.887 389.172 555.715 389.047 555.574 cv
388.914 555.437 388.75 555.332 388.551 555.262 cv
388.344 555.191 388.094 555.156 387.805 555.156 cv
387.484 555.156 387.199 555.195 386.949 555.27 cv
386.691 555.348 386.473 555.43 386.285 555.52 cv
386.098 555.613 385.938 555.699 385.813 555.77 cv
385.68 555.848 385.586 555.883 385.527 555.883 cv
385.484 555.883 385.449 555.875 385.418 555.852 cv
385.387 555.836 385.359 555.805 385.336 555.758 cv
385.313 555.719 385.293 555.664 385.285 555.598 cv
385.27 555.535 385.266 555.465 385.27 555.383 cv
385.266 555.258 385.273 555.152 385.297 555.074 cv
385.313 555 385.359 554.93 385.43 554.859 cv
385.5 554.793 385.621 554.715 385.793 554.625 cv
385.965 554.535 386.16 554.453 386.383 554.375 cv
386.605 554.305 386.852 554.242 387.117 554.187 cv
387.383 554.141 387.648 554.113 387.922 554.113 cv
388.422 554.113 388.852 554.172 389.203 554.285 cv
389.555 554.402 389.84 554.57 390.063 554.789 cv
390.277 555.012 390.438 555.285 390.539 555.609 cv
390.637 555.941 390.684 556.324 390.688 556.754 cv
cp
389.41 558.281 mo
388.309 558.281 li
387.953 558.285 387.648 558.316 387.391 558.371 cv
387.129 558.434 386.914 558.52 386.742 558.637 cv
386.57 558.754 386.445 558.895 386.367 559.059 cv
386.285 559.223 386.242 559.41 386.246 559.621 cv
386.242 559.988 386.359 560.281 386.59 560.492 cv
386.82 560.711 387.145 560.816 387.563 560.816 cv
387.898 560.816 388.211 560.73 388.5 560.559 cv
388.789 560.387 389.09 560.125 389.41 559.77 cv
cp
f
398.906 554.781 mo
398.902 554.965 398.879 555.098 398.832 555.176 cv
398.781 555.258 398.719 555.297 398.645 555.297 cv
397.637 555.297 li
397.816 555.484 397.945 555.691 398.02 555.918 cv
398.09 556.145 398.125 556.379 398.129 556.621 cv
398.125 557.027 398.059 557.387 397.934 557.699 cv
397.801 558.012 397.617 558.277 397.375 558.488 cv
397.133 558.707 396.844 558.871 396.516 558.984 cv
396.18 559.102 395.813 559.16 395.41 559.156 cv
395.121 559.16 394.848 559.121 394.594 559.043 cv
394.332 558.969 394.137 558.875 394 558.758 cv
393.906 558.855 393.828 558.961 393.77 559.078 cv
393.707 559.199 393.676 559.336 393.68 559.488 cv
393.676 559.672 393.762 559.824 393.934 559.941 cv
394.102 560.066 394.324 560.129 394.605 560.137 cv
396.438 560.215 li
396.785 560.227 397.102 560.273 397.395 560.359 cv
397.684 560.445 397.938 560.57 398.152 560.727 cv
398.363 560.887 398.531 561.078 398.652 561.309 cv
398.77 561.543 398.828 561.812 398.832 562.117 cv
398.828 562.437 398.762 562.742 398.629 563.035 cv
398.492 563.324 398.285 563.578 398.008 563.801 cv
397.727 564.02 397.371 564.195 396.941 564.324 cv
396.512 564.449 396.004 564.512 395.418 564.516 cv
394.848 564.512 394.363 564.465 393.969 564.371 cv
393.57 564.273 393.246 564.141 392.992 563.977 cv
392.738 563.809 392.555 563.613 392.441 563.383 cv
392.324 563.148 392.266 562.895 392.27 562.629 cv
392.266 562.457 392.285 562.293 392.332 562.133 cv
392.371 561.969 392.434 561.816 392.52 561.672 cv
392.602 561.527 392.711 561.391 392.84 561.254 cv
392.965 561.125 393.109 560.992 393.281 560.863 cv
393.023 560.734 392.836 560.57 392.715 560.371 cv
392.594 560.176 392.535 559.965 392.535 559.73 cv
392.535 559.418 392.598 559.133 392.727 558.883 cv
392.855 558.633 393.016 558.41 393.211 558.211 cv
393.047 558.02 392.922 557.805 392.828 557.562 cv
392.734 557.324 392.688 557.031 392.688 556.684 cv
392.688 556.289 392.754 555.93 392.891 555.609 cv
393.023 555.293 393.211 555.027 393.453 554.809 cv
393.691 554.594 393.977 554.426 394.313 554.305 cv
394.645 554.191 395.012 554.133 395.41 554.129 cv
395.621 554.133 395.82 554.145 396.004 554.164 cv
396.188 554.191 396.359 554.223 396.523 554.262 cv
398.645 554.262 li
398.73 554.266 398.797 554.309 398.84 554.391 cv
398.883 554.48 398.902 554.609 398.906 554.781 cv
cp
396.898 556.629 mo
396.895 556.156 396.762 555.785 396.504 555.512 cv
396.238 555.246 395.867 555.109 395.387 555.109 cv
395.133 555.109 394.914 555.152 394.734 555.234 cv
394.547 555.32 394.395 555.434 394.273 555.578 cv
394.152 555.727 394.063 555.895 394.004 556.082 cv
393.941 556.27 393.91 556.469 393.914 556.676 cv
393.91 557.141 394.043 557.504 394.305 557.77 cv
394.566 558.035 394.934 558.168 395.41 558.164 cv
395.66 558.168 395.879 558.129 396.07 558.043 cv
396.254 557.965 396.41 557.852 396.535 557.711 cv
396.656 557.57 396.746 557.406 396.809 557.215 cv
396.863 557.031 396.895 556.836 396.898 556.629 cv
cp
397.543 562.187 mo
397.539 561.883 397.414 561.652 397.172 561.488 cv
396.922 561.328 396.59 561.238 396.172 561.227 cv
394.355 561.164 li
394.188 561.297 394.051 561.422 393.949 561.535 cv
393.84 561.652 393.758 561.762 393.695 561.871 cv
393.633 561.977 393.59 562.082 393.566 562.187 cv
393.543 562.289 393.531 562.395 393.531 562.504 cv
393.531 562.84 393.699 563.094 394.043 563.273 cv
394.383 563.445 394.863 563.535 395.48 563.535 cv
395.867 563.535 396.191 563.496 396.457 563.422 cv
396.715 563.344 396.926 563.242 397.09 563.121 cv
397.246 562.992 397.363 562.852 397.438 562.691 cv
397.504 562.531 397.539 562.363 397.543 562.187 cv
cp
f
406.469 557.668 mo
406.465 557.871 406.414 558.012 406.316 558.098 cv
406.211 558.184 406.094 558.227 405.969 558.227 cv
401.352 558.227 li
401.348 558.617 401.387 558.969 401.469 559.281 cv
401.543 559.594 401.676 559.863 401.859 560.082 cv
402.039 560.309 402.273 560.48 402.57 560.598 cv
402.859 560.723 403.219 560.781 403.645 560.777 cv
403.977 560.781 404.273 560.754 404.535 560.695 cv
404.797 560.645 405.023 560.582 405.215 560.512 cv
405.402 560.445 405.559 560.387 405.684 560.328 cv
405.805 560.277 405.898 560.25 405.961 560.246 cv
405.996 560.25 406.027 560.258 406.059 560.273 cv
406.086 560.293 406.109 560.32 406.129 560.355 cv
406.141 560.395 406.152 560.445 406.164 560.508 cv
406.168 560.574 406.172 560.652 406.176 560.746 cv
406.172 560.816 406.168 560.875 406.168 560.922 cv
406.16 560.969 406.156 561.012 406.148 561.051 cv
406.141 561.09 406.125 561.125 406.109 561.156 cv
406.086 561.187 406.063 561.219 406.039 561.246 cv
406.008 561.277 405.926 561.324 405.785 561.387 cv
405.645 561.453 405.461 561.516 405.238 561.578 cv
405.012 561.641 404.754 561.695 404.461 561.746 cv
404.168 561.793 403.855 561.816 403.523 561.82 cv
402.945 561.816 402.438 561.738 402.008 561.578 cv
401.57 561.418 401.207 561.18 400.914 560.863 cv
400.613 560.547 400.391 560.152 400.242 559.672 cv
400.094 559.195 400.02 558.637 400.02 558 cv
400.02 557.402 400.094 556.863 400.25 556.379 cv
400.402 555.902 400.629 555.492 400.926 555.156 cv
401.219 554.82 401.574 554.562 401.988 554.383 cv
402.402 554.203 402.867 554.113 403.383 554.113 cv
403.934 554.113 404.402 554.203 404.789 554.379 cv
405.176 554.559 405.492 554.797 405.746 555.094 cv
405.992 555.395 406.176 555.746 406.293 556.145 cv
406.406 556.551 406.465 556.98 406.469 557.434 cv
cp
405.176 557.285 mo
405.191 556.609 405.039 556.078 404.723 555.695 cv
404.406 555.312 403.938 555.121 403.32 555.117 cv
402.996 555.121 402.715 555.18 402.477 555.297 cv
402.234 555.418 402.035 555.578 401.875 555.773 cv
401.711 555.973 401.586 556.203 401.5 556.465 cv
401.41 556.727 401.359 557 401.352 557.285 cv
cp
f
412.836 559.566 mo
412.832 559.93 412.766 560.25 412.637 560.527 cv
412.504 560.809 412.316 561.043 412.074 561.234 cv
411.828 561.43 411.535 561.574 411.199 561.672 cv
410.859 561.77 410.488 561.816 410.086 561.82 cv
409.832 561.816 409.594 561.797 409.371 561.762 cv
409.145 561.719 408.945 561.672 408.766 561.613 cv
408.586 561.555 408.434 561.492 408.309 561.426 cv
408.184 561.363 408.09 561.305 408.035 561.25 cv
407.977 561.199 407.938 561.129 407.914 561.031 cv
407.887 560.941 407.875 560.812 407.875 560.652 cv
407.875 560.555 407.879 560.473 407.891 560.402 cv
407.898 560.336 407.91 560.281 407.93 560.238 cv
407.941 560.199 407.965 560.168 407.992 560.148 cv
408.02 560.133 408.051 560.125 408.09 560.121 cv
408.145 560.125 408.23 560.16 408.344 560.227 cv
408.453 560.301 408.59 560.379 408.758 560.457 cv
408.918 560.543 409.109 560.617 409.336 560.687 cv
409.555 560.758 409.813 560.793 410.109 560.793 cv
410.324 560.793 410.523 560.77 410.703 560.723 cv
410.879 560.676 411.031 560.609 411.16 560.516 cv
411.289 560.43 411.391 560.312 411.461 560.168 cv
411.531 560.031 411.566 559.863 411.566 559.668 cv
411.566 559.473 411.516 559.309 411.414 559.172 cv
411.313 559.039 411.176 558.918 411.012 558.812 cv
410.844 558.711 410.66 558.621 410.453 558.535 cv
410.242 558.457 410.027 558.371 409.809 558.281 cv
409.59 558.195 409.375 558.094 409.164 557.98 cv
408.953 557.871 408.762 557.738 408.598 557.574 cv
408.426 557.418 408.293 557.223 408.195 556.996 cv
408.09 556.773 408.039 556.508 408.043 556.195 cv
408.039 555.922 408.094 555.656 408.203 555.402 cv
408.309 555.152 408.469 554.934 408.684 554.742 cv
408.895 554.555 409.16 554.402 409.48 554.285 cv
409.801 554.172 410.172 554.113 410.602 554.113 cv
410.785 554.113 410.973 554.129 411.16 554.16 cv
411.344 554.191 411.512 554.23 411.668 554.277 cv
411.816 554.324 411.945 554.375 412.055 554.43 cv
412.156 554.484 412.238 554.535 412.297 554.574 cv
412.348 554.621 412.383 554.656 412.406 554.684 cv
412.422 554.715 412.438 554.75 412.445 554.785 cv
412.453 554.828 412.461 554.875 412.469 554.93 cv
412.477 554.988 412.48 555.059 412.48 555.141 cv
412.48 555.23 412.477 555.309 412.469 555.371 cv
412.461 555.441 412.445 555.492 412.43 555.531 cv
412.406 555.574 412.387 555.605 412.363 555.621 cv
412.336 555.641 412.305 555.648 412.277 555.648 cv
412.227 555.648 412.16 555.621 412.074 555.562 cv
411.984 555.508 411.871 555.445 411.73 555.379 cv
411.59 555.316 411.422 555.258 411.234 555.195 cv
411.043 555.141 410.828 555.109 410.586 555.109 cv
410.363 555.109 410.172 555.137 410.008 555.184 cv
409.84 555.238 409.703 555.309 409.598 555.395 cv
409.492 555.488 409.41 555.594 409.359 555.719 cv
409.301 555.844 409.273 555.98 409.277 556.125 cv
409.273 556.328 409.324 556.496 409.43 556.633 cv
409.531 556.773 409.668 556.895 409.836 556.996 cv
410 557.102 410.191 557.195 410.406 557.277 cv
410.617 557.363 410.832 557.449 411.055 557.535 cv
411.273 557.625 411.492 557.727 411.711 557.832 cv
411.926 557.941 412.117 558.07 412.285 558.227 cv
412.449 558.383 412.582 558.57 412.684 558.789 cv
412.781 559.008 412.832 559.27 412.836 559.566 cv
cp
f
278.824 16 mo
278.82 16.152 278.816 16.277 278.805 16.375 cv
278.789 16.48 278.77 16.562 278.746 16.621 cv
278.723 16.687 278.691 16.734 278.652 16.758 cv
278.613 16.789 278.57 16.801 278.523 16.801 cv
273.457 16.801 li
273.281 16.801 273.137 16.75 273.023 16.648 cv
272.902 16.547 272.844 16.383 272.848 16.152 cv
272.848 7.36298 li
272.844 7.13702 272.902 6.97302 273.023 6.867 cv
273.137 6.77002 273.281 6.71899 273.457 6.71503 cv
278.492 6.71503 li
278.535 6.71899 278.578 6.72998 278.617 6.75403 cv
278.652 6.78101 278.684 6.828 278.711 6.89099 cv
278.734 6.961 278.75 7.04303 278.766 7.14099 cv
278.773 7.24597 278.781 7.375 278.785 7.52698 cv
278.781 7.67603 278.773 7.80103 278.766 7.89801 cv
278.75 8.00403 278.734 8.086 278.711 8.14502 cv
278.684 8.20697 278.652 8.25 278.617 8.27698 cv
278.578 8.30902 278.535 8.32397 278.492 8.32001 cv
274.891 8.32001 li
274.891 10.785 li
277.938 10.785 li
277.984 10.789 278.027 10.805 278.066 10.828 cv
278.105 10.859 278.137 10.902 278.164 10.961 cv
278.188 11.023 278.207 11.105 278.223 11.203 cv
278.234 11.305 278.242 11.426 278.242 11.57 cv
278.242 11.723 278.234 11.848 278.223 11.945 cv
278.207 12.047 278.188 12.125 278.164 12.184 cv
278.137 12.246 278.105 12.289 278.066 12.312 cv
278.027 12.34 277.984 12.355 277.938 12.352 cv
274.891 12.352 li
274.891 15.195 li
278.523 15.195 li
278.57 15.195 278.613 15.211 278.652 15.238 cv
278.691 15.27 278.723 15.316 278.746 15.375 cv
278.77 15.441 278.789 15.523 278.805 15.621 cv
278.816 15.727 278.82 15.852 278.824 16 cv
cp
f
287.16 16.535 mo
287.156 16.59 287.141 16.633 287.113 16.672 cv
287.078 16.711 287.027 16.746 286.957 16.77 cv
286.883 16.797 286.781 16.812 286.656 16.828 cv
286.527 16.84 286.371 16.848 286.188 16.848 cv
285.992 16.848 285.832 16.84 285.707 16.828 cv
285.578 16.812 285.477 16.797 285.406 16.77 cv
285.328 16.746 285.277 16.711 285.25 16.672 cv
285.215 16.633 285.199 16.59 285.203 16.535 cv
285.203 12.57 li
285.199 12.234 285.176 11.969 285.129 11.773 cv
285.078 11.582 285.004 11.418 284.914 11.281 cv
284.82 11.145 284.703 11.039 284.555 10.961 cv
284.406 10.887 284.23 10.848 284.035 10.848 cv
283.781 10.848 283.531 10.941 283.277 11.121 cv
283.023 11.305 282.758 11.566 282.484 11.914 cv
282.484 16.535 li
282.48 16.59 282.465 16.633 282.438 16.672 cv
282.402 16.711 282.348 16.746 282.277 16.77 cv
282.199 16.797 282.102 16.812 281.977 16.828 cv
281.852 16.84 281.691 16.848 281.504 16.848 cv
281.309 16.848 281.152 16.84 281.027 16.828 cv
280.902 16.812 280.801 16.797 280.727 16.77 cv
280.648 16.746 280.594 16.711 280.566 16.672 cv
280.531 16.633 280.516 16.59 280.52 16.535 cv
280.52 9.586 li
280.516 9.539 280.531 9.492 280.559 9.44897 cv
280.582 9.414 280.629 9.383 280.699 9.35199 cv
280.766 9.328 280.852 9.30902 280.961 9.29303 cv
281.066 9.28497 281.199 9.27698 281.363 9.27301 cv
281.527 9.27698 281.664 9.28497 281.773 9.29303 cv
281.879 9.30902 281.965 9.328 282.027 9.35199 cv
282.086 9.383 282.129 9.414 282.156 9.44897 cv
282.18 9.492 282.191 9.539 282.195 9.586 cv
282.195 10.387 li
282.578 9.97699 282.969 9.664 283.367 9.453 cv
283.762 9.24597 284.18 9.14502 284.613 9.14099 cv
285.082 9.14502 285.48 9.22302 285.809 9.375 cv
286.133 9.53497 286.395 9.74597 286.594 10.012 cv
286.793 10.281 286.938 10.594 287.027 10.949 cv
287.113 11.309 287.156 11.738 287.16 12.242 cv
cp
f
295.512 12.859 mo
295.508 13.098 295.457 13.273 295.352 13.387 cv
295.242 13.504 295.094 13.562 294.914 13.559 cv
290.68 13.559 li
290.676 13.859 290.711 14.129 290.785 14.367 cv
290.852 14.609 290.965 14.812 291.121 14.98 cv
291.273 15.152 291.469 15.281 291.711 15.367 cv
291.949 15.457 292.238 15.5 292.582 15.5 cv
292.922 15.5 293.223 15.477 293.484 15.426 cv
293.742 15.379 293.969 15.324 294.16 15.262 cv
294.348 15.203 294.504 15.148 294.633 15.098 cv
294.754 15.051 294.855 15.027 294.938 15.023 cv
294.98 15.027 295.02 15.035 295.055 15.051 cv
295.082 15.07 295.109 15.102 295.129 15.148 cv
295.148 15.195 295.16 15.262 295.172 15.348 cv
295.176 15.434 295.18 15.543 295.184 15.672 cv
295.18 15.789 295.18 15.887 295.176 15.965 cv
295.168 16.047 295.16 16.113 295.152 16.168 cv
295.141 16.227 295.125 16.277 295.105 16.312 cv
295.086 16.355 295.059 16.391 295.027 16.426 cv
294.992 16.465 294.898 16.516 294.75 16.574 cv
294.594 16.641 294.402 16.703 294.172 16.758 cv
293.934 16.82 293.664 16.867 293.367 16.914 cv
293.063 16.953 292.742 16.977 292.402 16.98 cv
291.781 16.977 291.238 16.902 290.777 16.746 cv
290.309 16.594 289.922 16.355 289.613 16.039 cv
289.297 15.723 289.063 15.324 288.914 14.84 cv
288.758 14.359 288.684 13.793 288.688 13.137 cv
288.684 12.523 288.762 11.965 288.926 11.469 cv
289.082 10.973 289.316 10.555 289.629 10.207 cv
289.934 9.86298 290.309 9.59802 290.746 9.414 cv
291.184 9.23401 291.676 9.14502 292.23 9.14099 cv
292.809 9.14502 293.309 9.22998 293.723 9.39801 cv
294.137 9.57397 294.473 9.81201 294.738 10.113 cv
295 10.418 295.195 10.777 295.324 11.191 cv
295.445 11.609 295.508 12.059 295.512 12.547 cv
cp
293.609 12.297 mo
293.621 11.746 293.512 11.312 293.277 11 cv
293.043 10.687 292.676 10.531 292.184 10.527 cv
291.934 10.531 291.719 10.578 291.535 10.668 cv
291.348 10.766 291.195 10.891 291.074 11.047 cv
290.949 11.207 290.855 11.395 290.793 11.609 cv
290.727 11.824 290.688 12.055 290.68 12.297 cv
cp
f
301.586 10.23 mo
301.586 10.422 301.578 10.574 301.57 10.691 cv
301.555 10.812 301.539 10.906 301.523 10.973 cv
301.5 11.043 301.473 11.09 301.441 11.113 cv
301.402 11.141 301.359 11.152 301.313 11.152 cv
301.266 11.152 301.219 11.145 301.172 11.125 cv
301.117 11.109 301.059 11.09 300.996 11.066 cv
300.926 11.047 300.855 11.027 300.781 11.008 cv
300.699 10.992 300.613 10.984 300.523 10.98 cv
300.41 10.984 300.301 11.004 300.195 11.047 cv
300.086 11.094 299.973 11.164 299.859 11.254 cv
299.738 11.348 299.617 11.473 299.492 11.625 cv
299.363 11.785 299.227 11.977 299.082 12.203 cv
299.082 16.535 li
299.078 16.59 299.063 16.633 299.035 16.672 cv
299 16.711 298.945 16.746 298.875 16.77 cv
298.797 16.797 298.699 16.812 298.574 16.828 cv
298.449 16.84 298.289 16.848 298.102 16.848 cv
297.906 16.848 297.75 16.84 297.625 16.828 cv
297.5 16.812 297.398 16.797 297.324 16.77 cv
297.246 16.746 297.191 16.711 297.164 16.672 cv
297.129 16.633 297.113 16.59 297.117 16.535 cv
297.117 9.586 li
297.113 9.539 297.129 9.492 297.156 9.44897 cv
297.18 9.414 297.227 9.383 297.297 9.35199 cv
297.363 9.328 297.449 9.30902 297.559 9.29303 cv
297.664 9.28497 297.797 9.27698 297.961 9.27301 cv
298.125 9.27698 298.262 9.28497 298.371 9.29303 cv
298.477 9.30902 298.563 9.328 298.625 9.35199 cv
298.684 9.383 298.727 9.414 298.754 9.44897 cv
298.777 9.492 298.789 9.539 298.793 9.586 cv
298.793 10.449 li
298.973 10.191 299.145 9.97998 299.309 9.80902 cv
299.465 9.64502 299.621 9.508 299.77 9.40601 cv
299.914 9.30902 300.059 9.242 300.203 9.19897 cv
300.348 9.164 300.492 9.14502 300.641 9.14099 cv
300.707 9.14502 300.781 9.14801 300.859 9.15198 cv
300.938 9.164 301.016 9.17603 301.102 9.19098 cv
301.18 9.211 301.254 9.22998 301.32 9.25403 cv
301.379 9.27698 301.426 9.30499 301.457 9.328 cv
301.484 9.35901 301.504 9.38702 301.52 9.414 cv
301.531 9.44897 301.543 9.492 301.555 9.54303 cv
301.563 9.60199 301.57 9.68402 301.578 9.789 cv
301.582 9.89801 301.586 10.047 301.586 10.23 cv
cp
f
308.762 10.066 mo
308.758 10.32 308.73 10.504 308.676 10.621 cv
308.617 10.742 308.547 10.801 308.469 10.801 cv
307.648 10.801 li
307.762 10.926 307.844 11.07 307.895 11.227 cv
307.941 11.387 307.965 11.551 307.969 11.719 cv
307.965 12.129 307.898 12.488 307.766 12.801 cv
307.629 13.117 307.434 13.383 307.184 13.594 cv
306.93 13.812 306.629 13.977 306.273 14.086 cv
305.914 14.203 305.516 14.258 305.086 14.254 cv
304.859 14.258 304.648 14.23 304.445 14.172 cv
304.242 14.121 304.086 14.059 303.977 13.98 cv
303.914 14.051 303.855 14.129 303.809 14.223 cv
303.758 14.316 303.734 14.422 303.738 14.531 cv
303.734 14.687 303.801 14.809 303.934 14.902 cv
304.063 15 304.25 15.055 304.492 15.062 cv
306.184 15.125 li
306.578 15.141 306.93 15.199 307.238 15.293 cv
307.547 15.395 307.809 15.527 308.02 15.699 cv
308.23 15.875 308.391 16.086 308.5 16.328 cv
308.609 16.574 308.664 16.848 308.668 17.16 cv
308.664 17.496 308.59 17.82 308.441 18.129 cv
308.293 18.43 308.066 18.691 307.766 18.918 cv
307.461 19.137 307.082 19.316 306.629 19.449 cv
306.172 19.578 305.641 19.641 305.039 19.645 cv
304.441 19.641 303.938 19.594 303.52 19.504 cv
303.102 19.406 302.758 19.277 302.492 19.113 cv
302.223 18.945 302.027 18.746 301.91 18.52 cv
301.785 18.285 301.727 18.031 301.727 17.758 cv
301.727 17.586 301.746 17.426 301.793 17.27 cv
301.832 17.113 301.898 16.961 301.988 16.82 cv
302.07 16.676 302.176 16.543 302.301 16.41 cv
302.426 16.281 302.566 16.156 302.73 16.035 cv
302.504 15.922 302.332 15.762 302.211 15.551 cv
302.09 15.348 302.031 15.121 302.031 14.875 cv
302.031 14.574 302.098 14.297 302.238 14.039 cv
302.375 13.789 302.559 13.559 302.785 13.355 cv
302.602 13.176 302.457 12.961 302.348 12.703 cv
302.238 12.453 302.184 12.133 302.188 11.75 cv
302.184 11.348 302.254 10.988 302.398 10.664 cv
302.539 10.348 302.738 10.078 302.996 9.85498 cv
303.25 9.63702 303.555 9.46503 303.906 9.34802 cv
304.258 9.22998 304.648 9.172 305.078 9.172 cv
305.297 9.172 305.504 9.18701 305.703 9.211 cv
305.902 9.242 306.09 9.27698 306.262 9.32001 cv
308.469 9.32001 li
308.551 9.32397 308.621 9.383 308.68 9.492 cv
308.73 9.60901 308.758 9.80103 308.762 10.066 cv
cp
306.246 11.711 mo
306.242 11.34 306.141 11.051 305.934 10.84 cv
305.723 10.637 305.43 10.531 305.055 10.527 cv
304.859 10.531 304.688 10.562 304.547 10.625 cv
304.398 10.691 304.277 10.781 304.184 10.891 cv
304.082 11.004 304.012 11.133 303.969 11.281 cv
303.918 11.43 303.895 11.586 303.898 11.742 cv
303.895 12.102 304 12.379 304.211 12.582 cv
304.418 12.789 304.707 12.895 305.078 12.891 cv
305.273 12.895 305.441 12.863 305.59 12.797 cv
305.73 12.738 305.852 12.652 305.953 12.539 cv
306.047 12.434 306.121 12.305 306.172 12.16 cv
306.219 12.02 306.242 11.871 306.246 11.711 cv
cp
306.707 17.262 mo
306.707 17.023 306.613 16.848 306.426 16.723 cv
306.238 16.602 305.98 16.531 305.652 16.52 cv
304.258 16.48 li
304.121 16.582 304.012 16.676 303.934 16.766 cv
303.852 16.855 303.789 16.941 303.742 17.027 cv
303.691 17.109 303.656 17.191 303.645 17.27 cv
303.625 17.348 303.617 17.426 303.621 17.512 cv
303.617 17.766 303.75 17.965 304.012 18.102 cv
304.273 18.234 304.645 18.301 305.125 18.305 cv
305.418 18.301 305.664 18.27 305.871 18.215 cv
306.07 18.152 306.234 18.074 306.363 17.977 cv
306.484 17.875 306.574 17.766 306.629 17.645 cv
306.68 17.523 306.707 17.395 306.707 17.262 cv
cp
f
314.094 16.801 mo
313.25 19.262 li
313.199 19.391 313.074 19.484 312.867 19.543 cv
312.66 19.598 312.355 19.625 311.957 19.629 cv
311.746 19.625 311.578 19.617 311.457 19.602 cv
311.332 19.582 311.242 19.551 311.18 19.512 cv
311.117 19.469 311.082 19.418 311.078 19.355 cv
311.07 19.293 311.086 19.219 311.125 19.133 cv
312.051 16.801 li
311.98 16.77 311.918 16.723 311.867 16.656 cv
311.809 16.594 311.77 16.523 311.746 16.449 cv
309.355 10.059 li
309.285 9.87903 309.25 9.742 309.254 9.64502 cv
309.25 9.55103 309.281 9.47302 309.348 9.41803 cv
309.406 9.36298 309.512 9.328 309.66 9.30499 cv
309.805 9.289 310 9.27698 310.25 9.27301 cv
310.469 9.27698 310.648 9.28101 310.781 9.28497 cv
310.91 9.297 311.012 9.31598 311.086 9.34399 cv
311.156 9.37903 311.211 9.42603 311.25 9.48798 cv
311.285 9.55499 311.32 9.64801 311.359 9.76599 cv
312.992 14.418 li
313.016 14.418 li
314.516 9.672 li
314.539 9.539 314.578 9.44897 314.633 9.40198 cv
314.68 9.35901 314.762 9.328 314.879 9.30499 cv
314.988 9.289 315.191 9.27698 315.48 9.27301 cv
315.703 9.27698 315.887 9.289 316.035 9.30499 cv
316.18 9.328 316.289 9.367 316.363 9.422 cv
316.43 9.48401 316.465 9.55902 316.469 9.65198 cv
316.465 9.74597 316.445 9.85901 316.406 9.98798 cv
cp
f
328.535 15.273 mo
328.535 15.406 328.531 15.516 328.523 15.605 cv
328.516 15.699 328.504 15.777 328.488 15.84 cv
328.473 15.906 328.449 15.965 328.426 16.008 cv
328.395 16.055 328.355 16.105 328.301 16.164 cv
328.242 16.227 328.129 16.305 327.969 16.395 cv
327.801 16.492 327.602 16.582 327.367 16.664 cv
327.129 16.754 326.859 16.82 326.559 16.879 cv
326.25 16.934 325.922 16.965 325.574 16.965 cv
324.879 16.965 324.254 16.859 323.699 16.645 cv
323.141 16.434 322.668 16.117 322.281 15.691 cv
321.891 15.27 321.594 14.738 321.387 14.105 cv
321.18 13.473 321.074 12.734 321.078 11.891 cv
321.074 11.035 321.188 10.277 321.418 9.60901 cv
321.645 8.94501 321.965 8.38702 322.375 7.93402 cv
322.785 7.48401 323.277 7.14099 323.852 6.90601 cv
324.426 6.67603 325.059 6.55902 325.754 6.55499 cv
326.027 6.55902 326.297 6.58197 326.563 6.625 cv
326.82 6.672 327.063 6.72998 327.281 6.80499 cv
327.5 6.883 327.699 6.97302 327.879 7.06598 cv
328.055 7.16803 328.176 7.25 328.25 7.32001 cv
328.316 7.39099 328.367 7.44897 328.395 7.49597 cv
328.418 7.54303 328.438 7.60498 328.457 7.67603 cv
328.469 7.75403 328.48 7.84003 328.492 7.93402 cv
328.496 8.03497 328.5 8.15601 328.504 8.297 cv
328.5 8.45697 328.496 8.59003 328.488 8.69501 cv
328.477 8.80902 328.457 8.89502 328.434 8.961 cv
328.406 9.03101 328.375 9.08197 328.34 9.10901 cv
328.301 9.14502 328.258 9.15997 328.215 9.15601 cv
328.133 9.15997 328.035 9.11298 327.918 9.02002 cv
327.797 8.92999 327.641 8.828 327.453 8.71503 cv
327.262 8.60498 327.039 8.50403 326.777 8.40997 cv
326.512 8.32001 326.199 8.27698 325.84 8.27301 cv
325.438 8.27698 325.078 8.35901 324.766 8.52002 cv
324.449 8.68701 324.184 8.922 323.965 9.22302 cv
323.742 9.53101 323.574 9.89801 323.461 10.328 cv
323.344 10.762 323.285 11.246 323.289 11.781 cv
323.285 12.379 323.348 12.895 323.473 13.324 cv
323.594 13.762 323.766 14.117 323.996 14.395 cv
324.219 14.676 324.492 14.883 324.813 15.02 cv
325.129 15.16 325.488 15.23 325.895 15.227 cv
326.254 15.23 326.57 15.187 326.836 15.098 cv
327.102 15.016 327.328 14.922 327.516 14.812 cv
327.703 14.711 327.859 14.617 327.984 14.535 cv
328.105 14.453 328.199 14.41 328.27 14.41 cv
328.32 14.41 328.363 14.422 328.395 14.441 cv
328.426 14.461 328.449 14.5 328.473 14.562 cv
328.488 14.625 328.504 14.715 328.52 14.824 cv
328.527 14.941 328.535 15.09 328.535 15.273 cv
cp
f
336.914 12.988 mo
336.91 13.586 336.832 14.129 336.68 14.613 cv
336.52 15.105 336.285 15.523 335.969 15.875 cv
335.652 16.227 335.254 16.5 334.777 16.691 cv
334.297 16.883 333.738 16.977 333.102 16.98 cv
332.48 16.977 331.941 16.895 331.488 16.723 cv
331.027 16.555 330.648 16.305 330.352 15.977 cv
330.047 15.652 329.824 15.25 329.68 14.77 cv
329.535 14.293 329.465 13.746 329.465 13.129 cv
329.465 12.539 329.543 12 329.699 11.508 cv
329.855 11.02 330.094 10.598 330.414 10.246 cv
330.73 9.89801 331.125 9.625 331.602 9.42999 cv
332.074 9.23798 332.633 9.14502 333.273 9.14099 cv
333.898 9.14502 334.438 9.22699 334.895 9.39502 cv
335.352 9.56598 335.73 9.81598 336.027 10.141 cv
336.324 10.469 336.547 10.871 336.695 11.348 cv
336.84 11.828 336.91 12.375 336.914 12.988 cv
cp
334.895 13.066 mo
334.891 12.73 334.863 12.414 334.813 12.121 cv
334.754 11.836 334.66 11.586 334.535 11.371 cv
334.402 11.16 334.23 10.992 334.02 10.871 cv
333.801 10.754 333.531 10.695 333.203 10.691 cv
332.914 10.695 332.66 10.75 332.441 10.852 cv
332.223 10.961 332.043 11.117 331.902 11.32 cv
331.762 11.527 331.656 11.773 331.586 12.059 cv
331.516 12.352 331.48 12.68 331.48 13.043 cv
331.48 13.391 331.508 13.707 331.566 13.992 cv
331.621 14.285 331.715 14.535 331.844 14.746 cv
331.969 14.961 332.141 15.125 332.363 15.238 cv
332.578 15.359 332.848 15.418 333.172 15.414 cv
333.465 15.418 333.723 15.363 333.945 15.254 cv
334.16 15.148 334.34 14.996 334.48 14.789 cv
334.621 14.59 334.723 14.344 334.793 14.055 cv
334.855 13.77 334.891 13.441 334.895 13.066 cv
cp
f
345.109 16.535 mo
345.105 16.59 345.09 16.633 345.063 16.672 cv
345.027 16.711 344.977 16.746 344.906 16.77 cv
344.832 16.797 344.73 16.812 344.605 16.828 cv
344.477 16.84 344.32 16.848 344.137 16.848 cv
343.941 16.848 343.781 16.84 343.656 16.828 cv
343.527 16.812 343.426 16.797 343.355 16.77 cv
343.277 16.746 343.227 16.711 343.199 16.672 cv
343.164 16.633 343.148 16.59 343.152 16.535 cv
343.152 12.57 li
343.148 12.234 343.125 11.969 343.078 11.773 cv
343.027 11.582 342.953 11.418 342.863 11.281 cv
342.77 11.145 342.652 11.039 342.504 10.961 cv
342.355 10.887 342.18 10.848 341.984 10.848 cv
341.73 10.848 341.48 10.941 341.227 11.121 cv
340.973 11.305 340.707 11.566 340.434 11.914 cv
340.434 16.535 li
340.43 16.59 340.414 16.633 340.387 16.672 cv
340.352 16.711 340.297 16.746 340.227 16.77 cv
340.148 16.797 340.051 16.812 339.926 16.828 cv
339.801 16.84 339.641 16.848 339.453 16.848 cv
339.258 16.848 339.102 16.84 338.977 16.828 cv
338.852 16.812 338.75 16.797 338.676 16.77 cv
338.598 16.746 338.543 16.711 338.516 16.672 cv
338.48 16.633 338.465 16.59 338.469 16.535 cv
338.469 9.586 li
338.465 9.539 338.48 9.492 338.508 9.44897 cv
338.531 9.414 338.578 9.383 338.648 9.35199 cv
338.715 9.328 338.801 9.30902 338.91 9.29303 cv
339.016 9.28497 339.148 9.27698 339.313 9.27301 cv
339.477 9.27698 339.613 9.28497 339.723 9.29303 cv
339.828 9.30902 339.914 9.328 339.977 9.35199 cv
340.035 9.383 340.078 9.414 340.105 9.44897 cv
340.129 9.492 340.141 9.539 340.145 9.586 cv
340.145 10.387 li
340.527 9.97699 340.918 9.664 341.316 9.453 cv
341.711 9.24597 342.129 9.14502 342.563 9.14099 cv
343.031 9.14502 343.43 9.22302 343.758 9.375 cv
344.082 9.53497 344.344 9.74597 344.543 10.012 cv
344.742 10.281 344.887 10.594 344.977 10.949 cv
345.063 11.309 345.105 11.738 345.109 12.242 cv
cp
f
351.934 14.57 mo
351.93 14.969 351.855 15.316 351.711 15.617 cv
351.563 15.918 351.355 16.172 351.086 16.371 cv
350.813 16.578 350.492 16.727 350.125 16.828 cv
349.758 16.926 349.355 16.977 348.926 16.98 cv
348.66 16.977 348.414 16.957 348.18 16.922 cv
347.945 16.879 347.734 16.832 347.547 16.773 cv
347.359 16.715 347.203 16.652 347.078 16.59 cv
346.953 16.527 346.859 16.469 346.805 16.414 cv
346.746 16.359 346.703 16.277 346.676 16.16 cv
346.641 16.047 346.625 15.871 346.629 15.641 cv
346.625 15.492 346.633 15.371 346.645 15.277 cv
346.652 15.187 346.668 15.117 346.691 15.059 cv
346.711 15.008 346.734 14.969 346.77 14.949 cv
346.797 14.934 346.836 14.926 346.883 14.922 cv
346.938 14.926 347.023 14.957 347.137 15.02 cv
347.246 15.086 347.383 15.16 347.555 15.234 cv
347.719 15.316 347.914 15.387 348.133 15.453 cv
348.352 15.523 348.602 15.559 348.887 15.555 cv
349.063 15.559 349.219 15.539 349.359 15.5 cv
349.492 15.465 349.613 15.414 349.719 15.344 cv
349.816 15.277 349.891 15.191 349.945 15.086 cv
349.992 14.984 350.02 14.863 350.023 14.727 cv
350.02 14.57 349.973 14.437 349.879 14.328 cv
349.785 14.219 349.656 14.121 349.5 14.035 cv
349.336 13.953 349.156 13.875 348.961 13.801 cv
348.758 13.73 348.555 13.652 348.344 13.559 cv
348.133 13.473 347.926 13.371 347.73 13.254 cv
347.527 13.145 347.348 13.004 347.191 12.836 cv
347.027 12.672 346.902 12.473 346.809 12.234 cv
346.715 12.004 346.668 11.723 346.668 11.391 cv
346.668 11.062 346.73 10.758 346.859 10.477 cv
346.988 10.203 347.176 9.96503 347.422 9.76599 cv
347.664 9.57001 347.961 9.41803 348.313 9.30499 cv
348.66 9.19897 349.055 9.14502 349.496 9.14099 cv
349.711 9.14502 349.922 9.15997 350.129 9.18701 cv
350.332 9.22302 350.52 9.26202 350.688 9.30499 cv
350.852 9.35498 350.992 9.40601 351.109 9.45697 cv
351.223 9.51599 351.305 9.56201 351.355 9.59802 cv
351.402 9.64099 351.438 9.67999 351.461 9.71503 cv
351.48 9.758 351.492 9.80499 351.504 9.85498 cv
351.512 9.90997 351.523 9.97699 351.531 10.055 cv
351.539 10.141 351.543 10.238 351.543 10.355 cv
351.543 10.496 351.539 10.613 351.531 10.699 cv
351.523 10.793 351.508 10.863 351.492 10.91 cv
351.473 10.965 351.449 11 351.422 11.016 cv
351.387 11.039 351.352 11.047 351.313 11.043 cv
351.262 11.047 351.188 11.02 351.094 10.961 cv
350.992 10.91 350.871 10.852 350.723 10.785 cv
350.574 10.727 350.402 10.668 350.207 10.609 cv
350.012 10.559 349.789 10.531 349.543 10.527 cv
349.363 10.531 349.211 10.551 349.082 10.582 cv
348.949 10.621 348.84 10.672 348.762 10.738 cv
348.676 10.809 348.613 10.887 348.574 10.977 cv
348.527 11.07 348.508 11.168 348.512 11.27 cv
348.508 11.43 348.559 11.566 348.66 11.672 cv
348.758 11.785 348.887 11.879 349.051 11.961 cv
349.211 12.047 349.395 12.125 349.602 12.195 cv
349.805 12.27 350.012 12.352 350.223 12.434 cv
350.43 12.523 350.637 12.621 350.848 12.734 cv
351.051 12.848 351.234 12.988 351.395 13.152 cv
351.555 13.32 351.684 13.52 351.785 13.75 cv
351.879 13.984 351.93 14.258 351.934 14.57 cv
cp
f
360.004 16.535 mo
360 16.59 359.988 16.633 359.965 16.672 cv
359.938 16.711 359.891 16.746 359.828 16.77 cv
359.762 16.797 359.676 16.812 359.57 16.828 cv
359.465 16.84 359.332 16.848 359.172 16.848 cv
358.996 16.848 358.855 16.84 358.754 16.828 cv
358.645 16.812 358.563 16.797 358.5 16.77 cv
358.438 16.746 358.391 16.711 358.367 16.672 cv
358.336 16.633 358.324 16.59 358.328 16.535 cv
358.328 15.734 li
357.941 16.148 357.551 16.461 357.156 16.668 cv
356.754 16.875 356.344 16.977 355.922 16.98 cv
355.441 16.977 355.039 16.902 354.715 16.746 cv
354.391 16.594 354.129 16.379 353.93 16.109 cv
353.727 15.84 353.582 15.527 353.5 15.168 cv
353.41 14.812 353.367 14.371 353.371 13.84 cv
353.371 9.586 li
353.367 9.539 353.383 9.492 353.414 9.44897 cv
353.441 9.414 353.492 9.383 353.57 9.35199 cv
353.645 9.328 353.746 9.30902 353.875 9.29303 cv
354 9.28497 354.156 9.27698 354.348 9.27301 cv
354.535 9.27698 354.695 9.28497 354.82 9.29303 cv
354.945 9.30902 355.043 9.328 355.121 9.35199 cv
355.191 9.383 355.246 9.414 355.281 9.44897 cv
355.309 9.492 355.324 9.539 355.328 9.586 cv
355.328 13.512 li
355.324 13.879 355.348 14.156 355.398 14.348 cv
355.441 14.539 355.512 14.703 355.613 14.84 cv
355.707 14.98 355.832 15.086 355.98 15.16 cv
356.129 15.238 356.301 15.277 356.496 15.273 cv
356.746 15.277 356.996 15.187 357.25 15 cv
357.5 14.82 357.77 14.555 358.055 14.207 cv
358.055 9.586 li
358.055 9.539 358.066 9.492 358.098 9.44897 cv
358.121 9.414 358.176 9.383 358.254 9.35199 cv
358.328 9.328 358.426 9.30902 358.555 9.29303 cv
358.676 9.28497 358.836 9.27698 359.031 9.27301 cv
359.223 9.27698 359.379 9.28497 359.504 9.29303 cv
359.625 9.30902 359.727 9.328 359.801 9.35199 cv
359.871 9.383 359.922 9.414 359.957 9.44897 cv
359.984 9.492 360 9.539 360.004 9.586 cv
cp
f
372.941 16.535 mo
372.938 16.59 372.922 16.633 372.895 16.672 cv
372.859 16.711 372.809 16.746 372.738 16.77 cv
372.664 16.797 372.563 16.812 372.441 16.828 cv
372.316 16.84 372.16 16.848 371.969 16.848 cv
371.77 16.848 371.609 16.84 371.484 16.828 cv
371.359 16.812 371.258 16.797 371.184 16.77 cv
371.105 16.746 371.055 16.711 371.027 16.672 cv
371 16.633 370.984 16.59 370.988 16.535 cv
370.988 12.414 li
370.984 12.184 370.965 11.969 370.922 11.773 cv
370.875 11.582 370.805 11.418 370.719 11.281 cv
370.625 11.145 370.512 11.039 370.375 10.961 cv
370.234 10.887 370.07 10.848 369.879 10.848 cv
369.645 10.848 369.406 10.941 369.168 11.121 cv
368.93 11.305 368.672 11.566 368.391 11.914 cv
368.391 16.535 li
368.391 16.59 368.375 16.633 368.344 16.672 cv
368.313 16.711 368.258 16.746 368.184 16.77 cv
368.105 16.797 368.004 16.812 367.883 16.828 cv
367.758 16.84 367.605 16.848 367.418 16.848 cv
367.223 16.848 367.063 16.84 366.941 16.828 cv
366.813 16.812 366.711 16.797 366.641 16.77 cv
366.563 16.746 366.512 16.711 366.48 16.672 cv
366.449 16.633 366.434 16.59 366.434 16.535 cv
366.434 12.414 li
366.434 12.184 366.41 11.969 366.367 11.773 cv
366.324 11.582 366.258 11.418 366.172 11.281 cv
366.078 11.145 365.965 11.039 365.828 10.961 cv
365.684 10.887 365.52 10.848 365.336 10.848 cv
365.094 10.848 364.855 10.941 364.617 11.121 cv
364.379 11.305 364.121 11.566 363.848 11.914 cv
363.848 16.535 li
363.844 16.59 363.828 16.633 363.801 16.672 cv
363.766 16.711 363.711 16.746 363.641 16.77 cv
363.563 16.797 363.465 16.812 363.34 16.828 cv
363.215 16.84 363.055 16.848 362.867 16.848 cv
362.672 16.848 362.516 16.84 362.391 16.828 cv
362.266 16.812 362.164 16.797 362.09 16.77 cv
362.012 16.746 361.957 16.711 361.93 16.672 cv
361.895 16.633 361.879 16.59 361.883 16.535 cv
361.883 9.586 li
361.879 9.539 361.895 9.492 361.922 9.44897 cv
361.945 9.414 361.992 9.383 362.063 9.35199 cv
362.129 9.328 362.215 9.30902 362.324 9.29303 cv
362.43 9.28497 362.563 9.27698 362.727 9.27301 cv
362.891 9.27698 363.027 9.28497 363.137 9.29303 cv
363.242 9.30902 363.328 9.328 363.391 9.35199 cv
363.449 9.383 363.492 9.414 363.52 9.44897 cv
363.543 9.492 363.555 9.539 363.559 9.586 cv
363.559 10.387 li
363.941 9.97699 364.324 9.664 364.707 9.453 cv
365.086 9.24597 365.488 9.14502 365.906 9.14099 cv
366.191 9.14502 366.445 9.172 366.676 9.22998 cv
366.902 9.29303 367.109 9.37903 367.289 9.48798 cv
367.469 9.60199 367.621 9.73798 367.75 9.89099 cv
367.879 10.047 367.988 10.219 368.078 10.41 cv
368.285 10.187 368.488 9.99597 368.691 9.836 cv
368.887 9.67603 369.086 9.54303 369.281 9.44098 cv
369.477 9.34003 369.672 9.26599 369.867 9.21503 cv
370.063 9.16803 370.262 9.14502 370.465 9.14099 cv
370.926 9.14502 371.313 9.22302 371.633 9.375 cv
371.945 9.53497 372.203 9.74597 372.398 10.012 cv
372.594 10.281 372.73 10.594 372.816 10.949 cv
372.895 11.309 372.938 11.687 372.941 12.086 cv
cp
f
381.859 12.957 mo
381.859 13.578 381.793 14.137 381.66 14.633 cv
381.527 15.129 381.332 15.551 381.078 15.898 cv
380.824 16.246 380.508 16.516 380.129 16.699 cv
379.746 16.887 379.313 16.977 378.828 16.98 cv
378.621 16.977 378.434 16.957 378.27 16.922 cv
378.098 16.879 377.934 16.82 377.777 16.742 cv
377.617 16.664 377.461 16.566 377.309 16.441 cv
377.148 16.324 376.988 16.184 376.824 16.02 cv
376.824 19.293 li
376.82 19.34 376.805 19.387 376.777 19.434 cv
376.742 19.473 376.688 19.508 376.617 19.539 cv
376.539 19.562 376.441 19.586 376.316 19.605 cv
376.191 19.617 376.031 19.625 375.844 19.629 cv
375.648 19.625 375.492 19.617 375.367 19.605 cv
375.242 19.586 375.141 19.562 375.066 19.539 cv
374.988 19.508 374.934 19.473 374.906 19.434 cv
374.871 19.387 374.855 19.34 374.859 19.293 cv
374.859 9.586 li
374.855 9.539 374.871 9.492 374.898 9.44897 cv
374.922 9.414 374.965 9.383 375.035 9.35199 cv
375.098 9.328 375.184 9.30902 375.293 9.29303 cv
375.395 9.28497 375.531 9.27698 375.695 9.27301 cv
375.852 9.27698 375.98 9.28497 376.086 9.29303 cv
376.191 9.30902 376.277 9.328 376.344 9.35199 cv
376.406 9.383 376.453 9.414 376.48 9.44897 cv
376.504 9.492 376.516 9.539 376.52 9.586 cv
376.52 10.402 li
376.719 10.195 376.918 10.016 377.117 9.85498 cv
377.309 9.69897 377.508 9.56598 377.711 9.45697 cv
377.914 9.35498 378.121 9.27301 378.34 9.21899 cv
378.551 9.16803 378.781 9.14502 379.031 9.14099 cv
379.535 9.14502 379.969 9.242 380.332 9.44098 cv
380.688 9.64502 380.98 9.922 381.207 10.266 cv
381.43 10.617 381.594 11.02 381.703 11.48 cv
381.805 11.941 381.859 12.434 381.859 12.957 cv
cp
379.816 13.098 mo
379.813 12.805 379.793 12.523 379.75 12.246 cv
379.703 11.977 379.625 11.734 379.523 11.52 cv
379.414 11.309 379.273 11.137 379.102 11.008 cv
378.926 10.883 378.711 10.82 378.453 10.816 cv
378.32 10.82 378.191 10.84 378.066 10.875 cv
377.938 10.918 377.809 10.98 377.676 11.066 cv
377.543 11.156 377.406 11.27 377.27 11.41 cv
377.125 11.551 376.977 11.727 376.824 11.93 cv
376.824 14.223 li
377.098 14.57 377.359 14.84 377.609 15.027 cv
377.855 15.219 378.117 15.312 378.391 15.312 cv
378.645 15.312 378.859 15.25 379.043 15.117 cv
379.219 14.992 379.367 14.82 379.48 14.609 cv
379.594 14.398 379.676 14.16 379.734 13.895 cv
379.785 13.629 379.813 13.363 379.816 13.098 cv
cp
f
387.355 15.852 mo
387.355 16.078 387.34 16.254 387.313 16.375 cv
387.281 16.5 387.242 16.586 387.199 16.633 cv
387.148 16.684 387.082 16.727 386.992 16.766 cv
386.898 16.805 386.789 16.836 386.672 16.867 cv
386.547 16.891 386.414 16.914 386.273 16.934 cv
386.129 16.945 385.988 16.953 385.844 16.957 cv
385.453 16.953 385.113 16.902 384.828 16.809 cv
384.543 16.707 384.309 16.559 384.121 16.352 cv
383.934 16.148 383.793 15.891 383.707 15.578 cv
383.613 15.27 383.57 14.898 383.574 14.469 cv
383.574 10.91 li
382.742 10.91 li
382.641 10.914 382.566 10.852 382.516 10.727 cv
382.461 10.605 382.434 10.402 382.438 10.113 cv
382.434 9.96503 382.441 9.836 382.457 9.73401 cv
382.469 9.633 382.488 9.55103 382.516 9.48798 cv
382.539 9.42999 382.57 9.38702 382.613 9.35901 cv
382.648 9.336 382.695 9.32397 382.75 9.32001 cv
383.574 9.32001 li
383.574 7.77002 li
383.57 7.72302 383.586 7.67603 383.617 7.62903 cv
383.645 7.59003 383.695 7.55499 383.773 7.52301 cv
383.848 7.5 383.949 7.47699 384.078 7.461 cv
384.203 7.44897 384.359 7.44501 384.551 7.44098 cv
384.738 7.44501 384.898 7.44897 385.027 7.461 cv
385.152 7.47699 385.254 7.5 385.328 7.52301 cv
385.398 7.55499 385.449 7.59003 385.484 7.62903 cv
385.512 7.67603 385.527 7.72302 385.531 7.77002 cv
385.531 9.32001 li
387.043 9.32001 li
387.094 9.32397 387.141 9.336 387.18 9.35901 cv
387.219 9.38702 387.25 9.42999 387.277 9.48798 cv
387.301 9.55103 387.32 9.633 387.336 9.73401 cv
387.348 9.836 387.355 9.96503 387.355 10.113 cv
387.355 10.402 387.328 10.605 387.277 10.727 cv
387.223 10.852 387.148 10.914 387.051 10.91 cv
385.531 10.91 li
385.531 14.176 li
385.527 14.555 385.586 14.84 385.711 15.027 cv
385.828 15.219 386.043 15.312 386.348 15.312 cv
386.449 15.312 386.543 15.305 386.629 15.285 cv
386.711 15.27 386.785 15.25 386.852 15.223 cv
386.914 15.203 386.969 15.18 387.016 15.16 cv
387.059 15.145 387.098 15.137 387.137 15.133 cv
387.164 15.137 387.195 15.145 387.227 15.16 cv
387.254 15.18 387.273 15.219 387.293 15.27 cv
387.305 15.328 387.32 15.402 387.336 15.492 cv
387.348 15.59 387.355 15.707 387.355 15.852 cv
cp
f
390.742 16.535 mo
390.738 16.59 390.723 16.633 390.695 16.672 cv
390.66 16.711 390.605 16.746 390.535 16.77 cv
390.457 16.797 390.359 16.812 390.234 16.828 cv
390.109 16.84 389.949 16.848 389.762 16.848 cv
389.566 16.848 389.41 16.84 389.285 16.828 cv
389.16 16.812 389.059 16.797 388.984 16.77 cv
388.906 16.746 388.852 16.711 388.824 16.672 cv
388.789 16.633 388.773 16.59 388.777 16.535 cv
388.777 9.60199 li
388.773 9.55103 388.789 9.50403 388.824 9.46503 cv
388.852 9.42603 388.906 9.39502 388.984 9.36298 cv
389.059 9.34003 389.16 9.31598 389.285 9.297 cv
389.41 9.28497 389.566 9.27698 389.762 9.27301 cv
389.949 9.27698 390.109 9.28497 390.234 9.297 cv
390.359 9.31598 390.457 9.34003 390.535 9.36298 cv
390.605 9.39502 390.66 9.42603 390.695 9.46503 cv
390.723 9.50403 390.738 9.55103 390.742 9.60199 cv
cp
390.891 7.22998 mo
390.891 7.62903 390.809 7.90198 390.648 8.05103 cv
390.484 8.203 390.188 8.27698 389.754 8.27301 cv
389.309 8.27698 389.008 8.203 388.859 8.05902 cv
388.703 7.914 388.629 7.65198 388.629 7.27002 cv
388.629 6.875 388.707 6.60199 388.867 6.44897 cv
389.023 6.297 389.324 6.21899 389.77 6.21899 cv
390.203 6.21899 390.5 6.29303 390.656 6.44098 cv
390.813 6.59003 390.891 6.85498 390.891 7.22998 cv
cp
f
399.734 12.988 mo
399.73 13.586 399.652 14.129 399.5 14.613 cv
399.34 15.105 399.105 15.523 398.789 15.875 cv
398.473 16.227 398.074 16.5 397.598 16.691 cv
397.117 16.883 396.559 16.977 395.922 16.98 cv
395.301 16.977 394.762 16.895 394.309 16.723 cv
393.848 16.555 393.469 16.305 393.172 15.977 cv
392.867 15.652 392.645 15.25 392.5 14.77 cv
392.355 14.293 392.285 13.746 392.285 13.129 cv
392.285 12.539 392.363 12 392.52 11.508 cv
392.676 11.02 392.914 10.598 393.234 10.246 cv
393.551 9.89801 393.945 9.625 394.422 9.42999 cv
394.895 9.23798 395.453 9.14502 396.094 9.14099 cv
396.719 9.14502 397.258 9.22699 397.715 9.39502 cv
398.172 9.56598 398.551 9.81598 398.848 10.141 cv
399.145 10.469 399.367 10.871 399.516 11.348 cv
399.66 11.828 399.73 12.375 399.734 12.988 cv
cp
397.715 13.066 mo
397.711 12.73 397.684 12.414 397.633 12.121 cv
397.574 11.836 397.48 11.586 397.355 11.371 cv
397.223 11.16 397.051 10.992 396.84 10.871 cv
396.621 10.754 396.352 10.695 396.023 10.691 cv
395.734 10.695 395.48 10.75 395.262 10.852 cv
395.043 10.961 394.863 11.117 394.723 11.32 cv
394.582 11.527 394.477 11.773 394.406 12.059 cv
394.336 12.352 394.301 12.68 394.301 13.043 cv
394.301 13.391 394.328 13.707 394.387 13.992 cv
394.441 14.285 394.535 14.535 394.664 14.746 cv
394.789 14.961 394.961 15.125 395.184 15.238 cv
395.398 15.359 395.668 15.418 395.992 15.414 cv
396.285 15.418 396.543 15.363 396.766 15.254 cv
396.98 15.148 397.16 14.996 397.301 14.789 cv
397.441 14.59 397.543 14.344 397.613 14.055 cv
397.676 13.77 397.711 13.441 397.715 13.066 cv
cp
f
407.977 16.535 mo
407.973 16.59 407.957 16.633 407.93 16.672 cv
407.895 16.711 407.844 16.746 407.773 16.77 cv
407.699 16.797 407.598 16.812 407.473 16.828 cv
407.344 16.84 407.188 16.848 407.004 16.848 cv
406.809 16.848 406.648 16.84 406.523 16.828 cv
406.395 16.812 406.293 16.797 406.223 16.77 cv
406.145 16.746 406.094 16.711 406.066 16.672 cv
406.031 16.633 406.016 16.59 406.02 16.535 cv
406.02 12.57 li
406.016 12.234 405.992 11.969 405.945 11.773 cv
405.895 11.582 405.82 11.418 405.73 11.281 cv
405.637 11.145 405.52 11.039 405.371 10.961 cv
405.223 10.887 405.047 10.848 404.852 10.848 cv
404.598 10.848 404.348 10.941 404.094 11.121 cv
403.84 11.305 403.574 11.566 403.301 11.914 cv
403.301 16.535 li
403.297 16.59 403.281 16.633 403.254 16.672 cv
403.219 16.711 403.164 16.746 403.094 16.77 cv
403.016 16.797 402.918 16.812 402.793 16.828 cv
402.668 16.84 402.508 16.848 402.32 16.848 cv
402.125 16.848 401.969 16.84 401.844 16.828 cv
401.719 16.812 401.617 16.797 401.543 16.77 cv
401.465 16.746 401.41 16.711 401.383 16.672 cv
401.348 16.633 401.332 16.59 401.336 16.535 cv
401.336 9.586 li
401.332 9.539 401.348 9.492 401.375 9.44897 cv
401.398 9.414 401.445 9.383 401.516 9.35199 cv
401.582 9.328 401.668 9.30902 401.777 9.29303 cv
401.883 9.28497 402.016 9.27698 402.18 9.27301 cv
402.344 9.27698 402.48 9.28497 402.59 9.29303 cv
402.695 9.30902 402.781 9.328 402.844 9.35199 cv
402.902 9.383 402.945 9.414 402.973 9.44897 cv
402.996 9.492 403.008 9.539 403.012 9.586 cv
403.012 10.387 li
403.395 9.97699 403.785 9.664 404.184 9.453 cv
404.578 9.24597 404.996 9.14502 405.43 9.14099 cv
405.898 9.14502 406.297 9.22302 406.625 9.375 cv
406.949 9.53497 407.211 9.74597 407.41 10.012 cv
407.609 10.281 407.754 10.594 407.844 10.949 cv
407.93 11.309 407.973 11.738 407.977 12.242 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
