%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FirstScenario-EnergyConsumption.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:51:51 PM
%%BoundingBox: 0 0 672 568
%%HiResBoundingBox: 0 0 671.6401 567.3600
%%CropBox: 0 0 671.6401 567.3600
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -567.36 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 567.36 li
671.64 567.36 li
671.64 0 li
cp
clp
gsave
0 567.36 mo
672 567.36 li
672 -.640015 li
0 -.640015 li
cp
clp
0 0 mo
671.641 0 li
671.641 567.359 li
0 567.359 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.68 518.398 mo
655.199 518.398 li
49.68 508.441 mo
655.199 508.441 li
49.68 498.48 mo
655.199 498.48 li
49.68 488.52 mo
655.199 488.52 li
49.68 468.602 mo
655.199 468.602 li
49.68 458.641 mo
655.199 458.641 li
49.68 448.68 mo
655.199 448.68 li
49.68 438.719 mo
655.199 438.719 li
49.68 418.801 mo
655.199 418.801 li
49.68 408.84 mo
655.199 408.84 li
49.68 398.762 mo
655.199 398.762 li
49.68 388.801 mo
655.199 388.801 li
49.68 368.879 mo
655.199 368.879 li
49.68 358.922 mo
655.199 358.922 li
49.68 348.961 mo
655.199 348.961 li
49.68 339 mo
655.199 339 li
49.68 319.078 mo
655.199 319.078 li
49.68 309.121 mo
655.199 309.121 li
49.68 299.16 mo
655.199 299.16 li
49.68 289.199 mo
655.199 289.199 li
49.68 269.16 mo
655.199 269.16 li
49.68 259.199 mo
655.199 259.199 li
49.68 249.238 mo
655.199 249.238 li
49.68 239.281 mo
655.199 239.281 li
49.68 219.359 mo
655.199 219.359 li
49.68 209.398 mo
655.199 209.398 li
49.68 199.441 mo
655.199 199.441 li
49.68 189.48 mo
655.199 189.48 li
49.68 169.559 mo
655.199 169.559 li
49.68 159.48 mo
655.199 159.48 li
49.68 149.52 mo
655.199 149.52 li
49.68 139.559 mo
655.199 139.559 li
49.68 119.641 mo
655.199 119.641 li
49.68 109.68 mo
655.199 109.68 li
49.68 99.719 mo
655.199 99.719 li
49.68 89.762 mo
655.199 89.762 li
49.68 69.84 mo
655.199 69.84 li
49.68 59.879 mo
655.199 59.879 li
49.68 49.922 mo
655.199 49.922 li
49.68 39.84 mo
655.199 39.84 li
.140414 .108034 .108034 0 cmyk
@
49.68 478.559 mo
655.199 478.559 li
49.68 428.762 mo
655.199 428.762 li
49.68 378.84 mo
655.199 378.84 li
49.68 329.039 mo
655.199 329.039 li
49.68 279.121 mo
655.199 279.121 li
49.68 229.32 mo
655.199 229.32 li
49.68 179.52 mo
655.199 179.52 li
49.68 129.602 mo
655.199 129.602 li
49.68 79.801 mo
655.199 79.801 li
49.68 29.879 mo
655.199 29.879 li
.328344 .284215 .278569 .000915541 cmyk
@
87.48 29.879 mo
87.48 528.48 li
163.199 29.879 mo
163.199 528.48 li
238.922 29.879 mo
238.922 528.48 li
314.52 29.879 mo
314.52 528.48 li
390.238 29.879 mo
390.238 528.48 li
465.961 29.879 mo
465.961 528.48 li
541.68 29.879 mo
541.68 528.48 li
617.398 29.879 mo
617.398 528.48 li
.178592 .148898 .143923 0 cmyk
@
49.68 29.879 mo
49.68 528.48 li
125.281 29.879 mo
125.281 528.48 li
201 29.879 mo
201 528.48 li
276.719 29.879 mo
276.719 528.48 li
352.441 29.879 mo
352.441 528.48 li
428.16 29.879 mo
428.16 528.48 li
503.762 29.879 mo
503.762 528.48 li
579.48 29.879 mo
579.48 528.48 li
655.199 29.879 mo
655.199 528.48 li
.328344 .284215 .278569 .000915541 cmyk
@
32.398 520.441 mo
38.519 520.441 li
38.519 535.078 li
32.398 535.078 li
cp
0 0 0 0 cmyk
ef
32.398 470.641 mo
38.519 470.641 li
38.519 485.282 li
32.398 485.282 li
cp
ef
26.398 420.719 mo
38.519 420.719 li
38.519 435.36 li
26.398 435.36 li
cp
ef
26.398 370.922 mo
38.519 370.922 li
38.519 385.559 li
26.398 385.559 li
cp
ef
26.398 321 mo
38.519 321 li
38.519 335.641 li
26.398 335.641 li
cp
ef
26.398 271.199 mo
38.519 271.199 li
38.519 285.84 li
26.398 285.84 li
cp
ef
26.398 221.281 mo
38.519 221.281 li
38.519 236.039 li
26.398 236.039 li
cp
ef
26.398 171.48 mo
38.519 171.48 li
38.519 186.121 li
26.398 186.121 li
cp
ef
26.398 121.68 mo
38.519 121.68 li
38.519 136.321 li
26.398 136.321 li
cp
ef
26.398 71.762 mo
38.519 71.762 li
38.519 86.399 li
26.398 86.399 li
cp
ef
26.398 21.961 mo
38.519 21.961 li
38.519 36.602 li
26.398 36.602 li
cp
ef
.96 lw
49.68 528.48 mo
655.199 528.48 li
.367803 .29575 .300999 .00198367 cmyk
@
49.68 528.48 mo
49.68 532.199 li
125.281 528.48 mo
125.281 532.199 li
201 528.48 mo
201 532.199 li
276.719 528.48 mo
276.719 532.199 li
352.441 528.48 mo
352.441 532.199 li
428.16 528.48 mo
428.16 532.199 li
503.762 528.48 mo
503.762 532.199 li
579.48 528.48 mo
579.48 532.199 li
655.199 528.48 mo
655.199 532.199 li
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
1 lc
49.68 37.922 mo
125.281 135.602 li
201 107.762 li
276.719 124.922 li
352.441 97.801 li
428.16 97.801 li
503.762 96.602 li
579.48 97.32 li
655.199 95.641 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
54.641 42.801 mo
44.559 32.719 li
44.559 42.801 mo
54.641 32.719 li
.62768 .285466 0 0 cmyk
@
130.359 140.602 mo
120.281 130.52 li
120.281 140.602 mo
130.359 130.52 li
@
206.078 112.762 mo
196 102.68 li
196 112.762 mo
206.078 102.68 li
@
281.801 129.922 mo
271.719 119.84 li
271.719 129.922 mo
281.801 119.84 li
@
357.398 102.68 mo
347.32 92.602 li
347.32 102.68 mo
357.398 92.602 li
@
433.121 102.68 mo
423.039 92.602 li
423.039 102.68 mo
433.121 92.602 li
@
508.84 101.48 mo
498.762 91.398 li
498.762 101.48 mo
508.84 91.398 li
@
584.559 102.199 mo
574.48 92.121 li
574.48 102.199 mo
584.559 92.121 li
@
660.281 100.641 mo
650.199 90.559 li
650.199 100.641 mo
660.281 90.559 li
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
49.68 363 mo
125.281 369.48 li
201 377.16 li
276.719 392.039 li
352.441 381 li
428.16 379.922 li
503.762 389.16 li
579.48 402.121 li
655.199 381.961 li
@
grestore
44.559 357.801 mo
54.52 357.801 li
54.52 367.762 li
44.559 367.762 li
cp
@
120.281 364.281 mo
130.238 364.281 li
130.238 374.238 li
120.281 374.238 li
cp
@
196 371.961 mo
205.961 371.961 li
205.961 381.922 li
196 381.922 li
cp
@
271.719 386.84 mo
281.68 386.84 li
281.68 396.801 li
271.719 396.801 li
cp
@
347.32 375.801 mo
357.281 375.801 li
357.281 385.762 li
347.32 385.762 li
cp
@
423.039 374.84 mo
433 374.84 li
433 384.801 li
423.039 384.801 li
cp
@
498.762 384.078 mo
508.719 384.078 li
508.719 394.039 li
498.762 394.039 li
cp
@
574.48 397.039 mo
584.441 397.039 li
584.441 407 li
574.48 407 li
cp
@
650.199 376.879 mo
660.16 376.879 li
660.16 386.84 li
650.199 386.84 li
cp
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
49.68 195.719 mo
125.281 309.121 li
201 263.762 li
276.719 249.359 li
352.441 248.762 li
428.16 248.52 li
503.762 248.762 li
579.48 248.762 li
655.199 247.922 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
54.641 200.719 mo
44.559 190.641 li
44.559 200.719 mo
54.641 190.641 li
.0319219 .621851 .911223 .000427253 cmyk
@
130.359 314.121 mo
120.281 304.039 li
120.281 314.121 mo
130.359 304.039 li
@
206.078 268.641 mo
196 258.559 li
196 268.641 mo
206.078 258.559 li
@
281.801 254.359 mo
271.719 244.281 li
271.719 254.359 mo
281.801 244.281 li
@
357.398 253.762 mo
347.32 243.68 li
347.32 253.762 mo
357.398 243.68 li
@
433.121 253.398 mo
423.039 243.32 li
423.039 253.398 mo
433.121 243.32 li
@
508.84 253.762 mo
498.762 243.68 li
498.762 253.762 mo
508.84 243.68 li
@
584.559 253.762 mo
574.48 243.68 li
574.48 253.762 mo
584.559 243.68 li
@
660.281 252.801 mo
650.199 242.719 li
650.199 252.801 mo
660.281 242.719 li
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
49.68 346.68 mo
125.281 382.68 li
201 402.121 li
276.719 422.398 li
352.441 396.602 li
428.16 422.879 li
503.762 415.559 li
579.48 423.48 li
655.199 421.32 li
@
grestore
44.559 341.602 mo
54.52 341.602 li
54.52 351.559 li
44.559 351.559 li
cp
@
120.281 377.602 mo
130.238 377.602 li
130.238 387.559 li
120.281 387.559 li
cp
@
196 397.039 mo
205.961 397.039 li
205.961 407 li
196 407 li
cp
@
271.719 417.199 mo
281.68 417.199 li
281.68 427.16 li
271.719 427.16 li
cp
@
347.32 391.52 mo
357.281 391.52 li
357.281 401.481 li
347.32 401.481 li
cp
@
423.039 417.68 mo
433 417.68 li
433 427.641 li
423.039 427.641 li
cp
@
498.762 410.48 mo
508.719 410.48 li
508.719 420.441 li
498.762 420.441 li
cp
@
574.48 418.281 mo
584.441 418.281 li
584.441 428.238 li
574.48 428.238 li
cp
@
650.199 416.238 mo
660.16 416.238 li
660.16 426.199 li
650.199 426.199 li
cp
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
49.68 241.922 mo
125.281 303.602 li
201 273.961 li
276.719 274.32 li
352.441 259.922 li
428.16 259.199 li
503.762 260.641 li
579.48 259.199 li
655.199 259.199 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
54.641 246.922 mo
44.559 236.84 li
44.559 246.922 mo
54.641 236.84 li
.619135 .109529 .981689 .00570687 cmyk
@
130.359 308.602 mo
120.281 298.52 li
120.281 308.602 mo
130.359 298.52 li
@
206.078 278.84 mo
196 268.762 li
196 278.84 mo
206.078 268.762 li
@
281.801 279.199 mo
271.719 269.121 li
271.719 279.199 mo
281.801 269.121 li
@
357.398 264.922 mo
347.32 254.84 li
347.32 264.922 mo
357.398 254.84 li
@
433.121 264.199 mo
423.039 254.121 li
423.039 264.199 mo
433.121 254.121 li
@
508.84 265.641 mo
498.762 255.559 li
498.762 265.641 mo
508.84 255.559 li
@
584.559 264.199 mo
574.48 254.121 li
574.48 264.199 mo
584.559 254.121 li
@
660.281 264.199 mo
650.199 254.121 li
650.199 264.199 mo
660.281 254.121 li
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
49.68 331.801 mo
125.281 394.801 li
201 403.441 li
276.719 425.762 li
352.441 423.48 li
428.16 405 li
503.762 414 li
579.48 418.922 li
655.199 419.281 li
@
grestore
44.559 326.719 mo
54.52 326.719 li
54.52 336.68 li
44.559 336.68 li
cp
@
120.281 389.719 mo
130.238 389.719 li
130.238 399.68 li
120.281 399.68 li
cp
@
196 398.359 mo
205.961 398.359 li
205.961 408.32 li
196 408.32 li
cp
@
271.719 420.559 mo
281.68 420.559 li
281.68 430.52 li
271.719 430.52 li
cp
@
347.32 418.281 mo
357.281 418.281 li
357.281 428.238 li
347.32 428.238 li
cp
@
423.039 399.922 mo
433 399.922 li
433 409.879 li
423.039 409.879 li
cp
@
498.762 408.801 mo
508.719 408.801 li
508.719 418.762 li
498.762 418.762 li
cp
@
574.48 413.719 mo
584.441 413.719 li
584.441 423.68 li
574.48 423.68 li
cp
@
650.199 414.078 mo
660.16 414.078 li
660.16 424.039 li
650.199 424.039 li
cp
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
49.68 269.16 mo
125.281 306.48 li
201 329.641 li
276.719 286.32 li
352.441 290.16 li
428.16 282.961 li
503.762 281.641 li
579.48 279.121 li
655.199 274.68 li
0 .990631 1 .000396735 cmyk
@
grestore
54.641 274.16 mo
44.559 264.078 li
44.559 274.16 mo
54.641 264.078 li
0 .990631 1 .000396735 cmyk
@
130.359 311.48 mo
120.281 301.398 li
120.281 311.48 mo
130.359 301.398 li
@
206.078 334.641 mo
196 324.559 li
196 334.641 mo
206.078 324.559 li
@
281.801 291.32 mo
271.719 281.238 li
271.719 291.32 mo
281.801 281.238 li
@
357.398 295.039 mo
347.32 284.961 li
347.32 295.039 mo
357.398 284.961 li
@
433.121 287.84 mo
423.039 277.762 li
423.039 287.84 mo
433.121 277.762 li
@
508.84 286.52 mo
498.762 276.441 li
498.762 286.52 mo
508.84 276.441 li
@
584.559 284 mo
574.48 273.922 li
574.48 284 mo
584.559 273.922 li
@
660.281 279.68 mo
650.199 269.602 li
650.199 279.68 mo
660.281 269.602 li
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
49.68 340.801 mo
125.281 378.359 li
201 395.641 li
276.719 399.121 li
352.441 392.039 li
428.16 409.68 li
503.762 386.879 li
579.48 397.922 li
655.199 417 li
@
grestore
44.559 335.602 mo
54.52 335.602 li
54.52 345.559 li
44.559 345.559 li
cp
@
120.281 373.281 mo
130.238 373.281 li
130.238 383.238 li
120.281 383.238 li
cp
@
196 390.441 mo
205.961 390.441 li
205.961 400.398 li
196 400.398 li
cp
@
271.719 393.922 mo
281.68 393.922 li
281.68 403.879 li
271.719 403.879 li
cp
@
347.32 386.84 mo
357.281 386.84 li
357.281 396.801 li
347.32 396.801 li
cp
@
423.039 404.48 mo
433 404.48 li
433 414.441 li
423.039 414.441 li
cp
@
498.762 381.68 mo
508.719 381.68 li
508.719 391.641 li
498.762 391.641 li
cp
@
574.48 392.84 mo
584.441 392.84 li
584.441 402.801 li
574.48 402.801 li
cp
@
650.199 411.922 mo
660.16 411.922 li
660.16 421.879 li
650.199 421.879 li
cp
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 282.48 mo
125.281 308.16 li
201 297.84 li
276.719 283.801 li
352.441 282.961 li
428.16 278.641 li
503.762 282.48 li
579.48 281.641 li
655.199 280.32 li
.62768 .285466 0 0 cmyk
@
grestore
54.16 286.879 mo
45.039 277.762 li
45.039 286.879 mo
54.16 277.762 li
.62768 .285466 0 0 cmyk
@
129.879 312.68 mo
120.762 303.559 li
120.762 312.68 mo
129.879 303.559 li
@
205.602 302.238 mo
196.48 293.121 li
196.48 302.238 mo
205.602 293.121 li
@
281.32 288.199 mo
272.199 279.078 li
272.199 288.199 mo
281.32 279.078 li
@
356.922 287.359 mo
347.801 278.238 li
347.801 287.359 mo
356.922 278.238 li
@
432.641 283.039 mo
423.52 273.922 li
423.52 283.039 mo
432.641 273.922 li
@
508.359 287 mo
499.238 277.879 li
499.238 287 mo
508.359 277.879 li
@
584.078 286.039 mo
574.961 276.922 li
574.961 286.039 mo
584.078 276.922 li
@
659.801 284.84 mo
650.68 275.719 li
650.68 284.84 mo
659.801 275.719 li
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 354.121 mo
125.281 379.441 li
201 393.84 li
276.719 417.84 li
352.441 408.602 li
428.16 403.68 li
503.762 407.52 li
579.48 411.121 li
655.199 399.48 li
@
grestore
44.559 348.922 mo
54.52 348.922 li
54.52 358.879 li
44.559 358.879 li
cp
@
120.281 374.359 mo
130.238 374.359 li
130.238 384.32 li
120.281 384.32 li
cp
@
196 388.641 mo
205.961 388.641 li
205.961 398.602 li
196 398.602 li
cp
@
271.719 412.762 mo
281.68 412.762 li
281.68 422.719 li
271.719 422.719 li
cp
@
347.32 403.398 mo
357.281 403.398 li
357.281 413.359 li
347.32 413.359 li
cp
@
423.039 398.602 mo
433 398.602 li
433 408.559 li
423.039 408.559 li
cp
@
498.762 402.32 mo
508.719 402.32 li
508.719 412.281 li
498.762 412.281 li
cp
@
574.48 406.039 mo
584.441 406.039 li
584.441 416 li
574.48 416 li
cp
@
650.199 394.398 mo
660.16 394.398 li
660.16 404.359 li
650.199 404.359 li
cp
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 275.879 mo
125.281 304.199 li
201 328.199 li
276.719 290.281 li
352.441 282.961 li
428.16 282.961 li
503.762 278.641 li
579.48 280.801 li
655.199 279.121 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
54.641 280.879 mo
44.559 270.801 li
44.559 280.879 mo
54.641 270.801 li
.0319219 .621851 .911223 .000427253 cmyk
@
130.359 309.078 mo
120.281 299 li
120.281 309.078 mo
130.359 299 li
@
206.078 333.078 mo
196 323 li
196 333.078 mo
206.078 323 li
@
281.801 295.16 mo
271.719 285.078 li
271.719 295.16 mo
281.801 285.078 li
@
357.398 287.84 mo
347.32 277.762 li
347.32 287.84 mo
357.398 277.762 li
@
433.121 287.84 mo
423.039 277.762 li
423.039 287.84 mo
433.121 277.762 li
@
508.84 283.52 mo
498.762 273.441 li
498.762 283.52 mo
508.84 273.441 li
@
584.559 285.68 mo
574.48 275.602 li
574.48 285.68 mo
584.559 275.602 li
@
660.281 284 mo
650.199 273.922 li
650.199 284 mo
660.281 273.922 li
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 358.801 mo
125.281 388.922 li
201 411.84 li
276.719 422.52 li
352.441 407.16 li
428.16 416.039 li
503.762 402.121 li
579.48 409.199 li
655.199 400.559 li
@
grestore
45.039 354.078 mo
54.039 354.078 li
54.039 363.078 li
45.039 363.078 li
cp
@
120.762 384.32 mo
129.762 384.32 li
129.762 393.32 li
120.762 393.32 li
cp
@
196.48 407.238 mo
205.48 407.238 li
205.48 416.238 li
196.48 416.238 li
cp
@
272.199 417.801 mo
281.199 417.801 li
281.199 426.801 li
272.199 426.801 li
cp
@
347.801 402.441 mo
356.801 402.441 li
356.801 411.441 li
347.801 411.441 li
cp
@
423.52 411.32 mo
432.52 411.32 li
432.52 420.32 li
423.52 420.32 li
cp
@
499.238 397.52 mo
508.238 397.52 li
508.238 406.52 li
499.238 406.52 li
cp
@
574.961 404.48 mo
583.961 404.48 li
583.961 413.48 li
574.961 413.48 li
cp
@
650.68 395.84 mo
659.68 395.84 li
659.68 404.84 li
650.68 404.84 li
cp
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 275.879 mo
125.281 331.199 li
201 326.879 li
276.719 282.961 li
352.441 282.48 li
428.16 280.441 li
503.762 281.641 li
579.48 286.441 li
655.199 284.16 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
54.641 280.879 mo
44.559 270.801 li
44.559 280.879 mo
54.641 270.801 li
.619135 .109529 .981689 .00570687 cmyk
@
130.359 336.078 mo
120.281 326 li
120.281 336.078 mo
130.359 326 li
@
206.078 331.762 mo
196 321.68 li
196 331.762 mo
206.078 321.68 li
@
281.801 287.84 mo
271.719 277.762 li
271.719 287.84 mo
281.801 277.762 li
@
357.398 287.48 mo
347.32 277.398 li
347.32 287.48 mo
357.398 277.398 li
@
433.121 285.32 mo
423.039 275.238 li
423.039 285.32 mo
433.121 275.238 li
@
508.84 286.52 mo
498.762 276.441 li
498.762 286.52 mo
508.84 276.441 li
@
584.559 291.32 mo
574.48 281.238 li
574.48 291.32 mo
584.559 281.238 li
@
660.281 289.16 mo
650.199 279.078 li
650.199 289.16 mo
660.281 279.078 li
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 354 mo
125.281 381.238 li
201 393.48 li
276.719 426.719 li
352.441 407.879 li
428.16 404.762 li
503.762 396.602 li
579.48 389.281 li
655.199 418.32 li
@
grestore
44.559 348.801 mo
54.52 348.801 li
54.52 358.762 li
44.559 358.762 li
cp
@
120.281 376.16 mo
130.238 376.16 li
130.238 386.121 li
120.281 386.121 li
cp
@
196 388.281 mo
205.961 388.281 li
205.961 398.238 li
196 398.238 li
cp
@
271.719 421.52 mo
281.68 421.52 li
281.68 431.481 li
271.719 431.481 li
cp
@
347.32 402.801 mo
357.281 402.801 li
357.281 412.762 li
347.32 412.762 li
cp
@
423.039 399.559 mo
433 399.559 li
433 409.52 li
423.039 409.52 li
cp
@
498.762 391.52 mo
508.719 391.52 li
508.719 401.481 li
498.762 401.481 li
cp
@
574.48 384.078 mo
584.441 384.078 li
584.441 394.039 li
574.48 394.039 li
cp
@
650.199 413.121 mo
660.16 413.121 li
660.16 423.078 li
650.199 423.078 li
cp
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 278.281 mo
125.281 300.238 li
201 329.039 li
276.719 322.559 li
352.441 292.32 li
428.16 280.801 li
503.762 313.922 li
579.48 281.641 li
655.199 279.48 li
0 .990631 1 .000396735 cmyk
@
grestore
54.641 283.281 mo
44.559 273.199 li
44.559 283.281 mo
54.641 273.199 li
0 .990631 1 .000396735 cmyk
@
130.359 305.121 mo
120.281 295.039 li
120.281 305.121 mo
130.359 295.039 li
@
206.078 333.922 mo
196 323.84 li
196 333.922 mo
206.078 323.84 li
@
281.801 327.441 mo
271.719 317.359 li
271.719 327.441 mo
281.801 317.359 li
@
357.398 297.199 mo
347.32 287.121 li
347.32 297.199 mo
357.398 287.121 li
@
433.121 285.68 mo
423.039 275.602 li
423.039 285.68 mo
433.121 275.602 li
@
508.84 318.922 mo
498.762 308.84 li
498.762 318.922 mo
508.84 308.84 li
@
584.559 286.52 mo
574.48 276.441 li
574.48 286.52 mo
584.559 276.441 li
@
660.281 284.359 mo
650.199 274.281 li
650.199 284.359 mo
660.281 274.281 li
@
gsave
49.68 29.879 mo
655.922 29.879 li
655.922 529.078 li
49.68 529.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 334.559 mo
125.281 390.48 li
201 399.238 li
276.719 409.559 li
352.441 417.602 li
428.16 422.398 li
503.762 396.48 li
579.48 417.121 li
655.199 405.359 li
@
grestore
44.559 329.48 mo
54.52 329.48 li
54.52 339.441 li
44.559 339.441 li
cp
@
120.281 385.281 mo
130.238 385.281 li
130.238 395.238 li
120.281 395.238 li
cp
@
196 394.039 mo
205.961 394.039 li
205.961 404 li
196 404 li
cp
@
271.719 404.359 mo
281.68 404.359 li
281.68 414.32 li
271.719 414.32 li
cp
@
347.32 412.52 mo
357.281 412.52 li
357.281 422.481 li
347.32 422.481 li
cp
@
423.039 417.199 mo
433 417.199 li
433 427.16 li
423.039 427.16 li
cp
@
498.762 391.398 mo
508.719 391.398 li
508.719 401.359 li
498.762 401.359 li
cp
@
574.48 411.922 mo
584.441 411.922 li
584.441 421.879 li
574.48 421.879 li
cp
@
650.199 400.16 mo
660.16 400.16 li
660.16 410.121 li
650.199 410.121 li
cp
@
32.469 520.398 mo
38.551 520.398 li
38.551 535.046 li
32.469 535.046 li
cp
0 0 0 0 cmyk
ef
38.137 528.078 mo
38.133 528.66 38.086 529.191 38 529.672 cv
37.906 530.156 37.754 530.57 37.543 530.914 cv
37.324 531.258 37.047 531.527 36.707 531.715 cv
36.359 531.902 35.938 531.992 35.438 531.996 cv
34.961 531.992 34.559 531.91 34.234 531.742 cv
33.906 531.574 33.645 531.324 33.445 530.992 cv
33.242 530.664 33.098 530.258 33.02 529.773 cv
32.934 529.293 32.895 528.738 32.895 528.113 cv
32.895 527.535 32.941 527.008 33.035 526.523 cv
33.129 526.047 33.281 525.633 33.492 525.281 cv
33.703 524.937 33.98 524.668 34.324 524.477 cv
34.668 524.289 35.09 524.195 35.59 524.191 cv
36.066 524.195 36.469 524.281 36.797 524.449 cv
37.125 524.621 37.387 524.871 37.586 525.199 cv
37.785 525.531 37.926 525.937 38.012 526.418 cv
38.09 526.902 38.133 527.453 38.137 528.078 cv
cp
37.105 528.148 mo
37.102 527.773 37.09 527.434 37.066 527.129 cv
37.039 526.828 36.996 526.562 36.945 526.332 cv
36.891 526.105 36.824 525.91 36.738 525.738 cv
36.652 525.574 36.551 525.437 36.438 525.328 cv
36.316 525.227 36.184 525.148 36.035 525.094 cv
35.887 525.047 35.719 525.02 35.531 525.02 cv
35.199 525.02 34.93 525.098 34.723 525.254 cv
34.512 525.41 34.348 525.625 34.23 525.898 cv
34.113 526.172 34.031 526.492 33.988 526.859 cv
33.945 527.227 33.926 527.621 33.926 528.043 cv
33.926 528.613 33.953 529.098 34.012 529.488 cv
34.07 529.887 34.164 530.207 34.289 530.457 cv
34.414 530.707 34.574 530.891 34.777 531.004 cv
34.973 531.117 35.215 531.172 35.496 531.172 cv
35.715 531.172 35.906 531.137 36.074 531.066 cv
36.238 530.996 36.379 530.898 36.5 530.766 cv
36.617 530.637 36.719 530.477 36.797 530.293 cv
36.875 530.113 36.938 529.91 36.984 529.684 cv
37.031 529.461 37.063 529.223 37.078 528.961 cv
37.094 528.703 37.102 528.43 37.105 528.148 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.469 470.547 mo
38.551 470.547 li
38.551 485.195 li
32.469 485.195 li
cp
0 0 0 0 cmyk
ef
37.852 479.602 mo
37.852 480.008 37.781 480.371 37.645 480.687 cv
37.508 481.004 37.316 481.27 37.066 481.488 cv
36.816 481.707 36.516 481.871 36.172 481.98 cv
35.82 482.09 35.438 482.145 35.02 482.148 cv
34.781 482.145 34.559 482.129 34.352 482.098 cv
34.137 482.066 33.949 482.027 33.789 481.98 cv
33.621 481.934 33.488 481.887 33.387 481.836 cv
33.281 481.793 33.211 481.754 33.184 481.723 cv
33.152 481.695 33.133 481.672 33.121 481.645 cv
33.109 481.625 33.098 481.598 33.09 481.562 cv
33.074 481.531 33.07 481.488 33.07 481.437 cv
33.066 481.387 33.063 481.324 33.066 481.254 cv
33.063 481.191 33.066 481.133 33.074 481.078 cv
33.078 481.023 33.09 480.98 33.105 480.949 cv
33.121 480.918 33.137 480.895 33.16 480.875 cv
33.176 480.863 33.203 480.855 33.234 480.852 cv
33.273 480.855 33.332 480.879 33.414 480.926 cv
33.496 480.973 33.605 481.027 33.746 481.082 cv
33.883 481.141 34.055 481.191 34.262 481.242 cv
34.465 481.297 34.711 481.324 34.992 481.32 cv
35.254 481.324 35.492 481.293 35.715 481.227 cv
35.93 481.168 36.117 481.07 36.277 480.934 cv
36.434 480.805 36.559 480.637 36.648 480.434 cv
36.738 480.23 36.785 479.984 36.785 479.695 cv
36.785 479.453 36.746 479.242 36.672 479.055 cv
36.594 478.871 36.477 478.715 36.32 478.59 cv
36.16 478.469 35.961 478.379 35.719 478.316 cv
35.477 478.262 35.188 478.23 34.852 478.227 cv
34.613 478.23 34.406 478.242 34.238 478.262 cv
34.063 478.289 33.902 478.301 33.754 478.297 cv
33.641 478.301 33.563 478.273 33.52 478.219 cv
33.469 478.168 33.445 478.07 33.449 477.926 cv
33.449 474.836 li
33.445 474.711 33.477 474.613 33.539 474.551 cv
33.602 474.488 33.688 474.457 33.801 474.457 cv
37.16 474.457 li
37.191 474.457 37.219 474.469 37.25 474.484 cv
37.273 474.504 37.301 474.527 37.324 474.562 cv
37.344 474.602 37.355 474.648 37.367 474.699 cv
37.375 474.758 37.383 474.82 37.383 474.891 cv
37.383 475.031 37.363 475.141 37.324 475.219 cv
37.285 475.297 37.23 475.336 37.168 475.336 cv
34.457 475.336 li
34.457 477.461 li
34.586 477.445 34.723 477.434 34.863 477.43 cv
35 477.426 35.156 477.422 35.34 477.422 cv
35.754 477.422 36.121 477.477 36.434 477.578 cv
36.746 477.687 37.004 477.832 37.215 478.02 cv
37.422 478.207 37.582 478.437 37.691 478.707 cv
37.797 478.977 37.852 479.273 37.852 479.602 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.391 420.699 mo
38.551 420.699 li
38.551 435.351 li
26.391 435.351 li
cp
0 0 0 0 cmyk
ef
31.828 431.773 mo
31.824 431.848 31.82 431.91 31.813 431.961 cv
31.801 432.016 31.785 432.059 31.766 432.086 cv
31.742 432.121 31.719 432.145 31.695 432.152 cv
31.672 432.168 31.645 432.172 31.617 432.172 cv
27.656 432.172 li
27.629 432.172 27.605 432.168 27.582 432.152 cv
27.559 432.145 27.535 432.121 27.516 432.086 cv
27.492 432.059 27.477 432.016 27.465 431.961 cv
27.449 431.91 27.441 431.848 27.445 431.773 cv
27.441 431.703 27.449 431.645 27.465 431.594 cv
27.477 431.543 27.488 431.5 27.508 431.465 cv
27.523 431.434 27.547 431.41 27.57 431.391 cv
27.594 431.375 27.621 431.363 27.656 431.363 cv
29.242 431.363 li
29.242 425.598 li
27.773 426.469 li
27.699 426.516 27.641 426.539 27.598 426.543 cv
27.551 426.555 27.516 426.547 27.488 426.516 cv
27.457 426.492 27.438 426.449 27.43 426.391 cv
27.422 426.332 27.418 426.258 27.418 426.164 cv
27.418 426.102 27.418 426.043 27.426 425.996 cv
27.43 425.949 27.441 425.91 27.453 425.879 cv
27.461 425.848 27.477 425.82 27.5 425.797 cv
27.523 425.773 27.551 425.75 27.586 425.727 cv
29.336 424.609 li
29.348 424.598 29.367 424.586 29.395 424.578 cv
29.414 424.57 29.445 424.562 29.48 424.555 cv
29.512 424.547 29.551 424.543 29.602 424.543 cv
29.645 424.543 29.703 424.543 29.781 424.539 cv
29.871 424.543 29.949 424.547 30.016 424.551 cv
30.074 424.562 30.125 424.574 30.16 424.582 cv
30.191 424.598 30.215 424.613 30.23 424.633 cv
30.242 424.656 30.246 424.68 30.25 424.703 cv
30.25 431.363 li
31.617 431.363 li
31.645 431.363 31.676 431.375 31.707 431.391 cv
31.734 431.41 31.754 431.434 31.773 431.465 cv
31.789 431.5 31.805 431.543 31.813 431.594 cv
31.82 431.645 31.824 431.703 31.828 431.773 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.184 428.363 mo
38.18 428.945 38.133 429.477 38.047 429.957 cv
37.953 430.441 37.801 430.855 37.59 431.199 cv
37.371 431.543 37.094 431.812 36.754 432 cv
36.406 432.187 35.984 432.277 35.484 432.281 cv
35.008 432.277 34.605 432.195 34.281 432.027 cv
33.953 431.859 33.691 431.609 33.492 431.277 cv
33.289 430.949 33.145 430.543 33.066 430.059 cv
32.98 429.578 32.941 429.023 32.941 428.398 cv
32.941 427.82 32.988 427.293 33.082 426.809 cv
33.176 426.332 33.328 425.918 33.539 425.566 cv
33.75 425.223 34.027 424.953 34.371 424.762 cv
34.715 424.574 35.137 424.48 35.637 424.477 cv
36.113 424.48 36.516 424.566 36.844 424.734 cv
37.172 424.906 37.434 425.156 37.633 425.484 cv
37.832 425.816 37.973 426.223 38.059 426.703 cv
38.137 427.187 38.18 427.738 38.184 428.363 cv
cp
37.152 428.434 mo
37.148 428.059 37.137 427.719 37.113 427.414 cv
37.086 427.113 37.043 426.848 36.992 426.617 cv
36.938 426.391 36.871 426.195 36.785 426.023 cv
36.699 425.859 36.598 425.723 36.484 425.613 cv
36.363 425.512 36.23 425.434 36.082 425.379 cv
35.934 425.332 35.766 425.305 35.578 425.305 cv
35.246 425.305 34.977 425.383 34.77 425.539 cv
34.559 425.695 34.395 425.91 34.277 426.184 cv
34.16 426.457 34.078 426.777 34.035 427.145 cv
33.992 427.512 33.973 427.906 33.973 428.328 cv
33.973 428.898 34 429.383 34.059 429.773 cv
34.117 430.172 34.211 430.492 34.336 430.742 cv
34.461 430.992 34.621 431.176 34.824 431.289 cv
35.02 431.402 35.262 431.457 35.543 431.457 cv
35.762 431.457 35.953 431.422 36.121 431.352 cv
36.285 431.281 36.426 431.184 36.547 431.051 cv
36.664 430.922 36.766 430.762 36.844 430.578 cv
36.922 430.398 36.984 430.195 37.031 429.969 cv
37.078 429.746 37.109 429.508 37.125 429.246 cv
37.141 428.988 37.148 428.715 37.152 428.434 cv
cp
f
26.391 370.852 mo
38.551 370.852 li
38.551 385.5 li
26.391 385.5 li
cp
0 0 0 0 cmyk
ef
31.828 381.922 mo
31.824 381.996 31.82 382.059 31.813 382.109 cv
31.801 382.164 31.785 382.207 31.766 382.234 cv
31.742 382.27 31.719 382.293 31.695 382.301 cv
31.672 382.316 31.645 382.32 31.617 382.32 cv
27.656 382.32 li
27.629 382.32 27.605 382.316 27.582 382.301 cv
27.559 382.293 27.535 382.27 27.516 382.234 cv
27.492 382.207 27.477 382.164 27.465 382.109 cv
27.449 382.059 27.441 381.996 27.445 381.922 cv
27.441 381.852 27.449 381.793 27.465 381.742 cv
27.477 381.691 27.488 381.648 27.508 381.613 cv
27.523 381.582 27.547 381.559 27.57 381.539 cv
27.594 381.523 27.621 381.512 27.656 381.512 cv
29.242 381.512 li
29.242 375.746 li
27.773 376.617 li
27.699 376.664 27.641 376.687 27.598 376.691 cv
27.551 376.703 27.516 376.695 27.488 376.664 cv
27.457 376.641 27.438 376.598 27.43 376.539 cv
27.422 376.48 27.418 376.406 27.418 376.312 cv
27.418 376.25 27.418 376.191 27.426 376.145 cv
27.43 376.098 27.441 376.059 27.453 376.027 cv
27.461 375.996 27.477 375.969 27.5 375.945 cv
27.523 375.922 27.551 375.898 27.586 375.875 cv
29.336 374.758 li
29.348 374.746 29.367 374.734 29.395 374.727 cv
29.414 374.719 29.445 374.711 29.48 374.703 cv
29.512 374.695 29.551 374.691 29.602 374.691 cv
29.645 374.691 29.703 374.691 29.781 374.687 cv
29.871 374.691 29.949 374.695 30.016 374.699 cv
30.074 374.711 30.125 374.723 30.16 374.73 cv
30.191 374.746 30.215 374.762 30.23 374.781 cv
30.242 374.805 30.246 374.828 30.25 374.852 cv
30.25 381.512 li
31.617 381.512 li
31.645 381.512 31.676 381.523 31.707 381.539 cv
31.734 381.559 31.754 381.582 31.773 381.613 cv
31.789 381.648 31.805 381.691 31.813 381.742 cv
31.82 381.793 31.824 381.852 31.828 381.922 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.898 379.883 mo
37.898 380.289 37.828 380.652 37.691 380.969 cv
37.555 381.285 37.363 381.551 37.113 381.77 cv
36.863 381.988 36.563 382.152 36.219 382.262 cv
35.867 382.371 35.484 382.426 35.066 382.43 cv
34.828 382.426 34.605 382.41 34.398 382.379 cv
34.184 382.348 33.996 382.309 33.836 382.262 cv
33.668 382.215 33.535 382.168 33.434 382.117 cv
33.328 382.074 33.258 382.035 33.23 382.004 cv
33.199 381.977 33.18 381.953 33.168 381.926 cv
33.156 381.906 33.145 381.879 33.137 381.844 cv
33.121 381.812 33.117 381.77 33.117 381.719 cv
33.113 381.668 33.109 381.605 33.113 381.535 cv
33.109 381.473 33.113 381.414 33.121 381.359 cv
33.125 381.305 33.137 381.262 33.152 381.23 cv
33.168 381.199 33.184 381.176 33.207 381.156 cv
33.223 381.145 33.25 381.137 33.281 381.133 cv
33.32 381.137 33.379 381.16 33.461 381.207 cv
33.543 381.254 33.652 381.309 33.793 381.363 cv
33.93 381.422 34.102 381.473 34.309 381.523 cv
34.512 381.578 34.758 381.605 35.039 381.602 cv
35.301 381.605 35.539 381.574 35.762 381.508 cv
35.977 381.449 36.164 381.352 36.324 381.215 cv
36.48 381.086 36.605 380.918 36.695 380.715 cv
36.785 380.512 36.832 380.266 36.832 379.977 cv
36.832 379.734 36.793 379.523 36.719 379.336 cv
36.641 379.152 36.523 378.996 36.367 378.871 cv
36.207 378.75 36.008 378.66 35.766 378.598 cv
35.523 378.543 35.234 378.512 34.898 378.508 cv
34.66 378.512 34.453 378.523 34.285 378.543 cv
34.109 378.57 33.949 378.582 33.801 378.578 cv
33.688 378.582 33.609 378.555 33.566 378.5 cv
33.516 378.449 33.492 378.352 33.496 378.207 cv
33.496 375.117 li
33.492 374.992 33.523 374.895 33.586 374.832 cv
33.648 374.77 33.734 374.738 33.848 374.738 cv
37.207 374.738 li
37.238 374.738 37.266 374.75 37.297 374.766 cv
37.32 374.785 37.348 374.809 37.371 374.844 cv
37.391 374.883 37.402 374.93 37.414 374.98 cv
37.422 375.039 37.43 375.102 37.43 375.172 cv
37.43 375.312 37.41 375.422 37.371 375.5 cv
37.332 375.578 37.277 375.617 37.215 375.617 cv
34.504 375.617 li
34.504 377.742 li
34.633 377.727 34.77 377.715 34.91 377.711 cv
35.047 377.707 35.203 377.703 35.387 377.703 cv
35.801 377.703 36.168 377.758 36.48 377.859 cv
36.793 377.969 37.051 378.113 37.262 378.301 cv
37.469 378.488 37.629 378.719 37.738 378.988 cv
37.844 379.258 37.898 379.555 37.898 379.883 cv
cp
f
26.391 321 mo
38.551 321 li
38.551 335.648 li
26.391 335.648 li
cp
0 0 0 0 cmyk
ef
31.813 332.016 mo
31.813 332.086 31.805 332.148 31.797 332.203 cv
31.781 332.258 31.77 332.305 31.754 332.34 cv
31.738 332.379 31.715 332.406 31.684 332.422 cv
31.652 332.441 31.621 332.449 31.59 332.449 cv
27.398 332.449 li
27.344 332.449 27.297 332.445 27.258 332.43 cv
27.215 332.422 27.18 332.398 27.152 332.363 cv
27.121 332.336 27.098 332.289 27.086 332.227 cv
27.07 332.168 27.066 332.098 27.066 332.012 cv
27.066 331.937 27.066 331.867 27.074 331.805 cv
27.078 331.746 27.094 331.695 27.113 331.648 cv
27.133 331.605 27.156 331.562 27.188 331.516 cv
27.215 331.477 27.254 331.426 27.309 331.371 cv
28.824 329.812 li
29.172 329.453 29.449 329.133 29.664 328.848 cv
29.875 328.562 30.039 328.301 30.156 328.066 cv
30.266 327.832 30.344 327.621 30.383 327.43 cv
30.418 327.238 30.434 327.059 30.438 326.887 cv
30.434 326.723 30.406 326.562 30.352 326.41 cv
30.293 326.262 30.211 326.129 30.105 326.016 cv
29.996 325.906 29.863 325.816 29.703 325.746 cv
29.539 325.68 29.352 325.648 29.148 325.645 cv
28.898 325.648 28.68 325.68 28.484 325.746 cv
28.289 325.816 28.117 325.891 27.969 325.965 cv
27.82 326.047 27.695 326.117 27.602 326.18 cv
27.5 326.246 27.43 326.281 27.383 326.277 cv
27.352 326.281 27.324 326.273 27.305 326.254 cv
27.281 326.242 27.262 326.215 27.25 326.18 cv
27.234 326.148 27.227 326.102 27.219 326.039 cv
27.211 325.98 27.207 325.91 27.207 325.828 cv
27.207 325.77 27.207 325.719 27.211 325.676 cv
27.215 325.637 27.223 325.602 27.234 325.566 cv
27.242 325.539 27.254 325.508 27.273 325.477 cv
27.285 325.449 27.316 325.418 27.367 325.375 cv
27.41 325.336 27.492 325.277 27.609 325.207 cv
27.723 325.137 27.867 325.07 28.043 325 cv
28.215 324.934 28.406 324.875 28.617 324.824 cv
28.824 324.781 29.043 324.758 29.273 324.754 cv
29.641 324.758 29.961 324.809 30.238 324.91 cv
30.512 325.016 30.742 325.156 30.922 325.336 cv
31.102 325.516 31.238 325.727 31.332 325.965 cv
31.422 326.203 31.465 326.457 31.469 326.723 cv
31.465 326.973 31.445 327.215 31.402 327.449 cv
31.355 327.691 31.262 327.949 31.129 328.227 cv
30.988 328.508 30.789 328.82 30.527 329.16 cv
30.266 329.504 29.918 329.895 29.484 330.34 cv
28.285 331.594 li
31.586 331.594 li
31.613 331.594 31.645 331.605 31.676 331.621 cv
31.703 331.641 31.727 331.664 31.75 331.699 cv
31.766 331.738 31.781 331.785 31.797 331.832 cv
31.805 331.887 31.813 331.945 31.813 332.016 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.184 328.641 mo
38.18 329.223 38.133 329.754 38.047 330.234 cv
37.953 330.719 37.801 331.133 37.59 331.477 cv
37.371 331.82 37.094 332.09 36.754 332.277 cv
36.406 332.465 35.984 332.555 35.484 332.559 cv
35.008 332.555 34.605 332.473 34.281 332.305 cv
33.953 332.137 33.691 331.887 33.492 331.555 cv
33.289 331.227 33.145 330.82 33.066 330.336 cv
32.98 329.855 32.941 329.301 32.941 328.676 cv
32.941 328.098 32.988 327.57 33.082 327.086 cv
33.176 326.609 33.328 326.195 33.539 325.844 cv
33.75 325.5 34.027 325.23 34.371 325.039 cv
34.715 324.852 35.137 324.758 35.637 324.754 cv
36.113 324.758 36.516 324.844 36.844 325.012 cv
37.172 325.184 37.434 325.434 37.633 325.762 cv
37.832 326.094 37.973 326.5 38.059 326.98 cv
38.137 327.465 38.18 328.016 38.184 328.641 cv
cp
37.152 328.711 mo
37.148 328.336 37.137 327.996 37.113 327.691 cv
37.086 327.391 37.043 327.125 36.992 326.895 cv
36.938 326.668 36.871 326.473 36.785 326.301 cv
36.699 326.137 36.598 326 36.484 325.891 cv
36.363 325.789 36.23 325.711 36.082 325.656 cv
35.934 325.609 35.766 325.582 35.578 325.582 cv
35.246 325.582 34.977 325.66 34.77 325.816 cv
34.559 325.973 34.395 326.187 34.277 326.461 cv
34.16 326.734 34.078 327.055 34.035 327.422 cv
33.992 327.789 33.973 328.184 33.973 328.605 cv
33.973 329.176 34 329.66 34.059 330.051 cv
34.117 330.449 34.211 330.77 34.336 331.02 cv
34.461 331.27 34.621 331.453 34.824 331.566 cv
35.02 331.68 35.262 331.734 35.543 331.734 cv
35.762 331.734 35.953 331.699 36.121 331.629 cv
36.285 331.559 36.426 331.461 36.547 331.328 cv
36.664 331.199 36.766 331.039 36.844 330.855 cv
36.922 330.676 36.984 330.473 37.031 330.246 cv
37.078 330.023 37.109 329.785 37.125 329.523 cv
37.141 329.266 37.148 328.992 37.152 328.711 cv
cp
f
26.391 271.148 mo
38.551 271.148 li
38.551 285.8 li
26.391 285.8 li
cp
0 0 0 0 cmyk
ef
31.813 282.168 mo
31.813 282.238 31.805 282.301 31.797 282.355 cv
31.781 282.41 31.77 282.457 31.754 282.492 cv
31.738 282.531 31.715 282.559 31.684 282.574 cv
31.652 282.594 31.621 282.602 31.59 282.602 cv
27.398 282.602 li
27.344 282.602 27.297 282.598 27.258 282.582 cv
27.215 282.574 27.18 282.551 27.152 282.516 cv
27.121 282.488 27.098 282.441 27.086 282.379 cv
27.07 282.32 27.066 282.25 27.066 282.164 cv
27.066 282.09 27.066 282.02 27.074 281.957 cv
27.078 281.898 27.094 281.848 27.113 281.801 cv
27.133 281.758 27.156 281.715 27.188 281.668 cv
27.215 281.629 27.254 281.578 27.309 281.523 cv
28.824 279.965 li
29.172 279.605 29.449 279.285 29.664 279 cv
29.875 278.715 30.039 278.453 30.156 278.219 cv
30.266 277.984 30.344 277.773 30.383 277.582 cv
30.418 277.391 30.434 277.211 30.438 277.039 cv
30.434 276.875 30.406 276.715 30.352 276.562 cv
30.293 276.414 30.211 276.281 30.105 276.168 cv
29.996 276.059 29.863 275.969 29.703 275.898 cv
29.539 275.832 29.352 275.801 29.148 275.797 cv
28.898 275.801 28.68 275.832 28.484 275.898 cv
28.289 275.969 28.117 276.043 27.969 276.117 cv
27.82 276.199 27.695 276.27 27.602 276.332 cv
27.5 276.398 27.43 276.434 27.383 276.43 cv
27.352 276.434 27.324 276.426 27.305 276.406 cv
27.281 276.395 27.262 276.367 27.25 276.332 cv
27.234 276.301 27.227 276.254 27.219 276.191 cv
27.211 276.133 27.207 276.062 27.207 275.98 cv
27.207 275.922 27.207 275.871 27.211 275.828 cv
27.215 275.789 27.223 275.754 27.234 275.719 cv
27.242 275.691 27.254 275.66 27.273 275.629 cv
27.285 275.602 27.316 275.57 27.367 275.527 cv
27.41 275.488 27.492 275.43 27.609 275.359 cv
27.723 275.289 27.867 275.223 28.043 275.152 cv
28.215 275.086 28.406 275.027 28.617 274.977 cv
28.824 274.934 29.043 274.91 29.273 274.906 cv
29.641 274.91 29.961 274.961 30.238 275.062 cv
30.512 275.168 30.742 275.309 30.922 275.488 cv
31.102 275.668 31.238 275.879 31.332 276.117 cv
31.422 276.355 31.465 276.609 31.469 276.875 cv
31.465 277.125 31.445 277.367 31.402 277.602 cv
31.355 277.844 31.262 278.102 31.129 278.379 cv
30.988 278.66 30.789 278.973 30.527 279.312 cv
30.266 279.656 29.918 280.047 29.484 280.492 cv
28.285 281.746 li
31.586 281.746 li
31.613 281.746 31.645 281.758 31.676 281.773 cv
31.703 281.793 31.727 281.816 31.75 281.852 cv
31.766 281.891 31.781 281.937 31.797 281.984 cv
31.805 282.039 31.813 282.098 31.813 282.168 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.898 280.164 mo
37.898 280.57 37.828 280.934 37.691 281.25 cv
37.555 281.566 37.363 281.832 37.113 282.051 cv
36.863 282.27 36.563 282.434 36.219 282.543 cv
35.867 282.652 35.484 282.707 35.066 282.711 cv
34.828 282.707 34.605 282.691 34.398 282.66 cv
34.184 282.629 33.996 282.59 33.836 282.543 cv
33.668 282.496 33.535 282.449 33.434 282.398 cv
33.328 282.355 33.258 282.316 33.23 282.285 cv
33.199 282.258 33.18 282.234 33.168 282.207 cv
33.156 282.187 33.145 282.16 33.137 282.125 cv
33.121 282.094 33.117 282.051 33.117 282 cv
33.113 281.949 33.109 281.887 33.113 281.816 cv
33.109 281.754 33.113 281.695 33.121 281.641 cv
33.125 281.586 33.137 281.543 33.152 281.512 cv
33.168 281.48 33.184 281.457 33.207 281.437 cv
33.223 281.426 33.25 281.418 33.281 281.414 cv
33.32 281.418 33.379 281.441 33.461 281.488 cv
33.543 281.535 33.652 281.59 33.793 281.645 cv
33.93 281.703 34.102 281.754 34.309 281.805 cv
34.512 281.859 34.758 281.887 35.039 281.883 cv
35.301 281.887 35.539 281.855 35.762 281.789 cv
35.977 281.73 36.164 281.633 36.324 281.496 cv
36.48 281.367 36.605 281.199 36.695 280.996 cv
36.785 280.793 36.832 280.547 36.832 280.258 cv
36.832 280.016 36.793 279.805 36.719 279.617 cv
36.641 279.434 36.523 279.277 36.367 279.152 cv
36.207 279.031 36.008 278.941 35.766 278.879 cv
35.523 278.824 35.234 278.793 34.898 278.789 cv
34.66 278.793 34.453 278.805 34.285 278.824 cv
34.109 278.852 33.949 278.863 33.801 278.859 cv
33.688 278.863 33.609 278.836 33.566 278.781 cv
33.516 278.73 33.492 278.633 33.496 278.488 cv
33.496 275.398 li
33.492 275.273 33.523 275.176 33.586 275.113 cv
33.648 275.051 33.734 275.02 33.848 275.02 cv
37.207 275.02 li
37.238 275.02 37.266 275.031 37.297 275.047 cv
37.32 275.066 37.348 275.09 37.371 275.125 cv
37.391 275.164 37.402 275.211 37.414 275.262 cv
37.422 275.32 37.43 275.383 37.43 275.453 cv
37.43 275.594 37.41 275.703 37.371 275.781 cv
37.332 275.859 37.277 275.898 37.215 275.898 cv
34.504 275.898 li
34.504 278.023 li
34.633 278.008 34.77 277.996 34.91 277.992 cv
35.047 277.988 35.203 277.984 35.387 277.984 cv
35.801 277.984 36.168 278.039 36.48 278.141 cv
36.793 278.25 37.051 278.395 37.262 278.582 cv
37.469 278.77 37.629 279 37.738 279.27 cv
37.844 279.539 37.898 279.836 37.898 280.164 cv
cp
f
26.391 221.301 mo
38.551 221.301 li
38.551 235.949 li
26.391 235.949 li
cp
0 0 0 0 cmyk
ef
31.754 230.562 mo
31.754 230.91 31.691 231.227 31.57 231.504 cv
31.449 231.785 31.277 232.023 31.051 232.223 cv
30.824 232.422 30.543 232.574 30.211 232.68 cv
29.879 232.785 29.504 232.836 29.086 232.84 cv
28.832 232.836 28.594 232.816 28.375 232.777 cv
28.152 232.738 27.957 232.691 27.789 232.637 cv
27.613 232.582 27.473 232.523 27.359 232.461 cv
27.242 232.398 27.168 232.355 27.145 232.328 cv
27.113 232.301 27.094 232.273 27.078 232.246 cv
27.063 232.219 27.047 232.184 27.035 232.145 cv
27.023 232.105 27.016 232.059 27.008 232.004 cv
27 231.949 26.996 231.879 27 231.793 cv
26.996 231.652 27.012 231.555 27.043 231.5 cv
27.07 231.445 27.109 231.418 27.164 231.418 cv
27.199 231.418 27.27 231.449 27.375 231.512 cv
27.48 231.574 27.617 231.645 27.785 231.715 cv
27.949 231.793 28.145 231.859 28.367 231.918 cv
28.59 231.984 28.836 232.016 29.113 232.012 cv
29.371 232.016 29.605 231.98 29.809 231.91 cv
30.008 231.844 30.176 231.75 30.313 231.629 cv
30.449 231.512 30.551 231.371 30.621 231.199 cv
30.688 231.035 30.723 230.852 30.723 230.656 cv
30.723 230.441 30.676 230.25 30.59 230.074 cv
30.5 229.906 30.375 229.758 30.211 229.629 cv
30.043 229.508 29.836 229.41 29.594 229.344 cv
29.344 229.281 29.066 229.25 28.762 229.246 cv
28.02 229.246 li
27.984 229.25 27.953 229.242 27.922 229.227 cv
27.891 229.211 27.863 229.187 27.844 229.156 cv
27.82 229.125 27.801 229.086 27.789 229.035 cv
27.773 228.984 27.77 228.918 27.77 228.832 cv
27.77 228.762 27.773 228.699 27.785 228.648 cv
27.797 228.602 27.813 228.562 27.836 228.531 cv
27.852 228.504 27.879 228.484 27.91 228.469 cv
27.938 228.461 27.969 228.453 28.004 228.449 cv
28.664 228.449 li
28.922 228.453 29.152 228.418 29.359 228.348 cv
29.563 228.281 29.738 228.187 29.879 228.059 cv
30.02 227.937 30.129 227.789 30.207 227.613 cv
30.285 227.441 30.324 227.246 30.324 227.027 cv
30.324 226.875 30.297 226.727 30.246 226.582 cv
30.195 226.441 30.121 226.316 30.02 226.211 cv
29.918 226.105 29.785 226.023 29.629 225.961 cv
29.465 225.906 29.285 225.875 29.082 225.871 cv
28.855 225.875 28.645 225.91 28.457 225.973 cv
28.262 226.043 28.094 226.113 27.949 226.191 cv
27.797 226.27 27.676 226.344 27.582 226.41 cv
27.484 226.48 27.414 226.516 27.375 226.512 cv
27.348 226.516 27.324 226.512 27.305 226.5 cv
27.281 226.492 27.262 226.473 27.25 226.441 cv
27.234 226.414 27.227 226.371 27.219 226.316 cv
27.211 226.266 27.207 226.195 27.211 226.109 cv
27.207 226.051 27.211 226 27.219 225.953 cv
27.223 225.91 27.23 225.871 27.242 225.836 cv
27.25 225.805 27.262 225.773 27.281 225.746 cv
27.293 225.723 27.32 225.691 27.359 225.652 cv
27.398 225.613 27.473 225.559 27.586 225.488 cv
27.699 225.418 27.84 225.352 28.008 225.281 cv
28.172 225.215 28.363 225.156 28.582 225.105 cv
28.797 225.062 29.031 225.039 29.281 225.035 cv
29.633 225.039 29.941 225.082 30.207 225.172 cv
30.473 225.266 30.691 225.395 30.871 225.555 cv
31.047 225.723 31.18 225.918 31.27 226.145 cv
31.355 226.371 31.402 226.625 31.402 226.902 cv
31.402 227.141 31.371 227.363 31.309 227.566 cv
31.246 227.773 31.152 227.953 31.031 228.109 cv
30.91 228.27 30.762 228.406 30.586 228.516 cv
30.41 228.633 30.207 228.707 29.977 228.746 cv
29.977 228.758 li
30.238 228.789 30.477 228.855 30.695 228.957 cv
30.91 229.059 31.098 229.187 31.258 229.344 cv
31.41 229.5 31.531 229.684 31.621 229.895 cv
31.707 230.105 31.754 230.328 31.754 230.562 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.184 228.922 mo
38.18 229.504 38.133 230.035 38.047 230.516 cv
37.953 231 37.801 231.414 37.59 231.758 cv
37.371 232.102 37.094 232.371 36.754 232.559 cv
36.406 232.746 35.984 232.836 35.484 232.84 cv
35.008 232.836 34.605 232.754 34.281 232.586 cv
33.953 232.418 33.691 232.168 33.492 231.836 cv
33.289 231.508 33.145 231.102 33.066 230.617 cv
32.98 230.137 32.941 229.582 32.941 228.957 cv
32.941 228.379 32.988 227.852 33.082 227.367 cv
33.176 226.891 33.328 226.477 33.539 226.125 cv
33.75 225.781 34.027 225.512 34.371 225.32 cv
34.715 225.133 35.137 225.039 35.637 225.035 cv
36.113 225.039 36.516 225.125 36.844 225.293 cv
37.172 225.465 37.434 225.715 37.633 226.043 cv
37.832 226.375 37.973 226.781 38.059 227.262 cv
38.137 227.746 38.18 228.297 38.184 228.922 cv
cp
37.152 228.992 mo
37.148 228.617 37.137 228.277 37.113 227.973 cv
37.086 227.672 37.043 227.406 36.992 227.176 cv
36.938 226.949 36.871 226.754 36.785 226.582 cv
36.699 226.418 36.598 226.281 36.484 226.172 cv
36.363 226.07 36.23 225.992 36.082 225.937 cv
35.934 225.891 35.766 225.863 35.578 225.863 cv
35.246 225.863 34.977 225.941 34.77 226.098 cv
34.559 226.254 34.395 226.469 34.277 226.742 cv
34.16 227.016 34.078 227.336 34.035 227.703 cv
33.992 228.07 33.973 228.465 33.973 228.887 cv
33.973 229.457 34 229.941 34.059 230.332 cv
34.117 230.73 34.211 231.051 34.336 231.301 cv
34.461 231.551 34.621 231.734 34.824 231.848 cv
35.02 231.961 35.262 232.016 35.543 232.016 cv
35.762 232.016 35.953 231.98 36.121 231.91 cv
36.285 231.84 36.426 231.742 36.547 231.609 cv
36.664 231.48 36.766 231.32 36.844 231.137 cv
36.922 230.957 36.984 230.754 37.031 230.527 cv
37.078 230.305 37.109 230.066 37.125 229.805 cv
37.141 229.547 37.148 229.273 37.152 228.992 cv
cp
f
26.391 171.441 mo
38.551 171.441 li
38.551 186.089 li
26.391 186.089 li
cp
0 0 0 0 cmyk
ef
31.754 180.711 mo
31.754 181.059 31.691 181.375 31.57 181.652 cv
31.449 181.934 31.277 182.172 31.051 182.371 cv
30.824 182.57 30.543 182.723 30.211 182.828 cv
29.879 182.934 29.504 182.984 29.086 182.988 cv
28.832 182.984 28.594 182.965 28.375 182.926 cv
28.152 182.887 27.957 182.84 27.789 182.785 cv
27.613 182.73 27.473 182.672 27.359 182.609 cv
27.242 182.547 27.168 182.504 27.145 182.477 cv
27.113 182.449 27.094 182.422 27.078 182.395 cv
27.063 182.367 27.047 182.332 27.035 182.293 cv
27.023 182.254 27.016 182.207 27.008 182.152 cv
27 182.098 26.996 182.027 27 181.941 cv
26.996 181.801 27.012 181.703 27.043 181.648 cv
27.07 181.594 27.109 181.566 27.164 181.566 cv
27.199 181.566 27.27 181.598 27.375 181.66 cv
27.48 181.723 27.617 181.793 27.785 181.863 cv
27.949 181.941 28.145 182.008 28.367 182.066 cv
28.59 182.133 28.836 182.164 29.113 182.16 cv
29.371 182.164 29.605 182.129 29.809 182.059 cv
30.008 181.992 30.176 181.898 30.313 181.777 cv
30.449 181.66 30.551 181.52 30.621 181.348 cv
30.688 181.184 30.723 181 30.723 180.805 cv
30.723 180.59 30.676 180.398 30.59 180.223 cv
30.5 180.055 30.375 179.906 30.211 179.777 cv
30.043 179.656 29.836 179.559 29.594 179.492 cv
29.344 179.43 29.066 179.398 28.762 179.395 cv
28.02 179.395 li
27.984 179.398 27.953 179.391 27.922 179.375 cv
27.891 179.359 27.863 179.336 27.844 179.305 cv
27.82 179.273 27.801 179.234 27.789 179.184 cv
27.773 179.133 27.77 179.066 27.77 178.98 cv
27.77 178.91 27.773 178.848 27.785 178.797 cv
27.797 178.75 27.813 178.711 27.836 178.68 cv
27.852 178.652 27.879 178.633 27.91 178.617 cv
27.938 178.609 27.969 178.602 28.004 178.598 cv
28.664 178.598 li
28.922 178.602 29.152 178.566 29.359 178.496 cv
29.563 178.43 29.738 178.336 29.879 178.207 cv
30.02 178.086 30.129 177.937 30.207 177.762 cv
30.285 177.59 30.324 177.395 30.324 177.176 cv
30.324 177.023 30.297 176.875 30.246 176.73 cv
30.195 176.59 30.121 176.465 30.02 176.359 cv
29.918 176.254 29.785 176.172 29.629 176.109 cv
29.465 176.055 29.285 176.023 29.082 176.02 cv
28.855 176.023 28.645 176.059 28.457 176.121 cv
28.262 176.191 28.094 176.262 27.949 176.34 cv
27.797 176.418 27.676 176.492 27.582 176.559 cv
27.484 176.629 27.414 176.664 27.375 176.66 cv
27.348 176.664 27.324 176.66 27.305 176.648 cv
27.281 176.641 27.262 176.621 27.25 176.59 cv
27.234 176.562 27.227 176.52 27.219 176.465 cv
27.211 176.414 27.207 176.344 27.211 176.258 cv
27.207 176.199 27.211 176.148 27.219 176.102 cv
27.223 176.059 27.23 176.02 27.242 175.984 cv
27.25 175.953 27.262 175.922 27.281 175.895 cv
27.293 175.871 27.32 175.84 27.359 175.801 cv
27.398 175.762 27.473 175.707 27.586 175.637 cv
27.699 175.566 27.84 175.5 28.008 175.43 cv
28.172 175.363 28.363 175.305 28.582 175.254 cv
28.797 175.211 29.031 175.187 29.281 175.184 cv
29.633 175.187 29.941 175.23 30.207 175.32 cv
30.473 175.414 30.691 175.543 30.871 175.703 cv
31.047 175.871 31.18 176.066 31.27 176.293 cv
31.355 176.52 31.402 176.773 31.402 177.051 cv
31.402 177.289 31.371 177.512 31.309 177.715 cv
31.246 177.922 31.152 178.102 31.031 178.258 cv
30.91 178.418 30.762 178.555 30.586 178.664 cv
30.41 178.781 30.207 178.855 29.977 178.895 cv
29.977 178.906 li
30.238 178.937 30.477 179.004 30.695 179.105 cv
30.91 179.207 31.098 179.336 31.258 179.492 cv
31.41 179.648 31.531 179.832 31.621 180.043 cv
31.707 180.254 31.754 180.477 31.754 180.711 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.898 180.441 mo
37.898 180.848 37.828 181.211 37.691 181.527 cv
37.555 181.844 37.363 182.109 37.113 182.328 cv
36.863 182.547 36.563 182.711 36.219 182.82 cv
35.867 182.93 35.484 182.984 35.066 182.988 cv
34.828 182.984 34.605 182.969 34.398 182.937 cv
34.184 182.906 33.996 182.867 33.836 182.82 cv
33.668 182.773 33.535 182.727 33.434 182.676 cv
33.328 182.633 33.258 182.594 33.23 182.562 cv
33.199 182.535 33.18 182.512 33.168 182.484 cv
33.156 182.465 33.145 182.437 33.137 182.402 cv
33.121 182.371 33.117 182.328 33.117 182.277 cv
33.113 182.227 33.109 182.164 33.113 182.094 cv
33.109 182.031 33.113 181.973 33.121 181.918 cv
33.125 181.863 33.137 181.82 33.152 181.789 cv
33.168 181.758 33.184 181.734 33.207 181.715 cv
33.223 181.703 33.25 181.695 33.281 181.691 cv
33.32 181.695 33.379 181.719 33.461 181.766 cv
33.543 181.812 33.652 181.867 33.793 181.922 cv
33.93 181.98 34.102 182.031 34.309 182.082 cv
34.512 182.137 34.758 182.164 35.039 182.16 cv
35.301 182.164 35.539 182.133 35.762 182.066 cv
35.977 182.008 36.164 181.91 36.324 181.773 cv
36.48 181.645 36.605 181.477 36.695 181.273 cv
36.785 181.07 36.832 180.824 36.832 180.535 cv
36.832 180.293 36.793 180.082 36.719 179.895 cv
36.641 179.711 36.523 179.555 36.367 179.43 cv
36.207 179.309 36.008 179.219 35.766 179.156 cv
35.523 179.102 35.234 179.07 34.898 179.066 cv
34.66 179.07 34.453 179.082 34.285 179.102 cv
34.109 179.129 33.949 179.141 33.801 179.137 cv
33.688 179.141 33.609 179.113 33.566 179.059 cv
33.516 179.008 33.492 178.91 33.496 178.766 cv
33.496 175.676 li
33.492 175.551 33.523 175.453 33.586 175.391 cv
33.648 175.328 33.734 175.297 33.848 175.297 cv
37.207 175.297 li
37.238 175.297 37.266 175.309 37.297 175.324 cv
37.32 175.344 37.348 175.367 37.371 175.402 cv
37.391 175.441 37.402 175.488 37.414 175.539 cv
37.422 175.598 37.43 175.66 37.43 175.73 cv
37.43 175.871 37.41 175.98 37.371 176.059 cv
37.332 176.137 37.277 176.176 37.215 176.176 cv
34.504 176.176 li
34.504 178.301 li
34.633 178.285 34.77 178.273 34.91 178.27 cv
35.047 178.266 35.203 178.262 35.387 178.262 cv
35.801 178.262 36.168 178.316 36.48 178.418 cv
36.793 178.527 37.051 178.672 37.262 178.859 cv
37.469 179.047 37.629 179.277 37.738 179.547 cv
37.844 179.816 37.898 180.113 37.898 180.441 cv
cp
f
26.391 121.59 mo
38.551 121.59 li
38.551 136.238 li
26.391 136.238 li
cp
0 0 0 0 cmyk
ef
32.145 130.871 mo
32.141 131 32.121 131.102 32.086 131.176 cv
32.043 131.254 31.988 131.293 31.922 131.289 cv
31.066 131.289 li
31.066 132.883 li
31.063 132.918 31.055 132.945 31.043 132.965 cv
31.023 132.988 30.996 133.004 30.957 133.02 cv
30.918 133.035 30.863 133.047 30.801 133.055 cv
30.73 133.062 30.648 133.066 30.551 133.066 cv
30.453 133.066 30.371 133.062 30.309 133.055 cv
30.242 133.047 30.191 133.035 30.156 133.02 cv
30.113 133.004 30.086 132.988 30.074 132.965 cv
30.059 132.945 30.055 132.918 30.055 132.883 cv
30.055 131.289 li
26.949 131.289 li
26.902 131.293 26.863 131.285 26.832 131.273 cv
26.801 131.262 26.77 131.242 26.746 131.207 cv
26.719 131.18 26.703 131.133 26.695 131.07 cv
26.684 131.012 26.68 130.934 26.68 130.84 cv
26.68 130.77 26.68 130.707 26.684 130.645 cv
26.688 130.59 26.695 130.535 26.707 130.48 cv
26.719 130.434 26.734 130.387 26.754 130.34 cv
26.773 130.301 26.797 130.25 26.824 130.195 cv
29.535 125.582 li
29.551 125.555 29.578 125.527 29.617 125.5 cv
29.652 125.48 29.703 125.461 29.766 125.441 cv
29.824 125.43 29.898 125.418 29.988 125.41 cv
30.074 125.406 30.18 125.402 30.301 125.398 cv
30.43 125.402 30.543 125.406 30.641 125.414 cv
30.738 125.426 30.816 125.441 30.879 125.453 cv
30.938 125.473 30.984 125.492 31.016 125.516 cv
31.047 125.543 31.063 125.574 31.066 125.605 cv
31.066 130.453 li
31.922 130.453 li
31.988 130.453 32.043 130.488 32.082 130.559 cv
32.121 130.629 32.141 130.734 32.145 130.871 cv
cp
30.055 126.285 mo
30.043 126.285 li
27.602 130.453 li
30.055 130.453 li
cp
.629114 .553033 .543389 .289647 cmyk
f
38.195 129.215 mo
38.191 129.801 38.145 130.332 38.059 130.812 cv
37.965 131.297 37.813 131.711 37.602 132.055 cv
37.383 132.402 37.105 132.672 36.762 132.859 cv
36.418 133.051 35.992 133.141 35.492 133.145 cv
35.008 133.141 34.605 133.059 34.281 132.891 cv
33.953 132.719 33.691 132.469 33.492 132.137 cv
33.293 131.809 33.148 131.402 33.066 130.918 cv
32.98 130.437 32.941 129.883 32.941 129.25 cv
32.941 128.676 32.988 128.145 33.082 127.656 cv
33.176 127.176 33.328 126.758 33.539 126.41 cv
33.75 126.066 34.027 125.801 34.375 125.609 cv
34.715 125.422 35.137 125.328 35.645 125.324 cv
36.121 125.328 36.523 125.41 36.852 125.578 cv
37.176 125.75 37.441 126 37.645 126.328 cv
37.844 126.66 37.984 127.07 38.07 127.551 cv
38.148 128.039 38.191 128.594 38.195 129.215 cv
cp
37.164 129.285 mo
37.16 128.91 37.145 128.57 37.121 128.266 cv
37.09 127.969 37.051 127.699 37 127.465 cv
36.945 127.234 36.879 127.039 36.797 126.871 cv
36.711 126.707 36.609 126.57 36.492 126.461 cv
36.375 126.355 36.238 126.273 36.09 126.223 cv
35.938 126.176 35.77 126.152 35.586 126.148 cv
35.25 126.152 34.98 126.23 34.773 126.387 cv
34.563 126.543 34.398 126.758 34.281 127.031 cv
34.16 127.305 34.078 127.629 34.039 127.996 cv
33.992 128.367 33.973 128.762 33.977 129.18 cv
33.973 129.75 34 130.23 34.063 130.629 cv
34.117 131.027 34.211 131.352 34.344 131.598 cv
34.469 131.852 34.633 132.035 34.828 132.145 cv
35.023 132.262 35.262 132.316 35.551 132.316 cv
35.766 132.316 35.957 132.281 36.125 132.211 cv
36.289 132.141 36.434 132.043 36.555 131.91 cv
36.672 131.781 36.77 131.621 36.852 131.437 cv
36.926 131.254 36.988 131.051 37.039 130.824 cv
37.082 130.602 37.117 130.359 37.137 130.098 cv
37.152 129.84 37.16 129.57 37.164 129.285 cv
cp
f
26.391 71.738 mo
38.551 71.738 li
38.551 86.39 li
26.391 86.39 li
cp
0 0 0 0 cmyk
ef
32.133 81.004 mo
32.129 81.137 32.109 81.238 32.074 81.309 cv
32.031 81.383 31.977 81.422 31.914 81.418 cv
31.055 81.418 li
31.055 83.012 li
31.051 83.047 31.043 83.074 31.031 83.094 cv
31.012 83.117 30.984 83.133 30.945 83.148 cv
30.906 83.164 30.852 83.176 30.789 83.184 cv
30.723 83.191 30.641 83.195 30.543 83.195 cv
30.441 83.195 30.363 83.191 30.301 83.184 cv
30.238 83.176 30.188 83.164 30.148 83.148 cv
30.109 83.133 30.082 83.117 30.066 83.094 cv
30.051 83.074 30.043 83.047 30.047 83.012 cv
30.047 81.418 li
26.945 81.418 li
26.898 81.422 26.863 81.414 26.832 81.402 cv
26.801 81.395 26.77 81.375 26.746 81.34 cv
26.715 81.312 26.699 81.266 26.691 81.203 cv
26.684 81.145 26.68 81.07 26.68 80.973 cv
26.68 80.902 26.68 80.836 26.684 80.777 cv
26.688 80.719 26.695 80.664 26.707 80.617 cv
26.719 80.57 26.734 80.523 26.754 80.477 cv
26.773 80.43 26.797 80.383 26.824 80.332 cv
29.527 75.723 li
29.547 75.695 29.574 75.668 29.613 75.641 cv
29.648 75.621 29.699 75.602 29.762 75.582 cv
29.82 75.57 29.891 75.559 29.98 75.551 cv
30.066 75.547 30.172 75.543 30.293 75.543 cv
30.422 75.543 30.535 75.551 30.633 75.559 cv
30.73 75.574 30.809 75.586 30.871 75.598 cv
30.926 75.617 30.973 75.637 31.008 75.66 cv
31.035 75.684 31.051 75.715 31.055 75.746 cv
31.055 80.59 li
31.914 80.59 li
31.977 80.594 32.031 80.629 32.07 80.691 cv
32.109 80.762 32.129 80.863 32.133 81.004 cv
cp
30.047 76.426 mo
30.039 76.426 li
27.602 80.59 li
30.047 80.59 li
cp
.629114 .553033 .543389 .289647 cmyk
f
37.898 80.723 mo
37.898 81.129 37.828 81.492 37.691 81.809 cv
37.555 82.125 37.363 82.391 37.113 82.609 cv
36.863 82.828 36.563 82.992 36.219 83.102 cv
35.867 83.211 35.484 83.266 35.066 83.27 cv
34.828 83.266 34.605 83.25 34.398 83.219 cv
34.184 83.187 33.996 83.148 33.836 83.102 cv
33.668 83.055 33.535 83.008 33.434 82.957 cv
33.328 82.914 33.258 82.875 33.23 82.844 cv
33.199 82.816 33.18 82.793 33.168 82.766 cv
33.156 82.746 33.145 82.719 33.137 82.684 cv
33.121 82.652 33.117 82.609 33.117 82.559 cv
33.113 82.508 33.109 82.445 33.113 82.375 cv
33.109 82.312 33.113 82.254 33.121 82.199 cv
33.125 82.145 33.137 82.102 33.152 82.07 cv
33.168 82.039 33.184 82.016 33.207 81.996 cv
33.223 81.984 33.25 81.977 33.281 81.973 cv
33.32 81.977 33.379 82 33.461 82.047 cv
33.543 82.094 33.652 82.148 33.793 82.203 cv
33.93 82.262 34.102 82.312 34.309 82.363 cv
34.512 82.418 34.758 82.445 35.039 82.441 cv
35.301 82.445 35.539 82.414 35.762 82.348 cv
35.977 82.289 36.164 82.191 36.324 82.055 cv
36.48 81.926 36.605 81.758 36.695 81.555 cv
36.785 81.352 36.832 81.105 36.832 80.816 cv
36.832 80.574 36.793 80.363 36.719 80.176 cv
36.641 79.992 36.523 79.836 36.367 79.711 cv
36.207 79.59 36.008 79.5 35.766 79.437 cv
35.523 79.383 35.234 79.352 34.898 79.348 cv
34.66 79.352 34.453 79.363 34.285 79.383 cv
34.109 79.41 33.949 79.422 33.801 79.418 cv
33.688 79.422 33.609 79.395 33.566 79.34 cv
33.516 79.289 33.492 79.191 33.496 79.047 cv
33.496 75.957 li
33.492 75.832 33.523 75.734 33.586 75.672 cv
33.648 75.609 33.734 75.578 33.848 75.578 cv
37.207 75.578 li
37.238 75.578 37.266 75.59 37.297 75.605 cv
37.32 75.625 37.348 75.648 37.371 75.684 cv
37.391 75.723 37.402 75.77 37.414 75.82 cv
37.422 75.879 37.43 75.941 37.43 76.012 cv
37.43 76.152 37.41 76.262 37.371 76.34 cv
37.332 76.418 37.277 76.457 37.215 76.457 cv
34.504 76.457 li
34.504 78.582 li
34.633 78.566 34.77 78.555 34.91 78.551 cv
35.047 78.547 35.203 78.543 35.387 78.543 cv
35.801 78.543 36.168 78.598 36.48 78.699 cv
36.793 78.809 37.051 78.953 37.262 79.141 cv
37.469 79.328 37.629 79.559 37.738 79.828 cv
37.844 80.098 37.898 80.395 37.898 80.723 cv
cp
f
26.391 21.891 mo
38.551 21.891 li
38.551 36.539 li
26.391 36.539 li
cp
0 0 0 0 cmyk
ef
31.789 30.867 mo
31.789 31.277 31.719 31.641 31.582 31.953 cv
31.445 32.273 31.25 32.539 31 32.754 cv
30.746 32.973 30.449 33.137 30.105 33.25 cv
29.758 33.363 29.375 33.418 28.953 33.422 cv
28.719 33.418 28.492 33.402 28.281 33.371 cv
28.066 33.336 27.879 33.297 27.719 33.246 cv
27.551 33.199 27.418 33.152 27.313 33.102 cv
27.207 33.059 27.137 33.02 27.109 32.992 cv
27.078 32.965 27.059 32.941 27.047 32.914 cv
27.035 32.895 27.023 32.867 27.016 32.832 cv
27.004 32.801 27 32.758 26.996 32.707 cv
26.992 32.656 26.988 32.594 26.992 32.523 cv
26.988 32.457 26.992 32.398 27 32.344 cv
27.004 32.293 27.016 32.25 27.031 32.215 cv
27.047 32.184 27.063 32.16 27.086 32.141 cv
27.105 32.129 27.133 32.121 27.16 32.117 cv
27.199 32.121 27.258 32.145 27.344 32.191 cv
27.422 32.242 27.535 32.293 27.676 32.348 cv
27.813 32.406 27.984 32.461 28.191 32.512 cv
28.395 32.562 28.637 32.59 28.922 32.586 cv
29.184 32.59 29.426 32.559 29.645 32.492 cv
29.863 32.434 30.051 32.336 30.211 32.199 cv
30.367 32.07 30.492 31.902 30.582 31.699 cv
30.672 31.5 30.715 31.254 30.719 30.961 cv
30.715 30.723 30.68 30.508 30.605 30.32 cv
30.527 30.133 30.41 29.98 30.254 29.855 cv
30.094 29.734 29.891 29.641 29.648 29.578 cv
29.402 29.52 29.113 29.488 28.781 29.488 cv
28.543 29.488 28.336 29.5 28.164 29.523 cv
27.988 29.547 27.828 29.559 27.684 29.559 cv
27.57 29.559 27.492 29.535 27.449 29.484 cv
27.398 29.434 27.375 29.336 27.379 29.187 cv
27.379 26.094 li
27.375 25.969 27.406 25.871 27.469 25.805 cv
27.527 25.746 27.613 25.715 27.73 25.711 cv
31.094 25.711 li
31.121 25.715 31.152 25.723 31.184 25.738 cv
31.211 25.758 31.234 25.785 31.258 25.82 cv
31.273 25.855 31.289 25.902 31.305 25.953 cv
31.313 26.012 31.32 26.074 31.32 26.145 cv
31.32 26.289 31.301 26.398 31.262 26.477 cv
31.223 26.555 31.168 26.594 31.105 26.594 cv
28.391 26.594 li
28.391 28.723 li
28.52 28.707 28.652 28.695 28.793 28.691 cv
28.93 28.687 29.09 28.687 29.27 28.684 cv
29.688 28.687 30.051 28.738 30.367 28.84 cv
30.68 28.945 30.941 29.09 31.152 29.277 cv
31.355 29.469 31.516 29.699 31.625 29.969 cv
31.734 30.238 31.789 30.539 31.789 30.867 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.195 29.492 mo
38.191 30.078 38.145 30.609 38.059 31.09 cv
37.965 31.574 37.813 31.988 37.602 32.332 cv
37.383 32.68 37.105 32.949 36.762 33.137 cv
36.418 33.328 35.992 33.418 35.492 33.422 cv
35.008 33.418 34.605 33.336 34.281 33.168 cv
33.953 32.996 33.691 32.746 33.492 32.414 cv
33.293 32.086 33.148 31.68 33.066 31.195 cv
32.98 30.715 32.941 30.16 32.941 29.527 cv
32.941 28.953 32.988 28.422 33.082 27.934 cv
33.176 27.453 33.328 27.035 33.539 26.687 cv
33.75 26.344 34.027 26.078 34.375 25.887 cv
34.715 25.699 35.137 25.605 35.645 25.602 cv
36.121 25.605 36.523 25.687 36.852 25.855 cv
37.176 26.027 37.441 26.277 37.645 26.605 cv
37.844 26.937 37.984 27.348 38.07 27.828 cv
38.148 28.316 38.191 28.871 38.195 29.492 cv
cp
37.164 29.562 mo
37.16 29.187 37.145 28.848 37.121 28.543 cv
37.09 28.246 37.051 27.977 37 27.742 cv
36.945 27.512 36.879 27.316 36.797 27.148 cv
36.711 26.984 36.609 26.848 36.492 26.738 cv
36.375 26.633 36.238 26.551 36.09 26.5 cv
35.938 26.453 35.77 26.43 35.586 26.426 cv
35.25 26.43 34.98 26.508 34.773 26.664 cv
34.563 26.82 34.398 27.035 34.281 27.309 cv
34.16 27.582 34.078 27.906 34.039 28.273 cv
33.992 28.645 33.973 29.039 33.977 29.457 cv
33.973 30.027 34 30.508 34.063 30.906 cv
34.117 31.305 34.211 31.629 34.344 31.875 cv
34.469 32.129 34.633 32.312 34.828 32.422 cv
35.023 32.539 35.262 32.594 35.551 32.594 cv
35.766 32.594 35.957 32.559 36.125 32.488 cv
36.289 32.418 36.434 32.32 36.555 32.187 cv
36.672 32.059 36.77 31.898 36.852 31.715 cv
36.926 31.531 36.988 31.328 37.039 31.102 cv
37.082 30.879 37.117 30.637 37.137 30.375 cv
37.152 30.117 37.16 29.848 37.164 29.562 cv
cp
f
52.09 547.113 mo
52.086 547.187 52.082 547.25 52.074 547.301 cv
52.063 547.355 52.047 547.398 52.027 547.426 cv
52.004 547.461 51.98 547.484 51.957 547.492 cv
51.934 547.508 51.906 547.512 51.879 547.512 cv
47.918 547.512 li
47.891 547.512 47.867 547.508 47.844 547.492 cv
47.82 547.484 47.797 547.461 47.777 547.426 cv
47.754 547.398 47.738 547.355 47.727 547.301 cv
47.711 547.25 47.703 547.187 47.707 547.113 cv
47.703 547.043 47.711 546.984 47.727 546.934 cv
47.738 546.883 47.75 546.84 47.77 546.805 cv
47.785 546.773 47.809 546.75 47.832 546.73 cv
47.855 546.715 47.883 546.703 47.918 546.703 cv
49.504 546.703 li
49.504 540.937 li
48.035 541.809 li
47.961 541.855 47.902 541.879 47.859 541.883 cv
47.813 541.895 47.777 541.887 47.75 541.855 cv
47.719 541.832 47.699 541.789 47.691 541.73 cv
47.684 541.672 47.68 541.598 47.68 541.504 cv
47.68 541.441 47.68 541.383 47.688 541.336 cv
47.691 541.289 47.703 541.25 47.715 541.219 cv
47.723 541.187 47.738 541.16 47.762 541.137 cv
47.785 541.113 47.813 541.09 47.848 541.066 cv
49.598 539.949 li
49.609 539.937 49.629 539.926 49.656 539.918 cv
49.676 539.91 49.707 539.902 49.742 539.895 cv
49.773 539.887 49.813 539.883 49.863 539.883 cv
49.906 539.883 49.965 539.883 50.043 539.879 cv
50.133 539.883 50.211 539.887 50.277 539.891 cv
50.336 539.902 50.387 539.914 50.422 539.922 cv
50.453 539.937 50.477 539.953 50.492 539.973 cv
50.504 539.996 50.508 540.02 50.512 540.043 cv
50.512 546.703 li
51.879 546.703 li
51.906 546.703 51.938 546.715 51.969 546.73 cv
51.996 546.75 52.016 546.773 52.035 546.805 cv
52.051 546.84 52.066 546.883 52.074 546.934 cv
52.082 546.984 52.086 547.043 52.09 547.113 cv
cp
f
127.766 547.078 mo
127.766 547.148 127.758 547.211 127.75 547.266 cv
127.734 547.32 127.723 547.367 127.707 547.402 cv
127.691 547.441 127.668 547.469 127.637 547.484 cv
127.605 547.504 127.574 547.512 127.543 547.512 cv
123.352 547.512 li
123.297 547.512 123.25 547.508 123.211 547.492 cv
123.168 547.484 123.133 547.461 123.105 547.426 cv
123.074 547.398 123.051 547.352 123.039 547.289 cv
123.023 547.23 123.02 547.16 123.02 547.074 cv
123.02 547 123.02 546.93 123.027 546.867 cv
123.031 546.809 123.047 546.758 123.066 546.711 cv
123.086 546.668 123.109 546.625 123.141 546.578 cv
123.168 546.539 123.207 546.488 123.262 546.434 cv
124.777 544.875 li
125.125 544.516 125.402 544.195 125.617 543.91 cv
125.828 543.625 125.992 543.363 126.109 543.129 cv
126.219 542.895 126.297 542.684 126.336 542.492 cv
126.371 542.301 126.387 542.121 126.391 541.949 cv
126.387 541.785 126.359 541.625 126.305 541.473 cv
126.246 541.324 126.164 541.191 126.059 541.078 cv
125.949 540.969 125.816 540.879 125.656 540.809 cv
125.492 540.742 125.305 540.711 125.102 540.707 cv
124.852 540.711 124.633 540.742 124.438 540.809 cv
124.242 540.879 124.07 540.953 123.922 541.027 cv
123.773 541.109 123.648 541.18 123.555 541.242 cv
123.453 541.309 123.383 541.344 123.336 541.34 cv
123.305 541.344 123.277 541.336 123.258 541.316 cv
123.234 541.305 123.215 541.277 123.203 541.242 cv
123.188 541.211 123.18 541.164 123.172 541.102 cv
123.164 541.043 123.16 540.973 123.16 540.891 cv
123.16 540.832 123.16 540.781 123.164 540.738 cv
123.168 540.699 123.176 540.664 123.188 540.629 cv
123.195 540.602 123.207 540.57 123.227 540.539 cv
123.238 540.512 123.27 540.48 123.32 540.437 cv
123.363 540.398 123.445 540.34 123.563 540.27 cv
123.676 540.199 123.82 540.133 123.996 540.062 cv
124.168 539.996 124.359 539.937 124.57 539.887 cv
124.777 539.844 124.996 539.82 125.227 539.816 cv
125.594 539.82 125.914 539.871 126.191 539.973 cv
126.465 540.078 126.695 540.219 126.875 540.398 cv
127.055 540.578 127.191 540.789 127.285 541.027 cv
127.375 541.266 127.418 541.52 127.422 541.785 cv
127.418 542.035 127.398 542.277 127.355 542.512 cv
127.309 542.754 127.215 543.012 127.082 543.289 cv
126.941 543.57 126.742 543.883 126.48 544.223 cv
126.219 544.566 125.871 544.957 125.438 545.402 cv
124.238 546.656 li
127.539 546.656 li
127.566 546.656 127.598 546.668 127.629 546.684 cv
127.656 546.703 127.68 546.727 127.703 546.762 cv
127.719 546.801 127.734 546.848 127.75 546.895 cv
127.758 546.949 127.766 547.008 127.766 547.078 cv
cp
f
203.805 545.355 mo
203.801 545.488 203.781 545.59 203.746 545.66 cv
203.703 545.734 203.648 545.773 203.586 545.77 cv
202.727 545.77 li
202.727 547.363 li
202.723 547.398 202.715 547.426 202.703 547.445 cv
202.684 547.469 202.656 547.484 202.617 547.5 cv
202.578 547.516 202.523 547.527 202.461 547.535 cv
202.395 547.543 202.313 547.547 202.215 547.547 cv
202.113 547.547 202.035 547.543 201.973 547.535 cv
201.91 547.527 201.859 547.516 201.82 547.5 cv
201.781 547.484 201.754 547.469 201.738 547.445 cv
201.723 547.426 201.715 547.398 201.719 547.363 cv
201.719 545.77 li
198.617 545.77 li
198.57 545.773 198.535 545.766 198.504 545.754 cv
198.473 545.746 198.441 545.727 198.418 545.691 cv
198.387 545.664 198.371 545.617 198.363 545.555 cv
198.355 545.496 198.352 545.422 198.352 545.324 cv
198.352 545.254 198.352 545.187 198.355 545.129 cv
198.359 545.07 198.367 545.016 198.379 544.969 cv
198.391 544.922 198.406 544.875 198.426 544.828 cv
198.445 544.781 198.469 544.734 198.496 544.684 cv
201.199 540.074 li
201.219 540.047 201.246 540.02 201.285 539.992 cv
201.32 539.973 201.371 539.953 201.434 539.934 cv
201.492 539.922 201.563 539.91 201.652 539.902 cv
201.738 539.898 201.844 539.895 201.965 539.895 cv
202.094 539.895 202.207 539.902 202.305 539.91 cv
202.402 539.926 202.48 539.937 202.543 539.949 cv
202.598 539.969 202.645 539.988 202.68 540.012 cv
202.707 540.035 202.723 540.066 202.727 540.098 cv
202.727 544.941 li
203.586 544.941 li
203.648 544.945 203.703 544.98 203.742 545.043 cv
203.781 545.113 203.801 545.215 203.805 545.355 cv
cp
201.719 540.777 mo
201.711 540.777 li
199.273 544.941 li
201.719 544.941 li
cp
f
279.379 545.059 mo
279.375 545.391 279.324 545.711 279.227 546.023 cv
279.121 546.336 278.965 546.609 278.758 546.844 cv
278.543 547.078 278.277 547.27 277.953 547.41 cv
277.625 547.551 277.242 547.617 276.805 547.621 cv
276.488 547.617 276.207 547.582 275.969 547.504 cv
275.723 547.43 275.512 547.316 275.336 547.172 cv
275.152 547.031 275.004 546.855 274.887 546.641 cv
274.766 546.434 274.668 546.191 274.598 545.918 cv
274.52 545.648 274.469 545.355 274.441 545.031 cv
274.406 544.715 274.391 544.371 274.395 544.004 cv
274.391 543.68 274.41 543.352 274.449 543.02 cv
274.484 542.687 274.547 542.367 274.637 542.059 cv
274.723 541.75 274.844 541.461 275 541.187 cv
275.156 540.918 275.348 540.68 275.582 540.477 cv
275.813 540.277 276.094 540.117 276.418 540 cv
276.738 539.883 277.113 539.824 277.551 539.824 cv
277.691 539.824 277.84 539.836 277.988 539.852 cv
278.137 539.875 278.273 539.898 278.398 539.922 cv
278.523 539.953 278.629 539.984 278.715 540.02 cv
278.801 540.055 278.855 540.082 278.883 540.105 cv
278.91 540.129 278.93 540.152 278.945 540.176 cv
278.953 540.199 278.965 540.227 278.977 540.258 cv
278.98 540.289 278.988 540.324 278.996 540.355 cv
279 540.395 279 540.437 279.004 540.492 cv
279 540.562 279 540.625 279 540.676 cv
278.996 540.727 278.988 540.766 278.977 540.797 cv
278.961 540.828 278.941 540.852 278.922 540.867 cv
278.898 540.883 278.871 540.891 278.84 540.891 cv
278.793 540.891 278.734 540.879 278.66 540.852 cv
278.586 540.824 278.496 540.793 278.391 540.758 cv
278.285 540.727 278.156 540.695 278.008 540.668 cv
277.855 540.645 277.684 540.633 277.484 540.629 cv
277.121 540.633 276.809 540.707 276.547 540.852 cv
276.281 541.004 276.066 541.203 275.902 541.449 cv
275.738 541.703 275.613 541.992 275.535 542.32 cv
275.453 542.648 275.41 542.992 275.398 543.352 cv
275.5 543.293 275.613 543.234 275.742 543.176 cv
275.867 543.121 276.004 543.07 276.156 543.02 cv
276.305 542.977 276.465 542.937 276.633 542.906 cv
276.801 542.875 276.98 542.859 277.176 542.859 cv
277.582 542.859 277.93 542.918 278.211 543.027 cv
278.492 543.141 278.719 543.293 278.891 543.488 cv
279.063 543.687 279.188 543.922 279.266 544.187 cv
279.34 544.461 279.375 544.75 279.379 545.059 cv
cp
278.355 545.152 mo
278.352 544.926 278.328 544.719 278.289 544.531 cv
278.242 544.348 278.168 544.191 278.063 544.062 cv
277.957 543.934 277.816 543.832 277.641 543.762 cv
277.465 543.691 277.25 543.656 276.992 543.656 cv
276.848 543.656 276.703 543.672 276.559 543.695 cv
276.41 543.723 276.27 543.758 276.137 543.801 cv
276.004 543.848 275.875 543.898 275.75 543.961 cv
275.625 544.023 275.512 544.09 275.418 544.152 cv
275.414 544.66 275.445 545.082 275.512 545.422 cv
275.574 545.762 275.668 546.035 275.793 546.238 cv
275.914 546.445 276.07 546.59 276.254 546.676 cv
276.434 546.766 276.648 546.809 276.898 546.809 cv
277.148 546.809 277.363 546.762 277.547 546.668 cv
277.73 546.574 277.883 546.449 278.004 546.289 cv
278.125 546.133 278.215 545.957 278.27 545.758 cv
278.324 545.562 278.352 545.359 278.355 545.152 cv
cp
f
355.051 545.566 mo
355.051 545.895 354.992 546.187 354.875 546.441 cv
354.758 546.699 354.586 546.914 354.367 547.09 cv
354.145 547.27 353.875 547.402 353.551 547.488 cv
353.223 547.574 352.852 547.617 352.438 547.621 cv
352.047 547.617 351.695 547.578 351.387 547.5 cv
351.078 547.422 350.816 547.301 350.602 547.137 cv
350.387 546.977 350.223 546.781 350.109 546.543 cv
349.996 546.312 349.941 546.043 349.941 545.742 cv
349.941 545.508 349.98 545.289 350.059 545.086 cv
350.137 544.887 350.246 544.703 350.395 544.535 cv
350.539 544.371 350.723 544.215 350.938 544.066 cv
351.148 543.918 351.391 543.777 351.664 543.645 cv
351.43 543.527 351.223 543.402 351.043 543.262 cv
350.863 543.129 350.711 542.98 350.586 542.82 cv
350.461 542.664 350.363 542.496 350.301 542.312 cv
350.23 542.137 350.199 541.941 350.203 541.73 cv
350.199 541.469 350.246 541.219 350.348 540.984 cv
350.441 540.75 350.586 540.547 350.781 540.375 cv
350.969 540.203 351.215 540.07 351.52 539.969 cv
351.816 539.871 352.168 539.82 352.566 539.816 cv
352.949 539.82 353.277 539.867 353.559 539.957 cv
353.832 540.051 354.063 540.176 354.25 540.332 cv
354.43 540.492 354.566 540.676 354.652 540.891 cv
354.738 541.109 354.781 541.34 354.781 541.582 cv
354.781 541.781 354.746 541.973 354.684 542.156 cv
354.613 542.344 354.52 542.52 354.398 542.68 cv
354.27 542.848 354.117 543 353.938 543.141 cv
353.758 543.281 353.551 543.414 353.316 543.539 cv
353.594 543.68 353.84 543.82 354.059 543.961 cv
354.273 544.105 354.453 544.262 354.602 544.426 cv
354.742 544.594 354.855 544.77 354.934 544.953 cv
355.012 545.141 355.051 545.344 355.051 545.566 cv
cp
353.785 541.676 mo
353.785 541.512 353.754 541.363 353.699 541.23 cv
353.641 541.098 353.559 540.984 353.453 540.891 cv
353.34 540.797 353.203 540.727 353.043 540.68 cv
352.879 540.633 352.695 540.609 352.492 540.605 cv
352.066 540.609 351.746 540.703 351.531 540.891 cv
351.313 541.082 351.207 541.344 351.207 541.676 cv
351.207 541.828 351.23 541.973 351.285 542.102 cv
351.336 542.234 351.418 542.355 351.531 542.473 cv
351.641 542.59 351.781 542.707 351.953 542.816 cv
352.121 542.93 352.324 543.043 352.563 543.164 cv
352.953 542.961 353.258 542.738 353.469 542.492 cv
353.68 542.246 353.785 541.973 353.785 541.676 cv
cp
354.031 545.672 mo
354.031 545.492 353.996 545.332 353.93 545.184 cv
353.863 545.043 353.762 544.906 353.629 544.773 cv
353.492 544.648 353.324 544.523 353.125 544.402 cv
352.922 544.285 352.691 544.16 352.426 544.031 cv
352.176 544.156 351.957 544.277 351.777 544.395 cv
351.59 544.516 351.438 544.641 351.32 544.77 cv
351.195 544.902 351.105 545.039 351.051 545.18 cv
350.988 545.32 350.961 545.477 350.961 545.648 cv
350.961 546.027 351.09 546.32 351.352 546.527 cv
351.609 546.738 351.996 546.844 352.516 546.84 cv
353.012 546.844 353.391 546.738 353.648 546.527 cv
353.902 546.316 354.031 546.031 354.031 545.672 cv
cp
f
427.57 547.113 mo
427.566 547.187 427.563 547.25 427.555 547.301 cv
427.543 547.355 427.527 547.398 427.508 547.426 cv
427.484 547.461 427.461 547.484 427.438 547.492 cv
427.414 547.508 427.387 547.512 427.359 547.512 cv
423.398 547.512 li
423.371 547.512 423.348 547.508 423.324 547.492 cv
423.301 547.484 423.277 547.461 423.258 547.426 cv
423.234 547.398 423.219 547.355 423.207 547.301 cv
423.191 547.25 423.184 547.187 423.188 547.113 cv
423.184 547.043 423.191 546.984 423.207 546.934 cv
423.219 546.883 423.23 546.84 423.25 546.805 cv
423.266 546.773 423.289 546.75 423.313 546.73 cv
423.336 546.715 423.363 546.703 423.398 546.703 cv
424.984 546.703 li
424.984 540.937 li
423.516 541.809 li
423.441 541.855 423.383 541.879 423.34 541.883 cv
423.293 541.895 423.258 541.887 423.23 541.855 cv
423.199 541.832 423.18 541.789 423.172 541.73 cv
423.164 541.672 423.16 541.598 423.16 541.504 cv
423.16 541.441 423.16 541.383 423.168 541.336 cv
423.172 541.289 423.184 541.25 423.195 541.219 cv
423.203 541.187 423.219 541.16 423.242 541.137 cv
423.266 541.113 423.293 541.09 423.328 541.066 cv
425.078 539.949 li
425.09 539.937 425.109 539.926 425.137 539.918 cv
425.156 539.91 425.188 539.902 425.223 539.895 cv
425.254 539.887 425.293 539.883 425.344 539.883 cv
425.387 539.883 425.445 539.883 425.523 539.879 cv
425.613 539.883 425.691 539.887 425.758 539.891 cv
425.816 539.902 425.867 539.914 425.902 539.922 cv
425.934 539.937 425.957 539.953 425.973 539.973 cv
425.984 539.996 425.988 540.02 425.992 540.043 cv
425.992 546.703 li
427.359 546.703 li
427.387 546.703 427.418 546.715 427.449 546.73 cv
427.477 546.75 427.496 546.773 427.516 546.805 cv
427.531 546.84 427.547 546.883 427.555 546.934 cv
427.563 546.984 427.566 547.043 427.57 547.113 cv
cp
f
433.926 543.703 mo
433.922 544.285 433.875 544.816 433.789 545.297 cv
433.695 545.781 433.543 546.195 433.332 546.539 cv
433.113 546.883 432.836 547.152 432.496 547.34 cv
432.148 547.527 431.727 547.617 431.227 547.621 cv
430.75 547.617 430.348 547.535 430.023 547.367 cv
429.695 547.199 429.434 546.949 429.234 546.617 cv
429.031 546.289 428.887 545.883 428.809 545.398 cv
428.723 544.918 428.684 544.363 428.684 543.738 cv
428.684 543.16 428.73 542.633 428.824 542.148 cv
428.918 541.672 429.07 541.258 429.281 540.906 cv
429.492 540.562 429.77 540.293 430.113 540.102 cv
430.457 539.914 430.879 539.82 431.379 539.816 cv
431.855 539.82 432.258 539.906 432.586 540.074 cv
432.914 540.246 433.176 540.496 433.375 540.824 cv
433.574 541.156 433.715 541.562 433.801 542.043 cv
433.879 542.527 433.922 543.078 433.926 543.703 cv
cp
432.895 543.773 mo
432.891 543.398 432.879 543.059 432.855 542.754 cv
432.828 542.453 432.785 542.187 432.734 541.957 cv
432.68 541.73 432.613 541.535 432.527 541.363 cv
432.441 541.199 432.34 541.062 432.227 540.953 cv
432.105 540.852 431.973 540.773 431.824 540.719 cv
431.676 540.672 431.508 540.645 431.32 540.645 cv
430.988 540.645 430.719 540.723 430.512 540.879 cv
430.301 541.035 430.137 541.25 430.02 541.523 cv
429.902 541.797 429.82 542.117 429.777 542.484 cv
429.734 542.852 429.715 543.246 429.715 543.668 cv
429.715 544.238 429.742 544.723 429.801 545.113 cv
429.859 545.512 429.953 545.832 430.078 546.082 cv
430.203 546.332 430.363 546.516 430.566 546.629 cv
430.762 546.742 431.004 546.797 431.285 546.797 cv
431.504 546.797 431.695 546.762 431.863 546.691 cv
432.027 546.621 432.168 546.523 432.289 546.391 cv
432.406 546.262 432.508 546.102 432.586 545.918 cv
432.664 545.738 432.727 545.535 432.773 545.309 cv
432.82 545.086 432.852 544.848 432.867 544.586 cv
432.883 544.328 432.891 544.055 432.895 543.773 cv
cp
f
503.258 547.113 mo
503.254 547.187 503.25 547.25 503.242 547.301 cv
503.23 547.355 503.215 547.398 503.195 547.426 cv
503.172 547.461 503.148 547.484 503.125 547.492 cv
503.102 547.508 503.074 547.512 503.047 547.512 cv
499.086 547.512 li
499.059 547.512 499.035 547.508 499.012 547.492 cv
498.988 547.484 498.965 547.461 498.945 547.426 cv
498.922 547.398 498.906 547.355 498.895 547.301 cv
498.879 547.25 498.871 547.187 498.875 547.113 cv
498.871 547.043 498.879 546.984 498.895 546.934 cv
498.906 546.883 498.918 546.84 498.938 546.805 cv
498.953 546.773 498.977 546.75 499 546.73 cv
499.023 546.715 499.051 546.703 499.086 546.703 cv
500.672 546.703 li
500.672 540.937 li
499.203 541.809 li
499.129 541.855 499.07 541.879 499.027 541.883 cv
498.98 541.895 498.945 541.887 498.918 541.855 cv
498.887 541.832 498.867 541.789 498.859 541.73 cv
498.852 541.672 498.848 541.598 498.848 541.504 cv
498.848 541.441 498.848 541.383 498.855 541.336 cv
498.859 541.289 498.871 541.25 498.883 541.219 cv
498.891 541.187 498.906 541.16 498.93 541.137 cv
498.953 541.113 498.98 541.09 499.016 541.066 cv
500.766 539.949 li
500.777 539.937 500.797 539.926 500.824 539.918 cv
500.844 539.91 500.875 539.902 500.91 539.895 cv
500.941 539.887 500.98 539.883 501.031 539.883 cv
501.074 539.883 501.133 539.883 501.211 539.879 cv
501.301 539.883 501.379 539.887 501.445 539.891 cv
501.504 539.902 501.555 539.914 501.59 539.922 cv
501.621 539.937 501.645 539.953 501.66 539.973 cv
501.672 539.996 501.676 540.02 501.68 540.043 cv
501.68 546.703 li
503.047 546.703 li
503.074 546.703 503.105 546.715 503.137 546.73 cv
503.164 546.75 503.184 546.773 503.203 546.805 cv
503.219 546.84 503.234 546.883 503.242 546.934 cv
503.25 546.984 503.254 547.043 503.258 547.113 cv
cp
f
509.363 547.078 mo
509.363 547.148 509.355 547.211 509.348 547.266 cv
509.332 547.32 509.32 547.367 509.305 547.402 cv
509.289 547.441 509.266 547.469 509.234 547.484 cv
509.203 547.504 509.172 547.512 509.141 547.512 cv
504.949 547.512 li
504.895 547.512 504.848 547.508 504.809 547.492 cv
504.766 547.484 504.73 547.461 504.703 547.426 cv
504.672 547.398 504.648 547.352 504.637 547.289 cv
504.621 547.23 504.617 547.16 504.617 547.074 cv
504.617 547 504.617 546.93 504.625 546.867 cv
504.629 546.809 504.645 546.758 504.664 546.711 cv
504.684 546.668 504.707 546.625 504.738 546.578 cv
504.766 546.539 504.805 546.488 504.859 546.434 cv
506.375 544.875 li
506.723 544.516 507 544.195 507.215 543.91 cv
507.426 543.625 507.59 543.363 507.707 543.129 cv
507.816 542.895 507.895 542.684 507.934 542.492 cv
507.969 542.301 507.984 542.121 507.988 541.949 cv
507.984 541.785 507.957 541.625 507.902 541.473 cv
507.844 541.324 507.762 541.191 507.656 541.078 cv
507.547 540.969 507.414 540.879 507.254 540.809 cv
507.09 540.742 506.902 540.711 506.699 540.707 cv
506.449 540.711 506.23 540.742 506.035 540.809 cv
505.84 540.879 505.668 540.953 505.52 541.027 cv
505.371 541.109 505.246 541.18 505.152 541.242 cv
505.051 541.309 504.98 541.344 504.934 541.34 cv
504.902 541.344 504.875 541.336 504.855 541.316 cv
504.832 541.305 504.813 541.277 504.801 541.242 cv
504.785 541.211 504.777 541.164 504.77 541.102 cv
504.762 541.043 504.758 540.973 504.758 540.891 cv
504.758 540.832 504.758 540.781 504.762 540.738 cv
504.766 540.699 504.773 540.664 504.785 540.629 cv
504.793 540.602 504.805 540.57 504.824 540.539 cv
504.836 540.512 504.867 540.48 504.918 540.437 cv
504.961 540.398 505.043 540.34 505.16 540.27 cv
505.273 540.199 505.418 540.133 505.594 540.062 cv
505.766 539.996 505.957 539.937 506.168 539.887 cv
506.375 539.844 506.594 539.82 506.824 539.816 cv
507.191 539.82 507.512 539.871 507.789 539.973 cv
508.063 540.078 508.293 540.219 508.473 540.398 cv
508.652 540.578 508.789 540.789 508.883 541.027 cv
508.973 541.266 509.016 541.52 509.02 541.785 cv
509.016 542.035 508.996 542.277 508.953 542.512 cv
508.906 542.754 508.813 543.012 508.68 543.289 cv
508.539 543.57 508.34 543.883 508.078 544.223 cv
507.816 544.566 507.469 544.957 507.035 545.402 cv
505.836 546.656 li
509.137 546.656 li
509.164 546.656 509.195 546.668 509.227 546.684 cv
509.254 546.703 509.277 546.727 509.301 546.762 cv
509.316 546.801 509.332 546.848 509.348 546.895 cv
509.355 546.949 509.363 547.008 509.363 547.078 cv
cp
f
578.98 547.113 mo
578.977 547.187 578.973 547.25 578.965 547.301 cv
578.953 547.355 578.938 547.398 578.918 547.426 cv
578.895 547.461 578.871 547.484 578.848 547.492 cv
578.824 547.508 578.797 547.512 578.77 547.512 cv
574.809 547.512 li
574.781 547.512 574.758 547.508 574.734 547.492 cv
574.711 547.484 574.688 547.461 574.668 547.426 cv
574.645 547.398 574.629 547.355 574.617 547.301 cv
574.602 547.25 574.594 547.187 574.598 547.113 cv
574.594 547.043 574.602 546.984 574.617 546.934 cv
574.629 546.883 574.641 546.84 574.66 546.805 cv
574.676 546.773 574.699 546.75 574.723 546.73 cv
574.746 546.715 574.773 546.703 574.809 546.703 cv
576.395 546.703 li
576.395 540.937 li
574.926 541.809 li
574.852 541.855 574.793 541.879 574.75 541.883 cv
574.703 541.895 574.668 541.887 574.641 541.855 cv
574.609 541.832 574.59 541.789 574.582 541.73 cv
574.574 541.672 574.57 541.598 574.57 541.504 cv
574.57 541.441 574.57 541.383 574.578 541.336 cv
574.582 541.289 574.594 541.25 574.605 541.219 cv
574.613 541.187 574.629 541.16 574.652 541.137 cv
574.676 541.113 574.703 541.09 574.738 541.066 cv
576.488 539.949 li
576.5 539.937 576.52 539.926 576.547 539.918 cv
576.566 539.91 576.598 539.902 576.633 539.895 cv
576.664 539.887 576.703 539.883 576.754 539.883 cv
576.797 539.883 576.855 539.883 576.934 539.879 cv
577.023 539.883 577.102 539.887 577.168 539.891 cv
577.227 539.902 577.277 539.914 577.313 539.922 cv
577.344 539.937 577.367 539.953 577.383 539.973 cv
577.395 539.996 577.398 540.02 577.402 540.043 cv
577.402 546.703 li
578.77 546.703 li
578.797 546.703 578.828 546.715 578.859 546.73 cv
578.887 546.75 578.906 546.773 578.926 546.805 cv
578.941 546.84 578.957 546.883 578.965 546.934 cv
578.973 546.984 578.977 547.043 578.98 547.113 cv
cp
f
585.406 545.355 mo
585.402 545.488 585.383 545.59 585.348 545.66 cv
585.305 545.734 585.25 545.773 585.188 545.77 cv
584.328 545.77 li
584.328 547.363 li
584.324 547.398 584.316 547.426 584.305 547.445 cv
584.285 547.469 584.258 547.484 584.219 547.5 cv
584.18 547.516 584.125 547.527 584.063 547.535 cv
583.996 547.543 583.914 547.547 583.816 547.547 cv
583.715 547.547 583.637 547.543 583.574 547.535 cv
583.512 547.527 583.461 547.516 583.422 547.5 cv
583.383 547.484 583.355 547.469 583.34 547.445 cv
583.324 547.426 583.316 547.398 583.32 547.363 cv
583.32 545.77 li
580.219 545.77 li
580.172 545.773 580.137 545.766 580.105 545.754 cv
580.074 545.746 580.043 545.727 580.02 545.691 cv
579.988 545.664 579.973 545.617 579.965 545.555 cv
579.957 545.496 579.953 545.422 579.953 545.324 cv
579.953 545.254 579.953 545.187 579.957 545.129 cv
579.961 545.07 579.969 545.016 579.98 544.969 cv
579.992 544.922 580.008 544.875 580.027 544.828 cv
580.047 544.781 580.07 544.734 580.098 544.684 cv
582.801 540.074 li
582.82 540.047 582.848 540.02 582.887 539.992 cv
582.922 539.973 582.973 539.953 583.035 539.934 cv
583.094 539.922 583.164 539.91 583.254 539.902 cv
583.34 539.898 583.445 539.895 583.566 539.895 cv
583.695 539.895 583.809 539.902 583.906 539.91 cv
584.004 539.926 584.082 539.937 584.145 539.949 cv
584.199 539.969 584.246 539.988 584.281 540.012 cv
584.309 540.035 584.324 540.066 584.328 540.098 cv
584.328 544.941 li
585.188 544.941 li
585.25 544.945 585.305 544.98 585.344 545.043 cv
585.383 545.113 585.402 545.215 585.406 545.355 cv
cp
583.32 540.777 mo
583.313 540.777 li
580.875 544.941 li
583.32 544.941 li
cp
f
654.68 547.113 mo
654.676 547.187 654.672 547.25 654.664 547.301 cv
654.652 547.355 654.637 547.398 654.617 547.426 cv
654.594 547.461 654.57 547.484 654.547 547.492 cv
654.523 547.508 654.496 547.512 654.469 547.512 cv
650.508 547.512 li
650.48 547.512 650.457 547.508 650.434 547.492 cv
650.41 547.484 650.387 547.461 650.367 547.426 cv
650.344 547.398 650.328 547.355 650.316 547.301 cv
650.301 547.25 650.293 547.187 650.297 547.113 cv
650.293 547.043 650.301 546.984 650.316 546.934 cv
650.328 546.883 650.34 546.84 650.359 546.805 cv
650.375 546.773 650.398 546.75 650.422 546.73 cv
650.445 546.715 650.473 546.703 650.508 546.703 cv
652.094 546.703 li
652.094 540.937 li
650.625 541.809 li
650.551 541.855 650.492 541.879 650.449 541.883 cv
650.402 541.895 650.367 541.887 650.34 541.855 cv
650.309 541.832 650.289 541.789 650.281 541.73 cv
650.273 541.672 650.27 541.598 650.27 541.504 cv
650.27 541.441 650.27 541.383 650.277 541.336 cv
650.281 541.289 650.293 541.25 650.305 541.219 cv
650.313 541.187 650.328 541.16 650.352 541.137 cv
650.375 541.113 650.402 541.09 650.438 541.066 cv
652.188 539.949 li
652.199 539.937 652.219 539.926 652.246 539.918 cv
652.266 539.91 652.297 539.902 652.332 539.895 cv
652.363 539.887 652.402 539.883 652.453 539.883 cv
652.496 539.883 652.555 539.883 652.633 539.879 cv
652.723 539.883 652.801 539.887 652.867 539.891 cv
652.926 539.902 652.977 539.914 653.012 539.922 cv
653.043 539.937 653.066 539.953 653.082 539.973 cv
653.094 539.996 653.098 540.02 653.102 540.043 cv
653.102 546.703 li
654.469 546.703 li
654.496 546.703 654.527 546.715 654.559 546.73 cv
654.586 546.75 654.605 546.773 654.625 546.805 cv
654.641 546.84 654.656 546.883 654.664 546.934 cv
654.672 546.984 654.676 547.043 654.68 547.113 cv
cp
f
660.98 545.059 mo
660.977 545.391 660.926 545.711 660.828 546.023 cv
660.723 546.336 660.566 546.609 660.359 546.844 cv
660.145 547.078 659.879 547.27 659.555 547.41 cv
659.227 547.551 658.844 547.617 658.406 547.621 cv
658.09 547.617 657.809 547.582 657.57 547.504 cv
657.324 547.43 657.113 547.316 656.938 547.172 cv
656.754 547.031 656.605 546.855 656.488 546.641 cv
656.367 546.434 656.27 546.191 656.199 545.918 cv
656.121 545.648 656.07 545.355 656.043 545.031 cv
656.008 544.715 655.992 544.371 655.996 544.004 cv
655.992 543.68 656.012 543.352 656.051 543.02 cv
656.086 542.687 656.148 542.367 656.238 542.059 cv
656.324 541.75 656.445 541.461 656.602 541.187 cv
656.758 540.918 656.949 540.68 657.184 540.477 cv
657.414 540.277 657.695 540.117 658.02 540 cv
658.34 539.883 658.715 539.824 659.152 539.824 cv
659.293 539.824 659.441 539.836 659.59 539.852 cv
659.738 539.875 659.875 539.898 660 539.922 cv
660.125 539.953 660.23 539.984 660.316 540.02 cv
660.402 540.055 660.457 540.082 660.484 540.105 cv
660.512 540.129 660.531 540.152 660.547 540.176 cv
660.555 540.199 660.566 540.227 660.578 540.258 cv
660.582 540.289 660.59 540.324 660.598 540.355 cv
660.602 540.395 660.602 540.437 660.605 540.492 cv
660.602 540.562 660.602 540.625 660.602 540.676 cv
660.598 540.727 660.59 540.766 660.578 540.797 cv
660.563 540.828 660.543 540.852 660.523 540.867 cv
660.5 540.883 660.473 540.891 660.441 540.891 cv
660.395 540.891 660.336 540.879 660.262 540.852 cv
660.188 540.824 660.098 540.793 659.992 540.758 cv
659.887 540.727 659.758 540.695 659.609 540.668 cv
659.457 540.645 659.285 540.633 659.086 540.629 cv
658.723 540.633 658.41 540.707 658.148 540.852 cv
657.883 541.004 657.668 541.203 657.504 541.449 cv
657.34 541.703 657.215 541.992 657.137 542.32 cv
657.055 542.648 657.012 542.992 657 543.352 cv
657.102 543.293 657.215 543.234 657.344 543.176 cv
657.469 543.121 657.605 543.07 657.758 543.02 cv
657.906 542.977 658.066 542.937 658.234 542.906 cv
658.402 542.875 658.582 542.859 658.777 542.859 cv
659.184 542.859 659.531 542.918 659.813 543.027 cv
660.094 543.141 660.32 543.293 660.492 543.488 cv
660.664 543.687 660.789 543.922 660.867 544.187 cv
660.941 544.461 660.977 544.75 660.98 545.059 cv
cp
659.957 545.152 mo
659.953 544.926 659.93 544.719 659.891 544.531 cv
659.844 544.348 659.77 544.191 659.664 544.062 cv
659.559 543.934 659.418 543.832 659.242 543.762 cv
659.066 543.691 658.852 543.656 658.594 543.656 cv
658.449 543.656 658.305 543.672 658.16 543.695 cv
658.012 543.723 657.871 543.758 657.738 543.801 cv
657.605 543.848 657.477 543.898 657.352 543.961 cv
657.227 544.023 657.113 544.09 657.02 544.152 cv
657.016 544.66 657.047 545.082 657.113 545.422 cv
657.176 545.762 657.27 546.035 657.395 546.238 cv
657.516 546.445 657.672 546.59 657.855 546.676 cv
658.035 546.766 658.25 546.809 658.5 546.809 cv
658.75 546.809 658.965 546.762 659.148 546.668 cv
659.332 546.574 659.484 546.449 659.605 546.289 cv
659.727 546.133 659.816 545.957 659.871 545.758 cv
659.926 545.562 659.953 545.359 659.957 545.152 cv
cp
f
16.676 391.227 mo
16.773 391.23 16.855 391.234 16.922 391.242 cv
16.996 391.254 17.055 391.273 17.098 391.297 cv
17.148 391.324 17.184 391.355 17.199 391.387 cv
17.223 391.426 17.23 391.461 17.23 391.5 cv
17.23 396.34 li
17.23 396.461 17.191 396.574 17.109 396.68 cv
17.031 396.789 16.891 396.844 16.684 396.84 cv
7.691 396.84 li
7.488 396.844 7.348 396.789 7.266 396.68 cv
7.188 396.574 7.148 396.461 7.145 396.34 cv
7.145 391.555 li
7.148 391.516 7.156 391.477 7.176 391.441 cv
7.199 391.41 7.234 391.383 7.277 391.359 cv
7.328 391.34 7.387 391.324 7.453 391.309 cv
7.527 391.297 7.613 391.289 7.715 391.289 cv
7.809 391.289 7.891 391.297 7.961 391.309 cv
8.031 391.324 8.09 391.34 8.133 391.359 cv
8.18 391.383 8.211 391.41 8.23 391.441 cv
8.254 391.477 8.266 391.516 8.262 391.555 cv
8.262 395.5 li
11.426 395.5 li
11.426 392.117 li
11.43 392.078 11.441 392.039 11.461 392.004 cv
11.488 391.973 11.52 391.945 11.559 391.918 cv
11.602 391.898 11.66 391.883 11.73 391.867 cv
11.805 391.859 11.891 391.852 11.984 391.852 cv
12.082 391.852 12.16 391.859 12.227 391.867 cv
12.297 391.883 12.352 391.898 12.391 391.918 cv
12.434 391.945 12.465 391.973 12.48 392.004 cv
12.5 392.039 12.508 392.078 12.508 392.117 cv
12.508 395.5 li
16.117 395.5 li
16.117 391.5 li
16.117 391.461 16.129 391.426 16.148 391.387 cv
16.172 391.355 16.203 391.324 16.246 391.297 cv
16.293 391.273 16.352 391.254 16.418 391.242 cv
16.488 391.234 16.574 391.23 16.676 391.227 cv
cp
f
17.035 383.16 mo
17.082 383.16 17.117 383.172 17.141 383.191 cv
17.172 383.215 17.195 383.25 17.215 383.293 cv
17.234 383.344 17.246 383.406 17.262 383.488 cv
17.27 383.57 17.277 383.676 17.277 383.797 cv
17.277 383.93 17.27 384.035 17.262 384.117 cv
17.246 384.203 17.234 384.27 17.215 384.312 cv
17.195 384.363 17.172 384.395 17.141 384.414 cv
17.117 384.437 17.082 384.449 17.035 384.445 cv
12.93 384.445 li
12.531 384.449 12.211 384.48 11.965 384.539 cv
11.723 384.605 11.512 384.695 11.332 384.812 cv
11.156 384.93 11.02 385.086 10.926 385.273 cv
10.832 385.469 10.785 385.687 10.785 385.934 cv
10.785 386.258 10.902 386.582 11.129 386.902 cv
11.363 387.227 11.695 387.562 12.133 387.914 cv
17.035 387.914 li
17.082 387.918 17.117 387.93 17.141 387.945 cv
17.172 387.969 17.195 388 17.215 388.047 cv
17.234 388.094 17.246 388.16 17.262 388.238 cv
17.27 388.324 17.277 388.43 17.277 388.559 cv
17.277 388.687 17.27 388.793 17.262 388.871 cv
17.246 388.957 17.234 389.023 17.215 389.07 cv
17.195 389.125 17.172 389.156 17.141 389.172 cv
17.117 389.191 17.082 389.203 17.035 389.199 cv
10.023 389.199 li
9.984 389.203 9.949 389.195 9.918 389.176 cv
9.891 389.164 9.867 389.133 9.84 389.082 cv
9.82 389.039 9.805 388.977 9.793 388.902 cv
9.789 388.832 9.785 388.738 9.781 388.613 cv
9.785 388.504 9.789 388.406 9.793 388.328 cv
9.805 388.254 9.82 388.195 9.84 388.152 cv
9.867 388.113 9.891 388.086 9.918 388.066 cv
9.949 388.051 9.984 388.043 10.023 388.039 cv
10.949 388.039 li
10.508 387.648 10.188 387.254 9.98 386.859 cv
9.777 386.469 9.672 386.07 9.672 385.668 cv
9.672 385.199 9.754 384.809 9.91 384.488 cv
10.074 384.172 10.285 383.91 10.547 383.711 cv
10.813 383.516 11.121 383.375 11.477 383.289 cv
11.832 383.203 12.262 383.16 12.758 383.16 cv
cp
f
13.227 374.836 mo
13.43 374.84 13.57 374.891 13.656 374.988 cv
13.742 375.094 13.785 375.211 13.785 375.336 cv
13.785 379.953 li
14.176 379.957 14.527 379.918 14.84 379.836 cv
15.152 379.762 15.422 379.629 15.641 379.445 cv
15.867 379.266 16.039 379.031 16.156 378.734 cv
16.281 378.445 16.34 378.086 16.336 377.66 cv
16.34 377.328 16.313 377.031 16.254 376.77 cv
16.203 376.508 16.141 376.281 16.07 376.09 cv
16.004 375.902 15.945 375.746 15.887 375.621 cv
15.836 375.5 15.809 375.406 15.805 375.344 cv
15.809 375.309 15.816 375.277 15.832 375.246 cv
15.852 375.219 15.879 375.195 15.914 375.176 cv
15.953 375.164 16.004 375.152 16.066 375.141 cv
16.133 375.137 16.211 375.133 16.305 375.129 cv
16.375 375.133 16.434 375.137 16.48 375.137 cv
16.527 375.145 16.57 375.148 16.609 375.156 cv
16.648 375.164 16.684 375.18 16.715 375.195 cv
16.746 375.219 16.777 375.242 16.805 375.266 cv
16.836 375.297 16.883 375.379 16.945 375.52 cv
17.012 375.66 17.074 375.844 17.137 376.066 cv
17.199 376.293 17.254 376.551 17.305 376.844 cv
17.352 377.137 17.375 377.449 17.379 377.781 cv
17.375 378.359 17.297 378.867 17.137 379.297 cv
16.977 379.734 16.738 380.098 16.422 380.391 cv
16.105 380.691 15.711 380.914 15.23 381.062 cv
14.754 381.211 14.195 381.285 13.559 381.285 cv
12.961 381.285 12.422 381.211 11.938 381.055 cv
11.461 380.902 11.051 380.676 10.715 380.379 cv
10.379 380.086 10.121 379.73 9.941 379.316 cv
9.762 378.902 9.672 378.437 9.672 377.922 cv
9.672 377.371 9.762 376.902 9.938 376.516 cv
10.117 376.129 10.355 375.812 10.652 375.559 cv
10.953 375.312 11.305 375.129 11.703 375.012 cv
12.109 374.898 12.539 374.84 12.992 374.836 cv
cp
12.844 376.129 mo
12.168 376.113 11.637 376.266 11.254 376.582 cv
10.871 376.898 10.68 377.367 10.676 377.984 cv
10.68 378.309 10.738 378.59 10.855 378.828 cv
10.977 379.07 11.137 379.27 11.332 379.43 cv
11.531 379.594 11.762 379.719 12.023 379.805 cv
12.285 379.895 12.559 379.945 12.844 379.953 cv
cp
f
10.48 368.77 mo
10.598 368.773 10.695 368.773 10.77 368.777 cv
10.852 368.785 10.914 368.797 10.953 368.809 cv
11 368.828 11.031 368.848 11.055 368.867 cv
11.078 368.895 11.09 368.926 11.09 368.965 cv
11.09 369.008 11.078 369.059 11.055 369.117 cv
11.031 369.18 11.008 369.25 10.984 369.32 cv
10.961 369.398 10.941 369.48 10.918 369.574 cv
10.902 369.668 10.891 369.77 10.887 369.879 cv
10.891 370.012 10.918 370.141 10.965 370.262 cv
11.02 370.387 11.105 370.516 11.223 370.652 cv
11.348 370.793 11.504 370.937 11.699 371.086 cv
11.895 371.238 12.137 371.406 12.422 371.586 cv
17.035 371.586 li
17.082 371.59 17.117 371.602 17.141 371.617 cv
17.172 371.641 17.195 371.672 17.215 371.719 cv
17.234 371.766 17.246 371.832 17.262 371.91 cv
17.27 371.996 17.277 372.102 17.277 372.23 cv
17.277 372.359 17.27 372.465 17.262 372.543 cv
17.246 372.629 17.234 372.695 17.215 372.742 cv
17.195 372.797 17.172 372.828 17.141 372.844 cv
17.117 372.863 17.082 372.875 17.035 372.871 cv
10.023 372.871 li
9.984 372.875 9.949 372.867 9.918 372.848 cv
9.891 372.836 9.867 372.805 9.84 372.754 cv
9.82 372.711 9.805 372.648 9.793 372.574 cv
9.789 372.504 9.785 372.41 9.781 372.285 cv
9.785 372.176 9.789 372.078 9.793 372 cv
9.805 371.926 9.82 371.867 9.84 371.824 cv
9.867 371.785 9.891 371.758 9.918 371.738 cv
9.949 371.723 9.984 371.715 10.023 371.711 cv
11.043 371.711 li
10.762 371.523 10.535 371.34 10.359 371.168 cv
10.184 371 10.043 370.84 9.941 370.687 cv
9.84 370.539 9.77 370.391 9.73 370.242 cv
9.691 370.094 9.672 369.945 9.672 369.793 cv
9.672 369.727 9.676 369.648 9.684 369.562 cv
9.691 369.477 9.707 369.387 9.727 369.293 cv
9.75 369.199 9.773 369.117 9.797 369.039 cv
9.824 368.969 9.852 368.914 9.875 368.879 cv
9.906 368.852 9.93 368.832 9.949 368.816 cv
9.977 368.809 10.008 368.797 10.039 368.789 cv
10.078 368.781 10.129 368.777 10.199 368.773 cv
10.27 368.773 10.363 368.773 10.48 368.77 cv
cp
f
10.34 361.73 mo
10.523 361.734 10.656 361.758 10.734 361.805 cv
10.816 361.855 10.855 361.918 10.855 361.992 cv
10.855 363 li
11.043 362.82 11.25 362.691 11.477 362.617 cv
11.703 362.547 11.938 362.512 12.18 362.508 cv
12.586 362.512 12.945 362.578 13.258 362.703 cv
13.57 362.836 13.836 363.02 14.047 363.262 cv
14.266 363.504 14.43 363.793 14.543 364.121 cv
14.66 364.457 14.719 364.824 14.715 365.227 cv
14.719 365.516 14.68 365.789 14.602 366.043 cv
14.527 366.305 14.434 366.5 14.316 366.637 cv
14.414 366.73 14.52 366.809 14.637 366.867 cv
14.758 366.93 14.895 366.961 15.047 366.957 cv
15.23 366.961 15.383 366.875 15.5 366.703 cv
15.625 366.535 15.688 366.312 15.695 366.031 cv
15.773 364.199 li
15.785 363.852 15.832 363.535 15.918 363.242 cv
16.004 362.953 16.129 362.699 16.285 362.484 cv
16.445 362.273 16.637 362.105 16.867 361.984 cv
17.102 361.867 17.371 361.809 17.676 361.805 cv
17.996 361.809 18.301 361.875 18.594 362.008 cv
18.883 362.145 19.137 362.352 19.359 362.629 cv
19.578 362.91 19.754 363.266 19.883 363.695 cv
20.008 364.125 20.07 364.633 20.074 365.219 cv
20.07 365.789 20.023 366.273 19.93 366.668 cv
19.832 367.066 19.699 367.391 19.535 367.645 cv
19.367 367.898 19.172 368.082 18.941 368.195 cv
18.707 368.312 18.453 368.371 18.188 368.367 cv
18.016 368.371 17.852 368.352 17.691 368.305 cv
17.527 368.266 17.375 368.203 17.23 368.117 cv
17.086 368.035 16.949 367.926 16.813 367.797 cv
16.684 367.672 16.551 367.527 16.422 367.355 cv
16.293 367.613 16.129 367.801 15.93 367.922 cv
15.734 368.043 15.523 368.102 15.289 368.102 cv
14.977 368.102 14.691 368.039 14.441 367.91 cv
14.191 367.781 13.969 367.621 13.77 367.426 cv
13.578 367.59 13.363 367.715 13.121 367.809 cv
12.883 367.902 12.59 367.949 12.242 367.949 cv
11.848 367.949 11.488 367.883 11.168 367.746 cv
10.852 367.613 10.586 367.426 10.367 367.184 cv
10.152 366.945 9.984 366.66 9.863 366.324 cv
9.75 365.992 9.691 365.625 9.688 365.227 cv
9.691 365.016 9.703 364.816 9.723 364.633 cv
9.75 364.449 9.781 364.277 9.82 364.113 cv
9.82 361.992 li
9.824 361.906 9.867 361.84 9.949 361.797 cv
10.039 361.754 10.168 361.734 10.34 361.73 cv
cp
12.188 363.738 mo
11.715 363.742 11.344 363.875 11.07 364.133 cv
10.805 364.398 10.668 364.77 10.668 365.25 cv
10.668 365.504 10.711 365.723 10.793 365.902 cv
10.879 366.09 10.992 366.242 11.137 366.363 cv
11.285 366.484 11.453 366.574 11.641 366.633 cv
11.828 366.695 12.027 366.727 12.234 366.723 cv
12.699 366.727 13.063 366.594 13.328 366.332 cv
13.594 366.07 13.727 365.703 13.723 365.227 cv
13.727 364.977 13.688 364.758 13.602 364.566 cv
13.523 364.383 13.41 364.227 13.27 364.102 cv
13.129 363.98 12.965 363.891 12.773 363.828 cv
12.59 363.773 12.395 363.742 12.188 363.738 cv
cp
17.746 363.094 mo
17.441 363.098 17.211 363.223 17.047 363.465 cv
16.887 363.715 16.797 364.047 16.785 364.465 cv
16.723 366.281 li
16.855 366.449 16.98 366.586 17.094 366.687 cv
17.211 366.797 17.32 366.879 17.43 366.941 cv
17.535 367.004 17.641 367.047 17.746 367.07 cv
17.848 367.094 17.953 367.105 18.063 367.105 cv
18.398 367.105 18.652 366.937 18.832 366.594 cv
19.004 366.254 19.094 365.773 19.094 365.156 cv
19.094 364.77 19.055 364.445 18.98 364.18 cv
18.902 363.922 18.801 363.711 18.68 363.547 cv
18.551 363.391 18.41 363.273 18.25 363.199 cv
18.09 363.133 17.922 363.098 17.746 363.094 cv
cp
f
17.23 356.879 mo
19.809 357.812 li
19.891 357.848 19.953 357.926 20 358.051 cv
20.043 358.18 20.066 358.375 20.066 358.633 cv
20.066 358.773 20.059 358.883 20.047 358.961 cv
20.031 359.047 20.008 359.109 19.98 359.148 cv
19.945 359.195 19.906 359.219 19.855 359.223 cv
19.801 359.23 19.738 359.219 19.668 359.184 cv
17.23 358.219 li
17.211 358.266 17.18 358.312 17.129 358.352 cv
17.086 358.398 17.035 358.426 16.98 358.437 cv
10.277 360.937 li
10.172 360.98 10.086 361.004 10.023 361 cv
9.961 361.004 9.914 360.98 9.875 360.937 cv
9.844 360.898 9.816 360.832 9.801 360.734 cv
9.789 360.645 9.785 360.52 9.781 360.363 cv
9.785 360.207 9.789 360.086 9.793 359.996 cv
9.805 359.91 9.816 359.84 9.836 359.785 cv
9.859 359.734 9.891 359.695 9.926 359.672 cv
9.969 359.648 10.023 359.625 10.086 359.598 cv
15.711 357.594 li
15.711 357.57 li
10.055 355.641 li
9.957 355.609 9.895 355.574 9.863 355.527 cv
9.84 355.488 9.816 355.422 9.801 355.328 cv
9.789 355.242 9.785 355.113 9.781 354.945 cv
9.785 354.801 9.789 354.68 9.801 354.586 cv
9.816 354.492 9.844 354.426 9.875 354.379 cv
9.914 354.34 9.961 354.316 10.023 354.312 cv
10.086 354.316 10.164 354.332 10.254 354.359 cv
cp
f
15.805 342.242 mo
15.891 342.242 15.961 342.246 16.023 342.25 cv
16.086 342.258 16.141 342.266 16.188 342.277 cv
16.234 342.293 16.277 342.312 16.313 342.328 cv
16.352 342.352 16.395 342.387 16.445 342.437 cv
16.496 342.492 16.574 342.602 16.68 342.766 cv
16.789 342.934 16.895 343.141 16.992 343.387 cv
17.098 343.633 17.18 343.914 17.25 344.234 cv
17.316 344.555 17.352 344.906 17.355 345.281 cv
17.352 345.941 17.246 346.531 17.027 347.059 cv
16.813 347.586 16.492 348.035 16.063 348.406 cv
15.641 348.777 15.113 349.062 14.484 349.262 cv
13.859 349.461 13.137 349.562 12.32 349.559 cv
11.484 349.562 10.742 349.453 10.086 349.238 cv
9.434 349.023 8.879 348.723 8.422 348.332 cv
7.969 347.945 7.621 347.48 7.383 346.934 cv
7.145 346.395 7.023 345.789 7.023 345.125 cv
7.023 344.836 7.051 344.555 7.105 344.277 cv
7.16 344.004 7.23 343.75 7.309 343.516 cv
7.395 343.285 7.488 343.078 7.598 342.891 cv
7.707 342.711 7.797 342.582 7.867 342.512 cv
7.938 342.441 7.992 342.398 8.027 342.375 cv
8.066 342.359 8.109 342.34 8.156 342.324 cv
8.207 342.312 8.266 342.305 8.332 342.293 cv
8.402 342.289 8.484 342.285 8.574 342.281 cv
8.68 342.285 8.766 342.289 8.836 342.297 cv
8.91 342.309 8.973 342.324 9.02 342.344 cv
9.074 342.367 9.109 342.391 9.129 342.418 cv
9.156 342.449 9.168 342.484 9.164 342.523 cv
9.168 342.598 9.117 342.703 9.012 342.832 cv
8.914 342.965 8.805 343.133 8.68 343.336 cv
8.563 343.547 8.449 343.797 8.344 344.09 cv
8.246 344.387 8.195 344.738 8.191 345.148 cv
8.195 345.602 8.285 346.012 8.461 346.379 cv
8.641 346.746 8.902 347.062 9.25 347.32 cv
9.602 347.586 10.027 347.785 10.527 347.926 cv
11.027 348.07 11.602 348.145 12.242 348.141 cv
12.887 348.145 13.453 348.074 13.941 347.934 cv
14.434 347.797 14.844 347.598 15.172 347.34 cv
15.504 347.082 15.75 346.766 15.918 346.391 cv
16.09 346.016 16.176 345.59 16.172 345.109 cv
16.176 344.711 16.125 344.359 16.023 344.059 cv
15.926 343.758 15.816 343.504 15.691 343.289 cv
15.57 343.082 15.461 342.906 15.359 342.77 cv
15.266 342.633 15.215 342.527 15.211 342.445 cv
15.215 342.414 15.223 342.383 15.234 342.352 cv
15.254 342.328 15.285 342.305 15.324 342.289 cv
15.371 342.273 15.43 342.262 15.508 342.254 cv
15.586 342.246 15.688 342.242 15.805 342.242 cv
cp
f
13.449 334.094 mo
14.027 334.098 14.555 334.172 15.031 334.32 cv
15.516 334.473 15.93 334.699 16.273 334.996 cv
16.625 335.297 16.895 335.672 17.086 336.117 cv
17.281 336.57 17.375 337.09 17.379 337.68 cv
17.375 338.258 17.293 338.762 17.121 339.187 cv
16.953 339.617 16.703 339.973 16.375 340.258 cv
16.047 340.547 15.652 340.762 15.184 340.898 cv
14.719 341.039 14.188 341.105 13.59 341.105 cv
13.023 341.105 12.496 341.035 12.016 340.887 cv
11.535 340.742 11.121 340.516 10.77 340.215 cv
10.422 339.918 10.152 339.547 9.961 339.098 cv
9.77 338.652 9.672 338.129 9.672 337.531 cv
9.672 336.953 9.758 336.453 9.93 336.023 cv
10.102 335.598 10.352 335.238 10.68 334.953 cv
11.008 334.668 11.406 334.453 11.871 334.309 cv
12.34 334.168 12.867 334.098 13.449 334.094 cv
cp
13.535 335.426 mo
13.16 335.43 12.801 335.465 12.461 335.531 cv
12.125 335.605 11.832 335.723 11.574 335.883 cv
11.324 336.047 11.121 336.266 10.969 336.543 cv
10.824 336.824 10.75 337.172 10.746 337.582 cv
10.75 337.969 10.816 338.297 10.949 338.57 cv
11.086 338.848 11.277 339.074 11.523 339.25 cv
11.77 339.43 12.063 339.562 12.398 339.645 cv
12.738 339.734 13.105 339.777 13.504 339.773 cv
13.891 339.777 14.254 339.742 14.59 339.668 cv
14.93 339.602 15.223 339.484 15.473 339.316 cv
15.727 339.152 15.93 338.93 16.074 338.652 cv
16.227 338.375 16.301 338.027 16.297 337.613 cv
16.301 337.238 16.23 336.91 16.094 336.629 cv
15.961 336.352 15.773 336.125 15.523 335.945 cv
15.281 335.77 14.988 335.641 14.652 335.555 cv
14.316 335.473 13.945 335.43 13.535 335.426 cv
cp
f
17.035 326.168 mo
17.082 326.168 17.117 326.18 17.141 326.199 cv
17.172 326.223 17.195 326.258 17.215 326.301 cv
17.234 326.352 17.246 326.414 17.262 326.496 cv
17.27 326.578 17.277 326.684 17.277 326.805 cv
17.277 326.937 17.27 327.043 17.262 327.125 cv
17.246 327.211 17.234 327.277 17.215 327.32 cv
17.195 327.371 17.172 327.402 17.141 327.422 cv
17.117 327.445 17.082 327.457 17.035 327.453 cv
12.93 327.453 li
12.531 327.457 12.211 327.488 11.965 327.547 cv
11.723 327.613 11.512 327.703 11.332 327.82 cv
11.156 327.937 11.02 328.094 10.926 328.281 cv
10.832 328.477 10.785 328.695 10.785 328.941 cv
10.785 329.266 10.902 329.59 11.129 329.91 cv
11.363 330.234 11.695 330.57 12.133 330.922 cv
17.035 330.922 li
17.082 330.926 17.117 330.937 17.141 330.953 cv
17.172 330.977 17.195 331.008 17.215 331.055 cv
17.234 331.102 17.246 331.168 17.262 331.246 cv
17.27 331.332 17.277 331.437 17.277 331.566 cv
17.277 331.695 17.27 331.801 17.262 331.879 cv
17.246 331.965 17.234 332.031 17.215 332.078 cv
17.195 332.133 17.172 332.164 17.141 332.18 cv
17.117 332.199 17.082 332.211 17.035 332.207 cv
10.023 332.207 li
9.984 332.211 9.949 332.203 9.918 332.184 cv
9.891 332.172 9.867 332.141 9.84 332.09 cv
9.82 332.047 9.805 331.984 9.793 331.91 cv
9.789 331.84 9.785 331.746 9.781 331.621 cv
9.785 331.512 9.789 331.414 9.793 331.336 cv
9.805 331.262 9.82 331.203 9.84 331.16 cv
9.867 331.121 9.891 331.094 9.918 331.074 cv
9.949 331.059 9.984 331.051 10.023 331.047 cv
10.949 331.047 li
10.508 330.656 10.188 330.262 9.98 329.867 cv
9.777 329.477 9.672 329.078 9.672 328.676 cv
9.672 328.207 9.754 327.816 9.91 327.496 cv
10.074 327.18 10.285 326.918 10.547 326.719 cv
10.813 326.523 11.121 326.383 11.477 326.297 cv
11.832 326.211 12.262 326.168 12.758 326.168 cv
cp
f
15.125 319.426 mo
15.488 319.43 15.809 319.496 16.086 319.625 cv
16.367 319.758 16.602 319.945 16.793 320.187 cv
16.988 320.434 17.133 320.727 17.23 321.062 cv
17.328 321.402 17.375 321.773 17.379 322.176 cv
17.375 322.43 17.355 322.668 17.32 322.891 cv
17.277 323.117 17.23 323.316 17.172 323.496 cv
17.113 323.676 17.051 323.828 16.984 323.953 cv
16.922 324.078 16.863 324.172 16.809 324.227 cv
16.758 324.285 16.688 324.324 16.59 324.348 cv
16.5 324.375 16.371 324.387 16.211 324.387 cv
16.113 324.387 16.031 324.383 15.961 324.371 cv
15.895 324.363 15.84 324.352 15.797 324.332 cv
15.758 324.32 15.727 324.297 15.707 324.27 cv
15.691 324.242 15.684 324.211 15.68 324.172 cv
15.684 324.117 15.719 324.031 15.785 323.918 cv
15.859 323.809 15.938 323.672 16.016 323.504 cv
16.102 323.344 16.176 323.152 16.246 322.926 cv
16.316 322.707 16.352 322.449 16.352 322.152 cv
16.352 321.937 16.328 321.738 16.281 321.559 cv
16.234 321.383 16.168 321.23 16.074 321.102 cv
15.988 320.973 15.871 320.871 15.727 320.801 cv
15.59 320.73 15.422 320.695 15.227 320.695 cv
15.031 320.695 14.867 320.746 14.73 320.848 cv
14.598 320.949 14.477 321.086 14.371 321.25 cv
14.27 321.418 14.18 321.602 14.094 321.809 cv
14.016 322.02 13.93 322.234 13.84 322.453 cv
13.754 322.672 13.652 322.887 13.539 323.098 cv
13.43 323.309 13.297 323.5 13.133 323.664 cv
12.977 323.836 12.781 323.969 12.555 324.066 cv
12.332 324.172 12.066 324.223 11.754 324.219 cv
11.48 324.223 11.215 324.168 10.961 324.059 cv
10.711 323.953 10.492 323.793 10.301 323.578 cv
10.113 323.367 9.961 323.102 9.844 322.781 cv
9.73 322.461 9.672 322.09 9.672 321.66 cv
9.672 321.477 9.688 321.289 9.719 321.102 cv
9.75 320.918 9.789 320.75 9.836 320.594 cv
9.883 320.445 9.934 320.316 9.988 320.207 cv
10.043 320.105 10.094 320.023 10.133 319.965 cv
10.18 319.914 10.215 319.879 10.242 319.855 cv
10.273 319.84 10.309 319.824 10.344 319.816 cv
10.387 319.809 10.434 319.801 10.488 319.793 cv
10.547 319.785 10.617 319.781 10.699 319.781 cv
10.789 319.781 10.867 319.785 10.93 319.793 cv
11 319.801 11.051 319.816 11.09 319.832 cv
11.133 319.855 11.164 319.875 11.18 319.898 cv
11.199 319.926 11.207 319.957 11.207 319.984 cv
11.207 320.035 11.18 320.102 11.121 320.187 cv
11.066 320.277 11.004 320.391 10.938 320.531 cv
10.875 320.672 10.816 320.84 10.754 321.027 cv
10.699 321.219 10.668 321.434 10.668 321.676 cv
10.668 321.898 10.695 322.09 10.742 322.254 cv
10.797 322.422 10.867 322.559 10.953 322.664 cv
11.047 322.77 11.152 322.852 11.277 322.902 cv
11.402 322.961 11.539 322.988 11.684 322.984 cv
11.887 322.988 12.055 322.937 12.191 322.832 cv
12.332 322.73 12.453 322.594 12.555 322.426 cv
12.66 322.262 12.754 322.07 12.836 321.855 cv
12.922 321.645 13.008 321.43 13.094 321.207 cv
13.184 320.988 13.285 320.77 13.391 320.551 cv
13.5 320.336 13.629 320.145 13.785 319.977 cv
13.941 319.812 14.129 319.68 14.348 319.578 cv
14.566 319.48 14.828 319.43 15.125 319.426 cv
cp
f
17.035 311.578 mo
17.082 311.582 17.117 311.59 17.141 311.605 cv
17.172 311.625 17.195 311.66 17.215 311.703 cv
17.234 311.75 17.246 311.809 17.262 311.883 cv
17.27 311.961 17.277 312.055 17.277 312.16 cv
17.277 312.285 17.27 312.383 17.262 312.453 cv
17.246 312.531 17.234 312.59 17.215 312.633 cv
17.195 312.68 17.172 312.711 17.141 312.723 cv
17.117 312.742 17.082 312.75 17.035 312.746 cv
16.109 312.746 li
16.555 313.148 16.875 313.543 17.074 313.93 cv
17.277 314.324 17.375 314.719 17.379 315.113 cv
17.375 315.586 17.301 315.98 17.145 316.297 cv
16.992 316.617 16.781 316.875 16.512 317.07 cv
16.246 317.273 15.934 317.414 15.574 317.496 cv
15.219 317.586 14.785 317.629 14.277 317.625 cv
10.023 317.625 li
9.984 317.629 9.949 317.621 9.918 317.598 cv
9.891 317.582 9.867 317.547 9.84 317.492 cv
9.82 317.445 9.805 317.375 9.793 317.289 cv
9.789 317.207 9.785 317.105 9.781 316.977 cv
9.785 316.855 9.789 316.75 9.793 316.664 cv
9.805 316.582 9.82 316.516 9.84 316.469 cv
9.867 316.422 9.891 316.387 9.918 316.363 cv
9.949 316.344 9.984 316.336 10.023 316.332 cv
14.105 316.332 li
14.52 316.336 14.848 316.305 15.094 316.242 cv
15.34 316.184 15.551 316.094 15.723 315.969 cv
15.902 315.852 16.035 315.695 16.129 315.504 cv
16.227 315.32 16.277 315.102 16.273 314.852 cv
16.277 314.531 16.16 314.211 15.93 313.887 cv
15.703 313.57 15.367 313.23 14.922 312.871 cv
10.023 312.871 li
9.984 312.871 9.949 312.863 9.918 312.844 cv
9.891 312.828 9.867 312.793 9.84 312.738 cv
9.82 312.687 9.805 312.621 9.793 312.539 cv
9.789 312.461 9.785 312.355 9.781 312.223 cv
9.785 312.102 9.789 311.996 9.793 311.91 cv
9.805 311.828 9.82 311.766 9.84 311.719 cv
9.867 311.676 9.891 311.641 9.918 311.613 cv
9.949 311.594 9.984 311.582 10.023 311.578 cv
cp
f
17.035 298.801 mo
17.082 298.805 17.117 298.812 17.141 298.832 cv
17.172 298.855 17.195 298.891 17.215 298.934 cv
17.234 298.984 17.246 299.051 17.262 299.129 cv
17.27 299.215 17.277 299.316 17.277 299.441 cv
17.277 299.574 17.27 299.684 17.262 299.762 cv
17.246 299.848 17.234 299.914 17.215 299.961 cv
17.195 300.016 17.172 300.051 17.141 300.066 cv
17.117 300.09 17.082 300.098 17.035 300.098 cv
12.773 300.098 li
12.48 300.098 12.211 300.125 11.965 300.176 cv
11.723 300.23 11.512 300.312 11.332 300.426 cv
11.156 300.539 11.02 300.684 10.926 300.859 cv
10.832 301.039 10.785 301.25 10.785 301.484 cv
10.785 301.781 10.902 302.078 11.129 302.375 cv
11.363 302.68 11.695 303.008 12.133 303.363 cv
17.035 303.363 li
17.082 303.367 17.117 303.379 17.141 303.395 cv
17.172 303.418 17.195 303.449 17.215 303.496 cv
17.234 303.547 17.246 303.613 17.262 303.695 cv
17.27 303.781 17.277 303.887 17.277 304.008 cv
17.277 304.129 17.27 304.23 17.262 304.316 cv
17.246 304.402 17.234 304.473 17.215 304.52 cv
17.195 304.574 17.172 304.605 17.141 304.621 cv
17.117 304.641 17.082 304.652 17.035 304.648 cv
12.773 304.648 li
12.48 304.652 12.211 304.68 11.965 304.734 cv
11.723 304.793 11.512 304.879 11.332 304.992 cv
11.156 305.105 11.02 305.25 10.926 305.422 cv
10.832 305.602 10.785 305.809 10.785 306.043 cv
10.785 306.344 10.902 306.641 11.129 306.941 cv
11.363 307.242 11.695 307.57 12.133 307.922 cv
17.035 307.922 li
17.082 307.926 17.117 307.937 17.141 307.953 cv
17.172 307.977 17.195 308.008 17.215 308.055 cv
17.234 308.102 17.246 308.168 17.262 308.246 cv
17.27 308.332 17.277 308.437 17.277 308.566 cv
17.277 308.695 17.27 308.801 17.262 308.879 cv
17.246 308.965 17.234 309.031 17.215 309.078 cv
17.195 309.133 17.172 309.164 17.141 309.18 cv
17.117 309.199 17.082 309.211 17.035 309.207 cv
10.023 309.207 li
9.984 309.211 9.949 309.203 9.918 309.184 cv
9.891 309.172 9.867 309.141 9.84 309.09 cv
9.82 309.047 9.805 308.984 9.793 308.91 cv
9.789 308.84 9.785 308.746 9.781 308.621 cv
9.785 308.512 9.789 308.414 9.793 308.336 cv
9.805 308.262 9.82 308.203 9.84 308.16 cv
9.867 308.121 9.891 308.094 9.918 308.074 cv
9.949 308.059 9.984 308.051 10.023 308.047 cv
10.949 308.047 li
10.508 307.656 10.188 307.273 9.98 306.898 cv
9.777 306.531 9.672 306.152 9.672 305.77 cv
9.672 305.48 9.707 305.223 9.773 304.988 cv
9.844 304.762 9.938 304.555 10.059 304.375 cv
10.18 304.199 10.324 304.051 10.492 303.922 cv
10.664 303.801 10.855 303.695 11.059 303.609 cv
10.809 303.379 10.594 303.156 10.414 302.945 cv
10.242 302.734 10.098 302.531 9.984 302.336 cv
9.879 302.141 9.801 301.953 9.746 301.77 cv
9.699 301.586 9.672 301.398 9.672 301.211 cv
9.672 300.758 9.754 300.379 9.91 300.074 cv
10.074 299.77 10.285 299.523 10.547 299.328 cv
10.813 299.141 11.121 299.004 11.477 298.922 cv
11.832 298.844 12.207 298.805 12.602 298.801 cv
cp
f
13.418 290.004 mo
14.035 290.008 14.586 290.074 15.074 290.203 cv
15.563 290.34 15.977 290.535 16.316 290.789 cv
16.656 291.047 16.918 291.363 17.102 291.742 cv
17.285 292.121 17.375 292.555 17.379 293.043 cv
17.375 293.254 17.355 293.449 17.316 293.621 cv
17.273 293.801 17.211 293.973 17.121 294.137 cv
17.035 294.309 16.922 294.477 16.785 294.641 cv
16.652 294.812 16.496 294.988 16.313 295.172 cv
19.816 295.172 li
19.855 295.176 19.895 295.187 19.926 295.203 cv
19.957 295.227 19.98 295.258 20.004 295.305 cv
20.02 295.352 20.035 295.418 20.051 295.496 cv
20.059 295.582 20.066 295.687 20.066 295.816 cv
20.066 295.945 20.059 296.051 20.051 296.129 cv
20.035 296.215 20.02 296.281 20.004 296.328 cv
19.98 296.383 19.957 296.414 19.926 296.43 cv
19.895 296.449 19.855 296.461 19.816 296.457 cv
10.023 296.457 li
9.977 296.461 9.941 296.453 9.91 296.434 cv
9.887 296.422 9.859 296.391 9.836 296.34 cv
9.816 296.297 9.805 296.234 9.793 296.16 cv
9.789 296.09 9.785 296.004 9.781 295.895 cv
9.785 295.789 9.789 295.699 9.793 295.625 cv
9.805 295.559 9.816 295.5 9.836 295.449 cv
9.859 295.406 9.887 295.371 9.91 295.352 cv
9.941 295.336 9.977 295.328 10.023 295.324 cv
10.965 295.324 li
10.75 295.117 10.559 294.914 10.398 294.711 cv
10.238 294.516 10.105 294.316 9.996 294.113 cv
9.891 293.918 9.809 293.711 9.754 293.5 cv
9.699 293.289 9.672 293.066 9.672 292.832 cv
9.672 292.324 9.773 291.891 9.969 291.531 cv
10.168 291.172 10.438 290.883 10.777 290.656 cv
11.125 290.434 11.523 290.266 11.977 290.16 cv
12.434 290.059 12.914 290.008 13.418 290.004 cv
cp
13.566 291.336 mo
13.215 291.34 12.867 291.367 12.527 291.418 cv
12.195 291.477 11.898 291.57 11.637 291.703 cv
11.379 291.84 11.172 292.02 11.012 292.238 cv
10.859 292.465 10.781 292.742 10.777 293.078 cv
10.781 293.246 10.805 293.41 10.852 293.57 cv
10.902 293.734 10.98 293.902 11.086 294.066 cv
11.195 294.238 11.336 294.41 11.508 294.59 cv
11.684 294.773 11.898 294.969 12.148 295.172 cv
14.938 295.172 li
15.375 294.816 15.703 294.48 15.93 294.16 cv
16.16 293.844 16.277 293.508 16.273 293.156 cv
16.277 292.832 16.199 292.555 16.039 292.32 cv
15.887 292.094 15.676 291.906 15.414 291.758 cv
15.156 291.617 14.867 291.508 14.543 291.437 cv
14.223 291.371 13.898 291.34 13.566 291.336 cv
cp
f
16.52 284.508 mo
16.676 284.508 16.793 284.52 16.879 284.539 cv
16.969 284.562 17.035 284.594 17.074 284.633 cv
17.117 284.676 17.156 284.738 17.191 284.82 cv
17.227 284.906 17.254 285 17.281 285.105 cv
17.301 285.215 17.32 285.328 17.34 285.445 cv
17.352 285.562 17.359 285.684 17.363 285.801 cv
17.359 286.168 17.313 286.48 17.219 286.738 cv
17.125 287 16.98 287.211 16.781 287.375 cv
16.59 287.543 16.344 287.664 16.043 287.738 cv
15.746 287.816 15.395 287.855 14.984 287.852 cv
10.887 287.852 li
10.887 288.832 li
10.891 288.91 10.848 288.973 10.762 289.02 cv
10.68 289.066 10.547 289.09 10.355 289.09 cv
10.262 289.09 10.18 289.086 10.109 289.07 cv
10.047 289.062 9.988 289.043 9.941 289.02 cv
9.898 289 9.867 288.973 9.848 288.937 cv
9.832 288.906 9.824 288.871 9.82 288.824 cv
9.82 287.852 li
8.152 287.852 li
8.121 287.855 8.086 287.844 8.051 287.824 cv
8.023 287.809 7.996 287.777 7.969 287.723 cv
7.949 287.676 7.934 287.609 7.918 287.523 cv
7.91 287.445 7.902 287.34 7.902 287.211 cv
7.902 287.082 7.91 286.977 7.918 286.895 cv
7.934 286.812 7.949 286.746 7.969 286.699 cv
7.996 286.652 8.023 286.621 8.051 286.598 cv
8.086 286.582 8.121 286.57 8.152 286.566 cv
9.82 286.566 li
9.82 284.766 li
9.824 284.727 9.832 284.691 9.848 284.656 cv
9.867 284.629 9.898 284.602 9.941 284.574 cv
9.988 284.555 10.047 284.539 10.109 284.523 cv
10.18 284.516 10.262 284.508 10.355 284.508 cv
10.547 284.508 10.68 284.531 10.762 284.578 cv
10.848 284.625 10.891 284.687 10.887 284.766 cv
10.887 286.566 li
14.801 286.566 li
15.285 286.57 15.648 286.5 15.895 286.352 cv
16.145 286.211 16.27 285.953 16.266 285.582 cv
16.27 285.469 16.258 285.363 16.23 285.266 cv
16.211 285.176 16.188 285.094 16.156 285.016 cv
16.133 284.945 16.105 284.883 16.082 284.828 cv
16.059 284.781 16.047 284.734 16.047 284.687 cv
16.047 284.664 16.055 284.637 16.066 284.613 cv
16.082 284.59 16.105 284.574 16.141 284.559 cv
16.18 284.551 16.23 284.539 16.289 284.523 cv
16.355 284.516 16.434 284.508 16.52 284.508 cv
cp
f
17.035 281.492 mo
17.082 281.496 17.117 281.508 17.141 281.523 cv
17.172 281.547 17.195 281.578 17.215 281.625 cv
17.234 281.672 17.246 281.738 17.262 281.816 cv
17.27 281.902 17.277 282.008 17.277 282.137 cv
17.277 282.266 17.27 282.371 17.262 282.449 cv
17.246 282.535 17.234 282.602 17.215 282.648 cv
17.195 282.703 17.172 282.734 17.141 282.75 cv
17.117 282.77 17.082 282.781 17.035 282.777 cv
10.023 282.777 li
9.988 282.781 9.957 282.77 9.922 282.75 cv
9.895 282.734 9.867 282.703 9.844 282.648 cv
9.824 282.602 9.809 282.535 9.797 282.449 cv
9.789 282.371 9.785 282.266 9.781 282.137 cv
9.785 282.008 9.789 281.902 9.797 281.816 cv
9.809 281.738 9.824 281.672 9.844 281.625 cv
9.867 281.578 9.895 281.547 9.922 281.523 cv
9.957 281.508 9.988 281.496 10.023 281.492 cv
cp
7.652 281.344 mo
7.957 281.344 8.164 281.402 8.27 281.516 cv
8.383 281.629 8.438 281.84 8.434 282.145 cv
8.438 282.449 8.383 282.656 8.273 282.766 cv
8.168 282.883 7.965 282.937 7.668 282.934 cv
7.367 282.937 7.164 282.879 7.055 282.762 cv
6.949 282.648 6.895 282.437 6.891 282.129 cv
6.895 281.828 6.949 281.625 7.051 281.512 cv
7.16 281.402 7.359 281.344 7.652 281.344 cv
cp
f
13.449 272.551 mo
14.027 272.555 14.555 272.629 15.031 272.777 cv
15.516 272.93 15.93 273.156 16.273 273.453 cv
16.625 273.754 16.895 274.129 17.086 274.574 cv
17.281 275.027 17.375 275.547 17.379 276.137 cv
17.375 276.715 17.293 277.219 17.121 277.645 cv
16.953 278.074 16.703 278.43 16.375 278.715 cv
16.047 279.004 15.652 279.219 15.184 279.355 cv
14.719 279.496 14.188 279.562 13.59 279.562 cv
13.023 279.562 12.496 279.492 12.016 279.344 cv
11.535 279.199 11.121 278.973 10.77 278.672 cv
10.422 278.375 10.152 278.004 9.961 277.555 cv
9.77 277.109 9.672 276.586 9.672 275.988 cv
9.672 275.41 9.758 274.91 9.93 274.48 cv
10.102 274.055 10.352 273.695 10.68 273.41 cv
11.008 273.125 11.406 272.91 11.871 272.766 cv
12.34 272.625 12.867 272.555 13.449 272.551 cv
cp
13.535 273.883 mo
13.16 273.887 12.801 273.922 12.461 273.988 cv
12.125 274.062 11.832 274.18 11.574 274.34 cv
11.324 274.504 11.121 274.723 10.969 275 cv
10.824 275.281 10.75 275.629 10.746 276.039 cv
10.75 276.426 10.816 276.754 10.949 277.027 cv
11.086 277.305 11.277 277.531 11.523 277.707 cv
11.77 277.887 12.063 278.02 12.398 278.102 cv
12.738 278.191 13.105 278.234 13.504 278.23 cv
13.891 278.234 14.254 278.199 14.59 278.125 cv
14.93 278.059 15.223 277.941 15.473 277.773 cv
15.727 277.609 15.93 277.387 16.074 277.109 cv
16.227 276.832 16.301 276.484 16.297 276.07 cv
16.301 275.695 16.23 275.367 16.094 275.086 cv
15.961 274.809 15.773 274.582 15.523 274.402 cv
15.281 274.227 14.988 274.098 14.652 274.012 cv
14.316 273.93 13.945 273.887 13.535 273.883 cv
cp
f
17.035 264.625 mo
17.082 264.625 17.117 264.637 17.141 264.656 cv
17.172 264.68 17.195 264.715 17.215 264.758 cv
17.234 264.809 17.246 264.871 17.262 264.953 cv
17.27 265.035 17.277 265.141 17.277 265.262 cv
17.277 265.395 17.27 265.5 17.262 265.582 cv
17.246 265.668 17.234 265.734 17.215 265.777 cv
17.195 265.828 17.172 265.859 17.141 265.879 cv
17.117 265.902 17.082 265.914 17.035 265.91 cv
12.93 265.91 li
12.531 265.914 12.211 265.945 11.965 266.004 cv
11.723 266.07 11.512 266.16 11.332 266.277 cv
11.156 266.395 11.02 266.551 10.926 266.738 cv
10.832 266.934 10.785 267.152 10.785 267.398 cv
10.785 267.723 10.902 268.047 11.129 268.367 cv
11.363 268.691 11.695 269.027 12.133 269.379 cv
17.035 269.379 li
17.082 269.383 17.117 269.395 17.141 269.41 cv
17.172 269.434 17.195 269.465 17.215 269.512 cv
17.234 269.559 17.246 269.625 17.262 269.703 cv
17.27 269.789 17.277 269.895 17.277 270.023 cv
17.277 270.152 17.27 270.258 17.262 270.336 cv
17.246 270.422 17.234 270.488 17.215 270.535 cv
17.195 270.59 17.172 270.621 17.141 270.637 cv
17.117 270.656 17.082 270.668 17.035 270.664 cv
10.023 270.664 li
9.984 270.668 9.949 270.66 9.918 270.641 cv
9.891 270.629 9.867 270.598 9.84 270.547 cv
9.82 270.504 9.805 270.441 9.793 270.367 cv
9.789 270.297 9.785 270.203 9.781 270.078 cv
9.785 269.969 9.789 269.871 9.793 269.793 cv
9.805 269.719 9.82 269.66 9.84 269.617 cv
9.867 269.578 9.891 269.551 9.918 269.531 cv
9.949 269.516 9.984 269.508 10.023 269.504 cv
10.949 269.504 li
10.508 269.113 10.188 268.719 9.98 268.324 cv
9.777 267.934 9.672 267.535 9.672 267.133 cv
9.672 266.664 9.754 266.273 9.91 265.953 cv
10.074 265.637 10.285 265.375 10.547 265.176 cv
10.813 264.98 11.121 264.84 11.477 264.754 cv
11.832 264.668 12.262 264.625 12.758 264.625 cv
cp
f
6.492 255.789 mo
7.539 256.285 8.609 256.652 9.707 256.895 cv
10.809 257.137 11.914 257.258 13.023 257.258 cv
14.141 257.258 15.25 257.137 16.344 256.887 cv
17.441 256.645 18.512 256.281 19.566 255.805 cv
19.625 255.781 19.68 255.77 19.727 255.762 cv
19.77 255.762 19.805 255.777 19.836 255.812 cv
19.863 255.852 19.883 255.906 19.898 255.98 cv
19.906 256.059 19.914 256.164 19.918 256.289 cv
19.914 256.387 19.91 256.465 19.91 256.531 cv
19.902 256.602 19.895 256.66 19.879 256.707 cv
19.863 256.758 19.844 256.801 19.824 256.828 cv
19.801 256.863 19.777 256.887 19.754 256.898 cv
19.223 257.18 18.688 257.426 18.145 257.637 cv
17.602 257.855 17.051 258.035 16.492 258.176 cv
15.93 258.324 15.363 258.434 14.789 258.504 cv
14.215 258.582 13.633 258.617 13.047 258.613 cv
12.461 258.617 11.883 258.578 11.309 258.492 cv
10.738 258.414 10.172 258.297 9.605 258.148 cv
9.043 258 8.488 257.82 7.941 257.609 cv
7.398 257.398 6.855 257.16 6.32 256.891 cv
6.301 256.887 6.285 256.871 6.266 256.848 cv
6.254 256.824 6.238 256.793 6.219 256.75 cv
6.207 256.711 6.195 256.652 6.184 256.578 cv
6.18 256.508 6.176 256.414 6.172 256.297 cv
6.176 256.18 6.184 256.086 6.195 256.008 cv
6.215 255.937 6.234 255.879 6.258 255.836 cv
6.285 255.797 6.32 255.773 6.359 255.766 cv
6.406 255.762 6.449 255.77 6.492 255.789 cv
cp
f
17.012 246.895 mo
17.059 246.898 17.094 246.906 17.125 246.922 cv
17.16 246.941 17.188 246.977 17.207 247.027 cv
17.227 247.082 17.242 247.152 17.258 247.238 cv
17.27 247.328 17.277 247.441 17.277 247.582 cv
17.277 247.762 17.27 247.91 17.254 248.023 cv
17.238 248.141 17.211 248.227 17.168 248.281 cv
17.129 248.34 17.082 248.387 17.027 248.422 cv
11.984 252.133 li
17.027 252.133 li
17.066 252.137 17.102 252.145 17.133 252.164 cv
17.168 252.187 17.195 252.227 17.211 252.273 cv
17.23 252.328 17.242 252.395 17.258 252.48 cv
17.27 252.566 17.277 252.676 17.277 252.801 cv
17.277 252.93 17.27 253.035 17.258 253.121 cv
17.242 253.211 17.23 253.281 17.211 253.332 cv
17.195 253.387 17.168 253.422 17.133 253.441 cv
17.102 253.465 17.066 253.477 17.027 253.473 cv
7.348 253.473 li
7.309 253.477 7.273 253.465 7.238 253.441 cv
7.211 253.422 7.184 253.387 7.164 253.332 cv
7.148 253.281 7.133 253.211 7.117 253.121 cv
7.105 253.035 7.102 252.93 7.098 252.801 cv
7.102 252.676 7.105 252.566 7.117 252.48 cv
7.133 252.395 7.148 252.328 7.164 252.273 cv
7.184 252.227 7.211 252.187 7.238 252.164 cv
7.273 252.145 7.309 252.137 7.348 252.133 cv
11.828 252.133 li
7.348 248.562 li
7.305 248.535 7.266 248.5 7.23 248.453 cv
7.203 248.414 7.18 248.363 7.156 248.301 cv
7.141 248.246 7.125 248.172 7.113 248.082 cv
7.105 248 7.102 247.891 7.098 247.754 cv
7.102 247.621 7.105 247.512 7.117 247.426 cv
7.133 247.344 7.152 247.277 7.168 247.227 cv
7.191 247.18 7.215 247.145 7.246 247.125 cv
7.277 247.109 7.313 247.102 7.348 247.098 cv
7.418 247.102 7.484 247.117 7.551 247.148 cv
7.621 247.184 7.715 247.25 7.832 247.34 cv
11.828 250.684 li
16.613 247.082 li
16.754 246.996 16.844 246.941 16.891 246.922 cv
16.941 246.906 16.984 246.898 17.012 246.895 cv
cp
f
17.035 244.082 mo
17.082 244.086 17.117 244.098 17.141 244.113 cv
17.172 244.137 17.195 244.168 17.215 244.215 cv
17.234 244.262 17.246 244.328 17.262 244.406 cv
17.27 244.492 17.277 244.598 17.277 244.727 cv
17.277 244.855 17.27 244.961 17.262 245.039 cv
17.246 245.125 17.234 245.191 17.215 245.238 cv
17.195 245.293 17.172 245.324 17.141 245.34 cv
17.117 245.359 17.082 245.371 17.035 245.367 cv
10.023 245.367 li
9.988 245.371 9.957 245.359 9.922 245.34 cv
9.895 245.324 9.867 245.293 9.844 245.238 cv
9.824 245.191 9.809 245.125 9.797 245.039 cv
9.789 244.961 9.785 244.855 9.781 244.727 cv
9.785 244.598 9.789 244.492 9.797 244.406 cv
9.809 244.328 9.824 244.262 9.844 244.215 cv
9.867 244.168 9.895 244.137 9.922 244.113 cv
9.957 244.098 9.988 244.086 10.023 244.082 cv
cp
7.652 243.934 mo
7.957 243.934 8.164 243.992 8.27 244.105 cv
8.383 244.219 8.438 244.43 8.434 244.734 cv
8.438 245.039 8.383 245.246 8.273 245.355 cv
8.168 245.473 7.965 245.527 7.668 245.523 cv
7.367 245.527 7.164 245.469 7.055 245.352 cv
6.949 245.238 6.895 245.027 6.891 244.719 cv
6.895 244.418 6.949 244.215 7.051 244.102 cv
7.16 243.992 7.359 243.934 7.652 243.934 cv
cp
f
17.035 240.379 mo
17.082 240.383 17.117 240.395 17.141 240.41 cv
17.172 240.434 17.195 240.465 17.215 240.512 cv
17.234 240.559 17.246 240.625 17.262 240.703 cv
17.27 240.789 17.277 240.895 17.277 241.023 cv
17.277 241.152 17.27 241.258 17.262 241.336 cv
17.246 241.422 17.234 241.488 17.215 241.535 cv
17.195 241.59 17.172 241.621 17.141 241.637 cv
17.117 241.656 17.082 241.668 17.035 241.664 cv
6.625 241.664 li
6.586 241.668 6.551 241.656 6.516 241.637 cv
6.488 241.621 6.461 241.59 6.438 241.535 cv
6.418 241.488 6.402 241.422 6.391 241.336 cv
6.383 241.258 6.379 241.152 6.375 241.023 cv
6.379 240.895 6.383 240.789 6.391 240.703 cv
6.402 240.625 6.418 240.559 6.438 240.512 cv
6.461 240.465 6.488 240.434 6.516 240.41 cv
6.551 240.395 6.586 240.383 6.625 240.379 cv
cp
f
13.449 231.441 mo
14.027 231.445 14.555 231.52 15.031 231.668 cv
15.516 231.82 15.93 232.047 16.273 232.344 cv
16.625 232.645 16.895 233.02 17.086 233.465 cv
17.281 233.918 17.375 234.437 17.379 235.027 cv
17.375 235.605 17.293 236.109 17.121 236.535 cv
16.953 236.965 16.703 237.32 16.375 237.605 cv
16.047 237.895 15.652 238.109 15.184 238.246 cv
14.719 238.387 14.188 238.453 13.59 238.453 cv
13.023 238.453 12.496 238.383 12.016 238.234 cv
11.535 238.09 11.121 237.863 10.77 237.562 cv
10.422 237.266 10.152 236.895 9.961 236.445 cv
9.77 236 9.672 235.477 9.672 234.879 cv
9.672 234.301 9.758 233.801 9.93 233.371 cv
10.102 232.945 10.352 232.586 10.68 232.301 cv
11.008 232.016 11.406 231.801 11.871 231.656 cv
12.34 231.516 12.867 231.445 13.449 231.441 cv
cp
13.535 232.773 mo
13.16 232.777 12.801 232.812 12.461 232.879 cv
12.125 232.953 11.832 233.07 11.574 233.23 cv
11.324 233.395 11.121 233.613 10.969 233.891 cv
10.824 234.172 10.75 234.52 10.746 234.93 cv
10.75 235.316 10.816 235.645 10.949 235.918 cv
11.086 236.195 11.277 236.422 11.523 236.598 cv
11.77 236.777 12.063 236.91 12.398 236.992 cv
12.738 237.082 13.105 237.125 13.504 237.121 cv
13.891 237.125 14.254 237.09 14.59 237.016 cv
14.93 236.949 15.223 236.832 15.473 236.664 cv
15.727 236.5 15.93 236.277 16.074 236 cv
16.227 235.723 16.301 235.375 16.297 234.961 cv
16.301 234.586 16.23 234.258 16.094 233.977 cv
15.961 233.699 15.773 233.473 15.523 233.293 cv
15.281 233.117 14.988 232.988 14.652 232.902 cv
14.316 232.82 13.945 232.777 13.535 232.773 cv
cp
f
16.934 216.141 mo
17.008 216.164 17.066 216.195 17.109 216.234 cv
17.156 216.277 17.191 216.336 17.211 216.406 cv
17.234 216.484 17.246 216.574 17.262 216.676 cv
17.27 216.785 17.277 216.914 17.277 217.066 cv
17.277 217.23 17.27 217.367 17.262 217.477 cv
17.246 217.59 17.234 217.684 17.211 217.754 cv
17.191 217.832 17.156 217.887 17.109 217.918 cv
17.066 217.957 17.008 217.984 16.934 218.004 cv
9.32 220.117 li
9.32 220.129 li
16.934 222.078 li
17.008 222.098 17.066 222.121 17.109 222.156 cv
17.156 222.195 17.191 222.25 17.211 222.312 cv
17.234 222.383 17.246 222.469 17.262 222.574 cv
17.27 222.684 17.277 222.82 17.277 222.984 cv
17.277 223.156 17.27 223.297 17.262 223.41 cv
17.246 223.527 17.234 223.621 17.211 223.691 cv
17.191 223.766 17.156 223.824 17.109 223.859 cv
17.066 223.902 17.008 223.93 16.934 223.941 cv
7.621 226.605 li
7.504 226.641 7.41 226.656 7.34 226.656 cv
7.273 226.66 7.223 226.641 7.184 226.594 cv
7.148 226.551 7.125 226.48 7.113 226.383 cv
7.105 226.285 7.102 226.152 7.098 225.984 cv
7.102 225.824 7.105 225.695 7.109 225.602 cv
7.121 225.508 7.133 225.437 7.152 225.387 cv
7.176 225.34 7.207 225.305 7.238 225.285 cv
7.277 225.27 7.324 225.258 7.379 225.242 cv
15.828 222.977 li
15.828 222.969 li
7.395 220.816 li
7.34 220.805 7.293 220.785 7.25 220.758 cv
7.215 220.738 7.184 220.699 7.16 220.645 cv
7.141 220.594 7.125 220.52 7.113 220.422 cv
7.105 220.328 7.102 220.203 7.098 220.047 cv
7.102 219.902 7.105 219.789 7.113 219.699 cv
7.125 219.617 7.141 219.547 7.16 219.492 cv
7.184 219.441 7.215 219.402 7.25 219.379 cv
7.293 219.355 7.34 219.336 7.395 219.32 cv
15.828 217.004 li
15.828 216.992 li
7.387 214.77 li
7.336 214.758 7.293 214.742 7.25 214.723 cv
7.215 214.711 7.184 214.68 7.16 214.625 cv
7.141 214.578 7.125 214.508 7.113 214.414 cv
7.105 214.328 7.102 214.207 7.098 214.051 cv
7.102 213.902 7.105 213.777 7.117 213.684 cv
7.133 213.594 7.16 213.527 7.191 213.484 cv
7.23 213.445 7.281 213.426 7.348 213.426 cv
7.418 213.43 7.512 213.445 7.629 213.469 cv
cp
f
17.043 207.109 mo
17.105 207.113 17.152 207.133 17.184 207.172 cv
17.215 207.215 17.238 207.273 17.254 207.344 cv
17.27 207.422 17.277 207.527 17.277 207.664 cv
17.277 207.801 17.27 207.91 17.254 207.988 cv
17.238 208.074 17.215 208.133 17.184 208.164 cv
17.152 208.203 17.105 208.219 17.043 208.215 cv
16.344 208.215 li
16.672 208.523 16.926 208.867 17.105 209.242 cv
17.289 209.621 17.375 210.02 17.379 210.437 cv
17.375 210.812 17.328 211.145 17.234 211.441 cv
17.137 211.738 17 211.992 16.816 212.203 cv
16.637 212.414 16.414 212.578 16.148 212.695 cv
15.887 212.812 15.586 212.871 15.242 212.867 cv
14.852 212.871 14.508 212.793 14.215 212.629 cv
13.926 212.473 13.684 212.238 13.492 211.934 cv
13.301 211.633 13.156 211.266 13.059 210.828 cv
12.965 210.395 12.918 209.902 12.914 209.355 cv
12.914 208.387 li
12.367 208.387 li
12.098 208.391 11.859 208.418 11.652 208.473 cv
11.445 208.531 11.273 208.625 11.133 208.75 cv
10.996 208.883 10.891 209.047 10.82 209.246 cv
10.75 209.453 10.715 209.703 10.715 209.992 cv
10.715 210.312 10.754 210.598 10.828 210.848 cv
10.906 211.105 10.988 211.324 11.078 211.512 cv
11.172 211.699 11.258 211.859 11.328 211.984 cv
11.406 212.117 11.441 212.211 11.441 212.27 cv
11.441 212.312 11.434 212.348 11.41 212.379 cv
11.395 212.41 11.363 212.437 11.316 212.461 cv
11.277 212.484 11.223 212.504 11.156 212.512 cv
11.094 212.527 11.023 212.531 10.941 212.527 cv
10.816 212.531 10.711 212.523 10.633 212.5 cv
10.559 212.484 10.488 212.437 10.418 212.367 cv
10.352 212.297 10.273 212.176 10.184 212.004 cv
10.094 211.832 10.012 211.637 9.934 211.414 cv
9.863 211.191 9.801 210.945 9.746 210.68 cv
9.699 210.414 9.672 210.148 9.672 209.875 cv
9.672 209.375 9.73 208.945 9.844 208.594 cv
9.961 208.242 10.129 207.957 10.348 207.734 cv
10.57 207.52 10.844 207.359 11.168 207.258 cv
11.5 207.16 11.883 207.113 12.313 207.109 cv
cp
13.84 208.387 mo
13.84 209.488 li
13.844 209.844 13.875 210.148 13.93 210.406 cv
13.992 210.668 14.078 210.883 14.195 211.055 cv
14.313 211.227 14.453 211.352 14.617 211.43 cv
14.781 211.512 14.969 211.555 15.18 211.551 cv
15.547 211.555 15.84 211.437 16.051 211.207 cv
16.27 210.977 16.375 210.652 16.375 210.234 cv
16.375 209.898 16.289 209.586 16.117 209.297 cv
15.945 209.008 15.684 208.707 15.328 208.387 cv
cp
f
16.52 201.184 mo
16.676 201.184 16.793 201.195 16.879 201.215 cv
16.969 201.238 17.035 201.27 17.074 201.309 cv
17.117 201.352 17.156 201.414 17.191 201.496 cv
17.227 201.582 17.254 201.676 17.281 201.781 cv
17.301 201.891 17.32 202.004 17.34 202.121 cv
17.352 202.238 17.359 202.359 17.363 202.477 cv
17.359 202.844 17.313 203.156 17.219 203.414 cv
17.125 203.676 16.98 203.887 16.781 204.051 cv
16.59 204.219 16.344 204.34 16.043 204.414 cv
15.746 204.492 15.395 204.531 14.984 204.527 cv
10.887 204.527 li
10.887 205.508 li
10.891 205.586 10.848 205.648 10.762 205.695 cv
10.68 205.742 10.547 205.766 10.355 205.766 cv
10.262 205.766 10.18 205.762 10.109 205.746 cv
10.047 205.738 9.988 205.719 9.941 205.695 cv
9.898 205.676 9.867 205.648 9.848 205.613 cv
9.832 205.582 9.824 205.547 9.82 205.5 cv
9.82 204.527 li
8.152 204.527 li
8.121 204.531 8.086 204.52 8.051 204.5 cv
8.023 204.484 7.996 204.453 7.969 204.398 cv
7.949 204.352 7.934 204.285 7.918 204.199 cv
7.91 204.121 7.902 204.016 7.902 203.887 cv
7.902 203.758 7.91 203.652 7.918 203.57 cv
7.934 203.488 7.949 203.422 7.969 203.375 cv
7.996 203.328 8.023 203.297 8.051 203.273 cv
8.086 203.258 8.121 203.246 8.152 203.242 cv
9.82 203.242 li
9.82 201.441 li
9.824 201.402 9.832 201.367 9.848 201.332 cv
9.867 201.305 9.898 201.277 9.941 201.25 cv
9.988 201.23 10.047 201.215 10.109 201.199 cv
10.18 201.191 10.262 201.184 10.355 201.184 cv
10.547 201.184 10.68 201.207 10.762 201.254 cv
10.848 201.301 10.891 201.363 10.887 201.441 cv
10.887 203.242 li
14.801 203.242 li
15.285 203.246 15.648 203.176 15.895 203.027 cv
16.145 202.887 16.27 202.629 16.266 202.258 cv
16.27 202.145 16.258 202.039 16.23 201.941 cv
16.211 201.852 16.188 201.77 16.156 201.691 cv
16.133 201.621 16.105 201.559 16.082 201.504 cv
16.059 201.457 16.047 201.41 16.047 201.363 cv
16.047 201.34 16.055 201.312 16.066 201.289 cv
16.082 201.266 16.105 201.25 16.141 201.234 cv
16.18 201.227 16.23 201.215 16.289 201.199 cv
16.355 201.191 16.434 201.184 16.52 201.184 cv
cp
f
16.52 196.027 mo
16.676 196.027 16.793 196.039 16.879 196.059 cv
16.969 196.082 17.035 196.113 17.074 196.152 cv
17.117 196.195 17.156 196.258 17.191 196.34 cv
17.227 196.426 17.254 196.52 17.281 196.625 cv
17.301 196.734 17.32 196.848 17.34 196.965 cv
17.352 197.082 17.359 197.203 17.363 197.32 cv
17.359 197.687 17.313 198 17.219 198.258 cv
17.125 198.52 16.98 198.73 16.781 198.895 cv
16.59 199.062 16.344 199.184 16.043 199.258 cv
15.746 199.336 15.395 199.375 14.984 199.371 cv
10.887 199.371 li
10.887 200.352 li
10.891 200.43 10.848 200.492 10.762 200.539 cv
10.68 200.586 10.547 200.609 10.355 200.609 cv
10.262 200.609 10.18 200.605 10.109 200.59 cv
10.047 200.582 9.988 200.562 9.941 200.539 cv
9.898 200.52 9.867 200.492 9.848 200.457 cv
9.832 200.426 9.824 200.391 9.82 200.344 cv
9.82 199.371 li
8.152 199.371 li
8.121 199.375 8.086 199.363 8.051 199.344 cv
8.023 199.328 7.996 199.297 7.969 199.242 cv
7.949 199.195 7.934 199.129 7.918 199.043 cv
7.91 198.965 7.902 198.859 7.902 198.73 cv
7.902 198.602 7.91 198.496 7.918 198.414 cv
7.934 198.332 7.949 198.266 7.969 198.219 cv
7.996 198.172 8.023 198.141 8.051 198.117 cv
8.086 198.102 8.121 198.09 8.152 198.086 cv
9.82 198.086 li
9.82 196.285 li
9.824 196.246 9.832 196.211 9.848 196.176 cv
9.867 196.148 9.898 196.121 9.941 196.094 cv
9.988 196.074 10.047 196.059 10.109 196.043 cv
10.18 196.035 10.262 196.027 10.355 196.027 cv
10.547 196.027 10.68 196.051 10.762 196.098 cv
10.848 196.145 10.891 196.207 10.887 196.285 cv
10.887 198.086 li
14.801 198.086 li
15.285 198.09 15.648 198.02 15.895 197.871 cv
16.145 197.73 16.27 197.473 16.266 197.102 cv
16.27 196.988 16.258 196.883 16.23 196.785 cv
16.211 196.695 16.188 196.613 16.156 196.535 cv
16.133 196.465 16.105 196.402 16.082 196.348 cv
16.059 196.301 16.047 196.254 16.047 196.207 cv
16.047 196.184 16.055 196.156 16.066 196.133 cv
16.082 196.109 16.105 196.094 16.141 196.078 cv
16.18 196.07 16.23 196.059 16.289 196.043 cv
16.355 196.035 16.434 196.027 16.52 196.027 cv
cp
f
15.125 189.895 mo
15.488 189.898 15.809 189.965 16.086 190.094 cv
16.367 190.227 16.602 190.414 16.793 190.656 cv
16.988 190.902 17.133 191.195 17.23 191.531 cv
17.328 191.871 17.375 192.242 17.379 192.645 cv
17.375 192.898 17.355 193.137 17.32 193.359 cv
17.277 193.586 17.23 193.785 17.172 193.965 cv
17.113 194.145 17.051 194.297 16.984 194.422 cv
16.922 194.547 16.863 194.641 16.809 194.695 cv
16.758 194.754 16.688 194.793 16.59 194.816 cv
16.5 194.844 16.371 194.855 16.211 194.855 cv
16.113 194.855 16.031 194.852 15.961 194.84 cv
15.895 194.832 15.84 194.82 15.797 194.801 cv
15.758 194.789 15.727 194.766 15.707 194.738 cv
15.691 194.711 15.684 194.68 15.68 194.641 cv
15.684 194.586 15.719 194.5 15.785 194.387 cv
15.859 194.277 15.938 194.141 16.016 193.973 cv
16.102 193.812 16.176 193.621 16.246 193.395 cv
16.316 193.176 16.352 192.918 16.352 192.621 cv
16.352 192.406 16.328 192.207 16.281 192.027 cv
16.234 191.852 16.168 191.699 16.074 191.57 cv
15.988 191.441 15.871 191.34 15.727 191.27 cv
15.59 191.199 15.422 191.164 15.227 191.164 cv
15.031 191.164 14.867 191.215 14.73 191.316 cv
14.598 191.418 14.477 191.555 14.371 191.719 cv
14.27 191.887 14.18 192.07 14.094 192.277 cv
14.016 192.488 13.93 192.703 13.84 192.922 cv
13.754 193.141 13.652 193.355 13.539 193.566 cv
13.43 193.777 13.297 193.969 13.133 194.133 cv
12.977 194.305 12.781 194.437 12.555 194.535 cv
12.332 194.641 12.066 194.691 11.754 194.687 cv
11.48 194.691 11.215 194.637 10.961 194.527 cv
10.711 194.422 10.492 194.262 10.301 194.047 cv
10.113 193.836 9.961 193.57 9.844 193.25 cv
9.73 192.93 9.672 192.559 9.672 192.129 cv
9.672 191.945 9.688 191.758 9.719 191.57 cv
9.75 191.387 9.789 191.219 9.836 191.062 cv
9.883 190.914 9.934 190.785 9.988 190.676 cv
10.043 190.574 10.094 190.492 10.133 190.434 cv
10.18 190.383 10.215 190.348 10.242 190.324 cv
10.273 190.309 10.309 190.293 10.344 190.285 cv
10.387 190.277 10.434 190.27 10.488 190.262 cv
10.547 190.254 10.617 190.25 10.699 190.25 cv
10.789 190.25 10.867 190.254 10.93 190.262 cv
11 190.27 11.051 190.285 11.09 190.301 cv
11.133 190.324 11.164 190.344 11.18 190.367 cv
11.199 190.395 11.207 190.426 11.207 190.453 cv
11.207 190.504 11.18 190.57 11.121 190.656 cv
11.066 190.746 11.004 190.859 10.938 191 cv
10.875 191.141 10.816 191.309 10.754 191.496 cv
10.699 191.687 10.668 191.902 10.668 192.145 cv
10.668 192.367 10.695 192.559 10.742 192.723 cv
10.797 192.891 10.867 193.027 10.953 193.133 cv
11.047 193.238 11.152 193.32 11.277 193.371 cv
11.402 193.43 11.539 193.457 11.684 193.453 cv
11.887 193.457 12.055 193.406 12.191 193.301 cv
12.332 193.199 12.453 193.062 12.555 192.895 cv
12.66 192.73 12.754 192.539 12.836 192.324 cv
12.922 192.113 13.008 191.898 13.094 191.676 cv
13.184 191.457 13.285 191.238 13.391 191.02 cv
13.5 190.805 13.629 190.613 13.785 190.445 cv
13.941 190.281 14.129 190.148 14.348 190.047 cv
14.566 189.949 14.828 189.898 15.125 189.895 cv
cp
f
13.047 185.449 mo
13.633 185.449 14.215 185.488 14.789 185.559 cv
15.363 185.637 15.93 185.746 16.492 185.887 cv
17.051 186.035 17.602 186.211 18.145 186.422 cv
18.688 186.633 19.223 186.879 19.754 187.156 cv
19.777 187.176 19.801 187.199 19.824 187.227 cv
19.844 187.262 19.863 187.301 19.879 187.348 cv
19.895 187.398 19.902 187.457 19.91 187.523 cv
19.91 187.594 19.914 187.676 19.918 187.766 cv
19.914 187.902 19.906 188.008 19.898 188.082 cv
19.883 188.16 19.863 188.215 19.836 188.246 cv
19.805 188.281 19.77 188.297 19.727 188.293 cv
19.68 188.293 19.625 188.277 19.566 188.25 cv
18.516 187.773 17.445 187.414 16.348 187.168 cv
15.25 186.926 14.141 186.805 13.023 186.801 cv
11.914 186.805 10.809 186.926 9.707 187.168 cv
8.609 187.414 7.539 187.781 6.492 188.266 cv
6.449 188.289 6.406 188.297 6.359 188.289 cv
6.32 188.289 6.285 188.266 6.258 188.219 cv
6.234 188.18 6.215 188.121 6.195 188.047 cv
6.184 187.977 6.176 187.879 6.172 187.758 cv
6.176 187.648 6.18 187.559 6.184 187.484 cv
6.195 187.414 6.207 187.355 6.219 187.309 cv
6.238 187.266 6.254 187.234 6.266 187.211 cv
6.285 187.195 6.301 187.18 6.32 187.164 cv
7.387 186.633 8.484 186.211 9.605 185.906 cv
10.734 185.602 11.879 185.449 13.047 185.449 cv
cp
f
270.781 561.117 mo
270.777 561.223 270.762 561.312 270.727 561.383 cv
270.691 561.461 270.645 561.52 270.59 561.562 cv
270.531 561.613 270.469 561.648 270.402 561.664 cv
270.328 561.687 270.258 561.695 270.195 561.695 cv
269.75 561.695 li
269.609 561.695 269.488 561.684 269.383 561.652 cv
269.277 561.629 269.18 561.574 269.086 561.496 cv
268.992 561.422 268.898 561.32 268.805 561.187 cv
268.711 561.059 268.609 560.895 268.504 560.691 cv
265.43 554.953 li
265.266 554.66 265.102 554.352 264.941 554.023 cv
264.773 553.703 264.621 553.387 264.484 553.078 cv
264.469 553.078 li
264.477 553.453 264.484 553.836 264.492 554.223 cv
264.496 554.613 264.496 555 264.5 555.383 cv
264.5 561.469 li
264.496 561.508 264.484 561.543 264.465 561.574 cv
264.441 561.609 264.406 561.637 264.355 561.652 cv
264.301 561.672 264.23 561.684 264.148 561.699 cv
264.063 561.711 263.957 561.719 263.828 561.719 cv
263.691 561.719 263.582 561.711 263.5 561.699 cv
263.414 561.684 263.348 561.672 263.301 561.652 cv
263.25 561.637 263.215 561.609 263.191 561.574 cv
263.168 561.543 263.156 561.508 263.16 561.469 cv
263.16 552.164 li
263.156 551.957 263.215 551.809 263.336 551.719 cv
263.453 551.633 263.582 551.59 263.723 551.586 cv
264.383 551.586 li
264.535 551.59 264.668 551.602 264.773 551.625 cv
264.875 551.652 264.969 551.695 265.055 551.754 cv
265.137 551.816 265.215 551.898 265.297 552.004 cv
265.371 552.113 265.453 552.25 265.539 552.406 cv
267.906 556.832 li
268.051 557.105 268.191 557.371 268.328 557.625 cv
268.461 557.883 268.59 558.137 268.719 558.383 cv
268.84 558.637 268.965 558.883 269.09 559.121 cv
269.211 559.363 269.332 559.605 269.457 559.848 cv
269.465 559.848 li
269.453 559.441 269.445 559.012 269.445 558.566 cv
269.438 558.121 269.438 557.695 269.441 557.285 cv
269.441 551.812 li
269.438 551.777 269.449 551.742 269.473 551.711 cv
269.496 551.68 269.531 551.652 269.586 551.629 cv
269.633 551.605 269.703 551.59 269.789 551.578 cv
269.875 551.57 269.984 551.566 270.125 551.562 cv
270.242 551.566 270.348 551.57 270.438 551.578 cv
270.523 551.59 270.59 551.605 270.641 551.629 cv
270.688 551.652 270.723 551.68 270.746 551.711 cv
270.766 551.742 270.777 551.777 270.781 551.812 cv
cp
f
279.328 561.477 mo
279.324 561.523 279.316 561.559 279.301 561.582 cv
279.281 561.613 279.246 561.637 279.203 561.656 cv
279.156 561.676 279.098 561.687 279.023 561.703 cv
278.945 561.711 278.852 561.719 278.746 561.719 cv
278.621 561.719 278.523 561.711 278.453 561.703 cv
278.375 561.687 278.316 561.676 278.273 561.656 cv
278.227 561.637 278.195 561.613 278.184 561.582 cv
278.164 561.559 278.156 561.523 278.16 561.477 cv
278.16 560.551 li
277.758 560.996 277.363 561.316 276.977 561.516 cv
276.582 561.719 276.188 561.816 275.793 561.82 cv
275.32 561.816 274.926 561.742 274.609 561.586 cv
274.289 561.434 274.031 561.223 273.836 560.953 cv
273.633 560.687 273.492 560.375 273.41 560.016 cv
273.32 559.66 273.277 559.227 273.281 558.719 cv
273.281 554.465 li
273.277 554.426 273.285 554.391 273.309 554.359 cv
273.324 554.332 273.359 554.309 273.414 554.281 cv
273.461 554.262 273.531 554.246 273.617 554.234 cv
273.699 554.23 273.801 554.227 273.93 554.223 cv
274.051 554.227 274.156 554.23 274.242 554.234 cv
274.324 554.246 274.391 554.262 274.438 554.281 cv
274.484 554.309 274.52 554.332 274.543 554.359 cv
274.563 554.391 274.57 554.426 274.574 554.465 cv
274.574 558.547 li
274.57 558.961 274.602 559.289 274.664 559.535 cv
274.723 559.781 274.813 559.992 274.938 560.164 cv
275.055 560.344 275.211 560.477 275.402 560.57 cv
275.586 560.668 275.805 560.719 276.055 560.715 cv
276.375 560.719 276.695 560.602 277.02 560.371 cv
277.336 560.145 277.676 559.809 278.035 559.363 cv
278.035 554.465 li
278.035 554.426 278.043 554.391 278.063 554.359 cv
278.078 554.332 278.113 554.309 278.168 554.281 cv
278.219 554.262 278.285 554.246 278.367 554.234 cv
278.445 554.23 278.551 554.227 278.684 554.223 cv
278.805 554.227 278.91 554.23 278.996 554.234 cv
279.078 554.246 279.141 554.262 279.188 554.281 cv
279.23 554.309 279.266 554.332 279.293 554.359 cv
279.313 554.391 279.324 554.426 279.328 554.465 cv
cp
f
292.105 561.477 mo
292.102 561.523 292.094 561.559 292.074 561.582 cv
292.051 561.613 292.016 561.637 291.973 561.656 cv
291.922 561.676 291.855 561.687 291.777 561.703 cv
291.691 561.711 291.59 561.719 291.465 561.719 cv
291.332 561.719 291.223 561.711 291.145 561.703 cv
291.059 561.687 290.992 561.676 290.945 561.656 cv
290.891 561.637 290.855 561.613 290.84 561.582 cv
290.816 561.559 290.809 561.523 290.809 561.477 cv
290.809 557.215 li
290.809 556.922 290.781 556.652 290.73 556.406 cv
290.676 556.164 290.594 555.953 290.48 555.773 cv
290.367 555.598 290.223 555.461 290.047 555.367 cv
289.867 555.273 289.656 555.227 289.422 555.227 cv
289.125 555.227 288.828 555.344 288.531 555.57 cv
288.227 555.805 287.898 556.137 287.543 556.574 cv
287.543 561.477 li
287.539 561.523 287.527 561.559 287.512 561.582 cv
287.488 561.613 287.457 561.637 287.41 561.656 cv
287.359 561.676 287.293 561.687 287.211 561.703 cv
287.125 561.711 287.02 561.719 286.898 561.719 cv
286.777 561.719 286.676 561.711 286.59 561.703 cv
286.504 561.687 286.434 561.676 286.387 561.656 cv
286.332 561.637 286.301 561.613 286.285 561.582 cv
286.266 561.559 286.254 561.523 286.258 561.477 cv
286.258 557.215 li
286.254 556.922 286.227 556.652 286.172 556.406 cv
286.113 556.164 286.027 555.953 285.914 555.773 cv
285.801 555.598 285.656 555.461 285.484 555.367 cv
285.305 555.273 285.098 555.227 284.863 555.227 cv
284.563 555.227 284.266 555.344 283.965 555.57 cv
283.664 555.805 283.336 556.137 282.984 556.574 cv
282.984 561.477 li
282.98 561.523 282.969 561.559 282.953 561.582 cv
282.93 561.613 282.898 561.637 282.852 561.656 cv
282.805 561.676 282.738 561.687 282.66 561.703 cv
282.574 561.711 282.469 561.719 282.34 561.719 cv
282.211 561.719 282.105 561.711 282.027 561.703 cv
281.941 561.687 281.875 561.676 281.828 561.656 cv
281.773 561.637 281.742 561.613 281.727 561.582 cv
281.707 561.559 281.695 561.523 281.699 561.477 cv
281.699 554.465 li
281.695 554.426 281.703 554.391 281.723 554.359 cv
281.734 554.332 281.766 554.309 281.816 554.281 cv
281.859 554.262 281.922 554.246 281.996 554.234 cv
282.066 554.23 282.16 554.227 282.285 554.223 cv
282.395 554.227 282.492 554.23 282.57 554.234 cv
282.645 554.246 282.703 554.262 282.746 554.281 cv
282.785 554.309 282.813 554.332 282.832 554.359 cv
282.848 554.391 282.855 554.426 282.859 554.465 cv
282.859 555.391 li
283.25 554.949 283.633 554.629 284.008 554.422 cv
284.375 554.219 284.754 554.113 285.137 554.113 cv
285.426 554.113 285.684 554.148 285.918 554.215 cv
286.145 554.285 286.352 554.379 286.531 554.5 cv
286.707 554.621 286.855 554.766 286.984 554.934 cv
287.105 555.105 287.211 555.297 287.297 555.5 cv
287.527 555.25 287.75 555.035 287.961 554.855 cv
288.172 554.684 288.375 554.539 288.57 554.426 cv
288.766 554.32 288.953 554.242 289.137 554.187 cv
289.32 554.141 289.508 554.113 289.695 554.113 cv
290.148 554.113 290.527 554.195 290.832 554.352 cv
291.137 554.516 291.383 554.727 291.578 554.988 cv
291.766 555.254 291.902 555.562 291.984 555.918 cv
292.063 556.273 292.102 556.648 292.105 557.043 cv
cp
f
300.906 557.875 mo
300.902 558.484 300.836 559.035 300.707 559.52 cv
300.57 560.008 300.375 560.422 300.121 560.762 cv
299.863 561.105 299.547 561.367 299.176 561.547 cv
298.801 561.73 298.375 561.816 297.891 561.82 cv
297.664 561.816 297.457 561.797 297.27 561.754 cv
297.082 561.707 296.895 561.637 296.715 561.539 cv
296.527 561.441 296.348 561.316 296.168 561.164 cv
295.984 561.016 295.793 560.836 295.594 560.621 cv
295.594 561.477 li
295.594 561.523 295.582 561.559 295.563 561.586 cv
295.539 561.621 295.504 561.645 295.461 561.66 cv
295.41 561.676 295.352 561.687 295.285 561.703 cv
295.211 561.711 295.121 561.719 295.016 561.719 cv
294.906 561.719 294.82 561.711 294.75 561.703 cv
294.676 561.687 294.613 561.676 294.57 561.66 cv
294.52 561.645 294.488 561.621 294.477 561.586 cv
294.457 561.559 294.449 561.523 294.453 561.477 cv
294.453 551.066 li
294.449 551.027 294.461 550.992 294.48 550.957 cv
294.496 550.93 294.527 550.902 294.582 550.879 cv
294.629 550.859 294.695 550.844 294.781 550.832 cv
294.859 550.824 294.965 550.82 295.094 550.816 cv
295.223 550.82 295.328 550.824 295.414 550.832 cv
295.492 550.844 295.559 550.859 295.605 550.879 cv
295.652 550.902 295.684 550.93 295.707 550.957 cv
295.723 550.992 295.734 551.027 295.738 551.066 cv
295.738 555.266 li
295.945 555.055 296.148 554.875 296.344 554.73 cv
296.539 554.586 296.727 554.469 296.914 554.375 cv
297.098 554.289 297.285 554.223 297.477 554.176 cv
297.66 554.137 297.859 554.113 298.07 554.113 cv
298.574 554.113 299.008 554.215 299.375 554.418 cv
299.734 554.621 300.027 554.895 300.254 555.23 cv
300.477 555.574 300.645 555.973 300.75 556.43 cv
300.852 556.887 300.902 557.367 300.906 557.875 cv
cp
299.574 558.023 mo
299.57 557.668 299.543 557.32 299.492 556.98 cv
299.434 556.645 299.34 556.348 299.203 556.086 cv
299.066 555.828 298.887 555.617 298.664 555.457 cv
298.438 555.301 298.156 555.223 297.824 555.219 cv
297.656 555.223 297.492 555.246 297.332 555.289 cv
297.168 555.34 297.004 555.418 296.836 555.523 cv
296.668 555.637 296.492 555.777 296.316 555.945 cv
296.133 556.121 295.941 556.336 295.738 556.59 cv
295.738 559.387 li
296.094 559.82 296.434 560.152 296.758 560.375 cv
297.082 560.605 297.418 560.719 297.77 560.715 cv
298.09 560.719 298.367 560.641 298.602 560.48 cv
298.828 560.328 299.016 560.121 299.16 559.859 cv
299.305 559.605 299.41 559.316 299.477 558.996 cv
299.539 558.68 299.57 558.355 299.574 558.023 cv
cp
f
308.816 557.668 mo
308.813 557.871 308.762 558.012 308.664 558.098 cv
308.559 558.184 308.441 558.227 308.316 558.227 cv
303.699 558.227 li
303.695 558.617 303.734 558.969 303.816 559.281 cv
303.891 559.594 304.023 559.863 304.207 560.082 cv
304.387 560.309 304.621 560.48 304.918 560.598 cv
305.207 560.723 305.566 560.781 305.992 560.777 cv
306.324 560.781 306.621 560.754 306.883 560.695 cv
307.145 560.645 307.371 560.582 307.563 560.512 cv
307.75 560.445 307.906 560.387 308.031 560.328 cv
308.152 560.277 308.246 560.25 308.309 560.246 cv
308.344 560.25 308.375 560.258 308.406 560.273 cv
308.434 560.293 308.457 560.32 308.477 560.355 cv
308.488 560.395 308.5 560.445 308.512 560.508 cv
308.516 560.574 308.52 560.652 308.523 560.746 cv
308.52 560.816 308.516 560.875 308.516 560.922 cv
308.508 560.969 308.504 561.012 308.496 561.051 cv
308.488 561.09 308.473 561.125 308.457 561.156 cv
308.434 561.187 308.41 561.219 308.387 561.246 cv
308.355 561.277 308.273 561.324 308.133 561.387 cv
307.992 561.453 307.809 561.516 307.586 561.578 cv
307.359 561.641 307.102 561.695 306.809 561.746 cv
306.516 561.793 306.203 561.816 305.871 561.82 cv
305.293 561.816 304.785 561.738 304.355 561.578 cv
303.918 561.418 303.555 561.18 303.262 560.863 cv
302.961 560.547 302.738 560.152 302.59 559.672 cv
302.441 559.195 302.367 558.637 302.367 558 cv
302.367 557.402 302.441 556.863 302.598 556.379 cv
302.75 555.902 302.977 555.492 303.273 555.156 cv
303.566 554.82 303.922 554.562 304.336 554.383 cv
304.75 554.203 305.215 554.113 305.73 554.113 cv
306.281 554.113 306.75 554.203 307.137 554.379 cv
307.523 554.559 307.84 554.797 308.094 555.094 cv
308.34 555.395 308.523 555.746 308.641 556.145 cv
308.754 556.551 308.813 556.98 308.816 557.434 cv
cp
307.523 557.285 mo
307.539 556.609 307.387 556.078 307.07 555.695 cv
306.754 555.312 306.285 555.121 305.668 555.117 cv
305.344 555.121 305.063 555.18 304.824 555.297 cv
304.582 555.418 304.383 555.578 304.223 555.773 cv
304.059 555.973 303.934 556.203 303.848 556.465 cv
303.758 556.727 303.707 557 303.699 557.285 cv
cp
f
314.883 554.922 mo
314.879 555.039 314.879 555.137 314.875 555.211 cv
314.867 555.293 314.855 555.355 314.844 555.395 cv
314.824 555.441 314.805 555.473 314.785 555.496 cv
314.758 555.52 314.727 555.531 314.688 555.531 cv
314.645 555.531 314.594 555.52 314.535 555.496 cv
314.473 555.473 314.402 555.449 314.332 555.426 cv
314.254 555.402 314.172 555.383 314.078 555.359 cv
313.984 555.344 313.883 555.332 313.773 555.328 cv
313.641 555.332 313.512 555.359 313.391 555.406 cv
313.266 555.461 313.137 555.547 313 555.664 cv
312.859 555.789 312.715 555.945 312.566 556.141 cv
312.414 556.336 312.246 556.578 312.066 556.863 cv
312.066 561.477 li
312.063 561.523 312.051 561.559 312.035 561.582 cv
312.012 561.613 311.98 561.637 311.934 561.656 cv
311.887 561.676 311.82 561.687 311.742 561.703 cv
311.656 561.711 311.551 561.719 311.422 561.719 cv
311.293 561.719 311.188 561.711 311.109 561.703 cv
311.023 561.687 310.957 561.676 310.91 561.656 cv
310.855 561.637 310.824 561.613 310.809 561.582 cv
310.789 561.559 310.777 561.523 310.781 561.477 cv
310.781 554.465 li
310.777 554.426 310.785 554.391 310.805 554.359 cv
310.816 554.332 310.848 554.309 310.898 554.281 cv
310.941 554.262 311.004 554.246 311.078 554.234 cv
311.148 554.23 311.242 554.227 311.367 554.223 cv
311.477 554.227 311.574 554.23 311.652 554.234 cv
311.727 554.246 311.785 554.262 311.828 554.281 cv
311.867 554.309 311.895 554.332 311.914 554.359 cv
311.93 554.391 311.938 554.426 311.941 554.465 cv
311.941 555.484 li
312.129 555.203 312.313 554.977 312.484 554.801 cv
312.652 554.625 312.813 554.484 312.965 554.383 cv
313.113 554.281 313.262 554.211 313.41 554.172 cv
313.559 554.133 313.707 554.113 313.859 554.113 cv
313.926 554.113 314.004 554.117 314.09 554.125 cv
314.176 554.133 314.266 554.148 314.359 554.168 cv
314.453 554.191 314.535 554.215 314.613 554.238 cv
314.684 554.266 314.738 554.293 314.773 554.316 cv
314.801 554.348 314.82 554.371 314.836 554.391 cv
314.844 554.418 314.855 554.449 314.863 554.48 cv
314.871 554.52 314.875 554.57 314.879 554.641 cv
314.879 554.711 314.879 554.805 314.883 554.922 cv
cp
f
326.641 557.891 mo
326.637 558.469 326.563 558.996 326.414 559.473 cv
326.262 559.957 326.035 560.371 325.738 560.715 cv
325.438 561.066 325.063 561.336 324.617 561.527 cv
324.164 561.723 323.645 561.816 323.055 561.82 cv
322.477 561.816 321.973 561.734 321.547 561.562 cv
321.117 561.395 320.762 561.145 320.477 560.816 cv
320.188 560.488 319.973 560.094 319.836 559.625 cv
319.695 559.16 319.629 558.629 319.629 558.031 cv
319.629 557.465 319.699 556.937 319.848 556.457 cv
319.992 555.977 320.219 555.562 320.52 555.211 cv
320.816 554.863 321.188 554.594 321.637 554.402 cv
322.082 554.211 322.605 554.113 323.203 554.113 cv
323.781 554.113 324.281 554.199 324.711 554.371 cv
325.137 554.543 325.496 554.793 325.781 555.121 cv
326.066 555.449 326.281 555.848 326.426 556.312 cv
326.566 556.781 326.637 557.309 326.641 557.891 cv
cp
325.309 557.977 mo
325.305 557.602 325.27 557.242 325.203 556.902 cv
325.129 556.566 325.012 556.273 324.852 556.016 cv
324.688 555.766 324.469 555.562 324.191 555.41 cv
323.91 555.266 323.563 555.191 323.152 555.187 cv
322.766 555.191 322.438 555.258 322.164 555.391 cv
321.887 555.527 321.66 555.719 321.484 555.965 cv
321.305 556.211 321.172 556.504 321.09 556.84 cv
321 557.18 320.957 557.547 320.961 557.945 cv
320.957 558.332 320.992 558.695 321.066 559.031 cv
321.133 559.371 321.25 559.664 321.418 559.914 cv
321.582 560.168 321.805 560.371 322.082 560.516 cv
322.359 560.668 322.707 560.742 323.121 560.738 cv
323.496 560.742 323.824 560.672 324.105 560.535 cv
324.383 560.402 324.609 560.215 324.789 559.965 cv
324.965 559.723 325.094 559.43 325.18 559.094 cv
325.262 558.758 325.305 558.387 325.309 557.977 cv
cp
f
332.371 551.578 mo
332.367 551.68 332.363 551.758 332.355 551.816 cv
332.344 551.879 332.332 551.93 332.32 551.961 cv
332.305 552 332.289 552.023 332.27 552.035 cv
332.246 552.051 332.219 552.059 332.191 552.055 cv
332.152 552.059 332.105 552.047 332.055 552.02 cv
331.996 552 331.93 551.973 331.855 551.941 cv
331.773 551.914 331.684 551.887 331.578 551.863 cv
331.469 551.84 331.344 551.828 331.211 551.828 cv
331.016 551.828 330.852 551.859 330.719 551.922 cv
330.578 551.984 330.469 552.082 330.391 552.215 cv
330.305 552.348 330.246 552.52 330.211 552.73 cv
330.172 552.941 330.152 553.199 330.156 553.496 cv
330.156 554.262 li
331.723 554.262 li
331.762 554.266 331.797 554.273 331.828 554.289 cv
331.855 554.309 331.883 554.34 331.906 554.383 cv
331.93 554.43 331.945 554.488 331.961 554.551 cv
331.969 554.621 331.977 554.703 331.98 554.797 cv
331.977 554.988 331.953 555.121 331.91 555.203 cv
331.859 555.289 331.797 555.332 331.723 555.328 cv
330.156 555.328 li
330.156 561.477 li
330.152 561.523 330.145 561.559 330.125 561.582 cv
330.102 561.613 330.066 561.637 330.02 561.656 cv
329.969 561.676 329.902 561.687 329.82 561.703 cv
329.734 561.711 329.629 561.719 329.512 561.719 cv
329.383 561.719 329.281 561.711 329.199 561.703 cv
329.113 561.687 329.047 561.676 329 561.656 cv
328.949 561.637 328.914 561.613 328.895 561.582 cv
328.871 561.559 328.859 561.523 328.863 561.477 cv
328.863 555.328 li
327.875 555.328 li
327.789 555.332 327.727 555.289 327.688 555.203 cv
327.645 555.121 327.621 554.988 327.625 554.797 cv
327.621 554.703 327.629 554.621 327.641 554.551 cv
327.648 554.488 327.664 554.43 327.688 554.383 cv
327.707 554.34 327.73 554.309 327.766 554.289 cv
327.793 554.273 327.832 554.266 327.875 554.262 cv
328.863 554.262 li
328.863 553.535 li
328.859 553.051 328.906 552.633 329 552.277 cv
329.09 551.93 329.227 551.641 329.414 551.418 cv
329.598 551.195 329.832 551.031 330.121 550.922 cv
330.402 550.816 330.738 550.762 331.125 550.762 cv
331.301 550.762 331.477 550.781 331.652 550.812 cv
331.82 550.852 331.953 550.887 332.051 550.922 cv
332.141 550.965 332.203 551 332.238 551.027 cv
332.266 551.062 332.293 551.102 332.316 551.148 cv
332.336 551.199 332.348 551.262 332.359 551.328 cv
332.363 551.402 332.367 551.484 332.371 551.578 cv
cp
f
342.57 558.844 mo
342.566 559.316 342.48 559.738 342.309 560.105 cv
342.133 560.48 341.891 560.793 341.582 561.047 cv
341.273 561.305 340.91 561.496 340.492 561.625 cv
340.07 561.754 339.621 561.816 339.141 561.82 cv
338.801 561.816 338.484 561.789 338.199 561.734 cv
337.91 561.676 337.656 561.609 337.43 561.523 cv
337.203 561.445 337.012 561.359 336.859 561.266 cv
336.703 561.18 336.598 561.102 336.539 561.039 cv
336.48 560.977 336.438 560.898 336.41 560.805 cv
336.379 560.711 336.363 560.582 336.367 560.418 cv
336.363 560.305 336.367 560.211 336.383 560.133 cv
336.391 560.059 336.406 559.996 336.43 559.949 cv
336.445 559.902 336.473 559.871 336.508 559.852 cv
336.535 559.836 336.57 559.828 336.613 559.824 cv
336.684 559.828 336.785 559.871 336.922 559.957 cv
337.051 560.047 337.223 560.145 337.434 560.246 cv
337.641 560.355 337.891 560.453 338.184 560.539 cv
338.477 560.633 338.816 560.676 339.203 560.676 cv
339.492 560.676 339.758 560.637 340 560.559 cv
340.238 560.48 340.445 560.371 340.625 560.227 cv
340.797 560.086 340.934 559.91 341.027 559.699 cv
341.121 559.492 341.168 559.258 341.168 558.992 cv
341.168 558.711 341.102 558.465 340.973 558.258 cv
340.84 558.059 340.668 557.883 340.457 557.727 cv
340.242 557.578 340 557.437 339.727 557.305 cv
339.453 557.18 339.172 557.047 338.891 556.914 cv
338.602 556.781 338.324 556.637 338.055 556.473 cv
337.785 556.316 337.543 556.125 337.332 555.906 cv
337.113 555.687 336.941 555.434 336.813 555.137 cv
336.676 554.848 336.609 554.496 336.613 554.082 cv
336.609 553.664 336.688 553.289 336.844 552.957 cv
336.996 552.629 337.207 552.352 337.484 552.125 cv
337.754 551.906 338.078 551.734 338.457 551.617 cv
338.832 551.5 339.242 551.441 339.68 551.441 cv
339.898 551.441 340.121 551.461 340.352 551.5 cv
340.574 551.539 340.785 551.59 340.988 551.652 cv
341.184 551.719 341.363 551.793 341.523 551.871 cv
341.676 551.953 341.777 552.02 341.832 552.066 cv
341.879 552.121 341.914 552.16 341.93 552.184 cv
341.945 552.215 341.957 552.25 341.969 552.293 cv
341.977 552.34 341.984 552.395 341.992 552.453 cv
341.996 552.52 342 552.598 342 552.695 cv
342 552.789 341.996 552.875 341.988 552.945 cv
341.98 553.023 341.969 553.082 341.953 553.129 cv
341.938 553.176 341.914 553.211 341.887 553.234 cv
341.855 553.258 341.824 553.27 341.789 553.27 cv
341.73 553.27 341.641 553.234 341.52 553.164 cv
341.395 553.094 341.242 553.012 341.07 552.918 cv
340.891 552.828 340.684 552.746 340.445 552.668 cv
340.199 552.594 339.93 552.555 339.633 552.555 cv
339.352 552.555 339.105 552.594 338.898 552.668 cv
338.688 552.746 338.516 552.848 338.383 552.969 cv
338.246 553.094 338.145 553.238 338.078 553.41 cv
338.012 553.582 337.98 553.766 337.98 553.957 cv
337.98 554.242 338.043 554.484 338.172 554.684 cv
338.301 554.887 338.473 555.066 338.691 555.219 cv
338.902 555.379 339.148 555.52 339.426 555.648 cv
339.699 555.781 339.98 555.914 340.27 556.043 cv
340.555 556.176 340.836 556.32 341.109 556.477 cv
341.383 556.637 341.629 556.824 341.848 557.039 cv
342.063 557.258 342.234 557.512 342.371 557.805 cv
342.5 558.098 342.566 558.445 342.57 558.844 cv
cp
f
350.336 561.477 mo
350.332 561.523 350.324 561.559 350.309 561.582 cv
350.289 561.613 350.254 561.637 350.211 561.656 cv
350.164 561.676 350.105 561.687 350.031 561.703 cv
349.953 561.711 349.859 561.719 349.754 561.719 cv
349.629 561.719 349.531 561.711 349.461 561.703 cv
349.383 561.687 349.324 561.676 349.281 561.656 cv
349.234 561.637 349.203 561.613 349.191 561.582 cv
349.172 561.559 349.164 561.523 349.168 561.477 cv
349.168 560.551 li
348.766 560.996 348.371 561.316 347.984 561.516 cv
347.59 561.719 347.195 561.816 346.801 561.82 cv
346.328 561.816 345.934 561.742 345.617 561.586 cv
345.297 561.434 345.039 561.223 344.844 560.953 cv
344.641 560.687 344.5 560.375 344.418 560.016 cv
344.328 559.66 344.285 559.227 344.289 558.719 cv
344.289 554.465 li
344.285 554.426 344.293 554.391 344.316 554.359 cv
344.332 554.332 344.367 554.309 344.422 554.281 cv
344.469 554.262 344.539 554.246 344.625 554.234 cv
344.707 554.23 344.809 554.227 344.938 554.223 cv
345.059 554.227 345.164 554.23 345.25 554.234 cv
345.332 554.246 345.398 554.262 345.445 554.281 cv
345.492 554.309 345.527 554.332 345.551 554.359 cv
345.57 554.391 345.578 554.426 345.582 554.465 cv
345.582 558.547 li
345.578 558.961 345.609 559.289 345.672 559.535 cv
345.73 559.781 345.82 559.992 345.945 560.164 cv
346.063 560.344 346.219 560.477 346.41 560.57 cv
346.594 560.668 346.813 560.719 347.063 560.715 cv
347.383 560.719 347.703 560.602 348.027 560.371 cv
348.344 560.145 348.684 559.809 349.043 559.363 cv
349.043 554.465 li
349.043 554.426 349.051 554.391 349.07 554.359 cv
349.086 554.332 349.121 554.309 349.176 554.281 cv
349.227 554.262 349.293 554.246 349.375 554.234 cv
349.453 554.23 349.559 554.227 349.691 554.223 cv
349.813 554.227 349.918 554.23 350.004 554.234 cv
350.086 554.246 350.148 554.262 350.195 554.281 cv
350.238 554.309 350.273 554.332 350.301 554.359 cv
350.32 554.391 350.332 554.426 350.336 554.465 cv
cp
f
359.191 557.875 mo
359.188 558.484 359.121 559.035 358.992 559.52 cv
358.855 560.008 358.66 560.422 358.406 560.762 cv
358.148 561.105 357.832 561.367 357.461 561.547 cv
357.086 561.73 356.66 561.816 356.176 561.82 cv
355.949 561.816 355.742 561.797 355.555 561.754 cv
355.367 561.707 355.18 561.637 355 561.539 cv
354.813 561.441 354.633 561.316 354.453 561.164 cv
354.27 561.016 354.078 560.836 353.879 560.621 cv
353.879 561.477 li
353.879 561.523 353.867 561.559 353.848 561.586 cv
353.824 561.621 353.789 561.645 353.746 561.66 cv
353.695 561.676 353.637 561.687 353.57 561.703 cv
353.496 561.711 353.406 561.719 353.301 561.719 cv
353.191 561.719 353.105 561.711 353.035 561.703 cv
352.961 561.687 352.898 561.676 352.855 561.66 cv
352.805 561.645 352.773 561.621 352.762 561.586 cv
352.742 561.559 352.734 561.523 352.738 561.477 cv
352.738 551.066 li
352.734 551.027 352.746 550.992 352.766 550.957 cv
352.781 550.93 352.813 550.902 352.867 550.879 cv
352.914 550.859 352.98 550.844 353.066 550.832 cv
353.145 550.824 353.25 550.82 353.379 550.816 cv
353.508 550.82 353.613 550.824 353.699 550.832 cv
353.777 550.844 353.844 550.859 353.891 550.879 cv
353.938 550.902 353.969 550.93 353.992 550.957 cv
354.008 550.992 354.02 551.027 354.023 551.066 cv
354.023 555.266 li
354.23 555.055 354.434 554.875 354.629 554.73 cv
354.824 554.586 355.012 554.469 355.199 554.375 cv
355.383 554.289 355.57 554.223 355.762 554.176 cv
355.945 554.137 356.145 554.113 356.355 554.113 cv
356.859 554.113 357.293 554.215 357.66 554.418 cv
358.02 554.621 358.313 554.895 358.539 555.23 cv
358.762 555.574 358.93 555.973 359.035 556.43 cv
359.137 556.887 359.188 557.367 359.191 557.875 cv
cp
357.859 558.023 mo
357.855 557.668 357.828 557.32 357.777 556.98 cv
357.719 556.645 357.625 556.348 357.488 556.086 cv
357.352 555.828 357.172 555.617 356.949 555.457 cv
356.723 555.301 356.441 555.223 356.109 555.219 cv
355.941 555.223 355.777 555.246 355.617 555.289 cv
355.453 555.34 355.289 555.418 355.121 555.523 cv
354.953 555.637 354.777 555.777 354.602 555.945 cv
354.418 556.121 354.227 556.336 354.023 556.59 cv
354.023 559.387 li
354.379 559.82 354.719 560.152 355.043 560.375 cv
355.367 560.605 355.703 560.719 356.055 560.715 cv
356.375 560.719 356.652 560.641 356.887 560.48 cv
357.113 560.328 357.301 560.121 357.445 559.859 cv
357.59 559.605 357.695 559.316 357.762 558.996 cv
357.824 558.68 357.855 558.355 357.859 558.023 cv
cp
f
364.348 557.738 mo
364.348 557.941 364.324 558.078 364.277 558.156 cv
364.23 558.234 364.16 558.273 364.074 558.273 cv
360.816 558.273 li
360.723 558.273 360.656 558.234 360.609 558.152 cv
360.563 558.074 360.539 557.937 360.539 557.738 cv
360.539 557.543 360.563 557.402 360.609 557.324 cv
360.656 557.246 360.723 557.207 360.816 557.207 cv
364.074 557.207 li
364.113 557.207 364.152 557.215 364.188 557.23 cv
364.219 557.246 364.246 557.277 364.273 557.32 cv
364.293 557.367 364.313 557.422 364.328 557.488 cv
364.34 557.559 364.348 557.645 364.348 557.738 cv
cp
f
367.602 561.469 mo
367.598 561.512 367.59 561.547 367.57 561.578 cv
367.547 561.609 367.508 561.637 367.461 561.652 cv
367.406 561.672 367.34 561.684 367.254 561.699 cv
367.168 561.711 367.059 561.719 366.934 561.719 cv
366.805 561.719 366.699 561.711 366.613 561.699 cv
366.523 561.684 366.453 561.672 366.402 561.652 cv
366.348 561.637 366.313 561.609 366.293 561.578 cv
366.27 561.547 366.258 561.512 366.262 561.469 cv
366.262 551.789 li
366.258 551.75 366.27 551.715 366.297 551.68 cv
366.316 551.652 366.355 551.625 366.414 551.605 cv
366.465 551.59 366.535 551.574 366.625 551.559 cv
366.707 551.547 366.809 551.543 366.934 551.539 cv
367.059 551.543 367.168 551.547 367.254 551.559 cv
367.34 551.574 367.406 551.59 367.461 551.605 cv
367.508 551.625 367.547 551.652 367.57 551.68 cv
367.59 551.715 367.598 551.75 367.602 551.789 cv
cp
f
380.586 561.477 mo
380.582 561.523 380.574 561.559 380.555 561.582 cv
380.531 561.613 380.496 561.637 380.453 561.656 cv
380.402 561.676 380.336 561.687 380.258 561.703 cv
380.172 561.711 380.07 561.719 379.945 561.719 cv
379.813 561.719 379.703 561.711 379.625 561.703 cv
379.539 561.687 379.473 561.676 379.426 561.656 cv
379.371 561.637 379.336 561.613 379.32 561.582 cv
379.297 561.559 379.289 561.523 379.289 561.477 cv
379.289 557.215 li
379.289 556.922 379.262 556.652 379.211 556.406 cv
379.156 556.164 379.074 555.953 378.961 555.773 cv
378.848 555.598 378.703 555.461 378.527 555.367 cv
378.348 555.273 378.137 555.227 377.902 555.227 cv
377.605 555.227 377.309 555.344 377.012 555.57 cv
376.707 555.805 376.379 556.137 376.023 556.574 cv
376.023 561.477 li
376.02 561.523 376.008 561.559 375.992 561.582 cv
375.969 561.613 375.938 561.637 375.891 561.656 cv
375.84 561.676 375.773 561.687 375.691 561.703 cv
375.605 561.711 375.5 561.719 375.379 561.719 cv
375.258 561.719 375.156 561.711 375.07 561.703 cv
374.984 561.687 374.914 561.676 374.867 561.656 cv
374.813 561.637 374.781 561.613 374.766 561.582 cv
374.746 561.559 374.734 561.523 374.738 561.477 cv
374.738 557.215 li
374.734 556.922 374.707 556.652 374.652 556.406 cv
374.594 556.164 374.508 555.953 374.395 555.773 cv
374.281 555.598 374.137 555.461 373.965 555.367 cv
373.785 555.273 373.578 555.227 373.344 555.227 cv
373.043 555.227 372.746 555.344 372.445 555.57 cv
372.145 555.805 371.816 556.137 371.465 556.574 cv
371.465 561.477 li
371.461 561.523 371.449 561.559 371.434 561.582 cv
371.41 561.613 371.379 561.637 371.332 561.656 cv
371.285 561.676 371.219 561.687 371.141 561.703 cv
371.055 561.711 370.949 561.719 370.82 561.719 cv
370.691 561.719 370.586 561.711 370.508 561.703 cv
370.422 561.687 370.355 561.676 370.309 561.656 cv
370.254 561.637 370.223 561.613 370.207 561.582 cv
370.188 561.559 370.176 561.523 370.18 561.477 cv
370.18 554.465 li
370.176 554.426 370.184 554.391 370.203 554.359 cv
370.215 554.332 370.246 554.309 370.297 554.281 cv
370.34 554.262 370.402 554.246 370.477 554.234 cv
370.547 554.23 370.641 554.227 370.766 554.223 cv
370.875 554.227 370.973 554.23 371.051 554.234 cv
371.125 554.246 371.184 554.262 371.227 554.281 cv
371.266 554.309 371.293 554.332 371.313 554.359 cv
371.328 554.391 371.336 554.426 371.34 554.465 cv
371.34 555.391 li
371.73 554.949 372.113 554.629 372.488 554.422 cv
372.855 554.219 373.234 554.113 373.617 554.113 cv
373.906 554.113 374.164 554.148 374.398 554.215 cv
374.625 554.285 374.832 554.379 375.012 554.5 cv
375.188 554.621 375.336 554.766 375.465 554.934 cv
375.586 555.105 375.691 555.297 375.777 555.5 cv
376.008 555.25 376.23 555.035 376.441 554.855 cv
376.652 554.684 376.855 554.539 377.051 554.426 cv
377.246 554.32 377.434 554.242 377.617 554.187 cv
377.801 554.141 377.988 554.113 378.176 554.113 cv
378.629 554.113 379.008 554.195 379.313 554.352 cv
379.617 554.516 379.863 554.727 380.059 554.988 cv
380.246 555.254 380.383 555.562 380.465 555.918 cv
380.543 556.273 380.582 556.648 380.586 557.043 cv
cp
f
388.219 561.484 mo
388.215 561.547 388.195 561.594 388.156 561.625 cv
388.113 561.656 388.055 561.68 387.984 561.695 cv
387.906 561.711 387.801 561.719 387.664 561.719 cv
387.527 561.719 387.418 561.711 387.34 561.695 cv
387.254 561.68 387.195 561.656 387.164 561.625 cv
387.125 561.594 387.109 561.547 387.113 561.484 cv
387.113 560.785 li
386.805 561.113 386.461 561.367 386.086 561.547 cv
385.707 561.73 385.309 561.816 384.891 561.82 cv
384.516 561.816 384.184 561.77 383.887 561.676 cv
383.59 561.578 383.336 561.441 383.125 561.258 cv
382.914 561.078 382.75 560.855 382.633 560.59 cv
382.516 560.328 382.457 560.027 382.461 559.684 cv
382.457 559.293 382.535 558.949 382.699 558.656 cv
382.855 558.367 383.09 558.125 383.395 557.934 cv
383.695 557.742 384.063 557.598 384.5 557.5 cv
384.934 557.406 385.426 557.359 385.973 557.355 cv
386.941 557.355 li
386.941 556.809 li
386.938 556.539 386.91 556.301 386.855 556.094 cv
386.797 555.887 386.703 555.715 386.578 555.574 cv
386.445 555.437 386.281 555.332 386.082 555.262 cv
385.875 555.191 385.625 555.156 385.336 555.156 cv
385.016 555.156 384.73 555.195 384.48 555.27 cv
384.223 555.348 384.004 555.43 383.816 555.52 cv
383.629 555.613 383.469 555.699 383.344 555.77 cv
383.211 555.848 383.117 555.883 383.059 555.883 cv
383.016 555.883 382.98 555.875 382.949 555.852 cv
382.918 555.836 382.891 555.805 382.867 555.758 cv
382.844 555.719 382.824 555.664 382.816 555.598 cv
382.801 555.535 382.797 555.465 382.801 555.383 cv
382.797 555.258 382.805 555.152 382.828 555.074 cv
382.844 555 382.891 554.93 382.961 554.859 cv
383.031 554.793 383.152 554.715 383.324 554.625 cv
383.496 554.535 383.691 554.453 383.914 554.375 cv
384.137 554.305 384.383 554.242 384.648 554.187 cv
384.914 554.141 385.18 554.113 385.453 554.113 cv
385.953 554.113 386.383 554.172 386.734 554.285 cv
387.086 554.402 387.371 554.57 387.594 554.789 cv
387.809 555.012 387.969 555.285 388.07 555.609 cv
388.168 555.941 388.215 556.324 388.219 556.754 cv
cp
386.941 558.281 mo
385.84 558.281 li
385.484 558.285 385.18 558.316 384.922 558.371 cv
384.66 558.434 384.445 558.52 384.273 558.637 cv
384.102 558.754 383.977 558.895 383.898 559.059 cv
383.816 559.223 383.773 559.41 383.777 559.621 cv
383.773 559.988 383.891 560.281 384.121 560.492 cv
384.352 560.711 384.676 560.816 385.094 560.816 cv
385.43 560.816 385.742 560.73 386.031 560.559 cv
386.32 560.387 386.621 560.125 386.941 559.77 cv
cp
f
396.438 554.781 mo
396.434 554.965 396.41 555.098 396.363 555.176 cv
396.313 555.258 396.25 555.297 396.176 555.297 cv
395.168 555.297 li
395.348 555.484 395.477 555.691 395.551 555.918 cv
395.621 556.145 395.656 556.379 395.66 556.621 cv
395.656 557.027 395.59 557.387 395.465 557.699 cv
395.332 558.012 395.148 558.277 394.906 558.488 cv
394.664 558.707 394.375 558.871 394.047 558.984 cv
393.711 559.102 393.344 559.16 392.941 559.156 cv
392.652 559.16 392.379 559.121 392.125 559.043 cv
391.863 558.969 391.668 558.875 391.531 558.758 cv
391.438 558.855 391.359 558.961 391.301 559.078 cv
391.238 559.199 391.207 559.336 391.211 559.488 cv
391.207 559.672 391.293 559.824 391.465 559.941 cv
391.633 560.066 391.855 560.129 392.137 560.137 cv
393.969 560.215 li
394.316 560.227 394.633 560.273 394.926 560.359 cv
395.215 560.445 395.469 560.57 395.684 560.727 cv
395.895 560.887 396.063 561.078 396.184 561.309 cv
396.301 561.543 396.359 561.812 396.363 562.117 cv
396.359 562.437 396.293 562.742 396.16 563.035 cv
396.023 563.324 395.816 563.578 395.539 563.801 cv
395.258 564.02 394.902 564.195 394.473 564.324 cv
394.043 564.449 393.535 564.512 392.949 564.516 cv
392.379 564.512 391.895 564.465 391.5 564.371 cv
391.102 564.273 390.777 564.141 390.523 563.977 cv
390.27 563.809 390.086 563.613 389.973 563.383 cv
389.855 563.148 389.797 562.895 389.801 562.629 cv
389.797 562.457 389.816 562.293 389.863 562.133 cv
389.902 561.969 389.965 561.816 390.051 561.672 cv
390.133 561.527 390.242 561.391 390.371 561.254 cv
390.496 561.125 390.641 560.992 390.813 560.863 cv
390.555 560.734 390.367 560.57 390.246 560.371 cv
390.125 560.176 390.066 559.965 390.066 559.73 cv
390.066 559.418 390.129 559.133 390.258 558.883 cv
390.387 558.633 390.547 558.41 390.742 558.211 cv
390.578 558.02 390.453 557.805 390.359 557.562 cv
390.266 557.324 390.219 557.031 390.219 556.684 cv
390.219 556.289 390.285 555.93 390.422 555.609 cv
390.555 555.293 390.742 555.027 390.984 554.809 cv
391.223 554.594 391.508 554.426 391.844 554.305 cv
392.176 554.191 392.543 554.133 392.941 554.129 cv
393.152 554.133 393.352 554.145 393.535 554.164 cv
393.719 554.191 393.891 554.223 394.055 554.262 cv
396.176 554.262 li
396.262 554.266 396.328 554.309 396.371 554.391 cv
396.414 554.48 396.434 554.609 396.438 554.781 cv
cp
394.43 556.629 mo
394.426 556.156 394.293 555.785 394.035 555.512 cv
393.77 555.246 393.398 555.109 392.918 555.109 cv
392.664 555.109 392.445 555.152 392.266 555.234 cv
392.078 555.32 391.926 555.434 391.805 555.578 cv
391.684 555.727 391.594 555.895 391.535 556.082 cv
391.473 556.27 391.441 556.469 391.445 556.676 cv
391.441 557.141 391.574 557.504 391.836 557.77 cv
392.098 558.035 392.465 558.168 392.941 558.164 cv
393.191 558.168 393.41 558.129 393.602 558.043 cv
393.785 557.965 393.941 557.852 394.066 557.711 cv
394.188 557.57 394.277 557.406 394.34 557.215 cv
394.395 557.031 394.426 556.836 394.43 556.629 cv
cp
395.074 562.187 mo
395.07 561.883 394.945 561.652 394.703 561.488 cv
394.453 561.328 394.121 561.238 393.703 561.227 cv
391.887 561.164 li
391.719 561.297 391.582 561.422 391.48 561.535 cv
391.371 561.652 391.289 561.762 391.227 561.871 cv
391.164 561.977 391.121 562.082 391.098 562.187 cv
391.074 562.289 391.063 562.395 391.063 562.504 cv
391.063 562.84 391.23 563.094 391.574 563.273 cv
391.914 563.445 392.395 563.535 393.012 563.535 cv
393.398 563.535 393.723 563.496 393.988 563.422 cv
394.246 563.344 394.457 563.242 394.621 563.121 cv
394.777 562.992 394.895 562.852 394.969 562.691 cv
395.035 562.531 395.07 562.363 395.074 562.187 cv
cp
f
404 557.668 mo
403.996 557.871 403.945 558.012 403.848 558.098 cv
403.742 558.184 403.625 558.227 403.5 558.227 cv
398.883 558.227 li
398.879 558.617 398.918 558.969 399 559.281 cv
399.074 559.594 399.207 559.863 399.391 560.082 cv
399.57 560.309 399.805 560.48 400.102 560.598 cv
400.391 560.723 400.75 560.781 401.176 560.777 cv
401.508 560.781 401.805 560.754 402.066 560.695 cv
402.328 560.645 402.555 560.582 402.746 560.512 cv
402.934 560.445 403.09 560.387 403.215 560.328 cv
403.336 560.277 403.43 560.25 403.492 560.246 cv
403.527 560.25 403.559 560.258 403.59 560.273 cv
403.617 560.293 403.641 560.32 403.66 560.355 cv
403.672 560.395 403.684 560.445 403.695 560.508 cv
403.699 560.574 403.703 560.652 403.707 560.746 cv
403.703 560.816 403.699 560.875 403.699 560.922 cv
403.691 560.969 403.688 561.012 403.68 561.051 cv
403.672 561.09 403.656 561.125 403.641 561.156 cv
403.617 561.187 403.594 561.219 403.57 561.246 cv
403.539 561.277 403.457 561.324 403.316 561.387 cv
403.176 561.453 402.992 561.516 402.77 561.578 cv
402.543 561.641 402.285 561.695 401.992 561.746 cv
401.699 561.793 401.387 561.816 401.055 561.82 cv
400.477 561.816 399.969 561.738 399.539 561.578 cv
399.102 561.418 398.738 561.18 398.445 560.863 cv
398.145 560.547 397.922 560.152 397.773 559.672 cv
397.625 559.195 397.551 558.637 397.551 558 cv
397.551 557.402 397.625 556.863 397.781 556.379 cv
397.934 555.902 398.16 555.492 398.457 555.156 cv
398.75 554.82 399.105 554.562 399.52 554.383 cv
399.934 554.203 400.398 554.113 400.914 554.113 cv
401.465 554.113 401.934 554.203 402.32 554.379 cv
402.707 554.559 403.023 554.797 403.277 555.094 cv
403.523 555.395 403.707 555.746 403.824 556.145 cv
403.938 556.551 403.996 556.98 404 557.434 cv
cp
402.707 557.285 mo
402.723 556.609 402.57 556.078 402.254 555.695 cv
401.938 555.312 401.469 555.121 400.852 555.117 cv
400.527 555.121 400.246 555.18 400.008 555.297 cv
399.766 555.418 399.566 555.578 399.406 555.773 cv
399.242 555.973 399.117 556.203 399.031 556.465 cv
398.941 556.727 398.891 557 398.883 557.285 cv
cp
f
410.367 559.566 mo
410.363 559.93 410.297 560.25 410.168 560.527 cv
410.035 560.809 409.848 561.043 409.605 561.234 cv
409.359 561.43 409.066 561.574 408.73 561.672 cv
408.391 561.77 408.02 561.816 407.617 561.82 cv
407.363 561.816 407.125 561.797 406.902 561.762 cv
406.676 561.719 406.477 561.672 406.297 561.613 cv
406.117 561.555 405.965 561.492 405.84 561.426 cv
405.715 561.363 405.621 561.305 405.566 561.25 cv
405.508 561.199 405.469 561.129 405.445 561.031 cv
405.418 560.941 405.406 560.812 405.406 560.652 cv
405.406 560.555 405.41 560.473 405.422 560.402 cv
405.43 560.336 405.441 560.281 405.461 560.238 cv
405.473 560.199 405.496 560.168 405.523 560.148 cv
405.551 560.133 405.582 560.125 405.621 560.121 cv
405.676 560.125 405.762 560.16 405.875 560.227 cv
405.984 560.301 406.121 560.379 406.289 560.457 cv
406.449 560.543 406.641 560.617 406.867 560.687 cv
407.086 560.758 407.344 560.793 407.641 560.793 cv
407.855 560.793 408.055 560.77 408.234 560.723 cv
408.41 560.676 408.563 560.609 408.691 560.516 cv
408.82 560.43 408.922 560.312 408.992 560.168 cv
409.063 560.031 409.098 559.863 409.098 559.668 cv
409.098 559.473 409.047 559.309 408.945 559.172 cv
408.844 559.039 408.707 558.918 408.543 558.812 cv
408.375 558.711 408.191 558.621 407.984 558.535 cv
407.773 558.457 407.559 558.371 407.34 558.281 cv
407.121 558.195 406.906 558.094 406.695 557.98 cv
406.484 557.871 406.293 557.738 406.129 557.574 cv
405.957 557.418 405.824 557.223 405.727 556.996 cv
405.621 556.773 405.57 556.508 405.574 556.195 cv
405.57 555.922 405.625 555.656 405.734 555.402 cv
405.84 555.152 406 554.934 406.215 554.742 cv
406.426 554.555 406.691 554.402 407.012 554.285 cv
407.332 554.172 407.703 554.113 408.133 554.113 cv
408.316 554.113 408.504 554.129 408.691 554.16 cv
408.875 554.191 409.043 554.23 409.199 554.277 cv
409.348 554.324 409.477 554.375 409.586 554.43 cv
409.688 554.484 409.77 554.535 409.828 554.574 cv
409.879 554.621 409.914 554.656 409.938 554.684 cv
409.953 554.715 409.969 554.75 409.977 554.785 cv
409.984 554.828 409.992 554.875 410 554.93 cv
410.008 554.988 410.012 555.059 410.012 555.141 cv
410.012 555.23 410.008 555.309 410 555.371 cv
409.992 555.441 409.977 555.492 409.961 555.531 cv
409.938 555.574 409.918 555.605 409.895 555.621 cv
409.867 555.641 409.836 555.648 409.809 555.648 cv
409.758 555.648 409.691 555.621 409.605 555.562 cv
409.516 555.508 409.402 555.445 409.262 555.379 cv
409.121 555.316 408.953 555.258 408.766 555.195 cv
408.574 555.141 408.359 555.109 408.117 555.109 cv
407.895 555.109 407.703 555.137 407.539 555.184 cv
407.371 555.238 407.234 555.309 407.129 555.395 cv
407.023 555.488 406.941 555.594 406.891 555.719 cv
406.832 555.844 406.805 555.98 406.809 556.125 cv
406.805 556.328 406.855 556.496 406.961 556.633 cv
407.063 556.773 407.199 556.895 407.367 556.996 cv
407.531 557.102 407.723 557.195 407.938 557.277 cv
408.148 557.363 408.363 557.449 408.586 557.535 cv
408.805 557.625 409.023 557.727 409.242 557.832 cv
409.457 557.941 409.648 558.07 409.816 558.227 cv
409.98 558.383 410.113 558.57 410.215 558.789 cv
410.313 559.008 410.363 559.27 410.367 559.566 cv
cp
f
276.285 15.98 mo
276.281 16.133 276.277 16.258 276.266 16.355 cv
276.25 16.461 276.23 16.543 276.207 16.602 cv
276.184 16.668 276.152 16.715 276.113 16.738 cv
276.074 16.77 276.031 16.781 275.984 16.781 cv
270.918 16.781 li
270.742 16.781 270.598 16.73 270.484 16.629 cv
270.363 16.527 270.305 16.363 270.309 16.133 cv
270.309 7.34399 li
270.305 7.117 270.363 6.953 270.484 6.84802 cv
270.598 6.75 270.742 6.69897 270.918 6.69501 cv
275.953 6.69501 li
275.996 6.69897 276.039 6.711 276.078 6.73401 cv
276.113 6.76202 276.145 6.80902 276.172 6.87097 cv
276.195 6.94098 276.211 7.02301 276.227 7.12097 cv
276.234 7.22699 276.242 7.35498 276.246 7.508 cv
276.242 7.65601 276.234 7.78101 276.227 7.87903 cv
276.211 7.98401 276.195 8.06598 276.172 8.125 cv
276.145 8.18701 276.113 8.22998 276.078 8.258 cv
276.039 8.289 275.996 8.30499 275.953 8.30103 cv
272.352 8.30103 li
272.352 10.766 li
275.398 10.766 li
275.445 10.77 275.488 10.785 275.527 10.809 cv
275.566 10.84 275.598 10.883 275.625 10.941 cv
275.648 11.004 275.668 11.086 275.684 11.184 cv
275.695 11.285 275.703 11.406 275.703 11.551 cv
275.703 11.703 275.695 11.828 275.684 11.926 cv
275.668 12.027 275.648 12.105 275.625 12.164 cv
275.598 12.227 275.566 12.27 275.527 12.293 cv
275.488 12.32 275.445 12.336 275.398 12.332 cv
272.352 12.332 li
272.352 15.176 li
275.984 15.176 li
276.031 15.176 276.074 15.191 276.113 15.219 cv
276.152 15.25 276.184 15.297 276.207 15.355 cv
276.23 15.422 276.25 15.504 276.266 15.602 cv
276.277 15.707 276.281 15.832 276.285 15.98 cv
cp
f
284.621 16.516 mo
284.617 16.57 284.602 16.613 284.574 16.652 cv
284.539 16.691 284.488 16.727 284.418 16.75 cv
284.344 16.777 284.242 16.793 284.117 16.809 cv
283.988 16.82 283.832 16.828 283.648 16.828 cv
283.453 16.828 283.293 16.82 283.168 16.809 cv
283.039 16.793 282.938 16.777 282.867 16.75 cv
282.789 16.727 282.738 16.691 282.711 16.652 cv
282.676 16.613 282.66 16.57 282.664 16.516 cv
282.664 12.551 li
282.66 12.215 282.637 11.949 282.59 11.754 cv
282.539 11.562 282.465 11.398 282.375 11.262 cv
282.281 11.125 282.164 11.02 282.016 10.941 cv
281.867 10.867 281.691 10.828 281.496 10.828 cv
281.242 10.828 280.992 10.922 280.738 11.102 cv
280.484 11.285 280.219 11.547 279.945 11.895 cv
279.945 16.516 li
279.941 16.57 279.926 16.613 279.898 16.652 cv
279.863 16.691 279.809 16.727 279.738 16.75 cv
279.66 16.777 279.563 16.793 279.438 16.809 cv
279.313 16.82 279.152 16.828 278.965 16.828 cv
278.77 16.828 278.613 16.82 278.488 16.809 cv
278.363 16.793 278.262 16.777 278.188 16.75 cv
278.109 16.727 278.055 16.691 278.027 16.652 cv
277.992 16.613 277.977 16.57 277.98 16.516 cv
277.98 9.56598 li
277.977 9.52002 277.992 9.47302 278.02 9.42999 cv
278.043 9.39502 278.09 9.36298 278.16 9.33197 cv
278.227 9.30902 278.313 9.289 278.422 9.27301 cv
278.527 9.26599 278.66 9.258 278.824 9.25403 cv
278.988 9.258 279.125 9.26599 279.234 9.27301 cv
279.34 9.289 279.426 9.30902 279.488 9.33197 cv
279.547 9.36298 279.59 9.39502 279.617 9.42999 cv
279.641 9.47302 279.652 9.52002 279.656 9.56598 cv
279.656 10.367 li
280.039 9.95697 280.43 9.64502 280.828 9.43402 cv
281.223 9.22699 281.641 9.125 282.074 9.12097 cv
282.543 9.125 282.941 9.203 283.27 9.35498 cv
283.594 9.51599 283.855 9.72699 284.055 9.992 cv
284.254 10.262 284.398 10.574 284.488 10.93 cv
284.574 11.289 284.617 11.719 284.621 12.223 cv
cp
f
292.973 12.84 mo
292.969 13.078 292.918 13.254 292.813 13.367 cv
292.703 13.484 292.555 13.543 292.375 13.539 cv
288.141 13.539 li
288.137 13.84 288.172 14.109 288.246 14.348 cv
288.313 14.59 288.426 14.793 288.582 14.961 cv
288.734 15.133 288.93 15.262 289.172 15.348 cv
289.41 15.437 289.699 15.48 290.043 15.48 cv
290.383 15.48 290.684 15.457 290.945 15.406 cv
291.203 15.359 291.43 15.305 291.621 15.242 cv
291.809 15.184 291.965 15.129 292.094 15.078 cv
292.215 15.031 292.316 15.008 292.398 15.004 cv
292.441 15.008 292.48 15.016 292.516 15.031 cv
292.543 15.051 292.57 15.082 292.59 15.129 cv
292.609 15.176 292.621 15.242 292.633 15.328 cv
292.637 15.414 292.641 15.523 292.645 15.652 cv
292.641 15.77 292.641 15.867 292.637 15.945 cv
292.629 16.027 292.621 16.094 292.613 16.148 cv
292.602 16.207 292.586 16.258 292.566 16.293 cv
292.547 16.336 292.52 16.371 292.488 16.406 cv
292.453 16.445 292.359 16.496 292.211 16.555 cv
292.055 16.621 291.863 16.684 291.633 16.738 cv
291.395 16.801 291.125 16.848 290.828 16.895 cv
290.523 16.934 290.203 16.957 289.863 16.961 cv
289.242 16.957 288.699 16.883 288.238 16.727 cv
287.77 16.574 287.383 16.336 287.074 16.02 cv
286.758 15.703 286.523 15.305 286.375 14.82 cv
286.219 14.34 286.145 13.773 286.148 13.117 cv
286.145 12.504 286.223 11.945 286.387 11.449 cv
286.543 10.953 286.777 10.535 287.09 10.187 cv
287.395 9.84399 287.77 9.578 288.207 9.39502 cv
288.645 9.21503 289.137 9.125 289.691 9.12097 cv
290.27 9.125 290.77 9.211 291.184 9.37903 cv
291.598 9.55499 291.934 9.79303 292.199 10.094 cv
292.461 10.398 292.656 10.758 292.785 11.172 cv
292.906 11.59 292.969 12.039 292.973 12.527 cv
cp
291.07 12.277 mo
291.082 11.727 290.973 11.293 290.738 10.98 cv
290.504 10.668 290.137 10.512 289.645 10.508 cv
289.395 10.512 289.18 10.559 288.996 10.648 cv
288.809 10.746 288.656 10.871 288.535 11.027 cv
288.41 11.187 288.316 11.375 288.254 11.59 cv
288.188 11.805 288.148 12.035 288.141 12.277 cv
cp
f
299.047 10.211 mo
299.047 10.402 299.039 10.555 299.031 10.672 cv
299.016 10.793 299 10.887 298.984 10.953 cv
298.961 11.023 298.934 11.07 298.902 11.094 cv
298.863 11.121 298.82 11.133 298.773 11.133 cv
298.727 11.133 298.68 11.125 298.633 11.105 cv
298.578 11.09 298.52 11.07 298.457 11.047 cv
298.387 11.027 298.316 11.008 298.242 10.988 cv
298.16 10.973 298.074 10.965 297.984 10.961 cv
297.871 10.965 297.762 10.984 297.656 11.027 cv
297.547 11.074 297.434 11.145 297.32 11.234 cv
297.199 11.328 297.078 11.453 296.953 11.605 cv
296.824 11.766 296.688 11.957 296.543 12.184 cv
296.543 16.516 li
296.539 16.57 296.523 16.613 296.496 16.652 cv
296.461 16.691 296.406 16.727 296.336 16.75 cv
296.258 16.777 296.16 16.793 296.035 16.809 cv
295.91 16.82 295.75 16.828 295.563 16.828 cv
295.367 16.828 295.211 16.82 295.086 16.809 cv
294.961 16.793 294.859 16.777 294.785 16.75 cv
294.707 16.727 294.652 16.691 294.625 16.652 cv
294.59 16.613 294.574 16.57 294.578 16.516 cv
294.578 9.56598 li
294.574 9.52002 294.59 9.47302 294.617 9.42999 cv
294.641 9.39502 294.688 9.36298 294.758 9.33197 cv
294.824 9.30902 294.91 9.289 295.02 9.27301 cv
295.125 9.26599 295.258 9.258 295.422 9.25403 cv
295.586 9.258 295.723 9.26599 295.832 9.27301 cv
295.938 9.289 296.023 9.30902 296.086 9.33197 cv
296.145 9.36298 296.188 9.39502 296.215 9.42999 cv
296.238 9.47302 296.25 9.52002 296.254 9.56598 cv
296.254 10.43 li
296.434 10.172 296.605 9.961 296.77 9.789 cv
296.926 9.625 297.082 9.48798 297.23 9.38702 cv
297.375 9.289 297.52 9.22302 297.664 9.17999 cv
297.809 9.14502 297.953 9.125 298.102 9.12097 cv
298.168 9.125 298.242 9.12903 298.32 9.133 cv
298.398 9.14502 298.477 9.15601 298.563 9.172 cv
298.641 9.19098 298.715 9.211 298.781 9.23401 cv
298.84 9.258 298.887 9.28497 298.918 9.30902 cv
298.945 9.34003 298.965 9.367 298.98 9.39502 cv
298.992 9.42999 299.004 9.47302 299.016 9.52301 cv
299.023 9.58197 299.031 9.664 299.039 9.77002 cv
299.043 9.87903 299.047 10.027 299.047 10.211 cv
cp
f
306.223 10.047 mo
306.219 10.301 306.191 10.484 306.137 10.602 cv
306.078 10.723 306.008 10.781 305.93 10.781 cv
305.109 10.781 li
305.223 10.906 305.305 11.051 305.355 11.207 cv
305.402 11.367 305.426 11.531 305.43 11.699 cv
305.426 12.109 305.359 12.469 305.227 12.781 cv
305.09 13.098 304.895 13.363 304.645 13.574 cv
304.391 13.793 304.09 13.957 303.734 14.066 cv
303.375 14.184 302.977 14.238 302.547 14.234 cv
302.32 14.238 302.109 14.211 301.906 14.152 cv
301.703 14.102 301.547 14.039 301.438 13.961 cv
301.375 14.031 301.316 14.109 301.27 14.203 cv
301.219 14.297 301.195 14.402 301.199 14.512 cv
301.195 14.668 301.262 14.789 301.395 14.883 cv
301.523 14.98 301.711 15.035 301.953 15.043 cv
303.645 15.105 li
304.039 15.121 304.391 15.18 304.699 15.273 cv
305.008 15.375 305.27 15.508 305.48 15.68 cv
305.691 15.855 305.852 16.066 305.961 16.309 cv
306.07 16.555 306.125 16.828 306.129 17.141 cv
306.125 17.477 306.051 17.801 305.902 18.109 cv
305.754 18.41 305.527 18.672 305.227 18.898 cv
304.922 19.117 304.543 19.297 304.09 19.43 cv
303.633 19.559 303.102 19.621 302.5 19.625 cv
301.902 19.621 301.398 19.574 300.98 19.484 cv
300.563 19.387 300.219 19.258 299.953 19.094 cv
299.684 18.926 299.488 18.727 299.371 18.5 cv
299.246 18.266 299.188 18.012 299.188 17.738 cv
299.188 17.566 299.207 17.406 299.254 17.25 cv
299.293 17.094 299.359 16.941 299.449 16.801 cv
299.531 16.656 299.637 16.523 299.762 16.391 cv
299.887 16.262 300.027 16.137 300.191 16.016 cv
299.965 15.902 299.793 15.742 299.672 15.531 cv
299.551 15.328 299.492 15.102 299.492 14.855 cv
299.492 14.555 299.559 14.277 299.699 14.02 cv
299.836 13.77 300.02 13.539 300.246 13.336 cv
300.063 13.156 299.918 12.941 299.809 12.684 cv
299.699 12.434 299.645 12.113 299.648 11.73 cv
299.645 11.328 299.715 10.969 299.859 10.645 cv
300 10.328 300.199 10.059 300.457 9.836 cv
300.711 9.617 301.016 9.44501 301.367 9.328 cv
301.719 9.211 302.109 9.15198 302.539 9.15198 cv
302.758 9.15198 302.965 9.16803 303.164 9.19098 cv
303.363 9.22302 303.551 9.258 303.723 9.30103 cv
305.93 9.30103 li
306.012 9.30499 306.082 9.36298 306.141 9.47302 cv
306.191 9.59003 306.219 9.78101 306.223 10.047 cv
cp
303.707 11.691 mo
303.703 11.32 303.602 11.031 303.395 10.82 cv
303.184 10.617 302.891 10.512 302.516 10.508 cv
302.32 10.512 302.148 10.543 302.008 10.605 cv
301.859 10.672 301.738 10.762 301.645 10.871 cv
301.543 10.984 301.473 11.113 301.43 11.262 cv
301.379 11.41 301.355 11.566 301.359 11.723 cv
301.355 12.082 301.461 12.359 301.672 12.562 cv
301.879 12.77 302.168 12.875 302.539 12.871 cv
302.734 12.875 302.902 12.844 303.051 12.777 cv
303.191 12.719 303.313 12.633 303.414 12.52 cv
303.508 12.414 303.582 12.285 303.633 12.141 cv
303.68 12 303.703 11.852 303.707 11.691 cv
cp
304.168 17.242 mo
304.168 17.004 304.074 16.828 303.887 16.703 cv
303.699 16.582 303.441 16.512 303.113 16.5 cv
301.719 16.461 li
301.582 16.562 301.473 16.656 301.395 16.746 cv
301.313 16.836 301.25 16.922 301.203 17.008 cv
301.152 17.09 301.117 17.172 301.105 17.25 cv
301.086 17.328 301.078 17.406 301.082 17.492 cv
301.078 17.746 301.211 17.945 301.473 18.082 cv
301.734 18.215 302.105 18.281 302.586 18.285 cv
302.879 18.281 303.125 18.25 303.332 18.195 cv
303.531 18.133 303.695 18.055 303.824 17.957 cv
303.945 17.855 304.035 17.746 304.09 17.625 cv
304.141 17.504 304.168 17.375 304.168 17.242 cv
cp
f
311.551 16.781 mo
310.707 19.242 li
310.656 19.371 310.531 19.465 310.324 19.523 cv
310.117 19.578 309.813 19.605 309.414 19.609 cv
309.203 19.605 309.035 19.598 308.914 19.582 cv
308.789 19.562 308.699 19.531 308.637 19.492 cv
308.574 19.449 308.539 19.398 308.535 19.336 cv
308.527 19.273 308.543 19.199 308.582 19.113 cv
309.508 16.781 li
309.438 16.75 309.375 16.703 309.324 16.637 cv
309.266 16.574 309.227 16.504 309.203 16.43 cv
306.813 10.039 li
306.742 9.85901 306.707 9.72302 306.711 9.625 cv
306.707 9.53101 306.738 9.453 306.805 9.39801 cv
306.863 9.34399 306.969 9.30902 307.117 9.28497 cv
307.262 9.27002 307.457 9.258 307.707 9.25403 cv
307.926 9.258 308.105 9.26202 308.238 9.26599 cv
308.367 9.27698 308.469 9.297 308.543 9.32397 cv
308.613 9.35901 308.668 9.40601 308.707 9.46899 cv
308.742 9.53497 308.777 9.62903 308.816 9.74597 cv
310.449 14.398 li
310.473 14.398 li
311.973 9.65198 li
311.996 9.52002 312.035 9.42999 312.09 9.383 cv
312.137 9.34003 312.219 9.30902 312.336 9.28497 cv
312.445 9.27002 312.648 9.258 312.938 9.25403 cv
313.16 9.258 313.344 9.27002 313.492 9.28497 cv
313.637 9.30902 313.746 9.34802 313.82 9.40198 cv
313.887 9.46503 313.922 9.539 313.926 9.633 cv
313.922 9.72699 313.902 9.84003 313.863 9.96899 cv
cp
f
325.992 15.254 mo
325.992 15.387 325.988 15.496 325.98 15.586 cv
325.973 15.68 325.961 15.758 325.945 15.82 cv
325.93 15.887 325.906 15.945 325.883 15.988 cv
325.852 16.035 325.813 16.086 325.758 16.145 cv
325.699 16.207 325.586 16.285 325.426 16.375 cv
325.258 16.473 325.059 16.562 324.824 16.645 cv
324.586 16.734 324.316 16.801 324.016 16.859 cv
323.707 16.914 323.379 16.945 323.031 16.945 cv
322.336 16.945 321.711 16.84 321.156 16.625 cv
320.598 16.414 320.125 16.098 319.738 15.672 cv
319.348 15.25 319.051 14.719 318.844 14.086 cv
318.637 13.453 318.531 12.715 318.535 11.871 cv
318.531 11.016 318.645 10.258 318.875 9.59003 cv
319.102 8.92603 319.422 8.367 319.832 7.914 cv
320.242 7.46503 320.734 7.12097 321.309 6.88702 cv
321.883 6.65601 322.516 6.539 323.211 6.53497 cv
323.484 6.539 323.754 6.56201 324.02 6.60498 cv
324.277 6.65198 324.52 6.711 324.738 6.78497 cv
324.957 6.86298 325.156 6.953 325.336 7.047 cv
325.512 7.14801 325.633 7.22998 325.707 7.30103 cv
325.773 7.37097 325.824 7.42999 325.852 7.47699 cv
325.875 7.52301 325.895 7.586 325.914 7.65601 cv
325.926 7.73401 325.938 7.82001 325.949 7.914 cv
325.953 8.01599 325.957 8.13702 325.961 8.27698 cv
325.957 8.43701 325.953 8.57001 325.945 8.67603 cv
325.934 8.789 325.914 8.875 325.891 8.94098 cv
325.863 9.01202 325.832 9.06201 325.797 9.09003 cv
325.758 9.125 325.715 9.14099 325.672 9.13702 cv
325.59 9.14099 325.492 9.09399 325.375 9 cv
325.254 8.90997 325.098 8.80902 324.91 8.69501 cv
324.719 8.586 324.496 8.48401 324.234 8.39099 cv
323.969 8.30103 323.656 8.258 323.297 8.25403 cv
322.895 8.258 322.535 8.34003 322.223 8.5 cv
321.906 8.66803 321.641 8.90198 321.422 9.203 cv
321.199 9.51202 321.031 9.87903 320.918 10.309 cv
320.801 10.742 320.742 11.227 320.746 11.762 cv
320.742 12.359 320.805 12.875 320.93 13.305 cv
321.051 13.742 321.223 14.098 321.453 14.375 cv
321.676 14.656 321.949 14.863 322.27 15 cv
322.586 15.141 322.945 15.211 323.352 15.207 cv
323.711 15.211 324.027 15.168 324.293 15.078 cv
324.559 14.996 324.785 14.902 324.973 14.793 cv
325.16 14.691 325.316 14.598 325.441 14.516 cv
325.563 14.434 325.656 14.391 325.727 14.391 cv
325.777 14.391 325.82 14.402 325.852 14.422 cv
325.883 14.441 325.906 14.48 325.93 14.543 cv
325.945 14.605 325.961 14.695 325.977 14.805 cv
325.984 14.922 325.992 15.07 325.992 15.254 cv
cp
f
334.375 12.969 mo
334.371 13.566 334.293 14.109 334.141 14.594 cv
333.98 15.086 333.746 15.504 333.43 15.855 cv
333.113 16.207 332.715 16.48 332.238 16.672 cv
331.758 16.863 331.199 16.957 330.563 16.961 cv
329.941 16.957 329.402 16.875 328.949 16.703 cv
328.488 16.535 328.109 16.285 327.813 15.957 cv
327.508 15.633 327.285 15.23 327.141 14.75 cv
326.996 14.273 326.926 13.727 326.926 13.109 cv
326.926 12.52 327.004 11.98 327.16 11.488 cv
327.316 11 327.555 10.578 327.875 10.227 cv
328.191 9.87903 328.586 9.60498 329.063 9.40997 cv
329.535 9.21899 330.094 9.125 330.734 9.12097 cv
331.359 9.125 331.898 9.20697 332.355 9.375 cv
332.813 9.547 333.191 9.797 333.488 10.121 cv
333.785 10.449 334.008 10.852 334.156 11.328 cv
334.301 11.809 334.371 12.355 334.375 12.969 cv
cp
332.355 13.047 mo
332.352 12.711 332.324 12.395 332.273 12.102 cv
332.215 11.816 332.121 11.566 331.996 11.352 cv
331.863 11.141 331.691 10.973 331.48 10.852 cv
331.262 10.734 330.992 10.676 330.664 10.672 cv
330.375 10.676 330.121 10.73 329.902 10.832 cv
329.684 10.941 329.504 11.098 329.363 11.301 cv
329.223 11.508 329.117 11.754 329.047 12.039 cv
328.977 12.332 328.941 12.66 328.941 13.023 cv
328.941 13.371 328.969 13.687 329.027 13.973 cv
329.082 14.266 329.176 14.516 329.305 14.727 cv
329.43 14.941 329.602 15.105 329.824 15.219 cv
330.039 15.34 330.309 15.398 330.633 15.395 cv
330.926 15.398 331.184 15.344 331.406 15.234 cv
331.621 15.129 331.801 14.977 331.941 14.77 cv
332.082 14.57 332.184 14.324 332.254 14.035 cv
332.316 13.75 332.352 13.422 332.355 13.047 cv
cp
f
342.57 16.516 mo
342.566 16.57 342.551 16.613 342.523 16.652 cv
342.488 16.691 342.438 16.727 342.367 16.75 cv
342.293 16.777 342.191 16.793 342.066 16.809 cv
341.938 16.82 341.781 16.828 341.598 16.828 cv
341.402 16.828 341.242 16.82 341.117 16.809 cv
340.988 16.793 340.887 16.777 340.816 16.75 cv
340.738 16.727 340.688 16.691 340.66 16.652 cv
340.625 16.613 340.609 16.57 340.613 16.516 cv
340.613 12.551 li
340.609 12.215 340.586 11.949 340.539 11.754 cv
340.488 11.562 340.414 11.398 340.324 11.262 cv
340.23 11.125 340.113 11.02 339.965 10.941 cv
339.816 10.867 339.641 10.828 339.445 10.828 cv
339.191 10.828 338.941 10.922 338.688 11.102 cv
338.434 11.285 338.168 11.547 337.895 11.895 cv
337.895 16.516 li
337.891 16.57 337.875 16.613 337.848 16.652 cv
337.813 16.691 337.758 16.727 337.688 16.75 cv
337.609 16.777 337.512 16.793 337.387 16.809 cv
337.262 16.82 337.102 16.828 336.914 16.828 cv
336.719 16.828 336.563 16.82 336.438 16.809 cv
336.313 16.793 336.211 16.777 336.137 16.75 cv
336.059 16.727 336.004 16.691 335.977 16.652 cv
335.941 16.613 335.926 16.57 335.93 16.516 cv
335.93 9.56598 li
335.926 9.52002 335.941 9.47302 335.969 9.42999 cv
335.992 9.39502 336.039 9.36298 336.109 9.33197 cv
336.176 9.30902 336.262 9.289 336.371 9.27301 cv
336.477 9.26599 336.609 9.258 336.773 9.25403 cv
336.938 9.258 337.074 9.26599 337.184 9.27301 cv
337.289 9.289 337.375 9.30902 337.438 9.33197 cv
337.496 9.36298 337.539 9.39502 337.566 9.42999 cv
337.59 9.47302 337.602 9.52002 337.605 9.56598 cv
337.605 10.367 li
337.988 9.95697 338.379 9.64502 338.777 9.43402 cv
339.172 9.22699 339.59 9.125 340.023 9.12097 cv
340.492 9.125 340.891 9.203 341.219 9.35498 cv
341.543 9.51599 341.805 9.72699 342.004 9.992 cv
342.203 10.262 342.348 10.574 342.438 10.93 cv
342.523 11.289 342.566 11.719 342.57 12.223 cv
cp
f
349.395 14.551 mo
349.391 14.949 349.316 15.297 349.172 15.598 cv
349.023 15.898 348.816 16.152 348.547 16.352 cv
348.273 16.559 347.953 16.707 347.586 16.809 cv
347.219 16.906 346.816 16.957 346.387 16.961 cv
346.121 16.957 345.875 16.937 345.641 16.902 cv
345.406 16.859 345.195 16.812 345.008 16.754 cv
344.82 16.695 344.664 16.633 344.539 16.57 cv
344.414 16.508 344.32 16.449 344.266 16.395 cv
344.207 16.34 344.164 16.258 344.137 16.141 cv
344.102 16.027 344.086 15.852 344.09 15.621 cv
344.086 15.473 344.094 15.352 344.105 15.258 cv
344.113 15.168 344.129 15.098 344.152 15.039 cv
344.172 14.988 344.195 14.949 344.23 14.93 cv
344.258 14.914 344.297 14.906 344.344 14.902 cv
344.398 14.906 344.484 14.937 344.598 15 cv
344.707 15.066 344.844 15.141 345.016 15.215 cv
345.18 15.297 345.375 15.367 345.594 15.434 cv
345.813 15.504 346.063 15.539 346.348 15.535 cv
346.523 15.539 346.68 15.52 346.82 15.48 cv
346.953 15.445 347.074 15.395 347.18 15.324 cv
347.277 15.258 347.352 15.172 347.406 15.066 cv
347.453 14.965 347.48 14.844 347.484 14.707 cv
347.48 14.551 347.434 14.418 347.34 14.309 cv
347.246 14.199 347.117 14.102 346.961 14.016 cv
346.797 13.934 346.617 13.855 346.422 13.781 cv
346.219 13.711 346.016 13.633 345.805 13.539 cv
345.594 13.453 345.387 13.352 345.191 13.234 cv
344.988 13.125 344.809 12.984 344.652 12.816 cv
344.488 12.652 344.363 12.453 344.27 12.215 cv
344.176 11.984 344.129 11.703 344.129 11.371 cv
344.129 11.043 344.191 10.738 344.32 10.457 cv
344.449 10.184 344.637 9.94501 344.883 9.74597 cv
345.125 9.55103 345.422 9.39801 345.773 9.28497 cv
346.121 9.17999 346.516 9.125 346.957 9.12097 cv
347.172 9.125 347.383 9.14099 347.59 9.16803 cv
347.793 9.203 347.98 9.242 348.148 9.28497 cv
348.313 9.336 348.453 9.38702 348.57 9.43701 cv
348.684 9.49597 348.766 9.54303 348.816 9.578 cv
348.863 9.62097 348.898 9.65997 348.922 9.69501 cv
348.941 9.73798 348.953 9.78497 348.965 9.836 cv
348.973 9.89099 348.984 9.95697 348.992 10.035 cv
349 10.121 349.004 10.219 349.004 10.336 cv
349.004 10.477 349 10.594 348.992 10.68 cv
348.984 10.773 348.969 10.844 348.953 10.891 cv
348.934 10.945 348.91 10.98 348.883 10.996 cv
348.848 11.02 348.813 11.027 348.773 11.023 cv
348.723 11.027 348.648 11 348.555 10.941 cv
348.453 10.891 348.332 10.832 348.184 10.766 cv
348.035 10.707 347.863 10.648 347.668 10.59 cv
347.473 10.539 347.25 10.512 347.004 10.508 cv
346.824 10.512 346.672 10.531 346.543 10.562 cv
346.41 10.602 346.301 10.652 346.223 10.719 cv
346.137 10.789 346.074 10.867 346.035 10.957 cv
345.988 11.051 345.969 11.148 345.973 11.25 cv
345.969 11.41 346.02 11.547 346.121 11.652 cv
346.219 11.766 346.348 11.859 346.512 11.941 cv
346.672 12.027 346.855 12.105 347.063 12.176 cv
347.266 12.25 347.473 12.332 347.684 12.414 cv
347.891 12.504 348.098 12.602 348.309 12.715 cv
348.512 12.828 348.695 12.969 348.855 13.133 cv
349.016 13.301 349.145 13.5 349.246 13.73 cv
349.34 13.965 349.391 14.238 349.395 14.551 cv
cp
f
357.461 16.516 mo
357.457 16.57 357.445 16.613 357.422 16.652 cv
357.395 16.691 357.348 16.727 357.285 16.75 cv
357.219 16.777 357.133 16.793 357.027 16.809 cv
356.922 16.82 356.789 16.828 356.629 16.828 cv
356.453 16.828 356.313 16.82 356.211 16.809 cv
356.102 16.793 356.02 16.777 355.957 16.75 cv
355.895 16.727 355.848 16.691 355.824 16.652 cv
355.793 16.613 355.781 16.57 355.785 16.516 cv
355.785 15.715 li
355.398 16.129 355.008 16.441 354.613 16.648 cv
354.211 16.855 353.801 16.957 353.379 16.961 cv
352.898 16.957 352.496 16.883 352.172 16.727 cv
351.848 16.574 351.586 16.359 351.387 16.09 cv
351.184 15.82 351.039 15.508 350.957 15.148 cv
350.867 14.793 350.824 14.352 350.828 13.82 cv
350.828 9.56598 li
350.824 9.52002 350.84 9.47302 350.871 9.42999 cv
350.898 9.39502 350.949 9.36298 351.027 9.33197 cv
351.102 9.30902 351.203 9.289 351.332 9.27301 cv
351.457 9.26599 351.613 9.258 351.805 9.25403 cv
351.992 9.258 352.152 9.26599 352.277 9.27301 cv
352.402 9.289 352.5 9.30902 352.578 9.33197 cv
352.648 9.36298 352.703 9.39502 352.738 9.42999 cv
352.766 9.47302 352.781 9.52002 352.785 9.56598 cv
352.785 13.492 li
352.781 13.859 352.805 14.137 352.855 14.328 cv
352.898 14.52 352.969 14.684 353.07 14.82 cv
353.164 14.961 353.289 15.066 353.438 15.141 cv
353.586 15.219 353.758 15.258 353.953 15.254 cv
354.203 15.258 354.453 15.168 354.707 14.98 cv
354.957 14.801 355.227 14.535 355.512 14.187 cv
355.512 9.56598 li
355.512 9.52002 355.523 9.47302 355.555 9.42999 cv
355.578 9.39502 355.633 9.36298 355.711 9.33197 cv
355.785 9.30902 355.883 9.289 356.012 9.27301 cv
356.133 9.26599 356.293 9.258 356.488 9.25403 cv
356.68 9.258 356.836 9.26599 356.961 9.27301 cv
357.082 9.289 357.184 9.30902 357.258 9.33197 cv
357.328 9.36298 357.379 9.39502 357.414 9.42999 cv
357.441 9.47302 357.457 9.52002 357.461 9.56598 cv
cp
f
370.402 16.516 mo
370.398 16.57 370.383 16.613 370.355 16.652 cv
370.32 16.691 370.27 16.727 370.199 16.75 cv
370.125 16.777 370.023 16.793 369.902 16.809 cv
369.777 16.82 369.621 16.828 369.43 16.828 cv
369.23 16.828 369.07 16.82 368.945 16.809 cv
368.82 16.793 368.719 16.777 368.645 16.75 cv
368.566 16.727 368.516 16.691 368.488 16.652 cv
368.461 16.613 368.445 16.57 368.449 16.516 cv
368.449 12.395 li
368.445 12.164 368.426 11.949 368.383 11.754 cv
368.336 11.562 368.266 11.398 368.18 11.262 cv
368.086 11.125 367.973 11.02 367.836 10.941 cv
367.695 10.867 367.531 10.828 367.34 10.828 cv
367.105 10.828 366.867 10.922 366.629 11.102 cv
366.391 11.285 366.133 11.547 365.852 11.895 cv
365.852 16.516 li
365.852 16.57 365.836 16.613 365.805 16.652 cv
365.773 16.691 365.719 16.727 365.645 16.75 cv
365.566 16.777 365.465 16.793 365.344 16.809 cv
365.219 16.82 365.066 16.828 364.879 16.828 cv
364.684 16.828 364.523 16.82 364.402 16.809 cv
364.273 16.793 364.172 16.777 364.102 16.75 cv
364.023 16.727 363.973 16.691 363.941 16.652 cv
363.91 16.613 363.895 16.57 363.895 16.516 cv
363.895 12.395 li
363.895 12.164 363.871 11.949 363.828 11.754 cv
363.785 11.562 363.719 11.398 363.633 11.262 cv
363.539 11.125 363.426 11.02 363.289 10.941 cv
363.145 10.867 362.98 10.828 362.797 10.828 cv
362.555 10.828 362.316 10.922 362.078 11.102 cv
361.84 11.285 361.582 11.547 361.309 11.895 cv
361.309 16.516 li
361.305 16.57 361.289 16.613 361.262 16.652 cv
361.227 16.691 361.172 16.727 361.102 16.75 cv
361.023 16.777 360.926 16.793 360.801 16.809 cv
360.676 16.82 360.516 16.828 360.328 16.828 cv
360.133 16.828 359.977 16.82 359.852 16.809 cv
359.727 16.793 359.625 16.777 359.551 16.75 cv
359.473 16.727 359.418 16.691 359.391 16.652 cv
359.355 16.613 359.34 16.57 359.344 16.516 cv
359.344 9.56598 li
359.34 9.52002 359.355 9.47302 359.383 9.42999 cv
359.406 9.39502 359.453 9.36298 359.523 9.33197 cv
359.59 9.30902 359.676 9.289 359.785 9.27301 cv
359.891 9.26599 360.023 9.258 360.188 9.25403 cv
360.352 9.258 360.488 9.26599 360.598 9.27301 cv
360.703 9.289 360.789 9.30902 360.852 9.33197 cv
360.91 9.36298 360.953 9.39502 360.98 9.42999 cv
361.004 9.47302 361.016 9.52002 361.02 9.56598 cv
361.02 10.367 li
361.402 9.95697 361.785 9.64502 362.168 9.43402 cv
362.547 9.22699 362.949 9.125 363.367 9.12097 cv
363.652 9.125 363.906 9.15198 364.137 9.211 cv
364.363 9.27301 364.57 9.35901 364.75 9.46899 cv
364.93 9.58197 365.082 9.71899 365.211 9.87097 cv
365.34 10.027 365.449 10.199 365.539 10.391 cv
365.746 10.168 365.949 9.97699 366.152 9.81598 cv
366.348 9.65601 366.547 9.52301 366.742 9.422 cv
366.938 9.32001 367.133 9.24597 367.328 9.19501 cv
367.523 9.14801 367.723 9.125 367.926 9.12097 cv
368.387 9.125 368.773 9.203 369.094 9.35498 cv
369.406 9.51599 369.664 9.72699 369.859 9.992 cv
370.055 10.262 370.191 10.574 370.277 10.93 cv
370.355 11.289 370.398 11.668 370.402 12.066 cv
cp
f
379.32 12.937 mo
379.32 13.559 379.254 14.117 379.121 14.613 cv
378.988 15.109 378.793 15.531 378.539 15.879 cv
378.285 16.227 377.969 16.496 377.59 16.68 cv
377.207 16.867 376.773 16.957 376.289 16.961 cv
376.082 16.957 375.895 16.937 375.73 16.902 cv
375.559 16.859 375.395 16.801 375.238 16.723 cv
375.078 16.645 374.922 16.547 374.77 16.422 cv
374.609 16.305 374.449 16.164 374.285 16 cv
374.285 19.273 li
374.281 19.32 374.266 19.367 374.238 19.414 cv
374.203 19.453 374.148 19.488 374.078 19.52 cv
374 19.543 373.902 19.566 373.777 19.586 cv
373.652 19.598 373.492 19.605 373.305 19.609 cv
373.109 19.605 372.953 19.598 372.828 19.586 cv
372.703 19.566 372.602 19.543 372.527 19.52 cv
372.449 19.488 372.395 19.453 372.367 19.414 cv
372.332 19.367 372.316 19.32 372.32 19.273 cv
372.32 9.56598 li
372.316 9.52002 372.332 9.47302 372.359 9.42999 cv
372.383 9.39502 372.426 9.36298 372.496 9.33197 cv
372.559 9.30902 372.645 9.289 372.754 9.27301 cv
372.855 9.26599 372.992 9.258 373.156 9.25403 cv
373.313 9.258 373.441 9.26599 373.547 9.27301 cv
373.652 9.289 373.738 9.30902 373.805 9.33197 cv
373.867 9.36298 373.914 9.39502 373.941 9.42999 cv
373.965 9.47302 373.977 9.52002 373.98 9.56598 cv
373.98 10.383 li
374.18 10.176 374.379 9.99597 374.578 9.836 cv
374.77 9.67999 374.969 9.547 375.172 9.43701 cv
375.375 9.336 375.582 9.25403 375.801 9.19897 cv
376.012 9.14801 376.242 9.125 376.492 9.12097 cv
376.996 9.125 377.43 9.22302 377.793 9.422 cv
378.148 9.625 378.441 9.90198 378.668 10.246 cv
378.891 10.598 379.055 11 379.164 11.461 cv
379.266 11.922 379.32 12.414 379.32 12.937 cv
cp
377.277 13.078 mo
377.273 12.785 377.254 12.504 377.211 12.227 cv
377.164 11.957 377.086 11.715 376.984 11.5 cv
376.875 11.289 376.734 11.117 376.563 10.988 cv
376.387 10.863 376.172 10.801 375.914 10.797 cv
375.781 10.801 375.652 10.82 375.527 10.855 cv
375.398 10.898 375.27 10.961 375.137 11.047 cv
375.004 11.137 374.867 11.25 374.73 11.391 cv
374.586 11.531 374.438 11.707 374.285 11.91 cv
374.285 14.203 li
374.559 14.551 374.82 14.82 375.07 15.008 cv
375.316 15.199 375.578 15.293 375.852 15.293 cv
376.105 15.293 376.32 15.23 376.504 15.098 cv
376.68 14.973 376.828 14.801 376.941 14.59 cv
377.055 14.379 377.137 14.141 377.195 13.875 cv
377.246 13.609 377.273 13.344 377.277 13.078 cv
cp
f
384.816 15.832 mo
384.816 16.059 384.801 16.234 384.773 16.355 cv
384.742 16.48 384.703 16.566 384.66 16.613 cv
384.609 16.664 384.543 16.707 384.453 16.746 cv
384.359 16.785 384.25 16.816 384.133 16.848 cv
384.008 16.871 383.875 16.895 383.734 16.914 cv
383.59 16.926 383.449 16.934 383.305 16.937 cv
382.914 16.934 382.574 16.883 382.289 16.789 cv
382.004 16.687 381.77 16.539 381.582 16.332 cv
381.395 16.129 381.254 15.871 381.168 15.559 cv
381.074 15.25 381.031 14.879 381.035 14.449 cv
381.035 10.891 li
380.203 10.891 li
380.102 10.895 380.027 10.832 379.977 10.707 cv
379.922 10.586 379.895 10.383 379.898 10.094 cv
379.895 9.94501 379.902 9.81598 379.918 9.71503 cv
379.93 9.61298 379.949 9.53101 379.977 9.46899 cv
380 9.40997 380.031 9.367 380.074 9.34003 cv
380.109 9.31598 380.156 9.30499 380.211 9.30103 cv
381.035 9.30103 li
381.035 7.75 li
381.031 7.703 381.047 7.65601 381.078 7.60901 cv
381.105 7.57001 381.156 7.53497 381.234 7.50403 cv
381.309 7.47998 381.41 7.45697 381.539 7.44098 cv
381.664 7.42999 381.82 7.42603 382.012 7.422 cv
382.199 7.42603 382.359 7.42999 382.488 7.44098 cv
382.613 7.45697 382.715 7.47998 382.789 7.50403 cv
382.859 7.53497 382.91 7.57001 382.945 7.60901 cv
382.973 7.65601 382.988 7.703 382.992 7.75 cv
382.992 9.30103 li
384.504 9.30103 li
384.555 9.30499 384.602 9.31598 384.641 9.34003 cv
384.68 9.367 384.711 9.40997 384.738 9.46899 cv
384.762 9.53101 384.781 9.61298 384.797 9.71503 cv
384.809 9.81598 384.816 9.94501 384.816 10.094 cv
384.816 10.383 384.789 10.586 384.738 10.707 cv
384.684 10.832 384.609 10.895 384.512 10.891 cv
382.992 10.891 li
382.992 14.156 li
382.988 14.535 383.047 14.82 383.172 15.008 cv
383.289 15.199 383.504 15.293 383.809 15.293 cv
383.91 15.293 384.004 15.285 384.09 15.266 cv
384.172 15.25 384.246 15.23 384.313 15.203 cv
384.375 15.184 384.43 15.16 384.477 15.141 cv
384.52 15.125 384.559 15.117 384.598 15.113 cv
384.625 15.117 384.656 15.125 384.688 15.141 cv
384.715 15.16 384.734 15.199 384.754 15.25 cv
384.766 15.309 384.781 15.383 384.797 15.473 cv
384.809 15.57 384.816 15.687 384.816 15.832 cv
cp
f
388.199 16.516 mo
388.195 16.57 388.18 16.613 388.152 16.652 cv
388.117 16.691 388.063 16.727 387.992 16.75 cv
387.914 16.777 387.816 16.793 387.691 16.809 cv
387.566 16.82 387.406 16.828 387.219 16.828 cv
387.023 16.828 386.867 16.82 386.742 16.809 cv
386.617 16.793 386.516 16.777 386.441 16.75 cv
386.363 16.727 386.309 16.691 386.281 16.652 cv
386.246 16.613 386.23 16.57 386.234 16.516 cv
386.234 9.58197 li
386.23 9.53101 386.246 9.48401 386.281 9.44501 cv
386.309 9.40601 386.363 9.375 386.441 9.34399 cv
386.516 9.32001 386.617 9.297 386.742 9.27698 cv
386.867 9.26599 387.023 9.258 387.219 9.25403 cv
387.406 9.258 387.566 9.26599 387.691 9.27698 cv
387.816 9.297 387.914 9.32001 387.992 9.34399 cv
388.063 9.375 388.117 9.40601 388.152 9.44501 cv
388.18 9.48401 388.195 9.53101 388.199 9.58197 cv
cp
388.348 7.211 mo
388.348 7.60901 388.266 7.883 388.105 8.03101 cv
387.941 8.18402 387.645 8.258 387.211 8.25403 cv
386.766 8.258 386.465 8.18402 386.316 8.039 cv
386.16 7.89502 386.086 7.633 386.086 7.25 cv
386.086 6.85498 386.164 6.58197 386.324 6.42999 cv
386.48 6.27698 386.781 6.19897 387.227 6.19897 cv
387.66 6.19897 387.957 6.27301 388.113 6.422 cv
388.27 6.57001 388.348 6.836 388.348 7.211 cv
cp
f
397.191 12.969 mo
397.188 13.566 397.109 14.109 396.957 14.594 cv
396.797 15.086 396.563 15.504 396.246 15.855 cv
395.93 16.207 395.531 16.48 395.055 16.672 cv
394.574 16.863 394.016 16.957 393.379 16.961 cv
392.758 16.957 392.219 16.875 391.766 16.703 cv
391.305 16.535 390.926 16.285 390.629 15.957 cv
390.324 15.633 390.102 15.23 389.957 14.75 cv
389.813 14.273 389.742 13.727 389.742 13.109 cv
389.742 12.52 389.82 11.98 389.977 11.488 cv
390.133 11 390.371 10.578 390.691 10.227 cv
391.008 9.87903 391.402 9.60498 391.879 9.40997 cv
392.352 9.21899 392.91 9.125 393.551 9.12097 cv
394.176 9.125 394.715 9.20697 395.172 9.375 cv
395.629 9.547 396.008 9.797 396.305 10.121 cv
396.602 10.449 396.824 10.852 396.973 11.328 cv
397.117 11.809 397.188 12.355 397.191 12.969 cv
cp
395.172 13.047 mo
395.168 12.711 395.141 12.395 395.09 12.102 cv
395.031 11.816 394.938 11.566 394.813 11.352 cv
394.68 11.141 394.508 10.973 394.297 10.852 cv
394.078 10.734 393.809 10.676 393.48 10.672 cv
393.191 10.676 392.938 10.73 392.719 10.832 cv
392.5 10.941 392.32 11.098 392.18 11.301 cv
392.039 11.508 391.934 11.754 391.863 12.039 cv
391.793 12.332 391.758 12.66 391.758 13.023 cv
391.758 13.371 391.785 13.687 391.844 13.973 cv
391.898 14.266 391.992 14.516 392.121 14.727 cv
392.246 14.941 392.418 15.105 392.641 15.219 cv
392.855 15.34 393.125 15.398 393.449 15.395 cv
393.742 15.398 394 15.344 394.223 15.234 cv
394.438 15.129 394.617 14.977 394.758 14.77 cv
394.898 14.57 395 14.324 395.07 14.035 cv
395.133 13.75 395.168 13.422 395.172 13.047 cv
cp
f
405.438 16.516 mo
405.434 16.57 405.418 16.613 405.391 16.652 cv
405.355 16.691 405.305 16.727 405.234 16.75 cv
405.16 16.777 405.059 16.793 404.934 16.809 cv
404.805 16.82 404.648 16.828 404.465 16.828 cv
404.27 16.828 404.109 16.82 403.984 16.809 cv
403.855 16.793 403.754 16.777 403.684 16.75 cv
403.605 16.727 403.555 16.691 403.527 16.652 cv
403.492 16.613 403.477 16.57 403.48 16.516 cv
403.48 12.551 li
403.477 12.215 403.453 11.949 403.406 11.754 cv
403.355 11.562 403.281 11.398 403.191 11.262 cv
403.098 11.125 402.98 11.02 402.832 10.941 cv
402.684 10.867 402.508 10.828 402.313 10.828 cv
402.059 10.828 401.809 10.922 401.555 11.102 cv
401.301 11.285 401.035 11.547 400.762 11.895 cv
400.762 16.516 li
400.758 16.57 400.742 16.613 400.715 16.652 cv
400.68 16.691 400.625 16.727 400.555 16.75 cv
400.477 16.777 400.379 16.793 400.254 16.809 cv
400.129 16.82 399.969 16.828 399.781 16.828 cv
399.586 16.828 399.43 16.82 399.305 16.809 cv
399.18 16.793 399.078 16.777 399.004 16.75 cv
398.926 16.727 398.871 16.691 398.844 16.652 cv
398.809 16.613 398.793 16.57 398.797 16.516 cv
398.797 9.56598 li
398.793 9.52002 398.809 9.47302 398.836 9.42999 cv
398.859 9.39502 398.906 9.36298 398.977 9.33197 cv
399.043 9.30902 399.129 9.289 399.238 9.27301 cv
399.344 9.26599 399.477 9.258 399.641 9.25403 cv
399.805 9.258 399.941 9.26599 400.051 9.27301 cv
400.156 9.289 400.242 9.30902 400.305 9.33197 cv
400.363 9.36298 400.406 9.39502 400.434 9.42999 cv
400.457 9.47302 400.469 9.52002 400.473 9.56598 cv
400.473 10.367 li
400.855 9.95697 401.246 9.64502 401.645 9.43402 cv
402.039 9.22699 402.457 9.125 402.891 9.12097 cv
403.359 9.125 403.758 9.203 404.086 9.35498 cv
404.41 9.51599 404.672 9.72699 404.871 9.992 cv
405.07 10.262 405.215 10.574 405.305 10.93 cv
405.391 11.289 405.434 11.719 405.438 12.223 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
