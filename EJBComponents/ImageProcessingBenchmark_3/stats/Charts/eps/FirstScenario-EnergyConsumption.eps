%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FirstScenario-EnergyConsumption.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 3:59:59 p.m.
%%BoundingBox: 0 0 679 568
%%HiResBoundingBox: 0 0 678.3500 567.4001
%%CropBox: 0 0 678.3500 567.4001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -567.4 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 567.4 li
678.35 567.4 li
678.35 0 li
cp
clp
gsave
0 567.4 mo
679 567.4 li
679 -.599976 li
0 -.599976 li
cp
clp
0 0 mo
678.352 0 li
678.352 567.398 li
0 567.398 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.75 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
54.18 508.648 mo
661.789 508.648 li
54.18 498.871 mo
661.789 498.871 li
54.18 489.09 mo
661.789 489.09 li
54.18 479.371 mo
661.789 479.371 li
54.18 459.809 mo
661.789 459.809 li
54.18 450.031 mo
661.789 450.031 li
54.18 440.25 mo
661.789 440.25 li
54.18 430.469 mo
661.789 430.469 li
54.18 410.969 mo
661.789 410.969 li
54.18 401.191 mo
661.789 401.191 li
54.18 391.41 mo
661.789 391.41 li
54.18 381.629 mo
661.789 381.629 li
54.18 362.129 mo
661.789 362.129 li
54.18 352.352 mo
661.789 352.352 li
54.18 342.57 mo
661.789 342.57 li
54.18 332.789 mo
661.789 332.789 li
54.18 313.23 mo
661.789 313.23 li
54.18 303.512 mo
661.789 303.512 li
54.18 293.73 mo
661.789 293.73 li
54.18 283.949 mo
661.789 283.949 li
54.18 264.391 mo
661.789 264.391 li
54.18 254.609 mo
661.789 254.609 li
54.18 244.891 mo
661.789 244.891 li
54.18 235.109 mo
661.789 235.109 li
54.18 215.551 mo
661.789 215.551 li
54.18 205.77 mo
661.789 205.77 li
54.18 195.988 mo
661.789 195.988 li
54.18 186.27 mo
661.789 186.27 li
54.18 166.711 mo
661.789 166.711 li
54.18 156.93 mo
661.789 156.93 li
54.18 147.148 mo
661.789 147.148 li
54.18 137.371 mo
661.789 137.371 li
54.18 117.871 mo
661.789 117.871 li
54.18 108.09 mo
661.789 108.09 li
54.18 98.309 mo
661.789 98.309 li
54.18 88.531 mo
661.789 88.531 li
54.18 69.031 mo
661.789 69.031 li
54.18 59.25 mo
661.789 59.25 li
54.18 49.469 mo
661.789 49.469 li
54.18 39.691 mo
661.789 39.691 li
.135805 .104005 .108583 0 cmyk
@
54.18 469.59 mo
661.789 469.59 li
54.18 420.75 mo
661.789 420.75 li
54.18 371.852 mo
661.789 371.852 li
54.18 323.012 mo
661.789 323.012 li
54.18 274.172 mo
661.789 274.172 li
54.18 225.328 mo
661.789 225.328 li
54.18 176.488 mo
661.789 176.488 li
54.18 127.648 mo
661.789 127.648 li
54.18 78.75 mo
661.789 78.75 li
54.18 29.922 mo
661.789 29.922 li
.326574 .281529 .277562 0 cmyk
@
92.129 29.922 mo
92.129 518.426 li
168.09 29.922 mo
168.09 518.426 li
244.051 29.922 mo
244.051 518.426 li
320.012 29.922 mo
320.012 518.426 li
395.969 29.922 mo
395.969 518.426 li
471.93 29.922 mo
471.93 518.426 li
547.891 29.922 mo
547.891 518.426 li
623.789 29.922 mo
623.789 518.426 li
.175235 .144778 .143648 0 cmyk
@
54.18 29.922 mo
54.18 518.426 li
130.109 29.922 mo
130.109 518.426 li
206.07 29.922 mo
206.07 518.426 li
282.031 29.922 mo
282.031 518.426 li
357.988 29.922 mo
357.988 518.426 li
433.949 29.922 mo
433.949 518.426 li
509.91 29.922 mo
509.91 518.426 li
585.809 29.922 mo
585.809 518.426 li
661.789 29.922 mo
661.789 518.426 li
.326574 .281529 .277562 0 cmyk
@
34.098 509.109 mo
41.196 509.109 li
41.196 526.199 li
34.098 526.199 li
cp
0 0 0 0 cmyk
ef
34.098 460.262 mo
41.196 460.262 li
41.196 477.352 li
34.098 477.352 li
cp
ef
27.004 411.41 mo
41.195 411.41 li
41.195 428.5 li
27.004 428.5 li
cp
ef
27.004 362.559 mo
41.195 362.559 li
41.195 379.649 li
27.004 379.649 li
cp
ef
27.004 313.711 mo
41.195 313.711 li
41.195 330.801 li
27.004 330.801 li
cp
ef
27.004 264.859 mo
41.195 264.859 li
41.195 281.949 li
27.004 281.949 li
cp
ef
27.004 216 mo
41.195 216 li
41.195 233.09 li
27.004 233.09 li
cp
ef
27.004 167.148 mo
41.195 167.148 li
41.195 184.238 li
27.004 184.238 li
cp
ef
27.004 118.301 mo
41.195 118.301 li
41.195 135.391 li
27.004 135.391 li
cp
ef
27.004 69.449 mo
41.195 69.449 li
41.195 86.539 li
27.004 86.539 li
cp
ef
27.004 20.6021 mo
41.195 20.6021 li
41.195 37.6921 li
27.004 37.6921 li
cp
ef
1 lw
54.18 518.426 mo
661.789 518.426 li
.369879 .299321 .304356 .000976577 cmyk
@
54.18 518.426 mo
54.18 522.867 li
130.109 518.426 mo
130.109 522.867 li
206.07 518.426 mo
206.07 522.867 li
282.031 518.426 mo
282.031 522.867 li
357.988 518.426 mo
357.988 522.867 li
433.949 518.426 mo
433.949 522.867 li
509.91 518.426 mo
509.91 522.867 li
585.809 518.426 mo
585.809 522.867 li
661.789 518.426 mo
661.789 522.867 li
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lc
54.18 37.711 mo
130.109 133.5 li
206.07 106.23 li
282.031 123.031 li
357.988 96.391 li
433.949 96.391 li
509.91 95.25 li
585.809 95.91 li
661.789 94.352 li
.62829 .284672 0 0 cmyk
@
grestore
1.02 lw
59.16 42.719 mo
49.141 32.699 li
49.141 42.719 mo
59.16 32.699 li
.62829 .284672 0 0 cmyk
@
135.121 138.48 mo
125.102 128.461 li
125.102 138.48 mo
135.121 128.461 li
@
211.078 111.18 mo
201.059 101.16 li
201.059 111.18 mo
211.078 101.16 li
@
287.039 127.98 mo
277.02 117.961 li
277.02 127.98 mo
287.039 117.961 li
@
362.941 101.398 mo
352.922 91.379 li
352.922 101.398 mo
362.941 91.379 li
@
438.898 101.398 mo
428.879 91.379 li
428.879 101.398 mo
438.898 91.379 li
@
514.859 100.199 mo
504.84 90.18 li
504.84 100.199 mo
514.859 90.18 li
@
590.82 100.922 mo
580.801 90.898 li
580.801 100.922 mo
590.82 90.898 li
@
666.781 99.301 mo
656.762 89.281 li
656.762 99.301 mo
666.781 89.281 li
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
54.18 356.281 mo
130.109 362.609 li
206.07 370.172 li
282.031 384.75 li
357.988 373.949 li
433.949 372.93 li
509.91 381.93 li
585.809 394.648 li
661.789 374.91 li
@
grestore
49.172 351.27 mo
59.129 351.27 li
59.129 361.231 li
49.172 361.231 li
cp
@
125.129 357.629 mo
135.09 357.629 li
135.09 367.59 li
125.129 367.59 li
cp
@
201.09 365.191 mo
211.051 365.191 li
211.051 375.148 li
201.09 375.148 li
cp
@
277.051 379.77 mo
287.012 379.77 li
287.012 389.731 li
277.051 389.731 li
cp
@
352.949 368.91 mo
362.91 368.91 li
362.91 378.871 li
352.949 378.871 li
cp
@
428.91 367.891 mo
438.871 367.891 li
438.871 377.852 li
428.91 377.852 li
cp
@
504.871 376.949 mo
514.828 376.949 li
514.828 386.91 li
504.871 386.91 li
cp
@
580.828 389.672 mo
590.789 389.672 li
590.789 399.629 li
580.828 399.629 li
cp
@
656.789 369.93 mo
666.75 369.93 li
666.75 379.891 li
656.789 379.891 li
cp
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
54.18 192.41 mo
130.109 303.57 li
206.07 259.051 li
282.031 244.949 li
357.988 244.352 li
433.949 244.109 li
509.91 244.352 li
585.809 244.352 li
661.789 243.512 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
59.16 197.398 mo
49.141 187.379 li
49.141 197.398 mo
59.16 187.379 li
.0321965 .622736 .922606 .000579843 cmyk
@
135.121 308.52 mo
125.102 298.5 li
125.102 308.52 mo
135.121 298.5 li
@
211.078 264 mo
201.059 253.98 li
201.059 264 mo
211.078 253.98 li
@
287.039 249.961 mo
277.02 239.941 li
277.02 249.961 mo
287.039 239.941 li
@
362.941 249.359 mo
352.922 239.34 li
352.922 249.359 mo
362.941 239.34 li
@
438.898 249.059 mo
428.879 239.039 li
428.879 249.059 mo
438.898 239.039 li
@
514.859 249.359 mo
504.84 239.34 li
504.84 249.359 mo
514.859 239.34 li
@
590.82 249.359 mo
580.801 239.34 li
580.801 249.359 mo
590.82 239.34 li
@
666.781 248.461 mo
656.762 238.441 li
656.762 248.461 mo
666.781 238.441 li
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
54.18 340.34 mo
130.109 375.629 li
206.07 394.648 li
282.031 414.449 li
357.988 389.25 li
433.949 414.988 li
509.91 407.852 li
585.809 415.551 li
661.789 413.488 li
@
grestore
49.172 335.309 mo
59.129 335.309 li
59.129 345.27 li
49.172 345.27 li
cp
@
125.129 370.59 mo
135.09 370.59 li
135.09 380.551 li
125.129 380.551 li
cp
@
201.09 389.672 mo
211.051 389.672 li
211.051 399.629 li
201.09 399.629 li
cp
@
277.051 409.469 mo
287.012 409.469 li
287.012 419.43 li
277.051 419.43 li
cp
@
352.949 384.27 mo
362.91 384.27 li
362.91 394.231 li
352.949 394.231 li
cp
@
428.91 409.949 mo
438.871 409.949 li
438.871 419.91 li
428.91 419.91 li
cp
@
504.871 402.809 mo
514.828 402.809 li
514.828 412.77 li
504.871 412.77 li
cp
@
580.828 410.551 mo
590.789 410.551 li
590.789 420.512 li
580.828 420.512 li
cp
@
656.789 408.512 mo
666.75 408.512 li
666.75 418.469 li
656.789 418.469 li
cp
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
54.18 237.719 mo
130.109 298.148 li
206.07 269.07 li
282.031 269.43 li
357.988 255.328 li
433.949 254.609 li
509.91 256.051 li
585.809 254.609 li
661.789 254.609 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
59.16 242.699 mo
49.141 232.68 li
49.141 242.699 mo
59.16 232.68 li
.621118 .109194 .980743 .0040589 cmyk
@
135.121 303.121 mo
125.102 293.102 li
125.102 303.121 mo
135.121 293.102 li
@
211.078 274.02 mo
201.059 264 li
201.059 274.02 mo
211.078 264 li
@
287.039 274.379 mo
277.02 264.359 li
277.02 274.379 mo
287.039 264.359 li
@
362.941 260.34 mo
352.922 250.32 li
352.922 260.34 mo
362.941 250.32 li
@
438.898 259.621 mo
428.879 249.602 li
428.879 259.621 mo
438.898 249.602 li
@
514.859 261 mo
504.84 250.98 li
504.84 261 mo
514.859 250.98 li
@
590.82 259.621 mo
580.801 249.602 li
580.801 259.621 mo
590.82 249.602 li
@
666.781 259.621 mo
656.762 249.602 li
656.762 259.621 mo
666.781 249.602 li
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
54.18 325.801 mo
130.109 387.512 li
206.07 395.969 li
282.031 417.762 li
357.988 415.531 li
433.949 397.531 li
509.91 406.23 li
585.809 411.09 li
661.789 411.449 li
@
grestore
49.172 320.789 mo
59.129 320.789 li
59.129 330.75 li
49.172 330.75 li
cp
@
125.129 382.531 mo
135.09 382.531 li
135.09 392.488 li
125.129 392.488 li
cp
@
201.09 390.988 mo
211.051 390.988 li
211.051 400.949 li
201.09 400.949 li
cp
@
277.051 412.77 mo
287.012 412.77 li
287.012 422.731 li
277.051 422.731 li
cp
@
352.949 410.551 mo
362.91 410.551 li
362.91 420.512 li
352.949 420.512 li
cp
@
428.91 392.488 mo
438.871 392.488 li
438.871 402.449 li
428.91 402.449 li
cp
@
504.871 401.25 mo
514.828 401.25 li
514.828 411.211 li
504.871 411.211 li
cp
@
580.828 406.051 mo
590.789 406.051 li
590.789 416.012 li
580.828 416.012 li
cp
@
656.789 406.41 mo
666.75 406.41 li
666.75 416.371 li
656.789 416.371 li
cp
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
54.18 264.41 mo
130.109 300.93 li
206.07 323.641 li
282.031 281.191 li
357.988 284.91 li
433.949 277.828 li
509.91 276.57 li
585.809 274.051 li
661.789 269.789 li
0 .993988 1 0 cmyk
@
grestore
59.16 269.398 mo
49.141 259.379 li
49.141 269.398 mo
59.16 259.379 li
0 .993988 1 0 cmyk
@
135.121 305.941 mo
125.102 295.922 li
125.102 305.941 mo
135.121 295.922 li
@
211.078 328.621 mo
201.059 318.602 li
201.059 328.621 mo
211.078 318.602 li
@
287.039 286.141 mo
277.02 276.121 li
277.02 286.141 mo
287.039 276.121 li
@
362.941 289.922 mo
352.922 279.898 li
352.922 289.922 mo
362.941 279.898 li
@
438.898 282.84 mo
428.879 272.82 li
428.879 282.84 mo
438.898 272.82 li
@
514.859 281.578 mo
504.84 271.559 li
504.84 281.578 mo
514.859 271.559 li
@
590.82 279.059 mo
580.801 269.039 li
580.801 279.059 mo
590.82 269.039 li
@
666.781 274.801 mo
656.762 264.781 li
656.762 274.801 mo
666.781 264.781 li
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
54.18 334.52 mo
130.109 371.43 li
206.07 388.289 li
282.031 391.711 li
357.988 384.75 li
433.949 402.031 li
509.91 379.711 li
585.809 390.57 li
661.789 409.289 li
@
grestore
49.172 329.488 mo
59.129 329.488 li
59.129 339.449 li
49.172 339.449 li
cp
@
125.129 366.391 mo
135.09 366.391 li
135.09 376.352 li
125.129 376.352 li
cp
@
201.09 383.25 mo
211.051 383.25 li
211.051 393.211 li
201.09 393.211 li
cp
@
277.051 386.73 mo
287.012 386.73 li
287.012 396.691 li
277.051 396.691 li
cp
@
352.949 379.77 mo
362.91 379.77 li
362.91 389.731 li
352.949 389.731 li
cp
@
428.91 396.988 mo
438.871 396.988 li
438.871 406.949 li
428.91 406.949 li
cp
@
504.871 374.672 mo
514.828 374.672 li
514.828 384.629 li
504.871 384.629 li
cp
@
580.828 385.59 mo
590.789 385.59 li
590.789 395.551 li
580.828 395.551 li
cp
@
656.789 404.25 mo
666.75 404.25 li
666.75 414.211 li
656.789 414.211 li
cp
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
54.18 277.41 mo
130.109 302.578 li
206.07 292.41 li
282.031 278.672 li
357.988 277.828 li
433.949 273.629 li
509.91 277.41 li
585.809 276.57 li
661.789 275.309 li
.62829 .284672 0 0 cmyk
@
grestore
58.68 281.879 mo
49.621 272.82 li
49.621 281.879 mo
58.68 272.82 li
.62829 .284672 0 0 cmyk
@
134.641 307.078 mo
125.578 298.02 li
125.578 307.078 mo
134.641 298.02 li
@
210.602 296.941 mo
201.539 287.879 li
201.539 296.941 mo
210.602 287.879 li
@
286.559 283.199 mo
277.5 274.141 li
277.5 283.199 mo
286.559 274.141 li
@
362.461 282.359 mo
353.398 273.301 li
353.398 282.359 mo
362.461 273.301 li
@
438.422 278.102 mo
429.359 269.039 li
429.359 278.102 mo
438.422 269.039 li
@
514.379 281.941 mo
505.32 272.879 li
505.32 281.941 mo
514.379 272.879 li
@
590.34 281.102 mo
581.281 272.039 li
581.281 281.102 mo
590.34 272.039 li
@
666.301 279.84 mo
657.238 270.781 li
657.238 279.84 mo
666.301 270.781 li
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
54.18 347.602 mo
130.109 372.449 li
206.07 386.488 li
282.031 410.09 li
357.988 401.012 li
433.949 396.211 li
509.91 399.93 li
585.809 403.531 li
661.789 392.07 li
@
grestore
49.172 342.57 mo
59.129 342.57 li
59.129 352.531 li
49.172 352.531 li
cp
@
125.129 367.469 mo
135.09 367.469 li
135.09 377.43 li
125.129 377.43 li
cp
@
201.09 381.512 mo
211.051 381.512 li
211.051 391.469 li
201.09 391.469 li
cp
@
277.051 405.09 mo
287.012 405.09 li
287.012 415.051 li
277.051 415.051 li
cp
@
352.949 395.969 mo
362.91 395.969 li
362.91 405.93 li
352.949 405.93 li
cp
@
428.91 391.23 mo
438.871 391.23 li
438.871 401.191 li
428.91 401.191 li
cp
@
504.871 394.891 mo
514.828 394.891 li
514.828 404.852 li
504.871 404.852 li
cp
@
580.828 398.488 mo
590.789 398.488 li
590.789 408.449 li
580.828 408.449 li
cp
@
656.789 387.09 mo
666.75 387.09 li
666.75 397.051 li
656.789 397.051 li
cp
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
54.18 270.988 mo
130.109 298.648 li
206.07 322.16 li
282.031 285.031 li
357.988 277.828 li
433.949 277.828 li
509.91 273.629 li
585.809 275.73 li
661.789 274.051 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
59.16 275.941 mo
49.141 265.922 li
49.141 275.941 mo
59.16 265.922 li
.0321965 .622736 .922606 .000579843 cmyk
@
135.121 303.66 mo
125.102 293.641 li
125.102 303.66 mo
135.121 293.641 li
@
211.078 327.121 mo
201.059 317.102 li
201.059 327.121 mo
211.078 317.102 li
@
287.039 289.98 mo
277.02 279.961 li
277.02 289.98 mo
287.039 279.961 li
@
362.941 282.84 mo
352.922 272.82 li
352.922 282.84 mo
362.941 272.82 li
@
438.898 282.84 mo
428.879 272.82 li
428.879 282.84 mo
438.898 272.82 li
@
514.859 278.578 mo
504.84 268.559 li
504.84 278.578 mo
514.859 268.559 li
@
590.82 280.738 mo
580.801 270.719 li
580.801 280.738 mo
590.82 270.719 li
@
666.781 279.059 mo
656.762 269.039 li
656.762 279.059 mo
666.781 269.039 li
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
54.18 352.148 mo
130.109 381.75 li
206.07 404.191 li
282.031 414.602 li
357.988 399.57 li
433.949 408.27 li
509.91 394.648 li
585.809 401.551 li
661.789 393.09 li
@
grestore
49.648 347.609 mo
58.589 347.609 li
58.589 356.55 li
49.648 356.55 li
cp
@
125.609 377.25 mo
134.55 377.25 li
134.55 386.191 li
125.609 386.191 li
cp
@
201.57 399.629 mo
210.511 399.629 li
210.511 408.57 li
201.57 408.57 li
cp
@
277.531 410.07 mo
286.469 410.07 li
286.469 419.011 li
277.531 419.011 li
cp
@
353.43 395.012 mo
362.371 395.012 li
362.371 403.95 li
353.43 403.95 li
cp
@
429.391 403.711 mo
438.329 403.711 li
438.329 412.649 li
429.391 412.649 li
cp
@
505.352 390.148 mo
514.29 390.148 li
514.29 399.089 li
505.352 399.089 li
cp
@
581.309 397.051 mo
590.25 397.051 li
590.25 405.989 li
581.309 405.989 li
cp
@
657.27 388.531 mo
666.211 388.531 li
666.211 397.469 li
657.27 397.469 li
cp
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
54.18 270.988 mo
130.109 325.148 li
206.07 320.91 li
282.031 277.828 li
357.988 277.41 li
433.949 275.371 li
509.91 276.57 li
585.809 281.25 li
661.789 279.09 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
59.16 275.941 mo
49.141 265.922 li
49.141 275.941 mo
59.16 265.922 li
.621118 .109194 .980743 .0040589 cmyk
@
135.121 330.121 mo
125.102 320.102 li
125.102 330.121 mo
135.121 320.102 li
@
211.078 325.859 mo
201.059 315.84 li
201.059 325.859 mo
211.078 315.84 li
@
287.039 282.84 mo
277.02 272.82 li
277.02 282.84 mo
287.039 272.82 li
@
362.941 282.422 mo
352.922 272.398 li
352.922 282.422 mo
362.941 272.398 li
@
438.898 280.32 mo
428.879 270.301 li
428.879 280.32 mo
438.898 270.301 li
@
514.859 281.578 mo
504.84 271.559 li
504.84 281.578 mo
514.859 271.559 li
@
590.82 286.199 mo
580.801 276.18 li
580.801 286.199 mo
590.82 276.18 li
@
666.781 284.102 mo
656.762 274.078 li
656.762 284.102 mo
666.781 274.078 li
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
54.18 347.488 mo
130.109 374.191 li
206.07 386.129 li
282.031 418.711 li
357.988 400.352 li
433.949 397.172 li
509.91 389.25 li
585.809 382.051 li
661.789 410.488 li
@
grestore
49.172 342.449 mo
59.129 342.449 li
59.129 352.41 li
49.172 352.41 li
cp
@
125.129 369.211 mo
135.09 369.211 li
135.09 379.172 li
125.129 379.172 li
cp
@
201.09 381.148 mo
211.051 381.148 li
211.051 391.109 li
201.09 391.109 li
cp
@
277.051 413.73 mo
287.012 413.73 li
287.012 423.691 li
277.051 423.691 li
cp
@
352.949 395.371 mo
362.91 395.371 li
362.91 405.328 li
352.949 405.328 li
cp
@
428.91 392.191 mo
438.871 392.191 li
438.871 402.148 li
428.91 402.148 li
cp
@
504.871 384.27 mo
514.828 384.27 li
514.828 394.231 li
504.871 394.231 li
cp
@
580.828 377.012 mo
590.789 377.012 li
590.789 386.969 li
580.828 386.969 li
cp
@
656.789 405.449 mo
666.75 405.449 li
666.75 415.41 li
656.789 415.41 li
cp
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
54.18 273.309 mo
130.109 294.809 li
206.07 323.012 li
282.031 316.648 li
357.988 287.012 li
433.949 275.73 li
509.91 308.25 li
585.809 276.57 li
661.789 274.469 li
0 .993988 1 0 cmyk
@
grestore
59.16 278.281 mo
49.141 268.262 li
49.141 278.281 mo
59.16 268.262 li
0 .993988 1 0 cmyk
@
135.121 299.762 mo
125.102 289.738 li
125.102 299.762 mo
135.121 289.738 li
@
211.078 327.961 mo
201.059 317.941 li
201.059 327.961 mo
211.078 317.941 li
@
287.039 321.66 mo
277.02 311.641 li
277.02 321.66 mo
287.039 311.641 li
@
362.941 292.02 mo
352.922 282 li
352.922 292.02 mo
362.941 282 li
@
438.898 280.738 mo
428.879 270.719 li
428.879 280.738 mo
438.898 270.719 li
@
514.859 313.199 mo
504.84 303.18 li
504.84 313.199 mo
514.859 303.18 li
@
590.82 281.578 mo
580.801 271.559 li
580.801 281.578 mo
590.82 271.559 li
@
666.781 279.48 mo
656.762 269.461 li
656.762 279.48 mo
666.781 269.461 li
@
gsave
54.148 29.91 mo
662.488 29.91 li
662.488 519.148 li
54.148 519.148 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
54.18 328.488 mo
130.109 383.191 li
206.07 391.828 li
282.031 401.91 li
357.988 409.828 li
433.949 414.48 li
509.91 389.191 li
585.809 409.289 li
661.789 397.828 li
@
grestore
49.172 323.488 mo
59.129 323.488 li
59.129 333.449 li
49.172 333.449 li
cp
@
125.129 378.211 mo
135.09 378.211 li
135.09 388.172 li
125.129 388.172 li
cp
@
201.09 386.789 mo
211.051 386.789 li
211.051 396.75 li
201.09 396.75 li
cp
@
277.051 396.93 mo
287.012 396.93 li
287.012 406.891 li
277.051 406.891 li
cp
@
352.949 404.852 mo
362.91 404.852 li
362.91 414.809 li
352.949 414.809 li
cp
@
428.91 409.469 mo
438.871 409.469 li
438.871 419.43 li
428.91 419.43 li
cp
@
504.871 384.148 mo
514.828 384.148 li
514.828 394.109 li
504.871 394.109 li
cp
@
580.828 404.309 mo
590.789 404.309 li
590.789 414.27 li
580.828 414.27 li
cp
@
656.789 392.789 mo
666.75 392.789 li
666.75 402.75 li
656.789 402.75 li
cp
@
34.098 509.109 mo
41.196 509.109 li
41.196 526.199 li
34.098 526.199 li
cp
0 0 0 0 cmyk
ef
40.711 518.051 mo
40.707 518.734 40.652 519.352 40.551 519.91 cv
40.441 520.469 40.266 520.949 40.016 521.352 cv
39.766 521.758 39.441 522.07 39.043 522.289 cv
38.645 522.508 38.148 522.617 37.563 522.617 cv
37.004 522.617 36.539 522.52 36.16 522.32 cv
35.777 522.125 35.469 521.836 35.242 521.449 cv
35.008 521.066 34.844 520.59 34.746 520.027 cv
34.648 519.465 34.602 518.82 34.602 518.094 cv
34.602 517.422 34.656 516.805 34.766 516.238 cv
34.875 515.68 35.051 515.199 35.297 514.793 cv
35.539 514.395 35.863 514.082 36.266 513.859 cv
36.664 513.641 37.156 513.531 37.742 513.527 cv
38.301 513.531 38.77 513.629 39.148 513.824 cv
39.527 514.023 39.832 514.316 40.066 514.699 cv
40.297 515.086 40.461 515.559 40.563 516.117 cv
40.656 516.684 40.707 517.328 40.711 518.051 cv
cp
39.508 518.133 mo
39.504 517.695 39.488 517.297 39.461 516.945 cv
39.426 516.594 39.379 516.285 39.32 516.016 cv
39.258 515.75 39.18 515.52 39.082 515.324 cv
38.98 515.133 38.863 514.973 38.73 514.848 cv
38.594 514.723 38.438 514.633 38.262 514.574 cv
38.086 514.52 37.891 514.492 37.672 514.488 cv
37.285 514.492 36.969 514.582 36.73 514.762 cv
36.484 514.945 36.297 515.195 36.16 515.512 cv
36.02 515.832 35.922 516.207 35.875 516.633 cv
35.82 517.062 35.797 517.52 35.801 518.012 cv
35.797 518.672 35.832 519.234 35.902 519.695 cv
35.973 520.16 36.078 520.535 36.227 520.824 cv
36.371 521.113 36.563 521.324 36.793 521.457 cv
37.023 521.59 37.301 521.656 37.633 521.656 cv
37.883 521.656 38.109 521.617 38.305 521.535 cv
38.496 521.453 38.66 521.336 38.801 521.184 cv
38.938 521.031 39.055 520.848 39.148 520.633 cv
39.238 520.422 39.309 520.184 39.367 519.922 cv
39.418 519.664 39.457 519.383 39.477 519.078 cv
39.496 518.777 39.504 518.465 39.508 518.133 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
34.098 460.262 mo
41.196 460.262 li
41.196 477.352 li
34.098 477.352 li
cp
0 0 0 0 cmyk
ef
40.375 470.789 mo
40.371 471.266 40.293 471.687 40.137 472.055 cv
39.977 472.426 39.75 472.734 39.461 472.984 cv
39.164 473.238 38.816 473.434 38.418 473.562 cv
38.012 473.695 37.566 473.758 37.078 473.758 cv
36.801 473.758 36.543 473.738 36.301 473.699 cv
36.055 473.66 35.836 473.613 35.645 473.559 cv
35.453 473.504 35.293 473.449 35.172 473.391 cv
35.047 473.34 34.969 473.297 34.938 473.262 cv
34.898 473.23 34.875 473.199 34.867 473.172 cv
34.852 473.145 34.84 473.113 34.828 473.074 cv
34.816 473.039 34.809 472.988 34.805 472.926 cv
34.797 472.867 34.793 472.797 34.797 472.715 cv
34.793 472.637 34.797 472.57 34.809 472.508 cv
34.813 472.449 34.828 472.398 34.848 472.355 cv
34.863 472.32 34.883 472.289 34.91 472.27 cv
34.934 472.254 34.961 472.246 34.996 472.242 cv
35.039 472.246 35.109 472.273 35.207 472.328 cv
35.301 472.387 35.43 472.449 35.594 472.516 cv
35.75 472.582 35.953 472.645 36.195 472.703 cv
36.434 472.762 36.715 472.793 37.043 472.789 cv
37.348 472.793 37.629 472.754 37.883 472.68 cv
38.137 472.609 38.355 472.496 38.543 472.34 cv
38.727 472.184 38.871 471.988 38.977 471.754 cv
39.078 471.52 39.129 471.234 39.133 470.898 cv
39.129 470.617 39.086 470.371 39 470.152 cv
38.91 469.941 38.773 469.762 38.59 469.613 cv
38.402 469.473 38.168 469.363 37.891 469.293 cv
37.605 469.223 37.27 469.187 36.879 469.184 cv
36.602 469.187 36.363 469.203 36.164 469.227 cv
35.961 469.258 35.773 469.27 35.605 469.266 cv
35.473 469.27 35.383 469.242 35.332 469.18 cv
35.273 469.125 35.246 469.008 35.25 468.836 cv
35.25 465.238 li
35.246 465.09 35.281 464.98 35.355 464.906 cv
35.422 464.836 35.523 464.801 35.66 464.797 cv
39.57 464.797 li
39.605 464.801 39.641 464.809 39.676 464.828 cv
39.707 464.848 39.734 464.879 39.762 464.918 cv
39.781 464.961 39.797 465.016 39.813 465.078 cv
39.82 465.145 39.828 465.219 39.828 465.301 cv
39.828 465.469 39.805 465.594 39.762 465.684 cv
39.719 465.777 39.66 465.824 39.582 465.82 cv
36.422 465.82 li
36.422 468.297 li
36.574 468.273 36.73 468.262 36.891 468.258 cv
37.051 468.254 37.238 468.25 37.449 468.25 cv
37.934 468.25 38.355 468.312 38.723 468.434 cv
39.082 468.555 39.387 468.727 39.633 468.945 cv
39.875 469.168 40.059 469.434 40.188 469.746 cv
40.309 470.062 40.371 470.41 40.375 470.789 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
27.004 411.41 mo
41.195 411.41 li
41.195 428.5 li
27.004 428.5 li
cp
0 0 0 0 cmyk
ef
33.34 424.324 mo
33.34 424.414 33.332 424.484 33.316 424.543 cv
33.301 424.605 33.281 424.656 33.262 424.687 cv
33.238 424.727 33.211 424.75 33.184 424.766 cv
33.152 424.781 33.125 424.789 33.094 424.789 cv
28.48 424.789 li
28.445 424.789 28.414 424.781 28.391 424.766 cv
28.359 424.75 28.336 424.727 28.313 424.687 cv
28.285 424.656 28.266 424.605 28.254 424.543 cv
28.238 424.484 28.23 424.414 28.234 424.324 cv
28.23 424.246 28.238 424.176 28.254 424.113 cv
28.266 424.059 28.281 424.008 28.305 423.969 cv
28.324 423.93 28.348 423.902 28.379 423.879 cv
28.406 423.863 28.441 423.852 28.48 423.848 cv
30.324 423.848 li
30.324 417.129 li
28.617 418.148 li
28.527 418.195 28.457 418.223 28.406 418.23 cv
28.352 418.242 28.309 418.23 28.281 418.199 cv
28.246 418.172 28.223 418.121 28.215 418.051 cv
28.199 417.984 28.195 417.898 28.199 417.793 cv
28.195 417.715 28.199 417.648 28.207 417.594 cv
28.215 417.539 28.223 417.496 28.238 417.457 cv
28.25 417.426 28.27 417.395 28.297 417.363 cv
28.32 417.34 28.355 417.312 28.398 417.281 cv
30.43 415.977 li
30.445 415.965 30.469 415.957 30.496 415.945 cv
30.523 415.937 30.559 415.926 30.602 415.918 cv
30.641 415.91 30.688 415.906 30.746 415.898 cv
30.797 415.898 30.867 415.895 30.949 415.895 cv
31.059 415.895 31.148 415.902 31.223 415.91 cv
31.293 415.922 31.352 415.934 31.395 415.945 cv
31.434 415.965 31.461 415.984 31.477 416.008 cv
31.488 416.035 31.492 416.062 31.496 416.086 cv
31.496 423.848 li
33.094 423.848 li
33.129 423.852 33.16 423.863 33.195 423.879 cv
33.223 423.902 33.25 423.93 33.273 423.969 cv
33.293 424.008 33.309 424.059 33.32 424.113 cv
33.332 424.176 33.34 424.246 33.34 424.324 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.691 420.352 mo
40.688 421.035 40.633 421.652 40.531 422.211 cv
40.422 422.77 40.246 423.25 39.996 423.652 cv
39.746 424.059 39.422 424.371 39.023 424.59 cv
38.625 424.809 38.129 424.918 37.543 424.918 cv
36.984 424.918 36.52 424.82 36.141 424.621 cv
35.758 424.426 35.449 424.137 35.223 423.75 cv
34.988 423.367 34.824 422.891 34.727 422.328 cv
34.629 421.766 34.582 421.121 34.582 420.395 cv
34.582 419.723 34.637 419.105 34.746 418.539 cv
34.855 417.98 35.031 417.5 35.277 417.094 cv
35.52 416.695 35.844 416.383 36.246 416.16 cv
36.645 415.941 37.137 415.832 37.723 415.828 cv
38.281 415.832 38.75 415.93 39.129 416.125 cv
39.508 416.324 39.813 416.617 40.047 417 cv
40.277 417.387 40.441 417.859 40.543 418.418 cv
40.637 418.984 40.688 419.629 40.691 420.352 cv
cp
39.488 420.434 mo
39.484 419.996 39.469 419.598 39.441 419.246 cv
39.406 418.895 39.359 418.586 39.301 418.316 cv
39.238 418.051 39.16 417.82 39.063 417.625 cv
38.961 417.434 38.844 417.273 38.711 417.148 cv
38.574 417.023 38.418 416.934 38.242 416.875 cv
38.066 416.82 37.871 416.793 37.652 416.789 cv
37.266 416.793 36.949 416.883 36.711 417.062 cv
36.465 417.246 36.277 417.496 36.141 417.812 cv
36 418.133 35.902 418.508 35.855 418.934 cv
35.801 419.363 35.777 419.82 35.781 420.312 cv
35.777 420.973 35.813 421.535 35.883 421.996 cv
35.953 422.461 36.059 422.836 36.207 423.125 cv
36.352 423.414 36.543 423.625 36.773 423.758 cv
37.004 423.891 37.281 423.957 37.613 423.957 cv
37.863 423.957 38.09 423.918 38.285 423.836 cv
38.477 423.754 38.641 423.637 38.781 423.484 cv
38.918 423.332 39.035 423.148 39.129 422.934 cv
39.219 422.723 39.289 422.484 39.348 422.223 cv
39.398 421.965 39.438 421.684 39.457 421.379 cv
39.477 421.078 39.484 420.766 39.488 420.434 cv
cp
f
27.004 362.559 mo
41.195 362.559 li
41.195 379.649 li
27.004 379.649 li
cp
0 0 0 0 cmyk
ef
33.34 375.465 mo
33.34 375.555 33.332 375.625 33.316 375.684 cv
33.301 375.746 33.281 375.797 33.262 375.828 cv
33.238 375.867 33.211 375.891 33.184 375.906 cv
33.152 375.922 33.125 375.93 33.094 375.93 cv
28.48 375.93 li
28.445 375.93 28.414 375.922 28.391 375.906 cv
28.359 375.891 28.336 375.867 28.313 375.828 cv
28.285 375.797 28.266 375.746 28.254 375.684 cv
28.238 375.625 28.23 375.555 28.234 375.465 cv
28.23 375.387 28.238 375.316 28.254 375.254 cv
28.266 375.199 28.281 375.148 28.305 375.109 cv
28.324 375.07 28.348 375.043 28.379 375.02 cv
28.406 375.004 28.441 374.992 28.48 374.988 cv
30.324 374.988 li
30.324 368.27 li
28.617 369.289 li
28.527 369.336 28.457 369.363 28.406 369.371 cv
28.352 369.383 28.309 369.371 28.281 369.34 cv
28.246 369.312 28.223 369.262 28.215 369.191 cv
28.199 369.125 28.195 369.039 28.199 368.934 cv
28.195 368.855 28.199 368.789 28.207 368.734 cv
28.215 368.68 28.223 368.637 28.238 368.598 cv
28.25 368.566 28.27 368.535 28.297 368.504 cv
28.32 368.48 28.355 368.453 28.398 368.422 cv
30.43 367.117 li
30.445 367.105 30.469 367.098 30.496 367.086 cv
30.523 367.078 30.559 367.066 30.602 367.059 cv
30.641 367.051 30.688 367.047 30.746 367.039 cv
30.797 367.039 30.867 367.035 30.949 367.035 cv
31.059 367.035 31.148 367.043 31.223 367.051 cv
31.293 367.062 31.352 367.074 31.395 367.086 cv
31.434 367.105 31.461 367.125 31.477 367.148 cv
31.488 367.176 31.492 367.203 31.496 367.227 cv
31.496 374.988 li
33.094 374.988 li
33.129 374.992 33.16 375.004 33.195 375.02 cv
33.223 375.043 33.25 375.07 33.273 375.109 cv
33.293 375.148 33.309 375.199 33.32 375.254 cv
33.332 375.316 33.34 375.387 33.34 375.465 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.355 373.09 mo
40.352 373.566 40.273 373.988 40.117 374.355 cv
39.957 374.727 39.73 375.035 39.441 375.285 cv
39.145 375.539 38.797 375.734 38.398 375.863 cv
37.992 375.996 37.547 376.059 37.059 376.059 cv
36.781 376.059 36.523 376.039 36.281 376 cv
36.035 375.961 35.816 375.914 35.625 375.859 cv
35.434 375.805 35.273 375.75 35.152 375.691 cv
35.027 375.641 34.949 375.598 34.918 375.562 cv
34.879 375.531 34.855 375.5 34.848 375.473 cv
34.832 375.445 34.82 375.414 34.809 375.375 cv
34.797 375.34 34.789 375.289 34.785 375.227 cv
34.777 375.168 34.773 375.098 34.777 375.016 cv
34.773 374.937 34.777 374.871 34.789 374.809 cv
34.793 374.75 34.809 374.699 34.828 374.656 cv
34.844 374.621 34.863 374.59 34.891 374.57 cv
34.914 374.555 34.941 374.547 34.977 374.543 cv
35.02 374.547 35.09 374.574 35.188 374.629 cv
35.281 374.687 35.41 374.75 35.574 374.816 cv
35.73 374.883 35.934 374.945 36.176 375.004 cv
36.414 375.062 36.695 375.094 37.023 375.09 cv
37.328 375.094 37.609 375.055 37.863 374.98 cv
38.117 374.91 38.336 374.797 38.523 374.641 cv
38.707 374.484 38.852 374.289 38.957 374.055 cv
39.059 373.82 39.109 373.535 39.113 373.199 cv
39.109 372.918 39.066 372.672 38.98 372.453 cv
38.891 372.242 38.754 372.062 38.57 371.914 cv
38.383 371.773 38.148 371.664 37.871 371.594 cv
37.586 371.523 37.25 371.488 36.859 371.484 cv
36.582 371.488 36.344 371.504 36.145 371.527 cv
35.941 371.559 35.754 371.57 35.586 371.566 cv
35.453 371.57 35.363 371.543 35.313 371.48 cv
35.254 371.426 35.227 371.309 35.23 371.137 cv
35.23 367.539 li
35.227 367.391 35.262 367.281 35.336 367.207 cv
35.402 367.137 35.504 367.102 35.641 367.098 cv
39.551 367.098 li
39.586 367.102 39.621 367.109 39.656 367.129 cv
39.688 367.148 39.715 367.18 39.742 367.219 cv
39.762 367.262 39.777 367.316 39.793 367.379 cv
39.801 367.445 39.809 367.52 39.809 367.602 cv
39.809 367.77 39.785 367.895 39.742 367.984 cv
39.699 368.078 39.641 368.125 39.563 368.121 cv
36.402 368.121 li
36.402 370.598 li
36.555 370.574 36.711 370.562 36.871 370.559 cv
37.031 370.555 37.219 370.551 37.43 370.551 cv
37.914 370.551 38.336 370.613 38.703 370.734 cv
39.063 370.855 39.367 371.027 39.613 371.246 cv
39.855 371.469 40.039 371.734 40.168 372.047 cv
40.289 372.363 40.352 372.711 40.355 373.09 cv
cp
f
27.004 313.711 mo
41.195 313.711 li
41.195 330.801 li
27.004 330.801 li
cp
0 0 0 0 cmyk
ef
33.32 326.566 mo
33.316 326.648 33.309 326.723 33.301 326.785 cv
33.285 326.852 33.27 326.906 33.254 326.945 cv
33.23 326.992 33.203 327.023 33.172 327.039 cv
33.133 327.062 33.098 327.07 33.059 327.07 cv
28.18 327.07 li
28.109 327.07 28.055 327.062 28.012 327.047 cv
27.961 327.031 27.918 327.008 27.887 326.969 cv
27.848 326.937 27.824 326.883 27.813 326.812 cv
27.793 326.742 27.785 326.66 27.789 326.559 cv
27.785 326.473 27.789 326.391 27.801 326.32 cv
27.805 326.254 27.82 326.195 27.848 326.141 cv
27.867 326.09 27.895 326.035 27.934 325.98 cv
27.965 325.93 28.012 325.875 28.07 325.812 cv
29.836 324 li
30.242 323.582 30.566 323.207 30.816 322.875 cv
31.059 322.543 31.25 322.242 31.387 321.965 cv
31.52 321.695 31.609 321.445 31.652 321.223 cv
31.691 321 31.711 320.793 31.715 320.594 cv
31.711 320.398 31.68 320.211 31.617 320.035 cv
31.551 319.863 31.453 319.711 31.332 319.578 cv
31.203 319.449 31.047 319.344 30.863 319.262 cv
30.672 319.187 30.457 319.148 30.215 319.145 cv
29.926 319.148 29.668 319.187 29.441 319.262 cv
29.211 319.344 29.012 319.43 28.844 319.516 cv
28.668 319.609 28.523 319.691 28.414 319.766 cv
28.297 319.848 28.211 319.887 28.156 319.883 cv
28.121 319.887 28.094 319.879 28.07 319.855 cv
28.043 319.84 28.02 319.809 28.004 319.766 cv
27.984 319.727 27.973 319.672 27.965 319.602 cv
27.953 319.535 27.949 319.453 27.953 319.355 cv
27.949 319.289 27.953 319.23 27.961 319.18 cv
27.965 319.133 27.973 319.09 27.984 319.051 cv
27.992 319.016 28.004 318.98 28.027 318.949 cv
28.043 318.918 28.082 318.879 28.137 318.828 cv
28.191 318.785 28.285 318.723 28.418 318.637 cv
28.551 318.559 28.719 318.477 28.926 318.391 cv
29.125 318.312 29.348 318.246 29.594 318.191 cv
29.836 318.141 30.094 318.113 30.363 318.109 cv
30.789 318.113 31.16 318.172 31.484 318.289 cv
31.805 318.41 32.074 318.574 32.285 318.785 cv
32.496 318.996 32.652 319.242 32.758 319.516 cv
32.863 319.797 32.918 320.09 32.918 320.402 cv
32.918 320.684 32.891 320.965 32.84 321.246 cv
32.789 321.527 32.684 321.832 32.523 322.152 cv
32.359 322.48 32.125 322.84 31.824 323.238 cv
31.516 323.637 31.113 324.098 30.609 324.613 cv
29.211 326.074 li
33.055 326.074 li
33.086 326.074 33.121 326.086 33.16 326.105 cv
33.191 326.129 33.223 326.16 33.246 326.199 cv
33.27 326.242 33.285 326.293 33.301 326.352 cv
33.309 326.414 33.316 326.484 33.32 326.566 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.691 322.633 mo
40.688 323.316 40.633 323.934 40.531 324.492 cv
40.422 325.051 40.246 325.531 39.996 325.934 cv
39.746 326.34 39.422 326.652 39.023 326.871 cv
38.625 327.09 38.129 327.199 37.543 327.199 cv
36.984 327.199 36.52 327.102 36.141 326.902 cv
35.758 326.707 35.449 326.418 35.223 326.031 cv
34.988 325.648 34.824 325.172 34.727 324.609 cv
34.629 324.047 34.582 323.402 34.582 322.676 cv
34.582 322.004 34.637 321.387 34.746 320.82 cv
34.855 320.262 35.031 319.781 35.277 319.375 cv
35.52 318.977 35.844 318.664 36.246 318.441 cv
36.645 318.223 37.137 318.113 37.723 318.109 cv
38.281 318.113 38.75 318.211 39.129 318.406 cv
39.508 318.605 39.813 318.898 40.047 319.281 cv
40.277 319.668 40.441 320.141 40.543 320.699 cv
40.637 321.266 40.688 321.91 40.691 322.633 cv
cp
39.488 322.715 mo
39.484 322.277 39.469 321.879 39.441 321.527 cv
39.406 321.176 39.359 320.867 39.301 320.598 cv
39.238 320.332 39.16 320.102 39.063 319.906 cv
38.961 319.715 38.844 319.555 38.711 319.43 cv
38.574 319.305 38.418 319.215 38.242 319.156 cv
38.066 319.102 37.871 319.074 37.652 319.07 cv
37.266 319.074 36.949 319.164 36.711 319.344 cv
36.465 319.527 36.277 319.777 36.141 320.094 cv
36 320.414 35.902 320.789 35.855 321.215 cv
35.801 321.645 35.777 322.102 35.781 322.594 cv
35.777 323.254 35.813 323.816 35.883 324.277 cv
35.953 324.742 36.059 325.117 36.207 325.406 cv
36.352 325.695 36.543 325.906 36.773 326.039 cv
37.004 326.172 37.281 326.238 37.613 326.238 cv
37.863 326.238 38.09 326.199 38.285 326.117 cv
38.477 326.035 38.641 325.918 38.781 325.766 cv
38.918 325.613 39.035 325.43 39.129 325.215 cv
39.219 325.004 39.289 324.766 39.348 324.504 cv
39.398 324.246 39.438 323.965 39.457 323.66 cv
39.477 323.359 39.484 323.047 39.488 322.715 cv
cp
f
27.004 264.859 mo
41.195 264.859 li
41.195 281.949 li
27.004 281.949 li
cp
0 0 0 0 cmyk
ef
33.32 277.707 mo
33.316 277.789 33.309 277.863 33.301 277.926 cv
33.285 277.992 33.27 278.047 33.254 278.086 cv
33.23 278.133 33.203 278.164 33.172 278.18 cv
33.133 278.203 33.098 278.211 33.059 278.211 cv
28.18 278.211 li
28.109 278.211 28.055 278.203 28.012 278.187 cv
27.961 278.172 27.918 278.148 27.887 278.109 cv
27.848 278.078 27.824 278.023 27.813 277.953 cv
27.793 277.883 27.785 277.801 27.789 277.699 cv
27.785 277.613 27.789 277.531 27.801 277.461 cv
27.805 277.395 27.82 277.336 27.848 277.281 cv
27.867 277.23 27.895 277.176 27.934 277.121 cv
27.965 277.07 28.012 277.016 28.07 276.953 cv
29.836 275.141 li
30.242 274.723 30.566 274.348 30.816 274.016 cv
31.059 273.684 31.25 273.383 31.387 273.105 cv
31.52 272.836 31.609 272.586 31.652 272.363 cv
31.691 272.141 31.711 271.934 31.715 271.734 cv
31.711 271.539 31.68 271.352 31.617 271.176 cv
31.551 271.004 31.453 270.852 31.332 270.719 cv
31.203 270.59 31.047 270.484 30.863 270.402 cv
30.672 270.328 30.457 270.289 30.215 270.285 cv
29.926 270.289 29.668 270.328 29.441 270.402 cv
29.211 270.484 29.012 270.57 28.844 270.656 cv
28.668 270.75 28.523 270.832 28.414 270.906 cv
28.297 270.988 28.211 271.027 28.156 271.023 cv
28.121 271.027 28.094 271.02 28.07 270.996 cv
28.043 270.98 28.02 270.949 28.004 270.906 cv
27.984 270.867 27.973 270.812 27.965 270.742 cv
27.953 270.676 27.949 270.594 27.953 270.496 cv
27.949 270.43 27.953 270.371 27.961 270.32 cv
27.965 270.273 27.973 270.23 27.984 270.191 cv
27.992 270.156 28.004 270.121 28.027 270.09 cv
28.043 270.059 28.082 270.02 28.137 269.969 cv
28.191 269.926 28.285 269.863 28.418 269.777 cv
28.551 269.699 28.719 269.617 28.926 269.531 cv
29.125 269.453 29.348 269.387 29.594 269.332 cv
29.836 269.281 30.094 269.254 30.363 269.25 cv
30.789 269.254 31.16 269.312 31.484 269.43 cv
31.805 269.551 32.074 269.715 32.285 269.926 cv
32.496 270.137 32.652 270.383 32.758 270.656 cv
32.863 270.937 32.918 271.23 32.918 271.543 cv
32.918 271.824 32.891 272.105 32.84 272.387 cv
32.789 272.668 32.684 272.973 32.523 273.293 cv
32.359 273.621 32.125 273.98 31.824 274.379 cv
31.516 274.777 31.113 275.238 30.609 275.754 cv
29.211 277.215 li
33.055 277.215 li
33.086 277.215 33.121 277.227 33.16 277.246 cv
33.191 277.27 33.223 277.301 33.246 277.34 cv
33.27 277.383 33.285 277.434 33.301 277.492 cv
33.309 277.555 33.316 277.625 33.32 277.707 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.355 275.371 mo
40.352 275.848 40.273 276.27 40.117 276.637 cv
39.957 277.008 39.73 277.316 39.441 277.566 cv
39.145 277.82 38.797 278.016 38.398 278.145 cv
37.992 278.277 37.547 278.34 37.059 278.34 cv
36.781 278.34 36.523 278.32 36.281 278.281 cv
36.035 278.242 35.816 278.195 35.625 278.141 cv
35.434 278.086 35.273 278.031 35.152 277.973 cv
35.027 277.922 34.949 277.879 34.918 277.844 cv
34.879 277.812 34.855 277.781 34.848 277.754 cv
34.832 277.727 34.82 277.695 34.809 277.656 cv
34.797 277.621 34.789 277.57 34.785 277.508 cv
34.777 277.449 34.773 277.379 34.777 277.297 cv
34.773 277.219 34.777 277.152 34.789 277.09 cv
34.793 277.031 34.809 276.98 34.828 276.937 cv
34.844 276.902 34.863 276.871 34.891 276.852 cv
34.914 276.836 34.941 276.828 34.977 276.824 cv
35.02 276.828 35.09 276.855 35.188 276.91 cv
35.281 276.969 35.41 277.031 35.574 277.098 cv
35.73 277.164 35.934 277.227 36.176 277.285 cv
36.414 277.344 36.695 277.375 37.023 277.371 cv
37.328 277.375 37.609 277.336 37.863 277.262 cv
38.117 277.191 38.336 277.078 38.523 276.922 cv
38.707 276.766 38.852 276.57 38.957 276.336 cv
39.059 276.102 39.109 275.816 39.113 275.48 cv
39.109 275.199 39.066 274.953 38.98 274.734 cv
38.891 274.523 38.754 274.344 38.57 274.195 cv
38.383 274.055 38.148 273.945 37.871 273.875 cv
37.586 273.805 37.25 273.77 36.859 273.766 cv
36.582 273.77 36.344 273.785 36.145 273.809 cv
35.941 273.84 35.754 273.852 35.586 273.848 cv
35.453 273.852 35.363 273.824 35.313 273.762 cv
35.254 273.707 35.227 273.59 35.23 273.418 cv
35.23 269.82 li
35.227 269.672 35.262 269.562 35.336 269.488 cv
35.402 269.418 35.504 269.383 35.641 269.379 cv
39.551 269.379 li
39.586 269.383 39.621 269.391 39.656 269.41 cv
39.688 269.43 39.715 269.461 39.742 269.5 cv
39.762 269.543 39.777 269.598 39.793 269.66 cv
39.801 269.727 39.809 269.801 39.809 269.883 cv
39.809 270.051 39.785 270.176 39.742 270.266 cv
39.699 270.359 39.641 270.406 39.563 270.402 cv
36.402 270.402 li
36.402 272.879 li
36.555 272.855 36.711 272.844 36.871 272.84 cv
37.031 272.836 37.219 272.832 37.43 272.832 cv
37.914 272.832 38.336 272.895 38.703 273.016 cv
39.063 273.137 39.367 273.309 39.613 273.527 cv
39.855 273.75 40.039 274.016 40.168 274.328 cv
40.289 274.645 40.352 274.992 40.355 275.371 cv
cp
f
27.004 216 mo
41.195 216 li
41.195 233.09 li
27.004 233.09 li
cp
0 0 0 0 cmyk
ef
33.25 226.824 mo
33.246 227.234 33.176 227.598 33.039 227.922 cv
32.895 228.25 32.691 228.531 32.43 228.758 cv
32.164 228.992 31.84 229.168 31.453 229.293 cv
31.066 229.418 30.629 229.48 30.145 229.48 cv
29.848 229.48 29.57 229.457 29.316 229.41 cv
29.055 229.363 28.828 229.309 28.629 229.242 cv
28.426 229.176 28.258 229.105 28.129 229.035 cv
27.996 228.965 27.914 228.914 27.883 228.883 cv
27.848 228.852 27.82 228.82 27.805 228.785 cv
27.781 228.758 27.766 228.719 27.754 228.672 cv
27.738 228.625 27.727 228.57 27.723 228.504 cv
27.715 228.437 27.715 228.355 27.715 228.258 cv
27.715 228.098 27.73 227.984 27.762 227.918 cv
27.793 227.859 27.84 227.828 27.902 227.824 cv
27.945 227.828 28.027 227.863 28.152 227.934 cv
28.273 228.004 28.434 228.082 28.629 228.168 cv
28.82 228.254 29.043 228.332 29.305 228.402 cv
29.563 228.477 29.852 228.516 30.172 228.512 cv
30.477 228.516 30.75 228.477 30.984 228.398 cv
31.219 228.324 31.414 228.215 31.574 228.07 cv
31.73 227.93 31.848 227.762 31.93 227.566 cv
32.008 227.375 32.051 227.164 32.051 226.934 cv
32.051 226.687 32 226.461 31.898 226.258 cv
31.797 226.059 31.648 225.887 31.453 225.742 cv
31.258 225.598 31.016 225.488 30.734 225.406 cv
30.445 225.332 30.125 225.293 29.766 225.289 cv
28.898 225.289 li
28.859 225.293 28.82 225.285 28.785 225.266 cv
28.75 225.254 28.719 225.227 28.695 225.187 cv
28.668 225.152 28.648 225.105 28.633 225.047 cv
28.613 224.988 28.605 224.91 28.609 224.812 cv
28.605 224.73 28.613 224.66 28.629 224.598 cv
28.641 224.543 28.66 224.496 28.688 224.461 cv
28.711 224.43 28.738 224.406 28.773 224.387 cv
28.801 224.375 28.836 224.367 28.883 224.363 cv
29.652 224.363 li
29.953 224.367 30.223 224.328 30.461 224.246 cv
30.699 224.172 30.902 224.059 31.07 223.91 cv
31.234 223.766 31.363 223.594 31.453 223.391 cv
31.539 223.191 31.582 222.965 31.586 222.711 cv
31.582 222.531 31.551 222.355 31.496 222.187 cv
31.434 222.023 31.348 221.879 31.23 221.754 cv
31.113 221.633 30.961 221.535 30.777 221.465 cv
30.59 221.395 30.375 221.359 30.137 221.359 cv
29.871 221.359 29.629 221.402 29.41 221.48 cv
29.184 221.562 28.988 221.645 28.82 221.734 cv
28.645 221.828 28.5 221.914 28.391 221.992 cv
28.273 222.07 28.195 222.109 28.152 222.109 cv
28.117 222.109 28.09 222.105 28.066 222.094 cv
28.039 222.082 28.016 222.059 28.004 222.023 cv
27.984 221.992 27.973 221.945 27.969 221.883 cv
27.961 221.824 27.961 221.742 27.961 221.637 cv
27.961 221.57 27.961 221.512 27.965 221.457 cv
27.969 221.41 27.977 221.363 27.992 221.32 cv
28.004 221.285 28.023 221.25 28.043 221.215 cv
28.059 221.187 28.086 221.152 28.133 221.105 cv
28.172 221.066 28.262 221.004 28.395 220.918 cv
28.527 220.84 28.688 220.758 28.883 220.672 cv
29.074 220.594 29.301 220.527 29.555 220.473 cv
29.805 220.422 30.074 220.395 30.371 220.391 cv
30.777 220.395 31.137 220.445 31.449 220.547 cv
31.754 220.652 32.012 220.801 32.223 220.992 cv
32.426 221.184 32.582 221.41 32.688 221.676 cv
32.785 221.941 32.836 222.238 32.84 222.559 cv
32.836 222.84 32.801 223.098 32.73 223.336 cv
32.656 223.574 32.547 223.785 32.41 223.969 cv
32.266 224.156 32.094 224.312 31.891 224.441 cv
31.684 224.57 31.449 224.66 31.184 224.711 cv
31.184 224.723 li
31.488 224.754 31.766 224.832 32.02 224.953 cv
32.27 225.074 32.488 225.227 32.672 225.406 cv
32.852 225.594 32.992 225.805 33.098 226.047 cv
33.195 226.289 33.246 226.551 33.25 226.824 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.691 224.914 mo
40.688 225.598 40.633 226.215 40.531 226.773 cv
40.422 227.332 40.246 227.812 39.996 228.215 cv
39.746 228.621 39.422 228.934 39.023 229.152 cv
38.625 229.371 38.129 229.48 37.543 229.48 cv
36.984 229.48 36.52 229.383 36.141 229.184 cv
35.758 228.988 35.449 228.699 35.223 228.312 cv
34.988 227.93 34.824 227.453 34.727 226.891 cv
34.629 226.328 34.582 225.684 34.582 224.957 cv
34.582 224.285 34.637 223.668 34.746 223.102 cv
34.855 222.543 35.031 222.062 35.277 221.656 cv
35.52 221.258 35.844 220.945 36.246 220.723 cv
36.645 220.504 37.137 220.395 37.723 220.391 cv
38.281 220.395 38.75 220.492 39.129 220.687 cv
39.508 220.887 39.813 221.18 40.047 221.562 cv
40.277 221.949 40.441 222.422 40.543 222.98 cv
40.637 223.547 40.688 224.191 40.691 224.914 cv
cp
39.488 224.996 mo
39.484 224.559 39.469 224.16 39.441 223.809 cv
39.406 223.457 39.359 223.148 39.301 222.879 cv
39.238 222.613 39.16 222.383 39.063 222.187 cv
38.961 221.996 38.844 221.836 38.711 221.711 cv
38.574 221.586 38.418 221.496 38.242 221.437 cv
38.066 221.383 37.871 221.355 37.652 221.352 cv
37.266 221.355 36.949 221.445 36.711 221.625 cv
36.465 221.809 36.277 222.059 36.141 222.375 cv
36 222.695 35.902 223.07 35.855 223.496 cv
35.801 223.926 35.777 224.383 35.781 224.875 cv
35.777 225.535 35.813 226.098 35.883 226.559 cv
35.953 227.023 36.059 227.398 36.207 227.687 cv
36.352 227.977 36.543 228.187 36.773 228.32 cv
37.004 228.453 37.281 228.52 37.613 228.52 cv
37.863 228.52 38.09 228.48 38.285 228.398 cv
38.477 228.316 38.641 228.199 38.781 228.047 cv
38.918 227.895 39.035 227.711 39.129 227.496 cv
39.219 227.285 39.289 227.047 39.348 226.785 cv
39.398 226.527 39.438 226.246 39.457 225.941 cv
39.477 225.641 39.484 225.328 39.488 224.996 cv
cp
f
27.004 167.148 mo
41.195 167.148 li
41.195 184.238 li
27.004 184.238 li
cp
0 0 0 0 cmyk
ef
33.262 177.957 mo
33.258 178.363 33.188 178.73 33.047 179.055 cv
32.906 179.383 32.703 179.664 32.438 179.895 cv
32.172 180.129 31.844 180.305 31.461 180.43 cv
31.07 180.555 30.633 180.617 30.148 180.617 cv
29.852 180.617 29.578 180.59 29.32 180.543 cv
29.063 180.496 28.832 180.445 28.633 180.375 cv
28.43 180.312 28.262 180.242 28.133 180.172 cv
27.996 180.102 27.914 180.051 27.883 180.02 cv
27.848 179.988 27.82 179.957 27.805 179.922 cv
27.781 179.891 27.766 179.852 27.758 179.805 cv
27.742 179.762 27.734 179.707 27.727 179.641 cv
27.719 179.574 27.715 179.492 27.715 179.395 cv
27.715 179.234 27.73 179.121 27.762 179.055 cv
27.793 178.992 27.84 178.961 27.906 178.957 cv
27.945 178.961 28.027 178.996 28.152 179.066 cv
28.273 179.141 28.434 179.219 28.629 179.305 cv
28.824 179.391 29.051 179.469 29.309 179.539 cv
29.566 179.613 29.855 179.652 30.176 179.648 cv
30.484 179.652 30.754 179.613 30.988 179.531 cv
31.219 179.457 31.414 179.348 31.578 179.203 cv
31.734 179.066 31.855 178.898 31.938 178.703 cv
32.016 178.512 32.055 178.301 32.059 178.066 cv
32.055 177.82 32.004 177.594 31.906 177.391 cv
31.801 177.191 31.652 177.02 31.461 176.871 cv
31.262 176.73 31.023 176.617 30.738 176.539 cv
30.453 176.461 30.129 176.422 29.77 176.422 cv
28.902 176.422 li
28.859 176.422 28.82 176.414 28.789 176.398 cv
28.75 176.383 28.723 176.355 28.699 176.316 cv
28.672 176.281 28.648 176.234 28.637 176.176 cv
28.617 176.117 28.609 176.039 28.613 175.941 cv
28.609 175.855 28.617 175.785 28.633 175.727 cv
28.645 175.672 28.664 175.625 28.688 175.59 cv
28.711 175.559 28.738 175.535 28.773 175.516 cv
28.805 175.504 28.844 175.496 28.887 175.492 cv
29.656 175.492 li
29.953 175.496 30.223 175.457 30.465 175.375 cv
30.699 175.301 30.902 175.187 31.074 175.039 cv
31.238 174.895 31.367 174.723 31.457 174.52 cv
31.543 174.32 31.586 174.094 31.59 173.836 cv
31.586 173.656 31.559 173.48 31.5 173.316 cv
31.441 173.152 31.352 173.008 31.234 172.883 cv
31.113 172.758 30.961 172.66 30.781 172.59 cv
30.594 172.52 30.383 172.484 30.145 172.484 cv
29.875 172.484 29.633 172.527 29.414 172.605 cv
29.191 172.687 28.992 172.77 28.82 172.859 cv
28.645 172.953 28.5 173.039 28.391 173.117 cv
28.273 173.195 28.195 173.234 28.152 173.234 cv
28.117 173.234 28.09 173.23 28.066 173.219 cv
28.043 173.207 28.02 173.184 28.004 173.148 cv
27.984 173.117 27.973 173.07 27.969 173.008 cv
27.961 172.949 27.961 172.867 27.961 172.762 cv
27.961 172.695 27.961 172.637 27.969 172.582 cv
27.969 172.535 27.98 172.488 27.996 172.445 cv
28.008 172.41 28.023 172.375 28.043 172.34 cv
28.059 172.312 28.086 172.273 28.133 172.227 cv
28.172 172.184 28.262 172.121 28.398 172.039 cv
28.527 171.961 28.691 171.883 28.887 171.797 cv
29.082 171.719 29.305 171.648 29.559 171.594 cv
29.809 171.539 30.082 171.512 30.375 171.512 cv
30.781 171.512 31.141 171.566 31.453 171.672 cv
31.762 171.777 32.02 171.926 32.23 172.117 cv
32.438 172.309 32.594 172.535 32.695 172.801 cv
32.797 173.066 32.848 173.363 32.848 173.687 cv
32.848 173.969 32.809 174.227 32.738 174.465 cv
32.66 174.703 32.555 174.914 32.418 175.098 cv
32.273 175.285 32.102 175.445 31.898 175.57 cv
31.691 175.703 31.453 175.793 31.188 175.84 cv
31.188 175.855 li
31.488 175.891 31.766 175.965 32.023 176.082 cv
32.273 176.203 32.492 176.355 32.68 176.535 cv
32.859 176.719 33.004 176.934 33.105 177.176 cv
33.207 177.426 33.258 177.684 33.262 177.957 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.363 177.645 mo
40.359 178.121 40.281 178.543 40.125 178.91 cv
39.965 179.285 39.738 179.594 39.449 179.844 cv
39.156 180.098 38.809 180.293 38.406 180.422 cv
38 180.555 37.551 180.617 37.063 180.617 cv
36.785 180.617 36.527 180.598 36.281 180.559 cv
36.035 180.52 35.816 180.473 35.625 180.418 cv
35.434 180.363 35.277 180.309 35.156 180.25 cv
35.031 180.199 34.953 180.156 34.922 180.121 cv
34.887 180.09 34.859 180.059 34.848 180.031 cv
34.832 180.004 34.82 179.973 34.809 179.93 cv
34.797 179.895 34.789 179.844 34.785 179.785 cv
34.781 179.727 34.781 179.656 34.781 179.574 cv
34.781 179.496 34.781 179.426 34.789 179.363 cv
34.793 179.301 34.809 179.254 34.828 179.215 cv
34.844 179.18 34.863 179.148 34.891 179.129 cv
34.914 179.113 34.945 179.105 34.98 179.102 cv
35.023 179.105 35.09 179.133 35.188 179.187 cv
35.281 179.242 35.41 179.305 35.574 179.371 cv
35.734 179.437 35.938 179.5 36.176 179.559 cv
36.414 179.621 36.695 179.652 37.027 179.648 cv
37.332 179.652 37.613 179.613 37.871 179.539 cv
38.121 179.469 38.344 179.355 38.531 179.199 cv
38.715 179.043 38.859 178.848 38.965 178.613 cv
39.066 178.379 39.117 178.094 39.121 177.754 cv
39.117 177.477 39.074 177.227 38.988 177.008 cv
38.898 176.789 38.762 176.609 38.578 176.465 cv
38.391 176.324 38.156 176.219 37.875 176.145 cv
37.594 176.078 37.254 176.043 36.863 176.039 cv
36.582 176.043 36.344 176.055 36.148 176.082 cv
35.945 176.109 35.758 176.125 35.586 176.121 cv
35.453 176.125 35.363 176.094 35.313 176.031 cv
35.254 175.973 35.227 175.859 35.23 175.691 cv
35.23 172.086 li
35.227 171.937 35.262 171.828 35.336 171.754 cv
35.402 171.684 35.504 171.648 35.641 171.645 cv
39.559 171.645 li
39.59 171.648 39.625 171.656 39.664 171.676 cv
39.695 171.695 39.727 171.727 39.75 171.766 cv
39.773 171.809 39.789 171.863 39.801 171.926 cv
39.809 171.992 39.813 172.066 39.816 172.148 cv
39.813 172.316 39.793 172.441 39.75 172.531 cv
39.707 172.625 39.645 172.672 39.57 172.668 cv
36.406 172.668 li
36.406 175.148 li
36.555 175.129 36.711 175.113 36.875 175.109 cv
37.031 175.105 37.219 175.105 37.434 175.102 cv
37.918 175.105 38.344 175.164 38.711 175.285 cv
39.074 175.406 39.379 175.578 39.621 175.797 cv
39.863 176.02 40.047 176.289 40.176 176.602 cv
40.297 176.918 40.359 177.266 40.363 177.645 cv
cp
f
27.004 118.301 mo
41.195 118.301 li
41.195 135.391 li
27.004 135.391 li
cp
0 0 0 0 cmyk
ef
33.695 129.137 mo
33.691 129.289 33.668 129.406 33.625 129.492 cv
33.578 129.578 33.516 129.621 33.434 129.621 cv
32.438 129.621 li
32.438 131.477 li
32.438 131.516 32.426 131.547 32.41 131.57 cv
32.387 131.602 32.355 131.621 32.313 131.637 cv
32.262 131.652 32.199 131.664 32.129 131.672 cv
32.051 131.68 31.957 131.684 31.84 131.687 cv
31.727 131.684 31.633 131.68 31.559 131.672 cv
31.48 131.664 31.418 131.652 31.379 131.637 cv
31.332 131.621 31.305 131.602 31.289 131.57 cv
31.273 131.547 31.266 131.516 31.266 131.477 cv
31.266 129.621 li
27.652 129.621 li
27.594 129.621 27.551 129.617 27.516 129.602 cv
27.477 129.594 27.441 129.566 27.418 129.527 cv
27.387 129.492 27.367 129.441 27.355 129.371 cv
27.344 129.305 27.34 129.215 27.34 129.102 cv
27.34 129.02 27.34 128.941 27.344 128.871 cv
27.348 128.805 27.355 128.742 27.371 128.684 cv
27.383 128.629 27.402 128.574 27.426 128.52 cv
27.445 128.469 27.473 128.414 27.508 128.352 cv
30.656 122.984 li
30.68 122.949 30.711 122.918 30.758 122.891 cv
30.797 122.863 30.855 122.84 30.926 122.82 cv
30.996 122.805 31.082 122.793 31.184 122.785 cv
31.285 122.781 31.406 122.777 31.547 122.773 cv
31.699 122.777 31.832 122.785 31.945 122.793 cv
32.059 122.809 32.148 122.82 32.223 122.836 cv
32.289 122.855 32.344 122.883 32.383 122.91 cv
32.418 122.941 32.438 122.973 32.438 123.012 cv
32.438 128.652 li
33.434 128.652 li
33.512 128.656 33.574 128.695 33.621 128.773 cv
33.668 128.855 33.691 128.977 33.695 129.137 cv
cp
31.266 123.805 mo
31.25 123.805 li
28.41 128.652 li
31.266 128.652 li
cp
.629236 .549432 .540154 .282963 cmyk
f
40.691 127.211 mo
40.688 127.895 40.633 128.512 40.531 129.07 cv
40.422 129.629 40.246 130.109 39.996 130.512 cv
39.746 130.918 39.422 131.23 39.023 131.449 cv
38.625 131.668 38.129 131.777 37.543 131.777 cv
36.984 131.777 36.52 131.68 36.141 131.48 cv
35.758 131.285 35.449 130.996 35.223 130.609 cv
34.988 130.227 34.824 129.75 34.727 129.187 cv
34.629 128.625 34.582 127.98 34.582 127.254 cv
34.582 126.582 34.637 125.965 34.746 125.398 cv
34.855 124.84 35.031 124.359 35.277 123.953 cv
35.52 123.555 35.844 123.242 36.246 123.02 cv
36.645 122.801 37.137 122.691 37.723 122.687 cv
38.281 122.691 38.75 122.789 39.129 122.984 cv
39.508 123.184 39.813 123.477 40.047 123.859 cv
40.277 124.246 40.441 124.719 40.543 125.277 cv
40.637 125.844 40.688 126.488 40.691 127.211 cv
cp
39.488 127.293 mo
39.484 126.855 39.469 126.457 39.441 126.105 cv
39.406 125.754 39.359 125.445 39.301 125.176 cv
39.238 124.91 39.16 124.68 39.063 124.484 cv
38.961 124.293 38.844 124.133 38.711 124.008 cv
38.574 123.883 38.418 123.793 38.242 123.734 cv
38.066 123.68 37.871 123.652 37.652 123.648 cv
37.266 123.652 36.949 123.742 36.711 123.922 cv
36.465 124.105 36.277 124.355 36.141 124.672 cv
36 124.992 35.902 125.367 35.855 125.793 cv
35.801 126.223 35.777 126.68 35.781 127.172 cv
35.777 127.832 35.813 128.395 35.883 128.855 cv
35.953 129.32 36.059 129.695 36.207 129.984 cv
36.352 130.273 36.543 130.484 36.773 130.617 cv
37.004 130.75 37.281 130.816 37.613 130.816 cv
37.863 130.816 38.09 130.777 38.285 130.695 cv
38.477 130.613 38.641 130.496 38.781 130.344 cv
38.918 130.191 39.035 130.008 39.129 129.793 cv
39.219 129.582 39.289 129.344 39.348 129.082 cv
39.398 128.824 39.438 128.543 39.457 128.238 cv
39.477 127.937 39.484 127.625 39.488 127.293 cv
cp
f
27.004 69.449 mo
41.195 69.449 li
41.195 86.539 li
27.004 86.539 li
cp
0 0 0 0 cmyk
ef
33.695 80.277 mo
33.691 80.43 33.668 80.547 33.625 80.633 cv
33.578 80.719 33.516 80.762 33.434 80.762 cv
32.438 80.762 li
32.438 82.617 li
32.438 82.656 32.426 82.687 32.41 82.711 cv
32.387 82.742 32.355 82.762 32.313 82.777 cv
32.262 82.793 32.199 82.805 32.129 82.812 cv
32.051 82.82 31.957 82.824 31.84 82.828 cv
31.727 82.824 31.633 82.82 31.559 82.812 cv
31.48 82.805 31.418 82.793 31.379 82.777 cv
31.332 82.762 31.305 82.742 31.289 82.711 cv
31.273 82.687 31.266 82.656 31.266 82.617 cv
31.266 80.762 li
27.652 80.762 li
27.594 80.762 27.551 80.758 27.516 80.742 cv
27.477 80.734 27.441 80.707 27.418 80.668 cv
27.387 80.633 27.367 80.582 27.355 80.512 cv
27.344 80.445 27.34 80.355 27.34 80.242 cv
27.34 80.16 27.34 80.082 27.344 80.012 cv
27.348 79.945 27.355 79.883 27.371 79.824 cv
27.383 79.77 27.402 79.715 27.426 79.66 cv
27.445 79.609 27.473 79.555 27.508 79.492 cv
30.656 74.125 li
30.68 74.09 30.711 74.059 30.758 74.031 cv
30.797 74.004 30.855 73.98 30.926 73.961 cv
30.996 73.945 31.082 73.934 31.184 73.926 cv
31.285 73.922 31.406 73.918 31.547 73.914 cv
31.699 73.918 31.832 73.926 31.945 73.934 cv
32.059 73.949 32.148 73.961 32.223 73.977 cv
32.289 73.996 32.344 74.023 32.383 74.051 cv
32.418 74.082 32.438 74.113 32.438 74.152 cv
32.438 79.793 li
33.434 79.793 li
33.512 79.797 33.574 79.836 33.621 79.914 cv
33.668 79.996 33.691 80.117 33.695 80.277 cv
cp
31.266 74.945 mo
31.25 74.945 li
28.41 79.793 li
31.266 79.793 li
cp
.629236 .549432 .540154 .282963 cmyk
f
40.355 79.949 mo
40.352 80.426 40.273 80.848 40.117 81.215 cv
39.957 81.586 39.73 81.895 39.441 82.145 cv
39.145 82.398 38.797 82.594 38.398 82.723 cv
37.992 82.855 37.547 82.918 37.059 82.918 cv
36.781 82.918 36.523 82.898 36.281 82.859 cv
36.035 82.82 35.816 82.773 35.625 82.719 cv
35.434 82.664 35.273 82.609 35.152 82.551 cv
35.027 82.5 34.949 82.457 34.918 82.422 cv
34.879 82.391 34.855 82.359 34.848 82.332 cv
34.832 82.305 34.82 82.273 34.809 82.234 cv
34.797 82.199 34.789 82.148 34.785 82.086 cv
34.777 82.027 34.773 81.957 34.777 81.875 cv
34.773 81.797 34.777 81.73 34.789 81.668 cv
34.793 81.609 34.809 81.559 34.828 81.516 cv
34.844 81.48 34.863 81.449 34.891 81.43 cv
34.914 81.414 34.941 81.406 34.977 81.402 cv
35.02 81.406 35.09 81.434 35.188 81.488 cv
35.281 81.547 35.41 81.609 35.574 81.676 cv
35.73 81.742 35.934 81.805 36.176 81.863 cv
36.414 81.922 36.695 81.953 37.023 81.949 cv
37.328 81.953 37.609 81.914 37.863 81.84 cv
38.117 81.77 38.336 81.656 38.523 81.5 cv
38.707 81.344 38.852 81.148 38.957 80.914 cv
39.059 80.68 39.109 80.395 39.113 80.059 cv
39.109 79.777 39.066 79.531 38.98 79.312 cv
38.891 79.102 38.754 78.922 38.57 78.773 cv
38.383 78.633 38.148 78.523 37.871 78.453 cv
37.586 78.383 37.25 78.348 36.859 78.344 cv
36.582 78.348 36.344 78.363 36.145 78.387 cv
35.941 78.418 35.754 78.43 35.586 78.426 cv
35.453 78.43 35.363 78.402 35.313 78.34 cv
35.254 78.285 35.227 78.168 35.23 77.996 cv
35.23 74.398 li
35.227 74.25 35.262 74.141 35.336 74.066 cv
35.402 73.996 35.504 73.961 35.641 73.957 cv
39.551 73.957 li
39.586 73.961 39.621 73.969 39.656 73.988 cv
39.688 74.008 39.715 74.039 39.742 74.078 cv
39.762 74.121 39.777 74.176 39.793 74.238 cv
39.801 74.305 39.809 74.379 39.809 74.461 cv
39.809 74.629 39.785 74.754 39.742 74.844 cv
39.699 74.937 39.641 74.984 39.563 74.98 cv
36.402 74.98 li
36.402 77.457 li
36.555 77.434 36.711 77.422 36.871 77.418 cv
37.031 77.414 37.219 77.41 37.43 77.41 cv
37.914 77.41 38.336 77.473 38.703 77.594 cv
39.063 77.715 39.367 77.887 39.613 78.105 cv
39.855 78.328 40.039 78.594 40.168 78.906 cv
40.289 79.223 40.352 79.57 40.355 79.949 cv
cp
f
27.004 20.6021 mo
41.195 20.6021 li
41.195 37.6921 li
27.004 37.6921 li
cp
0 0 0 0 cmyk
ef
33.277 31.09 mo
33.273 31.566 33.195 31.988 33.039 32.355 cv
32.879 32.727 32.652 33.035 32.363 33.285 cv
32.066 33.539 31.719 33.734 31.32 33.863 cv
30.914 33.996 30.469 34.059 29.98 34.059 cv
29.703 34.059 29.445 34.039 29.203 34 cv
28.957 33.961 28.738 33.914 28.547 33.859 cv
28.355 33.805 28.195 33.75 28.074 33.691 cv
27.949 33.641 27.871 33.598 27.84 33.562 cv
27.801 33.531 27.777 33.5 27.77 33.473 cv
27.754 33.445 27.742 33.414 27.73 33.375 cv
27.719 33.34 27.711 33.289 27.707 33.227 cv
27.699 33.168 27.695 33.098 27.699 33.016 cv
27.695 32.937 27.699 32.871 27.711 32.809 cv
27.715 32.75 27.73 32.699 27.75 32.656 cv
27.766 32.621 27.785 32.59 27.813 32.57 cv
27.836 32.555 27.863 32.547 27.898 32.543 cv
27.941 32.547 28.012 32.574 28.109 32.629 cv
28.203 32.687 28.332 32.75 28.496 32.816 cv
28.652 32.883 28.855 32.945 29.098 33.004 cv
29.336 33.062 29.617 33.094 29.945 33.09 cv
30.25 33.094 30.531 33.055 30.785 32.98 cv
31.039 32.91 31.258 32.797 31.445 32.641 cv
31.629 32.484 31.773 32.289 31.879 32.055 cv
31.98 31.82 32.031 31.535 32.035 31.199 cv
32.031 30.918 31.988 30.672 31.902 30.453 cv
31.813 30.242 31.676 30.062 31.492 29.914 cv
31.305 29.773 31.07 29.664 30.793 29.594 cv
30.508 29.523 30.172 29.488 29.781 29.484 cv
29.504 29.488 29.266 29.504 29.066 29.527 cv
28.863 29.559 28.676 29.57 28.508 29.566 cv
28.375 29.57 28.285 29.543 28.234 29.48 cv
28.176 29.426 28.148 29.309 28.152 29.137 cv
28.152 25.539 li
28.148 25.391 28.184 25.281 28.258 25.207 cv
28.324 25.137 28.426 25.102 28.563 25.098 cv
32.473 25.098 li
32.508 25.102 32.543 25.109 32.578 25.129 cv
32.609 25.148 32.637 25.18 32.664 25.219 cv
32.684 25.262 32.699 25.316 32.715 25.379 cv
32.723 25.445 32.73 25.52 32.73 25.602 cv
32.73 25.77 32.707 25.895 32.664 25.984 cv
32.621 26.078 32.563 26.125 32.484 26.121 cv
29.324 26.121 li
29.324 28.598 li
29.477 28.574 29.633 28.562 29.793 28.559 cv
29.953 28.555 30.141 28.551 30.352 28.551 cv
30.836 28.551 31.258 28.613 31.625 28.734 cv
31.984 28.855 32.289 29.027 32.535 29.246 cv
32.777 29.469 32.961 29.734 33.09 30.047 cv
33.211 30.363 33.273 30.711 33.277 31.09 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.691 29.492 mo
40.688 30.176 40.633 30.793 40.531 31.352 cv
40.422 31.91 40.246 32.391 39.996 32.793 cv
39.746 33.199 39.422 33.512 39.023 33.73 cv
38.625 33.949 38.129 34.059 37.543 34.059 cv
36.984 34.059 36.52 33.961 36.141 33.762 cv
35.758 33.566 35.449 33.277 35.223 32.891 cv
34.988 32.508 34.824 32.031 34.727 31.469 cv
34.629 30.906 34.582 30.262 34.582 29.535 cv
34.582 28.863 34.637 28.246 34.746 27.68 cv
34.855 27.121 35.031 26.641 35.277 26.234 cv
35.52 25.836 35.844 25.523 36.246 25.301 cv
36.645 25.082 37.137 24.973 37.723 24.969 cv
38.281 24.973 38.75 25.07 39.129 25.266 cv
39.508 25.465 39.813 25.758 40.047 26.141 cv
40.277 26.527 40.441 27 40.543 27.559 cv
40.637 28.125 40.688 28.77 40.691 29.492 cv
cp
39.488 29.574 mo
39.484 29.137 39.469 28.738 39.441 28.387 cv
39.406 28.035 39.359 27.727 39.301 27.457 cv
39.238 27.191 39.16 26.961 39.063 26.766 cv
38.961 26.574 38.844 26.414 38.711 26.289 cv
38.574 26.164 38.418 26.074 38.242 26.016 cv
38.066 25.961 37.871 25.934 37.652 25.93 cv
37.266 25.934 36.949 26.023 36.711 26.203 cv
36.465 26.387 36.277 26.637 36.141 26.953 cv
36 27.273 35.902 27.648 35.855 28.074 cv
35.801 28.504 35.777 28.961 35.781 29.453 cv
35.777 30.113 35.813 30.676 35.883 31.137 cv
35.953 31.602 36.059 31.977 36.207 32.266 cv
36.352 32.555 36.543 32.766 36.773 32.898 cv
37.004 33.031 37.281 33.098 37.613 33.098 cv
37.863 33.098 38.09 33.059 38.285 32.977 cv
38.477 32.895 38.641 32.777 38.781 32.625 cv
38.918 32.473 39.035 32.289 39.129 32.074 cv
39.219 31.863 39.289 31.625 39.348 31.363 cv
39.398 31.105 39.438 30.824 39.457 30.52 cv
39.477 30.219 39.484 29.906 39.488 29.574 cv
cp
f
56.977 540.246 mo
56.977 540.336 56.969 540.406 56.953 540.465 cv
56.938 540.527 56.918 540.578 56.898 540.609 cv
56.875 540.648 56.848 540.672 56.82 540.687 cv
56.789 540.703 56.762 540.711 56.73 540.711 cv
52.117 540.711 li
52.082 540.711 52.051 540.703 52.027 540.687 cv
51.996 540.672 51.973 540.648 51.949 540.609 cv
51.922 540.578 51.902 540.527 51.891 540.465 cv
51.875 540.406 51.867 540.336 51.871 540.246 cv
51.867 540.168 51.875 540.098 51.891 540.035 cv
51.902 539.98 51.918 539.93 51.941 539.891 cv
51.961 539.852 51.984 539.824 52.016 539.801 cv
52.043 539.785 52.078 539.773 52.117 539.77 cv
53.961 539.77 li
53.961 533.051 li
52.254 534.07 li
52.164 534.117 52.094 534.145 52.043 534.152 cv
51.988 534.164 51.945 534.152 51.918 534.121 cv
51.883 534.094 51.859 534.043 51.852 533.973 cv
51.836 533.906 51.832 533.82 51.836 533.715 cv
51.832 533.637 51.836 533.57 51.844 533.516 cv
51.852 533.461 51.859 533.418 51.875 533.379 cv
51.887 533.348 51.906 533.316 51.934 533.285 cv
51.957 533.262 51.992 533.234 52.035 533.203 cv
54.066 531.898 li
54.082 531.887 54.105 531.879 54.133 531.867 cv
54.16 531.859 54.195 531.848 54.238 531.84 cv
54.277 531.832 54.324 531.828 54.383 531.82 cv
54.434 531.82 54.504 531.816 54.586 531.816 cv
54.695 531.816 54.785 531.824 54.859 531.832 cv
54.93 531.844 54.988 531.855 55.031 531.867 cv
55.07 531.887 55.098 531.906 55.113 531.93 cv
55.125 531.957 55.129 531.984 55.133 532.008 cv
55.133 539.77 li
56.73 539.77 li
56.766 539.773 56.797 539.785 56.832 539.801 cv
56.859 539.824 56.887 539.852 56.91 539.891 cv
56.93 539.93 56.945 539.98 56.957 540.035 cv
56.969 540.098 56.977 540.168 56.977 540.246 cv
cp
f
132.898 540.207 mo
132.895 540.289 132.887 540.363 132.879 540.426 cv
132.863 540.492 132.848 540.547 132.832 540.586 cv
132.809 540.633 132.781 540.664 132.75 540.68 cv
132.711 540.703 132.676 540.711 132.637 540.711 cv
127.758 540.711 li
127.688 540.711 127.633 540.703 127.59 540.687 cv
127.539 540.672 127.496 540.648 127.465 540.609 cv
127.426 540.578 127.402 540.523 127.391 540.453 cv
127.371 540.383 127.363 540.301 127.367 540.199 cv
127.363 540.113 127.367 540.031 127.379 539.961 cv
127.383 539.895 127.398 539.836 127.426 539.781 cv
127.445 539.73 127.473 539.676 127.512 539.621 cv
127.543 539.57 127.59 539.516 127.648 539.453 cv
129.414 537.641 li
129.82 537.223 130.145 536.848 130.395 536.516 cv
130.637 536.184 130.828 535.883 130.965 535.605 cv
131.098 535.336 131.188 535.086 131.23 534.863 cv
131.27 534.641 131.289 534.434 131.293 534.234 cv
131.289 534.039 131.258 533.852 131.195 533.676 cv
131.129 533.504 131.031 533.352 130.91 533.219 cv
130.781 533.09 130.625 532.984 130.441 532.902 cv
130.25 532.828 130.035 532.789 129.793 532.785 cv
129.504 532.789 129.246 532.828 129.02 532.902 cv
128.789 532.984 128.59 533.07 128.422 533.156 cv
128.246 533.25 128.102 533.332 127.992 533.406 cv
127.875 533.488 127.789 533.527 127.734 533.523 cv
127.699 533.527 127.672 533.52 127.648 533.496 cv
127.621 533.48 127.598 533.449 127.582 533.406 cv
127.563 533.367 127.551 533.312 127.543 533.242 cv
127.531 533.176 127.527 533.094 127.531 532.996 cv
127.527 532.93 127.531 532.871 127.539 532.82 cv
127.543 532.773 127.551 532.73 127.563 532.691 cv
127.57 532.656 127.582 532.621 127.605 532.59 cv
127.621 532.559 127.66 532.52 127.715 532.469 cv
127.77 532.426 127.863 532.363 127.996 532.277 cv
128.129 532.199 128.297 532.117 128.504 532.031 cv
128.703 531.953 128.926 531.887 129.172 531.832 cv
129.414 531.781 129.672 531.754 129.941 531.75 cv
130.367 531.754 130.738 531.812 131.063 531.93 cv
131.383 532.051 131.652 532.215 131.863 532.426 cv
132.074 532.637 132.23 532.883 132.336 533.156 cv
132.441 533.437 132.496 533.73 132.496 534.043 cv
132.496 534.324 132.469 534.605 132.418 534.887 cv
132.367 535.168 132.262 535.473 132.102 535.793 cv
131.938 536.121 131.703 536.48 131.402 536.879 cv
131.094 537.277 130.691 537.738 130.188 538.254 cv
128.789 539.715 li
132.633 539.715 li
132.664 539.715 132.699 539.727 132.738 539.746 cv
132.77 539.77 132.801 539.801 132.824 539.84 cv
132.848 539.883 132.863 539.934 132.879 539.992 cv
132.887 540.055 132.895 540.125 132.898 540.207 cv
cp
f
209.234 538.199 mo
209.23 538.352 209.207 538.469 209.164 538.555 cv
209.117 538.641 209.055 538.684 208.973 538.684 cv
207.977 538.684 li
207.977 540.539 li
207.977 540.578 207.965 540.609 207.949 540.633 cv
207.926 540.664 207.895 540.684 207.852 540.699 cv
207.801 540.715 207.738 540.727 207.668 540.734 cv
207.59 540.742 207.496 540.746 207.379 540.75 cv
207.266 540.746 207.172 540.742 207.098 540.734 cv
207.02 540.727 206.957 540.715 206.918 540.699 cv
206.871 540.684 206.844 540.664 206.828 540.633 cv
206.813 540.609 206.805 540.578 206.805 540.539 cv
206.805 538.684 li
203.191 538.684 li
203.133 538.684 203.09 538.68 203.055 538.664 cv
203.016 538.656 202.98 538.629 202.957 538.59 cv
202.926 538.555 202.906 538.504 202.895 538.434 cv
202.883 538.367 202.879 538.277 202.879 538.164 cv
202.879 538.082 202.879 538.004 202.883 537.934 cv
202.887 537.867 202.895 537.805 202.91 537.746 cv
202.922 537.691 202.941 537.637 202.965 537.582 cv
202.984 537.531 203.012 537.477 203.047 537.414 cv
206.195 532.047 li
206.219 532.012 206.25 531.98 206.297 531.953 cv
206.336 531.926 206.395 531.902 206.465 531.883 cv
206.535 531.867 206.621 531.855 206.723 531.848 cv
206.824 531.844 206.945 531.84 207.086 531.836 cv
207.238 531.84 207.371 531.848 207.484 531.855 cv
207.598 531.871 207.688 531.883 207.762 531.898 cv
207.828 531.918 207.883 531.945 207.922 531.973 cv
207.957 532.004 207.977 532.035 207.977 532.074 cv
207.977 537.715 li
208.973 537.715 li
209.051 537.719 209.113 537.758 209.16 537.836 cv
209.207 537.918 209.23 538.039 209.234 538.199 cv
cp
206.805 532.867 mo
206.789 532.867 li
203.949 537.715 li
206.805 537.715 li
cp
f
285.043 537.852 mo
285.039 538.238 284.98 538.613 284.863 538.973 cv
284.746 539.336 284.563 539.656 284.32 539.93 cv
284.07 540.211 283.762 540.43 283.387 540.594 cv
283.008 540.758 282.559 540.84 282.047 540.84 cv
281.676 540.84 281.352 540.797 281.07 540.703 cv
280.785 540.617 280.539 540.488 280.332 540.316 cv
280.121 540.152 279.949 539.945 279.813 539.695 cv
279.672 539.453 279.559 539.172 279.477 538.855 cv
279.391 538.543 279.332 538.199 279.297 537.824 cv
279.258 537.453 279.238 537.051 279.242 536.621 cv
279.238 536.246 279.258 535.867 279.301 535.477 cv
279.34 535.094 279.414 534.719 279.52 534.355 cv
279.625 534 279.766 533.664 279.949 533.344 cv
280.125 533.031 280.352 532.754 280.625 532.516 cv
280.895 532.285 281.219 532.102 281.598 531.961 cv
281.973 531.828 282.41 531.758 282.914 531.754 cv
283.078 531.758 283.25 531.77 283.426 531.785 cv
283.598 531.809 283.758 531.836 283.902 531.867 cv
284.047 531.906 284.168 531.941 284.27 531.98 cv
284.367 532.023 284.434 532.059 284.469 532.082 cv
284.5 532.109 284.523 532.137 284.543 532.164 cv
284.555 532.195 284.566 532.227 284.578 532.258 cv
284.586 532.293 284.594 532.332 284.602 532.375 cv
284.602 532.418 284.605 532.469 284.609 532.531 cv
284.605 532.617 284.605 532.691 284.605 532.746 cv
284.602 532.809 284.59 532.855 284.578 532.887 cv
284.559 532.926 284.539 532.953 284.516 532.969 cv
284.488 532.992 284.457 533 284.418 532.996 cv
284.363 533 284.293 532.984 284.211 532.949 cv
284.121 532.922 284.016 532.887 283.898 532.844 cv
283.773 532.809 283.625 532.773 283.449 532.738 cv
283.273 532.711 283.07 532.695 282.84 532.691 cv
282.414 532.695 282.051 532.781 281.746 532.949 cv
281.441 533.125 281.191 533.355 281 533.645 cv
280.805 533.937 280.66 534.277 280.57 534.66 cv
280.473 535.047 280.422 535.449 280.41 535.863 cv
280.527 535.801 280.66 535.73 280.809 535.66 cv
280.957 535.594 281.117 535.535 281.293 535.477 cv
281.465 535.426 281.648 535.379 281.848 535.344 cv
282.043 535.309 282.254 535.293 282.477 535.289 cv
282.953 535.293 283.355 535.355 283.684 535.484 cv
284.008 535.617 284.273 535.801 284.48 536.027 cv
284.68 536.262 284.824 536.531 284.914 536.84 cv
284.996 537.152 285.039 537.488 285.043 537.852 cv
cp
283.855 537.961 mo
283.855 537.699 283.828 537.457 283.777 537.238 cv
283.723 537.023 283.637 536.84 283.516 536.691 cv
283.391 536.543 283.227 536.43 283.023 536.344 cv
282.816 536.266 282.563 536.223 282.266 536.219 cv
282.094 536.223 281.926 536.238 281.758 536.266 cv
281.59 536.297 281.426 536.336 281.273 536.387 cv
281.113 536.441 280.965 536.504 280.82 536.57 cv
280.676 536.645 280.543 536.723 280.43 536.801 cv
280.426 537.391 280.465 537.879 280.543 538.273 cv
280.617 538.672 280.727 538.992 280.871 539.227 cv
281.012 539.469 281.191 539.637 281.406 539.738 cv
281.617 539.84 281.867 539.891 282.156 539.891 cv
282.445 539.891 282.695 539.836 282.914 539.727 cv
283.125 539.617 283.305 539.473 283.445 539.289 cv
283.586 539.105 283.688 538.898 283.758 538.668 cv
283.82 538.437 283.855 538.203 283.855 537.961 cv
cp
f
360.98 538.445 mo
360.977 538.832 360.91 539.172 360.773 539.469 cv
360.637 539.766 360.438 540.02 360.184 540.223 cv
359.926 540.43 359.609 540.582 359.234 540.684 cv
358.852 540.789 358.422 540.84 357.938 540.84 cv
357.48 540.84 357.07 540.793 356.715 540.699 cv
356.352 540.605 356.047 540.465 355.801 540.277 cv
355.547 540.09 355.355 539.859 355.227 539.586 cv
355.09 539.312 355.023 539 355.027 538.648 cv
355.023 538.375 355.07 538.121 355.164 537.887 cv
355.254 537.652 355.383 537.437 355.555 537.242 cv
355.723 537.047 355.934 536.867 356.188 536.695 cv
356.434 536.527 356.719 536.363 357.035 536.207 cv
356.762 536.066 356.52 535.918 356.309 535.758 cv
356.098 535.605 355.918 535.434 355.777 535.246 cv
355.629 535.062 355.52 534.867 355.449 534.656 cv
355.371 534.453 355.336 534.223 355.336 533.973 cv
355.336 533.664 355.391 533.375 355.504 533.102 cv
355.613 532.832 355.781 532.598 356.008 532.398 cv
356.23 532.199 356.516 532.043 356.867 531.926 cv
357.211 531.812 357.617 531.754 358.086 531.75 cv
358.527 531.754 358.914 531.805 359.242 531.91 cv
359.566 532.02 359.836 532.168 360.047 532.348 cv
360.258 532.535 360.414 532.75 360.516 532.996 cv
360.617 533.25 360.668 533.52 360.668 533.805 cv
360.668 534.039 360.629 534.262 360.555 534.473 cv
360.477 534.687 360.367 534.891 360.223 535.082 cv
360.074 535.273 359.895 535.453 359.688 535.617 cv
359.473 535.785 359.23 535.937 358.961 536.082 cv
359.281 536.242 359.57 536.406 359.824 536.574 cv
360.074 536.746 360.285 536.93 360.457 537.117 cv
360.629 537.312 360.758 537.516 360.848 537.73 cv
360.934 537.949 360.977 538.187 360.98 538.445 cv
cp
359.508 533.91 mo
359.508 533.723 359.473 533.551 359.406 533.395 cv
359.34 533.242 359.242 533.109 359.117 532.996 cv
358.984 532.891 358.828 532.809 358.641 532.75 cv
358.453 532.695 358.238 532.668 357.996 532.664 cv
357.504 532.668 357.133 532.777 356.883 533 cv
356.629 533.223 356.5 533.527 356.504 533.91 cv
356.5 534.094 356.531 534.262 356.594 534.41 cv
356.652 534.566 356.75 534.711 356.883 534.844 cv
357.012 534.984 357.176 535.117 357.375 535.242 cv
357.57 535.375 357.805 535.508 358.078 535.645 cv
358.539 535.41 358.891 535.148 359.137 534.859 cv
359.383 534.574 359.508 534.258 359.508 533.91 cv
cp
359.793 538.566 mo
359.789 538.359 359.75 538.172 359.676 538 cv
359.598 537.832 359.48 537.672 359.324 537.52 cv
359.164 537.375 358.969 537.23 358.738 537.09 cv
358.5 536.953 358.227 536.809 357.922 536.656 cv
357.633 536.797 357.383 536.941 357.168 537.082 cv
356.949 537.227 356.773 537.371 356.637 537.52 cv
356.496 537.672 356.391 537.828 356.32 537.992 cv
356.25 538.156 356.215 538.34 356.215 538.539 cv
356.215 538.984 356.363 539.328 356.668 539.566 cv
356.969 539.809 357.422 539.926 358.023 539.926 cv
358.605 539.926 359.047 539.805 359.344 539.562 cv
359.641 539.32 359.789 538.988 359.793 538.566 cv
cp
f
433.199 540.246 mo
433.199 540.336 433.191 540.406 433.176 540.465 cv
433.16 540.527 433.141 540.578 433.121 540.609 cv
433.098 540.648 433.07 540.672 433.043 540.687 cv
433.012 540.703 432.984 540.711 432.953 540.711 cv
428.34 540.711 li
428.305 540.711 428.273 540.703 428.25 540.687 cv
428.219 540.672 428.195 540.648 428.172 540.609 cv
428.145 540.578 428.125 540.527 428.113 540.465 cv
428.098 540.406 428.09 540.336 428.094 540.246 cv
428.09 540.168 428.098 540.098 428.113 540.035 cv
428.125 539.98 428.141 539.93 428.164 539.891 cv
428.184 539.852 428.207 539.824 428.238 539.801 cv
428.266 539.785 428.301 539.773 428.34 539.77 cv
430.184 539.77 li
430.184 533.051 li
428.477 534.07 li
428.387 534.117 428.316 534.145 428.266 534.152 cv
428.211 534.164 428.168 534.152 428.141 534.121 cv
428.105 534.094 428.082 534.043 428.074 533.973 cv
428.059 533.906 428.055 533.82 428.059 533.715 cv
428.055 533.637 428.059 533.57 428.066 533.516 cv
428.074 533.461 428.082 533.418 428.098 533.379 cv
428.109 533.348 428.129 533.316 428.156 533.285 cv
428.18 533.262 428.215 533.234 428.258 533.203 cv
430.289 531.898 li
430.305 531.887 430.328 531.879 430.355 531.867 cv
430.383 531.859 430.418 531.848 430.461 531.84 cv
430.5 531.832 430.547 531.828 430.605 531.82 cv
430.656 531.82 430.727 531.816 430.809 531.816 cv
430.918 531.816 431.008 531.824 431.082 531.832 cv
431.152 531.844 431.211 531.855 431.254 531.867 cv
431.293 531.887 431.32 531.906 431.336 531.93 cv
431.348 531.957 431.352 531.984 431.355 532.008 cv
431.355 539.77 li
432.953 539.77 li
432.988 539.773 433.02 539.785 433.055 539.801 cv
433.082 539.824 433.109 539.852 433.133 539.891 cv
433.152 539.93 433.168 539.98 433.18 540.035 cv
433.191 540.098 433.199 540.168 433.199 540.246 cv
cp
f
440.551 536.273 mo
440.547 536.957 440.492 537.574 440.391 538.133 cv
440.281 538.691 440.105 539.172 439.855 539.574 cv
439.605 539.98 439.281 540.293 438.883 540.512 cv
438.484 540.73 437.988 540.84 437.402 540.84 cv
436.844 540.84 436.379 540.742 436 540.543 cv
435.617 540.348 435.309 540.059 435.082 539.672 cv
434.848 539.289 434.684 538.812 434.586 538.25 cv
434.488 537.687 434.441 537.043 434.441 536.316 cv
434.441 535.645 434.496 535.027 434.605 534.461 cv
434.715 533.902 434.891 533.422 435.137 533.016 cv
435.379 532.617 435.703 532.305 436.105 532.082 cv
436.504 531.863 436.996 531.754 437.582 531.75 cv
438.141 531.754 438.609 531.852 438.988 532.047 cv
439.367 532.246 439.672 532.539 439.906 532.922 cv
440.137 533.309 440.301 533.781 440.402 534.34 cv
440.496 534.906 440.547 535.551 440.551 536.273 cv
cp
439.348 536.355 mo
439.344 535.918 439.328 535.52 439.301 535.168 cv
439.266 534.816 439.219 534.508 439.16 534.238 cv
439.098 533.973 439.02 533.742 438.922 533.547 cv
438.82 533.355 438.703 533.195 438.57 533.07 cv
438.434 532.945 438.277 532.855 438.102 532.797 cv
437.926 532.742 437.73 532.715 437.512 532.711 cv
437.125 532.715 436.809 532.805 436.57 532.984 cv
436.324 533.168 436.137 533.418 436 533.734 cv
435.859 534.055 435.762 534.43 435.715 534.855 cv
435.66 535.285 435.637 535.742 435.641 536.234 cv
435.637 536.895 435.672 537.457 435.742 537.918 cv
435.813 538.383 435.918 538.758 436.066 539.047 cv
436.211 539.336 436.402 539.547 436.633 539.68 cv
436.863 539.812 437.141 539.879 437.473 539.879 cv
437.723 539.879 437.949 539.84 438.145 539.758 cv
438.336 539.676 438.5 539.559 438.641 539.406 cv
438.777 539.254 438.895 539.07 438.988 538.855 cv
439.078 538.645 439.148 538.406 439.207 538.145 cv
439.258 537.887 439.297 537.605 439.316 537.301 cv
439.336 537 439.344 536.687 439.348 536.355 cv
cp
f
509.156 540.246 mo
509.156 540.336 509.148 540.406 509.133 540.465 cv
509.117 540.527 509.098 540.578 509.078 540.609 cv
509.055 540.648 509.027 540.672 509 540.687 cv
508.969 540.703 508.941 540.711 508.91 540.711 cv
504.297 540.711 li
504.262 540.711 504.23 540.703 504.207 540.687 cv
504.176 540.672 504.152 540.648 504.129 540.609 cv
504.102 540.578 504.082 540.527 504.07 540.465 cv
504.055 540.406 504.047 540.336 504.051 540.246 cv
504.047 540.168 504.055 540.098 504.07 540.035 cv
504.082 539.98 504.098 539.93 504.121 539.891 cv
504.141 539.852 504.164 539.824 504.195 539.801 cv
504.223 539.785 504.258 539.773 504.297 539.77 cv
506.141 539.77 li
506.141 533.051 li
504.434 534.07 li
504.344 534.117 504.273 534.145 504.223 534.152 cv
504.168 534.164 504.125 534.152 504.098 534.121 cv
504.063 534.094 504.039 534.043 504.031 533.973 cv
504.016 533.906 504.012 533.82 504.016 533.715 cv
504.012 533.637 504.016 533.57 504.023 533.516 cv
504.031 533.461 504.039 533.418 504.055 533.379 cv
504.066 533.348 504.086 533.316 504.113 533.285 cv
504.137 533.262 504.172 533.234 504.215 533.203 cv
506.246 531.898 li
506.262 531.887 506.285 531.879 506.313 531.867 cv
506.34 531.859 506.375 531.848 506.418 531.84 cv
506.457 531.832 506.504 531.828 506.563 531.82 cv
506.613 531.82 506.684 531.816 506.766 531.816 cv
506.875 531.816 506.965 531.824 507.039 531.832 cv
507.109 531.844 507.168 531.855 507.211 531.867 cv
507.25 531.887 507.277 531.906 507.293 531.93 cv
507.305 531.957 507.309 531.984 507.313 532.008 cv
507.313 539.77 li
508.91 539.77 li
508.945 539.773 508.977 539.785 509.012 539.801 cv
509.039 539.824 509.066 539.852 509.09 539.891 cv
509.109 539.93 509.125 539.98 509.137 540.035 cv
509.148 540.098 509.156 540.168 509.156 540.246 cv
cp
f
516.219 540.207 mo
516.215 540.289 516.207 540.363 516.199 540.426 cv
516.184 540.492 516.168 540.547 516.152 540.586 cv
516.129 540.633 516.102 540.664 516.07 540.68 cv
516.031 540.703 515.996 540.711 515.957 540.711 cv
511.078 540.711 li
511.008 540.711 510.953 540.703 510.91 540.687 cv
510.859 540.672 510.816 540.648 510.785 540.609 cv
510.746 540.578 510.723 540.523 510.711 540.453 cv
510.691 540.383 510.684 540.301 510.688 540.199 cv
510.684 540.113 510.688 540.031 510.699 539.961 cv
510.703 539.895 510.719 539.836 510.746 539.781 cv
510.766 539.73 510.793 539.676 510.832 539.621 cv
510.863 539.57 510.91 539.516 510.969 539.453 cv
512.734 537.641 li
513.141 537.223 513.465 536.848 513.715 536.516 cv
513.957 536.184 514.148 535.883 514.285 535.605 cv
514.418 535.336 514.508 535.086 514.551 534.863 cv
514.59 534.641 514.609 534.434 514.613 534.234 cv
514.609 534.039 514.578 533.852 514.516 533.676 cv
514.449 533.504 514.352 533.352 514.23 533.219 cv
514.102 533.09 513.945 532.984 513.762 532.902 cv
513.57 532.828 513.355 532.789 513.113 532.785 cv
512.824 532.789 512.566 532.828 512.34 532.902 cv
512.109 532.984 511.91 533.07 511.742 533.156 cv
511.566 533.25 511.422 533.332 511.313 533.406 cv
511.195 533.488 511.109 533.527 511.055 533.523 cv
511.02 533.527 510.992 533.52 510.969 533.496 cv
510.941 533.48 510.918 533.449 510.902 533.406 cv
510.883 533.367 510.871 533.312 510.863 533.242 cv
510.852 533.176 510.848 533.094 510.852 532.996 cv
510.848 532.93 510.852 532.871 510.859 532.82 cv
510.863 532.773 510.871 532.73 510.883 532.691 cv
510.891 532.656 510.902 532.621 510.926 532.59 cv
510.941 532.559 510.98 532.52 511.035 532.469 cv
511.09 532.426 511.184 532.363 511.316 532.277 cv
511.449 532.199 511.617 532.117 511.824 532.031 cv
512.023 531.953 512.246 531.887 512.492 531.832 cv
512.734 531.781 512.992 531.754 513.262 531.75 cv
513.688 531.754 514.059 531.812 514.383 531.93 cv
514.703 532.051 514.973 532.215 515.184 532.426 cv
515.395 532.637 515.551 532.883 515.656 533.156 cv
515.762 533.437 515.816 533.73 515.816 534.043 cv
515.816 534.324 515.789 534.605 515.738 534.887 cv
515.688 535.168 515.582 535.473 515.422 535.793 cv
515.258 536.121 515.023 536.48 514.723 536.879 cv
514.414 537.277 514.012 537.738 513.508 538.254 cv
512.109 539.715 li
515.953 539.715 li
515.984 539.715 516.02 539.727 516.059 539.746 cv
516.09 539.77 516.121 539.801 516.145 539.84 cv
516.168 539.883 516.184 539.934 516.199 539.992 cv
516.207 540.055 516.215 540.125 516.219 540.207 cv
cp
f
585.117 540.246 mo
585.117 540.336 585.109 540.406 585.094 540.465 cv
585.078 540.527 585.059 540.578 585.039 540.609 cv
585.016 540.648 584.988 540.672 584.961 540.687 cv
584.93 540.703 584.902 540.711 584.871 540.711 cv
580.258 540.711 li
580.223 540.711 580.191 540.703 580.168 540.687 cv
580.137 540.672 580.113 540.648 580.09 540.609 cv
580.063 540.578 580.043 540.527 580.031 540.465 cv
580.016 540.406 580.008 540.336 580.012 540.246 cv
580.008 540.168 580.016 540.098 580.031 540.035 cv
580.043 539.98 580.059 539.93 580.082 539.891 cv
580.102 539.852 580.125 539.824 580.156 539.801 cv
580.184 539.785 580.219 539.773 580.258 539.77 cv
582.102 539.77 li
582.102 533.051 li
580.395 534.07 li
580.305 534.117 580.234 534.145 580.184 534.152 cv
580.129 534.164 580.086 534.152 580.059 534.121 cv
580.023 534.094 580 534.043 579.992 533.973 cv
579.977 533.906 579.973 533.82 579.977 533.715 cv
579.973 533.637 579.977 533.57 579.984 533.516 cv
579.992 533.461 580 533.418 580.016 533.379 cv
580.027 533.348 580.047 533.316 580.074 533.285 cv
580.098 533.262 580.133 533.234 580.176 533.203 cv
582.207 531.898 li
582.223 531.887 582.246 531.879 582.273 531.867 cv
582.301 531.859 582.336 531.848 582.379 531.84 cv
582.418 531.832 582.465 531.828 582.523 531.82 cv
582.574 531.82 582.645 531.816 582.727 531.816 cv
582.836 531.816 582.926 531.824 583 531.832 cv
583.07 531.844 583.129 531.855 583.172 531.867 cv
583.211 531.887 583.238 531.906 583.254 531.93 cv
583.266 531.957 583.27 531.984 583.273 532.008 cv
583.273 539.77 li
584.871 539.77 li
584.906 539.773 584.938 539.785 584.973 539.801 cv
585 539.824 585.027 539.852 585.051 539.891 cv
585.07 539.93 585.086 539.98 585.098 540.035 cv
585.109 540.098 585.117 540.168 585.117 540.246 cv
cp
f
592.555 538.199 mo
592.551 538.352 592.527 538.469 592.484 538.555 cv
592.438 538.641 592.375 538.684 592.293 538.684 cv
591.297 538.684 li
591.297 540.539 li
591.297 540.578 591.285 540.609 591.27 540.633 cv
591.246 540.664 591.215 540.684 591.172 540.699 cv
591.121 540.715 591.059 540.727 590.988 540.734 cv
590.91 540.742 590.816 540.746 590.699 540.75 cv
590.586 540.746 590.492 540.742 590.418 540.734 cv
590.34 540.727 590.277 540.715 590.238 540.699 cv
590.191 540.684 590.164 540.664 590.148 540.633 cv
590.133 540.609 590.125 540.578 590.125 540.539 cv
590.125 538.684 li
586.512 538.684 li
586.453 538.684 586.41 538.68 586.375 538.664 cv
586.336 538.656 586.301 538.629 586.277 538.59 cv
586.246 538.555 586.227 538.504 586.215 538.434 cv
586.203 538.367 586.199 538.277 586.199 538.164 cv
586.199 538.082 586.199 538.004 586.203 537.934 cv
586.207 537.867 586.215 537.805 586.23 537.746 cv
586.242 537.691 586.262 537.637 586.285 537.582 cv
586.305 537.531 586.332 537.477 586.367 537.414 cv
589.516 532.047 li
589.539 532.012 589.57 531.98 589.617 531.953 cv
589.656 531.926 589.715 531.902 589.785 531.883 cv
589.855 531.867 589.941 531.855 590.043 531.848 cv
590.145 531.844 590.266 531.84 590.406 531.836 cv
590.559 531.84 590.691 531.848 590.805 531.855 cv
590.918 531.871 591.008 531.883 591.082 531.898 cv
591.148 531.918 591.203 531.945 591.242 531.973 cv
591.277 532.004 591.297 532.035 591.297 532.074 cv
591.297 537.715 li
592.293 537.715 li
592.371 537.719 592.434 537.758 592.48 537.836 cv
592.527 537.918 592.551 538.039 592.555 538.199 cv
cp
590.125 532.867 mo
590.109 532.867 li
587.27 537.715 li
590.125 537.715 li
cp
f
661.078 540.246 mo
661.078 540.336 661.07 540.406 661.055 540.465 cv
661.039 540.527 661.02 540.578 661 540.609 cv
660.977 540.648 660.949 540.672 660.922 540.687 cv
660.891 540.703 660.863 540.711 660.832 540.711 cv
656.219 540.711 li
656.184 540.711 656.152 540.703 656.129 540.687 cv
656.098 540.672 656.074 540.648 656.051 540.609 cv
656.023 540.578 656.004 540.527 655.992 540.465 cv
655.977 540.406 655.969 540.336 655.973 540.246 cv
655.969 540.168 655.977 540.098 655.992 540.035 cv
656.004 539.98 656.02 539.93 656.043 539.891 cv
656.063 539.852 656.086 539.824 656.117 539.801 cv
656.145 539.785 656.18 539.773 656.219 539.77 cv
658.063 539.77 li
658.063 533.051 li
656.355 534.07 li
656.266 534.117 656.195 534.145 656.145 534.152 cv
656.09 534.164 656.047 534.152 656.02 534.121 cv
655.984 534.094 655.961 534.043 655.953 533.973 cv
655.938 533.906 655.934 533.82 655.938 533.715 cv
655.934 533.637 655.938 533.57 655.945 533.516 cv
655.953 533.461 655.961 533.418 655.977 533.379 cv
655.988 533.348 656.008 533.316 656.035 533.285 cv
656.059 533.262 656.094 533.234 656.137 533.203 cv
658.168 531.898 li
658.184 531.887 658.207 531.879 658.234 531.867 cv
658.262 531.859 658.297 531.848 658.34 531.84 cv
658.379 531.832 658.426 531.828 658.484 531.82 cv
658.535 531.82 658.605 531.816 658.688 531.816 cv
658.797 531.816 658.887 531.824 658.961 531.832 cv
659.031 531.844 659.09 531.855 659.133 531.867 cv
659.172 531.887 659.199 531.906 659.215 531.93 cv
659.227 531.957 659.23 531.984 659.234 532.008 cv
659.234 539.77 li
660.832 539.77 li
660.867 539.773 660.898 539.785 660.934 539.801 cv
660.961 539.824 660.988 539.852 661.012 539.891 cv
661.031 539.93 661.047 539.98 661.059 540.035 cv
661.07 540.098 661.078 540.168 661.078 540.246 cv
cp
f
668.359 537.852 mo
668.355 538.238 668.297 538.613 668.18 538.973 cv
668.063 539.336 667.879 539.656 667.637 539.93 cv
667.387 540.211 667.078 540.43 666.703 540.594 cv
666.324 540.758 665.875 540.84 665.363 540.84 cv
664.992 540.84 664.668 540.797 664.387 540.703 cv
664.102 540.617 663.855 540.488 663.648 540.316 cv
663.438 540.152 663.266 539.945 663.129 539.695 cv
662.988 539.453 662.875 539.172 662.793 538.855 cv
662.707 538.543 662.648 538.199 662.613 537.824 cv
662.574 537.453 662.555 537.051 662.559 536.621 cv
662.555 536.246 662.574 535.867 662.617 535.477 cv
662.656 535.094 662.73 534.719 662.836 534.355 cv
662.941 534 663.082 533.664 663.266 533.344 cv
663.441 533.031 663.668 532.754 663.941 532.516 cv
664.211 532.285 664.535 532.102 664.914 531.961 cv
665.289 531.828 665.727 531.758 666.23 531.754 cv
666.395 531.758 666.566 531.77 666.742 531.785 cv
666.914 531.809 667.074 531.836 667.219 531.867 cv
667.363 531.906 667.484 531.941 667.586 531.98 cv
667.684 532.023 667.75 532.059 667.785 532.082 cv
667.816 532.109 667.84 532.137 667.859 532.164 cv
667.871 532.195 667.883 532.227 667.895 532.258 cv
667.902 532.293 667.91 532.332 667.918 532.375 cv
667.918 532.418 667.922 532.469 667.926 532.531 cv
667.922 532.617 667.922 532.691 667.922 532.746 cv
667.918 532.809 667.906 532.855 667.895 532.887 cv
667.875 532.926 667.855 532.953 667.832 532.969 cv
667.805 532.992 667.773 533 667.734 532.996 cv
667.68 533 667.609 532.984 667.527 532.949 cv
667.438 532.922 667.332 532.887 667.215 532.844 cv
667.09 532.809 666.941 532.773 666.766 532.738 cv
666.59 532.711 666.387 532.695 666.156 532.691 cv
665.73 532.695 665.367 532.781 665.063 532.949 cv
664.758 533.125 664.508 533.355 664.316 533.645 cv
664.121 533.937 663.977 534.277 663.887 534.66 cv
663.789 535.047 663.738 535.449 663.727 535.863 cv
663.844 535.801 663.977 535.73 664.125 535.66 cv
664.273 535.594 664.434 535.535 664.609 535.477 cv
664.781 535.426 664.965 535.379 665.164 535.344 cv
665.359 535.309 665.57 535.293 665.793 535.289 cv
666.27 535.293 666.672 535.355 667 535.484 cv
667.324 535.617 667.59 535.801 667.797 536.027 cv
667.996 536.262 668.141 536.531 668.23 536.84 cv
668.313 537.152 668.355 537.488 668.359 537.852 cv
cp
667.172 537.961 mo
667.172 537.699 667.145 537.457 667.094 537.238 cv
667.039 537.023 666.953 536.84 666.832 536.691 cv
666.707 536.543 666.543 536.43 666.34 536.344 cv
666.133 536.266 665.879 536.223 665.582 536.219 cv
665.41 536.223 665.242 536.238 665.074 536.266 cv
664.906 536.297 664.742 536.336 664.59 536.387 cv
664.43 536.441 664.281 536.504 664.137 536.57 cv
663.992 536.645 663.859 536.723 663.746 536.801 cv
663.742 537.391 663.781 537.879 663.859 538.273 cv
663.934 538.672 664.043 538.992 664.188 539.227 cv
664.328 539.469 664.508 539.637 664.723 539.738 cv
664.934 539.84 665.184 539.891 665.473 539.891 cv
665.762 539.891 666.012 539.836 666.23 539.727 cv
666.441 539.617 666.621 539.473 666.762 539.289 cv
666.902 539.105 667.004 538.898 667.074 538.668 cv
667.137 538.437 667.172 538.203 667.172 537.961 cv
cp
f
16.637 359.234 mo
16.734 359.238 16.816 359.242 16.883 359.25 cv
16.957 359.262 17.016 359.281 17.059 359.305 cv
17.109 359.332 17.145 359.363 17.16 359.395 cv
17.184 359.434 17.191 359.469 17.191 359.508 cv
17.191 364.363 li
17.191 364.488 17.152 364.602 17.07 364.707 cv
16.992 364.816 16.852 364.871 16.645 364.867 cv
7.617 364.867 li
7.414 364.871 7.273 364.816 7.191 364.707 cv
7.113 364.602 7.074 364.488 7.07 364.363 cv
7.07 359.562 li
7.074 359.523 7.082 359.484 7.102 359.449 cv
7.125 359.418 7.16 359.391 7.203 359.367 cv
7.254 359.348 7.313 359.332 7.379 359.316 cv
7.453 359.305 7.539 359.297 7.641 359.297 cv
7.734 359.297 7.816 359.305 7.887 359.316 cv
7.957 359.332 8.016 359.348 8.059 359.367 cv
8.105 359.391 8.137 359.418 8.156 359.449 cv
8.18 359.484 8.191 359.523 8.188 359.562 cv
8.188 363.52 li
11.363 363.52 li
11.363 360.125 li
11.367 360.086 11.379 360.047 11.398 360.012 cv
11.426 359.98 11.457 359.953 11.496 359.926 cv
11.539 359.906 11.598 359.891 11.668 359.875 cv
11.742 359.867 11.828 359.859 11.926 359.859 cv
12.023 359.859 12.105 359.867 12.168 359.875 cv
12.238 359.891 12.293 359.906 12.332 359.926 cv
12.379 359.953 12.406 359.98 12.422 360.012 cv
12.441 360.047 12.453 360.086 12.449 360.125 cv
12.449 363.52 li
16.074 363.52 li
16.074 359.508 li
16.078 359.469 16.09 359.434 16.105 359.395 cv
16.129 359.363 16.16 359.332 16.203 359.305 cv
16.25 359.281 16.309 359.262 16.375 359.25 cv
16.449 359.242 16.535 359.238 16.637 359.234 cv
cp
f
16.996 351.133 mo
17.043 351.137 17.078 351.148 17.102 351.164 cv
17.133 351.187 17.156 351.219 17.176 351.266 cv
17.195 351.312 17.207 351.379 17.223 351.461 cv
17.23 351.547 17.238 351.652 17.238 351.773 cv
17.238 351.906 17.23 352.012 17.223 352.094 cv
17.207 352.18 17.195 352.246 17.176 352.289 cv
17.156 352.34 17.133 352.371 17.102 352.391 cv
17.078 352.414 17.043 352.426 16.996 352.422 cv
12.875 352.422 li
12.473 352.426 12.148 352.457 11.902 352.516 cv
11.66 352.582 11.449 352.672 11.27 352.789 cv
11.094 352.91 10.957 353.066 10.863 353.254 cv
10.77 353.445 10.723 353.668 10.723 353.918 cv
10.723 354.246 10.84 354.566 11.066 354.887 cv
11.301 355.211 11.637 355.551 12.074 355.902 cv
16.996 355.902 li
17.043 355.906 17.078 355.918 17.102 355.934 cv
17.133 355.957 17.156 355.988 17.176 356.035 cv
17.195 356.082 17.207 356.148 17.223 356.23 cv
17.23 356.316 17.238 356.422 17.238 356.551 cv
17.238 356.676 17.23 356.781 17.223 356.867 cv
17.207 356.953 17.195 357.02 17.176 357.066 cv
17.156 357.117 17.133 357.152 17.102 357.168 cv
17.078 357.187 17.043 357.195 16.996 357.195 cv
9.957 357.195 li
9.918 357.195 9.883 357.187 9.852 357.172 cv
9.824 357.156 9.797 357.125 9.773 357.078 cv
9.75 357.031 9.734 356.973 9.727 356.898 cv
9.719 356.824 9.715 356.727 9.715 356.605 cv
9.715 356.492 9.719 356.398 9.727 356.32 cv
9.734 356.25 9.75 356.191 9.773 356.145 cv
9.797 356.105 9.824 356.074 9.852 356.055 cv
9.883 356.039 9.918 356.031 9.957 356.027 cv
10.887 356.027 li
10.445 355.637 10.121 355.242 9.914 354.844 cv
9.711 354.453 9.609 354.055 9.605 353.648 cv
9.609 353.184 9.688 352.789 9.844 352.465 cv
10.004 352.148 10.219 351.887 10.48 351.687 cv
10.75 351.492 11.059 351.352 11.414 351.262 cv
11.773 351.18 12.203 351.137 12.703 351.133 cv
cp
f
13.172 342.777 mo
13.375 342.781 13.52 342.832 13.605 342.93 cv
13.691 343.035 13.734 343.148 13.734 343.277 cv
13.734 347.914 li
14.125 347.918 14.477 347.879 14.789 347.797 cv
15.102 347.723 15.371 347.594 15.598 347.406 cv
15.824 347.227 15.996 346.988 16.113 346.691 cv
16.234 346.402 16.297 346.043 16.293 345.613 cv
16.297 345.281 16.27 344.98 16.211 344.719 cv
16.16 344.457 16.098 344.23 16.027 344.039 cv
15.961 343.848 15.898 343.691 15.844 343.566 cv
15.789 343.445 15.762 343.352 15.762 343.285 cv
15.762 343.25 15.773 343.219 15.789 343.187 cv
15.813 343.164 15.84 343.141 15.871 343.121 cv
15.91 343.109 15.961 343.098 16.023 343.086 cv
16.094 343.082 16.172 343.078 16.262 343.074 cv
16.332 343.078 16.391 343.082 16.438 343.082 cv
16.488 343.09 16.531 343.094 16.57 343.102 cv
16.609 343.109 16.645 343.125 16.676 343.141 cv
16.707 343.164 16.738 343.187 16.766 343.211 cv
16.797 343.242 16.844 343.324 16.906 343.465 cv
16.973 343.605 17.035 343.789 17.098 344.012 cv
17.16 344.238 17.215 344.496 17.266 344.789 cv
17.313 345.086 17.336 345.402 17.34 345.734 cv
17.336 346.316 17.258 346.824 17.098 347.254 cv
16.938 347.691 16.699 348.059 16.379 348.355 cv
16.063 348.656 15.664 348.879 15.184 349.027 cv
14.703 349.18 14.145 349.254 13.508 349.254 cv
12.906 349.254 12.363 349.176 11.879 349.02 cv
11.398 348.863 10.988 348.641 10.648 348.344 cv
10.316 348.051 10.059 347.691 9.875 347.273 cv
9.699 346.859 9.609 346.395 9.605 345.875 cv
9.609 345.324 9.699 344.852 9.871 344.461 cv
10.051 344.074 10.289 343.758 10.586 343.504 cv
10.891 343.258 11.242 343.074 11.641 342.953 cv
12.047 342.84 12.477 342.781 12.938 342.777 cv
cp
12.789 344.074 mo
12.113 344.059 11.578 344.211 11.191 344.527 cv
10.809 344.848 10.617 345.32 10.613 345.941 cv
10.617 346.266 10.676 346.547 10.793 346.785 cv
10.914 347.027 11.074 347.227 11.27 347.391 cv
11.469 347.555 11.699 347.68 11.961 347.766 cv
12.227 347.855 12.504 347.906 12.789 347.914 cv
cp
f
10.418 336.691 mo
10.535 336.695 10.633 336.699 10.707 336.699 cv
10.789 336.707 10.852 336.715 10.891 336.73 cv
10.938 336.746 10.969 336.766 10.992 336.789 cv
11.016 336.812 11.027 336.848 11.027 336.887 cv
11.027 336.934 11.016 336.984 10.992 337.039 cv
10.969 337.102 10.945 337.168 10.922 337.246 cv
10.898 337.324 10.879 337.41 10.855 337.5 cv
10.84 337.598 10.828 337.699 10.824 337.805 cv
10.828 337.937 10.855 338.066 10.902 338.187 cv
10.957 338.316 11.043 338.445 11.16 338.582 cv
11.285 338.723 11.441 338.867 11.637 339.016 cv
11.836 339.168 12.078 339.336 12.363 339.516 cv
16.996 339.516 li
17.043 339.52 17.078 339.531 17.102 339.547 cv
17.133 339.57 17.156 339.602 17.176 339.648 cv
17.195 339.695 17.207 339.762 17.223 339.844 cv
17.23 339.93 17.238 340.035 17.238 340.164 cv
17.238 340.289 17.23 340.395 17.223 340.48 cv
17.207 340.566 17.195 340.633 17.176 340.68 cv
17.156 340.73 17.133 340.766 17.102 340.781 cv
17.078 340.801 17.043 340.809 16.996 340.809 cv
9.957 340.809 li
9.918 340.809 9.883 340.801 9.852 340.785 cv
9.824 340.77 9.797 340.738 9.773 340.691 cv
9.75 340.645 9.734 340.586 9.727 340.512 cv
9.719 340.437 9.715 340.34 9.715 340.219 cv
9.715 340.105 9.719 340.012 9.727 339.934 cv
9.734 339.863 9.75 339.805 9.773 339.758 cv
9.797 339.719 9.824 339.687 9.852 339.668 cv
9.883 339.652 9.918 339.645 9.957 339.641 cv
10.98 339.641 li
10.699 339.453 10.473 339.27 10.293 339.098 cv
10.121 338.93 9.98 338.77 9.875 338.617 cv
9.777 338.469 9.707 338.32 9.664 338.168 cv
9.629 338.023 9.609 337.875 9.605 337.719 cv
9.609 337.656 9.613 337.578 9.617 337.488 cv
9.629 337.406 9.645 337.316 9.66 337.219 cv
9.684 337.125 9.707 337.039 9.73 336.961 cv
9.762 336.887 9.785 336.832 9.809 336.801 cv
9.836 336.77 9.863 336.75 9.883 336.738 cv
9.91 336.73 9.938 336.723 9.973 336.711 cv
10.012 336.707 10.066 336.699 10.133 336.695 cv
10.207 336.695 10.301 336.695 10.418 336.691 cv
cp
f
10.277 329.527 mo
10.461 329.527 10.594 329.555 10.672 329.602 cv
10.754 329.656 10.793 329.719 10.793 329.793 cv
10.793 330.801 li
10.98 330.621 11.188 330.492 11.414 330.418 cv
11.641 330.348 11.879 330.312 12.121 330.309 cv
12.535 330.312 12.895 330.379 13.203 330.504 cv
13.52 330.637 13.785 330.82 13.996 331.062 cv
14.215 331.305 14.379 331.594 14.492 331.93 cv
14.609 332.266 14.668 332.637 14.664 333.039 cv
14.668 333.328 14.629 333.602 14.551 333.855 cv
14.477 334.117 14.383 334.316 14.266 334.453 cv
14.363 334.551 14.469 334.625 14.586 334.684 cv
14.707 334.746 14.844 334.777 15 334.773 cv
15.184 334.777 15.336 334.691 15.457 334.52 cv
15.578 334.352 15.645 334.129 15.652 333.844 cv
15.73 332.008 li
15.746 331.66 15.793 331.34 15.875 331.043 cv
15.965 330.754 16.086 330.5 16.242 330.285 cv
16.402 330.074 16.598 329.906 16.828 329.785 cv
17.063 329.668 17.332 329.609 17.637 329.605 cv
17.957 329.609 18.262 329.676 18.559 329.809 cv
18.848 329.945 19.105 330.152 19.332 330.43 cv
19.551 330.711 19.727 331.07 19.855 331.5 cv
19.98 331.937 20.043 332.445 20.047 333.031 cv
20.043 333.602 19.996 334.086 19.902 334.484 cv
19.805 334.883 19.672 335.211 19.508 335.465 cv
19.336 335.723 19.137 335.906 18.906 336.02 cv
18.672 336.137 18.422 336.195 18.152 336.191 cv
17.98 336.195 17.813 336.176 17.652 336.129 cv
17.488 336.09 17.336 336.023 17.191 335.937 cv
17.047 335.852 16.91 335.746 16.773 335.617 cv
16.645 335.492 16.512 335.344 16.379 335.176 cv
16.25 335.434 16.086 335.625 15.887 335.742 cv
15.688 335.867 15.473 335.926 15.242 335.926 cv
14.926 335.926 14.641 335.863 14.391 335.73 cv
14.141 335.605 13.918 335.441 13.719 335.246 cv
13.527 335.41 13.309 335.539 13.066 335.629 cv
12.824 335.727 12.531 335.773 12.184 335.77 cv
11.785 335.773 11.426 335.707 11.105 335.566 cv
10.789 335.434 10.52 335.246 10.301 335.004 cv
10.082 334.766 9.914 334.477 9.797 334.137 cv
9.68 333.805 9.621 333.437 9.621 333.039 cv
9.621 332.828 9.633 332.629 9.656 332.441 cv
9.68 332.258 9.715 332.086 9.754 331.922 cv
9.754 329.793 li
9.758 329.707 9.801 329.641 9.883 329.594 cv
9.973 329.551 10.102 329.527 10.277 329.527 cv
cp
12.129 331.543 mo
11.652 331.543 11.281 331.676 11.008 331.941 cv
10.742 332.207 10.605 332.582 10.605 333.062 cv
10.605 333.316 10.648 333.535 10.73 333.715 cv
10.816 333.902 10.93 334.055 11.074 334.176 cv
11.223 334.301 11.391 334.391 11.578 334.449 cv
11.77 334.512 11.969 334.543 12.176 334.539 cv
12.645 334.543 13.012 334.41 13.273 334.145 cv
13.543 333.883 13.676 333.516 13.672 333.039 cv
13.676 332.785 13.637 332.562 13.551 332.375 cv
13.473 332.187 13.359 332.035 13.215 331.91 cv
13.074 331.789 12.91 331.695 12.719 331.633 cv
12.531 331.574 12.332 331.543 12.129 331.543 cv
cp
17.707 330.895 mo
17.402 330.898 17.172 331.023 17.008 331.266 cv
16.848 331.516 16.758 331.852 16.746 332.273 cv
16.684 334.094 li
16.816 334.262 16.941 334.398 17.055 334.504 cv
17.172 334.613 17.281 334.699 17.391 334.758 cv
17.496 334.824 17.602 334.867 17.707 334.887 cv
17.809 334.914 17.914 334.926 18.027 334.922 cv
18.363 334.926 18.621 334.754 18.797 334.406 cv
18.973 334.066 19.059 333.586 19.063 332.969 cv
19.059 332.582 19.023 332.254 18.949 331.988 cv
18.871 331.723 18.77 331.512 18.645 331.348 cv
18.52 331.191 18.375 331.074 18.215 331 cv
18.051 330.934 17.883 330.898 17.707 330.895 cv
cp
f
17.191 324.656 mo
19.781 325.594 li
19.863 325.629 19.926 325.707 19.973 325.832 cv
20.016 325.961 20.039 326.156 20.039 326.414 cv
20.039 326.555 20.031 326.664 20.02 326.742 cv
20.004 326.828 19.98 326.891 19.953 326.934 cv
19.918 326.98 19.879 327.004 19.828 327.008 cv
19.773 327.016 19.711 327.004 19.641 326.969 cv
17.191 326 li
17.172 326.047 17.141 326.094 17.09 326.133 cv
17.047 326.18 16.996 326.207 16.941 326.219 cv
10.215 328.73 li
10.109 328.773 10.023 328.797 9.957 328.793 cv
9.898 328.797 9.848 328.773 9.809 328.73 cv
9.773 328.691 9.75 328.625 9.734 328.527 cv
9.723 328.437 9.715 328.312 9.715 328.152 cv
9.715 328 9.719 327.879 9.727 327.785 cv
9.734 327.699 9.75 327.629 9.77 327.574 cv
9.793 327.527 9.824 327.488 9.859 327.461 cv
9.902 327.437 9.953 327.41 10.02 327.383 cv
15.668 325.375 li
15.668 325.352 li
9.988 323.41 li
9.895 323.379 9.828 323.344 9.797 323.297 cv
9.77 323.258 9.75 323.191 9.734 323.098 cv
9.723 323.012 9.715 322.883 9.715 322.715 cv
9.715 322.57 9.723 322.449 9.734 322.355 cv
9.75 322.262 9.773 322.195 9.809 322.148 cv
9.848 322.109 9.898 322.086 9.957 322.082 cv
10.023 322.086 10.102 322.102 10.191 322.129 cv
cp
f
15.762 310.027 mo
15.848 310.031 15.922 310.031 15.98 310.035 cv
16.047 310.043 16.102 310.055 16.145 310.062 cv
16.195 310.078 16.238 310.094 16.27 310.113 cv
16.309 310.137 16.352 310.172 16.402 310.223 cv
16.457 310.277 16.535 310.391 16.641 310.555 cv
16.75 310.727 16.855 310.934 16.953 311.176 cv
17.059 311.426 17.141 311.707 17.211 312.027 cv
17.277 312.348 17.313 312.699 17.316 313.078 cv
17.313 313.738 17.207 314.332 16.988 314.859 cv
16.773 315.391 16.449 315.844 16.02 316.215 cv
15.59 316.59 15.063 316.875 14.434 317.074 cv
13.809 317.277 13.086 317.379 12.262 317.375 cv
11.426 317.379 10.676 317.27 10.02 317.051 cv
9.363 316.836 8.809 316.531 8.348 316.141 cv
7.895 315.75 7.547 315.281 7.305 314.734 cv
7.07 314.191 6.949 313.59 6.945 312.922 cv
6.949 312.633 6.977 312.348 7.027 312.07 cv
7.086 311.797 7.156 311.543 7.234 311.305 cv
7.32 311.074 7.414 310.863 7.523 310.68 cv
7.633 310.5 7.723 310.375 7.793 310.301 cv
7.863 310.23 7.918 310.184 7.953 310.16 cv
7.992 310.141 8.035 310.125 8.082 310.109 cv
8.133 310.102 8.191 310.09 8.258 310.078 cv
8.328 310.074 8.41 310.07 8.5 310.066 cv
8.609 310.07 8.695 310.074 8.766 310.082 cv
8.84 310.094 8.902 310.113 8.949 310.133 cv
9 310.156 9.035 310.18 9.059 310.207 cv
9.082 310.238 9.094 310.273 9.094 310.312 cv
9.094 310.387 9.043 310.488 8.941 310.621 cv
8.84 310.754 8.73 310.926 8.605 311.129 cv
8.488 311.34 8.375 311.59 8.27 311.883 cv
8.172 312.18 8.121 312.535 8.117 312.945 cv
8.121 313.398 8.211 313.809 8.387 314.176 cv
8.57 314.551 8.836 314.867 9.184 315.125 cv
9.535 315.391 9.961 315.594 10.461 315.734 cv
10.965 315.883 11.539 315.953 12.184 315.949 cv
12.828 315.953 13.395 315.883 13.887 315.742 cv
14.379 315.605 14.793 315.406 15.121 315.145 cv
15.457 314.887 15.707 314.57 15.875 314.187 cv
16.047 313.812 16.133 313.383 16.129 312.906 cv
16.133 312.504 16.082 312.152 15.98 311.852 cv
15.883 311.551 15.773 311.297 15.648 311.082 cv
15.527 310.871 15.414 310.695 15.313 310.559 cv
15.215 310.422 15.164 310.312 15.164 310.234 cv
15.164 310.199 15.172 310.168 15.188 310.141 cv
15.203 310.117 15.234 310.098 15.277 310.078 cv
15.324 310.062 15.387 310.051 15.461 310.039 cv
15.543 310.035 15.641 310.031 15.762 310.027 cv
cp
f
13.398 301.852 mo
13.977 301.855 14.504 301.93 14.984 302.078 cv
15.469 302.23 15.883 302.457 16.23 302.754 cv
16.582 303.059 16.855 303.434 17.047 303.879 cv
17.242 304.332 17.336 304.855 17.34 305.449 cv
17.336 306.031 17.254 306.535 17.082 306.961 cv
16.914 307.395 16.664 307.754 16.332 308.039 cv
16.008 308.328 15.609 308.539 15.137 308.68 cv
14.668 308.82 14.137 308.891 13.539 308.891 cv
12.969 308.891 12.441 308.816 11.957 308.668 cv
11.477 308.52 11.059 308.297 10.707 307.996 cv
10.359 307.695 10.09 307.32 9.895 306.871 cv
9.707 306.426 9.609 305.902 9.605 305.301 cv
9.609 304.723 9.695 304.219 9.863 303.785 cv
10.039 303.359 10.289 303 10.613 302.711 cv
10.945 302.426 11.344 302.211 11.813 302.066 cv
12.281 301.926 12.813 301.855 13.398 301.852 cv
cp
13.484 303.187 mo
13.105 303.191 12.746 303.227 12.406 303.297 cv
12.066 303.371 11.77 303.488 11.512 303.648 cv
11.262 303.812 11.059 304.031 10.906 304.309 cv
10.762 304.59 10.688 304.937 10.684 305.352 cv
10.688 305.734 10.754 306.066 10.887 306.34 cv
11.023 306.621 11.215 306.848 11.461 307.023 cv
11.711 307.207 12.008 307.34 12.344 307.422 cv
12.688 307.512 13.055 307.555 13.453 307.551 cv
13.84 307.555 14.203 307.52 14.539 307.445 cv
14.879 307.379 15.176 307.262 15.43 307.09 cv
15.684 306.926 15.883 306.703 16.031 306.422 cv
16.18 306.148 16.254 305.801 16.254 305.383 cv
16.254 305.004 16.188 304.676 16.051 304.395 cv
15.918 304.121 15.727 303.891 15.48 303.711 cv
15.234 303.531 14.941 303.402 14.602 303.316 cv
14.266 303.234 13.895 303.191 13.484 303.187 cv
cp
f
16.996 293.895 mo
17.043 293.898 17.078 293.91 17.102 293.926 cv
17.133 293.949 17.156 293.98 17.176 294.027 cv
17.195 294.074 17.207 294.141 17.223 294.223 cv
17.23 294.309 17.238 294.414 17.238 294.535 cv
17.238 294.668 17.23 294.773 17.223 294.855 cv
17.207 294.941 17.195 295.008 17.176 295.051 cv
17.156 295.102 17.133 295.133 17.102 295.152 cv
17.078 295.176 17.043 295.187 16.996 295.184 cv
12.875 295.184 li
12.473 295.187 12.148 295.219 11.902 295.277 cv
11.66 295.344 11.449 295.434 11.27 295.551 cv
11.094 295.672 10.957 295.828 10.863 296.016 cv
10.77 296.207 10.723 296.43 10.723 296.68 cv
10.723 297.008 10.84 297.328 11.066 297.648 cv
11.301 297.973 11.637 298.312 12.074 298.664 cv
16.996 298.664 li
17.043 298.668 17.078 298.68 17.102 298.695 cv
17.133 298.719 17.156 298.75 17.176 298.797 cv
17.195 298.844 17.207 298.91 17.223 298.992 cv
17.23 299.078 17.238 299.184 17.238 299.312 cv
17.238 299.437 17.23 299.543 17.223 299.629 cv
17.207 299.715 17.195 299.781 17.176 299.828 cv
17.156 299.879 17.133 299.914 17.102 299.93 cv
17.078 299.949 17.043 299.957 16.996 299.957 cv
9.957 299.957 li
9.918 299.957 9.883 299.949 9.852 299.934 cv
9.824 299.918 9.797 299.887 9.773 299.84 cv
9.75 299.793 9.734 299.734 9.727 299.66 cv
9.719 299.586 9.715 299.488 9.715 299.367 cv
9.715 299.254 9.719 299.16 9.727 299.082 cv
9.734 299.012 9.75 298.953 9.773 298.906 cv
9.797 298.867 9.824 298.836 9.852 298.816 cv
9.883 298.801 9.918 298.793 9.957 298.789 cv
10.887 298.789 li
10.445 298.398 10.121 298.004 9.914 297.605 cv
9.711 297.215 9.609 296.816 9.605 296.41 cv
9.609 295.945 9.688 295.551 9.844 295.227 cv
10.004 294.91 10.219 294.648 10.48 294.449 cv
10.75 294.254 11.059 294.113 11.414 294.023 cv
11.773 293.941 12.203 293.898 12.703 293.895 cv
cp
f
15.078 287.125 mo
15.441 287.129 15.762 287.195 16.043 287.324 cv
16.324 287.461 16.563 287.652 16.754 287.895 cv
16.949 288.145 17.094 288.434 17.191 288.77 cv
17.289 289.109 17.336 289.484 17.34 289.887 cv
17.336 290.141 17.316 290.379 17.281 290.602 cv
17.238 290.832 17.191 291.035 17.133 291.215 cv
17.074 291.398 17.012 291.551 16.945 291.672 cv
16.883 291.801 16.824 291.891 16.77 291.945 cv
16.719 292.004 16.648 292.047 16.551 292.07 cv
16.461 292.098 16.332 292.109 16.168 292.109 cv
16.07 292.109 15.988 292.105 15.918 292.094 cv
15.855 292.086 15.801 292.074 15.754 292.055 cv
15.715 292.043 15.684 292.02 15.664 291.988 cv
15.648 291.961 15.641 291.93 15.637 291.891 cv
15.641 291.836 15.676 291.75 15.742 291.637 cv
15.816 291.527 15.891 291.391 15.973 291.223 cv
16.059 291.059 16.137 290.863 16.203 290.637 cv
16.277 290.418 16.313 290.16 16.309 289.863 cv
16.313 289.648 16.289 289.449 16.238 289.27 cv
16.195 289.094 16.125 288.941 16.031 288.809 cv
15.941 288.684 15.828 288.582 15.684 288.508 cv
15.543 288.441 15.375 288.406 15.18 288.402 cv
14.984 288.406 14.816 288.457 14.68 288.555 cv
14.547 288.66 14.426 288.793 14.32 288.957 cv
14.219 289.125 14.129 289.312 14.043 289.52 cv
13.965 289.73 13.879 289.945 13.789 290.164 cv
13.703 290.387 13.602 290.605 13.488 290.812 cv
13.379 291.027 13.242 291.215 13.078 291.383 cv
12.918 291.551 12.727 291.687 12.5 291.785 cv
12.277 291.891 12.008 291.941 11.691 291.937 cv
11.418 291.941 11.152 291.887 10.898 291.777 cv
10.648 291.672 10.43 291.512 10.234 291.297 cv
10.047 291.082 9.895 290.812 9.777 290.492 cv
9.668 290.172 9.609 289.801 9.605 289.371 cv
9.609 289.187 9.625 289 9.652 288.809 cv
9.688 288.625 9.727 288.453 9.77 288.301 cv
9.82 288.152 9.871 288.023 9.922 287.914 cv
9.98 287.805 10.027 287.723 10.066 287.668 cv
10.109 287.613 10.148 287.578 10.176 287.559 cv
10.211 287.543 10.246 287.531 10.281 287.52 cv
10.324 287.516 10.371 287.508 10.426 287.496 cv
10.484 287.492 10.555 287.488 10.637 287.484 cv
10.727 287.488 10.805 287.492 10.867 287.496 cv
10.938 287.508 10.988 287.52 11.027 287.535 cv
11.07 287.555 11.102 287.578 11.117 287.602 cv
11.137 287.633 11.145 287.66 11.145 287.687 cv
11.145 287.738 11.117 287.805 11.059 287.891 cv
11.004 287.98 10.941 288.098 10.875 288.238 cv
10.813 288.383 10.754 288.547 10.691 288.734 cv
10.637 288.926 10.605 289.145 10.605 289.387 cv
10.605 289.609 10.633 289.801 10.68 289.965 cv
10.734 290.133 10.805 290.27 10.891 290.375 cv
10.984 290.484 11.09 290.566 11.215 290.617 cv
11.34 290.676 11.477 290.703 11.621 290.699 cv
11.828 290.703 12 290.652 12.133 290.543 cv
12.273 290.441 12.395 290.305 12.5 290.137 cv
12.605 289.973 12.699 289.781 12.781 289.566 cv
12.867 289.355 12.953 289.141 13.039 288.914 cv
13.129 288.695 13.227 288.477 13.336 288.258 cv
13.445 288.043 13.578 287.848 13.734 287.68 cv
13.891 287.516 14.078 287.383 14.297 287.277 cv
14.516 287.18 14.777 287.129 15.078 287.125 cv
cp
f
16.996 279.25 mo
17.043 279.254 17.078 279.262 17.102 279.277 cv
17.133 279.297 17.156 279.328 17.176 279.375 cv
17.195 279.422 17.207 279.484 17.223 279.559 cv
17.23 279.637 17.238 279.73 17.238 279.836 cv
17.238 279.961 17.23 280.059 17.223 280.129 cv
17.207 280.207 17.195 280.266 17.176 280.309 cv
17.156 280.355 17.133 280.387 17.102 280.398 cv
17.078 280.418 17.043 280.426 16.996 280.422 cv
16.066 280.422 li
16.512 280.828 16.836 281.223 17.035 281.613 cv
17.238 282.004 17.336 282.402 17.34 282.801 cv
17.336 283.273 17.262 283.668 17.105 283.984 cv
16.953 284.309 16.742 284.566 16.469 284.766 cv
16.203 284.965 15.891 285.109 15.531 285.191 cv
15.176 285.281 14.738 285.324 14.227 285.32 cv
9.957 285.32 li
9.918 285.324 9.883 285.312 9.852 285.293 cv
9.824 285.277 9.797 285.242 9.773 285.187 cv
9.75 285.137 9.734 285.07 9.727 284.984 cv
9.719 284.902 9.715 284.797 9.715 284.668 cv
9.715 284.547 9.719 284.441 9.727 284.355 cv
9.734 284.273 9.75 284.207 9.773 284.156 cv
9.797 284.109 9.824 284.074 9.852 284.051 cv
9.883 284.031 9.918 284.023 9.957 284.02 cv
14.055 284.02 li
14.469 284.023 14.797 283.992 15.043 283.93 cv
15.293 283.871 15.504 283.781 15.68 283.656 cv
15.855 283.539 15.992 283.383 16.086 283.191 cv
16.184 283.008 16.23 282.789 16.23 282.535 cv
16.23 282.215 16.117 281.895 15.887 281.57 cv
15.656 281.25 15.32 280.906 14.875 280.547 cv
9.957 280.547 li
9.918 280.547 9.883 280.539 9.852 280.52 cv
9.824 280.504 9.797 280.469 9.773 280.414 cv
9.75 280.363 9.734 280.297 9.727 280.215 cv
9.719 280.137 9.715 280.031 9.715 279.898 cv
9.715 279.777 9.719 279.672 9.727 279.586 cv
9.734 279.504 9.75 279.441 9.773 279.391 cv
9.797 279.348 9.824 279.312 9.852 279.285 cv
9.883 279.266 9.918 279.254 9.957 279.25 cv
cp
f
16.996 266.426 mo
17.043 266.43 17.078 266.441 17.102 266.457 cv
17.133 266.48 17.156 266.512 17.176 266.559 cv
17.195 266.605 17.207 266.672 17.223 266.754 cv
17.23 266.84 17.238 266.945 17.238 267.066 cv
17.238 267.203 17.23 267.309 17.223 267.391 cv
17.207 267.477 17.195 267.543 17.176 267.59 cv
17.156 267.641 17.133 267.676 17.102 267.695 cv
17.078 267.719 17.043 267.73 16.996 267.727 cv
12.719 267.727 li
12.422 267.73 12.148 267.758 11.902 267.805 cv
11.66 267.859 11.449 267.941 11.27 268.055 cv
11.094 268.172 10.957 268.316 10.863 268.492 cv
10.77 268.672 10.723 268.883 10.723 269.117 cv
10.723 269.418 10.84 269.715 11.066 270.016 cv
11.301 270.316 11.637 270.648 12.074 271.004 cv
16.996 271.004 li
17.043 271.008 17.078 271.016 17.102 271.035 cv
17.133 271.059 17.156 271.094 17.176 271.141 cv
17.195 271.191 17.207 271.258 17.223 271.34 cv
17.23 271.426 17.238 271.531 17.238 271.652 cv
17.238 271.773 17.23 271.875 17.223 271.961 cv
17.207 272.047 17.195 272.117 17.176 272.164 cv
17.156 272.219 17.133 272.25 17.102 272.266 cv
17.078 272.285 17.043 272.297 16.996 272.293 cv
12.719 272.293 li
12.422 272.297 12.148 272.324 11.902 272.379 cv
11.66 272.437 11.449 272.523 11.27 272.637 cv
11.094 272.754 10.957 272.898 10.863 273.07 cv
10.77 273.246 10.723 273.453 10.723 273.695 cv
10.723 273.992 10.84 274.293 11.066 274.594 cv
11.301 274.898 11.637 275.227 12.074 275.578 cv
16.996 275.578 li
17.043 275.582 17.078 275.594 17.102 275.609 cv
17.133 275.633 17.156 275.664 17.176 275.711 cv
17.195 275.758 17.207 275.824 17.223 275.906 cv
17.23 275.992 17.238 276.098 17.238 276.227 cv
17.238 276.352 17.23 276.457 17.223 276.543 cv
17.207 276.629 17.195 276.695 17.176 276.742 cv
17.156 276.793 17.133 276.828 17.102 276.844 cv
17.078 276.863 17.043 276.871 16.996 276.871 cv
9.957 276.871 li
9.918 276.871 9.883 276.863 9.852 276.848 cv
9.824 276.832 9.797 276.801 9.773 276.754 cv
9.75 276.707 9.734 276.648 9.727 276.574 cv
9.719 276.5 9.715 276.402 9.715 276.281 cv
9.715 276.168 9.719 276.074 9.727 275.996 cv
9.734 275.926 9.75 275.867 9.773 275.82 cv
9.797 275.781 9.824 275.75 9.852 275.73 cv
9.883 275.715 9.918 275.707 9.957 275.703 cv
10.887 275.703 li
10.445 275.312 10.121 274.926 9.914 274.551 cv
9.711 274.18 9.609 273.805 9.605 273.422 cv
9.609 273.129 9.645 272.867 9.707 272.633 cv
9.777 272.406 9.871 272.199 9.992 272.02 cv
10.117 271.844 10.262 271.695 10.43 271.566 cv
10.602 271.445 10.793 271.34 10.996 271.254 cv
10.746 271.023 10.527 270.801 10.348 270.586 cv
10.172 270.379 10.031 270.176 9.918 269.977 cv
9.813 269.781 9.73 269.59 9.68 269.402 cv
9.633 269.219 9.609 269.031 9.605 268.844 cv
9.609 268.391 9.688 268.012 9.844 267.703 cv
10.004 267.398 10.219 267.148 10.48 266.957 cv
10.75 266.766 11.059 266.629 11.414 266.547 cv
11.773 266.469 12.152 266.43 12.547 266.426 cv
cp
f
13.367 257.598 mo
13.984 257.602 14.539 257.668 15.027 257.797 cv
15.52 257.934 15.934 258.129 16.273 258.383 cv
16.617 258.645 16.879 258.961 17.063 259.34 cv
17.246 259.723 17.336 260.16 17.34 260.648 cv
17.336 260.859 17.316 261.051 17.277 261.227 cv
17.234 261.406 17.172 261.582 17.082 261.746 cv
16.996 261.918 16.883 262.086 16.746 262.25 cv
16.613 262.422 16.457 262.598 16.27 262.781 cv
19.789 262.781 li
19.828 262.785 19.867 262.797 19.898 262.812 cv
19.93 262.836 19.953 262.867 19.977 262.914 cv
19.992 262.961 20.008 263.027 20.023 263.109 cv
20.031 263.195 20.039 263.301 20.039 263.43 cv
20.039 263.555 20.031 263.66 20.023 263.746 cv
20.008 263.832 19.992 263.898 19.977 263.945 cv
19.953 263.996 19.93 264.031 19.898 264.047 cv
19.867 264.066 19.828 264.074 19.789 264.074 cv
9.957 264.074 li
9.914 264.074 9.875 264.066 9.844 264.051 cv
9.816 264.035 9.793 264.004 9.77 263.957 cv
9.75 263.91 9.734 263.852 9.727 263.777 cv
9.719 263.703 9.715 263.613 9.715 263.508 cv
9.715 263.402 9.719 263.312 9.727 263.238 cv
9.734 263.172 9.75 263.113 9.77 263.062 cv
9.793 263.02 9.816 262.988 9.844 262.965 cv
9.875 262.949 9.914 262.937 9.957 262.937 cv
10.902 262.937 li
10.688 262.727 10.496 262.523 10.332 262.32 cv
10.172 262.125 10.039 261.926 9.93 261.723 cv
9.828 261.527 9.746 261.32 9.688 261.105 cv
9.637 260.898 9.609 260.676 9.605 260.434 cv
9.609 259.926 9.707 259.488 9.902 259.129 cv
10.102 258.77 10.375 258.477 10.715 258.25 cv
11.063 258.023 11.461 257.859 11.918 257.754 cv
12.375 257.652 12.859 257.602 13.367 257.598 cv
cp
13.516 258.934 mo
13.16 258.937 12.813 258.965 12.473 259.016 cv
12.137 259.074 11.836 259.168 11.574 259.301 cv
11.316 259.437 11.109 259.617 10.949 259.84 cv
10.797 260.066 10.719 260.348 10.715 260.68 cv
10.719 260.852 10.742 261.016 10.789 261.18 cv
10.84 261.344 10.918 261.512 11.023 261.676 cv
11.133 261.848 11.273 262.023 11.445 262.203 cv
11.621 262.391 11.836 262.582 12.09 262.781 cv
14.891 262.781 li
15.324 262.426 15.656 262.086 15.887 261.766 cv
16.117 261.445 16.23 261.109 16.23 260.758 cv
16.23 260.434 16.152 260.156 15.996 259.922 cv
15.84 259.691 15.633 259.504 15.371 259.355 cv
15.109 259.215 14.816 259.105 14.492 259.035 cv
14.172 258.969 13.848 258.937 13.516 258.934 cv
cp
f
16.48 252 mo
16.637 252.004 16.754 252.012 16.84 252.031 cv
16.93 252.055 16.996 252.09 17.035 252.129 cv
17.078 252.176 17.117 252.238 17.152 252.316 cv
17.188 252.402 17.215 252.496 17.242 252.602 cv
17.262 252.711 17.281 252.824 17.301 252.941 cv
17.313 253.062 17.32 253.184 17.324 253.301 cv
17.32 253.668 17.273 253.98 17.18 254.238 cv
17.086 254.504 16.941 254.715 16.742 254.879 cv
16.551 255.047 16.305 255.172 16 255.246 cv
15.703 255.324 15.348 255.359 14.938 255.359 cv
10.824 255.359 li
10.824 256.344 li
10.828 256.422 10.785 256.484 10.699 256.531 cv
10.617 256.578 10.484 256.602 10.293 256.602 cv
10.199 256.602 10.113 256.598 10.043 256.582 cv
9.977 256.574 9.922 256.555 9.875 256.531 cv
9.832 256.512 9.801 256.484 9.781 256.449 cv
9.766 256.418 9.758 256.383 9.754 256.336 cv
9.754 255.359 li
8.078 255.359 li
8.047 255.359 8.012 255.352 7.977 255.332 cv
7.949 255.316 7.922 255.281 7.895 255.23 cv
7.875 255.18 7.859 255.113 7.844 255.027 cv
7.836 254.945 7.828 254.84 7.828 254.715 cv
7.828 254.586 7.836 254.48 7.844 254.395 cv
7.859 254.312 7.875 254.246 7.895 254.199 cv
7.922 254.152 7.949 254.121 7.977 254.098 cv
8.012 254.082 8.047 254.07 8.078 254.066 cv
9.754 254.066 li
9.754 252.262 li
9.758 252.223 9.766 252.187 9.781 252.152 cv
9.801 252.121 9.832 252.09 9.875 252.066 cv
9.922 252.043 9.977 252.027 10.043 252.016 cv
10.113 252.008 10.199 252.004 10.293 252 cv
10.484 252.004 10.617 252.027 10.699 252.07 cv
10.785 252.121 10.828 252.184 10.824 252.262 cv
10.824 254.066 li
14.75 254.066 li
15.238 254.07 15.605 254 15.852 253.852 cv
16.102 253.711 16.227 253.453 16.223 253.082 cv
16.227 252.965 16.215 252.859 16.188 252.762 cv
16.168 252.672 16.141 252.586 16.113 252.512 cv
16.09 252.441 16.066 252.379 16.039 252.324 cv
16.02 252.273 16.008 252.227 16.004 252.184 cv
16.008 252.156 16.016 252.133 16.023 252.105 cv
16.039 252.086 16.063 252.066 16.098 252.051 cv
16.137 252.039 16.188 252.027 16.246 252.016 cv
16.313 252.008 16.391 252.004 16.48 252 cv
cp
f
16.996 249.004 mo
17.043 249.008 17.078 249.02 17.102 249.035 cv
17.133 249.059 17.156 249.09 17.176 249.137 cv
17.195 249.184 17.207 249.25 17.223 249.332 cv
17.23 249.418 17.238 249.523 17.238 249.652 cv
17.238 249.777 17.23 249.883 17.223 249.969 cv
17.207 250.055 17.195 250.121 17.176 250.168 cv
17.156 250.219 17.133 250.254 17.102 250.27 cv
17.078 250.289 17.043 250.297 16.996 250.297 cv
9.957 250.297 li
9.922 250.297 9.887 250.289 9.855 250.27 cv
9.824 250.254 9.801 250.219 9.777 250.168 cv
9.762 250.121 9.746 250.055 9.73 249.969 cv
9.723 249.883 9.715 249.777 9.715 249.652 cv
9.715 249.523 9.723 249.418 9.73 249.332 cv
9.746 249.25 9.762 249.184 9.777 249.137 cv
9.801 249.09 9.824 249.059 9.855 249.035 cv
9.887 249.02 9.922 249.008 9.957 249.004 cv
cp
7.578 248.855 mo
7.883 248.855 8.09 248.914 8.195 249.027 cv
8.309 249.145 8.363 249.355 8.359 249.66 cv
8.363 249.969 8.309 250.176 8.199 250.285 cv
8.094 250.398 7.891 250.457 7.594 250.453 cv
7.293 250.457 7.09 250.398 6.977 250.281 cv
6.871 250.168 6.816 249.957 6.813 249.645 cv
6.816 249.348 6.867 249.141 6.973 249.023 cv
7.082 248.914 7.285 248.855 7.578 248.855 cv
cp
f
13.398 240.113 mo
13.977 240.117 14.504 240.191 14.984 240.34 cv
15.469 240.492 15.883 240.719 16.23 241.016 cv
16.582 241.32 16.855 241.695 17.047 242.141 cv
17.242 242.594 17.336 243.117 17.34 243.711 cv
17.336 244.293 17.254 244.797 17.082 245.223 cv
16.914 245.656 16.664 246.016 16.332 246.301 cv
16.008 246.59 15.609 246.801 15.137 246.941 cv
14.668 247.082 14.137 247.152 13.539 247.152 cv
12.969 247.152 12.441 247.078 11.957 246.93 cv
11.477 246.781 11.059 246.559 10.707 246.258 cv
10.359 245.957 10.09 245.582 9.895 245.133 cv
9.707 244.687 9.609 244.164 9.605 243.562 cv
9.609 242.984 9.695 242.48 9.863 242.047 cv
10.039 241.621 10.289 241.262 10.613 240.973 cv
10.945 240.687 11.344 240.473 11.813 240.328 cv
12.281 240.187 12.813 240.117 13.398 240.113 cv
cp
13.484 241.449 mo
13.105 241.453 12.746 241.488 12.406 241.559 cv
12.066 241.633 11.77 241.75 11.512 241.91 cv
11.262 242.074 11.059 242.293 10.906 242.57 cv
10.762 242.852 10.688 243.199 10.684 243.613 cv
10.688 243.996 10.754 244.328 10.887 244.602 cv
11.023 244.883 11.215 245.109 11.461 245.285 cv
11.711 245.469 12.008 245.602 12.344 245.684 cv
12.688 245.773 13.055 245.816 13.453 245.812 cv
13.84 245.816 14.203 245.781 14.539 245.707 cv
14.879 245.641 15.176 245.523 15.43 245.352 cv
15.684 245.187 15.883 244.965 16.031 244.684 cv
16.18 244.41 16.254 244.062 16.254 243.645 cv
16.254 243.266 16.188 242.937 16.051 242.656 cv
15.918 242.383 15.727 242.152 15.48 241.973 cv
15.234 241.793 14.941 241.664 14.602 241.578 cv
14.266 241.496 13.895 241.453 13.484 241.449 cv
cp
f
16.996 232.152 mo
17.043 232.156 17.078 232.168 17.102 232.184 cv
17.133 232.207 17.156 232.238 17.176 232.285 cv
17.195 232.332 17.207 232.398 17.223 232.48 cv
17.23 232.566 17.238 232.672 17.238 232.793 cv
17.238 232.926 17.23 233.031 17.223 233.113 cv
17.207 233.199 17.195 233.266 17.176 233.309 cv
17.156 233.359 17.133 233.391 17.102 233.41 cv
17.078 233.434 17.043 233.445 16.996 233.441 cv
12.875 233.441 li
12.473 233.445 12.148 233.477 11.902 233.535 cv
11.66 233.602 11.449 233.691 11.27 233.809 cv
11.094 233.93 10.957 234.086 10.863 234.273 cv
10.77 234.465 10.723 234.687 10.723 234.937 cv
10.723 235.266 10.84 235.586 11.066 235.906 cv
11.301 236.23 11.637 236.57 12.074 236.922 cv
16.996 236.922 li
17.043 236.926 17.078 236.937 17.102 236.953 cv
17.133 236.977 17.156 237.008 17.176 237.055 cv
17.195 237.102 17.207 237.168 17.223 237.25 cv
17.23 237.336 17.238 237.441 17.238 237.57 cv
17.238 237.695 17.23 237.801 17.223 237.887 cv
17.207 237.973 17.195 238.039 17.176 238.086 cv
17.156 238.137 17.133 238.172 17.102 238.187 cv
17.078 238.207 17.043 238.215 16.996 238.215 cv
9.957 238.215 li
9.918 238.215 9.883 238.207 9.852 238.191 cv
9.824 238.176 9.797 238.145 9.773 238.098 cv
9.75 238.051 9.734 237.992 9.727 237.918 cv
9.719 237.844 9.715 237.746 9.715 237.625 cv
9.715 237.512 9.719 237.418 9.727 237.34 cv
9.734 237.27 9.75 237.211 9.773 237.164 cv
9.797 237.125 9.824 237.094 9.852 237.074 cv
9.883 237.059 9.918 237.051 9.957 237.047 cv
10.887 237.047 li
10.445 236.656 10.121 236.262 9.914 235.863 cv
9.711 235.473 9.609 235.074 9.605 234.668 cv
9.609 234.203 9.688 233.809 9.844 233.484 cv
10.004 233.168 10.219 232.906 10.48 232.707 cv
10.75 232.512 11.059 232.371 11.414 232.281 cv
11.773 232.199 12.203 232.156 12.703 232.152 cv
cp
f
6.414 223.445 mo
7.465 223.941 8.539 224.309 9.641 224.551 cv
10.746 224.793 11.855 224.914 12.969 224.914 cv
14.09 224.914 15.199 224.793 16.301 224.543 cv
17.398 224.301 18.477 223.937 19.539 223.461 cv
19.598 223.437 19.652 223.426 19.699 223.418 cv
19.742 223.418 19.777 223.434 19.809 223.469 cv
19.836 223.508 19.855 223.562 19.871 223.637 cv
19.879 223.715 19.887 223.82 19.891 223.945 cv
19.887 224.043 19.883 224.121 19.883 224.187 cv
19.875 224.258 19.867 224.316 19.852 224.363 cv
19.836 224.414 19.816 224.457 19.797 224.484 cv
19.773 224.52 19.75 224.543 19.727 224.555 cv
19.191 224.84 18.652 225.086 18.109 225.297 cv
17.563 225.512 17.012 225.691 16.449 225.84 cv
15.887 225.988 15.316 226.098 14.738 226.168 cv
14.164 226.242 13.582 226.281 12.992 226.277 cv
12.402 226.281 11.82 226.238 11.246 226.156 cv
10.676 226.078 10.105 225.965 9.539 225.812 cv
8.973 225.664 8.418 225.48 7.867 225.266 cv
7.324 225.055 6.781 224.816 6.238 224.547 cv
6.223 224.543 6.203 224.527 6.184 224.504 cv
6.172 224.48 6.156 224.449 6.137 224.406 cv
6.125 224.367 6.113 224.309 6.102 224.234 cv
6.098 224.164 6.094 224.07 6.09 223.953 cv
6.094 223.836 6.102 223.742 6.113 223.664 cv
6.133 223.594 6.152 223.535 6.176 223.492 cv
6.203 223.453 6.238 223.43 6.281 223.422 cv
6.324 223.418 6.371 223.426 6.414 223.445 cv
cp
f
16.973 214.512 mo
17.02 214.516 17.055 214.523 17.086 214.539 cv
17.121 214.559 17.148 214.598 17.168 214.648 cv
17.188 214.703 17.203 214.773 17.219 214.859 cv
17.23 214.953 17.238 215.066 17.238 215.203 cv
17.238 215.387 17.23 215.535 17.215 215.648 cv
17.199 215.766 17.172 215.852 17.129 215.906 cv
17.09 215.965 17.043 216.012 16.988 216.047 cv
11.926 219.77 li
16.988 219.77 li
17.027 219.773 17.063 219.781 17.094 219.801 cv
17.129 219.824 17.156 219.863 17.172 219.91 cv
17.191 219.965 17.203 220.031 17.219 220.117 cv
17.23 220.203 17.238 220.312 17.238 220.441 cv
17.238 220.57 17.23 220.68 17.219 220.766 cv
17.203 220.859 17.191 220.93 17.172 220.977 cv
17.156 221.031 17.129 221.066 17.094 221.086 cv
17.063 221.109 17.027 221.121 16.988 221.117 cv
7.273 221.117 li
7.234 221.121 7.199 221.109 7.164 221.086 cv
7.137 221.066 7.109 221.031 7.09 220.977 cv
7.074 220.93 7.059 220.859 7.043 220.766 cv
7.031 220.68 7.027 220.57 7.023 220.441 cv
7.027 220.312 7.031 220.203 7.043 220.117 cv
7.059 220.031 7.074 219.965 7.09 219.91 cv
7.109 219.863 7.137 219.824 7.164 219.801 cv
7.199 219.781 7.234 219.773 7.273 219.77 cv
11.77 219.77 li
7.273 216.187 li
7.23 216.16 7.191 216.125 7.156 216.078 cv
7.129 216.039 7.105 215.988 7.082 215.926 cv
7.066 215.871 7.051 215.797 7.039 215.707 cv
7.031 215.625 7.027 215.516 7.023 215.375 cv
7.027 215.242 7.031 215.133 7.043 215.047 cv
7.059 214.969 7.078 214.902 7.094 214.848 cv
7.117 214.801 7.141 214.766 7.172 214.746 cv
7.203 214.73 7.238 214.723 7.273 214.719 cv
7.344 214.723 7.41 214.738 7.477 214.77 cv
7.547 214.805 7.641 214.867 7.758 214.961 cv
11.77 218.316 li
16.574 214.703 li
16.715 214.613 16.805 214.559 16.852 214.539 cv
16.902 214.523 16.945 214.516 16.973 214.512 cv
cp
f
16.996 211.645 mo
17.043 211.648 17.078 211.66 17.102 211.676 cv
17.133 211.699 17.156 211.73 17.176 211.777 cv
17.195 211.824 17.207 211.891 17.223 211.973 cv
17.23 212.059 17.238 212.164 17.238 212.293 cv
17.238 212.418 17.23 212.523 17.223 212.609 cv
17.207 212.695 17.195 212.762 17.176 212.809 cv
17.156 212.859 17.133 212.895 17.102 212.91 cv
17.078 212.93 17.043 212.937 16.996 212.937 cv
9.957 212.937 li
9.922 212.937 9.887 212.93 9.855 212.91 cv
9.824 212.895 9.801 212.859 9.777 212.809 cv
9.762 212.762 9.746 212.695 9.73 212.609 cv
9.723 212.523 9.715 212.418 9.715 212.293 cv
9.715 212.164 9.723 212.059 9.73 211.973 cv
9.746 211.891 9.762 211.824 9.777 211.777 cv
9.801 211.73 9.824 211.699 9.855 211.676 cv
9.887 211.66 9.922 211.648 9.957 211.645 cv
cp
7.578 211.496 mo
7.883 211.496 8.09 211.555 8.195 211.668 cv
8.309 211.785 8.363 211.996 8.359 212.301 cv
8.363 212.609 8.309 212.816 8.199 212.926 cv
8.094 213.039 7.891 213.098 7.594 213.094 cv
7.293 213.098 7.09 213.039 6.977 212.922 cv
6.871 212.809 6.816 212.598 6.813 212.285 cv
6.816 211.988 6.867 211.781 6.973 211.664 cv
7.082 211.555 7.285 211.496 7.578 211.496 cv
cp
f
16.996 207.961 mo
17.043 207.965 17.078 207.977 17.102 207.992 cv
17.133 208.016 17.156 208.047 17.176 208.094 cv
17.195 208.141 17.207 208.207 17.223 208.289 cv
17.23 208.375 17.238 208.48 17.238 208.609 cv
17.238 208.734 17.23 208.84 17.223 208.926 cv
17.207 209.012 17.195 209.078 17.176 209.125 cv
17.156 209.176 17.133 209.211 17.102 209.227 cv
17.078 209.246 17.043 209.254 16.996 209.254 cv
6.547 209.254 li
6.508 209.254 6.473 209.246 6.438 209.227 cv
6.41 209.211 6.383 209.176 6.359 209.125 cv
6.34 209.078 6.324 209.012 6.313 208.926 cv
6.305 208.84 6.301 208.734 6.297 208.609 cv
6.301 208.48 6.305 208.375 6.313 208.289 cv
6.324 208.207 6.34 208.141 6.359 208.094 cv
6.383 208.047 6.41 208.016 6.438 207.992 cv
6.473 207.977 6.508 207.965 6.547 207.961 cv
cp
f
13.398 199.02 mo
13.977 199.023 14.504 199.098 14.984 199.246 cv
15.469 199.398 15.883 199.625 16.23 199.922 cv
16.582 200.227 16.855 200.602 17.047 201.047 cv
17.242 201.5 17.336 202.023 17.34 202.617 cv
17.336 203.199 17.254 203.703 17.082 204.129 cv
16.914 204.562 16.664 204.922 16.332 205.207 cv
16.008 205.496 15.609 205.707 15.137 205.848 cv
14.668 205.988 14.137 206.059 13.539 206.059 cv
12.969 206.059 12.441 205.984 11.957 205.836 cv
11.477 205.687 11.059 205.465 10.707 205.164 cv
10.359 204.863 10.09 204.488 9.895 204.039 cv
9.707 203.594 9.609 203.07 9.605 202.469 cv
9.609 201.891 9.695 201.387 9.863 200.953 cv
10.039 200.527 10.289 200.168 10.613 199.879 cv
10.945 199.594 11.344 199.379 11.813 199.234 cv
12.281 199.094 12.813 199.023 13.398 199.02 cv
cp
13.484 200.355 mo
13.105 200.359 12.746 200.395 12.406 200.465 cv
12.066 200.539 11.77 200.656 11.512 200.816 cv
11.262 200.98 11.059 201.199 10.906 201.477 cv
10.762 201.758 10.688 202.105 10.684 202.52 cv
10.688 202.902 10.754 203.234 10.887 203.508 cv
11.023 203.789 11.215 204.016 11.461 204.191 cv
11.711 204.375 12.008 204.508 12.344 204.59 cv
12.688 204.68 13.055 204.723 13.453 204.719 cv
13.84 204.723 14.203 204.687 14.539 204.613 cv
14.879 204.547 15.176 204.43 15.43 204.258 cv
15.684 204.094 15.883 203.871 16.031 203.59 cv
16.18 203.316 16.254 202.969 16.254 202.551 cv
16.254 202.172 16.188 201.844 16.051 201.562 cv
15.918 201.289 15.727 201.059 15.48 200.879 cv
15.234 200.699 14.941 200.57 14.602 200.484 cv
14.266 200.402 13.895 200.359 13.484 200.355 cv
cp
f
16.895 183.727 mo
16.969 183.75 17.027 183.785 17.07 183.824 cv
17.117 183.871 17.152 183.926 17.172 183.996 cv
17.195 184.07 17.207 184.16 17.223 184.266 cv
17.23 184.375 17.238 184.508 17.238 184.66 cv
17.238 184.824 17.23 184.961 17.223 185.07 cv
17.207 185.184 17.195 185.277 17.172 185.348 cv
17.152 185.426 17.117 185.48 17.07 185.512 cv
17.027 185.551 16.969 185.578 16.895 185.598 cv
9.25 187.719 li
9.25 187.734 li
16.895 189.687 li
16.969 189.707 17.027 189.734 17.07 189.766 cv
17.117 189.805 17.152 189.855 17.172 189.922 cv
17.195 189.992 17.207 190.082 17.223 190.187 cv
17.23 190.297 17.238 190.434 17.238 190.598 cv
17.238 190.773 17.23 190.914 17.223 191.027 cv
17.207 191.145 17.195 191.238 17.172 191.309 cv
17.152 191.383 17.117 191.441 17.07 191.477 cv
17.027 191.52 16.969 191.547 16.895 191.559 cv
7.547 194.234 li
7.43 194.27 7.336 194.285 7.266 194.285 cv
7.199 194.289 7.148 194.27 7.109 194.223 cv
7.074 194.18 7.051 194.109 7.039 194.008 cv
7.031 193.914 7.027 193.781 7.023 193.609 cv
7.027 193.453 7.031 193.324 7.035 193.227 cv
7.047 193.133 7.059 193.059 7.078 193.008 cv
7.102 192.961 7.133 192.93 7.164 192.906 cv
7.203 192.891 7.25 192.875 7.305 192.863 cv
15.785 190.59 li
15.785 190.582 li
7.32 188.422 li
7.266 188.41 7.219 188.391 7.176 188.363 cv
7.141 188.344 7.109 188.305 7.086 188.25 cv
7.066 188.199 7.051 188.125 7.039 188.027 cv
7.031 187.934 7.027 187.809 7.023 187.648 cv
7.027 187.504 7.031 187.387 7.039 187.301 cv
7.051 187.215 7.066 187.148 7.086 187.094 cv
7.109 187.047 7.141 187.008 7.176 186.98 cv
7.219 186.961 7.266 186.941 7.32 186.918 cv
15.785 184.598 li
15.785 184.582 li
7.313 182.352 li
7.262 182.34 7.219 182.324 7.176 182.305 cv
7.141 182.293 7.109 182.262 7.086 182.207 cv
7.066 182.16 7.051 182.09 7.039 181.996 cv
7.031 181.91 7.027 181.789 7.023 181.633 cv
7.027 181.48 7.031 181.355 7.043 181.262 cv
7.059 181.172 7.086 181.105 7.117 181.062 cv
7.156 181.023 7.207 181.004 7.273 181.004 cv
7.344 181.008 7.438 181.023 7.555 181.047 cv
cp
f
17.004 174.504 mo
17.066 174.508 17.113 174.527 17.145 174.566 cv
17.176 174.609 17.199 174.668 17.215 174.738 cv
17.23 174.816 17.238 174.922 17.238 175.059 cv
17.238 175.195 17.23 175.305 17.215 175.383 cv
17.199 175.469 17.176 175.527 17.145 175.559 cv
17.113 175.598 17.066 175.613 17.004 175.613 cv
16.301 175.613 li
16.629 175.922 16.887 176.266 17.066 176.645 cv
17.25 177.023 17.336 177.426 17.34 177.844 cv
17.336 178.219 17.289 178.551 17.195 178.848 cv
17.098 179.148 16.961 179.406 16.777 179.617 cv
16.598 179.832 16.375 179.996 16.105 180.109 cv
15.844 180.23 15.539 180.289 15.195 180.285 cv
14.801 180.289 14.457 180.207 14.164 180.043 cv
13.875 179.883 13.633 179.652 13.438 179.348 cv
13.246 179.047 13.102 178.676 13.004 178.234 cv
12.91 177.801 12.863 177.309 12.859 176.758 cv
12.859 175.785 li
12.309 175.785 li
12.043 175.789 11.801 175.816 11.59 175.871 cv
11.383 175.93 11.211 176.023 11.07 176.152 cv
10.934 176.281 10.828 176.449 10.758 176.648 cv
10.688 176.855 10.652 177.105 10.652 177.398 cv
10.652 177.719 10.691 178.004 10.766 178.254 cv
10.844 178.512 10.926 178.73 11.016 178.918 cv
11.109 179.109 11.195 179.27 11.266 179.398 cv
11.344 179.527 11.379 179.625 11.379 179.684 cv
11.379 179.73 11.371 179.766 11.348 179.793 cv
11.332 179.828 11.301 179.855 11.254 179.875 cv
11.215 179.902 11.16 179.918 11.094 179.926 cv
11.031 179.937 10.961 179.945 10.879 179.941 cv
10.754 179.945 10.648 179.934 10.57 179.914 cv
10.496 179.898 10.426 179.855 10.355 179.781 cv
10.289 179.715 10.211 179.594 10.117 179.418 cv
10.031 179.246 9.945 179.047 9.867 178.82 cv
9.793 178.598 9.73 178.352 9.68 178.086 cv
9.633 177.82 9.609 177.555 9.605 177.281 cv
9.609 176.781 9.668 176.352 9.777 175.992 cv
9.895 175.641 10.063 175.352 10.281 175.129 cv
10.508 174.914 10.781 174.754 11.105 174.652 cv
11.438 174.555 11.82 174.508 12.254 174.504 cv
cp
13.789 175.785 mo
13.789 176.891 li
13.793 177.246 13.824 177.555 13.879 177.812 cv
13.941 178.074 14.027 178.289 14.145 178.461 cv
14.262 178.633 14.402 178.762 14.566 178.84 cv
14.73 178.926 14.922 178.965 15.133 178.961 cv
15.504 178.965 15.793 178.848 16.008 178.613 cv
16.227 178.383 16.336 178.059 16.332 177.641 cv
16.336 177.305 16.25 176.992 16.074 176.699 cv
15.906 176.41 15.641 176.105 15.281 175.785 cv
cp
f
16.48 168.629 mo
16.637 168.633 16.754 168.641 16.84 168.66 cv
16.93 168.684 16.996 168.719 17.035 168.758 cv
17.078 168.805 17.117 168.867 17.152 168.945 cv
17.188 169.031 17.215 169.125 17.242 169.23 cv
17.262 169.34 17.281 169.453 17.301 169.57 cv
17.313 169.691 17.32 169.812 17.324 169.93 cv
17.32 170.297 17.273 170.609 17.18 170.867 cv
17.086 171.133 16.941 171.344 16.742 171.508 cv
16.551 171.676 16.305 171.801 16 171.875 cv
15.703 171.953 15.348 171.988 14.938 171.988 cv
10.824 171.988 li
10.824 172.973 li
10.828 173.051 10.785 173.113 10.699 173.16 cv
10.617 173.207 10.484 173.23 10.293 173.23 cv
10.199 173.23 10.113 173.227 10.043 173.211 cv
9.977 173.203 9.922 173.184 9.875 173.16 cv
9.832 173.141 9.801 173.113 9.781 173.078 cv
9.766 173.047 9.758 173.012 9.754 172.965 cv
9.754 171.988 li
8.078 171.988 li
8.047 171.988 8.012 171.98 7.977 171.961 cv
7.949 171.945 7.922 171.91 7.895 171.859 cv
7.875 171.809 7.859 171.742 7.844 171.656 cv
7.836 171.574 7.828 171.469 7.828 171.344 cv
7.828 171.215 7.836 171.109 7.844 171.023 cv
7.859 170.941 7.875 170.875 7.895 170.828 cv
7.922 170.781 7.949 170.75 7.977 170.727 cv
8.012 170.711 8.047 170.699 8.078 170.695 cv
9.754 170.695 li
9.754 168.891 li
9.758 168.852 9.766 168.816 9.781 168.781 cv
9.801 168.75 9.832 168.719 9.875 168.695 cv
9.922 168.672 9.977 168.656 10.043 168.645 cv
10.113 168.637 10.199 168.633 10.293 168.629 cv
10.484 168.633 10.617 168.656 10.699 168.699 cv
10.785 168.75 10.828 168.812 10.824 168.891 cv
10.824 170.695 li
14.75 170.695 li
15.238 170.699 15.605 170.629 15.852 170.48 cv
16.102 170.34 16.227 170.082 16.223 169.711 cv
16.227 169.594 16.215 169.488 16.188 169.391 cv
16.168 169.301 16.141 169.215 16.113 169.141 cv
16.09 169.07 16.066 169.008 16.039 168.953 cv
16.02 168.902 16.008 168.855 16.004 168.812 cv
16.008 168.785 16.016 168.762 16.023 168.734 cv
16.039 168.715 16.063 168.695 16.098 168.68 cv
16.137 168.668 16.188 168.656 16.246 168.645 cv
16.313 168.637 16.391 168.633 16.48 168.629 cv
cp
f
16.48 163.504 mo
16.637 163.508 16.754 163.516 16.84 163.535 cv
16.93 163.559 16.996 163.594 17.035 163.633 cv
17.078 163.68 17.117 163.742 17.152 163.82 cv
17.188 163.906 17.215 164 17.242 164.105 cv
17.262 164.215 17.281 164.328 17.301 164.445 cv
17.313 164.566 17.32 164.687 17.324 164.805 cv
17.32 165.172 17.273 165.484 17.18 165.742 cv
17.086 166.008 16.941 166.219 16.742 166.383 cv
16.551 166.551 16.305 166.676 16 166.75 cv
15.703 166.828 15.348 166.863 14.938 166.863 cv
10.824 166.863 li
10.824 167.848 li
10.828 167.926 10.785 167.988 10.699 168.035 cv
10.617 168.082 10.484 168.105 10.293 168.105 cv
10.199 168.105 10.113 168.102 10.043 168.086 cv
9.977 168.078 9.922 168.059 9.875 168.035 cv
9.832 168.016 9.801 167.988 9.781 167.953 cv
9.766 167.922 9.758 167.887 9.754 167.84 cv
9.754 166.863 li
8.078 166.863 li
8.047 166.863 8.012 166.855 7.977 166.836 cv
7.949 166.82 7.922 166.785 7.895 166.734 cv
7.875 166.684 7.859 166.617 7.844 166.531 cv
7.836 166.449 7.828 166.344 7.828 166.219 cv
7.828 166.09 7.836 165.984 7.844 165.898 cv
7.859 165.816 7.875 165.75 7.895 165.703 cv
7.922 165.656 7.949 165.625 7.977 165.602 cv
8.012 165.586 8.047 165.574 8.078 165.57 cv
9.754 165.57 li
9.754 163.766 li
9.758 163.727 9.766 163.691 9.781 163.656 cv
9.801 163.625 9.832 163.594 9.875 163.57 cv
9.922 163.547 9.977 163.531 10.043 163.52 cv
10.113 163.512 10.199 163.508 10.293 163.504 cv
10.484 163.508 10.617 163.531 10.699 163.574 cv
10.785 163.625 10.828 163.687 10.824 163.766 cv
10.824 165.57 li
14.75 165.57 li
15.238 165.574 15.605 165.504 15.852 165.355 cv
16.102 165.215 16.227 164.957 16.223 164.586 cv
16.227 164.469 16.215 164.363 16.188 164.266 cv
16.168 164.176 16.141 164.09 16.113 164.016 cv
16.09 163.945 16.066 163.883 16.039 163.828 cv
16.02 163.777 16.008 163.73 16.004 163.687 cv
16.008 163.66 16.016 163.637 16.023 163.609 cv
16.039 163.59 16.063 163.57 16.098 163.555 cv
16.137 163.543 16.188 163.531 16.246 163.52 cv
16.313 163.512 16.391 163.508 16.48 163.504 cv
cp
f
15.078 157.379 mo
15.441 157.383 15.762 157.449 16.043 157.578 cv
16.324 157.715 16.563 157.906 16.754 158.148 cv
16.949 158.398 17.094 158.687 17.191 159.023 cv
17.289 159.363 17.336 159.738 17.34 160.141 cv
17.336 160.395 17.316 160.633 17.281 160.855 cv
17.238 161.086 17.191 161.289 17.133 161.469 cv
17.074 161.652 17.012 161.805 16.945 161.926 cv
16.883 162.055 16.824 162.145 16.77 162.199 cv
16.719 162.258 16.648 162.301 16.551 162.324 cv
16.461 162.352 16.332 162.363 16.168 162.363 cv
16.07 162.363 15.988 162.359 15.918 162.348 cv
15.855 162.34 15.801 162.328 15.754 162.309 cv
15.715 162.297 15.684 162.273 15.664 162.242 cv
15.648 162.215 15.641 162.184 15.637 162.145 cv
15.641 162.09 15.676 162.004 15.742 161.891 cv
15.816 161.781 15.891 161.645 15.973 161.477 cv
16.059 161.312 16.137 161.117 16.203 160.891 cv
16.277 160.672 16.313 160.414 16.309 160.117 cv
16.313 159.902 16.289 159.703 16.238 159.523 cv
16.195 159.348 16.125 159.195 16.031 159.062 cv
15.941 158.937 15.828 158.836 15.684 158.762 cv
15.543 158.695 15.375 158.66 15.18 158.656 cv
14.984 158.66 14.816 158.711 14.68 158.809 cv
14.547 158.914 14.426 159.047 14.32 159.211 cv
14.219 159.379 14.129 159.566 14.043 159.773 cv
13.965 159.984 13.879 160.199 13.789 160.418 cv
13.703 160.641 13.602 160.859 13.488 161.066 cv
13.379 161.281 13.242 161.469 13.078 161.637 cv
12.918 161.805 12.727 161.941 12.5 162.039 cv
12.277 162.145 12.008 162.195 11.691 162.191 cv
11.418 162.195 11.152 162.141 10.898 162.031 cv
10.648 161.926 10.43 161.766 10.234 161.551 cv
10.047 161.336 9.895 161.066 9.777 160.746 cv
9.668 160.426 9.609 160.055 9.605 159.625 cv
9.609 159.441 9.625 159.254 9.652 159.062 cv
9.688 158.879 9.727 158.707 9.77 158.555 cv
9.82 158.406 9.871 158.277 9.922 158.168 cv
9.98 158.059 10.027 157.977 10.066 157.922 cv
10.109 157.867 10.148 157.832 10.176 157.812 cv
10.211 157.797 10.246 157.785 10.281 157.773 cv
10.324 157.77 10.371 157.762 10.426 157.75 cv
10.484 157.746 10.555 157.742 10.637 157.738 cv
10.727 157.742 10.805 157.746 10.867 157.75 cv
10.938 157.762 10.988 157.773 11.027 157.789 cv
11.07 157.809 11.102 157.832 11.117 157.855 cv
11.137 157.887 11.145 157.914 11.145 157.941 cv
11.145 157.992 11.117 158.059 11.059 158.145 cv
11.004 158.234 10.941 158.352 10.875 158.492 cv
10.813 158.637 10.754 158.801 10.691 158.988 cv
10.637 159.18 10.605 159.398 10.605 159.641 cv
10.605 159.863 10.633 160.055 10.68 160.219 cv
10.734 160.387 10.805 160.523 10.891 160.629 cv
10.984 160.738 11.09 160.82 11.215 160.871 cv
11.34 160.93 11.477 160.957 11.621 160.953 cv
11.828 160.957 12 160.906 12.133 160.797 cv
12.273 160.695 12.395 160.559 12.5 160.391 cv
12.605 160.227 12.699 160.035 12.781 159.82 cv
12.867 159.609 12.953 159.395 13.039 159.168 cv
13.129 158.949 13.227 158.73 13.336 158.512 cv
13.445 158.297 13.578 158.102 13.734 157.934 cv
13.891 157.77 14.078 157.637 14.297 157.531 cv
14.516 157.434 14.777 157.383 15.078 157.379 cv
cp
f
12.992 152.926 mo
13.582 152.926 14.164 152.965 14.738 153.035 cv
15.316 153.113 15.887 153.223 16.449 153.363 cv
17.012 153.512 17.563 153.687 18.109 153.898 cv
18.652 154.109 19.191 154.355 19.727 154.637 cv
19.75 154.652 19.773 154.676 19.797 154.707 cv
19.816 154.738 19.836 154.781 19.852 154.828 cv
19.867 154.883 19.875 154.941 19.883 155.004 cv
19.883 155.074 19.887 155.156 19.891 155.25 cv
19.887 155.391 19.879 155.496 19.871 155.566 cv
19.855 155.645 19.836 155.699 19.809 155.73 cv
19.777 155.77 19.742 155.785 19.699 155.777 cv
19.652 155.777 19.598 155.762 19.539 155.734 cv
18.48 155.254 17.406 154.891 16.305 154.645 cv
15.203 154.402 14.09 154.281 12.969 154.277 cv
11.855 154.281 10.746 154.402 9.641 154.645 cv
8.539 154.891 7.465 155.258 6.414 155.75 cv
6.371 155.773 6.324 155.781 6.281 155.773 cv
6.238 155.77 6.203 155.746 6.176 155.703 cv
6.152 155.664 6.133 155.609 6.113 155.531 cv
6.102 155.461 6.094 155.363 6.09 155.242 cv
6.094 155.133 6.098 155.039 6.102 154.965 cv
6.113 154.895 6.125 154.836 6.137 154.789 cv
6.156 154.746 6.172 154.715 6.184 154.691 cv
6.203 154.672 6.223 154.656 6.238 154.645 cv
7.313 154.109 8.41 153.687 9.539 153.383 cv
10.668 153.078 11.82 152.926 12.992 152.926 cv
cp
f
273.285 561.137 mo
273.281 561.242 273.266 561.332 273.23 561.402 cv
273.195 561.48 273.148 561.539 273.094 561.582 cv
273.035 561.633 272.973 561.668 272.902 561.684 cv
272.832 561.707 272.762 561.715 272.695 561.715 cv
272.25 561.715 li
272.105 561.715 271.98 561.703 271.879 561.672 cv
271.77 561.648 271.672 561.594 271.582 561.516 cv
271.484 561.441 271.391 561.34 271.297 561.207 cv
271.203 561.078 271.102 560.91 271 560.707 cv
267.91 554.949 li
267.746 554.656 267.582 554.344 267.422 554.016 cv
267.254 553.687 267.102 553.371 266.965 553.062 cv
266.949 553.062 li
266.957 553.441 266.965 553.824 266.973 554.215 cv
266.977 554.605 266.977 554.996 266.98 555.379 cv
266.98 561.488 li
266.977 561.527 266.965 561.562 266.945 561.594 cv
266.922 561.629 266.887 561.656 266.836 561.672 cv
266.781 561.691 266.711 561.703 266.629 561.719 cv
266.539 561.73 266.434 561.738 266.305 561.738 cv
266.172 561.738 266.063 561.73 265.977 561.719 cv
265.891 561.703 265.82 561.691 265.773 561.672 cv
265.719 561.656 265.684 561.629 265.664 561.594 cv
265.641 561.562 265.629 561.527 265.633 561.488 cv
265.633 552.148 li
265.629 551.941 265.688 551.793 265.809 551.703 cv
265.926 551.617 266.059 551.574 266.199 551.57 cv
266.863 551.57 li
267.016 551.574 267.148 551.586 267.254 551.609 cv
267.355 551.637 267.449 551.68 267.535 551.738 cv
267.617 551.801 267.695 551.883 267.777 551.988 cv
267.852 552.098 267.934 552.234 268.023 552.391 cv
270.398 556.832 li
270.543 557.109 270.684 557.375 270.82 557.629 cv
270.953 557.891 271.082 558.145 271.211 558.391 cv
271.336 558.645 271.461 558.891 271.586 559.129 cv
271.707 559.375 271.832 559.617 271.953 559.859 cv
271.961 559.859 li
271.945 559.449 271.941 559.02 271.941 558.574 cv
271.938 558.129 271.934 557.703 271.938 557.289 cv
271.938 551.797 li
271.934 551.762 271.945 551.727 271.969 551.695 cv
271.988 551.664 272.027 551.637 272.082 551.613 cv
272.133 551.59 272.199 551.574 272.289 551.562 cv
272.371 551.555 272.484 551.551 272.625 551.547 cv
272.742 551.551 272.848 551.555 272.938 551.562 cv
273.023 551.574 273.09 551.59 273.145 551.613 cv
273.191 551.637 273.227 551.664 273.25 551.695 cv
273.27 551.727 273.281 551.762 273.285 551.797 cv
cp
f
281.867 561.496 mo
281.863 561.543 281.855 561.578 281.84 561.602 cv
281.82 561.633 281.789 561.656 281.742 561.676 cv
281.695 561.695 281.633 561.707 281.559 561.723 cv
281.48 561.73 281.387 561.738 281.281 561.738 cv
281.156 561.738 281.059 561.73 280.988 561.723 cv
280.91 561.707 280.852 561.695 280.809 561.676 cv
280.762 561.656 280.73 561.633 280.719 561.602 cv
280.699 561.578 280.691 561.543 280.695 561.496 cv
280.695 560.566 li
280.289 561.012 279.895 561.336 279.504 561.535 cv
279.113 561.738 278.715 561.836 278.316 561.84 cv
277.844 561.836 277.449 561.762 277.133 561.605 cv
276.809 561.453 276.551 561.242 276.352 560.969 cv
276.152 560.703 276.008 560.391 275.926 560.031 cv
275.836 559.676 275.793 559.238 275.797 558.727 cv
275.797 554.457 li
275.793 554.418 275.805 554.383 275.824 554.352 cv
275.84 554.324 275.875 554.297 275.93 554.273 cv
275.98 554.25 276.047 554.234 276.133 554.227 cv
276.215 554.219 276.32 554.215 276.449 554.215 cv
276.57 554.215 276.676 554.219 276.762 554.227 cv
276.844 554.234 276.91 554.25 276.961 554.273 cv
277.008 554.297 277.043 554.324 277.066 554.352 cv
277.086 554.383 277.094 554.418 277.098 554.457 cv
277.098 558.555 li
277.094 558.969 277.125 559.297 277.188 559.543 cv
277.246 559.793 277.336 560.004 277.461 560.18 cv
277.578 560.355 277.734 560.492 277.926 560.586 cv
278.109 560.684 278.328 560.73 278.582 560.73 cv
278.902 560.73 279.223 560.617 279.547 560.387 cv
279.867 560.156 280.211 559.82 280.57 559.375 cv
280.57 554.457 li
280.57 554.418 280.578 554.383 280.598 554.352 cv
280.613 554.324 280.648 554.297 280.703 554.273 cv
280.754 554.25 280.82 554.234 280.902 554.227 cv
280.98 554.219 281.086 554.215 281.219 554.215 cv
281.34 554.215 281.445 554.219 281.531 554.227 cv
281.613 554.234 281.676 554.25 281.727 554.273 cv
281.77 554.297 281.805 554.324 281.832 554.352 cv
281.852 554.383 281.863 554.418 281.867 554.457 cv
cp
f
294.691 561.496 mo
294.688 561.543 294.676 561.578 294.66 561.602 cv
294.637 561.633 294.605 561.656 294.559 561.676 cv
294.512 561.695 294.445 561.707 294.363 561.723 cv
294.277 561.73 294.172 561.738 294.051 561.738 cv
293.914 561.738 293.809 561.73 293.727 561.723 cv
293.641 561.707 293.574 561.695 293.527 561.676 cv
293.477 561.656 293.441 561.633 293.422 561.602 cv
293.398 561.578 293.387 561.543 293.391 561.496 cv
293.391 557.219 li
293.387 556.922 293.359 556.648 293.313 556.402 cv
293.258 556.16 293.176 555.949 293.063 555.77 cv
292.945 555.594 292.801 555.457 292.625 555.363 cv
292.445 555.27 292.234 555.223 292 555.223 cv
291.699 555.223 291.402 555.34 291.102 555.566 cv
290.801 555.801 290.469 556.137 290.113 556.574 cv
290.113 561.496 li
290.109 561.543 290.102 561.578 290.082 561.602 cv
290.059 561.633 290.023 561.656 289.977 561.676 cv
289.926 561.695 289.859 561.707 289.777 561.723 cv
289.691 561.73 289.586 561.738 289.465 561.738 cv
289.344 561.738 289.242 561.73 289.156 561.723 cv
289.07 561.707 289 561.695 288.953 561.676 cv
288.898 561.656 288.867 561.633 288.852 561.602 cv
288.832 561.578 288.82 561.543 288.824 561.496 cv
288.824 557.219 li
288.82 556.922 288.793 556.648 288.738 556.402 cv
288.68 556.16 288.594 555.949 288.48 555.77 cv
288.363 555.594 288.219 555.457 288.047 555.363 cv
287.871 555.27 287.664 555.223 287.422 555.223 cv
287.125 555.223 286.824 555.34 286.523 555.566 cv
286.219 555.801 285.891 556.137 285.539 556.574 cv
285.539 561.496 li
285.535 561.543 285.523 561.578 285.508 561.602 cv
285.484 561.633 285.453 561.656 285.406 561.676 cv
285.359 561.695 285.293 561.707 285.211 561.723 cv
285.125 561.73 285.02 561.738 284.891 561.738 cv
284.766 561.738 284.66 561.73 284.574 561.723 cv
284.488 561.707 284.422 561.695 284.375 561.676 cv
284.324 561.656 284.289 561.633 284.273 561.602 cv
284.254 561.578 284.246 561.543 284.246 561.496 cv
284.246 554.457 li
284.246 554.418 284.254 554.383 284.27 554.352 cv
284.285 554.324 284.316 554.297 284.363 554.273 cv
284.41 554.25 284.469 554.234 284.543 554.227 cv
284.617 554.219 284.715 554.215 284.836 554.215 cv
284.949 554.215 285.043 554.219 285.121 554.227 cv
285.191 554.234 285.25 554.25 285.297 554.273 cv
285.336 554.297 285.367 554.324 285.387 554.352 cv
285.402 554.383 285.41 554.418 285.414 554.457 cv
285.414 555.387 li
285.805 554.945 286.191 554.621 286.566 554.414 cv
286.938 554.211 287.313 554.109 287.695 554.105 cv
287.988 554.109 288.25 554.145 288.484 554.207 cv
288.711 554.277 288.918 554.371 289.098 554.492 cv
289.273 554.617 289.422 554.762 289.551 554.93 cv
289.672 555.102 289.777 555.293 289.863 555.496 cv
290.094 555.246 290.316 555.027 290.531 554.848 cv
290.738 554.672 290.941 554.531 291.141 554.418 cv
291.336 554.312 291.527 554.23 291.715 554.18 cv
291.898 554.133 292.086 554.109 292.273 554.105 cv
292.727 554.109 293.105 554.187 293.414 554.344 cv
293.719 554.504 293.969 554.719 294.16 554.98 cv
294.352 555.25 294.488 555.559 294.57 555.914 cv
294.648 556.273 294.688 556.652 294.691 557.047 cv
cp
f
303.457 557.883 mo
303.453 558.492 303.387 559.043 303.258 559.531 cv
303.121 560.02 302.926 560.434 302.672 560.777 cv
302.41 561.121 302.094 561.387 301.723 561.566 cv
301.344 561.75 300.914 561.836 300.43 561.84 cv
300.203 561.836 299.996 561.816 299.809 561.773 cv
299.617 561.727 299.43 561.656 299.25 561.559 cv
299.063 561.461 298.883 561.336 298.703 561.184 cv
298.52 561.035 298.324 560.852 298.125 560.637 cv
298.125 561.496 li
298.121 561.543 298.113 561.578 298.094 561.605 cv
298.07 561.641 298.035 561.664 297.992 561.68 cv
297.941 561.695 297.883 561.707 297.816 561.723 cv
297.742 561.73 297.652 561.738 297.547 561.738 cv
297.441 561.738 297.352 561.73 297.277 561.723 cv
297.203 561.707 297.145 561.695 297.098 561.68 cv
297.051 561.664 297.02 561.641 297.004 561.605 cv
296.988 561.578 296.98 561.543 296.98 561.496 cv
296.98 551.047 li
296.98 551.008 296.988 550.973 297.008 550.937 cv
297.023 550.91 297.059 550.883 297.109 550.859 cv
297.156 550.84 297.223 550.824 297.309 550.812 cv
297.395 550.805 297.5 550.801 297.625 550.797 cv
297.754 550.801 297.859 550.805 297.945 550.812 cv
298.027 550.824 298.094 550.84 298.141 550.859 cv
298.188 550.883 298.219 550.91 298.242 550.937 cv
298.258 550.973 298.27 551.008 298.273 551.047 cv
298.273 555.262 li
298.48 555.051 298.684 554.871 298.879 554.723 cv
299.074 554.582 299.266 554.461 299.453 554.367 cv
299.641 554.277 299.828 554.211 300.016 554.168 cv
300.203 554.129 300.402 554.109 300.613 554.105 cv
301.121 554.109 301.555 554.211 301.922 554.41 cv
302.281 554.617 302.578 554.891 302.805 555.227 cv
303.031 555.57 303.195 555.969 303.301 556.43 cv
303.402 556.891 303.453 557.375 303.457 557.883 cv
cp
302.121 558.031 mo
302.117 557.676 302.09 557.328 302.039 556.984 cv
301.98 556.648 301.887 556.348 301.75 556.082 cv
301.613 555.824 301.43 555.613 301.207 555.453 cv
300.98 555.297 300.703 555.219 300.367 555.215 cv
300.195 555.219 300.027 555.242 299.867 555.285 cv
299.703 555.336 299.539 555.414 299.371 555.52 cv
299.203 555.633 299.027 555.773 298.848 555.941 cv
298.664 556.117 298.473 556.332 298.273 556.59 cv
298.273 559.398 li
298.629 559.836 298.969 560.164 299.297 560.391 cv
299.617 560.617 299.957 560.73 300.313 560.73 cv
300.637 560.73 300.914 560.652 301.145 560.496 cv
301.375 560.34 301.563 560.133 301.707 559.875 cv
301.852 559.617 301.957 559.328 302.023 559.004 cv
302.086 558.687 302.117 558.363 302.121 558.031 cv
cp
f
311.398 557.672 mo
311.395 557.875 311.344 558.02 311.246 558.105 cv
311.141 558.191 311.027 558.234 310.898 558.234 cv
306.262 558.234 li
306.258 558.625 306.297 558.977 306.379 559.289 cv
306.453 559.602 306.582 559.871 306.77 560.098 cv
306.949 560.324 307.188 560.496 307.484 560.613 cv
307.773 560.734 308.133 560.797 308.563 560.793 cv
308.895 560.797 309.195 560.77 309.457 560.711 cv
309.719 560.66 309.945 560.598 310.137 560.527 cv
310.328 560.461 310.484 560.398 310.609 560.344 cv
310.73 560.289 310.824 560.262 310.891 560.262 cv
310.926 560.262 310.957 560.273 310.988 560.289 cv
311.012 560.312 311.035 560.34 311.055 560.371 cv
311.066 560.41 311.078 560.461 311.09 560.523 cv
311.094 560.594 311.098 560.672 311.102 560.762 cv
311.098 560.832 311.094 560.891 311.094 560.937 cv
311.086 560.988 311.082 561.031 311.074 561.07 cv
311.066 561.109 311.051 561.145 311.035 561.176 cv
311.012 561.207 310.988 561.238 310.965 561.266 cv
310.934 561.297 310.852 561.344 310.711 561.406 cv
310.57 561.473 310.387 561.535 310.164 561.598 cv
309.938 561.66 309.68 561.715 309.387 561.766 cv
309.09 561.812 308.773 561.836 308.441 561.84 cv
307.859 561.836 307.352 561.758 306.922 561.598 cv
306.484 561.437 306.117 561.199 305.82 560.879 cv
305.52 560.562 305.297 560.164 305.148 559.684 cv
304.996 559.203 304.922 558.645 304.922 558.008 cv
304.922 557.406 305 556.863 305.156 556.379 cv
305.313 555.898 305.535 555.488 305.832 555.148 cv
306.125 554.816 306.484 554.559 306.902 554.375 cv
307.316 554.199 307.781 554.109 308.301 554.105 cv
308.852 554.109 309.324 554.199 309.715 554.371 cv
310.102 554.551 310.418 554.789 310.672 555.086 cv
310.918 555.391 311.102 555.742 311.223 556.141 cv
311.336 556.547 311.395 556.977 311.398 557.437 cv
cp
310.102 557.289 mo
310.117 556.613 309.965 556.078 309.648 555.691 cv
309.328 555.309 308.855 555.117 308.234 555.113 cv
307.91 555.117 307.629 555.176 307.391 555.293 cv
307.148 555.414 306.949 555.574 306.785 555.77 cv
306.621 555.969 306.496 556.199 306.41 556.461 cv
306.32 556.727 306.27 557.004 306.262 557.289 cv
cp
f
317.484 554.918 mo
317.48 555.035 317.477 555.133 317.477 555.207 cv
317.469 555.289 317.461 555.352 317.445 555.391 cv
317.43 555.437 317.41 555.469 317.387 555.492 cv
317.363 555.516 317.328 555.527 317.289 555.527 cv
317.242 555.527 317.191 555.516 317.137 555.492 cv
317.074 555.469 317.008 555.445 316.93 555.422 cv
316.852 555.398 316.766 555.379 316.676 555.355 cv
316.578 555.34 316.477 555.328 316.371 555.324 cv
316.238 555.328 316.109 555.355 315.988 555.402 cv
315.859 555.457 315.73 555.543 315.594 555.66 cv
315.453 555.785 315.309 555.941 315.16 556.137 cv
315.008 556.336 314.84 556.578 314.66 556.863 cv
314.66 561.496 li
314.656 561.543 314.645 561.578 314.629 561.602 cv
314.605 561.633 314.574 561.656 314.527 561.676 cv
314.48 561.695 314.414 561.707 314.332 561.723 cv
314.246 561.73 314.141 561.738 314.012 561.738 cv
313.887 561.738 313.781 561.73 313.695 561.723 cv
313.609 561.707 313.543 561.695 313.496 561.676 cv
313.445 561.656 313.41 561.633 313.395 561.602 cv
313.375 561.578 313.367 561.543 313.367 561.496 cv
313.367 554.457 li
313.367 554.418 313.375 554.383 313.391 554.352 cv
313.406 554.324 313.438 554.297 313.484 554.273 cv
313.531 554.25 313.59 554.234 313.664 554.227 cv
313.738 554.219 313.836 554.215 313.957 554.215 cv
314.07 554.215 314.164 554.219 314.242 554.227 cv
314.313 554.234 314.371 554.25 314.418 554.273 cv
314.457 554.297 314.488 554.324 314.508 554.352 cv
314.523 554.383 314.531 554.418 314.535 554.457 cv
314.535 555.48 li
314.723 555.199 314.906 554.973 315.078 554.793 cv
315.246 554.621 315.406 554.48 315.559 554.375 cv
315.707 554.277 315.855 554.207 316.008 554.164 cv
316.152 554.129 316.301 554.109 316.457 554.105 cv
316.52 554.109 316.598 554.113 316.688 554.117 cv
316.77 554.129 316.859 554.145 316.957 554.16 cv
317.051 554.184 317.137 554.207 317.215 554.23 cv
317.289 554.262 317.344 554.285 317.375 554.309 cv
317.406 554.336 317.426 554.363 317.438 554.383 cv
317.445 554.41 317.453 554.437 317.465 554.473 cv
317.469 554.512 317.477 554.566 317.48 554.633 cv
317.48 554.707 317.48 554.801 317.484 554.918 cv
cp
f
329.129 557.898 mo
329.125 558.477 329.051 559.004 328.902 559.484 cv
328.75 559.969 328.523 560.383 328.227 560.73 cv
327.922 561.082 327.547 561.355 327.102 561.547 cv
326.648 561.742 326.125 561.836 325.531 561.84 cv
324.949 561.836 324.445 561.754 324.02 561.582 cv
323.586 561.414 323.227 561.164 322.941 560.832 cv
322.652 560.508 322.441 560.109 322.301 559.637 cv
322.16 559.168 322.09 558.637 322.09 558.039 cv
322.09 557.469 322.164 556.941 322.313 556.457 cv
322.461 555.977 322.684 555.559 322.984 555.207 cv
323.285 554.859 323.66 554.59 324.109 554.395 cv
324.555 554.207 325.078 554.109 325.68 554.105 cv
326.258 554.109 326.762 554.195 327.195 554.363 cv
327.621 554.539 327.98 554.789 328.27 555.113 cv
328.555 555.445 328.77 555.844 328.914 556.312 cv
329.055 556.781 329.125 557.312 329.129 557.898 cv
cp
327.793 557.984 mo
327.789 557.605 327.754 557.246 327.684 556.906 cv
327.609 556.566 327.492 556.27 327.332 556.012 cv
327.168 555.762 326.949 555.559 326.672 555.406 cv
326.391 555.262 326.043 555.187 325.629 555.184 cv
325.246 555.187 324.914 555.254 324.641 555.387 cv
324.359 555.523 324.133 555.715 323.957 555.961 cv
323.773 556.211 323.641 556.508 323.559 556.844 cv
323.469 557.187 323.426 557.555 323.43 557.953 cv
323.426 558.34 323.461 558.703 323.535 559.039 cv
323.602 559.379 323.719 559.676 323.891 559.93 cv
324.055 560.184 324.277 560.383 324.559 560.531 cv
324.832 560.68 325.18 560.754 325.598 560.754 cv
325.977 560.754 326.305 560.687 326.586 560.551 cv
326.859 560.418 327.09 560.227 327.27 559.98 cv
327.449 559.734 327.578 559.441 327.664 559.102 cv
327.746 558.766 327.789 558.395 327.793 557.984 cv
cp
f
334.883 551.562 mo
334.879 551.664 334.875 551.742 334.867 551.801 cv
334.855 551.863 334.844 551.914 334.832 551.945 cv
334.816 551.984 334.797 552.008 334.781 552.02 cv
334.758 552.035 334.734 552.043 334.703 552.039 cv
334.664 552.043 334.617 552.031 334.563 552.004 cv
334.508 551.984 334.441 551.957 334.363 551.926 cv
334.285 551.898 334.191 551.871 334.086 551.848 cv
333.977 551.824 333.852 551.812 333.715 551.812 cv
333.52 551.812 333.355 551.844 333.223 551.906 cv
333.082 551.969 332.973 552.066 332.895 552.199 cv
332.809 552.332 332.75 552.504 332.715 552.715 cv
332.676 552.926 332.656 553.184 332.66 553.484 cv
332.66 554.254 li
334.23 554.254 li
334.27 554.258 334.305 554.266 334.336 554.281 cv
334.359 554.301 334.387 554.332 334.414 554.375 cv
334.434 554.422 334.453 554.477 334.469 554.543 cv
334.48 554.613 334.484 554.699 334.488 554.793 cv
334.484 554.984 334.461 555.117 334.418 555.199 cv
334.367 555.285 334.305 555.328 334.23 555.324 cv
332.66 555.324 li
332.66 561.496 li
332.656 561.543 332.648 561.578 332.629 561.602 cv
332.605 561.633 332.57 561.656 332.523 561.676 cv
332.473 561.695 332.406 561.707 332.324 561.723 cv
332.238 561.73 332.133 561.738 332.012 561.738 cv
331.883 561.738 331.777 561.73 331.699 561.723 cv
331.613 561.707 331.547 561.695 331.5 561.676 cv
331.445 561.656 331.41 561.633 331.391 561.602 cv
331.367 561.578 331.355 561.543 331.359 561.496 cv
331.359 555.324 li
330.367 555.324 li
330.281 555.328 330.219 555.285 330.18 555.199 cv
330.137 555.117 330.113 554.984 330.117 554.793 cv
330.113 554.699 330.121 554.613 330.133 554.543 cv
330.141 554.477 330.156 554.422 330.18 554.375 cv
330.199 554.332 330.223 554.301 330.258 554.281 cv
330.285 554.266 330.324 554.258 330.367 554.254 cv
331.359 554.254 li
331.359 553.523 li
331.355 553.035 331.402 552.617 331.496 552.262 cv
331.586 551.914 331.727 551.625 331.918 551.398 cv
332.102 551.176 332.336 551.012 332.625 550.902 cv
332.906 550.797 333.242 550.742 333.629 550.738 cv
333.809 550.742 333.984 550.758 334.16 550.793 cv
334.328 550.828 334.461 550.867 334.559 550.902 cv
334.652 550.945 334.719 550.98 334.75 551.008 cv
334.781 551.043 334.805 551.082 334.828 551.129 cv
334.844 551.18 334.859 551.238 334.871 551.309 cv
334.875 551.379 334.879 551.465 334.883 551.562 cv
cp
f
345.066 558.852 mo
345.063 559.328 344.977 559.75 344.805 560.121 cv
344.629 560.492 344.387 560.809 344.078 561.062 cv
343.766 561.324 343.398 561.516 342.98 561.645 cv
342.559 561.773 342.109 561.836 341.625 561.84 cv
341.285 561.836 340.969 561.809 340.684 561.754 cv
340.391 561.695 340.133 561.629 339.906 561.543 cv
339.676 561.465 339.484 561.379 339.336 561.285 cv
339.18 561.199 339.074 561.121 339.016 561.059 cv
338.953 560.996 338.91 560.918 338.883 560.82 cv
338.852 560.727 338.836 560.598 338.84 560.434 cv
338.836 560.32 338.84 560.227 338.855 560.148 cv
338.863 560.074 338.879 560.012 338.902 559.961 cv
338.918 559.918 338.945 559.883 338.98 559.863 cv
339.008 559.848 339.043 559.84 339.09 559.836 cv
339.16 559.84 339.266 559.883 339.398 559.969 cv
339.531 560.059 339.699 560.156 339.91 560.262 cv
340.117 560.367 340.371 560.465 340.668 560.555 cv
340.961 560.648 341.301 560.695 341.688 560.691 cv
341.977 560.695 342.242 560.656 342.488 560.574 cv
342.727 560.5 342.938 560.391 343.113 560.242 cv
343.289 560.102 343.422 559.922 343.52 559.711 cv
343.609 559.504 343.656 559.27 343.66 559 cv
343.656 558.719 343.594 558.473 343.465 558.266 cv
343.332 558.066 343.156 557.887 342.945 557.73 cv
342.727 557.578 342.484 557.437 342.215 557.309 cv
341.938 557.184 341.656 557.055 341.375 556.918 cv
341.086 556.785 340.809 556.637 340.539 556.473 cv
340.266 556.312 340.023 556.121 339.809 555.902 cv
339.594 555.684 339.418 555.43 339.289 555.133 cv
339.152 554.844 339.086 554.488 339.09 554.074 cv
339.086 553.652 339.164 553.277 339.32 552.941 cv
339.473 552.613 339.688 552.336 339.961 552.109 cv
340.234 551.891 340.559 551.719 340.941 551.598 cv
341.316 551.484 341.727 551.426 342.164 551.422 cv
342.387 551.426 342.609 551.445 342.84 551.48 cv
343.066 551.523 343.281 551.574 343.484 551.637 cv
343.68 551.703 343.859 551.777 344.02 551.855 cv
344.172 551.937 344.273 552.004 344.328 552.051 cv
344.375 552.105 344.41 552.145 344.426 552.168 cv
344.441 552.199 344.453 552.234 344.465 552.277 cv
344.473 552.324 344.48 552.379 344.488 552.437 cv
344.492 552.504 344.496 552.582 344.496 552.68 cv
344.496 552.773 344.492 552.859 344.484 552.93 cv
344.477 553.008 344.465 553.066 344.449 553.113 cv
344.434 553.164 344.41 553.203 344.383 553.223 cv
344.352 553.25 344.32 553.262 344.285 553.258 cv
344.227 553.262 344.137 553.223 344.016 553.148 cv
343.891 553.078 343.738 552.996 343.566 552.902 cv
343.387 552.812 343.176 552.73 342.934 552.652 cv
342.688 552.578 342.418 552.539 342.117 552.539 cv
341.836 552.539 341.59 552.578 341.383 552.652 cv
341.172 552.73 341 552.832 340.867 552.953 cv
340.73 553.082 340.629 553.23 340.563 553.398 cv
340.492 553.574 340.457 553.758 340.461 553.949 cv
340.457 554.234 340.523 554.477 340.656 554.676 cv
340.785 554.883 340.957 555.062 341.176 555.215 cv
341.387 555.375 341.633 555.516 341.914 555.645 cv
342.188 555.777 342.469 555.91 342.758 556.039 cv
343.043 556.176 343.328 556.32 343.605 556.477 cv
343.879 556.637 344.125 556.828 344.344 557.043 cv
344.559 557.262 344.73 557.516 344.867 557.809 cv
344.996 558.105 345.063 558.453 345.066 558.852 cv
cp
f
352.914 561.496 mo
352.91 561.543 352.902 561.578 352.887 561.602 cv
352.867 561.633 352.836 561.656 352.789 561.676 cv
352.742 561.695 352.68 561.707 352.605 561.723 cv
352.527 561.73 352.434 561.738 352.328 561.738 cv
352.203 561.738 352.105 561.73 352.035 561.723 cv
351.957 561.707 351.898 561.695 351.855 561.676 cv
351.809 561.656 351.777 561.633 351.766 561.602 cv
351.746 561.578 351.738 561.543 351.742 561.496 cv
351.742 560.566 li
351.336 561.012 350.941 561.336 350.551 561.535 cv
350.16 561.738 349.762 561.836 349.363 561.84 cv
348.891 561.836 348.496 561.762 348.18 561.605 cv
347.855 561.453 347.598 561.242 347.398 560.969 cv
347.199 560.703 347.055 560.391 346.973 560.031 cv
346.883 559.676 346.84 559.238 346.844 558.727 cv
346.844 554.457 li
346.84 554.418 346.852 554.383 346.871 554.352 cv
346.887 554.324 346.922 554.297 346.977 554.273 cv
347.027 554.25 347.094 554.234 347.18 554.227 cv
347.262 554.219 347.367 554.215 347.496 554.215 cv
347.617 554.215 347.723 554.219 347.809 554.227 cv
347.891 554.234 347.957 554.25 348.008 554.273 cv
348.055 554.297 348.09 554.324 348.113 554.352 cv
348.133 554.383 348.141 554.418 348.145 554.457 cv
348.145 558.555 li
348.141 558.969 348.172 559.297 348.234 559.543 cv
348.293 559.793 348.383 560.004 348.508 560.18 cv
348.625 560.355 348.781 560.492 348.973 560.586 cv
349.156 560.684 349.375 560.73 349.629 560.73 cv
349.949 560.73 350.27 560.617 350.594 560.387 cv
350.914 560.156 351.258 559.82 351.617 559.375 cv
351.617 554.457 li
351.617 554.418 351.625 554.383 351.645 554.352 cv
351.66 554.324 351.695 554.297 351.75 554.273 cv
351.801 554.25 351.867 554.234 351.949 554.227 cv
352.027 554.219 352.133 554.215 352.266 554.215 cv
352.387 554.215 352.492 554.219 352.578 554.227 cv
352.66 554.234 352.723 554.25 352.773 554.273 cv
352.816 554.297 352.852 554.324 352.879 554.352 cv
352.898 554.383 352.91 554.418 352.914 554.457 cv
cp
f
361.77 557.883 mo
361.766 558.492 361.699 559.043 361.57 559.531 cv
361.434 560.02 361.238 560.434 360.984 560.777 cv
360.723 561.121 360.406 561.387 360.035 561.566 cv
359.656 561.75 359.227 561.836 358.742 561.84 cv
358.516 561.836 358.309 561.816 358.121 561.773 cv
357.93 561.727 357.742 561.656 357.563 561.559 cv
357.375 561.461 357.195 561.336 357.016 561.184 cv
356.832 561.035 356.637 560.852 356.438 560.637 cv
356.438 561.496 li
356.434 561.543 356.426 561.578 356.406 561.605 cv
356.383 561.641 356.348 561.664 356.305 561.68 cv
356.254 561.695 356.195 561.707 356.129 561.723 cv
356.055 561.73 355.965 561.738 355.859 561.738 cv
355.754 561.738 355.664 561.73 355.59 561.723 cv
355.516 561.707 355.457 561.695 355.41 561.68 cv
355.363 561.664 355.332 561.641 355.316 561.605 cv
355.301 561.578 355.293 561.543 355.293 561.496 cv
355.293 551.047 li
355.293 551.008 355.301 550.973 355.32 550.937 cv
355.336 550.91 355.371 550.883 355.422 550.859 cv
355.469 550.84 355.535 550.824 355.621 550.812 cv
355.707 550.805 355.813 550.801 355.938 550.797 cv
356.066 550.801 356.172 550.805 356.258 550.812 cv
356.34 550.824 356.406 550.84 356.453 550.859 cv
356.5 550.883 356.531 550.91 356.555 550.937 cv
356.57 550.973 356.582 551.008 356.586 551.047 cv
356.586 555.262 li
356.793 555.051 356.996 554.871 357.191 554.723 cv
357.387 554.582 357.578 554.461 357.766 554.367 cv
357.953 554.277 358.141 554.211 358.328 554.168 cv
358.516 554.129 358.715 554.109 358.926 554.105 cv
359.434 554.109 359.867 554.211 360.234 554.41 cv
360.594 554.617 360.891 554.891 361.117 555.227 cv
361.344 555.57 361.508 555.969 361.613 556.43 cv
361.715 556.891 361.766 557.375 361.77 557.883 cv
cp
360.434 558.031 mo
360.43 557.676 360.402 557.328 360.352 556.984 cv
360.293 556.648 360.199 556.348 360.063 556.082 cv
359.926 555.824 359.742 555.613 359.52 555.453 cv
359.293 555.297 359.016 555.219 358.68 555.215 cv
358.508 555.219 358.34 555.242 358.18 555.285 cv
358.016 555.336 357.852 555.414 357.684 555.52 cv
357.516 555.633 357.34 555.773 357.16 555.941 cv
356.977 556.117 356.785 556.332 356.586 556.59 cv
356.586 559.398 li
356.941 559.836 357.281 560.164 357.609 560.391 cv
357.93 560.617 358.27 560.73 358.625 560.73 cv
358.949 560.73 359.227 560.652 359.457 560.496 cv
359.688 560.34 359.875 560.133 360.02 559.875 cv
360.164 559.617 360.27 559.328 360.336 559.004 cv
360.398 558.687 360.43 558.363 360.434 558.031 cv
cp
f
366.875 557.742 mo
366.871 557.945 366.848 558.086 366.805 558.164 cv
366.754 558.242 366.688 558.281 366.602 558.281 cv
363.332 558.281 li
363.238 558.281 363.168 558.242 363.121 558.16 cv
363.074 558.082 363.051 557.941 363.051 557.742 cv
363.051 557.547 363.074 557.41 363.121 557.328 cv
363.168 557.254 363.238 557.215 363.332 557.211 cv
366.602 557.211 li
366.641 557.215 366.676 557.223 366.715 557.234 cv
366.746 557.254 366.777 557.285 366.801 557.324 cv
366.824 557.371 366.84 557.426 366.855 557.492 cv
366.863 557.562 366.871 557.645 366.875 557.742 cv
cp
f
370.121 561.488 mo
370.117 561.531 370.109 561.566 370.09 561.598 cv
370.066 561.629 370.027 561.656 369.98 561.672 cv
369.926 561.691 369.859 561.703 369.773 561.719 cv
369.688 561.73 369.578 561.738 369.449 561.738 cv
369.32 561.738 369.211 561.73 369.125 561.719 cv
369.031 561.703 368.961 561.691 368.914 561.672 cv
368.859 561.656 368.824 561.629 368.805 561.598 cv
368.781 561.566 368.77 561.531 368.773 561.488 cv
368.773 551.773 li
368.77 551.734 368.781 551.699 368.809 551.664 cv
368.828 551.637 368.867 551.609 368.926 551.59 cv
368.98 551.574 369.055 551.559 369.141 551.543 cv
369.227 551.531 369.328 551.527 369.449 551.523 cv
369.578 551.527 369.688 551.531 369.773 551.543 cv
369.859 551.559 369.926 551.574 369.98 551.59 cv
370.027 551.609 370.066 551.637 370.09 551.664 cv
370.109 551.699 370.117 551.734 370.121 551.773 cv
cp
f
383.109 561.496 mo
383.105 561.543 383.094 561.578 383.078 561.602 cv
383.055 561.633 383.023 561.656 382.977 561.676 cv
382.93 561.695 382.863 561.707 382.781 561.723 cv
382.695 561.73 382.59 561.738 382.469 561.738 cv
382.332 561.738 382.227 561.73 382.145 561.723 cv
382.059 561.707 381.992 561.695 381.945 561.676 cv
381.895 561.656 381.859 561.633 381.84 561.602 cv
381.816 561.578 381.805 561.543 381.809 561.496 cv
381.809 557.219 li
381.805 556.922 381.777 556.648 381.73 556.402 cv
381.676 556.16 381.594 555.949 381.48 555.77 cv
381.363 555.594 381.219 555.457 381.043 555.363 cv
380.863 555.27 380.652 555.223 380.418 555.223 cv
380.117 555.223 379.82 555.34 379.52 555.566 cv
379.219 555.801 378.887 556.137 378.531 556.574 cv
378.531 561.496 li
378.527 561.543 378.52 561.578 378.5 561.602 cv
378.477 561.633 378.441 561.656 378.395 561.676 cv
378.344 561.695 378.277 561.707 378.195 561.723 cv
378.109 561.73 378.004 561.738 377.883 561.738 cv
377.762 561.738 377.66 561.73 377.574 561.723 cv
377.488 561.707 377.418 561.695 377.371 561.676 cv
377.316 561.656 377.285 561.633 377.27 561.602 cv
377.25 561.578 377.238 561.543 377.242 561.496 cv
377.242 557.219 li
377.238 556.922 377.211 556.648 377.156 556.402 cv
377.098 556.16 377.012 555.949 376.898 555.77 cv
376.781 555.594 376.637 555.457 376.465 555.363 cv
376.289 555.27 376.082 555.223 375.84 555.223 cv
375.543 555.223 375.242 555.34 374.941 555.566 cv
374.637 555.801 374.309 556.137 373.957 556.574 cv
373.957 561.496 li
373.953 561.543 373.941 561.578 373.926 561.602 cv
373.902 561.633 373.871 561.656 373.824 561.676 cv
373.777 561.695 373.711 561.707 373.629 561.723 cv
373.543 561.73 373.438 561.738 373.309 561.738 cv
373.184 561.738 373.078 561.73 372.992 561.723 cv
372.906 561.707 372.84 561.695 372.793 561.676 cv
372.742 561.656 372.707 561.633 372.691 561.602 cv
372.672 561.578 372.664 561.543 372.664 561.496 cv
372.664 554.457 li
372.664 554.418 372.672 554.383 372.688 554.352 cv
372.703 554.324 372.734 554.297 372.781 554.273 cv
372.828 554.25 372.887 554.234 372.961 554.227 cv
373.035 554.219 373.133 554.215 373.254 554.215 cv
373.367 554.215 373.461 554.219 373.539 554.227 cv
373.609 554.234 373.668 554.25 373.715 554.273 cv
373.754 554.297 373.785 554.324 373.805 554.352 cv
373.82 554.383 373.828 554.418 373.832 554.457 cv
373.832 555.387 li
374.223 554.945 374.609 554.621 374.984 554.414 cv
375.355 554.211 375.73 554.109 376.113 554.105 cv
376.406 554.109 376.668 554.145 376.902 554.207 cv
377.129 554.277 377.336 554.371 377.516 554.492 cv
377.691 554.617 377.84 554.762 377.969 554.93 cv
378.09 555.102 378.195 555.293 378.281 555.496 cv
378.512 555.246 378.734 555.027 378.949 554.848 cv
379.156 554.672 379.359 554.531 379.559 554.418 cv
379.754 554.312 379.945 554.23 380.133 554.18 cv
380.316 554.133 380.504 554.109 380.691 554.105 cv
381.145 554.109 381.523 554.187 381.832 554.344 cv
382.137 554.504 382.387 554.719 382.578 554.98 cv
382.77 555.25 382.906 555.559 382.988 555.914 cv
383.066 556.273 383.105 556.652 383.109 557.047 cv
cp
f
390.766 561.504 mo
390.762 561.566 390.742 561.613 390.703 561.645 cv
390.66 561.676 390.602 561.699 390.531 561.715 cv
390.453 561.73 390.348 561.738 390.211 561.738 cv
390.074 561.738 389.965 561.73 389.887 561.715 cv
389.801 561.699 389.742 561.676 389.711 561.645 cv
389.672 561.613 389.656 561.566 389.656 561.504 cv
389.656 560.801 li
389.348 561.129 389.004 561.387 388.625 561.566 cv
388.246 561.75 387.844 561.836 387.426 561.84 cv
387.051 561.836 386.719 561.789 386.422 561.695 cv
386.121 561.598 385.863 561.461 385.652 561.277 cv
385.438 561.098 385.273 560.875 385.16 560.605 cv
385.039 560.344 384.98 560.039 384.984 559.695 cv
384.98 559.301 385.063 558.957 385.227 558.664 cv
385.387 558.375 385.617 558.133 385.922 557.937 cv
386.223 557.746 386.594 557.602 387.035 557.504 cv
387.469 557.41 387.961 557.363 388.512 557.359 cv
389.484 557.359 li
389.484 556.809 li
389.48 556.543 389.453 556.301 389.398 556.09 cv
389.34 555.883 389.246 555.711 389.117 555.57 cv
388.988 555.434 388.82 555.328 388.621 555.258 cv
388.414 555.187 388.164 555.152 387.871 555.152 cv
387.551 555.152 387.266 555.191 387.016 555.266 cv
386.758 555.344 386.539 555.426 386.352 555.516 cv
386.16 555.609 386 555.695 385.871 555.766 cv
385.742 555.844 385.645 555.879 385.586 555.879 cv
385.539 555.879 385.504 555.871 385.477 555.848 cv
385.441 555.832 385.414 555.801 385.395 555.754 cv
385.367 555.715 385.352 555.66 385.344 555.594 cv
385.332 555.531 385.324 555.461 385.328 555.379 cv
385.324 555.254 385.336 555.148 385.355 555.07 cv
385.371 554.996 385.414 554.926 385.488 554.855 cv
385.555 554.789 385.676 554.711 385.852 554.617 cv
386.023 554.531 386.223 554.445 386.449 554.367 cv
386.672 554.293 386.918 554.23 387.184 554.18 cv
387.449 554.133 387.715 554.109 387.988 554.105 cv
388.488 554.109 388.918 554.168 389.277 554.277 cv
389.629 554.395 389.918 554.562 390.141 554.781 cv
390.355 555.008 390.516 555.281 390.617 555.605 cv
390.715 555.937 390.762 556.32 390.766 556.754 cv
cp
389.484 558.289 mo
388.379 558.289 li
388.023 558.293 387.715 558.324 387.457 558.379 cv
387.195 558.441 386.98 558.527 386.809 558.645 cv
386.637 558.762 386.508 558.902 386.43 559.066 cv
386.344 559.23 386.305 559.422 386.309 559.633 cv
386.305 560.004 386.422 560.293 386.656 560.508 cv
386.887 560.727 387.211 560.836 387.629 560.832 cv
387.965 560.836 388.277 560.75 388.57 560.574 cv
388.859 560.406 389.164 560.141 389.484 559.781 cv
cp
f
399.02 554.777 mo
399.02 554.961 398.992 555.094 398.945 555.172 cv
398.891 555.254 398.828 555.293 398.754 555.293 cv
397.746 555.293 li
397.926 555.48 398.055 555.687 398.129 555.914 cv
398.199 556.141 398.234 556.379 398.238 556.621 cv
398.234 557.035 398.168 557.395 398.043 557.703 cv
397.91 558.02 397.727 558.285 397.484 558.496 cv
397.242 558.715 396.953 558.879 396.617 558.992 cv
396.281 559.109 395.91 559.168 395.508 559.164 cv
395.219 559.168 394.945 559.129 394.691 559.051 cv
394.43 558.977 394.23 558.883 394.094 558.766 cv
393.996 558.863 393.922 558.969 393.863 559.086 cv
393.801 559.207 393.77 559.344 393.773 559.5 cv
393.77 559.684 393.855 559.836 394.027 559.957 cv
394.195 560.078 394.418 560.145 394.703 560.152 cv
396.539 560.23 li
396.887 560.246 397.207 560.293 397.504 560.375 cv
397.793 560.465 398.047 560.586 398.262 560.742 cv
398.473 560.902 398.641 561.098 398.762 561.328 cv
398.879 561.562 398.938 561.832 398.941 562.137 cv
398.938 562.457 398.871 562.762 398.738 563.059 cv
398.602 563.348 398.395 563.605 398.117 563.832 cv
397.836 564.051 397.477 564.227 397.047 564.355 cv
396.609 564.48 396.102 564.543 395.516 564.547 cv
394.945 564.543 394.461 564.496 394.063 564.402 cv
393.664 564.305 393.336 564.172 393.082 564.008 cv
392.824 563.836 392.641 563.637 392.527 563.406 cv
392.41 563.172 392.352 562.922 392.355 562.652 cv
392.352 562.48 392.371 562.312 392.418 562.152 cv
392.457 561.988 392.523 561.836 392.609 561.691 cv
392.695 561.547 392.801 561.41 392.93 561.273 cv
393.055 561.145 393.203 561.012 393.371 560.879 cv
393.113 560.75 392.922 560.586 392.805 560.387 cv
392.68 560.187 392.621 559.973 392.621 559.742 cv
392.621 559.426 392.684 559.141 392.816 558.891 cv
392.941 558.641 393.105 558.418 393.301 558.219 cv
393.137 558.027 393.008 557.809 392.918 557.566 cv
392.82 557.324 392.773 557.031 392.777 556.684 cv
392.773 556.285 392.84 555.926 392.98 555.605 cv
393.113 555.289 393.301 555.02 393.543 554.801 cv
393.781 554.582 394.07 554.414 394.41 554.297 cv
394.742 554.18 395.109 554.121 395.508 554.121 cv
395.719 554.121 395.918 554.133 396.105 554.156 cv
396.289 554.18 396.461 554.215 396.625 554.254 cv
398.754 554.254 li
398.84 554.258 398.906 554.301 398.953 554.383 cv
398.996 554.473 399.02 554.602 399.02 554.777 cv
cp
397.004 556.629 mo
397.004 556.152 396.871 555.781 396.605 555.508 cv
396.34 555.242 395.965 555.105 395.484 555.105 cv
395.23 555.105 395.012 555.148 394.832 555.23 cv
394.645 555.316 394.492 555.43 394.371 555.574 cv
394.246 555.723 394.156 555.891 394.098 556.078 cv
394.035 556.27 394.004 556.469 394.008 556.676 cv
394.004 557.145 394.137 557.512 394.402 557.773 cv
394.664 558.043 395.031 558.176 395.508 558.172 cv
395.762 558.176 395.984 558.137 396.172 558.051 cv
396.359 557.973 396.512 557.859 396.637 557.715 cv
396.758 557.574 396.852 557.41 396.914 557.219 cv
396.973 557.031 397.004 556.832 397.004 556.629 cv
cp
397.652 562.207 mo
397.648 561.902 397.523 561.672 397.281 561.508 cv
397.031 561.348 396.695 561.258 396.273 561.246 cv
394.453 561.184 li
394.285 561.316 394.148 561.441 394.043 561.555 cv
393.934 561.672 393.848 561.781 393.789 561.891 cv
393.723 561.996 393.68 562.102 393.66 562.207 cv
393.633 562.309 393.621 562.414 393.625 562.527 cv
393.621 562.863 393.793 563.121 394.141 563.297 cv
394.48 563.473 394.961 563.559 395.578 563.562 cv
395.965 563.559 396.293 563.523 396.559 563.449 cv
396.824 563.371 397.035 563.27 397.199 563.145 cv
397.355 563.02 397.473 562.875 397.547 562.715 cv
397.613 562.551 397.648 562.383 397.652 562.207 cv
cp
f
406.563 557.672 mo
406.559 557.875 406.508 558.02 406.41 558.105 cv
406.305 558.191 406.191 558.234 406.063 558.234 cv
401.426 558.234 li
401.422 558.625 401.461 558.977 401.543 559.289 cv
401.617 559.602 401.746 559.871 401.934 560.098 cv
402.113 560.324 402.352 560.496 402.648 560.613 cv
402.938 560.734 403.297 560.797 403.727 560.793 cv
404.059 560.797 404.359 560.77 404.621 560.711 cv
404.883 560.66 405.109 560.598 405.301 560.527 cv
405.492 560.461 405.648 560.398 405.773 560.344 cv
405.895 560.289 405.988 560.262 406.055 560.262 cv
406.09 560.262 406.121 560.273 406.152 560.289 cv
406.176 560.312 406.199 560.34 406.219 560.371 cv
406.23 560.41 406.242 560.461 406.254 560.523 cv
406.258 560.594 406.262 560.672 406.266 560.762 cv
406.262 560.832 406.258 560.891 406.258 560.937 cv
406.25 560.988 406.246 561.031 406.238 561.07 cv
406.23 561.109 406.215 561.145 406.199 561.176 cv
406.176 561.207 406.152 561.238 406.129 561.266 cv
406.098 561.297 406.016 561.344 405.875 561.406 cv
405.734 561.473 405.551 561.535 405.328 561.598 cv
405.102 561.66 404.844 561.715 404.551 561.766 cv
404.254 561.812 403.938 561.836 403.605 561.84 cv
403.023 561.836 402.516 561.758 402.086 561.598 cv
401.648 561.437 401.281 561.199 400.984 560.879 cv
400.684 560.562 400.461 560.164 400.313 559.684 cv
400.16 559.203 400.086 558.645 400.086 558.008 cv
400.086 557.406 400.164 556.863 400.32 556.379 cv
400.477 555.898 400.699 555.488 400.996 555.148 cv
401.289 554.816 401.648 554.559 402.066 554.375 cv
402.48 554.199 402.945 554.109 403.465 554.105 cv
404.016 554.109 404.488 554.199 404.879 554.371 cv
405.266 554.551 405.582 554.789 405.836 555.086 cv
406.082 555.391 406.266 555.742 406.387 556.141 cv
406.5 556.547 406.559 556.977 406.563 557.437 cv
cp
405.266 557.289 mo
405.281 556.613 405.129 556.078 404.813 555.691 cv
404.492 555.309 404.02 555.117 403.398 555.113 cv
403.074 555.117 402.793 555.176 402.555 555.293 cv
402.313 555.414 402.113 555.574 401.949 555.77 cv
401.785 555.969 401.66 556.199 401.574 556.461 cv
401.484 556.727 401.434 557.004 401.426 557.289 cv
cp
f
412.953 559.578 mo
412.949 559.941 412.883 560.262 412.754 560.543 cv
412.617 560.824 412.426 561.062 412.184 561.254 cv
411.934 561.449 411.645 561.594 411.309 561.691 cv
410.969 561.789 410.594 561.836 410.191 561.84 cv
409.938 561.836 409.699 561.816 409.477 561.781 cv
409.246 561.738 409.043 561.691 408.863 561.633 cv
408.68 561.574 408.527 561.512 408.406 561.445 cv
408.277 561.383 408.188 561.324 408.133 561.27 cv
408.074 561.219 408.031 561.148 408.008 561.051 cv
407.98 560.961 407.969 560.832 407.969 560.668 cv
407.969 560.57 407.973 560.488 407.984 560.418 cv
407.992 560.355 408.004 560.301 408.023 560.254 cv
408.035 560.215 408.059 560.184 408.09 560.164 cv
408.117 560.148 408.148 560.141 408.188 560.137 cv
408.242 560.141 408.328 560.176 408.441 560.242 cv
408.551 560.316 408.688 560.391 408.855 560.473 cv
409.02 560.559 409.215 560.637 409.441 560.703 cv
409.66 560.777 409.918 560.812 410.215 560.809 cv
410.43 560.812 410.629 560.789 410.809 560.738 cv
410.984 560.695 411.137 560.625 411.27 560.531 cv
411.395 560.441 411.496 560.328 411.57 560.184 cv
411.637 560.043 411.672 559.875 411.676 559.68 cv
411.672 559.484 411.621 559.316 411.523 559.18 cv
411.418 559.047 411.285 558.926 411.121 558.82 cv
410.953 558.719 410.766 558.629 410.559 558.543 cv
410.348 558.465 410.133 558.379 409.914 558.289 cv
409.691 558.203 409.473 558.102 409.266 557.988 cv
409.051 557.879 408.863 557.742 408.695 557.578 cv
408.527 557.418 408.391 557.227 408.293 557 cv
408.188 556.777 408.137 556.508 408.141 556.191 cv
408.137 555.918 408.191 555.652 408.301 555.398 cv
408.406 555.148 408.566 554.93 408.781 554.734 cv
408.996 554.547 409.266 554.395 409.586 554.277 cv
409.906 554.168 410.277 554.109 410.707 554.105 cv
410.891 554.109 411.078 554.125 411.27 554.152 cv
411.453 554.187 411.625 554.227 411.777 554.27 cv
411.926 554.32 412.055 554.371 412.164 554.422 cv
412.273 554.48 412.355 554.527 412.41 554.566 cv
412.465 554.609 412.5 554.648 412.52 554.676 cv
412.535 554.711 412.547 554.746 412.559 554.781 cv
412.563 554.824 412.57 554.871 412.582 554.926 cv
412.586 554.984 412.59 555.055 412.594 555.137 cv
412.59 555.227 412.586 555.305 412.582 555.367 cv
412.57 555.437 412.559 555.488 412.543 555.527 cv
412.523 555.57 412.5 555.602 412.477 555.617 cv
412.445 555.637 412.418 555.645 412.391 555.645 cv
412.34 555.645 412.273 555.617 412.188 555.559 cv
412.098 555.504 411.98 555.441 411.84 555.375 cv
411.695 555.312 411.531 555.254 411.344 555.191 cv
411.152 555.137 410.934 555.105 410.691 555.105 cv
410.469 555.105 410.277 555.133 410.113 555.18 cv
409.945 555.234 409.809 555.305 409.703 555.391 cv
409.594 555.484 409.512 555.59 409.461 555.715 cv
409.402 555.84 409.375 555.977 409.379 556.121 cv
409.375 556.328 409.426 556.5 409.535 556.633 cv
409.637 556.773 409.773 556.895 409.941 557 cv
410.105 557.105 410.297 557.199 410.512 557.281 cv
410.723 557.367 410.938 557.453 411.164 557.539 cv
411.383 557.629 411.602 557.727 411.82 557.836 cv
412.035 557.945 412.23 558.078 412.398 558.234 cv
412.563 558.391 412.695 558.578 412.801 558.797 cv
412.898 559.016 412.949 559.277 412.953 559.578 cv
cp
f
278.672 16.023 mo
278.672 16.18 278.664 16.305 278.652 16.402 cv
278.637 16.508 278.617 16.59 278.594 16.648 cv
278.566 16.715 278.535 16.762 278.496 16.785 cv
278.457 16.816 278.414 16.828 278.367 16.828 cv
273.285 16.828 li
273.109 16.828 272.965 16.777 272.848 16.676 cv
272.73 16.574 272.672 16.41 272.672 16.18 cv
272.672 7.35498 li
272.672 7.12903 272.73 6.96503 272.848 6.85901 cv
272.965 6.76202 273.109 6.711 273.285 6.70697 cv
278.336 6.70697 li
278.379 6.711 278.422 6.72302 278.461 6.74597 cv
278.496 6.77301 278.527 6.82001 278.555 6.883 cv
278.578 6.953 278.598 7.03497 278.613 7.133 cv
278.625 7.23798 278.629 7.367 278.633 7.52002 cv
278.629 7.66803 278.625 7.79303 278.613 7.89099 cv
278.598 7.99597 278.578 8.078 278.555 8.13702 cv
278.527 8.203 278.496 8.24597 278.461 8.27301 cv
278.422 8.30499 278.379 8.32001 278.336 8.31598 cv
274.723 8.31598 li
274.723 10.789 li
277.781 10.789 li
277.828 10.793 277.871 10.809 277.91 10.832 cv
277.949 10.863 277.98 10.906 278.008 10.965 cv
278.031 11.027 278.051 11.109 278.066 11.207 cv
278.078 11.312 278.086 11.434 278.086 11.578 cv
278.086 11.73 278.078 11.855 278.066 11.953 cv
278.051 12.055 278.031 12.137 278.008 12.195 cv
277.98 12.258 277.949 12.301 277.91 12.324 cv
277.871 12.352 277.828 12.363 277.781 12.363 cv
274.723 12.363 li
274.723 15.215 li
278.367 15.215 li
278.414 15.219 278.457 15.234 278.496 15.262 cv
278.535 15.293 278.566 15.336 278.594 15.398 cv
278.617 15.461 278.637 15.543 278.652 15.645 cv
278.664 15.746 278.672 15.875 278.672 16.023 cv
cp
f
287.035 16.562 mo
287.031 16.617 287.016 16.66 286.988 16.699 cv
286.953 16.738 286.902 16.773 286.832 16.797 cv
286.758 16.824 286.656 16.84 286.531 16.855 cv
286.398 16.867 286.242 16.875 286.059 16.875 cv
285.863 16.875 285.703 16.867 285.578 16.855 cv
285.449 16.84 285.348 16.824 285.277 16.797 cv
285.199 16.773 285.148 16.738 285.121 16.699 cv
285.086 16.66 285.07 16.617 285.074 16.562 cv
285.074 12.582 li
285.07 12.242 285.047 11.977 285 11.781 cv
284.949 11.594 284.875 11.426 284.785 11.285 cv
284.688 11.148 284.566 11.043 284.422 10.965 cv
284.27 10.891 284.098 10.852 283.898 10.852 cv
283.648 10.852 283.395 10.945 283.141 11.125 cv
282.883 11.312 282.617 11.578 282.344 11.922 cv
282.344 16.562 li
282.34 16.617 282.324 16.66 282.297 16.699 cv
282.262 16.738 282.207 16.773 282.137 16.797 cv
282.059 16.824 281.961 16.84 281.836 16.855 cv
281.711 16.867 281.551 16.875 281.359 16.875 cv
281.164 16.875 281.004 16.867 280.879 16.855 cv
280.75 16.84 280.648 16.824 280.578 16.797 cv
280.5 16.773 280.449 16.738 280.418 16.699 cv
280.387 16.66 280.371 16.617 280.371 16.562 cv
280.371 9.586 li
280.371 9.53497 280.383 9.492 280.41 9.44897 cv
280.434 9.414 280.48 9.37903 280.551 9.35199 cv
280.617 9.328 280.703 9.30902 280.813 9.29303 cv
280.918 9.28101 281.055 9.27698 281.219 9.27301 cv
281.383 9.27698 281.52 9.28101 281.633 9.29303 cv
281.738 9.30902 281.824 9.328 281.887 9.35199 cv
281.945 9.37903 281.988 9.414 282.016 9.44897 cv
282.039 9.492 282.051 9.53497 282.055 9.586 cv
282.055 10.391 li
282.438 9.97699 282.832 9.664 283.23 9.453 cv
283.629 9.24597 284.043 9.14099 284.48 9.14099 cv
284.949 9.14099 285.352 9.21899 285.68 9.375 cv
286.004 9.53101 286.266 9.74597 286.469 10.012 cv
286.668 10.285 286.813 10.598 286.902 10.953 cv
286.988 11.316 287.031 11.75 287.035 12.254 cv
cp
f
295.422 12.871 mo
295.422 13.113 295.367 13.289 295.262 13.402 cv
295.152 13.52 295.004 13.578 294.82 13.574 cv
290.574 13.574 li
290.57 13.875 290.605 14.145 290.68 14.383 cv
290.746 14.629 290.859 14.832 291.016 15 cv
291.168 15.172 291.363 15.305 291.609 15.391 cv
291.848 15.484 292.141 15.527 292.48 15.523 cv
292.824 15.527 293.125 15.504 293.391 15.449 cv
293.648 15.402 293.875 15.348 294.066 15.285 cv
294.254 15.227 294.41 15.168 294.539 15.117 cv
294.66 15.07 294.762 15.047 294.844 15.043 cv
294.887 15.047 294.926 15.055 294.961 15.07 cv
294.988 15.09 295.016 15.125 295.039 15.168 cv
295.059 15.219 295.074 15.285 295.082 15.371 cv
295.09 15.461 295.094 15.57 295.094 15.695 cv
295.094 15.812 295.09 15.91 295.086 15.988 cv
295.078 16.074 295.07 16.141 295.063 16.195 cv
295.051 16.254 295.035 16.305 295.016 16.34 cv
294.992 16.383 294.965 16.418 294.934 16.453 cv
294.898 16.492 294.805 16.543 294.656 16.602 cv
294.5 16.668 294.309 16.73 294.078 16.785 cv
293.84 16.848 293.57 16.895 293.273 16.941 cv
292.969 16.98 292.645 17.004 292.301 17.008 cv
291.676 17.004 291.133 16.93 290.672 16.773 cv
290.203 16.621 289.813 16.383 289.5 16.062 cv
289.184 15.746 288.953 15.344 288.801 14.859 cv
288.645 14.375 288.566 13.809 288.57 13.152 cv
288.566 12.535 288.648 11.977 288.813 11.477 cv
288.973 10.98 289.207 10.555 289.516 10.207 cv
289.824 9.86298 290.199 9.60199 290.641 9.414 cv
291.078 9.23401 291.574 9.14099 292.129 9.14099 cv
292.715 9.14099 293.215 9.22699 293.629 9.39801 cv
294.043 9.57001 294.383 9.80902 294.648 10.113 cv
294.914 10.418 295.109 10.781 295.234 11.195 cv
295.359 11.617 295.422 12.07 295.422 12.559 cv
cp
293.516 12.309 mo
293.527 11.758 293.418 11.32 293.184 11.004 cv
292.945 10.691 292.578 10.535 292.082 10.531 cv
291.832 10.535 291.613 10.582 291.43 10.672 cv
291.242 10.77 291.09 10.895 290.969 11.051 cv
290.844 11.211 290.75 11.398 290.688 11.613 cv
290.621 11.832 290.582 12.066 290.574 12.309 cv
cp
f
301.453 10.234 mo
301.449 10.426 301.445 10.578 301.438 10.695 cv
301.426 10.816 301.41 10.91 301.391 10.977 cv
301.367 11.047 301.34 11.094 301.309 11.117 cv
301.273 11.145 301.23 11.156 301.18 11.156 cv
301.137 11.156 301.09 11.148 301.039 11.129 cv
300.984 11.113 300.926 11.094 300.863 11.07 cv
300.797 11.051 300.723 11.031 300.645 11.012 cv
300.563 10.996 300.477 10.988 300.387 10.984 cv
300.273 10.988 300.164 11.008 300.059 11.051 cv
299.945 11.098 299.832 11.168 299.719 11.258 cv
299.598 11.355 299.477 11.48 299.352 11.633 cv
299.223 11.793 299.086 11.988 298.941 12.215 cv
298.941 16.562 li
298.938 16.617 298.922 16.66 298.895 16.699 cv
298.859 16.738 298.805 16.773 298.734 16.797 cv
298.656 16.824 298.559 16.84 298.434 16.855 cv
298.309 16.867 298.148 16.875 297.957 16.875 cv
297.762 16.875 297.602 16.867 297.477 16.855 cv
297.348 16.84 297.246 16.824 297.176 16.797 cv
297.098 16.773 297.047 16.738 297.016 16.699 cv
296.984 16.66 296.969 16.617 296.969 16.562 cv
296.969 9.586 li
296.969 9.53497 296.98 9.492 297.008 9.44897 cv
297.031 9.414 297.078 9.37903 297.148 9.35199 cv
297.215 9.328 297.301 9.30902 297.41 9.29303 cv
297.516 9.28101 297.652 9.27698 297.816 9.27301 cv
297.98 9.27698 298.117 9.28101 298.23 9.29303 cv
298.336 9.30902 298.422 9.328 298.484 9.35199 cv
298.543 9.37903 298.586 9.414 298.613 9.44897 cv
298.637 9.492 298.648 9.53497 298.652 9.586 cv
298.652 10.453 li
298.832 10.195 299.004 9.97998 299.168 9.80902 cv
299.324 9.64099 299.48 9.508 299.629 9.40601 cv
299.773 9.30902 299.918 9.23798 300.066 9.19897 cv
300.211 9.15997 300.355 9.14099 300.504 9.14099 cv
300.566 9.14099 300.641 9.14502 300.723 9.15198 cv
300.801 9.15997 300.883 9.17603 300.969 9.19098 cv
301.051 9.21503 301.125 9.23401 301.188 9.25403 cv
301.25 9.28101 301.293 9.30499 301.324 9.328 cv
301.348 9.35498 301.371 9.38702 301.387 9.414 cv
301.398 9.44897 301.41 9.492 301.422 9.54303 cv
301.43 9.60199 301.438 9.68402 301.445 9.789 cv
301.449 9.90198 301.449 10.051 301.453 10.234 cv
cp
f
308.785 10.07 mo
308.781 10.324 308.754 10.508 308.699 10.625 cv
308.641 10.746 308.57 10.805 308.488 10.805 cv
307.668 10.805 li
307.781 10.93 307.863 11.074 307.914 11.23 cv
307.961 11.395 307.984 11.559 307.988 11.727 cv
307.984 12.137 307.918 12.5 307.785 12.812 cv
307.648 13.133 307.453 13.398 307.203 13.609 cv
306.945 13.828 306.641 13.992 306.285 14.102 cv
305.926 14.219 305.527 14.273 305.094 14.27 cv
304.867 14.273 304.656 14.246 304.453 14.187 cv
304.25 14.137 304.094 14.074 303.984 13.996 cv
303.922 14.066 303.863 14.145 303.816 14.238 cv
303.762 14.332 303.738 14.437 303.742 14.551 cv
303.738 14.703 303.805 14.828 303.941 14.922 cv
304.07 15.023 304.258 15.074 304.5 15.082 cv
306.195 15.145 li
306.59 15.164 306.945 15.219 307.258 15.316 cv
307.566 15.414 307.828 15.551 308.039 15.723 cv
308.25 15.898 308.41 16.109 308.523 16.352 cv
308.633 16.602 308.688 16.875 308.691 17.187 cv
308.688 17.527 308.613 17.852 308.465 18.16 cv
308.313 18.465 308.086 18.73 307.785 18.957 cv
307.48 19.176 307.102 19.355 306.645 19.488 cv
306.188 19.617 305.652 19.68 305.047 19.684 cv
304.449 19.68 303.941 19.633 303.523 19.543 cv
303.102 19.445 302.758 19.316 302.492 19.152 cv
302.219 18.984 302.023 18.785 301.906 18.551 cv
301.781 18.316 301.723 18.062 301.723 17.789 cv
301.723 17.617 301.742 17.453 301.789 17.297 cv
301.828 17.141 301.895 16.988 301.984 16.848 cv
302.066 16.703 302.172 16.57 302.301 16.437 cv
302.422 16.309 302.566 16.184 302.73 16.062 cv
302.504 15.945 302.328 15.781 302.211 15.574 cv
302.086 15.371 302.027 15.145 302.027 14.895 cv
302.027 14.59 302.098 14.312 302.238 14.055 cv
302.379 13.805 302.559 13.574 302.785 13.371 cv
302.598 13.191 302.453 12.973 302.348 12.715 cv
302.234 12.461 302.18 12.145 302.184 11.758 cv
302.18 11.355 302.25 10.992 302.398 10.668 cv
302.539 10.352 302.738 10.078 302.996 9.85498 cv
303.25 9.63702 303.559 9.46899 303.914 9.34802 cv
304.266 9.23401 304.656 9.17603 305.086 9.172 cv
305.305 9.17603 305.512 9.18701 305.715 9.211 cv
305.91 9.23798 306.098 9.27698 306.277 9.32001 cv
308.488 9.32001 li
308.574 9.32397 308.645 9.37903 308.703 9.492 cv
308.754 9.60901 308.781 9.80499 308.785 10.07 cv
cp
306.262 11.719 mo
306.258 11.344 306.152 11.055 305.945 10.844 cv
305.734 10.641 305.441 10.535 305.063 10.531 cv
304.867 10.535 304.695 10.566 304.555 10.629 cv
304.406 10.695 304.285 10.785 304.191 10.895 cv
304.09 11.008 304.02 11.137 303.977 11.285 cv
303.926 11.434 303.902 11.59 303.906 11.75 cv
303.902 12.109 304.008 12.391 304.219 12.594 cv
304.426 12.801 304.715 12.902 305.086 12.902 cv
305.281 12.902 305.453 12.871 305.602 12.809 cv
305.746 12.746 305.867 12.66 305.965 12.551 cv
306.059 12.441 306.129 12.316 306.184 12.172 cv
306.23 12.027 306.258 11.875 306.262 11.719 cv
cp
306.723 17.289 mo
306.719 17.051 306.625 16.875 306.438 16.75 cv
306.246 16.629 305.988 16.559 305.664 16.547 cv
304.266 16.508 li
304.129 16.609 304.02 16.703 303.941 16.793 cv
303.859 16.883 303.793 16.969 303.746 17.055 cv
303.691 17.137 303.66 17.219 303.648 17.297 cv
303.629 17.375 303.621 17.453 303.625 17.539 cv
303.621 17.797 303.754 17.996 304.02 18.133 cv
304.281 18.266 304.652 18.332 305.133 18.336 cv
305.43 18.332 305.68 18.305 305.883 18.246 cv
306.086 18.184 306.25 18.102 306.375 18.008 cv
306.5 17.906 306.59 17.797 306.645 17.676 cv
306.695 17.551 306.719 17.422 306.723 17.289 cv
cp
f
314.137 16.828 mo
313.289 19.301 li
313.242 19.43 313.113 19.523 312.906 19.582 cv
312.695 19.637 312.391 19.664 311.992 19.668 cv
311.781 19.664 311.613 19.656 311.492 19.641 cv
311.363 19.621 311.27 19.59 311.211 19.551 cv
311.145 19.508 311.113 19.457 311.109 19.395 cv
311.102 19.332 311.117 19.254 311.156 19.168 cv
312.086 16.828 li
312.016 16.797 311.953 16.75 311.902 16.684 cv
311.844 16.621 311.805 16.551 311.781 16.477 cv
309.379 10.062 li
309.309 9.883 309.273 9.742 309.277 9.64502 cv
309.273 9.55103 309.305 9.47699 309.371 9.41803 cv
309.43 9.367 309.535 9.328 309.688 9.30499 cv
309.832 9.28497 310.031 9.27698 310.277 9.27301 cv
310.5 9.27698 310.676 9.28101 310.809 9.28497 cv
310.938 9.297 311.039 9.31598 311.117 9.34399 cv
311.188 9.37903 311.242 9.42603 311.281 9.48798 cv
311.313 9.55499 311.352 9.64801 311.391 9.76599 cv
313.031 14.434 li
313.055 14.434 li
314.559 9.672 li
314.586 9.539 314.625 9.44897 314.68 9.40198 cv
314.727 9.36298 314.809 9.328 314.926 9.30499 cv
315.035 9.28497 315.238 9.27698 315.527 9.27301 cv
315.75 9.27698 315.934 9.28497 316.086 9.30499 cv
316.23 9.328 316.34 9.367 316.414 9.422 cv
316.48 9.47998 316.516 9.55902 316.52 9.65198 cv
316.516 9.75 316.496 9.86298 316.457 9.992 cv
cp
f
328.426 15.297 mo
328.422 15.43 328.418 15.539 328.414 15.629 cv
328.402 15.723 328.391 15.801 328.379 15.863 cv
328.359 15.93 328.34 15.984 328.316 16.031 cv
328.289 16.078 328.246 16.133 328.188 16.191 cv
328.129 16.254 328.02 16.332 327.855 16.422 cv
327.691 16.52 327.488 16.609 327.254 16.691 cv
327.012 16.781 326.742 16.848 326.441 16.906 cv
326.133 16.961 325.805 16.992 325.453 16.992 cv
324.758 16.992 324.129 16.887 323.574 16.672 cv
323.012 16.461 322.539 16.141 322.148 15.715 cv
321.758 15.289 321.457 14.758 321.25 14.121 cv
321.039 13.488 320.934 12.75 320.938 11.898 cv
320.934 11.043 321.051 10.277 321.281 9.60901 cv
321.508 8.94098 321.828 8.383 322.242 7.92603 cv
322.656 7.47699 323.148 7.133 323.727 6.89502 cv
324.297 6.664 324.934 6.547 325.633 6.54303 cv
325.91 6.547 326.18 6.57001 326.445 6.61298 cv
326.703 6.664 326.945 6.72302 327.168 6.797 cv
327.387 6.875 327.586 6.96503 327.766 7.05902 cv
327.941 7.15997 328.066 7.242 328.137 7.31201 cv
328.207 7.383 328.254 7.44098 328.285 7.48798 cv
328.309 7.53497 328.332 7.59802 328.348 7.66803 cv
328.363 7.74597 328.375 7.83197 328.383 7.92603 cv
328.391 8.02698 328.395 8.14801 328.395 8.29303 cv
328.395 8.453 328.387 8.586 328.379 8.69098 cv
328.363 8.80499 328.348 8.89502 328.324 8.961 cv
328.297 9.03101 328.266 9.08197 328.23 9.10901 cv
328.191 9.14502 328.148 9.15997 328.102 9.15601 cv
328.023 9.15997 327.922 9.11298 327.805 9.02002 cv
327.68 8.92999 327.527 8.828 327.34 8.711 cv
327.148 8.60199 326.922 8.5 326.66 8.40601 cv
326.395 8.32001 326.078 8.27301 325.719 8.27002 cv
325.313 8.27301 324.953 8.35498 324.641 8.51599 cv
324.32 8.68402 324.055 8.91803 323.836 9.22302 cv
323.613 9.52698 323.445 9.89801 323.332 10.328 cv
323.215 10.766 323.156 11.25 323.16 11.789 cv
323.156 12.387 323.219 12.902 323.344 13.336 cv
323.465 13.773 323.637 14.133 323.867 14.41 cv
324.09 14.695 324.363 14.906 324.688 15.039 cv
325.008 15.18 325.371 15.246 325.773 15.246 cv
326.137 15.246 326.453 15.203 326.719 15.117 cv
326.984 15.031 327.211 14.937 327.402 14.832 cv
327.59 14.73 327.746 14.637 327.871 14.551 cv
327.992 14.469 328.09 14.426 328.16 14.426 cv
328.211 14.426 328.25 14.437 328.285 14.457 cv
328.313 14.48 328.34 14.523 328.363 14.582 cv
328.383 14.648 328.398 14.734 328.41 14.844 cv
328.418 14.957 328.422 15.109 328.426 15.297 cv
cp
f
336.836 13.004 mo
336.832 13.602 336.754 14.145 336.598 14.633 cv
336.441 15.125 336.203 15.547 335.887 15.898 cv
335.566 16.254 335.168 16.527 334.691 16.719 cv
334.211 16.91 333.648 17.004 333.008 17.008 cv
332.383 17.004 331.844 16.922 331.391 16.75 cv
330.93 16.582 330.551 16.332 330.246 16 cv
329.941 15.676 329.715 15.27 329.574 14.789 cv
329.426 14.309 329.355 13.762 329.355 13.145 cv
329.355 12.555 329.434 12.012 329.594 11.516 cv
329.75 11.023 329.988 10.602 330.309 10.246 cv
330.625 9.89801 331.023 9.625 331.504 9.42999 cv
331.977 9.23798 332.535 9.14099 333.18 9.14099 cv
333.805 9.14099 334.348 9.22699 334.809 9.39502 cv
335.266 9.56598 335.645 9.81598 335.945 10.141 cv
336.242 10.473 336.465 10.875 336.613 11.352 cv
336.758 11.832 336.832 12.383 336.836 13.004 cv
cp
334.809 13.082 mo
334.805 12.742 334.777 12.426 334.727 12.133 cv
334.668 11.844 334.574 11.59 334.449 11.375 cv
334.316 11.164 334.145 10.996 333.93 10.875 cv
333.711 10.758 333.438 10.699 333.109 10.695 cv
332.816 10.699 332.563 10.754 332.344 10.855 cv
332.125 10.965 331.945 11.121 331.805 11.324 cv
331.664 11.535 331.559 11.781 331.488 12.07 cv
331.418 12.359 331.383 12.691 331.383 13.059 cv
331.383 13.406 331.41 13.723 331.469 14.008 cv
331.523 14.301 331.617 14.551 331.746 14.762 cv
331.871 14.977 332.043 15.145 332.266 15.262 cv
332.48 15.383 332.75 15.441 333.078 15.437 cv
333.375 15.441 333.637 15.387 333.855 15.277 cv
334.074 15.172 334.254 15.016 334.395 14.809 cv
334.535 14.609 334.637 14.363 334.707 14.07 cv
334.77 13.785 334.805 13.457 334.809 13.082 cv
cp
f
345.063 16.562 mo
345.059 16.617 345.043 16.66 345.016 16.699 cv
344.98 16.738 344.93 16.773 344.859 16.797 cv
344.785 16.824 344.684 16.84 344.559 16.855 cv
344.426 16.867 344.27 16.875 344.086 16.875 cv
343.891 16.875 343.73 16.867 343.605 16.855 cv
343.477 16.84 343.375 16.824 343.305 16.797 cv
343.227 16.773 343.176 16.738 343.148 16.699 cv
343.113 16.66 343.098 16.617 343.102 16.562 cv
343.102 12.582 li
343.098 12.242 343.074 11.977 343.027 11.781 cv
342.977 11.594 342.902 11.426 342.813 11.285 cv
342.715 11.148 342.594 11.043 342.449 10.965 cv
342.297 10.891 342.125 10.852 341.926 10.852 cv
341.676 10.852 341.422 10.945 341.168 11.125 cv
340.91 11.312 340.645 11.578 340.371 11.922 cv
340.371 16.562 li
340.367 16.617 340.352 16.66 340.324 16.699 cv
340.289 16.738 340.234 16.773 340.164 16.797 cv
340.086 16.824 339.988 16.84 339.863 16.855 cv
339.738 16.867 339.578 16.875 339.387 16.875 cv
339.191 16.875 339.031 16.867 338.906 16.855 cv
338.777 16.84 338.676 16.824 338.605 16.797 cv
338.527 16.773 338.477 16.738 338.445 16.699 cv
338.414 16.66 338.398 16.617 338.398 16.562 cv
338.398 9.586 li
338.398 9.53497 338.41 9.492 338.438 9.44897 cv
338.461 9.414 338.508 9.37903 338.578 9.35199 cv
338.645 9.328 338.73 9.30902 338.84 9.29303 cv
338.945 9.28101 339.082 9.27698 339.246 9.27301 cv
339.41 9.27698 339.547 9.28101 339.66 9.29303 cv
339.766 9.30902 339.852 9.328 339.914 9.35199 cv
339.973 9.37903 340.016 9.414 340.043 9.44897 cv
340.066 9.492 340.078 9.53497 340.082 9.586 cv
340.082 10.391 li
340.465 9.97699 340.859 9.664 341.258 9.453 cv
341.656 9.24597 342.07 9.14099 342.508 9.14099 cv
342.977 9.14099 343.379 9.21899 343.707 9.375 cv
344.031 9.53101 344.293 9.74597 344.496 10.012 cv
344.695 10.285 344.84 10.598 344.93 10.953 cv
345.016 11.316 345.059 11.75 345.063 12.254 cv
cp
f
351.914 14.59 mo
351.91 14.988 351.836 15.34 351.691 15.641 cv
351.539 15.945 351.328 16.199 351.059 16.398 cv
350.785 16.605 350.465 16.754 350.098 16.855 cv
349.727 16.953 349.324 17.004 348.895 17.008 cv
348.629 17.004 348.383 16.984 348.148 16.949 cv
347.91 16.906 347.695 16.859 347.508 16.801 cv
347.316 16.742 347.16 16.68 347.039 16.617 cv
346.91 16.555 346.82 16.496 346.766 16.441 cv
346.707 16.387 346.66 16.301 346.633 16.184 cv
346.598 16.066 346.582 15.895 346.586 15.664 cv
346.582 15.516 346.59 15.395 346.602 15.301 cv
346.609 15.211 346.625 15.137 346.648 15.078 cv
346.668 15.027 346.691 14.992 346.727 14.969 cv
346.754 14.953 346.793 14.941 346.844 14.941 cv
346.898 14.941 346.984 14.977 347.098 15.039 cv
347.207 15.109 347.348 15.18 347.516 15.258 cv
347.684 15.336 347.879 15.41 348.102 15.477 cv
348.32 15.547 348.57 15.582 348.855 15.578 cv
349.031 15.582 349.188 15.562 349.328 15.523 cv
349.461 15.488 349.582 15.437 349.688 15.367 cv
349.785 15.305 349.863 15.219 349.918 15.109 cv
349.969 15.008 349.992 14.887 349.996 14.746 cv
349.992 14.594 349.945 14.457 349.852 14.344 cv
349.754 14.234 349.625 14.137 349.469 14.051 cv
349.305 13.969 349.125 13.891 348.93 13.816 cv
348.727 13.746 348.523 13.668 348.313 13.574 cv
348.102 13.488 347.895 13.387 347.691 13.27 cv
347.488 13.16 347.309 13.02 347.152 12.848 cv
346.992 12.684 346.863 12.48 346.77 12.246 cv
346.672 12.012 346.625 11.73 346.625 11.398 cv
346.625 11.066 346.688 10.762 346.82 10.48 cv
346.945 10.207 347.133 9.96899 347.383 9.76599 cv
347.625 9.57001 347.926 9.414 348.281 9.30499 cv
348.629 9.19501 349.023 9.14099 349.465 9.14099 cv
349.68 9.14099 349.891 9.15601 350.102 9.18701 cv
350.305 9.21899 350.492 9.258 350.66 9.30499 cv
350.828 9.35199 350.969 9.40198 351.086 9.45697 cv
351.195 9.51202 351.277 9.55902 351.332 9.59802 cv
351.379 9.63702 351.414 9.67603 351.438 9.71503 cv
351.453 9.75403 351.469 9.80103 351.484 9.85498 cv
351.492 9.90997 351.504 9.97998 351.512 10.059 cv
351.52 10.145 351.523 10.242 351.523 10.359 cv
351.523 10.5 351.52 10.617 351.512 10.703 cv
351.504 10.797 351.488 10.867 351.473 10.914 cv
351.449 10.969 351.426 11.004 351.398 11.02 cv
351.363 11.043 351.328 11.051 351.289 11.047 cv
351.242 11.051 351.168 11.023 351.07 10.965 cv
350.969 10.914 350.844 10.855 350.695 10.789 cv
350.543 10.73 350.371 10.672 350.18 10.613 cv
349.98 10.562 349.758 10.535 349.512 10.531 cv
349.332 10.535 349.18 10.555 349.051 10.586 cv
348.918 10.625 348.809 10.676 348.73 10.742 cv
348.645 10.812 348.582 10.891 348.543 10.98 cv
348.496 11.074 348.477 11.172 348.48 11.273 cv
348.477 11.437 348.527 11.574 348.629 11.68 cv
348.727 11.793 348.855 11.891 349.02 11.969 cv
349.18 12.055 349.363 12.133 349.57 12.207 cv
349.773 12.281 349.98 12.359 350.195 12.445 cv
350.402 12.531 350.613 12.633 350.82 12.746 cv
351.027 12.863 351.211 13.004 351.375 13.168 cv
351.535 13.336 351.664 13.535 351.766 13.766 cv
351.859 14 351.91 14.273 351.914 14.59 cv
cp
f
360.008 16.562 mo
360.004 16.617 359.992 16.66 359.969 16.699 cv
359.941 16.738 359.895 16.773 359.832 16.797 cv
359.762 16.824 359.676 16.84 359.574 16.855 cv
359.465 16.867 359.332 16.875 359.172 16.875 cv
358.996 16.875 358.855 16.867 358.754 16.855 cv
358.645 16.84 358.563 16.824 358.5 16.797 cv
358.438 16.773 358.391 16.738 358.367 16.699 cv
358.336 16.66 358.324 16.617 358.328 16.562 cv
358.328 15.758 li
357.941 16.176 357.547 16.488 357.148 16.695 cv
356.746 16.902 356.336 17.004 355.91 17.008 cv
355.43 17.004 355.027 16.93 354.703 16.773 cv
354.375 16.621 354.109 16.406 353.91 16.133 cv
353.707 15.863 353.563 15.551 353.48 15.191 cv
353.391 14.836 353.348 14.391 353.352 13.855 cv
353.352 9.586 li
353.348 9.53497 353.363 9.492 353.395 9.44897 cv
353.422 9.414 353.473 9.37903 353.551 9.35199 cv
353.621 9.328 353.723 9.30902 353.855 9.29303 cv
353.98 9.28101 354.141 9.27698 354.332 9.27301 cv
354.523 9.27698 354.684 9.28101 354.809 9.29303 cv
354.934 9.30902 355.031 9.328 355.109 9.35199 cv
355.18 9.37903 355.234 9.414 355.27 9.44897 cv
355.297 9.492 355.313 9.53497 355.316 9.586 cv
355.316 13.527 li
355.313 13.895 355.336 14.172 355.387 14.363 cv
355.43 14.559 355.5 14.723 355.602 14.859 cv
355.695 15 355.82 15.109 355.969 15.184 cv
356.117 15.262 356.289 15.301 356.488 15.297 cv
356.734 15.301 356.984 15.207 357.242 15.023 cv
357.492 14.84 357.766 14.574 358.055 14.223 cv
358.055 9.586 li
358.055 9.53497 358.066 9.492 358.098 9.44897 cv
358.121 9.414 358.176 9.37903 358.254 9.35199 cv
358.328 9.328 358.426 9.30902 358.555 9.29303 cv
358.676 9.28101 358.836 9.27698 359.031 9.27301 cv
359.223 9.27698 359.383 9.28101 359.508 9.29303 cv
359.633 9.30902 359.73 9.328 359.805 9.35199 cv
359.875 9.37903 359.926 9.414 359.961 9.44897 cv
359.988 9.492 360.004 9.53497 360.008 9.586 cv
cp
f
373.094 16.562 mo
373.09 16.617 373.074 16.66 373.047 16.699 cv
373.012 16.738 372.961 16.773 372.891 16.797 cv
372.816 16.824 372.715 16.84 372.594 16.855 cv
372.465 16.867 372.309 16.875 372.117 16.875 cv
371.914 16.875 371.75 16.867 371.629 16.855 cv
371.5 16.84 371.398 16.824 371.328 16.797 cv
371.25 16.773 371.199 16.738 371.172 16.699 cv
371.141 16.66 371.125 16.617 371.129 16.562 cv
371.129 12.426 li
371.125 12.191 371.105 11.977 371.063 11.781 cv
371.016 11.594 370.945 11.426 370.859 11.285 cv
370.766 11.148 370.652 11.043 370.516 10.965 cv
370.375 10.891 370.211 10.852 370.02 10.852 cv
369.785 10.852 369.547 10.945 369.309 11.125 cv
369.066 11.312 368.805 11.578 368.523 11.922 cv
368.523 16.562 li
368.52 16.617 368.504 16.66 368.477 16.699 cv
368.441 16.738 368.387 16.773 368.316 16.797 cv
368.238 16.824 368.141 16.84 368.016 16.855 cv
367.891 16.867 367.734 16.875 367.547 16.875 cv
367.352 16.875 367.191 16.867 367.07 16.855 cv
366.941 16.84 366.84 16.824 366.77 16.797 cv
366.691 16.773 366.641 16.738 366.609 16.699 cv
366.578 16.66 366.563 16.617 366.563 16.562 cv
366.563 12.426 li
366.563 12.191 366.539 11.977 366.496 11.781 cv
366.449 11.594 366.383 11.426 366.297 11.285 cv
366.207 11.148 366.094 11.043 365.953 10.965 cv
365.813 10.891 365.645 10.852 365.457 10.852 cv
365.215 10.852 364.977 10.945 364.738 11.125 cv
364.496 11.312 364.238 11.578 363.965 11.922 cv
363.965 16.562 li
363.961 16.617 363.945 16.66 363.918 16.699 cv
363.883 16.738 363.828 16.773 363.758 16.797 cv
363.68 16.824 363.582 16.84 363.457 16.855 cv
363.332 16.867 363.172 16.875 362.98 16.875 cv
362.785 16.875 362.625 16.867 362.5 16.855 cv
362.371 16.84 362.27 16.824 362.199 16.797 cv
362.121 16.773 362.07 16.738 362.039 16.699 cv
362.008 16.66 361.992 16.617 361.992 16.562 cv
361.992 9.586 li
361.992 9.53497 362.004 9.492 362.031 9.44897 cv
362.055 9.414 362.102 9.37903 362.172 9.35199 cv
362.238 9.328 362.324 9.30902 362.434 9.29303 cv
362.539 9.28101 362.676 9.27698 362.84 9.27301 cv
363.004 9.27698 363.141 9.28101 363.254 9.29303 cv
363.359 9.30902 363.445 9.328 363.508 9.35199 cv
363.566 9.37903 363.609 9.414 363.637 9.44897 cv
363.66 9.492 363.672 9.53497 363.676 9.586 cv
363.676 10.391 li
364.059 9.97699 364.445 9.664 364.828 9.453 cv
365.211 9.24597 365.609 9.14099 366.031 9.14099 cv
366.313 9.14099 366.57 9.172 366.805 9.22998 cv
367.031 9.29303 367.238 9.37903 367.418 9.48798 cv
367.598 9.60199 367.75 9.73401 367.883 9.89099 cv
368.008 10.047 368.117 10.223 368.211 10.414 cv
368.414 10.191 368.621 10 368.824 9.836 cv
369.027 9.67999 369.227 9.547 369.422 9.44098 cv
369.617 9.34399 369.813 9.27002 370.008 9.21503 cv
370.203 9.16803 370.402 9.14099 370.605 9.14099 cv
371.066 9.14099 371.457 9.21899 371.777 9.375 cv
372.098 9.53101 372.355 9.74597 372.551 10.012 cv
372.746 10.285 372.883 10.598 372.969 10.953 cv
373.047 11.316 373.09 11.695 373.094 12.094 cv
cp
f
382.047 12.973 mo
382.043 13.594 381.977 14.156 381.844 14.652 cv
381.707 15.152 381.512 15.574 381.262 15.922 cv
381.004 16.273 380.688 16.543 380.309 16.727 cv
379.926 16.914 379.492 17.004 379.004 17.008 cv
378.797 17.004 378.609 16.984 378.441 16.949 cv
378.27 16.906 378.105 16.848 377.949 16.77 cv
377.789 16.691 377.629 16.594 377.477 16.469 cv
377.316 16.352 377.156 16.211 376.992 16.047 cv
376.992 19.332 li
376.988 19.379 376.973 19.426 376.945 19.473 cv
376.91 19.512 376.855 19.547 376.785 19.578 cv
376.707 19.602 376.609 19.625 376.484 19.645 cv
376.359 19.656 376.199 19.664 376.008 19.668 cv
375.813 19.664 375.652 19.656 375.527 19.645 cv
375.398 19.625 375.297 19.602 375.227 19.578 cv
375.148 19.547 375.098 19.512 375.066 19.473 cv
375.035 19.426 375.02 19.379 375.02 19.332 cv
375.02 9.586 li
375.02 9.53497 375.031 9.492 375.059 9.44897 cv
375.082 9.414 375.129 9.37903 375.195 9.35199 cv
375.258 9.328 375.344 9.30902 375.453 9.29303 cv
375.563 9.28101 375.695 9.27698 375.859 9.27301 cv
376.012 9.27698 376.145 9.28101 376.254 9.29303 cv
376.359 9.30902 376.445 9.328 376.512 9.35199 cv
376.574 9.37903 376.621 9.414 376.648 9.44897 cv
376.672 9.492 376.684 9.53497 376.688 9.586 cv
376.688 10.406 li
376.887 10.199 377.086 10.016 377.285 9.85498 cv
377.477 9.69897 377.676 9.56598 377.883 9.45697 cv
378.082 9.35199 378.293 9.27301 378.512 9.21899 cv
378.73 9.16803 378.961 9.14099 379.207 9.14099 cv
379.715 9.14099 380.148 9.242 380.512 9.44098 cv
380.867 9.64502 381.16 9.91803 381.391 10.266 cv
381.613 10.617 381.781 11.027 381.887 11.488 cv
381.992 11.957 382.043 12.449 382.047 12.973 cv
cp
379.996 13.113 mo
379.992 12.816 379.973 12.531 379.93 12.258 cv
379.883 11.984 379.805 11.742 379.703 11.523 cv
379.594 11.312 379.453 11.141 379.281 11.012 cv
379.102 10.887 378.883 10.824 378.625 10.82 cv
378.492 10.824 378.363 10.844 378.238 10.879 cv
378.105 10.922 377.977 10.984 377.848 11.07 cv
377.711 11.16 377.574 11.273 377.438 11.414 cv
377.293 11.555 377.145 11.73 376.992 11.937 cv
376.992 14.238 li
377.266 14.59 377.527 14.863 377.781 15.051 cv
378.027 15.246 378.289 15.34 378.563 15.336 cv
378.816 15.34 379.035 15.273 379.219 15.141 cv
379.395 15.008 379.543 14.836 379.66 14.625 cv
379.773 14.414 379.855 14.176 379.914 13.91 cv
379.965 13.645 379.992 13.379 379.996 13.113 cv
cp
f
387.625 15.875 mo
387.621 16.105 387.609 16.281 387.582 16.402 cv
387.551 16.527 387.512 16.613 387.469 16.66 cv
387.418 16.711 387.348 16.754 387.258 16.793 cv
387.164 16.832 387.059 16.863 386.938 16.895 cv
386.813 16.918 386.68 16.941 386.539 16.961 cv
386.395 16.973 386.25 16.98 386.105 16.984 cv
385.715 16.98 385.375 16.93 385.09 16.836 cv
384.801 16.734 384.563 16.586 384.379 16.379 cv
384.188 16.176 384.051 15.918 383.961 15.602 cv
383.871 15.289 383.824 14.918 383.828 14.488 cv
383.828 10.914 li
382.992 10.914 li
382.891 10.918 382.816 10.855 382.766 10.73 cv
382.711 10.609 382.684 10.406 382.688 10.117 cv
382.684 9.96899 382.691 9.84003 382.707 9.73401 cv
382.719 9.633 382.738 9.55103 382.766 9.48798 cv
382.789 9.42999 382.82 9.38702 382.863 9.35901 cv
382.898 9.336 382.945 9.32397 383 9.32001 cv
383.828 9.32001 li
383.828 7.76202 li
383.824 7.71503 383.84 7.66803 383.871 7.62097 cv
383.898 7.58197 383.949 7.547 384.027 7.51599 cv
384.102 7.492 384.207 7.46899 384.336 7.453 cv
384.461 7.44098 384.617 7.43701 384.809 7.43402 cv
385 7.43701 385.16 7.44098 385.289 7.453 cv
385.414 7.46899 385.516 7.492 385.59 7.51599 cv
385.66 7.547 385.711 7.58197 385.746 7.62097 cv
385.773 7.66803 385.789 7.71503 385.793 7.76202 cv
385.793 9.32001 li
387.313 9.32001 li
387.363 9.32397 387.406 9.336 387.449 9.35901 cv
387.484 9.38702 387.52 9.42999 387.547 9.48798 cv
387.57 9.55103 387.59 9.633 387.605 9.73401 cv
387.617 9.84003 387.621 9.96899 387.625 10.117 cv
387.621 10.406 387.598 10.609 387.547 10.73 cv
387.492 10.855 387.414 10.918 387.32 10.914 cv
385.793 10.914 li
385.793 14.191 li
385.789 14.574 385.848 14.863 385.973 15.051 cv
386.09 15.246 386.305 15.34 386.613 15.336 cv
386.715 15.34 386.809 15.332 386.895 15.309 cv
386.977 15.293 387.051 15.27 387.117 15.246 cv
387.184 15.223 387.238 15.203 387.285 15.18 cv
387.324 15.164 387.367 15.152 387.406 15.152 cv
387.438 15.152 387.465 15.164 387.496 15.18 cv
387.52 15.203 387.543 15.238 387.563 15.293 cv
387.574 15.348 387.59 15.422 387.605 15.516 cv
387.617 15.609 387.621 15.73 387.625 15.875 cv
cp
f
391.023 16.562 mo
391.02 16.617 391.004 16.66 390.977 16.699 cv
390.941 16.738 390.887 16.773 390.816 16.797 cv
390.738 16.824 390.641 16.84 390.516 16.855 cv
390.391 16.867 390.23 16.875 390.039 16.875 cv
389.844 16.875 389.684 16.867 389.559 16.855 cv
389.43 16.84 389.328 16.824 389.258 16.797 cv
389.18 16.773 389.129 16.738 389.098 16.699 cv
389.066 16.66 389.051 16.617 389.051 16.562 cv
389.051 9.60199 li
389.051 9.55499 389.066 9.508 389.098 9.46503 cv
389.129 9.42999 389.18 9.39502 389.258 9.36298 cv
389.328 9.336 389.43 9.31598 389.559 9.297 cv
389.684 9.28497 389.844 9.27698 390.039 9.27301 cv
390.23 9.27698 390.391 9.28497 390.516 9.297 cv
390.641 9.31598 390.738 9.336 390.816 9.36298 cv
390.887 9.39502 390.941 9.42999 390.977 9.46503 cv
391.004 9.508 391.02 9.55499 391.023 9.60199 cv
cp
391.172 7.22302 mo
391.172 7.62097 391.09 7.89502 390.93 8.04303 cv
390.766 8.19897 390.465 8.27301 390.031 8.27002 cv
389.582 8.27301 389.285 8.19897 389.133 8.05103 cv
388.977 7.90601 388.898 7.64502 388.902 7.26202 cv
388.898 6.867 388.977 6.59399 389.141 6.43701 cv
389.297 6.289 389.602 6.211 390.047 6.20697 cv
390.484 6.211 390.781 6.28497 390.938 6.42999 cv
391.094 6.58197 391.172 6.84802 391.172 7.22302 cv
cp
f
400.051 13.004 mo
400.047 13.602 399.969 14.145 399.813 14.633 cv
399.656 15.125 399.418 15.547 399.102 15.898 cv
398.781 16.254 398.383 16.527 397.906 16.719 cv
397.426 16.91 396.863 17.004 396.223 17.008 cv
395.598 17.004 395.059 16.922 394.605 16.75 cv
394.145 16.582 393.766 16.332 393.461 16 cv
393.156 15.676 392.93 15.27 392.789 14.789 cv
392.641 14.309 392.57 13.762 392.57 13.145 cv
392.57 12.555 392.648 12.012 392.809 11.516 cv
392.965 11.023 393.203 10.602 393.523 10.246 cv
393.84 9.89801 394.238 9.625 394.719 9.42999 cv
395.191 9.23798 395.75 9.14099 396.395 9.14099 cv
397.02 9.14099 397.563 9.22699 398.023 9.39502 cv
398.48 9.56598 398.859 9.81598 399.16 10.141 cv
399.457 10.473 399.68 10.875 399.828 11.352 cv
399.973 11.832 400.047 12.383 400.051 13.004 cv
cp
398.023 13.082 mo
398.02 12.742 397.992 12.426 397.941 12.133 cv
397.883 11.844 397.789 11.59 397.664 11.375 cv
397.531 11.164 397.359 10.996 397.145 10.875 cv
396.926 10.758 396.652 10.699 396.324 10.695 cv
396.031 10.699 395.777 10.754 395.559 10.855 cv
395.34 10.965 395.16 11.121 395.02 11.324 cv
394.879 11.535 394.773 11.781 394.703 12.07 cv
394.633 12.359 394.598 12.691 394.598 13.059 cv
394.598 13.406 394.625 13.723 394.684 14.008 cv
394.738 14.301 394.832 14.551 394.961 14.762 cv
395.086 14.977 395.258 15.145 395.48 15.262 cv
395.695 15.383 395.965 15.441 396.293 15.437 cv
396.59 15.441 396.852 15.387 397.07 15.277 cv
397.289 15.172 397.469 15.016 397.609 14.809 cv
397.75 14.609 397.852 14.363 397.922 14.07 cv
397.984 13.785 398.02 13.457 398.023 13.082 cv
cp
f
408.324 16.562 mo
408.32 16.617 408.305 16.66 408.277 16.699 cv
408.242 16.738 408.191 16.773 408.121 16.797 cv
408.047 16.824 407.945 16.84 407.82 16.855 cv
407.688 16.867 407.531 16.875 407.348 16.875 cv
407.152 16.875 406.992 16.867 406.867 16.855 cv
406.738 16.84 406.637 16.824 406.566 16.797 cv
406.488 16.773 406.438 16.738 406.41 16.699 cv
406.375 16.66 406.359 16.617 406.363 16.562 cv
406.363 12.582 li
406.359 12.242 406.336 11.977 406.289 11.781 cv
406.238 11.594 406.164 11.426 406.074 11.285 cv
405.977 11.148 405.855 11.043 405.711 10.965 cv
405.559 10.891 405.387 10.852 405.188 10.852 cv
404.938 10.852 404.684 10.945 404.43 11.125 cv
404.172 11.312 403.906 11.578 403.633 11.922 cv
403.633 16.562 li
403.629 16.617 403.613 16.66 403.586 16.699 cv
403.551 16.738 403.496 16.773 403.426 16.797 cv
403.348 16.824 403.25 16.84 403.125 16.855 cv
403 16.867 402.84 16.875 402.648 16.875 cv
402.453 16.875 402.293 16.867 402.168 16.855 cv
402.039 16.84 401.938 16.824 401.867 16.797 cv
401.789 16.773 401.738 16.738 401.707 16.699 cv
401.676 16.66 401.66 16.617 401.66 16.562 cv
401.66 9.586 li
401.66 9.53497 401.672 9.492 401.699 9.44897 cv
401.723 9.414 401.77 9.37903 401.84 9.35199 cv
401.906 9.328 401.992 9.30902 402.102 9.29303 cv
402.207 9.28101 402.344 9.27698 402.508 9.27301 cv
402.672 9.27698 402.809 9.28101 402.922 9.29303 cv
403.027 9.30902 403.113 9.328 403.176 9.35199 cv
403.234 9.37903 403.277 9.414 403.305 9.44897 cv
403.328 9.492 403.34 9.53497 403.344 9.586 cv
403.344 10.391 li
403.727 9.97699 404.121 9.664 404.52 9.453 cv
404.918 9.24597 405.332 9.14099 405.77 9.14099 cv
406.238 9.14099 406.641 9.21899 406.969 9.375 cv
407.293 9.53101 407.555 9.74597 407.758 10.012 cv
407.957 10.285 408.102 10.598 408.191 10.953 cv
408.277 11.316 408.32 11.75 408.324 12.254 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
