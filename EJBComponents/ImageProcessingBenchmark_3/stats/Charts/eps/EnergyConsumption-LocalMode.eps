%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: EnergyConsumption-LocalMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:55:33 p.m.
%%BoundingBox: 0 0 655 542
%%HiResBoundingBox: 0 0 654.2400 541.2001
%%CropBox: 0 0 654.2400 541.2001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -541.2 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 541.2 li
654.24 541.2 li
654.24 0 li
cp
clp
gsave
0 541.2 mo
655 541.2 li
655 -.799988 li
0 -.799988 li
cp
clp
0 0 mo
654.238 0 li
654.238 541.199 li
0 541.199 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
57.359 472.559 mo
638.281 472.559 li
57.359 426.359 mo
638.281 426.359 li
57.359 380.16 mo
638.281 380.16 li
57.359 333.961 mo
638.281 333.961 li
57.359 287.762 mo
638.281 287.762 li
57.359 241.559 mo
638.281 241.559 li
57.359 195.238 mo
638.281 195.238 li
57.359 149.039 mo
638.281 149.039 li
57.359 102.84 mo
638.281 102.84 li
57.359 56.641 mo
638.281 56.641 li
.135805 .104005 .108583 0 cmyk
@
57.359 449.52 mo
638.281 449.52 li
57.359 403.32 mo
638.281 403.32 li
57.359 357 mo
638.281 357 li
57.359 310.801 mo
638.281 310.801 li
57.359 264.602 mo
638.281 264.602 li
57.359 218.398 mo
638.281 218.398 li
57.359 172.199 mo
638.281 172.199 li
57.359 126 mo
638.281 126 li
57.359 79.801 mo
638.281 79.801 li
57.359 33.48 mo
638.281 33.48 li
.326574 .281529 .277562 0 cmyk
@
93.719 33.48 mo
93.719 495.719 li
166.32 33.48 mo
166.32 495.719 li
238.922 33.48 mo
238.922 495.719 li
311.52 33.48 mo
311.52 495.719 li
384.121 33.48 mo
384.121 495.719 li
456.719 33.48 mo
456.719 495.719 li
529.32 33.48 mo
529.32 495.719 li
601.922 33.48 mo
601.922 495.719 li
.175235 .144778 .143648 0 cmyk
@
57.359 33.48 mo
57.359 495.719 li
129.961 33.48 mo
129.961 495.719 li
202.559 33.48 mo
202.559 495.719 li
275.16 33.48 mo
275.16 495.719 li
347.762 33.48 mo
347.762 495.719 li
420.359 33.48 mo
420.359 495.719 li
493.078 33.48 mo
493.078 495.719 li
565.68 33.48 mo
565.68 495.719 li
638.281 33.48 mo
638.281 495.719 li
.326574 .281529 .277562 0 cmyk
@
37.32 486.359 mo
44.398 486.359 li
44.398 503.519 li
37.32 503.519 li
cp
0 0 0 0 cmyk
ef
37.32 440.16 mo
44.398 440.16 li
44.398 457.199 li
37.32 457.199 li
cp
ef
30.238 393.961 mo
44.398 393.961 li
44.398 411 li
30.238 411 li
cp
ef
30.238 347.762 mo
44.398 347.762 li
44.398 364.801 li
30.238 364.801 li
cp
ef
30.238 301.559 mo
44.398 301.559 li
44.398 318.602 li
30.238 318.602 li
cp
ef
30.238 255.359 mo
44.398 255.359 li
44.398 272.398 li
30.238 272.398 li
cp
ef
30.238 209.039 mo
44.398 209.039 li
44.398 226.199 li
30.238 226.199 li
cp
ef
30.238 162.84 mo
44.398 162.84 li
44.398 180 li
30.238 180 li
cp
ef
30.238 116.641 mo
44.398 116.641 li
44.398 133.801 li
30.238 133.801 li
cp
ef
30.238 70.441 mo
44.398 70.441 li
44.398 87.48 li
30.238 87.48 li
cp
ef
30.238 24.238 mo
44.398 24.238 li
44.398 41.281 li
30.238 41.281 li
cp
ef
.96 lw
57.359 495.719 mo
638.281 495.719 li
.369879 .299321 .304356 .000976577 cmyk
@
57.359 495.719 mo
57.359 500.16 li
129.961 495.719 mo
129.961 500.16 li
202.559 495.719 mo
202.559 500.16 li
275.16 495.719 mo
275.16 500.16 li
347.762 495.719 mo
347.762 500.16 li
420.359 495.719 mo
420.359 500.16 li
493.078 495.719 mo
493.078 500.16 li
565.68 495.719 mo
565.68 500.16 li
638.281 495.719 mo
638.281 500.16 li
@
gsave
57.359 33.48 mo
638.879 33.48 li
638.879 496.441 li
57.359 496.441 li
cp
clp
1 lc
57.359 40.922 mo
129.961 131.52 li
202.559 105.719 li
275.16 121.68 li
347.762 96.48 li
420.359 96.48 li
493.078 95.398 li
565.68 96 li
638.281 94.441 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
62.379 45.898 mo
52.301 35.82 li
52.301 45.898 mo
62.379 35.82 li
.62829 .284672 0 0 cmyk
@
134.98 136.621 mo
124.898 126.539 li
124.898 136.621 mo
134.98 126.539 li
@
207.578 110.699 mo
197.5 100.621 li
197.5 110.699 mo
207.578 100.621 li
@
280.18 126.66 mo
270.102 116.578 li
270.102 126.66 mo
280.18 116.578 li
@
352.781 101.461 mo
342.699 91.379 li
342.699 101.461 mo
352.781 91.379 li
@
425.379 101.461 mo
415.301 91.379 li
415.301 101.461 mo
425.379 91.379 li
@
497.98 100.379 mo
487.898 90.301 li
487.898 100.379 mo
497.98 90.301 li
@
570.578 100.98 mo
560.5 90.898 li
560.5 100.98 mo
570.578 90.898 li
@
643.18 99.539 mo
633.102 89.461 li
633.102 99.539 mo
643.18 89.461 li
@
gsave
57.359 33.48 mo
638.879 33.48 li
638.879 496.441 li
57.359 496.441 li
cp
clp
.96 lw
1 lc
57.359 187.32 mo
129.961 292.441 li
202.559 250.32 li
275.16 237 li
347.762 236.398 li
420.359 236.16 li
493.078 236.398 li
565.68 236.398 li
638.281 235.559 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
62.379 192.301 mo
52.301 182.219 li
52.301 192.301 mo
62.379 182.219 li
.0321965 .622736 .922606 .000579843 cmyk
@
134.98 297.422 mo
124.898 287.34 li
124.898 297.422 mo
134.98 287.34 li
@
207.578 255.301 mo
197.5 245.219 li
197.5 255.301 mo
207.578 245.219 li
@
280.18 241.98 mo
270.102 231.898 li
270.102 241.98 mo
280.18 231.898 li
@
352.781 241.5 mo
342.699 231.422 li
342.699 241.5 mo
352.781 231.422 li
@
425.379 241.141 mo
415.301 231.059 li
415.301 241.141 mo
425.379 231.059 li
@
497.98 241.5 mo
487.898 231.422 li
487.898 241.5 mo
497.98 231.422 li
@
570.578 241.5 mo
560.5 231.422 li
560.5 241.5 mo
570.578 231.422 li
@
643.18 240.66 mo
633.102 230.578 li
633.102 240.66 mo
643.18 230.578 li
@
gsave
57.359 33.48 mo
638.879 33.48 li
638.879 496.441 li
57.359 496.441 li
cp
clp
.96 lw
1 lc
57.359 230.16 mo
129.961 287.281 li
202.559 259.801 li
275.16 260.16 li
347.762 246.84 li
420.359 246.121 li
493.078 247.441 li
565.68 246.121 li
638.281 246.121 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
62.379 235.141 mo
52.301 225.059 li
52.301 235.141 mo
62.379 225.059 li
.621118 .109194 .980743 .0040589 cmyk
@
134.98 292.379 mo
124.898 282.301 li
124.898 292.379 mo
134.98 282.301 li
@
207.578 264.781 mo
197.5 254.699 li
197.5 264.781 mo
207.578 254.699 li
@
280.18 265.141 mo
270.102 255.059 li
270.102 265.141 mo
280.18 255.059 li
@
352.781 251.82 mo
342.699 241.738 li
342.699 251.82 mo
352.781 241.738 li
@
425.379 251.219 mo
415.301 241.141 li
415.301 251.219 mo
425.379 241.141 li
@
497.98 252.539 mo
487.898 242.461 li
487.898 252.539 mo
497.98 242.461 li
@
570.578 251.219 mo
560.5 241.141 li
560.5 251.219 mo
570.578 241.141 li
@
643.18 251.219 mo
633.102 241.141 li
633.102 251.219 mo
643.18 241.141 li
@
gsave
57.359 33.48 mo
638.879 33.48 li
638.879 496.441 li
57.359 496.441 li
cp
clp
.96 lw
1 lc
57.359 255.359 mo
129.961 289.922 li
202.559 311.398 li
275.16 271.199 li
347.762 274.801 li
420.359 268.078 li
493.078 266.879 li
565.68 264.48 li
638.281 260.52 li
0 .993988 1 0 cmyk
@
grestore
62.379 260.461 mo
52.301 250.379 li
52.301 260.461 mo
62.379 250.379 li
0 .993988 1 0 cmyk
@
134.98 295.02 mo
124.898 284.941 li
124.898 295.02 mo
134.98 284.941 li
@
207.578 316.5 mo
197.5 306.422 li
197.5 316.5 mo
207.578 306.422 li
@
280.18 276.301 mo
270.102 266.219 li
270.102 276.301 mo
280.18 266.219 li
@
352.781 279.781 mo
342.699 269.699 li
342.699 279.781 mo
352.781 269.699 li
@
425.379 273.18 mo
415.301 263.102 li
415.301 273.18 mo
425.379 263.102 li
@
497.98 271.98 mo
487.898 261.898 li
487.898 271.98 mo
497.98 261.898 li
@
570.578 269.578 mo
560.5 259.5 li
560.5 269.578 mo
570.578 259.5 li
@
643.18 265.5 mo
633.102 255.422 li
633.102 265.5 mo
643.18 255.422 li
@
gsave
57.359 33.48 mo
638.879 33.48 li
638.879 496.441 li
57.359 496.441 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.359 267.719 mo
129.961 291.48 li
202.559 281.879 li
275.16 268.922 li
347.762 268.078 li
420.359 264.121 li
493.078 267.719 li
565.68 266.879 li
638.281 265.68 li
.62829 .284672 0 0 cmyk
@
grestore
61.898 272.219 mo
52.781 263.102 li
52.781 272.219 mo
61.898 263.102 li
.62829 .284672 0 0 cmyk
@
134.5 296.102 mo
125.379 286.98 li
125.379 296.102 mo
134.5 286.98 li
@
207.102 286.5 mo
197.98 277.379 li
197.98 286.5 mo
207.102 277.379 li
@
279.699 273.422 mo
270.578 264.301 li
270.578 273.422 mo
279.699 264.301 li
@
352.301 272.699 mo
343.18 263.578 li
343.18 272.699 mo
352.301 263.578 li
@
424.898 268.621 mo
415.781 259.5 li
415.781 268.621 mo
424.898 259.5 li
@
497.5 272.219 mo
488.379 263.102 li
488.379 272.219 mo
497.5 263.102 li
@
570.102 271.5 mo
560.98 262.379 li
560.98 271.5 mo
570.102 262.379 li
@
642.699 270.301 mo
633.578 261.18 li
633.578 270.301 mo
642.699 261.18 li
@
gsave
57.359 33.48 mo
638.879 33.48 li
638.879 496.441 li
57.359 496.441 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.359 261.602 mo
129.961 287.762 li
202.559 310.078 li
275.16 274.922 li
347.762 268.078 li
420.359 268.078 li
493.078 264.121 li
565.68 266.039 li
638.281 264.48 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
62.379 266.699 mo
52.301 256.621 li
52.301 266.699 mo
62.379 256.621 li
.0321965 .622736 .922606 .000579843 cmyk
@
134.98 292.859 mo
124.898 282.781 li
124.898 292.859 mo
134.98 282.781 li
@
207.578 315.059 mo
197.5 304.98 li
197.5 315.059 mo
207.578 304.98 li
@
280.18 279.898 mo
270.102 269.82 li
270.102 279.898 mo
280.18 269.82 li
@
352.781 273.18 mo
342.699 263.102 li
342.699 273.18 mo
352.781 263.102 li
@
425.379 273.18 mo
415.301 263.102 li
415.301 273.18 mo
425.379 263.102 li
@
497.98 269.102 mo
487.898 259.02 li
487.898 269.102 mo
497.98 259.02 li
@
570.578 271.141 mo
560.5 261.059 li
560.5 271.141 mo
570.578 261.059 li
@
643.18 269.578 mo
633.102 259.5 li
633.102 269.578 mo
643.18 259.5 li
@
gsave
57.359 33.48 mo
638.879 33.48 li
638.879 496.441 li
57.359 496.441 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.359 261.602 mo
129.961 312.84 li
202.559 308.879 li
275.16 268.078 li
347.762 267.719 li
420.359 265.801 li
493.078 266.879 li
565.68 271.32 li
638.281 269.281 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
62.379 266.699 mo
52.301 256.621 li
52.301 266.699 mo
62.379 256.621 li
.621118 .109194 .980743 .0040589 cmyk
@
134.98 317.941 mo
124.898 307.859 li
124.898 317.941 mo
134.98 307.859 li
@
207.578 313.859 mo
197.5 303.781 li
197.5 313.859 mo
207.578 303.781 li
@
280.18 273.18 mo
270.102 263.102 li
270.102 273.18 mo
280.18 263.102 li
@
352.781 272.699 mo
342.699 262.621 li
342.699 272.699 mo
352.781 262.621 li
@
425.379 270.781 mo
415.301 260.699 li
415.301 270.781 mo
425.379 260.699 li
@
497.98 271.98 mo
487.898 261.898 li
487.898 271.98 mo
497.98 261.898 li
@
570.578 276.301 mo
560.5 266.219 li
560.5 276.301 mo
570.578 266.219 li
@
643.18 274.379 mo
633.102 264.301 li
633.102 274.379 mo
643.18 264.301 li
@
gsave
57.359 33.48 mo
638.879 33.48 li
638.879 496.441 li
57.359 496.441 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.359 263.762 mo
129.961 284.16 li
202.559 310.801 li
275.16 304.801 li
347.762 276.719 li
420.359 266.039 li
493.078 296.879 li
565.68 266.879 li
638.281 264.84 li
0 .993988 1 0 cmyk
@
grestore
62.379 268.859 mo
52.301 258.781 li
52.301 268.859 mo
62.379 258.781 li
0 .993988 1 0 cmyk
@
134.98 289.141 mo
124.898 279.059 li
124.898 289.141 mo
134.98 279.059 li
@
207.578 315.898 mo
197.5 305.82 li
197.5 315.898 mo
207.578 305.82 li
@
280.18 309.898 mo
270.102 299.82 li
270.102 309.898 mo
280.18 299.82 li
@
352.781 281.82 mo
342.699 271.738 li
342.699 281.82 mo
352.781 271.738 li
@
425.379 271.141 mo
415.301 261.059 li
415.301 271.141 mo
425.379 261.059 li
@
497.98 301.859 mo
487.898 291.781 li
487.898 301.859 mo
497.98 291.781 li
@
570.578 271.98 mo
560.5 261.898 li
560.5 271.98 mo
570.578 261.898 li
@
643.18 269.941 mo
633.102 259.859 li
633.102 269.941 mo
643.18 259.859 li
@
37.301 486.441 mo
44.395 486.441 li
44.395 503.531 li
37.301 503.531 li
cp
0 0 0 0 cmyk
ef
43.949 495.391 mo
43.945 496.074 43.895 496.695 43.789 497.258 cv
43.68 497.82 43.5 498.305 43.254 498.707 cv
43 499.113 42.672 499.426 42.273 499.645 cv
41.867 499.867 41.375 499.977 40.789 499.977 cv
40.23 499.977 39.758 499.879 39.379 499.68 cv
38.996 499.484 38.691 499.191 38.457 498.805 cv
38.223 498.418 38.055 497.945 37.961 497.379 cv
37.859 496.816 37.813 496.168 37.813 495.434 cv
37.813 494.762 37.867 494.141 37.977 493.574 cv
38.086 493.012 38.262 492.527 38.512 492.121 cv
38.754 491.719 39.078 491.406 39.484 491.18 cv
39.883 490.961 40.379 490.848 40.969 490.848 cv
41.527 490.848 42 490.949 42.383 491.145 cv
42.766 491.348 43.07 491.641 43.305 492.023 cv
43.535 492.414 43.703 492.887 43.801 493.449 cv
43.898 494.012 43.945 494.66 43.949 495.391 cv
cp
42.742 495.473 mo
42.738 495.031 42.723 494.633 42.695 494.281 cv
42.66 493.93 42.613 493.621 42.555 493.352 cv
42.488 493.082 42.41 492.852 42.313 492.656 cv
42.215 492.465 42.098 492.305 41.961 492.176 cv
41.82 492.051 41.66 491.957 41.488 491.898 cv
41.309 491.844 41.113 491.816 40.898 491.812 cv
40.508 491.816 40.191 491.906 39.953 492.09 cv
39.707 492.273 39.516 492.527 39.379 492.844 cv
39.238 493.164 39.145 493.535 39.094 493.965 cv
39.043 494.395 39.02 494.859 39.02 495.352 cv
39.02 496.016 39.051 496.578 39.121 497.039 cv
39.188 497.508 39.297 497.887 39.449 498.176 cv
39.594 498.473 39.785 498.684 40.016 498.812 cv
40.246 498.949 40.527 499.016 40.859 499.012 cv
41.113 499.016 41.336 498.977 41.531 498.891 cv
41.723 498.812 41.891 498.691 42.031 498.535 cv
42.172 498.383 42.285 498.199 42.379 497.984 cv
42.465 497.77 42.539 497.531 42.598 497.27 cv
42.648 497.012 42.688 496.73 42.711 496.426 cv
42.73 496.121 42.738 495.805 42.742 495.473 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
37.301 440.219 mo
44.395 440.219 li
44.395 457.309 li
37.301 457.309 li
cp
0 0 0 0 cmyk
ef
43.613 450.77 mo
43.613 451.246 43.531 451.668 43.371 452.039 cv
43.211 452.41 42.984 452.723 42.695 452.977 cv
42.398 453.23 42.051 453.426 41.648 453.555 cv
41.242 453.687 40.793 453.75 40.301 453.75 cv
40.023 453.75 39.762 453.73 39.52 453.691 cv
39.27 453.652 39.051 453.605 38.863 453.551 cv
38.668 453.496 38.512 453.441 38.387 453.383 cv
38.262 453.332 38.184 453.289 38.152 453.254 cv
38.117 453.223 38.094 453.191 38.082 453.164 cv
38.066 453.137 38.051 453.105 38.043 453.062 cv
38.027 453.027 38.02 452.977 38.02 452.914 cv
38.012 452.855 38.012 452.785 38.012 452.703 cv
38.012 452.629 38.016 452.559 38.023 452.496 cv
38.031 452.434 38.043 452.383 38.063 452.344 cv
38.078 452.305 38.098 452.277 38.125 452.258 cv
38.148 452.242 38.18 452.234 38.211 452.23 cv
38.258 452.234 38.328 452.262 38.422 452.316 cv
38.516 452.375 38.645 452.437 38.809 452.504 cv
38.973 452.57 39.172 452.633 39.414 452.691 cv
39.648 452.75 39.934 452.777 40.27 452.777 cv
40.57 452.777 40.852 452.742 41.109 452.668 cv
41.363 452.598 41.586 452.484 41.773 452.328 cv
41.957 452.176 42.102 451.98 42.207 451.742 cv
42.313 451.508 42.363 451.219 42.367 450.879 cv
42.363 450.598 42.32 450.348 42.23 450.129 cv
42.141 449.91 42.004 449.73 41.82 449.586 cv
41.633 449.445 41.398 449.34 41.117 449.266 cv
40.832 449.195 40.492 449.156 40.105 449.156 cv
39.82 449.156 39.582 449.172 39.383 449.199 cv
39.18 449.23 38.992 449.246 38.82 449.242 cv
38.691 449.246 38.598 449.215 38.547 449.152 cv
38.488 449.094 38.461 448.98 38.465 448.809 cv
38.465 445.195 li
38.461 445.047 38.496 444.937 38.57 444.859 cv
38.637 444.789 38.738 444.75 38.875 444.75 cv
42.805 444.75 li
42.84 444.75 42.875 444.762 42.91 444.781 cv
42.941 444.805 42.969 444.836 42.996 444.875 cv
43.016 444.918 43.031 444.969 43.047 445.031 cv
43.055 445.098 43.063 445.176 43.066 445.258 cv
43.063 445.426 43.039 445.551 43 445.641 cv
42.953 445.734 42.895 445.781 42.816 445.777 cv
39.645 445.777 li
39.645 448.266 li
39.797 448.246 39.953 448.234 40.117 448.227 cv
40.273 448.223 40.461 448.219 40.676 448.219 cv
41.16 448.219 41.586 448.281 41.953 448.402 cv
42.316 448.523 42.621 448.695 42.871 448.914 cv
43.113 449.141 43.301 449.406 43.426 449.719 cv
43.551 450.035 43.613 450.387 43.613 450.77 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
30.211 394.012 mo
44.399 394.012 li
44.399 411.102 li
30.211 411.102 li
cp
0 0 0 0 cmyk
ef
36.574 406.934 mo
36.57 407.023 36.563 407.094 36.551 407.152 cv
36.535 407.215 36.516 407.266 36.496 407.297 cv
36.473 407.336 36.449 407.359 36.418 407.375 cv
36.387 407.391 36.355 407.398 36.328 407.398 cv
31.691 407.398 li
31.656 407.398 31.629 407.391 31.602 407.375 cv
31.574 407.359 31.547 407.336 31.523 407.297 cv
31.496 407.266 31.477 407.215 31.465 407.152 cv
31.449 407.094 31.441 407.023 31.445 406.934 cv
31.441 406.855 31.449 406.781 31.465 406.719 cv
31.477 406.66 31.492 406.613 31.516 406.574 cv
31.531 406.539 31.559 406.508 31.59 406.484 cv
31.621 406.465 31.652 406.457 31.691 406.453 cv
33.543 406.453 li
33.543 399.707 li
31.828 400.727 li
31.738 400.777 31.668 400.805 31.621 400.812 cv
31.566 400.82 31.523 400.812 31.492 400.781 cv
31.457 400.754 31.438 400.703 31.426 400.633 cv
31.414 400.566 31.406 400.48 31.41 400.371 cv
31.406 400.297 31.41 400.23 31.422 400.172 cv
31.426 400.121 31.438 400.074 31.453 400.035 cv
31.465 400 31.484 399.969 31.508 399.941 cv
31.531 399.914 31.563 399.887 31.609 399.859 cv
33.652 398.547 li
33.668 398.535 33.688 398.523 33.719 398.516 cv
33.742 398.508 33.777 398.5 33.824 398.488 cv
33.863 398.48 33.914 398.473 33.969 398.469 cv
34.023 398.469 34.09 398.469 34.176 398.465 cv
34.281 398.469 34.375 398.473 34.449 398.48 cv
34.52 398.488 34.574 398.504 34.621 398.52 cv
34.66 398.539 34.688 398.559 34.703 398.582 cv
34.711 398.609 34.719 398.633 34.723 398.656 cv
34.723 406.453 li
36.328 406.453 li
36.363 406.457 36.398 406.465 36.43 406.484 cv
36.461 406.508 36.484 406.539 36.508 406.574 cv
36.523 406.613 36.539 406.66 36.555 406.719 cv
36.563 406.781 36.57 406.855 36.574 406.934 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.93 402.941 mo
43.926 403.625 43.875 404.246 43.77 404.809 cv
43.66 405.371 43.48 405.855 43.234 406.258 cv
42.98 406.664 42.652 406.977 42.254 407.195 cv
41.848 407.418 41.355 407.527 40.77 407.527 cv
40.211 407.527 39.738 407.43 39.359 407.23 cv
38.977 407.035 38.672 406.742 38.438 406.355 cv
38.203 405.969 38.035 405.496 37.941 404.93 cv
37.84 404.367 37.793 403.719 37.793 402.984 cv
37.793 402.312 37.848 401.691 37.957 401.125 cv
38.066 400.562 38.242 400.078 38.492 399.672 cv
38.734 399.27 39.059 398.957 39.465 398.73 cv
39.863 398.512 40.359 398.398 40.949 398.398 cv
41.508 398.398 41.98 398.5 42.363 398.695 cv
42.746 398.898 43.051 399.191 43.285 399.574 cv
43.516 399.965 43.684 400.437 43.781 401 cv
43.879 401.562 43.926 402.211 43.93 402.941 cv
cp
42.723 403.023 mo
42.719 402.582 42.703 402.184 42.676 401.832 cv
42.641 401.48 42.594 401.172 42.535 400.902 cv
42.469 400.633 42.391 400.402 42.293 400.207 cv
42.195 400.016 42.078 399.855 41.941 399.727 cv
41.801 399.602 41.641 399.508 41.469 399.449 cv
41.289 399.395 41.094 399.367 40.879 399.363 cv
40.488 399.367 40.172 399.457 39.934 399.641 cv
39.688 399.824 39.496 400.078 39.359 400.395 cv
39.219 400.715 39.125 401.086 39.074 401.516 cv
39.023 401.945 39 402.41 39 402.902 cv
39 403.566 39.031 404.129 39.102 404.59 cv
39.168 405.059 39.277 405.437 39.43 405.727 cv
39.574 406.023 39.766 406.234 39.996 406.363 cv
40.227 406.5 40.508 406.566 40.84 406.562 cv
41.094 406.566 41.316 406.527 41.512 406.441 cv
41.703 406.363 41.871 406.242 42.012 406.086 cv
42.152 405.934 42.266 405.75 42.359 405.535 cv
42.445 405.32 42.52 405.082 42.578 404.82 cv
42.629 404.562 42.668 404.281 42.691 403.977 cv
42.711 403.672 42.719 403.355 42.723 403.023 cv
cp
f
30.211 347.789 mo
44.399 347.789 li
44.399 364.879 li
30.211 364.879 li
cp
0 0 0 0 cmyk
ef
36.574 360.715 mo
36.57 360.805 36.563 360.875 36.551 360.934 cv
36.535 360.996 36.516 361.047 36.496 361.078 cv
36.473 361.117 36.449 361.141 36.418 361.156 cv
36.387 361.172 36.355 361.18 36.328 361.18 cv
31.691 361.18 li
31.656 361.18 31.629 361.172 31.602 361.156 cv
31.574 361.141 31.547 361.117 31.523 361.078 cv
31.496 361.047 31.477 360.996 31.465 360.934 cv
31.449 360.875 31.441 360.805 31.445 360.715 cv
31.441 360.637 31.449 360.562 31.465 360.5 cv
31.477 360.441 31.492 360.395 31.516 360.355 cv
31.531 360.32 31.559 360.289 31.59 360.266 cv
31.621 360.246 31.652 360.238 31.691 360.234 cv
33.543 360.234 li
33.543 353.488 li
31.828 354.508 li
31.738 354.559 31.668 354.586 31.621 354.594 cv
31.566 354.602 31.523 354.594 31.492 354.562 cv
31.457 354.535 31.438 354.484 31.426 354.414 cv
31.414 354.348 31.406 354.262 31.41 354.152 cv
31.406 354.078 31.41 354.012 31.422 353.953 cv
31.426 353.902 31.438 353.855 31.453 353.816 cv
31.465 353.781 31.484 353.75 31.508 353.723 cv
31.531 353.695 31.563 353.668 31.609 353.641 cv
33.652 352.328 li
33.668 352.316 33.688 352.305 33.719 352.297 cv
33.742 352.289 33.777 352.281 33.824 352.27 cv
33.863 352.262 33.914 352.254 33.969 352.25 cv
34.023 352.25 34.09 352.25 34.176 352.246 cv
34.281 352.25 34.375 352.254 34.449 352.262 cv
34.52 352.27 34.574 352.285 34.621 352.301 cv
34.66 352.32 34.688 352.34 34.703 352.363 cv
34.711 352.391 34.719 352.414 34.723 352.437 cv
34.723 360.234 li
36.328 360.234 li
36.363 360.238 36.398 360.246 36.43 360.266 cv
36.461 360.289 36.484 360.32 36.508 360.355 cv
36.523 360.395 36.539 360.441 36.555 360.5 cv
36.563 360.562 36.57 360.637 36.574 360.715 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.594 358.328 mo
43.594 358.805 43.512 359.227 43.352 359.598 cv
43.191 359.969 42.965 360.281 42.676 360.535 cv
42.379 360.789 42.031 360.984 41.629 361.113 cv
41.223 361.246 40.773 361.309 40.281 361.309 cv
40.004 361.309 39.742 361.289 39.5 361.25 cv
39.25 361.211 39.031 361.164 38.844 361.109 cv
38.648 361.055 38.492 361 38.367 360.941 cv
38.242 360.891 38.164 360.848 38.133 360.812 cv
38.098 360.781 38.074 360.75 38.063 360.723 cv
38.047 360.695 38.031 360.664 38.023 360.621 cv
38.008 360.586 38 360.535 38 360.473 cv
37.992 360.414 37.992 360.344 37.992 360.262 cv
37.992 360.187 37.996 360.117 38.004 360.055 cv
38.012 359.992 38.023 359.941 38.043 359.902 cv
38.059 359.863 38.078 359.836 38.105 359.816 cv
38.129 359.801 38.16 359.793 38.191 359.789 cv
38.238 359.793 38.309 359.82 38.402 359.875 cv
38.496 359.934 38.625 359.996 38.789 360.062 cv
38.953 360.129 39.152 360.191 39.395 360.25 cv
39.629 360.309 39.914 360.336 40.25 360.336 cv
40.551 360.336 40.832 360.301 41.09 360.227 cv
41.344 360.156 41.566 360.043 41.754 359.887 cv
41.938 359.734 42.082 359.539 42.188 359.301 cv
42.293 359.066 42.344 358.777 42.348 358.437 cv
42.344 358.156 42.301 357.906 42.211 357.687 cv
42.121 357.469 41.984 357.289 41.801 357.145 cv
41.613 357.004 41.379 356.898 41.098 356.824 cv
40.813 356.754 40.473 356.715 40.086 356.715 cv
39.801 356.715 39.563 356.73 39.363 356.758 cv
39.16 356.789 38.973 356.805 38.801 356.801 cv
38.672 356.805 38.578 356.773 38.527 356.711 cv
38.469 356.652 38.441 356.539 38.445 356.367 cv
38.445 352.754 li
38.441 352.605 38.477 352.496 38.551 352.418 cv
38.617 352.348 38.719 352.309 38.855 352.309 cv
42.785 352.309 li
42.82 352.309 42.855 352.32 42.891 352.34 cv
42.922 352.363 42.949 352.395 42.977 352.434 cv
42.996 352.477 43.012 352.527 43.027 352.59 cv
43.035 352.656 43.043 352.734 43.047 352.816 cv
43.043 352.984 43.02 353.109 42.98 353.199 cv
42.934 353.293 42.875 353.34 42.797 353.336 cv
39.625 353.336 li
39.625 355.824 li
39.777 355.805 39.934 355.793 40.098 355.785 cv
40.254 355.781 40.441 355.777 40.656 355.777 cv
41.141 355.777 41.566 355.84 41.934 355.961 cv
42.297 356.082 42.602 356.254 42.852 356.473 cv
43.094 356.699 43.281 356.965 43.406 357.277 cv
43.531 357.594 43.594 357.945 43.594 358.328 cv
cp
f
30.211 301.578 mo
44.399 301.578 li
44.399 318.672 li
30.211 318.672 li
cp
0 0 0 0 cmyk
ef
36.555 314.441 mo
36.551 314.527 36.547 314.602 36.535 314.664 cv
36.523 314.73 36.508 314.785 36.488 314.824 cv
36.465 314.871 36.438 314.902 36.406 314.918 cv
36.371 314.941 36.332 314.949 36.293 314.949 cv
31.391 314.949 li
31.328 314.949 31.27 314.941 31.223 314.926 cv
31.172 314.91 31.133 314.887 31.098 314.848 cv
31.063 314.816 31.035 314.762 31.023 314.691 cv
31.004 314.621 30.996 314.535 31 314.434 cv
30.996 314.344 31 314.266 31.008 314.195 cv
31.012 314.129 31.027 314.07 31.055 314.016 cv
31.078 313.965 31.109 313.91 31.145 313.855 cv
31.18 313.805 31.223 313.75 31.281 313.687 cv
33.055 311.863 li
33.465 311.445 33.793 311.07 34.043 310.734 cv
34.289 310.406 34.48 310.102 34.613 309.824 cv
34.746 309.551 34.832 309.301 34.879 309.074 cv
34.918 308.852 34.941 308.641 34.941 308.445 cv
34.941 308.25 34.906 308.066 34.84 307.887 cv
34.773 307.715 34.68 307.559 34.555 307.422 cv
34.43 307.293 34.273 307.187 34.086 307.105 cv
33.898 307.031 33.68 306.992 33.434 306.988 cv
33.145 306.992 32.887 307.031 32.66 307.105 cv
32.43 307.187 32.23 307.273 32.059 307.359 cv
31.887 307.453 31.742 307.535 31.625 307.613 cv
31.508 307.691 31.422 307.73 31.371 307.73 cv
31.336 307.73 31.305 307.723 31.281 307.703 cv
31.25 307.687 31.23 307.656 31.215 307.613 cv
31.199 307.574 31.184 307.52 31.176 307.449 cv
31.164 307.383 31.16 307.301 31.164 307.203 cv
31.16 307.137 31.164 307.078 31.172 307.027 cv
31.176 306.977 31.184 306.934 31.195 306.895 cv
31.203 306.859 31.219 306.824 31.238 306.793 cv
31.258 306.762 31.293 306.723 31.352 306.672 cv
31.402 306.625 31.496 306.559 31.633 306.477 cv
31.766 306.395 31.938 306.316 32.141 306.234 cv
32.344 306.156 32.566 306.086 32.813 306.031 cv
33.055 305.977 33.313 305.949 33.586 305.949 cv
34.012 305.949 34.387 306.012 34.711 306.133 cv
35.031 306.254 35.297 306.418 35.512 306.629 cv
35.723 306.84 35.883 307.086 35.988 307.359 cv
36.094 307.641 36.148 307.937 36.148 308.25 cv
36.148 308.539 36.121 308.82 36.07 309.098 cv
36.02 309.383 35.914 309.687 35.754 310.012 cv
35.59 310.34 35.355 310.703 35.051 311.102 cv
34.742 311.504 34.336 311.965 33.832 312.48 cv
32.426 313.949 li
36.285 313.949 li
36.316 313.953 36.352 313.965 36.391 313.98 cv
36.422 314.004 36.453 314.035 36.48 314.074 cv
36.504 314.117 36.523 314.168 36.535 314.227 cv
36.547 314.293 36.551 314.363 36.555 314.441 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.93 310.492 mo
43.926 311.176 43.875 311.797 43.77 312.359 cv
43.66 312.922 43.48 313.406 43.234 313.809 cv
42.98 314.215 42.652 314.527 42.254 314.746 cv
41.848 314.969 41.355 315.078 40.77 315.078 cv
40.211 315.078 39.738 314.98 39.359 314.781 cv
38.977 314.586 38.672 314.293 38.438 313.906 cv
38.203 313.52 38.035 313.047 37.941 312.48 cv
37.84 311.918 37.793 311.27 37.793 310.535 cv
37.793 309.863 37.848 309.242 37.957 308.676 cv
38.066 308.113 38.242 307.629 38.492 307.223 cv
38.734 306.82 39.059 306.508 39.465 306.281 cv
39.863 306.062 40.359 305.949 40.949 305.949 cv
41.508 305.949 41.98 306.051 42.363 306.246 cv
42.746 306.449 43.051 306.742 43.285 307.125 cv
43.516 307.516 43.684 307.988 43.781 308.551 cv
43.879 309.113 43.926 309.762 43.93 310.492 cv
cp
42.723 310.574 mo
42.719 310.133 42.703 309.734 42.676 309.383 cv
42.641 309.031 42.594 308.723 42.535 308.453 cv
42.469 308.184 42.391 307.953 42.293 307.758 cv
42.195 307.566 42.078 307.406 41.941 307.277 cv
41.801 307.152 41.641 307.059 41.469 307 cv
41.289 306.945 41.094 306.918 40.879 306.914 cv
40.488 306.918 40.172 307.008 39.934 307.191 cv
39.688 307.375 39.496 307.629 39.359 307.945 cv
39.219 308.266 39.125 308.637 39.074 309.066 cv
39.023 309.496 39 309.961 39 310.453 cv
39 311.117 39.031 311.68 39.102 312.141 cv
39.168 312.609 39.277 312.988 39.43 313.277 cv
39.574 313.574 39.766 313.785 39.996 313.914 cv
40.227 314.051 40.508 314.117 40.84 314.113 cv
41.094 314.117 41.316 314.078 41.512 313.992 cv
41.703 313.914 41.871 313.793 42.012 313.637 cv
42.152 313.484 42.266 313.301 42.359 313.086 cv
42.445 312.871 42.52 312.633 42.578 312.371 cv
42.629 312.113 42.668 311.832 42.691 311.527 cv
42.711 311.223 42.719 310.906 42.723 310.574 cv
cp
f
30.211 255.359 mo
44.399 255.359 li
44.399 272.449 li
30.211 272.449 li
cp
0 0 0 0 cmyk
ef
36.555 268.223 mo
36.551 268.309 36.547 268.383 36.535 268.445 cv
36.523 268.512 36.508 268.566 36.488 268.605 cv
36.465 268.652 36.438 268.684 36.406 268.699 cv
36.371 268.723 36.332 268.73 36.293 268.73 cv
31.391 268.73 li
31.328 268.73 31.27 268.723 31.223 268.707 cv
31.172 268.691 31.133 268.668 31.098 268.629 cv
31.063 268.598 31.035 268.543 31.023 268.473 cv
31.004 268.402 30.996 268.316 31 268.215 cv
30.996 268.125 31 268.047 31.008 267.977 cv
31.012 267.91 31.027 267.852 31.055 267.797 cv
31.078 267.746 31.109 267.691 31.145 267.637 cv
31.18 267.586 31.223 267.531 31.281 267.469 cv
33.055 265.645 li
33.465 265.227 33.793 264.852 34.043 264.516 cv
34.289 264.187 34.48 263.883 34.613 263.605 cv
34.746 263.332 34.832 263.082 34.879 262.855 cv
34.918 262.633 34.941 262.422 34.941 262.227 cv
34.941 262.031 34.906 261.848 34.84 261.668 cv
34.773 261.496 34.68 261.34 34.555 261.203 cv
34.43 261.074 34.273 260.969 34.086 260.887 cv
33.898 260.812 33.68 260.773 33.434 260.77 cv
33.145 260.773 32.887 260.812 32.66 260.887 cv
32.43 260.969 32.23 261.055 32.059 261.141 cv
31.887 261.234 31.742 261.316 31.625 261.395 cv
31.508 261.473 31.422 261.512 31.371 261.512 cv
31.336 261.512 31.305 261.504 31.281 261.484 cv
31.25 261.469 31.23 261.437 31.215 261.395 cv
31.199 261.355 31.184 261.301 31.176 261.23 cv
31.164 261.164 31.16 261.082 31.164 260.984 cv
31.16 260.918 31.164 260.859 31.172 260.809 cv
31.176 260.758 31.184 260.715 31.195 260.676 cv
31.203 260.641 31.219 260.605 31.238 260.574 cv
31.258 260.543 31.293 260.504 31.352 260.453 cv
31.402 260.406 31.496 260.34 31.633 260.258 cv
31.766 260.176 31.938 260.098 32.141 260.016 cv
32.344 259.937 32.566 259.867 32.813 259.812 cv
33.055 259.758 33.313 259.73 33.586 259.73 cv
34.012 259.73 34.387 259.793 34.711 259.914 cv
35.031 260.035 35.297 260.199 35.512 260.41 cv
35.723 260.621 35.883 260.867 35.988 261.141 cv
36.094 261.422 36.148 261.719 36.148 262.031 cv
36.148 262.32 36.121 262.602 36.07 262.879 cv
36.02 263.164 35.914 263.469 35.754 263.793 cv
35.59 264.121 35.355 264.484 35.051 264.883 cv
34.742 265.285 34.336 265.746 33.832 266.262 cv
32.426 267.73 li
36.285 267.73 li
36.316 267.734 36.352 267.746 36.391 267.762 cv
36.422 267.785 36.453 267.816 36.48 267.855 cv
36.504 267.898 36.523 267.949 36.535 268.008 cv
36.547 268.074 36.551 268.145 36.555 268.223 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.594 265.879 mo
43.594 266.355 43.512 266.777 43.352 267.148 cv
43.191 267.52 42.965 267.832 42.676 268.086 cv
42.379 268.34 42.031 268.535 41.629 268.664 cv
41.223 268.797 40.773 268.859 40.281 268.859 cv
40.004 268.859 39.742 268.84 39.5 268.801 cv
39.25 268.762 39.031 268.715 38.844 268.66 cv
38.648 268.605 38.492 268.551 38.367 268.492 cv
38.242 268.441 38.164 268.398 38.133 268.363 cv
38.098 268.332 38.074 268.301 38.063 268.273 cv
38.047 268.246 38.031 268.215 38.023 268.172 cv
38.008 268.137 38 268.086 38 268.023 cv
37.992 267.965 37.992 267.895 37.992 267.812 cv
37.992 267.738 37.996 267.668 38.004 267.605 cv
38.012 267.543 38.023 267.492 38.043 267.453 cv
38.059 267.414 38.078 267.387 38.105 267.367 cv
38.129 267.352 38.16 267.344 38.191 267.34 cv
38.238 267.344 38.309 267.371 38.402 267.426 cv
38.496 267.484 38.625 267.547 38.789 267.613 cv
38.953 267.68 39.152 267.742 39.395 267.801 cv
39.629 267.859 39.914 267.887 40.25 267.887 cv
40.551 267.887 40.832 267.852 41.09 267.777 cv
41.344 267.707 41.566 267.594 41.754 267.437 cv
41.938 267.285 42.082 267.09 42.188 266.852 cv
42.293 266.617 42.344 266.328 42.348 265.988 cv
42.344 265.707 42.301 265.457 42.211 265.238 cv
42.121 265.02 41.984 264.84 41.801 264.695 cv
41.613 264.555 41.379 264.449 41.098 264.375 cv
40.813 264.305 40.473 264.266 40.086 264.266 cv
39.801 264.266 39.563 264.281 39.363 264.309 cv
39.16 264.34 38.973 264.355 38.801 264.352 cv
38.672 264.355 38.578 264.324 38.527 264.262 cv
38.469 264.203 38.441 264.09 38.445 263.918 cv
38.445 260.305 li
38.441 260.156 38.477 260.047 38.551 259.969 cv
38.617 259.898 38.719 259.859 38.855 259.859 cv
42.785 259.859 li
42.82 259.859 42.855 259.871 42.891 259.891 cv
42.922 259.914 42.949 259.945 42.977 259.984 cv
42.996 260.027 43.012 260.078 43.027 260.141 cv
43.035 260.207 43.043 260.285 43.047 260.367 cv
43.043 260.535 43.02 260.66 42.98 260.75 cv
42.934 260.844 42.875 260.891 42.797 260.887 cv
39.625 260.887 li
39.625 263.375 li
39.777 263.355 39.934 263.344 40.098 263.336 cv
40.254 263.332 40.441 263.328 40.656 263.328 cv
41.141 263.328 41.566 263.391 41.934 263.512 cv
42.297 263.633 42.602 263.805 42.852 264.023 cv
43.094 264.25 43.281 264.516 43.406 264.828 cv
43.531 265.145 43.594 265.496 43.594 265.879 cv
cp
f
30.211 209.148 mo
44.399 209.148 li
44.399 226.238 li
30.211 226.238 li
cp
0 0 0 0 cmyk
ef
36.484 219.965 mo
36.48 220.375 36.41 220.742 36.27 221.066 cv
36.125 221.395 35.922 221.676 35.66 221.906 cv
35.395 222.141 35.066 222.316 34.68 222.441 cv
34.289 222.566 33.852 222.629 33.367 222.629 cv
33.063 222.629 32.785 222.602 32.531 222.555 cv
32.27 222.508 32.039 222.457 31.844 222.387 cv
31.641 222.324 31.477 222.254 31.344 222.184 cv
31.211 222.113 31.125 222.062 31.094 222.027 cv
31.055 222 31.031 221.969 31.016 221.934 cv
30.996 221.902 30.977 221.863 30.965 221.816 cv
30.949 221.773 30.941 221.719 30.934 221.648 cv
30.926 221.586 30.922 221.504 30.926 221.402 cv
30.922 221.242 30.938 221.129 30.973 221.062 cv
31.004 221 31.051 220.965 31.113 220.965 cv
31.156 220.965 31.238 221.004 31.363 221.074 cv
31.484 221.152 31.645 221.23 31.84 221.312 cv
32.031 221.398 32.258 221.477 32.523 221.547 cv
32.781 221.621 33.074 221.656 33.395 221.656 cv
33.703 221.656 33.973 221.617 34.211 221.539 cv
34.441 221.461 34.641 221.352 34.801 221.211 cv
34.957 221.07 35.074 220.902 35.156 220.707 cv
35.234 220.512 35.273 220.301 35.277 220.074 cv
35.273 219.824 35.223 219.598 35.125 219.395 cv
35.02 219.195 34.871 219.023 34.68 218.875 cv
34.48 218.73 34.242 218.617 33.957 218.539 cv
33.672 218.461 33.348 218.422 32.984 218.422 cv
32.113 218.422 li
32.07 218.422 32.035 218.414 32 218.398 cv
31.965 218.383 31.934 218.355 31.91 218.316 cv
31.883 218.281 31.863 218.234 31.848 218.176 cv
31.832 218.117 31.824 218.039 31.824 217.941 cv
31.824 217.855 31.828 217.785 31.844 217.727 cv
31.852 217.672 31.871 217.625 31.902 217.59 cv
31.926 217.555 31.957 217.531 31.988 217.512 cv
32.02 217.5 32.055 217.492 32.098 217.488 cv
32.871 217.488 li
33.172 217.492 33.441 217.453 33.684 217.371 cv
33.918 217.297 34.121 217.184 34.293 217.035 cv
34.457 216.891 34.586 216.715 34.676 216.512 cv
34.766 216.309 34.813 216.082 34.813 215.828 cv
34.813 215.648 34.781 215.473 34.723 215.305 cv
34.66 215.141 34.57 214.996 34.453 214.871 cv
34.332 214.746 34.18 214.648 34 214.578 cv
33.813 214.508 33.602 214.473 33.359 214.473 cv
33.094 214.473 32.848 214.516 32.629 214.594 cv
32.402 214.676 32.207 214.762 32.035 214.852 cv
31.859 214.945 31.715 215.031 31.602 215.109 cv
31.488 215.191 31.406 215.23 31.363 215.227 cv
31.328 215.23 31.301 215.223 31.277 215.211 cv
31.25 215.199 31.23 215.176 31.215 215.141 cv
31.199 215.109 31.188 215.062 31.18 214.996 cv
31.172 214.937 31.168 214.855 31.172 214.754 cv
31.168 214.687 31.168 214.629 31.176 214.574 cv
31.176 214.523 31.188 214.477 31.203 214.434 cv
31.219 214.398 31.234 214.363 31.254 214.328 cv
31.27 214.301 31.301 214.262 31.344 214.215 cv
31.387 214.172 31.473 214.109 31.609 214.027 cv
31.738 213.945 31.902 213.867 32.098 213.785 cv
32.289 213.707 32.512 213.637 32.77 213.582 cv
33.02 213.527 33.293 213.5 33.59 213.5 cv
33.996 213.5 34.359 213.555 34.672 213.656 cv
34.984 213.766 35.242 213.914 35.453 214.102 cv
35.656 214.297 35.813 214.527 35.918 214.793 cv
36.02 215.062 36.07 215.355 36.074 215.68 cv
36.07 215.961 36.035 216.223 35.965 216.457 cv
35.891 216.699 35.781 216.91 35.641 217.094 cv
35.496 217.281 35.324 217.437 35.121 217.566 cv
34.914 217.699 34.676 217.793 34.406 217.84 cv
34.406 217.852 li
34.711 217.887 34.992 217.961 35.246 218.082 cv
35.5 218.203 35.719 218.355 35.902 218.539 cv
36.082 218.723 36.223 218.937 36.328 219.18 cv
36.43 219.426 36.48 219.687 36.484 219.965 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.93 218.043 mo
43.926 218.727 43.875 219.348 43.77 219.91 cv
43.66 220.473 43.48 220.957 43.234 221.359 cv
42.98 221.766 42.652 222.078 42.254 222.297 cv
41.848 222.52 41.355 222.629 40.77 222.629 cv
40.211 222.629 39.738 222.531 39.359 222.332 cv
38.977 222.137 38.672 221.844 38.438 221.457 cv
38.203 221.07 38.035 220.598 37.941 220.031 cv
37.84 219.469 37.793 218.82 37.793 218.086 cv
37.793 217.414 37.848 216.793 37.957 216.227 cv
38.066 215.664 38.242 215.18 38.492 214.773 cv
38.734 214.371 39.059 214.059 39.465 213.832 cv
39.863 213.613 40.359 213.5 40.949 213.5 cv
41.508 213.5 41.98 213.602 42.363 213.797 cv
42.746 214 43.051 214.293 43.285 214.676 cv
43.516 215.066 43.684 215.539 43.781 216.102 cv
43.879 216.664 43.926 217.312 43.93 218.043 cv
cp
42.723 218.125 mo
42.719 217.684 42.703 217.285 42.676 216.934 cv
42.641 216.582 42.594 216.273 42.535 216.004 cv
42.469 215.734 42.391 215.504 42.293 215.309 cv
42.195 215.117 42.078 214.957 41.941 214.828 cv
41.801 214.703 41.641 214.609 41.469 214.551 cv
41.289 214.496 41.094 214.469 40.879 214.465 cv
40.488 214.469 40.172 214.559 39.934 214.742 cv
39.688 214.926 39.496 215.18 39.359 215.496 cv
39.219 215.816 39.125 216.187 39.074 216.617 cv
39.023 217.047 39 217.512 39 218.004 cv
39 218.668 39.031 219.23 39.102 219.691 cv
39.168 220.16 39.277 220.539 39.43 220.828 cv
39.574 221.125 39.766 221.336 39.996 221.465 cv
40.227 221.602 40.508 221.668 40.84 221.664 cv
41.094 221.668 41.316 221.629 41.512 221.543 cv
41.703 221.465 41.871 221.344 42.012 221.187 cv
42.152 221.035 42.266 220.852 42.359 220.637 cv
42.445 220.422 42.52 220.184 42.578 219.922 cv
42.629 219.664 42.668 219.383 42.691 219.078 cv
42.711 218.773 42.719 218.457 42.723 218.125 cv
cp
f
30.211 162.93 mo
44.399 162.93 li
44.399 180.02 li
30.211 180.02 li
cp
0 0 0 0 cmyk
ef
36.484 173.746 mo
36.48 174.156 36.41 174.523 36.27 174.848 cv
36.125 175.176 35.922 175.457 35.66 175.687 cv
35.395 175.922 35.066 176.098 34.68 176.223 cv
34.289 176.348 33.852 176.41 33.367 176.41 cv
33.063 176.41 32.785 176.383 32.531 176.336 cv
32.27 176.289 32.039 176.238 31.844 176.168 cv
31.641 176.105 31.477 176.035 31.344 175.965 cv
31.211 175.895 31.125 175.844 31.094 175.809 cv
31.055 175.781 31.031 175.75 31.016 175.715 cv
30.996 175.684 30.977 175.645 30.965 175.598 cv
30.949 175.555 30.941 175.5 30.934 175.43 cv
30.926 175.367 30.922 175.285 30.926 175.184 cv
30.922 175.023 30.938 174.91 30.973 174.844 cv
31.004 174.781 31.051 174.746 31.113 174.746 cv
31.156 174.746 31.238 174.785 31.363 174.855 cv
31.484 174.934 31.645 175.012 31.84 175.094 cv
32.031 175.18 32.258 175.258 32.523 175.328 cv
32.781 175.402 33.074 175.437 33.395 175.437 cv
33.703 175.437 33.973 175.398 34.211 175.32 cv
34.441 175.242 34.641 175.133 34.801 174.992 cv
34.957 174.852 35.074 174.684 35.156 174.488 cv
35.234 174.293 35.273 174.082 35.277 173.855 cv
35.273 173.605 35.223 173.379 35.125 173.176 cv
35.02 172.977 34.871 172.805 34.68 172.656 cv
34.48 172.512 34.242 172.398 33.957 172.32 cv
33.672 172.242 33.348 172.203 32.984 172.203 cv
32.113 172.203 li
32.07 172.203 32.035 172.195 32 172.18 cv
31.965 172.164 31.934 172.137 31.91 172.098 cv
31.883 172.062 31.863 172.016 31.848 171.957 cv
31.832 171.898 31.824 171.82 31.824 171.723 cv
31.824 171.637 31.828 171.566 31.844 171.508 cv
31.852 171.453 31.871 171.406 31.902 171.371 cv
31.926 171.336 31.957 171.312 31.988 171.293 cv
32.02 171.281 32.055 171.273 32.098 171.27 cv
32.871 171.27 li
33.172 171.273 33.441 171.234 33.684 171.152 cv
33.918 171.078 34.121 170.965 34.293 170.816 cv
34.457 170.672 34.586 170.496 34.676 170.293 cv
34.766 170.09 34.813 169.863 34.813 169.609 cv
34.813 169.43 34.781 169.254 34.723 169.086 cv
34.66 168.922 34.57 168.777 34.453 168.652 cv
34.332 168.527 34.18 168.43 34 168.359 cv
33.813 168.289 33.602 168.254 33.359 168.254 cv
33.094 168.254 32.848 168.297 32.629 168.375 cv
32.402 168.457 32.207 168.543 32.035 168.633 cv
31.859 168.727 31.715 168.812 31.602 168.891 cv
31.488 168.973 31.406 169.012 31.363 169.008 cv
31.328 169.012 31.301 169.004 31.277 168.992 cv
31.25 168.98 31.23 168.957 31.215 168.922 cv
31.199 168.891 31.188 168.844 31.18 168.777 cv
31.172 168.719 31.168 168.637 31.172 168.535 cv
31.168 168.469 31.168 168.41 31.176 168.355 cv
31.176 168.305 31.188 168.258 31.203 168.215 cv
31.219 168.18 31.234 168.145 31.254 168.109 cv
31.27 168.082 31.301 168.043 31.344 167.996 cv
31.387 167.953 31.473 167.891 31.609 167.809 cv
31.738 167.727 31.902 167.648 32.098 167.566 cv
32.289 167.488 32.512 167.418 32.77 167.363 cv
33.02 167.309 33.293 167.281 33.59 167.281 cv
33.996 167.281 34.359 167.336 34.672 167.437 cv
34.984 167.547 35.242 167.695 35.453 167.883 cv
35.656 168.078 35.813 168.309 35.918 168.574 cv
36.02 168.844 36.07 169.137 36.074 169.461 cv
36.07 169.742 36.035 170.004 35.965 170.238 cv
35.891 170.48 35.781 170.691 35.641 170.875 cv
35.496 171.062 35.324 171.219 35.121 171.348 cv
34.914 171.48 34.676 171.574 34.406 171.621 cv
34.406 171.633 li
34.711 171.668 34.992 171.742 35.246 171.863 cv
35.5 171.984 35.719 172.137 35.902 172.32 cv
36.082 172.504 36.223 172.719 36.328 172.961 cv
36.43 173.207 36.48 173.469 36.484 173.746 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.594 173.43 mo
43.594 173.906 43.512 174.328 43.352 174.699 cv
43.191 175.07 42.965 175.383 42.676 175.637 cv
42.379 175.891 42.031 176.086 41.629 176.215 cv
41.223 176.348 40.773 176.41 40.281 176.41 cv
40.004 176.41 39.742 176.391 39.5 176.352 cv
39.25 176.312 39.031 176.266 38.844 176.211 cv
38.648 176.156 38.492 176.102 38.367 176.043 cv
38.242 175.992 38.164 175.949 38.133 175.914 cv
38.098 175.883 38.074 175.852 38.063 175.824 cv
38.047 175.797 38.031 175.766 38.023 175.723 cv
38.008 175.687 38 175.637 38 175.574 cv
37.992 175.516 37.992 175.445 37.992 175.363 cv
37.992 175.289 37.996 175.219 38.004 175.156 cv
38.012 175.094 38.023 175.043 38.043 175.004 cv
38.059 174.965 38.078 174.937 38.105 174.918 cv
38.129 174.902 38.16 174.895 38.191 174.891 cv
38.238 174.895 38.309 174.922 38.402 174.977 cv
38.496 175.035 38.625 175.098 38.789 175.164 cv
38.953 175.23 39.152 175.293 39.395 175.352 cv
39.629 175.41 39.914 175.437 40.25 175.437 cv
40.551 175.437 40.832 175.402 41.09 175.328 cv
41.344 175.258 41.566 175.145 41.754 174.988 cv
41.938 174.836 42.082 174.641 42.188 174.402 cv
42.293 174.168 42.344 173.879 42.348 173.539 cv
42.344 173.258 42.301 173.008 42.211 172.789 cv
42.121 172.57 41.984 172.391 41.801 172.246 cv
41.613 172.105 41.379 172 41.098 171.926 cv
40.813 171.855 40.473 171.816 40.086 171.816 cv
39.801 171.816 39.563 171.832 39.363 171.859 cv
39.16 171.891 38.973 171.906 38.801 171.902 cv
38.672 171.906 38.578 171.875 38.527 171.812 cv
38.469 171.754 38.441 171.641 38.445 171.469 cv
38.445 167.855 li
38.441 167.707 38.477 167.598 38.551 167.52 cv
38.617 167.449 38.719 167.41 38.855 167.41 cv
42.785 167.41 li
42.82 167.41 42.855 167.422 42.891 167.441 cv
42.922 167.465 42.949 167.496 42.977 167.535 cv
42.996 167.578 43.012 167.629 43.027 167.691 cv
43.035 167.758 43.043 167.836 43.047 167.918 cv
43.043 168.086 43.02 168.211 42.98 168.301 cv
42.934 168.395 42.875 168.441 42.797 168.437 cv
39.625 168.437 li
39.625 170.926 li
39.777 170.906 39.934 170.895 40.098 170.887 cv
40.254 170.883 40.441 170.879 40.656 170.879 cv
41.141 170.879 41.566 170.941 41.934 171.062 cv
42.297 171.184 42.602 171.355 42.852 171.574 cv
43.094 171.801 43.281 172.066 43.406 172.379 cv
43.531 172.695 43.594 173.047 43.594 173.43 cv
cp
f
30.211 116.711 mo
44.399 116.711 li
44.399 133.801 li
30.211 133.801 li
cp
0 0 0 0 cmyk
ef
36.93 127.535 mo
36.926 127.687 36.902 127.809 36.859 127.895 cv
36.813 127.984 36.75 128.027 36.668 128.023 cv
35.668 128.023 li
35.668 129.887 li
35.668 129.926 35.656 129.957 35.641 129.98 cv
35.617 130.008 35.586 130.027 35.543 130.047 cv
35.492 130.062 35.43 130.074 35.359 130.086 cv
35.281 130.094 35.188 130.098 35.07 130.102 cv
34.953 130.098 34.855 130.094 34.785 130.086 cv
34.707 130.074 34.648 130.062 34.605 130.047 cv
34.559 130.027 34.527 130.008 34.512 129.98 cv
34.492 129.957 34.484 129.926 34.488 129.887 cv
34.488 128.023 li
30.859 128.023 li
30.801 128.027 30.758 128.02 30.723 128.004 cv
30.688 127.992 30.652 127.965 30.625 127.926 cv
30.594 127.891 30.574 127.84 30.563 127.77 cv
30.551 127.703 30.547 127.613 30.547 127.5 cv
30.547 127.418 30.547 127.34 30.555 127.27 cv
30.555 127.199 30.566 127.137 30.582 127.082 cv
30.594 127.027 30.609 126.973 30.637 126.918 cv
30.656 126.863 30.684 126.809 30.719 126.746 cv
33.879 121.359 li
33.898 121.324 33.934 121.293 33.98 121.266 cv
34.023 121.238 34.078 121.215 34.152 121.195 cv
34.219 121.18 34.305 121.168 34.41 121.156 cv
34.512 121.152 34.633 121.148 34.773 121.145 cv
34.922 121.148 35.059 121.152 35.176 121.164 cv
35.289 121.176 35.379 121.191 35.453 121.207 cv
35.52 121.227 35.574 121.25 35.613 121.281 cv
35.648 121.312 35.668 121.348 35.668 121.387 cv
35.668 127.051 li
36.668 127.051 li
36.742 127.055 36.805 127.094 36.855 127.172 cv
36.902 127.254 36.926 127.375 36.93 127.535 cv
cp
34.488 122.184 mo
34.477 122.184 li
31.625 127.051 li
34.488 127.051 li
cp
.629236 .549432 .540154 .282963 cmyk
f
43.93 125.602 mo
43.926 126.285 43.875 126.906 43.77 127.469 cv
43.66 128.031 43.48 128.516 43.234 128.918 cv
42.98 129.324 42.652 129.637 42.254 129.855 cv
41.848 130.078 41.355 130.187 40.77 130.187 cv
40.211 130.187 39.738 130.09 39.359 129.891 cv
38.977 129.695 38.672 129.402 38.438 129.016 cv
38.203 128.629 38.035 128.156 37.941 127.59 cv
37.84 127.027 37.793 126.379 37.793 125.645 cv
37.793 124.973 37.848 124.352 37.957 123.785 cv
38.066 123.223 38.242 122.738 38.492 122.332 cv
38.734 121.93 39.059 121.617 39.465 121.391 cv
39.863 121.172 40.359 121.059 40.949 121.059 cv
41.508 121.059 41.98 121.16 42.363 121.355 cv
42.746 121.559 43.051 121.852 43.285 122.234 cv
43.516 122.625 43.684 123.098 43.781 123.66 cv
43.879 124.223 43.926 124.871 43.93 125.602 cv
cp
42.723 125.684 mo
42.719 125.242 42.703 124.844 42.676 124.492 cv
42.641 124.141 42.594 123.832 42.535 123.562 cv
42.469 123.293 42.391 123.062 42.293 122.867 cv
42.195 122.676 42.078 122.516 41.941 122.387 cv
41.801 122.262 41.641 122.168 41.469 122.109 cv
41.289 122.055 41.094 122.027 40.879 122.023 cv
40.488 122.027 40.172 122.117 39.934 122.301 cv
39.688 122.484 39.496 122.738 39.359 123.055 cv
39.219 123.375 39.125 123.746 39.074 124.176 cv
39.023 124.605 39 125.07 39 125.562 cv
39 126.227 39.031 126.789 39.102 127.25 cv
39.168 127.719 39.277 128.098 39.43 128.387 cv
39.574 128.684 39.766 128.895 39.996 129.023 cv
40.227 129.16 40.508 129.227 40.84 129.223 cv
41.094 129.227 41.316 129.187 41.512 129.102 cv
41.703 129.023 41.871 128.902 42.012 128.746 cv
42.152 128.594 42.266 128.41 42.359 128.195 cv
42.445 127.98 42.52 127.742 42.578 127.48 cv
42.629 127.223 42.668 126.941 42.691 126.637 cv
42.711 126.332 42.719 126.016 42.723 125.684 cv
cp
f
30.211 70.5 mo
44.399 70.5 li
44.399 87.59 li
30.211 87.59 li
cp
0 0 0 0 cmyk
ef
36.93 81.305 mo
36.926 81.457 36.902 81.578 36.859 81.664 cv
36.813 81.754 36.75 81.797 36.668 81.793 cv
35.668 81.793 li
35.668 83.656 li
35.668 83.695 35.656 83.727 35.641 83.75 cv
35.617 83.777 35.586 83.797 35.543 83.816 cv
35.492 83.832 35.43 83.844 35.359 83.855 cv
35.281 83.863 35.188 83.867 35.07 83.871 cv
34.953 83.867 34.855 83.863 34.785 83.855 cv
34.707 83.844 34.648 83.832 34.605 83.816 cv
34.559 83.797 34.527 83.777 34.512 83.75 cv
34.492 83.727 34.484 83.695 34.488 83.656 cv
34.488 81.793 li
30.859 81.793 li
30.801 81.797 30.758 81.789 30.723 81.773 cv
30.688 81.762 30.652 81.734 30.625 81.695 cv
30.594 81.66 30.574 81.609 30.563 81.539 cv
30.551 81.473 30.547 81.383 30.547 81.27 cv
30.547 81.187 30.547 81.109 30.555 81.039 cv
30.555 80.969 30.566 80.906 30.582 80.852 cv
30.594 80.797 30.609 80.742 30.637 80.687 cv
30.656 80.633 30.684 80.578 30.719 80.516 cv
33.879 75.129 li
33.898 75.094 33.934 75.062 33.98 75.035 cv
34.023 75.008 34.078 74.984 34.152 74.965 cv
34.219 74.949 34.305 74.937 34.41 74.926 cv
34.512 74.922 34.633 74.918 34.773 74.914 cv
34.922 74.918 35.059 74.922 35.176 74.934 cv
35.289 74.945 35.379 74.961 35.453 74.977 cv
35.52 74.996 35.574 75.02 35.613 75.051 cv
35.648 75.082 35.668 75.117 35.668 75.156 cv
35.668 80.82 li
36.668 80.82 li
36.742 80.824 36.805 80.863 36.855 80.941 cv
36.902 81.023 36.926 81.145 36.93 81.305 cv
cp
34.488 75.953 mo
34.477 75.953 li
31.625 80.82 li
34.488 80.82 li
cp
.629236 .549432 .540154 .282963 cmyk
f
43.594 80.977 mo
43.594 81.453 43.512 81.875 43.352 82.246 cv
43.191 82.617 42.965 82.93 42.676 83.184 cv
42.379 83.437 42.031 83.633 41.629 83.762 cv
41.223 83.895 40.773 83.957 40.281 83.957 cv
40.004 83.957 39.742 83.937 39.5 83.898 cv
39.25 83.859 39.031 83.812 38.844 83.758 cv
38.648 83.703 38.492 83.648 38.367 83.59 cv
38.242 83.539 38.164 83.496 38.133 83.461 cv
38.098 83.43 38.074 83.398 38.063 83.371 cv
38.047 83.344 38.031 83.312 38.023 83.27 cv
38.008 83.234 38 83.184 38 83.121 cv
37.992 83.062 37.992 82.992 37.992 82.91 cv
37.992 82.836 37.996 82.766 38.004 82.703 cv
38.012 82.641 38.023 82.59 38.043 82.551 cv
38.059 82.512 38.078 82.484 38.105 82.465 cv
38.129 82.449 38.16 82.441 38.191 82.437 cv
38.238 82.441 38.309 82.469 38.402 82.523 cv
38.496 82.582 38.625 82.645 38.789 82.711 cv
38.953 82.777 39.152 82.84 39.395 82.898 cv
39.629 82.957 39.914 82.984 40.25 82.984 cv
40.551 82.984 40.832 82.949 41.09 82.875 cv
41.344 82.805 41.566 82.691 41.754 82.535 cv
41.938 82.383 42.082 82.187 42.188 81.949 cv
42.293 81.715 42.344 81.426 42.348 81.086 cv
42.344 80.805 42.301 80.555 42.211 80.336 cv
42.121 80.117 41.984 79.937 41.801 79.793 cv
41.613 79.652 41.379 79.547 41.098 79.473 cv
40.813 79.402 40.473 79.363 40.086 79.363 cv
39.801 79.363 39.563 79.379 39.363 79.406 cv
39.16 79.437 38.973 79.453 38.801 79.449 cv
38.672 79.453 38.578 79.422 38.527 79.359 cv
38.469 79.301 38.441 79.187 38.445 79.016 cv
38.445 75.402 li
38.441 75.254 38.477 75.145 38.551 75.066 cv
38.617 74.996 38.719 74.957 38.855 74.957 cv
42.785 74.957 li
42.82 74.957 42.855 74.969 42.891 74.988 cv
42.922 75.012 42.949 75.043 42.977 75.082 cv
42.996 75.125 43.012 75.176 43.027 75.238 cv
43.035 75.305 43.043 75.383 43.047 75.465 cv
43.043 75.633 43.02 75.758 42.98 75.848 cv
42.934 75.941 42.875 75.988 42.797 75.984 cv
39.625 75.984 li
39.625 78.473 li
39.777 78.453 39.934 78.441 40.098 78.434 cv
40.254 78.43 40.441 78.426 40.656 78.426 cv
41.141 78.426 41.566 78.488 41.934 78.609 cv
42.297 78.73 42.602 78.902 42.852 79.121 cv
43.094 79.348 43.281 79.613 43.406 79.926 cv
43.531 80.242 43.594 80.594 43.594 80.977 cv
cp
f
30.211 24.281 mo
44.399 24.281 li
44.399 41.371 li
30.211 41.371 li
cp
0 0 0 0 cmyk
ef
36.512 34.758 mo
36.512 35.234 36.43 35.656 36.27 36.027 cv
36.109 36.398 35.883 36.711 35.594 36.965 cv
35.297 37.219 34.949 37.414 34.547 37.543 cv
34.141 37.676 33.691 37.738 33.199 37.738 cv
32.922 37.738 32.66 37.719 32.418 37.68 cv
32.168 37.641 31.949 37.594 31.762 37.539 cv
31.566 37.484 31.41 37.43 31.285 37.371 cv
31.16 37.32 31.082 37.277 31.051 37.242 cv
31.016 37.211 30.992 37.18 30.98 37.152 cv
30.965 37.125 30.949 37.094 30.941 37.051 cv
30.926 37.016 30.918 36.965 30.918 36.902 cv
30.91 36.844 30.91 36.773 30.91 36.691 cv
30.91 36.617 30.914 36.547 30.922 36.484 cv
30.93 36.422 30.941 36.371 30.961 36.332 cv
30.977 36.293 30.996 36.266 31.023 36.246 cv
31.047 36.23 31.078 36.223 31.109 36.219 cv
31.156 36.223 31.227 36.25 31.32 36.305 cv
31.414 36.363 31.543 36.426 31.707 36.492 cv
31.871 36.559 32.07 36.621 32.313 36.68 cv
32.547 36.738 32.832 36.766 33.168 36.766 cv
33.469 36.766 33.75 36.73 34.008 36.656 cv
34.262 36.586 34.484 36.473 34.672 36.316 cv
34.855 36.164 35 35.969 35.105 35.73 cv
35.211 35.496 35.262 35.207 35.266 34.867 cv
35.262 34.586 35.219 34.336 35.129 34.117 cv
35.039 33.898 34.902 33.719 34.719 33.574 cv
34.531 33.434 34.297 33.328 34.016 33.254 cv
33.73 33.184 33.391 33.145 33.004 33.145 cv
32.719 33.145 32.48 33.16 32.281 33.187 cv
32.078 33.219 31.891 33.234 31.719 33.23 cv
31.59 33.234 31.496 33.203 31.445 33.141 cv
31.387 33.082 31.359 32.969 31.363 32.797 cv
31.363 29.184 li
31.359 29.035 31.395 28.926 31.469 28.848 cv
31.535 28.777 31.637 28.738 31.773 28.738 cv
35.703 28.738 li
35.738 28.738 35.773 28.75 35.809 28.77 cv
35.84 28.793 35.867 28.824 35.895 28.863 cv
35.914 28.906 35.93 28.957 35.945 29.02 cv
35.953 29.086 35.961 29.164 35.965 29.246 cv
35.961 29.414 35.938 29.539 35.898 29.629 cv
35.852 29.723 35.793 29.77 35.715 29.766 cv
32.543 29.766 li
32.543 32.254 li
32.695 32.234 32.852 32.223 33.016 32.215 cv
33.172 32.211 33.359 32.207 33.574 32.207 cv
34.059 32.207 34.484 32.27 34.852 32.391 cv
35.215 32.512 35.52 32.684 35.77 32.902 cv
36.012 33.129 36.199 33.395 36.324 33.707 cv
36.449 34.023 36.512 34.375 36.512 34.758 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.93 33.152 mo
43.926 33.836 43.875 34.457 43.77 35.02 cv
43.66 35.582 43.48 36.066 43.234 36.469 cv
42.98 36.875 42.652 37.187 42.254 37.406 cv
41.848 37.629 41.355 37.738 40.77 37.738 cv
40.211 37.738 39.738 37.641 39.359 37.441 cv
38.977 37.246 38.672 36.953 38.438 36.566 cv
38.203 36.18 38.035 35.707 37.941 35.141 cv
37.84 34.578 37.793 33.93 37.793 33.195 cv
37.793 32.523 37.848 31.902 37.957 31.336 cv
38.066 30.773 38.242 30.289 38.492 29.883 cv
38.734 29.48 39.059 29.168 39.465 28.941 cv
39.863 28.723 40.359 28.609 40.949 28.609 cv
41.508 28.609 41.98 28.711 42.363 28.906 cv
42.746 29.109 43.051 29.402 43.285 29.785 cv
43.516 30.176 43.684 30.648 43.781 31.211 cv
43.879 31.773 43.926 32.422 43.93 33.152 cv
cp
42.723 33.234 mo
42.719 32.793 42.703 32.395 42.676 32.043 cv
42.641 31.691 42.594 31.383 42.535 31.113 cv
42.469 30.844 42.391 30.613 42.293 30.418 cv
42.195 30.227 42.078 30.066 41.941 29.937 cv
41.801 29.812 41.641 29.719 41.469 29.66 cv
41.289 29.605 41.094 29.578 40.879 29.574 cv
40.488 29.578 40.172 29.668 39.934 29.852 cv
39.688 30.035 39.496 30.289 39.359 30.605 cv
39.219 30.926 39.125 31.297 39.074 31.727 cv
39.023 32.156 39 32.621 39 33.113 cv
39 33.777 39.031 34.34 39.102 34.801 cv
39.168 35.27 39.277 35.648 39.43 35.937 cv
39.574 36.234 39.766 36.445 39.996 36.574 cv
40.227 36.711 40.508 36.777 40.84 36.773 cv
41.094 36.777 41.316 36.738 41.512 36.652 cv
41.703 36.574 41.871 36.453 42.012 36.297 cv
42.152 36.145 42.266 35.961 42.359 35.746 cv
42.445 35.531 42.52 35.293 42.578 35.031 cv
42.629 34.773 42.668 34.492 42.691 34.187 cv
42.711 33.883 42.719 33.566 42.723 33.234 cv
cp
f
60.215 517.598 mo
60.211 517.687 60.203 517.758 60.191 517.816 cv
60.176 517.879 60.156 517.93 60.137 517.961 cv
60.113 518 60.09 518.023 60.059 518.039 cv
60.027 518.055 59.996 518.062 59.969 518.062 cv
55.332 518.062 li
55.297 518.062 55.27 518.055 55.242 518.039 cv
55.215 518.023 55.188 518 55.164 517.961 cv
55.137 517.93 55.117 517.879 55.105 517.816 cv
55.09 517.758 55.082 517.687 55.086 517.598 cv
55.082 517.52 55.09 517.445 55.105 517.383 cv
55.117 517.324 55.133 517.277 55.156 517.238 cv
55.172 517.203 55.199 517.172 55.23 517.148 cv
55.262 517.129 55.293 517.121 55.332 517.117 cv
57.184 517.117 li
57.184 510.371 li
55.469 511.391 li
55.379 511.441 55.309 511.469 55.262 511.477 cv
55.207 511.484 55.164 511.477 55.133 511.445 cv
55.098 511.418 55.078 511.367 55.066 511.297 cv
55.055 511.23 55.047 511.145 55.051 511.035 cv
55.047 510.961 55.051 510.895 55.063 510.836 cv
55.066 510.785 55.078 510.738 55.094 510.699 cv
55.105 510.664 55.125 510.633 55.148 510.605 cv
55.172 510.578 55.203 510.551 55.25 510.523 cv
57.293 509.211 li
57.309 509.199 57.328 509.187 57.359 509.18 cv
57.383 509.172 57.418 509.164 57.465 509.152 cv
57.504 509.145 57.555 509.137 57.609 509.133 cv
57.664 509.133 57.73 509.133 57.816 509.129 cv
57.922 509.133 58.016 509.137 58.09 509.145 cv
58.16 509.152 58.215 509.168 58.262 509.184 cv
58.301 509.203 58.328 509.223 58.344 509.246 cv
58.352 509.273 58.359 509.297 58.363 509.32 cv
58.363 517.117 li
59.969 517.117 li
60.004 517.121 60.039 517.129 60.07 517.148 cv
60.102 517.172 60.125 517.203 60.148 517.238 cv
60.164 517.277 60.18 517.324 60.195 517.383 cv
60.203 517.445 60.211 517.52 60.215 517.598 cv
cp
f
132.816 517.555 mo
132.813 517.641 132.809 517.715 132.797 517.777 cv
132.785 517.844 132.77 517.898 132.75 517.937 cv
132.727 517.984 132.699 518.016 132.668 518.031 cv
132.633 518.055 132.594 518.062 132.555 518.062 cv
127.652 518.062 li
127.59 518.062 127.531 518.055 127.484 518.039 cv
127.434 518.023 127.395 518 127.359 517.961 cv
127.324 517.93 127.297 517.875 127.285 517.805 cv
127.266 517.734 127.258 517.648 127.262 517.547 cv
127.258 517.457 127.262 517.379 127.27 517.309 cv
127.273 517.242 127.289 517.184 127.316 517.129 cv
127.34 517.078 127.371 517.023 127.406 516.969 cv
127.441 516.918 127.484 516.863 127.543 516.801 cv
129.316 514.977 li
129.727 514.559 130.055 514.184 130.305 513.848 cv
130.551 513.52 130.742 513.215 130.875 512.937 cv
131.008 512.664 131.094 512.414 131.141 512.187 cv
131.18 511.965 131.203 511.754 131.203 511.559 cv
131.203 511.363 131.168 511.18 131.102 511 cv
131.035 510.828 130.941 510.672 130.816 510.535 cv
130.691 510.406 130.535 510.301 130.348 510.219 cv
130.16 510.145 129.941 510.105 129.695 510.102 cv
129.406 510.105 129.148 510.145 128.922 510.219 cv
128.691 510.301 128.492 510.387 128.32 510.473 cv
128.148 510.566 128.004 510.648 127.887 510.727 cv
127.77 510.805 127.684 510.844 127.633 510.844 cv
127.598 510.844 127.566 510.836 127.543 510.816 cv
127.512 510.801 127.492 510.77 127.477 510.727 cv
127.461 510.687 127.445 510.633 127.438 510.562 cv
127.426 510.496 127.422 510.414 127.426 510.316 cv
127.422 510.25 127.426 510.191 127.434 510.141 cv
127.438 510.09 127.445 510.047 127.457 510.008 cv
127.465 509.973 127.48 509.937 127.5 509.906 cv
127.52 509.875 127.555 509.836 127.613 509.785 cv
127.664 509.738 127.758 509.672 127.895 509.59 cv
128.027 509.508 128.199 509.43 128.402 509.348 cv
128.605 509.27 128.828 509.199 129.074 509.145 cv
129.316 509.09 129.574 509.062 129.848 509.062 cv
130.273 509.062 130.648 509.125 130.973 509.246 cv
131.293 509.367 131.559 509.531 131.773 509.742 cv
131.984 509.953 132.145 510.199 132.25 510.473 cv
132.355 510.754 132.41 511.051 132.41 511.363 cv
132.41 511.652 132.383 511.934 132.332 512.211 cv
132.281 512.496 132.176 512.801 132.016 513.125 cv
131.852 513.453 131.617 513.816 131.313 514.215 cv
131.004 514.617 130.598 515.078 130.094 515.594 cv
128.688 517.062 li
132.547 517.062 li
132.578 517.066 132.613 517.078 132.652 517.094 cv
132.684 517.117 132.715 517.148 132.742 517.187 cv
132.766 517.23 132.785 517.281 132.797 517.34 cv
132.809 517.406 132.813 517.477 132.816 517.555 cv
cp
f
205.789 515.539 mo
205.785 515.691 205.762 515.812 205.719 515.898 cv
205.672 515.988 205.609 516.031 205.527 516.027 cv
204.527 516.027 li
204.527 517.891 li
204.527 517.93 204.516 517.961 204.5 517.984 cv
204.477 518.012 204.445 518.031 204.402 518.051 cv
204.352 518.066 204.289 518.078 204.219 518.09 cv
204.141 518.098 204.047 518.102 203.93 518.105 cv
203.813 518.102 203.715 518.098 203.645 518.09 cv
203.566 518.078 203.508 518.066 203.465 518.051 cv
203.418 518.031 203.387 518.012 203.371 517.984 cv
203.352 517.961 203.344 517.93 203.348 517.891 cv
203.348 516.027 li
199.719 516.027 li
199.66 516.031 199.617 516.023 199.582 516.008 cv
199.547 515.996 199.512 515.969 199.484 515.93 cv
199.453 515.895 199.434 515.844 199.422 515.773 cv
199.41 515.707 199.406 515.617 199.406 515.504 cv
199.406 515.422 199.406 515.344 199.414 515.273 cv
199.414 515.203 199.426 515.141 199.441 515.086 cv
199.453 515.031 199.469 514.977 199.496 514.922 cv
199.516 514.867 199.543 514.812 199.578 514.75 cv
202.738 509.363 li
202.758 509.328 202.793 509.297 202.84 509.27 cv
202.883 509.242 202.938 509.219 203.012 509.199 cv
203.078 509.184 203.164 509.172 203.27 509.16 cv
203.371 509.156 203.492 509.152 203.633 509.148 cv
203.781 509.152 203.918 509.156 204.035 509.168 cv
204.148 509.18 204.238 509.195 204.313 509.211 cv
204.379 509.23 204.434 509.254 204.473 509.285 cv
204.508 509.316 204.527 509.352 204.527 509.391 cv
204.527 515.055 li
205.527 515.055 li
205.602 515.059 205.664 515.098 205.715 515.176 cv
205.762 515.258 205.785 515.379 205.789 515.539 cv
cp
203.348 510.187 mo
203.336 510.187 li
200.484 515.055 li
203.348 515.055 li
cp
f
278.262 515.191 mo
278.262 515.582 278.199 515.961 278.082 516.32 cv
277.957 516.687 277.773 517.004 277.531 517.277 cv
277.281 517.555 276.969 517.777 276.594 517.941 cv
276.211 518.109 275.766 518.191 275.25 518.191 cv
274.879 518.191 274.551 518.148 274.27 518.055 cv
273.984 517.969 273.738 517.836 273.527 517.664 cv
273.316 517.496 273.141 517.289 273.004 517.043 cv
272.863 516.797 272.75 516.516 272.668 516.199 cv
272.582 515.887 272.523 515.543 272.488 515.164 cv
272.449 514.793 272.43 514.391 272.434 513.957 cv
272.43 513.578 272.449 513.195 272.492 512.805 cv
272.531 512.422 272.605 512.047 272.711 511.68 cv
272.816 511.32 272.961 510.98 273.141 510.664 cv
273.32 510.348 273.547 510.07 273.82 509.836 cv
274.094 509.602 274.418 509.414 274.797 509.273 cv
275.176 509.137 275.617 509.07 276.121 509.066 cv
276.289 509.07 276.461 509.078 276.633 509.098 cv
276.805 509.121 276.965 509.152 277.113 509.184 cv
277.262 509.223 277.383 509.258 277.484 509.297 cv
277.582 509.336 277.648 509.371 277.684 509.395 cv
277.711 509.422 277.734 509.449 277.754 509.477 cv
277.77 509.508 277.785 509.539 277.793 509.574 cv
277.801 509.609 277.805 509.648 277.813 509.691 cv
277.813 509.734 277.816 509.789 277.82 509.852 cv
277.816 509.937 277.816 510.008 277.816 510.062 cv
277.813 510.125 277.801 510.172 277.789 510.207 cv
277.77 510.246 277.75 510.273 277.727 510.289 cv
277.699 510.309 277.668 510.316 277.629 510.316 cv
277.578 510.316 277.508 510.301 277.422 510.27 cv
277.332 510.238 277.227 510.203 277.105 510.16 cv
276.98 510.125 276.832 510.09 276.656 510.055 cv
276.48 510.027 276.277 510.012 276.047 510.008 cv
275.617 510.012 275.25 510.098 274.945 510.27 cv
274.641 510.441 274.391 510.676 274.195 510.969 cv
274 511.262 273.855 511.602 273.766 511.984 cv
273.668 512.375 273.613 512.777 273.605 513.195 cv
273.723 513.129 273.859 513.062 274.008 512.992 cv
274.156 512.926 274.316 512.863 274.492 512.805 cv
274.668 512.754 274.855 512.707 275.051 512.672 cv
275.246 512.641 275.457 512.625 275.684 512.621 cv
276.16 512.625 276.563 512.691 276.895 512.816 cv
277.223 512.949 277.488 513.129 277.695 513.359 cv
277.895 513.59 278.039 513.859 278.129 514.172 cv
278.215 514.484 278.262 514.824 278.262 515.191 cv
cp
277.066 515.301 mo
277.066 515.039 277.039 514.797 276.988 514.578 cv
276.934 514.363 276.844 514.18 276.723 514.023 cv
276.598 513.875 276.434 513.758 276.23 513.676 cv
276.02 513.594 275.766 513.551 275.469 513.551 cv
275.297 513.551 275.129 513.566 274.961 513.598 cv
274.789 513.629 274.625 513.672 274.469 513.719 cv
274.309 513.773 274.16 513.836 274.02 513.906 cv
273.875 513.98 273.742 514.055 273.625 514.133 cv
273.621 514.727 273.66 515.223 273.738 515.617 cv
273.813 516.016 273.922 516.332 274.066 516.57 cv
274.211 516.812 274.391 516.984 274.605 517.086 cv
274.82 517.191 275.07 517.242 275.359 517.238 cv
275.648 517.242 275.902 517.187 276.117 517.074 cv
276.332 516.969 276.508 516.82 276.652 516.633 cv
276.793 516.449 276.898 516.242 276.965 516.012 cv
277.031 515.781 277.066 515.547 277.066 515.301 cv
cp
f
350.84 515.785 mo
350.84 516.172 350.77 516.516 350.633 516.812 cv
350.496 517.117 350.301 517.367 350.043 517.57 cv
349.785 517.777 349.465 517.934 349.086 518.035 cv
348.703 518.141 348.27 518.191 347.785 518.191 cv
347.324 518.191 346.914 518.145 346.555 518.051 cv
346.191 517.957 345.887 517.816 345.637 517.625 cv
345.387 517.441 345.195 517.211 345.063 516.934 cv
344.93 516.66 344.863 516.348 344.863 515.992 cv
344.863 515.719 344.906 515.461 345 515.227 cv
345.086 514.992 345.219 514.777 345.395 514.582 cv
345.563 514.387 345.773 514.203 346.027 514.027 cv
346.277 513.859 346.563 513.695 346.879 513.539 cv
346.605 513.398 346.363 513.25 346.152 513.09 cv
345.941 512.934 345.762 512.762 345.617 512.574 cv
345.469 512.391 345.359 512.195 345.285 511.984 cv
345.207 511.777 345.168 511.547 345.172 511.297 cv
345.168 510.988 345.223 510.695 345.34 510.422 cv
345.449 510.152 345.621 509.918 345.848 509.715 cv
346.074 509.516 346.359 509.355 346.711 509.238 cv
347.055 509.121 347.465 509.062 347.934 509.062 cv
348.379 509.062 348.766 509.117 349.094 509.223 cv
349.422 509.332 349.691 509.477 349.902 509.66 cv
350.113 509.848 350.27 510.066 350.375 510.316 cv
350.473 510.566 350.523 510.836 350.527 511.125 cv
350.523 511.359 350.484 511.586 350.414 511.797 cv
350.336 512.016 350.227 512.219 350.078 512.406 cv
349.93 512.602 349.75 512.781 349.539 512.945 cv
349.328 513.117 349.086 513.273 348.813 513.414 cv
349.133 513.578 349.418 513.742 349.676 513.91 cv
349.926 514.078 350.141 514.258 350.316 514.453 cv
350.484 514.648 350.613 514.855 350.707 515.07 cv
350.793 515.289 350.84 515.527 350.84 515.785 cv
cp
349.359 511.234 mo
349.355 511.047 349.324 510.871 349.258 510.715 cv
349.191 510.559 349.094 510.426 348.969 510.316 cv
348.84 510.207 348.68 510.125 348.492 510.066 cv
348.297 510.012 348.082 509.984 347.844 509.98 cv
347.348 509.984 346.973 510.094 346.723 510.316 cv
346.465 510.543 346.34 510.852 346.344 511.234 cv
346.34 511.414 346.371 511.578 346.434 511.73 cv
346.496 511.887 346.59 512.031 346.723 512.168 cv
346.848 512.305 347.012 512.437 347.215 512.566 cv
347.41 512.699 347.648 512.836 347.926 512.977 cv
348.387 512.742 348.742 512.48 348.988 512.187 cv
349.234 511.902 349.355 511.586 349.359 511.234 cv
cp
349.648 515.91 mo
349.645 515.703 349.605 515.512 349.531 515.34 cv
349.449 515.172 349.332 515.012 349.176 514.859 cv
349.02 514.711 348.82 514.566 348.586 514.426 cv
348.348 514.289 348.078 514.145 347.77 513.992 cv
347.48 514.137 347.227 514.277 347.012 514.418 cv
346.793 514.559 346.613 514.707 346.477 514.855 cv
346.336 515.012 346.23 515.168 346.16 515.332 cv
346.086 515.5 346.051 515.684 346.055 515.883 cv
346.051 516.328 346.203 516.672 346.512 516.91 cv
346.813 517.156 347.266 517.277 347.871 517.273 cv
348.453 517.277 348.898 517.156 349.199 516.906 cv
349.496 516.664 349.645 516.332 349.648 515.91 cv
cp
f
419.734 517.598 mo
419.73 517.687 419.723 517.758 419.711 517.816 cv
419.695 517.879 419.676 517.93 419.656 517.961 cv
419.633 518 419.609 518.023 419.578 518.039 cv
419.547 518.055 419.516 518.062 419.488 518.062 cv
414.852 518.062 li
414.816 518.062 414.789 518.055 414.762 518.039 cv
414.734 518.023 414.707 518 414.684 517.961 cv
414.656 517.93 414.637 517.879 414.625 517.816 cv
414.609 517.758 414.602 517.687 414.605 517.598 cv
414.602 517.52 414.609 517.445 414.625 517.383 cv
414.637 517.324 414.652 517.277 414.676 517.238 cv
414.691 517.203 414.719 517.172 414.75 517.148 cv
414.781 517.129 414.813 517.121 414.852 517.117 cv
416.703 517.117 li
416.703 510.371 li
414.988 511.391 li
414.898 511.441 414.828 511.469 414.781 511.477 cv
414.727 511.484 414.684 511.477 414.652 511.445 cv
414.617 511.418 414.598 511.367 414.586 511.297 cv
414.574 511.23 414.566 511.145 414.57 511.035 cv
414.566 510.961 414.57 510.895 414.582 510.836 cv
414.586 510.785 414.598 510.738 414.613 510.699 cv
414.625 510.664 414.645 510.633 414.668 510.605 cv
414.691 510.578 414.723 510.551 414.77 510.523 cv
416.813 509.211 li
416.828 509.199 416.848 509.187 416.879 509.18 cv
416.902 509.172 416.938 509.164 416.984 509.152 cv
417.023 509.145 417.074 509.137 417.129 509.133 cv
417.184 509.133 417.25 509.133 417.336 509.129 cv
417.441 509.133 417.535 509.137 417.609 509.145 cv
417.68 509.152 417.734 509.168 417.781 509.184 cv
417.82 509.203 417.848 509.223 417.863 509.246 cv
417.871 509.273 417.879 509.297 417.883 509.32 cv
417.883 517.117 li
419.488 517.117 li
419.523 517.121 419.559 517.129 419.59 517.148 cv
419.621 517.172 419.645 517.203 419.668 517.238 cv
419.684 517.277 419.699 517.324 419.715 517.383 cv
419.723 517.445 419.73 517.52 419.734 517.598 cv
cp
f
427.09 513.605 mo
427.086 514.289 427.035 514.91 426.93 515.473 cv
426.82 516.035 426.641 516.52 426.395 516.922 cv
426.141 517.328 425.813 517.641 425.414 517.859 cv
425.008 518.082 424.516 518.191 423.93 518.191 cv
423.371 518.191 422.898 518.094 422.52 517.895 cv
422.137 517.699 421.832 517.406 421.598 517.02 cv
421.363 516.633 421.195 516.16 421.102 515.594 cv
421 515.031 420.953 514.383 420.953 513.648 cv
420.953 512.977 421.008 512.355 421.117 511.789 cv
421.227 511.227 421.402 510.742 421.652 510.336 cv
421.895 509.934 422.219 509.621 422.625 509.395 cv
423.023 509.176 423.52 509.062 424.109 509.062 cv
424.668 509.062 425.141 509.164 425.523 509.359 cv
425.906 509.562 426.211 509.855 426.445 510.238 cv
426.676 510.629 426.844 511.102 426.941 511.664 cv
427.039 512.227 427.086 512.875 427.09 513.605 cv
cp
425.883 513.687 mo
425.879 513.246 425.863 512.848 425.836 512.496 cv
425.801 512.145 425.754 511.836 425.695 511.566 cv
425.629 511.297 425.551 511.066 425.453 510.871 cv
425.355 510.68 425.238 510.52 425.102 510.391 cv
424.961 510.266 424.801 510.172 424.629 510.113 cv
424.449 510.059 424.254 510.031 424.039 510.027 cv
423.648 510.031 423.332 510.121 423.094 510.305 cv
422.848 510.488 422.656 510.742 422.52 511.059 cv
422.379 511.379 422.285 511.75 422.234 512.18 cv
422.184 512.609 422.16 513.074 422.16 513.566 cv
422.16 514.23 422.191 514.793 422.262 515.254 cv
422.328 515.723 422.438 516.102 422.59 516.391 cv
422.734 516.687 422.926 516.898 423.156 517.027 cv
423.387 517.164 423.668 517.23 424 517.227 cv
424.254 517.23 424.477 517.191 424.672 517.105 cv
424.863 517.027 425.031 516.906 425.172 516.75 cv
425.313 516.598 425.426 516.414 425.52 516.199 cv
425.605 515.984 425.68 515.746 425.738 515.484 cv
425.789 515.227 425.828 514.945 425.852 514.641 cv
425.871 514.336 425.879 514.02 425.883 513.687 cv
cp
f
492.336 517.598 mo
492.332 517.687 492.324 517.758 492.313 517.816 cv
492.297 517.879 492.277 517.93 492.258 517.961 cv
492.234 518 492.211 518.023 492.18 518.039 cv
492.148 518.055 492.117 518.062 492.09 518.062 cv
487.453 518.062 li
487.418 518.062 487.391 518.055 487.363 518.039 cv
487.336 518.023 487.309 518 487.285 517.961 cv
487.258 517.93 487.238 517.879 487.227 517.816 cv
487.211 517.758 487.203 517.687 487.207 517.598 cv
487.203 517.52 487.211 517.445 487.227 517.383 cv
487.238 517.324 487.254 517.277 487.277 517.238 cv
487.293 517.203 487.32 517.172 487.352 517.148 cv
487.383 517.129 487.414 517.121 487.453 517.117 cv
489.305 517.117 li
489.305 510.371 li
487.59 511.391 li
487.5 511.441 487.43 511.469 487.383 511.477 cv
487.328 511.484 487.285 511.477 487.254 511.445 cv
487.219 511.418 487.199 511.367 487.188 511.297 cv
487.176 511.23 487.168 511.145 487.172 511.035 cv
487.168 510.961 487.172 510.895 487.184 510.836 cv
487.188 510.785 487.199 510.738 487.215 510.699 cv
487.227 510.664 487.246 510.633 487.27 510.605 cv
487.293 510.578 487.324 510.551 487.371 510.523 cv
489.414 509.211 li
489.43 509.199 489.449 509.187 489.48 509.18 cv
489.504 509.172 489.539 509.164 489.586 509.152 cv
489.625 509.145 489.676 509.137 489.73 509.133 cv
489.785 509.133 489.852 509.133 489.938 509.129 cv
490.043 509.133 490.137 509.137 490.211 509.145 cv
490.281 509.152 490.336 509.168 490.383 509.184 cv
490.422 509.203 490.449 509.223 490.465 509.246 cv
490.473 509.273 490.48 509.297 490.484 509.32 cv
490.484 517.117 li
492.09 517.117 li
492.125 517.121 492.16 517.129 492.191 517.148 cv
492.223 517.172 492.246 517.203 492.27 517.238 cv
492.285 517.277 492.301 517.324 492.316 517.383 cv
492.324 517.445 492.332 517.52 492.336 517.598 cv
cp
f
499.395 517.555 mo
499.391 517.641 499.387 517.715 499.375 517.777 cv
499.363 517.844 499.348 517.898 499.328 517.937 cv
499.305 517.984 499.277 518.016 499.246 518.031 cv
499.211 518.055 499.172 518.062 499.133 518.062 cv
494.23 518.062 li
494.168 518.062 494.109 518.055 494.063 518.039 cv
494.012 518.023 493.973 518 493.938 517.961 cv
493.902 517.93 493.875 517.875 493.863 517.805 cv
493.844 517.734 493.836 517.648 493.84 517.547 cv
493.836 517.457 493.84 517.379 493.848 517.309 cv
493.852 517.242 493.867 517.184 493.895 517.129 cv
493.918 517.078 493.949 517.023 493.984 516.969 cv
494.02 516.918 494.063 516.863 494.121 516.801 cv
495.895 514.977 li
496.305 514.559 496.633 514.184 496.883 513.848 cv
497.129 513.52 497.32 513.215 497.453 512.937 cv
497.586 512.664 497.672 512.414 497.719 512.187 cv
497.758 511.965 497.781 511.754 497.781 511.559 cv
497.781 511.363 497.746 511.18 497.68 511 cv
497.613 510.828 497.52 510.672 497.395 510.535 cv
497.27 510.406 497.113 510.301 496.926 510.219 cv
496.738 510.145 496.52 510.105 496.273 510.102 cv
495.984 510.105 495.727 510.145 495.5 510.219 cv
495.27 510.301 495.07 510.387 494.898 510.473 cv
494.727 510.566 494.582 510.648 494.465 510.727 cv
494.348 510.805 494.262 510.844 494.211 510.844 cv
494.176 510.844 494.145 510.836 494.121 510.816 cv
494.09 510.801 494.07 510.77 494.055 510.727 cv
494.039 510.687 494.023 510.633 494.016 510.562 cv
494.004 510.496 494 510.414 494.004 510.316 cv
494 510.25 494.004 510.191 494.012 510.141 cv
494.016 510.09 494.023 510.047 494.035 510.008 cv
494.043 509.973 494.059 509.937 494.078 509.906 cv
494.098 509.875 494.133 509.836 494.191 509.785 cv
494.242 509.738 494.336 509.672 494.473 509.59 cv
494.605 509.508 494.777 509.43 494.98 509.348 cv
495.184 509.27 495.406 509.199 495.652 509.145 cv
495.895 509.09 496.152 509.062 496.426 509.062 cv
496.852 509.062 497.227 509.125 497.551 509.246 cv
497.871 509.367 498.137 509.531 498.352 509.742 cv
498.563 509.953 498.723 510.199 498.828 510.473 cv
498.934 510.754 498.988 511.051 498.988 511.363 cv
498.988 511.652 498.961 511.934 498.91 512.211 cv
498.859 512.496 498.754 512.801 498.594 513.125 cv
498.43 513.453 498.195 513.816 497.891 514.215 cv
497.582 514.617 497.176 515.078 496.672 515.594 cv
495.266 517.062 li
499.125 517.062 li
499.156 517.066 499.191 517.078 499.23 517.094 cv
499.262 517.117 499.293 517.148 499.32 517.187 cv
499.344 517.23 499.363 517.281 499.375 517.34 cv
499.387 517.406 499.391 517.477 499.395 517.555 cv
cp
f
564.957 517.598 mo
564.953 517.687 564.945 517.758 564.934 517.816 cv
564.918 517.879 564.898 517.93 564.879 517.961 cv
564.855 518 564.832 518.023 564.801 518.039 cv
564.77 518.055 564.738 518.062 564.711 518.062 cv
560.074 518.062 li
560.039 518.062 560.012 518.055 559.984 518.039 cv
559.957 518.023 559.93 518 559.906 517.961 cv
559.879 517.93 559.859 517.879 559.848 517.816 cv
559.832 517.758 559.824 517.687 559.828 517.598 cv
559.824 517.52 559.832 517.445 559.848 517.383 cv
559.859 517.324 559.875 517.277 559.898 517.238 cv
559.914 517.203 559.941 517.172 559.973 517.148 cv
560.004 517.129 560.035 517.121 560.074 517.117 cv
561.926 517.117 li
561.926 510.371 li
560.211 511.391 li
560.121 511.441 560.051 511.469 560.004 511.477 cv
559.949 511.484 559.906 511.477 559.875 511.445 cv
559.84 511.418 559.82 511.367 559.809 511.297 cv
559.797 511.23 559.789 511.145 559.793 511.035 cv
559.789 510.961 559.793 510.895 559.805 510.836 cv
559.809 510.785 559.82 510.738 559.836 510.699 cv
559.848 510.664 559.867 510.633 559.891 510.605 cv
559.914 510.578 559.945 510.551 559.992 510.523 cv
562.035 509.211 li
562.051 509.199 562.07 509.187 562.102 509.18 cv
562.125 509.172 562.16 509.164 562.207 509.152 cv
562.246 509.145 562.297 509.137 562.352 509.133 cv
562.406 509.133 562.473 509.133 562.559 509.129 cv
562.664 509.133 562.758 509.137 562.832 509.145 cv
562.902 509.152 562.957 509.168 563.004 509.184 cv
563.043 509.203 563.07 509.223 563.086 509.246 cv
563.094 509.273 563.102 509.297 563.105 509.32 cv
563.105 517.117 li
564.711 517.117 li
564.746 517.121 564.781 517.129 564.813 517.148 cv
564.844 517.172 564.867 517.203 564.891 517.238 cv
564.906 517.277 564.922 517.324 564.938 517.383 cv
564.945 517.445 564.953 517.52 564.957 517.598 cv
cp
f
572.391 515.539 mo
572.387 515.691 572.363 515.812 572.32 515.898 cv
572.273 515.988 572.211 516.031 572.129 516.027 cv
571.129 516.027 li
571.129 517.891 li
571.129 517.93 571.117 517.961 571.102 517.984 cv
571.078 518.012 571.047 518.031 571.004 518.051 cv
570.953 518.066 570.891 518.078 570.82 518.09 cv
570.742 518.098 570.648 518.102 570.531 518.105 cv
570.414 518.102 570.316 518.098 570.246 518.09 cv
570.168 518.078 570.109 518.066 570.066 518.051 cv
570.02 518.031 569.988 518.012 569.973 517.984 cv
569.953 517.961 569.945 517.93 569.949 517.891 cv
569.949 516.027 li
566.32 516.027 li
566.262 516.031 566.219 516.023 566.184 516.008 cv
566.148 515.996 566.113 515.969 566.086 515.93 cv
566.055 515.895 566.035 515.844 566.023 515.773 cv
566.012 515.707 566.008 515.617 566.008 515.504 cv
566.008 515.422 566.008 515.344 566.016 515.273 cv
566.016 515.203 566.027 515.141 566.043 515.086 cv
566.055 515.031 566.07 514.977 566.098 514.922 cv
566.117 514.867 566.145 514.812 566.18 514.75 cv
569.34 509.363 li
569.359 509.328 569.395 509.297 569.441 509.27 cv
569.484 509.242 569.539 509.219 569.613 509.199 cv
569.68 509.184 569.766 509.172 569.871 509.16 cv
569.973 509.156 570.094 509.152 570.234 509.148 cv
570.383 509.152 570.52 509.156 570.637 509.168 cv
570.75 509.18 570.84 509.195 570.914 509.211 cv
570.98 509.23 571.035 509.254 571.074 509.285 cv
571.109 509.316 571.129 509.352 571.129 509.391 cv
571.129 515.055 li
572.129 515.055 li
572.203 515.059 572.266 515.098 572.316 515.176 cv
572.363 515.258 572.387 515.379 572.391 515.539 cv
cp
569.949 510.187 mo
569.938 510.187 li
567.086 515.055 li
569.949 515.055 li
cp
f
637.555 517.598 mo
637.551 517.687 637.543 517.758 637.531 517.816 cv
637.516 517.879 637.496 517.93 637.477 517.961 cv
637.453 518 637.43 518.023 637.398 518.039 cv
637.367 518.055 637.336 518.062 637.309 518.062 cv
632.672 518.062 li
632.637 518.062 632.609 518.055 632.582 518.039 cv
632.555 518.023 632.527 518 632.504 517.961 cv
632.477 517.93 632.457 517.879 632.445 517.816 cv
632.43 517.758 632.422 517.687 632.426 517.598 cv
632.422 517.52 632.43 517.445 632.445 517.383 cv
632.457 517.324 632.473 517.277 632.496 517.238 cv
632.512 517.203 632.539 517.172 632.57 517.148 cv
632.602 517.129 632.633 517.121 632.672 517.117 cv
634.523 517.117 li
634.523 510.371 li
632.809 511.391 li
632.719 511.441 632.648 511.469 632.602 511.477 cv
632.547 511.484 632.504 511.477 632.473 511.445 cv
632.438 511.418 632.418 511.367 632.406 511.297 cv
632.395 511.23 632.387 511.145 632.391 511.035 cv
632.387 510.961 632.391 510.895 632.402 510.836 cv
632.406 510.785 632.418 510.738 632.434 510.699 cv
632.445 510.664 632.465 510.633 632.488 510.605 cv
632.512 510.578 632.543 510.551 632.59 510.523 cv
634.633 509.211 li
634.648 509.199 634.668 509.187 634.699 509.18 cv
634.723 509.172 634.758 509.164 634.805 509.152 cv
634.844 509.145 634.895 509.137 634.949 509.133 cv
635.004 509.133 635.07 509.133 635.156 509.129 cv
635.262 509.133 635.355 509.137 635.43 509.145 cv
635.5 509.152 635.555 509.168 635.602 509.184 cv
635.641 509.203 635.668 509.223 635.684 509.246 cv
635.691 509.273 635.699 509.297 635.703 509.32 cv
635.703 517.117 li
637.309 517.117 li
637.344 517.121 637.379 517.129 637.41 517.148 cv
637.441 517.172 637.465 517.203 637.488 517.238 cv
637.504 517.277 637.52 517.324 637.535 517.383 cv
637.543 517.445 637.551 517.52 637.555 517.598 cv
cp
f
644.844 515.191 mo
644.844 515.582 644.781 515.961 644.664 516.32 cv
644.539 516.687 644.355 517.004 644.113 517.277 cv
643.863 517.555 643.551 517.777 643.176 517.941 cv
642.793 518.109 642.348 518.191 641.832 518.191 cv
641.461 518.191 641.133 518.148 640.852 518.055 cv
640.566 517.969 640.32 517.836 640.109 517.664 cv
639.898 517.496 639.723 517.289 639.586 517.043 cv
639.445 516.797 639.332 516.516 639.25 516.199 cv
639.164 515.887 639.105 515.543 639.07 515.164 cv
639.031 514.793 639.012 514.391 639.016 513.957 cv
639.012 513.578 639.031 513.195 639.074 512.805 cv
639.113 512.422 639.188 512.047 639.293 511.68 cv
639.398 511.32 639.543 510.98 639.723 510.664 cv
639.902 510.348 640.129 510.07 640.402 509.836 cv
640.676 509.602 641 509.414 641.379 509.273 cv
641.758 509.137 642.199 509.07 642.703 509.066 cv
642.871 509.07 643.043 509.078 643.215 509.098 cv
643.387 509.121 643.547 509.152 643.695 509.184 cv
643.844 509.223 643.965 509.258 644.066 509.297 cv
644.164 509.336 644.23 509.371 644.266 509.395 cv
644.293 509.422 644.316 509.449 644.336 509.477 cv
644.352 509.508 644.367 509.539 644.375 509.574 cv
644.383 509.609 644.387 509.648 644.395 509.691 cv
644.395 509.734 644.398 509.789 644.402 509.852 cv
644.398 509.937 644.398 510.008 644.398 510.062 cv
644.395 510.125 644.383 510.172 644.371 510.207 cv
644.352 510.246 644.332 510.273 644.309 510.289 cv
644.281 510.309 644.25 510.316 644.211 510.316 cv
644.16 510.316 644.09 510.301 644.004 510.27 cv
643.914 510.238 643.809 510.203 643.688 510.16 cv
643.563 510.125 643.414 510.09 643.238 510.055 cv
643.063 510.027 642.859 510.012 642.629 510.008 cv
642.199 510.012 641.832 510.098 641.527 510.27 cv
641.223 510.441 640.973 510.676 640.777 510.969 cv
640.582 511.262 640.438 511.602 640.348 511.984 cv
640.25 512.375 640.195 512.777 640.188 513.195 cv
640.305 513.129 640.441 513.062 640.59 512.992 cv
640.738 512.926 640.898 512.863 641.074 512.805 cv
641.25 512.754 641.438 512.707 641.633 512.672 cv
641.828 512.641 642.039 512.625 642.266 512.621 cv
642.742 512.625 643.145 512.691 643.477 512.816 cv
643.805 512.949 644.07 513.129 644.277 513.359 cv
644.477 513.59 644.621 513.859 644.711 514.172 cv
644.797 514.484 644.844 514.824 644.844 515.191 cv
cp
643.648 515.301 mo
643.648 515.039 643.621 514.797 643.57 514.578 cv
643.516 514.363 643.426 514.18 643.305 514.023 cv
643.18 513.875 643.016 513.758 642.813 513.676 cv
642.602 513.594 642.348 513.551 642.051 513.551 cv
641.879 513.551 641.711 513.566 641.543 513.598 cv
641.371 513.629 641.207 513.672 641.051 513.719 cv
640.891 513.773 640.742 513.836 640.602 513.906 cv
640.457 513.98 640.324 514.055 640.207 514.133 cv
640.203 514.727 640.242 515.223 640.32 515.617 cv
640.395 516.016 640.504 516.332 640.648 516.57 cv
640.793 516.812 640.973 516.984 641.188 517.086 cv
641.402 517.191 641.652 517.242 641.941 517.238 cv
642.23 517.242 642.484 517.187 642.699 517.074 cv
642.914 516.969 643.09 516.82 643.234 516.633 cv
643.375 516.449 643.48 516.242 643.547 516.012 cv
643.613 515.781 643.648 515.547 643.648 515.301 cv
cp
f
16.605 381.367 mo
16.703 381.371 16.785 381.375 16.852 381.383 cv
16.926 381.395 16.984 381.414 17.027 381.437 cv
17.078 381.465 17.113 381.496 17.129 381.527 cv
17.152 381.566 17.16 381.602 17.16 381.641 cv
17.16 386.48 li
17.16 386.602 17.121 386.715 17.039 386.82 cv
16.961 386.93 16.82 386.984 16.613 386.98 cv
7.621 386.98 li
7.418 386.984 7.277 386.93 7.195 386.82 cv
7.117 386.715 7.078 386.602 7.074 386.48 cv
7.074 381.695 li
7.078 381.656 7.086 381.617 7.105 381.582 cv
7.129 381.551 7.164 381.523 7.207 381.5 cv
7.258 381.48 7.316 381.465 7.383 381.449 cv
7.457 381.437 7.543 381.43 7.645 381.43 cv
7.738 381.43 7.82 381.437 7.891 381.449 cv
7.961 381.465 8.02 381.48 8.063 381.5 cv
8.109 381.523 8.141 381.551 8.16 381.582 cv
8.184 381.617 8.195 381.656 8.191 381.695 cv
8.191 385.641 li
11.355 385.641 li
11.355 382.258 li
11.359 382.219 11.371 382.18 11.391 382.145 cv
11.418 382.113 11.449 382.086 11.488 382.059 cv
11.531 382.039 11.59 382.023 11.66 382.008 cv
11.734 382 11.82 381.992 11.914 381.992 cv
12.012 381.992 12.09 382 12.156 382.008 cv
12.227 382.023 12.281 382.039 12.32 382.059 cv
12.363 382.086 12.395 382.113 12.41 382.145 cv
12.43 382.18 12.438 382.219 12.438 382.258 cv
12.438 385.641 li
16.047 385.641 li
16.047 381.641 li
16.047 381.602 16.059 381.566 16.078 381.527 cv
16.102 381.496 16.133 381.465 16.176 381.437 cv
16.223 381.414 16.281 381.395 16.348 381.383 cv
16.418 381.375 16.504 381.371 16.605 381.367 cv
cp
f
16.965 373.301 mo
17.012 373.301 17.047 373.312 17.07 373.332 cv
17.102 373.355 17.125 373.391 17.145 373.434 cv
17.164 373.484 17.176 373.547 17.191 373.629 cv
17.199 373.711 17.207 373.816 17.207 373.937 cv
17.207 374.07 17.199 374.176 17.191 374.258 cv
17.176 374.344 17.164 374.41 17.145 374.453 cv
17.125 374.504 17.102 374.535 17.07 374.555 cv
17.047 374.578 17.012 374.59 16.965 374.586 cv
12.859 374.586 li
12.461 374.59 12.141 374.621 11.895 374.68 cv
11.652 374.746 11.441 374.836 11.262 374.953 cv
11.086 375.07 10.949 375.227 10.855 375.414 cv
10.762 375.609 10.715 375.828 10.715 376.074 cv
10.715 376.398 10.832 376.723 11.059 377.043 cv
11.293 377.367 11.625 377.703 12.063 378.055 cv
16.965 378.055 li
17.012 378.059 17.047 378.07 17.07 378.086 cv
17.102 378.109 17.125 378.141 17.145 378.187 cv
17.164 378.234 17.176 378.301 17.191 378.379 cv
17.199 378.465 17.207 378.57 17.207 378.699 cv
17.207 378.828 17.199 378.934 17.191 379.012 cv
17.176 379.098 17.164 379.164 17.145 379.211 cv
17.125 379.266 17.102 379.297 17.07 379.312 cv
17.047 379.332 17.012 379.344 16.965 379.34 cv
9.953 379.34 li
9.914 379.344 9.879 379.336 9.848 379.316 cv
9.82 379.305 9.797 379.273 9.77 379.223 cv
9.75 379.18 9.734 379.117 9.723 379.043 cv
9.719 378.973 9.715 378.879 9.711 378.754 cv
9.715 378.645 9.719 378.547 9.723 378.469 cv
9.734 378.395 9.75 378.336 9.77 378.293 cv
9.797 378.254 9.82 378.227 9.848 378.207 cv
9.879 378.191 9.914 378.184 9.953 378.18 cv
10.879 378.18 li
10.438 377.789 10.117 377.395 9.91 377 cv
9.707 376.609 9.602 376.211 9.602 375.809 cv
9.602 375.34 9.684 374.949 9.84 374.629 cv
10.004 374.312 10.215 374.051 10.477 373.852 cv
10.742 373.656 11.051 373.516 11.406 373.43 cv
11.762 373.344 12.191 373.301 12.688 373.301 cv
cp
f
13.156 364.977 mo
13.359 364.98 13.5 365.031 13.586 365.129 cv
13.672 365.234 13.715 365.352 13.715 365.477 cv
13.715 370.094 li
14.105 370.098 14.457 370.059 14.77 369.977 cv
15.082 369.902 15.352 369.77 15.57 369.586 cv
15.797 369.406 15.969 369.172 16.086 368.875 cv
16.211 368.586 16.27 368.227 16.266 367.801 cv
16.27 367.469 16.242 367.172 16.184 366.91 cv
16.133 366.648 16.07 366.422 16 366.23 cv
15.934 366.043 15.875 365.887 15.816 365.762 cv
15.766 365.641 15.738 365.547 15.734 365.484 cv
15.738 365.449 15.746 365.418 15.762 365.387 cv
15.781 365.359 15.809 365.336 15.844 365.316 cv
15.883 365.305 15.934 365.293 15.996 365.281 cv
16.063 365.277 16.141 365.273 16.234 365.27 cv
16.305 365.273 16.363 365.277 16.41 365.277 cv
16.457 365.285 16.5 365.289 16.539 365.297 cv
16.578 365.305 16.613 365.32 16.645 365.336 cv
16.676 365.359 16.707 365.383 16.734 365.406 cv
16.766 365.437 16.813 365.52 16.875 365.66 cv
16.941 365.801 17.004 365.984 17.066 366.207 cv
17.129 366.434 17.184 366.691 17.234 366.984 cv
17.281 367.277 17.305 367.59 17.309 367.922 cv
17.305 368.5 17.227 369.008 17.066 369.437 cv
16.906 369.875 16.668 370.238 16.352 370.531 cv
16.035 370.832 15.641 371.055 15.16 371.203 cv
14.684 371.352 14.125 371.426 13.488 371.426 cv
12.891 371.426 12.352 371.352 11.867 371.195 cv
11.391 371.043 10.98 370.816 10.645 370.52 cv
10.309 370.227 10.051 369.871 9.871 369.457 cv
9.691 369.043 9.602 368.578 9.602 368.062 cv
9.602 367.512 9.691 367.043 9.867 366.656 cv
10.047 366.27 10.285 365.953 10.582 365.699 cv
10.883 365.453 11.234 365.27 11.633 365.152 cv
12.039 365.039 12.469 364.98 12.922 364.977 cv
cp
12.773 366.27 mo
12.098 366.254 11.566 366.406 11.184 366.723 cv
10.801 367.039 10.609 367.508 10.605 368.125 cv
10.609 368.449 10.668 368.73 10.785 368.969 cv
10.906 369.211 11.066 369.41 11.262 369.57 cv
11.461 369.734 11.691 369.859 11.953 369.945 cv
12.215 370.035 12.488 370.086 12.773 370.094 cv
cp
f
10.41 358.91 mo
10.527 358.914 10.625 358.914 10.699 358.918 cv
10.781 358.926 10.844 358.937 10.883 358.949 cv
10.93 358.969 10.961 358.988 10.984 359.008 cv
11.008 359.035 11.02 359.066 11.02 359.105 cv
11.02 359.148 11.008 359.199 10.984 359.258 cv
10.961 359.32 10.938 359.391 10.914 359.461 cv
10.891 359.539 10.871 359.621 10.848 359.715 cv
10.832 359.809 10.82 359.91 10.816 360.02 cv
10.82 360.152 10.848 360.281 10.895 360.402 cv
10.949 360.527 11.035 360.656 11.152 360.793 cv
11.277 360.934 11.434 361.078 11.629 361.227 cv
11.824 361.379 12.066 361.547 12.352 361.727 cv
16.965 361.727 li
17.012 361.73 17.047 361.742 17.07 361.758 cv
17.102 361.781 17.125 361.812 17.145 361.859 cv
17.164 361.906 17.176 361.973 17.191 362.051 cv
17.199 362.137 17.207 362.242 17.207 362.371 cv
17.207 362.5 17.199 362.605 17.191 362.684 cv
17.176 362.77 17.164 362.836 17.145 362.883 cv
17.125 362.937 17.102 362.969 17.07 362.984 cv
17.047 363.004 17.012 363.016 16.965 363.012 cv
9.953 363.012 li
9.914 363.016 9.879 363.008 9.848 362.988 cv
9.82 362.977 9.797 362.945 9.77 362.895 cv
9.75 362.852 9.734 362.789 9.723 362.715 cv
9.719 362.645 9.715 362.551 9.711 362.426 cv
9.715 362.316 9.719 362.219 9.723 362.141 cv
9.734 362.066 9.75 362.008 9.77 361.965 cv
9.797 361.926 9.82 361.898 9.848 361.879 cv
9.879 361.863 9.914 361.855 9.953 361.852 cv
10.973 361.852 li
10.691 361.664 10.465 361.48 10.289 361.309 cv
10.113 361.141 9.973 360.98 9.871 360.828 cv
9.77 360.68 9.699 360.531 9.66 360.383 cv
9.621 360.234 9.602 360.086 9.602 359.934 cv
9.602 359.867 9.605 359.789 9.613 359.703 cv
9.621 359.617 9.637 359.527 9.656 359.434 cv
9.68 359.34 9.703 359.258 9.727 359.18 cv
9.754 359.109 9.781 359.055 9.805 359.02 cv
9.836 358.992 9.859 358.973 9.879 358.957 cv
9.906 358.949 9.938 358.937 9.969 358.93 cv
10.008 358.922 10.059 358.918 10.129 358.914 cv
10.199 358.914 10.293 358.914 10.41 358.91 cv
cp
f
10.27 351.871 mo
10.453 351.875 10.586 351.898 10.664 351.945 cv
10.746 351.996 10.785 352.059 10.785 352.133 cv
10.785 353.141 li
10.973 352.961 11.18 352.832 11.406 352.758 cv
11.633 352.687 11.867 352.652 12.109 352.648 cv
12.516 352.652 12.875 352.719 13.188 352.844 cv
13.5 352.977 13.766 353.16 13.977 353.402 cv
14.195 353.645 14.359 353.934 14.473 354.262 cv
14.59 354.598 14.648 354.965 14.645 355.367 cv
14.648 355.656 14.609 355.93 14.531 356.184 cv
14.457 356.445 14.363 356.641 14.246 356.777 cv
14.344 356.871 14.449 356.949 14.566 357.008 cv
14.688 357.07 14.824 357.102 14.977 357.098 cv
15.16 357.102 15.313 357.016 15.43 356.844 cv
15.555 356.676 15.617 356.453 15.625 356.172 cv
15.703 354.34 li
15.715 353.992 15.762 353.676 15.848 353.383 cv
15.934 353.094 16.059 352.84 16.215 352.625 cv
16.375 352.414 16.566 352.246 16.797 352.125 cv
17.031 352.008 17.301 351.949 17.605 351.945 cv
17.926 351.949 18.23 352.016 18.523 352.148 cv
18.813 352.285 19.066 352.492 19.289 352.77 cv
19.508 353.051 19.684 353.406 19.813 353.836 cv
19.938 354.266 20 354.773 20.004 355.359 cv
20 355.93 19.953 356.414 19.859 356.809 cv
19.762 357.207 19.629 357.531 19.465 357.785 cv
19.297 358.039 19.102 358.223 18.871 358.336 cv
18.637 358.453 18.383 358.512 18.117 358.508 cv
17.945 358.512 17.781 358.492 17.621 358.445 cv
17.457 358.406 17.305 358.344 17.16 358.258 cv
17.016 358.176 16.879 358.066 16.742 357.937 cv
16.613 357.812 16.48 357.668 16.352 357.496 cv
16.223 357.754 16.059 357.941 15.859 358.062 cv
15.664 358.184 15.453 358.242 15.219 358.242 cv
14.906 358.242 14.621 358.18 14.371 358.051 cv
14.121 357.922 13.898 357.762 13.699 357.566 cv
13.508 357.73 13.293 357.855 13.051 357.949 cv
12.813 358.043 12.52 358.09 12.172 358.09 cv
11.777 358.09 11.418 358.023 11.098 357.887 cv
10.781 357.754 10.516 357.566 10.297 357.324 cv
10.082 357.086 9.914 356.801 9.793 356.465 cv
9.68 356.133 9.621 355.766 9.617 355.367 cv
9.621 355.156 9.633 354.957 9.652 354.773 cv
9.68 354.59 9.711 354.418 9.75 354.254 cv
9.75 352.133 li
9.754 352.047 9.797 351.98 9.879 351.937 cv
9.969 351.895 10.098 351.875 10.27 351.871 cv
cp
12.117 353.879 mo
11.645 353.883 11.273 354.016 11 354.273 cv
10.734 354.539 10.598 354.91 10.598 355.391 cv
10.598 355.645 10.641 355.863 10.723 356.043 cv
10.809 356.23 10.922 356.383 11.066 356.504 cv
11.215 356.625 11.383 356.715 11.57 356.773 cv
11.758 356.836 11.957 356.867 12.164 356.863 cv
12.629 356.867 12.992 356.734 13.258 356.473 cv
13.523 356.211 13.656 355.844 13.652 355.367 cv
13.656 355.117 13.617 354.898 13.531 354.707 cv
13.453 354.523 13.34 354.367 13.199 354.242 cv
13.059 354.121 12.895 354.031 12.703 353.969 cv
12.52 353.914 12.324 353.883 12.117 353.879 cv
cp
17.676 353.234 mo
17.371 353.238 17.141 353.363 16.977 353.605 cv
16.816 353.855 16.727 354.187 16.715 354.605 cv
16.652 356.422 li
16.785 356.59 16.91 356.727 17.023 356.828 cv
17.141 356.937 17.25 357.02 17.359 357.082 cv
17.465 357.145 17.57 357.187 17.676 357.211 cv
17.777 357.234 17.883 357.246 17.992 357.246 cv
18.328 357.246 18.582 357.078 18.762 356.734 cv
18.934 356.395 19.023 355.914 19.023 355.297 cv
19.023 354.91 18.984 354.586 18.91 354.32 cv
18.832 354.062 18.73 353.852 18.609 353.687 cv
18.48 353.531 18.34 353.414 18.18 353.34 cv
18.02 353.273 17.852 353.238 17.676 353.234 cv
cp
f
17.16 347.02 mo
19.738 347.953 li
19.82 347.988 19.883 348.066 19.93 348.191 cv
19.973 348.32 19.996 348.516 19.996 348.773 cv
19.996 348.914 19.988 349.023 19.977 349.102 cv
19.961 349.187 19.938 349.25 19.91 349.289 cv
19.875 349.336 19.836 349.359 19.785 349.363 cv
19.73 349.371 19.668 349.359 19.598 349.324 cv
17.16 348.359 li
17.141 348.406 17.109 348.453 17.059 348.492 cv
17.016 348.539 16.965 348.566 16.91 348.578 cv
10.207 351.078 li
10.102 351.121 10.016 351.145 9.953 351.141 cv
9.891 351.145 9.844 351.121 9.805 351.078 cv
9.773 351.039 9.746 350.973 9.73 350.875 cv
9.719 350.785 9.715 350.66 9.711 350.504 cv
9.715 350.348 9.719 350.227 9.723 350.137 cv
9.734 350.051 9.746 349.98 9.766 349.926 cv
9.789 349.875 9.82 349.836 9.855 349.812 cv
9.898 349.789 9.953 349.766 10.016 349.738 cv
15.641 347.734 li
15.641 347.711 li
9.984 345.781 li
9.887 345.75 9.824 345.715 9.793 345.668 cv
9.77 345.629 9.746 345.562 9.73 345.469 cv
9.719 345.383 9.715 345.254 9.711 345.086 cv
9.715 344.941 9.719 344.82 9.73 344.727 cv
9.746 344.633 9.773 344.566 9.805 344.52 cv
9.844 344.48 9.891 344.457 9.953 344.453 cv
10.016 344.457 10.094 344.473 10.184 344.5 cv
cp
f
15.734 332.383 mo
15.82 332.383 15.891 332.387 15.953 332.391 cv
16.016 332.398 16.07 332.406 16.117 332.418 cv
16.164 332.434 16.207 332.453 16.242 332.469 cv
16.281 332.492 16.324 332.527 16.375 332.578 cv
16.426 332.633 16.504 332.742 16.609 332.906 cv
16.719 333.074 16.824 333.281 16.922 333.527 cv
17.027 333.773 17.109 334.055 17.18 334.375 cv
17.246 334.695 17.281 335.047 17.285 335.422 cv
17.281 336.082 17.176 336.672 16.957 337.199 cv
16.742 337.727 16.422 338.176 15.992 338.547 cv
15.57 338.918 15.043 339.203 14.414 339.402 cv
13.789 339.602 13.066 339.703 12.25 339.699 cv
11.414 339.703 10.672 339.594 10.016 339.379 cv
9.363 339.164 8.809 338.863 8.352 338.473 cv
7.898 338.086 7.551 337.621 7.313 337.074 cv
7.074 336.535 6.953 335.93 6.953 335.266 cv
6.953 334.977 6.98 334.695 7.035 334.418 cv
7.09 334.145 7.16 333.891 7.238 333.656 cv
7.324 333.426 7.418 333.219 7.527 333.031 cv
7.637 332.852 7.727 332.723 7.797 332.652 cv
7.867 332.582 7.922 332.539 7.957 332.516 cv
7.996 332.5 8.039 332.48 8.086 332.465 cv
8.137 332.453 8.195 332.445 8.262 332.434 cv
8.332 332.43 8.414 332.426 8.504 332.422 cv
8.609 332.426 8.695 332.43 8.766 332.437 cv
8.84 332.449 8.902 332.465 8.949 332.484 cv
9.004 332.508 9.039 332.531 9.059 332.559 cv
9.086 332.59 9.098 332.625 9.094 332.664 cv
9.098 332.738 9.047 332.844 8.941 332.973 cv
8.844 333.105 8.734 333.273 8.609 333.477 cv
8.492 333.687 8.379 333.937 8.273 334.23 cv
8.176 334.527 8.125 334.879 8.121 335.289 cv
8.125 335.742 8.215 336.152 8.391 336.52 cv
8.57 336.887 8.832 337.203 9.18 337.461 cv
9.531 337.727 9.957 337.926 10.457 338.066 cv
10.957 338.211 11.531 338.285 12.172 338.281 cv
12.816 338.285 13.383 338.215 13.871 338.074 cv
14.363 337.937 14.773 337.738 15.102 337.48 cv
15.434 337.223 15.68 336.906 15.848 336.531 cv
16.02 336.156 16.105 335.73 16.102 335.25 cv
16.105 334.852 16.055 334.5 15.953 334.199 cv
15.855 333.898 15.746 333.645 15.621 333.43 cv
15.5 333.223 15.391 333.047 15.289 332.91 cv
15.195 332.773 15.145 332.668 15.141 332.586 cv
15.145 332.555 15.152 332.523 15.164 332.492 cv
15.184 332.469 15.215 332.445 15.254 332.43 cv
15.301 332.414 15.359 332.402 15.438 332.395 cv
15.516 332.387 15.617 332.383 15.734 332.383 cv
cp
f
13.379 324.234 mo
13.957 324.238 14.484 324.312 14.961 324.461 cv
15.445 324.613 15.859 324.84 16.203 325.137 cv
16.555 325.437 16.824 325.812 17.016 326.258 cv
17.211 326.711 17.305 327.23 17.309 327.82 cv
17.305 328.398 17.223 328.902 17.051 329.328 cv
16.883 329.758 16.633 330.113 16.305 330.398 cv
15.977 330.687 15.582 330.902 15.113 331.039 cv
14.648 331.18 14.117 331.246 13.52 331.246 cv
12.953 331.246 12.426 331.176 11.945 331.027 cv
11.465 330.883 11.051 330.656 10.699 330.355 cv
10.352 330.059 10.082 329.687 9.891 329.238 cv
9.699 328.793 9.602 328.27 9.602 327.672 cv
9.602 327.094 9.688 326.594 9.859 326.164 cv
10.031 325.738 10.281 325.379 10.609 325.094 cv
10.938 324.809 11.336 324.594 11.801 324.449 cv
12.27 324.309 12.797 324.238 13.379 324.234 cv
cp
13.465 325.566 mo
13.09 325.57 12.73 325.605 12.391 325.672 cv
12.055 325.746 11.762 325.863 11.504 326.023 cv
11.254 326.187 11.051 326.406 10.898 326.684 cv
10.754 326.965 10.68 327.312 10.676 327.723 cv
10.68 328.109 10.746 328.437 10.879 328.711 cv
11.016 328.988 11.207 329.215 11.453 329.391 cv
11.699 329.57 11.992 329.703 12.328 329.785 cv
12.668 329.875 13.035 329.918 13.434 329.914 cv
13.82 329.918 14.184 329.883 14.52 329.809 cv
14.859 329.742 15.152 329.625 15.402 329.457 cv
15.656 329.293 15.859 329.07 16.004 328.793 cv
16.156 328.516 16.23 328.168 16.227 327.754 cv
16.23 327.379 16.16 327.051 16.023 326.77 cv
15.891 326.492 15.703 326.266 15.453 326.086 cv
15.211 325.91 14.918 325.781 14.582 325.695 cv
14.246 325.613 13.875 325.57 13.465 325.566 cv
cp
f
16.965 316.309 mo
17.012 316.309 17.047 316.32 17.07 316.34 cv
17.102 316.363 17.125 316.398 17.145 316.441 cv
17.164 316.492 17.176 316.555 17.191 316.637 cv
17.199 316.719 17.207 316.824 17.207 316.945 cv
17.207 317.078 17.199 317.184 17.191 317.266 cv
17.176 317.352 17.164 317.418 17.145 317.461 cv
17.125 317.512 17.102 317.543 17.07 317.562 cv
17.047 317.586 17.012 317.598 16.965 317.594 cv
12.859 317.594 li
12.461 317.598 12.141 317.629 11.895 317.687 cv
11.652 317.754 11.441 317.844 11.262 317.961 cv
11.086 318.078 10.949 318.234 10.855 318.422 cv
10.762 318.617 10.715 318.836 10.715 319.082 cv
10.715 319.406 10.832 319.73 11.059 320.051 cv
11.293 320.375 11.625 320.711 12.063 321.062 cv
16.965 321.062 li
17.012 321.066 17.047 321.078 17.07 321.094 cv
17.102 321.117 17.125 321.148 17.145 321.195 cv
17.164 321.242 17.176 321.309 17.191 321.387 cv
17.199 321.473 17.207 321.578 17.207 321.707 cv
17.207 321.836 17.199 321.941 17.191 322.02 cv
17.176 322.105 17.164 322.172 17.145 322.219 cv
17.125 322.273 17.102 322.305 17.07 322.32 cv
17.047 322.34 17.012 322.352 16.965 322.348 cv
9.953 322.348 li
9.914 322.352 9.879 322.344 9.848 322.324 cv
9.82 322.312 9.797 322.281 9.77 322.23 cv
9.75 322.187 9.734 322.125 9.723 322.051 cv
9.719 321.98 9.715 321.887 9.711 321.762 cv
9.715 321.652 9.719 321.555 9.723 321.477 cv
9.734 321.402 9.75 321.344 9.77 321.301 cv
9.797 321.262 9.82 321.234 9.848 321.215 cv
9.879 321.199 9.914 321.191 9.953 321.187 cv
10.879 321.187 li
10.438 320.797 10.117 320.402 9.91 320.008 cv
9.707 319.617 9.602 319.219 9.602 318.816 cv
9.602 318.348 9.684 317.957 9.84 317.637 cv
10.004 317.32 10.215 317.059 10.477 316.859 cv
10.742 316.664 11.051 316.523 11.406 316.437 cv
11.762 316.352 12.191 316.309 12.688 316.309 cv
cp
f
15.055 309.566 mo
15.418 309.57 15.738 309.637 16.016 309.766 cv
16.297 309.898 16.531 310.086 16.723 310.328 cv
16.918 310.574 17.063 310.867 17.16 311.203 cv
17.258 311.543 17.305 311.914 17.309 312.316 cv
17.305 312.57 17.285 312.809 17.25 313.031 cv
17.207 313.258 17.16 313.457 17.102 313.637 cv
17.043 313.816 16.98 313.969 16.914 314.094 cv
16.852 314.219 16.793 314.312 16.738 314.367 cv
16.688 314.426 16.617 314.465 16.52 314.488 cv
16.43 314.516 16.301 314.527 16.141 314.527 cv
16.043 314.527 15.961 314.523 15.891 314.512 cv
15.824 314.504 15.77 314.492 15.727 314.473 cv
15.688 314.461 15.656 314.437 15.637 314.41 cv
15.621 314.383 15.613 314.352 15.609 314.312 cv
15.613 314.258 15.648 314.172 15.715 314.059 cv
15.789 313.949 15.867 313.812 15.945 313.645 cv
16.031 313.484 16.105 313.293 16.176 313.066 cv
16.246 312.848 16.281 312.59 16.281 312.293 cv
16.281 312.078 16.258 311.879 16.211 311.699 cv
16.164 311.523 16.098 311.371 16.004 311.242 cv
15.918 311.113 15.801 311.012 15.656 310.941 cv
15.52 310.871 15.352 310.836 15.156 310.836 cv
14.961 310.836 14.797 310.887 14.66 310.988 cv
14.527 311.09 14.406 311.227 14.301 311.391 cv
14.199 311.559 14.109 311.742 14.023 311.949 cv
13.945 312.16 13.859 312.375 13.77 312.594 cv
13.684 312.812 13.582 313.027 13.469 313.238 cv
13.359 313.449 13.227 313.641 13.063 313.805 cv
12.906 313.977 12.711 314.109 12.484 314.207 cv
12.262 314.312 11.996 314.363 11.684 314.359 cv
11.41 314.363 11.145 314.309 10.891 314.199 cv
10.641 314.094 10.422 313.934 10.23 313.719 cv
10.043 313.508 9.891 313.242 9.773 312.922 cv
9.66 312.602 9.602 312.23 9.602 311.801 cv
9.602 311.617 9.617 311.43 9.648 311.242 cv
9.68 311.059 9.719 310.891 9.766 310.734 cv
9.813 310.586 9.863 310.457 9.918 310.348 cv
9.973 310.246 10.023 310.164 10.063 310.105 cv
10.109 310.055 10.145 310.02 10.172 309.996 cv
10.203 309.98 10.238 309.965 10.273 309.957 cv
10.316 309.949 10.363 309.941 10.418 309.934 cv
10.477 309.926 10.547 309.922 10.629 309.922 cv
10.719 309.922 10.797 309.926 10.859 309.934 cv
10.93 309.941 10.98 309.957 11.02 309.973 cv
11.063 309.996 11.094 310.016 11.109 310.039 cv
11.129 310.066 11.137 310.098 11.137 310.125 cv
11.137 310.176 11.109 310.242 11.051 310.328 cv
10.996 310.418 10.934 310.531 10.867 310.672 cv
10.805 310.812 10.746 310.98 10.684 311.168 cv
10.629 311.359 10.598 311.574 10.598 311.816 cv
10.598 312.039 10.625 312.23 10.672 312.395 cv
10.727 312.562 10.797 312.699 10.883 312.805 cv
10.977 312.91 11.082 312.992 11.207 313.043 cv
11.332 313.102 11.469 313.129 11.613 313.125 cv
11.816 313.129 11.984 313.078 12.121 312.973 cv
12.262 312.871 12.383 312.734 12.484 312.566 cv
12.59 312.402 12.684 312.211 12.766 311.996 cv
12.852 311.785 12.938 311.57 13.023 311.348 cv
13.113 311.129 13.215 310.91 13.32 310.691 cv
13.43 310.477 13.559 310.285 13.715 310.117 cv
13.871 309.953 14.059 309.82 14.277 309.719 cv
14.496 309.621 14.758 309.57 15.055 309.566 cv
cp
f
16.965 301.719 mo
17.012 301.723 17.047 301.73 17.07 301.746 cv
17.102 301.766 17.125 301.801 17.145 301.844 cv
17.164 301.891 17.176 301.949 17.191 302.023 cv
17.199 302.102 17.207 302.195 17.207 302.301 cv
17.207 302.426 17.199 302.523 17.191 302.594 cv
17.176 302.672 17.164 302.73 17.145 302.773 cv
17.125 302.82 17.102 302.852 17.07 302.863 cv
17.047 302.883 17.012 302.891 16.965 302.887 cv
16.039 302.887 li
16.484 303.289 16.805 303.684 17.004 304.07 cv
17.207 304.465 17.305 304.859 17.309 305.254 cv
17.305 305.727 17.23 306.121 17.074 306.437 cv
16.922 306.758 16.711 307.016 16.441 307.211 cv
16.176 307.414 15.863 307.555 15.504 307.637 cv
15.148 307.727 14.715 307.77 14.207 307.766 cv
9.953 307.766 li
9.914 307.77 9.879 307.762 9.848 307.738 cv
9.82 307.723 9.797 307.687 9.77 307.633 cv
9.75 307.586 9.734 307.516 9.723 307.43 cv
9.719 307.348 9.715 307.246 9.711 307.117 cv
9.715 306.996 9.719 306.891 9.723 306.805 cv
9.734 306.723 9.75 306.656 9.77 306.609 cv
9.797 306.562 9.82 306.527 9.848 306.504 cv
9.879 306.484 9.914 306.477 9.953 306.473 cv
14.035 306.473 li
14.449 306.477 14.777 306.445 15.023 306.383 cv
15.27 306.324 15.48 306.234 15.652 306.109 cv
15.832 305.992 15.965 305.836 16.059 305.645 cv
16.156 305.461 16.207 305.242 16.203 304.992 cv
16.207 304.672 16.09 304.352 15.859 304.027 cv
15.633 303.711 15.297 303.371 14.852 303.012 cv
9.953 303.012 li
9.914 303.012 9.879 303.004 9.848 302.984 cv
9.82 302.969 9.797 302.934 9.77 302.879 cv
9.75 302.828 9.734 302.762 9.723 302.68 cv
9.719 302.602 9.715 302.496 9.711 302.363 cv
9.715 302.242 9.719 302.137 9.723 302.051 cv
9.734 301.969 9.75 301.906 9.77 301.859 cv
9.797 301.816 9.82 301.781 9.848 301.754 cv
9.879 301.734 9.914 301.723 9.953 301.719 cv
cp
f
16.965 288.941 mo
17.012 288.945 17.047 288.953 17.07 288.973 cv
17.102 288.996 17.125 289.031 17.145 289.074 cv
17.164 289.125 17.176 289.191 17.191 289.27 cv
17.199 289.355 17.207 289.457 17.207 289.582 cv
17.207 289.715 17.199 289.824 17.191 289.902 cv
17.176 289.988 17.164 290.055 17.145 290.102 cv
17.125 290.156 17.102 290.191 17.07 290.207 cv
17.047 290.23 17.012 290.238 16.965 290.238 cv
12.703 290.238 li
12.41 290.238 12.141 290.266 11.895 290.316 cv
11.652 290.371 11.441 290.453 11.262 290.566 cv
11.086 290.68 10.949 290.824 10.855 291 cv
10.762 291.18 10.715 291.391 10.715 291.625 cv
10.715 291.922 10.832 292.219 11.059 292.516 cv
11.293 292.82 11.625 293.148 12.063 293.504 cv
16.965 293.504 li
17.012 293.508 17.047 293.52 17.07 293.535 cv
17.102 293.559 17.125 293.59 17.145 293.637 cv
17.164 293.687 17.176 293.754 17.191 293.836 cv
17.199 293.922 17.207 294.027 17.207 294.148 cv
17.207 294.27 17.199 294.371 17.191 294.457 cv
17.176 294.543 17.164 294.613 17.145 294.66 cv
17.125 294.715 17.102 294.746 17.07 294.762 cv
17.047 294.781 17.012 294.793 16.965 294.789 cv
12.703 294.789 li
12.41 294.793 12.141 294.82 11.895 294.875 cv
11.652 294.934 11.441 295.02 11.262 295.133 cv
11.086 295.246 10.949 295.391 10.855 295.562 cv
10.762 295.742 10.715 295.949 10.715 296.184 cv
10.715 296.484 10.832 296.781 11.059 297.082 cv
11.293 297.383 11.625 297.711 12.063 298.062 cv
16.965 298.062 li
17.012 298.066 17.047 298.078 17.07 298.094 cv
17.102 298.117 17.125 298.148 17.145 298.195 cv
17.164 298.242 17.176 298.309 17.191 298.387 cv
17.199 298.473 17.207 298.578 17.207 298.707 cv
17.207 298.836 17.199 298.941 17.191 299.02 cv
17.176 299.105 17.164 299.172 17.145 299.219 cv
17.125 299.273 17.102 299.305 17.07 299.32 cv
17.047 299.34 17.012 299.352 16.965 299.348 cv
9.953 299.348 li
9.914 299.352 9.879 299.344 9.848 299.324 cv
9.82 299.312 9.797 299.281 9.77 299.23 cv
9.75 299.187 9.734 299.125 9.723 299.051 cv
9.719 298.98 9.715 298.887 9.711 298.762 cv
9.715 298.652 9.719 298.555 9.723 298.477 cv
9.734 298.402 9.75 298.344 9.77 298.301 cv
9.797 298.262 9.82 298.234 9.848 298.215 cv
9.879 298.199 9.914 298.191 9.953 298.187 cv
10.879 298.187 li
10.438 297.797 10.117 297.414 9.91 297.039 cv
9.707 296.672 9.602 296.293 9.602 295.91 cv
9.602 295.621 9.637 295.363 9.703 295.129 cv
9.773 294.902 9.867 294.695 9.988 294.516 cv
10.109 294.34 10.254 294.191 10.422 294.062 cv
10.594 293.941 10.785 293.836 10.988 293.75 cv
10.738 293.52 10.523 293.297 10.344 293.086 cv
10.172 292.875 10.027 292.672 9.914 292.477 cv
9.809 292.281 9.73 292.094 9.676 291.91 cv
9.629 291.727 9.602 291.539 9.602 291.352 cv
9.602 290.898 9.684 290.52 9.84 290.215 cv
10.004 289.91 10.215 289.664 10.477 289.469 cv
10.742 289.281 11.051 289.145 11.406 289.062 cv
11.762 288.984 12.137 288.945 12.531 288.941 cv
cp
f
13.348 280.145 mo
13.965 280.148 14.516 280.215 15.004 280.344 cv
15.492 280.48 15.906 280.676 16.246 280.93 cv
16.586 281.187 16.848 281.504 17.031 281.883 cv
17.215 282.262 17.305 282.695 17.309 283.184 cv
17.305 283.395 17.285 283.59 17.246 283.762 cv
17.203 283.941 17.141 284.113 17.051 284.277 cv
16.965 284.449 16.852 284.617 16.715 284.781 cv
16.582 284.953 16.426 285.129 16.242 285.312 cv
19.746 285.312 li
19.785 285.316 19.824 285.328 19.855 285.344 cv
19.887 285.367 19.91 285.398 19.934 285.445 cv
19.949 285.492 19.965 285.559 19.98 285.637 cv
19.988 285.723 19.996 285.828 19.996 285.957 cv
19.996 286.086 19.988 286.191 19.98 286.27 cv
19.965 286.355 19.949 286.422 19.934 286.469 cv
19.91 286.523 19.887 286.555 19.855 286.57 cv
19.824 286.59 19.785 286.602 19.746 286.598 cv
9.953 286.598 li
9.906 286.602 9.871 286.594 9.84 286.574 cv
9.816 286.562 9.789 286.531 9.766 286.48 cv
9.746 286.437 9.734 286.375 9.723 286.301 cv
9.719 286.23 9.715 286.145 9.711 286.035 cv
9.715 285.93 9.719 285.84 9.723 285.766 cv
9.734 285.699 9.746 285.641 9.766 285.59 cv
9.789 285.547 9.816 285.512 9.84 285.492 cv
9.871 285.477 9.906 285.469 9.953 285.465 cv
10.895 285.465 li
10.68 285.258 10.488 285.055 10.328 284.852 cv
10.168 284.656 10.035 284.457 9.926 284.254 cv
9.82 284.059 9.738 283.852 9.684 283.641 cv
9.629 283.43 9.602 283.207 9.602 282.973 cv
9.602 282.465 9.703 282.031 9.898 281.672 cv
10.098 281.312 10.367 281.023 10.707 280.797 cv
11.055 280.574 11.453 280.406 11.906 280.301 cv
12.363 280.199 12.844 280.148 13.348 280.145 cv
cp
13.496 281.477 mo
13.145 281.48 12.797 281.508 12.457 281.559 cv
12.125 281.617 11.828 281.711 11.566 281.844 cv
11.309 281.98 11.102 282.16 10.941 282.379 cv
10.789 282.605 10.711 282.883 10.707 283.219 cv
10.711 283.387 10.734 283.551 10.781 283.711 cv
10.832 283.875 10.91 284.043 11.016 284.207 cv
11.125 284.379 11.266 284.551 11.438 284.73 cv
11.613 284.914 11.828 285.109 12.078 285.312 cv
14.867 285.312 li
15.305 284.957 15.633 284.621 15.859 284.301 cv
16.09 283.984 16.207 283.648 16.203 283.297 cv
16.207 282.973 16.129 282.695 15.969 282.461 cv
15.816 282.234 15.605 282.047 15.344 281.898 cv
15.086 281.758 14.797 281.648 14.473 281.578 cv
14.152 281.512 13.828 281.48 13.496 281.477 cv
cp
f
16.449 274.648 mo
16.605 274.648 16.723 274.66 16.809 274.68 cv
16.898 274.703 16.965 274.734 17.004 274.773 cv
17.047 274.816 17.086 274.879 17.121 274.961 cv
17.156 275.047 17.184 275.141 17.211 275.246 cv
17.23 275.355 17.25 275.469 17.27 275.586 cv
17.281 275.703 17.289 275.824 17.293 275.941 cv
17.289 276.309 17.242 276.621 17.148 276.879 cv
17.055 277.141 16.91 277.352 16.711 277.516 cv
16.52 277.684 16.273 277.805 15.973 277.879 cv
15.676 277.957 15.324 277.996 14.914 277.992 cv
10.816 277.992 li
10.816 278.973 li
10.82 279.051 10.777 279.113 10.691 279.16 cv
10.609 279.207 10.477 279.23 10.285 279.23 cv
10.191 279.23 10.109 279.227 10.039 279.211 cv
9.977 279.203 9.918 279.184 9.871 279.16 cv
9.828 279.141 9.797 279.113 9.777 279.078 cv
9.762 279.047 9.754 279.012 9.75 278.965 cv
9.75 277.992 li
8.082 277.992 li
8.051 277.996 8.016 277.984 7.98 277.965 cv
7.953 277.949 7.926 277.918 7.898 277.863 cv
7.879 277.816 7.863 277.75 7.848 277.664 cv
7.84 277.586 7.832 277.48 7.832 277.352 cv
7.832 277.223 7.84 277.117 7.848 277.035 cv
7.863 276.953 7.879 276.887 7.898 276.84 cv
7.926 276.793 7.953 276.762 7.98 276.738 cv
8.016 276.723 8.051 276.711 8.082 276.707 cv
9.75 276.707 li
9.75 274.906 li
9.754 274.867 9.762 274.832 9.777 274.797 cv
9.797 274.77 9.828 274.742 9.871 274.715 cv
9.918 274.695 9.977 274.68 10.039 274.664 cv
10.109 274.656 10.191 274.648 10.285 274.648 cv
10.477 274.648 10.609 274.672 10.691 274.719 cv
10.777 274.766 10.82 274.828 10.816 274.906 cv
10.816 276.707 li
14.73 276.707 li
15.215 276.711 15.578 276.641 15.824 276.492 cv
16.074 276.352 16.199 276.094 16.195 275.723 cv
16.199 275.609 16.188 275.504 16.16 275.406 cv
16.141 275.316 16.117 275.234 16.086 275.156 cv
16.063 275.086 16.035 275.023 16.012 274.969 cv
15.988 274.922 15.977 274.875 15.977 274.828 cv
15.977 274.805 15.984 274.777 15.996 274.754 cv
16.012 274.73 16.035 274.715 16.07 274.699 cv
16.109 274.691 16.16 274.68 16.219 274.664 cv
16.285 274.656 16.363 274.648 16.449 274.648 cv
cp
f
16.965 271.633 mo
17.012 271.637 17.047 271.648 17.07 271.664 cv
17.102 271.687 17.125 271.719 17.145 271.766 cv
17.164 271.812 17.176 271.879 17.191 271.957 cv
17.199 272.043 17.207 272.148 17.207 272.277 cv
17.207 272.406 17.199 272.512 17.191 272.59 cv
17.176 272.676 17.164 272.742 17.145 272.789 cv
17.125 272.844 17.102 272.875 17.07 272.891 cv
17.047 272.91 17.012 272.922 16.965 272.918 cv
9.953 272.918 li
9.918 272.922 9.887 272.91 9.852 272.891 cv
9.824 272.875 9.797 272.844 9.773 272.789 cv
9.754 272.742 9.738 272.676 9.727 272.59 cv
9.719 272.512 9.715 272.406 9.711 272.277 cv
9.715 272.148 9.719 272.043 9.727 271.957 cv
9.738 271.879 9.754 271.812 9.773 271.766 cv
9.797 271.719 9.824 271.687 9.852 271.664 cv
9.887 271.648 9.918 271.637 9.953 271.633 cv
cp
7.582 271.484 mo
7.887 271.484 8.094 271.543 8.199 271.656 cv
8.313 271.77 8.367 271.98 8.363 272.285 cv
8.367 272.59 8.313 272.797 8.203 272.906 cv
8.098 273.023 7.895 273.078 7.598 273.074 cv
7.297 273.078 7.094 273.02 6.984 272.902 cv
6.879 272.789 6.824 272.578 6.82 272.27 cv
6.824 271.969 6.879 271.766 6.98 271.652 cv
7.09 271.543 7.289 271.484 7.582 271.484 cv
cp
f
13.379 262.691 mo
13.957 262.695 14.484 262.77 14.961 262.918 cv
15.445 263.07 15.859 263.297 16.203 263.594 cv
16.555 263.895 16.824 264.27 17.016 264.715 cv
17.211 265.168 17.305 265.687 17.309 266.277 cv
17.305 266.855 17.223 267.359 17.051 267.785 cv
16.883 268.215 16.633 268.57 16.305 268.855 cv
15.977 269.145 15.582 269.359 15.113 269.496 cv
14.648 269.637 14.117 269.703 13.52 269.703 cv
12.953 269.703 12.426 269.633 11.945 269.484 cv
11.465 269.34 11.051 269.113 10.699 268.812 cv
10.352 268.516 10.082 268.145 9.891 267.695 cv
9.699 267.25 9.602 266.727 9.602 266.129 cv
9.602 265.551 9.688 265.051 9.859 264.621 cv
10.031 264.195 10.281 263.836 10.609 263.551 cv
10.938 263.266 11.336 263.051 11.801 262.906 cv
12.27 262.766 12.797 262.695 13.379 262.691 cv
cp
13.465 264.023 mo
13.09 264.027 12.73 264.062 12.391 264.129 cv
12.055 264.203 11.762 264.32 11.504 264.48 cv
11.254 264.645 11.051 264.863 10.898 265.141 cv
10.754 265.422 10.68 265.77 10.676 266.18 cv
10.68 266.566 10.746 266.895 10.879 267.168 cv
11.016 267.445 11.207 267.672 11.453 267.848 cv
11.699 268.027 11.992 268.16 12.328 268.242 cv
12.668 268.332 13.035 268.375 13.434 268.371 cv
13.82 268.375 14.184 268.34 14.52 268.266 cv
14.859 268.199 15.152 268.082 15.402 267.914 cv
15.656 267.75 15.859 267.527 16.004 267.25 cv
16.156 266.973 16.23 266.625 16.227 266.211 cv
16.23 265.836 16.16 265.508 16.023 265.227 cv
15.891 264.949 15.703 264.723 15.453 264.543 cv
15.211 264.367 14.918 264.238 14.582 264.152 cv
14.246 264.07 13.875 264.027 13.465 264.023 cv
cp
f
16.965 254.766 mo
17.012 254.766 17.047 254.777 17.07 254.797 cv
17.102 254.82 17.125 254.855 17.145 254.898 cv
17.164 254.949 17.176 255.012 17.191 255.094 cv
17.199 255.176 17.207 255.281 17.207 255.402 cv
17.207 255.535 17.199 255.641 17.191 255.723 cv
17.176 255.809 17.164 255.875 17.145 255.918 cv
17.125 255.969 17.102 256 17.07 256.02 cv
17.047 256.043 17.012 256.055 16.965 256.051 cv
12.859 256.051 li
12.461 256.055 12.141 256.086 11.895 256.145 cv
11.652 256.211 11.441 256.301 11.262 256.418 cv
11.086 256.535 10.949 256.691 10.855 256.879 cv
10.762 257.074 10.715 257.293 10.715 257.539 cv
10.715 257.863 10.832 258.187 11.059 258.508 cv
11.293 258.832 11.625 259.168 12.063 259.52 cv
16.965 259.52 li
17.012 259.523 17.047 259.535 17.07 259.551 cv
17.102 259.574 17.125 259.605 17.145 259.652 cv
17.164 259.699 17.176 259.766 17.191 259.844 cv
17.199 259.93 17.207 260.035 17.207 260.164 cv
17.207 260.293 17.199 260.398 17.191 260.477 cv
17.176 260.562 17.164 260.629 17.145 260.676 cv
17.125 260.73 17.102 260.762 17.07 260.777 cv
17.047 260.797 17.012 260.809 16.965 260.805 cv
9.953 260.805 li
9.914 260.809 9.879 260.801 9.848 260.781 cv
9.82 260.77 9.797 260.738 9.77 260.687 cv
9.75 260.645 9.734 260.582 9.723 260.508 cv
9.719 260.437 9.715 260.344 9.711 260.219 cv
9.715 260.109 9.719 260.012 9.723 259.934 cv
9.734 259.859 9.75 259.801 9.77 259.758 cv
9.797 259.719 9.82 259.691 9.848 259.672 cv
9.879 259.656 9.914 259.648 9.953 259.645 cv
10.879 259.645 li
10.438 259.254 10.117 258.859 9.91 258.465 cv
9.707 258.074 9.602 257.676 9.602 257.273 cv
9.602 256.805 9.684 256.414 9.84 256.094 cv
10.004 255.777 10.215 255.516 10.477 255.316 cv
10.742 255.121 11.051 254.98 11.406 254.895 cv
11.762 254.809 12.191 254.766 12.688 254.766 cv
cp
f
6.422 245.93 mo
7.469 246.426 8.539 246.793 9.637 247.035 cv
10.738 247.277 11.844 247.398 12.953 247.398 cv
14.07 247.398 15.18 247.277 16.273 247.027 cv
17.371 246.785 18.441 246.422 19.496 245.945 cv
19.555 245.922 19.609 245.91 19.656 245.902 cv
19.699 245.902 19.734 245.918 19.766 245.953 cv
19.793 245.992 19.813 246.047 19.828 246.121 cv
19.836 246.199 19.844 246.305 19.848 246.43 cv
19.844 246.527 19.84 246.605 19.84 246.672 cv
19.832 246.742 19.824 246.801 19.809 246.848 cv
19.793 246.898 19.773 246.941 19.754 246.969 cv
19.73 247.004 19.707 247.027 19.684 247.039 cv
19.152 247.32 18.617 247.566 18.074 247.777 cv
17.531 247.996 16.98 248.176 16.422 248.316 cv
15.859 248.465 15.293 248.574 14.719 248.645 cv
14.145 248.723 13.563 248.758 12.977 248.754 cv
12.391 248.758 11.813 248.719 11.238 248.633 cv
10.668 248.555 10.102 248.437 9.535 248.289 cv
8.973 248.141 8.418 247.961 7.871 247.75 cv
7.328 247.539 6.785 247.301 6.25 247.031 cv
6.23 247.027 6.215 247.012 6.195 246.988 cv
6.184 246.965 6.168 246.934 6.148 246.891 cv
6.137 246.852 6.125 246.793 6.113 246.719 cv
6.109 246.648 6.105 246.555 6.102 246.437 cv
6.105 246.32 6.113 246.227 6.125 246.148 cv
6.145 246.078 6.164 246.02 6.188 245.977 cv
6.215 245.937 6.25 245.914 6.289 245.906 cv
6.336 245.902 6.379 245.91 6.422 245.93 cv
cp
f
16.941 237.035 mo
16.988 237.039 17.023 237.047 17.055 237.062 cv
17.09 237.082 17.117 237.117 17.137 237.168 cv
17.156 237.223 17.172 237.293 17.188 237.379 cv
17.199 237.469 17.207 237.582 17.207 237.723 cv
17.207 237.902 17.199 238.051 17.184 238.164 cv
17.168 238.281 17.141 238.367 17.098 238.422 cv
17.059 238.48 17.012 238.527 16.957 238.562 cv
11.914 242.273 li
16.957 242.273 li
16.996 242.277 17.031 242.285 17.063 242.305 cv
17.098 242.328 17.125 242.367 17.141 242.414 cv
17.16 242.469 17.172 242.535 17.188 242.621 cv
17.199 242.707 17.207 242.816 17.207 242.941 cv
17.207 243.07 17.199 243.176 17.188 243.262 cv
17.172 243.352 17.16 243.422 17.141 243.473 cv
17.125 243.527 17.098 243.562 17.063 243.582 cv
17.031 243.605 16.996 243.617 16.957 243.613 cv
7.277 243.613 li
7.238 243.617 7.203 243.605 7.168 243.582 cv
7.141 243.562 7.113 243.527 7.094 243.473 cv
7.078 243.422 7.063 243.352 7.047 243.262 cv
7.035 243.176 7.031 243.07 7.027 242.941 cv
7.031 242.816 7.035 242.707 7.047 242.621 cv
7.063 242.535 7.078 242.469 7.094 242.414 cv
7.113 242.367 7.141 242.328 7.168 242.305 cv
7.203 242.285 7.238 242.277 7.277 242.273 cv
11.758 242.273 li
7.277 238.703 li
7.234 238.676 7.195 238.641 7.16 238.594 cv
7.133 238.555 7.109 238.504 7.086 238.441 cv
7.07 238.387 7.055 238.312 7.043 238.223 cv
7.035 238.141 7.031 238.031 7.027 237.895 cv
7.031 237.762 7.035 237.652 7.047 237.566 cv
7.063 237.484 7.082 237.418 7.098 237.367 cv
7.121 237.32 7.145 237.285 7.176 237.266 cv
7.207 237.25 7.242 237.242 7.277 237.238 cv
7.348 237.242 7.414 237.258 7.48 237.289 cv
7.551 237.324 7.645 237.391 7.762 237.48 cv
11.758 240.824 li
16.543 237.223 li
16.684 237.137 16.773 237.082 16.82 237.062 cv
16.871 237.047 16.914 237.039 16.941 237.035 cv
cp
f
16.965 234.223 mo
17.012 234.227 17.047 234.238 17.07 234.254 cv
17.102 234.277 17.125 234.309 17.145 234.355 cv
17.164 234.402 17.176 234.469 17.191 234.547 cv
17.199 234.633 17.207 234.738 17.207 234.867 cv
17.207 234.996 17.199 235.102 17.191 235.18 cv
17.176 235.266 17.164 235.332 17.145 235.379 cv
17.125 235.434 17.102 235.465 17.07 235.48 cv
17.047 235.5 17.012 235.512 16.965 235.508 cv
9.953 235.508 li
9.918 235.512 9.887 235.5 9.852 235.48 cv
9.824 235.465 9.797 235.434 9.773 235.379 cv
9.754 235.332 9.738 235.266 9.727 235.18 cv
9.719 235.102 9.715 234.996 9.711 234.867 cv
9.715 234.738 9.719 234.633 9.727 234.547 cv
9.738 234.469 9.754 234.402 9.773 234.355 cv
9.797 234.309 9.824 234.277 9.852 234.254 cv
9.887 234.238 9.918 234.227 9.953 234.223 cv
cp
7.582 234.074 mo
7.887 234.074 8.094 234.133 8.199 234.246 cv
8.313 234.359 8.367 234.57 8.363 234.875 cv
8.367 235.18 8.313 235.387 8.203 235.496 cv
8.098 235.613 7.895 235.668 7.598 235.664 cv
7.297 235.668 7.094 235.609 6.984 235.492 cv
6.879 235.379 6.824 235.168 6.82 234.859 cv
6.824 234.559 6.879 234.355 6.98 234.242 cv
7.09 234.133 7.289 234.074 7.582 234.074 cv
cp
f
16.965 230.52 mo
17.012 230.523 17.047 230.535 17.07 230.551 cv
17.102 230.574 17.125 230.605 17.145 230.652 cv
17.164 230.699 17.176 230.766 17.191 230.844 cv
17.199 230.93 17.207 231.035 17.207 231.164 cv
17.207 231.293 17.199 231.398 17.191 231.477 cv
17.176 231.562 17.164 231.629 17.145 231.676 cv
17.125 231.73 17.102 231.762 17.07 231.777 cv
17.047 231.797 17.012 231.809 16.965 231.805 cv
6.555 231.805 li
6.516 231.809 6.48 231.797 6.445 231.777 cv
6.418 231.762 6.391 231.73 6.367 231.676 cv
6.348 231.629 6.332 231.562 6.32 231.477 cv
6.313 231.398 6.309 231.293 6.305 231.164 cv
6.309 231.035 6.313 230.93 6.32 230.844 cv
6.332 230.766 6.348 230.699 6.367 230.652 cv
6.391 230.605 6.418 230.574 6.445 230.551 cv
6.48 230.535 6.516 230.523 6.555 230.52 cv
cp
f
13.379 221.578 mo
13.957 221.582 14.484 221.656 14.961 221.805 cv
15.445 221.957 15.859 222.184 16.203 222.48 cv
16.555 222.781 16.824 223.156 17.016 223.602 cv
17.211 224.055 17.305 224.574 17.309 225.164 cv
17.305 225.742 17.223 226.246 17.051 226.672 cv
16.883 227.102 16.633 227.457 16.305 227.742 cv
15.977 228.031 15.582 228.246 15.113 228.383 cv
14.648 228.523 14.117 228.59 13.52 228.59 cv
12.953 228.59 12.426 228.52 11.945 228.371 cv
11.465 228.227 11.051 228 10.699 227.699 cv
10.352 227.402 10.082 227.031 9.891 226.582 cv
9.699 226.137 9.602 225.613 9.602 225.016 cv
9.602 224.437 9.688 223.937 9.859 223.508 cv
10.031 223.082 10.281 222.723 10.609 222.437 cv
10.938 222.152 11.336 221.937 11.801 221.793 cv
12.27 221.652 12.797 221.582 13.379 221.578 cv
cp
13.465 222.91 mo
13.09 222.914 12.73 222.949 12.391 223.016 cv
12.055 223.09 11.762 223.207 11.504 223.367 cv
11.254 223.531 11.051 223.75 10.898 224.027 cv
10.754 224.309 10.68 224.656 10.676 225.066 cv
10.68 225.453 10.746 225.781 10.879 226.055 cv
11.016 226.332 11.207 226.559 11.453 226.734 cv
11.699 226.914 11.992 227.047 12.328 227.129 cv
12.668 227.219 13.035 227.262 13.434 227.258 cv
13.82 227.262 14.184 227.227 14.52 227.152 cv
14.859 227.086 15.152 226.969 15.402 226.801 cv
15.656 226.637 15.859 226.414 16.004 226.137 cv
16.156 225.859 16.23 225.512 16.227 225.098 cv
16.23 224.723 16.16 224.395 16.023 224.113 cv
15.891 223.836 15.703 223.609 15.453 223.43 cv
15.211 223.254 14.918 223.125 14.582 223.039 cv
14.246 222.957 13.875 222.914 13.465 222.91 cv
cp
f
16.863 206.281 mo
16.938 206.305 16.996 206.336 17.039 206.375 cv
17.086 206.418 17.121 206.477 17.141 206.547 cv
17.164 206.625 17.176 206.715 17.191 206.816 cv
17.199 206.926 17.207 207.055 17.207 207.207 cv
17.207 207.371 17.199 207.508 17.191 207.617 cv
17.176 207.73 17.164 207.824 17.141 207.895 cv
17.121 207.973 17.086 208.027 17.039 208.059 cv
16.996 208.098 16.938 208.125 16.863 208.145 cv
9.25 210.258 li
9.25 210.27 li
16.863 212.219 li
16.938 212.238 16.996 212.262 17.039 212.297 cv
17.086 212.336 17.121 212.391 17.141 212.453 cv
17.164 212.523 17.176 212.609 17.191 212.715 cv
17.199 212.824 17.207 212.961 17.207 213.125 cv
17.207 213.297 17.199 213.437 17.191 213.551 cv
17.176 213.668 17.164 213.762 17.141 213.832 cv
17.121 213.906 17.086 213.965 17.039 214 cv
16.996 214.043 16.938 214.07 16.863 214.082 cv
7.551 216.746 li
7.434 216.781 7.34 216.797 7.27 216.797 cv
7.203 216.801 7.152 216.781 7.113 216.734 cv
7.078 216.691 7.055 216.621 7.043 216.523 cv
7.035 216.426 7.031 216.293 7.027 216.125 cv
7.031 215.965 7.035 215.836 7.039 215.742 cv
7.051 215.648 7.063 215.578 7.082 215.527 cv
7.105 215.48 7.137 215.445 7.168 215.426 cv
7.207 215.41 7.254 215.398 7.309 215.383 cv
15.758 213.117 li
15.758 213.109 li
7.324 210.957 li
7.27 210.945 7.223 210.926 7.18 210.898 cv
7.145 210.879 7.113 210.84 7.09 210.785 cv
7.07 210.734 7.055 210.66 7.043 210.562 cv
7.035 210.469 7.031 210.344 7.027 210.187 cv
7.031 210.043 7.035 209.93 7.043 209.84 cv
7.055 209.758 7.07 209.687 7.09 209.633 cv
7.113 209.582 7.145 209.543 7.18 209.52 cv
7.223 209.496 7.27 209.477 7.324 209.461 cv
15.758 207.145 li
15.758 207.133 li
7.316 204.91 li
7.266 204.898 7.223 204.883 7.18 204.863 cv
7.145 204.852 7.113 204.82 7.09 204.766 cv
7.07 204.719 7.055 204.648 7.043 204.555 cv
7.035 204.469 7.031 204.348 7.027 204.191 cv
7.031 204.043 7.035 203.918 7.047 203.824 cv
7.063 203.734 7.09 203.668 7.121 203.625 cv
7.16 203.586 7.211 203.566 7.277 203.566 cv
7.348 203.57 7.441 203.586 7.559 203.609 cv
cp
f
16.973 197.25 mo
17.035 197.254 17.082 197.273 17.113 197.312 cv
17.145 197.355 17.168 197.414 17.184 197.484 cv
17.199 197.562 17.207 197.668 17.207 197.805 cv
17.207 197.941 17.199 198.051 17.184 198.129 cv
17.168 198.215 17.145 198.273 17.113 198.305 cv
17.082 198.344 17.035 198.359 16.973 198.355 cv
16.273 198.355 li
16.602 198.664 16.855 199.008 17.035 199.383 cv
17.219 199.762 17.305 200.16 17.309 200.578 cv
17.305 200.953 17.258 201.285 17.164 201.582 cv
17.066 201.879 16.93 202.133 16.746 202.344 cv
16.566 202.555 16.344 202.719 16.078 202.836 cv
15.816 202.953 15.516 203.012 15.172 203.008 cv
14.781 203.012 14.438 202.934 14.145 202.77 cv
13.855 202.613 13.613 202.379 13.422 202.074 cv
13.23 201.773 13.086 201.406 12.988 200.969 cv
12.895 200.535 12.848 200.043 12.844 199.496 cv
12.844 198.527 li
12.297 198.527 li
12.027 198.531 11.789 198.559 11.582 198.613 cv
11.375 198.672 11.203 198.766 11.063 198.891 cv
10.926 199.023 10.82 199.187 10.75 199.387 cv
10.68 199.594 10.645 199.844 10.645 200.133 cv
10.645 200.453 10.684 200.738 10.758 200.988 cv
10.836 201.246 10.918 201.465 11.008 201.652 cv
11.102 201.84 11.188 202 11.258 202.125 cv
11.336 202.258 11.371 202.352 11.371 202.41 cv
11.371 202.453 11.363 202.488 11.34 202.52 cv
11.324 202.551 11.293 202.578 11.246 202.602 cv
11.207 202.625 11.152 202.645 11.086 202.652 cv
11.023 202.668 10.953 202.672 10.871 202.668 cv
10.746 202.672 10.641 202.664 10.563 202.641 cv
10.488 202.625 10.418 202.578 10.348 202.508 cv
10.281 202.437 10.203 202.316 10.113 202.145 cv
10.023 201.973 9.941 201.777 9.863 201.555 cv
9.793 201.332 9.73 201.086 9.676 200.82 cv
9.629 200.555 9.602 200.289 9.602 200.016 cv
9.602 199.516 9.66 199.086 9.773 198.734 cv
9.891 198.383 10.059 198.098 10.277 197.875 cv
10.5 197.66 10.773 197.5 11.098 197.398 cv
11.43 197.301 11.813 197.254 12.242 197.25 cv
cp
13.77 198.527 mo
13.77 199.629 li
13.773 199.984 13.805 200.289 13.859 200.547 cv
13.922 200.809 14.008 201.023 14.125 201.195 cv
14.242 201.367 14.383 201.492 14.547 201.57 cv
14.711 201.652 14.898 201.695 15.109 201.691 cv
15.477 201.695 15.77 201.578 15.98 201.348 cv
16.199 201.117 16.305 200.793 16.305 200.375 cv
16.305 200.039 16.219 199.727 16.047 199.437 cv
15.875 199.148 15.613 198.848 15.258 198.527 cv
cp
f
16.449 191.32 mo
16.605 191.32 16.723 191.332 16.809 191.352 cv
16.898 191.375 16.965 191.406 17.004 191.445 cv
17.047 191.488 17.086 191.551 17.121 191.633 cv
17.156 191.719 17.184 191.812 17.211 191.918 cv
17.23 192.027 17.25 192.141 17.27 192.258 cv
17.281 192.375 17.289 192.496 17.293 192.613 cv
17.289 192.98 17.242 193.293 17.148 193.551 cv
17.055 193.812 16.91 194.023 16.711 194.187 cv
16.52 194.355 16.273 194.477 15.973 194.551 cv
15.676 194.629 15.324 194.668 14.914 194.664 cv
10.816 194.664 li
10.816 195.645 li
10.82 195.723 10.777 195.785 10.691 195.832 cv
10.609 195.879 10.477 195.902 10.285 195.902 cv
10.191 195.902 10.109 195.898 10.039 195.883 cv
9.977 195.875 9.918 195.855 9.871 195.832 cv
9.828 195.812 9.797 195.785 9.777 195.75 cv
9.762 195.719 9.754 195.684 9.75 195.637 cv
9.75 194.664 li
8.082 194.664 li
8.051 194.668 8.016 194.656 7.98 194.637 cv
7.953 194.621 7.926 194.59 7.898 194.535 cv
7.879 194.488 7.863 194.422 7.848 194.336 cv
7.84 194.258 7.832 194.152 7.832 194.023 cv
7.832 193.895 7.84 193.789 7.848 193.707 cv
7.863 193.625 7.879 193.559 7.898 193.512 cv
7.926 193.465 7.953 193.434 7.98 193.41 cv
8.016 193.395 8.051 193.383 8.082 193.379 cv
9.75 193.379 li
9.75 191.578 li
9.754 191.539 9.762 191.504 9.777 191.469 cv
9.797 191.441 9.828 191.414 9.871 191.387 cv
9.918 191.367 9.977 191.352 10.039 191.336 cv
10.109 191.328 10.191 191.32 10.285 191.32 cv
10.477 191.32 10.609 191.344 10.691 191.391 cv
10.777 191.437 10.82 191.5 10.816 191.578 cv
10.816 193.379 li
14.73 193.379 li
15.215 193.383 15.578 193.312 15.824 193.164 cv
16.074 193.023 16.199 192.766 16.195 192.395 cv
16.199 192.281 16.188 192.176 16.16 192.078 cv
16.141 191.988 16.117 191.906 16.086 191.828 cv
16.063 191.758 16.035 191.695 16.012 191.641 cv
15.988 191.594 15.977 191.547 15.977 191.5 cv
15.977 191.477 15.984 191.449 15.996 191.426 cv
16.012 191.402 16.035 191.387 16.07 191.371 cv
16.109 191.363 16.16 191.352 16.219 191.336 cv
16.285 191.328 16.363 191.32 16.449 191.32 cv
cp
f
16.449 186.168 mo
16.605 186.168 16.723 186.18 16.809 186.199 cv
16.898 186.223 16.965 186.254 17.004 186.293 cv
17.047 186.336 17.086 186.398 17.121 186.48 cv
17.156 186.566 17.184 186.66 17.211 186.766 cv
17.23 186.875 17.25 186.988 17.27 187.105 cv
17.281 187.223 17.289 187.344 17.293 187.461 cv
17.289 187.828 17.242 188.141 17.148 188.398 cv
17.055 188.66 16.91 188.871 16.711 189.035 cv
16.52 189.203 16.273 189.324 15.973 189.398 cv
15.676 189.477 15.324 189.516 14.914 189.512 cv
10.816 189.512 li
10.816 190.492 li
10.82 190.57 10.777 190.633 10.691 190.68 cv
10.609 190.727 10.477 190.75 10.285 190.75 cv
10.191 190.75 10.109 190.746 10.039 190.73 cv
9.977 190.723 9.918 190.703 9.871 190.68 cv
9.828 190.66 9.797 190.633 9.777 190.598 cv
9.762 190.566 9.754 190.531 9.75 190.484 cv
9.75 189.512 li
8.082 189.512 li
8.051 189.516 8.016 189.504 7.98 189.484 cv
7.953 189.469 7.926 189.437 7.898 189.383 cv
7.879 189.336 7.863 189.27 7.848 189.184 cv
7.84 189.105 7.832 189 7.832 188.871 cv
7.832 188.742 7.84 188.637 7.848 188.555 cv
7.863 188.473 7.879 188.406 7.898 188.359 cv
7.926 188.312 7.953 188.281 7.98 188.258 cv
8.016 188.242 8.051 188.23 8.082 188.227 cv
9.75 188.227 li
9.75 186.426 li
9.754 186.387 9.762 186.352 9.777 186.316 cv
9.797 186.289 9.828 186.262 9.871 186.234 cv
9.918 186.215 9.977 186.199 10.039 186.184 cv
10.109 186.176 10.191 186.168 10.285 186.168 cv
10.477 186.168 10.609 186.191 10.691 186.238 cv
10.777 186.285 10.82 186.348 10.816 186.426 cv
10.816 188.227 li
14.73 188.227 li
15.215 188.23 15.578 188.16 15.824 188.012 cv
16.074 187.871 16.199 187.613 16.195 187.242 cv
16.199 187.129 16.188 187.023 16.16 186.926 cv
16.141 186.836 16.117 186.754 16.086 186.676 cv
16.063 186.605 16.035 186.543 16.012 186.488 cv
15.988 186.441 15.977 186.395 15.977 186.348 cv
15.977 186.324 15.984 186.297 15.996 186.273 cv
16.012 186.25 16.035 186.234 16.07 186.219 cv
16.109 186.211 16.16 186.199 16.219 186.184 cv
16.285 186.176 16.363 186.168 16.449 186.168 cv
cp
f
15.055 180.035 mo
15.418 180.039 15.738 180.105 16.016 180.234 cv
16.297 180.367 16.531 180.555 16.723 180.797 cv
16.918 181.043 17.063 181.336 17.16 181.672 cv
17.258 182.012 17.305 182.383 17.309 182.785 cv
17.305 183.039 17.285 183.277 17.25 183.5 cv
17.207 183.727 17.16 183.926 17.102 184.105 cv
17.043 184.285 16.98 184.437 16.914 184.562 cv
16.852 184.687 16.793 184.781 16.738 184.836 cv
16.688 184.895 16.617 184.934 16.52 184.957 cv
16.43 184.984 16.301 184.996 16.141 184.996 cv
16.043 184.996 15.961 184.992 15.891 184.98 cv
15.824 184.973 15.77 184.961 15.727 184.941 cv
15.688 184.93 15.656 184.906 15.637 184.879 cv
15.621 184.852 15.613 184.82 15.609 184.781 cv
15.613 184.727 15.648 184.641 15.715 184.527 cv
15.789 184.418 15.867 184.281 15.945 184.113 cv
16.031 183.953 16.105 183.762 16.176 183.535 cv
16.246 183.316 16.281 183.059 16.281 182.762 cv
16.281 182.547 16.258 182.348 16.211 182.168 cv
16.164 181.992 16.098 181.84 16.004 181.711 cv
15.918 181.582 15.801 181.48 15.656 181.41 cv
15.52 181.34 15.352 181.305 15.156 181.305 cv
14.961 181.305 14.797 181.355 14.66 181.457 cv
14.527 181.559 14.406 181.695 14.301 181.859 cv
14.199 182.027 14.109 182.211 14.023 182.418 cv
13.945 182.629 13.859 182.844 13.77 183.062 cv
13.684 183.281 13.582 183.496 13.469 183.707 cv
13.359 183.918 13.227 184.109 13.063 184.273 cv
12.906 184.445 12.711 184.578 12.484 184.676 cv
12.262 184.781 11.996 184.832 11.684 184.828 cv
11.41 184.832 11.145 184.777 10.891 184.668 cv
10.641 184.562 10.422 184.402 10.23 184.187 cv
10.043 183.977 9.891 183.711 9.773 183.391 cv
9.66 183.07 9.602 182.699 9.602 182.27 cv
9.602 182.086 9.617 181.898 9.648 181.711 cv
9.68 181.527 9.719 181.359 9.766 181.203 cv
9.813 181.055 9.863 180.926 9.918 180.816 cv
9.973 180.715 10.023 180.633 10.063 180.574 cv
10.109 180.523 10.145 180.488 10.172 180.465 cv
10.203 180.449 10.238 180.434 10.273 180.426 cv
10.316 180.418 10.363 180.41 10.418 180.402 cv
10.477 180.395 10.547 180.391 10.629 180.391 cv
10.719 180.391 10.797 180.395 10.859 180.402 cv
10.93 180.41 10.98 180.426 11.02 180.441 cv
11.063 180.465 11.094 180.484 11.109 180.508 cv
11.129 180.535 11.137 180.566 11.137 180.594 cv
11.137 180.645 11.109 180.711 11.051 180.797 cv
10.996 180.887 10.934 181 10.867 181.141 cv
10.805 181.281 10.746 181.449 10.684 181.637 cv
10.629 181.828 10.598 182.043 10.598 182.285 cv
10.598 182.508 10.625 182.699 10.672 182.863 cv
10.727 183.031 10.797 183.168 10.883 183.273 cv
10.977 183.379 11.082 183.461 11.207 183.512 cv
11.332 183.57 11.469 183.598 11.613 183.594 cv
11.816 183.598 11.984 183.547 12.121 183.441 cv
12.262 183.34 12.383 183.203 12.484 183.035 cv
12.59 182.871 12.684 182.68 12.766 182.465 cv
12.852 182.254 12.938 182.039 13.023 181.816 cv
13.113 181.598 13.215 181.379 13.32 181.16 cv
13.43 180.945 13.559 180.754 13.715 180.586 cv
13.871 180.422 14.059 180.289 14.277 180.187 cv
14.496 180.09 14.758 180.039 15.055 180.035 cv
cp
f
12.977 175.59 mo
13.563 175.59 14.145 175.629 14.719 175.699 cv
15.293 175.777 15.859 175.887 16.422 176.027 cv
16.98 176.176 17.531 176.352 18.074 176.562 cv
18.617 176.773 19.152 177.02 19.684 177.297 cv
19.707 177.316 19.73 177.34 19.754 177.367 cv
19.773 177.402 19.793 177.441 19.809 177.488 cv
19.824 177.539 19.832 177.598 19.84 177.664 cv
19.84 177.734 19.844 177.816 19.848 177.906 cv
19.844 178.043 19.836 178.148 19.828 178.223 cv
19.813 178.301 19.793 178.355 19.766 178.387 cv
19.734 178.422 19.699 178.437 19.656 178.434 cv
19.609 178.434 19.555 178.418 19.496 178.391 cv
18.445 177.914 17.375 177.555 16.277 177.309 cv
15.18 177.066 14.07 176.945 12.953 176.941 cv
11.844 176.945 10.738 177.066 9.637 177.309 cv
8.539 177.555 7.469 177.922 6.422 178.406 cv
6.379 178.43 6.336 178.437 6.289 178.43 cv
6.25 178.43 6.215 178.406 6.188 178.359 cv
6.164 178.32 6.145 178.262 6.125 178.187 cv
6.113 178.117 6.105 178.02 6.102 177.898 cv
6.105 177.789 6.109 177.699 6.113 177.625 cv
6.125 177.555 6.137 177.496 6.148 177.449 cv
6.168 177.406 6.184 177.375 6.195 177.352 cv
6.215 177.336 6.23 177.32 6.25 177.305 cv
7.316 176.773 8.414 176.352 9.535 176.047 cv
10.664 175.742 11.809 175.59 12.977 175.59 cv
cp
f
275.699 535.004 mo
275.695 535.109 275.68 535.199 275.645 535.27 cv
275.609 535.348 275.563 535.406 275.508 535.449 cv
275.449 535.5 275.387 535.535 275.32 535.551 cv
275.246 535.574 275.176 535.582 275.113 535.582 cv
274.668 535.582 li
274.527 535.582 274.406 535.57 274.301 535.539 cv
274.195 535.516 274.098 535.461 274.004 535.383 cv
273.91 535.309 273.816 535.207 273.723 535.074 cv
273.629 534.945 273.527 534.781 273.422 534.578 cv
270.348 528.84 li
270.184 528.547 270.02 528.238 269.859 527.91 cv
269.691 527.59 269.539 527.273 269.402 526.965 cv
269.387 526.965 li
269.395 527.34 269.402 527.723 269.41 528.109 cv
269.414 528.5 269.414 528.887 269.418 529.27 cv
269.418 535.355 li
269.414 535.395 269.402 535.43 269.383 535.461 cv
269.359 535.496 269.324 535.523 269.273 535.539 cv
269.219 535.559 269.148 535.57 269.066 535.586 cv
268.98 535.598 268.875 535.605 268.746 535.605 cv
268.609 535.605 268.5 535.598 268.418 535.586 cv
268.332 535.57 268.266 535.559 268.219 535.539 cv
268.168 535.523 268.133 535.496 268.109 535.461 cv
268.086 535.43 268.074 535.395 268.078 535.355 cv
268.078 526.051 li
268.074 525.844 268.133 525.695 268.254 525.605 cv
268.371 525.52 268.5 525.477 268.641 525.473 cv
269.301 525.473 li
269.453 525.477 269.586 525.488 269.691 525.512 cv
269.793 525.539 269.887 525.582 269.973 525.641 cv
270.055 525.703 270.133 525.785 270.215 525.891 cv
270.289 526 270.371 526.137 270.457 526.293 cv
272.824 530.719 li
272.969 530.992 273.109 531.258 273.246 531.512 cv
273.379 531.77 273.508 532.023 273.637 532.27 cv
273.758 532.523 273.883 532.77 274.008 533.008 cv
274.129 533.25 274.25 533.492 274.375 533.734 cv
274.383 533.734 li
274.371 533.328 274.363 532.898 274.363 532.453 cv
274.355 532.008 274.355 531.582 274.359 531.172 cv
274.359 525.699 li
274.355 525.664 274.367 525.629 274.391 525.598 cv
274.414 525.566 274.449 525.539 274.504 525.516 cv
274.551 525.492 274.621 525.477 274.707 525.465 cv
274.793 525.457 274.902 525.453 275.043 525.449 cv
275.16 525.453 275.266 525.457 275.355 525.465 cv
275.441 525.477 275.508 525.492 275.559 525.516 cv
275.605 525.539 275.641 525.566 275.664 525.598 cv
275.684 525.629 275.695 525.664 275.699 525.699 cv
cp
f
284.25 535.363 mo
284.246 535.41 284.238 535.445 284.223 535.469 cv
284.203 535.5 284.168 535.523 284.125 535.543 cv
284.078 535.562 284.02 535.574 283.945 535.59 cv
283.867 535.598 283.773 535.605 283.668 535.605 cv
283.543 535.605 283.445 535.598 283.375 535.59 cv
283.297 535.574 283.238 535.562 283.195 535.543 cv
283.148 535.523 283.117 535.5 283.105 535.469 cv
283.086 535.445 283.078 535.41 283.082 535.363 cv
283.082 534.437 li
282.68 534.883 282.285 535.203 281.898 535.402 cv
281.504 535.605 281.109 535.703 280.715 535.707 cv
280.242 535.703 279.848 535.629 279.531 535.473 cv
279.211 535.32 278.953 535.109 278.758 534.84 cv
278.555 534.574 278.414 534.262 278.332 533.902 cv
278.242 533.547 278.199 533.113 278.203 532.605 cv
278.203 528.352 li
278.199 528.312 278.207 528.277 278.23 528.246 cv
278.246 528.219 278.281 528.195 278.336 528.168 cv
278.383 528.148 278.453 528.133 278.539 528.121 cv
278.621 528.117 278.723 528.113 278.852 528.109 cv
278.973 528.113 279.078 528.117 279.164 528.121 cv
279.246 528.133 279.313 528.148 279.359 528.168 cv
279.406 528.195 279.441 528.219 279.465 528.246 cv
279.484 528.277 279.492 528.312 279.496 528.352 cv
279.496 532.434 li
279.492 532.848 279.523 533.176 279.586 533.422 cv
279.645 533.668 279.734 533.879 279.859 534.051 cv
279.977 534.23 280.133 534.363 280.324 534.457 cv
280.508 534.555 280.727 534.605 280.977 534.602 cv
281.297 534.605 281.617 534.488 281.941 534.258 cv
282.258 534.031 282.598 533.695 282.957 533.25 cv
282.957 528.352 li
282.957 528.312 282.965 528.277 282.984 528.246 cv
283 528.219 283.035 528.195 283.09 528.168 cv
283.141 528.148 283.207 528.133 283.289 528.121 cv
283.367 528.117 283.473 528.113 283.605 528.109 cv
283.727 528.113 283.832 528.117 283.918 528.121 cv
284 528.133 284.063 528.148 284.109 528.168 cv
284.152 528.195 284.188 528.219 284.215 528.246 cv
284.234 528.277 284.246 528.312 284.25 528.352 cv
cp
f
297.027 535.363 mo
297.023 535.41 297.016 535.445 296.996 535.469 cv
296.973 535.5 296.938 535.523 296.895 535.543 cv
296.844 535.562 296.777 535.574 296.699 535.59 cv
296.613 535.598 296.512 535.605 296.387 535.605 cv
296.254 535.605 296.145 535.598 296.066 535.59 cv
295.98 535.574 295.914 535.562 295.867 535.543 cv
295.813 535.523 295.777 535.5 295.762 535.469 cv
295.738 535.445 295.73 535.41 295.73 535.363 cv
295.73 531.102 li
295.73 530.809 295.703 530.539 295.652 530.293 cv
295.598 530.051 295.516 529.84 295.402 529.66 cv
295.289 529.484 295.145 529.348 294.969 529.254 cv
294.789 529.16 294.578 529.113 294.344 529.113 cv
294.047 529.113 293.75 529.23 293.453 529.457 cv
293.148 529.691 292.82 530.023 292.465 530.461 cv
292.465 535.363 li
292.461 535.41 292.449 535.445 292.434 535.469 cv
292.41 535.5 292.379 535.523 292.332 535.543 cv
292.281 535.562 292.215 535.574 292.133 535.59 cv
292.047 535.598 291.941 535.605 291.82 535.605 cv
291.699 535.605 291.598 535.598 291.512 535.59 cv
291.426 535.574 291.355 535.562 291.309 535.543 cv
291.254 535.523 291.223 535.5 291.207 535.469 cv
291.188 535.445 291.176 535.41 291.18 535.363 cv
291.18 531.102 li
291.176 530.809 291.148 530.539 291.094 530.293 cv
291.035 530.051 290.949 529.84 290.836 529.66 cv
290.723 529.484 290.578 529.348 290.406 529.254 cv
290.227 529.16 290.02 529.113 289.785 529.113 cv
289.484 529.113 289.188 529.23 288.887 529.457 cv
288.586 529.691 288.258 530.023 287.906 530.461 cv
287.906 535.363 li
287.902 535.41 287.891 535.445 287.875 535.469 cv
287.852 535.5 287.82 535.523 287.773 535.543 cv
287.727 535.562 287.66 535.574 287.582 535.59 cv
287.496 535.598 287.391 535.605 287.262 535.605 cv
287.133 535.605 287.027 535.598 286.949 535.59 cv
286.863 535.574 286.797 535.562 286.75 535.543 cv
286.695 535.523 286.664 535.5 286.648 535.469 cv
286.629 535.445 286.617 535.41 286.621 535.363 cv
286.621 528.352 li
286.617 528.312 286.625 528.277 286.645 528.246 cv
286.656 528.219 286.688 528.195 286.738 528.168 cv
286.781 528.148 286.844 528.133 286.918 528.121 cv
286.988 528.117 287.082 528.113 287.207 528.109 cv
287.316 528.113 287.414 528.117 287.492 528.121 cv
287.566 528.133 287.625 528.148 287.668 528.168 cv
287.707 528.195 287.734 528.219 287.754 528.246 cv
287.77 528.277 287.777 528.312 287.781 528.352 cv
287.781 529.277 li
288.172 528.836 288.555 528.516 288.93 528.309 cv
289.297 528.105 289.676 528 290.059 528 cv
290.348 528 290.605 528.035 290.84 528.102 cv
291.066 528.172 291.273 528.266 291.453 528.387 cv
291.629 528.508 291.777 528.652 291.906 528.82 cv
292.027 528.992 292.133 529.184 292.219 529.387 cv
292.449 529.137 292.672 528.922 292.883 528.742 cv
293.094 528.57 293.297 528.426 293.492 528.312 cv
293.688 528.207 293.875 528.129 294.059 528.074 cv
294.242 528.027 294.43 528 294.617 528 cv
295.07 528 295.449 528.082 295.754 528.238 cv
296.059 528.402 296.305 528.613 296.5 528.875 cv
296.688 529.141 296.824 529.449 296.906 529.805 cv
296.984 530.16 297.023 530.535 297.027 530.93 cv
cp
f
305.824 531.762 mo
305.82 532.371 305.754 532.922 305.625 533.406 cv
305.488 533.895 305.293 534.309 305.039 534.648 cv
304.781 534.992 304.465 535.254 304.094 535.434 cv
303.719 535.617 303.293 535.703 302.809 535.707 cv
302.582 535.703 302.375 535.684 302.188 535.641 cv
302 535.594 301.813 535.523 301.633 535.426 cv
301.445 535.328 301.266 535.203 301.086 535.051 cv
300.902 534.902 300.711 534.723 300.512 534.508 cv
300.512 535.363 li
300.512 535.41 300.5 535.445 300.48 535.473 cv
300.457 535.508 300.422 535.531 300.379 535.547 cv
300.328 535.562 300.27 535.574 300.203 535.59 cv
300.129 535.598 300.039 535.605 299.934 535.605 cv
299.824 535.605 299.738 535.598 299.668 535.59 cv
299.594 535.574 299.531 535.562 299.488 535.547 cv
299.438 535.531 299.406 535.508 299.395 535.473 cv
299.375 535.445 299.367 535.41 299.371 535.363 cv
299.371 524.953 li
299.367 524.914 299.379 524.879 299.398 524.844 cv
299.414 524.816 299.445 524.789 299.5 524.766 cv
299.547 524.746 299.613 524.73 299.699 524.719 cv
299.777 524.711 299.883 524.707 300.012 524.703 cv
300.141 524.707 300.246 524.711 300.332 524.719 cv
300.41 524.73 300.477 524.746 300.523 524.766 cv
300.57 524.789 300.602 524.816 300.625 524.844 cv
300.641 524.879 300.652 524.914 300.656 524.953 cv
300.656 529.152 li
300.863 528.941 301.066 528.762 301.262 528.617 cv
301.457 528.473 301.645 528.355 301.832 528.262 cv
302.016 528.176 302.203 528.109 302.395 528.062 cv
302.578 528.023 302.777 528 302.988 528 cv
303.492 528 303.926 528.102 304.293 528.305 cv
304.652 528.508 304.945 528.781 305.172 529.117 cv
305.395 529.461 305.563 529.859 305.668 530.316 cv
305.77 530.773 305.82 531.254 305.824 531.762 cv
cp
304.492 531.91 mo
304.488 531.555 304.461 531.207 304.41 530.867 cv
304.352 530.531 304.258 530.234 304.121 529.973 cv
303.984 529.715 303.805 529.504 303.582 529.344 cv
303.355 529.187 303.074 529.109 302.742 529.105 cv
302.574 529.109 302.41 529.133 302.25 529.176 cv
302.086 529.227 301.922 529.305 301.754 529.41 cv
301.586 529.523 301.41 529.664 301.234 529.832 cv
301.051 530.008 300.859 530.223 300.656 530.477 cv
300.656 533.273 li
301.012 533.707 301.352 534.039 301.676 534.262 cv
302 534.492 302.336 534.605 302.688 534.602 cv
303.008 534.605 303.285 534.527 303.52 534.367 cv
303.746 534.215 303.934 534.008 304.078 533.746 cv
304.223 533.492 304.328 533.203 304.395 532.883 cv
304.457 532.566 304.488 532.242 304.492 531.91 cv
cp
f
313.734 531.555 mo
313.73 531.758 313.68 531.898 313.582 531.984 cv
313.477 532.07 313.359 532.113 313.234 532.113 cv
308.617 532.113 li
308.613 532.504 308.652 532.855 308.734 533.168 cv
308.809 533.48 308.941 533.75 309.125 533.969 cv
309.305 534.195 309.539 534.367 309.836 534.484 cv
310.125 534.609 310.484 534.668 310.91 534.664 cv
311.242 534.668 311.539 534.641 311.801 534.582 cv
312.063 534.531 312.289 534.469 312.48 534.398 cv
312.668 534.332 312.824 534.273 312.949 534.215 cv
313.07 534.164 313.164 534.137 313.227 534.133 cv
313.262 534.137 313.293 534.145 313.324 534.16 cv
313.352 534.18 313.375 534.207 313.395 534.242 cv
313.406 534.281 313.418 534.332 313.43 534.395 cv
313.434 534.461 313.438 534.539 313.441 534.633 cv
313.438 534.703 313.434 534.762 313.434 534.809 cv
313.426 534.855 313.422 534.898 313.414 534.937 cv
313.406 534.977 313.391 535.012 313.375 535.043 cv
313.352 535.074 313.328 535.105 313.305 535.133 cv
313.273 535.164 313.191 535.211 313.051 535.273 cv
312.91 535.34 312.727 535.402 312.504 535.465 cv
312.277 535.527 312.02 535.582 311.727 535.633 cv
311.434 535.68 311.121 535.703 310.789 535.707 cv
310.211 535.703 309.703 535.625 309.273 535.465 cv
308.836 535.305 308.473 535.066 308.18 534.75 cv
307.879 534.434 307.656 534.039 307.508 533.559 cv
307.359 533.082 307.285 532.523 307.285 531.887 cv
307.285 531.289 307.359 530.75 307.516 530.266 cv
307.668 529.789 307.895 529.379 308.191 529.043 cv
308.484 528.707 308.84 528.449 309.254 528.27 cv
309.668 528.09 310.133 528 310.648 528 cv
311.199 528 311.668 528.09 312.055 528.266 cv
312.441 528.445 312.758 528.684 313.012 528.98 cv
313.258 529.281 313.441 529.633 313.559 530.031 cv
313.672 530.437 313.73 530.867 313.734 531.32 cv
cp
312.441 531.172 mo
312.457 530.496 312.305 529.965 311.988 529.582 cv
311.672 529.199 311.203 529.008 310.586 529.004 cv
310.262 529.008 309.98 529.066 309.742 529.184 cv
309.5 529.305 309.301 529.465 309.141 529.66 cv
308.977 529.859 308.852 530.09 308.766 530.352 cv
308.676 530.613 308.625 530.887 308.617 531.172 cv
cp
f
319.801 528.809 mo
319.797 528.926 319.797 529.023 319.793 529.098 cv
319.785 529.18 319.773 529.242 319.762 529.281 cv
319.742 529.328 319.723 529.359 319.703 529.383 cv
319.676 529.406 319.645 529.418 319.605 529.418 cv
319.563 529.418 319.512 529.406 319.453 529.383 cv
319.391 529.359 319.32 529.336 319.25 529.312 cv
319.172 529.289 319.09 529.27 318.996 529.246 cv
318.902 529.23 318.801 529.219 318.691 529.215 cv
318.559 529.219 318.43 529.246 318.309 529.293 cv
318.184 529.348 318.055 529.434 317.918 529.551 cv
317.777 529.676 317.633 529.832 317.484 530.027 cv
317.332 530.223 317.164 530.465 316.984 530.75 cv
316.984 535.363 li
316.98 535.41 316.969 535.445 316.953 535.469 cv
316.93 535.5 316.898 535.523 316.852 535.543 cv
316.805 535.562 316.738 535.574 316.66 535.59 cv
316.574 535.598 316.469 535.605 316.34 535.605 cv
316.211 535.605 316.105 535.598 316.027 535.59 cv
315.941 535.574 315.875 535.562 315.828 535.543 cv
315.773 535.523 315.742 535.5 315.727 535.469 cv
315.707 535.445 315.695 535.41 315.699 535.363 cv
315.699 528.352 li
315.695 528.312 315.703 528.277 315.723 528.246 cv
315.734 528.219 315.766 528.195 315.816 528.168 cv
315.859 528.148 315.922 528.133 315.996 528.121 cv
316.066 528.117 316.16 528.113 316.285 528.109 cv
316.395 528.113 316.492 528.117 316.57 528.121 cv
316.645 528.133 316.703 528.148 316.746 528.168 cv
316.785 528.195 316.813 528.219 316.832 528.246 cv
316.848 528.277 316.855 528.312 316.859 528.352 cv
316.859 529.371 li
317.047 529.09 317.23 528.863 317.402 528.687 cv
317.57 528.512 317.73 528.371 317.883 528.27 cv
318.031 528.168 318.18 528.098 318.328 528.059 cv
318.477 528.02 318.625 528 318.777 528 cv
318.844 528 318.922 528.004 319.008 528.012 cv
319.094 528.02 319.184 528.035 319.277 528.055 cv
319.371 528.078 319.453 528.102 319.531 528.125 cv
319.602 528.152 319.656 528.18 319.691 528.203 cv
319.719 528.234 319.738 528.258 319.754 528.277 cv
319.762 528.305 319.773 528.336 319.781 528.367 cv
319.789 528.406 319.793 528.457 319.797 528.527 cv
319.797 528.598 319.797 528.691 319.801 528.809 cv
cp
f
331.559 531.777 mo
331.555 532.355 331.48 532.883 331.332 533.359 cv
331.18 533.844 330.953 534.258 330.656 534.602 cv
330.355 534.953 329.98 535.223 329.535 535.414 cv
329.082 535.609 328.563 535.703 327.973 535.707 cv
327.395 535.703 326.891 535.621 326.465 535.449 cv
326.035 535.281 325.68 535.031 325.395 534.703 cv
325.105 534.375 324.891 533.98 324.754 533.512 cv
324.613 533.047 324.547 532.516 324.547 531.918 cv
324.547 531.352 324.617 530.824 324.766 530.344 cv
324.91 529.863 325.137 529.449 325.438 529.098 cv
325.734 528.75 326.105 528.48 326.555 528.289 cv
327 528.098 327.523 528 328.121 528 cv
328.699 528 329.199 528.086 329.629 528.258 cv
330.055 528.43 330.414 528.68 330.699 529.008 cv
330.984 529.336 331.199 529.734 331.344 530.199 cv
331.484 530.668 331.555 531.195 331.559 531.777 cv
cp
330.227 531.863 mo
330.223 531.488 330.188 531.129 330.121 530.789 cv
330.047 530.453 329.93 530.16 329.77 529.902 cv
329.605 529.652 329.387 529.449 329.109 529.297 cv
328.828 529.152 328.48 529.078 328.07 529.074 cv
327.684 529.078 327.355 529.145 327.082 529.277 cv
326.805 529.414 326.578 529.605 326.402 529.852 cv
326.223 530.098 326.09 530.391 326.008 530.727 cv
325.918 531.066 325.875 531.434 325.879 531.832 cv
325.875 532.219 325.91 532.582 325.984 532.918 cv
326.051 533.258 326.168 533.551 326.336 533.801 cv
326.5 534.055 326.723 534.258 327 534.402 cv
327.277 534.555 327.625 534.629 328.039 534.625 cv
328.414 534.629 328.742 534.559 329.023 534.422 cv
329.301 534.289 329.527 534.102 329.707 533.852 cv
329.883 533.609 330.012 533.316 330.098 532.98 cv
330.18 532.645 330.223 532.273 330.227 531.863 cv
cp
f
337.289 525.465 mo
337.285 525.566 337.281 525.645 337.273 525.703 cv
337.262 525.766 337.25 525.816 337.238 525.848 cv
337.223 525.887 337.207 525.91 337.188 525.922 cv
337.164 525.937 337.137 525.945 337.109 525.941 cv
337.07 525.945 337.023 525.934 336.973 525.906 cv
336.914 525.887 336.848 525.859 336.773 525.828 cv
336.691 525.801 336.602 525.773 336.496 525.75 cv
336.387 525.727 336.262 525.715 336.129 525.715 cv
335.934 525.715 335.77 525.746 335.637 525.809 cv
335.496 525.871 335.387 525.969 335.309 526.102 cv
335.223 526.234 335.164 526.406 335.129 526.617 cv
335.09 526.828 335.07 527.086 335.074 527.383 cv
335.074 528.148 li
336.641 528.148 li
336.68 528.152 336.715 528.16 336.746 528.176 cv
336.773 528.195 336.801 528.227 336.824 528.27 cv
336.848 528.316 336.863 528.375 336.879 528.437 cv
336.887 528.508 336.895 528.59 336.898 528.684 cv
336.895 528.875 336.871 529.008 336.828 529.09 cv
336.777 529.176 336.715 529.219 336.641 529.215 cv
335.074 529.215 li
335.074 535.363 li
335.07 535.41 335.063 535.445 335.043 535.469 cv
335.02 535.5 334.984 535.523 334.938 535.543 cv
334.887 535.562 334.82 535.574 334.738 535.59 cv
334.652 535.598 334.547 535.605 334.43 535.605 cv
334.301 535.605 334.199 535.598 334.117 535.59 cv
334.031 535.574 333.965 535.562 333.918 535.543 cv
333.867 535.523 333.832 535.5 333.813 535.469 cv
333.789 535.445 333.777 535.41 333.781 535.363 cv
333.781 529.215 li
332.793 529.215 li
332.707 529.219 332.645 529.176 332.605 529.09 cv
332.563 529.008 332.539 528.875 332.543 528.684 cv
332.539 528.59 332.547 528.508 332.559 528.437 cv
332.566 528.375 332.582 528.316 332.605 528.27 cv
332.625 528.227 332.648 528.195 332.684 528.176 cv
332.711 528.16 332.75 528.152 332.793 528.148 cv
333.781 528.148 li
333.781 527.422 li
333.777 526.937 333.824 526.52 333.918 526.164 cv
334.008 525.816 334.145 525.527 334.332 525.305 cv
334.516 525.082 334.75 524.918 335.039 524.809 cv
335.32 524.703 335.656 524.648 336.043 524.648 cv
336.219 524.648 336.395 524.668 336.57 524.699 cv
336.738 524.738 336.871 524.773 336.969 524.809 cv
337.059 524.852 337.121 524.887 337.156 524.914 cv
337.184 524.949 337.211 524.988 337.234 525.035 cv
337.254 525.086 337.266 525.148 337.277 525.215 cv
337.281 525.289 337.285 525.371 337.289 525.465 cv
cp
f
347.488 532.73 mo
347.484 533.203 347.398 533.625 347.227 533.992 cv
347.051 534.367 346.809 534.68 346.5 534.934 cv
346.191 535.191 345.828 535.383 345.41 535.512 cv
344.988 535.641 344.539 535.703 344.059 535.707 cv
343.719 535.703 343.402 535.676 343.117 535.621 cv
342.828 535.562 342.574 535.496 342.348 535.41 cv
342.121 535.332 341.93 535.246 341.777 535.152 cv
341.621 535.066 341.516 534.988 341.457 534.926 cv
341.398 534.863 341.355 534.785 341.328 534.691 cv
341.297 534.598 341.281 534.469 341.285 534.305 cv
341.281 534.191 341.285 534.098 341.301 534.02 cv
341.309 533.945 341.324 533.883 341.348 533.836 cv
341.363 533.789 341.391 533.758 341.426 533.738 cv
341.453 533.723 341.488 533.715 341.531 533.711 cv
341.602 533.715 341.703 533.758 341.84 533.844 cv
341.969 533.934 342.141 534.031 342.352 534.133 cv
342.559 534.242 342.809 534.34 343.102 534.426 cv
343.395 534.52 343.734 534.562 344.121 534.562 cv
344.41 534.562 344.676 534.523 344.918 534.445 cv
345.156 534.367 345.363 534.258 345.543 534.113 cv
345.715 533.973 345.852 533.797 345.945 533.586 cv
346.039 533.379 346.086 533.145 346.086 532.879 cv
346.086 532.598 346.02 532.352 345.891 532.145 cv
345.758 531.945 345.586 531.77 345.375 531.613 cv
345.16 531.465 344.918 531.324 344.645 531.191 cv
344.371 531.066 344.09 530.934 343.809 530.801 cv
343.52 530.668 343.242 530.523 342.973 530.359 cv
342.703 530.203 342.461 530.012 342.25 529.793 cv
342.031 529.574 341.859 529.32 341.73 529.023 cv
341.594 528.734 341.527 528.383 341.531 527.969 cv
341.527 527.551 341.605 527.176 341.762 526.844 cv
341.914 526.516 342.125 526.238 342.402 526.012 cv
342.672 525.793 342.996 525.621 343.375 525.504 cv
343.75 525.387 344.16 525.328 344.598 525.328 cv
344.816 525.328 345.039 525.348 345.27 525.387 cv
345.492 525.426 345.703 525.477 345.906 525.539 cv
346.102 525.605 346.281 525.68 346.441 525.758 cv
346.594 525.84 346.695 525.906 346.75 525.953 cv
346.797 526.008 346.832 526.047 346.848 526.07 cv
346.863 526.102 346.875 526.137 346.887 526.18 cv
346.895 526.227 346.902 526.281 346.91 526.34 cv
346.914 526.406 346.918 526.484 346.918 526.582 cv
346.918 526.676 346.914 526.762 346.906 526.832 cv
346.898 526.91 346.887 526.969 346.871 527.016 cv
346.855 527.062 346.832 527.098 346.805 527.121 cv
346.773 527.145 346.742 527.156 346.707 527.156 cv
346.648 527.156 346.559 527.121 346.438 527.051 cv
346.313 526.98 346.16 526.898 345.988 526.805 cv
345.809 526.715 345.602 526.633 345.363 526.555 cv
345.117 526.48 344.848 526.441 344.551 526.441 cv
344.27 526.441 344.023 526.48 343.816 526.555 cv
343.605 526.633 343.434 526.734 343.301 526.855 cv
343.164 526.98 343.063 527.125 342.996 527.297 cv
342.93 527.469 342.898 527.652 342.898 527.844 cv
342.898 528.129 342.961 528.371 343.09 528.57 cv
343.219 528.773 343.391 528.953 343.609 529.105 cv
343.82 529.266 344.066 529.406 344.344 529.535 cv
344.617 529.668 344.898 529.801 345.188 529.93 cv
345.473 530.062 345.754 530.207 346.027 530.363 cv
346.301 530.523 346.547 530.711 346.766 530.926 cv
346.98 531.145 347.152 531.398 347.289 531.691 cv
347.418 531.984 347.484 532.332 347.488 532.73 cv
cp
f
355.254 535.363 mo
355.25 535.41 355.242 535.445 355.227 535.469 cv
355.207 535.5 355.172 535.523 355.129 535.543 cv
355.082 535.562 355.023 535.574 354.949 535.59 cv
354.871 535.598 354.777 535.605 354.672 535.605 cv
354.547 535.605 354.449 535.598 354.379 535.59 cv
354.301 535.574 354.242 535.562 354.199 535.543 cv
354.152 535.523 354.121 535.5 354.109 535.469 cv
354.09 535.445 354.082 535.41 354.086 535.363 cv
354.086 534.437 li
353.684 534.883 353.289 535.203 352.902 535.402 cv
352.508 535.605 352.113 535.703 351.719 535.707 cv
351.246 535.703 350.852 535.629 350.535 535.473 cv
350.215 535.32 349.957 535.109 349.762 534.84 cv
349.559 534.574 349.418 534.262 349.336 533.902 cv
349.246 533.547 349.203 533.113 349.207 532.605 cv
349.207 528.352 li
349.203 528.312 349.211 528.277 349.234 528.246 cv
349.25 528.219 349.285 528.195 349.34 528.168 cv
349.387 528.148 349.457 528.133 349.543 528.121 cv
349.625 528.117 349.727 528.113 349.855 528.109 cv
349.977 528.113 350.082 528.117 350.168 528.121 cv
350.25 528.133 350.316 528.148 350.363 528.168 cv
350.41 528.195 350.445 528.219 350.469 528.246 cv
350.488 528.277 350.496 528.312 350.5 528.352 cv
350.5 532.434 li
350.496 532.848 350.527 533.176 350.59 533.422 cv
350.648 533.668 350.738 533.879 350.863 534.051 cv
350.98 534.23 351.137 534.363 351.328 534.457 cv
351.512 534.555 351.73 534.605 351.98 534.602 cv
352.301 534.605 352.621 534.488 352.945 534.258 cv
353.262 534.031 353.602 533.695 353.961 533.25 cv
353.961 528.352 li
353.961 528.312 353.969 528.277 353.988 528.246 cv
354.004 528.219 354.039 528.195 354.094 528.168 cv
354.145 528.148 354.211 528.133 354.293 528.121 cv
354.371 528.117 354.477 528.113 354.609 528.109 cv
354.73 528.113 354.836 528.117 354.922 528.121 cv
355.004 528.133 355.066 528.148 355.113 528.168 cv
355.156 528.195 355.191 528.219 355.219 528.246 cv
355.238 528.277 355.25 528.312 355.254 528.352 cv
cp
f
364.113 531.762 mo
364.109 532.371 364.043 532.922 363.914 533.406 cv
363.777 533.895 363.582 534.309 363.328 534.648 cv
363.07 534.992 362.754 535.254 362.383 535.434 cv
362.008 535.617 361.582 535.703 361.098 535.707 cv
360.871 535.703 360.664 535.684 360.477 535.641 cv
360.289 535.594 360.102 535.523 359.922 535.426 cv
359.734 535.328 359.555 535.203 359.375 535.051 cv
359.191 534.902 359 534.723 358.801 534.508 cv
358.801 535.363 li
358.801 535.41 358.789 535.445 358.77 535.473 cv
358.746 535.508 358.711 535.531 358.668 535.547 cv
358.617 535.562 358.559 535.574 358.492 535.59 cv
358.418 535.598 358.328 535.605 358.223 535.605 cv
358.113 535.605 358.027 535.598 357.957 535.59 cv
357.883 535.574 357.82 535.562 357.777 535.547 cv
357.727 535.531 357.695 535.508 357.684 535.473 cv
357.664 535.445 357.656 535.41 357.66 535.363 cv
357.66 524.953 li
357.656 524.914 357.668 524.879 357.688 524.844 cv
357.703 524.816 357.734 524.789 357.789 524.766 cv
357.836 524.746 357.902 524.73 357.988 524.719 cv
358.066 524.711 358.172 524.707 358.301 524.703 cv
358.43 524.707 358.535 524.711 358.621 524.719 cv
358.699 524.73 358.766 524.746 358.813 524.766 cv
358.859 524.789 358.891 524.816 358.914 524.844 cv
358.93 524.879 358.941 524.914 358.945 524.953 cv
358.945 529.152 li
359.152 528.941 359.355 528.762 359.551 528.617 cv
359.746 528.473 359.934 528.355 360.121 528.262 cv
360.305 528.176 360.492 528.109 360.684 528.062 cv
360.867 528.023 361.066 528 361.277 528 cv
361.781 528 362.215 528.102 362.582 528.305 cv
362.941 528.508 363.234 528.781 363.461 529.117 cv
363.684 529.461 363.852 529.859 363.957 530.316 cv
364.059 530.773 364.109 531.254 364.113 531.762 cv
cp
362.781 531.91 mo
362.777 531.555 362.75 531.207 362.699 530.867 cv
362.641 530.531 362.547 530.234 362.41 529.973 cv
362.273 529.715 362.094 529.504 361.871 529.344 cv
361.645 529.187 361.363 529.109 361.031 529.105 cv
360.863 529.109 360.699 529.133 360.539 529.176 cv
360.375 529.227 360.211 529.305 360.043 529.41 cv
359.875 529.523 359.699 529.664 359.523 529.832 cv
359.34 530.008 359.148 530.223 358.945 530.477 cv
358.945 533.273 li
359.301 533.707 359.641 534.039 359.965 534.262 cv
360.289 534.492 360.625 534.605 360.977 534.602 cv
361.297 534.605 361.574 534.527 361.809 534.367 cv
362.035 534.215 362.223 534.008 362.367 533.746 cv
362.512 533.492 362.617 533.203 362.684 532.883 cv
362.746 532.566 362.777 532.242 362.781 531.91 cv
cp
f
369.27 531.625 mo
369.27 531.828 369.246 531.965 369.199 532.043 cv
369.152 532.121 369.082 532.16 368.996 532.16 cv
365.738 532.16 li
365.645 532.16 365.578 532.121 365.531 532.039 cv
365.484 531.961 365.461 531.824 365.461 531.625 cv
365.461 531.43 365.484 531.289 365.531 531.211 cv
365.578 531.133 365.645 531.094 365.738 531.094 cv
368.996 531.094 li
369.035 531.094 369.074 531.102 369.109 531.117 cv
369.141 531.133 369.168 531.164 369.195 531.207 cv
369.215 531.254 369.234 531.309 369.25 531.375 cv
369.262 531.445 369.27 531.531 369.27 531.625 cv
cp
f
372.52 535.355 mo
372.516 535.398 372.508 535.434 372.488 535.465 cv
372.465 535.496 372.426 535.523 372.379 535.539 cv
372.324 535.559 372.258 535.57 372.172 535.586 cv
372.086 535.598 371.977 535.605 371.852 535.605 cv
371.723 535.605 371.617 535.598 371.531 535.586 cv
371.441 535.57 371.371 535.559 371.32 535.539 cv
371.266 535.523 371.23 535.496 371.211 535.465 cv
371.188 535.434 371.176 535.398 371.18 535.355 cv
371.18 525.676 li
371.176 525.637 371.188 525.602 371.215 525.566 cv
371.234 525.539 371.273 525.512 371.332 525.492 cv
371.383 525.477 371.453 525.461 371.543 525.445 cv
371.625 525.434 371.727 525.43 371.852 525.426 cv
371.977 525.43 372.086 525.434 372.172 525.445 cv
372.258 525.461 372.324 525.477 372.379 525.492 cv
372.426 525.512 372.465 525.539 372.488 525.566 cv
372.508 525.602 372.516 525.637 372.52 525.676 cv
cp
f
385.508 535.363 mo
385.504 535.41 385.496 535.445 385.477 535.469 cv
385.453 535.5 385.418 535.523 385.375 535.543 cv
385.324 535.562 385.258 535.574 385.18 535.59 cv
385.094 535.598 384.992 535.605 384.867 535.605 cv
384.734 535.605 384.625 535.598 384.547 535.59 cv
384.461 535.574 384.395 535.562 384.348 535.543 cv
384.293 535.523 384.258 535.5 384.242 535.469 cv
384.219 535.445 384.211 535.41 384.211 535.363 cv
384.211 531.102 li
384.211 530.809 384.184 530.539 384.133 530.293 cv
384.078 530.051 383.996 529.84 383.883 529.66 cv
383.77 529.484 383.625 529.348 383.449 529.254 cv
383.27 529.16 383.059 529.113 382.824 529.113 cv
382.527 529.113 382.23 529.23 381.934 529.457 cv
381.629 529.691 381.301 530.023 380.945 530.461 cv
380.945 535.363 li
380.941 535.41 380.93 535.445 380.914 535.469 cv
380.891 535.5 380.859 535.523 380.813 535.543 cv
380.762 535.562 380.695 535.574 380.613 535.59 cv
380.527 535.598 380.422 535.605 380.301 535.605 cv
380.18 535.605 380.078 535.598 379.992 535.59 cv
379.906 535.574 379.836 535.562 379.789 535.543 cv
379.734 535.523 379.703 535.5 379.688 535.469 cv
379.668 535.445 379.656 535.41 379.66 535.363 cv
379.66 531.102 li
379.656 530.809 379.629 530.539 379.574 530.293 cv
379.516 530.051 379.43 529.84 379.316 529.66 cv
379.203 529.484 379.059 529.348 378.887 529.254 cv
378.707 529.16 378.5 529.113 378.266 529.113 cv
377.965 529.113 377.668 529.23 377.367 529.457 cv
377.066 529.691 376.738 530.023 376.387 530.461 cv
376.387 535.363 li
376.383 535.41 376.371 535.445 376.355 535.469 cv
376.332 535.5 376.301 535.523 376.254 535.543 cv
376.207 535.562 376.141 535.574 376.063 535.59 cv
375.977 535.598 375.871 535.605 375.742 535.605 cv
375.613 535.605 375.508 535.598 375.43 535.59 cv
375.344 535.574 375.277 535.562 375.23 535.543 cv
375.176 535.523 375.145 535.5 375.129 535.469 cv
375.109 535.445 375.098 535.41 375.102 535.363 cv
375.102 528.352 li
375.098 528.312 375.105 528.277 375.125 528.246 cv
375.137 528.219 375.168 528.195 375.219 528.168 cv
375.262 528.148 375.324 528.133 375.398 528.121 cv
375.469 528.117 375.563 528.113 375.688 528.109 cv
375.797 528.113 375.895 528.117 375.973 528.121 cv
376.047 528.133 376.105 528.148 376.148 528.168 cv
376.188 528.195 376.215 528.219 376.234 528.246 cv
376.25 528.277 376.258 528.312 376.262 528.352 cv
376.262 529.277 li
376.652 528.836 377.035 528.516 377.41 528.309 cv
377.777 528.105 378.156 528 378.539 528 cv
378.828 528 379.086 528.035 379.32 528.102 cv
379.547 528.172 379.754 528.266 379.934 528.387 cv
380.109 528.508 380.258 528.652 380.387 528.82 cv
380.508 528.992 380.613 529.184 380.699 529.387 cv
380.93 529.137 381.152 528.922 381.363 528.742 cv
381.574 528.57 381.777 528.426 381.973 528.312 cv
382.168 528.207 382.355 528.129 382.539 528.074 cv
382.723 528.027 382.91 528 383.098 528 cv
383.551 528 383.93 528.082 384.234 528.238 cv
384.539 528.402 384.785 528.613 384.98 528.875 cv
385.168 529.141 385.305 529.449 385.387 529.805 cv
385.465 530.16 385.504 530.535 385.508 530.93 cv
cp
f
393.137 535.371 mo
393.133 535.434 393.113 535.48 393.074 535.512 cv
393.031 535.543 392.973 535.566 392.902 535.582 cv
392.824 535.598 392.719 535.605 392.582 535.605 cv
392.445 535.605 392.336 535.598 392.258 535.582 cv
392.172 535.566 392.113 535.543 392.082 535.512 cv
392.043 535.48 392.027 535.434 392.031 535.371 cv
392.031 534.672 li
391.723 535 391.379 535.254 391.004 535.434 cv
390.625 535.617 390.227 535.703 389.809 535.707 cv
389.434 535.703 389.102 535.656 388.805 535.562 cv
388.508 535.465 388.254 535.328 388.043 535.145 cv
387.832 534.965 387.668 534.742 387.551 534.477 cv
387.434 534.215 387.375 533.914 387.379 533.57 cv
387.375 533.18 387.453 532.836 387.617 532.543 cv
387.773 532.254 388.008 532.012 388.313 531.82 cv
388.613 531.629 388.98 531.484 389.418 531.387 cv
389.852 531.293 390.344 531.246 390.891 531.242 cv
391.859 531.242 li
391.859 530.695 li
391.855 530.426 391.828 530.187 391.773 529.98 cv
391.715 529.773 391.621 529.602 391.496 529.461 cv
391.363 529.324 391.199 529.219 391 529.148 cv
390.793 529.078 390.543 529.043 390.254 529.043 cv
389.934 529.043 389.648 529.082 389.398 529.156 cv
389.141 529.234 388.922 529.316 388.734 529.406 cv
388.547 529.5 388.387 529.586 388.262 529.656 cv
388.129 529.734 388.035 529.77 387.977 529.77 cv
387.934 529.77 387.898 529.762 387.867 529.738 cv
387.836 529.723 387.809 529.691 387.785 529.645 cv
387.762 529.605 387.742 529.551 387.734 529.484 cv
387.719 529.422 387.715 529.352 387.719 529.27 cv
387.715 529.145 387.723 529.039 387.746 528.961 cv
387.762 528.887 387.809 528.816 387.879 528.746 cv
387.949 528.68 388.07 528.602 388.242 528.512 cv
388.414 528.422 388.609 528.34 388.832 528.262 cv
389.055 528.191 389.301 528.129 389.566 528.074 cv
389.832 528.027 390.098 528 390.371 528 cv
390.871 528 391.301 528.059 391.652 528.172 cv
392.004 528.289 392.289 528.457 392.512 528.676 cv
392.727 528.898 392.887 529.172 392.988 529.496 cv
393.086 529.828 393.133 530.211 393.137 530.641 cv
cp
391.859 532.168 mo
390.758 532.168 li
390.402 532.172 390.098 532.203 389.84 532.258 cv
389.578 532.32 389.363 532.406 389.191 532.523 cv
389.02 532.641 388.895 532.781 388.816 532.945 cv
388.734 533.109 388.691 533.297 388.695 533.508 cv
388.691 533.875 388.809 534.168 389.039 534.379 cv
389.27 534.598 389.594 534.703 390.012 534.703 cv
390.348 534.703 390.66 534.617 390.949 534.445 cv
391.238 534.273 391.539 534.012 391.859 533.656 cv
cp
f
401.359 528.668 mo
401.355 528.852 401.332 528.984 401.285 529.062 cv
401.234 529.145 401.172 529.184 401.098 529.184 cv
400.09 529.184 li
400.27 529.371 400.398 529.578 400.473 529.805 cv
400.543 530.031 400.578 530.266 400.582 530.508 cv
400.578 530.914 400.512 531.273 400.387 531.586 cv
400.254 531.898 400.07 532.164 399.828 532.375 cv
399.586 532.594 399.297 532.758 398.969 532.871 cv
398.633 532.988 398.266 533.047 397.863 533.043 cv
397.574 533.047 397.301 533.008 397.047 532.93 cv
396.785 532.855 396.59 532.762 396.453 532.645 cv
396.359 532.742 396.281 532.848 396.223 532.965 cv
396.16 533.086 396.129 533.223 396.133 533.375 cv
396.129 533.559 396.215 533.711 396.387 533.828 cv
396.555 533.953 396.777 534.016 397.059 534.023 cv
398.891 534.102 li
399.238 534.113 399.555 534.16 399.848 534.246 cv
400.137 534.332 400.391 534.457 400.605 534.613 cv
400.816 534.773 400.984 534.965 401.105 535.195 cv
401.223 535.43 401.281 535.699 401.285 536.004 cv
401.281 536.324 401.215 536.629 401.082 536.922 cv
400.945 537.211 400.738 537.465 400.461 537.687 cv
400.18 537.906 399.824 538.082 399.395 538.211 cv
398.965 538.336 398.457 538.398 397.871 538.402 cv
397.301 538.398 396.816 538.352 396.422 538.258 cv
396.023 538.16 395.699 538.027 395.445 537.863 cv
395.191 537.695 395.008 537.5 394.895 537.27 cv
394.777 537.035 394.719 536.781 394.723 536.516 cv
394.719 536.344 394.738 536.18 394.785 536.02 cv
394.824 535.855 394.887 535.703 394.973 535.559 cv
395.055 535.414 395.164 535.277 395.293 535.141 cv
395.418 535.012 395.563 534.879 395.734 534.75 cv
395.477 534.621 395.289 534.457 395.168 534.258 cv
395.047 534.062 394.988 533.852 394.988 533.617 cv
394.988 533.305 395.051 533.02 395.18 532.77 cv
395.309 532.52 395.469 532.297 395.664 532.098 cv
395.5 531.906 395.375 531.691 395.281 531.449 cv
395.188 531.211 395.141 530.918 395.141 530.57 cv
395.141 530.176 395.207 529.816 395.344 529.496 cv
395.477 529.18 395.664 528.914 395.906 528.695 cv
396.145 528.48 396.43 528.312 396.766 528.191 cv
397.098 528.078 397.465 528.02 397.863 528.016 cv
398.074 528.02 398.273 528.031 398.457 528.051 cv
398.641 528.078 398.813 528.109 398.977 528.148 cv
401.098 528.148 li
401.184 528.152 401.25 528.195 401.293 528.277 cv
401.336 528.367 401.355 528.496 401.359 528.668 cv
cp
399.352 530.516 mo
399.348 530.043 399.215 529.672 398.957 529.398 cv
398.691 529.133 398.32 528.996 397.84 528.996 cv
397.586 528.996 397.367 529.039 397.188 529.121 cv
397 529.207 396.848 529.32 396.727 529.465 cv
396.605 529.613 396.516 529.781 396.457 529.969 cv
396.395 530.156 396.363 530.355 396.367 530.562 cv
396.363 531.027 396.496 531.391 396.758 531.656 cv
397.02 531.922 397.387 532.055 397.863 532.051 cv
398.113 532.055 398.332 532.016 398.523 531.93 cv
398.707 531.852 398.863 531.738 398.988 531.598 cv
399.109 531.457 399.199 531.293 399.262 531.102 cv
399.316 530.918 399.348 530.723 399.352 530.516 cv
cp
399.996 536.074 mo
399.992 535.77 399.867 535.539 399.625 535.375 cv
399.375 535.215 399.043 535.125 398.625 535.113 cv
396.809 535.051 li
396.641 535.184 396.504 535.309 396.402 535.422 cv
396.293 535.539 396.211 535.648 396.148 535.758 cv
396.086 535.863 396.043 535.969 396.02 536.074 cv
395.996 536.176 395.984 536.281 395.984 536.391 cv
395.984 536.727 396.152 536.98 396.496 537.16 cv
396.836 537.332 397.316 537.422 397.934 537.422 cv
398.32 537.422 398.645 537.383 398.91 537.309 cv
399.168 537.23 399.379 537.129 399.543 537.008 cv
399.699 536.879 399.816 536.738 399.891 536.578 cv
399.957 536.418 399.992 536.25 399.996 536.074 cv
cp
f
408.918 531.555 mo
408.914 531.758 408.863 531.898 408.766 531.984 cv
408.66 532.07 408.543 532.113 408.418 532.113 cv
403.801 532.113 li
403.797 532.504 403.836 532.855 403.918 533.168 cv
403.992 533.48 404.125 533.75 404.309 533.969 cv
404.488 534.195 404.723 534.367 405.02 534.484 cv
405.309 534.609 405.668 534.668 406.094 534.664 cv
406.426 534.668 406.723 534.641 406.984 534.582 cv
407.246 534.531 407.473 534.469 407.664 534.398 cv
407.852 534.332 408.008 534.273 408.133 534.215 cv
408.254 534.164 408.348 534.137 408.41 534.133 cv
408.445 534.137 408.477 534.145 408.508 534.16 cv
408.535 534.18 408.559 534.207 408.578 534.242 cv
408.59 534.281 408.602 534.332 408.613 534.395 cv
408.617 534.461 408.621 534.539 408.625 534.633 cv
408.621 534.703 408.617 534.762 408.617 534.809 cv
408.609 534.855 408.605 534.898 408.598 534.937 cv
408.59 534.977 408.574 535.012 408.559 535.043 cv
408.535 535.074 408.512 535.105 408.488 535.133 cv
408.457 535.164 408.375 535.211 408.234 535.273 cv
408.094 535.34 407.91 535.402 407.688 535.465 cv
407.461 535.527 407.203 535.582 406.91 535.633 cv
406.617 535.68 406.305 535.703 405.973 535.707 cv
405.395 535.703 404.887 535.625 404.457 535.465 cv
404.02 535.305 403.656 535.066 403.363 534.75 cv
403.063 534.434 402.84 534.039 402.691 533.559 cv
402.543 533.082 402.469 532.523 402.469 531.887 cv
402.469 531.289 402.543 530.75 402.699 530.266 cv
402.852 529.789 403.078 529.379 403.375 529.043 cv
403.668 528.707 404.023 528.449 404.438 528.27 cv
404.852 528.09 405.316 528 405.832 528 cv
406.383 528 406.852 528.09 407.238 528.266 cv
407.625 528.445 407.941 528.684 408.195 528.98 cv
408.441 529.281 408.625 529.633 408.742 530.031 cv
408.855 530.437 408.914 530.867 408.918 531.32 cv
cp
407.625 531.172 mo
407.641 530.496 407.488 529.965 407.172 529.582 cv
406.855 529.199 406.387 529.008 405.77 529.004 cv
405.445 529.008 405.164 529.066 404.926 529.184 cv
404.684 529.305 404.484 529.465 404.324 529.66 cv
404.16 529.859 404.035 530.09 403.949 530.352 cv
403.859 530.613 403.809 530.887 403.801 531.172 cv
cp
f
415.285 533.453 mo
415.281 533.816 415.215 534.137 415.086 534.414 cv
414.953 534.695 414.766 534.93 414.523 535.121 cv
414.277 535.316 413.984 535.461 413.648 535.559 cv
413.309 535.656 412.938 535.703 412.535 535.707 cv
412.281 535.703 412.043 535.684 411.82 535.648 cv
411.594 535.605 411.395 535.559 411.215 535.5 cv
411.035 535.441 410.883 535.379 410.758 535.312 cv
410.633 535.25 410.539 535.191 410.484 535.137 cv
410.426 535.086 410.387 535.016 410.363 534.918 cv
410.336 534.828 410.324 534.699 410.324 534.539 cv
410.324 534.441 410.328 534.359 410.34 534.289 cv
410.348 534.223 410.359 534.168 410.379 534.125 cv
410.391 534.086 410.414 534.055 410.441 534.035 cv
410.469 534.02 410.5 534.012 410.539 534.008 cv
410.594 534.012 410.68 534.047 410.793 534.113 cv
410.902 534.187 411.039 534.266 411.207 534.344 cv
411.367 534.43 411.559 534.504 411.785 534.574 cv
412.004 534.645 412.262 534.68 412.559 534.68 cv
412.773 534.68 412.973 534.656 413.152 534.609 cv
413.328 534.562 413.48 534.496 413.609 534.402 cv
413.738 534.316 413.84 534.199 413.91 534.055 cv
413.98 533.918 414.016 533.75 414.016 533.555 cv
414.016 533.359 413.965 533.195 413.863 533.059 cv
413.762 532.926 413.625 532.805 413.461 532.699 cv
413.293 532.598 413.109 532.508 412.902 532.422 cv
412.691 532.344 412.477 532.258 412.258 532.168 cv
412.039 532.082 411.824 531.98 411.613 531.867 cv
411.402 531.758 411.211 531.625 411.047 531.461 cv
410.875 531.305 410.742 531.109 410.645 530.883 cv
410.539 530.66 410.488 530.395 410.492 530.082 cv
410.488 529.809 410.543 529.543 410.652 529.289 cv
410.758 529.039 410.918 528.82 411.133 528.629 cv
411.344 528.441 411.609 528.289 411.93 528.172 cv
412.25 528.059 412.621 528 413.051 528 cv
413.234 528 413.422 528.016 413.609 528.047 cv
413.793 528.078 413.961 528.117 414.117 528.164 cv
414.266 528.211 414.395 528.262 414.504 528.316 cv
414.605 528.371 414.688 528.422 414.746 528.461 cv
414.797 528.508 414.832 528.543 414.855 528.57 cv
414.871 528.602 414.887 528.637 414.895 528.672 cv
414.902 528.715 414.91 528.762 414.918 528.816 cv
414.926 528.875 414.93 528.945 414.93 529.027 cv
414.93 529.117 414.926 529.195 414.918 529.258 cv
414.91 529.328 414.895 529.379 414.879 529.418 cv
414.855 529.461 414.836 529.492 414.813 529.508 cv
414.785 529.527 414.754 529.535 414.727 529.535 cv
414.676 529.535 414.609 529.508 414.523 529.449 cv
414.434 529.395 414.32 529.332 414.18 529.266 cv
414.039 529.203 413.871 529.145 413.684 529.082 cv
413.492 529.027 413.277 528.996 413.035 528.996 cv
412.813 528.996 412.621 529.023 412.457 529.07 cv
412.289 529.125 412.152 529.195 412.047 529.281 cv
411.941 529.375 411.859 529.48 411.809 529.605 cv
411.75 529.73 411.723 529.867 411.727 530.012 cv
411.723 530.215 411.773 530.383 411.879 530.52 cv
411.98 530.66 412.117 530.781 412.285 530.883 cv
412.449 530.988 412.641 531.082 412.855 531.164 cv
413.066 531.25 413.281 531.336 413.504 531.422 cv
413.723 531.512 413.941 531.613 414.16 531.719 cv
414.375 531.828 414.566 531.957 414.734 532.113 cv
414.898 532.27 415.031 532.457 415.133 532.676 cv
415.23 532.895 415.281 533.156 415.285 533.453 cv
cp
f
244.023 16.34 mo
244.02 16.492 244.016 16.617 244.004 16.715 cv
243.988 16.82 243.969 16.902 243.945 16.961 cv
243.922 17.027 243.891 17.074 243.852 17.098 cv
243.813 17.129 243.77 17.141 243.723 17.141 cv
238.656 17.141 li
238.48 17.141 238.336 17.09 238.223 16.988 cv
238.102 16.887 238.043 16.723 238.047 16.492 cv
238.047 7.703 li
238.043 7.47699 238.102 7.31201 238.223 7.20697 cv
238.336 7.10901 238.48 7.05902 238.656 7.05499 cv
243.691 7.05499 li
243.734 7.05902 243.777 7.07001 243.816 7.09399 cv
243.852 7.12097 243.883 7.16803 243.91 7.22998 cv
243.934 7.30103 243.949 7.383 243.965 7.47998 cv
243.973 7.586 243.98 7.71503 243.984 7.867 cv
243.98 8.01599 243.973 8.14099 243.965 8.23798 cv
243.949 8.34399 243.934 8.42603 243.91 8.48401 cv
243.883 8.547 243.852 8.59003 243.816 8.617 cv
243.777 8.64801 243.734 8.664 243.691 8.65997 cv
240.09 8.65997 li
240.09 11.125 li
243.137 11.125 li
243.184 11.129 243.227 11.145 243.266 11.168 cv
243.305 11.199 243.336 11.242 243.363 11.301 cv
243.387 11.363 243.406 11.445 243.422 11.543 cv
243.434 11.645 243.441 11.766 243.441 11.91 cv
243.441 12.062 243.434 12.187 243.422 12.285 cv
243.406 12.387 243.387 12.465 243.363 12.523 cv
243.336 12.586 243.305 12.629 243.266 12.652 cv
243.227 12.68 243.184 12.695 243.137 12.691 cv
240.09 12.691 li
240.09 15.535 li
243.723 15.535 li
243.77 15.535 243.813 15.551 243.852 15.578 cv
243.891 15.609 243.922 15.656 243.945 15.715 cv
243.969 15.781 243.988 15.863 244.004 15.961 cv
244.016 16.066 244.02 16.191 244.023 16.34 cv
cp
f
252.359 16.875 mo
252.355 16.93 252.34 16.973 252.313 17.012 cv
252.277 17.051 252.227 17.086 252.156 17.109 cv
252.082 17.137 251.98 17.152 251.855 17.168 cv
251.727 17.18 251.57 17.187 251.387 17.187 cv
251.191 17.187 251.031 17.18 250.906 17.168 cv
250.777 17.152 250.676 17.137 250.605 17.109 cv
250.527 17.086 250.477 17.051 250.449 17.012 cv
250.414 16.973 250.398 16.93 250.402 16.875 cv
250.402 12.91 li
250.398 12.574 250.375 12.309 250.328 12.113 cv
250.277 11.922 250.203 11.758 250.113 11.621 cv
250.02 11.484 249.902 11.379 249.754 11.301 cv
249.605 11.227 249.43 11.187 249.234 11.187 cv
248.98 11.187 248.73 11.281 248.477 11.461 cv
248.223 11.645 247.957 11.906 247.684 12.254 cv
247.684 16.875 li
247.68 16.93 247.664 16.973 247.637 17.012 cv
247.602 17.051 247.547 17.086 247.477 17.109 cv
247.398 17.137 247.301 17.152 247.176 17.168 cv
247.051 17.18 246.891 17.187 246.703 17.187 cv
246.508 17.187 246.352 17.18 246.227 17.168 cv
246.102 17.152 246 17.137 245.926 17.109 cv
245.848 17.086 245.793 17.051 245.766 17.012 cv
245.73 16.973 245.715 16.93 245.719 16.875 cv
245.719 9.92603 li
245.715 9.87903 245.73 9.83197 245.758 9.789 cv
245.781 9.75403 245.828 9.72302 245.898 9.69098 cv
245.965 9.66803 246.051 9.64801 246.16 9.633 cv
246.266 9.625 246.398 9.617 246.563 9.61298 cv
246.727 9.617 246.863 9.625 246.973 9.633 cv
247.078 9.64801 247.164 9.66803 247.227 9.69098 cv
247.285 9.72302 247.328 9.75403 247.355 9.789 cv
247.379 9.83197 247.391 9.87903 247.395 9.92603 cv
247.395 10.727 li
247.777 10.316 248.168 10.004 248.566 9.79303 cv
248.961 9.586 249.379 9.48401 249.813 9.47998 cv
250.281 9.48401 250.68 9.56201 251.008 9.71503 cv
251.332 9.875 251.594 10.086 251.793 10.352 cv
251.992 10.621 252.137 10.934 252.227 11.289 cv
252.313 11.648 252.355 12.078 252.359 12.582 cv
cp
f
260.711 13.199 mo
260.707 13.437 260.656 13.613 260.551 13.727 cv
260.441 13.844 260.293 13.902 260.113 13.898 cv
255.879 13.898 li
255.875 14.199 255.91 14.469 255.984 14.707 cv
256.051 14.949 256.164 15.152 256.32 15.32 cv
256.473 15.492 256.668 15.621 256.91 15.707 cv
257.148 15.797 257.438 15.84 257.781 15.84 cv
258.121 15.84 258.422 15.816 258.684 15.766 cv
258.941 15.719 259.168 15.664 259.359 15.602 cv
259.547 15.543 259.703 15.488 259.832 15.437 cv
259.953 15.391 260.055 15.367 260.137 15.363 cv
260.18 15.367 260.219 15.375 260.254 15.391 cv
260.281 15.41 260.309 15.441 260.328 15.488 cv
260.348 15.535 260.359 15.602 260.371 15.687 cv
260.375 15.773 260.379 15.883 260.383 16.012 cv
260.379 16.129 260.379 16.227 260.375 16.305 cv
260.367 16.387 260.359 16.453 260.352 16.508 cv
260.34 16.566 260.324 16.617 260.305 16.652 cv
260.285 16.695 260.258 16.73 260.227 16.766 cv
260.191 16.805 260.098 16.855 259.949 16.914 cv
259.793 16.98 259.602 17.043 259.371 17.098 cv
259.133 17.16 258.863 17.207 258.566 17.254 cv
258.262 17.293 257.941 17.316 257.602 17.32 cv
256.98 17.316 256.438 17.242 255.977 17.086 cv
255.508 16.934 255.121 16.695 254.813 16.379 cv
254.496 16.062 254.262 15.664 254.113 15.18 cv
253.957 14.699 253.883 14.133 253.887 13.477 cv
253.883 12.863 253.961 12.305 254.125 11.809 cv
254.281 11.312 254.516 10.895 254.828 10.547 cv
255.133 10.203 255.508 9.93701 255.945 9.75403 cv
256.383 9.57397 256.875 9.48401 257.43 9.47998 cv
258.008 9.48401 258.508 9.57001 258.922 9.73798 cv
259.336 9.914 259.672 10.152 259.938 10.453 cv
260.199 10.758 260.395 11.117 260.523 11.531 cv
260.645 11.949 260.707 12.398 260.711 12.887 cv
cp
258.809 12.637 mo
258.82 12.086 258.711 11.652 258.477 11.34 cv
258.242 11.027 257.875 10.871 257.383 10.867 cv
257.133 10.871 256.918 10.918 256.734 11.008 cv
256.547 11.105 256.395 11.23 256.273 11.387 cv
256.148 11.547 256.055 11.734 255.992 11.949 cv
255.926 12.164 255.887 12.395 255.879 12.637 cv
cp
f
266.785 10.57 mo
266.785 10.762 266.777 10.914 266.77 11.031 cv
266.754 11.152 266.738 11.246 266.723 11.312 cv
266.699 11.383 266.672 11.43 266.641 11.453 cv
266.602 11.48 266.559 11.492 266.512 11.492 cv
266.465 11.492 266.418 11.484 266.371 11.465 cv
266.316 11.449 266.258 11.43 266.195 11.406 cv
266.125 11.387 266.055 11.367 265.98 11.348 cv
265.898 11.332 265.813 11.324 265.723 11.32 cv
265.609 11.324 265.5 11.344 265.395 11.387 cv
265.285 11.434 265.172 11.504 265.059 11.594 cv
264.938 11.687 264.816 11.812 264.691 11.965 cv
264.563 12.125 264.426 12.316 264.281 12.543 cv
264.281 16.875 li
264.277 16.93 264.262 16.973 264.234 17.012 cv
264.199 17.051 264.145 17.086 264.074 17.109 cv
263.996 17.137 263.898 17.152 263.773 17.168 cv
263.648 17.18 263.488 17.187 263.301 17.187 cv
263.105 17.187 262.949 17.18 262.824 17.168 cv
262.699 17.152 262.598 17.137 262.523 17.109 cv
262.445 17.086 262.391 17.051 262.363 17.012 cv
262.328 16.973 262.313 16.93 262.316 16.875 cv
262.316 9.92603 li
262.313 9.87903 262.328 9.83197 262.355 9.789 cv
262.379 9.75403 262.426 9.72302 262.496 9.69098 cv
262.563 9.66803 262.648 9.64801 262.758 9.633 cv
262.863 9.625 262.996 9.617 263.16 9.61298 cv
263.324 9.617 263.461 9.625 263.57 9.633 cv
263.676 9.64801 263.762 9.66803 263.824 9.69098 cv
263.883 9.72302 263.926 9.75403 263.953 9.789 cv
263.977 9.83197 263.988 9.87903 263.992 9.92603 cv
263.992 10.789 li
264.172 10.531 264.344 10.32 264.508 10.148 cv
264.664 9.98401 264.82 9.84802 264.969 9.74597 cv
265.113 9.64801 265.258 9.58197 265.402 9.539 cv
265.547 9.50403 265.691 9.48401 265.84 9.47998 cv
265.906 9.48401 265.98 9.48798 266.059 9.492 cv
266.137 9.50403 266.215 9.51599 266.301 9.53101 cv
266.379 9.55103 266.453 9.57001 266.52 9.59399 cv
266.578 9.617 266.625 9.64502 266.656 9.66803 cv
266.684 9.69897 266.703 9.72699 266.719 9.75403 cv
266.73 9.789 266.742 9.83197 266.754 9.883 cv
266.762 9.94098 266.77 10.023 266.777 10.129 cv
266.781 10.238 266.785 10.387 266.785 10.57 cv
cp
f
273.961 10.406 mo
273.957 10.66 273.93 10.844 273.875 10.961 cv
273.816 11.082 273.746 11.141 273.668 11.141 cv
272.848 11.141 li
272.961 11.266 273.043 11.41 273.094 11.566 cv
273.141 11.727 273.164 11.891 273.168 12.059 cv
273.164 12.469 273.098 12.828 272.965 13.141 cv
272.828 13.457 272.633 13.723 272.383 13.934 cv
272.129 14.152 271.828 14.316 271.473 14.426 cv
271.113 14.543 270.715 14.598 270.285 14.594 cv
270.059 14.598 269.848 14.57 269.645 14.512 cv
269.441 14.461 269.285 14.398 269.176 14.32 cv
269.113 14.391 269.055 14.469 269.008 14.562 cv
268.957 14.656 268.934 14.762 268.938 14.871 cv
268.934 15.027 269 15.148 269.133 15.242 cv
269.262 15.34 269.449 15.395 269.691 15.402 cv
271.383 15.465 li
271.777 15.48 272.129 15.539 272.438 15.633 cv
272.746 15.734 273.008 15.867 273.219 16.039 cv
273.43 16.215 273.59 16.426 273.699 16.668 cv
273.809 16.914 273.863 17.187 273.867 17.5 cv
273.863 17.836 273.789 18.16 273.641 18.469 cv
273.492 18.77 273.266 19.031 272.965 19.258 cv
272.66 19.477 272.281 19.656 271.828 19.789 cv
271.371 19.918 270.84 19.98 270.238 19.984 cv
269.641 19.98 269.137 19.934 268.719 19.844 cv
268.301 19.746 267.957 19.617 267.691 19.453 cv
267.422 19.285 267.227 19.086 267.109 18.859 cv
266.984 18.625 266.926 18.371 266.926 18.098 cv
266.926 17.926 266.945 17.766 266.992 17.609 cv
267.031 17.453 267.098 17.301 267.188 17.16 cv
267.27 17.016 267.375 16.883 267.5 16.75 cv
267.625 16.621 267.766 16.496 267.93 16.375 cv
267.703 16.262 267.531 16.102 267.41 15.891 cv
267.289 15.687 267.23 15.461 267.23 15.215 cv
267.23 14.914 267.297 14.637 267.438 14.379 cv
267.574 14.129 267.758 13.898 267.984 13.695 cv
267.801 13.516 267.656 13.301 267.547 13.043 cv
267.438 12.793 267.383 12.473 267.387 12.09 cv
267.383 11.687 267.453 11.328 267.598 11.004 cv
267.738 10.687 267.938 10.418 268.195 10.195 cv
268.449 9.97699 268.754 9.80499 269.105 9.68701 cv
269.457 9.57001 269.848 9.51202 270.277 9.51202 cv
270.496 9.51202 270.703 9.52698 270.902 9.55103 cv
271.102 9.58197 271.289 9.617 271.461 9.65997 cv
273.668 9.65997 li
273.75 9.664 273.82 9.72302 273.879 9.83197 cv
273.93 9.94897 273.957 10.141 273.961 10.406 cv
cp
271.445 12.051 mo
271.441 11.68 271.34 11.391 271.133 11.18 cv
270.922 10.977 270.629 10.871 270.254 10.867 cv
270.059 10.871 269.887 10.902 269.746 10.965 cv
269.598 11.031 269.477 11.121 269.383 11.23 cv
269.281 11.344 269.211 11.473 269.168 11.621 cv
269.117 11.77 269.094 11.926 269.098 12.082 cv
269.094 12.441 269.199 12.719 269.41 12.922 cv
269.617 13.129 269.906 13.234 270.277 13.23 cv
270.473 13.234 270.641 13.203 270.789 13.137 cv
270.93 13.078 271.051 12.992 271.152 12.879 cv
271.246 12.773 271.32 12.645 271.371 12.5 cv
271.418 12.359 271.441 12.211 271.445 12.051 cv
cp
271.906 17.602 mo
271.906 17.363 271.813 17.187 271.625 17.062 cv
271.438 16.941 271.18 16.871 270.852 16.859 cv
269.457 16.82 li
269.32 16.922 269.211 17.016 269.133 17.105 cv
269.051 17.195 268.988 17.281 268.941 17.367 cv
268.891 17.449 268.855 17.531 268.844 17.609 cv
268.824 17.687 268.816 17.766 268.82 17.852 cv
268.816 18.105 268.949 18.305 269.211 18.441 cv
269.473 18.574 269.844 18.641 270.324 18.645 cv
270.617 18.641 270.863 18.609 271.07 18.555 cv
271.27 18.492 271.434 18.414 271.563 18.316 cv
271.684 18.215 271.773 18.105 271.828 17.984 cv
271.879 17.863 271.906 17.734 271.906 17.602 cv
cp
f
279.293 17.141 mo
278.449 19.602 li
278.398 19.73 278.273 19.824 278.066 19.883 cv
277.859 19.937 277.555 19.965 277.156 19.969 cv
276.945 19.965 276.777 19.957 276.656 19.941 cv
276.531 19.922 276.441 19.891 276.379 19.852 cv
276.316 19.809 276.281 19.758 276.277 19.695 cv
276.27 19.633 276.285 19.559 276.324 19.473 cv
277.25 17.141 li
277.18 17.109 277.117 17.062 277.066 16.996 cv
277.008 16.934 276.969 16.863 276.945 16.789 cv
274.555 10.398 li
274.484 10.219 274.449 10.082 274.453 9.98401 cv
274.449 9.89099 274.48 9.81201 274.547 9.758 cv
274.605 9.703 274.711 9.66803 274.859 9.64502 cv
275.004 9.62903 275.199 9.617 275.449 9.61298 cv
275.668 9.617 275.848 9.62097 275.98 9.625 cv
276.109 9.63702 276.211 9.65601 276.285 9.68402 cv
276.355 9.71899 276.41 9.76599 276.449 9.828 cv
276.484 9.89502 276.52 9.98798 276.559 10.105 cv
278.191 14.758 li
278.215 14.758 li
279.715 10.012 li
279.738 9.87903 279.777 9.789 279.832 9.742 cv
279.879 9.69897 279.961 9.66803 280.078 9.64502 cv
280.188 9.62903 280.391 9.617 280.68 9.61298 cv
280.902 9.617 281.086 9.62903 281.234 9.64502 cv
281.379 9.66803 281.488 9.70697 281.563 9.76202 cv
281.629 9.82397 281.664 9.89801 281.668 9.992 cv
281.664 10.086 281.645 10.199 281.605 10.328 cv
cp
f
293.734 15.613 mo
293.734 15.746 293.73 15.855 293.723 15.945 cv
293.715 16.039 293.703 16.117 293.688 16.18 cv
293.672 16.246 293.648 16.305 293.625 16.348 cv
293.594 16.395 293.555 16.445 293.5 16.504 cv
293.441 16.566 293.328 16.645 293.168 16.734 cv
293 16.832 292.801 16.922 292.566 17.004 cv
292.328 17.094 292.059 17.16 291.758 17.219 cv
291.449 17.273 291.121 17.305 290.773 17.305 cv
290.078 17.305 289.453 17.199 288.898 16.984 cv
288.34 16.773 287.867 16.457 287.48 16.031 cv
287.09 15.609 286.793 15.078 286.586 14.445 cv
286.379 13.812 286.273 13.074 286.277 12.23 cv
286.273 11.375 286.387 10.617 286.617 9.94897 cv
286.844 9.28497 287.164 8.72699 287.574 8.27301 cv
287.984 7.82397 288.477 7.47998 289.051 7.24597 cv
289.625 7.01599 290.258 6.89801 290.953 6.89502 cv
291.227 6.89801 291.496 6.922 291.762 6.96503 cv
292.02 7.01202 292.262 7.07001 292.48 7.14502 cv
292.699 7.22302 292.898 7.31201 293.078 7.40601 cv
293.254 7.508 293.375 7.59003 293.449 7.65997 cv
293.516 7.72998 293.566 7.789 293.594 7.836 cv
293.617 7.883 293.637 7.94501 293.656 8.01599 cv
293.668 8.09399 293.68 8.17999 293.691 8.27301 cv
293.695 8.375 293.699 8.49597 293.703 8.63702 cv
293.699 8.797 293.695 8.92999 293.688 9.03497 cv
293.676 9.14801 293.656 9.23401 293.633 9.30103 cv
293.605 9.37097 293.574 9.422 293.539 9.44897 cv
293.5 9.48401 293.457 9.5 293.414 9.49597 cv
293.332 9.5 293.234 9.453 293.117 9.35901 cv
292.996 9.27002 292.84 9.16803 292.652 9.05499 cv
292.461 8.94501 292.238 8.84399 291.977 8.75 cv
291.711 8.65997 291.398 8.617 291.039 8.61298 cv
290.637 8.617 290.277 8.69897 289.965 8.85901 cv
289.648 9.02698 289.383 9.26202 289.164 9.56201 cv
288.941 9.87097 288.773 10.238 288.66 10.668 cv
288.543 11.102 288.484 11.586 288.488 12.121 cv
288.484 12.719 288.547 13.234 288.672 13.664 cv
288.793 14.102 288.965 14.457 289.195 14.734 cv
289.418 15.016 289.691 15.223 290.012 15.359 cv
290.328 15.5 290.688 15.57 291.094 15.566 cv
291.453 15.57 291.77 15.527 292.035 15.437 cv
292.301 15.355 292.527 15.262 292.715 15.152 cv
292.902 15.051 293.059 14.957 293.184 14.875 cv
293.305 14.793 293.398 14.75 293.469 14.75 cv
293.52 14.75 293.563 14.762 293.594 14.781 cv
293.625 14.801 293.648 14.84 293.672 14.902 cv
293.688 14.965 293.703 15.055 293.719 15.164 cv
293.727 15.281 293.734 15.43 293.734 15.613 cv
cp
f
302.113 13.328 mo
302.109 13.926 302.031 14.469 301.879 14.953 cv
301.719 15.445 301.484 15.863 301.168 16.215 cv
300.852 16.566 300.453 16.84 299.977 17.031 cv
299.496 17.223 298.938 17.316 298.301 17.32 cv
297.68 17.316 297.141 17.234 296.688 17.062 cv
296.227 16.895 295.848 16.645 295.551 16.316 cv
295.246 15.992 295.023 15.59 294.879 15.109 cv
294.734 14.633 294.664 14.086 294.664 13.469 cv
294.664 12.879 294.742 12.34 294.898 11.848 cv
295.055 11.359 295.293 10.937 295.613 10.586 cv
295.93 10.238 296.324 9.96503 296.801 9.77002 cv
297.273 9.578 297.832 9.48401 298.473 9.47998 cv
299.098 9.48401 299.637 9.56598 300.094 9.73401 cv
300.551 9.90601 300.93 10.156 301.227 10.48 cv
301.523 10.809 301.746 11.211 301.895 11.687 cv
302.039 12.168 302.109 12.715 302.113 13.328 cv
cp
300.094 13.406 mo
300.09 13.07 300.063 12.754 300.012 12.461 cv
299.953 12.176 299.859 11.926 299.734 11.711 cv
299.602 11.5 299.43 11.332 299.219 11.211 cv
299 11.094 298.73 11.035 298.402 11.031 cv
298.113 11.035 297.859 11.09 297.641 11.191 cv
297.422 11.301 297.242 11.457 297.102 11.66 cv
296.961 11.867 296.855 12.113 296.785 12.398 cv
296.715 12.691 296.68 13.02 296.68 13.383 cv
296.68 13.73 296.707 14.047 296.766 14.332 cv
296.82 14.625 296.914 14.875 297.043 15.086 cv
297.168 15.301 297.34 15.465 297.563 15.578 cv
297.777 15.699 298.047 15.758 298.371 15.754 cv
298.664 15.758 298.922 15.703 299.145 15.594 cv
299.359 15.488 299.539 15.336 299.68 15.129 cv
299.82 14.93 299.922 14.684 299.992 14.395 cv
300.055 14.109 300.09 13.781 300.094 13.406 cv
cp
f
310.309 16.875 mo
310.305 16.93 310.289 16.973 310.262 17.012 cv
310.227 17.051 310.176 17.086 310.105 17.109 cv
310.031 17.137 309.93 17.152 309.805 17.168 cv
309.676 17.18 309.52 17.187 309.336 17.187 cv
309.141 17.187 308.98 17.18 308.855 17.168 cv
308.727 17.152 308.625 17.137 308.555 17.109 cv
308.477 17.086 308.426 17.051 308.398 17.012 cv
308.363 16.973 308.348 16.93 308.352 16.875 cv
308.352 12.91 li
308.348 12.574 308.324 12.309 308.277 12.113 cv
308.227 11.922 308.152 11.758 308.063 11.621 cv
307.969 11.484 307.852 11.379 307.703 11.301 cv
307.555 11.227 307.379 11.187 307.184 11.187 cv
306.93 11.187 306.68 11.281 306.426 11.461 cv
306.172 11.645 305.906 11.906 305.633 12.254 cv
305.633 16.875 li
305.629 16.93 305.613 16.973 305.586 17.012 cv
305.551 17.051 305.496 17.086 305.426 17.109 cv
305.348 17.137 305.25 17.152 305.125 17.168 cv
305 17.18 304.84 17.187 304.652 17.187 cv
304.457 17.187 304.301 17.18 304.176 17.168 cv
304.051 17.152 303.949 17.137 303.875 17.109 cv
303.797 17.086 303.742 17.051 303.715 17.012 cv
303.68 16.973 303.664 16.93 303.668 16.875 cv
303.668 9.92603 li
303.664 9.87903 303.68 9.83197 303.707 9.789 cv
303.73 9.75403 303.777 9.72302 303.848 9.69098 cv
303.914 9.66803 304 9.64801 304.109 9.633 cv
304.215 9.625 304.348 9.617 304.512 9.61298 cv
304.676 9.617 304.813 9.625 304.922 9.633 cv
305.027 9.64801 305.113 9.66803 305.176 9.69098 cv
305.234 9.72302 305.277 9.75403 305.305 9.789 cv
305.328 9.83197 305.34 9.87903 305.344 9.92603 cv
305.344 10.727 li
305.727 10.316 306.117 10.004 306.516 9.79303 cv
306.91 9.586 307.328 9.48401 307.762 9.47998 cv
308.23 9.48401 308.629 9.56201 308.957 9.71503 cv
309.281 9.875 309.543 10.086 309.742 10.352 cv
309.941 10.621 310.086 10.934 310.176 11.289 cv
310.262 11.648 310.305 12.078 310.309 12.582 cv
cp
f
317.133 14.91 mo
317.129 15.309 317.055 15.656 316.91 15.957 cv
316.762 16.258 316.555 16.512 316.285 16.711 cv
316.012 16.918 315.691 17.066 315.324 17.168 cv
314.957 17.266 314.555 17.316 314.125 17.32 cv
313.859 17.316 313.613 17.297 313.379 17.262 cv
313.145 17.219 312.934 17.172 312.746 17.113 cv
312.559 17.055 312.402 16.992 312.277 16.93 cv
312.152 16.867 312.059 16.809 312.004 16.754 cv
311.945 16.699 311.902 16.617 311.875 16.5 cv
311.84 16.387 311.824 16.211 311.828 15.98 cv
311.824 15.832 311.832 15.711 311.844 15.617 cv
311.852 15.527 311.867 15.457 311.891 15.398 cv
311.91 15.348 311.934 15.309 311.969 15.289 cv
311.996 15.273 312.035 15.266 312.082 15.262 cv
312.137 15.266 312.223 15.297 312.336 15.359 cv
312.445 15.426 312.582 15.5 312.754 15.574 cv
312.918 15.656 313.113 15.727 313.332 15.793 cv
313.551 15.863 313.801 15.898 314.086 15.895 cv
314.262 15.898 314.418 15.879 314.559 15.84 cv
314.691 15.805 314.813 15.754 314.918 15.684 cv
315.016 15.617 315.09 15.531 315.145 15.426 cv
315.191 15.324 315.219 15.203 315.223 15.066 cv
315.219 14.91 315.172 14.777 315.078 14.668 cv
314.984 14.559 314.855 14.461 314.699 14.375 cv
314.535 14.293 314.355 14.215 314.16 14.141 cv
313.957 14.07 313.754 13.992 313.543 13.898 cv
313.332 13.812 313.125 13.711 312.93 13.594 cv
312.727 13.484 312.547 13.344 312.391 13.176 cv
312.227 13.012 312.102 12.812 312.008 12.574 cv
311.914 12.344 311.867 12.062 311.867 11.73 cv
311.867 11.402 311.93 11.098 312.059 10.816 cv
312.188 10.543 312.375 10.305 312.621 10.105 cv
312.863 9.90997 313.16 9.758 313.512 9.64502 cv
313.859 9.539 314.254 9.48401 314.695 9.47998 cv
314.91 9.48401 315.121 9.5 315.328 9.52698 cv
315.531 9.56201 315.719 9.60199 315.887 9.64502 cv
316.051 9.69501 316.191 9.74597 316.309 9.797 cv
316.422 9.85498 316.504 9.90198 316.555 9.93701 cv
316.602 9.97998 316.637 10.02 316.66 10.055 cv
316.68 10.098 316.691 10.145 316.703 10.195 cv
316.711 10.25 316.723 10.316 316.73 10.395 cv
316.738 10.48 316.742 10.578 316.742 10.695 cv
316.742 10.836 316.738 10.953 316.73 11.039 cv
316.723 11.133 316.707 11.203 316.691 11.25 cv
316.672 11.305 316.648 11.34 316.621 11.355 cv
316.586 11.379 316.551 11.387 316.512 11.383 cv
316.461 11.387 316.387 11.359 316.293 11.301 cv
316.191 11.25 316.07 11.191 315.922 11.125 cv
315.773 11.066 315.602 11.008 315.406 10.949 cv
315.211 10.898 314.988 10.871 314.742 10.867 cv
314.563 10.871 314.41 10.891 314.281 10.922 cv
314.148 10.961 314.039 11.012 313.961 11.078 cv
313.875 11.148 313.813 11.227 313.773 11.316 cv
313.727 11.41 313.707 11.508 313.711 11.609 cv
313.707 11.77 313.758 11.906 313.859 12.012 cv
313.957 12.125 314.086 12.219 314.25 12.301 cv
314.41 12.387 314.594 12.465 314.801 12.535 cv
315.004 12.609 315.211 12.691 315.422 12.773 cv
315.629 12.863 315.836 12.961 316.047 13.074 cv
316.25 13.187 316.434 13.328 316.594 13.492 cv
316.754 13.66 316.883 13.859 316.984 14.09 cv
317.078 14.324 317.129 14.598 317.133 14.91 cv
cp
f
325.203 16.875 mo
325.199 16.93 325.188 16.973 325.164 17.012 cv
325.137 17.051 325.09 17.086 325.027 17.109 cv
324.961 17.137 324.875 17.152 324.77 17.168 cv
324.664 17.18 324.531 17.187 324.371 17.187 cv
324.195 17.187 324.055 17.18 323.953 17.168 cv
323.844 17.152 323.762 17.137 323.699 17.109 cv
323.637 17.086 323.59 17.051 323.566 17.012 cv
323.535 16.973 323.523 16.93 323.527 16.875 cv
323.527 16.074 li
323.141 16.488 322.75 16.801 322.355 17.008 cv
321.953 17.215 321.543 17.316 321.121 17.32 cv
320.641 17.316 320.238 17.242 319.914 17.086 cv
319.59 16.934 319.328 16.719 319.129 16.449 cv
318.926 16.18 318.781 15.867 318.699 15.508 cv
318.609 15.152 318.566 14.711 318.57 14.18 cv
318.57 9.92603 li
318.566 9.87903 318.582 9.83197 318.613 9.789 cv
318.641 9.75403 318.691 9.72302 318.77 9.69098 cv
318.844 9.66803 318.945 9.64801 319.074 9.633 cv
319.199 9.625 319.355 9.617 319.547 9.61298 cv
319.734 9.617 319.895 9.625 320.02 9.633 cv
320.145 9.64801 320.242 9.66803 320.32 9.69098 cv
320.391 9.72302 320.445 9.75403 320.48 9.789 cv
320.508 9.83197 320.523 9.87903 320.527 9.92603 cv
320.527 13.852 li
320.523 14.219 320.547 14.496 320.598 14.687 cv
320.641 14.879 320.711 15.043 320.813 15.18 cv
320.906 15.32 321.031 15.426 321.18 15.5 cv
321.328 15.578 321.5 15.617 321.695 15.613 cv
321.945 15.617 322.195 15.527 322.449 15.34 cv
322.699 15.16 322.969 14.895 323.254 14.547 cv
323.254 9.92603 li
323.254 9.87903 323.266 9.83197 323.297 9.789 cv
323.32 9.75403 323.375 9.72302 323.453 9.69098 cv
323.527 9.66803 323.625 9.64801 323.754 9.633 cv
323.875 9.625 324.035 9.617 324.23 9.61298 cv
324.422 9.617 324.578 9.625 324.703 9.633 cv
324.824 9.64801 324.926 9.66803 325 9.69098 cv
325.07 9.72302 325.121 9.75403 325.156 9.789 cv
325.184 9.83197 325.199 9.87903 325.203 9.92603 cv
cp
f
338.141 16.875 mo
338.137 16.93 338.121 16.973 338.094 17.012 cv
338.059 17.051 338.008 17.086 337.938 17.109 cv
337.863 17.137 337.762 17.152 337.641 17.168 cv
337.516 17.18 337.359 17.187 337.168 17.187 cv
336.969 17.187 336.809 17.18 336.684 17.168 cv
336.559 17.152 336.457 17.137 336.383 17.109 cv
336.305 17.086 336.254 17.051 336.227 17.012 cv
336.199 16.973 336.184 16.93 336.188 16.875 cv
336.188 12.754 li
336.184 12.523 336.164 12.309 336.121 12.113 cv
336.074 11.922 336.004 11.758 335.918 11.621 cv
335.824 11.484 335.711 11.379 335.574 11.301 cv
335.434 11.227 335.27 11.187 335.078 11.187 cv
334.844 11.187 334.605 11.281 334.367 11.461 cv
334.129 11.645 333.871 11.906 333.59 12.254 cv
333.59 16.875 li
333.59 16.93 333.574 16.973 333.543 17.012 cv
333.512 17.051 333.457 17.086 333.383 17.109 cv
333.305 17.137 333.203 17.152 333.082 17.168 cv
332.957 17.18 332.805 17.187 332.617 17.187 cv
332.422 17.187 332.262 17.18 332.141 17.168 cv
332.012 17.152 331.91 17.137 331.84 17.109 cv
331.762 17.086 331.711 17.051 331.68 17.012 cv
331.648 16.973 331.633 16.93 331.633 16.875 cv
331.633 12.754 li
331.633 12.523 331.609 12.309 331.566 12.113 cv
331.523 11.922 331.457 11.758 331.371 11.621 cv
331.277 11.484 331.164 11.379 331.027 11.301 cv
330.883 11.227 330.719 11.187 330.535 11.187 cv
330.293 11.187 330.055 11.281 329.816 11.461 cv
329.578 11.645 329.32 11.906 329.047 12.254 cv
329.047 16.875 li
329.043 16.93 329.027 16.973 329 17.012 cv
328.965 17.051 328.91 17.086 328.84 17.109 cv
328.762 17.137 328.664 17.152 328.539 17.168 cv
328.414 17.18 328.254 17.187 328.066 17.187 cv
327.871 17.187 327.715 17.18 327.59 17.168 cv
327.465 17.152 327.363 17.137 327.289 17.109 cv
327.211 17.086 327.156 17.051 327.129 17.012 cv
327.094 16.973 327.078 16.93 327.082 16.875 cv
327.082 9.92603 li
327.078 9.87903 327.094 9.83197 327.121 9.789 cv
327.145 9.75403 327.191 9.72302 327.262 9.69098 cv
327.328 9.66803 327.414 9.64801 327.523 9.633 cv
327.629 9.625 327.762 9.617 327.926 9.61298 cv
328.09 9.617 328.227 9.625 328.336 9.633 cv
328.441 9.64801 328.527 9.66803 328.59 9.69098 cv
328.648 9.72302 328.691 9.75403 328.719 9.789 cv
328.742 9.83197 328.754 9.87903 328.758 9.92603 cv
328.758 10.727 li
329.141 10.316 329.523 10.004 329.906 9.79303 cv
330.285 9.586 330.688 9.48401 331.105 9.47998 cv
331.391 9.48401 331.645 9.51202 331.875 9.57001 cv
332.102 9.633 332.309 9.71899 332.488 9.828 cv
332.668 9.94098 332.82 10.078 332.949 10.23 cv
333.078 10.387 333.188 10.559 333.277 10.75 cv
333.484 10.527 333.688 10.336 333.891 10.176 cv
334.086 10.016 334.285 9.883 334.48 9.78101 cv
334.676 9.67999 334.871 9.60498 335.066 9.55499 cv
335.262 9.508 335.461 9.48401 335.664 9.47998 cv
336.125 9.48401 336.512 9.56201 336.832 9.71503 cv
337.145 9.875 337.402 10.086 337.598 10.352 cv
337.793 10.621 337.93 10.934 338.016 11.289 cv
338.094 11.648 338.137 12.027 338.141 12.426 cv
cp
f
347.059 13.297 mo
347.059 13.918 346.992 14.477 346.859 14.973 cv
346.727 15.469 346.531 15.891 346.277 16.238 cv
346.023 16.586 345.707 16.855 345.328 17.039 cv
344.945 17.227 344.512 17.316 344.027 17.32 cv
343.82 17.316 343.633 17.297 343.469 17.262 cv
343.297 17.219 343.133 17.16 342.977 17.082 cv
342.816 17.004 342.66 16.906 342.508 16.781 cv
342.348 16.664 342.188 16.523 342.023 16.359 cv
342.023 19.633 li
342.02 19.68 342.004 19.727 341.977 19.773 cv
341.941 19.812 341.887 19.848 341.816 19.879 cv
341.738 19.902 341.641 19.926 341.516 19.945 cv
341.391 19.957 341.23 19.965 341.043 19.969 cv
340.848 19.965 340.691 19.957 340.566 19.945 cv
340.441 19.926 340.34 19.902 340.266 19.879 cv
340.188 19.848 340.133 19.812 340.105 19.773 cv
340.07 19.727 340.055 19.68 340.059 19.633 cv
340.059 9.92603 li
340.055 9.87903 340.07 9.83197 340.098 9.789 cv
340.121 9.75403 340.164 9.72302 340.234 9.69098 cv
340.297 9.66803 340.383 9.64801 340.492 9.633 cv
340.594 9.625 340.73 9.617 340.895 9.61298 cv
341.051 9.617 341.18 9.625 341.285 9.633 cv
341.391 9.64801 341.477 9.66803 341.543 9.69098 cv
341.605 9.72302 341.652 9.75403 341.68 9.789 cv
341.703 9.83197 341.715 9.87903 341.719 9.92603 cv
341.719 10.742 li
341.918 10.535 342.117 10.355 342.316 10.195 cv
342.508 10.039 342.707 9.90601 342.91 9.797 cv
343.113 9.69501 343.32 9.61298 343.539 9.55902 cv
343.75 9.508 343.98 9.48401 344.23 9.47998 cv
344.734 9.48401 345.168 9.58197 345.531 9.78101 cv
345.887 9.98401 346.18 10.262 346.406 10.605 cv
346.629 10.957 346.793 11.359 346.902 11.82 cv
347.004 12.281 347.059 12.773 347.059 13.297 cv
cp
345.016 13.437 mo
345.012 13.145 344.992 12.863 344.949 12.586 cv
344.902 12.316 344.824 12.074 344.723 11.859 cv
344.613 11.648 344.473 11.477 344.301 11.348 cv
344.125 11.223 343.91 11.16 343.652 11.156 cv
343.52 11.16 343.391 11.18 343.266 11.215 cv
343.137 11.258 343.008 11.32 342.875 11.406 cv
342.742 11.496 342.605 11.609 342.469 11.75 cv
342.324 11.891 342.176 12.066 342.023 12.27 cv
342.023 14.562 li
342.297 14.91 342.559 15.18 342.809 15.367 cv
343.055 15.559 343.316 15.652 343.59 15.652 cv
343.844 15.652 344.059 15.59 344.242 15.457 cv
344.418 15.332 344.566 15.16 344.68 14.949 cv
344.793 14.738 344.875 14.5 344.934 14.234 cv
344.984 13.969 345.012 13.703 345.016 13.437 cv
cp
f
352.555 16.191 mo
352.555 16.418 352.539 16.594 352.512 16.715 cv
352.48 16.84 352.441 16.926 352.398 16.973 cv
352.348 17.023 352.281 17.066 352.191 17.105 cv
352.098 17.145 351.988 17.176 351.871 17.207 cv
351.746 17.23 351.613 17.254 351.473 17.273 cv
351.328 17.285 351.188 17.293 351.043 17.297 cv
350.652 17.293 350.313 17.242 350.027 17.148 cv
349.742 17.047 349.508 16.898 349.32 16.691 cv
349.133 16.488 348.992 16.23 348.906 15.918 cv
348.813 15.609 348.77 15.238 348.773 14.809 cv
348.773 11.25 li
347.941 11.25 li
347.84 11.254 347.766 11.191 347.715 11.066 cv
347.66 10.945 347.633 10.742 347.637 10.453 cv
347.633 10.305 347.641 10.176 347.656 10.074 cv
347.668 9.97302 347.688 9.89099 347.715 9.828 cv
347.738 9.77002 347.77 9.72699 347.813 9.69897 cv
347.848 9.67603 347.895 9.664 347.949 9.65997 cv
348.773 9.65997 li
348.773 8.10901 li
348.77 8.06201 348.785 8.01599 348.816 7.96899 cv
348.844 7.92999 348.895 7.89502 348.973 7.86298 cv
349.047 7.84003 349.148 7.81598 349.277 7.80103 cv
349.402 7.789 349.559 7.78497 349.75 7.78101 cv
349.938 7.78497 350.098 7.789 350.227 7.80103 cv
350.352 7.81598 350.453 7.84003 350.527 7.86298 cv
350.598 7.89502 350.648 7.92999 350.684 7.96899 cv
350.711 8.01599 350.727 8.06201 350.73 8.10901 cv
350.73 9.65997 li
352.242 9.65997 li
352.293 9.664 352.34 9.67603 352.379 9.69897 cv
352.418 9.72699 352.449 9.77002 352.477 9.828 cv
352.5 9.89099 352.52 9.97302 352.535 10.074 cv
352.547 10.176 352.555 10.305 352.555 10.453 cv
352.555 10.742 352.527 10.945 352.477 11.066 cv
352.422 11.191 352.348 11.254 352.25 11.25 cv
350.73 11.25 li
350.73 14.516 li
350.727 14.895 350.785 15.18 350.91 15.367 cv
351.027 15.559 351.242 15.652 351.547 15.652 cv
351.648 15.652 351.742 15.645 351.828 15.625 cv
351.91 15.609 351.984 15.59 352.051 15.562 cv
352.113 15.543 352.168 15.52 352.215 15.5 cv
352.258 15.484 352.297 15.477 352.336 15.473 cv
352.363 15.477 352.395 15.484 352.426 15.5 cv
352.453 15.52 352.473 15.559 352.492 15.609 cv
352.504 15.668 352.52 15.742 352.535 15.832 cv
352.547 15.93 352.555 16.047 352.555 16.191 cv
cp
f
355.941 16.875 mo
355.938 16.93 355.922 16.973 355.895 17.012 cv
355.859 17.051 355.805 17.086 355.734 17.109 cv
355.656 17.137 355.559 17.152 355.434 17.168 cv
355.309 17.18 355.148 17.187 354.961 17.187 cv
354.766 17.187 354.609 17.18 354.484 17.168 cv
354.359 17.152 354.258 17.137 354.184 17.109 cv
354.105 17.086 354.051 17.051 354.023 17.012 cv
353.988 16.973 353.973 16.93 353.977 16.875 cv
353.977 9.94098 li
353.973 9.89099 353.988 9.84399 354.023 9.80499 cv
354.051 9.76599 354.105 9.73401 354.184 9.703 cv
354.258 9.67999 354.359 9.65601 354.484 9.63702 cv
354.609 9.625 354.766 9.617 354.961 9.61298 cv
355.148 9.617 355.309 9.625 355.434 9.63702 cv
355.559 9.65601 355.656 9.67999 355.734 9.703 cv
355.805 9.73401 355.859 9.76599 355.895 9.80499 cv
355.922 9.84399 355.938 9.89099 355.941 9.94098 cv
cp
356.09 7.57001 mo
356.09 7.96899 356.008 8.242 355.848 8.39099 cv
355.684 8.54303 355.387 8.617 354.953 8.61298 cv
354.508 8.617 354.207 8.54303 354.059 8.39801 cv
353.902 8.25403 353.828 7.992 353.828 7.60901 cv
353.828 7.21503 353.906 6.94098 354.066 6.789 cv
354.223 6.63702 354.523 6.55902 354.969 6.55902 cv
355.402 6.55902 355.699 6.633 355.855 6.78101 cv
356.012 6.92999 356.09 7.19501 356.09 7.57001 cv
cp
f
364.934 13.328 mo
364.93 13.926 364.852 14.469 364.699 14.953 cv
364.539 15.445 364.305 15.863 363.988 16.215 cv
363.672 16.566 363.273 16.84 362.797 17.031 cv
362.316 17.223 361.758 17.316 361.121 17.32 cv
360.5 17.316 359.961 17.234 359.508 17.062 cv
359.047 16.895 358.668 16.645 358.371 16.316 cv
358.066 15.992 357.844 15.59 357.699 15.109 cv
357.555 14.633 357.484 14.086 357.484 13.469 cv
357.484 12.879 357.563 12.34 357.719 11.848 cv
357.875 11.359 358.113 10.937 358.434 10.586 cv
358.75 10.238 359.145 9.96503 359.621 9.77002 cv
360.094 9.578 360.652 9.48401 361.293 9.47998 cv
361.918 9.48401 362.457 9.56598 362.914 9.73401 cv
363.371 9.90601 363.75 10.156 364.047 10.48 cv
364.344 10.809 364.566 11.211 364.715 11.687 cv
364.859 12.168 364.93 12.715 364.934 13.328 cv
cp
362.914 13.406 mo
362.91 13.07 362.883 12.754 362.832 12.461 cv
362.773 12.176 362.68 11.926 362.555 11.711 cv
362.422 11.5 362.25 11.332 362.039 11.211 cv
361.82 11.094 361.551 11.035 361.223 11.031 cv
360.934 11.035 360.68 11.09 360.461 11.191 cv
360.242 11.301 360.063 11.457 359.922 11.66 cv
359.781 11.867 359.676 12.113 359.605 12.398 cv
359.535 12.691 359.5 13.02 359.5 13.383 cv
359.5 13.73 359.527 14.047 359.586 14.332 cv
359.641 14.625 359.734 14.875 359.863 15.086 cv
359.988 15.301 360.16 15.465 360.383 15.578 cv
360.598 15.699 360.867 15.758 361.191 15.754 cv
361.484 15.758 361.742 15.703 361.965 15.594 cv
362.18 15.488 362.359 15.336 362.5 15.129 cv
362.641 14.93 362.742 14.684 362.813 14.395 cv
362.875 14.109 362.91 13.781 362.914 13.406 cv
cp
f
373.176 16.875 mo
373.172 16.93 373.156 16.973 373.129 17.012 cv
373.094 17.051 373.043 17.086 372.973 17.109 cv
372.898 17.137 372.797 17.152 372.672 17.168 cv
372.543 17.18 372.387 17.187 372.203 17.187 cv
372.008 17.187 371.848 17.18 371.723 17.168 cv
371.594 17.152 371.492 17.137 371.422 17.109 cv
371.344 17.086 371.293 17.051 371.266 17.012 cv
371.23 16.973 371.215 16.93 371.219 16.875 cv
371.219 12.91 li
371.215 12.574 371.191 12.309 371.145 12.113 cv
371.094 11.922 371.02 11.758 370.93 11.621 cv
370.836 11.484 370.719 11.379 370.57 11.301 cv
370.422 11.227 370.246 11.187 370.051 11.187 cv
369.797 11.187 369.547 11.281 369.293 11.461 cv
369.039 11.645 368.773 11.906 368.5 12.254 cv
368.5 16.875 li
368.496 16.93 368.48 16.973 368.453 17.012 cv
368.418 17.051 368.363 17.086 368.293 17.109 cv
368.215 17.137 368.117 17.152 367.992 17.168 cv
367.867 17.18 367.707 17.187 367.52 17.187 cv
367.324 17.187 367.168 17.18 367.043 17.168 cv
366.918 17.152 366.816 17.137 366.742 17.109 cv
366.664 17.086 366.609 17.051 366.582 17.012 cv
366.547 16.973 366.531 16.93 366.535 16.875 cv
366.535 9.92603 li
366.531 9.87903 366.547 9.83197 366.574 9.789 cv
366.598 9.75403 366.645 9.72302 366.715 9.69098 cv
366.781 9.66803 366.867 9.64801 366.977 9.633 cv
367.082 9.625 367.215 9.617 367.379 9.61298 cv
367.543 9.617 367.68 9.625 367.789 9.633 cv
367.895 9.64801 367.98 9.66803 368.043 9.69098 cv
368.102 9.72302 368.145 9.75403 368.172 9.789 cv
368.195 9.83197 368.207 9.87903 368.211 9.92603 cv
368.211 10.727 li
368.594 10.316 368.984 10.004 369.383 9.79303 cv
369.777 9.586 370.195 9.48401 370.629 9.47998 cv
371.098 9.48401 371.496 9.56201 371.824 9.71503 cv
372.148 9.875 372.41 10.086 372.609 10.352 cv
372.809 10.621 372.953 10.934 373.043 11.289 cv
373.129 11.648 373.172 12.078 373.176 12.582 cv
cp
f
382.527 13.223 mo
382.523 13.523 382.496 13.734 382.441 13.852 cv
382.383 13.977 382.293 14.035 382.168 14.031 cv
378.926 14.031 li
378.797 14.035 378.703 13.973 378.648 13.848 cv
378.586 13.727 378.559 13.52 378.563 13.223 cv
378.559 12.934 378.586 12.727 378.648 12.605 cv
378.703 12.488 378.797 12.43 378.926 12.426 cv
382.168 12.426 li
382.23 12.43 382.281 12.441 382.328 12.465 cv
382.367 12.492 382.406 12.539 382.441 12.598 cv
382.469 12.664 382.492 12.746 382.508 12.848 cv
382.52 12.953 382.523 13.078 382.527 13.223 cv
cp
f
393.262 16.285 mo
393.258 16.441 393.254 16.574 393.242 16.676 cv
393.227 16.785 393.207 16.871 393.184 16.941 cv
393.156 17.012 393.121 17.062 393.086 17.094 cv
393.043 17.125 393 17.141 392.949 17.141 cv
388.328 17.141 li
388.152 17.141 388.008 17.09 387.895 16.988 cv
387.773 16.887 387.715 16.723 387.719 16.492 cv
387.719 7.336 li
387.715 7.289 387.734 7.242 387.77 7.19501 cv
387.801 7.15601 387.855 7.12097 387.938 7.09399 cv
388.012 7.07001 388.117 7.05103 388.254 7.03101 cv
388.383 7.02002 388.547 7.01202 388.75 7.008 cv
388.945 7.01202 389.113 7.02002 389.246 7.03101 cv
389.375 7.05103 389.477 7.07001 389.559 7.09399 cv
389.633 7.12097 389.691 7.15601 389.727 7.19501 cv
389.758 7.242 389.773 7.289 389.777 7.336 cv
389.777 15.449 li
392.949 15.449 li
393 15.453 393.043 15.469 393.086 15.492 cv
393.121 15.523 393.156 15.57 393.184 15.633 cv
393.207 15.703 393.227 15.789 393.242 15.891 cv
393.254 16 393.258 16.129 393.262 16.285 cv
cp
f
401.383 13.328 mo
401.379 13.926 401.301 14.469 401.148 14.953 cv
400.988 15.445 400.754 15.863 400.438 16.215 cv
400.121 16.566 399.723 16.84 399.246 17.031 cv
398.766 17.223 398.207 17.316 397.57 17.32 cv
396.949 17.316 396.41 17.234 395.957 17.062 cv
395.496 16.895 395.117 16.645 394.82 16.316 cv
394.516 15.992 394.293 15.59 394.148 15.109 cv
394.004 14.633 393.934 14.086 393.934 13.469 cv
393.934 12.879 394.012 12.34 394.168 11.848 cv
394.324 11.359 394.563 10.937 394.883 10.586 cv
395.199 10.238 395.594 9.96503 396.07 9.77002 cv
396.543 9.578 397.102 9.48401 397.742 9.47998 cv
398.367 9.48401 398.906 9.56598 399.363 9.73401 cv
399.82 9.90601 400.199 10.156 400.496 10.48 cv
400.793 10.809 401.016 11.211 401.164 11.687 cv
401.309 12.168 401.379 12.715 401.383 13.328 cv
cp
399.363 13.406 mo
399.359 13.07 399.332 12.754 399.281 12.461 cv
399.223 12.176 399.129 11.926 399.004 11.711 cv
398.871 11.5 398.699 11.332 398.488 11.211 cv
398.27 11.094 398 11.035 397.672 11.031 cv
397.383 11.035 397.129 11.09 396.91 11.191 cv
396.691 11.301 396.512 11.457 396.371 11.66 cv
396.23 11.867 396.125 12.113 396.055 12.398 cv
395.984 12.691 395.949 13.02 395.949 13.383 cv
395.949 13.73 395.977 14.047 396.035 14.332 cv
396.09 14.625 396.184 14.875 396.313 15.086 cv
396.438 15.301 396.609 15.465 396.832 15.578 cv
397.047 15.699 397.316 15.758 397.641 15.754 cv
397.934 15.758 398.191 15.703 398.414 15.594 cv
398.629 15.488 398.809 15.336 398.949 15.129 cv
399.09 14.93 399.191 14.684 399.262 14.395 cv
399.324 14.109 399.359 13.781 399.363 13.406 cv
cp
f
408.199 15.77 mo
408.195 15.906 408.191 16.02 408.188 16.109 cv
408.176 16.203 408.168 16.281 408.156 16.34 cv
408.141 16.402 408.125 16.453 408.109 16.488 cv
408.09 16.531 408.047 16.578 407.988 16.637 cv
407.922 16.699 407.816 16.773 407.668 16.855 cv
407.516 16.945 407.344 17.023 407.152 17.086 cv
406.961 17.156 406.754 17.207 406.527 17.25 cv
406.301 17.289 406.066 17.309 405.832 17.312 cv
405.293 17.309 404.82 17.23 404.406 17.062 cv
403.992 16.898 403.645 16.652 403.367 16.328 cv
403.082 16.004 402.871 15.609 402.73 15.141 cv
402.59 14.676 402.52 14.137 402.52 13.531 cv
402.52 12.836 402.605 12.238 402.777 11.73 cv
402.949 11.227 403.191 10.805 403.508 10.473 cv
403.816 10.141 404.184 9.89502 404.613 9.72998 cv
405.035 9.57001 405.504 9.48798 406.016 9.48798 cv
406.223 9.48798 406.426 9.508 406.629 9.54303 cv
406.824 9.58197 407.012 9.633 407.188 9.69098 cv
407.359 9.758 407.516 9.828 407.656 9.90198 cv
407.793 9.98401 407.891 10.051 407.949 10.105 cv
408.004 10.164 408.043 10.211 408.07 10.246 cv
408.09 10.289 408.109 10.34 408.125 10.398 cv
408.137 10.465 408.148 10.543 408.156 10.629 cv
408.164 10.723 408.168 10.832 408.168 10.961 cv
408.168 11.266 408.141 11.477 408.09 11.598 cv
408.035 11.719 407.969 11.781 407.887 11.777 cv
407.797 11.781 407.703 11.746 407.605 11.672 cv
407.504 11.602 407.387 11.52 407.254 11.43 cv
407.121 11.344 406.961 11.262 406.773 11.187 cv
406.586 11.117 406.359 11.082 406.102 11.078 cv
405.59 11.082 405.203 11.277 404.934 11.668 cv
404.66 12.059 404.523 12.633 404.527 13.391 cv
404.523 13.766 404.559 14.098 404.629 14.383 cv
404.695 14.668 404.793 14.906 404.93 15.098 cv
405.059 15.293 405.227 15.437 405.43 15.531 cv
405.629 15.629 405.859 15.676 406.125 15.676 cv
406.391 15.676 406.625 15.637 406.824 15.555 cv
407.016 15.477 407.184 15.387 407.332 15.285 cv
407.473 15.187 407.598 15.098 407.699 15.016 cv
407.797 14.937 407.879 14.898 407.949 14.895 cv
407.992 14.898 408.031 14.91 408.066 14.934 cv
408.094 14.961 408.117 15.008 408.141 15.078 cv
408.156 15.148 408.172 15.238 408.184 15.348 cv
408.191 15.457 408.195 15.598 408.199 15.77 cv
cp
f
415.488 16.898 mo
415.484 16.977 415.457 17.031 415.41 17.07 cv
415.355 17.113 415.273 17.141 415.164 17.16 cv
415.047 17.176 414.883 17.187 414.668 17.187 cv
414.43 17.187 414.258 17.176 414.156 17.16 cv
414.047 17.141 413.973 17.113 413.934 17.07 cv
413.887 17.031 413.867 16.977 413.867 16.898 cv
413.867 16.348 li
413.578 16.656 413.25 16.895 412.887 17.062 cv
412.52 17.234 412.113 17.316 411.668 17.32 cv
411.297 17.316 410.957 17.27 410.648 17.176 cv
410.34 17.082 410.074 16.941 409.848 16.746 cv
409.621 16.559 409.445 16.324 409.32 16.043 cv
409.195 15.766 409.133 15.437 409.137 15.059 cv
409.133 14.66 409.211 14.309 409.371 14.004 cv
409.527 13.707 409.766 13.461 410.082 13.266 cv
410.395 13.074 410.785 12.93 411.254 12.832 cv
411.723 12.742 412.266 12.695 412.883 12.691 cv
413.563 12.691 li
413.563 12.27 li
413.563 12.055 413.539 11.863 413.496 11.699 cv
413.449 11.539 413.375 11.402 413.277 11.289 cv
413.172 11.184 413.039 11.102 412.871 11.047 cv
412.699 10.996 412.488 10.973 412.246 10.969 cv
411.914 10.973 411.621 11.008 411.367 11.078 cv
411.105 11.152 410.879 11.234 410.684 11.32 cv
410.484 11.414 410.32 11.492 410.191 11.562 cv
410.055 11.637 409.945 11.676 409.867 11.672 cv
409.805 11.676 409.754 11.656 409.715 11.617 cv
409.668 11.582 409.633 11.531 409.605 11.461 cv
409.574 11.398 409.551 11.312 409.539 11.211 cv
409.52 11.113 409.512 11.004 409.516 10.883 cv
409.512 10.723 409.527 10.598 409.555 10.5 cv
409.578 10.41 409.625 10.324 409.703 10.246 cv
409.773 10.172 409.902 10.09 410.086 10 cv
410.266 9.90997 410.477 9.82397 410.723 9.74597 cv
410.965 9.66803 411.234 9.60498 411.523 9.55499 cv
411.813 9.508 412.109 9.48401 412.418 9.47998 cv
412.961 9.48401 413.426 9.53497 413.813 9.64099 cv
414.199 9.75 414.52 9.914 414.77 10.133 cv
415.02 10.352 415.199 10.637 415.316 10.984 cv
415.426 11.336 415.484 11.75 415.488 12.223 cv
cp
413.563 13.922 mo
412.813 13.922 li
412.496 13.926 412.227 13.949 412.004 13.992 cv
411.777 14.043 411.594 14.113 411.457 14.203 cv
411.313 14.301 411.211 14.414 411.148 14.543 cv
411.082 14.68 411.047 14.828 411.051 14.996 cv
411.047 15.289 411.141 15.52 411.328 15.684 cv
411.512 15.852 411.77 15.934 412.098 15.934 cv
412.371 15.934 412.621 15.863 412.855 15.723 cv
413.082 15.582 413.32 15.379 413.563 15.105 cv
cp
f
419.41 16.875 mo
419.406 16.93 419.391 16.973 419.363 17.012 cv
419.328 17.051 419.273 17.086 419.203 17.109 cv
419.125 17.137 419.027 17.152 418.902 17.168 cv
418.777 17.18 418.617 17.187 418.43 17.187 cv
418.234 17.187 418.078 17.18 417.953 17.168 cv
417.828 17.152 417.727 17.137 417.652 17.109 cv
417.574 17.086 417.52 17.051 417.492 17.012 cv
417.457 16.973 417.441 16.93 417.445 16.875 cv
417.445 6.62903 li
417.441 6.578 417.457 6.53101 417.492 6.48798 cv
417.52 6.44897 417.574 6.414 417.652 6.383 cv
417.727 6.35498 417.828 6.336 417.953 6.31598 cv
418.078 6.30499 418.234 6.297 418.43 6.29303 cv
418.617 6.297 418.777 6.30499 418.902 6.31598 cv
419.027 6.336 419.125 6.35498 419.203 6.383 cv
419.273 6.414 419.328 6.44897 419.363 6.48798 cv
419.391 6.53101 419.406 6.578 419.41 6.62903 cv
cp
f
436.898 16.859 mo
436.895 16.914 436.883 16.961 436.855 17 cv
436.824 17.043 436.77 17.078 436.699 17.102 cv
436.621 17.129 436.523 17.148 436.398 17.164 cv
436.273 17.18 436.113 17.187 435.922 17.187 cv
435.734 17.187 435.578 17.18 435.457 17.164 cv
435.328 17.148 435.23 17.129 435.16 17.102 cv
435.086 17.078 435.035 17.043 435.004 17 cv
434.973 16.961 434.957 16.914 434.957 16.859 cv
434.957 8.65198 li
434.941 8.65198 li
432.02 16.852 li
431.996 16.922 431.961 16.977 431.918 17.02 cv
431.867 17.066 431.805 17.102 431.727 17.125 cv
431.645 17.152 431.543 17.168 431.418 17.176 cv
431.293 17.184 431.141 17.187 430.969 17.187 cv
430.789 17.187 430.641 17.18 430.516 17.168 cv
430.391 17.152 430.285 17.133 430.207 17.105 cv
430.121 17.078 430.059 17.043 430.016 17 cv
429.965 16.961 429.934 16.914 429.922 16.852 cv
427.102 8.65198 li
427.086 8.65198 li
427.086 16.859 li
427.082 16.914 427.066 16.961 427.043 17 cv
427.012 17.043 426.961 17.078 426.883 17.102 cv
426.805 17.129 426.703 17.148 426.582 17.164 cv
426.457 17.18 426.301 17.187 426.113 17.187 cv
425.922 17.187 425.766 17.18 425.645 17.164 cv
425.516 17.148 425.414 17.129 425.344 17.102 cv
425.266 17.078 425.215 17.043 425.188 17 cv
425.156 16.961 425.141 16.914 425.145 16.859 cv
425.145 7.875 li
425.141 7.61298 425.211 7.40997 425.355 7.26599 cv
425.492 7.12903 425.68 7.05902 425.918 7.05499 cv
427.258 7.05499 li
427.496 7.05902 427.699 7.078 427.871 7.11298 cv
428.039 7.15601 428.188 7.21899 428.316 7.30902 cv
428.438 7.40198 428.543 7.52301 428.629 7.66803 cv
428.711 7.82001 428.781 8.00403 428.848 8.21899 cv
431.031 14.227 li
431.063 14.227 li
433.32 8.23401 li
433.387 8.01599 433.461 7.83197 433.543 7.67999 cv
433.621 7.53101 433.715 7.40997 433.824 7.31201 cv
433.93 7.22302 434.055 7.15601 434.199 7.11298 cv
434.344 7.078 434.512 7.05902 434.707 7.05499 cv
436.086 7.05499 li
436.223 7.05902 436.344 7.07397 436.449 7.10901 cv
436.547 7.14801 436.629 7.203 436.699 7.27002 cv
436.762 7.34399 436.813 7.42999 436.848 7.52698 cv
436.879 7.633 436.895 7.75 436.898 7.875 cv
cp
f
446.008 13.328 mo
446.004 13.926 445.926 14.469 445.773 14.953 cv
445.613 15.445 445.379 15.863 445.063 16.215 cv
444.746 16.566 444.348 16.84 443.871 17.031 cv
443.391 17.223 442.832 17.316 442.195 17.32 cv
441.574 17.316 441.035 17.234 440.582 17.062 cv
440.121 16.895 439.742 16.645 439.445 16.316 cv
439.141 15.992 438.918 15.59 438.773 15.109 cv
438.629 14.633 438.559 14.086 438.559 13.469 cv
438.559 12.879 438.637 12.34 438.793 11.848 cv
438.949 11.359 439.188 10.937 439.508 10.586 cv
439.824 10.238 440.219 9.96503 440.695 9.77002 cv
441.168 9.578 441.727 9.48401 442.367 9.47998 cv
442.992 9.48401 443.531 9.56598 443.988 9.73401 cv
444.445 9.90601 444.824 10.156 445.121 10.48 cv
445.418 10.809 445.641 11.211 445.789 11.687 cv
445.934 12.168 446.004 12.715 446.008 13.328 cv
cp
443.988 13.406 mo
443.984 13.07 443.957 12.754 443.906 12.461 cv
443.848 12.176 443.754 11.926 443.629 11.711 cv
443.496 11.5 443.324 11.332 443.113 11.211 cv
442.895 11.094 442.625 11.035 442.297 11.031 cv
442.008 11.035 441.754 11.09 441.535 11.191 cv
441.316 11.301 441.137 11.457 440.996 11.66 cv
440.855 11.867 440.75 12.113 440.68 12.398 cv
440.609 12.691 440.574 13.02 440.574 13.383 cv
440.574 13.73 440.602 14.047 440.66 14.332 cv
440.715 14.625 440.809 14.875 440.938 15.086 cv
441.063 15.301 441.234 15.465 441.457 15.578 cv
441.672 15.699 441.941 15.758 442.266 15.754 cv
442.559 15.758 442.816 15.703 443.039 15.594 cv
443.254 15.488 443.434 15.336 443.574 15.129 cv
443.715 14.93 443.816 14.684 443.887 14.395 cv
443.949 14.109 443.984 13.781 443.988 13.406 cv
cp
f
454.156 16.875 mo
454.152 16.937 454.141 16.984 454.117 17.02 cv
454.09 17.062 454.043 17.094 453.984 17.117 cv
453.918 17.141 453.836 17.156 453.73 17.172 cv
453.625 17.18 453.492 17.187 453.34 17.187 cv
453.168 17.187 453.035 17.18 452.934 17.172 cv
452.828 17.156 452.742 17.141 452.68 17.117 cv
452.613 17.094 452.566 17.062 452.539 17.02 cv
452.508 16.984 452.492 16.937 452.496 16.875 cv
452.496 16.105 li
452.137 16.492 451.762 16.789 451.371 17 cv
450.973 17.211 450.539 17.316 450.066 17.32 cv
449.531 17.316 449.082 17.215 448.719 17.012 cv
448.352 16.809 448.055 16.535 447.824 16.184 cv
447.59 15.84 447.422 15.434 447.32 14.965 cv
447.219 14.504 447.168 14.012 447.168 13.492 cv
447.168 12.879 447.23 12.324 447.363 11.828 cv
447.492 11.336 447.688 10.914 447.945 10.566 cv
448.199 10.219 448.516 9.953 448.895 9.76202 cv
449.273 9.578 449.711 9.48401 450.207 9.47998 cv
450.594 9.48401 450.945 9.56201 451.266 9.71899 cv
451.578 9.87903 451.895 10.109 452.207 10.414 cv
452.207 6.65198 li
452.207 6.60199 452.219 6.55499 452.25 6.51202 cv
452.273 6.47302 452.328 6.43701 452.406 6.40601 cv
452.48 6.37903 452.578 6.35901 452.707 6.34003 cv
452.828 6.328 452.988 6.32001 453.184 6.31598 cv
453.375 6.32001 453.531 6.328 453.656 6.34003 cv
453.777 6.35901 453.879 6.37903 453.953 6.40601 cv
454.023 6.43701 454.074 6.47302 454.109 6.51202 cv
454.137 6.55499 454.152 6.60199 454.156 6.65198 cv
cp
452.207 12.23 mo
451.926 11.879 451.656 11.609 451.402 11.422 cv
451.141 11.234 450.871 11.141 450.594 11.141 cv
450.34 11.141 450.121 11.207 449.938 11.332 cv
449.75 11.465 449.602 11.633 449.492 11.844 cv
449.379 12.055 449.297 12.293 449.242 12.555 cv
449.188 12.82 449.16 13.09 449.16 13.359 cv
449.16 13.656 449.184 13.937 449.23 14.211 cv
449.277 14.488 449.352 14.734 449.461 14.949 cv
449.563 15.164 449.707 15.336 449.887 15.465 cv
450.063 15.598 450.285 15.664 450.555 15.66 cv
450.688 15.664 450.816 15.645 450.949 15.602 cv
451.074 15.566 451.207 15.504 451.34 15.41 cv
451.473 15.324 451.609 15.207 451.75 15.062 cv
451.891 14.922 452.043 14.746 452.207 14.539 cv
cp
f
462.555 13.199 mo
462.551 13.437 462.5 13.613 462.395 13.727 cv
462.285 13.844 462.137 13.902 461.957 13.898 cv
457.723 13.898 li
457.719 14.199 457.754 14.469 457.828 14.707 cv
457.895 14.949 458.008 15.152 458.164 15.32 cv
458.316 15.492 458.512 15.621 458.754 15.707 cv
458.992 15.797 459.281 15.84 459.625 15.84 cv
459.965 15.84 460.266 15.816 460.527 15.766 cv
460.785 15.719 461.012 15.664 461.203 15.602 cv
461.391 15.543 461.547 15.488 461.676 15.437 cv
461.797 15.391 461.898 15.367 461.98 15.363 cv
462.023 15.367 462.063 15.375 462.098 15.391 cv
462.125 15.41 462.152 15.441 462.172 15.488 cv
462.191 15.535 462.203 15.602 462.215 15.687 cv
462.219 15.773 462.223 15.883 462.227 16.012 cv
462.223 16.129 462.223 16.227 462.219 16.305 cv
462.211 16.387 462.203 16.453 462.195 16.508 cv
462.184 16.566 462.168 16.617 462.148 16.652 cv
462.129 16.695 462.102 16.73 462.07 16.766 cv
462.035 16.805 461.941 16.855 461.793 16.914 cv
461.637 16.98 461.445 17.043 461.215 17.098 cv
460.977 17.16 460.707 17.207 460.41 17.254 cv
460.105 17.293 459.785 17.316 459.445 17.32 cv
458.824 17.316 458.281 17.242 457.82 17.086 cv
457.352 16.934 456.965 16.695 456.656 16.379 cv
456.34 16.062 456.105 15.664 455.957 15.18 cv
455.801 14.699 455.727 14.133 455.73 13.477 cv
455.727 12.863 455.805 12.305 455.969 11.809 cv
456.125 11.312 456.359 10.895 456.672 10.547 cv
456.977 10.203 457.352 9.93701 457.789 9.75403 cv
458.227 9.57397 458.719 9.48401 459.273 9.47998 cv
459.852 9.48401 460.352 9.57001 460.766 9.73798 cv
461.18 9.914 461.516 10.152 461.781 10.453 cv
462.043 10.758 462.238 11.117 462.367 11.531 cv
462.488 11.949 462.551 12.398 462.555 12.887 cv
cp
460.652 12.637 mo
460.664 12.086 460.555 11.652 460.32 11.34 cv
460.086 11.027 459.719 10.871 459.227 10.867 cv
458.977 10.871 458.762 10.918 458.578 11.008 cv
458.391 11.105 458.238 11.23 458.117 11.387 cv
457.992 11.547 457.898 11.734 457.836 11.949 cv
457.77 12.164 457.73 12.395 457.723 12.637 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
