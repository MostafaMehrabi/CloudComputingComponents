%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingOfFilteringTimes-Local.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 4:00:14 p.m.
%%BoundingBox: 0 0 621 544
%%HiResBoundingBox: 0 0 620.8801 543.2400
%%CropBox: 0 0 620.8801 543.2400
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -543.24 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 543.24 li
620.88 543.24 li
620.88 0 li
cp
clp
gsave
0 543.24 mo
621 543.24 li
621 -.76001 li
0 -.76001 li
cp
clp
0 0 mo
620.879 0 li
620.879 543.238 li
0 543.238 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
36.84 472.199 mo
605.641 472.199 li
36.84 447.84 mo
605.641 447.84 li
36.84 423.602 mo
605.641 423.602 li
36.84 399.238 mo
605.641 399.238 li
36.84 375 mo
605.641 375 li
36.84 350.641 mo
605.641 350.641 li
36.84 326.398 mo
605.641 326.398 li
36.84 302.039 mo
605.641 302.039 li
36.84 277.801 mo
605.641 277.801 li
36.84 253.441 mo
605.641 253.441 li
36.84 229.199 mo
605.641 229.199 li
36.84 204.84 mo
605.641 204.84 li
36.84 180.602 mo
605.641 180.602 li
36.84 156.238 mo
605.641 156.238 li
36.84 132 mo
605.641 132 li
36.84 107.641 mo
605.641 107.641 li
36.84 83.398 mo
605.641 83.398 li
36.84 59.039 mo
605.641 59.039 li
36.84 34.801 mo
605.641 34.801 li
.328344 .284215 .278569 .000915541 cmyk
@
72.359 34.801 mo
72.359 496.441 li
143.52 34.801 mo
143.52 496.441 li
214.559 34.801 mo
214.559 496.441 li
285.719 34.801 mo
285.719 496.441 li
356.762 34.801 mo
356.762 496.441 li
427.922 34.801 mo
427.922 496.441 li
498.961 34.801 mo
498.961 496.441 li
570.121 34.801 mo
570.121 496.441 li
.178592 .148898 .143923 0 cmyk
@
36.84 34.801 mo
36.84 496.441 li
107.879 34.801 mo
107.879 496.441 li
179.039 34.801 mo
179.039 496.441 li
250.078 34.801 mo
250.078 496.441 li
321.238 34.801 mo
321.238 496.441 li
392.281 34.801 mo
392.281 496.441 li
463.441 34.801 mo
463.441 496.441 li
534.602 34.801 mo
534.602 496.441 li
605.641 34.801 mo
605.641 496.441 li
.328344 .284215 .278569 .000915541 cmyk
@
16.68 487.199 mo
23.762 487.199 li
23.762 504.238 li
16.68 504.238 li
cp
0 0 0 0 cmyk
ef
16.68 462.84 mo
23.762 462.84 li
23.762 480 li
16.68 480 li
cp
ef
16.68 438.602 mo
23.762 438.602 li
23.762 455.641 li
16.68 455.641 li
cp
ef
16.68 414.238 mo
23.762 414.238 li
23.762 431.398 li
16.68 431.398 li
cp
ef
16.68 390 mo
23.762 390 li
23.762 407.039 li
16.68 407.039 li
cp
ef
16.68 365.641 mo
23.762 365.641 li
23.762 382.801 li
16.68 382.801 li
cp
ef
16.68 341.398 mo
23.762 341.398 li
23.762 358.441 li
16.68 358.441 li
cp
ef
16.68 317.039 mo
23.762 317.039 li
23.762 334.199 li
16.68 334.199 li
cp
ef
16.68 292.801 mo
23.762 292.801 li
23.762 309.84 li
16.68 309.84 li
cp
ef
9.602 268.441 mo
23.762 268.441 li
23.762 285.48 li
9.602 285.48 li
cp
ef
9.602 244.199 mo
23.762 244.199 li
23.762 261.238 li
9.602 261.238 li
cp
ef
9.602 219.84 mo
23.762 219.84 li
23.762 236.879 li
9.602 236.879 li
cp
ef
9.602 195.48 mo
23.762 195.48 li
23.762 212.64 li
9.602 212.64 li
cp
ef
9.602 171.238 mo
23.762 171.238 li
23.762 188.281 li
9.602 188.281 li
cp
ef
9.602 146.879 mo
23.762 146.879 li
23.762 164.039 li
9.602 164.039 li
cp
ef
9.602 122.641 mo
23.762 122.641 li
23.762 139.68 li
9.602 139.68 li
cp
ef
9.602 98.281 mo
23.762 98.281 li
23.762 115.441 li
9.602 115.441 li
cp
ef
9.602 74.039 mo
23.762 74.039 li
23.762 91.078 li
9.602 91.078 li
cp
ef
9.602 49.68 mo
23.762 49.68 li
23.762 66.84 li
9.602 66.84 li
cp
ef
9.602 25.441 mo
23.762 25.441 li
23.762 42.48 li
9.602 42.48 li
cp
ef
.96 lw
36.84 496.441 mo
605.641 496.441 li
.367803 .29575 .300999 .00198367 cmyk
@
36.84 496.441 mo
36.84 500.879 li
107.879 496.441 mo
107.879 500.879 li
179.039 496.441 mo
179.039 500.879 li
250.078 496.441 mo
250.078 500.879 li
321.238 496.441 mo
321.238 500.879 li
392.281 496.441 mo
392.281 500.879 li
463.441 496.441 mo
463.441 500.879 li
534.602 496.441 mo
534.602 500.879 li
605.641 496.441 mo
605.641 500.879 li
@
gsave
36.84 34.68 mo
606.36 34.68 li
606.36 497.16 li
36.84 497.16 li
cp
clp
1 lc
36.84 496.441 mo
107.879 459.359 li
179.039 401.039 li
250.078 343.441 li
321.238 284.641 li
392.281 225.602 li
463.441 167.641 li
534.602 108.121 li
605.641 51 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
41.809 501.469 mo
31.73 491.391 li
31.73 501.469 mo
41.809 491.391 li
.62768 .285466 0 0 cmyk
@
112.969 464.391 mo
102.891 454.309 li
102.891 464.391 mo
112.969 454.309 li
@
184.012 405.949 mo
173.93 395.871 li
173.93 405.949 mo
184.012 395.871 li
@
255.172 348.469 mo
245.09 338.391 li
245.09 348.469 mo
255.172 338.391 li
@
326.211 289.672 mo
316.129 279.59 li
316.129 289.672 mo
326.211 279.59 li
@
397.371 230.512 mo
387.289 220.43 li
387.289 230.512 mo
397.371 220.43 li
@
468.531 172.672 mo
458.449 162.59 li
458.449 172.672 mo
468.531 162.59 li
@
539.57 113.031 mo
529.488 102.949 li
529.488 113.031 mo
539.57 102.949 li
@
610.73 55.91 mo
600.648 45.828 li
600.648 55.91 mo
610.73 45.828 li
@
gsave
36.84 34.68 mo
606.36 34.68 li
606.36 497.16 li
36.84 497.16 li
cp
clp
.96 lw
1 lc
36.84 496.441 mo
107.879 445.801 li
179.039 399.84 li
250.078 343.078 li
321.238 284.281 li
392.281 225.719 li
463.441 166.32 li
534.602 107.281 li
605.641 49.922 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
41.809 501.469 mo
31.73 491.391 li
31.73 501.469 mo
41.809 491.391 li
.0319219 .621851 .911223 .000427253 cmyk
@
112.969 450.828 mo
102.891 440.75 li
102.891 450.828 mo
112.969 440.75 li
@
184.012 404.871 mo
173.93 394.789 li
173.93 404.871 mo
184.012 394.789 li
@
255.172 348.109 mo
245.09 338.031 li
245.09 348.109 mo
255.172 338.031 li
@
326.211 289.191 mo
316.129 279.109 li
316.129 289.191 mo
326.211 279.109 li
@
397.371 230.629 mo
387.289 220.551 li
387.289 230.629 mo
397.371 220.551 li
@
468.531 171.352 mo
458.449 161.27 li
458.449 171.352 mo
468.531 161.27 li
@
539.57 112.309 mo
529.488 102.23 li
529.488 112.309 mo
539.57 102.23 li
@
610.73 54.949 mo
600.648 44.871 li
600.648 54.949 mo
610.73 44.871 li
@
gsave
36.84 34.68 mo
606.36 34.68 li
606.36 497.16 li
36.84 497.16 li
cp
clp
.96 lw
1 lc
36.84 496.441 mo
107.879 459 li
179.039 421.078 li
250.078 376.32 li
321.238 328.68 li
392.281 281.281 li
463.441 233.879 li
534.602 186.121 li
605.641 138.719 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
41.809 501.469 mo
31.73 491.391 li
31.73 501.469 mo
41.809 491.391 li
.619135 .109529 .981689 .00570687 cmyk
@
112.969 464.031 mo
102.891 453.949 li
102.891 464.031 mo
112.969 453.949 li
@
184.012 426.109 mo
173.93 416.031 li
173.93 426.109 mo
184.012 416.031 li
@
255.172 381.352 mo
245.09 371.27 li
245.09 381.352 mo
255.172 371.27 li
@
326.211 333.711 mo
316.129 323.629 li
316.129 333.711 mo
326.211 323.629 li
@
397.371 286.191 mo
387.289 276.109 li
387.289 286.191 mo
397.371 276.109 li
@
468.531 238.91 mo
458.449 228.828 li
458.449 238.91 mo
468.531 228.828 li
@
539.57 191.148 mo
529.488 181.07 li
529.488 191.148 mo
539.57 181.07 li
@
610.73 143.629 mo
600.648 133.551 li
600.648 143.629 mo
610.73 133.551 li
@
gsave
36.84 34.68 mo
606.36 34.68 li
606.36 497.16 li
36.84 497.16 li
cp
clp
.96 lw
1 lc
36.84 496.441 mo
107.879 469.801 li
179.039 403.559 li
250.078 377.762 li
321.238 332.641 li
392.281 282.48 li
463.441 236.398 li
534.602 188.039 li
605.641 147.48 li
0 .990631 1 .000396735 cmyk
@
grestore
41.809 501.469 mo
31.73 491.391 li
31.73 501.469 mo
41.809 491.391 li
0 .990631 1 .000396735 cmyk
@
112.969 474.711 mo
102.891 464.629 li
102.891 474.711 mo
112.969 464.629 li
@
184.012 408.469 mo
173.93 398.391 li
173.93 408.469 mo
184.012 398.391 li
@
255.172 382.672 mo
245.09 372.59 li
245.09 382.672 mo
255.172 372.59 li
@
326.211 337.672 mo
316.129 327.59 li
316.129 337.672 mo
326.211 327.59 li
@
397.371 287.512 mo
387.289 277.43 li
387.289 287.512 mo
397.371 277.43 li
@
468.531 241.309 mo
458.449 231.23 li
458.449 241.309 mo
468.531 231.23 li
@
539.57 193.07 mo
529.488 182.988 li
529.488 193.07 mo
539.57 182.988 li
@
610.73 152.391 mo
600.648 142.309 li
600.648 152.391 mo
610.73 142.309 li
@
gsave
36.84 34.68 mo
606.36 34.68 li
606.36 497.16 li
36.84 497.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
36.84 496.441 mo
107.879 469.559 li
179.039 422.52 li
250.078 404.398 li
321.238 365.398 li
392.281 328.68 li
463.441 289.441 li
534.602 239.641 li
605.641 216.238 li
.62768 .285466 0 0 cmyk
@
grestore
41.809 501.469 mo
31.73 491.391 li
31.73 501.469 mo
41.809 491.391 li
.62768 .285466 0 0 cmyk
@
112.969 474.469 mo
102.891 464.391 li
102.891 474.469 mo
112.969 464.391 li
@
184.012 427.43 mo
173.93 417.352 li
173.93 427.43 mo
184.012 417.352 li
@
255.172 409.309 mo
245.09 399.23 li
245.09 409.309 mo
255.172 399.23 li
@
326.211 370.309 mo
316.129 360.23 li
316.129 370.309 mo
326.211 360.23 li
@
397.371 333.59 mo
387.289 323.512 li
387.289 333.59 mo
397.371 323.512 li
@
468.531 294.469 mo
458.449 284.391 li
458.449 294.469 mo
468.531 284.391 li
@
539.57 244.551 mo
529.488 234.469 li
529.488 244.551 mo
539.57 234.469 li
@
610.73 221.148 mo
600.648 211.07 li
600.648 221.148 mo
610.73 211.07 li
@
gsave
36.84 34.68 mo
606.36 34.68 li
606.36 497.16 li
36.84 497.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
36.84 496.441 mo
107.879 470.16 li
179.039 402.48 li
250.078 423.602 li
321.238 387.602 li
392.281 339.961 li
463.441 329.281 li
534.602 294.121 li
605.641 249.48 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
41.809 501.469 mo
31.73 491.391 li
31.73 501.469 mo
41.809 491.391 li
.0319219 .621851 .911223 .000427253 cmyk
@
112.969 475.07 mo
102.891 464.988 li
102.891 475.07 mo
112.969 464.988 li
@
184.012 407.512 mo
173.93 397.43 li
173.93 407.512 mo
184.012 397.43 li
@
255.172 428.629 mo
245.09 418.551 li
245.09 428.629 mo
255.172 418.551 li
@
326.211 392.629 mo
316.129 382.551 li
316.129 392.629 mo
326.211 382.551 li
@
397.371 344.988 mo
387.289 334.91 li
387.289 344.988 mo
397.371 334.91 li
@
468.531 334.191 mo
458.449 324.109 li
458.449 334.191 mo
468.531 324.109 li
@
539.57 299.148 mo
529.488 289.07 li
529.488 299.148 mo
539.57 289.07 li
@
610.73 254.391 mo
600.648 244.309 li
600.648 254.391 mo
610.73 244.309 li
@
gsave
36.84 34.68 mo
606.36 34.68 li
606.36 497.16 li
36.84 497.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
36.84 496.441 mo
107.879 461.641 li
179.039 403.559 li
250.078 424.801 li
321.238 407.398 li
392.281 376.32 li
463.441 340.801 li
534.602 328.801 li
605.641 297.359 li
.466651 0 .889799 0 cmyk
@
grestore
41.809 501.469 mo
31.73 491.391 li
31.73 501.469 mo
41.809 491.391 li
.619135 .109529 .981689 .00570687 cmyk
@
112.969 466.672 mo
102.891 456.59 li
102.891 466.672 mo
112.969 456.59 li
@
184.012 408.59 mo
173.93 398.512 li
173.93 408.59 mo
184.012 398.512 li
@
255.172 429.828 mo
245.09 419.75 li
245.09 429.828 mo
255.172 419.75 li
@
326.211 412.43 mo
316.129 402.352 li
316.129 412.43 mo
326.211 402.352 li
@
397.371 381.352 mo
387.289 371.27 li
387.289 381.352 mo
397.371 371.27 li
@
468.531 345.711 mo
458.449 335.629 li
458.449 345.711 mo
468.531 335.629 li
@
539.57 333.711 mo
529.488 323.629 li
529.488 333.711 mo
539.57 323.629 li
@
610.73 302.391 mo
600.648 292.309 li
600.648 302.391 mo
610.73 292.309 li
@
gsave
36.84 34.68 mo
606.36 34.68 li
606.36 497.16 li
36.84 497.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
36.84 496.441 mo
107.879 469.801 li
179.039 402.238 li
250.078 407.039 li
321.238 422.879 li
392.281 393.359 li
463.441 322.68 li
534.602 338.879 li
605.641 328.199 li
0 .990631 1 .000396735 cmyk
@
grestore
41.809 501.469 mo
31.73 491.391 li
31.73 501.469 mo
41.809 491.391 li
0 .990631 1 .000396735 cmyk
@
112.969 474.711 mo
102.891 464.629 li
102.891 474.711 mo
112.969 464.629 li
@
184.012 407.148 mo
173.93 397.07 li
173.93 407.148 mo
184.012 397.07 li
@
255.172 412.07 mo
245.09 401.988 li
245.09 412.07 mo
255.172 401.988 li
@
326.211 427.91 mo
316.129 417.828 li
316.129 427.91 mo
326.211 417.828 li
@
397.371 398.391 mo
387.289 388.309 li
387.289 398.391 mo
397.371 388.309 li
@
468.531 327.711 mo
458.449 317.629 li
458.449 327.711 mo
468.531 317.629 li
@
539.57 343.789 mo
529.488 333.711 li
529.488 343.789 mo
539.57 333.711 li
@
610.73 333.23 mo
600.648 323.148 li
600.648 333.23 mo
610.73 323.148 li
@
16.77 487.156 mo
23.864 487.156 li
23.864 504.246 li
16.77 504.246 li
cp
0 0 0 0 cmyk
ef
23.156 500.102 mo
23.152 500.191 23.145 500.262 23.133 500.32 cv
23.117 500.383 23.098 500.434 23.078 500.465 cv
23.055 500.504 23.031 500.527 23 500.543 cv
22.969 500.559 22.938 500.566 22.91 500.566 cv
18.273 500.566 li
18.238 500.566 18.211 500.559 18.184 500.543 cv
18.156 500.527 18.129 500.504 18.105 500.465 cv
18.078 500.434 18.059 500.383 18.047 500.32 cv
18.031 500.262 18.023 500.191 18.027 500.102 cv
18.023 500.023 18.031 499.949 18.047 499.887 cv
18.059 499.828 18.074 499.781 18.098 499.742 cv
18.113 499.707 18.141 499.676 18.172 499.652 cv
18.203 499.633 18.234 499.625 18.273 499.621 cv
20.125 499.621 li
20.125 492.875 li
18.41 493.895 li
18.32 493.945 18.25 493.973 18.203 493.98 cv
18.148 493.988 18.105 493.98 18.074 493.949 cv
18.039 493.922 18.02 493.871 18.008 493.801 cv
17.996 493.734 17.988 493.648 17.992 493.539 cv
17.988 493.465 17.992 493.398 18.004 493.34 cv
18.008 493.289 18.02 493.242 18.035 493.203 cv
18.047 493.168 18.066 493.137 18.09 493.109 cv
18.113 493.082 18.145 493.055 18.191 493.027 cv
20.234 491.715 li
20.25 491.703 20.27 491.691 20.301 491.684 cv
20.324 491.676 20.359 491.668 20.406 491.656 cv
20.445 491.648 20.496 491.641 20.551 491.637 cv
20.605 491.637 20.672 491.637 20.758 491.633 cv
20.863 491.637 20.957 491.641 21.031 491.648 cv
21.102 491.656 21.156 491.672 21.203 491.687 cv
21.242 491.707 21.27 491.727 21.285 491.75 cv
21.293 491.777 21.301 491.801 21.305 491.824 cv
21.305 499.621 li
22.91 499.621 li
22.945 499.625 22.98 499.633 23.012 499.652 cv
23.043 499.676 23.066 499.707 23.09 499.742 cv
23.105 499.781 23.121 499.828 23.137 499.887 cv
23.145 499.949 23.152 500.023 23.156 500.102 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
16.77 462.855 mo
23.864 462.855 li
23.864 479.945 li
16.77 479.945 li
cp
0 0 0 0 cmyk
ef
23.137 475.75 mo
23.133 475.836 23.129 475.91 23.117 475.973 cv
23.105 476.039 23.09 476.094 23.07 476.133 cv
23.047 476.18 23.02 476.211 22.988 476.227 cv
22.953 476.25 22.914 476.258 22.875 476.258 cv
17.973 476.258 li
17.91 476.258 17.852 476.25 17.805 476.234 cv
17.754 476.219 17.715 476.195 17.68 476.156 cv
17.645 476.125 17.617 476.07 17.605 476 cv
17.586 475.93 17.578 475.844 17.582 475.742 cv
17.578 475.652 17.582 475.574 17.59 475.504 cv
17.594 475.437 17.609 475.379 17.637 475.324 cv
17.66 475.273 17.691 475.219 17.727 475.164 cv
17.762 475.113 17.805 475.059 17.863 474.996 cv
19.637 473.172 li
20.047 472.754 20.375 472.379 20.625 472.043 cv
20.871 471.715 21.063 471.41 21.195 471.133 cv
21.328 470.859 21.414 470.609 21.461 470.383 cv
21.5 470.16 21.523 469.949 21.523 469.754 cv
21.523 469.559 21.488 469.375 21.422 469.195 cv
21.355 469.023 21.262 468.867 21.137 468.73 cv
21.012 468.602 20.855 468.496 20.668 468.414 cv
20.48 468.34 20.262 468.301 20.016 468.297 cv
19.727 468.301 19.469 468.34 19.242 468.414 cv
19.012 468.496 18.813 468.582 18.641 468.668 cv
18.469 468.762 18.324 468.844 18.207 468.922 cv
18.09 469 18.004 469.039 17.953 469.039 cv
17.918 469.039 17.887 469.031 17.863 469.012 cv
17.832 468.996 17.813 468.965 17.797 468.922 cv
17.781 468.883 17.766 468.828 17.758 468.758 cv
17.746 468.691 17.742 468.609 17.746 468.512 cv
17.742 468.445 17.746 468.387 17.754 468.336 cv
17.758 468.285 17.766 468.242 17.777 468.203 cv
17.785 468.168 17.801 468.133 17.82 468.102 cv
17.84 468.07 17.875 468.031 17.934 467.98 cv
17.984 467.934 18.078 467.867 18.215 467.785 cv
18.348 467.703 18.52 467.625 18.723 467.543 cv
18.926 467.465 19.148 467.395 19.395 467.34 cv
19.637 467.285 19.895 467.258 20.168 467.258 cv
20.594 467.258 20.969 467.32 21.293 467.441 cv
21.613 467.562 21.879 467.727 22.094 467.937 cv
22.305 468.148 22.465 468.395 22.57 468.668 cv
22.676 468.949 22.73 469.246 22.73 469.559 cv
22.73 469.848 22.703 470.129 22.652 470.406 cv
22.602 470.691 22.496 470.996 22.336 471.32 cv
22.172 471.648 21.938 472.012 21.633 472.41 cv
21.324 472.812 20.918 473.273 20.414 473.789 cv
19.008 475.258 li
22.867 475.258 li
22.898 475.262 22.934 475.273 22.973 475.289 cv
23.004 475.312 23.035 475.344 23.063 475.383 cv
23.086 475.426 23.105 475.477 23.117 475.535 cv
23.129 475.602 23.133 475.672 23.137 475.75 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
16.77 438.551 mo
23.864 438.551 li
23.864 455.641 li
16.77 455.641 li
cp
0 0 0 0 cmyk
ef
23.066 449.434 mo
23.063 449.844 22.992 450.211 22.852 450.535 cv
22.707 450.863 22.504 451.145 22.242 451.375 cv
21.977 451.609 21.648 451.785 21.262 451.91 cv
20.871 452.035 20.434 452.098 19.949 452.098 cv
19.645 452.098 19.367 452.07 19.113 452.023 cv
18.852 451.977 18.621 451.926 18.426 451.855 cv
18.223 451.793 18.059 451.723 17.926 451.652 cv
17.793 451.582 17.707 451.531 17.676 451.496 cv
17.637 451.469 17.613 451.437 17.598 451.402 cv
17.578 451.371 17.559 451.332 17.547 451.285 cv
17.531 451.242 17.523 451.187 17.516 451.117 cv
17.508 451.055 17.504 450.973 17.508 450.871 cv
17.504 450.711 17.52 450.598 17.555 450.531 cv
17.586 450.469 17.633 450.434 17.695 450.434 cv
17.738 450.434 17.82 450.473 17.945 450.543 cv
18.066 450.621 18.227 450.699 18.422 450.781 cv
18.613 450.867 18.84 450.945 19.105 451.016 cv
19.363 451.09 19.656 451.125 19.977 451.125 cv
20.285 451.125 20.555 451.086 20.793 451.008 cv
21.023 450.93 21.223 450.82 21.383 450.68 cv
21.539 450.539 21.656 450.371 21.738 450.176 cv
21.816 449.98 21.855 449.77 21.859 449.543 cv
21.855 449.293 21.805 449.066 21.707 448.863 cv
21.602 448.664 21.453 448.492 21.262 448.344 cv
21.063 448.199 20.824 448.086 20.539 448.008 cv
20.254 447.93 19.93 447.891 19.566 447.891 cv
18.695 447.891 li
18.652 447.891 18.617 447.883 18.582 447.867 cv
18.547 447.852 18.516 447.824 18.492 447.785 cv
18.465 447.75 18.445 447.703 18.43 447.645 cv
18.414 447.586 18.406 447.508 18.406 447.41 cv
18.406 447.324 18.41 447.254 18.426 447.195 cv
18.434 447.141 18.453 447.094 18.484 447.059 cv
18.508 447.023 18.539 447 18.57 446.98 cv
18.602 446.969 18.637 446.961 18.68 446.957 cv
19.453 446.957 li
19.754 446.961 20.023 446.922 20.266 446.84 cv
20.5 446.766 20.703 446.652 20.875 446.504 cv
21.039 446.359 21.168 446.184 21.258 445.98 cv
21.348 445.777 21.395 445.551 21.395 445.297 cv
21.395 445.117 21.363 444.941 21.305 444.773 cv
21.242 444.609 21.152 444.465 21.035 444.34 cv
20.914 444.215 20.762 444.117 20.582 444.047 cv
20.395 443.977 20.184 443.941 19.941 443.941 cv
19.676 443.941 19.43 443.984 19.211 444.062 cv
18.984 444.145 18.789 444.23 18.617 444.32 cv
18.441 444.414 18.297 444.5 18.184 444.578 cv
18.07 444.66 17.988 444.699 17.945 444.695 cv
17.91 444.699 17.883 444.691 17.859 444.68 cv
17.832 444.668 17.813 444.645 17.797 444.609 cv
17.781 444.578 17.77 444.531 17.762 444.465 cv
17.754 444.406 17.75 444.324 17.754 444.223 cv
17.75 444.156 17.75 444.098 17.758 444.043 cv
17.758 443.992 17.77 443.945 17.785 443.902 cv
17.801 443.867 17.816 443.832 17.836 443.797 cv
17.852 443.77 17.883 443.73 17.926 443.684 cv
17.969 443.641 18.055 443.578 18.191 443.496 cv
18.32 443.414 18.484 443.336 18.68 443.254 cv
18.871 443.176 19.094 443.105 19.352 443.051 cv
19.602 442.996 19.875 442.969 20.172 442.969 cv
20.578 442.969 20.941 443.023 21.254 443.125 cv
21.566 443.234 21.824 443.383 22.035 443.57 cv
22.238 443.766 22.395 443.996 22.5 444.262 cv
22.602 444.531 22.652 444.824 22.656 445.148 cv
22.652 445.43 22.617 445.691 22.547 445.926 cv
22.473 446.168 22.363 446.379 22.223 446.562 cv
22.078 446.75 21.906 446.906 21.703 447.035 cv
21.496 447.168 21.258 447.262 20.988 447.309 cv
20.988 447.32 li
21.293 447.355 21.574 447.43 21.828 447.551 cv
22.082 447.672 22.301 447.824 22.484 448.008 cv
22.664 448.191 22.805 448.406 22.91 448.648 cv
23.012 448.895 23.063 449.156 23.066 449.434 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
16.77 414.25 mo
23.864 414.25 li
23.864 431.34 li
16.77 431.34 li
cp
0 0 0 0 cmyk
ef
23.512 425.137 mo
23.508 425.289 23.484 425.41 23.441 425.496 cv
23.395 425.586 23.332 425.629 23.25 425.625 cv
22.25 425.625 li
22.25 427.488 li
22.25 427.527 22.238 427.559 22.223 427.582 cv
22.199 427.609 22.168 427.629 22.125 427.648 cv
22.074 427.664 22.012 427.676 21.941 427.687 cv
21.863 427.695 21.77 427.699 21.652 427.703 cv
21.535 427.699 21.438 427.695 21.367 427.687 cv
21.289 427.676 21.23 427.664 21.188 427.648 cv
21.141 427.629 21.109 427.609 21.094 427.582 cv
21.074 427.559 21.066 427.527 21.07 427.488 cv
21.07 425.625 li
17.441 425.625 li
17.383 425.629 17.34 425.621 17.305 425.605 cv
17.27 425.594 17.234 425.566 17.207 425.527 cv
17.176 425.492 17.156 425.441 17.145 425.371 cv
17.133 425.305 17.129 425.215 17.129 425.102 cv
17.129 425.02 17.129 424.941 17.137 424.871 cv
17.137 424.801 17.148 424.738 17.164 424.684 cv
17.176 424.629 17.191 424.574 17.219 424.52 cv
17.238 424.465 17.266 424.41 17.301 424.348 cv
20.461 418.961 li
20.48 418.926 20.516 418.895 20.563 418.867 cv
20.605 418.84 20.66 418.816 20.734 418.797 cv
20.801 418.781 20.887 418.77 20.992 418.758 cv
21.094 418.754 21.215 418.75 21.355 418.746 cv
21.504 418.75 21.641 418.754 21.758 418.766 cv
21.871 418.777 21.961 418.793 22.035 418.809 cv
22.102 418.828 22.156 418.852 22.195 418.883 cv
22.23 418.914 22.25 418.949 22.25 418.988 cv
22.25 424.652 li
23.25 424.652 li
23.324 424.656 23.387 424.695 23.438 424.773 cv
23.484 424.855 23.508 424.977 23.512 425.137 cv
cp
21.07 419.785 mo
21.059 419.785 li
18.207 424.652 li
21.07 424.652 li
cp
.629114 .553033 .543389 .289647 cmyk
f
16.77 389.949 mo
23.864 389.949 li
23.864 407.039 li
16.77 407.039 li
cp
0 0 0 0 cmyk
ef
23.094 400.488 mo
23.094 400.965 23.012 401.387 22.852 401.758 cv
22.691 402.129 22.465 402.441 22.176 402.695 cv
21.879 402.949 21.531 403.145 21.129 403.273 cv
20.723 403.406 20.273 403.469 19.781 403.469 cv
19.504 403.469 19.242 403.449 19 403.41 cv
18.75 403.371 18.531 403.324 18.344 403.27 cv
18.148 403.215 17.992 403.16 17.867 403.102 cv
17.742 403.051 17.664 403.008 17.633 402.973 cv
17.598 402.941 17.574 402.91 17.563 402.883 cv
17.547 402.855 17.531 402.824 17.523 402.781 cv
17.508 402.746 17.5 402.695 17.5 402.633 cv
17.492 402.574 17.492 402.504 17.492 402.422 cv
17.492 402.348 17.496 402.277 17.504 402.215 cv
17.512 402.152 17.523 402.102 17.543 402.062 cv
17.559 402.023 17.578 401.996 17.605 401.977 cv
17.629 401.961 17.66 401.953 17.691 401.949 cv
17.738 401.953 17.809 401.98 17.902 402.035 cv
17.996 402.094 18.125 402.156 18.289 402.223 cv
18.453 402.289 18.652 402.352 18.895 402.41 cv
19.129 402.469 19.414 402.496 19.75 402.496 cv
20.051 402.496 20.332 402.461 20.59 402.387 cv
20.844 402.316 21.066 402.203 21.254 402.047 cv
21.438 401.895 21.582 401.699 21.688 401.461 cv
21.793 401.227 21.844 400.937 21.848 400.598 cv
21.844 400.316 21.801 400.066 21.711 399.848 cv
21.621 399.629 21.484 399.449 21.301 399.305 cv
21.113 399.164 20.879 399.059 20.598 398.984 cv
20.313 398.914 19.973 398.875 19.586 398.875 cv
19.301 398.875 19.063 398.891 18.863 398.918 cv
18.66 398.949 18.473 398.965 18.301 398.961 cv
18.172 398.965 18.078 398.934 18.027 398.871 cv
17.969 398.812 17.941 398.699 17.945 398.527 cv
17.945 394.914 li
17.941 394.766 17.977 394.656 18.051 394.578 cv
18.117 394.508 18.219 394.469 18.355 394.469 cv
22.285 394.469 li
22.32 394.469 22.355 394.48 22.391 394.5 cv
22.422 394.523 22.449 394.555 22.477 394.594 cv
22.496 394.637 22.512 394.687 22.527 394.75 cv
22.535 394.816 22.543 394.895 22.547 394.977 cv
22.543 395.145 22.52 395.27 22.48 395.359 cv
22.434 395.453 22.375 395.5 22.297 395.496 cv
19.125 395.496 li
19.125 397.984 li
19.277 397.965 19.434 397.953 19.598 397.945 cv
19.754 397.941 19.941 397.937 20.156 397.937 cv
20.641 397.937 21.066 398 21.434 398.121 cv
21.797 398.242 22.102 398.414 22.352 398.633 cv
22.594 398.859 22.781 399.125 22.906 399.437 cv
23.031 399.754 23.094 400.105 23.094 400.488 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
16.77 365.648 mo
23.864 365.648 li
23.864 382.738 li
16.77 382.738 li
cp
0 0 0 0 cmyk
ef
23.363 376.16 mo
23.363 376.551 23.301 376.93 23.184 377.289 cv
23.059 377.656 22.875 377.973 22.633 378.246 cv
22.383 378.523 22.07 378.746 21.695 378.91 cv
21.313 379.078 20.867 379.16 20.352 379.16 cv
19.98 379.16 19.652 379.117 19.371 379.023 cv
19.086 378.937 18.84 378.805 18.629 378.633 cv
18.418 378.465 18.242 378.258 18.105 378.012 cv
17.965 377.766 17.852 377.484 17.77 377.168 cv
17.684 376.855 17.625 376.512 17.59 376.133 cv
17.551 375.762 17.531 375.359 17.535 374.926 cv
17.531 374.547 17.551 374.164 17.594 373.773 cv
17.633 373.391 17.707 373.016 17.813 372.648 cv
17.918 372.289 18.063 371.949 18.242 371.633 cv
18.422 371.316 18.648 371.039 18.922 370.805 cv
19.195 370.57 19.52 370.383 19.898 370.242 cv
20.277 370.105 20.719 370.039 21.223 370.035 cv
21.391 370.039 21.563 370.047 21.734 370.066 cv
21.906 370.09 22.066 370.121 22.215 370.152 cv
22.363 370.191 22.484 370.227 22.586 370.266 cv
22.684 370.305 22.75 370.34 22.785 370.363 cv
22.813 370.391 22.836 370.418 22.855 370.445 cv
22.871 370.477 22.887 370.508 22.895 370.543 cv
22.902 370.578 22.906 370.617 22.914 370.66 cv
22.914 370.703 22.918 370.758 22.922 370.82 cv
22.918 370.906 22.918 370.977 22.918 371.031 cv
22.914 371.094 22.902 371.141 22.891 371.176 cv
22.871 371.215 22.852 371.242 22.828 371.258 cv
22.801 371.277 22.77 371.285 22.73 371.285 cv
22.68 371.285 22.609 371.27 22.523 371.238 cv
22.434 371.207 22.328 371.172 22.207 371.129 cv
22.082 371.094 21.934 371.059 21.758 371.023 cv
21.582 370.996 21.379 370.98 21.148 370.977 cv
20.719 370.98 20.352 371.066 20.047 371.238 cv
19.742 371.41 19.492 371.645 19.297 371.937 cv
19.102 372.23 18.957 372.57 18.867 372.953 cv
18.77 373.344 18.715 373.746 18.707 374.164 cv
18.824 374.098 18.961 374.031 19.109 373.961 cv
19.258 373.895 19.418 373.832 19.594 373.773 cv
19.77 373.723 19.957 373.676 20.152 373.641 cv
20.348 373.609 20.559 373.594 20.785 373.59 cv
21.262 373.594 21.664 373.66 21.996 373.785 cv
22.324 373.918 22.59 374.098 22.797 374.328 cv
22.996 374.559 23.141 374.828 23.23 375.141 cv
23.316 375.453 23.363 375.793 23.363 376.16 cv
cp
22.168 376.27 mo
22.168 376.008 22.141 375.766 22.09 375.547 cv
22.035 375.332 21.945 375.148 21.824 374.992 cv
21.699 374.844 21.535 374.727 21.332 374.645 cv
21.121 374.562 20.867 374.52 20.57 374.52 cv
20.398 374.52 20.23 374.535 20.063 374.566 cv
19.891 374.598 19.727 374.641 19.57 374.687 cv
19.41 374.742 19.262 374.805 19.121 374.875 cv
18.977 374.949 18.844 375.023 18.727 375.102 cv
18.723 375.695 18.762 376.191 18.84 376.586 cv
18.914 376.984 19.023 377.301 19.168 377.539 cv
19.313 377.781 19.492 377.953 19.707 378.055 cv
19.922 378.16 20.172 378.211 20.461 378.207 cv
20.75 378.211 21.004 378.156 21.219 378.043 cv
21.434 377.937 21.609 377.789 21.754 377.602 cv
21.895 377.418 22 377.211 22.066 376.98 cv
22.133 376.75 22.168 376.516 22.168 376.27 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
16.77 341.34 mo
23.864 341.34 li
23.864 358.43 li
16.77 358.43 li
cp
0 0 0 0 cmyk
ef
23.277 346.359 mo
23.273 346.445 23.27 346.523 23.266 346.586 cv
23.258 346.656 23.25 346.719 23.238 346.777 cv
23.227 346.84 23.211 346.898 23.191 346.953 cv
23.168 347.012 23.145 347.074 23.117 347.137 cv
19.918 354.512 li
19.895 354.57 19.863 354.613 19.832 354.645 cv
19.793 354.68 19.75 354.707 19.703 354.727 cv
19.648 354.746 19.582 354.758 19.5 354.77 cv
19.414 354.773 19.313 354.777 19.199 354.781 cv
19.039 354.777 18.918 354.77 18.832 354.758 cv
18.742 354.742 18.68 354.727 18.645 354.695 cv
18.602 354.668 18.586 354.629 18.594 354.586 cv
18.598 354.543 18.613 354.492 18.641 354.43 cv
22.008 346.891 li
17.742 346.891 li
17.652 346.895 17.586 346.848 17.543 346.754 cv
17.5 346.664 17.48 346.535 17.48 346.367 cv
17.48 346.285 17.484 346.211 17.496 346.141 cv
17.508 346.078 17.523 346.023 17.547 345.98 cv
17.566 345.937 17.594 345.906 17.629 345.883 cv
17.66 345.867 17.699 345.855 17.742 345.852 cv
22.918 345.852 li
22.98 345.855 23.035 345.863 23.086 345.875 cv
23.133 345.891 23.168 345.918 23.195 345.957 cv
23.219 346 23.238 346.051 23.254 346.113 cv
23.266 346.18 23.273 346.262 23.277 346.359 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
16.77 317.039 mo
23.864 317.039 li
23.864 334.129 li
16.77 334.129 li
cp
0 0 0 0 cmyk
ef
23.34 328.152 mo
23.34 328.539 23.27 328.883 23.133 329.18 cv
22.996 329.484 22.801 329.734 22.543 329.937 cv
22.285 330.145 21.965 330.301 21.586 330.402 cv
21.203 330.508 20.77 330.559 20.285 330.559 cv
19.824 330.559 19.414 330.512 19.055 330.418 cv
18.691 330.324 18.387 330.184 18.137 329.992 cv
17.887 329.809 17.695 329.578 17.563 329.301 cv
17.43 329.027 17.363 328.715 17.363 328.359 cv
17.363 328.086 17.406 327.828 17.5 327.594 cv
17.586 327.359 17.719 327.145 17.895 326.949 cv
18.063 326.754 18.273 326.57 18.527 326.395 cv
18.777 326.227 19.063 326.062 19.379 325.906 cv
19.105 325.766 18.863 325.617 18.652 325.457 cv
18.441 325.301 18.262 325.129 18.117 324.941 cv
17.969 324.758 17.859 324.562 17.785 324.352 cv
17.707 324.145 17.668 323.914 17.672 323.664 cv
17.668 323.355 17.723 323.062 17.84 322.789 cv
17.949 322.52 18.121 322.285 18.348 322.082 cv
18.574 321.883 18.859 321.723 19.211 321.605 cv
19.555 321.488 19.965 321.43 20.434 321.43 cv
20.879 321.43 21.266 321.484 21.594 321.59 cv
21.922 321.699 22.191 321.844 22.402 322.027 cv
22.613 322.215 22.77 322.434 22.875 322.684 cv
22.973 322.934 23.023 323.203 23.027 323.492 cv
23.023 323.727 22.984 323.953 22.914 324.164 cv
22.836 324.383 22.727 324.586 22.578 324.773 cv
22.43 324.969 22.25 325.148 22.039 325.312 cv
21.828 325.484 21.586 325.641 21.313 325.781 cv
21.633 325.945 21.918 326.109 22.176 326.277 cv
22.426 326.445 22.641 326.625 22.816 326.82 cv
22.984 327.016 23.113 327.223 23.207 327.437 cv
23.293 327.656 23.34 327.895 23.34 328.152 cv
cp
21.859 323.602 mo
21.855 323.414 21.824 323.238 21.758 323.082 cv
21.691 322.926 21.594 322.793 21.469 322.684 cv
21.34 322.574 21.18 322.492 20.992 322.434 cv
20.797 322.379 20.582 322.352 20.344 322.348 cv
19.848 322.352 19.473 322.461 19.223 322.684 cv
18.965 322.91 18.84 323.219 18.844 323.602 cv
18.84 323.781 18.871 323.945 18.934 324.098 cv
18.996 324.254 19.09 324.398 19.223 324.535 cv
19.348 324.672 19.512 324.805 19.715 324.934 cv
19.91 325.066 20.148 325.203 20.426 325.344 cv
20.887 325.109 21.242 324.848 21.488 324.555 cv
21.734 324.27 21.855 323.953 21.859 323.602 cv
cp
22.148 328.277 mo
22.145 328.07 22.105 327.879 22.031 327.707 cv
21.949 327.539 21.832 327.379 21.676 327.227 cv
21.52 327.078 21.32 326.934 21.086 326.793 cv
20.848 326.656 20.578 326.512 20.27 326.359 cv
19.98 326.504 19.727 326.645 19.512 326.785 cv
19.293 326.926 19.113 327.074 18.977 327.223 cv
18.836 327.379 18.73 327.535 18.66 327.699 cv
18.586 327.867 18.551 328.051 18.555 328.25 cv
18.551 328.695 18.703 329.039 19.012 329.277 cv
19.313 329.523 19.766 329.645 20.371 329.641 cv
20.953 329.645 21.398 329.523 21.699 329.273 cv
21.996 329.031 22.145 328.699 22.148 328.277 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
16.77 292.738 mo
23.864 292.738 li
23.864 309.828 li
16.77 309.828 li
cp
0 0 0 0 cmyk
ef
23.203 301.336 mo
23.199 301.723 23.176 302.109 23.133 302.5 cv
23.086 302.895 23.008 303.273 22.902 303.637 cv
22.789 304 22.645 304.34 22.461 304.656 cv
22.273 304.977 22.039 305.258 21.762 305.492 cv
21.477 305.734 21.141 305.918 20.758 306.051 cv
20.367 306.184 19.922 306.25 19.414 306.25 cv
19.215 306.25 19.023 306.234 18.84 306.211 cv
18.652 306.184 18.484 306.156 18.34 306.121 cv
18.188 306.086 18.063 306.047 17.965 306.004 cv
17.863 305.965 17.789 305.926 17.746 305.883 cv
17.699 305.844 17.668 305.789 17.648 305.715 cv
17.625 305.645 17.613 305.547 17.617 305.43 cv
17.613 305.328 17.617 305.25 17.625 305.191 cv
17.629 305.133 17.641 305.086 17.656 305.055 cv
17.672 305.023 17.691 305.004 17.715 304.988 cv
17.738 304.98 17.77 304.973 17.809 304.969 cv
17.855 304.973 17.926 304.988 18.02 305.02 cv
18.109 305.055 18.223 305.094 18.367 305.133 cv
18.504 305.176 18.668 305.215 18.855 305.246 cv
19.039 305.285 19.25 305.301 19.488 305.297 cv
19.93 305.301 20.309 305.215 20.629 305.043 cv
20.941 304.871 21.203 304.645 21.406 304.355 cv
21.609 304.07 21.758 303.734 21.859 303.352 cv
21.957 302.973 22.012 302.574 22.023 302.152 cv
21.777 302.297 21.488 302.422 21.152 302.527 cv
20.813 302.641 20.426 302.695 19.988 302.691 cv
19.496 302.695 19.082 302.629 18.746 302.492 cv
18.41 302.359 18.137 302.176 17.934 301.941 cv
17.727 301.711 17.582 301.434 17.496 301.109 cv
17.406 300.793 17.363 300.441 17.363 300.062 cv
17.363 299.672 17.418 299.301 17.535 298.941 cv
17.645 298.59 17.824 298.277 18.07 298.008 cv
18.309 297.738 18.617 297.523 18.996 297.363 cv
19.367 297.203 19.816 297.121 20.34 297.121 cv
20.707 297.121 21.031 297.168 21.32 297.262 cv
21.602 297.355 21.852 297.492 22.066 297.668 cv
22.273 297.844 22.453 298.055 22.602 298.305 cv
22.746 298.555 22.863 298.836 22.953 299.148 cv
23.039 299.465 23.102 299.809 23.145 300.176 cv
23.18 300.547 23.199 300.934 23.203 301.336 cv
cp
22.004 301.207 mo
22.004 300.625 21.965 300.133 21.887 299.73 cv
21.809 299.332 21.691 299.008 21.543 298.758 cv
21.391 298.512 21.207 298.332 20.988 298.223 cv
20.766 298.113 20.512 298.059 20.23 298.059 cv
19.926 298.059 19.672 298.113 19.465 298.223 cv
19.254 298.332 19.082 298.477 18.949 298.652 cv
18.813 298.836 18.711 299.039 18.648 299.266 cv
18.582 299.496 18.551 299.734 18.555 299.973 cv
18.551 300.246 18.582 300.492 18.641 300.711 cv
18.695 300.937 18.785 301.125 18.918 301.281 cv
19.043 301.437 19.211 301.559 19.418 301.645 cv
19.621 301.73 19.875 301.773 20.18 301.77 cv
20.52 301.773 20.852 301.723 21.176 301.617 cv
21.492 301.516 21.77 301.379 22.004 301.207 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
9.672 268.441 mo
23.86 268.441 li
23.86 285.531 li
9.672 285.531 li
cp
0 0 0 0 cmyk
ef
16.055 281.344 mo
16.051 281.434 16.043 281.504 16.031 281.562 cv
16.016 281.625 15.996 281.676 15.977 281.707 cv
15.953 281.746 15.93 281.77 15.898 281.785 cv
15.867 281.801 15.836 281.809 15.809 281.809 cv
11.172 281.809 li
11.137 281.809 11.109 281.801 11.082 281.785 cv
11.055 281.77 11.027 281.746 11.004 281.707 cv
10.977 281.676 10.957 281.625 10.945 281.562 cv
10.93 281.504 10.922 281.434 10.926 281.344 cv
10.922 281.266 10.93 281.191 10.945 281.129 cv
10.957 281.07 10.973 281.023 10.996 280.984 cv
11.012 280.949 11.039 280.918 11.07 280.895 cv
11.102 280.875 11.133 280.867 11.172 280.863 cv
13.023 280.863 li
13.023 274.117 li
11.309 275.137 li
11.219 275.187 11.148 275.215 11.102 275.223 cv
11.047 275.23 11.004 275.223 10.973 275.191 cv
10.938 275.164 10.918 275.113 10.906 275.043 cv
10.895 274.977 10.887 274.891 10.891 274.781 cv
10.887 274.707 10.891 274.641 10.902 274.582 cv
10.906 274.531 10.918 274.484 10.934 274.445 cv
10.945 274.41 10.965 274.379 10.988 274.352 cv
11.012 274.324 11.043 274.297 11.09 274.27 cv
13.133 272.957 li
13.148 272.945 13.168 272.934 13.199 272.926 cv
13.223 272.918 13.258 272.91 13.305 272.898 cv
13.344 272.891 13.395 272.883 13.449 272.879 cv
13.504 272.879 13.57 272.879 13.656 272.875 cv
13.762 272.879 13.855 272.883 13.93 272.891 cv
14 272.898 14.055 272.914 14.102 272.93 cv
14.141 272.949 14.168 272.969 14.184 272.992 cv
14.191 273.02 14.199 273.043 14.203 273.066 cv
14.203 280.863 li
15.809 280.863 li
15.844 280.867 15.879 280.875 15.91 280.895 cv
15.941 280.918 15.965 280.949 15.988 280.984 cv
16.004 281.023 16.02 281.07 16.035 281.129 cv
16.043 281.191 16.051 281.266 16.055 281.344 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.41 277.352 mo
23.406 278.035 23.355 278.656 23.25 279.219 cv
23.141 279.781 22.961 280.266 22.715 280.668 cv
22.461 281.074 22.133 281.387 21.734 281.605 cv
21.328 281.828 20.836 281.937 20.25 281.937 cv
19.691 281.937 19.219 281.84 18.84 281.641 cv
18.457 281.445 18.152 281.152 17.918 280.766 cv
17.684 280.379 17.516 279.906 17.422 279.34 cv
17.32 278.777 17.273 278.129 17.273 277.395 cv
17.273 276.723 17.328 276.102 17.438 275.535 cv
17.547 274.973 17.723 274.488 17.973 274.082 cv
18.215 273.68 18.539 273.367 18.945 273.141 cv
19.344 272.922 19.84 272.809 20.43 272.809 cv
20.988 272.809 21.461 272.91 21.844 273.105 cv
22.227 273.309 22.531 273.602 22.766 273.984 cv
22.996 274.375 23.164 274.848 23.262 275.41 cv
23.359 275.973 23.406 276.621 23.41 277.352 cv
cp
22.203 277.434 mo
22.199 276.992 22.184 276.594 22.156 276.242 cv
22.121 275.891 22.074 275.582 22.016 275.312 cv
21.949 275.043 21.871 274.812 21.773 274.617 cv
21.676 274.426 21.559 274.266 21.422 274.137 cv
21.281 274.012 21.121 273.918 20.949 273.859 cv
20.77 273.805 20.574 273.777 20.359 273.773 cv
19.969 273.777 19.652 273.867 19.414 274.051 cv
19.168 274.234 18.977 274.488 18.84 274.805 cv
18.699 275.125 18.605 275.496 18.555 275.926 cv
18.504 276.355 18.48 276.82 18.48 277.312 cv
18.48 277.977 18.512 278.539 18.582 279 cv
18.648 279.469 18.758 279.848 18.91 280.137 cv
19.055 280.434 19.246 280.645 19.477 280.773 cv
19.707 280.91 19.988 280.977 20.32 280.973 cv
20.574 280.977 20.797 280.937 20.992 280.852 cv
21.184 280.773 21.352 280.652 21.492 280.496 cv
21.633 280.344 21.746 280.16 21.84 279.945 cv
21.926 279.73 22 279.492 22.059 279.23 cv
22.109 278.973 22.148 278.691 22.172 278.387 cv
22.191 278.082 22.199 277.766 22.203 277.434 cv
cp
f
9.672 244.129 mo
23.86 244.129 li
23.86 261.219 li
9.672 261.219 li
cp
0 0 0 0 cmyk
ef
16.055 257.035 mo
16.051 257.125 16.043 257.195 16.031 257.254 cv
16.016 257.316 15.996 257.367 15.977 257.398 cv
15.953 257.437 15.93 257.461 15.898 257.477 cv
15.867 257.492 15.836 257.5 15.809 257.5 cv
11.172 257.5 li
11.137 257.5 11.109 257.492 11.082 257.477 cv
11.055 257.461 11.027 257.437 11.004 257.398 cv
10.977 257.367 10.957 257.316 10.945 257.254 cv
10.93 257.195 10.922 257.125 10.926 257.035 cv
10.922 256.957 10.93 256.883 10.945 256.82 cv
10.957 256.762 10.973 256.715 10.996 256.676 cv
11.012 256.641 11.039 256.609 11.07 256.586 cv
11.102 256.566 11.133 256.559 11.172 256.555 cv
13.023 256.555 li
13.023 249.809 li
11.309 250.828 li
11.219 250.879 11.148 250.906 11.102 250.914 cv
11.047 250.922 11.004 250.914 10.973 250.883 cv
10.938 250.855 10.918 250.805 10.906 250.734 cv
10.895 250.668 10.887 250.582 10.891 250.473 cv
10.887 250.398 10.891 250.332 10.902 250.273 cv
10.906 250.223 10.918 250.176 10.934 250.137 cv
10.945 250.102 10.965 250.07 10.988 250.043 cv
11.012 250.016 11.043 249.988 11.09 249.961 cv
13.133 248.648 li
13.148 248.637 13.168 248.625 13.199 248.617 cv
13.223 248.609 13.258 248.602 13.305 248.59 cv
13.344 248.582 13.395 248.574 13.449 248.57 cv
13.504 248.57 13.57 248.57 13.656 248.566 cv
13.762 248.57 13.855 248.574 13.93 248.582 cv
14 248.59 14.055 248.605 14.102 248.621 cv
14.141 248.641 14.168 248.66 14.184 248.684 cv
14.191 248.711 14.199 248.734 14.203 248.758 cv
14.203 256.555 li
15.809 256.555 li
15.844 256.559 15.879 256.566 15.91 256.586 cv
15.941 256.609 15.965 256.641 15.988 256.676 cv
16.004 256.715 16.02 256.762 16.035 256.82 cv
16.043 256.883 16.051 256.957 16.055 257.035 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.137 257.035 mo
23.133 257.125 23.125 257.195 23.113 257.254 cv
23.098 257.316 23.078 257.367 23.059 257.398 cv
23.035 257.437 23.012 257.461 22.98 257.477 cv
22.949 257.492 22.918 257.5 22.891 257.5 cv
18.254 257.5 li
18.219 257.5 18.191 257.492 18.164 257.477 cv
18.137 257.461 18.109 257.437 18.086 257.398 cv
18.059 257.367 18.039 257.316 18.027 257.254 cv
18.012 257.195 18.004 257.125 18.008 257.035 cv
18.004 256.957 18.012 256.883 18.027 256.82 cv
18.039 256.762 18.055 256.715 18.078 256.676 cv
18.094 256.641 18.121 256.609 18.152 256.586 cv
18.184 256.566 18.215 256.559 18.254 256.555 cv
20.105 256.555 li
20.105 249.809 li
18.391 250.828 li
18.301 250.879 18.23 250.906 18.184 250.914 cv
18.129 250.922 18.086 250.914 18.055 250.883 cv
18.02 250.855 18 250.805 17.988 250.734 cv
17.977 250.668 17.969 250.582 17.973 250.473 cv
17.969 250.398 17.973 250.332 17.984 250.273 cv
17.988 250.223 18 250.176 18.016 250.137 cv
18.027 250.102 18.047 250.07 18.07 250.043 cv
18.094 250.016 18.125 249.988 18.172 249.961 cv
20.215 248.648 li
20.23 248.637 20.25 248.625 20.281 248.617 cv
20.305 248.609 20.34 248.602 20.387 248.59 cv
20.426 248.582 20.477 248.574 20.531 248.57 cv
20.586 248.57 20.652 248.57 20.738 248.566 cv
20.844 248.57 20.938 248.574 21.012 248.582 cv
21.082 248.59 21.137 248.605 21.184 248.621 cv
21.223 248.641 21.25 248.66 21.266 248.684 cv
21.273 248.711 21.281 248.734 21.285 248.758 cv
21.285 256.555 li
22.891 256.555 li
22.926 256.559 22.961 256.566 22.992 256.586 cv
23.023 256.609 23.047 256.641 23.07 256.676 cv
23.086 256.715 23.102 256.762 23.117 256.82 cv
23.125 256.883 23.133 256.957 23.137 257.035 cv
cp
f
9.672 219.828 mo
23.86 219.828 li
23.86 236.922 li
9.672 236.922 li
cp
0 0 0 0 cmyk
ef
16.055 232.746 mo
16.051 232.836 16.043 232.906 16.031 232.965 cv
16.016 233.027 15.996 233.078 15.977 233.109 cv
15.953 233.148 15.93 233.172 15.898 233.187 cv
15.867 233.203 15.836 233.211 15.809 233.211 cv
11.172 233.211 li
11.137 233.211 11.109 233.203 11.082 233.187 cv
11.055 233.172 11.027 233.148 11.004 233.109 cv
10.977 233.078 10.957 233.027 10.945 232.965 cv
10.93 232.906 10.922 232.836 10.926 232.746 cv
10.922 232.668 10.93 232.594 10.945 232.531 cv
10.957 232.473 10.973 232.426 10.996 232.387 cv
11.012 232.352 11.039 232.32 11.07 232.297 cv
11.102 232.277 11.133 232.27 11.172 232.266 cv
13.023 232.266 li
13.023 225.52 li
11.309 226.539 li
11.219 226.59 11.148 226.617 11.102 226.625 cv
11.047 226.633 11.004 226.625 10.973 226.594 cv
10.938 226.566 10.918 226.516 10.906 226.445 cv
10.895 226.379 10.887 226.293 10.891 226.184 cv
10.887 226.109 10.891 226.043 10.902 225.984 cv
10.906 225.934 10.918 225.887 10.934 225.848 cv
10.945 225.812 10.965 225.781 10.988 225.754 cv
11.012 225.727 11.043 225.699 11.09 225.672 cv
13.133 224.359 li
13.148 224.348 13.168 224.336 13.199 224.328 cv
13.223 224.32 13.258 224.312 13.305 224.301 cv
13.344 224.293 13.395 224.285 13.449 224.281 cv
13.504 224.281 13.57 224.281 13.656 224.277 cv
13.762 224.281 13.855 224.285 13.93 224.293 cv
14 224.301 14.055 224.316 14.102 224.332 cv
14.141 224.352 14.168 224.371 14.184 224.395 cv
14.191 224.422 14.199 224.445 14.203 224.469 cv
14.203 232.266 li
15.809 232.266 li
15.844 232.27 15.879 232.277 15.91 232.297 cv
15.941 232.32 15.965 232.352 15.988 232.387 cv
16.004 232.426 16.02 232.473 16.035 232.531 cv
16.043 232.594 16.051 232.668 16.055 232.746 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.117 232.703 mo
23.113 232.789 23.109 232.863 23.098 232.926 cv
23.086 232.992 23.07 233.047 23.051 233.086 cv
23.027 233.133 23 233.164 22.969 233.18 cv
22.934 233.203 22.895 233.211 22.855 233.211 cv
17.953 233.211 li
17.891 233.211 17.832 233.203 17.785 233.187 cv
17.734 233.172 17.695 233.148 17.66 233.109 cv
17.625 233.078 17.598 233.023 17.586 232.953 cv
17.566 232.883 17.559 232.797 17.563 232.695 cv
17.559 232.605 17.563 232.527 17.57 232.457 cv
17.574 232.391 17.59 232.332 17.617 232.277 cv
17.641 232.227 17.672 232.172 17.707 232.117 cv
17.742 232.066 17.785 232.012 17.844 231.949 cv
19.617 230.125 li
20.027 229.707 20.355 229.332 20.605 228.996 cv
20.852 228.668 21.043 228.363 21.176 228.086 cv
21.309 227.812 21.395 227.562 21.441 227.336 cv
21.48 227.113 21.504 226.902 21.504 226.707 cv
21.504 226.512 21.469 226.328 21.402 226.148 cv
21.336 225.977 21.242 225.82 21.117 225.684 cv
20.992 225.555 20.836 225.449 20.648 225.367 cv
20.461 225.293 20.242 225.254 19.996 225.25 cv
19.707 225.254 19.449 225.293 19.223 225.367 cv
18.992 225.449 18.793 225.535 18.621 225.621 cv
18.449 225.715 18.305 225.797 18.188 225.875 cv
18.07 225.953 17.984 225.992 17.934 225.992 cv
17.898 225.992 17.867 225.984 17.844 225.965 cv
17.813 225.949 17.793 225.918 17.777 225.875 cv
17.762 225.836 17.746 225.781 17.738 225.711 cv
17.727 225.645 17.723 225.562 17.727 225.465 cv
17.723 225.398 17.727 225.34 17.734 225.289 cv
17.738 225.238 17.746 225.195 17.758 225.156 cv
17.766 225.121 17.781 225.086 17.801 225.055 cv
17.82 225.023 17.855 224.984 17.914 224.934 cv
17.965 224.887 18.059 224.82 18.195 224.738 cv
18.328 224.656 18.5 224.578 18.703 224.496 cv
18.906 224.418 19.129 224.348 19.375 224.293 cv
19.617 224.238 19.875 224.211 20.148 224.211 cv
20.574 224.211 20.949 224.273 21.273 224.395 cv
21.594 224.516 21.859 224.68 22.074 224.891 cv
22.285 225.102 22.445 225.348 22.551 225.621 cv
22.656 225.902 22.711 226.199 22.711 226.512 cv
22.711 226.801 22.684 227.082 22.633 227.359 cv
22.582 227.645 22.477 227.949 22.316 228.273 cv
22.152 228.602 21.918 228.965 21.613 229.363 cv
21.305 229.766 20.898 230.227 20.395 230.742 cv
18.988 232.211 li
22.848 232.211 li
22.879 232.215 22.914 232.227 22.953 232.242 cv
22.984 232.266 23.016 232.297 23.043 232.336 cv
23.066 232.379 23.086 232.43 23.098 232.488 cv
23.109 232.555 23.113 232.625 23.117 232.703 cv
cp
f
9.672 195.531 mo
23.86 195.531 li
23.86 212.621 li
9.672 212.621 li
cp
0 0 0 0 cmyk
ef
16.055 208.434 mo
16.051 208.523 16.043 208.594 16.031 208.652 cv
16.016 208.715 15.996 208.766 15.977 208.797 cv
15.953 208.836 15.93 208.859 15.898 208.875 cv
15.867 208.891 15.836 208.898 15.809 208.898 cv
11.172 208.898 li
11.137 208.898 11.109 208.891 11.082 208.875 cv
11.055 208.859 11.027 208.836 11.004 208.797 cv
10.977 208.766 10.957 208.715 10.945 208.652 cv
10.93 208.594 10.922 208.523 10.926 208.434 cv
10.922 208.355 10.93 208.281 10.945 208.219 cv
10.957 208.16 10.973 208.113 10.996 208.074 cv
11.012 208.039 11.039 208.008 11.07 207.984 cv
11.102 207.965 11.133 207.957 11.172 207.953 cv
13.023 207.953 li
13.023 201.207 li
11.309 202.227 li
11.219 202.277 11.148 202.305 11.102 202.312 cv
11.047 202.32 11.004 202.312 10.973 202.281 cv
10.938 202.254 10.918 202.203 10.906 202.133 cv
10.895 202.066 10.887 201.98 10.891 201.871 cv
10.887 201.797 10.891 201.73 10.902 201.672 cv
10.906 201.621 10.918 201.574 10.934 201.535 cv
10.945 201.5 10.965 201.469 10.988 201.441 cv
11.012 201.414 11.043 201.387 11.09 201.359 cv
13.133 200.047 li
13.148 200.035 13.168 200.023 13.199 200.016 cv
13.223 200.008 13.258 200 13.305 199.988 cv
13.344 199.98 13.395 199.973 13.449 199.969 cv
13.504 199.969 13.57 199.969 13.656 199.965 cv
13.762 199.969 13.855 199.973 13.93 199.98 cv
14 199.988 14.055 200.004 14.102 200.02 cv
14.141 200.039 14.168 200.059 14.184 200.082 cv
14.191 200.109 14.199 200.133 14.203 200.156 cv
14.203 207.953 li
15.809 207.953 li
15.844 207.957 15.879 207.965 15.91 207.984 cv
15.941 208.008 15.965 208.039 15.988 208.074 cv
16.004 208.113 16.02 208.16 16.035 208.219 cv
16.043 208.281 16.051 208.355 16.055 208.434 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.047 206.363 mo
23.043 206.773 22.973 207.141 22.832 207.465 cv
22.688 207.793 22.484 208.074 22.223 208.305 cv
21.957 208.539 21.629 208.715 21.242 208.84 cv
20.852 208.965 20.414 209.027 19.93 209.027 cv
19.625 209.027 19.348 209 19.094 208.953 cv
18.832 208.906 18.602 208.855 18.406 208.785 cv
18.203 208.723 18.039 208.652 17.906 208.582 cv
17.773 208.512 17.688 208.461 17.656 208.426 cv
17.617 208.398 17.594 208.367 17.578 208.332 cv
17.559 208.301 17.539 208.262 17.527 208.215 cv
17.512 208.172 17.504 208.117 17.496 208.047 cv
17.488 207.984 17.484 207.902 17.488 207.801 cv
17.484 207.641 17.5 207.527 17.535 207.461 cv
17.566 207.398 17.613 207.363 17.676 207.363 cv
17.719 207.363 17.801 207.402 17.926 207.473 cv
18.047 207.551 18.207 207.629 18.402 207.711 cv
18.594 207.797 18.82 207.875 19.086 207.945 cv
19.344 208.02 19.637 208.055 19.957 208.055 cv
20.266 208.055 20.535 208.016 20.773 207.937 cv
21.004 207.859 21.203 207.75 21.363 207.609 cv
21.52 207.469 21.637 207.301 21.719 207.105 cv
21.797 206.91 21.836 206.699 21.84 206.473 cv
21.836 206.223 21.785 205.996 21.688 205.793 cv
21.582 205.594 21.434 205.422 21.242 205.273 cv
21.043 205.129 20.805 205.016 20.52 204.937 cv
20.234 204.859 19.91 204.82 19.547 204.82 cv
18.676 204.82 li
18.633 204.82 18.598 204.812 18.563 204.797 cv
18.527 204.781 18.496 204.754 18.473 204.715 cv
18.445 204.68 18.426 204.633 18.41 204.574 cv
18.395 204.516 18.387 204.437 18.387 204.34 cv
18.387 204.254 18.391 204.184 18.406 204.125 cv
18.414 204.07 18.434 204.023 18.465 203.988 cv
18.488 203.953 18.52 203.93 18.551 203.91 cv
18.582 203.898 18.617 203.891 18.66 203.887 cv
19.434 203.887 li
19.734 203.891 20.004 203.852 20.246 203.77 cv
20.48 203.695 20.684 203.582 20.855 203.434 cv
21.02 203.289 21.148 203.113 21.238 202.91 cv
21.328 202.707 21.375 202.48 21.375 202.227 cv
21.375 202.047 21.344 201.871 21.285 201.703 cv
21.223 201.539 21.133 201.395 21.016 201.27 cv
20.895 201.145 20.742 201.047 20.563 200.977 cv
20.375 200.906 20.164 200.871 19.922 200.871 cv
19.656 200.871 19.41 200.914 19.191 200.992 cv
18.965 201.074 18.77 201.16 18.598 201.25 cv
18.422 201.344 18.277 201.43 18.164 201.508 cv
18.051 201.59 17.969 201.629 17.926 201.625 cv
17.891 201.629 17.863 201.621 17.84 201.609 cv
17.813 201.598 17.793 201.574 17.777 201.539 cv
17.762 201.508 17.75 201.461 17.742 201.395 cv
17.734 201.336 17.73 201.254 17.734 201.152 cv
17.73 201.086 17.73 201.027 17.738 200.973 cv
17.738 200.922 17.75 200.875 17.766 200.832 cv
17.781 200.797 17.797 200.762 17.816 200.727 cv
17.832 200.699 17.863 200.66 17.906 200.613 cv
17.949 200.57 18.035 200.508 18.172 200.426 cv
18.301 200.344 18.465 200.266 18.66 200.184 cv
18.852 200.105 19.074 200.035 19.332 199.98 cv
19.582 199.926 19.855 199.898 20.152 199.898 cv
20.559 199.898 20.922 199.953 21.234 200.055 cv
21.547 200.164 21.805 200.312 22.016 200.5 cv
22.219 200.695 22.375 200.926 22.48 201.191 cv
22.582 201.461 22.633 201.754 22.637 202.078 cv
22.633 202.359 22.598 202.621 22.527 202.855 cv
22.453 203.098 22.344 203.309 22.203 203.492 cv
22.059 203.68 21.887 203.836 21.684 203.965 cv
21.477 204.098 21.238 204.191 20.969 204.238 cv
20.969 204.25 li
21.273 204.285 21.555 204.359 21.809 204.48 cv
22.063 204.602 22.281 204.754 22.465 204.937 cv
22.645 205.121 22.785 205.336 22.891 205.578 cv
22.992 205.824 23.043 206.086 23.047 206.363 cv
cp
f
9.672 171.23 mo
23.86 171.23 li
23.86 188.32 li
9.672 188.32 li
cp
0 0 0 0 cmyk
ef
16.055 184.113 mo
16.051 184.203 16.043 184.273 16.031 184.332 cv
16.016 184.395 15.996 184.445 15.977 184.477 cv
15.953 184.516 15.93 184.539 15.898 184.555 cv
15.867 184.57 15.836 184.578 15.809 184.578 cv
11.172 184.578 li
11.137 184.578 11.109 184.57 11.082 184.555 cv
11.055 184.539 11.027 184.516 11.004 184.477 cv
10.977 184.445 10.957 184.395 10.945 184.332 cv
10.93 184.273 10.922 184.203 10.926 184.113 cv
10.922 184.035 10.93 183.961 10.945 183.898 cv
10.957 183.84 10.973 183.793 10.996 183.754 cv
11.012 183.719 11.039 183.687 11.07 183.664 cv
11.102 183.645 11.133 183.637 11.172 183.633 cv
13.023 183.633 li
13.023 176.887 li
11.309 177.906 li
11.219 177.957 11.148 177.984 11.102 177.992 cv
11.047 178 11.004 177.992 10.973 177.961 cv
10.938 177.934 10.918 177.883 10.906 177.812 cv
10.895 177.746 10.887 177.66 10.891 177.551 cv
10.887 177.477 10.891 177.41 10.902 177.352 cv
10.906 177.301 10.918 177.254 10.934 177.215 cv
10.945 177.18 10.965 177.148 10.988 177.121 cv
11.012 177.094 11.043 177.066 11.09 177.039 cv
13.133 175.727 li
13.148 175.715 13.168 175.703 13.199 175.695 cv
13.223 175.687 13.258 175.68 13.305 175.668 cv
13.344 175.66 13.395 175.652 13.449 175.648 cv
13.504 175.648 13.57 175.648 13.656 175.645 cv
13.762 175.648 13.855 175.652 13.93 175.66 cv
14 175.668 14.055 175.684 14.102 175.699 cv
14.141 175.719 14.168 175.738 14.184 175.762 cv
14.191 175.789 14.199 175.812 14.203 175.836 cv
14.203 183.633 li
15.809 183.633 li
15.844 183.637 15.879 183.645 15.91 183.664 cv
15.941 183.687 15.965 183.719 15.988 183.754 cv
16.004 183.793 16.02 183.84 16.035 183.898 cv
16.043 183.961 16.051 184.035 16.055 184.113 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.492 182.055 mo
23.488 182.207 23.465 182.328 23.422 182.414 cv
23.375 182.504 23.313 182.547 23.23 182.543 cv
22.23 182.543 li
22.23 184.406 li
22.23 184.445 22.219 184.477 22.203 184.5 cv
22.18 184.527 22.148 184.547 22.105 184.566 cv
22.055 184.582 21.992 184.594 21.922 184.605 cv
21.844 184.613 21.75 184.617 21.633 184.621 cv
21.516 184.617 21.418 184.613 21.348 184.605 cv
21.27 184.594 21.211 184.582 21.168 184.566 cv
21.121 184.547 21.09 184.527 21.074 184.5 cv
21.055 184.477 21.047 184.445 21.051 184.406 cv
21.051 182.543 li
17.422 182.543 li
17.363 182.547 17.32 182.539 17.285 182.523 cv
17.25 182.512 17.215 182.484 17.188 182.445 cv
17.156 182.41 17.137 182.359 17.125 182.289 cv
17.113 182.223 17.109 182.133 17.109 182.02 cv
17.109 181.937 17.109 181.859 17.117 181.789 cv
17.117 181.719 17.129 181.656 17.145 181.602 cv
17.156 181.547 17.172 181.492 17.199 181.437 cv
17.219 181.383 17.246 181.328 17.281 181.266 cv
20.441 175.879 li
20.461 175.844 20.496 175.812 20.543 175.785 cv
20.586 175.758 20.641 175.734 20.715 175.715 cv
20.781 175.699 20.867 175.687 20.973 175.676 cv
21.074 175.672 21.195 175.668 21.336 175.664 cv
21.484 175.668 21.621 175.672 21.738 175.684 cv
21.852 175.695 21.941 175.711 22.016 175.727 cv
22.082 175.746 22.137 175.77 22.176 175.801 cv
22.211 175.832 22.23 175.867 22.23 175.906 cv
22.23 181.57 li
23.23 181.57 li
23.305 181.574 23.367 181.613 23.418 181.691 cv
23.465 181.773 23.488 181.895 23.492 182.055 cv
cp
21.051 176.703 mo
21.039 176.703 li
18.188 181.57 li
21.051 181.57 li
cp
f
9.672 146.93 mo
23.86 146.93 li
23.86 164.02 li
9.672 164.02 li
cp
0 0 0 0 cmyk
ef
16.055 159.805 mo
16.051 159.895 16.043 159.965 16.031 160.023 cv
16.016 160.086 15.996 160.137 15.977 160.168 cv
15.953 160.207 15.93 160.23 15.898 160.246 cv
15.867 160.262 15.836 160.27 15.809 160.27 cv
11.172 160.27 li
11.137 160.27 11.109 160.262 11.082 160.246 cv
11.055 160.23 11.027 160.207 11.004 160.168 cv
10.977 160.137 10.957 160.086 10.945 160.023 cv
10.93 159.965 10.922 159.895 10.926 159.805 cv
10.922 159.727 10.93 159.652 10.945 159.59 cv
10.957 159.531 10.973 159.484 10.996 159.445 cv
11.012 159.41 11.039 159.379 11.07 159.355 cv
11.102 159.336 11.133 159.328 11.172 159.324 cv
13.023 159.324 li
13.023 152.578 li
11.309 153.598 li
11.219 153.648 11.148 153.676 11.102 153.684 cv
11.047 153.691 11.004 153.684 10.973 153.652 cv
10.938 153.625 10.918 153.574 10.906 153.504 cv
10.895 153.437 10.887 153.352 10.891 153.242 cv
10.887 153.168 10.891 153.102 10.902 153.043 cv
10.906 152.992 10.918 152.945 10.934 152.906 cv
10.945 152.871 10.965 152.84 10.988 152.812 cv
11.012 152.785 11.043 152.758 11.09 152.73 cv
13.133 151.418 li
13.148 151.406 13.168 151.395 13.199 151.387 cv
13.223 151.379 13.258 151.371 13.305 151.359 cv
13.344 151.352 13.395 151.344 13.449 151.34 cv
13.504 151.34 13.57 151.34 13.656 151.336 cv
13.762 151.34 13.855 151.344 13.93 151.352 cv
14 151.359 14.055 151.375 14.102 151.391 cv
14.141 151.41 14.168 151.43 14.184 151.453 cv
14.191 151.48 14.199 151.504 14.203 151.527 cv
14.203 159.324 li
15.809 159.324 li
15.844 159.328 15.879 159.336 15.91 159.355 cv
15.941 159.379 15.965 159.41 15.988 159.445 cv
16.004 159.484 16.02 159.531 16.035 159.59 cv
16.043 159.652 16.051 159.727 16.055 159.805 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.074 157.418 mo
23.074 157.895 22.992 158.316 22.832 158.687 cv
22.672 159.059 22.445 159.371 22.156 159.625 cv
21.859 159.879 21.512 160.074 21.109 160.203 cv
20.703 160.336 20.254 160.398 19.762 160.398 cv
19.484 160.398 19.223 160.379 18.98 160.34 cv
18.73 160.301 18.512 160.254 18.324 160.199 cv
18.129 160.145 17.973 160.09 17.848 160.031 cv
17.723 159.98 17.645 159.937 17.613 159.902 cv
17.578 159.871 17.555 159.84 17.543 159.812 cv
17.527 159.785 17.512 159.754 17.504 159.711 cv
17.488 159.676 17.48 159.625 17.48 159.562 cv
17.473 159.504 17.473 159.434 17.473 159.352 cv
17.473 159.277 17.477 159.207 17.484 159.145 cv
17.492 159.082 17.504 159.031 17.523 158.992 cv
17.539 158.953 17.559 158.926 17.586 158.906 cv
17.609 158.891 17.641 158.883 17.672 158.879 cv
17.719 158.883 17.789 158.91 17.883 158.965 cv
17.977 159.023 18.105 159.086 18.27 159.152 cv
18.434 159.219 18.633 159.281 18.875 159.34 cv
19.109 159.398 19.395 159.426 19.73 159.426 cv
20.031 159.426 20.313 159.391 20.57 159.316 cv
20.824 159.246 21.047 159.133 21.234 158.977 cv
21.418 158.824 21.563 158.629 21.668 158.391 cv
21.773 158.156 21.824 157.867 21.828 157.527 cv
21.824 157.246 21.781 156.996 21.691 156.777 cv
21.602 156.559 21.465 156.379 21.281 156.234 cv
21.094 156.094 20.859 155.988 20.578 155.914 cv
20.293 155.844 19.953 155.805 19.566 155.805 cv
19.281 155.805 19.043 155.82 18.844 155.848 cv
18.641 155.879 18.453 155.895 18.281 155.891 cv
18.152 155.895 18.059 155.863 18.008 155.801 cv
17.949 155.742 17.922 155.629 17.926 155.457 cv
17.926 151.844 li
17.922 151.695 17.957 151.586 18.031 151.508 cv
18.098 151.437 18.199 151.398 18.336 151.398 cv
22.266 151.398 li
22.301 151.398 22.336 151.41 22.371 151.43 cv
22.402 151.453 22.43 151.484 22.457 151.523 cv
22.477 151.566 22.492 151.617 22.508 151.68 cv
22.516 151.746 22.523 151.824 22.527 151.906 cv
22.523 152.074 22.5 152.199 22.461 152.289 cv
22.414 152.383 22.355 152.43 22.277 152.426 cv
19.105 152.426 li
19.105 154.914 li
19.258 154.895 19.414 154.883 19.578 154.875 cv
19.734 154.871 19.922 154.867 20.137 154.867 cv
20.621 154.867 21.047 154.93 21.414 155.051 cv
21.777 155.172 22.082 155.344 22.332 155.562 cv
22.574 155.789 22.762 156.055 22.887 156.367 cv
23.012 156.684 23.074 157.035 23.074 157.418 cv
cp
f
9.672 122.621 mo
23.86 122.621 li
23.86 139.711 li
9.672 139.711 li
cp
0 0 0 0 cmyk
ef
16.066 135.512 mo
16.063 135.602 16.055 135.676 16.043 135.734 cv
16.027 135.797 16.008 135.848 15.988 135.879 cv
15.965 135.918 15.941 135.941 15.91 135.957 cv
15.879 135.973 15.848 135.98 15.816 135.98 cv
11.176 135.98 li
11.145 135.98 11.113 135.973 11.086 135.957 cv
11.059 135.941 11.031 135.918 11.008 135.879 cv
10.977 135.848 10.957 135.797 10.949 135.734 cv
10.934 135.676 10.93 135.602 10.93 135.512 cv
10.93 135.434 10.934 135.363 10.949 135.301 cv
10.957 135.242 10.977 135.195 11 135.152 cv
11.02 135.117 11.043 135.086 11.074 135.062 cv
11.102 135.043 11.137 135.031 11.176 135.031 cv
13.031 135.031 li
13.031 128.277 li
11.313 129.297 li
11.223 129.348 11.152 129.375 11.102 129.383 cv
11.047 129.391 11.008 129.383 10.977 129.352 cv
10.945 129.324 10.922 129.273 10.91 129.203 cv
10.898 129.137 10.895 129.051 10.895 128.941 cv
10.895 128.867 10.895 128.801 10.902 128.742 cv
10.906 128.691 10.918 128.645 10.934 128.605 cv
10.945 128.57 10.965 128.539 10.992 128.512 cv
11.016 128.484 11.051 128.457 11.094 128.426 cv
13.141 127.113 li
13.156 127.105 13.18 127.094 13.207 127.082 cv
13.234 127.074 13.27 127.066 13.313 127.055 cv
13.352 127.047 13.398 127.039 13.457 127.035 cv
13.508 127.035 13.578 127.035 13.66 127.031 cv
13.77 127.035 13.859 127.039 13.938 127.047 cv
14.008 127.059 14.066 127.07 14.105 127.086 cv
14.145 127.102 14.172 127.125 14.188 127.148 cv
14.203 127.176 14.211 127.199 14.211 127.227 cv
14.211 135.031 li
15.816 135.031 li
15.852 135.031 15.883 135.043 15.918 135.062 cv
15.949 135.086 15.977 135.117 16 135.152 cv
16.016 135.195 16.031 135.242 16.047 135.301 cv
16.055 135.363 16.063 135.434 16.066 135.512 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.352 133.102 mo
23.348 133.496 23.289 133.871 23.172 134.234 cv
23.051 134.598 22.867 134.918 22.625 135.195 cv
22.375 135.473 22.063 135.695 21.684 135.859 cv
21.301 136.027 20.852 136.109 20.34 136.109 cv
19.965 136.109 19.637 136.066 19.355 135.973 cv
19.066 135.887 18.82 135.754 18.613 135.582 cv
18.402 135.414 18.227 135.207 18.09 134.957 cv
17.945 134.711 17.832 134.43 17.75 134.113 cv
17.664 133.801 17.605 133.457 17.57 133.078 cv
17.531 132.703 17.512 132.297 17.516 131.867 cv
17.512 131.488 17.535 131.105 17.578 130.715 cv
17.617 130.328 17.688 129.953 17.797 129.586 cv
17.898 129.227 18.043 128.887 18.227 128.566 cv
18.406 128.254 18.633 127.977 18.906 127.738 cv
19.176 127.504 19.504 127.316 19.887 127.18 cv
20.266 127.043 20.707 126.977 21.211 126.973 cv
21.379 126.977 21.551 126.984 21.727 127.004 cv
21.898 127.023 22.059 127.051 22.207 127.086 cv
22.352 127.121 22.473 127.16 22.574 127.199 cv
22.672 127.242 22.738 127.273 22.773 127.297 cv
22.805 127.324 22.828 127.355 22.848 127.383 cv
22.859 127.414 22.871 127.445 22.883 127.477 cv
22.891 127.516 22.898 127.555 22.906 127.594 cv
22.906 127.641 22.91 127.691 22.914 127.754 cv
22.91 127.84 22.91 127.914 22.91 127.969 cv
22.906 128.031 22.895 128.078 22.883 128.109 cv
22.863 128.148 22.844 128.176 22.82 128.191 cv
22.793 128.215 22.762 128.223 22.723 128.219 cv
22.668 128.223 22.598 128.207 22.516 128.172 cv
22.426 128.145 22.32 128.109 22.199 128.066 cv
22.074 128.031 21.926 127.996 21.75 127.961 cv
21.57 127.93 21.363 127.914 21.137 127.91 cv
20.707 127.914 20.34 128 20.035 128.172 cv
19.727 128.348 19.477 128.582 19.285 128.875 cv
19.086 129.168 18.941 129.508 18.852 129.895 cv
18.754 130.281 18.703 130.684 18.691 131.105 cv
18.809 131.035 18.941 130.969 19.09 130.898 cv
19.238 130.836 19.398 130.773 19.578 130.715 cv
19.75 130.664 19.938 130.621 20.137 130.582 cv
20.332 130.551 20.543 130.531 20.77 130.527 cv
21.25 130.531 21.656 130.598 21.984 130.723 cv
22.313 130.855 22.578 131.035 22.785 131.266 cv
22.988 131.5 23.133 131.773 23.223 132.086 cv
23.305 132.402 23.348 132.742 23.352 133.102 cv
cp
22.16 133.215 mo
22.16 132.949 22.133 132.711 22.078 132.492 cv
22.023 132.277 21.934 132.09 21.813 131.937 cv
21.688 131.789 21.523 131.672 21.32 131.586 cv
21.113 131.504 20.859 131.465 20.559 131.461 cv
20.387 131.465 20.219 131.48 20.051 131.508 cv
19.879 131.539 19.715 131.578 19.559 131.633 cv
19.398 131.687 19.246 131.75 19.105 131.816 cv
18.961 131.891 18.828 131.969 18.711 132.047 cv
18.707 132.641 18.746 133.133 18.824 133.527 cv
18.898 133.93 19.008 134.25 19.152 134.488 cv
19.297 134.73 19.477 134.902 19.691 135.004 cv
19.906 135.109 20.16 135.16 20.449 135.156 cv
20.738 135.16 20.992 135.105 21.211 134.992 cv
21.426 134.887 21.602 134.738 21.746 134.551 cv
21.887 134.363 21.992 134.156 22.059 133.926 cv
22.125 133.695 22.16 133.457 22.16 133.215 cv
cp
f
9.672 98.32 mo
23.86 98.32 li
23.86 115.41 li
9.672 115.41 li
cp
0 0 0 0 cmyk
ef
16.055 111.207 mo
16.051 111.297 16.043 111.367 16.031 111.426 cv
16.016 111.488 15.996 111.539 15.977 111.57 cv
15.953 111.609 15.93 111.633 15.898 111.648 cv
15.867 111.664 15.836 111.672 15.809 111.672 cv
11.172 111.672 li
11.137 111.672 11.109 111.664 11.082 111.648 cv
11.055 111.633 11.027 111.609 11.004 111.57 cv
10.977 111.539 10.957 111.488 10.945 111.426 cv
10.93 111.367 10.922 111.297 10.926 111.207 cv
10.922 111.129 10.93 111.055 10.945 110.992 cv
10.957 110.934 10.973 110.887 10.996 110.848 cv
11.012 110.812 11.039 110.781 11.07 110.758 cv
11.102 110.738 11.133 110.73 11.172 110.727 cv
13.023 110.727 li
13.023 103.98 li
11.309 105 li
11.219 105.051 11.148 105.078 11.102 105.086 cv
11.047 105.094 11.004 105.086 10.973 105.055 cv
10.938 105.027 10.918 104.977 10.906 104.906 cv
10.895 104.84 10.887 104.754 10.891 104.645 cv
10.887 104.57 10.891 104.504 10.902 104.445 cv
10.906 104.395 10.918 104.348 10.934 104.309 cv
10.945 104.273 10.965 104.242 10.988 104.215 cv
11.012 104.187 11.043 104.16 11.09 104.133 cv
13.133 102.82 li
13.148 102.809 13.168 102.797 13.199 102.789 cv
13.223 102.781 13.258 102.773 13.305 102.762 cv
13.344 102.754 13.395 102.746 13.449 102.742 cv
13.504 102.742 13.57 102.742 13.656 102.738 cv
13.762 102.742 13.855 102.746 13.93 102.754 cv
14 102.762 14.055 102.777 14.102 102.793 cv
14.141 102.812 14.168 102.832 14.184 102.855 cv
14.191 102.883 14.199 102.906 14.203 102.93 cv
14.203 110.727 li
15.809 110.727 li
15.844 110.73 15.879 110.738 15.91 110.758 cv
15.941 110.781 15.965 110.812 15.988 110.848 cv
16.004 110.887 16.02 110.934 16.035 110.992 cv
16.043 111.055 16.051 111.129 16.055 111.207 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.246 103.309 mo
23.242 103.395 23.238 103.469 23.234 103.531 cv
23.227 103.602 23.219 103.664 23.207 103.723 cv
23.195 103.789 23.18 103.848 23.16 103.902 cv
23.137 103.961 23.113 104.023 23.09 104.082 cv
19.895 111.445 li
19.867 111.504 19.84 111.547 19.809 111.578 cv
19.773 111.613 19.73 111.641 19.676 111.66 cv
19.621 111.68 19.551 111.691 19.473 111.703 cv
19.387 111.707 19.289 111.711 19.172 111.715 cv
19.016 111.711 18.895 111.703 18.809 111.691 cv
18.723 111.676 18.66 111.66 18.621 111.629 cv
18.582 111.602 18.563 111.562 18.57 111.52 cv
18.57 111.477 18.586 111.426 18.617 111.363 cv
21.977 103.836 li
17.719 103.836 li
17.633 103.84 17.566 103.793 17.523 103.699 cv
17.48 103.609 17.461 103.48 17.461 103.316 cv
17.461 103.23 17.465 103.156 17.477 103.09 cv
17.488 103.027 17.504 102.973 17.527 102.93 cv
17.547 102.887 17.574 102.855 17.609 102.832 cv
17.641 102.812 17.68 102.801 17.719 102.801 cv
22.891 102.801 li
22.949 102.801 23.004 102.809 23.055 102.824 cv
23.102 102.84 23.137 102.867 23.164 102.906 cv
23.188 102.945 23.207 103 23.223 103.062 cv
23.234 103.129 23.242 103.211 23.246 103.309 cv
cp
f
9.672 74.02 mo
23.86 74.02 li
23.86 91.11 li
9.672 91.11 li
cp
0 0 0 0 cmyk
ef
16.055 86.895 mo
16.051 86.984 16.043 87.055 16.031 87.113 cv
16.016 87.176 15.996 87.227 15.977 87.258 cv
15.953 87.297 15.93 87.32 15.898 87.336 cv
15.867 87.352 15.836 87.359 15.809 87.359 cv
11.172 87.359 li
11.137 87.359 11.109 87.352 11.082 87.336 cv
11.055 87.32 11.027 87.297 11.004 87.258 cv
10.977 87.227 10.957 87.176 10.945 87.113 cv
10.93 87.055 10.922 86.984 10.926 86.895 cv
10.922 86.816 10.93 86.742 10.945 86.68 cv
10.957 86.621 10.973 86.574 10.996 86.535 cv
11.012 86.5 11.039 86.469 11.07 86.445 cv
11.102 86.426 11.133 86.418 11.172 86.414 cv
13.023 86.414 li
13.023 79.668 li
11.309 80.687 li
11.219 80.738 11.148 80.766 11.102 80.773 cv
11.047 80.781 11.004 80.773 10.973 80.742 cv
10.938 80.715 10.918 80.664 10.906 80.594 cv
10.895 80.527 10.887 80.441 10.891 80.332 cv
10.887 80.258 10.891 80.191 10.902 80.133 cv
10.906 80.082 10.918 80.035 10.934 79.996 cv
10.945 79.961 10.965 79.93 10.988 79.902 cv
11.012 79.875 11.043 79.848 11.09 79.82 cv
13.133 78.508 li
13.148 78.496 13.168 78.484 13.199 78.477 cv
13.223 78.469 13.258 78.461 13.305 78.449 cv
13.344 78.441 13.395 78.434 13.449 78.43 cv
13.504 78.43 13.57 78.43 13.656 78.426 cv
13.762 78.43 13.855 78.434 13.93 78.441 cv
14 78.449 14.055 78.465 14.102 78.48 cv
14.141 78.5 14.168 78.52 14.184 78.543 cv
14.191 78.57 14.199 78.594 14.203 78.617 cv
14.203 86.414 li
15.809 86.414 li
15.844 86.418 15.879 86.426 15.91 86.445 cv
15.941 86.469 15.965 86.5 15.988 86.535 cv
16.004 86.574 16.02 86.621 16.035 86.68 cv
16.043 86.742 16.051 86.816 16.055 86.895 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.32 85.082 mo
23.32 85.469 23.25 85.812 23.113 86.109 cv
22.977 86.414 22.781 86.664 22.523 86.867 cv
22.266 87.074 21.945 87.23 21.566 87.332 cv
21.184 87.437 20.75 87.488 20.266 87.488 cv
19.805 87.488 19.395 87.441 19.035 87.348 cv
18.672 87.254 18.367 87.113 18.117 86.922 cv
17.867 86.738 17.676 86.508 17.543 86.23 cv
17.41 85.957 17.344 85.645 17.344 85.289 cv
17.344 85.016 17.387 84.758 17.48 84.523 cv
17.566 84.289 17.699 84.074 17.875 83.879 cv
18.043 83.684 18.254 83.5 18.508 83.324 cv
18.758 83.156 19.043 82.992 19.359 82.836 cv
19.086 82.695 18.844 82.547 18.633 82.387 cv
18.422 82.23 18.242 82.059 18.098 81.871 cv
17.949 81.687 17.84 81.492 17.766 81.281 cv
17.688 81.074 17.648 80.844 17.652 80.594 cv
17.648 80.285 17.703 79.992 17.82 79.719 cv
17.93 79.449 18.102 79.215 18.328 79.012 cv
18.555 78.812 18.84 78.652 19.191 78.535 cv
19.535 78.418 19.945 78.359 20.414 78.359 cv
20.859 78.359 21.246 78.414 21.574 78.52 cv
21.902 78.629 22.172 78.773 22.383 78.957 cv
22.594 79.145 22.75 79.363 22.855 79.613 cv
22.953 79.863 23.004 80.133 23.008 80.422 cv
23.004 80.656 22.965 80.883 22.895 81.094 cv
22.816 81.312 22.707 81.516 22.559 81.703 cv
22.41 81.898 22.23 82.078 22.02 82.242 cv
21.809 82.414 21.566 82.57 21.293 82.711 cv
21.613 82.875 21.898 83.039 22.156 83.207 cv
22.406 83.375 22.621 83.555 22.797 83.75 cv
22.965 83.945 23.094 84.152 23.188 84.367 cv
23.273 84.586 23.32 84.824 23.32 85.082 cv
cp
21.84 80.531 mo
21.836 80.344 21.805 80.168 21.738 80.012 cv
21.672 79.855 21.574 79.723 21.449 79.613 cv
21.32 79.504 21.16 79.422 20.973 79.363 cv
20.777 79.309 20.563 79.281 20.324 79.277 cv
19.828 79.281 19.453 79.391 19.203 79.613 cv
18.945 79.84 18.82 80.148 18.824 80.531 cv
18.82 80.711 18.852 80.875 18.914 81.027 cv
18.977 81.184 19.07 81.328 19.203 81.465 cv
19.328 81.602 19.492 81.734 19.695 81.863 cv
19.891 81.996 20.129 82.133 20.406 82.273 cv
20.867 82.039 21.223 81.777 21.469 81.484 cv
21.715 81.199 21.836 80.883 21.84 80.531 cv
cp
22.129 85.207 mo
22.125 85 22.086 84.809 22.012 84.637 cv
21.93 84.469 21.813 84.309 21.656 84.156 cv
21.5 84.008 21.301 83.863 21.066 83.723 cv
20.828 83.586 20.559 83.441 20.25 83.289 cv
19.961 83.434 19.707 83.574 19.492 83.715 cv
19.273 83.855 19.094 84.004 18.957 84.152 cv
18.816 84.309 18.711 84.465 18.641 84.629 cv
18.566 84.797 18.531 84.98 18.535 85.18 cv
18.531 85.625 18.684 85.969 18.992 86.207 cv
19.293 86.453 19.746 86.574 20.352 86.57 cv
20.934 86.574 21.379 86.453 21.68 86.203 cv
21.977 85.961 22.125 85.629 22.129 85.207 cv
cp
f
9.672 49.719 mo
23.86 49.719 li
23.86 66.809 li
9.672 66.809 li
cp
0 0 0 0 cmyk
ef
16.055 62.586 mo
16.051 62.676 16.043 62.746 16.031 62.805 cv
16.016 62.867 15.996 62.918 15.977 62.949 cv
15.953 62.988 15.93 63.012 15.898 63.027 cv
15.867 63.043 15.836 63.051 15.809 63.051 cv
11.172 63.051 li
11.137 63.051 11.109 63.043 11.082 63.027 cv
11.055 63.012 11.027 62.988 11.004 62.949 cv
10.977 62.918 10.957 62.867 10.945 62.805 cv
10.93 62.746 10.922 62.676 10.926 62.586 cv
10.922 62.508 10.93 62.434 10.945 62.371 cv
10.957 62.312 10.973 62.266 10.996 62.227 cv
11.012 62.191 11.039 62.16 11.07 62.137 cv
11.102 62.117 11.133 62.109 11.172 62.105 cv
13.023 62.105 li
13.023 55.359 li
11.309 56.379 li
11.219 56.43 11.148 56.457 11.102 56.465 cv
11.047 56.473 11.004 56.465 10.973 56.434 cv
10.938 56.406 10.918 56.355 10.906 56.285 cv
10.895 56.219 10.887 56.133 10.891 56.023 cv
10.887 55.949 10.891 55.883 10.902 55.824 cv
10.906 55.773 10.918 55.727 10.934 55.687 cv
10.945 55.652 10.965 55.621 10.988 55.594 cv
11.012 55.566 11.043 55.539 11.09 55.512 cv
13.133 54.199 li
13.148 54.187 13.168 54.176 13.199 54.168 cv
13.223 54.16 13.258 54.152 13.305 54.141 cv
13.344 54.133 13.395 54.125 13.449 54.121 cv
13.504 54.121 13.57 54.121 13.656 54.117 cv
13.762 54.121 13.855 54.125 13.93 54.133 cv
14 54.141 14.055 54.156 14.102 54.172 cv
14.141 54.191 14.168 54.211 14.184 54.234 cv
14.191 54.262 14.199 54.285 14.203 54.309 cv
14.203 62.105 li
15.809 62.105 li
15.844 62.109 15.879 62.117 15.91 62.137 cv
15.941 62.16 15.965 62.191 15.988 62.227 cv
16.004 62.266 16.02 62.312 16.035 62.371 cv
16.043 62.434 16.051 62.508 16.055 62.586 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.184 58.266 mo
23.18 58.652 23.156 59.039 23.113 59.43 cv
23.066 59.824 22.988 60.203 22.883 60.566 cv
22.77 60.93 22.625 61.27 22.441 61.586 cv
22.254 61.906 22.02 62.187 21.742 62.422 cv
21.457 62.664 21.121 62.848 20.738 62.98 cv
20.348 63.113 19.902 63.18 19.395 63.18 cv
19.195 63.18 19.004 63.164 18.82 63.141 cv
18.633 63.113 18.465 63.086 18.32 63.051 cv
18.168 63.016 18.043 62.977 17.945 62.934 cv
17.844 62.895 17.77 62.855 17.727 62.812 cv
17.68 62.773 17.648 62.719 17.629 62.645 cv
17.605 62.574 17.594 62.477 17.598 62.359 cv
17.594 62.258 17.598 62.18 17.605 62.121 cv
17.609 62.062 17.621 62.016 17.637 61.984 cv
17.652 61.953 17.672 61.934 17.695 61.918 cv
17.719 61.91 17.75 61.902 17.789 61.898 cv
17.836 61.902 17.906 61.918 18 61.949 cv
18.09 61.984 18.203 62.023 18.348 62.062 cv
18.484 62.105 18.648 62.145 18.836 62.176 cv
19.02 62.215 19.23 62.23 19.469 62.227 cv
19.91 62.23 20.289 62.145 20.609 61.973 cv
20.922 61.801 21.184 61.574 21.387 61.285 cv
21.59 61 21.738 60.664 21.84 60.281 cv
21.938 59.902 21.992 59.504 22.004 59.082 cv
21.758 59.227 21.469 59.352 21.133 59.457 cv
20.793 59.57 20.406 59.625 19.969 59.621 cv
19.477 59.625 19.063 59.559 18.727 59.422 cv
18.391 59.289 18.117 59.105 17.914 58.871 cv
17.707 58.641 17.563 58.363 17.477 58.039 cv
17.387 57.723 17.344 57.371 17.344 56.992 cv
17.344 56.602 17.398 56.23 17.516 55.871 cv
17.625 55.52 17.805 55.207 18.051 54.937 cv
18.289 54.668 18.598 54.453 18.977 54.293 cv
19.348 54.133 19.797 54.051 20.32 54.051 cv
20.688 54.051 21.012 54.098 21.301 54.191 cv
21.582 54.285 21.832 54.422 22.047 54.598 cv
22.254 54.773 22.434 54.984 22.582 55.234 cv
22.727 55.484 22.844 55.766 22.934 56.078 cv
23.02 56.395 23.082 56.738 23.125 57.105 cv
23.16 57.477 23.18 57.863 23.184 58.266 cv
cp
21.984 58.137 mo
21.984 57.555 21.945 57.062 21.867 56.66 cv
21.789 56.262 21.672 55.937 21.523 55.687 cv
21.371 55.441 21.188 55.262 20.969 55.152 cv
20.746 55.043 20.492 54.988 20.211 54.988 cv
19.906 54.988 19.652 55.043 19.445 55.152 cv
19.234 55.262 19.063 55.406 18.93 55.582 cv
18.793 55.766 18.691 55.969 18.629 56.195 cv
18.563 56.426 18.531 56.664 18.535 56.902 cv
18.531 57.176 18.563 57.422 18.621 57.641 cv
18.676 57.867 18.766 58.055 18.898 58.211 cv
19.023 58.367 19.191 58.488 19.398 58.574 cv
19.602 58.66 19.855 58.703 20.16 58.699 cv
20.5 58.703 20.832 58.652 21.156 58.547 cv
21.473 58.445 21.75 58.309 21.984 58.137 cv
cp
f
9.672 25.41 mo
23.86 25.41 li
23.86 42.5 li
9.672 42.5 li
cp
0 0 0 0 cmyk
ef
16.035 38.23 mo
16.031 38.316 16.027 38.391 16.016 38.453 cv
16.004 38.52 15.988 38.574 15.969 38.613 cv
15.945 38.66 15.918 38.691 15.887 38.707 cv
15.852 38.73 15.813 38.738 15.773 38.738 cv
10.871 38.738 li
10.809 38.738 10.75 38.73 10.703 38.715 cv
10.652 38.699 10.613 38.676 10.578 38.637 cv
10.543 38.605 10.516 38.551 10.504 38.48 cv
10.484 38.41 10.477 38.324 10.48 38.223 cv
10.477 38.133 10.48 38.055 10.488 37.984 cv
10.492 37.918 10.508 37.859 10.535 37.805 cv
10.559 37.754 10.59 37.699 10.625 37.645 cv
10.66 37.594 10.703 37.539 10.762 37.477 cv
12.535 35.652 li
12.945 35.234 13.273 34.859 13.523 34.523 cv
13.77 34.195 13.961 33.891 14.094 33.613 cv
14.227 33.34 14.313 33.09 14.359 32.863 cv
14.398 32.641 14.422 32.43 14.422 32.234 cv
14.422 32.039 14.387 31.855 14.32 31.676 cv
14.254 31.504 14.16 31.348 14.035 31.211 cv
13.91 31.082 13.754 30.977 13.566 30.895 cv
13.379 30.82 13.16 30.781 12.914 30.777 cv
12.625 30.781 12.367 30.82 12.141 30.895 cv
11.91 30.977 11.711 31.062 11.539 31.148 cv
11.367 31.242 11.223 31.324 11.105 31.402 cv
10.988 31.48 10.902 31.52 10.852 31.52 cv
10.816 31.52 10.785 31.512 10.762 31.492 cv
10.73 31.477 10.711 31.445 10.695 31.402 cv
10.68 31.363 10.664 31.309 10.656 31.238 cv
10.645 31.172 10.641 31.09 10.645 30.992 cv
10.641 30.926 10.645 30.867 10.652 30.816 cv
10.656 30.766 10.664 30.723 10.676 30.684 cv
10.684 30.648 10.699 30.613 10.719 30.582 cv
10.738 30.551 10.773 30.512 10.832 30.461 cv
10.883 30.414 10.977 30.348 11.113 30.266 cv
11.246 30.184 11.418 30.105 11.621 30.023 cv
11.824 29.945 12.047 29.875 12.293 29.82 cv
12.535 29.766 12.793 29.738 13.066 29.738 cv
13.492 29.738 13.867 29.801 14.191 29.922 cv
14.512 30.043 14.777 30.207 14.992 30.418 cv
15.203 30.629 15.363 30.875 15.469 31.148 cv
15.574 31.43 15.629 31.727 15.629 32.039 cv
15.629 32.328 15.602 32.609 15.551 32.887 cv
15.5 33.172 15.395 33.477 15.234 33.801 cv
15.07 34.129 14.836 34.492 14.531 34.891 cv
14.223 35.293 13.816 35.754 13.313 36.27 cv
11.906 37.738 li
15.766 37.738 li
15.797 37.742 15.832 37.754 15.871 37.77 cv
15.902 37.793 15.934 37.824 15.961 37.863 cv
15.984 37.906 16.004 37.957 16.016 38.016 cv
16.027 38.082 16.031 38.152 16.035 38.23 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.41 34.281 mo
23.406 34.965 23.355 35.586 23.25 36.148 cv
23.141 36.711 22.961 37.195 22.715 37.598 cv
22.461 38.004 22.133 38.316 21.734 38.535 cv
21.328 38.758 20.836 38.867 20.25 38.867 cv
19.691 38.867 19.219 38.77 18.84 38.57 cv
18.457 38.375 18.152 38.082 17.918 37.695 cv
17.684 37.309 17.516 36.836 17.422 36.27 cv
17.32 35.707 17.273 35.059 17.273 34.324 cv
17.273 33.652 17.328 33.031 17.438 32.465 cv
17.547 31.902 17.723 31.418 17.973 31.012 cv
18.215 30.609 18.539 30.297 18.945 30.07 cv
19.344 29.852 19.84 29.738 20.43 29.738 cv
20.988 29.738 21.461 29.84 21.844 30.035 cv
22.227 30.238 22.531 30.531 22.766 30.914 cv
22.996 31.305 23.164 31.777 23.262 32.34 cv
23.359 32.902 23.406 33.551 23.41 34.281 cv
cp
22.203 34.363 mo
22.199 33.922 22.184 33.523 22.156 33.172 cv
22.121 32.82 22.074 32.512 22.016 32.242 cv
21.949 31.973 21.871 31.742 21.773 31.547 cv
21.676 31.355 21.559 31.195 21.422 31.066 cv
21.281 30.941 21.121 30.848 20.949 30.789 cv
20.77 30.734 20.574 30.707 20.359 30.703 cv
19.969 30.707 19.652 30.797 19.414 30.98 cv
19.168 31.164 18.977 31.418 18.84 31.734 cv
18.699 32.055 18.605 32.426 18.555 32.855 cv
18.504 33.285 18.48 33.75 18.48 34.242 cv
18.48 34.906 18.512 35.469 18.582 35.93 cv
18.648 36.398 18.758 36.777 18.91 37.066 cv
19.055 37.363 19.246 37.574 19.477 37.703 cv
19.707 37.84 19.988 37.906 20.32 37.902 cv
20.574 37.906 20.797 37.867 20.992 37.781 cv
21.184 37.703 21.352 37.582 21.492 37.426 cv
21.633 37.273 21.746 37.09 21.84 36.875 cv
21.926 36.66 22 36.422 22.059 36.16 cv
22.109 35.902 22.148 35.621 22.172 35.316 cv
22.191 35.012 22.199 34.695 22.203 34.363 cv
cp
f
39.695 518.32 mo
39.691 518.41 39.684 518.48 39.672 518.539 cv
39.656 518.602 39.637 518.652 39.617 518.684 cv
39.594 518.723 39.57 518.746 39.539 518.762 cv
39.508 518.777 39.477 518.785 39.449 518.785 cv
34.813 518.785 li
34.777 518.785 34.75 518.777 34.723 518.762 cv
34.695 518.746 34.668 518.723 34.645 518.684 cv
34.617 518.652 34.598 518.602 34.586 518.539 cv
34.57 518.48 34.563 518.41 34.566 518.32 cv
34.563 518.242 34.57 518.168 34.586 518.105 cv
34.598 518.047 34.613 518 34.637 517.961 cv
34.652 517.926 34.68 517.895 34.711 517.871 cv
34.742 517.852 34.773 517.844 34.813 517.84 cv
36.664 517.84 li
36.664 511.094 li
34.949 512.113 li
34.859 512.164 34.789 512.191 34.742 512.199 cv
34.688 512.207 34.645 512.199 34.613 512.168 cv
34.578 512.141 34.559 512.09 34.547 512.02 cv
34.535 511.953 34.527 511.867 34.531 511.758 cv
34.527 511.684 34.531 511.617 34.543 511.559 cv
34.547 511.508 34.559 511.461 34.574 511.422 cv
34.586 511.387 34.605 511.355 34.629 511.328 cv
34.652 511.301 34.684 511.273 34.73 511.246 cv
36.773 509.934 li
36.789 509.922 36.809 509.91 36.84 509.902 cv
36.863 509.895 36.898 509.887 36.945 509.875 cv
36.984 509.867 37.035 509.859 37.09 509.855 cv
37.145 509.855 37.211 509.855 37.297 509.852 cv
37.402 509.855 37.496 509.859 37.57 509.867 cv
37.641 509.875 37.695 509.891 37.742 509.906 cv
37.781 509.926 37.809 509.945 37.824 509.969 cv
37.832 509.996 37.84 510.02 37.844 510.043 cv
37.844 517.84 li
39.449 517.84 li
39.484 517.844 39.52 517.852 39.551 517.871 cv
39.582 517.895 39.605 517.926 39.629 517.961 cv
39.645 518 39.66 518.047 39.676 518.105 cv
39.684 518.168 39.691 518.242 39.695 518.32 cv
cp
f
110.785 518.277 mo
110.781 518.363 110.777 518.437 110.766 518.5 cv
110.754 518.566 110.738 518.621 110.719 518.66 cv
110.695 518.707 110.668 518.738 110.637 518.754 cv
110.602 518.777 110.563 518.785 110.523 518.785 cv
105.621 518.785 li
105.559 518.785 105.5 518.777 105.453 518.762 cv
105.402 518.746 105.363 518.723 105.328 518.684 cv
105.293 518.652 105.266 518.598 105.254 518.527 cv
105.234 518.457 105.227 518.371 105.23 518.27 cv
105.227 518.18 105.23 518.102 105.238 518.031 cv
105.242 517.965 105.258 517.906 105.285 517.852 cv
105.309 517.801 105.34 517.746 105.375 517.691 cv
105.41 517.641 105.453 517.586 105.512 517.523 cv
107.285 515.699 li
107.695 515.281 108.023 514.906 108.273 514.57 cv
108.52 514.242 108.711 513.937 108.844 513.66 cv
108.977 513.387 109.063 513.137 109.109 512.91 cv
109.148 512.687 109.172 512.477 109.172 512.281 cv
109.172 512.086 109.137 511.902 109.07 511.723 cv
109.004 511.551 108.91 511.395 108.785 511.258 cv
108.66 511.129 108.504 511.023 108.316 510.941 cv
108.129 510.867 107.91 510.828 107.664 510.824 cv
107.375 510.828 107.117 510.867 106.891 510.941 cv
106.66 511.023 106.461 511.109 106.289 511.195 cv
106.117 511.289 105.973 511.371 105.855 511.449 cv
105.738 511.527 105.652 511.566 105.602 511.566 cv
105.566 511.566 105.535 511.559 105.512 511.539 cv
105.48 511.523 105.461 511.492 105.445 511.449 cv
105.43 511.41 105.414 511.355 105.406 511.285 cv
105.395 511.219 105.391 511.137 105.395 511.039 cv
105.391 510.973 105.395 510.914 105.402 510.863 cv
105.406 510.812 105.414 510.77 105.426 510.73 cv
105.434 510.695 105.449 510.66 105.469 510.629 cv
105.488 510.598 105.523 510.559 105.582 510.508 cv
105.633 510.461 105.727 510.395 105.863 510.312 cv
105.996 510.23 106.168 510.152 106.371 510.07 cv
106.574 509.992 106.797 509.922 107.043 509.867 cv
107.285 509.812 107.543 509.785 107.816 509.785 cv
108.242 509.785 108.617 509.848 108.941 509.969 cv
109.262 510.09 109.527 510.254 109.742 510.465 cv
109.953 510.676 110.113 510.922 110.219 511.195 cv
110.324 511.477 110.379 511.773 110.379 512.086 cv
110.379 512.375 110.352 512.656 110.301 512.934 cv
110.25 513.219 110.145 513.523 109.984 513.848 cv
109.82 514.176 109.586 514.539 109.281 514.937 cv
108.973 515.34 108.566 515.801 108.063 516.316 cv
106.656 517.785 li
110.516 517.785 li
110.547 517.789 110.582 517.801 110.621 517.816 cv
110.652 517.84 110.684 517.871 110.711 517.91 cv
110.734 517.953 110.754 518.004 110.766 518.062 cv
110.777 518.129 110.781 518.199 110.785 518.277 cv
cp
f
182.27 516.262 mo
182.266 516.414 182.242 516.535 182.199 516.621 cv
182.152 516.711 182.09 516.754 182.008 516.75 cv
181.008 516.75 li
181.008 518.613 li
181.008 518.652 180.996 518.684 180.98 518.707 cv
180.957 518.734 180.926 518.754 180.883 518.773 cv
180.832 518.789 180.77 518.801 180.699 518.812 cv
180.621 518.82 180.527 518.824 180.41 518.828 cv
180.293 518.824 180.195 518.82 180.125 518.812 cv
180.047 518.801 179.988 518.789 179.945 518.773 cv
179.898 518.754 179.867 518.734 179.852 518.707 cv
179.832 518.684 179.824 518.652 179.828 518.613 cv
179.828 516.75 li
176.199 516.75 li
176.141 516.754 176.098 516.746 176.063 516.73 cv
176.027 516.719 175.992 516.691 175.965 516.652 cv
175.934 516.617 175.914 516.566 175.902 516.496 cv
175.891 516.43 175.887 516.34 175.887 516.227 cv
175.887 516.145 175.887 516.066 175.895 515.996 cv
175.895 515.926 175.906 515.863 175.922 515.809 cv
175.934 515.754 175.949 515.699 175.977 515.645 cv
175.996 515.59 176.023 515.535 176.059 515.473 cv
179.219 510.086 li
179.238 510.051 179.273 510.02 179.32 509.992 cv
179.363 509.965 179.418 509.941 179.492 509.922 cv
179.559 509.906 179.645 509.895 179.75 509.883 cv
179.852 509.879 179.973 509.875 180.113 509.871 cv
180.262 509.875 180.398 509.879 180.516 509.891 cv
180.629 509.902 180.719 509.918 180.793 509.934 cv
180.859 509.953 180.914 509.977 180.953 510.008 cv
180.988 510.039 181.008 510.074 181.008 510.113 cv
181.008 515.777 li
182.008 515.777 li
182.082 515.781 182.145 515.82 182.195 515.898 cv
182.242 515.98 182.266 516.102 182.27 516.262 cv
cp
179.828 510.91 mo
179.816 510.91 li
176.965 515.777 li
179.828 515.777 li
cp
f
253.234 515.914 mo
253.234 516.305 253.172 516.684 253.055 517.043 cv
252.93 517.41 252.746 517.727 252.504 518 cv
252.254 518.277 251.941 518.5 251.566 518.664 cv
251.184 518.832 250.738 518.914 250.223 518.914 cv
249.852 518.914 249.523 518.871 249.242 518.777 cv
248.957 518.691 248.711 518.559 248.5 518.387 cv
248.289 518.219 248.113 518.012 247.977 517.766 cv
247.836 517.52 247.723 517.238 247.641 516.922 cv
247.555 516.609 247.496 516.266 247.461 515.887 cv
247.422 515.516 247.402 515.113 247.406 514.68 cv
247.402 514.301 247.422 513.918 247.465 513.527 cv
247.504 513.145 247.578 512.77 247.684 512.402 cv
247.789 512.043 247.934 511.703 248.113 511.387 cv
248.293 511.07 248.52 510.793 248.793 510.559 cv
249.066 510.324 249.391 510.137 249.77 509.996 cv
250.148 509.859 250.59 509.793 251.094 509.789 cv
251.262 509.793 251.434 509.801 251.605 509.82 cv
251.777 509.844 251.938 509.875 252.086 509.906 cv
252.234 509.945 252.355 509.98 252.457 510.02 cv
252.555 510.059 252.621 510.094 252.656 510.117 cv
252.684 510.145 252.707 510.172 252.727 510.199 cv
252.742 510.23 252.758 510.262 252.766 510.297 cv
252.773 510.332 252.777 510.371 252.785 510.414 cv
252.785 510.457 252.789 510.512 252.793 510.574 cv
252.789 510.66 252.789 510.73 252.789 510.785 cv
252.785 510.848 252.773 510.895 252.762 510.93 cv
252.742 510.969 252.723 510.996 252.699 511.012 cv
252.672 511.031 252.641 511.039 252.602 511.039 cv
252.551 511.039 252.48 511.023 252.395 510.992 cv
252.305 510.961 252.199 510.926 252.078 510.883 cv
251.953 510.848 251.805 510.812 251.629 510.777 cv
251.453 510.75 251.25 510.734 251.02 510.73 cv
250.59 510.734 250.223 510.82 249.918 510.992 cv
249.613 511.164 249.363 511.398 249.168 511.691 cv
248.973 511.984 248.828 512.324 248.738 512.707 cv
248.641 513.098 248.586 513.5 248.578 513.918 cv
248.695 513.852 248.832 513.785 248.98 513.715 cv
249.129 513.648 249.289 513.586 249.465 513.527 cv
249.641 513.477 249.828 513.43 250.023 513.395 cv
250.219 513.363 250.43 513.348 250.656 513.344 cv
251.133 513.348 251.535 513.414 251.867 513.539 cv
252.195 513.672 252.461 513.852 252.668 514.082 cv
252.867 514.312 253.012 514.582 253.102 514.895 cv
253.188 515.207 253.234 515.547 253.234 515.914 cv
cp
252.039 516.023 mo
252.039 515.762 252.012 515.52 251.961 515.301 cv
251.906 515.086 251.816 514.902 251.695 514.746 cv
251.57 514.598 251.406 514.48 251.203 514.398 cv
250.992 514.316 250.738 514.273 250.441 514.273 cv
250.27 514.273 250.102 514.289 249.934 514.32 cv
249.762 514.352 249.598 514.395 249.441 514.441 cv
249.281 514.496 249.133 514.559 248.992 514.629 cv
248.848 514.703 248.715 514.777 248.598 514.855 cv
248.594 515.449 248.633 515.945 248.711 516.34 cv
248.785 516.738 248.895 517.055 249.039 517.293 cv
249.184 517.535 249.363 517.707 249.578 517.809 cv
249.793 517.914 250.043 517.965 250.332 517.961 cv
250.621 517.965 250.875 517.91 251.09 517.797 cv
251.305 517.691 251.48 517.543 251.625 517.355 cv
251.766 517.172 251.871 516.965 251.938 516.734 cv
252.004 516.504 252.039 516.27 252.039 516.023 cv
cp
f
324.32 516.508 mo
324.32 516.895 324.25 517.238 324.113 517.535 cv
323.977 517.84 323.781 518.09 323.523 518.293 cv
323.266 518.5 322.945 518.656 322.566 518.758 cv
322.184 518.863 321.75 518.914 321.266 518.914 cv
320.805 518.914 320.395 518.867 320.035 518.773 cv
319.672 518.68 319.367 518.539 319.117 518.348 cv
318.867 518.164 318.676 517.934 318.543 517.656 cv
318.41 517.383 318.344 517.07 318.344 516.715 cv
318.344 516.441 318.387 516.184 318.48 515.949 cv
318.566 515.715 318.699 515.5 318.875 515.305 cv
319.043 515.109 319.254 514.926 319.508 514.75 cv
319.758 514.582 320.043 514.418 320.359 514.262 cv
320.086 514.121 319.844 513.973 319.633 513.812 cv
319.422 513.656 319.242 513.484 319.098 513.297 cv
318.949 513.113 318.84 512.918 318.766 512.707 cv
318.688 512.5 318.648 512.27 318.652 512.02 cv
318.648 511.711 318.703 511.418 318.82 511.145 cv
318.93 510.875 319.102 510.641 319.328 510.437 cv
319.555 510.238 319.84 510.078 320.191 509.961 cv
320.535 509.844 320.945 509.785 321.414 509.785 cv
321.859 509.785 322.246 509.84 322.574 509.945 cv
322.902 510.055 323.172 510.199 323.383 510.383 cv
323.594 510.57 323.75 510.789 323.855 511.039 cv
323.953 511.289 324.004 511.559 324.008 511.848 cv
324.004 512.082 323.965 512.309 323.895 512.52 cv
323.816 512.738 323.707 512.941 323.559 513.129 cv
323.41 513.324 323.23 513.504 323.02 513.668 cv
322.809 513.84 322.566 513.996 322.293 514.137 cv
322.613 514.301 322.898 514.465 323.156 514.633 cv
323.406 514.801 323.621 514.98 323.797 515.176 cv
323.965 515.371 324.094 515.578 324.188 515.793 cv
324.273 516.012 324.32 516.25 324.32 516.508 cv
cp
322.84 511.957 mo
322.836 511.77 322.805 511.594 322.738 511.437 cv
322.672 511.281 322.574 511.148 322.449 511.039 cv
322.32 510.93 322.16 510.848 321.973 510.789 cv
321.777 510.734 321.563 510.707 321.324 510.703 cv
320.828 510.707 320.453 510.816 320.203 511.039 cv
319.945 511.266 319.82 511.574 319.824 511.957 cv
319.82 512.137 319.852 512.301 319.914 512.453 cv
319.977 512.609 320.07 512.754 320.203 512.891 cv
320.328 513.027 320.492 513.16 320.695 513.289 cv
320.891 513.422 321.129 513.559 321.406 513.699 cv
321.867 513.465 322.223 513.203 322.469 512.91 cv
322.715 512.625 322.836 512.309 322.84 511.957 cv
cp
323.129 516.633 mo
323.125 516.426 323.086 516.234 323.012 516.062 cv
322.93 515.895 322.813 515.734 322.656 515.582 cv
322.5 515.434 322.301 515.289 322.066 515.148 cv
321.828 515.012 321.559 514.867 321.25 514.715 cv
320.961 514.859 320.707 515 320.492 515.141 cv
320.273 515.281 320.094 515.43 319.957 515.578 cv
319.816 515.734 319.711 515.891 319.641 516.055 cv
319.566 516.223 319.531 516.406 319.535 516.605 cv
319.531 517.051 319.684 517.395 319.992 517.633 cv
320.293 517.879 320.746 518 321.352 517.996 cv
321.934 518 322.379 517.879 322.68 517.629 cv
322.977 517.387 323.125 517.055 323.129 516.633 cv
cp
f
391.727 518.32 mo
391.723 518.41 391.715 518.48 391.703 518.539 cv
391.688 518.602 391.668 518.652 391.648 518.684 cv
391.625 518.723 391.602 518.746 391.57 518.762 cv
391.539 518.777 391.508 518.785 391.48 518.785 cv
386.844 518.785 li
386.809 518.785 386.781 518.777 386.754 518.762 cv
386.727 518.746 386.699 518.723 386.676 518.684 cv
386.648 518.652 386.629 518.602 386.617 518.539 cv
386.602 518.48 386.594 518.41 386.598 518.32 cv
386.594 518.242 386.602 518.168 386.617 518.105 cv
386.629 518.047 386.645 518 386.668 517.961 cv
386.684 517.926 386.711 517.895 386.742 517.871 cv
386.773 517.852 386.805 517.844 386.844 517.84 cv
388.695 517.84 li
388.695 511.094 li
386.98 512.113 li
386.891 512.164 386.82 512.191 386.773 512.199 cv
386.719 512.207 386.676 512.199 386.645 512.168 cv
386.609 512.141 386.59 512.09 386.578 512.02 cv
386.566 511.953 386.559 511.867 386.563 511.758 cv
386.559 511.684 386.563 511.617 386.574 511.559 cv
386.578 511.508 386.59 511.461 386.605 511.422 cv
386.617 511.387 386.637 511.355 386.66 511.328 cv
386.684 511.301 386.715 511.273 386.762 511.246 cv
388.805 509.934 li
388.82 509.922 388.84 509.91 388.871 509.902 cv
388.895 509.895 388.93 509.887 388.977 509.875 cv
389.016 509.867 389.066 509.859 389.121 509.855 cv
389.176 509.855 389.242 509.855 389.328 509.852 cv
389.434 509.855 389.527 509.859 389.602 509.867 cv
389.672 509.875 389.727 509.891 389.773 509.906 cv
389.813 509.926 389.84 509.945 389.855 509.969 cv
389.863 509.996 389.871 510.02 389.875 510.043 cv
389.875 517.84 li
391.48 517.84 li
391.516 517.844 391.551 517.852 391.582 517.871 cv
391.613 517.895 391.637 517.926 391.66 517.961 cv
391.676 518 391.691 518.047 391.707 518.105 cv
391.715 518.168 391.723 518.242 391.727 518.32 cv
cp
f
399.078 514.328 mo
399.074 515.012 399.023 515.633 398.918 516.195 cv
398.809 516.758 398.629 517.242 398.383 517.645 cv
398.129 518.051 397.801 518.363 397.402 518.582 cv
396.996 518.805 396.504 518.914 395.918 518.914 cv
395.359 518.914 394.887 518.816 394.508 518.617 cv
394.125 518.422 393.82 518.129 393.586 517.742 cv
393.352 517.355 393.184 516.883 393.09 516.316 cv
392.988 515.754 392.941 515.105 392.941 514.371 cv
392.941 513.699 392.996 513.078 393.105 512.512 cv
393.215 511.949 393.391 511.465 393.641 511.059 cv
393.883 510.656 394.207 510.344 394.613 510.117 cv
395.012 509.898 395.508 509.785 396.098 509.785 cv
396.656 509.785 397.129 509.887 397.512 510.082 cv
397.895 510.285 398.199 510.578 398.434 510.961 cv
398.664 511.352 398.832 511.824 398.93 512.387 cv
399.027 512.949 399.074 513.598 399.078 514.328 cv
cp
397.871 514.41 mo
397.867 513.969 397.852 513.57 397.824 513.219 cv
397.789 512.867 397.742 512.559 397.684 512.289 cv
397.617 512.02 397.539 511.789 397.441 511.594 cv
397.344 511.402 397.227 511.242 397.09 511.113 cv
396.949 510.988 396.789 510.895 396.617 510.836 cv
396.438 510.781 396.242 510.754 396.027 510.75 cv
395.637 510.754 395.32 510.844 395.082 511.027 cv
394.836 511.211 394.645 511.465 394.508 511.781 cv
394.367 512.102 394.273 512.473 394.223 512.902 cv
394.172 513.332 394.148 513.797 394.148 514.289 cv
394.148 514.953 394.18 515.516 394.25 515.977 cv
394.316 516.445 394.426 516.824 394.578 517.113 cv
394.723 517.41 394.914 517.621 395.145 517.75 cv
395.375 517.887 395.656 517.953 395.988 517.949 cv
396.242 517.953 396.465 517.914 396.66 517.828 cv
396.852 517.75 397.02 517.629 397.16 517.473 cv
397.301 517.32 397.414 517.137 397.508 516.922 cv
397.594 516.707 397.668 516.469 397.727 516.207 cv
397.777 515.949 397.816 515.668 397.84 515.363 cv
397.859 515.059 397.867 514.742 397.871 514.41 cv
cp
f
462.836 518.32 mo
462.832 518.41 462.824 518.48 462.813 518.539 cv
462.797 518.602 462.777 518.652 462.758 518.684 cv
462.734 518.723 462.711 518.746 462.68 518.762 cv
462.648 518.777 462.617 518.785 462.59 518.785 cv
457.953 518.785 li
457.918 518.785 457.891 518.777 457.863 518.762 cv
457.836 518.746 457.809 518.723 457.785 518.684 cv
457.758 518.652 457.738 518.602 457.727 518.539 cv
457.711 518.48 457.703 518.41 457.707 518.32 cv
457.703 518.242 457.711 518.168 457.727 518.105 cv
457.738 518.047 457.754 518 457.777 517.961 cv
457.793 517.926 457.82 517.895 457.852 517.871 cv
457.883 517.852 457.914 517.844 457.953 517.84 cv
459.805 517.84 li
459.805 511.094 li
458.09 512.113 li
458 512.164 457.93 512.191 457.883 512.199 cv
457.828 512.207 457.785 512.199 457.754 512.168 cv
457.719 512.141 457.699 512.09 457.688 512.02 cv
457.676 511.953 457.668 511.867 457.672 511.758 cv
457.668 511.684 457.672 511.617 457.684 511.559 cv
457.688 511.508 457.699 511.461 457.715 511.422 cv
457.727 511.387 457.746 511.355 457.77 511.328 cv
457.793 511.301 457.824 511.273 457.871 511.246 cv
459.914 509.934 li
459.93 509.922 459.949 509.91 459.98 509.902 cv
460.004 509.895 460.039 509.887 460.086 509.875 cv
460.125 509.867 460.176 509.859 460.23 509.855 cv
460.285 509.855 460.352 509.855 460.438 509.852 cv
460.543 509.855 460.637 509.859 460.711 509.867 cv
460.781 509.875 460.836 509.891 460.883 509.906 cv
460.922 509.926 460.949 509.945 460.965 509.969 cv
460.973 509.996 460.98 510.02 460.984 510.043 cv
460.984 517.84 li
462.59 517.84 li
462.625 517.844 462.66 517.852 462.691 517.871 cv
462.723 517.895 462.746 517.926 462.77 517.961 cv
462.785 518 462.801 518.047 462.816 518.105 cv
462.824 518.168 462.832 518.242 462.836 518.32 cv
cp
f
469.895 518.277 mo
469.891 518.363 469.887 518.437 469.875 518.5 cv
469.863 518.566 469.848 518.621 469.828 518.66 cv
469.805 518.707 469.777 518.738 469.746 518.754 cv
469.711 518.777 469.672 518.785 469.633 518.785 cv
464.73 518.785 li
464.668 518.785 464.609 518.777 464.563 518.762 cv
464.512 518.746 464.473 518.723 464.438 518.684 cv
464.402 518.652 464.375 518.598 464.363 518.527 cv
464.344 518.457 464.336 518.371 464.34 518.27 cv
464.336 518.18 464.34 518.102 464.348 518.031 cv
464.352 517.965 464.367 517.906 464.395 517.852 cv
464.418 517.801 464.449 517.746 464.484 517.691 cv
464.52 517.641 464.563 517.586 464.621 517.523 cv
466.395 515.699 li
466.805 515.281 467.133 514.906 467.383 514.57 cv
467.629 514.242 467.82 513.937 467.953 513.66 cv
468.086 513.387 468.172 513.137 468.219 512.91 cv
468.258 512.687 468.281 512.477 468.281 512.281 cv
468.281 512.086 468.246 511.902 468.18 511.723 cv
468.113 511.551 468.02 511.395 467.895 511.258 cv
467.77 511.129 467.613 511.023 467.426 510.941 cv
467.238 510.867 467.02 510.828 466.773 510.824 cv
466.484 510.828 466.227 510.867 466 510.941 cv
465.77 511.023 465.57 511.109 465.398 511.195 cv
465.227 511.289 465.082 511.371 464.965 511.449 cv
464.848 511.527 464.762 511.566 464.711 511.566 cv
464.676 511.566 464.645 511.559 464.621 511.539 cv
464.59 511.523 464.57 511.492 464.555 511.449 cv
464.539 511.41 464.523 511.355 464.516 511.285 cv
464.504 511.219 464.5 511.137 464.504 511.039 cv
464.5 510.973 464.504 510.914 464.512 510.863 cv
464.516 510.812 464.523 510.77 464.535 510.73 cv
464.543 510.695 464.559 510.66 464.578 510.629 cv
464.598 510.598 464.633 510.559 464.691 510.508 cv
464.742 510.461 464.836 510.395 464.973 510.312 cv
465.105 510.23 465.277 510.152 465.48 510.07 cv
465.684 509.992 465.906 509.922 466.152 509.867 cv
466.395 509.812 466.652 509.785 466.926 509.785 cv
467.352 509.785 467.727 509.848 468.051 509.969 cv
468.371 510.09 468.637 510.254 468.852 510.465 cv
469.063 510.676 469.223 510.922 469.328 511.195 cv
469.434 511.477 469.488 511.773 469.488 512.086 cv
469.488 512.375 469.461 512.656 469.41 512.934 cv
469.359 513.219 469.254 513.523 469.094 513.848 cv
468.93 514.176 468.695 514.539 468.391 514.937 cv
468.082 515.34 467.676 515.801 467.172 516.316 cv
465.766 517.785 li
469.625 517.785 li
469.656 517.789 469.691 517.801 469.73 517.816 cv
469.762 517.84 469.793 517.871 469.82 517.91 cv
469.844 517.953 469.863 518.004 469.875 518.062 cv
469.887 518.129 469.891 518.199 469.895 518.277 cv
cp
f
533.945 518.32 mo
533.941 518.41 533.934 518.48 533.922 518.539 cv
533.906 518.602 533.887 518.652 533.867 518.684 cv
533.844 518.723 533.82 518.746 533.789 518.762 cv
533.758 518.777 533.727 518.785 533.699 518.785 cv
529.063 518.785 li
529.027 518.785 529 518.777 528.973 518.762 cv
528.945 518.746 528.918 518.723 528.895 518.684 cv
528.867 518.652 528.848 518.602 528.836 518.539 cv
528.82 518.48 528.813 518.41 528.816 518.32 cv
528.813 518.242 528.82 518.168 528.836 518.105 cv
528.848 518.047 528.863 518 528.887 517.961 cv
528.902 517.926 528.93 517.895 528.961 517.871 cv
528.992 517.852 529.023 517.844 529.063 517.84 cv
530.914 517.84 li
530.914 511.094 li
529.199 512.113 li
529.109 512.164 529.039 512.191 528.992 512.199 cv
528.938 512.207 528.895 512.199 528.863 512.168 cv
528.828 512.141 528.809 512.09 528.797 512.02 cv
528.785 511.953 528.777 511.867 528.781 511.758 cv
528.777 511.684 528.781 511.617 528.793 511.559 cv
528.797 511.508 528.809 511.461 528.824 511.422 cv
528.836 511.387 528.855 511.355 528.879 511.328 cv
528.902 511.301 528.934 511.273 528.98 511.246 cv
531.023 509.934 li
531.039 509.922 531.059 509.91 531.09 509.902 cv
531.113 509.895 531.148 509.887 531.195 509.875 cv
531.234 509.867 531.285 509.859 531.34 509.855 cv
531.395 509.855 531.461 509.855 531.547 509.852 cv
531.652 509.855 531.746 509.859 531.82 509.867 cv
531.891 509.875 531.945 509.891 531.992 509.906 cv
532.031 509.926 532.059 509.945 532.074 509.969 cv
532.082 509.996 532.09 510.02 532.094 510.043 cv
532.094 517.84 li
533.699 517.84 li
533.734 517.844 533.77 517.852 533.801 517.871 cv
533.832 517.895 533.855 517.926 533.879 517.961 cv
533.895 518 533.91 518.047 533.926 518.105 cv
533.934 518.168 533.941 518.242 533.945 518.32 cv
cp
f
541.383 516.262 mo
541.379 516.414 541.355 516.535 541.313 516.621 cv
541.266 516.711 541.203 516.754 541.121 516.75 cv
540.121 516.75 li
540.121 518.613 li
540.121 518.652 540.109 518.684 540.094 518.707 cv
540.07 518.734 540.039 518.754 539.996 518.773 cv
539.945 518.789 539.883 518.801 539.813 518.812 cv
539.734 518.82 539.641 518.824 539.523 518.828 cv
539.406 518.824 539.309 518.82 539.238 518.812 cv
539.16 518.801 539.102 518.789 539.059 518.773 cv
539.012 518.754 538.98 518.734 538.965 518.707 cv
538.945 518.684 538.938 518.652 538.941 518.613 cv
538.941 516.75 li
535.313 516.75 li
535.254 516.754 535.211 516.746 535.176 516.73 cv
535.141 516.719 535.105 516.691 535.078 516.652 cv
535.047 516.617 535.027 516.566 535.016 516.496 cv
535.004 516.43 535 516.34 535 516.227 cv
535 516.145 535 516.066 535.008 515.996 cv
535.008 515.926 535.02 515.863 535.035 515.809 cv
535.047 515.754 535.063 515.699 535.09 515.645 cv
535.109 515.59 535.137 515.535 535.172 515.473 cv
538.332 510.086 li
538.352 510.051 538.387 510.02 538.434 509.992 cv
538.477 509.965 538.531 509.941 538.605 509.922 cv
538.672 509.906 538.758 509.895 538.863 509.883 cv
538.965 509.879 539.086 509.875 539.227 509.871 cv
539.375 509.875 539.512 509.879 539.629 509.891 cv
539.742 509.902 539.832 509.918 539.906 509.934 cv
539.973 509.953 540.027 509.977 540.066 510.008 cv
540.102 510.039 540.121 510.074 540.121 510.113 cv
540.121 515.777 li
541.121 515.777 li
541.195 515.781 541.258 515.82 541.309 515.898 cv
541.355 515.98 541.379 516.102 541.383 516.262 cv
cp
538.941 510.91 mo
538.93 510.91 li
536.078 515.777 li
538.941 515.777 li
cp
f
605.055 518.32 mo
605.051 518.41 605.043 518.48 605.031 518.539 cv
605.016 518.602 604.996 518.652 604.977 518.684 cv
604.953 518.723 604.93 518.746 604.898 518.762 cv
604.867 518.777 604.836 518.785 604.809 518.785 cv
600.172 518.785 li
600.137 518.785 600.109 518.777 600.082 518.762 cv
600.055 518.746 600.027 518.723 600.004 518.684 cv
599.977 518.652 599.957 518.602 599.945 518.539 cv
599.93 518.48 599.922 518.41 599.926 518.32 cv
599.922 518.242 599.93 518.168 599.945 518.105 cv
599.957 518.047 599.973 518 599.996 517.961 cv
600.012 517.926 600.039 517.895 600.07 517.871 cv
600.102 517.852 600.133 517.844 600.172 517.84 cv
602.023 517.84 li
602.023 511.094 li
600.309 512.113 li
600.219 512.164 600.148 512.191 600.102 512.199 cv
600.047 512.207 600.004 512.199 599.973 512.168 cv
599.938 512.141 599.918 512.09 599.906 512.02 cv
599.895 511.953 599.887 511.867 599.891 511.758 cv
599.887 511.684 599.891 511.617 599.902 511.559 cv
599.906 511.508 599.918 511.461 599.934 511.422 cv
599.945 511.387 599.965 511.355 599.988 511.328 cv
600.012 511.301 600.043 511.273 600.09 511.246 cv
602.133 509.934 li
602.148 509.922 602.168 509.91 602.199 509.902 cv
602.223 509.895 602.258 509.887 602.305 509.875 cv
602.344 509.867 602.395 509.859 602.449 509.855 cv
602.504 509.855 602.57 509.855 602.656 509.852 cv
602.762 509.855 602.855 509.859 602.93 509.867 cv
603 509.875 603.055 509.891 603.102 509.906 cv
603.141 509.926 603.168 509.945 603.184 509.969 cv
603.191 509.996 603.199 510.02 603.203 510.043 cv
603.203 517.84 li
604.809 517.84 li
604.844 517.844 604.879 517.852 604.91 517.871 cv
604.941 517.895 604.965 517.926 604.988 517.961 cv
605.004 518 605.02 518.047 605.035 518.105 cv
605.043 518.168 605.051 518.242 605.055 518.32 cv
cp
f
612.344 515.914 mo
612.344 516.305 612.281 516.684 612.164 517.043 cv
612.039 517.41 611.855 517.727 611.613 518 cv
611.363 518.277 611.051 518.5 610.676 518.664 cv
610.293 518.832 609.848 518.914 609.332 518.914 cv
608.961 518.914 608.633 518.871 608.352 518.777 cv
608.066 518.691 607.82 518.559 607.609 518.387 cv
607.398 518.219 607.223 518.012 607.086 517.766 cv
606.945 517.52 606.832 517.238 606.75 516.922 cv
606.664 516.609 606.605 516.266 606.57 515.887 cv
606.531 515.516 606.512 515.113 606.516 514.68 cv
606.512 514.301 606.531 513.918 606.574 513.527 cv
606.613 513.145 606.688 512.77 606.793 512.402 cv
606.898 512.043 607.043 511.703 607.223 511.387 cv
607.402 511.07 607.629 510.793 607.902 510.559 cv
608.176 510.324 608.5 510.137 608.879 509.996 cv
609.258 509.859 609.699 509.793 610.203 509.789 cv
610.371 509.793 610.543 509.801 610.715 509.82 cv
610.887 509.844 611.047 509.875 611.195 509.906 cv
611.344 509.945 611.465 509.98 611.566 510.02 cv
611.664 510.059 611.73 510.094 611.766 510.117 cv
611.793 510.145 611.816 510.172 611.836 510.199 cv
611.852 510.23 611.867 510.262 611.875 510.297 cv
611.883 510.332 611.887 510.371 611.895 510.414 cv
611.895 510.457 611.898 510.512 611.902 510.574 cv
611.898 510.66 611.898 510.73 611.898 510.785 cv
611.895 510.848 611.883 510.895 611.871 510.93 cv
611.852 510.969 611.832 510.996 611.809 511.012 cv
611.781 511.031 611.75 511.039 611.711 511.039 cv
611.66 511.039 611.59 511.023 611.504 510.992 cv
611.414 510.961 611.309 510.926 611.188 510.883 cv
611.063 510.848 610.914 510.812 610.738 510.777 cv
610.563 510.75 610.359 510.734 610.129 510.73 cv
609.699 510.734 609.332 510.82 609.027 510.992 cv
608.723 511.164 608.473 511.398 608.277 511.691 cv
608.082 511.984 607.938 512.324 607.848 512.707 cv
607.75 513.098 607.695 513.5 607.688 513.918 cv
607.805 513.852 607.941 513.785 608.09 513.715 cv
608.238 513.648 608.398 513.586 608.574 513.527 cv
608.75 513.477 608.938 513.43 609.133 513.395 cv
609.328 513.363 609.539 513.348 609.766 513.344 cv
610.242 513.348 610.645 513.414 610.977 513.539 cv
611.305 513.672 611.57 513.852 611.777 514.082 cv
611.977 514.312 612.121 514.582 612.211 514.895 cv
612.297 515.207 612.344 515.547 612.344 515.914 cv
cp
611.148 516.023 mo
611.148 515.762 611.121 515.52 611.07 515.301 cv
611.016 515.086 610.926 514.902 610.805 514.746 cv
610.68 514.598 610.516 514.48 610.313 514.398 cv
610.102 514.316 609.848 514.273 609.551 514.273 cv
609.379 514.273 609.211 514.289 609.043 514.32 cv
608.871 514.352 608.707 514.395 608.551 514.441 cv
608.391 514.496 608.242 514.559 608.102 514.629 cv
607.957 514.703 607.824 514.777 607.707 514.855 cv
607.703 515.449 607.742 515.945 607.82 516.34 cv
607.895 516.738 608.004 517.055 608.148 517.293 cv
608.293 517.535 608.473 517.707 608.688 517.809 cv
608.902 517.914 609.152 517.965 609.441 517.961 cv
609.73 517.965 609.984 517.91 610.199 517.797 cv
610.414 517.691 610.59 517.543 610.734 517.355 cv
610.875 517.172 610.98 516.965 611.047 516.734 cv
611.113 516.504 611.148 516.27 611.148 516.023 cv
cp
f
259.813 536.996 mo
259.809 537.102 259.793 537.191 259.758 537.262 cv
259.723 537.34 259.676 537.398 259.621 537.441 cv
259.563 537.492 259.5 537.527 259.434 537.543 cv
259.359 537.566 259.289 537.574 259.227 537.574 cv
258.781 537.574 li
258.641 537.574 258.52 537.562 258.414 537.531 cv
258.309 537.508 258.211 537.453 258.117 537.375 cv
258.023 537.301 257.93 537.199 257.836 537.066 cv
257.742 536.937 257.641 536.773 257.535 536.57 cv
254.461 530.832 li
254.297 530.539 254.133 530.23 253.973 529.902 cv
253.805 529.582 253.652 529.266 253.516 528.957 cv
253.5 528.957 li
253.508 529.332 253.516 529.715 253.523 530.102 cv
253.527 530.492 253.527 530.879 253.531 531.262 cv
253.531 537.348 li
253.527 537.387 253.516 537.422 253.496 537.453 cv
253.473 537.488 253.438 537.516 253.387 537.531 cv
253.332 537.551 253.262 537.562 253.18 537.578 cv
253.094 537.59 252.988 537.598 252.859 537.598 cv
252.723 537.598 252.613 537.59 252.531 537.578 cv
252.445 537.562 252.379 537.551 252.332 537.531 cv
252.281 537.516 252.246 537.488 252.223 537.453 cv
252.199 537.422 252.188 537.387 252.191 537.348 cv
252.191 528.043 li
252.188 527.836 252.246 527.687 252.367 527.598 cv
252.484 527.512 252.613 527.469 252.754 527.465 cv
253.414 527.465 li
253.566 527.469 253.699 527.48 253.805 527.504 cv
253.906 527.531 254 527.574 254.086 527.633 cv
254.168 527.695 254.246 527.777 254.328 527.883 cv
254.402 527.992 254.484 528.129 254.57 528.285 cv
256.938 532.711 li
257.082 532.984 257.223 533.25 257.359 533.504 cv
257.492 533.762 257.621 534.016 257.75 534.262 cv
257.871 534.516 257.996 534.762 258.121 535 cv
258.242 535.242 258.363 535.484 258.488 535.727 cv
258.496 535.727 li
258.484 535.32 258.477 534.891 258.477 534.445 cv
258.469 534 258.469 533.574 258.473 533.164 cv
258.473 527.691 li
258.469 527.656 258.48 527.621 258.504 527.59 cv
258.527 527.559 258.563 527.531 258.617 527.508 cv
258.664 527.484 258.734 527.469 258.82 527.457 cv
258.906 527.449 259.016 527.445 259.156 527.441 cv
259.273 527.445 259.379 527.449 259.469 527.457 cv
259.555 527.469 259.621 527.484 259.672 527.508 cv
259.719 527.531 259.754 527.559 259.777 527.59 cv
259.797 527.621 259.809 527.656 259.813 527.691 cv
cp
f
268.359 537.355 mo
268.355 537.402 268.348 537.437 268.332 537.461 cv
268.313 537.492 268.277 537.516 268.234 537.535 cv
268.188 537.555 268.129 537.566 268.055 537.582 cv
267.977 537.59 267.883 537.598 267.777 537.598 cv
267.652 537.598 267.555 537.59 267.484 537.582 cv
267.406 537.566 267.348 537.555 267.305 537.535 cv
267.258 537.516 267.227 537.492 267.215 537.461 cv
267.195 537.437 267.188 537.402 267.191 537.355 cv
267.191 536.43 li
266.789 536.875 266.395 537.195 266.008 537.395 cv
265.613 537.598 265.219 537.695 264.824 537.699 cv
264.352 537.695 263.957 537.621 263.641 537.465 cv
263.32 537.312 263.063 537.102 262.867 536.832 cv
262.664 536.566 262.523 536.254 262.441 535.895 cv
262.352 535.539 262.309 535.105 262.313 534.598 cv
262.313 530.344 li
262.309 530.305 262.316 530.27 262.34 530.238 cv
262.355 530.211 262.391 530.187 262.445 530.16 cv
262.492 530.141 262.563 530.125 262.648 530.113 cv
262.73 530.109 262.832 530.105 262.961 530.102 cv
263.082 530.105 263.188 530.109 263.273 530.113 cv
263.355 530.125 263.422 530.141 263.469 530.16 cv
263.516 530.187 263.551 530.211 263.574 530.238 cv
263.594 530.27 263.602 530.305 263.605 530.344 cv
263.605 534.426 li
263.602 534.84 263.633 535.168 263.695 535.414 cv
263.754 535.66 263.844 535.871 263.969 536.043 cv
264.086 536.223 264.242 536.355 264.434 536.449 cv
264.617 536.547 264.836 536.598 265.086 536.594 cv
265.406 536.598 265.727 536.48 266.051 536.25 cv
266.367 536.023 266.707 535.687 267.066 535.242 cv
267.066 530.344 li
267.066 530.305 267.074 530.27 267.094 530.238 cv
267.109 530.211 267.145 530.187 267.199 530.16 cv
267.25 530.141 267.316 530.125 267.398 530.113 cv
267.477 530.109 267.582 530.105 267.715 530.102 cv
267.836 530.105 267.941 530.109 268.027 530.113 cv
268.109 530.125 268.172 530.141 268.219 530.16 cv
268.262 530.187 268.297 530.211 268.324 530.238 cv
268.344 530.27 268.355 530.305 268.359 530.344 cv
cp
f
281.137 537.355 mo
281.133 537.402 281.125 537.437 281.105 537.461 cv
281.082 537.492 281.047 537.516 281.004 537.535 cv
280.953 537.555 280.887 537.566 280.809 537.582 cv
280.723 537.59 280.621 537.598 280.496 537.598 cv
280.363 537.598 280.254 537.59 280.176 537.582 cv
280.09 537.566 280.023 537.555 279.977 537.535 cv
279.922 537.516 279.887 537.492 279.871 537.461 cv
279.848 537.437 279.84 537.402 279.84 537.355 cv
279.84 533.094 li
279.84 532.801 279.813 532.531 279.762 532.285 cv
279.707 532.043 279.625 531.832 279.512 531.652 cv
279.398 531.477 279.254 531.34 279.078 531.246 cv
278.898 531.152 278.688 531.105 278.453 531.105 cv
278.156 531.105 277.859 531.223 277.563 531.449 cv
277.258 531.684 276.93 532.016 276.574 532.453 cv
276.574 537.355 li
276.57 537.402 276.559 537.437 276.543 537.461 cv
276.52 537.492 276.488 537.516 276.441 537.535 cv
276.391 537.555 276.324 537.566 276.242 537.582 cv
276.156 537.59 276.051 537.598 275.93 537.598 cv
275.809 537.598 275.707 537.59 275.621 537.582 cv
275.535 537.566 275.465 537.555 275.418 537.535 cv
275.363 537.516 275.332 537.492 275.316 537.461 cv
275.297 537.437 275.285 537.402 275.289 537.355 cv
275.289 533.094 li
275.285 532.801 275.258 532.531 275.203 532.285 cv
275.145 532.043 275.059 531.832 274.945 531.652 cv
274.832 531.477 274.688 531.34 274.516 531.246 cv
274.336 531.152 274.129 531.105 273.895 531.105 cv
273.594 531.105 273.297 531.223 272.996 531.449 cv
272.695 531.684 272.367 532.016 272.016 532.453 cv
272.016 537.355 li
272.012 537.402 272 537.437 271.984 537.461 cv
271.961 537.492 271.93 537.516 271.883 537.535 cv
271.836 537.555 271.77 537.566 271.691 537.582 cv
271.605 537.59 271.5 537.598 271.371 537.598 cv
271.242 537.598 271.137 537.59 271.059 537.582 cv
270.973 537.566 270.906 537.555 270.859 537.535 cv
270.805 537.516 270.773 537.492 270.758 537.461 cv
270.738 537.437 270.727 537.402 270.73 537.355 cv
270.73 530.344 li
270.727 530.305 270.734 530.27 270.754 530.238 cv
270.766 530.211 270.797 530.187 270.848 530.16 cv
270.891 530.141 270.953 530.125 271.027 530.113 cv
271.098 530.109 271.191 530.105 271.316 530.102 cv
271.426 530.105 271.523 530.109 271.602 530.113 cv
271.676 530.125 271.734 530.141 271.777 530.16 cv
271.816 530.187 271.844 530.211 271.863 530.238 cv
271.879 530.27 271.887 530.305 271.891 530.344 cv
271.891 531.27 li
272.281 530.828 272.664 530.508 273.039 530.301 cv
273.406 530.098 273.785 529.992 274.168 529.992 cv
274.457 529.992 274.715 530.027 274.949 530.094 cv
275.176 530.164 275.383 530.258 275.563 530.379 cv
275.738 530.5 275.887 530.645 276.016 530.812 cv
276.137 530.984 276.242 531.176 276.328 531.379 cv
276.559 531.129 276.781 530.914 276.992 530.734 cv
277.203 530.562 277.406 530.418 277.602 530.305 cv
277.797 530.199 277.984 530.121 278.168 530.066 cv
278.352 530.02 278.539 529.992 278.727 529.992 cv
279.18 529.992 279.559 530.074 279.863 530.23 cv
280.168 530.395 280.414 530.605 280.609 530.867 cv
280.797 531.133 280.934 531.441 281.016 531.797 cv
281.094 532.152 281.133 532.527 281.137 532.922 cv
cp
f
289.938 533.754 mo
289.934 534.363 289.867 534.914 289.738 535.398 cv
289.602 535.887 289.406 536.301 289.152 536.641 cv
288.895 536.984 288.578 537.246 288.207 537.426 cv
287.832 537.609 287.406 537.695 286.922 537.699 cv
286.695 537.695 286.488 537.676 286.301 537.633 cv
286.113 537.586 285.926 537.516 285.746 537.418 cv
285.559 537.32 285.379 537.195 285.199 537.043 cv
285.016 536.895 284.824 536.715 284.625 536.5 cv
284.625 537.355 li
284.625 537.402 284.613 537.437 284.594 537.465 cv
284.57 537.5 284.535 537.523 284.492 537.539 cv
284.441 537.555 284.383 537.566 284.316 537.582 cv
284.242 537.59 284.152 537.598 284.047 537.598 cv
283.938 537.598 283.852 537.59 283.781 537.582 cv
283.707 537.566 283.645 537.555 283.602 537.539 cv
283.551 537.523 283.52 537.5 283.508 537.465 cv
283.488 537.437 283.48 537.402 283.484 537.355 cv
283.484 526.945 li
283.48 526.906 283.492 526.871 283.512 526.836 cv
283.527 526.809 283.559 526.781 283.613 526.758 cv
283.66 526.738 283.727 526.723 283.813 526.711 cv
283.891 526.703 283.996 526.699 284.125 526.695 cv
284.254 526.699 284.359 526.703 284.445 526.711 cv
284.523 526.723 284.59 526.738 284.637 526.758 cv
284.684 526.781 284.715 526.809 284.738 526.836 cv
284.754 526.871 284.766 526.906 284.77 526.945 cv
284.77 531.145 li
284.977 530.934 285.18 530.754 285.375 530.609 cv
285.57 530.465 285.758 530.348 285.945 530.254 cv
286.129 530.168 286.316 530.102 286.508 530.055 cv
286.691 530.016 286.891 529.992 287.102 529.992 cv
287.605 529.992 288.039 530.094 288.406 530.297 cv
288.766 530.5 289.059 530.773 289.285 531.109 cv
289.508 531.453 289.676 531.852 289.781 532.309 cv
289.883 532.766 289.934 533.246 289.938 533.754 cv
cp
288.605 533.902 mo
288.602 533.547 288.574 533.199 288.523 532.859 cv
288.465 532.523 288.371 532.227 288.234 531.965 cv
288.098 531.707 287.918 531.496 287.695 531.336 cv
287.469 531.18 287.188 531.102 286.855 531.098 cv
286.688 531.102 286.523 531.125 286.363 531.168 cv
286.199 531.219 286.035 531.297 285.867 531.402 cv
285.699 531.516 285.523 531.656 285.348 531.824 cv
285.164 532 284.973 532.215 284.77 532.469 cv
284.77 535.266 li
285.125 535.699 285.465 536.031 285.789 536.254 cv
286.113 536.484 286.449 536.598 286.801 536.594 cv
287.121 536.598 287.398 536.52 287.633 536.359 cv
287.859 536.207 288.047 536 288.191 535.738 cv
288.336 535.484 288.441 535.195 288.508 534.875 cv
288.57 534.559 288.602 534.234 288.605 533.902 cv
cp
f
297.848 533.547 mo
297.844 533.75 297.793 533.891 297.695 533.977 cv
297.59 534.062 297.473 534.105 297.348 534.105 cv
292.73 534.105 li
292.727 534.496 292.766 534.848 292.848 535.16 cv
292.922 535.473 293.055 535.742 293.238 535.961 cv
293.418 536.187 293.652 536.359 293.949 536.477 cv
294.238 536.602 294.598 536.66 295.023 536.656 cv
295.355 536.66 295.652 536.633 295.914 536.574 cv
296.176 536.523 296.402 536.461 296.594 536.391 cv
296.781 536.324 296.938 536.266 297.063 536.207 cv
297.184 536.156 297.277 536.129 297.34 536.125 cv
297.375 536.129 297.406 536.137 297.438 536.152 cv
297.465 536.172 297.488 536.199 297.508 536.234 cv
297.52 536.273 297.531 536.324 297.543 536.387 cv
297.547 536.453 297.551 536.531 297.555 536.625 cv
297.551 536.695 297.547 536.754 297.547 536.801 cv
297.539 536.848 297.535 536.891 297.527 536.93 cv
297.52 536.969 297.504 537.004 297.488 537.035 cv
297.465 537.066 297.441 537.098 297.418 537.125 cv
297.387 537.156 297.305 537.203 297.164 537.266 cv
297.023 537.332 296.84 537.395 296.617 537.457 cv
296.391 537.52 296.133 537.574 295.84 537.625 cv
295.547 537.672 295.234 537.695 294.902 537.699 cv
294.324 537.695 293.816 537.617 293.387 537.457 cv
292.949 537.297 292.586 537.059 292.293 536.742 cv
291.992 536.426 291.77 536.031 291.621 535.551 cv
291.473 535.074 291.398 534.516 291.398 533.879 cv
291.398 533.281 291.473 532.742 291.629 532.258 cv
291.781 531.781 292.008 531.371 292.305 531.035 cv
292.598 530.699 292.953 530.441 293.367 530.262 cv
293.781 530.082 294.246 529.992 294.762 529.992 cv
295.313 529.992 295.781 530.082 296.168 530.258 cv
296.555 530.437 296.871 530.676 297.125 530.973 cv
297.371 531.273 297.555 531.625 297.672 532.023 cv
297.785 532.43 297.844 532.859 297.848 533.312 cv
cp
296.555 533.164 mo
296.57 532.488 296.418 531.957 296.102 531.574 cv
295.785 531.191 295.316 531 294.699 530.996 cv
294.375 531 294.094 531.059 293.855 531.176 cv
293.613 531.297 293.414 531.457 293.254 531.652 cv
293.09 531.852 292.965 532.082 292.879 532.344 cv
292.789 532.605 292.738 532.879 292.73 533.164 cv
cp
f
303.91 530.801 mo
303.906 530.918 303.906 531.016 303.902 531.09 cv
303.895 531.172 303.883 531.234 303.871 531.273 cv
303.852 531.32 303.832 531.352 303.813 531.375 cv
303.785 531.398 303.754 531.41 303.715 531.41 cv
303.672 531.41 303.621 531.398 303.563 531.375 cv
303.5 531.352 303.43 531.328 303.359 531.305 cv
303.281 531.281 303.199 531.262 303.105 531.238 cv
303.012 531.223 302.91 531.211 302.801 531.207 cv
302.668 531.211 302.539 531.238 302.418 531.285 cv
302.293 531.34 302.164 531.426 302.027 531.543 cv
301.887 531.668 301.742 531.824 301.594 532.02 cv
301.441 532.215 301.273 532.457 301.094 532.742 cv
301.094 537.355 li
301.09 537.402 301.078 537.437 301.063 537.461 cv
301.039 537.492 301.008 537.516 300.961 537.535 cv
300.914 537.555 300.848 537.566 300.77 537.582 cv
300.684 537.59 300.578 537.598 300.449 537.598 cv
300.32 537.598 300.215 537.59 300.137 537.582 cv
300.051 537.566 299.984 537.555 299.938 537.535 cv
299.883 537.516 299.852 537.492 299.836 537.461 cv
299.816 537.437 299.805 537.402 299.809 537.355 cv
299.809 530.344 li
299.805 530.305 299.813 530.27 299.832 530.238 cv
299.844 530.211 299.875 530.187 299.926 530.16 cv
299.969 530.141 300.031 530.125 300.105 530.113 cv
300.176 530.109 300.27 530.105 300.395 530.102 cv
300.504 530.105 300.602 530.109 300.68 530.113 cv
300.754 530.125 300.813 530.141 300.855 530.16 cv
300.895 530.187 300.922 530.211 300.941 530.238 cv
300.957 530.27 300.965 530.305 300.969 530.344 cv
300.969 531.363 li
301.156 531.082 301.34 530.855 301.512 530.68 cv
301.68 530.504 301.84 530.363 301.992 530.262 cv
302.141 530.16 302.289 530.09 302.438 530.051 cv
302.586 530.012 302.734 529.992 302.887 529.992 cv
302.953 529.992 303.031 529.996 303.117 530.004 cv
303.203 530.012 303.293 530.027 303.387 530.047 cv
303.48 530.07 303.563 530.094 303.641 530.117 cv
303.711 530.145 303.766 530.172 303.801 530.195 cv
303.828 530.227 303.848 530.25 303.863 530.27 cv
303.871 530.297 303.883 530.328 303.891 530.359 cv
303.898 530.398 303.902 530.449 303.906 530.52 cv
303.906 530.59 303.906 530.684 303.91 530.801 cv
cp
f
315.668 533.77 mo
315.664 534.348 315.59 534.875 315.441 535.352 cv
315.289 535.836 315.063 536.25 314.766 536.594 cv
314.465 536.945 314.09 537.215 313.645 537.406 cv
313.191 537.602 312.672 537.695 312.082 537.699 cv
311.504 537.695 311 537.613 310.574 537.441 cv
310.145 537.273 309.789 537.023 309.504 536.695 cv
309.215 536.367 309 535.973 308.863 535.504 cv
308.723 535.039 308.656 534.508 308.656 533.91 cv
308.656 533.344 308.727 532.816 308.875 532.336 cv
309.02 531.855 309.246 531.441 309.547 531.09 cv
309.844 530.742 310.215 530.473 310.664 530.281 cv
311.109 530.09 311.633 529.992 312.23 529.992 cv
312.809 529.992 313.309 530.078 313.738 530.25 cv
314.164 530.422 314.523 530.672 314.809 531 cv
315.094 531.328 315.309 531.727 315.453 532.191 cv
315.594 532.66 315.664 533.187 315.668 533.77 cv
cp
314.336 533.855 mo
314.332 533.48 314.297 533.121 314.23 532.781 cv
314.156 532.445 314.039 532.152 313.879 531.895 cv
313.715 531.645 313.496 531.441 313.219 531.289 cv
312.938 531.145 312.59 531.07 312.18 531.066 cv
311.793 531.07 311.465 531.137 311.191 531.27 cv
310.914 531.406 310.688 531.598 310.512 531.844 cv
310.332 532.09 310.199 532.383 310.117 532.719 cv
310.027 533.059 309.984 533.426 309.988 533.824 cv
309.984 534.211 310.02 534.574 310.094 534.91 cv
310.16 535.25 310.277 535.543 310.445 535.793 cv
310.609 536.047 310.832 536.25 311.109 536.395 cv
311.387 536.547 311.734 536.621 312.148 536.617 cv
312.523 536.621 312.852 536.551 313.133 536.414 cv
313.41 536.281 313.637 536.094 313.816 535.844 cv
313.992 535.602 314.121 535.309 314.207 534.973 cv
314.289 534.637 314.332 534.266 314.336 533.855 cv
cp
f
321.402 527.457 mo
321.398 527.559 321.395 527.637 321.387 527.695 cv
321.375 527.758 321.363 527.809 321.352 527.84 cv
321.336 527.879 321.32 527.902 321.301 527.914 cv
321.277 527.93 321.25 527.937 321.223 527.934 cv
321.184 527.937 321.137 527.926 321.086 527.898 cv
321.027 527.879 320.961 527.852 320.887 527.82 cv
320.805 527.793 320.715 527.766 320.609 527.742 cv
320.5 527.719 320.375 527.707 320.242 527.707 cv
320.047 527.707 319.883 527.738 319.75 527.801 cv
319.609 527.863 319.5 527.961 319.422 528.094 cv
319.336 528.227 319.277 528.398 319.242 528.609 cv
319.203 528.82 319.184 529.078 319.188 529.375 cv
319.188 530.141 li
320.754 530.141 li
320.793 530.145 320.828 530.152 320.859 530.168 cv
320.887 530.187 320.914 530.219 320.938 530.262 cv
320.961 530.309 320.977 530.367 320.992 530.43 cv
321 530.5 321.008 530.582 321.012 530.676 cv
321.008 530.867 320.984 531 320.941 531.082 cv
320.891 531.168 320.828 531.211 320.754 531.207 cv
319.188 531.207 li
319.188 537.355 li
319.184 537.402 319.176 537.437 319.156 537.461 cv
319.133 537.492 319.098 537.516 319.051 537.535 cv
319 537.555 318.934 537.566 318.852 537.582 cv
318.766 537.59 318.66 537.598 318.543 537.598 cv
318.414 537.598 318.313 537.59 318.23 537.582 cv
318.145 537.566 318.078 537.555 318.031 537.535 cv
317.98 537.516 317.945 537.492 317.926 537.461 cv
317.902 537.437 317.891 537.402 317.895 537.355 cv
317.895 531.207 li
316.906 531.207 li
316.82 531.211 316.758 531.168 316.719 531.082 cv
316.676 531 316.652 530.867 316.656 530.676 cv
316.652 530.582 316.66 530.5 316.672 530.43 cv
316.68 530.367 316.695 530.309 316.719 530.262 cv
316.738 530.219 316.762 530.187 316.797 530.168 cv
316.824 530.152 316.863 530.145 316.906 530.141 cv
317.895 530.141 li
317.895 529.414 li
317.891 528.93 317.938 528.512 318.031 528.156 cv
318.121 527.809 318.258 527.52 318.445 527.297 cv
318.629 527.074 318.863 526.91 319.152 526.801 cv
319.434 526.695 319.77 526.641 320.156 526.641 cv
320.332 526.641 320.508 526.66 320.684 526.691 cv
320.852 526.73 320.984 526.766 321.082 526.801 cv
321.172 526.844 321.234 526.879 321.27 526.906 cv
321.297 526.941 321.324 526.98 321.348 527.027 cv
321.367 527.078 321.379 527.141 321.391 527.207 cv
321.395 527.281 321.398 527.363 321.402 527.457 cv
cp
f
331.598 534.723 mo
331.594 535.195 331.508 535.617 331.336 535.984 cv
331.16 536.359 330.918 536.672 330.609 536.926 cv
330.301 537.184 329.938 537.375 329.52 537.504 cv
329.098 537.633 328.648 537.695 328.168 537.699 cv
327.828 537.695 327.512 537.668 327.227 537.613 cv
326.938 537.555 326.684 537.488 326.457 537.402 cv
326.23 537.324 326.039 537.238 325.887 537.145 cv
325.73 537.059 325.625 536.98 325.566 536.918 cv
325.508 536.855 325.465 536.777 325.438 536.684 cv
325.406 536.59 325.391 536.461 325.395 536.297 cv
325.391 536.184 325.395 536.09 325.41 536.012 cv
325.418 535.937 325.434 535.875 325.457 535.828 cv
325.473 535.781 325.5 535.75 325.535 535.73 cv
325.563 535.715 325.598 535.707 325.641 535.703 cv
325.711 535.707 325.813 535.75 325.949 535.836 cv
326.078 535.926 326.25 536.023 326.461 536.125 cv
326.668 536.234 326.918 536.332 327.211 536.418 cv
327.504 536.512 327.844 536.555 328.23 536.555 cv
328.52 536.555 328.785 536.516 329.027 536.437 cv
329.266 536.359 329.473 536.25 329.652 536.105 cv
329.824 535.965 329.961 535.789 330.055 535.578 cv
330.148 535.371 330.195 535.137 330.195 534.871 cv
330.195 534.59 330.129 534.344 330 534.137 cv
329.867 533.937 329.695 533.762 329.484 533.605 cv
329.27 533.457 329.027 533.316 328.754 533.184 cv
328.48 533.059 328.199 532.926 327.918 532.793 cv
327.629 532.66 327.352 532.516 327.082 532.352 cv
326.813 532.195 326.57 532.004 326.359 531.785 cv
326.141 531.566 325.969 531.312 325.84 531.016 cv
325.703 530.727 325.637 530.375 325.641 529.961 cv
325.637 529.543 325.715 529.168 325.871 528.836 cv
326.023 528.508 326.234 528.23 326.512 528.004 cv
326.781 527.785 327.105 527.613 327.484 527.496 cv
327.859 527.379 328.27 527.32 328.707 527.32 cv
328.926 527.32 329.148 527.34 329.379 527.379 cv
329.602 527.418 329.813 527.469 330.016 527.531 cv
330.211 527.598 330.391 527.672 330.551 527.75 cv
330.703 527.832 330.805 527.898 330.859 527.945 cv
330.906 528 330.941 528.039 330.957 528.062 cv
330.973 528.094 330.984 528.129 330.996 528.172 cv
331.004 528.219 331.012 528.273 331.02 528.332 cv
331.023 528.398 331.027 528.477 331.027 528.574 cv
331.027 528.668 331.023 528.754 331.016 528.824 cv
331.008 528.902 330.996 528.961 330.98 529.008 cv
330.965 529.055 330.941 529.09 330.914 529.113 cv
330.883 529.137 330.852 529.148 330.816 529.148 cv
330.758 529.148 330.668 529.113 330.547 529.043 cv
330.422 528.973 330.27 528.891 330.098 528.797 cv
329.918 528.707 329.711 528.625 329.473 528.547 cv
329.227 528.473 328.957 528.434 328.66 528.434 cv
328.379 528.434 328.133 528.473 327.926 528.547 cv
327.715 528.625 327.543 528.727 327.41 528.848 cv
327.273 528.973 327.172 529.117 327.105 529.289 cv
327.039 529.461 327.008 529.645 327.008 529.836 cv
327.008 530.121 327.07 530.363 327.199 530.562 cv
327.328 530.766 327.5 530.945 327.719 531.098 cv
327.93 531.258 328.176 531.398 328.453 531.527 cv
328.727 531.66 329.008 531.793 329.297 531.922 cv
329.582 532.055 329.863 532.199 330.137 532.355 cv
330.41 532.516 330.656 532.703 330.875 532.918 cv
331.09 533.137 331.262 533.391 331.398 533.684 cv
331.527 533.977 331.594 534.324 331.598 534.723 cv
cp
f
339.367 537.355 mo
339.363 537.402 339.355 537.437 339.34 537.461 cv
339.32 537.492 339.285 537.516 339.242 537.535 cv
339.195 537.555 339.137 537.566 339.063 537.582 cv
338.984 537.59 338.891 537.598 338.785 537.598 cv
338.66 537.598 338.563 537.59 338.492 537.582 cv
338.414 537.566 338.355 537.555 338.313 537.535 cv
338.266 537.516 338.234 537.492 338.223 537.461 cv
338.203 537.437 338.195 537.402 338.199 537.355 cv
338.199 536.43 li
337.797 536.875 337.402 537.195 337.016 537.395 cv
336.621 537.598 336.227 537.695 335.832 537.699 cv
335.359 537.695 334.965 537.621 334.648 537.465 cv
334.328 537.312 334.07 537.102 333.875 536.832 cv
333.672 536.566 333.531 536.254 333.449 535.895 cv
333.359 535.539 333.316 535.105 333.32 534.598 cv
333.32 530.344 li
333.316 530.305 333.324 530.27 333.348 530.238 cv
333.363 530.211 333.398 530.187 333.453 530.16 cv
333.5 530.141 333.57 530.125 333.656 530.113 cv
333.738 530.109 333.84 530.105 333.969 530.102 cv
334.09 530.105 334.195 530.109 334.281 530.113 cv
334.363 530.125 334.43 530.141 334.477 530.16 cv
334.523 530.187 334.559 530.211 334.582 530.238 cv
334.602 530.27 334.609 530.305 334.613 530.344 cv
334.613 534.426 li
334.609 534.84 334.641 535.168 334.703 535.414 cv
334.762 535.66 334.852 535.871 334.977 536.043 cv
335.094 536.223 335.25 536.355 335.441 536.449 cv
335.625 536.547 335.844 536.598 336.094 536.594 cv
336.414 536.598 336.734 536.48 337.059 536.25 cv
337.375 536.023 337.715 535.687 338.074 535.242 cv
338.074 530.344 li
338.074 530.305 338.082 530.27 338.102 530.238 cv
338.117 530.211 338.152 530.187 338.207 530.16 cv
338.258 530.141 338.324 530.125 338.406 530.113 cv
338.484 530.109 338.59 530.105 338.723 530.102 cv
338.844 530.105 338.949 530.109 339.035 530.113 cv
339.117 530.125 339.18 530.141 339.227 530.16 cv
339.27 530.187 339.305 530.211 339.332 530.238 cv
339.352 530.27 339.363 530.305 339.367 530.344 cv
cp
f
348.223 533.754 mo
348.219 534.363 348.152 534.914 348.023 535.398 cv
347.887 535.887 347.691 536.301 347.438 536.641 cv
347.18 536.984 346.863 537.246 346.492 537.426 cv
346.117 537.609 345.691 537.695 345.207 537.699 cv
344.98 537.695 344.773 537.676 344.586 537.633 cv
344.398 537.586 344.211 537.516 344.031 537.418 cv
343.844 537.32 343.664 537.195 343.484 537.043 cv
343.301 536.895 343.109 536.715 342.91 536.5 cv
342.91 537.355 li
342.91 537.402 342.898 537.437 342.879 537.465 cv
342.855 537.5 342.82 537.523 342.777 537.539 cv
342.727 537.555 342.668 537.566 342.602 537.582 cv
342.527 537.59 342.438 537.598 342.332 537.598 cv
342.223 537.598 342.137 537.59 342.066 537.582 cv
341.992 537.566 341.93 537.555 341.887 537.539 cv
341.836 537.523 341.805 537.5 341.793 537.465 cv
341.773 537.437 341.766 537.402 341.77 537.355 cv
341.77 526.945 li
341.766 526.906 341.777 526.871 341.797 526.836 cv
341.813 526.809 341.844 526.781 341.898 526.758 cv
341.945 526.738 342.012 526.723 342.098 526.711 cv
342.176 526.703 342.281 526.699 342.41 526.695 cv
342.539 526.699 342.645 526.703 342.73 526.711 cv
342.809 526.723 342.875 526.738 342.922 526.758 cv
342.969 526.781 343 526.809 343.023 526.836 cv
343.039 526.871 343.051 526.906 343.055 526.945 cv
343.055 531.145 li
343.262 530.934 343.465 530.754 343.66 530.609 cv
343.855 530.465 344.043 530.348 344.23 530.254 cv
344.414 530.168 344.602 530.102 344.793 530.055 cv
344.977 530.016 345.176 529.992 345.387 529.992 cv
345.891 529.992 346.324 530.094 346.691 530.297 cv
347.051 530.5 347.344 530.773 347.57 531.109 cv
347.793 531.453 347.961 531.852 348.066 532.309 cv
348.168 532.766 348.219 533.246 348.223 533.754 cv
cp
346.891 533.902 mo
346.887 533.547 346.859 533.199 346.809 532.859 cv
346.75 532.523 346.656 532.227 346.52 531.965 cv
346.383 531.707 346.203 531.496 345.98 531.336 cv
345.754 531.18 345.473 531.102 345.141 531.098 cv
344.973 531.102 344.809 531.125 344.648 531.168 cv
344.484 531.219 344.32 531.297 344.152 531.402 cv
343.984 531.516 343.809 531.656 343.633 531.824 cv
343.449 532 343.258 532.215 343.055 532.469 cv
343.055 535.266 li
343.41 535.699 343.75 536.031 344.074 536.254 cv
344.398 536.484 344.734 536.598 345.086 536.594 cv
345.406 536.598 345.684 536.52 345.918 536.359 cv
346.145 536.207 346.332 536 346.477 535.738 cv
346.621 535.484 346.727 535.195 346.793 534.875 cv
346.855 534.559 346.887 534.234 346.891 533.902 cv
cp
f
353.379 533.617 mo
353.379 533.82 353.355 533.957 353.309 534.035 cv
353.262 534.113 353.191 534.152 353.105 534.152 cv
349.848 534.152 li
349.754 534.152 349.688 534.113 349.641 534.031 cv
349.594 533.953 349.57 533.816 349.57 533.617 cv
349.57 533.422 349.594 533.281 349.641 533.203 cv
349.688 533.125 349.754 533.086 349.848 533.086 cv
353.105 533.086 li
353.145 533.086 353.184 533.094 353.219 533.109 cv
353.25 533.125 353.277 533.156 353.305 533.199 cv
353.324 533.246 353.344 533.301 353.359 533.367 cv
353.371 533.437 353.379 533.523 353.379 533.617 cv
cp
f
356.629 537.348 mo
356.625 537.391 356.617 537.426 356.598 537.457 cv
356.574 537.488 356.535 537.516 356.488 537.531 cv
356.434 537.551 356.367 537.562 356.281 537.578 cv
356.195 537.59 356.086 537.598 355.961 537.598 cv
355.832 537.598 355.727 537.59 355.641 537.578 cv
355.551 537.562 355.48 537.551 355.43 537.531 cv
355.375 537.516 355.34 537.488 355.32 537.457 cv
355.297 537.426 355.285 537.391 355.289 537.348 cv
355.289 527.668 li
355.285 527.629 355.297 527.594 355.324 527.559 cv
355.344 527.531 355.383 527.504 355.441 527.484 cv
355.492 527.469 355.563 527.453 355.652 527.437 cv
355.734 527.426 355.836 527.422 355.961 527.418 cv
356.086 527.422 356.195 527.426 356.281 527.437 cv
356.367 527.453 356.434 527.469 356.488 527.484 cv
356.535 527.504 356.574 527.531 356.598 527.559 cv
356.617 527.594 356.625 527.629 356.629 527.668 cv
cp
f
369.617 537.355 mo
369.613 537.402 369.605 537.437 369.586 537.461 cv
369.563 537.492 369.527 537.516 369.484 537.535 cv
369.434 537.555 369.367 537.566 369.289 537.582 cv
369.203 537.59 369.102 537.598 368.977 537.598 cv
368.844 537.598 368.734 537.59 368.656 537.582 cv
368.57 537.566 368.504 537.555 368.457 537.535 cv
368.402 537.516 368.367 537.492 368.352 537.461 cv
368.328 537.437 368.32 537.402 368.32 537.355 cv
368.32 533.094 li
368.32 532.801 368.293 532.531 368.242 532.285 cv
368.188 532.043 368.105 531.832 367.992 531.652 cv
367.879 531.477 367.734 531.34 367.559 531.246 cv
367.379 531.152 367.168 531.105 366.934 531.105 cv
366.637 531.105 366.34 531.223 366.043 531.449 cv
365.738 531.684 365.41 532.016 365.055 532.453 cv
365.055 537.355 li
365.051 537.402 365.039 537.437 365.023 537.461 cv
365 537.492 364.969 537.516 364.922 537.535 cv
364.871 537.555 364.805 537.566 364.723 537.582 cv
364.637 537.59 364.531 537.598 364.41 537.598 cv
364.289 537.598 364.188 537.59 364.102 537.582 cv
364.016 537.566 363.945 537.555 363.898 537.535 cv
363.844 537.516 363.813 537.492 363.797 537.461 cv
363.777 537.437 363.766 537.402 363.77 537.355 cv
363.77 533.094 li
363.766 532.801 363.738 532.531 363.684 532.285 cv
363.625 532.043 363.539 531.832 363.426 531.652 cv
363.313 531.477 363.168 531.34 362.996 531.246 cv
362.816 531.152 362.609 531.105 362.375 531.105 cv
362.074 531.105 361.777 531.223 361.477 531.449 cv
361.176 531.684 360.848 532.016 360.496 532.453 cv
360.496 537.355 li
360.492 537.402 360.48 537.437 360.465 537.461 cv
360.441 537.492 360.41 537.516 360.363 537.535 cv
360.316 537.555 360.25 537.566 360.172 537.582 cv
360.086 537.59 359.98 537.598 359.852 537.598 cv
359.723 537.598 359.617 537.59 359.539 537.582 cv
359.453 537.566 359.387 537.555 359.34 537.535 cv
359.285 537.516 359.254 537.492 359.238 537.461 cv
359.219 537.437 359.207 537.402 359.211 537.355 cv
359.211 530.344 li
359.207 530.305 359.215 530.27 359.234 530.238 cv
359.246 530.211 359.277 530.187 359.328 530.16 cv
359.371 530.141 359.434 530.125 359.508 530.113 cv
359.578 530.109 359.672 530.105 359.797 530.102 cv
359.906 530.105 360.004 530.109 360.082 530.113 cv
360.156 530.125 360.215 530.141 360.258 530.16 cv
360.297 530.187 360.324 530.211 360.344 530.238 cv
360.359 530.27 360.367 530.305 360.371 530.344 cv
360.371 531.27 li
360.762 530.828 361.145 530.508 361.52 530.301 cv
361.887 530.098 362.266 529.992 362.648 529.992 cv
362.938 529.992 363.195 530.027 363.43 530.094 cv
363.656 530.164 363.863 530.258 364.043 530.379 cv
364.219 530.5 364.367 530.645 364.496 530.812 cv
364.617 530.984 364.723 531.176 364.809 531.379 cv
365.039 531.129 365.262 530.914 365.473 530.734 cv
365.684 530.562 365.887 530.418 366.082 530.305 cv
366.277 530.199 366.465 530.121 366.648 530.066 cv
366.832 530.02 367.02 529.992 367.207 529.992 cv
367.66 529.992 368.039 530.074 368.344 530.23 cv
368.648 530.395 368.895 530.605 369.09 530.867 cv
369.277 531.133 369.414 531.441 369.496 531.797 cv
369.574 532.152 369.613 532.527 369.617 532.922 cv
cp
f
377.25 537.363 mo
377.246 537.426 377.227 537.473 377.188 537.504 cv
377.145 537.535 377.086 537.559 377.016 537.574 cv
376.938 537.59 376.832 537.598 376.695 537.598 cv
376.559 537.598 376.449 537.59 376.371 537.574 cv
376.285 537.559 376.227 537.535 376.195 537.504 cv
376.156 537.473 376.141 537.426 376.145 537.363 cv
376.145 536.664 li
375.836 536.992 375.492 537.246 375.117 537.426 cv
374.738 537.609 374.34 537.695 373.922 537.699 cv
373.547 537.695 373.215 537.648 372.918 537.555 cv
372.621 537.457 372.367 537.32 372.156 537.137 cv
371.945 536.957 371.781 536.734 371.664 536.469 cv
371.547 536.207 371.488 535.906 371.492 535.562 cv
371.488 535.172 371.566 534.828 371.73 534.535 cv
371.887 534.246 372.121 534.004 372.426 533.812 cv
372.727 533.621 373.094 533.477 373.531 533.379 cv
373.965 533.285 374.457 533.238 375.004 533.234 cv
375.973 533.234 li
375.973 532.687 li
375.969 532.418 375.941 532.18 375.887 531.973 cv
375.828 531.766 375.734 531.594 375.609 531.453 cv
375.477 531.316 375.313 531.211 375.113 531.141 cv
374.906 531.07 374.656 531.035 374.367 531.035 cv
374.047 531.035 373.762 531.074 373.512 531.148 cv
373.254 531.227 373.035 531.309 372.848 531.398 cv
372.66 531.492 372.5 531.578 372.375 531.648 cv
372.242 531.727 372.148 531.762 372.09 531.762 cv
372.047 531.762 372.012 531.754 371.98 531.73 cv
371.949 531.715 371.922 531.684 371.898 531.637 cv
371.875 531.598 371.855 531.543 371.848 531.477 cv
371.832 531.414 371.828 531.344 371.832 531.262 cv
371.828 531.137 371.836 531.031 371.859 530.953 cv
371.875 530.879 371.922 530.809 371.992 530.738 cv
372.063 530.672 372.184 530.594 372.355 530.504 cv
372.527 530.414 372.723 530.332 372.945 530.254 cv
373.168 530.184 373.414 530.121 373.68 530.066 cv
373.945 530.02 374.211 529.992 374.484 529.992 cv
374.984 529.992 375.414 530.051 375.766 530.164 cv
376.117 530.281 376.402 530.449 376.625 530.668 cv
376.84 530.891 377 531.164 377.102 531.488 cv
377.199 531.82 377.246 532.203 377.25 532.633 cv
cp
375.973 534.16 mo
374.871 534.16 li
374.516 534.164 374.211 534.195 373.953 534.25 cv
373.691 534.312 373.477 534.398 373.305 534.516 cv
373.133 534.633 373.008 534.773 372.93 534.937 cv
372.848 535.102 372.805 535.289 372.809 535.5 cv
372.805 535.867 372.922 536.16 373.152 536.371 cv
373.383 536.59 373.707 536.695 374.125 536.695 cv
374.461 536.695 374.773 536.609 375.063 536.437 cv
375.352 536.266 375.652 536.004 375.973 535.648 cv
cp
f
385.469 530.66 mo
385.465 530.844 385.441 530.977 385.395 531.055 cv
385.344 531.137 385.281 531.176 385.207 531.176 cv
384.199 531.176 li
384.379 531.363 384.508 531.57 384.582 531.797 cv
384.652 532.023 384.688 532.258 384.691 532.5 cv
384.688 532.906 384.621 533.266 384.496 533.578 cv
384.363 533.891 384.18 534.156 383.938 534.367 cv
383.695 534.586 383.406 534.75 383.078 534.863 cv
382.742 534.98 382.375 535.039 381.973 535.035 cv
381.684 535.039 381.41 535 381.156 534.922 cv
380.895 534.848 380.699 534.754 380.563 534.637 cv
380.469 534.734 380.391 534.84 380.332 534.957 cv
380.27 535.078 380.238 535.215 380.242 535.367 cv
380.238 535.551 380.324 535.703 380.496 535.82 cv
380.664 535.945 380.887 536.008 381.168 536.016 cv
383 536.094 li
383.348 536.105 383.664 536.152 383.957 536.238 cv
384.246 536.324 384.5 536.449 384.715 536.605 cv
384.926 536.766 385.094 536.957 385.215 537.187 cv
385.332 537.422 385.391 537.691 385.395 537.996 cv
385.391 538.316 385.324 538.621 385.191 538.914 cv
385.055 539.203 384.848 539.457 384.57 539.68 cv
384.289 539.898 383.934 540.074 383.504 540.203 cv
383.074 540.328 382.566 540.391 381.98 540.395 cv
381.41 540.391 380.926 540.344 380.531 540.25 cv
380.133 540.152 379.809 540.02 379.555 539.855 cv
379.301 539.687 379.117 539.492 379.004 539.262 cv
378.887 539.027 378.828 538.773 378.832 538.508 cv
378.828 538.336 378.848 538.172 378.895 538.012 cv
378.934 537.848 378.996 537.695 379.082 537.551 cv
379.164 537.406 379.273 537.27 379.402 537.133 cv
379.527 537.004 379.672 536.871 379.844 536.742 cv
379.586 536.613 379.398 536.449 379.277 536.25 cv
379.156 536.055 379.098 535.844 379.098 535.609 cv
379.098 535.297 379.16 535.012 379.289 534.762 cv
379.418 534.512 379.578 534.289 379.773 534.09 cv
379.609 533.898 379.484 533.684 379.391 533.441 cv
379.297 533.203 379.25 532.91 379.25 532.562 cv
379.25 532.168 379.316 531.809 379.453 531.488 cv
379.586 531.172 379.773 530.906 380.016 530.687 cv
380.254 530.473 380.539 530.305 380.875 530.184 cv
381.207 530.07 381.574 530.012 381.973 530.008 cv
382.184 530.012 382.383 530.023 382.566 530.043 cv
382.75 530.07 382.922 530.102 383.086 530.141 cv
385.207 530.141 li
385.293 530.145 385.359 530.187 385.402 530.27 cv
385.445 530.359 385.465 530.488 385.469 530.66 cv
cp
383.461 532.508 mo
383.457 532.035 383.324 531.664 383.066 531.391 cv
382.801 531.125 382.43 530.988 381.949 530.988 cv
381.695 530.988 381.477 531.031 381.297 531.113 cv
381.109 531.199 380.957 531.312 380.836 531.457 cv
380.715 531.605 380.625 531.773 380.566 531.961 cv
380.504 532.148 380.473 532.348 380.477 532.555 cv
380.473 533.02 380.605 533.383 380.867 533.648 cv
381.129 533.914 381.496 534.047 381.973 534.043 cv
382.223 534.047 382.441 534.008 382.633 533.922 cv
382.816 533.844 382.973 533.73 383.098 533.59 cv
383.219 533.449 383.309 533.285 383.371 533.094 cv
383.426 532.91 383.457 532.715 383.461 532.508 cv
cp
384.105 538.066 mo
384.102 537.762 383.977 537.531 383.734 537.367 cv
383.484 537.207 383.152 537.117 382.734 537.105 cv
380.918 537.043 li
380.75 537.176 380.613 537.301 380.512 537.414 cv
380.402 537.531 380.32 537.641 380.258 537.75 cv
380.195 537.855 380.152 537.961 380.129 538.066 cv
380.105 538.168 380.094 538.273 380.094 538.383 cv
380.094 538.719 380.262 538.973 380.605 539.152 cv
380.945 539.324 381.426 539.414 382.043 539.414 cv
382.43 539.414 382.754 539.375 383.02 539.301 cv
383.277 539.223 383.488 539.121 383.652 539 cv
383.809 538.871 383.926 538.73 384 538.57 cv
384.066 538.41 384.102 538.242 384.105 538.066 cv
cp
f
393.031 533.547 mo
393.027 533.75 392.977 533.891 392.879 533.977 cv
392.773 534.062 392.656 534.105 392.531 534.105 cv
387.914 534.105 li
387.91 534.496 387.949 534.848 388.031 535.16 cv
388.105 535.473 388.238 535.742 388.422 535.961 cv
388.602 536.187 388.836 536.359 389.133 536.477 cv
389.422 536.602 389.781 536.66 390.207 536.656 cv
390.539 536.66 390.836 536.633 391.098 536.574 cv
391.359 536.523 391.586 536.461 391.777 536.391 cv
391.965 536.324 392.121 536.266 392.246 536.207 cv
392.367 536.156 392.461 536.129 392.523 536.125 cv
392.559 536.129 392.59 536.137 392.621 536.152 cv
392.648 536.172 392.672 536.199 392.691 536.234 cv
392.703 536.273 392.715 536.324 392.727 536.387 cv
392.73 536.453 392.734 536.531 392.738 536.625 cv
392.734 536.695 392.73 536.754 392.73 536.801 cv
392.723 536.848 392.719 536.891 392.711 536.93 cv
392.703 536.969 392.688 537.004 392.672 537.035 cv
392.648 537.066 392.625 537.098 392.602 537.125 cv
392.57 537.156 392.488 537.203 392.348 537.266 cv
392.207 537.332 392.023 537.395 391.801 537.457 cv
391.574 537.52 391.316 537.574 391.023 537.625 cv
390.73 537.672 390.418 537.695 390.086 537.699 cv
389.508 537.695 389 537.617 388.57 537.457 cv
388.133 537.297 387.77 537.059 387.477 536.742 cv
387.176 536.426 386.953 536.031 386.805 535.551 cv
386.656 535.074 386.582 534.516 386.582 533.879 cv
386.582 533.281 386.656 532.742 386.813 532.258 cv
386.965 531.781 387.191 531.371 387.488 531.035 cv
387.781 530.699 388.137 530.441 388.551 530.262 cv
388.965 530.082 389.43 529.992 389.945 529.992 cv
390.496 529.992 390.965 530.082 391.352 530.258 cv
391.738 530.437 392.055 530.676 392.309 530.973 cv
392.555 531.273 392.738 531.625 392.855 532.023 cv
392.969 532.43 393.027 532.859 393.031 533.312 cv
cp
391.738 533.164 mo
391.754 532.488 391.602 531.957 391.285 531.574 cv
390.969 531.191 390.5 531 389.883 530.996 cv
389.559 531 389.277 531.059 389.039 531.176 cv
388.797 531.297 388.598 531.457 388.438 531.652 cv
388.273 531.852 388.148 532.082 388.063 532.344 cv
387.973 532.605 387.922 532.879 387.914 533.164 cv
cp
f
399.395 535.445 mo
399.391 535.809 399.324 536.129 399.195 536.406 cv
399.063 536.687 398.875 536.922 398.633 537.113 cv
398.387 537.309 398.094 537.453 397.758 537.551 cv
397.418 537.648 397.047 537.695 396.645 537.699 cv
396.391 537.695 396.152 537.676 395.93 537.641 cv
395.703 537.598 395.504 537.551 395.324 537.492 cv
395.145 537.434 394.992 537.371 394.867 537.305 cv
394.742 537.242 394.648 537.184 394.594 537.129 cv
394.535 537.078 394.496 537.008 394.473 536.91 cv
394.445 536.82 394.434 536.691 394.434 536.531 cv
394.434 536.434 394.438 536.352 394.449 536.281 cv
394.457 536.215 394.469 536.16 394.488 536.117 cv
394.5 536.078 394.523 536.047 394.551 536.027 cv
394.578 536.012 394.609 536.004 394.648 536 cv
394.703 536.004 394.789 536.039 394.902 536.105 cv
395.012 536.18 395.148 536.258 395.316 536.336 cv
395.477 536.422 395.668 536.496 395.895 536.566 cv
396.113 536.637 396.371 536.672 396.668 536.672 cv
396.883 536.672 397.082 536.648 397.262 536.602 cv
397.438 536.555 397.59 536.488 397.719 536.395 cv
397.848 536.309 397.949 536.191 398.02 536.047 cv
398.09 535.91 398.125 535.742 398.125 535.547 cv
398.125 535.352 398.074 535.187 397.973 535.051 cv
397.871 534.918 397.734 534.797 397.57 534.691 cv
397.402 534.59 397.219 534.5 397.012 534.414 cv
396.801 534.336 396.586 534.25 396.367 534.16 cv
396.148 534.074 395.934 533.973 395.723 533.859 cv
395.512 533.75 395.32 533.617 395.156 533.453 cv
394.984 533.297 394.852 533.102 394.754 532.875 cv
394.648 532.652 394.598 532.387 394.602 532.074 cv
394.598 531.801 394.652 531.535 394.762 531.281 cv
394.867 531.031 395.027 530.812 395.242 530.621 cv
395.453 530.434 395.719 530.281 396.039 530.164 cv
396.359 530.051 396.73 529.992 397.16 529.992 cv
397.344 529.992 397.531 530.008 397.719 530.039 cv
397.902 530.07 398.07 530.109 398.227 530.156 cv
398.375 530.203 398.504 530.254 398.613 530.309 cv
398.715 530.363 398.797 530.414 398.855 530.453 cv
398.906 530.5 398.941 530.535 398.965 530.562 cv
398.98 530.594 398.996 530.629 399.004 530.664 cv
399.012 530.707 399.02 530.754 399.027 530.809 cv
399.035 530.867 399.039 530.937 399.039 531.02 cv
399.039 531.109 399.035 531.187 399.027 531.25 cv
399.02 531.32 399.004 531.371 398.988 531.41 cv
398.965 531.453 398.945 531.484 398.922 531.5 cv
398.895 531.52 398.863 531.527 398.836 531.527 cv
398.785 531.527 398.719 531.5 398.633 531.441 cv
398.543 531.387 398.43 531.324 398.289 531.258 cv
398.148 531.195 397.98 531.137 397.793 531.074 cv
397.602 531.02 397.387 530.988 397.145 530.988 cv
396.922 530.988 396.73 531.016 396.566 531.062 cv
396.398 531.117 396.262 531.187 396.156 531.273 cv
396.051 531.367 395.969 531.473 395.918 531.598 cv
395.859 531.723 395.832 531.859 395.836 532.004 cv
395.832 532.207 395.883 532.375 395.988 532.512 cv
396.09 532.652 396.227 532.773 396.395 532.875 cv
396.559 532.98 396.75 533.074 396.965 533.156 cv
397.176 533.242 397.391 533.328 397.613 533.414 cv
397.832 533.504 398.051 533.605 398.27 533.711 cv
398.484 533.82 398.676 533.949 398.844 534.105 cv
399.008 534.262 399.141 534.449 399.242 534.668 cv
399.34 534.887 399.391 535.148 399.395 535.445 cv
cp
f
145.434 14.496 mo
145.43 15.027 145.332 15.492 145.137 15.891 cv
144.938 16.293 144.672 16.629 144.336 16.895 cv
143.996 17.164 143.598 17.363 143.148 17.496 cv
142.695 17.629 142.215 17.695 141.703 17.699 cv
141.352 17.695 141.027 17.668 140.73 17.613 cv
140.43 17.555 140.168 17.488 139.941 17.406 cv
139.711 17.328 139.52 17.242 139.367 17.152 cv
139.215 17.066 139.105 16.988 139.039 16.918 cv
138.969 16.852 138.918 16.754 138.895 16.629 cv
138.863 16.504 138.852 16.32 138.852 16.078 cv
138.852 15.918 138.855 15.785 138.867 15.672 cv
138.875 15.566 138.891 15.477 138.918 15.406 cv
138.938 15.34 138.969 15.293 139.012 15.262 cv
139.047 15.238 139.094 15.223 139.145 15.219 cv
139.215 15.223 139.316 15.266 139.453 15.348 cv
139.582 15.437 139.754 15.531 139.965 15.633 cv
140.172 15.738 140.418 15.836 140.707 15.918 cv
140.992 16.008 141.328 16.051 141.711 16.047 cv
141.961 16.051 142.184 16.02 142.379 15.957 cv
142.574 15.898 142.742 15.812 142.883 15.703 cv
143.02 15.594 143.125 15.461 143.199 15.301 cv
143.27 15.141 143.305 14.961 143.309 14.762 cv
143.305 14.535 143.242 14.34 143.121 14.172 cv
142.992 14.012 142.828 13.867 142.633 13.738 cv
142.43 13.613 142.203 13.492 141.949 13.379 cv
141.695 13.27 141.434 13.152 141.164 13.023 cv
140.891 12.902 140.629 12.758 140.375 12.598 cv
140.121 12.441 139.895 12.254 139.695 12.031 cv
139.492 11.812 139.328 11.551 139.207 11.246 cv
139.082 10.945 139.02 10.586 139.023 10.164 cv
139.02 9.68402 139.109 9.258 139.289 8.89099 cv
139.465 8.52698 139.707 8.22302 140.016 7.97699 cv
140.316 7.73798 140.676 7.55902 141.09 7.43701 cv
141.504 7.32001 141.941 7.26202 142.402 7.258 cv
142.641 7.26202 142.879 7.27698 143.121 7.31201 cv
143.359 7.35199 143.582 7.40198 143.789 7.461 cv
143.996 7.52301 144.18 7.59399 144.344 7.66803 cv
144.5 7.75 144.609 7.81201 144.664 7.86298 cv
144.715 7.91803 144.75 7.96503 144.77 7.99597 cv
144.785 8.03497 144.801 8.08197 144.816 8.14099 cv
144.828 8.203 144.836 8.27698 144.844 8.367 cv
144.848 8.461 144.852 8.57397 144.852 8.70697 cv
144.852 8.85901 144.848 8.98798 144.84 9.09003 cv
144.832 9.19501 144.816 9.28101 144.801 9.34399 cv
144.777 9.414 144.754 9.461 144.723 9.492 cv
144.688 9.52301 144.641 9.539 144.586 9.539 cv
144.527 9.539 144.438 9.50403 144.313 9.42999 cv
144.188 9.35901 144.031 9.28101 143.852 9.19098 cv
143.668 9.10901 143.461 9.03101 143.223 8.961 cv
142.98 8.89502 142.715 8.85901 142.434 8.85498 cv
142.207 8.85901 142.016 8.88702 141.852 8.93701 cv
141.684 8.992 141.543 9.06598 141.434 9.15997 cv
141.32 9.258 141.238 9.375 141.184 9.508 cv
141.129 9.64801 141.102 9.789 141.102 9.93701 cv
141.102 10.164 141.16 10.359 141.285 10.52 cv
141.402 10.684 141.566 10.828 141.777 10.953 cv
141.98 11.082 142.215 11.203 142.473 11.312 cv
142.73 11.43 142.996 11.547 143.27 11.668 cv
143.539 11.797 143.801 11.937 144.063 12.094 cv
144.32 12.25 144.555 12.441 144.758 12.66 cv
144.961 12.887 145.121 13.145 145.246 13.441 cv
145.367 13.738 145.43 14.09 145.434 14.496 cv
cp
f
152.152 16.148 mo
152.148 16.285 152.145 16.398 152.141 16.488 cv
152.129 16.582 152.121 16.66 152.109 16.719 cv
152.094 16.781 152.078 16.832 152.063 16.867 cv
152.043 16.91 152 16.957 151.941 17.016 cv
151.875 17.078 151.77 17.152 151.621 17.234 cv
151.469 17.324 151.297 17.402 151.105 17.465 cv
150.914 17.535 150.707 17.586 150.48 17.629 cv
150.254 17.668 150.02 17.687 149.785 17.691 cv
149.246 17.687 148.773 17.609 148.359 17.441 cv
147.945 17.277 147.598 17.031 147.32 16.707 cv
147.035 16.383 146.824 15.988 146.684 15.52 cv
146.543 15.055 146.473 14.516 146.473 13.91 cv
146.473 13.215 146.559 12.617 146.73 12.109 cv
146.902 11.605 147.145 11.184 147.461 10.852 cv
147.77 10.52 148.137 10.273 148.566 10.109 cv
148.988 9.94897 149.457 9.867 149.969 9.867 cv
150.176 9.867 150.379 9.88702 150.582 9.922 cv
150.777 9.961 150.965 10.012 151.141 10.07 cv
151.313 10.137 151.469 10.207 151.609 10.281 cv
151.746 10.363 151.844 10.43 151.902 10.484 cv
151.957 10.543 151.996 10.59 152.023 10.625 cv
152.043 10.668 152.063 10.719 152.078 10.777 cv
152.09 10.844 152.102 10.922 152.109 11.008 cv
152.117 11.102 152.121 11.211 152.121 11.34 cv
152.121 11.645 152.094 11.855 152.043 11.977 cv
151.988 12.098 151.922 12.16 151.84 12.156 cv
151.75 12.16 151.656 12.125 151.559 12.051 cv
151.457 11.98 151.34 11.898 151.207 11.809 cv
151.074 11.723 150.914 11.641 150.727 11.566 cv
150.539 11.496 150.313 11.461 150.055 11.457 cv
149.543 11.461 149.156 11.656 148.887 12.047 cv
148.613 12.437 148.477 13.012 148.48 13.77 cv
148.477 14.145 148.512 14.477 148.582 14.762 cv
148.648 15.047 148.746 15.285 148.883 15.477 cv
149.012 15.672 149.18 15.816 149.383 15.91 cv
149.582 16.008 149.813 16.055 150.078 16.055 cv
150.344 16.055 150.578 16.016 150.777 15.934 cv
150.969 15.855 151.137 15.766 151.285 15.664 cv
151.426 15.566 151.551 15.477 151.652 15.395 cv
151.75 15.316 151.832 15.277 151.902 15.273 cv
151.945 15.277 151.984 15.289 152.02 15.312 cv
152.047 15.34 152.07 15.387 152.094 15.457 cv
152.109 15.527 152.125 15.617 152.137 15.727 cv
152.145 15.836 152.148 15.977 152.152 16.148 cv
cp
f
159.422 17.277 mo
159.418 17.355 159.391 17.41 159.344 17.449 cv
159.289 17.492 159.207 17.52 159.098 17.539 cv
158.98 17.555 158.816 17.566 158.602 17.566 cv
158.363 17.566 158.191 17.555 158.09 17.539 cv
157.98 17.52 157.906 17.492 157.867 17.449 cv
157.82 17.41 157.801 17.355 157.801 17.277 cv
157.801 16.727 li
157.512 17.035 157.184 17.273 156.82 17.441 cv
156.453 17.613 156.047 17.695 155.602 17.699 cv
155.23 17.695 154.891 17.648 154.582 17.555 cv
154.273 17.461 154.008 17.32 153.781 17.125 cv
153.555 16.937 153.379 16.703 153.254 16.422 cv
153.129 16.145 153.066 15.816 153.07 15.437 cv
153.066 15.039 153.145 14.687 153.305 14.383 cv
153.461 14.086 153.699 13.84 154.016 13.645 cv
154.328 13.453 154.719 13.309 155.188 13.211 cv
155.656 13.121 156.199 13.074 156.816 13.07 cv
157.496 13.07 li
157.496 12.648 li
157.496 12.434 157.473 12.242 157.43 12.078 cv
157.383 11.918 157.309 11.781 157.211 11.668 cv
157.105 11.562 156.973 11.48 156.805 11.426 cv
156.633 11.375 156.422 11.352 156.18 11.348 cv
155.848 11.352 155.555 11.387 155.301 11.457 cv
155.039 11.531 154.813 11.613 154.617 11.699 cv
154.418 11.793 154.254 11.871 154.125 11.941 cv
153.988 12.016 153.879 12.055 153.801 12.051 cv
153.738 12.055 153.688 12.035 153.648 11.996 cv
153.602 11.961 153.566 11.91 153.539 11.84 cv
153.508 11.777 153.484 11.691 153.473 11.59 cv
153.453 11.492 153.445 11.383 153.449 11.262 cv
153.445 11.102 153.461 10.977 153.488 10.879 cv
153.512 10.789 153.559 10.703 153.637 10.625 cv
153.707 10.551 153.836 10.469 154.02 10.379 cv
154.199 10.289 154.41 10.203 154.656 10.125 cv
154.898 10.047 155.168 9.98401 155.457 9.93402 cv
155.746 9.88702 156.043 9.86298 156.352 9.85901 cv
156.895 9.86298 157.359 9.914 157.746 10.02 cv
158.133 10.129 158.453 10.293 158.703 10.512 cv
158.953 10.73 159.133 11.016 159.25 11.363 cv
159.359 11.715 159.418 12.129 159.422 12.602 cv
cp
157.496 14.301 mo
156.746 14.301 li
156.43 14.305 156.16 14.328 155.938 14.371 cv
155.711 14.422 155.527 14.492 155.391 14.582 cv
155.246 14.68 155.145 14.793 155.082 14.922 cv
155.016 15.059 154.98 15.207 154.984 15.375 cv
154.98 15.668 155.074 15.898 155.262 16.062 cv
155.445 16.23 155.703 16.312 156.031 16.312 cv
156.305 16.312 156.555 16.242 156.789 16.102 cv
157.016 15.961 157.254 15.758 157.496 15.484 cv
cp
f
163.348 17.254 mo
163.344 17.309 163.328 17.352 163.301 17.391 cv
163.266 17.43 163.211 17.465 163.141 17.488 cv
163.063 17.516 162.965 17.531 162.84 17.547 cv
162.715 17.559 162.555 17.566 162.367 17.566 cv
162.172 17.566 162.016 17.559 161.891 17.547 cv
161.766 17.531 161.664 17.516 161.59 17.488 cv
161.512 17.465 161.457 17.43 161.43 17.391 cv
161.395 17.352 161.379 17.309 161.383 17.254 cv
161.383 7.008 li
161.379 6.95697 161.395 6.90997 161.43 6.867 cv
161.457 6.828 161.512 6.79303 161.59 6.76202 cv
161.664 6.73401 161.766 6.71503 161.891 6.69501 cv
162.016 6.68402 162.172 6.67603 162.367 6.672 cv
162.555 6.67603 162.715 6.68402 162.84 6.69501 cv
162.965 6.71503 163.063 6.73401 163.141 6.76202 cv
163.211 6.79303 163.266 6.828 163.301 6.867 cv
163.328 6.90997 163.344 6.95697 163.348 7.008 cv
cp
f
167.32 17.254 mo
167.316 17.309 167.301 17.352 167.273 17.391 cv
167.238 17.43 167.184 17.465 167.113 17.488 cv
167.035 17.516 166.938 17.531 166.813 17.547 cv
166.688 17.559 166.527 17.566 166.34 17.566 cv
166.145 17.566 165.988 17.559 165.863 17.547 cv
165.738 17.531 165.637 17.516 165.563 17.488 cv
165.484 17.465 165.43 17.43 165.402 17.391 cv
165.367 17.352 165.352 17.309 165.355 17.254 cv
165.355 10.32 li
165.352 10.27 165.367 10.223 165.402 10.184 cv
165.43 10.145 165.484 10.113 165.563 10.082 cv
165.637 10.059 165.738 10.035 165.863 10.016 cv
165.988 10.004 166.145 9.99597 166.34 9.992 cv
166.527 9.99597 166.688 10.004 166.813 10.016 cv
166.938 10.035 167.035 10.059 167.113 10.082 cv
167.184 10.113 167.238 10.145 167.273 10.184 cv
167.301 10.223 167.316 10.27 167.32 10.32 cv
cp
167.469 7.94897 mo
167.469 8.34802 167.387 8.62097 167.227 8.77002 cv
167.063 8.922 166.766 8.99597 166.332 8.992 cv
165.887 8.99597 165.586 8.922 165.438 8.77698 cv
165.281 8.633 165.207 8.37097 165.207 7.98798 cv
165.207 7.59399 165.285 7.32001 165.445 7.16803 cv
165.602 7.01599 165.902 6.93701 166.348 6.93701 cv
166.781 6.93701 167.078 7.01202 167.234 7.15997 cv
167.391 7.30902 167.469 7.57397 167.469 7.94897 cv
cp
f
175.922 17.254 mo
175.918 17.309 175.902 17.352 175.875 17.391 cv
175.84 17.43 175.789 17.465 175.719 17.488 cv
175.645 17.516 175.543 17.531 175.418 17.547 cv
175.289 17.559 175.133 17.566 174.949 17.566 cv
174.754 17.566 174.594 17.559 174.469 17.547 cv
174.34 17.531 174.238 17.516 174.168 17.488 cv
174.09 17.465 174.039 17.43 174.012 17.391 cv
173.977 17.352 173.961 17.309 173.965 17.254 cv
173.965 13.289 li
173.961 12.953 173.938 12.687 173.891 12.492 cv
173.84 12.301 173.766 12.137 173.676 12 cv
173.582 11.863 173.465 11.758 173.316 11.68 cv
173.168 11.605 172.992 11.566 172.797 11.566 cv
172.543 11.566 172.293 11.66 172.039 11.84 cv
171.785 12.023 171.52 12.285 171.246 12.633 cv
171.246 17.254 li
171.242 17.309 171.227 17.352 171.199 17.391 cv
171.164 17.43 171.109 17.465 171.039 17.488 cv
170.961 17.516 170.863 17.531 170.738 17.547 cv
170.613 17.559 170.453 17.566 170.266 17.566 cv
170.07 17.566 169.914 17.559 169.789 17.547 cv
169.664 17.531 169.563 17.516 169.488 17.488 cv
169.41 17.465 169.355 17.43 169.328 17.391 cv
169.293 17.352 169.277 17.309 169.281 17.254 cv
169.281 10.305 li
169.277 10.258 169.293 10.211 169.32 10.168 cv
169.344 10.133 169.391 10.102 169.461 10.07 cv
169.527 10.047 169.613 10.027 169.723 10.012 cv
169.828 10.004 169.961 9.99597 170.125 9.992 cv
170.289 9.99597 170.426 10.004 170.535 10.012 cv
170.641 10.027 170.727 10.047 170.789 10.07 cv
170.848 10.102 170.891 10.133 170.918 10.168 cv
170.941 10.211 170.953 10.258 170.957 10.305 cv
170.957 11.105 li
171.34 10.695 171.73 10.383 172.129 10.172 cv
172.523 9.96503 172.941 9.86298 173.375 9.85901 cv
173.844 9.86298 174.242 9.94098 174.57 10.094 cv
174.895 10.254 175.156 10.465 175.355 10.73 cv
175.555 11 175.699 11.312 175.789 11.668 cv
175.875 12.027 175.918 12.457 175.922 12.961 cv
cp
f
184.117 10.785 mo
184.113 11.039 184.086 11.223 184.031 11.34 cv
183.973 11.461 183.902 11.52 183.824 11.52 cv
183.004 11.52 li
183.117 11.645 183.199 11.789 183.25 11.945 cv
183.297 12.105 183.32 12.27 183.324 12.437 cv
183.32 12.848 183.254 13.207 183.121 13.52 cv
182.984 13.836 182.789 14.102 182.539 14.312 cv
182.285 14.531 181.984 14.695 181.629 14.805 cv
181.27 14.922 180.871 14.977 180.441 14.973 cv
180.215 14.977 180.004 14.949 179.801 14.891 cv
179.598 14.84 179.441 14.777 179.332 14.699 cv
179.27 14.77 179.211 14.848 179.164 14.941 cv
179.113 15.035 179.09 15.141 179.094 15.25 cv
179.09 15.406 179.156 15.527 179.289 15.621 cv
179.418 15.719 179.605 15.773 179.848 15.781 cv
181.539 15.844 li
181.934 15.859 182.285 15.918 182.594 16.012 cv
182.902 16.113 183.164 16.246 183.375 16.418 cv
183.586 16.594 183.746 16.805 183.855 17.047 cv
183.965 17.293 184.02 17.566 184.023 17.879 cv
184.02 18.215 183.945 18.539 183.797 18.848 cv
183.648 19.148 183.422 19.41 183.121 19.637 cv
182.816 19.855 182.438 20.035 181.984 20.168 cv
181.527 20.297 180.996 20.359 180.395 20.363 cv
179.797 20.359 179.293 20.312 178.875 20.223 cv
178.457 20.125 178.113 19.996 177.848 19.832 cv
177.578 19.664 177.383 19.465 177.266 19.238 cv
177.141 19.004 177.082 18.75 177.082 18.477 cv
177.082 18.305 177.102 18.145 177.148 17.988 cv
177.188 17.832 177.254 17.68 177.344 17.539 cv
177.426 17.395 177.531 17.262 177.656 17.129 cv
177.781 17 177.922 16.875 178.086 16.754 cv
177.859 16.641 177.688 16.48 177.566 16.27 cv
177.445 16.066 177.387 15.84 177.387 15.594 cv
177.387 15.293 177.453 15.016 177.594 14.758 cv
177.73 14.508 177.914 14.277 178.141 14.074 cv
177.957 13.895 177.813 13.68 177.703 13.422 cv
177.594 13.172 177.539 12.852 177.543 12.469 cv
177.539 12.066 177.609 11.707 177.754 11.383 cv
177.895 11.066 178.094 10.797 178.352 10.574 cv
178.605 10.355 178.91 10.184 179.262 10.066 cv
179.613 9.94897 180.004 9.89099 180.434 9.89099 cv
180.652 9.89099 180.859 9.90601 181.059 9.92999 cv
181.258 9.961 181.445 9.99597 181.617 10.039 cv
183.824 10.039 li
183.906 10.043 183.977 10.102 184.035 10.211 cv
184.086 10.328 184.113 10.52 184.117 10.785 cv
cp
181.602 12.43 mo
181.598 12.059 181.496 11.77 181.289 11.559 cv
181.078 11.355 180.785 11.25 180.41 11.246 cv
180.215 11.25 180.043 11.281 179.902 11.344 cv
179.754 11.41 179.633 11.5 179.539 11.609 cv
179.438 11.723 179.367 11.852 179.324 12 cv
179.273 12.148 179.25 12.305 179.254 12.461 cv
179.25 12.82 179.355 13.098 179.566 13.301 cv
179.773 13.508 180.063 13.613 180.434 13.609 cv
180.629 13.613 180.797 13.582 180.945 13.516 cv
181.086 13.457 181.207 13.371 181.309 13.258 cv
181.402 13.152 181.477 13.023 181.527 12.879 cv
181.574 12.738 181.598 12.59 181.602 12.43 cv
cp
182.063 17.98 mo
182.063 17.742 181.969 17.566 181.781 17.441 cv
181.594 17.32 181.336 17.25 181.008 17.238 cv
179.613 17.199 li
179.477 17.301 179.367 17.395 179.289 17.484 cv
179.207 17.574 179.145 17.66 179.098 17.746 cv
179.047 17.828 179.012 17.91 179 17.988 cv
178.98 18.066 178.973 18.145 178.977 18.23 cv
178.973 18.484 179.105 18.684 179.367 18.82 cv
179.629 18.953 180 19.02 180.48 19.023 cv
180.773 19.02 181.02 18.988 181.227 18.934 cv
181.426 18.871 181.59 18.793 181.719 18.695 cv
181.84 18.594 181.93 18.484 181.984 18.363 cv
182.035 18.242 182.063 18.113 182.063 17.98 cv
cp
f
190.313 15.289 mo
190.309 15.687 190.234 16.035 190.09 16.336 cv
189.941 16.637 189.734 16.891 189.465 17.09 cv
189.191 17.297 188.871 17.445 188.504 17.547 cv
188.137 17.645 187.734 17.695 187.305 17.699 cv
187.039 17.695 186.793 17.676 186.559 17.641 cv
186.324 17.598 186.113 17.551 185.926 17.492 cv
185.738 17.434 185.582 17.371 185.457 17.309 cv
185.332 17.246 185.238 17.187 185.184 17.133 cv
185.125 17.078 185.082 16.996 185.055 16.879 cv
185.02 16.766 185.004 16.59 185.008 16.359 cv
185.004 16.211 185.012 16.09 185.023 15.996 cv
185.031 15.906 185.047 15.836 185.07 15.777 cv
185.09 15.727 185.113 15.687 185.148 15.668 cv
185.176 15.652 185.215 15.645 185.262 15.641 cv
185.316 15.645 185.402 15.676 185.516 15.738 cv
185.625 15.805 185.762 15.879 185.934 15.953 cv
186.098 16.035 186.293 16.105 186.512 16.172 cv
186.73 16.242 186.98 16.277 187.266 16.273 cv
187.441 16.277 187.598 16.258 187.738 16.219 cv
187.871 16.184 187.992 16.133 188.098 16.062 cv
188.195 15.996 188.27 15.91 188.324 15.805 cv
188.371 15.703 188.398 15.582 188.402 15.445 cv
188.398 15.289 188.352 15.156 188.258 15.047 cv
188.164 14.937 188.035 14.84 187.879 14.754 cv
187.715 14.672 187.535 14.594 187.34 14.52 cv
187.137 14.449 186.934 14.371 186.723 14.277 cv
186.512 14.191 186.305 14.09 186.109 13.973 cv
185.906 13.863 185.727 13.723 185.57 13.555 cv
185.406 13.391 185.281 13.191 185.188 12.953 cv
185.094 12.723 185.047 12.441 185.047 12.109 cv
185.047 11.781 185.109 11.477 185.238 11.195 cv
185.367 10.922 185.555 10.684 185.801 10.484 cv
186.043 10.289 186.34 10.137 186.691 10.023 cv
187.039 9.91803 187.434 9.86298 187.875 9.85901 cv
188.09 9.86298 188.301 9.87903 188.508 9.90601 cv
188.711 9.94098 188.898 9.97998 189.066 10.023 cv
189.23 10.074 189.371 10.125 189.488 10.176 cv
189.602 10.234 189.684 10.281 189.734 10.316 cv
189.781 10.359 189.816 10.398 189.84 10.434 cv
189.859 10.477 189.871 10.523 189.883 10.574 cv
189.891 10.629 189.902 10.695 189.91 10.773 cv
189.918 10.859 189.922 10.957 189.922 11.074 cv
189.922 11.215 189.918 11.332 189.91 11.418 cv
189.902 11.512 189.887 11.582 189.871 11.629 cv
189.852 11.684 189.828 11.719 189.801 11.734 cv
189.766 11.758 189.73 11.766 189.691 11.762 cv
189.641 11.766 189.566 11.738 189.473 11.68 cv
189.371 11.629 189.25 11.57 189.102 11.504 cv
188.953 11.445 188.781 11.387 188.586 11.328 cv
188.391 11.277 188.168 11.25 187.922 11.246 cv
187.742 11.25 187.59 11.27 187.461 11.301 cv
187.328 11.34 187.219 11.391 187.141 11.457 cv
187.055 11.527 186.992 11.605 186.953 11.695 cv
186.906 11.789 186.887 11.887 186.891 11.988 cv
186.887 12.148 186.938 12.285 187.039 12.391 cv
187.137 12.504 187.266 12.598 187.43 12.68 cv
187.59 12.766 187.773 12.844 187.98 12.914 cv
188.184 12.988 188.391 13.07 188.602 13.152 cv
188.809 13.242 189.016 13.34 189.227 13.453 cv
189.43 13.566 189.613 13.707 189.773 13.871 cv
189.934 14.039 190.063 14.238 190.164 14.469 cv
190.258 14.703 190.309 14.977 190.313 15.289 cv
cp
f
202.422 13.707 mo
202.418 14.305 202.34 14.848 202.188 15.332 cv
202.027 15.824 201.793 16.242 201.477 16.594 cv
201.16 16.945 200.762 17.219 200.285 17.41 cv
199.805 17.602 199.246 17.695 198.609 17.699 cv
197.988 17.695 197.449 17.613 196.996 17.441 cv
196.535 17.273 196.156 17.023 195.859 16.695 cv
195.555 16.371 195.332 15.969 195.188 15.488 cv
195.043 15.012 194.973 14.465 194.973 13.848 cv
194.973 13.258 195.051 12.719 195.207 12.227 cv
195.363 11.738 195.602 11.316 195.922 10.965 cv
196.238 10.617 196.633 10.344 197.109 10.148 cv
197.582 9.95697 198.141 9.86298 198.781 9.85901 cv
199.406 9.86298 199.945 9.94501 200.402 10.113 cv
200.859 10.285 201.238 10.535 201.535 10.859 cv
201.832 11.187 202.055 11.59 202.203 12.066 cv
202.348 12.547 202.418 13.094 202.422 13.707 cv
cp
200.402 13.785 mo
200.398 13.449 200.371 13.133 200.32 12.84 cv
200.262 12.555 200.168 12.305 200.043 12.09 cv
199.91 11.879 199.738 11.711 199.527 11.59 cv
199.309 11.473 199.039 11.414 198.711 11.41 cv
198.422 11.414 198.168 11.469 197.949 11.57 cv
197.73 11.68 197.551 11.836 197.41 12.039 cv
197.27 12.246 197.164 12.492 197.094 12.777 cv
197.023 13.07 196.988 13.398 196.988 13.762 cv
196.988 14.109 197.016 14.426 197.074 14.711 cv
197.129 15.004 197.223 15.254 197.352 15.465 cv
197.477 15.68 197.648 15.844 197.871 15.957 cv
198.086 16.078 198.355 16.137 198.68 16.133 cv
198.973 16.137 199.23 16.082 199.453 15.973 cv
199.668 15.867 199.848 15.715 199.988 15.508 cv
200.129 15.309 200.23 15.062 200.301 14.773 cv
200.363 14.488 200.398 14.16 200.402 13.785 cv
cp
f
208.172 7.65198 mo
208.168 7.80499 208.164 7.92603 208.156 8.01599 cv
208.145 8.10901 208.129 8.17999 208.109 8.22699 cv
208.086 8.27698 208.063 8.31201 208.039 8.328 cv
208.012 8.34802 207.984 8.35498 207.953 8.35498 cv
207.914 8.35498 207.871 8.34802 207.832 8.328 cv
207.785 8.31201 207.73 8.29303 207.668 8.27002 cv
207.598 8.25 207.523 8.22998 207.438 8.211 cv
207.348 8.19501 207.242 8.18701 207.125 8.18402 cv
206.98 8.18701 206.859 8.20697 206.762 8.25 cv
206.66 8.297 206.578 8.367 206.512 8.461 cv
206.441 8.55902 206.391 8.68402 206.363 8.836 cv
206.328 8.98798 206.313 9.17603 206.316 9.39801 cv
206.316 10.039 li
207.586 10.039 li
207.629 10.043 207.672 10.055 207.715 10.078 cv
207.75 10.105 207.785 10.148 207.813 10.207 cv
207.836 10.27 207.855 10.352 207.871 10.453 cv
207.883 10.555 207.887 10.684 207.891 10.832 cv
207.887 11.121 207.863 11.324 207.813 11.445 cv
207.758 11.57 207.68 11.633 207.586 11.629 cv
206.316 11.629 li
206.316 17.254 li
206.313 17.309 206.297 17.352 206.27 17.391 cv
206.234 17.43 206.184 17.465 206.113 17.488 cv
206.039 17.516 205.938 17.531 205.809 17.547 cv
205.676 17.559 205.516 17.566 205.332 17.566 cv
205.145 17.566 204.988 17.559 204.863 17.547 cv
204.734 17.531 204.633 17.516 204.559 17.488 cv
204.48 17.465 204.43 17.43 204.402 17.391 cv
204.371 17.352 204.355 17.309 204.359 17.254 cv
204.359 11.629 li
203.488 11.629 li
203.387 11.633 203.313 11.57 203.266 11.445 cv
203.215 11.324 203.188 11.121 203.191 10.832 cv
203.188 10.684 203.195 10.555 203.211 10.453 cv
203.223 10.352 203.242 10.27 203.266 10.207 cv
203.289 10.148 203.32 10.105 203.359 10.078 cv
203.398 10.055 203.441 10.043 203.496 10.039 cv
204.359 10.039 li
204.359 9.453 li
204.355 8.98401 204.402 8.57001 204.5 8.211 cv
204.59 7.85498 204.738 7.55902 204.941 7.32397 cv
205.141 7.09003 205.395 6.914 205.703 6.789 cv
206.012 6.672 206.375 6.60901 206.801 6.60901 cv
206.996 6.60901 207.188 6.62903 207.375 6.65997 cv
207.555 6.69897 207.699 6.73401 207.805 6.77002 cv
207.906 6.81201 207.977 6.84802 208.016 6.87903 cv
208.051 6.914 208.082 6.96503 208.105 7.02698 cv
208.129 7.09399 208.145 7.17603 208.156 7.27698 cv
208.164 7.37903 208.168 7.50403 208.172 7.65198 cv
cp
f
216.746 16.57 mo
216.746 16.797 216.73 16.973 216.703 17.094 cv
216.672 17.219 216.633 17.305 216.59 17.352 cv
216.539 17.402 216.473 17.445 216.383 17.484 cv
216.289 17.523 216.18 17.555 216.063 17.586 cv
215.938 17.609 215.805 17.633 215.664 17.652 cv
215.52 17.664 215.379 17.672 215.234 17.676 cv
214.844 17.672 214.504 17.621 214.219 17.527 cv
213.934 17.426 213.699 17.277 213.512 17.07 cv
213.324 16.867 213.184 16.609 213.098 16.297 cv
213.004 15.988 212.961 15.617 212.965 15.187 cv
212.965 11.629 li
212.133 11.629 li
212.031 11.633 211.957 11.57 211.906 11.445 cv
211.852 11.324 211.824 11.121 211.828 10.832 cv
211.824 10.684 211.832 10.555 211.848 10.453 cv
211.859 10.352 211.879 10.27 211.906 10.207 cv
211.93 10.148 211.961 10.105 212.004 10.078 cv
212.039 10.055 212.086 10.043 212.141 10.039 cv
212.965 10.039 li
212.965 8.48798 li
212.961 8.44098 212.977 8.39502 213.008 8.34802 cv
213.035 8.30902 213.086 8.27301 213.164 8.242 cv
213.238 8.21899 213.34 8.19501 213.469 8.17999 cv
213.594 8.16803 213.75 8.164 213.941 8.15997 cv
214.129 8.164 214.289 8.16803 214.418 8.17999 cv
214.543 8.19501 214.645 8.21899 214.719 8.242 cv
214.789 8.27301 214.84 8.30902 214.875 8.34802 cv
214.902 8.39502 214.918 8.44098 214.922 8.48798 cv
214.922 10.039 li
216.434 10.039 li
216.484 10.043 216.531 10.055 216.57 10.078 cv
216.609 10.105 216.641 10.148 216.668 10.207 cv
216.691 10.27 216.711 10.352 216.727 10.453 cv
216.738 10.555 216.746 10.684 216.746 10.832 cv
216.746 11.121 216.719 11.324 216.668 11.445 cv
216.613 11.57 216.539 11.633 216.441 11.629 cv
214.922 11.629 li
214.922 14.895 li
214.918 15.273 214.977 15.559 215.102 15.746 cv
215.219 15.937 215.434 16.031 215.738 16.031 cv
215.84 16.031 215.934 16.023 216.02 16.004 cv
216.102 15.988 216.176 15.969 216.242 15.941 cv
216.305 15.922 216.359 15.898 216.406 15.879 cv
216.449 15.863 216.488 15.855 216.527 15.852 cv
216.555 15.855 216.586 15.863 216.617 15.879 cv
216.645 15.898 216.664 15.937 216.684 15.988 cv
216.695 16.047 216.711 16.121 216.727 16.211 cv
216.738 16.309 216.746 16.426 216.746 16.57 cv
cp
f
224.809 17.254 mo
224.805 17.309 224.789 17.352 224.762 17.391 cv
224.727 17.43 224.676 17.465 224.605 17.488 cv
224.531 17.516 224.43 17.531 224.305 17.547 cv
224.176 17.559 224.02 17.566 223.836 17.566 cv
223.641 17.566 223.48 17.559 223.355 17.547 cv
223.227 17.531 223.125 17.516 223.055 17.488 cv
222.977 17.465 222.926 17.43 222.898 17.391 cv
222.863 17.352 222.848 17.309 222.852 17.254 cv
222.852 13.289 li
222.848 12.953 222.824 12.687 222.777 12.492 cv
222.727 12.301 222.652 12.137 222.563 12 cv
222.469 11.863 222.352 11.758 222.203 11.68 cv
222.055 11.605 221.879 11.566 221.684 11.566 cv
221.43 11.566 221.18 11.66 220.926 11.84 cv
220.672 12.023 220.406 12.285 220.133 12.633 cv
220.133 17.254 li
220.129 17.309 220.113 17.352 220.086 17.391 cv
220.051 17.43 219.996 17.465 219.926 17.488 cv
219.848 17.516 219.75 17.531 219.625 17.547 cv
219.5 17.559 219.34 17.566 219.152 17.566 cv
218.957 17.566 218.801 17.559 218.676 17.547 cv
218.551 17.531 218.449 17.516 218.375 17.488 cv
218.297 17.465 218.242 17.43 218.215 17.391 cv
218.18 17.352 218.164 17.309 218.168 17.254 cv
218.168 7.008 li
218.164 6.95697 218.18 6.90997 218.215 6.867 cv
218.242 6.828 218.297 6.79303 218.375 6.76202 cv
218.449 6.73401 218.551 6.71503 218.676 6.69501 cv
218.801 6.68402 218.957 6.67603 219.152 6.672 cv
219.34 6.67603 219.5 6.68402 219.625 6.69501 cv
219.75 6.71503 219.848 6.73401 219.926 6.76202 cv
219.996 6.79303 220.051 6.828 220.086 6.867 cv
220.113 6.90997 220.129 6.95697 220.133 7.008 cv
220.133 10.848 li
220.469 10.52 220.813 10.273 221.164 10.105 cv
221.512 9.94501 221.879 9.86298 222.262 9.85901 cv
222.73 9.86298 223.129 9.94098 223.457 10.094 cv
223.781 10.254 224.043 10.465 224.242 10.734 cv
224.441 11.004 224.586 11.32 224.676 11.68 cv
224.762 12.043 224.805 12.48 224.809 12.992 cv
cp
f
233.094 13.578 mo
233.09 13.816 233.039 13.992 232.934 14.105 cv
232.824 14.223 232.676 14.281 232.496 14.277 cv
228.262 14.277 li
228.258 14.578 228.293 14.848 228.367 15.086 cv
228.434 15.328 228.547 15.531 228.703 15.699 cv
228.855 15.871 229.051 16 229.293 16.086 cv
229.531 16.176 229.82 16.219 230.164 16.219 cv
230.504 16.219 230.805 16.195 231.066 16.145 cv
231.324 16.098 231.551 16.043 231.742 15.98 cv
231.93 15.922 232.086 15.867 232.215 15.816 cv
232.336 15.77 232.438 15.746 232.52 15.742 cv
232.563 15.746 232.602 15.754 232.637 15.77 cv
232.664 15.789 232.691 15.82 232.711 15.867 cv
232.73 15.914 232.742 15.98 232.754 16.066 cv
232.758 16.152 232.762 16.262 232.766 16.391 cv
232.762 16.508 232.762 16.605 232.758 16.684 cv
232.75 16.766 232.742 16.832 232.734 16.887 cv
232.723 16.945 232.707 16.996 232.688 17.031 cv
232.668 17.074 232.641 17.109 232.609 17.145 cv
232.574 17.184 232.48 17.234 232.332 17.293 cv
232.176 17.359 231.984 17.422 231.754 17.477 cv
231.516 17.539 231.246 17.586 230.949 17.633 cv
230.645 17.672 230.324 17.695 229.984 17.699 cv
229.363 17.695 228.82 17.621 228.359 17.465 cv
227.891 17.312 227.504 17.074 227.195 16.758 cv
226.879 16.441 226.645 16.043 226.496 15.559 cv
226.34 15.078 226.266 14.512 226.27 13.855 cv
226.266 13.242 226.344 12.684 226.508 12.187 cv
226.664 11.691 226.898 11.273 227.211 10.926 cv
227.516 10.582 227.891 10.316 228.328 10.133 cv
228.766 9.953 229.258 9.86298 229.813 9.85901 cv
230.391 9.86298 230.891 9.94897 231.305 10.117 cv
231.719 10.293 232.055 10.531 232.32 10.832 cv
232.582 11.137 232.777 11.496 232.906 11.91 cv
233.027 12.328 233.09 12.777 233.094 13.266 cv
cp
231.191 13.016 mo
231.203 12.465 231.094 12.031 230.859 11.719 cv
230.625 11.406 230.258 11.25 229.766 11.246 cv
229.516 11.25 229.301 11.297 229.117 11.387 cv
228.93 11.484 228.777 11.609 228.656 11.766 cv
228.531 11.926 228.438 12.113 228.375 12.328 cv
228.309 12.543 228.27 12.773 228.262 13.016 cv
cp
f
244.199 8.27698 mo
244.195 8.43701 244.191 8.56598 244.18 8.672 cv
244.164 8.78101 244.141 8.867 244.117 8.92603 cv
244.086 8.98798 244.055 9.03497 244.02 9.06201 cv
243.98 9.09802 243.938 9.11298 243.895 9.10901 cv
240.598 9.10901 li
240.598 11.824 li
243.691 11.824 li
243.734 11.824 243.777 11.84 243.816 11.863 cv
243.852 11.895 243.883 11.937 243.914 11.996 cv
243.941 12.059 243.961 12.141 243.977 12.242 cv
243.984 12.348 243.992 12.477 243.996 12.633 cv
243.992 12.789 243.984 12.922 243.977 13.023 cv
243.961 13.133 243.941 13.219 243.914 13.281 cv
243.883 13.352 243.852 13.398 243.816 13.426 cv
243.777 13.457 243.734 13.473 243.691 13.469 cv
240.598 13.469 li
240.598 17.223 li
240.594 17.281 240.578 17.332 240.551 17.371 cv
240.516 17.418 240.461 17.453 240.383 17.477 cv
240.301 17.508 240.195 17.527 240.066 17.543 cv
239.934 17.559 239.766 17.566 239.57 17.566 cv
239.367 17.566 239.203 17.559 239.074 17.543 cv
238.938 17.527 238.832 17.508 238.758 17.477 cv
238.676 17.453 238.621 17.418 238.59 17.371 cv
238.555 17.332 238.535 17.281 238.539 17.223 cv
238.539 8.08197 li
238.535 7.85498 238.594 7.69098 238.715 7.586 cv
238.828 7.48798 238.973 7.43701 239.148 7.43402 cv
243.895 7.43402 li
243.938 7.43701 243.98 7.44897 244.02 7.47699 cv
244.055 7.508 244.086 7.55499 244.117 7.617 cv
244.141 7.68402 244.164 7.77301 244.18 7.87903 cv
244.191 7.992 244.195 8.125 244.199 8.27698 cv
cp
f
247.711 17.254 mo
247.707 17.309 247.691 17.352 247.664 17.391 cv
247.629 17.43 247.574 17.465 247.504 17.488 cv
247.426 17.516 247.328 17.531 247.203 17.547 cv
247.078 17.559 246.918 17.566 246.73 17.566 cv
246.535 17.566 246.379 17.559 246.254 17.547 cv
246.129 17.531 246.027 17.516 245.953 17.488 cv
245.875 17.465 245.82 17.43 245.793 17.391 cv
245.758 17.352 245.742 17.309 245.746 17.254 cv
245.746 10.32 li
245.742 10.27 245.758 10.223 245.793 10.184 cv
245.82 10.145 245.875 10.113 245.953 10.082 cv
246.027 10.059 246.129 10.035 246.254 10.016 cv
246.379 10.004 246.535 9.99597 246.73 9.992 cv
246.918 9.99597 247.078 10.004 247.203 10.016 cv
247.328 10.035 247.426 10.059 247.504 10.082 cv
247.574 10.113 247.629 10.145 247.664 10.184 cv
247.691 10.223 247.707 10.27 247.711 10.32 cv
cp
247.859 7.94897 mo
247.859 8.34802 247.777 8.62097 247.617 8.77002 cv
247.453 8.922 247.156 8.99597 246.723 8.992 cv
246.277 8.99597 245.977 8.922 245.828 8.77698 cv
245.672 8.633 245.598 8.37097 245.598 7.98798 cv
245.598 7.59399 245.676 7.32001 245.836 7.16803 cv
245.992 7.01599 246.293 6.93701 246.738 6.93701 cv
247.172 6.93701 247.469 7.01202 247.625 7.15997 cv
247.781 7.30902 247.859 7.57397 247.859 7.94897 cv
cp
f
251.637 17.254 mo
251.633 17.309 251.617 17.352 251.59 17.391 cv
251.555 17.43 251.5 17.465 251.43 17.488 cv
251.352 17.516 251.254 17.531 251.129 17.547 cv
251.004 17.559 250.844 17.566 250.656 17.566 cv
250.461 17.566 250.305 17.559 250.18 17.547 cv
250.055 17.531 249.953 17.516 249.879 17.488 cv
249.801 17.465 249.746 17.43 249.719 17.391 cv
249.684 17.352 249.668 17.309 249.672 17.254 cv
249.672 7.008 li
249.668 6.95697 249.684 6.90997 249.719 6.867 cv
249.746 6.828 249.801 6.79303 249.879 6.76202 cv
249.953 6.73401 250.055 6.71503 250.18 6.69501 cv
250.305 6.68402 250.461 6.67603 250.656 6.672 cv
250.844 6.67603 251.004 6.68402 251.129 6.69501 cv
251.254 6.71503 251.352 6.73401 251.43 6.76202 cv
251.5 6.79303 251.555 6.828 251.59 6.867 cv
251.617 6.90997 251.633 6.95697 251.637 7.008 cv
cp
f
257.762 16.57 mo
257.762 16.797 257.746 16.973 257.719 17.094 cv
257.688 17.219 257.648 17.305 257.605 17.352 cv
257.555 17.402 257.488 17.445 257.398 17.484 cv
257.305 17.523 257.195 17.555 257.078 17.586 cv
256.953 17.609 256.82 17.633 256.68 17.652 cv
256.535 17.664 256.395 17.672 256.25 17.676 cv
255.859 17.672 255.52 17.621 255.234 17.527 cv
254.949 17.426 254.715 17.277 254.527 17.07 cv
254.34 16.867 254.199 16.609 254.113 16.297 cv
254.02 15.988 253.977 15.617 253.98 15.187 cv
253.98 11.629 li
253.148 11.629 li
253.047 11.633 252.973 11.57 252.922 11.445 cv
252.867 11.324 252.84 11.121 252.844 10.832 cv
252.84 10.684 252.848 10.555 252.863 10.453 cv
252.875 10.352 252.895 10.27 252.922 10.207 cv
252.945 10.148 252.977 10.105 253.02 10.078 cv
253.055 10.055 253.102 10.043 253.156 10.039 cv
253.98 10.039 li
253.98 8.48798 li
253.977 8.44098 253.992 8.39502 254.023 8.34802 cv
254.051 8.30902 254.102 8.27301 254.18 8.242 cv
254.254 8.21899 254.355 8.19501 254.484 8.17999 cv
254.609 8.16803 254.766 8.164 254.957 8.15997 cv
255.145 8.164 255.305 8.16803 255.434 8.17999 cv
255.559 8.19501 255.66 8.21899 255.734 8.242 cv
255.805 8.27301 255.855 8.30902 255.891 8.34802 cv
255.918 8.39502 255.934 8.44098 255.938 8.48798 cv
255.938 10.039 li
257.449 10.039 li
257.5 10.043 257.547 10.055 257.586 10.078 cv
257.625 10.105 257.656 10.148 257.684 10.207 cv
257.707 10.27 257.727 10.352 257.742 10.453 cv
257.754 10.555 257.762 10.684 257.762 10.832 cv
257.762 11.121 257.734 11.324 257.684 11.445 cv
257.629 11.57 257.555 11.633 257.457 11.629 cv
255.938 11.629 li
255.938 14.895 li
255.934 15.273 255.992 15.559 256.117 15.746 cv
256.234 15.937 256.449 16.031 256.754 16.031 cv
256.855 16.031 256.949 16.023 257.035 16.004 cv
257.117 15.988 257.191 15.969 257.258 15.941 cv
257.32 15.922 257.375 15.898 257.422 15.879 cv
257.465 15.863 257.504 15.855 257.543 15.852 cv
257.57 15.855 257.602 15.863 257.633 15.879 cv
257.66 15.898 257.68 15.937 257.699 15.988 cv
257.711 16.047 257.727 16.121 257.742 16.211 cv
257.754 16.309 257.762 16.426 257.762 16.57 cv
cp
f
265.352 13.578 mo
265.348 13.816 265.297 13.992 265.191 14.105 cv
265.082 14.223 264.934 14.281 264.754 14.277 cv
260.52 14.277 li
260.516 14.578 260.551 14.848 260.625 15.086 cv
260.691 15.328 260.805 15.531 260.961 15.699 cv
261.113 15.871 261.309 16 261.551 16.086 cv
261.789 16.176 262.078 16.219 262.422 16.219 cv
262.762 16.219 263.063 16.195 263.324 16.145 cv
263.582 16.098 263.809 16.043 264 15.98 cv
264.188 15.922 264.344 15.867 264.473 15.816 cv
264.594 15.77 264.695 15.746 264.777 15.742 cv
264.82 15.746 264.859 15.754 264.895 15.77 cv
264.922 15.789 264.949 15.82 264.969 15.867 cv
264.988 15.914 265 15.98 265.012 16.066 cv
265.016 16.152 265.02 16.262 265.023 16.391 cv
265.02 16.508 265.02 16.605 265.016 16.684 cv
265.008 16.766 265 16.832 264.992 16.887 cv
264.98 16.945 264.965 16.996 264.945 17.031 cv
264.926 17.074 264.898 17.109 264.867 17.145 cv
264.832 17.184 264.738 17.234 264.59 17.293 cv
264.434 17.359 264.242 17.422 264.012 17.477 cv
263.773 17.539 263.504 17.586 263.207 17.633 cv
262.902 17.672 262.582 17.695 262.242 17.699 cv
261.621 17.695 261.078 17.621 260.617 17.465 cv
260.148 17.312 259.762 17.074 259.453 16.758 cv
259.137 16.441 258.902 16.043 258.754 15.559 cv
258.598 15.078 258.523 14.512 258.527 13.855 cv
258.523 13.242 258.602 12.684 258.766 12.187 cv
258.922 11.691 259.156 11.273 259.469 10.926 cv
259.773 10.582 260.148 10.316 260.586 10.133 cv
261.023 9.953 261.516 9.86298 262.07 9.85901 cv
262.648 9.86298 263.148 9.94897 263.563 10.117 cv
263.977 10.293 264.313 10.531 264.578 10.832 cv
264.84 11.137 265.035 11.496 265.164 11.91 cv
265.285 12.328 265.348 12.777 265.352 13.266 cv
cp
263.449 13.016 mo
263.461 12.465 263.352 12.031 263.117 11.719 cv
262.883 11.406 262.516 11.25 262.023 11.246 cv
261.773 11.25 261.559 11.297 261.375 11.387 cv
261.188 11.484 261.035 11.609 260.914 11.766 cv
260.789 11.926 260.695 12.113 260.633 12.328 cv
260.566 12.543 260.527 12.773 260.52 13.016 cv
cp
f
271.426 10.949 mo
271.426 11.141 271.418 11.293 271.41 11.41 cv
271.395 11.531 271.379 11.625 271.363 11.691 cv
271.34 11.762 271.313 11.809 271.281 11.832 cv
271.242 11.859 271.199 11.871 271.152 11.871 cv
271.105 11.871 271.059 11.863 271.012 11.844 cv
270.957 11.828 270.898 11.809 270.836 11.785 cv
270.766 11.766 270.695 11.746 270.621 11.727 cv
270.539 11.711 270.453 11.703 270.363 11.699 cv
270.25 11.703 270.141 11.723 270.035 11.766 cv
269.926 11.812 269.813 11.883 269.699 11.973 cv
269.578 12.066 269.457 12.191 269.332 12.344 cv
269.203 12.504 269.066 12.695 268.922 12.922 cv
268.922 17.254 li
268.918 17.309 268.902 17.352 268.875 17.391 cv
268.84 17.43 268.785 17.465 268.715 17.488 cv
268.637 17.516 268.539 17.531 268.414 17.547 cv
268.289 17.559 268.129 17.566 267.941 17.566 cv
267.746 17.566 267.59 17.559 267.465 17.547 cv
267.34 17.531 267.238 17.516 267.164 17.488 cv
267.086 17.465 267.031 17.43 267.004 17.391 cv
266.969 17.352 266.953 17.309 266.957 17.254 cv
266.957 10.305 li
266.953 10.258 266.969 10.211 266.996 10.168 cv
267.02 10.133 267.066 10.102 267.137 10.07 cv
267.203 10.047 267.289 10.027 267.398 10.012 cv
267.504 10.004 267.637 9.99597 267.801 9.992 cv
267.965 9.99597 268.102 10.004 268.211 10.012 cv
268.316 10.027 268.402 10.047 268.465 10.07 cv
268.523 10.102 268.566 10.133 268.594 10.168 cv
268.617 10.211 268.629 10.258 268.633 10.305 cv
268.633 11.168 li
268.813 10.91 268.984 10.699 269.148 10.527 cv
269.305 10.363 269.461 10.227 269.609 10.125 cv
269.754 10.027 269.898 9.961 270.043 9.91803 cv
270.188 9.883 270.332 9.86298 270.48 9.85901 cv
270.547 9.86298 270.621 9.867 270.699 9.87097 cv
270.777 9.883 270.855 9.89502 270.941 9.90997 cv
271.02 9.92999 271.094 9.94897 271.16 9.97302 cv
271.219 9.99597 271.266 10.023 271.297 10.047 cv
271.324 10.078 271.344 10.105 271.359 10.133 cv
271.371 10.168 271.383 10.211 271.395 10.262 cv
271.402 10.32 271.41 10.402 271.418 10.508 cv
271.422 10.617 271.426 10.766 271.426 10.949 cv
cp
f
274.586 17.254 mo
274.582 17.309 274.566 17.352 274.539 17.391 cv
274.504 17.43 274.449 17.465 274.379 17.488 cv
274.301 17.516 274.203 17.531 274.078 17.547 cv
273.953 17.559 273.793 17.566 273.605 17.566 cv
273.41 17.566 273.254 17.559 273.129 17.547 cv
273.004 17.531 272.902 17.516 272.828 17.488 cv
272.75 17.465 272.695 17.43 272.668 17.391 cv
272.633 17.352 272.617 17.309 272.621 17.254 cv
272.621 10.32 li
272.617 10.27 272.633 10.223 272.668 10.184 cv
272.695 10.145 272.75 10.113 272.828 10.082 cv
272.902 10.059 273.004 10.035 273.129 10.016 cv
273.254 10.004 273.41 9.99597 273.605 9.992 cv
273.793 9.99597 273.953 10.004 274.078 10.016 cv
274.203 10.035 274.301 10.059 274.379 10.082 cv
274.449 10.113 274.504 10.145 274.539 10.184 cv
274.566 10.223 274.582 10.27 274.586 10.32 cv
cp
274.734 7.94897 mo
274.734 8.34802 274.652 8.62097 274.492 8.77002 cv
274.328 8.922 274.031 8.99597 273.598 8.992 cv
273.152 8.99597 272.852 8.922 272.703 8.77698 cv
272.547 8.633 272.473 8.37097 272.473 7.98798 cv
272.473 7.59399 272.551 7.32001 272.711 7.16803 cv
272.867 7.01599 273.168 6.93701 273.613 6.93701 cv
274.047 6.93701 274.344 7.01202 274.5 7.15997 cv
274.656 7.30902 274.734 7.57397 274.734 7.94897 cv
cp
f
283.188 17.254 mo
283.184 17.309 283.168 17.352 283.141 17.391 cv
283.105 17.43 283.055 17.465 282.984 17.488 cv
282.91 17.516 282.809 17.531 282.684 17.547 cv
282.555 17.559 282.398 17.566 282.215 17.566 cv
282.02 17.566 281.859 17.559 281.734 17.547 cv
281.605 17.531 281.504 17.516 281.434 17.488 cv
281.355 17.465 281.305 17.43 281.277 17.391 cv
281.242 17.352 281.227 17.309 281.23 17.254 cv
281.23 13.289 li
281.227 12.953 281.203 12.687 281.156 12.492 cv
281.105 12.301 281.031 12.137 280.941 12 cv
280.848 11.863 280.73 11.758 280.582 11.68 cv
280.434 11.605 280.258 11.566 280.063 11.566 cv
279.809 11.566 279.559 11.66 279.305 11.84 cv
279.051 12.023 278.785 12.285 278.512 12.633 cv
278.512 17.254 li
278.508 17.309 278.492 17.352 278.465 17.391 cv
278.43 17.43 278.375 17.465 278.305 17.488 cv
278.227 17.516 278.129 17.531 278.004 17.547 cv
277.879 17.559 277.719 17.566 277.531 17.566 cv
277.336 17.566 277.18 17.559 277.055 17.547 cv
276.93 17.531 276.828 17.516 276.754 17.488 cv
276.676 17.465 276.621 17.43 276.594 17.391 cv
276.559 17.352 276.543 17.309 276.547 17.254 cv
276.547 10.305 li
276.543 10.258 276.559 10.211 276.586 10.168 cv
276.609 10.133 276.656 10.102 276.727 10.07 cv
276.793 10.047 276.879 10.027 276.988 10.012 cv
277.094 10.004 277.227 9.99597 277.391 9.992 cv
277.555 9.99597 277.691 10.004 277.801 10.012 cv
277.906 10.027 277.992 10.047 278.055 10.07 cv
278.113 10.102 278.156 10.133 278.184 10.168 cv
278.207 10.211 278.219 10.258 278.223 10.305 cv
278.223 11.105 li
278.605 10.695 278.996 10.383 279.395 10.172 cv
279.789 9.96503 280.207 9.86298 280.641 9.85901 cv
281.109 9.86298 281.508 9.94098 281.836 10.094 cv
282.16 10.254 282.422 10.465 282.621 10.73 cv
282.82 11 282.965 11.312 283.055 11.668 cv
283.141 12.027 283.184 12.457 283.188 12.961 cv
cp
f
291.383 10.785 mo
291.379 11.039 291.352 11.223 291.297 11.34 cv
291.238 11.461 291.168 11.52 291.09 11.52 cv
290.27 11.52 li
290.383 11.645 290.465 11.789 290.516 11.945 cv
290.563 12.105 290.586 12.27 290.59 12.437 cv
290.586 12.848 290.52 13.207 290.387 13.52 cv
290.25 13.836 290.055 14.102 289.805 14.312 cv
289.551 14.531 289.25 14.695 288.895 14.805 cv
288.535 14.922 288.137 14.977 287.707 14.973 cv
287.48 14.977 287.27 14.949 287.066 14.891 cv
286.863 14.84 286.707 14.777 286.598 14.699 cv
286.535 14.77 286.477 14.848 286.43 14.941 cv
286.379 15.035 286.355 15.141 286.359 15.25 cv
286.355 15.406 286.422 15.527 286.555 15.621 cv
286.684 15.719 286.871 15.773 287.113 15.781 cv
288.805 15.844 li
289.199 15.859 289.551 15.918 289.859 16.012 cv
290.168 16.113 290.43 16.246 290.641 16.418 cv
290.852 16.594 291.012 16.805 291.121 17.047 cv
291.23 17.293 291.285 17.566 291.289 17.879 cv
291.285 18.215 291.211 18.539 291.063 18.848 cv
290.914 19.148 290.688 19.41 290.387 19.637 cv
290.082 19.855 289.703 20.035 289.25 20.168 cv
288.793 20.297 288.262 20.359 287.66 20.363 cv
287.063 20.359 286.559 20.312 286.141 20.223 cv
285.723 20.125 285.379 19.996 285.113 19.832 cv
284.844 19.664 284.648 19.465 284.531 19.238 cv
284.406 19.004 284.348 18.75 284.348 18.477 cv
284.348 18.305 284.367 18.145 284.414 17.988 cv
284.453 17.832 284.52 17.68 284.609 17.539 cv
284.691 17.395 284.797 17.262 284.922 17.129 cv
285.047 17 285.188 16.875 285.352 16.754 cv
285.125 16.641 284.953 16.48 284.832 16.27 cv
284.711 16.066 284.652 15.84 284.652 15.594 cv
284.652 15.293 284.719 15.016 284.859 14.758 cv
284.996 14.508 285.18 14.277 285.406 14.074 cv
285.223 13.895 285.078 13.68 284.969 13.422 cv
284.859 13.172 284.805 12.852 284.809 12.469 cv
284.805 12.066 284.875 11.707 285.02 11.383 cv
285.16 11.066 285.359 10.797 285.617 10.574 cv
285.871 10.355 286.176 10.184 286.527 10.066 cv
286.879 9.94897 287.27 9.89099 287.699 9.89099 cv
287.918 9.89099 288.125 9.90601 288.324 9.92999 cv
288.523 9.961 288.711 9.99597 288.883 10.039 cv
291.09 10.039 li
291.172 10.043 291.242 10.102 291.301 10.211 cv
291.352 10.328 291.379 10.52 291.383 10.785 cv
cp
288.867 12.43 mo
288.863 12.059 288.762 11.77 288.555 11.559 cv
288.344 11.355 288.051 11.25 287.676 11.246 cv
287.48 11.25 287.309 11.281 287.168 11.344 cv
287.02 11.41 286.898 11.5 286.805 11.609 cv
286.703 11.723 286.633 11.852 286.59 12 cv
286.539 12.148 286.516 12.305 286.52 12.461 cv
286.516 12.82 286.621 13.098 286.832 13.301 cv
287.039 13.508 287.328 13.613 287.699 13.609 cv
287.895 13.613 288.063 13.582 288.211 13.516 cv
288.352 13.457 288.473 13.371 288.574 13.258 cv
288.668 13.152 288.742 13.023 288.793 12.879 cv
288.84 12.738 288.863 12.59 288.867 12.43 cv
cp
289.328 17.98 mo
289.328 17.742 289.234 17.566 289.047 17.441 cv
288.859 17.32 288.602 17.25 288.273 17.238 cv
286.879 17.199 li
286.742 17.301 286.633 17.395 286.555 17.484 cv
286.473 17.574 286.41 17.66 286.363 17.746 cv
286.313 17.828 286.277 17.91 286.266 17.988 cv
286.246 18.066 286.238 18.145 286.242 18.23 cv
286.238 18.484 286.371 18.684 286.633 18.82 cv
286.895 18.953 287.266 19.02 287.746 19.023 cv
288.039 19.02 288.285 18.988 288.492 18.934 cv
288.691 18.871 288.855 18.793 288.984 18.695 cv
289.105 18.594 289.195 18.484 289.25 18.363 cv
289.301 18.242 289.328 18.113 289.328 17.98 cv
cp
f
303.293 8.27698 mo
303.289 8.43402 303.281 8.56201 303.273 8.664 cv
303.258 8.77301 303.238 8.85901 303.215 8.922 cv
303.184 8.98798 303.152 9.03497 303.117 9.06201 cv
303.074 9.09802 303.031 9.11298 302.988 9.10901 cv
300.465 9.10901 li
300.465 17.238 li
300.465 17.293 300.445 17.34 300.414 17.379 cv
300.375 17.422 300.32 17.457 300.246 17.48 cv
300.164 17.508 300.059 17.527 299.93 17.543 cv
299.793 17.559 299.629 17.566 299.434 17.566 cv
299.238 17.566 299.074 17.559 298.941 17.543 cv
298.809 17.527 298.703 17.508 298.625 17.48 cv
298.547 17.457 298.488 17.422 298.457 17.379 cv
298.418 17.34 298.402 17.293 298.406 17.238 cv
298.406 9.10901 li
295.883 9.10901 li
295.828 9.11298 295.781 9.09802 295.75 9.06201 cv
295.711 9.03497 295.68 8.98798 295.656 8.922 cv
295.625 8.85901 295.605 8.77301 295.598 8.664 cv
295.582 8.56201 295.578 8.43402 295.578 8.27698 cv
295.578 8.125 295.582 7.992 295.598 7.87903 cv
295.605 7.77301 295.625 7.68402 295.656 7.617 cv
295.68 7.55499 295.711 7.508 295.75 7.47699 cv
295.781 7.44897 295.828 7.43701 295.883 7.43402 cv
302.988 7.43402 li
303.031 7.43701 303.074 7.44897 303.117 7.47699 cv
303.152 7.508 303.184 7.55499 303.215 7.617 cv
303.238 7.68402 303.258 7.77301 303.273 7.87903 cv
303.281 7.992 303.289 8.125 303.293 8.27698 cv
cp
f
306.332 17.254 mo
306.328 17.309 306.313 17.352 306.285 17.391 cv
306.25 17.43 306.195 17.465 306.125 17.488 cv
306.047 17.516 305.949 17.531 305.824 17.547 cv
305.699 17.559 305.539 17.566 305.352 17.566 cv
305.156 17.566 305 17.559 304.875 17.547 cv
304.75 17.531 304.648 17.516 304.574 17.488 cv
304.496 17.465 304.441 17.43 304.414 17.391 cv
304.379 17.352 304.363 17.309 304.367 17.254 cv
304.367 10.32 li
304.363 10.27 304.379 10.223 304.414 10.184 cv
304.441 10.145 304.496 10.113 304.574 10.082 cv
304.648 10.059 304.75 10.035 304.875 10.016 cv
305 10.004 305.156 9.99597 305.352 9.992 cv
305.539 9.99597 305.699 10.004 305.824 10.016 cv
305.949 10.035 306.047 10.059 306.125 10.082 cv
306.195 10.113 306.25 10.145 306.285 10.184 cv
306.313 10.223 306.328 10.27 306.332 10.32 cv
cp
306.48 7.94897 mo
306.48 8.34802 306.398 8.62097 306.238 8.77002 cv
306.074 8.922 305.777 8.99597 305.344 8.992 cv
304.898 8.99597 304.598 8.922 304.449 8.77698 cv
304.293 8.633 304.219 8.37097 304.219 7.98798 cv
304.219 7.59399 304.297 7.32001 304.457 7.16803 cv
304.613 7.01599 304.914 6.93701 305.359 6.93701 cv
305.793 6.93701 306.09 7.01202 306.246 7.15997 cv
306.402 7.30902 306.48 7.57397 306.48 7.94897 cv
cp
f
319.383 17.254 mo
319.379 17.309 319.363 17.352 319.336 17.391 cv
319.301 17.43 319.25 17.465 319.18 17.488 cv
319.105 17.516 319.004 17.531 318.883 17.547 cv
318.758 17.559 318.602 17.566 318.41 17.566 cv
318.211 17.566 318.051 17.559 317.926 17.547 cv
317.801 17.531 317.699 17.516 317.625 17.488 cv
317.547 17.465 317.496 17.43 317.469 17.391 cv
317.441 17.352 317.426 17.309 317.43 17.254 cv
317.43 13.133 li
317.426 12.902 317.406 12.687 317.363 12.492 cv
317.316 12.301 317.246 12.137 317.16 12 cv
317.066 11.863 316.953 11.758 316.816 11.68 cv
316.676 11.605 316.512 11.566 316.32 11.566 cv
316.086 11.566 315.848 11.66 315.609 11.84 cv
315.371 12.023 315.113 12.285 314.832 12.633 cv
314.832 17.254 li
314.832 17.309 314.816 17.352 314.785 17.391 cv
314.754 17.43 314.699 17.465 314.625 17.488 cv
314.547 17.516 314.445 17.531 314.324 17.547 cv
314.199 17.559 314.047 17.566 313.859 17.566 cv
313.664 17.566 313.504 17.559 313.383 17.547 cv
313.254 17.531 313.152 17.516 313.082 17.488 cv
313.004 17.465 312.953 17.43 312.922 17.391 cv
312.891 17.352 312.875 17.309 312.875 17.254 cv
312.875 13.133 li
312.875 12.902 312.852 12.687 312.809 12.492 cv
312.766 12.301 312.699 12.137 312.613 12 cv
312.52 11.863 312.406 11.758 312.27 11.68 cv
312.125 11.605 311.961 11.566 311.777 11.566 cv
311.535 11.566 311.297 11.66 311.059 11.84 cv
310.82 12.023 310.563 12.285 310.289 12.633 cv
310.289 17.254 li
310.285 17.309 310.27 17.352 310.242 17.391 cv
310.207 17.43 310.152 17.465 310.082 17.488 cv
310.004 17.516 309.906 17.531 309.781 17.547 cv
309.656 17.559 309.496 17.566 309.309 17.566 cv
309.113 17.566 308.957 17.559 308.832 17.547 cv
308.707 17.531 308.605 17.516 308.531 17.488 cv
308.453 17.465 308.398 17.43 308.371 17.391 cv
308.336 17.352 308.32 17.309 308.324 17.254 cv
308.324 10.305 li
308.32 10.258 308.336 10.211 308.363 10.168 cv
308.387 10.133 308.434 10.102 308.504 10.07 cv
308.57 10.047 308.656 10.027 308.766 10.012 cv
308.871 10.004 309.004 9.99597 309.168 9.992 cv
309.332 9.99597 309.469 10.004 309.578 10.012 cv
309.684 10.027 309.77 10.047 309.832 10.07 cv
309.891 10.102 309.934 10.133 309.961 10.168 cv
309.984 10.211 309.996 10.258 310 10.305 cv
310 11.105 li
310.383 10.695 310.766 10.383 311.148 10.172 cv
311.527 9.96503 311.93 9.86298 312.348 9.85901 cv
312.633 9.86298 312.887 9.89099 313.117 9.94897 cv
313.344 10.012 313.551 10.098 313.73 10.207 cv
313.91 10.32 314.063 10.457 314.191 10.609 cv
314.32 10.766 314.43 10.937 314.52 11.129 cv
314.727 10.906 314.93 10.715 315.133 10.555 cv
315.328 10.395 315.527 10.262 315.723 10.16 cv
315.918 10.059 316.113 9.98401 316.309 9.93402 cv
316.504 9.88702 316.703 9.86298 316.906 9.85901 cv
317.367 9.86298 317.754 9.94098 318.074 10.094 cv
318.387 10.254 318.645 10.465 318.84 10.73 cv
319.035 11 319.172 11.312 319.258 11.668 cv
319.336 12.027 319.379 12.406 319.383 12.805 cv
cp
f
327.723 13.578 mo
327.719 13.816 327.668 13.992 327.563 14.105 cv
327.453 14.223 327.305 14.281 327.125 14.277 cv
322.891 14.277 li
322.887 14.578 322.922 14.848 322.996 15.086 cv
323.063 15.328 323.176 15.531 323.332 15.699 cv
323.484 15.871 323.68 16 323.922 16.086 cv
324.16 16.176 324.449 16.219 324.793 16.219 cv
325.133 16.219 325.434 16.195 325.695 16.145 cv
325.953 16.098 326.18 16.043 326.371 15.98 cv
326.559 15.922 326.715 15.867 326.844 15.816 cv
326.965 15.77 327.066 15.746 327.148 15.742 cv
327.191 15.746 327.23 15.754 327.266 15.77 cv
327.293 15.789 327.32 15.82 327.34 15.867 cv
327.359 15.914 327.371 15.98 327.383 16.066 cv
327.387 16.152 327.391 16.262 327.395 16.391 cv
327.391 16.508 327.391 16.605 327.387 16.684 cv
327.379 16.766 327.371 16.832 327.363 16.887 cv
327.352 16.945 327.336 16.996 327.316 17.031 cv
327.297 17.074 327.27 17.109 327.238 17.145 cv
327.203 17.184 327.109 17.234 326.961 17.293 cv
326.805 17.359 326.613 17.422 326.383 17.477 cv
326.145 17.539 325.875 17.586 325.578 17.633 cv
325.273 17.672 324.953 17.695 324.613 17.699 cv
323.992 17.695 323.449 17.621 322.988 17.465 cv
322.52 17.312 322.133 17.074 321.824 16.758 cv
321.508 16.441 321.273 16.043 321.125 15.559 cv
320.969 15.078 320.895 14.512 320.898 13.855 cv
320.895 13.242 320.973 12.684 321.137 12.187 cv
321.293 11.691 321.527 11.273 321.84 10.926 cv
322.145 10.582 322.52 10.316 322.957 10.133 cv
323.395 9.953 323.887 9.86298 324.441 9.85901 cv
325.02 9.86298 325.52 9.94897 325.934 10.117 cv
326.348 10.293 326.684 10.531 326.949 10.832 cv
327.211 11.137 327.406 11.496 327.535 11.91 cv
327.656 12.328 327.719 12.777 327.723 13.266 cv
cp
325.82 13.016 mo
325.832 12.465 325.723 12.031 325.488 11.719 cv
325.254 11.406 324.887 11.25 324.395 11.246 cv
324.145 11.25 323.93 11.297 323.746 11.387 cv
323.559 11.484 323.406 11.609 323.285 11.766 cv
323.16 11.926 323.066 12.113 323.004 12.328 cv
322.938 12.543 322.898 12.773 322.891 13.016 cv
cp
f
334.223 15.289 mo
334.219 15.687 334.145 16.035 334 16.336 cv
333.852 16.637 333.645 16.891 333.375 17.09 cv
333.102 17.297 332.781 17.445 332.414 17.547 cv
332.047 17.645 331.645 17.695 331.215 17.699 cv
330.949 17.695 330.703 17.676 330.469 17.641 cv
330.234 17.598 330.023 17.551 329.836 17.492 cv
329.648 17.434 329.492 17.371 329.367 17.309 cv
329.242 17.246 329.148 17.187 329.094 17.133 cv
329.035 17.078 328.992 16.996 328.965 16.879 cv
328.93 16.766 328.914 16.59 328.918 16.359 cv
328.914 16.211 328.922 16.09 328.934 15.996 cv
328.941 15.906 328.957 15.836 328.98 15.777 cv
329 15.727 329.023 15.687 329.059 15.668 cv
329.086 15.652 329.125 15.645 329.172 15.641 cv
329.227 15.645 329.313 15.676 329.426 15.738 cv
329.535 15.805 329.672 15.879 329.844 15.953 cv
330.008 16.035 330.203 16.105 330.422 16.172 cv
330.641 16.242 330.891 16.277 331.176 16.273 cv
331.352 16.277 331.508 16.258 331.648 16.219 cv
331.781 16.184 331.902 16.133 332.008 16.062 cv
332.105 15.996 332.18 15.91 332.234 15.805 cv
332.281 15.703 332.309 15.582 332.313 15.445 cv
332.309 15.289 332.262 15.156 332.168 15.047 cv
332.074 14.937 331.945 14.84 331.789 14.754 cv
331.625 14.672 331.445 14.594 331.25 14.52 cv
331.047 14.449 330.844 14.371 330.633 14.277 cv
330.422 14.191 330.215 14.09 330.02 13.973 cv
329.816 13.863 329.637 13.723 329.48 13.555 cv
329.316 13.391 329.191 13.191 329.098 12.953 cv
329.004 12.723 328.957 12.441 328.957 12.109 cv
328.957 11.781 329.02 11.477 329.148 11.195 cv
329.277 10.922 329.465 10.684 329.711 10.484 cv
329.953 10.289 330.25 10.137 330.602 10.023 cv
330.949 9.91803 331.344 9.86298 331.785 9.85901 cv
332 9.86298 332.211 9.87903 332.418 9.90601 cv
332.621 9.94098 332.809 9.97998 332.977 10.023 cv
333.141 10.074 333.281 10.125 333.398 10.176 cv
333.512 10.234 333.594 10.281 333.645 10.316 cv
333.691 10.359 333.727 10.398 333.75 10.434 cv
333.77 10.477 333.781 10.523 333.793 10.574 cv
333.801 10.629 333.813 10.695 333.82 10.773 cv
333.828 10.859 333.832 10.957 333.832 11.074 cv
333.832 11.215 333.828 11.332 333.82 11.418 cv
333.813 11.512 333.797 11.582 333.781 11.629 cv
333.762 11.684 333.738 11.719 333.711 11.734 cv
333.676 11.758 333.641 11.766 333.602 11.762 cv
333.551 11.766 333.477 11.738 333.383 11.68 cv
333.281 11.629 333.16 11.57 333.012 11.504 cv
332.863 11.445 332.691 11.387 332.496 11.328 cv
332.301 11.277 332.078 11.25 331.832 11.246 cv
331.652 11.25 331.5 11.27 331.371 11.301 cv
331.238 11.34 331.129 11.391 331.051 11.457 cv
330.965 11.527 330.902 11.605 330.863 11.695 cv
330.816 11.789 330.797 11.887 330.801 11.988 cv
330.797 12.148 330.848 12.285 330.949 12.391 cv
331.047 12.504 331.176 12.598 331.34 12.68 cv
331.5 12.766 331.684 12.844 331.891 12.914 cv
332.094 12.988 332.301 13.07 332.512 13.152 cv
332.719 13.242 332.926 13.34 333.137 13.453 cv
333.34 13.566 333.523 13.707 333.684 13.871 cv
333.844 14.039 333.973 14.238 334.074 14.469 cv
334.168 14.703 334.219 14.977 334.223 15.289 cv
cp
f
346.414 13.707 mo
346.41 14.305 346.332 14.848 346.18 15.332 cv
346.02 15.824 345.785 16.242 345.469 16.594 cv
345.152 16.945 344.754 17.219 344.277 17.41 cv
343.797 17.602 343.238 17.695 342.602 17.699 cv
341.98 17.695 341.441 17.613 340.988 17.441 cv
340.527 17.273 340.148 17.023 339.852 16.695 cv
339.547 16.371 339.324 15.969 339.18 15.488 cv
339.035 15.012 338.965 14.465 338.965 13.848 cv
338.965 13.258 339.043 12.719 339.199 12.227 cv
339.355 11.738 339.594 11.316 339.914 10.965 cv
340.23 10.617 340.625 10.344 341.102 10.148 cv
341.574 9.95697 342.133 9.86298 342.773 9.85901 cv
343.398 9.86298 343.938 9.94501 344.395 10.113 cv
344.852 10.285 345.23 10.535 345.527 10.859 cv
345.824 11.187 346.047 11.59 346.195 12.066 cv
346.34 12.547 346.41 13.094 346.414 13.707 cv
cp
344.395 13.785 mo
344.391 13.449 344.363 13.133 344.313 12.84 cv
344.254 12.555 344.16 12.305 344.035 12.09 cv
343.902 11.879 343.73 11.711 343.52 11.59 cv
343.301 11.473 343.031 11.414 342.703 11.41 cv
342.414 11.414 342.16 11.469 341.941 11.57 cv
341.723 11.68 341.543 11.836 341.402 12.039 cv
341.262 12.246 341.156 12.492 341.086 12.777 cv
341.016 13.07 340.98 13.398 340.98 13.762 cv
340.98 14.109 341.008 14.426 341.066 14.711 cv
341.121 15.004 341.215 15.254 341.344 15.465 cv
341.469 15.68 341.641 15.844 341.863 15.957 cv
342.078 16.078 342.348 16.137 342.672 16.133 cv
342.965 16.137 343.223 16.082 343.445 15.973 cv
343.66 15.867 343.84 15.715 343.98 15.508 cv
344.121 15.309 344.223 15.062 344.293 14.773 cv
344.355 14.488 344.391 14.16 344.395 13.785 cv
cp
f
352.195 7.65198 mo
352.191 7.80499 352.188 7.92603 352.18 8.01599 cv
352.168 8.10901 352.152 8.17999 352.133 8.22699 cv
352.109 8.27698 352.086 8.31201 352.063 8.328 cv
352.035 8.34802 352.008 8.35498 351.977 8.35498 cv
351.938 8.35498 351.895 8.34802 351.855 8.328 cv
351.809 8.31201 351.754 8.29303 351.691 8.27002 cv
351.621 8.25 351.547 8.22998 351.461 8.211 cv
351.371 8.19501 351.266 8.18701 351.148 8.18402 cv
351.004 8.18701 350.883 8.20697 350.785 8.25 cv
350.684 8.297 350.602 8.367 350.535 8.461 cv
350.465 8.55902 350.414 8.68402 350.387 8.836 cv
350.352 8.98798 350.336 9.17603 350.34 9.39801 cv
350.34 10.039 li
351.609 10.039 li
351.652 10.043 351.695 10.055 351.738 10.078 cv
351.773 10.105 351.809 10.148 351.836 10.207 cv
351.859 10.27 351.879 10.352 351.895 10.453 cv
351.906 10.555 351.91 10.684 351.914 10.832 cv
351.91 11.121 351.887 11.324 351.836 11.445 cv
351.781 11.57 351.703 11.633 351.609 11.629 cv
350.34 11.629 li
350.34 17.254 li
350.336 17.309 350.32 17.352 350.293 17.391 cv
350.258 17.43 350.207 17.465 350.137 17.488 cv
350.063 17.516 349.961 17.531 349.832 17.547 cv
349.699 17.559 349.539 17.566 349.355 17.566 cv
349.168 17.566 349.012 17.559 348.887 17.547 cv
348.758 17.531 348.656 17.516 348.582 17.488 cv
348.504 17.465 348.453 17.43 348.426 17.391 cv
348.395 17.352 348.379 17.309 348.383 17.254 cv
348.383 11.629 li
347.512 11.629 li
347.41 11.633 347.336 11.57 347.289 11.445 cv
347.238 11.324 347.211 11.121 347.215 10.832 cv
347.211 10.684 347.219 10.555 347.234 10.453 cv
347.246 10.352 347.266 10.27 347.289 10.207 cv
347.313 10.148 347.344 10.105 347.383 10.078 cv
347.422 10.055 347.465 10.043 347.52 10.039 cv
348.383 10.039 li
348.383 9.453 li
348.379 8.98401 348.426 8.57001 348.523 8.211 cv
348.613 7.85498 348.762 7.55902 348.965 7.32397 cv
349.164 7.09003 349.418 6.914 349.727 6.789 cv
350.035 6.672 350.398 6.60901 350.824 6.60901 cv
351.02 6.60901 351.211 6.62903 351.398 6.65997 cv
351.578 6.69897 351.723 6.73401 351.828 6.77002 cv
351.93 6.81201 352 6.84802 352.039 6.87903 cv
352.074 6.914 352.105 6.96503 352.129 7.02698 cv
352.152 7.09399 352.168 7.17603 352.18 7.27698 cv
352.188 7.37903 352.191 7.50403 352.195 7.65198 cv
cp
f
362.746 14.496 mo
362.742 15.027 362.645 15.492 362.449 15.891 cv
362.25 16.293 361.984 16.629 361.648 16.895 cv
361.309 17.164 360.91 17.363 360.461 17.496 cv
360.008 17.629 359.527 17.695 359.016 17.699 cv
358.664 17.695 358.34 17.668 358.043 17.613 cv
357.742 17.555 357.48 17.488 357.254 17.406 cv
357.023 17.328 356.832 17.242 356.68 17.152 cv
356.527 17.066 356.418 16.988 356.352 16.918 cv
356.281 16.852 356.23 16.754 356.207 16.629 cv
356.176 16.504 356.164 16.32 356.164 16.078 cv
356.164 15.918 356.168 15.785 356.18 15.672 cv
356.188 15.566 356.203 15.477 356.23 15.406 cv
356.25 15.34 356.281 15.293 356.324 15.262 cv
356.359 15.238 356.406 15.223 356.457 15.219 cv
356.527 15.223 356.629 15.266 356.766 15.348 cv
356.895 15.437 357.066 15.531 357.277 15.633 cv
357.484 15.738 357.73 15.836 358.02 15.918 cv
358.305 16.008 358.641 16.051 359.023 16.047 cv
359.273 16.051 359.496 16.02 359.691 15.957 cv
359.887 15.898 360.055 15.812 360.195 15.703 cv
360.332 15.594 360.438 15.461 360.512 15.301 cv
360.582 15.141 360.617 14.961 360.621 14.762 cv
360.617 14.535 360.555 14.34 360.434 14.172 cv
360.305 14.012 360.141 13.867 359.945 13.738 cv
359.742 13.613 359.516 13.492 359.262 13.379 cv
359.008 13.27 358.746 13.152 358.477 13.023 cv
358.203 12.902 357.941 12.758 357.688 12.598 cv
357.434 12.441 357.207 12.254 357.008 12.031 cv
356.805 11.812 356.641 11.551 356.52 11.246 cv
356.395 10.945 356.332 10.586 356.336 10.164 cv
356.332 9.68402 356.422 9.258 356.602 8.89099 cv
356.777 8.52698 357.02 8.22302 357.328 7.97699 cv
357.629 7.73798 357.988 7.55902 358.402 7.43701 cv
358.816 7.32001 359.254 7.26202 359.715 7.258 cv
359.953 7.26202 360.191 7.27698 360.434 7.31201 cv
360.672 7.35199 360.895 7.40198 361.102 7.461 cv
361.309 7.52301 361.492 7.59399 361.656 7.66803 cv
361.813 7.75 361.922 7.81201 361.977 7.86298 cv
362.027 7.91803 362.063 7.96503 362.082 7.99597 cv
362.098 8.03497 362.113 8.08197 362.129 8.14099 cv
362.141 8.203 362.148 8.27698 362.156 8.367 cv
362.16 8.461 362.164 8.57397 362.164 8.70697 cv
362.164 8.85901 362.16 8.98798 362.152 9.09003 cv
362.145 9.19501 362.129 9.28101 362.113 9.34399 cv
362.09 9.414 362.066 9.461 362.035 9.492 cv
362 9.52301 361.953 9.539 361.898 9.539 cv
361.84 9.539 361.75 9.50403 361.625 9.42999 cv
361.5 9.35901 361.344 9.28101 361.164 9.19098 cv
360.98 9.10901 360.773 9.03101 360.535 8.961 cv
360.293 8.89502 360.027 8.85901 359.746 8.85498 cv
359.52 8.85901 359.328 8.88702 359.164 8.93701 cv
358.996 8.992 358.855 9.06598 358.746 9.15997 cv
358.633 9.258 358.551 9.375 358.496 9.508 cv
358.441 9.64801 358.414 9.789 358.414 9.93701 cv
358.414 10.164 358.473 10.359 358.598 10.52 cv
358.715 10.684 358.879 10.828 359.09 10.953 cv
359.293 11.082 359.527 11.203 359.785 11.312 cv
360.043 11.43 360.309 11.547 360.582 11.668 cv
360.852 11.797 361.113 11.937 361.375 12.094 cv
361.633 12.25 361.867 12.441 362.07 12.66 cv
362.273 12.887 362.434 13.145 362.559 13.441 cv
362.68 13.738 362.742 14.09 362.746 14.496 cv
cp
f
370.793 17.254 mo
370.789 17.309 370.777 17.352 370.754 17.391 cv
370.727 17.43 370.68 17.465 370.617 17.488 cv
370.551 17.516 370.465 17.531 370.359 17.547 cv
370.254 17.559 370.121 17.566 369.961 17.566 cv
369.785 17.566 369.645 17.559 369.543 17.547 cv
369.434 17.531 369.352 17.516 369.289 17.488 cv
369.227 17.465 369.18 17.43 369.156 17.391 cv
369.125 17.352 369.113 17.309 369.117 17.254 cv
369.117 16.453 li
368.73 16.867 368.34 17.18 367.945 17.387 cv
367.543 17.594 367.133 17.695 366.711 17.699 cv
366.23 17.695 365.828 17.621 365.504 17.465 cv
365.18 17.312 364.918 17.098 364.719 16.828 cv
364.516 16.559 364.371 16.246 364.289 15.887 cv
364.199 15.531 364.156 15.09 364.16 14.559 cv
364.16 10.305 li
364.156 10.258 364.172 10.211 364.203 10.168 cv
364.23 10.133 364.281 10.102 364.359 10.07 cv
364.434 10.047 364.535 10.027 364.664 10.012 cv
364.789 10.004 364.945 9.99597 365.137 9.992 cv
365.324 9.99597 365.484 10.004 365.609 10.012 cv
365.734 10.027 365.832 10.047 365.91 10.07 cv
365.98 10.102 366.035 10.133 366.07 10.168 cv
366.098 10.211 366.113 10.258 366.117 10.305 cv
366.117 14.23 li
366.113 14.598 366.137 14.875 366.188 15.066 cv
366.23 15.258 366.301 15.422 366.402 15.559 cv
366.496 15.699 366.621 15.805 366.77 15.879 cv
366.918 15.957 367.09 15.996 367.285 15.992 cv
367.535 15.996 367.785 15.906 368.039 15.719 cv
368.289 15.539 368.559 15.273 368.844 14.926 cv
368.844 10.305 li
368.844 10.258 368.855 10.211 368.887 10.168 cv
368.91 10.133 368.965 10.102 369.043 10.07 cv
369.117 10.047 369.215 10.027 369.344 10.012 cv
369.465 10.004 369.625 9.99597 369.82 9.992 cv
370.012 9.99597 370.168 10.004 370.293 10.012 cv
370.414 10.027 370.516 10.047 370.59 10.07 cv
370.66 10.102 370.711 10.133 370.746 10.168 cv
370.773 10.211 370.789 10.258 370.793 10.305 cv
cp
f
379.723 13.684 mo
379.723 14.305 379.652 14.863 379.52 15.355 cv
379.379 15.852 379.184 16.27 378.934 16.617 cv
378.676 16.965 378.363 17.234 377.996 17.418 cv
377.621 17.605 377.199 17.695 376.73 17.699 cv
376.492 17.695 376.273 17.672 376.074 17.633 cv
375.867 17.586 375.676 17.52 375.492 17.418 cv
375.309 17.324 375.125 17.199 374.949 17.043 cv
374.766 16.895 374.582 16.711 374.398 16.5 cv
374.398 17.254 li
374.395 17.316 374.383 17.363 374.355 17.398 cv
374.324 17.441 374.277 17.473 374.215 17.496 cv
374.148 17.52 374.059 17.535 373.953 17.551 cv
373.844 17.559 373.715 17.566 373.559 17.566 cv
373.395 17.566 373.258 17.559 373.156 17.551 cv
373.047 17.535 372.961 17.52 372.898 17.496 cv
372.828 17.473 372.785 17.441 372.762 17.398 cv
372.734 17.363 372.719 17.316 372.723 17.254 cv
372.723 7.008 li
372.719 6.95697 372.734 6.90997 372.77 6.867 cv
372.797 6.828 372.852 6.79303 372.93 6.76202 cv
373.004 6.73401 373.105 6.71503 373.23 6.69501 cv
373.355 6.68402 373.512 6.67603 373.707 6.672 cv
373.895 6.67603 374.055 6.68402 374.18 6.69501 cv
374.305 6.71503 374.402 6.73401 374.48 6.76202 cv
374.551 6.79303 374.605 6.828 374.641 6.867 cv
374.668 6.90997 374.684 6.95697 374.688 7.008 cv
374.688 10.848 li
374.863 10.672 375.039 10.523 375.219 10.398 cv
375.391 10.277 375.566 10.172 375.746 10.09 cv
375.918 10.012 376.102 9.953 376.293 9.914 cv
376.477 9.87903 376.676 9.86298 376.887 9.85901 cv
377.398 9.86298 377.832 9.96503 378.195 10.168 cv
378.551 10.375 378.844 10.652 379.07 11 cv
379.293 11.348 379.457 11.754 379.566 12.219 cv
379.668 12.684 379.723 13.172 379.723 13.684 cv
cp
377.688 13.824 mo
377.684 13.531 377.66 13.246 377.621 12.969 cv
377.574 12.695 377.5 12.453 377.391 12.238 cv
377.281 12.027 377.137 11.855 376.965 11.727 cv
376.789 11.602 376.57 11.539 376.309 11.535 cv
376.176 11.539 376.051 11.555 375.926 11.59 cv
375.801 11.629 375.672 11.691 375.539 11.777 cv
375.406 11.867 375.27 11.984 375.133 12.121 cv
374.988 12.262 374.84 12.434 374.688 12.641 cv
374.688 14.949 li
374.961 15.305 375.223 15.574 375.477 15.754 cv
375.727 15.941 375.992 16.031 376.27 16.031 cv
376.523 16.031 376.738 15.969 376.918 15.836 cv
377.09 15.711 377.238 15.543 377.355 15.332 cv
377.473 15.129 377.555 14.891 377.609 14.621 cv
377.656 14.359 377.684 14.094 377.688 13.824 cv
cp
f
384.875 13.602 mo
384.871 13.902 384.844 14.113 384.789 14.23 cv
384.73 14.355 384.641 14.414 384.516 14.41 cv
381.273 14.41 li
381.145 14.414 381.051 14.352 380.996 14.227 cv
380.934 14.105 380.906 13.898 380.91 13.602 cv
380.906 13.312 380.934 13.105 380.996 12.984 cv
381.051 12.867 381.145 12.809 381.273 12.805 cv
384.516 12.805 li
384.578 12.809 384.629 12.82 384.676 12.844 cv
384.715 12.871 384.754 12.918 384.789 12.977 cv
384.816 13.043 384.84 13.125 384.855 13.227 cv
384.867 13.332 384.871 13.457 384.875 13.602 cv
cp
f
388.527 17.238 mo
388.523 17.293 388.508 17.34 388.477 17.379 cv
388.441 17.422 388.383 17.457 388.309 17.48 cv
388.227 17.508 388.125 17.527 387.996 17.543 cv
387.863 17.559 387.695 17.566 387.5 17.566 cv
387.297 17.566 387.133 17.559 387.004 17.543 cv
386.867 17.527 386.762 17.508 386.688 17.48 cv
386.605 17.457 386.551 17.422 386.52 17.379 cv
386.484 17.34 386.465 17.293 386.469 17.238 cv
386.469 7.71503 li
386.465 7.66803 386.484 7.62097 386.52 7.57397 cv
386.551 7.53497 386.605 7.5 386.691 7.47302 cv
386.77 7.44897 386.875 7.42999 387.008 7.40997 cv
387.133 7.39801 387.297 7.39099 387.5 7.38702 cv
387.695 7.39099 387.863 7.39801 387.996 7.40997 cv
388.125 7.42999 388.227 7.44897 388.309 7.47302 cv
388.383 7.5 388.441 7.53497 388.477 7.57397 cv
388.508 7.62097 388.523 7.66803 388.527 7.71503 cv
cp
f
401.605 17.254 mo
401.602 17.309 401.586 17.352 401.559 17.391 cv
401.523 17.43 401.473 17.465 401.402 17.488 cv
401.328 17.516 401.227 17.531 401.105 17.547 cv
400.98 17.559 400.824 17.566 400.633 17.566 cv
400.434 17.566 400.273 17.559 400.148 17.547 cv
400.023 17.531 399.922 17.516 399.848 17.488 cv
399.77 17.465 399.719 17.43 399.691 17.391 cv
399.664 17.352 399.648 17.309 399.652 17.254 cv
399.652 13.133 li
399.648 12.902 399.629 12.687 399.586 12.492 cv
399.539 12.301 399.469 12.137 399.383 12 cv
399.289 11.863 399.176 11.758 399.039 11.68 cv
398.898 11.605 398.734 11.566 398.543 11.566 cv
398.309 11.566 398.07 11.66 397.832 11.84 cv
397.594 12.023 397.336 12.285 397.055 12.633 cv
397.055 17.254 li
397.055 17.309 397.039 17.352 397.008 17.391 cv
396.977 17.43 396.922 17.465 396.848 17.488 cv
396.77 17.516 396.668 17.531 396.547 17.547 cv
396.422 17.559 396.27 17.566 396.082 17.566 cv
395.887 17.566 395.727 17.559 395.605 17.547 cv
395.477 17.531 395.375 17.516 395.305 17.488 cv
395.227 17.465 395.176 17.43 395.145 17.391 cv
395.113 17.352 395.098 17.309 395.098 17.254 cv
395.098 13.133 li
395.098 12.902 395.074 12.687 395.031 12.492 cv
394.988 12.301 394.922 12.137 394.836 12 cv
394.742 11.863 394.629 11.758 394.492 11.68 cv
394.348 11.605 394.184 11.566 394 11.566 cv
393.758 11.566 393.52 11.66 393.281 11.84 cv
393.043 12.023 392.785 12.285 392.512 12.633 cv
392.512 17.254 li
392.508 17.309 392.492 17.352 392.465 17.391 cv
392.43 17.43 392.375 17.465 392.305 17.488 cv
392.227 17.516 392.129 17.531 392.004 17.547 cv
391.879 17.559 391.719 17.566 391.531 17.566 cv
391.336 17.566 391.18 17.559 391.055 17.547 cv
390.93 17.531 390.828 17.516 390.754 17.488 cv
390.676 17.465 390.621 17.43 390.594 17.391 cv
390.559 17.352 390.543 17.309 390.547 17.254 cv
390.547 10.305 li
390.543 10.258 390.559 10.211 390.586 10.168 cv
390.609 10.133 390.656 10.102 390.727 10.07 cv
390.793 10.047 390.879 10.027 390.988 10.012 cv
391.094 10.004 391.227 9.99597 391.391 9.992 cv
391.555 9.99597 391.691 10.004 391.801 10.012 cv
391.906 10.027 391.992 10.047 392.055 10.07 cv
392.113 10.102 392.156 10.133 392.184 10.168 cv
392.207 10.211 392.219 10.258 392.223 10.305 cv
392.223 11.105 li
392.605 10.695 392.988 10.383 393.371 10.172 cv
393.75 9.96503 394.152 9.86298 394.57 9.85901 cv
394.855 9.86298 395.109 9.89099 395.34 9.94897 cv
395.566 10.012 395.773 10.098 395.953 10.207 cv
396.133 10.32 396.285 10.457 396.414 10.609 cv
396.543 10.766 396.652 10.937 396.742 11.129 cv
396.949 10.906 397.152 10.715 397.355 10.555 cv
397.551 10.395 397.75 10.262 397.945 10.16 cv
398.141 10.059 398.336 9.98401 398.531 9.93402 cv
398.727 9.88702 398.926 9.86298 399.129 9.85901 cv
399.59 9.86298 399.977 9.94098 400.297 10.094 cv
400.609 10.254 400.867 10.465 401.063 10.73 cv
401.258 11 401.395 11.312 401.48 11.668 cv
401.559 12.027 401.602 12.406 401.605 12.805 cv
cp
f
409.449 17.277 mo
409.445 17.355 409.418 17.41 409.371 17.449 cv
409.316 17.492 409.234 17.52 409.125 17.539 cv
409.008 17.555 408.844 17.566 408.629 17.566 cv
408.391 17.566 408.219 17.555 408.117 17.539 cv
408.008 17.52 407.934 17.492 407.895 17.449 cv
407.848 17.41 407.828 17.355 407.828 17.277 cv
407.828 16.727 li
407.539 17.035 407.211 17.273 406.848 17.441 cv
406.48 17.613 406.074 17.695 405.629 17.699 cv
405.258 17.695 404.918 17.648 404.609 17.555 cv
404.301 17.461 404.035 17.32 403.809 17.125 cv
403.582 16.937 403.406 16.703 403.281 16.422 cv
403.156 16.145 403.094 15.816 403.098 15.437 cv
403.094 15.039 403.172 14.687 403.332 14.383 cv
403.488 14.086 403.727 13.84 404.043 13.645 cv
404.355 13.453 404.746 13.309 405.215 13.211 cv
405.684 13.121 406.227 13.074 406.844 13.07 cv
407.523 13.07 li
407.523 12.648 li
407.523 12.434 407.5 12.242 407.457 12.078 cv
407.41 11.918 407.336 11.781 407.238 11.668 cv
407.133 11.562 407 11.48 406.832 11.426 cv
406.66 11.375 406.449 11.352 406.207 11.348 cv
405.875 11.352 405.582 11.387 405.328 11.457 cv
405.066 11.531 404.84 11.613 404.645 11.699 cv
404.445 11.793 404.281 11.871 404.152 11.941 cv
404.016 12.016 403.906 12.055 403.828 12.051 cv
403.766 12.055 403.715 12.035 403.676 11.996 cv
403.629 11.961 403.594 11.91 403.566 11.84 cv
403.535 11.777 403.512 11.691 403.5 11.59 cv
403.48 11.492 403.473 11.383 403.477 11.262 cv
403.473 11.102 403.488 10.977 403.516 10.879 cv
403.539 10.789 403.586 10.703 403.664 10.625 cv
403.734 10.551 403.863 10.469 404.047 10.379 cv
404.227 10.289 404.438 10.203 404.684 10.125 cv
404.926 10.047 405.195 9.98401 405.484 9.93402 cv
405.773 9.88702 406.07 9.86298 406.379 9.85901 cv
406.922 9.86298 407.387 9.914 407.773 10.02 cv
408.16 10.129 408.48 10.293 408.73 10.512 cv
408.98 10.73 409.16 11.016 409.277 11.363 cv
409.387 11.715 409.445 12.129 409.449 12.602 cv
cp
407.523 14.301 mo
406.773 14.301 li
406.457 14.305 406.188 14.328 405.965 14.371 cv
405.738 14.422 405.555 14.492 405.418 14.582 cv
405.273 14.68 405.172 14.793 405.109 14.922 cv
405.043 15.059 405.008 15.207 405.012 15.375 cv
405.008 15.668 405.102 15.898 405.289 16.062 cv
405.473 16.23 405.73 16.312 406.059 16.312 cv
406.332 16.312 406.582 16.242 406.816 16.102 cv
407.043 15.961 407.281 15.758 407.523 15.484 cv
cp
f
417.672 10.785 mo
417.668 11.039 417.641 11.223 417.586 11.34 cv
417.527 11.461 417.457 11.52 417.379 11.52 cv
416.559 11.52 li
416.672 11.645 416.754 11.789 416.805 11.945 cv
416.852 12.105 416.875 12.27 416.879 12.437 cv
416.875 12.848 416.809 13.207 416.676 13.52 cv
416.539 13.836 416.344 14.102 416.094 14.312 cv
415.84 14.531 415.539 14.695 415.184 14.805 cv
414.824 14.922 414.426 14.977 413.996 14.973 cv
413.77 14.977 413.559 14.949 413.355 14.891 cv
413.152 14.84 412.996 14.777 412.887 14.699 cv
412.824 14.77 412.766 14.848 412.719 14.941 cv
412.668 15.035 412.645 15.141 412.648 15.25 cv
412.645 15.406 412.711 15.527 412.844 15.621 cv
412.973 15.719 413.16 15.773 413.402 15.781 cv
415.094 15.844 li
415.488 15.859 415.84 15.918 416.148 16.012 cv
416.457 16.113 416.719 16.246 416.93 16.418 cv
417.141 16.594 417.301 16.805 417.41 17.047 cv
417.52 17.293 417.574 17.566 417.578 17.879 cv
417.574 18.215 417.5 18.539 417.352 18.848 cv
417.203 19.148 416.977 19.41 416.676 19.637 cv
416.371 19.855 415.992 20.035 415.539 20.168 cv
415.082 20.297 414.551 20.359 413.949 20.363 cv
413.352 20.359 412.848 20.312 412.43 20.223 cv
412.012 20.125 411.668 19.996 411.402 19.832 cv
411.133 19.664 410.938 19.465 410.82 19.238 cv
410.695 19.004 410.637 18.75 410.637 18.477 cv
410.637 18.305 410.656 18.145 410.703 17.988 cv
410.742 17.832 410.809 17.68 410.898 17.539 cv
410.98 17.395 411.086 17.262 411.211 17.129 cv
411.336 17 411.477 16.875 411.641 16.754 cv
411.414 16.641 411.242 16.48 411.121 16.27 cv
411 16.066 410.941 15.84 410.941 15.594 cv
410.941 15.293 411.008 15.016 411.148 14.758 cv
411.285 14.508 411.469 14.277 411.695 14.074 cv
411.512 13.895 411.367 13.68 411.258 13.422 cv
411.148 13.172 411.094 12.852 411.098 12.469 cv
411.094 12.066 411.164 11.707 411.309 11.383 cv
411.449 11.066 411.648 10.797 411.906 10.574 cv
412.16 10.355 412.465 10.184 412.816 10.066 cv
413.168 9.94897 413.559 9.89099 413.988 9.89099 cv
414.207 9.89099 414.414 9.90601 414.613 9.92999 cv
414.813 9.961 415 9.99597 415.172 10.039 cv
417.379 10.039 li
417.461 10.043 417.531 10.102 417.59 10.211 cv
417.641 10.328 417.668 10.52 417.672 10.785 cv
cp
415.156 12.43 mo
415.152 12.059 415.051 11.77 414.844 11.559 cv
414.633 11.355 414.34 11.25 413.965 11.246 cv
413.77 11.25 413.598 11.281 413.457 11.344 cv
413.309 11.41 413.188 11.5 413.094 11.609 cv
412.992 11.723 412.922 11.852 412.879 12 cv
412.828 12.148 412.805 12.305 412.809 12.461 cv
412.805 12.82 412.91 13.098 413.121 13.301 cv
413.328 13.508 413.617 13.613 413.988 13.609 cv
414.184 13.613 414.352 13.582 414.5 13.516 cv
414.641 13.457 414.762 13.371 414.863 13.258 cv
414.957 13.152 415.031 13.023 415.082 12.879 cv
415.129 12.738 415.152 12.59 415.156 12.43 cv
cp
415.617 17.98 mo
415.617 17.742 415.523 17.566 415.336 17.441 cv
415.148 17.32 414.891 17.25 414.563 17.238 cv
413.168 17.199 li
413.031 17.301 412.922 17.395 412.844 17.484 cv
412.762 17.574 412.699 17.66 412.652 17.746 cv
412.602 17.828 412.566 17.91 412.555 17.988 cv
412.535 18.066 412.527 18.145 412.531 18.23 cv
412.527 18.484 412.66 18.684 412.922 18.82 cv
413.184 18.953 413.555 19.02 414.035 19.023 cv
414.328 19.02 414.574 18.988 414.781 18.934 cv
414.98 18.871 415.145 18.793 415.273 18.695 cv
415.395 18.594 415.484 18.484 415.539 18.363 cv
415.59 18.242 415.617 18.113 415.617 17.98 cv
cp
f
425.281 13.578 mo
425.277 13.816 425.227 13.992 425.121 14.105 cv
425.012 14.223 424.863 14.281 424.684 14.277 cv
420.449 14.277 li
420.445 14.578 420.48 14.848 420.555 15.086 cv
420.621 15.328 420.734 15.531 420.891 15.699 cv
421.043 15.871 421.238 16 421.48 16.086 cv
421.719 16.176 422.008 16.219 422.352 16.219 cv
422.691 16.219 422.992 16.195 423.254 16.145 cv
423.512 16.098 423.738 16.043 423.93 15.98 cv
424.117 15.922 424.273 15.867 424.402 15.816 cv
424.523 15.77 424.625 15.746 424.707 15.742 cv
424.75 15.746 424.789 15.754 424.824 15.77 cv
424.852 15.789 424.879 15.82 424.898 15.867 cv
424.918 15.914 424.93 15.98 424.941 16.066 cv
424.945 16.152 424.949 16.262 424.953 16.391 cv
424.949 16.508 424.949 16.605 424.945 16.684 cv
424.938 16.766 424.93 16.832 424.922 16.887 cv
424.91 16.945 424.895 16.996 424.875 17.031 cv
424.855 17.074 424.828 17.109 424.797 17.145 cv
424.762 17.184 424.668 17.234 424.52 17.293 cv
424.363 17.359 424.172 17.422 423.941 17.477 cv
423.703 17.539 423.434 17.586 423.137 17.633 cv
422.832 17.672 422.512 17.695 422.172 17.699 cv
421.551 17.695 421.008 17.621 420.547 17.465 cv
420.078 17.312 419.691 17.074 419.383 16.758 cv
419.066 16.441 418.832 16.043 418.684 15.559 cv
418.527 15.078 418.453 14.512 418.457 13.855 cv
418.453 13.242 418.531 12.684 418.695 12.187 cv
418.852 11.691 419.086 11.273 419.398 10.926 cv
419.703 10.582 420.078 10.316 420.516 10.133 cv
420.953 9.953 421.445 9.86298 422 9.85901 cv
422.578 9.86298 423.078 9.94897 423.492 10.117 cv
423.906 10.293 424.242 10.531 424.508 10.832 cv
424.77 11.137 424.965 11.496 425.094 11.91 cv
425.215 12.328 425.277 12.777 425.281 13.266 cv
cp
423.379 13.016 mo
423.391 12.465 423.281 12.031 423.047 11.719 cv
422.813 11.406 422.445 11.25 421.953 11.246 cv
421.703 11.25 421.488 11.297 421.305 11.387 cv
421.117 11.484 420.965 11.609 420.844 11.766 cv
420.719 11.926 420.625 12.113 420.563 12.328 cv
420.496 12.543 420.457 12.773 420.449 13.016 cv
cp
f
431.785 15.289 mo
431.781 15.687 431.707 16.035 431.563 16.336 cv
431.414 16.637 431.207 16.891 430.938 17.09 cv
430.664 17.297 430.344 17.445 429.977 17.547 cv
429.609 17.645 429.207 17.695 428.777 17.699 cv
428.512 17.695 428.266 17.676 428.031 17.641 cv
427.797 17.598 427.586 17.551 427.398 17.492 cv
427.211 17.434 427.055 17.371 426.93 17.309 cv
426.805 17.246 426.711 17.187 426.656 17.133 cv
426.598 17.078 426.555 16.996 426.527 16.879 cv
426.492 16.766 426.477 16.59 426.48 16.359 cv
426.477 16.211 426.484 16.09 426.496 15.996 cv
426.504 15.906 426.52 15.836 426.543 15.777 cv
426.563 15.727 426.586 15.687 426.621 15.668 cv
426.648 15.652 426.688 15.645 426.734 15.641 cv
426.789 15.645 426.875 15.676 426.988 15.738 cv
427.098 15.805 427.234 15.879 427.406 15.953 cv
427.57 16.035 427.766 16.105 427.984 16.172 cv
428.203 16.242 428.453 16.277 428.738 16.273 cv
428.914 16.277 429.07 16.258 429.211 16.219 cv
429.344 16.184 429.465 16.133 429.57 16.062 cv
429.668 15.996 429.742 15.91 429.797 15.805 cv
429.844 15.703 429.871 15.582 429.875 15.445 cv
429.871 15.289 429.824 15.156 429.73 15.047 cv
429.637 14.937 429.508 14.84 429.352 14.754 cv
429.188 14.672 429.008 14.594 428.813 14.52 cv
428.609 14.449 428.406 14.371 428.195 14.277 cv
427.984 14.191 427.777 14.09 427.582 13.973 cv
427.379 13.863 427.199 13.723 427.043 13.555 cv
426.879 13.391 426.754 13.191 426.66 12.953 cv
426.566 12.723 426.52 12.441 426.52 12.109 cv
426.52 11.781 426.582 11.477 426.711 11.195 cv
426.84 10.922 427.027 10.684 427.273 10.484 cv
427.516 10.289 427.813 10.137 428.164 10.023 cv
428.512 9.91803 428.906 9.86298 429.348 9.85901 cv
429.563 9.86298 429.773 9.87903 429.98 9.90601 cv
430.184 9.94098 430.371 9.97998 430.539 10.023 cv
430.703 10.074 430.844 10.125 430.961 10.176 cv
431.074 10.234 431.156 10.281 431.207 10.316 cv
431.254 10.359 431.289 10.398 431.313 10.434 cv
431.332 10.477 431.344 10.523 431.355 10.574 cv
431.363 10.629 431.375 10.695 431.383 10.773 cv
431.391 10.859 431.395 10.957 431.395 11.074 cv
431.395 11.215 431.391 11.332 431.383 11.418 cv
431.375 11.512 431.359 11.582 431.344 11.629 cv
431.324 11.684 431.301 11.719 431.273 11.734 cv
431.238 11.758 431.203 11.766 431.164 11.762 cv
431.113 11.766 431.039 11.738 430.945 11.68 cv
430.844 11.629 430.723 11.57 430.574 11.504 cv
430.426 11.445 430.254 11.387 430.059 11.328 cv
429.863 11.277 429.641 11.25 429.395 11.246 cv
429.215 11.25 429.063 11.27 428.934 11.301 cv
428.801 11.34 428.691 11.391 428.613 11.457 cv
428.527 11.527 428.465 11.605 428.426 11.695 cv
428.379 11.789 428.359 11.887 428.363 11.988 cv
428.359 12.148 428.41 12.285 428.512 12.391 cv
428.609 12.504 428.738 12.598 428.902 12.68 cv
429.063 12.766 429.246 12.844 429.453 12.914 cv
429.656 12.988 429.863 13.07 430.074 13.152 cv
430.281 13.242 430.488 13.34 430.699 13.453 cv
430.902 13.566 431.086 13.707 431.246 13.871 cv
431.406 14.039 431.535 14.238 431.637 14.469 cv
431.73 14.703 431.781 14.977 431.785 15.289 cv
cp
f
440.555 13.602 mo
440.551 13.902 440.523 14.113 440.469 14.23 cv
440.41 14.355 440.32 14.414 440.195 14.41 cv
436.953 14.41 li
436.824 14.414 436.73 14.352 436.676 14.227 cv
436.613 14.105 436.586 13.898 436.59 13.602 cv
436.586 13.312 436.613 13.105 436.676 12.984 cv
436.73 12.867 436.824 12.809 436.953 12.805 cv
440.195 12.805 li
440.258 12.809 440.309 12.82 440.355 12.844 cv
440.395 12.871 440.434 12.918 440.469 12.977 cv
440.496 13.043 440.52 13.125 440.535 13.227 cv
440.547 13.332 440.551 13.457 440.555 13.602 cv
cp
f
451.289 16.664 mo
451.285 16.82 451.281 16.953 451.27 17.055 cv
451.254 17.164 451.234 17.25 451.211 17.32 cv
451.184 17.391 451.148 17.441 451.113 17.473 cv
451.07 17.504 451.027 17.52 450.977 17.52 cv
446.355 17.52 li
446.18 17.52 446.035 17.469 445.922 17.367 cv
445.801 17.266 445.742 17.102 445.746 16.871 cv
445.746 7.71503 li
445.742 7.66803 445.762 7.62097 445.797 7.57397 cv
445.828 7.53497 445.883 7.5 445.965 7.47302 cv
446.039 7.44897 446.145 7.42999 446.281 7.40997 cv
446.41 7.39801 446.574 7.39099 446.777 7.38702 cv
446.973 7.39099 447.141 7.39801 447.273 7.40997 cv
447.402 7.42999 447.504 7.44897 447.586 7.47302 cv
447.66 7.5 447.719 7.53497 447.754 7.57397 cv
447.785 7.62097 447.801 7.66803 447.805 7.71503 cv
447.805 15.828 li
450.977 15.828 li
451.027 15.832 451.07 15.848 451.113 15.871 cv
451.148 15.902 451.184 15.949 451.211 16.012 cv
451.234 16.082 451.254 16.168 451.27 16.27 cv
451.281 16.379 451.285 16.508 451.289 16.664 cv
cp
f
459.414 13.707 mo
459.41 14.305 459.332 14.848 459.18 15.332 cv
459.02 15.824 458.785 16.242 458.469 16.594 cv
458.152 16.945 457.754 17.219 457.277 17.41 cv
456.797 17.602 456.238 17.695 455.602 17.699 cv
454.98 17.695 454.441 17.613 453.988 17.441 cv
453.527 17.273 453.148 17.023 452.852 16.695 cv
452.547 16.371 452.324 15.969 452.18 15.488 cv
452.035 15.012 451.965 14.465 451.965 13.848 cv
451.965 13.258 452.043 12.719 452.199 12.227 cv
452.355 11.738 452.594 11.316 452.914 10.965 cv
453.23 10.617 453.625 10.344 454.102 10.148 cv
454.574 9.95697 455.133 9.86298 455.773 9.85901 cv
456.398 9.86298 456.938 9.94501 457.395 10.113 cv
457.852 10.285 458.23 10.535 458.527 10.859 cv
458.824 11.187 459.047 11.59 459.195 12.066 cv
459.34 12.547 459.41 13.094 459.414 13.707 cv
cp
457.395 13.785 mo
457.391 13.449 457.363 13.133 457.313 12.84 cv
457.254 12.555 457.16 12.305 457.035 12.09 cv
456.902 11.879 456.73 11.711 456.52 11.59 cv
456.301 11.473 456.031 11.414 455.703 11.41 cv
455.414 11.414 455.16 11.469 454.941 11.57 cv
454.723 11.68 454.543 11.836 454.402 12.039 cv
454.262 12.246 454.156 12.492 454.086 12.777 cv
454.016 13.07 453.98 13.398 453.98 13.762 cv
453.98 14.109 454.008 14.426 454.066 14.711 cv
454.121 15.004 454.215 15.254 454.344 15.465 cv
454.469 15.68 454.641 15.844 454.863 15.957 cv
455.078 16.078 455.348 16.137 455.672 16.133 cv
455.965 16.137 456.223 16.082 456.445 15.973 cv
456.66 15.867 456.84 15.715 456.98 15.508 cv
457.121 15.309 457.223 15.062 457.293 14.773 cv
457.355 14.488 457.391 14.16 457.395 13.785 cv
cp
f
466.23 16.148 mo
466.227 16.285 466.223 16.398 466.219 16.488 cv
466.207 16.582 466.199 16.66 466.188 16.719 cv
466.172 16.781 466.156 16.832 466.141 16.867 cv
466.121 16.91 466.078 16.957 466.02 17.016 cv
465.953 17.078 465.848 17.152 465.699 17.234 cv
465.547 17.324 465.375 17.402 465.184 17.465 cv
464.992 17.535 464.785 17.586 464.559 17.629 cv
464.332 17.668 464.098 17.687 463.863 17.691 cv
463.324 17.687 462.852 17.609 462.438 17.441 cv
462.023 17.277 461.676 17.031 461.398 16.707 cv
461.113 16.383 460.902 15.988 460.762 15.52 cv
460.621 15.055 460.551 14.516 460.551 13.91 cv
460.551 13.215 460.637 12.617 460.809 12.109 cv
460.98 11.605 461.223 11.184 461.539 10.852 cv
461.848 10.52 462.215 10.273 462.645 10.109 cv
463.066 9.94897 463.535 9.867 464.047 9.867 cv
464.254 9.867 464.457 9.88702 464.66 9.922 cv
464.855 9.961 465.043 10.012 465.219 10.07 cv
465.391 10.137 465.547 10.207 465.688 10.281 cv
465.824 10.363 465.922 10.43 465.98 10.484 cv
466.035 10.543 466.074 10.59 466.102 10.625 cv
466.121 10.668 466.141 10.719 466.156 10.777 cv
466.168 10.844 466.18 10.922 466.188 11.008 cv
466.195 11.102 466.199 11.211 466.199 11.34 cv
466.199 11.645 466.172 11.855 466.121 11.977 cv
466.066 12.098 466 12.16 465.918 12.156 cv
465.828 12.16 465.734 12.125 465.637 12.051 cv
465.535 11.98 465.418 11.898 465.285 11.809 cv
465.152 11.723 464.992 11.641 464.805 11.566 cv
464.617 11.496 464.391 11.461 464.133 11.457 cv
463.621 11.461 463.234 11.656 462.965 12.047 cv
462.691 12.437 462.555 13.012 462.559 13.77 cv
462.555 14.145 462.59 14.477 462.66 14.762 cv
462.727 15.047 462.824 15.285 462.961 15.477 cv
463.09 15.672 463.258 15.816 463.461 15.91 cv
463.66 16.008 463.891 16.055 464.156 16.055 cv
464.422 16.055 464.656 16.016 464.855 15.934 cv
465.047 15.855 465.215 15.766 465.363 15.664 cv
465.504 15.566 465.629 15.477 465.73 15.395 cv
465.828 15.316 465.91 15.277 465.98 15.273 cv
466.023 15.277 466.063 15.289 466.098 15.312 cv
466.125 15.34 466.148 15.387 466.172 15.457 cv
466.188 15.527 466.203 15.617 466.215 15.727 cv
466.223 15.836 466.227 15.977 466.23 16.148 cv
cp
f
473.516 17.277 mo
473.512 17.355 473.484 17.41 473.438 17.449 cv
473.383 17.492 473.301 17.52 473.191 17.539 cv
473.074 17.555 472.91 17.566 472.695 17.566 cv
472.457 17.566 472.285 17.555 472.184 17.539 cv
472.074 17.52 472 17.492 471.961 17.449 cv
471.914 17.41 471.895 17.355 471.895 17.277 cv
471.895 16.727 li
471.605 17.035 471.277 17.273 470.914 17.441 cv
470.547 17.613 470.141 17.695 469.695 17.699 cv
469.324 17.695 468.984 17.648 468.676 17.555 cv
468.367 17.461 468.102 17.32 467.875 17.125 cv
467.648 16.937 467.473 16.703 467.348 16.422 cv
467.223 16.145 467.16 15.816 467.164 15.437 cv
467.16 15.039 467.238 14.687 467.398 14.383 cv
467.555 14.086 467.793 13.84 468.109 13.645 cv
468.422 13.453 468.813 13.309 469.281 13.211 cv
469.75 13.121 470.293 13.074 470.91 13.07 cv
471.59 13.07 li
471.59 12.648 li
471.59 12.434 471.566 12.242 471.523 12.078 cv
471.477 11.918 471.402 11.781 471.305 11.668 cv
471.199 11.562 471.066 11.48 470.898 11.426 cv
470.727 11.375 470.516 11.352 470.273 11.348 cv
469.941 11.352 469.648 11.387 469.395 11.457 cv
469.133 11.531 468.906 11.613 468.711 11.699 cv
468.512 11.793 468.348 11.871 468.219 11.941 cv
468.082 12.016 467.973 12.055 467.895 12.051 cv
467.832 12.055 467.781 12.035 467.742 11.996 cv
467.695 11.961 467.66 11.91 467.633 11.84 cv
467.602 11.777 467.578 11.691 467.566 11.59 cv
467.547 11.492 467.539 11.383 467.543 11.262 cv
467.539 11.102 467.555 10.977 467.582 10.879 cv
467.605 10.789 467.652 10.703 467.73 10.625 cv
467.801 10.551 467.93 10.469 468.113 10.379 cv
468.293 10.289 468.504 10.203 468.75 10.125 cv
468.992 10.047 469.262 9.98401 469.551 9.93402 cv
469.84 9.88702 470.137 9.86298 470.445 9.85901 cv
470.988 9.86298 471.453 9.914 471.84 10.02 cv
472.227 10.129 472.547 10.293 472.797 10.512 cv
473.047 10.73 473.227 11.016 473.344 11.363 cv
473.453 11.715 473.512 12.129 473.516 12.602 cv
cp
471.59 14.301 mo
470.84 14.301 li
470.523 14.305 470.254 14.328 470.031 14.371 cv
469.805 14.422 469.621 14.492 469.484 14.582 cv
469.34 14.68 469.238 14.793 469.176 14.922 cv
469.109 15.059 469.074 15.207 469.078 15.375 cv
469.074 15.668 469.168 15.898 469.355 16.062 cv
469.539 16.23 469.797 16.312 470.125 16.312 cv
470.398 16.312 470.648 16.242 470.883 16.102 cv
471.109 15.961 471.348 15.758 471.59 15.484 cv
cp
f
477.441 17.254 mo
477.438 17.309 477.422 17.352 477.395 17.391 cv
477.359 17.43 477.305 17.465 477.234 17.488 cv
477.156 17.516 477.059 17.531 476.934 17.547 cv
476.809 17.559 476.648 17.566 476.461 17.566 cv
476.266 17.566 476.109 17.559 475.984 17.547 cv
475.859 17.531 475.758 17.516 475.684 17.488 cv
475.605 17.465 475.551 17.43 475.523 17.391 cv
475.488 17.352 475.473 17.309 475.477 17.254 cv
475.477 7.008 li
475.473 6.95697 475.488 6.90997 475.523 6.867 cv
475.551 6.828 475.605 6.79303 475.684 6.76202 cv
475.758 6.73401 475.859 6.71503 475.984 6.69501 cv
476.109 6.68402 476.266 6.67603 476.461 6.672 cv
476.648 6.67603 476.809 6.68402 476.934 6.69501 cv
477.059 6.71503 477.156 6.73401 477.234 6.76202 cv
477.305 6.79303 477.359 6.828 477.395 6.867 cv
477.422 6.90997 477.438 6.95697 477.441 7.008 cv
cp
f
494.801 17.238 mo
494.797 17.293 494.785 17.34 494.758 17.379 cv
494.727 17.422 494.672 17.457 494.602 17.48 cv
494.523 17.508 494.426 17.527 494.301 17.543 cv
494.176 17.559 494.016 17.566 493.824 17.566 cv
493.637 17.566 493.48 17.559 493.359 17.543 cv
493.23 17.527 493.133 17.508 493.063 17.48 cv
492.988 17.457 492.938 17.422 492.906 17.379 cv
492.875 17.34 492.859 17.293 492.859 17.238 cv
492.859 9.03101 li
492.844 9.03101 li
489.922 17.23 li
489.898 17.301 489.863 17.355 489.82 17.398 cv
489.77 17.445 489.707 17.48 489.629 17.504 cv
489.547 17.531 489.445 17.547 489.32 17.555 cv
489.195 17.562 489.043 17.566 488.871 17.566 cv
488.691 17.566 488.543 17.559 488.418 17.547 cv
488.293 17.531 488.188 17.512 488.109 17.484 cv
488.023 17.457 487.961 17.422 487.918 17.379 cv
487.867 17.34 487.836 17.293 487.824 17.23 cv
485.004 9.03101 li
484.988 9.03101 li
484.988 17.238 li
484.984 17.293 484.969 17.34 484.945 17.379 cv
484.914 17.422 484.863 17.457 484.785 17.48 cv
484.707 17.508 484.605 17.527 484.484 17.543 cv
484.359 17.559 484.203 17.566 484.016 17.566 cv
483.824 17.566 483.668 17.559 483.547 17.543 cv
483.418 17.527 483.316 17.508 483.246 17.48 cv
483.168 17.457 483.117 17.422 483.09 17.379 cv
483.059 17.34 483.043 17.293 483.047 17.238 cv
483.047 8.25403 li
483.043 7.992 483.113 7.789 483.258 7.64502 cv
483.395 7.508 483.582 7.43701 483.82 7.43402 cv
485.16 7.43402 li
485.398 7.43701 485.602 7.45697 485.773 7.492 cv
485.941 7.53497 486.09 7.59802 486.219 7.68701 cv
486.34 7.78101 486.445 7.90198 486.531 8.047 cv
486.613 8.19897 486.684 8.383 486.75 8.59802 cv
488.934 14.605 li
488.965 14.605 li
491.223 8.61298 li
491.289 8.39502 491.363 8.211 491.445 8.05902 cv
491.523 7.90997 491.617 7.789 491.727 7.69098 cv
491.832 7.60199 491.957 7.53497 492.102 7.492 cv
492.246 7.45697 492.414 7.43701 492.609 7.43402 cv
493.988 7.43402 li
494.125 7.43701 494.246 7.453 494.352 7.48798 cv
494.449 7.52698 494.531 7.58197 494.602 7.64801 cv
494.664 7.72302 494.715 7.80902 494.75 7.90601 cv
494.781 8.01202 494.797 8.12903 494.801 8.25403 cv
cp
f
503.91 13.707 mo
503.906 14.305 503.828 14.848 503.676 15.332 cv
503.516 15.824 503.281 16.242 502.965 16.594 cv
502.648 16.945 502.25 17.219 501.773 17.41 cv
501.293 17.602 500.734 17.695 500.098 17.699 cv
499.477 17.695 498.938 17.613 498.484 17.441 cv
498.023 17.273 497.645 17.023 497.348 16.695 cv
497.043 16.371 496.82 15.969 496.676 15.488 cv
496.531 15.012 496.461 14.465 496.461 13.848 cv
496.461 13.258 496.539 12.719 496.695 12.227 cv
496.852 11.738 497.09 11.316 497.41 10.965 cv
497.727 10.617 498.121 10.344 498.598 10.148 cv
499.07 9.95697 499.629 9.86298 500.27 9.85901 cv
500.895 9.86298 501.434 9.94501 501.891 10.113 cv
502.348 10.285 502.727 10.535 503.023 10.859 cv
503.32 11.187 503.543 11.59 503.691 12.066 cv
503.836 12.547 503.906 13.094 503.91 13.707 cv
cp
501.891 13.785 mo
501.887 13.449 501.859 13.133 501.809 12.84 cv
501.75 12.555 501.656 12.305 501.531 12.09 cv
501.398 11.879 501.227 11.711 501.016 11.59 cv
500.797 11.473 500.527 11.414 500.199 11.41 cv
499.91 11.414 499.656 11.469 499.438 11.57 cv
499.219 11.68 499.039 11.836 498.898 12.039 cv
498.758 12.246 498.652 12.492 498.582 12.777 cv
498.512 13.07 498.477 13.398 498.477 13.762 cv
498.477 14.109 498.504 14.426 498.563 14.711 cv
498.617 15.004 498.711 15.254 498.84 15.465 cv
498.965 15.68 499.137 15.844 499.359 15.957 cv
499.574 16.078 499.844 16.137 500.168 16.133 cv
500.461 16.137 500.719 16.082 500.941 15.973 cv
501.156 15.867 501.336 15.715 501.477 15.508 cv
501.617 15.309 501.719 15.062 501.789 14.773 cv
501.852 14.488 501.887 14.16 501.891 13.785 cv
cp
f
512.059 17.254 mo
512.055 17.316 512.043 17.363 512.02 17.398 cv
511.992 17.441 511.945 17.473 511.887 17.496 cv
511.82 17.52 511.738 17.535 511.633 17.551 cv
511.527 17.559 511.395 17.566 511.242 17.566 cv
511.07 17.566 510.938 17.559 510.836 17.551 cv
510.73 17.535 510.645 17.52 510.582 17.496 cv
510.516 17.473 510.469 17.441 510.441 17.398 cv
510.41 17.363 510.395 17.316 510.398 17.254 cv
510.398 16.484 li
510.039 16.871 509.664 17.168 509.273 17.379 cv
508.875 17.59 508.441 17.695 507.969 17.699 cv
507.434 17.695 506.984 17.594 506.621 17.391 cv
506.254 17.187 505.957 16.914 505.727 16.562 cv
505.492 16.219 505.324 15.812 505.223 15.344 cv
505.121 14.883 505.07 14.391 505.07 13.871 cv
505.07 13.258 505.133 12.703 505.266 12.207 cv
505.395 11.715 505.59 11.293 505.848 10.945 cv
506.102 10.598 506.418 10.332 506.797 10.141 cv
507.176 9.95697 507.613 9.86298 508.109 9.85901 cv
508.496 9.86298 508.848 9.94098 509.168 10.098 cv
509.48 10.258 509.797 10.488 510.109 10.793 cv
510.109 7.03101 li
510.109 6.97998 510.121 6.93402 510.152 6.89099 cv
510.176 6.85199 510.23 6.81598 510.309 6.78497 cv
510.383 6.758 510.48 6.73798 510.609 6.71899 cv
510.73 6.70697 510.891 6.69897 511.086 6.69501 cv
511.277 6.69897 511.434 6.70697 511.559 6.71899 cv
511.68 6.73798 511.781 6.758 511.855 6.78497 cv
511.926 6.81598 511.977 6.85199 512.012 6.89099 cv
512.039 6.93402 512.055 6.97998 512.059 7.03101 cv
cp
510.109 12.609 mo
509.828 12.258 509.559 11.988 509.305 11.801 cv
509.043 11.613 508.773 11.52 508.496 11.52 cv
508.242 11.52 508.023 11.586 507.84 11.711 cv
507.652 11.844 507.504 12.012 507.395 12.223 cv
507.281 12.434 507.199 12.672 507.145 12.934 cv
507.09 13.199 507.063 13.469 507.063 13.738 cv
507.063 14.035 507.086 14.316 507.133 14.59 cv
507.18 14.867 507.254 15.113 507.363 15.328 cv
507.465 15.543 507.609 15.715 507.789 15.844 cv
507.965 15.977 508.188 16.043 508.457 16.039 cv
508.59 16.043 508.719 16.023 508.852 15.98 cv
508.977 15.945 509.109 15.883 509.242 15.789 cv
509.375 15.703 509.512 15.586 509.652 15.441 cv
509.793 15.301 509.945 15.125 510.109 14.918 cv
cp
f
520.457 13.578 mo
520.453 13.816 520.402 13.992 520.297 14.105 cv
520.188 14.223 520.039 14.281 519.859 14.277 cv
515.625 14.277 li
515.621 14.578 515.656 14.848 515.73 15.086 cv
515.797 15.328 515.91 15.531 516.066 15.699 cv
516.219 15.871 516.414 16 516.656 16.086 cv
516.895 16.176 517.184 16.219 517.527 16.219 cv
517.867 16.219 518.168 16.195 518.43 16.145 cv
518.688 16.098 518.914 16.043 519.105 15.98 cv
519.293 15.922 519.449 15.867 519.578 15.816 cv
519.699 15.77 519.801 15.746 519.883 15.742 cv
519.926 15.746 519.965 15.754 520 15.77 cv
520.027 15.789 520.055 15.82 520.074 15.867 cv
520.094 15.914 520.105 15.98 520.117 16.066 cv
520.121 16.152 520.125 16.262 520.129 16.391 cv
520.125 16.508 520.125 16.605 520.121 16.684 cv
520.113 16.766 520.105 16.832 520.098 16.887 cv
520.086 16.945 520.07 16.996 520.051 17.031 cv
520.031 17.074 520.004 17.109 519.973 17.145 cv
519.938 17.184 519.844 17.234 519.695 17.293 cv
519.539 17.359 519.348 17.422 519.117 17.477 cv
518.879 17.539 518.609 17.586 518.313 17.633 cv
518.008 17.672 517.688 17.695 517.348 17.699 cv
516.727 17.695 516.184 17.621 515.723 17.465 cv
515.254 17.312 514.867 17.074 514.559 16.758 cv
514.242 16.441 514.008 16.043 513.859 15.559 cv
513.703 15.078 513.629 14.512 513.633 13.855 cv
513.629 13.242 513.707 12.684 513.871 12.187 cv
514.027 11.691 514.262 11.273 514.574 10.926 cv
514.879 10.582 515.254 10.316 515.691 10.133 cv
516.129 9.953 516.621 9.86298 517.176 9.85901 cv
517.754 9.86298 518.254 9.94897 518.668 10.117 cv
519.082 10.293 519.418 10.531 519.684 10.832 cv
519.945 11.137 520.141 11.496 520.27 11.91 cv
520.391 12.328 520.453 12.777 520.457 13.266 cv
cp
518.555 13.016 mo
518.566 12.465 518.457 12.031 518.223 11.719 cv
517.988 11.406 517.621 11.25 517.129 11.246 cv
516.879 11.25 516.664 11.297 516.48 11.387 cv
516.293 11.484 516.141 11.609 516.02 11.766 cv
515.895 11.926 515.801 12.113 515.738 12.328 cv
515.672 12.543 515.633 12.773 515.625 13.016 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
