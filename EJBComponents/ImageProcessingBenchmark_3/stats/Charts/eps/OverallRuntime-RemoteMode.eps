%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntime-RemoteMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:56:34 p.m.
%%BoundingBox: 0 0 658 538
%%HiResBoundingBox: 0 0 657.8400 537.4800
%%CropBox: 0 0 657.8400 537.4800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -537.48 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 537.48 li
657.84 537.48 li
657.84 0 li
cp
clp
gsave
0 537.48 mo
658 537.48 li
658 -.52002 li
0 -.52002 li
cp
clp
0 0 mo
657.84 0 li
657.84 537.48 li
0 537.48 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
66.48 465.359 mo
644.762 465.359 li
66.48 413.52 mo
644.762 413.52 li
66.48 361.68 mo
644.762 361.68 li
66.48 309.84 mo
644.762 309.84 li
66.48 257.879 mo
644.762 257.879 li
66.48 206.039 mo
644.762 206.039 li
66.48 154.199 mo
644.762 154.199 li
66.48 102.238 mo
644.762 102.238 li
66.48 50.398 mo
644.762 50.398 li
.135805 .104005 .108583 0 cmyk
@
66.48 439.441 mo
644.762 439.441 li
66.48 387.602 mo
644.762 387.602 li
66.48 335.762 mo
644.762 335.762 li
66.48 283.801 mo
644.762 283.801 li
66.48 231.961 mo
644.762 231.961 li
66.48 180.121 mo
644.762 180.121 li
66.48 128.281 mo
644.762 128.281 li
66.48 76.32 mo
644.762 76.32 li
66.48 24.48 mo
644.762 24.48 li
.326574 .281529 .277562 0 cmyk
@
102.602 24.48 mo
102.602 491.398 li
174.961 24.48 mo
174.961 491.398 li
247.199 24.48 mo
247.199 491.398 li
319.559 24.48 mo
319.559 491.398 li
391.801 24.48 mo
391.801 491.398 li
464.039 24.48 mo
464.039 491.398 li
536.398 24.48 mo
536.398 491.398 li
608.641 24.48 mo
608.641 491.398 li
.175235 .144778 .143648 0 cmyk
@
66.48 24.48 mo
66.48 491.398 li
138.84 24.48 mo
138.84 491.398 li
211.078 24.48 mo
211.078 491.398 li
283.32 24.48 mo
283.32 491.398 li
355.68 24.48 mo
355.68 491.398 li
427.922 24.48 mo
427.922 491.398 li
500.281 24.48 mo
500.281 491.398 li
572.52 24.48 mo
572.52 491.398 li
644.762 24.48 mo
644.762 491.398 li
.326574 .281529 .277562 0 cmyk
@
32.641 482.039 mo
53.52 482.039 li
53.52 499.078 li
32.641 499.078 li
cp
0 0 0 0 cmyk
ef
32.641 430.199 mo
53.52 430.199 li
53.52 447.238 li
32.641 447.238 li
cp
ef
32.641 378.238 mo
53.52 378.238 li
53.52 395.398 li
32.641 395.398 li
cp
ef
32.641 326.398 mo
53.52 326.398 li
53.52 343.441 li
32.641 343.441 li
cp
ef
25.559 274.559 mo
53.52 274.559 li
53.52 291.602 li
25.559 291.602 li
cp
ef
25.559 222.602 mo
53.52 222.602 li
53.52 239.762 li
25.559 239.762 li
cp
ef
25.559 170.762 mo
53.52 170.762 li
53.52 187.922 li
25.559 187.922 li
cp
ef
25.559 118.922 mo
53.52 118.922 li
53.52 135.961 li
25.559 135.961 li
cp
ef
25.559 67.078 mo
53.52 67.078 li
53.52 84.121 li
25.559 84.121 li
cp
ef
25.559 15.121 mo
53.52 15.121 li
53.52 32.281 li
25.559 32.281 li
cp
ef
.96 lw
66.48 491.398 mo
644.762 491.398 li
.369879 .299321 .304356 .000976577 cmyk
@
66.48 491.398 mo
66.48 495.84 li
138.84 491.398 mo
138.84 495.84 li
211.078 491.398 mo
211.078 495.84 li
283.32 491.398 mo
283.32 495.84 li
355.68 491.398 mo
355.68 495.84 li
427.922 491.398 mo
427.922 495.84 li
500.281 491.398 mo
500.281 495.84 li
572.52 491.398 mo
572.52 495.84 li
644.762 491.398 mo
644.762 495.84 li
@
gsave
66.48 24.359 mo
645.48 24.359 li
645.48 492 li
66.48 492 li
cp
clp
1 lc
66.48 395.641 mo
138.84 399.48 li
211.078 400.922 li
283.32 412.441 li
355.68 403.199 li
427.922 402.48 li
500.281 410.879 li
572.52 410.16 li
644.762 406.68 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
61.43 390.602 mo
71.391 390.602 li
71.391 400.559 li
61.43 400.559 li
cp
.62829 .284672 0 0 cmyk
@
133.672 394.32 mo
143.629 394.32 li
143.629 404.281 li
133.672 404.281 li
cp
@
205.91 395.762 mo
215.871 395.762 li
215.871 405.719 li
205.91 405.719 li
cp
@
278.27 407.398 mo
288.231 407.398 li
288.231 417.359 li
278.27 417.359 li
cp
@
350.512 398.039 mo
360.469 398.039 li
360.469 408 li
350.512 408 li
cp
@
422.871 397.441 mo
432.828 397.441 li
432.828 407.398 li
422.871 407.398 li
cp
@
495.109 405.719 mo
505.07 405.719 li
505.07 415.68 li
495.109 415.68 li
cp
@
567.352 405.121 mo
577.309 405.121 li
577.309 415.078 li
567.352 415.078 li
cp
@
639.711 401.641 mo
649.672 401.641 li
649.672 411.602 li
639.711 411.602 li
cp
@
gsave
66.48 24.359 mo
645.48 24.359 li
645.48 492 li
66.48 492 li
cp
clp
.96 lw
1 lc
66.48 389.641 mo
138.84 407.16 li
211.078 410.16 li
283.32 420.602 li
355.68 406.68 li
427.922 418.078 li
500.281 409.801 li
572.52 423.961 li
644.762 417.121 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
61.43 384.602 mo
71.391 384.602 li
71.391 394.559 li
61.43 394.559 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
133.672 402 mo
143.629 402 li
143.629 411.961 li
133.672 411.961 li
cp
@
205.91 405.121 mo
215.871 405.121 li
215.871 415.078 li
205.91 415.078 li
cp
@
278.27 415.441 mo
288.231 415.441 li
288.231 425.398 li
278.27 425.398 li
cp
@
350.512 401.641 mo
360.469 401.641 li
360.469 411.602 li
350.512 411.602 li
cp
@
422.871 413.039 mo
432.828 413.039 li
432.828 423 li
422.871 423 li
cp
@
495.109 404.762 mo
505.07 404.762 li
505.07 414.719 li
495.109 414.719 li
cp
@
567.352 418.801 mo
577.309 418.801 li
577.309 428.762 li
567.352 428.762 li
cp
@
639.711 411.961 mo
649.672 411.961 li
649.672 421.922 li
639.711 421.922 li
cp
@
gsave
66.48 24.359 mo
645.48 24.359 li
645.48 492 li
66.48 492 li
cp
clp
.96 lw
1 lc
66.48 381.359 mo
138.84 411.48 li
211.078 414 li
283.32 425.398 li
355.68 423.961 li
427.922 413.52 li
500.281 414.961 li
572.52 422.281 li
644.762 415.559 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
61.43 376.32 mo
71.391 376.32 li
71.391 386.281 li
61.43 386.281 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
133.672 406.32 mo
143.629 406.32 li
143.629 416.281 li
133.672 416.281 li
cp
@
205.91 408.84 mo
215.871 408.84 li
215.871 418.801 li
205.91 418.801 li
cp
@
278.27 420.238 mo
288.231 420.238 li
288.231 430.199 li
278.27 430.199 li
cp
@
350.512 418.801 mo
360.469 418.801 li
360.469 428.762 li
350.512 428.762 li
cp
@
422.871 408.48 mo
432.828 408.48 li
432.828 418.441 li
422.871 418.441 li
cp
@
495.109 409.922 mo
505.07 409.922 li
505.07 419.879 li
495.109 419.879 li
cp
@
567.352 417.121 mo
577.309 417.121 li
577.309 427.078 li
567.352 427.078 li
cp
@
639.711 410.52 mo
649.672 410.52 li
649.672 420.481 li
639.711 420.481 li
cp
@
gsave
66.48 24.359 mo
645.48 24.359 li
645.48 492 li
66.48 492 li
cp
clp
.96 lw
1 lc
66.48 386.398 mo
138.84 404.641 li
211.078 414.602 li
283.32 411.238 li
355.68 412.441 li
427.922 422.641 li
500.281 406.68 li
572.52 413.281 li
644.762 424.801 li
0 .993988 1 0 cmyk
@
grestore
61.43 381.238 mo
71.391 381.238 li
71.391 391.199 li
61.43 391.199 li
cp
0 .993988 1 0 cmyk
@
133.672 399.48 mo
143.629 399.48 li
143.629 409.441 li
133.672 409.441 li
cp
@
205.91 409.441 mo
215.871 409.441 li
215.871 419.398 li
205.91 419.398 li
cp
@
278.27 406.199 mo
288.231 406.199 li
288.231 416.16 li
278.27 416.16 li
cp
@
350.512 407.398 mo
360.469 407.398 li
360.469 417.359 li
350.512 417.359 li
cp
@
422.871 417.602 mo
432.828 417.602 li
432.828 427.559 li
422.871 427.559 li
cp
@
495.109 401.641 mo
505.07 401.641 li
505.07 411.602 li
495.109 411.602 li
cp
@
567.352 408.238 mo
577.309 408.238 li
577.309 418.199 li
567.352 418.199 li
cp
@
639.711 419.641 mo
649.672 419.641 li
649.672 429.602 li
639.711 429.602 li
cp
@
gsave
66.48 24.359 mo
645.48 24.359 li
645.48 492 li
66.48 492 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
66.48 393.84 mo
138.84 405.238 li
211.078 410.879 li
283.32 422.879 li
355.68 414.359 li
427.922 411.238 li
500.281 416.398 li
572.52 416.039 li
644.762 401.879 li
.62829 .284672 0 0 cmyk
@
grestore
61.43 388.68 mo
71.391 388.68 li
71.391 398.641 li
61.43 398.641 li
cp
.62829 .284672 0 0 cmyk
@
133.672 400.078 mo
143.629 400.078 li
143.629 410.039 li
133.672 410.039 li
cp
@
205.91 405.719 mo
215.871 405.719 li
215.871 415.68 li
205.91 415.68 li
cp
@
278.27 417.719 mo
288.231 417.719 li
288.231 427.68 li
278.27 427.68 li
cp
@
350.512 409.32 mo
360.469 409.32 li
360.469 419.281 li
350.512 419.281 li
cp
@
422.871 406.199 mo
432.828 406.199 li
432.828 416.16 li
422.871 416.16 li
cp
@
495.109 411.359 mo
505.07 411.359 li
505.07 421.32 li
495.109 421.32 li
cp
@
567.352 410.879 mo
577.309 410.879 li
577.309 420.84 li
567.352 420.84 li
cp
@
639.711 396.84 mo
649.672 396.84 li
649.672 406.801 li
639.711 406.801 li
cp
@
gsave
66.48 24.359 mo
645.48 24.359 li
645.48 492 li
66.48 492 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
66.48 394.922 mo
138.84 413.281 li
211.078 419.16 li
283.32 423.238 li
355.68 410.398 li
427.922 419.16 li
500.281 410.16 li
572.52 417.48 li
644.762 409.199 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
61.91 390.238 mo
70.91 390.238 li
70.91 399.238 li
61.91 399.238 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
134.148 408.719 mo
143.148 408.719 li
143.148 417.719 li
134.148 417.719 li
cp
@
206.391 414.48 mo
215.391 414.48 li
215.391 423.48 li
206.391 423.48 li
cp
@
278.75 418.68 mo
287.75 418.68 li
287.75 427.68 li
278.75 427.68 li
cp
@
350.988 405.84 mo
359.988 405.84 li
359.988 414.84 li
350.988 414.84 li
cp
@
423.352 414.48 mo
432.352 414.48 li
432.352 423.48 li
423.352 423.48 li
cp
@
495.59 405.602 mo
504.59 405.602 li
504.59 414.602 li
495.59 414.602 li
cp
@
567.828 412.801 mo
576.828 412.801 li
576.828 421.801 li
567.828 421.801 li
cp
@
640.191 404.52 mo
649.191 404.52 li
649.191 413.52 li
640.191 413.52 li
cp
@
gsave
66.48 24.359 mo
645.48 24.359 li
645.48 492 li
66.48 492 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
66.48 390.48 mo
138.84 406.32 li
211.078 407.762 li
283.32 426 li
355.68 414 li
427.922 411.84 li
500.281 406.68 li
572.52 403.559 li
644.762 420.602 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
61.43 385.441 mo
71.391 385.441 li
71.391 395.398 li
61.43 395.398 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
133.672 401.16 mo
143.629 401.16 li
143.629 411.121 li
133.672 411.121 li
cp
@
205.91 402.602 mo
215.871 402.602 li
215.871 412.559 li
205.91 412.559 li
cp
@
278.27 420.84 mo
288.231 420.84 li
288.231 430.801 li
278.27 430.801 li
cp
@
350.512 408.84 mo
360.469 408.84 li
360.469 418.801 li
350.512 418.801 li
cp
@
422.871 406.801 mo
432.828 406.801 li
432.828 416.762 li
422.871 416.762 li
cp
@
495.109 401.641 mo
505.07 401.641 li
505.07 411.602 li
495.109 411.602 li
cp
@
567.352 398.52 mo
577.309 398.52 li
577.309 408.481 li
567.352 408.481 li
cp
@
639.711 415.441 mo
649.672 415.441 li
649.672 425.398 li
639.711 425.398 li
cp
@
gsave
66.48 24.359 mo
645.48 24.359 li
645.48 492 li
66.48 492 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
66.48 379.32 mo
138.84 410.16 li
211.078 408.359 li
283.32 414.961 li
355.68 420.121 li
427.922 420.602 li
500.281 405 li
572.52 417.121 li
644.762 412.32 li
0 .993988 1 0 cmyk
@
grestore
61.43 374.16 mo
71.391 374.16 li
71.391 384.121 li
61.43 384.121 li
cp
0 .993988 1 0 cmyk
@
133.672 405.121 mo
143.629 405.121 li
143.629 415.078 li
133.672 415.078 li
cp
@
205.91 403.199 mo
215.871 403.199 li
215.871 413.16 li
205.91 413.16 li
cp
@
278.27 409.922 mo
288.231 409.922 li
288.231 419.879 li
278.27 419.879 li
cp
@
350.512 415.078 mo
360.469 415.078 li
360.469 425.039 li
350.512 425.039 li
cp
@
422.871 415.441 mo
432.828 415.441 li
432.828 425.398 li
422.871 425.398 li
cp
@
495.109 399.961 mo
505.07 399.961 li
505.07 409.922 li
495.109 409.922 li
cp
@
567.352 411.961 mo
577.309 411.961 li
577.309 421.922 li
567.352 421.922 li
cp
@
639.711 407.16 mo
649.672 407.16 li
649.672 417.121 li
639.711 417.121 li
cp
@
32.613 482.031 mo
53.504 482.031 li
53.504 499.121 li
32.613 499.121 li
cp
0 0 0 0 cmyk
ef
39.246 490.977 mo
39.242 491.66 39.191 492.281 39.086 492.844 cv
38.977 493.406 38.797 493.891 38.551 494.293 cv
38.297 494.699 37.969 495.012 37.57 495.23 cv
37.164 495.453 36.672 495.562 36.086 495.562 cv
35.527 495.562 35.055 495.465 34.676 495.266 cv
34.293 495.07 33.988 494.777 33.754 494.391 cv
33.52 494.004 33.352 493.531 33.258 492.965 cv
33.156 492.402 33.109 491.754 33.109 491.02 cv
33.109 490.348 33.164 489.727 33.273 489.16 cv
33.383 488.598 33.559 488.113 33.809 487.707 cv
34.051 487.305 34.375 486.992 34.781 486.766 cv
35.18 486.547 35.676 486.434 36.266 486.434 cv
36.824 486.434 37.297 486.535 37.68 486.73 cv
38.063 486.934 38.367 487.227 38.602 487.609 cv
38.832 488 39 488.473 39.098 489.035 cv
39.195 489.598 39.242 490.246 39.246 490.977 cv
cp
38.039 491.059 mo
38.035 490.617 38.02 490.219 37.992 489.867 cv
37.957 489.516 37.91 489.207 37.852 488.937 cv
37.785 488.668 37.707 488.437 37.609 488.242 cv
37.512 488.051 37.395 487.891 37.258 487.762 cv
37.117 487.637 36.957 487.543 36.785 487.484 cv
36.605 487.43 36.41 487.402 36.195 487.398 cv
35.805 487.402 35.488 487.492 35.25 487.676 cv
35.004 487.859 34.813 488.113 34.676 488.43 cv
34.535 488.75 34.441 489.121 34.391 489.551 cv
34.34 489.98 34.316 490.445 34.316 490.937 cv
34.316 491.602 34.348 492.164 34.418 492.625 cv
34.484 493.094 34.594 493.473 34.746 493.762 cv
34.891 494.059 35.082 494.27 35.313 494.398 cv
35.543 494.535 35.824 494.602 36.156 494.598 cv
36.41 494.602 36.633 494.562 36.828 494.477 cv
37.02 494.398 37.188 494.277 37.328 494.121 cv
37.469 493.969 37.582 493.785 37.676 493.57 cv
37.762 493.355 37.836 493.117 37.895 492.855 cv
37.945 492.598 37.984 492.316 38.008 492.012 cv
38.027 491.707 38.035 491.391 38.039 491.059 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.242 494.687 mo
42.242 495.016 42.188 495.23 42.082 495.336 cv
41.973 495.441 41.777 495.492 41.496 495.496 cv
41.219 495.492 41.027 495.441 40.926 495.34 cv
40.816 495.234 40.766 495.023 40.77 494.707 cv
40.766 494.383 40.82 494.168 40.93 494.059 cv
41.035 493.953 41.23 493.898 41.516 493.898 cv
41.789 493.898 41.977 493.953 42.086 494.059 cv
42.188 494.164 42.242 494.375 42.242 494.687 cv
cp
f
49.902 490.977 mo
49.898 491.66 49.848 492.281 49.742 492.844 cv
49.633 493.406 49.453 493.891 49.207 494.293 cv
48.953 494.699 48.625 495.012 48.227 495.23 cv
47.82 495.453 47.328 495.562 46.742 495.562 cv
46.184 495.562 45.711 495.465 45.332 495.266 cv
44.949 495.07 44.645 494.777 44.41 494.391 cv
44.176 494.004 44.008 493.531 43.914 492.965 cv
43.813 492.402 43.766 491.754 43.766 491.02 cv
43.766 490.348 43.82 489.727 43.93 489.16 cv
44.039 488.598 44.215 488.113 44.465 487.707 cv
44.707 487.305 45.031 486.992 45.438 486.766 cv
45.836 486.547 46.332 486.434 46.922 486.434 cv
47.48 486.434 47.953 486.535 48.336 486.73 cv
48.719 486.934 49.023 487.227 49.258 487.609 cv
49.488 488 49.656 488.473 49.754 489.035 cv
49.852 489.598 49.898 490.246 49.902 490.977 cv
cp
48.695 491.059 mo
48.691 490.617 48.676 490.219 48.648 489.867 cv
48.613 489.516 48.566 489.207 48.508 488.937 cv
48.441 488.668 48.363 488.437 48.266 488.242 cv
48.168 488.051 48.051 487.891 47.914 487.762 cv
47.773 487.637 47.613 487.543 47.441 487.484 cv
47.262 487.43 47.066 487.402 46.852 487.398 cv
46.461 487.402 46.145 487.492 45.906 487.676 cv
45.66 487.859 45.469 488.113 45.332 488.43 cv
45.191 488.75 45.098 489.121 45.047 489.551 cv
44.996 489.98 44.973 490.445 44.973 490.937 cv
44.973 491.602 45.004 492.164 45.074 492.625 cv
45.141 493.094 45.25 493.473 45.402 493.762 cv
45.547 494.059 45.738 494.27 45.969 494.398 cv
46.199 494.535 46.48 494.602 46.813 494.598 cv
47.066 494.602 47.289 494.562 47.484 494.477 cv
47.676 494.398 47.844 494.277 47.984 494.121 cv
48.125 493.969 48.238 493.785 48.332 493.57 cv
48.418 493.355 48.492 493.117 48.551 492.855 cv
48.602 492.598 48.641 492.316 48.664 492.012 cv
48.684 491.707 48.691 491.391 48.695 491.059 cv
cp
f
32.613 430.16 mo
53.504 430.16 li
53.504 447.25 li
32.613 447.25 li
cp
0 0 0 0 cmyk
ef
38.953 443.062 mo
38.949 443.148 38.945 443.223 38.934 443.285 cv
38.922 443.352 38.906 443.406 38.887 443.445 cv
38.863 443.492 38.836 443.523 38.805 443.539 cv
38.77 443.562 38.73 443.57 38.691 443.57 cv
33.789 443.57 li
33.727 443.57 33.668 443.562 33.621 443.547 cv
33.57 443.531 33.531 443.508 33.496 443.469 cv
33.461 443.437 33.434 443.383 33.422 443.312 cv
33.402 443.242 33.395 443.156 33.398 443.055 cv
33.395 442.965 33.398 442.887 33.406 442.816 cv
33.41 442.75 33.426 442.691 33.453 442.637 cv
33.477 442.586 33.508 442.531 33.543 442.477 cv
33.578 442.426 33.621 442.371 33.68 442.309 cv
35.453 440.484 li
35.863 440.066 36.191 439.691 36.441 439.355 cv
36.688 439.027 36.879 438.723 37.012 438.445 cv
37.145 438.172 37.23 437.922 37.277 437.695 cv
37.316 437.473 37.34 437.262 37.34 437.066 cv
37.34 436.871 37.305 436.687 37.238 436.508 cv
37.172 436.336 37.078 436.18 36.953 436.043 cv
36.828 435.914 36.672 435.809 36.484 435.727 cv
36.297 435.652 36.078 435.613 35.832 435.609 cv
35.543 435.613 35.285 435.652 35.059 435.727 cv
34.828 435.809 34.629 435.895 34.457 435.98 cv
34.285 436.074 34.141 436.156 34.023 436.234 cv
33.906 436.312 33.82 436.352 33.77 436.352 cv
33.734 436.352 33.703 436.344 33.68 436.324 cv
33.648 436.309 33.629 436.277 33.613 436.234 cv
33.598 436.195 33.582 436.141 33.574 436.07 cv
33.563 436.004 33.559 435.922 33.563 435.824 cv
33.559 435.758 33.563 435.699 33.57 435.648 cv
33.574 435.598 33.582 435.555 33.594 435.516 cv
33.602 435.48 33.617 435.445 33.637 435.414 cv
33.656 435.383 33.691 435.344 33.75 435.293 cv
33.801 435.246 33.895 435.18 34.031 435.098 cv
34.164 435.016 34.336 434.937 34.539 434.855 cv
34.742 434.777 34.965 434.707 35.211 434.652 cv
35.453 434.598 35.711 434.57 35.984 434.57 cv
36.41 434.57 36.785 434.633 37.109 434.754 cv
37.43 434.875 37.695 435.039 37.91 435.25 cv
38.121 435.461 38.281 435.707 38.387 435.98 cv
38.492 436.262 38.547 436.559 38.547 436.871 cv
38.547 437.16 38.52 437.441 38.469 437.719 cv
38.418 438.004 38.313 438.309 38.152 438.633 cv
37.988 438.961 37.754 439.324 37.449 439.723 cv
37.141 440.125 36.734 440.586 36.23 441.102 cv
34.824 442.57 li
38.684 442.57 li
38.715 442.574 38.75 442.586 38.789 442.602 cv
38.82 442.625 38.852 442.656 38.879 442.695 cv
38.902 442.738 38.922 442.789 38.934 442.848 cv
38.945 442.914 38.949 442.984 38.953 443.062 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.242 442.824 mo
42.242 443.152 42.188 443.367 42.082 443.473 cv
41.973 443.578 41.777 443.629 41.496 443.633 cv
41.219 443.629 41.027 443.578 40.926 443.477 cv
40.816 443.371 40.766 443.16 40.77 442.844 cv
40.766 442.52 40.82 442.305 40.93 442.195 cv
41.035 442.09 41.23 442.035 41.516 442.035 cv
41.789 442.035 41.977 442.09 42.086 442.195 cv
42.188 442.301 42.242 442.512 42.242 442.824 cv
cp
f
49.566 440.719 mo
49.566 441.195 49.484 441.617 49.324 441.988 cv
49.164 442.359 48.938 442.672 48.648 442.926 cv
48.352 443.18 48.004 443.375 47.602 443.504 cv
47.195 443.637 46.746 443.699 46.254 443.699 cv
45.977 443.699 45.715 443.68 45.473 443.641 cv
45.223 443.602 45.004 443.555 44.816 443.5 cv
44.621 443.445 44.465 443.391 44.34 443.332 cv
44.215 443.281 44.137 443.238 44.105 443.203 cv
44.07 443.172 44.047 443.141 44.035 443.113 cv
44.02 443.086 44.004 443.055 43.996 443.012 cv
43.98 442.977 43.973 442.926 43.973 442.863 cv
43.965 442.805 43.965 442.734 43.965 442.652 cv
43.965 442.578 43.969 442.508 43.977 442.445 cv
43.984 442.383 43.996 442.332 44.016 442.293 cv
44.031 442.254 44.051 442.227 44.078 442.207 cv
44.102 442.191 44.133 442.184 44.164 442.18 cv
44.211 442.184 44.281 442.211 44.375 442.266 cv
44.469 442.324 44.598 442.387 44.762 442.453 cv
44.926 442.52 45.125 442.582 45.367 442.641 cv
45.602 442.699 45.887 442.727 46.223 442.727 cv
46.523 442.727 46.805 442.691 47.063 442.617 cv
47.316 442.547 47.539 442.434 47.727 442.277 cv
47.91 442.125 48.055 441.93 48.16 441.691 cv
48.266 441.457 48.316 441.168 48.32 440.828 cv
48.316 440.547 48.273 440.297 48.184 440.078 cv
48.094 439.859 47.957 439.68 47.773 439.535 cv
47.586 439.395 47.352 439.289 47.07 439.215 cv
46.785 439.145 46.445 439.105 46.059 439.105 cv
45.773 439.105 45.535 439.121 45.336 439.148 cv
45.133 439.18 44.945 439.195 44.773 439.191 cv
44.645 439.195 44.551 439.164 44.5 439.102 cv
44.441 439.043 44.414 438.93 44.418 438.758 cv
44.418 435.145 li
44.414 434.996 44.449 434.887 44.523 434.809 cv
44.59 434.738 44.691 434.699 44.828 434.699 cv
48.758 434.699 li
48.793 434.699 48.828 434.711 48.863 434.73 cv
48.895 434.754 48.922 434.785 48.949 434.824 cv
48.969 434.867 48.984 434.918 49 434.98 cv
49.008 435.047 49.016 435.125 49.02 435.207 cv
49.016 435.375 48.992 435.5 48.953 435.59 cv
48.906 435.684 48.848 435.73 48.77 435.727 cv
45.598 435.727 li
45.598 438.215 li
45.75 438.195 45.906 438.184 46.07 438.176 cv
46.227 438.172 46.414 438.168 46.629 438.168 cv
47.113 438.168 47.539 438.23 47.906 438.352 cv
48.27 438.473 48.574 438.645 48.824 438.863 cv
49.066 439.09 49.254 439.355 49.379 439.668 cv
49.504 439.984 49.566 440.336 49.566 440.719 cv
cp
f
32.613 378.281 mo
53.504 378.281 li
53.504 395.371 li
32.613 395.371 li
cp
0 0 0 0 cmyk
ef
38.91 388.828 mo
38.91 389.305 38.828 389.727 38.668 390.098 cv
38.508 390.469 38.281 390.781 37.992 391.035 cv
37.695 391.289 37.348 391.484 36.945 391.613 cv
36.539 391.746 36.09 391.809 35.598 391.809 cv
35.32 391.809 35.059 391.789 34.816 391.75 cv
34.566 391.711 34.348 391.664 34.16 391.609 cv
33.965 391.555 33.809 391.5 33.684 391.441 cv
33.559 391.391 33.48 391.348 33.449 391.312 cv
33.414 391.281 33.391 391.25 33.379 391.223 cv
33.363 391.195 33.348 391.164 33.34 391.121 cv
33.324 391.086 33.316 391.035 33.316 390.973 cv
33.309 390.914 33.309 390.844 33.309 390.762 cv
33.309 390.687 33.313 390.617 33.32 390.555 cv
33.328 390.492 33.34 390.441 33.359 390.402 cv
33.375 390.363 33.395 390.336 33.422 390.316 cv
33.445 390.301 33.477 390.293 33.508 390.289 cv
33.555 390.293 33.625 390.32 33.719 390.375 cv
33.813 390.434 33.941 390.496 34.105 390.562 cv
34.27 390.629 34.469 390.691 34.711 390.75 cv
34.945 390.809 35.23 390.836 35.566 390.836 cv
35.867 390.836 36.148 390.801 36.406 390.727 cv
36.66 390.656 36.883 390.543 37.07 390.387 cv
37.254 390.234 37.398 390.039 37.504 389.801 cv
37.609 389.566 37.66 389.277 37.664 388.937 cv
37.66 388.656 37.617 388.406 37.527 388.187 cv
37.438 387.969 37.301 387.789 37.117 387.645 cv
36.93 387.504 36.695 387.398 36.414 387.324 cv
36.129 387.254 35.789 387.215 35.402 387.215 cv
35.117 387.215 34.879 387.23 34.68 387.258 cv
34.477 387.289 34.289 387.305 34.117 387.301 cv
33.988 387.305 33.895 387.273 33.844 387.211 cv
33.785 387.152 33.758 387.039 33.762 386.867 cv
33.762 383.254 li
33.758 383.105 33.793 382.996 33.867 382.918 cv
33.934 382.848 34.035 382.809 34.172 382.809 cv
38.102 382.809 li
38.137 382.809 38.172 382.82 38.207 382.84 cv
38.238 382.863 38.266 382.895 38.293 382.934 cv
38.313 382.977 38.328 383.027 38.344 383.09 cv
38.352 383.156 38.359 383.234 38.363 383.316 cv
38.359 383.484 38.336 383.609 38.297 383.699 cv
38.25 383.793 38.191 383.84 38.113 383.836 cv
34.941 383.836 li
34.941 386.324 li
35.094 386.305 35.25 386.293 35.414 386.285 cv
35.57 386.281 35.758 386.277 35.973 386.277 cv
36.457 386.277 36.883 386.34 37.25 386.461 cv
37.613 386.582 37.918 386.754 38.168 386.973 cv
38.41 387.199 38.598 387.465 38.723 387.777 cv
38.848 388.094 38.91 388.445 38.91 388.828 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.242 390.934 mo
42.242 391.262 42.188 391.477 42.082 391.582 cv
41.973 391.687 41.777 391.738 41.496 391.742 cv
41.219 391.738 41.027 391.687 40.926 391.586 cv
40.816 391.48 40.766 391.27 40.77 390.953 cv
40.766 390.629 40.82 390.414 40.93 390.305 cv
41.035 390.199 41.23 390.145 41.516 390.145 cv
41.789 390.145 41.977 390.199 42.086 390.305 cv
42.188 390.41 42.242 390.621 42.242 390.934 cv
cp
f
49.902 387.223 mo
49.898 387.906 49.848 388.527 49.742 389.09 cv
49.633 389.652 49.453 390.137 49.207 390.539 cv
48.953 390.945 48.625 391.258 48.227 391.477 cv
47.82 391.699 47.328 391.809 46.742 391.809 cv
46.184 391.809 45.711 391.711 45.332 391.512 cv
44.949 391.316 44.645 391.023 44.41 390.637 cv
44.176 390.25 44.008 389.777 43.914 389.211 cv
43.813 388.648 43.766 388 43.766 387.266 cv
43.766 386.594 43.82 385.973 43.93 385.406 cv
44.039 384.844 44.215 384.359 44.465 383.953 cv
44.707 383.551 45.031 383.238 45.438 383.012 cv
45.836 382.793 46.332 382.68 46.922 382.68 cv
47.48 382.68 47.953 382.781 48.336 382.977 cv
48.719 383.18 49.023 383.473 49.258 383.855 cv
49.488 384.246 49.656 384.719 49.754 385.281 cv
49.852 385.844 49.898 386.492 49.902 387.223 cv
cp
48.695 387.305 mo
48.691 386.863 48.676 386.465 48.648 386.113 cv
48.613 385.762 48.566 385.453 48.508 385.184 cv
48.441 384.914 48.363 384.684 48.266 384.488 cv
48.168 384.297 48.051 384.137 47.914 384.008 cv
47.773 383.883 47.613 383.789 47.441 383.73 cv
47.262 383.676 47.066 383.648 46.852 383.645 cv
46.461 383.648 46.145 383.738 45.906 383.922 cv
45.66 384.105 45.469 384.359 45.332 384.676 cv
45.191 384.996 45.098 385.367 45.047 385.797 cv
44.996 386.227 44.973 386.691 44.973 387.184 cv
44.973 387.848 45.004 388.41 45.074 388.871 cv
45.141 389.34 45.25 389.719 45.402 390.008 cv
45.547 390.305 45.738 390.516 45.969 390.645 cv
46.199 390.781 46.48 390.848 46.813 390.844 cv
47.066 390.848 47.289 390.809 47.484 390.723 cv
47.676 390.645 47.844 390.523 47.984 390.367 cv
48.125 390.215 48.238 390.031 48.332 389.816 cv
48.418 389.602 48.492 389.363 48.551 389.102 cv
48.602 388.844 48.641 388.562 48.664 388.258 cv
48.684 387.953 48.691 387.637 48.695 387.305 cv
cp
f
32.613 326.41 mo
53.504 326.41 li
53.504 343.5 li
32.613 343.5 li
cp
0 0 0 0 cmyk
ef
39.082 331.426 mo
39.078 331.512 39.074 331.586 39.07 331.648 cv
39.063 331.719 39.055 331.781 39.043 331.84 cv
39.031 331.906 39.016 331.965 38.996 332.02 cv
38.973 332.078 38.949 332.141 38.926 332.199 cv
35.73 339.562 li
35.703 339.621 35.676 339.664 35.645 339.695 cv
35.609 339.73 35.566 339.758 35.512 339.777 cv
35.457 339.797 35.387 339.809 35.309 339.82 cv
35.223 339.824 35.125 339.828 35.008 339.832 cv
34.852 339.828 34.73 339.82 34.645 339.809 cv
34.559 339.793 34.496 339.777 34.457 339.746 cv
34.418 339.719 34.398 339.68 34.406 339.637 cv
34.406 339.594 34.422 339.543 34.453 339.48 cv
37.813 331.953 li
33.555 331.953 li
33.469 331.957 33.402 331.91 33.359 331.816 cv
33.316 331.727 33.297 331.598 33.297 331.434 cv
33.297 331.348 33.301 331.273 33.313 331.207 cv
33.324 331.145 33.34 331.09 33.363 331.047 cv
33.383 331.004 33.41 330.973 33.445 330.949 cv
33.477 330.93 33.516 330.918 33.555 330.918 cv
38.727 330.918 li
38.785 330.918 38.84 330.926 38.891 330.941 cv
38.938 330.957 38.973 330.984 39 331.023 cv
39.023 331.062 39.043 331.117 39.059 331.18 cv
39.07 331.246 39.078 331.328 39.082 331.426 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.242 339.043 mo
42.242 339.371 42.188 339.586 42.082 339.691 cv
41.973 339.797 41.777 339.848 41.496 339.852 cv
41.219 339.848 41.027 339.797 40.926 339.695 cv
40.816 339.59 40.766 339.379 40.77 339.062 cv
40.766 338.738 40.82 338.523 40.93 338.414 cv
41.035 338.309 41.23 338.254 41.516 338.254 cv
41.789 338.254 41.977 338.309 42.086 338.414 cv
42.188 338.52 42.242 338.73 42.242 339.043 cv
cp
f
49.566 336.937 mo
49.566 337.414 49.484 337.836 49.324 338.207 cv
49.164 338.578 48.938 338.891 48.648 339.145 cv
48.352 339.398 48.004 339.594 47.602 339.723 cv
47.195 339.855 46.746 339.918 46.254 339.918 cv
45.977 339.918 45.715 339.898 45.473 339.859 cv
45.223 339.82 45.004 339.773 44.816 339.719 cv
44.621 339.664 44.465 339.609 44.34 339.551 cv
44.215 339.5 44.137 339.457 44.105 339.422 cv
44.07 339.391 44.047 339.359 44.035 339.332 cv
44.02 339.305 44.004 339.273 43.996 339.23 cv
43.98 339.195 43.973 339.145 43.973 339.082 cv
43.965 339.023 43.965 338.953 43.965 338.871 cv
43.965 338.797 43.969 338.727 43.977 338.664 cv
43.984 338.602 43.996 338.551 44.016 338.512 cv
44.031 338.473 44.051 338.445 44.078 338.426 cv
44.102 338.41 44.133 338.402 44.164 338.398 cv
44.211 338.402 44.281 338.43 44.375 338.484 cv
44.469 338.543 44.598 338.605 44.762 338.672 cv
44.926 338.738 45.125 338.801 45.367 338.859 cv
45.602 338.918 45.887 338.945 46.223 338.945 cv
46.523 338.945 46.805 338.91 47.063 338.836 cv
47.316 338.766 47.539 338.652 47.727 338.496 cv
47.91 338.344 48.055 338.148 48.16 337.91 cv
48.266 337.676 48.316 337.387 48.32 337.047 cv
48.316 336.766 48.273 336.516 48.184 336.297 cv
48.094 336.078 47.957 335.898 47.773 335.754 cv
47.586 335.613 47.352 335.508 47.07 335.434 cv
46.785 335.363 46.445 335.324 46.059 335.324 cv
45.773 335.324 45.535 335.34 45.336 335.367 cv
45.133 335.398 44.945 335.414 44.773 335.41 cv
44.645 335.414 44.551 335.383 44.5 335.32 cv
44.441 335.262 44.414 335.148 44.418 334.977 cv
44.418 331.363 li
44.414 331.215 44.449 331.105 44.523 331.027 cv
44.59 330.957 44.691 330.918 44.828 330.918 cv
48.758 330.918 li
48.793 330.918 48.828 330.93 48.863 330.949 cv
48.895 330.973 48.922 331.004 48.949 331.043 cv
48.969 331.086 48.984 331.137 49 331.199 cv
49.008 331.266 49.016 331.344 49.02 331.426 cv
49.016 331.594 48.992 331.719 48.953 331.809 cv
48.906 331.902 48.848 331.949 48.77 331.945 cv
45.598 331.945 li
45.598 334.434 li
45.75 334.414 45.906 334.402 46.07 334.395 cv
46.227 334.391 46.414 334.387 46.629 334.387 cv
47.113 334.387 47.539 334.449 47.906 334.57 cv
48.27 334.691 48.574 334.863 48.824 335.082 cv
49.066 335.309 49.254 335.574 49.379 335.887 cv
49.504 336.203 49.566 336.555 49.566 336.937 cv
cp
f
25.52 274.531 mo
53.504 274.531 li
53.504 291.621 li
25.52 291.621 li
cp
0 0 0 0 cmyk
ef
31.891 287.434 mo
31.887 287.523 31.879 287.594 31.867 287.652 cv
31.852 287.715 31.832 287.766 31.813 287.797 cv
31.789 287.836 31.766 287.859 31.734 287.875 cv
31.703 287.891 31.672 287.898 31.645 287.898 cv
27.008 287.898 li
26.973 287.898 26.945 287.891 26.918 287.875 cv
26.891 287.859 26.863 287.836 26.84 287.797 cv
26.813 287.766 26.793 287.715 26.781 287.652 cv
26.766 287.594 26.758 287.523 26.762 287.434 cv
26.758 287.355 26.766 287.281 26.781 287.219 cv
26.793 287.16 26.809 287.113 26.832 287.074 cv
26.848 287.039 26.875 287.008 26.906 286.984 cv
26.938 286.965 26.969 286.957 27.008 286.953 cv
28.859 286.953 li
28.859 280.207 li
27.145 281.227 li
27.055 281.277 26.984 281.305 26.938 281.312 cv
26.883 281.32 26.84 281.312 26.809 281.281 cv
26.773 281.254 26.754 281.203 26.742 281.133 cv
26.73 281.066 26.723 280.98 26.727 280.871 cv
26.723 280.797 26.727 280.73 26.738 280.672 cv
26.742 280.621 26.754 280.574 26.77 280.535 cv
26.781 280.5 26.801 280.469 26.824 280.441 cv
26.848 280.414 26.879 280.387 26.926 280.359 cv
28.969 279.047 li
28.984 279.035 29.004 279.023 29.035 279.016 cv
29.059 279.008 29.094 279 29.141 278.988 cv
29.18 278.98 29.23 278.973 29.285 278.969 cv
29.34 278.969 29.406 278.969 29.492 278.965 cv
29.598 278.969 29.691 278.973 29.766 278.98 cv
29.836 278.988 29.891 279.004 29.938 279.02 cv
29.977 279.039 30.004 279.059 30.02 279.082 cv
30.027 279.109 30.035 279.133 30.039 279.156 cv
30.039 286.953 li
31.645 286.953 li
31.68 286.957 31.715 286.965 31.746 286.984 cv
31.777 287.008 31.801 287.039 31.824 287.074 cv
31.84 287.113 31.855 287.16 31.871 287.219 cv
31.879 287.281 31.887 287.355 31.891 287.434 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.281 283.441 mo
39.277 284.125 39.227 284.746 39.121 285.309 cv
39.012 285.871 38.832 286.355 38.586 286.758 cv
38.332 287.164 38.004 287.477 37.605 287.695 cv
37.199 287.918 36.707 288.027 36.121 288.027 cv
35.563 288.027 35.09 287.93 34.711 287.73 cv
34.328 287.535 34.023 287.242 33.789 286.855 cv
33.555 286.469 33.387 285.996 33.293 285.43 cv
33.191 284.867 33.145 284.219 33.145 283.484 cv
33.145 282.812 33.199 282.191 33.309 281.625 cv
33.418 281.062 33.594 280.578 33.844 280.172 cv
34.086 279.77 34.41 279.457 34.816 279.23 cv
35.215 279.012 35.711 278.898 36.301 278.898 cv
36.859 278.898 37.332 279 37.715 279.195 cv
38.098 279.398 38.402 279.691 38.637 280.074 cv
38.867 280.465 39.035 280.937 39.133 281.5 cv
39.23 282.062 39.277 282.711 39.281 283.441 cv
cp
38.074 283.523 mo
38.07 283.082 38.055 282.684 38.027 282.332 cv
37.992 281.98 37.945 281.672 37.887 281.402 cv
37.82 281.133 37.742 280.902 37.645 280.707 cv
37.547 280.516 37.43 280.355 37.293 280.227 cv
37.152 280.102 36.992 280.008 36.82 279.949 cv
36.641 279.895 36.445 279.867 36.23 279.863 cv
35.84 279.867 35.523 279.957 35.285 280.141 cv
35.039 280.324 34.848 280.578 34.711 280.895 cv
34.57 281.215 34.477 281.586 34.426 282.016 cv
34.375 282.445 34.352 282.91 34.352 283.402 cv
34.352 284.066 34.383 284.629 34.453 285.09 cv
34.52 285.559 34.629 285.937 34.781 286.227 cv
34.926 286.523 35.117 286.734 35.348 286.863 cv
35.578 287 35.859 287.066 36.191 287.062 cv
36.445 287.066 36.668 287.027 36.863 286.941 cv
37.055 286.863 37.223 286.742 37.363 286.586 cv
37.504 286.434 37.617 286.25 37.711 286.035 cv
37.797 285.82 37.871 285.582 37.93 285.32 cv
37.98 285.062 38.02 284.781 38.043 284.477 cv
38.063 284.172 38.07 283.855 38.074 283.523 cv
cp
f
42.211 287.152 mo
42.211 287.48 42.156 287.695 42.051 287.801 cv
41.941 287.906 41.746 287.957 41.465 287.961 cv
41.188 287.957 40.996 287.906 40.895 287.805 cv
40.785 287.699 40.734 287.488 40.738 287.172 cv
40.734 286.848 40.789 286.633 40.898 286.523 cv
41.004 286.418 41.199 286.363 41.484 286.363 cv
41.758 286.363 41.945 286.418 42.055 286.523 cv
42.156 286.629 42.211 286.84 42.211 287.152 cv
cp
f
49.91 283.441 mo
49.906 284.125 49.855 284.746 49.75 285.309 cv
49.641 285.871 49.461 286.355 49.215 286.758 cv
48.961 287.164 48.633 287.477 48.234 287.695 cv
47.828 287.918 47.336 288.027 46.75 288.027 cv
46.191 288.027 45.719 287.93 45.34 287.73 cv
44.957 287.535 44.652 287.242 44.418 286.855 cv
44.184 286.469 44.016 285.996 43.922 285.43 cv
43.82 284.867 43.773 284.219 43.773 283.484 cv
43.773 282.812 43.828 282.191 43.938 281.625 cv
44.047 281.062 44.223 280.578 44.473 280.172 cv
44.715 279.77 45.039 279.457 45.445 279.23 cv
45.844 279.012 46.34 278.898 46.93 278.898 cv
47.488 278.898 47.961 279 48.344 279.195 cv
48.727 279.398 49.031 279.691 49.266 280.074 cv
49.496 280.465 49.664 280.937 49.762 281.5 cv
49.859 282.062 49.906 282.711 49.91 283.441 cv
cp
48.703 283.523 mo
48.699 283.082 48.684 282.684 48.656 282.332 cv
48.621 281.98 48.574 281.672 48.516 281.402 cv
48.449 281.133 48.371 280.902 48.273 280.707 cv
48.176 280.516 48.059 280.355 47.922 280.227 cv
47.781 280.102 47.621 280.008 47.449 279.949 cv
47.27 279.895 47.074 279.867 46.859 279.863 cv
46.469 279.867 46.152 279.957 45.914 280.141 cv
45.668 280.324 45.477 280.578 45.34 280.895 cv
45.199 281.215 45.105 281.586 45.055 282.016 cv
45.004 282.445 44.98 282.91 44.98 283.402 cv
44.98 284.066 45.012 284.629 45.082 285.09 cv
45.148 285.559 45.258 285.937 45.41 286.227 cv
45.555 286.523 45.746 286.734 45.977 286.863 cv
46.207 287 46.488 287.066 46.82 287.062 cv
47.074 287.066 47.297 287.027 47.492 286.941 cv
47.684 286.863 47.852 286.742 47.992 286.586 cv
48.133 286.434 48.246 286.25 48.34 286.035 cv
48.426 285.82 48.5 285.582 48.559 285.32 cv
48.609 285.062 48.648 284.781 48.672 284.477 cv
48.691 284.172 48.699 283.855 48.703 283.523 cv
cp
f
25.52 222.66 mo
53.504 222.66 li
53.504 239.75 li
25.52 239.75 li
cp
0 0 0 0 cmyk
ef
31.891 235.555 mo
31.887 235.645 31.879 235.715 31.867 235.773 cv
31.852 235.836 31.832 235.887 31.813 235.918 cv
31.789 235.957 31.766 235.98 31.734 235.996 cv
31.703 236.012 31.672 236.02 31.645 236.02 cv
27.008 236.02 li
26.973 236.02 26.945 236.012 26.918 235.996 cv
26.891 235.98 26.863 235.957 26.84 235.918 cv
26.813 235.887 26.793 235.836 26.781 235.773 cv
26.766 235.715 26.758 235.645 26.762 235.555 cv
26.758 235.477 26.766 235.402 26.781 235.34 cv
26.793 235.281 26.809 235.234 26.832 235.195 cv
26.848 235.16 26.875 235.129 26.906 235.105 cv
26.938 235.086 26.969 235.078 27.008 235.074 cv
28.859 235.074 li
28.859 228.328 li
27.145 229.348 li
27.055 229.398 26.984 229.426 26.938 229.434 cv
26.883 229.441 26.84 229.434 26.809 229.402 cv
26.773 229.375 26.754 229.324 26.742 229.254 cv
26.73 229.187 26.723 229.102 26.727 228.992 cv
26.723 228.918 26.727 228.852 26.738 228.793 cv
26.742 228.742 26.754 228.695 26.77 228.656 cv
26.781 228.621 26.801 228.59 26.824 228.562 cv
26.848 228.535 26.879 228.508 26.926 228.48 cv
28.969 227.168 li
28.984 227.156 29.004 227.145 29.035 227.137 cv
29.059 227.129 29.094 227.121 29.141 227.109 cv
29.18 227.102 29.23 227.094 29.285 227.09 cv
29.34 227.09 29.406 227.09 29.492 227.086 cv
29.598 227.09 29.691 227.094 29.766 227.102 cv
29.836 227.109 29.891 227.125 29.938 227.141 cv
29.977 227.16 30.004 227.18 30.02 227.203 cv
30.027 227.23 30.035 227.254 30.039 227.277 cv
30.039 235.074 li
31.645 235.074 li
31.68 235.078 31.715 235.086 31.746 235.105 cv
31.777 235.129 31.801 235.16 31.824 235.195 cv
31.84 235.234 31.855 235.281 31.871 235.34 cv
31.879 235.402 31.887 235.477 31.891 235.555 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.988 235.512 mo
38.984 235.598 38.98 235.672 38.969 235.734 cv
38.957 235.801 38.941 235.855 38.922 235.895 cv
38.898 235.941 38.871 235.973 38.84 235.988 cv
38.805 236.012 38.766 236.02 38.727 236.02 cv
33.824 236.02 li
33.762 236.02 33.703 236.012 33.656 235.996 cv
33.605 235.98 33.566 235.957 33.531 235.918 cv
33.496 235.887 33.469 235.832 33.457 235.762 cv
33.438 235.691 33.43 235.605 33.434 235.504 cv
33.43 235.414 33.434 235.336 33.441 235.266 cv
33.445 235.199 33.461 235.141 33.488 235.086 cv
33.512 235.035 33.543 234.98 33.578 234.926 cv
33.613 234.875 33.656 234.82 33.715 234.758 cv
35.488 232.934 li
35.898 232.516 36.227 232.141 36.477 231.805 cv
36.723 231.477 36.914 231.172 37.047 230.895 cv
37.18 230.621 37.266 230.371 37.313 230.145 cv
37.352 229.922 37.375 229.711 37.375 229.516 cv
37.375 229.32 37.34 229.137 37.273 228.957 cv
37.207 228.785 37.113 228.629 36.988 228.492 cv
36.863 228.363 36.707 228.258 36.52 228.176 cv
36.332 228.102 36.113 228.062 35.867 228.059 cv
35.578 228.062 35.32 228.102 35.094 228.176 cv
34.863 228.258 34.664 228.344 34.492 228.43 cv
34.32 228.523 34.176 228.605 34.059 228.684 cv
33.941 228.762 33.855 228.801 33.805 228.801 cv
33.77 228.801 33.738 228.793 33.715 228.773 cv
33.684 228.758 33.664 228.727 33.648 228.684 cv
33.633 228.645 33.617 228.59 33.609 228.52 cv
33.598 228.453 33.594 228.371 33.598 228.273 cv
33.594 228.207 33.598 228.148 33.605 228.098 cv
33.609 228.047 33.617 228.004 33.629 227.965 cv
33.637 227.93 33.652 227.895 33.672 227.863 cv
33.691 227.832 33.727 227.793 33.785 227.742 cv
33.836 227.695 33.93 227.629 34.066 227.547 cv
34.199 227.465 34.371 227.387 34.574 227.305 cv
34.777 227.227 35 227.156 35.246 227.102 cv
35.488 227.047 35.746 227.02 36.02 227.02 cv
36.445 227.02 36.82 227.082 37.145 227.203 cv
37.465 227.324 37.73 227.488 37.945 227.699 cv
38.156 227.91 38.316 228.156 38.422 228.43 cv
38.527 228.711 38.582 229.008 38.582 229.32 cv
38.582 229.609 38.555 229.891 38.504 230.168 cv
38.453 230.453 38.348 230.758 38.188 231.082 cv
38.023 231.41 37.789 231.773 37.484 232.172 cv
37.176 232.574 36.77 233.035 36.266 233.551 cv
34.859 235.02 li
38.719 235.02 li
38.75 235.023 38.785 235.035 38.824 235.051 cv
38.855 235.074 38.887 235.105 38.914 235.145 cv
38.938 235.187 38.957 235.238 38.969 235.297 cv
38.98 235.363 38.984 235.434 38.988 235.512 cv
cp
f
42.211 235.273 mo
42.211 235.602 42.156 235.816 42.051 235.922 cv
41.941 236.027 41.746 236.078 41.465 236.082 cv
41.188 236.078 40.996 236.027 40.895 235.926 cv
40.785 235.82 40.734 235.609 40.738 235.293 cv
40.734 234.969 40.789 234.754 40.898 234.645 cv
41.004 234.539 41.199 234.484 41.484 234.484 cv
41.758 234.484 41.945 234.539 42.055 234.645 cv
42.156 234.75 42.211 234.961 42.211 235.273 cv
cp
f
49.574 233.168 mo
49.574 233.645 49.492 234.066 49.332 234.437 cv
49.172 234.809 48.945 235.121 48.656 235.375 cv
48.359 235.629 48.012 235.824 47.609 235.953 cv
47.203 236.086 46.754 236.148 46.262 236.148 cv
45.984 236.148 45.723 236.129 45.48 236.09 cv
45.23 236.051 45.012 236.004 44.824 235.949 cv
44.629 235.895 44.473 235.84 44.348 235.781 cv
44.223 235.73 44.145 235.687 44.113 235.652 cv
44.078 235.621 44.055 235.59 44.043 235.562 cv
44.027 235.535 44.012 235.504 44.004 235.461 cv
43.988 235.426 43.98 235.375 43.98 235.312 cv
43.973 235.254 43.973 235.184 43.973 235.102 cv
43.973 235.027 43.977 234.957 43.984 234.895 cv
43.992 234.832 44.004 234.781 44.023 234.742 cv
44.039 234.703 44.059 234.676 44.086 234.656 cv
44.109 234.641 44.141 234.633 44.172 234.629 cv
44.219 234.633 44.289 234.66 44.383 234.715 cv
44.477 234.773 44.605 234.836 44.77 234.902 cv
44.934 234.969 45.133 235.031 45.375 235.09 cv
45.609 235.148 45.895 235.176 46.23 235.176 cv
46.531 235.176 46.813 235.141 47.07 235.066 cv
47.324 234.996 47.547 234.883 47.734 234.727 cv
47.918 234.574 48.063 234.379 48.168 234.141 cv
48.273 233.906 48.324 233.617 48.328 233.277 cv
48.324 232.996 48.281 232.746 48.191 232.527 cv
48.102 232.309 47.965 232.129 47.781 231.984 cv
47.594 231.844 47.359 231.738 47.078 231.664 cv
46.793 231.594 46.453 231.555 46.066 231.555 cv
45.781 231.555 45.543 231.57 45.344 231.598 cv
45.141 231.629 44.953 231.645 44.781 231.641 cv
44.652 231.645 44.559 231.613 44.508 231.551 cv
44.449 231.492 44.422 231.379 44.426 231.207 cv
44.426 227.594 li
44.422 227.445 44.457 227.336 44.531 227.258 cv
44.598 227.187 44.699 227.148 44.836 227.148 cv
48.766 227.148 li
48.801 227.148 48.836 227.16 48.871 227.18 cv
48.902 227.203 48.93 227.234 48.957 227.273 cv
48.977 227.316 48.992 227.367 49.008 227.43 cv
49.016 227.496 49.023 227.574 49.027 227.656 cv
49.023 227.824 49 227.949 48.961 228.039 cv
48.914 228.133 48.855 228.18 48.777 228.176 cv
45.605 228.176 li
45.605 230.664 li
45.758 230.645 45.914 230.633 46.078 230.625 cv
46.234 230.621 46.422 230.617 46.637 230.617 cv
47.121 230.617 47.547 230.68 47.914 230.801 cv
48.277 230.922 48.582 231.094 48.832 231.312 cv
49.074 231.539 49.262 231.805 49.387 232.117 cv
49.512 232.434 49.574 232.785 49.574 233.168 cv
cp
f
25.52 170.781 mo
53.504 170.781 li
53.504 187.871 li
25.52 187.871 li
cp
0 0 0 0 cmyk
ef
31.902 183.68 mo
31.898 183.77 31.891 183.844 31.879 183.902 cv
31.863 183.965 31.844 184.016 31.824 184.047 cv
31.801 184.086 31.777 184.109 31.746 184.125 cv
31.715 184.141 31.684 184.148 31.652 184.148 cv
27.012 184.148 li
26.98 184.148 26.949 184.141 26.922 184.125 cv
26.895 184.109 26.867 184.086 26.844 184.047 cv
26.813 184.016 26.793 183.965 26.785 183.902 cv
26.77 183.844 26.766 183.77 26.766 183.68 cv
26.766 183.602 26.77 183.531 26.785 183.469 cv
26.793 183.41 26.813 183.363 26.836 183.32 cv
26.855 183.285 26.879 183.254 26.91 183.23 cv
26.938 183.211 26.973 183.199 27.012 183.199 cv
28.867 183.199 li
28.867 176.445 li
27.148 177.465 li
27.059 177.516 26.988 177.543 26.938 177.551 cv
26.883 177.559 26.844 177.551 26.813 177.52 cv
26.781 177.492 26.758 177.441 26.746 177.371 cv
26.734 177.305 26.73 177.219 26.73 177.109 cv
26.73 177.035 26.73 176.969 26.738 176.91 cv
26.742 176.859 26.754 176.812 26.77 176.773 cv
26.781 176.738 26.801 176.707 26.828 176.68 cv
26.852 176.652 26.887 176.625 26.93 176.594 cv
28.977 175.281 li
28.992 175.273 29.016 175.262 29.043 175.25 cv
29.07 175.242 29.105 175.234 29.148 175.223 cv
29.188 175.215 29.234 175.207 29.293 175.203 cv
29.344 175.203 29.414 175.203 29.496 175.199 cv
29.605 175.203 29.695 175.207 29.773 175.215 cv
29.844 175.227 29.902 175.238 29.941 175.254 cv
29.98 175.27 30.008 175.293 30.023 175.316 cv
30.039 175.344 30.047 175.367 30.047 175.395 cv
30.047 183.199 li
31.652 183.199 li
31.688 183.199 31.719 183.211 31.754 183.23 cv
31.785 183.254 31.813 183.285 31.836 183.32 cv
31.852 183.363 31.867 183.41 31.883 183.469 cv
31.891 183.531 31.898 183.602 31.902 183.68 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.914 181.293 mo
38.914 181.773 38.832 182.195 38.672 182.562 cv
38.512 182.934 38.285 183.246 37.992 183.5 cv
37.699 183.754 37.352 183.945 36.945 184.078 cv
36.539 184.211 36.09 184.277 35.598 184.277 cv
35.32 184.277 35.059 184.258 34.813 184.219 cv
34.563 184.18 34.34 184.133 34.152 184.078 cv
33.957 184.023 33.801 183.969 33.68 183.91 cv
33.555 183.855 33.477 183.812 33.441 183.777 cv
33.406 183.75 33.383 183.719 33.371 183.691 cv
33.355 183.664 33.34 183.633 33.332 183.59 cv
33.316 183.555 33.309 183.504 33.309 183.441 cv
33.301 183.383 33.301 183.312 33.305 183.227 cv
33.301 183.156 33.305 183.086 33.313 183.02 cv
33.32 182.961 33.332 182.91 33.352 182.867 cv
33.367 182.832 33.387 182.805 33.414 182.781 cv
33.438 182.766 33.469 182.754 33.504 182.754 cv
33.547 182.754 33.617 182.785 33.715 182.84 cv
33.809 182.902 33.938 182.965 34.102 183.027 cv
34.262 183.098 34.465 183.16 34.707 183.215 cv
34.945 183.277 35.23 183.305 35.563 183.305 cv
35.867 183.305 36.148 183.27 36.406 183.195 cv
36.664 183.125 36.883 183.012 37.07 182.852 cv
37.25 182.699 37.395 182.504 37.504 182.266 cv
37.605 182.031 37.66 181.742 37.664 181.402 cv
37.66 181.121 37.613 180.871 37.527 180.652 cv
37.434 180.437 37.297 180.258 37.117 180.109 cv
36.93 179.969 36.695 179.859 36.414 179.785 cv
36.125 179.719 35.789 179.684 35.398 179.68 cv
35.117 179.684 34.875 179.699 34.676 179.723 cv
34.473 179.754 34.285 179.766 34.113 179.762 cv
33.984 179.766 33.895 179.734 33.84 179.672 cv
33.785 179.613 33.758 179.5 33.758 179.328 cv
33.758 175.707 li
33.758 175.559 33.793 175.445 33.863 175.371 cv
33.934 175.301 34.035 175.266 34.168 175.262 cv
38.102 175.262 li
38.133 175.266 38.168 175.277 38.207 175.293 cv
38.238 175.316 38.27 175.348 38.293 175.387 cv
38.316 175.434 38.332 175.484 38.344 175.547 cv
38.355 175.609 38.363 175.684 38.363 175.77 cv
38.363 175.937 38.34 176.066 38.297 176.156 cv
38.254 176.25 38.191 176.297 38.113 176.293 cv
34.938 176.293 li
34.938 178.785 li
35.086 178.766 35.246 178.75 35.41 178.746 cv
35.57 178.742 35.754 178.742 35.969 178.738 cv
36.453 178.742 36.883 178.801 37.25 178.922 cv
37.617 179.043 37.922 179.215 38.168 179.434 cv
38.41 179.656 38.594 179.926 38.723 180.242 cv
38.848 180.559 38.914 180.91 38.914 181.293 cv
cp
f
42.195 183.398 mo
42.191 183.727 42.137 183.945 42.035 184.051 cv
41.926 184.156 41.73 184.207 41.449 184.211 cv
41.168 184.207 40.977 184.156 40.875 184.055 cv
40.766 183.949 40.715 183.738 40.719 183.422 cv
40.715 183.098 40.77 182.883 40.879 182.773 cv
40.988 182.668 41.184 182.613 41.469 182.609 cv
41.742 182.613 41.934 182.668 42.039 182.77 cv
42.141 182.879 42.191 183.086 42.195 183.398 cv
cp
f
49.91 179.684 mo
49.906 180.367 49.852 180.992 49.746 181.555 cv
49.637 182.121 49.461 182.605 49.211 183.008 cv
48.961 183.414 48.633 183.727 48.234 183.945 cv
47.828 184.168 47.332 184.277 46.746 184.277 cv
46.184 184.277 45.715 184.18 45.332 183.98 cv
44.949 183.781 44.641 183.488 44.406 183.102 cv
44.172 182.715 44.004 182.238 43.91 181.672 cv
43.809 181.109 43.762 180.461 43.766 179.727 cv
43.762 179.051 43.816 178.43 43.93 177.863 cv
44.035 177.297 44.215 176.812 44.465 176.406 cv
44.711 176.004 45.035 175.687 45.438 175.465 cv
45.84 175.246 46.332 175.137 46.922 175.133 cv
47.48 175.137 47.953 175.238 48.34 175.434 cv
48.719 175.637 49.027 175.93 49.262 176.312 cv
49.492 176.703 49.66 177.176 49.762 177.738 cv
49.859 178.305 49.906 178.953 49.91 179.684 cv
cp
48.703 179.766 mo
48.699 179.324 48.684 178.93 48.652 178.574 cv
48.617 178.223 48.57 177.91 48.512 177.641 cv
48.445 177.371 48.363 177.137 48.27 176.941 cv
48.168 176.746 48.051 176.586 47.918 176.461 cv
47.777 176.336 47.621 176.246 47.445 176.187 cv
47.27 176.133 47.074 176.105 46.855 176.102 cv
46.465 176.105 46.148 176.195 45.906 176.375 cv
45.664 176.559 45.473 176.809 45.332 177.129 cv
45.191 177.449 45.094 177.828 45.047 178.258 cv
44.992 178.691 44.969 179.152 44.973 179.645 cv
44.969 180.312 45.004 180.879 45.074 181.34 cv
45.145 181.809 45.254 182.187 45.402 182.477 cv
45.551 182.773 45.738 182.984 45.973 183.113 cv
46.199 183.25 46.48 183.316 46.813 183.312 cv
47.066 183.316 47.293 183.273 47.488 183.187 cv
47.684 183.105 47.848 182.988 47.988 182.832 cv
48.125 182.68 48.242 182.496 48.336 182.281 cv
48.426 182.066 48.5 181.828 48.559 181.566 cv
48.609 181.309 48.648 181.027 48.672 180.719 cv
48.691 180.418 48.699 180.098 48.703 179.766 cv
cp
f
25.52 118.91 mo
53.504 118.91 li
53.504 136 li
25.52 136 li
cp
0 0 0 0 cmyk
ef
31.891 131.797 mo
31.887 131.887 31.879 131.957 31.867 132.016 cv
31.852 132.078 31.832 132.129 31.813 132.16 cv
31.789 132.199 31.766 132.223 31.734 132.238 cv
31.703 132.254 31.672 132.262 31.645 132.262 cv
27.008 132.262 li
26.973 132.262 26.945 132.254 26.918 132.238 cv
26.891 132.223 26.863 132.199 26.84 132.16 cv
26.813 132.129 26.793 132.078 26.781 132.016 cv
26.766 131.957 26.758 131.887 26.762 131.797 cv
26.758 131.719 26.766 131.645 26.781 131.582 cv
26.793 131.523 26.809 131.477 26.832 131.437 cv
26.848 131.402 26.875 131.371 26.906 131.348 cv
26.938 131.328 26.969 131.32 27.008 131.316 cv
28.859 131.316 li
28.859 124.57 li
27.145 125.59 li
27.055 125.641 26.984 125.668 26.938 125.676 cv
26.883 125.684 26.84 125.676 26.809 125.645 cv
26.773 125.617 26.754 125.566 26.742 125.496 cv
26.73 125.43 26.723 125.344 26.727 125.234 cv
26.723 125.16 26.727 125.094 26.738 125.035 cv
26.742 124.984 26.754 124.937 26.77 124.898 cv
26.781 124.863 26.801 124.832 26.824 124.805 cv
26.848 124.777 26.879 124.75 26.926 124.723 cv
28.969 123.41 li
28.984 123.398 29.004 123.387 29.035 123.379 cv
29.059 123.371 29.094 123.363 29.141 123.352 cv
29.18 123.344 29.23 123.336 29.285 123.332 cv
29.34 123.332 29.406 123.332 29.492 123.328 cv
29.598 123.332 29.691 123.336 29.766 123.344 cv
29.836 123.352 29.891 123.367 29.938 123.383 cv
29.977 123.402 30.004 123.422 30.02 123.445 cv
30.027 123.473 30.035 123.496 30.039 123.52 cv
30.039 131.316 li
31.645 131.316 li
31.68 131.32 31.715 131.328 31.746 131.348 cv
31.777 131.371 31.801 131.402 31.824 131.437 cv
31.84 131.477 31.855 131.523 31.871 131.582 cv
31.879 131.645 31.887 131.719 31.891 131.797 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.117 123.898 mo
39.113 123.984 39.109 124.059 39.105 124.121 cv
39.098 124.191 39.09 124.254 39.078 124.312 cv
39.066 124.379 39.051 124.437 39.031 124.492 cv
39.008 124.551 38.984 124.613 38.961 124.672 cv
35.766 132.035 li
35.738 132.094 35.711 132.137 35.68 132.168 cv
35.645 132.203 35.602 132.23 35.547 132.25 cv
35.492 132.27 35.422 132.281 35.344 132.293 cv
35.258 132.297 35.16 132.301 35.043 132.305 cv
34.887 132.301 34.766 132.293 34.68 132.281 cv
34.594 132.266 34.531 132.25 34.492 132.219 cv
34.453 132.191 34.434 132.152 34.441 132.109 cv
34.441 132.066 34.457 132.016 34.488 131.953 cv
37.848 124.426 li
33.59 124.426 li
33.504 124.43 33.438 124.383 33.395 124.289 cv
33.352 124.199 33.332 124.07 33.332 123.906 cv
33.332 123.82 33.336 123.746 33.348 123.68 cv
33.359 123.617 33.375 123.562 33.398 123.52 cv
33.418 123.477 33.445 123.445 33.48 123.422 cv
33.512 123.402 33.551 123.391 33.59 123.391 cv
38.762 123.391 li
38.82 123.391 38.875 123.398 38.926 123.414 cv
38.973 123.43 39.008 123.457 39.035 123.496 cv
39.059 123.535 39.078 123.59 39.094 123.652 cv
39.105 123.719 39.113 123.801 39.117 123.898 cv
cp
f
42.211 131.516 mo
42.211 131.844 42.156 132.059 42.051 132.164 cv
41.941 132.27 41.746 132.32 41.465 132.324 cv
41.188 132.32 40.996 132.27 40.895 132.168 cv
40.785 132.062 40.734 131.852 40.738 131.535 cv
40.734 131.211 40.789 130.996 40.898 130.887 cv
41.004 130.781 41.199 130.727 41.484 130.727 cv
41.758 130.727 41.945 130.781 42.055 130.887 cv
42.156 130.992 42.211 131.203 42.211 131.516 cv
cp
f
49.574 129.41 mo
49.574 129.887 49.492 130.309 49.332 130.68 cv
49.172 131.051 48.945 131.363 48.656 131.617 cv
48.359 131.871 48.012 132.066 47.609 132.195 cv
47.203 132.328 46.754 132.391 46.262 132.391 cv
45.984 132.391 45.723 132.371 45.48 132.332 cv
45.23 132.293 45.012 132.246 44.824 132.191 cv
44.629 132.137 44.473 132.082 44.348 132.023 cv
44.223 131.973 44.145 131.93 44.113 131.895 cv
44.078 131.863 44.055 131.832 44.043 131.805 cv
44.027 131.777 44.012 131.746 44.004 131.703 cv
43.988 131.668 43.98 131.617 43.98 131.555 cv
43.973 131.496 43.973 131.426 43.973 131.344 cv
43.973 131.27 43.977 131.199 43.984 131.137 cv
43.992 131.074 44.004 131.023 44.023 130.984 cv
44.039 130.945 44.059 130.918 44.086 130.898 cv
44.109 130.883 44.141 130.875 44.172 130.871 cv
44.219 130.875 44.289 130.902 44.383 130.957 cv
44.477 131.016 44.605 131.078 44.77 131.145 cv
44.934 131.211 45.133 131.273 45.375 131.332 cv
45.609 131.391 45.895 131.418 46.23 131.418 cv
46.531 131.418 46.813 131.383 47.07 131.309 cv
47.324 131.238 47.547 131.125 47.734 130.969 cv
47.918 130.816 48.063 130.621 48.168 130.383 cv
48.273 130.148 48.324 129.859 48.328 129.52 cv
48.324 129.238 48.281 128.988 48.191 128.77 cv
48.102 128.551 47.965 128.371 47.781 128.227 cv
47.594 128.086 47.359 127.98 47.078 127.906 cv
46.793 127.836 46.453 127.797 46.066 127.797 cv
45.781 127.797 45.543 127.812 45.344 127.84 cv
45.141 127.871 44.953 127.887 44.781 127.883 cv
44.652 127.887 44.559 127.855 44.508 127.793 cv
44.449 127.734 44.422 127.621 44.426 127.449 cv
44.426 123.836 li
44.422 123.687 44.457 123.578 44.531 123.5 cv
44.598 123.43 44.699 123.391 44.836 123.391 cv
48.766 123.391 li
48.801 123.391 48.836 123.402 48.871 123.422 cv
48.902 123.445 48.93 123.477 48.957 123.516 cv
48.977 123.559 48.992 123.609 49.008 123.672 cv
49.016 123.738 49.023 123.816 49.027 123.898 cv
49.023 124.066 49 124.191 48.961 124.281 cv
48.914 124.375 48.855 124.422 48.777 124.418 cv
45.605 124.418 li
45.605 126.906 li
45.758 126.887 45.914 126.875 46.078 126.867 cv
46.234 126.863 46.422 126.859 46.637 126.859 cv
47.121 126.859 47.547 126.922 47.914 127.043 cv
48.277 127.164 48.582 127.336 48.832 127.555 cv
49.074 127.781 49.262 128.047 49.387 128.359 cv
49.512 128.676 49.574 129.027 49.574 129.41 cv
cp
f
25.52 67.039 mo
53.504 67.039 li
53.504 84.129 li
25.52 84.129 li
cp
0 0 0 0 cmyk
ef
31.871 79.871 mo
31.867 79.957 31.863 80.031 31.852 80.094 cv
31.84 80.16 31.824 80.215 31.805 80.254 cv
31.781 80.301 31.754 80.332 31.723 80.348 cv
31.688 80.371 31.648 80.379 31.609 80.379 cv
26.707 80.379 li
26.645 80.379 26.586 80.371 26.539 80.355 cv
26.488 80.34 26.449 80.316 26.414 80.277 cv
26.379 80.246 26.352 80.191 26.34 80.121 cv
26.32 80.051 26.313 79.965 26.316 79.863 cv
26.313 79.773 26.316 79.695 26.324 79.625 cv
26.328 79.559 26.344 79.5 26.371 79.445 cv
26.395 79.395 26.426 79.34 26.461 79.285 cv
26.496 79.234 26.539 79.18 26.598 79.117 cv
28.371 77.293 li
28.781 76.875 29.109 76.5 29.359 76.164 cv
29.605 75.836 29.797 75.531 29.93 75.254 cv
30.063 74.98 30.148 74.73 30.195 74.504 cv
30.234 74.281 30.258 74.07 30.258 73.875 cv
30.258 73.68 30.223 73.496 30.156 73.316 cv
30.09 73.145 29.996 72.988 29.871 72.852 cv
29.746 72.723 29.59 72.617 29.402 72.535 cv
29.215 72.461 28.996 72.422 28.75 72.418 cv
28.461 72.422 28.203 72.461 27.977 72.535 cv
27.746 72.617 27.547 72.703 27.375 72.789 cv
27.203 72.883 27.059 72.965 26.941 73.043 cv
26.824 73.121 26.738 73.16 26.688 73.16 cv
26.652 73.16 26.621 73.152 26.598 73.133 cv
26.566 73.117 26.547 73.086 26.531 73.043 cv
26.516 73.004 26.5 72.949 26.492 72.879 cv
26.48 72.812 26.477 72.73 26.48 72.633 cv
26.477 72.566 26.48 72.508 26.488 72.457 cv
26.492 72.406 26.5 72.363 26.512 72.324 cv
26.52 72.289 26.535 72.254 26.555 72.223 cv
26.574 72.191 26.609 72.152 26.668 72.102 cv
26.719 72.055 26.813 71.988 26.949 71.906 cv
27.082 71.824 27.254 71.746 27.457 71.664 cv
27.66 71.586 27.883 71.516 28.129 71.461 cv
28.371 71.406 28.629 71.379 28.902 71.379 cv
29.328 71.379 29.703 71.441 30.027 71.562 cv
30.348 71.684 30.613 71.848 30.828 72.059 cv
31.039 72.27 31.199 72.516 31.305 72.789 cv
31.41 73.07 31.465 73.367 31.465 73.68 cv
31.465 73.969 31.438 74.25 31.387 74.527 cv
31.336 74.812 31.23 75.117 31.07 75.441 cv
30.906 75.77 30.672 76.133 30.367 76.531 cv
30.059 76.934 29.652 77.395 29.148 77.91 cv
27.742 79.379 li
31.602 79.379 li
31.633 79.383 31.668 79.395 31.707 79.41 cv
31.738 79.434 31.77 79.465 31.797 79.504 cv
31.82 79.547 31.84 79.598 31.852 79.656 cv
31.863 79.723 31.867 79.793 31.871 79.871 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.281 75.922 mo
39.277 76.605 39.227 77.227 39.121 77.789 cv
39.012 78.352 38.832 78.836 38.586 79.238 cv
38.332 79.645 38.004 79.957 37.605 80.176 cv
37.199 80.398 36.707 80.508 36.121 80.508 cv
35.563 80.508 35.09 80.41 34.711 80.211 cv
34.328 80.016 34.023 79.723 33.789 79.336 cv
33.555 78.949 33.387 78.477 33.293 77.91 cv
33.191 77.348 33.145 76.699 33.145 75.965 cv
33.145 75.293 33.199 74.672 33.309 74.105 cv
33.418 73.543 33.594 73.059 33.844 72.652 cv
34.086 72.25 34.41 71.937 34.816 71.711 cv
35.215 71.492 35.711 71.379 36.301 71.379 cv
36.859 71.379 37.332 71.48 37.715 71.676 cv
38.098 71.879 38.402 72.172 38.637 72.555 cv
38.867 72.945 39.035 73.418 39.133 73.98 cv
39.23 74.543 39.277 75.191 39.281 75.922 cv
cp
38.074 76.004 mo
38.07 75.562 38.055 75.164 38.027 74.812 cv
37.992 74.461 37.945 74.152 37.887 73.883 cv
37.82 73.613 37.742 73.383 37.645 73.187 cv
37.547 72.996 37.43 72.836 37.293 72.707 cv
37.152 72.582 36.992 72.488 36.82 72.43 cv
36.641 72.375 36.445 72.348 36.23 72.344 cv
35.84 72.348 35.523 72.437 35.285 72.621 cv
35.039 72.805 34.848 73.059 34.711 73.375 cv
34.57 73.695 34.477 74.066 34.426 74.496 cv
34.375 74.926 34.352 75.391 34.352 75.883 cv
34.352 76.547 34.383 77.109 34.453 77.57 cv
34.52 78.039 34.629 78.418 34.781 78.707 cv
34.926 79.004 35.117 79.215 35.348 79.344 cv
35.578 79.48 35.859 79.547 36.191 79.543 cv
36.445 79.547 36.668 79.508 36.863 79.422 cv
37.055 79.344 37.223 79.223 37.363 79.066 cv
37.504 78.914 37.617 78.73 37.711 78.516 cv
37.797 78.301 37.871 78.062 37.93 77.801 cv
37.98 77.543 38.02 77.262 38.043 76.957 cv
38.063 76.652 38.07 76.336 38.074 76.004 cv
cp
f
42.211 79.633 mo
42.211 79.961 42.156 80.176 42.051 80.281 cv
41.941 80.387 41.746 80.437 41.465 80.441 cv
41.188 80.437 40.996 80.387 40.895 80.285 cv
40.785 80.18 40.734 79.969 40.738 79.652 cv
40.734 79.328 40.789 79.113 40.898 79.004 cv
41.004 78.898 41.199 78.844 41.484 78.844 cv
41.758 78.844 41.945 78.898 42.055 79.004 cv
42.156 79.109 42.211 79.32 42.211 79.633 cv
cp
f
49.91 75.922 mo
49.906 76.605 49.855 77.227 49.75 77.789 cv
49.641 78.352 49.461 78.836 49.215 79.238 cv
48.961 79.645 48.633 79.957 48.234 80.176 cv
47.828 80.398 47.336 80.508 46.75 80.508 cv
46.191 80.508 45.719 80.41 45.34 80.211 cv
44.957 80.016 44.652 79.723 44.418 79.336 cv
44.184 78.949 44.016 78.477 43.922 77.91 cv
43.82 77.348 43.773 76.699 43.773 75.965 cv
43.773 75.293 43.828 74.672 43.938 74.105 cv
44.047 73.543 44.223 73.059 44.473 72.652 cv
44.715 72.25 45.039 71.937 45.445 71.711 cv
45.844 71.492 46.34 71.379 46.93 71.379 cv
47.488 71.379 47.961 71.48 48.344 71.676 cv
48.727 71.879 49.031 72.172 49.266 72.555 cv
49.496 72.945 49.664 73.418 49.762 73.98 cv
49.859 74.543 49.906 75.191 49.91 75.922 cv
cp
48.703 76.004 mo
48.699 75.562 48.684 75.164 48.656 74.812 cv
48.621 74.461 48.574 74.152 48.516 73.883 cv
48.449 73.613 48.371 73.383 48.273 73.187 cv
48.176 72.996 48.059 72.836 47.922 72.707 cv
47.781 72.582 47.621 72.488 47.449 72.43 cv
47.27 72.375 47.074 72.348 46.859 72.344 cv
46.469 72.348 46.152 72.437 45.914 72.621 cv
45.668 72.805 45.477 73.059 45.34 73.375 cv
45.199 73.695 45.105 74.066 45.055 74.496 cv
45.004 74.926 44.98 75.391 44.98 75.883 cv
44.98 76.547 45.012 77.109 45.082 77.57 cv
45.148 78.039 45.258 78.418 45.41 78.707 cv
45.555 79.004 45.746 79.215 45.977 79.344 cv
46.207 79.48 46.488 79.547 46.82 79.543 cv
47.074 79.547 47.297 79.508 47.492 79.422 cv
47.684 79.344 47.852 79.223 47.992 79.066 cv
48.133 78.914 48.246 78.73 48.34 78.516 cv
48.426 78.301 48.5 78.062 48.559 77.801 cv
48.609 77.543 48.648 77.262 48.672 76.957 cv
48.691 76.652 48.699 76.336 48.703 76.004 cv
cp
f
25.52 15.16 mo
53.504 15.16 li
53.504 32.25 li
25.52 32.25 li
cp
0 0 0 0 cmyk
ef
31.871 27.98 mo
31.867 28.066 31.863 28.141 31.852 28.203 cv
31.84 28.27 31.824 28.324 31.805 28.363 cv
31.781 28.41 31.754 28.441 31.723 28.457 cv
31.688 28.48 31.648 28.488 31.609 28.488 cv
26.707 28.488 li
26.645 28.488 26.586 28.48 26.539 28.465 cv
26.488 28.449 26.449 28.426 26.414 28.387 cv
26.379 28.355 26.352 28.301 26.34 28.23 cv
26.32 28.16 26.313 28.074 26.316 27.973 cv
26.313 27.883 26.316 27.805 26.324 27.734 cv
26.328 27.668 26.344 27.609 26.371 27.555 cv
26.395 27.504 26.426 27.449 26.461 27.395 cv
26.496 27.344 26.539 27.289 26.598 27.227 cv
28.371 25.402 li
28.781 24.984 29.109 24.609 29.359 24.273 cv
29.605 23.945 29.797 23.641 29.93 23.363 cv
30.063 23.09 30.148 22.84 30.195 22.613 cv
30.234 22.391 30.258 22.18 30.258 21.984 cv
30.258 21.789 30.223 21.605 30.156 21.426 cv
30.09 21.254 29.996 21.098 29.871 20.961 cv
29.746 20.832 29.59 20.727 29.402 20.645 cv
29.215 20.57 28.996 20.531 28.75 20.527 cv
28.461 20.531 28.203 20.57 27.977 20.645 cv
27.746 20.727 27.547 20.812 27.375 20.898 cv
27.203 20.992 27.059 21.074 26.941 21.152 cv
26.824 21.23 26.738 21.27 26.688 21.27 cv
26.652 21.27 26.621 21.262 26.598 21.242 cv
26.566 21.227 26.547 21.195 26.531 21.152 cv
26.516 21.113 26.5 21.059 26.492 20.988 cv
26.48 20.922 26.477 20.84 26.48 20.742 cv
26.477 20.676 26.48 20.617 26.488 20.566 cv
26.492 20.516 26.5 20.473 26.512 20.434 cv
26.52 20.398 26.535 20.363 26.555 20.332 cv
26.574 20.301 26.609 20.262 26.668 20.211 cv
26.719 20.164 26.813 20.098 26.949 20.016 cv
27.082 19.934 27.254 19.855 27.457 19.773 cv
27.66 19.695 27.883 19.625 28.129 19.57 cv
28.371 19.516 28.629 19.488 28.902 19.488 cv
29.328 19.488 29.703 19.551 30.027 19.672 cv
30.348 19.793 30.613 19.957 30.828 20.168 cv
31.039 20.379 31.199 20.625 31.305 20.898 cv
31.41 21.18 31.465 21.477 31.465 21.789 cv
31.465 22.078 31.438 22.359 31.387 22.637 cv
31.336 22.922 31.23 23.227 31.07 23.551 cv
30.906 23.879 30.672 24.242 30.367 24.641 cv
30.059 25.043 29.652 25.504 29.148 26.02 cv
27.742 27.488 li
31.602 27.488 li
31.633 27.492 31.668 27.504 31.707 27.52 cv
31.738 27.543 31.77 27.574 31.797 27.613 cv
31.82 27.656 31.84 27.707 31.852 27.766 cv
31.863 27.832 31.867 27.902 31.871 27.98 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.988 27.98 mo
38.984 28.066 38.98 28.141 38.969 28.203 cv
38.957 28.27 38.941 28.324 38.922 28.363 cv
38.898 28.41 38.871 28.441 38.84 28.457 cv
38.805 28.48 38.766 28.488 38.727 28.488 cv
33.824 28.488 li
33.762 28.488 33.703 28.48 33.656 28.465 cv
33.605 28.449 33.566 28.426 33.531 28.387 cv
33.496 28.355 33.469 28.301 33.457 28.23 cv
33.438 28.16 33.43 28.074 33.434 27.973 cv
33.43 27.883 33.434 27.805 33.441 27.734 cv
33.445 27.668 33.461 27.609 33.488 27.555 cv
33.512 27.504 33.543 27.449 33.578 27.395 cv
33.613 27.344 33.656 27.289 33.715 27.227 cv
35.488 25.402 li
35.898 24.984 36.227 24.609 36.477 24.273 cv
36.723 23.945 36.914 23.641 37.047 23.363 cv
37.18 23.09 37.266 22.84 37.313 22.613 cv
37.352 22.391 37.375 22.18 37.375 21.984 cv
37.375 21.789 37.34 21.605 37.273 21.426 cv
37.207 21.254 37.113 21.098 36.988 20.961 cv
36.863 20.832 36.707 20.727 36.52 20.645 cv
36.332 20.57 36.113 20.531 35.867 20.527 cv
35.578 20.531 35.32 20.57 35.094 20.645 cv
34.863 20.727 34.664 20.812 34.492 20.898 cv
34.32 20.992 34.176 21.074 34.059 21.152 cv
33.941 21.23 33.855 21.27 33.805 21.27 cv
33.77 21.27 33.738 21.262 33.715 21.242 cv
33.684 21.227 33.664 21.195 33.648 21.152 cv
33.633 21.113 33.617 21.059 33.609 20.988 cv
33.598 20.922 33.594 20.84 33.598 20.742 cv
33.594 20.676 33.598 20.617 33.605 20.566 cv
33.609 20.516 33.617 20.473 33.629 20.434 cv
33.637 20.398 33.652 20.363 33.672 20.332 cv
33.691 20.301 33.727 20.262 33.785 20.211 cv
33.836 20.164 33.93 20.098 34.066 20.016 cv
34.199 19.934 34.371 19.855 34.574 19.773 cv
34.777 19.695 35 19.625 35.246 19.57 cv
35.488 19.516 35.746 19.488 36.02 19.488 cv
36.445 19.488 36.82 19.551 37.145 19.672 cv
37.465 19.793 37.73 19.957 37.945 20.168 cv
38.156 20.379 38.316 20.625 38.422 20.898 cv
38.527 21.18 38.582 21.477 38.582 21.789 cv
38.582 22.078 38.555 22.359 38.504 22.637 cv
38.453 22.922 38.348 23.227 38.188 23.551 cv
38.023 23.879 37.789 24.242 37.484 24.641 cv
37.176 25.043 36.77 25.504 36.266 26.02 cv
34.859 27.488 li
38.719 27.488 li
38.75 27.492 38.785 27.504 38.824 27.52 cv
38.855 27.543 38.887 27.574 38.914 27.613 cv
38.938 27.656 38.957 27.707 38.969 27.766 cv
38.98 27.832 38.984 27.902 38.988 27.98 cv
cp
f
42.211 27.742 mo
42.211 28.07 42.156 28.285 42.051 28.391 cv
41.941 28.496 41.746 28.547 41.465 28.551 cv
41.188 28.547 40.996 28.496 40.895 28.395 cv
40.785 28.289 40.734 28.078 40.738 27.762 cv
40.734 27.437 40.789 27.223 40.898 27.113 cv
41.004 27.008 41.199 26.953 41.484 26.953 cv
41.758 26.953 41.945 27.008 42.055 27.113 cv
42.156 27.219 42.211 27.43 42.211 27.742 cv
cp
f
49.574 25.637 mo
49.574 26.113 49.492 26.535 49.332 26.906 cv
49.172 27.277 48.945 27.59 48.656 27.844 cv
48.359 28.098 48.012 28.293 47.609 28.422 cv
47.203 28.555 46.754 28.617 46.262 28.617 cv
45.984 28.617 45.723 28.598 45.48 28.559 cv
45.23 28.52 45.012 28.473 44.824 28.418 cv
44.629 28.363 44.473 28.309 44.348 28.25 cv
44.223 28.199 44.145 28.156 44.113 28.121 cv
44.078 28.09 44.055 28.059 44.043 28.031 cv
44.027 28.004 44.012 27.973 44.004 27.93 cv
43.988 27.895 43.98 27.844 43.98 27.781 cv
43.973 27.723 43.973 27.652 43.973 27.57 cv
43.973 27.496 43.977 27.426 43.984 27.363 cv
43.992 27.301 44.004 27.25 44.023 27.211 cv
44.039 27.172 44.059 27.145 44.086 27.125 cv
44.109 27.109 44.141 27.102 44.172 27.098 cv
44.219 27.102 44.289 27.129 44.383 27.184 cv
44.477 27.242 44.605 27.305 44.77 27.371 cv
44.934 27.437 45.133 27.5 45.375 27.559 cv
45.609 27.617 45.895 27.645 46.23 27.645 cv
46.531 27.645 46.813 27.609 47.07 27.535 cv
47.324 27.465 47.547 27.352 47.734 27.195 cv
47.918 27.043 48.063 26.848 48.168 26.609 cv
48.273 26.375 48.324 26.086 48.328 25.746 cv
48.324 25.465 48.281 25.215 48.191 24.996 cv
48.102 24.777 47.965 24.598 47.781 24.453 cv
47.594 24.312 47.359 24.207 47.078 24.133 cv
46.793 24.062 46.453 24.023 46.066 24.023 cv
45.781 24.023 45.543 24.039 45.344 24.066 cv
45.141 24.098 44.953 24.113 44.781 24.109 cv
44.652 24.113 44.559 24.082 44.508 24.02 cv
44.449 23.961 44.422 23.848 44.426 23.676 cv
44.426 20.062 li
44.422 19.914 44.457 19.805 44.531 19.727 cv
44.598 19.656 44.699 19.617 44.836 19.617 cv
48.766 19.617 li
48.801 19.617 48.836 19.629 48.871 19.648 cv
48.902 19.672 48.93 19.703 48.957 19.742 cv
48.977 19.785 48.992 19.836 49.008 19.898 cv
49.016 19.965 49.023 20.043 49.027 20.125 cv
49.023 20.293 49 20.418 48.961 20.508 cv
48.914 20.602 48.855 20.648 48.777 20.645 cv
45.605 20.645 li
45.605 23.133 li
45.758 23.113 45.914 23.102 46.078 23.094 cv
46.234 23.09 46.422 23.086 46.637 23.086 cv
47.121 23.086 47.547 23.148 47.914 23.27 cv
48.277 23.391 48.582 23.562 48.832 23.781 cv
49.074 24.008 49.262 24.273 49.387 24.586 cv
49.512 24.902 49.574 25.254 49.574 25.637 cv
cp
f
69.305 513.184 mo
69.301 513.273 69.293 513.344 69.281 513.402 cv
69.266 513.465 69.246 513.516 69.227 513.547 cv
69.203 513.586 69.18 513.609 69.148 513.625 cv
69.117 513.641 69.086 513.648 69.059 513.648 cv
64.422 513.648 li
64.387 513.648 64.359 513.641 64.332 513.625 cv
64.305 513.609 64.277 513.586 64.254 513.547 cv
64.227 513.516 64.207 513.465 64.195 513.402 cv
64.18 513.344 64.172 513.273 64.176 513.184 cv
64.172 513.105 64.18 513.031 64.195 512.969 cv
64.207 512.91 64.223 512.863 64.246 512.824 cv
64.262 512.789 64.289 512.758 64.32 512.734 cv
64.352 512.715 64.383 512.707 64.422 512.703 cv
66.273 512.703 li
66.273 505.957 li
64.559 506.977 li
64.469 507.027 64.398 507.055 64.352 507.062 cv
64.297 507.07 64.254 507.062 64.223 507.031 cv
64.188 507.004 64.168 506.953 64.156 506.883 cv
64.145 506.816 64.137 506.73 64.141 506.621 cv
64.137 506.547 64.141 506.48 64.152 506.422 cv
64.156 506.371 64.168 506.324 64.184 506.285 cv
64.195 506.25 64.215 506.219 64.238 506.191 cv
64.262 506.164 64.293 506.137 64.34 506.109 cv
66.383 504.797 li
66.398 504.785 66.418 504.773 66.449 504.766 cv
66.473 504.758 66.508 504.75 66.555 504.738 cv
66.594 504.73 66.645 504.723 66.699 504.719 cv
66.754 504.719 66.82 504.719 66.906 504.715 cv
67.012 504.719 67.105 504.723 67.18 504.73 cv
67.25 504.738 67.305 504.754 67.352 504.77 cv
67.391 504.789 67.418 504.809 67.434 504.832 cv
67.441 504.859 67.449 504.883 67.453 504.906 cv
67.453 512.703 li
69.059 512.703 li
69.094 512.707 69.129 512.715 69.16 512.734 cv
69.191 512.758 69.215 512.789 69.238 512.824 cv
69.254 512.863 69.27 512.91 69.285 512.969 cv
69.293 513.031 69.301 513.105 69.305 513.184 cv
cp
f
141.598 513.141 mo
141.594 513.227 141.59 513.301 141.578 513.363 cv
141.566 513.43 141.551 513.484 141.531 513.523 cv
141.508 513.57 141.48 513.602 141.449 513.617 cv
141.414 513.641 141.375 513.648 141.336 513.648 cv
136.434 513.648 li
136.371 513.648 136.313 513.641 136.266 513.625 cv
136.215 513.609 136.176 513.586 136.141 513.547 cv
136.105 513.516 136.078 513.461 136.066 513.391 cv
136.047 513.32 136.039 513.234 136.043 513.133 cv
136.039 513.043 136.043 512.965 136.051 512.895 cv
136.055 512.828 136.07 512.77 136.098 512.715 cv
136.121 512.664 136.152 512.609 136.188 512.555 cv
136.223 512.504 136.266 512.449 136.324 512.387 cv
138.098 510.562 li
138.508 510.145 138.836 509.77 139.086 509.434 cv
139.332 509.105 139.523 508.801 139.656 508.523 cv
139.789 508.25 139.875 508 139.922 507.773 cv
139.961 507.551 139.984 507.34 139.984 507.145 cv
139.984 506.949 139.949 506.766 139.883 506.586 cv
139.816 506.414 139.723 506.258 139.598 506.121 cv
139.473 505.992 139.316 505.887 139.129 505.805 cv
138.941 505.73 138.723 505.691 138.477 505.687 cv
138.188 505.691 137.93 505.73 137.703 505.805 cv
137.473 505.887 137.273 505.973 137.102 506.059 cv
136.93 506.152 136.785 506.234 136.668 506.312 cv
136.551 506.391 136.465 506.43 136.414 506.43 cv
136.379 506.43 136.348 506.422 136.324 506.402 cv
136.293 506.387 136.273 506.355 136.258 506.312 cv
136.242 506.273 136.227 506.219 136.219 506.148 cv
136.207 506.082 136.203 506 136.207 505.902 cv
136.203 505.836 136.207 505.777 136.215 505.727 cv
136.219 505.676 136.227 505.633 136.238 505.594 cv
136.246 505.559 136.262 505.523 136.281 505.492 cv
136.301 505.461 136.336 505.422 136.395 505.371 cv
136.445 505.324 136.539 505.258 136.676 505.176 cv
136.809 505.094 136.98 505.016 137.184 504.934 cv
137.387 504.855 137.609 504.785 137.855 504.73 cv
138.098 504.676 138.355 504.648 138.629 504.648 cv
139.055 504.648 139.43 504.711 139.754 504.832 cv
140.074 504.953 140.34 505.117 140.555 505.328 cv
140.766 505.539 140.926 505.785 141.031 506.059 cv
141.137 506.34 141.191 506.637 141.191 506.949 cv
141.191 507.238 141.164 507.52 141.113 507.797 cv
141.063 508.082 140.957 508.387 140.797 508.711 cv
140.633 509.039 140.398 509.402 140.094 509.801 cv
139.785 510.203 139.379 510.664 138.875 511.18 cv
137.469 512.648 li
141.328 512.648 li
141.359 512.652 141.395 512.664 141.434 512.68 cv
141.465 512.703 141.496 512.734 141.523 512.773 cv
141.547 512.816 141.566 512.867 141.578 512.926 cv
141.59 512.992 141.594 513.062 141.598 513.141 cv
cp
f
214.262 511.125 mo
214.258 511.277 214.234 511.398 214.191 511.484 cv
214.145 511.574 214.082 511.617 214 511.613 cv
213 511.613 li
213 513.477 li
213 513.516 212.988 513.547 212.973 513.57 cv
212.949 513.598 212.918 513.617 212.875 513.637 cv
212.824 513.652 212.762 513.664 212.691 513.676 cv
212.613 513.684 212.52 513.687 212.402 513.691 cv
212.285 513.687 212.188 513.684 212.117 513.676 cv
212.039 513.664 211.98 513.652 211.938 513.637 cv
211.891 513.617 211.859 513.598 211.844 513.57 cv
211.824 513.547 211.816 513.516 211.82 513.477 cv
211.82 511.613 li
208.191 511.613 li
208.133 511.617 208.09 511.609 208.055 511.594 cv
208.02 511.582 207.984 511.555 207.957 511.516 cv
207.926 511.48 207.906 511.43 207.895 511.359 cv
207.883 511.293 207.879 511.203 207.879 511.09 cv
207.879 511.008 207.879 510.93 207.887 510.859 cv
207.887 510.789 207.898 510.727 207.914 510.672 cv
207.926 510.617 207.941 510.562 207.969 510.508 cv
207.988 510.453 208.016 510.398 208.051 510.336 cv
211.211 504.949 li
211.23 504.914 211.266 504.883 211.313 504.855 cv
211.355 504.828 211.41 504.805 211.484 504.785 cv
211.551 504.77 211.637 504.758 211.742 504.746 cv
211.844 504.742 211.965 504.738 212.105 504.734 cv
212.254 504.738 212.391 504.742 212.508 504.754 cv
212.621 504.766 212.711 504.781 212.785 504.797 cv
212.852 504.816 212.906 504.84 212.945 504.871 cv
212.98 504.902 213 504.937 213 504.977 cv
213 510.641 li
214 510.641 li
214.074 510.645 214.137 510.684 214.188 510.762 cv
214.234 510.844 214.258 510.965 214.262 511.125 cv
cp
211.82 505.773 mo
211.809 505.773 li
208.957 510.641 li
211.82 510.641 li
cp
f
286.422 510.777 mo
286.422 511.168 286.359 511.547 286.242 511.906 cv
286.117 512.273 285.934 512.59 285.691 512.863 cv
285.441 513.141 285.129 513.363 284.754 513.527 cv
284.371 513.695 283.926 513.777 283.41 513.777 cv
283.039 513.777 282.711 513.734 282.43 513.641 cv
282.145 513.555 281.898 513.422 281.688 513.25 cv
281.477 513.082 281.301 512.875 281.164 512.629 cv
281.023 512.383 280.91 512.102 280.828 511.785 cv
280.742 511.473 280.684 511.129 280.648 510.75 cv
280.609 510.379 280.59 509.977 280.594 509.543 cv
280.59 509.164 280.609 508.781 280.652 508.391 cv
280.691 508.008 280.766 507.633 280.871 507.266 cv
280.977 506.906 281.121 506.566 281.301 506.25 cv
281.48 505.934 281.707 505.656 281.98 505.422 cv
282.254 505.187 282.578 505 282.957 504.859 cv
283.336 504.723 283.777 504.656 284.281 504.652 cv
284.449 504.656 284.621 504.664 284.793 504.684 cv
284.965 504.707 285.125 504.738 285.273 504.77 cv
285.422 504.809 285.543 504.844 285.645 504.883 cv
285.742 504.922 285.809 504.957 285.844 504.98 cv
285.871 505.008 285.895 505.035 285.914 505.062 cv
285.93 505.094 285.945 505.125 285.953 505.16 cv
285.961 505.195 285.965 505.234 285.973 505.277 cv
285.973 505.32 285.977 505.375 285.98 505.437 cv
285.977 505.523 285.977 505.594 285.977 505.648 cv
285.973 505.711 285.961 505.758 285.949 505.793 cv
285.93 505.832 285.91 505.859 285.887 505.875 cv
285.859 505.895 285.828 505.902 285.789 505.902 cv
285.738 505.902 285.668 505.887 285.582 505.855 cv
285.492 505.824 285.387 505.789 285.266 505.746 cv
285.141 505.711 284.992 505.676 284.816 505.641 cv
284.641 505.613 284.438 505.598 284.207 505.594 cv
283.777 505.598 283.41 505.684 283.105 505.855 cv
282.801 506.027 282.551 506.262 282.355 506.555 cv
282.16 506.848 282.016 507.187 281.926 507.57 cv
281.828 507.961 281.773 508.363 281.766 508.781 cv
281.883 508.715 282.02 508.648 282.168 508.578 cv
282.316 508.512 282.477 508.449 282.652 508.391 cv
282.828 508.34 283.016 508.293 283.211 508.258 cv
283.406 508.227 283.617 508.211 283.844 508.207 cv
284.32 508.211 284.723 508.277 285.055 508.402 cv
285.383 508.535 285.648 508.715 285.855 508.945 cv
286.055 509.176 286.199 509.445 286.289 509.758 cv
286.375 510.07 286.422 510.41 286.422 510.777 cv
cp
285.227 510.887 mo
285.227 510.625 285.199 510.383 285.148 510.164 cv
285.094 509.949 285.004 509.766 284.883 509.609 cv
284.758 509.461 284.594 509.344 284.391 509.262 cv
284.18 509.18 283.926 509.137 283.629 509.137 cv
283.457 509.137 283.289 509.152 283.121 509.184 cv
282.949 509.215 282.785 509.258 282.629 509.305 cv
282.469 509.359 282.32 509.422 282.18 509.492 cv
282.035 509.566 281.902 509.641 281.785 509.719 cv
281.781 510.312 281.82 510.809 281.898 511.203 cv
281.973 511.602 282.082 511.918 282.227 512.156 cv
282.371 512.398 282.551 512.57 282.766 512.672 cv
282.98 512.777 283.23 512.828 283.52 512.824 cv
283.809 512.828 284.063 512.773 284.277 512.66 cv
284.492 512.555 284.668 512.406 284.813 512.219 cv
284.953 512.035 285.059 511.828 285.125 511.598 cv
285.191 511.367 285.227 511.133 285.227 510.887 cv
cp
f
358.688 511.371 mo
358.688 511.758 358.617 512.102 358.48 512.398 cv
358.344 512.703 358.148 512.953 357.891 513.156 cv
357.633 513.363 357.313 513.52 356.934 513.621 cv
356.551 513.727 356.117 513.777 355.633 513.777 cv
355.172 513.777 354.762 513.73 354.402 513.637 cv
354.039 513.543 353.734 513.402 353.484 513.211 cv
353.234 513.027 353.043 512.797 352.91 512.52 cv
352.777 512.246 352.711 511.934 352.711 511.578 cv
352.711 511.305 352.754 511.047 352.848 510.812 cv
352.934 510.578 353.066 510.363 353.242 510.168 cv
353.41 509.973 353.621 509.789 353.875 509.613 cv
354.125 509.445 354.41 509.281 354.727 509.125 cv
354.453 508.984 354.211 508.836 354 508.676 cv
353.789 508.52 353.609 508.348 353.465 508.16 cv
353.316 507.977 353.207 507.781 353.133 507.57 cv
353.055 507.363 353.016 507.133 353.02 506.883 cv
353.016 506.574 353.07 506.281 353.188 506.008 cv
353.297 505.738 353.469 505.504 353.695 505.301 cv
353.922 505.102 354.207 504.941 354.559 504.824 cv
354.902 504.707 355.313 504.648 355.781 504.648 cv
356.227 504.648 356.613 504.703 356.941 504.809 cv
357.27 504.918 357.539 505.062 357.75 505.246 cv
357.961 505.434 358.117 505.652 358.223 505.902 cv
358.32 506.152 358.371 506.422 358.375 506.711 cv
358.371 506.945 358.332 507.172 358.262 507.383 cv
358.184 507.602 358.074 507.805 357.926 507.992 cv
357.777 508.187 357.598 508.367 357.387 508.531 cv
357.176 508.703 356.934 508.859 356.66 509 cv
356.98 509.164 357.266 509.328 357.523 509.496 cv
357.773 509.664 357.988 509.844 358.164 510.039 cv
358.332 510.234 358.461 510.441 358.555 510.656 cv
358.641 510.875 358.688 511.113 358.688 511.371 cv
cp
357.207 506.82 mo
357.203 506.633 357.172 506.457 357.105 506.301 cv
357.039 506.145 356.941 506.012 356.816 505.902 cv
356.688 505.793 356.527 505.711 356.34 505.652 cv
356.145 505.598 355.93 505.57 355.691 505.566 cv
355.195 505.57 354.82 505.68 354.57 505.902 cv
354.313 506.129 354.188 506.437 354.191 506.82 cv
354.188 507 354.219 507.164 354.281 507.316 cv
354.344 507.473 354.438 507.617 354.57 507.754 cv
354.695 507.891 354.859 508.023 355.063 508.152 cv
355.258 508.285 355.496 508.422 355.773 508.562 cv
356.234 508.328 356.59 508.066 356.836 507.773 cv
357.082 507.488 357.203 507.172 357.207 506.82 cv
cp
357.496 511.496 mo
357.492 511.289 357.453 511.098 357.379 510.926 cv
357.297 510.758 357.18 510.598 357.023 510.445 cv
356.867 510.297 356.668 510.152 356.434 510.012 cv
356.195 509.875 355.926 509.73 355.617 509.578 cv
355.328 509.723 355.074 509.863 354.859 510.004 cv
354.641 510.145 354.461 510.293 354.324 510.441 cv
354.184 510.598 354.078 510.754 354.008 510.918 cv
353.934 511.086 353.898 511.27 353.902 511.469 cv
353.898 511.914 354.051 512.258 354.359 512.496 cv
354.66 512.742 355.113 512.863 355.719 512.859 cv
356.301 512.863 356.746 512.742 357.047 512.492 cv
357.344 512.25 357.492 511.918 357.496 511.496 cv
cp
f
427.246 513.184 mo
427.242 513.273 427.234 513.344 427.223 513.402 cv
427.207 513.465 427.188 513.516 427.168 513.547 cv
427.145 513.586 427.121 513.609 427.09 513.625 cv
427.059 513.641 427.027 513.648 427 513.648 cv
422.363 513.648 li
422.328 513.648 422.301 513.641 422.273 513.625 cv
422.246 513.609 422.219 513.586 422.195 513.547 cv
422.168 513.516 422.148 513.465 422.137 513.402 cv
422.121 513.344 422.113 513.273 422.117 513.184 cv
422.113 513.105 422.121 513.031 422.137 512.969 cv
422.148 512.91 422.164 512.863 422.188 512.824 cv
422.203 512.789 422.23 512.758 422.262 512.734 cv
422.293 512.715 422.324 512.707 422.363 512.703 cv
424.215 512.703 li
424.215 505.957 li
422.5 506.977 li
422.41 507.027 422.34 507.055 422.293 507.062 cv
422.238 507.07 422.195 507.062 422.164 507.031 cv
422.129 507.004 422.109 506.953 422.098 506.883 cv
422.086 506.816 422.078 506.73 422.082 506.621 cv
422.078 506.547 422.082 506.48 422.094 506.422 cv
422.098 506.371 422.109 506.324 422.125 506.285 cv
422.137 506.25 422.156 506.219 422.18 506.191 cv
422.203 506.164 422.234 506.137 422.281 506.109 cv
424.324 504.797 li
424.34 504.785 424.359 504.773 424.391 504.766 cv
424.414 504.758 424.449 504.75 424.496 504.738 cv
424.535 504.73 424.586 504.723 424.641 504.719 cv
424.695 504.719 424.762 504.719 424.848 504.715 cv
424.953 504.719 425.047 504.723 425.121 504.73 cv
425.191 504.738 425.246 504.754 425.293 504.77 cv
425.332 504.789 425.359 504.809 425.375 504.832 cv
425.383 504.859 425.391 504.883 425.395 504.906 cv
425.395 512.703 li
427 512.703 li
427.035 512.707 427.07 512.715 427.102 512.734 cv
427.133 512.758 427.156 512.789 427.18 512.824 cv
427.195 512.863 427.211 512.91 427.227 512.969 cv
427.234 513.031 427.242 513.105 427.246 513.184 cv
cp
f
434.598 509.191 mo
434.594 509.875 434.543 510.496 434.438 511.059 cv
434.328 511.621 434.148 512.105 433.902 512.508 cv
433.648 512.914 433.32 513.227 432.922 513.445 cv
432.516 513.668 432.023 513.777 431.438 513.777 cv
430.879 513.777 430.406 513.68 430.027 513.48 cv
429.645 513.285 429.34 512.992 429.105 512.605 cv
428.871 512.219 428.703 511.746 428.609 511.18 cv
428.508 510.617 428.461 509.969 428.461 509.234 cv
428.461 508.562 428.516 507.941 428.625 507.375 cv
428.734 506.812 428.91 506.328 429.16 505.922 cv
429.402 505.52 429.727 505.207 430.133 504.98 cv
430.531 504.762 431.027 504.648 431.617 504.648 cv
432.176 504.648 432.648 504.75 433.031 504.945 cv
433.414 505.148 433.719 505.441 433.953 505.824 cv
434.184 506.215 434.352 506.687 434.449 507.25 cv
434.547 507.812 434.594 508.461 434.598 509.191 cv
cp
433.391 509.273 mo
433.387 508.832 433.371 508.434 433.344 508.082 cv
433.309 507.73 433.262 507.422 433.203 507.152 cv
433.137 506.883 433.059 506.652 432.961 506.457 cv
432.863 506.266 432.746 506.105 432.609 505.977 cv
432.469 505.852 432.309 505.758 432.137 505.699 cv
431.957 505.645 431.762 505.617 431.547 505.613 cv
431.156 505.617 430.84 505.707 430.602 505.891 cv
430.355 506.074 430.164 506.328 430.027 506.645 cv
429.887 506.965 429.793 507.336 429.742 507.766 cv
429.691 508.195 429.668 508.66 429.668 509.152 cv
429.668 509.816 429.699 510.379 429.77 510.84 cv
429.836 511.309 429.945 511.687 430.098 511.977 cv
430.242 512.273 430.434 512.484 430.664 512.613 cv
430.895 512.75 431.176 512.816 431.508 512.812 cv
431.762 512.816 431.984 512.777 432.18 512.691 cv
432.371 512.613 432.539 512.492 432.68 512.336 cv
432.82 512.184 432.934 512 433.027 511.785 cv
433.113 511.57 433.188 511.332 433.246 511.07 cv
433.297 510.812 433.336 510.531 433.359 510.227 cv
433.379 509.922 433.387 509.605 433.391 509.273 cv
cp
f
499.555 513.184 mo
499.551 513.273 499.543 513.344 499.531 513.402 cv
499.516 513.465 499.496 513.516 499.477 513.547 cv
499.453 513.586 499.43 513.609 499.398 513.625 cv
499.367 513.641 499.336 513.648 499.309 513.648 cv
494.672 513.648 li
494.637 513.648 494.609 513.641 494.582 513.625 cv
494.555 513.609 494.527 513.586 494.504 513.547 cv
494.477 513.516 494.457 513.465 494.445 513.402 cv
494.43 513.344 494.422 513.273 494.426 513.184 cv
494.422 513.105 494.43 513.031 494.445 512.969 cv
494.457 512.91 494.473 512.863 494.496 512.824 cv
494.512 512.789 494.539 512.758 494.57 512.734 cv
494.602 512.715 494.633 512.707 494.672 512.703 cv
496.523 512.703 li
496.523 505.957 li
494.809 506.977 li
494.719 507.027 494.648 507.055 494.602 507.062 cv
494.547 507.07 494.504 507.062 494.473 507.031 cv
494.438 507.004 494.418 506.953 494.406 506.883 cv
494.395 506.816 494.387 506.73 494.391 506.621 cv
494.387 506.547 494.391 506.48 494.402 506.422 cv
494.406 506.371 494.418 506.324 494.434 506.285 cv
494.445 506.25 494.465 506.219 494.488 506.191 cv
494.512 506.164 494.543 506.137 494.59 506.109 cv
496.633 504.797 li
496.648 504.785 496.668 504.773 496.699 504.766 cv
496.723 504.758 496.758 504.75 496.805 504.738 cv
496.844 504.73 496.895 504.723 496.949 504.719 cv
497.004 504.719 497.07 504.719 497.156 504.715 cv
497.262 504.719 497.355 504.723 497.43 504.73 cv
497.5 504.738 497.555 504.754 497.602 504.77 cv
497.641 504.789 497.668 504.809 497.684 504.832 cv
497.691 504.859 497.699 504.883 497.703 504.906 cv
497.703 512.703 li
499.309 512.703 li
499.344 512.707 499.379 512.715 499.41 512.734 cv
499.441 512.758 499.465 512.789 499.488 512.824 cv
499.504 512.863 499.52 512.91 499.535 512.969 cv
499.543 513.031 499.551 513.105 499.555 513.184 cv
cp
f
506.617 513.141 mo
506.613 513.227 506.609 513.301 506.598 513.363 cv
506.586 513.43 506.57 513.484 506.551 513.523 cv
506.527 513.57 506.5 513.602 506.469 513.617 cv
506.434 513.641 506.395 513.648 506.355 513.648 cv
501.453 513.648 li
501.391 513.648 501.332 513.641 501.285 513.625 cv
501.234 513.609 501.195 513.586 501.16 513.547 cv
501.125 513.516 501.098 513.461 501.086 513.391 cv
501.066 513.32 501.059 513.234 501.063 513.133 cv
501.059 513.043 501.063 512.965 501.07 512.895 cv
501.074 512.828 501.09 512.77 501.117 512.715 cv
501.141 512.664 501.172 512.609 501.207 512.555 cv
501.242 512.504 501.285 512.449 501.344 512.387 cv
503.117 510.562 li
503.527 510.145 503.855 509.77 504.105 509.434 cv
504.352 509.105 504.543 508.801 504.676 508.523 cv
504.809 508.25 504.895 508 504.941 507.773 cv
504.98 507.551 505.004 507.34 505.004 507.145 cv
505.004 506.949 504.969 506.766 504.902 506.586 cv
504.836 506.414 504.742 506.258 504.617 506.121 cv
504.492 505.992 504.336 505.887 504.148 505.805 cv
503.961 505.73 503.742 505.691 503.496 505.687 cv
503.207 505.691 502.949 505.73 502.723 505.805 cv
502.492 505.887 502.293 505.973 502.121 506.059 cv
501.949 506.152 501.805 506.234 501.688 506.312 cv
501.57 506.391 501.484 506.43 501.434 506.43 cv
501.398 506.43 501.367 506.422 501.344 506.402 cv
501.313 506.387 501.293 506.355 501.277 506.312 cv
501.262 506.273 501.246 506.219 501.238 506.148 cv
501.227 506.082 501.223 506 501.227 505.902 cv
501.223 505.836 501.227 505.777 501.234 505.727 cv
501.238 505.676 501.246 505.633 501.258 505.594 cv
501.266 505.559 501.281 505.523 501.301 505.492 cv
501.32 505.461 501.355 505.422 501.414 505.371 cv
501.465 505.324 501.559 505.258 501.695 505.176 cv
501.828 505.094 502 505.016 502.203 504.934 cv
502.406 504.855 502.629 504.785 502.875 504.73 cv
503.117 504.676 503.375 504.648 503.648 504.648 cv
504.074 504.648 504.449 504.711 504.773 504.832 cv
505.094 504.953 505.359 505.117 505.574 505.328 cv
505.785 505.539 505.945 505.785 506.051 506.059 cv
506.156 506.34 506.211 506.637 506.211 506.949 cv
506.211 507.238 506.184 507.52 506.133 507.797 cv
506.082 508.082 505.977 508.387 505.816 508.711 cv
505.652 509.039 505.418 509.402 505.113 509.801 cv
504.805 510.203 504.398 510.664 503.895 511.18 cv
502.488 512.648 li
506.348 512.648 li
506.379 512.652 506.414 512.664 506.453 512.68 cv
506.484 512.703 506.516 512.734 506.543 512.773 cv
506.566 512.816 506.586 512.867 506.598 512.926 cv
506.609 512.992 506.613 513.062 506.617 513.141 cv
cp
f
571.844 513.184 mo
571.84 513.273 571.832 513.344 571.82 513.402 cv
571.805 513.465 571.785 513.516 571.766 513.547 cv
571.742 513.586 571.719 513.609 571.688 513.625 cv
571.656 513.641 571.625 513.648 571.598 513.648 cv
566.961 513.648 li
566.926 513.648 566.898 513.641 566.871 513.625 cv
566.844 513.609 566.816 513.586 566.793 513.547 cv
566.766 513.516 566.746 513.465 566.734 513.402 cv
566.719 513.344 566.711 513.273 566.715 513.184 cv
566.711 513.105 566.719 513.031 566.734 512.969 cv
566.746 512.91 566.762 512.863 566.785 512.824 cv
566.801 512.789 566.828 512.758 566.859 512.734 cv
566.891 512.715 566.922 512.707 566.961 512.703 cv
568.813 512.703 li
568.813 505.957 li
567.098 506.977 li
567.008 507.027 566.938 507.055 566.891 507.062 cv
566.836 507.07 566.793 507.062 566.762 507.031 cv
566.727 507.004 566.707 506.953 566.695 506.883 cv
566.684 506.816 566.676 506.73 566.68 506.621 cv
566.676 506.547 566.68 506.48 566.691 506.422 cv
566.695 506.371 566.707 506.324 566.723 506.285 cv
566.734 506.25 566.754 506.219 566.777 506.191 cv
566.801 506.164 566.832 506.137 566.879 506.109 cv
568.922 504.797 li
568.938 504.785 568.957 504.773 568.988 504.766 cv
569.012 504.758 569.047 504.75 569.094 504.738 cv
569.133 504.73 569.184 504.723 569.238 504.719 cv
569.293 504.719 569.359 504.719 569.445 504.715 cv
569.551 504.719 569.645 504.723 569.719 504.73 cv
569.789 504.738 569.844 504.754 569.891 504.77 cv
569.93 504.789 569.957 504.809 569.973 504.832 cv
569.98 504.859 569.988 504.883 569.992 504.906 cv
569.992 512.703 li
571.598 512.703 li
571.633 512.707 571.668 512.715 571.699 512.734 cv
571.73 512.758 571.754 512.789 571.777 512.824 cv
571.793 512.863 571.809 512.91 571.824 512.969 cv
571.832 513.031 571.84 513.105 571.844 513.184 cv
cp
f
579.281 511.125 mo
579.277 511.277 579.254 511.398 579.211 511.484 cv
579.164 511.574 579.102 511.617 579.02 511.613 cv
578.02 511.613 li
578.02 513.477 li
578.02 513.516 578.008 513.547 577.992 513.57 cv
577.969 513.598 577.938 513.617 577.895 513.637 cv
577.844 513.652 577.781 513.664 577.711 513.676 cv
577.633 513.684 577.539 513.687 577.422 513.691 cv
577.305 513.687 577.207 513.684 577.137 513.676 cv
577.059 513.664 577 513.652 576.957 513.637 cv
576.91 513.617 576.879 513.598 576.863 513.57 cv
576.844 513.547 576.836 513.516 576.84 513.477 cv
576.84 511.613 li
573.211 511.613 li
573.152 511.617 573.109 511.609 573.074 511.594 cv
573.039 511.582 573.004 511.555 572.977 511.516 cv
572.945 511.48 572.926 511.43 572.914 511.359 cv
572.902 511.293 572.898 511.203 572.898 511.09 cv
572.898 511.008 572.898 510.93 572.906 510.859 cv
572.906 510.789 572.918 510.727 572.934 510.672 cv
572.945 510.617 572.961 510.562 572.988 510.508 cv
573.008 510.453 573.035 510.398 573.07 510.336 cv
576.23 504.949 li
576.25 504.914 576.285 504.883 576.332 504.855 cv
576.375 504.828 576.43 504.805 576.504 504.785 cv
576.57 504.77 576.656 504.758 576.762 504.746 cv
576.863 504.742 576.984 504.738 577.125 504.734 cv
577.273 504.738 577.41 504.742 577.527 504.754 cv
577.641 504.766 577.73 504.781 577.805 504.797 cv
577.871 504.816 577.926 504.84 577.965 504.871 cv
578 504.902 578.02 504.937 578.02 504.977 cv
578.02 510.641 li
579.02 510.641 li
579.094 510.645 579.156 510.684 579.207 510.762 cv
579.254 510.844 579.277 510.965 579.281 511.125 cv
cp
576.84 505.773 mo
576.828 505.773 li
573.977 510.641 li
576.84 510.641 li
cp
f
644.156 513.184 mo
644.152 513.273 644.145 513.344 644.133 513.402 cv
644.117 513.465 644.098 513.516 644.078 513.547 cv
644.055 513.586 644.031 513.609 644 513.625 cv
643.969 513.641 643.938 513.648 643.91 513.648 cv
639.273 513.648 li
639.238 513.648 639.211 513.641 639.184 513.625 cv
639.156 513.609 639.129 513.586 639.105 513.547 cv
639.078 513.516 639.059 513.465 639.047 513.402 cv
639.031 513.344 639.023 513.273 639.027 513.184 cv
639.023 513.105 639.031 513.031 639.047 512.969 cv
639.059 512.91 639.074 512.863 639.098 512.824 cv
639.113 512.789 639.141 512.758 639.172 512.734 cv
639.203 512.715 639.234 512.707 639.273 512.703 cv
641.125 512.703 li
641.125 505.957 li
639.41 506.977 li
639.32 507.027 639.25 507.055 639.203 507.062 cv
639.148 507.07 639.105 507.062 639.074 507.031 cv
639.039 507.004 639.02 506.953 639.008 506.883 cv
638.996 506.816 638.988 506.73 638.992 506.621 cv
638.988 506.547 638.992 506.48 639.004 506.422 cv
639.008 506.371 639.02 506.324 639.035 506.285 cv
639.047 506.25 639.066 506.219 639.09 506.191 cv
639.113 506.164 639.145 506.137 639.191 506.109 cv
641.234 504.797 li
641.25 504.785 641.27 504.773 641.301 504.766 cv
641.324 504.758 641.359 504.75 641.406 504.738 cv
641.445 504.73 641.496 504.723 641.551 504.719 cv
641.605 504.719 641.672 504.719 641.758 504.715 cv
641.863 504.719 641.957 504.723 642.031 504.73 cv
642.102 504.738 642.156 504.754 642.203 504.77 cv
642.242 504.789 642.27 504.809 642.285 504.832 cv
642.293 504.859 642.301 504.883 642.305 504.906 cv
642.305 512.703 li
643.91 512.703 li
643.945 512.707 643.98 512.715 644.012 512.734 cv
644.043 512.758 644.066 512.789 644.09 512.824 cv
644.105 512.863 644.121 512.91 644.137 512.969 cv
644.145 513.031 644.152 513.105 644.156 513.184 cv
cp
f
651.441 510.777 mo
651.441 511.168 651.379 511.547 651.262 511.906 cv
651.137 512.273 650.953 512.59 650.711 512.863 cv
650.461 513.141 650.148 513.363 649.773 513.527 cv
649.391 513.695 648.945 513.777 648.43 513.777 cv
648.059 513.777 647.73 513.734 647.449 513.641 cv
647.164 513.555 646.918 513.422 646.707 513.25 cv
646.496 513.082 646.32 512.875 646.184 512.629 cv
646.043 512.383 645.93 512.102 645.848 511.785 cv
645.762 511.473 645.703 511.129 645.668 510.75 cv
645.629 510.379 645.609 509.977 645.613 509.543 cv
645.609 509.164 645.629 508.781 645.672 508.391 cv
645.711 508.008 645.785 507.633 645.891 507.266 cv
645.996 506.906 646.141 506.566 646.32 506.25 cv
646.5 505.934 646.727 505.656 647 505.422 cv
647.273 505.187 647.598 505 647.977 504.859 cv
648.355 504.723 648.797 504.656 649.301 504.652 cv
649.469 504.656 649.641 504.664 649.813 504.684 cv
649.984 504.707 650.145 504.738 650.293 504.77 cv
650.441 504.809 650.563 504.844 650.664 504.883 cv
650.762 504.922 650.828 504.957 650.863 504.98 cv
650.891 505.008 650.914 505.035 650.934 505.062 cv
650.949 505.094 650.965 505.125 650.973 505.16 cv
650.98 505.195 650.984 505.234 650.992 505.277 cv
650.992 505.32 650.996 505.375 651 505.437 cv
650.996 505.523 650.996 505.594 650.996 505.648 cv
650.992 505.711 650.98 505.758 650.969 505.793 cv
650.949 505.832 650.93 505.859 650.906 505.875 cv
650.879 505.895 650.848 505.902 650.809 505.902 cv
650.758 505.902 650.688 505.887 650.602 505.855 cv
650.512 505.824 650.406 505.789 650.285 505.746 cv
650.16 505.711 650.012 505.676 649.836 505.641 cv
649.66 505.613 649.457 505.598 649.227 505.594 cv
648.797 505.598 648.43 505.684 648.125 505.855 cv
647.82 506.027 647.57 506.262 647.375 506.555 cv
647.18 506.848 647.035 507.187 646.945 507.57 cv
646.848 507.961 646.793 508.363 646.785 508.781 cv
646.902 508.715 647.039 508.648 647.188 508.578 cv
647.336 508.512 647.496 508.449 647.672 508.391 cv
647.848 508.34 648.035 508.293 648.23 508.258 cv
648.426 508.227 648.637 508.211 648.863 508.207 cv
649.34 508.211 649.742 508.277 650.074 508.402 cv
650.402 508.535 650.668 508.715 650.875 508.945 cv
651.074 509.176 651.219 509.445 651.309 509.758 cv
651.395 510.07 651.441 510.41 651.441 510.777 cv
cp
650.246 510.887 mo
650.246 510.625 650.219 510.383 650.168 510.164 cv
650.113 509.949 650.023 509.766 649.902 509.609 cv
649.777 509.461 649.613 509.344 649.41 509.262 cv
649.199 509.18 648.945 509.137 648.648 509.137 cv
648.477 509.137 648.309 509.152 648.141 509.184 cv
647.969 509.215 647.805 509.258 647.648 509.305 cv
647.488 509.359 647.34 509.422 647.199 509.492 cv
647.055 509.566 646.922 509.641 646.805 509.719 cv
646.801 510.312 646.84 510.809 646.918 511.203 cv
646.992 511.602 647.102 511.918 647.246 512.156 cv
647.391 512.398 647.57 512.57 647.785 512.672 cv
648 512.777 648.25 512.828 648.539 512.824 cv
648.828 512.828 649.082 512.773 649.297 512.66 cv
649.512 512.555 649.688 512.406 649.832 512.219 cv
649.973 512.035 650.078 511.828 650.145 511.598 cv
650.211 511.367 650.246 511.133 650.246 510.887 cv
cp
f
16.957 323.273 mo
17 323.277 17.035 323.285 17.066 323.297 cv
17.098 323.316 17.125 323.352 17.145 323.398 cv
17.164 323.453 17.176 323.523 17.191 323.617 cv
17.199 323.711 17.207 323.836 17.207 323.992 cv
17.207 324.129 17.199 324.242 17.191 324.324 cv
17.176 324.41 17.164 324.477 17.141 324.527 cv
17.121 324.582 17.086 324.621 17.043 324.648 cv
17.004 324.68 16.953 324.707 16.887 324.723 cv
14.512 325.652 li
14.242 325.766 13.996 325.879 13.766 325.992 cv
13.543 326.109 13.348 326.246 13.184 326.406 cv
13.023 326.57 12.895 326.762 12.801 326.977 cv
12.711 327.199 12.668 327.461 12.664 327.762 cv
12.664 328.66 li
16.957 328.66 li
17 328.664 17.035 328.676 17.066 328.695 cv
17.098 328.723 17.125 328.758 17.141 328.805 cv
17.16 328.855 17.172 328.922 17.188 329.008 cv
17.199 329.094 17.207 329.203 17.207 329.328 cv
17.207 329.461 17.199 329.566 17.188 329.652 cv
17.172 329.738 17.16 329.809 17.141 329.859 cv
17.125 329.914 17.098 329.949 17.066 329.969 cv
17.035 329.992 17 330.004 16.957 330 cv
7.621 330 li
7.418 330.004 7.277 329.949 7.195 329.84 cv
7.117 329.734 7.078 329.621 7.074 329.5 cv
7.074 327.359 li
7.078 327.109 7.082 326.895 7.094 326.723 cv
7.109 326.555 7.125 326.402 7.137 326.266 cv
7.207 325.879 7.313 325.535 7.457 325.234 cv
7.605 324.937 7.793 324.687 8.012 324.484 cv
8.238 324.281 8.492 324.129 8.781 324.027 cv
9.07 323.926 9.391 323.875 9.734 323.875 cv
10.074 323.875 10.375 323.922 10.641 324.012 cv
10.91 324.105 11.148 324.238 11.352 324.406 cv
11.563 324.578 11.738 324.781 11.887 325.02 cv
12.035 325.262 12.164 325.531 12.266 325.824 cv
12.344 325.66 12.434 325.508 12.543 325.371 cv
12.656 325.238 12.793 325.113 12.945 324.992 cv
13.105 324.879 13.285 324.766 13.484 324.66 cv
13.688 324.559 13.914 324.457 14.168 324.348 cv
16.387 323.445 li
16.574 323.375 16.707 323.328 16.781 323.305 cv
16.859 323.289 16.918 323.277 16.957 323.273 cv
cp
9.875 325.293 mo
9.484 325.293 9.148 325.383 8.875 325.559 cv
8.602 325.738 8.406 326.035 8.285 326.445 cv
8.25 326.578 8.223 326.723 8.207 326.887 cv
8.191 327.051 8.184 327.266 8.184 327.527 cv
8.184 328.66 li
11.582 328.66 li
11.582 327.352 li
11.582 327 11.539 326.695 11.453 326.434 cv
11.367 326.18 11.25 325.965 11.094 325.793 cv
10.945 325.625 10.762 325.5 10.551 325.414 cv
10.344 325.336 10.121 325.293 9.875 325.293 cv
cp
f
16.965 315.473 mo
17.012 315.477 17.047 315.484 17.07 315.5 cv
17.102 315.52 17.125 315.555 17.145 315.598 cv
17.164 315.645 17.176 315.703 17.191 315.777 cv
17.199 315.855 17.207 315.949 17.207 316.055 cv
17.207 316.18 17.199 316.277 17.191 316.348 cv
17.176 316.426 17.164 316.484 17.145 316.527 cv
17.125 316.574 17.102 316.605 17.07 316.617 cv
17.047 316.637 17.012 316.645 16.965 316.641 cv
16.039 316.641 li
16.484 317.043 16.805 317.437 17.004 317.824 cv
17.207 318.219 17.305 318.613 17.309 319.008 cv
17.305 319.48 17.23 319.875 17.074 320.191 cv
16.922 320.512 16.711 320.77 16.441 320.965 cv
16.176 321.168 15.863 321.309 15.504 321.391 cv
15.148 321.48 14.715 321.523 14.207 321.52 cv
9.953 321.52 li
9.914 321.523 9.879 321.516 9.848 321.492 cv
9.82 321.477 9.797 321.441 9.77 321.387 cv
9.75 321.34 9.734 321.27 9.723 321.184 cv
9.719 321.102 9.715 321 9.711 320.871 cv
9.715 320.75 9.719 320.645 9.723 320.559 cv
9.734 320.477 9.75 320.41 9.77 320.363 cv
9.797 320.316 9.82 320.281 9.848 320.258 cv
9.879 320.238 9.914 320.23 9.953 320.227 cv
14.035 320.227 li
14.449 320.23 14.777 320.199 15.023 320.137 cv
15.27 320.078 15.48 319.988 15.652 319.863 cv
15.832 319.746 15.965 319.59 16.059 319.398 cv
16.156 319.215 16.207 318.996 16.203 318.746 cv
16.207 318.426 16.09 318.105 15.859 317.781 cv
15.633 317.465 15.297 317.125 14.852 316.766 cv
9.953 316.766 li
9.914 316.766 9.879 316.758 9.848 316.738 cv
9.82 316.723 9.797 316.687 9.77 316.633 cv
9.75 316.582 9.734 316.516 9.723 316.434 cv
9.719 316.355 9.715 316.25 9.711 316.117 cv
9.715 315.996 9.719 315.891 9.723 315.805 cv
9.734 315.723 9.75 315.66 9.77 315.613 cv
9.797 315.57 9.82 315.535 9.848 315.508 cv
9.879 315.488 9.914 315.477 9.953 315.473 cv
cp
f
16.965 307.062 mo
17.012 307.062 17.047 307.074 17.07 307.094 cv
17.102 307.117 17.125 307.152 17.145 307.195 cv
17.164 307.246 17.176 307.309 17.191 307.391 cv
17.199 307.473 17.207 307.578 17.207 307.699 cv
17.207 307.832 17.199 307.937 17.191 308.02 cv
17.176 308.105 17.164 308.172 17.145 308.215 cv
17.125 308.266 17.102 308.297 17.07 308.316 cv
17.047 308.34 17.012 308.352 16.965 308.348 cv
12.859 308.348 li
12.461 308.352 12.141 308.383 11.895 308.441 cv
11.652 308.508 11.441 308.598 11.262 308.715 cv
11.086 308.832 10.949 308.988 10.855 309.176 cv
10.762 309.371 10.715 309.59 10.715 309.836 cv
10.715 310.16 10.832 310.484 11.059 310.805 cv
11.293 311.129 11.625 311.465 12.063 311.816 cv
16.965 311.816 li
17.012 311.82 17.047 311.832 17.07 311.848 cv
17.102 311.871 17.125 311.902 17.145 311.949 cv
17.164 311.996 17.176 312.062 17.191 312.141 cv
17.199 312.227 17.207 312.332 17.207 312.461 cv
17.207 312.59 17.199 312.695 17.191 312.773 cv
17.176 312.859 17.164 312.926 17.145 312.973 cv
17.125 313.027 17.102 313.059 17.07 313.074 cv
17.047 313.094 17.012 313.105 16.965 313.102 cv
9.953 313.102 li
9.914 313.105 9.879 313.098 9.848 313.078 cv
9.82 313.066 9.797 313.035 9.77 312.984 cv
9.75 312.941 9.734 312.879 9.723 312.805 cv
9.719 312.734 9.715 312.641 9.711 312.516 cv
9.715 312.406 9.719 312.309 9.723 312.23 cv
9.734 312.156 9.75 312.098 9.77 312.055 cv
9.797 312.016 9.82 311.988 9.848 311.969 cv
9.879 311.953 9.914 311.945 9.953 311.941 cv
10.879 311.941 li
10.438 311.551 10.117 311.156 9.91 310.762 cv
9.707 310.371 9.602 309.973 9.602 309.57 cv
9.602 309.102 9.684 308.711 9.84 308.391 cv
10.004 308.074 10.215 307.812 10.477 307.613 cv
10.742 307.418 11.051 307.277 11.406 307.191 cv
11.762 307.105 12.191 307.062 12.688 307.062 cv
cp
f
16.449 301.187 mo
16.605 301.187 16.723 301.199 16.809 301.219 cv
16.898 301.242 16.965 301.273 17.004 301.312 cv
17.047 301.355 17.086 301.418 17.121 301.5 cv
17.156 301.586 17.184 301.68 17.211 301.785 cv
17.23 301.895 17.25 302.008 17.27 302.125 cv
17.281 302.242 17.289 302.363 17.293 302.48 cv
17.289 302.848 17.242 303.16 17.148 303.418 cv
17.055 303.68 16.91 303.891 16.711 304.055 cv
16.52 304.223 16.273 304.344 15.973 304.418 cv
15.676 304.496 15.324 304.535 14.914 304.531 cv
10.816 304.531 li
10.816 305.512 li
10.82 305.59 10.777 305.652 10.691 305.699 cv
10.609 305.746 10.477 305.77 10.285 305.77 cv
10.191 305.77 10.109 305.766 10.039 305.75 cv
9.977 305.742 9.918 305.723 9.871 305.699 cv
9.828 305.68 9.797 305.652 9.777 305.617 cv
9.762 305.586 9.754 305.551 9.75 305.504 cv
9.75 304.531 li
8.082 304.531 li
8.051 304.535 8.016 304.523 7.98 304.504 cv
7.953 304.488 7.926 304.457 7.898 304.402 cv
7.879 304.355 7.863 304.289 7.848 304.203 cv
7.84 304.125 7.832 304.02 7.832 303.891 cv
7.832 303.762 7.84 303.656 7.848 303.574 cv
7.863 303.492 7.879 303.426 7.898 303.379 cv
7.926 303.332 7.953 303.301 7.98 303.277 cv
8.016 303.262 8.051 303.25 8.082 303.246 cv
9.75 303.246 li
9.75 301.445 li
9.754 301.406 9.762 301.371 9.777 301.336 cv
9.797 301.309 9.828 301.281 9.871 301.254 cv
9.918 301.234 9.977 301.219 10.039 301.203 cv
10.109 301.195 10.191 301.187 10.285 301.187 cv
10.477 301.187 10.609 301.211 10.691 301.258 cv
10.777 301.305 10.82 301.367 10.816 301.445 cv
10.816 303.246 li
14.73 303.246 li
15.215 303.25 15.578 303.18 15.824 303.031 cv
16.074 302.891 16.199 302.633 16.195 302.262 cv
16.199 302.148 16.188 302.043 16.16 301.945 cv
16.141 301.855 16.117 301.773 16.086 301.695 cv
16.063 301.625 16.035 301.562 16.012 301.508 cv
15.988 301.461 15.977 301.414 15.977 301.367 cv
15.977 301.344 15.984 301.316 15.996 301.293 cv
16.012 301.27 16.035 301.254 16.07 301.238 cv
16.109 301.23 16.16 301.219 16.219 301.203 cv
16.285 301.195 16.363 301.187 16.449 301.187 cv
cp
f
16.965 298.172 mo
17.012 298.176 17.047 298.187 17.07 298.203 cv
17.102 298.227 17.125 298.258 17.145 298.305 cv
17.164 298.352 17.176 298.418 17.191 298.496 cv
17.199 298.582 17.207 298.687 17.207 298.816 cv
17.207 298.945 17.199 299.051 17.191 299.129 cv
17.176 299.215 17.164 299.281 17.145 299.328 cv
17.125 299.383 17.102 299.414 17.07 299.43 cv
17.047 299.449 17.012 299.461 16.965 299.457 cv
9.953 299.457 li
9.918 299.461 9.887 299.449 9.852 299.43 cv
9.824 299.414 9.797 299.383 9.773 299.328 cv
9.754 299.281 9.738 299.215 9.727 299.129 cv
9.719 299.051 9.715 298.945 9.711 298.816 cv
9.715 298.687 9.719 298.582 9.727 298.496 cv
9.738 298.418 9.754 298.352 9.773 298.305 cv
9.797 298.258 9.824 298.227 9.852 298.203 cv
9.887 298.187 9.918 298.176 9.953 298.172 cv
cp
7.582 298.023 mo
7.887 298.023 8.094 298.082 8.199 298.195 cv
8.313 298.309 8.367 298.52 8.363 298.824 cv
8.367 299.129 8.313 299.336 8.203 299.445 cv
8.098 299.562 7.895 299.617 7.598 299.613 cv
7.297 299.617 7.094 299.559 6.984 299.441 cv
6.879 299.328 6.824 299.117 6.82 298.809 cv
6.824 298.508 6.879 298.305 6.98 298.191 cv
7.09 298.082 7.289 298.023 7.582 298.023 cv
cp
f
16.965 285.348 mo
17.012 285.352 17.047 285.359 17.07 285.379 cv
17.102 285.402 17.125 285.437 17.145 285.48 cv
17.164 285.531 17.176 285.598 17.191 285.676 cv
17.199 285.762 17.207 285.863 17.207 285.988 cv
17.207 286.121 17.199 286.23 17.191 286.309 cv
17.176 286.395 17.164 286.461 17.145 286.508 cv
17.125 286.562 17.102 286.598 17.07 286.613 cv
17.047 286.637 17.012 286.645 16.965 286.645 cv
12.703 286.645 li
12.41 286.645 12.141 286.672 11.895 286.723 cv
11.652 286.777 11.441 286.859 11.262 286.973 cv
11.086 287.086 10.949 287.23 10.855 287.406 cv
10.762 287.586 10.715 287.797 10.715 288.031 cv
10.715 288.328 10.832 288.625 11.059 288.922 cv
11.293 289.227 11.625 289.555 12.063 289.91 cv
16.965 289.91 li
17.012 289.914 17.047 289.926 17.07 289.941 cv
17.102 289.965 17.125 289.996 17.145 290.043 cv
17.164 290.094 17.176 290.16 17.191 290.242 cv
17.199 290.328 17.207 290.434 17.207 290.555 cv
17.207 290.676 17.199 290.777 17.191 290.863 cv
17.176 290.949 17.164 291.02 17.145 291.066 cv
17.125 291.121 17.102 291.152 17.07 291.168 cv
17.047 291.187 17.012 291.199 16.965 291.195 cv
12.703 291.195 li
12.41 291.199 12.141 291.227 11.895 291.281 cv
11.652 291.34 11.441 291.426 11.262 291.539 cv
11.086 291.652 10.949 291.797 10.855 291.969 cv
10.762 292.148 10.715 292.355 10.715 292.59 cv
10.715 292.891 10.832 293.187 11.059 293.488 cv
11.293 293.789 11.625 294.117 12.063 294.469 cv
16.965 294.469 li
17.012 294.473 17.047 294.484 17.07 294.5 cv
17.102 294.523 17.125 294.555 17.145 294.602 cv
17.164 294.648 17.176 294.715 17.191 294.793 cv
17.199 294.879 17.207 294.984 17.207 295.113 cv
17.207 295.242 17.199 295.348 17.191 295.426 cv
17.176 295.512 17.164 295.578 17.145 295.625 cv
17.125 295.68 17.102 295.711 17.07 295.727 cv
17.047 295.746 17.012 295.758 16.965 295.754 cv
9.953 295.754 li
9.914 295.758 9.879 295.75 9.848 295.73 cv
9.82 295.719 9.797 295.687 9.77 295.637 cv
9.75 295.594 9.734 295.531 9.723 295.457 cv
9.719 295.387 9.715 295.293 9.711 295.168 cv
9.715 295.059 9.719 294.961 9.723 294.883 cv
9.734 294.809 9.75 294.75 9.77 294.707 cv
9.797 294.668 9.82 294.641 9.848 294.621 cv
9.879 294.605 9.914 294.598 9.953 294.594 cv
10.879 294.594 li
10.438 294.203 10.117 293.82 9.91 293.445 cv
9.707 293.078 9.602 292.699 9.602 292.316 cv
9.602 292.027 9.637 291.77 9.703 291.535 cv
9.773 291.309 9.867 291.102 9.988 290.922 cv
10.109 290.746 10.254 290.598 10.422 290.469 cv
10.594 290.348 10.785 290.242 10.988 290.156 cv
10.738 289.926 10.523 289.703 10.344 289.492 cv
10.172 289.281 10.027 289.078 9.914 288.883 cv
9.809 288.687 9.73 288.5 9.676 288.316 cv
9.629 288.133 9.602 287.945 9.602 287.758 cv
9.602 287.305 9.684 286.926 9.84 286.621 cv
10.004 286.316 10.215 286.07 10.477 285.875 cv
10.742 285.687 11.051 285.551 11.406 285.469 cv
11.762 285.391 12.137 285.352 12.531 285.348 cv
cp
f
13.156 277.02 mo
13.359 277.023 13.5 277.074 13.586 277.172 cv
13.672 277.277 13.715 277.395 13.715 277.52 cv
13.715 282.137 li
14.105 282.141 14.457 282.102 14.77 282.02 cv
15.082 281.945 15.352 281.812 15.57 281.629 cv
15.797 281.449 15.969 281.215 16.086 280.918 cv
16.211 280.629 16.27 280.27 16.266 279.844 cv
16.27 279.512 16.242 279.215 16.184 278.953 cv
16.133 278.691 16.07 278.465 16 278.273 cv
15.934 278.086 15.875 277.93 15.816 277.805 cv
15.766 277.684 15.738 277.59 15.734 277.527 cv
15.738 277.492 15.746 277.461 15.762 277.43 cv
15.781 277.402 15.809 277.379 15.844 277.359 cv
15.883 277.348 15.934 277.336 15.996 277.324 cv
16.063 277.32 16.141 277.316 16.234 277.312 cv
16.305 277.316 16.363 277.32 16.41 277.32 cv
16.457 277.328 16.5 277.332 16.539 277.34 cv
16.578 277.348 16.613 277.363 16.645 277.379 cv
16.676 277.402 16.707 277.426 16.734 277.449 cv
16.766 277.48 16.813 277.562 16.875 277.703 cv
16.941 277.844 17.004 278.027 17.066 278.25 cv
17.129 278.477 17.184 278.734 17.234 279.027 cv
17.281 279.32 17.305 279.633 17.309 279.965 cv
17.305 280.543 17.227 281.051 17.066 281.48 cv
16.906 281.918 16.668 282.281 16.352 282.574 cv
16.035 282.875 15.641 283.098 15.16 283.246 cv
14.684 283.395 14.125 283.469 13.488 283.469 cv
12.891 283.469 12.352 283.395 11.867 283.238 cv
11.391 283.086 10.98 282.859 10.645 282.562 cv
10.309 282.27 10.051 281.914 9.871 281.5 cv
9.691 281.086 9.602 280.621 9.602 280.105 cv
9.602 279.555 9.691 279.086 9.867 278.699 cv
10.047 278.312 10.285 277.996 10.582 277.742 cv
10.883 277.496 11.234 277.312 11.633 277.195 cv
12.039 277.082 12.469 277.023 12.922 277.02 cv
cp
12.773 278.312 mo
12.098 278.297 11.566 278.449 11.184 278.766 cv
10.801 279.082 10.609 279.551 10.605 280.168 cv
10.609 280.492 10.668 280.773 10.785 281.012 cv
10.906 281.254 11.066 281.453 11.262 281.613 cv
11.461 281.777 11.691 281.902 11.953 281.988 cv
12.215 282.078 12.488 282.129 12.773 282.137 cv
cp
f
6.422 268.844 mo
7.469 269.34 8.539 269.707 9.637 269.949 cv
10.738 270.191 11.844 270.312 12.953 270.312 cv
14.07 270.312 15.18 270.191 16.273 269.941 cv
17.371 269.699 18.441 269.336 19.496 268.859 cv
19.555 268.836 19.609 268.824 19.656 268.816 cv
19.699 268.816 19.734 268.832 19.766 268.867 cv
19.793 268.906 19.813 268.961 19.828 269.035 cv
19.836 269.113 19.844 269.219 19.848 269.344 cv
19.844 269.441 19.84 269.52 19.84 269.586 cv
19.832 269.656 19.824 269.715 19.809 269.762 cv
19.793 269.812 19.773 269.855 19.754 269.883 cv
19.73 269.918 19.707 269.941 19.684 269.953 cv
19.152 270.234 18.617 270.48 18.074 270.691 cv
17.531 270.91 16.98 271.09 16.422 271.23 cv
15.859 271.379 15.293 271.488 14.719 271.559 cv
14.145 271.637 13.563 271.672 12.977 271.668 cv
12.391 271.672 11.813 271.633 11.238 271.547 cv
10.668 271.469 10.102 271.352 9.535 271.203 cv
8.973 271.055 8.418 270.875 7.871 270.664 cv
7.328 270.453 6.785 270.215 6.25 269.945 cv
6.23 269.941 6.215 269.926 6.195 269.902 cv
6.184 269.879 6.168 269.848 6.148 269.805 cv
6.137 269.766 6.125 269.707 6.113 269.633 cv
6.109 269.562 6.105 269.469 6.102 269.352 cv
6.105 269.234 6.113 269.141 6.125 269.062 cv
6.145 268.992 6.164 268.934 6.188 268.891 cv
6.215 268.852 6.25 268.828 6.289 268.82 cv
6.336 268.816 6.379 268.824 6.422 268.844 cv
cp
f
16.957 255.562 mo
17 255.562 17.035 255.574 17.066 255.594 cv
17.098 255.617 17.125 255.656 17.141 255.707 cv
17.16 255.762 17.172 255.828 17.188 255.91 cv
17.199 255.996 17.207 256.105 17.207 256.234 cv
17.207 256.363 17.199 256.469 17.188 256.555 cv
17.172 256.645 17.16 256.715 17.141 256.766 cv
17.125 256.816 17.098 256.852 17.066 256.871 cv
17.035 256.895 17 256.906 16.957 256.902 cv
8.176 256.902 li
8.176 256.918 li
16.996 260.473 li
17.035 260.488 17.066 260.512 17.09 260.539 cv
17.117 260.57 17.141 260.613 17.156 260.664 cv
17.176 260.723 17.188 260.785 17.195 260.859 cv
17.203 260.934 17.207 261.023 17.207 261.125 cv
17.207 261.238 17.199 261.332 17.191 261.406 cv
17.176 261.488 17.164 261.555 17.148 261.602 cv
17.133 261.656 17.113 261.695 17.082 261.723 cv
17.059 261.754 17.027 261.773 16.996 261.781 cv
8.176 265.18 li
8.176 265.187 li
16.957 265.187 li
17 265.191 17.035 265.199 17.066 265.219 cv
17.098 265.242 17.125 265.281 17.141 265.332 cv
17.16 265.387 17.172 265.457 17.188 265.539 cv
17.199 265.629 17.207 265.738 17.207 265.867 cv
17.207 266 17.199 266.105 17.188 266.191 cv
17.172 266.277 17.16 266.348 17.141 266.395 cv
17.125 266.449 17.098 266.484 17.066 266.5 cv
17.035 266.523 17 266.531 16.957 266.527 cv
7.684 266.527 li
7.469 266.531 7.313 266.473 7.215 266.355 cv
7.125 266.238 7.078 266.109 7.074 265.965 cv
7.074 265.141 li
7.078 264.977 7.094 264.828 7.121 264.699 cv
7.156 264.574 7.203 264.465 7.27 264.367 cv
7.34 264.273 7.426 264.191 7.527 264.129 cv
7.633 264.066 7.758 264.012 7.895 263.965 cv
15.195 261.078 li
15.195 261.039 li
7.918 258.039 li
7.766 257.984 7.633 257.922 7.52 257.852 cv
7.414 257.785 7.324 257.707 7.258 257.625 cv
7.195 257.543 7.148 257.453 7.117 257.352 cv
7.09 257.254 7.078 257.137 7.074 257.004 cv
7.074 256.141 li
7.078 256.062 7.09 255.984 7.109 255.914 cv
7.137 255.844 7.172 255.785 7.219 255.734 cv
7.27 255.684 7.332 255.641 7.406 255.609 cv
7.484 255.578 7.578 255.562 7.684 255.562 cv
cp
f
16.965 251.746 mo
17.012 251.75 17.047 251.762 17.07 251.777 cv
17.102 251.801 17.125 251.832 17.145 251.879 cv
17.164 251.926 17.176 251.992 17.191 252.07 cv
17.199 252.156 17.207 252.262 17.207 252.391 cv
17.207 252.52 17.199 252.625 17.191 252.703 cv
17.176 252.789 17.164 252.855 17.145 252.902 cv
17.125 252.957 17.102 252.988 17.07 253.004 cv
17.047 253.023 17.012 253.035 16.965 253.031 cv
9.953 253.031 li
9.918 253.035 9.887 253.023 9.852 253.004 cv
9.824 252.988 9.797 252.957 9.773 252.902 cv
9.754 252.855 9.738 252.789 9.727 252.703 cv
9.719 252.625 9.715 252.52 9.711 252.391 cv
9.715 252.262 9.719 252.156 9.727 252.07 cv
9.738 251.992 9.754 251.926 9.773 251.879 cv
9.797 251.832 9.824 251.801 9.852 251.777 cv
9.887 251.762 9.918 251.75 9.953 251.746 cv
cp
7.582 251.598 mo
7.887 251.598 8.094 251.656 8.199 251.77 cv
8.313 251.883 8.367 252.094 8.363 252.398 cv
8.367 252.703 8.313 252.91 8.203 253.02 cv
8.098 253.137 7.895 253.191 7.598 253.187 cv
7.297 253.191 7.094 253.133 6.984 253.016 cv
6.879 252.902 6.824 252.691 6.82 252.383 cv
6.824 252.082 6.879 251.879 6.98 251.766 cv
7.09 251.656 7.289 251.598 7.582 251.598 cv
cp
f
16.965 243.32 mo
17.012 243.32 17.047 243.332 17.07 243.352 cv
17.102 243.375 17.125 243.41 17.145 243.453 cv
17.164 243.504 17.176 243.566 17.191 243.648 cv
17.199 243.73 17.207 243.836 17.207 243.957 cv
17.207 244.09 17.199 244.195 17.191 244.277 cv
17.176 244.363 17.164 244.43 17.145 244.473 cv
17.125 244.523 17.102 244.555 17.07 244.574 cv
17.047 244.598 17.012 244.609 16.965 244.605 cv
12.859 244.605 li
12.461 244.609 12.141 244.641 11.895 244.699 cv
11.652 244.766 11.441 244.855 11.262 244.973 cv
11.086 245.09 10.949 245.246 10.855 245.434 cv
10.762 245.629 10.715 245.848 10.715 246.094 cv
10.715 246.418 10.832 246.742 11.059 247.062 cv
11.293 247.387 11.625 247.723 12.063 248.074 cv
16.965 248.074 li
17.012 248.078 17.047 248.09 17.07 248.105 cv
17.102 248.129 17.125 248.16 17.145 248.207 cv
17.164 248.254 17.176 248.32 17.191 248.398 cv
17.199 248.484 17.207 248.59 17.207 248.719 cv
17.207 248.848 17.199 248.953 17.191 249.031 cv
17.176 249.117 17.164 249.184 17.145 249.23 cv
17.125 249.285 17.102 249.316 17.07 249.332 cv
17.047 249.352 17.012 249.363 16.965 249.359 cv
9.953 249.359 li
9.914 249.363 9.879 249.355 9.848 249.336 cv
9.82 249.324 9.797 249.293 9.77 249.242 cv
9.75 249.199 9.734 249.137 9.723 249.062 cv
9.719 248.992 9.715 248.898 9.711 248.773 cv
9.715 248.664 9.719 248.566 9.723 248.488 cv
9.734 248.414 9.75 248.355 9.77 248.312 cv
9.797 248.273 9.82 248.246 9.848 248.227 cv
9.879 248.211 9.914 248.203 9.953 248.199 cv
10.879 248.199 li
10.438 247.809 10.117 247.414 9.91 247.02 cv
9.707 246.629 9.602 246.23 9.602 245.828 cv
9.602 245.359 9.684 244.969 9.84 244.648 cv
10.004 244.332 10.215 244.07 10.477 243.871 cv
10.742 243.676 11.051 243.535 11.406 243.449 cv
11.762 243.363 12.191 243.32 12.688 243.32 cv
cp
f
16.965 234.926 mo
17.012 234.93 17.047 234.937 17.07 234.953 cv
17.102 234.973 17.125 235.008 17.145 235.051 cv
17.164 235.098 17.176 235.156 17.191 235.23 cv
17.199 235.309 17.207 235.402 17.207 235.508 cv
17.207 235.633 17.199 235.73 17.191 235.801 cv
17.176 235.879 17.164 235.937 17.145 235.98 cv
17.125 236.027 17.102 236.059 17.07 236.07 cv
17.047 236.09 17.012 236.098 16.965 236.094 cv
16.039 236.094 li
16.484 236.496 16.805 236.891 17.004 237.277 cv
17.207 237.672 17.305 238.066 17.309 238.461 cv
17.305 238.934 17.23 239.328 17.074 239.645 cv
16.922 239.965 16.711 240.223 16.441 240.418 cv
16.176 240.621 15.863 240.762 15.504 240.844 cv
15.148 240.934 14.715 240.977 14.207 240.973 cv
9.953 240.973 li
9.914 240.977 9.879 240.969 9.848 240.945 cv
9.82 240.93 9.797 240.895 9.77 240.84 cv
9.75 240.793 9.734 240.723 9.723 240.637 cv
9.719 240.555 9.715 240.453 9.711 240.324 cv
9.715 240.203 9.719 240.098 9.723 240.012 cv
9.734 239.93 9.75 239.863 9.77 239.816 cv
9.797 239.77 9.82 239.734 9.848 239.711 cv
9.879 239.691 9.914 239.684 9.953 239.68 cv
14.035 239.68 li
14.449 239.684 14.777 239.652 15.023 239.59 cv
15.27 239.531 15.48 239.441 15.652 239.316 cv
15.832 239.199 15.965 239.043 16.059 238.852 cv
16.156 238.668 16.207 238.449 16.203 238.199 cv
16.207 237.879 16.09 237.559 15.859 237.234 cv
15.633 236.918 15.297 236.578 14.852 236.219 cv
9.953 236.219 li
9.914 236.219 9.879 236.211 9.848 236.191 cv
9.82 236.176 9.797 236.141 9.77 236.086 cv
9.75 236.035 9.734 235.969 9.723 235.887 cv
9.719 235.809 9.715 235.703 9.711 235.57 cv
9.715 235.449 9.719 235.344 9.723 235.258 cv
9.734 235.176 9.75 235.113 9.77 235.066 cv
9.797 235.023 9.82 234.988 9.848 234.961 cv
9.879 234.941 9.914 234.93 9.953 234.926 cv
cp
f
16.449 228.906 mo
16.605 228.906 16.723 228.918 16.809 228.937 cv
16.898 228.961 16.965 228.992 17.004 229.031 cv
17.047 229.074 17.086 229.137 17.121 229.219 cv
17.156 229.305 17.184 229.398 17.211 229.504 cv
17.23 229.613 17.25 229.727 17.27 229.844 cv
17.281 229.961 17.289 230.082 17.293 230.199 cv
17.289 230.566 17.242 230.879 17.148 231.137 cv
17.055 231.398 16.91 231.609 16.711 231.773 cv
16.52 231.941 16.273 232.062 15.973 232.137 cv
15.676 232.215 15.324 232.254 14.914 232.25 cv
10.816 232.25 li
10.816 233.23 li
10.82 233.309 10.777 233.371 10.691 233.418 cv
10.609 233.465 10.477 233.488 10.285 233.488 cv
10.191 233.488 10.109 233.484 10.039 233.469 cv
9.977 233.461 9.918 233.441 9.871 233.418 cv
9.828 233.398 9.797 233.371 9.777 233.336 cv
9.762 233.305 9.754 233.27 9.75 233.223 cv
9.75 232.25 li
8.082 232.25 li
8.051 232.254 8.016 232.242 7.98 232.223 cv
7.953 232.207 7.926 232.176 7.898 232.121 cv
7.879 232.074 7.863 232.008 7.848 231.922 cv
7.84 231.844 7.832 231.738 7.832 231.609 cv
7.832 231.48 7.84 231.375 7.848 231.293 cv
7.863 231.211 7.879 231.145 7.898 231.098 cv
7.926 231.051 7.953 231.02 7.98 230.996 cv
8.016 230.98 8.051 230.969 8.082 230.965 cv
9.75 230.965 li
9.75 229.164 li
9.754 229.125 9.762 229.09 9.777 229.055 cv
9.797 229.027 9.828 229 9.871 228.973 cv
9.918 228.953 9.977 228.937 10.039 228.922 cv
10.109 228.914 10.191 228.906 10.285 228.906 cv
10.477 228.906 10.609 228.93 10.691 228.977 cv
10.777 229.023 10.82 229.086 10.816 229.164 cv
10.816 230.965 li
14.73 230.965 li
15.215 230.969 15.578 230.898 15.824 230.75 cv
16.074 230.609 16.199 230.352 16.195 229.98 cv
16.199 229.867 16.188 229.762 16.16 229.664 cv
16.141 229.574 16.117 229.492 16.086 229.414 cv
16.063 229.344 16.035 229.281 16.012 229.227 cv
15.988 229.18 15.977 229.133 15.977 229.086 cv
15.977 229.062 15.984 229.035 15.996 229.012 cv
16.012 228.988 16.035 228.973 16.07 228.957 cv
16.109 228.949 16.16 228.937 16.219 228.922 cv
16.285 228.914 16.363 228.906 16.449 228.906 cv
cp
f
13.156 221.223 mo
13.359 221.227 13.5 221.277 13.586 221.375 cv
13.672 221.48 13.715 221.598 13.715 221.723 cv
13.715 226.34 li
14.105 226.344 14.457 226.305 14.77 226.223 cv
15.082 226.148 15.352 226.016 15.57 225.832 cv
15.797 225.652 15.969 225.418 16.086 225.121 cv
16.211 224.832 16.27 224.473 16.266 224.047 cv
16.27 223.715 16.242 223.418 16.184 223.156 cv
16.133 222.895 16.07 222.668 16 222.477 cv
15.934 222.289 15.875 222.133 15.816 222.008 cv
15.766 221.887 15.738 221.793 15.734 221.73 cv
15.738 221.695 15.746 221.664 15.762 221.633 cv
15.781 221.605 15.809 221.582 15.844 221.562 cv
15.883 221.551 15.934 221.539 15.996 221.527 cv
16.063 221.523 16.141 221.52 16.234 221.516 cv
16.305 221.52 16.363 221.523 16.41 221.523 cv
16.457 221.531 16.5 221.535 16.539 221.543 cv
16.578 221.551 16.613 221.566 16.645 221.582 cv
16.676 221.605 16.707 221.629 16.734 221.652 cv
16.766 221.684 16.813 221.766 16.875 221.906 cv
16.941 222.047 17.004 222.23 17.066 222.453 cv
17.129 222.68 17.184 222.937 17.234 223.23 cv
17.281 223.523 17.305 223.836 17.309 224.168 cv
17.305 224.746 17.227 225.254 17.066 225.684 cv
16.906 226.121 16.668 226.484 16.352 226.777 cv
16.035 227.078 15.641 227.301 15.16 227.449 cv
14.684 227.598 14.125 227.672 13.488 227.672 cv
12.891 227.672 12.352 227.598 11.867 227.441 cv
11.391 227.289 10.98 227.062 10.645 226.766 cv
10.309 226.473 10.051 226.117 9.871 225.703 cv
9.691 225.289 9.602 224.824 9.602 224.309 cv
9.602 223.758 9.691 223.289 9.867 222.902 cv
10.047 222.516 10.285 222.199 10.582 221.945 cv
10.883 221.699 11.234 221.516 11.633 221.398 cv
12.039 221.285 12.469 221.227 12.922 221.223 cv
cp
12.773 222.516 mo
12.098 222.5 11.566 222.652 11.184 222.969 cv
10.801 223.285 10.609 223.754 10.605 224.371 cv
10.609 224.695 10.668 224.977 10.785 225.215 cv
10.906 225.457 11.066 225.656 11.262 225.816 cv
11.461 225.98 11.691 226.105 11.953 226.191 cv
12.215 226.281 12.488 226.332 12.773 226.34 cv
cp
f
15.055 214.937 mo
15.418 214.941 15.738 215.008 16.016 215.137 cv
16.297 215.27 16.531 215.457 16.723 215.699 cv
16.918 215.945 17.063 216.238 17.16 216.574 cv
17.258 216.914 17.305 217.285 17.309 217.687 cv
17.305 217.941 17.285 218.18 17.25 218.402 cv
17.207 218.629 17.16 218.828 17.102 219.008 cv
17.043 219.187 16.98 219.34 16.914 219.465 cv
16.852 219.59 16.793 219.684 16.738 219.738 cv
16.688 219.797 16.617 219.836 16.52 219.859 cv
16.43 219.887 16.301 219.898 16.141 219.898 cv
16.043 219.898 15.961 219.895 15.891 219.883 cv
15.824 219.875 15.77 219.863 15.727 219.844 cv
15.688 219.832 15.656 219.809 15.637 219.781 cv
15.621 219.754 15.613 219.723 15.609 219.684 cv
15.613 219.629 15.648 219.543 15.715 219.43 cv
15.789 219.32 15.867 219.184 15.945 219.016 cv
16.031 218.855 16.105 218.664 16.176 218.437 cv
16.246 218.219 16.281 217.961 16.281 217.664 cv
16.281 217.449 16.258 217.25 16.211 217.07 cv
16.164 216.895 16.098 216.742 16.004 216.613 cv
15.918 216.484 15.801 216.383 15.656 216.312 cv
15.52 216.242 15.352 216.207 15.156 216.207 cv
14.961 216.207 14.797 216.258 14.66 216.359 cv
14.527 216.461 14.406 216.598 14.301 216.762 cv
14.199 216.93 14.109 217.113 14.023 217.32 cv
13.945 217.531 13.859 217.746 13.77 217.965 cv
13.684 218.184 13.582 218.398 13.469 218.609 cv
13.359 218.82 13.227 219.012 13.063 219.176 cv
12.906 219.348 12.711 219.48 12.484 219.578 cv
12.262 219.684 11.996 219.734 11.684 219.73 cv
11.41 219.734 11.145 219.68 10.891 219.57 cv
10.641 219.465 10.422 219.305 10.23 219.09 cv
10.043 218.879 9.891 218.613 9.773 218.293 cv
9.66 217.973 9.602 217.602 9.602 217.172 cv
9.602 216.988 9.617 216.801 9.648 216.613 cv
9.68 216.43 9.719 216.262 9.766 216.105 cv
9.813 215.957 9.863 215.828 9.918 215.719 cv
9.973 215.617 10.023 215.535 10.063 215.477 cv
10.109 215.426 10.145 215.391 10.172 215.367 cv
10.203 215.352 10.238 215.336 10.273 215.328 cv
10.316 215.32 10.363 215.312 10.418 215.305 cv
10.477 215.297 10.547 215.293 10.629 215.293 cv
10.719 215.293 10.797 215.297 10.859 215.305 cv
10.93 215.312 10.98 215.328 11.02 215.344 cv
11.063 215.367 11.094 215.387 11.109 215.41 cv
11.129 215.437 11.137 215.469 11.137 215.496 cv
11.137 215.547 11.109 215.613 11.051 215.699 cv
10.996 215.789 10.934 215.902 10.867 216.043 cv
10.805 216.184 10.746 216.352 10.684 216.539 cv
10.629 216.73 10.598 216.945 10.598 217.187 cv
10.598 217.41 10.625 217.602 10.672 217.766 cv
10.727 217.934 10.797 218.07 10.883 218.176 cv
10.977 218.281 11.082 218.363 11.207 218.414 cv
11.332 218.473 11.469 218.5 11.613 218.496 cv
11.816 218.5 11.984 218.449 12.121 218.344 cv
12.262 218.242 12.383 218.105 12.484 217.937 cv
12.59 217.773 12.684 217.582 12.766 217.367 cv
12.852 217.156 12.938 216.941 13.023 216.719 cv
13.113 216.5 13.215 216.281 13.32 216.062 cv
13.43 215.848 13.559 215.656 13.715 215.488 cv
13.871 215.324 14.059 215.191 14.277 215.09 cv
14.496 214.992 14.758 214.941 15.055 214.937 cv
cp
f
12.977 210.492 mo
13.563 210.492 14.145 210.531 14.719 210.602 cv
15.293 210.68 15.859 210.789 16.422 210.93 cv
16.98 211.078 17.531 211.254 18.074 211.465 cv
18.617 211.676 19.152 211.922 19.684 212.199 cv
19.707 212.219 19.73 212.242 19.754 212.27 cv
19.773 212.305 19.793 212.344 19.809 212.391 cv
19.824 212.441 19.832 212.5 19.84 212.566 cv
19.84 212.637 19.844 212.719 19.848 212.809 cv
19.844 212.945 19.836 213.051 19.828 213.125 cv
19.813 213.203 19.793 213.258 19.766 213.289 cv
19.734 213.324 19.699 213.34 19.656 213.336 cv
19.609 213.336 19.555 213.32 19.496 213.293 cv
18.445 212.816 17.375 212.457 16.277 212.211 cv
15.18 211.969 14.07 211.848 12.953 211.844 cv
11.844 211.848 10.738 211.969 9.637 212.211 cv
8.539 212.457 7.469 212.824 6.422 213.309 cv
6.379 213.332 6.336 213.34 6.289 213.332 cv
6.25 213.332 6.215 213.309 6.188 213.262 cv
6.164 213.223 6.145 213.164 6.125 213.09 cv
6.113 213.02 6.105 212.922 6.102 212.801 cv
6.105 212.691 6.109 212.602 6.113 212.527 cv
6.125 212.457 6.137 212.398 6.148 212.352 cv
6.168 212.309 6.184 212.277 6.195 212.254 cv
6.215 212.238 6.23 212.223 6.25 212.207 cv
7.316 211.676 8.414 211.254 9.535 210.949 cv
10.664 210.645 11.809 210.492 12.977 210.492 cv
cp
f
282.199 531.262 mo
282.195 531.367 282.18 531.457 282.145 531.527 cv
282.109 531.605 282.063 531.664 282.008 531.707 cv
281.949 531.758 281.887 531.793 281.82 531.809 cv
281.746 531.832 281.676 531.84 281.613 531.84 cv
281.168 531.84 li
281.027 531.84 280.906 531.828 280.801 531.797 cv
280.695 531.773 280.598 531.719 280.504 531.641 cv
280.41 531.566 280.316 531.465 280.223 531.332 cv
280.129 531.203 280.027 531.039 279.922 530.836 cv
276.848 525.098 li
276.684 524.805 276.52 524.496 276.359 524.168 cv
276.191 523.848 276.039 523.531 275.902 523.223 cv
275.887 523.223 li
275.895 523.598 275.902 523.98 275.91 524.367 cv
275.914 524.758 275.914 525.145 275.918 525.527 cv
275.918 531.613 li
275.914 531.652 275.902 531.687 275.883 531.719 cv
275.859 531.754 275.824 531.781 275.773 531.797 cv
275.719 531.816 275.648 531.828 275.566 531.844 cv
275.48 531.855 275.375 531.863 275.246 531.863 cv
275.109 531.863 275 531.855 274.918 531.844 cv
274.832 531.828 274.766 531.816 274.719 531.797 cv
274.668 531.781 274.633 531.754 274.609 531.719 cv
274.586 531.687 274.574 531.652 274.578 531.613 cv
274.578 522.309 li
274.574 522.102 274.633 521.953 274.754 521.863 cv
274.871 521.777 275 521.734 275.141 521.73 cv
275.801 521.73 li
275.953 521.734 276.086 521.746 276.191 521.77 cv
276.293 521.797 276.387 521.84 276.473 521.898 cv
276.555 521.961 276.633 522.043 276.715 522.148 cv
276.789 522.258 276.871 522.395 276.957 522.551 cv
279.324 526.977 li
279.469 527.25 279.609 527.516 279.746 527.77 cv
279.879 528.027 280.008 528.281 280.137 528.527 cv
280.258 528.781 280.383 529.027 280.508 529.266 cv
280.629 529.508 280.75 529.75 280.875 529.992 cv
280.883 529.992 li
280.871 529.586 280.863 529.156 280.863 528.711 cv
280.855 528.266 280.855 527.84 280.859 527.43 cv
280.859 521.957 li
280.855 521.922 280.867 521.887 280.891 521.855 cv
280.914 521.824 280.949 521.797 281.004 521.773 cv
281.051 521.75 281.121 521.734 281.207 521.723 cv
281.293 521.715 281.402 521.711 281.543 521.707 cv
281.66 521.711 281.766 521.715 281.855 521.723 cv
281.941 521.734 282.008 521.75 282.059 521.773 cv
282.105 521.797 282.141 521.824 282.164 521.855 cv
282.184 521.887 282.195 521.922 282.199 521.957 cv
cp
f
290.75 531.621 mo
290.746 531.668 290.738 531.703 290.723 531.727 cv
290.703 531.758 290.668 531.781 290.625 531.801 cv
290.578 531.82 290.52 531.832 290.445 531.848 cv
290.367 531.855 290.273 531.863 290.168 531.863 cv
290.043 531.863 289.945 531.855 289.875 531.848 cv
289.797 531.832 289.738 531.82 289.695 531.801 cv
289.648 531.781 289.617 531.758 289.605 531.727 cv
289.586 531.703 289.578 531.668 289.582 531.621 cv
289.582 530.695 li
289.18 531.141 288.785 531.461 288.398 531.66 cv
288.004 531.863 287.609 531.961 287.215 531.965 cv
286.742 531.961 286.348 531.887 286.031 531.73 cv
285.711 531.578 285.453 531.367 285.258 531.098 cv
285.055 530.832 284.914 530.52 284.832 530.16 cv
284.742 529.805 284.699 529.371 284.703 528.863 cv
284.703 524.609 li
284.699 524.57 284.707 524.535 284.73 524.504 cv
284.746 524.477 284.781 524.453 284.836 524.426 cv
284.883 524.406 284.953 524.391 285.039 524.379 cv
285.121 524.375 285.223 524.371 285.352 524.367 cv
285.473 524.371 285.578 524.375 285.664 524.379 cv
285.746 524.391 285.813 524.406 285.859 524.426 cv
285.906 524.453 285.941 524.477 285.965 524.504 cv
285.984 524.535 285.992 524.57 285.996 524.609 cv
285.996 528.691 li
285.992 529.105 286.023 529.434 286.086 529.68 cv
286.145 529.926 286.234 530.137 286.359 530.309 cv
286.477 530.488 286.633 530.621 286.824 530.715 cv
287.008 530.812 287.227 530.863 287.477 530.859 cv
287.797 530.863 288.117 530.746 288.441 530.516 cv
288.758 530.289 289.098 529.953 289.457 529.508 cv
289.457 524.609 li
289.457 524.57 289.465 524.535 289.484 524.504 cv
289.5 524.477 289.535 524.453 289.59 524.426 cv
289.641 524.406 289.707 524.391 289.789 524.379 cv
289.867 524.375 289.973 524.371 290.105 524.367 cv
290.227 524.371 290.332 524.375 290.418 524.379 cv
290.5 524.391 290.563 524.406 290.609 524.426 cv
290.652 524.453 290.688 524.477 290.715 524.504 cv
290.734 524.535 290.746 524.57 290.75 524.609 cv
cp
f
303.527 531.621 mo
303.523 531.668 303.516 531.703 303.496 531.727 cv
303.473 531.758 303.438 531.781 303.395 531.801 cv
303.344 531.82 303.277 531.832 303.199 531.848 cv
303.113 531.855 303.012 531.863 302.887 531.863 cv
302.754 531.863 302.645 531.855 302.566 531.848 cv
302.48 531.832 302.414 531.82 302.367 531.801 cv
302.313 531.781 302.277 531.758 302.262 531.727 cv
302.238 531.703 302.23 531.668 302.23 531.621 cv
302.23 527.359 li
302.23 527.066 302.203 526.797 302.152 526.551 cv
302.098 526.309 302.016 526.098 301.902 525.918 cv
301.789 525.742 301.645 525.605 301.469 525.512 cv
301.289 525.418 301.078 525.371 300.844 525.371 cv
300.547 525.371 300.25 525.488 299.953 525.715 cv
299.648 525.949 299.32 526.281 298.965 526.719 cv
298.965 531.621 li
298.961 531.668 298.949 531.703 298.934 531.727 cv
298.91 531.758 298.879 531.781 298.832 531.801 cv
298.781 531.82 298.715 531.832 298.633 531.848 cv
298.547 531.855 298.441 531.863 298.32 531.863 cv
298.199 531.863 298.098 531.855 298.012 531.848 cv
297.926 531.832 297.855 531.82 297.809 531.801 cv
297.754 531.781 297.723 531.758 297.707 531.727 cv
297.688 531.703 297.676 531.668 297.68 531.621 cv
297.68 527.359 li
297.676 527.066 297.648 526.797 297.594 526.551 cv
297.535 526.309 297.449 526.098 297.336 525.918 cv
297.223 525.742 297.078 525.605 296.906 525.512 cv
296.727 525.418 296.52 525.371 296.285 525.371 cv
295.984 525.371 295.688 525.488 295.387 525.715 cv
295.086 525.949 294.758 526.281 294.406 526.719 cv
294.406 531.621 li
294.402 531.668 294.391 531.703 294.375 531.727 cv
294.352 531.758 294.32 531.781 294.273 531.801 cv
294.227 531.82 294.16 531.832 294.082 531.848 cv
293.996 531.855 293.891 531.863 293.762 531.863 cv
293.633 531.863 293.527 531.855 293.449 531.848 cv
293.363 531.832 293.297 531.82 293.25 531.801 cv
293.195 531.781 293.164 531.758 293.148 531.727 cv
293.129 531.703 293.117 531.668 293.121 531.621 cv
293.121 524.609 li
293.117 524.57 293.125 524.535 293.145 524.504 cv
293.156 524.477 293.188 524.453 293.238 524.426 cv
293.281 524.406 293.344 524.391 293.418 524.379 cv
293.488 524.375 293.582 524.371 293.707 524.367 cv
293.816 524.371 293.914 524.375 293.992 524.379 cv
294.066 524.391 294.125 524.406 294.168 524.426 cv
294.207 524.453 294.234 524.477 294.254 524.504 cv
294.27 524.535 294.277 524.57 294.281 524.609 cv
294.281 525.535 li
294.672 525.094 295.055 524.773 295.43 524.566 cv
295.797 524.363 296.176 524.258 296.559 524.258 cv
296.848 524.258 297.105 524.293 297.34 524.359 cv
297.566 524.43 297.773 524.523 297.953 524.645 cv
298.129 524.766 298.277 524.91 298.406 525.078 cv
298.527 525.25 298.633 525.441 298.719 525.645 cv
298.949 525.395 299.172 525.18 299.383 525 cv
299.594 524.828 299.797 524.684 299.992 524.57 cv
300.188 524.465 300.375 524.387 300.559 524.332 cv
300.742 524.285 300.93 524.258 301.117 524.258 cv
301.57 524.258 301.949 524.34 302.254 524.496 cv
302.559 524.66 302.805 524.871 303 525.133 cv
303.188 525.398 303.324 525.707 303.406 526.062 cv
303.484 526.418 303.523 526.793 303.527 527.187 cv
cp
f
312.324 528.02 mo
312.32 528.629 312.254 529.18 312.125 529.664 cv
311.988 530.152 311.793 530.566 311.539 530.906 cv
311.281 531.25 310.965 531.512 310.594 531.691 cv
310.219 531.875 309.793 531.961 309.309 531.965 cv
309.082 531.961 308.875 531.941 308.688 531.898 cv
308.5 531.852 308.313 531.781 308.133 531.684 cv
307.945 531.586 307.766 531.461 307.586 531.309 cv
307.402 531.16 307.211 530.98 307.012 530.766 cv
307.012 531.621 li
307.012 531.668 307 531.703 306.98 531.73 cv
306.957 531.766 306.922 531.789 306.879 531.805 cv
306.828 531.82 306.77 531.832 306.703 531.848 cv
306.629 531.855 306.539 531.863 306.434 531.863 cv
306.324 531.863 306.238 531.855 306.168 531.848 cv
306.094 531.832 306.031 531.82 305.988 531.805 cv
305.938 531.789 305.906 531.766 305.895 531.73 cv
305.875 531.703 305.867 531.668 305.871 531.621 cv
305.871 521.211 li
305.867 521.172 305.879 521.137 305.898 521.102 cv
305.914 521.074 305.945 521.047 306 521.023 cv
306.047 521.004 306.113 520.988 306.199 520.977 cv
306.277 520.969 306.383 520.965 306.512 520.961 cv
306.641 520.965 306.746 520.969 306.832 520.977 cv
306.91 520.988 306.977 521.004 307.023 521.023 cv
307.07 521.047 307.102 521.074 307.125 521.102 cv
307.141 521.137 307.152 521.172 307.156 521.211 cv
307.156 525.41 li
307.363 525.199 307.566 525.02 307.762 524.875 cv
307.957 524.73 308.145 524.613 308.332 524.52 cv
308.516 524.434 308.703 524.367 308.895 524.32 cv
309.078 524.281 309.277 524.258 309.488 524.258 cv
309.992 524.258 310.426 524.359 310.793 524.562 cv
311.152 524.766 311.445 525.039 311.672 525.375 cv
311.895 525.719 312.063 526.117 312.168 526.574 cv
312.27 527.031 312.32 527.512 312.324 528.02 cv
cp
310.992 528.168 mo
310.988 527.812 310.961 527.465 310.91 527.125 cv
310.852 526.789 310.758 526.492 310.621 526.23 cv
310.484 525.973 310.305 525.762 310.082 525.602 cv
309.855 525.445 309.574 525.367 309.242 525.363 cv
309.074 525.367 308.91 525.391 308.75 525.434 cv
308.586 525.484 308.422 525.562 308.254 525.668 cv
308.086 525.781 307.91 525.922 307.734 526.09 cv
307.551 526.266 307.359 526.48 307.156 526.734 cv
307.156 529.531 li
307.512 529.965 307.852 530.297 308.176 530.52 cv
308.5 530.75 308.836 530.863 309.188 530.859 cv
309.508 530.863 309.785 530.785 310.02 530.625 cv
310.246 530.473 310.434 530.266 310.578 530.004 cv
310.723 529.75 310.828 529.461 310.895 529.141 cv
310.957 528.824 310.988 528.5 310.992 528.168 cv
cp
f
320.234 527.812 mo
320.23 528.016 320.18 528.156 320.082 528.242 cv
319.977 528.328 319.859 528.371 319.734 528.371 cv
315.117 528.371 li
315.113 528.762 315.152 529.113 315.234 529.426 cv
315.309 529.738 315.441 530.008 315.625 530.227 cv
315.805 530.453 316.039 530.625 316.336 530.742 cv
316.625 530.867 316.984 530.926 317.41 530.922 cv
317.742 530.926 318.039 530.898 318.301 530.84 cv
318.563 530.789 318.789 530.727 318.98 530.656 cv
319.168 530.59 319.324 530.531 319.449 530.473 cv
319.57 530.422 319.664 530.395 319.727 530.391 cv
319.762 530.395 319.793 530.402 319.824 530.418 cv
319.852 530.437 319.875 530.465 319.895 530.5 cv
319.906 530.539 319.918 530.59 319.93 530.652 cv
319.934 530.719 319.938 530.797 319.941 530.891 cv
319.938 530.961 319.934 531.02 319.934 531.066 cv
319.926 531.113 319.922 531.156 319.914 531.195 cv
319.906 531.234 319.891 531.27 319.875 531.301 cv
319.852 531.332 319.828 531.363 319.805 531.391 cv
319.773 531.422 319.691 531.469 319.551 531.531 cv
319.41 531.598 319.227 531.66 319.004 531.723 cv
318.777 531.785 318.52 531.84 318.227 531.891 cv
317.934 531.937 317.621 531.961 317.289 531.965 cv
316.711 531.961 316.203 531.883 315.773 531.723 cv
315.336 531.562 314.973 531.324 314.68 531.008 cv
314.379 530.691 314.156 530.297 314.008 529.816 cv
313.859 529.34 313.785 528.781 313.785 528.145 cv
313.785 527.547 313.859 527.008 314.016 526.523 cv
314.168 526.047 314.395 525.637 314.691 525.301 cv
314.984 524.965 315.34 524.707 315.754 524.527 cv
316.168 524.348 316.633 524.258 317.148 524.258 cv
317.699 524.258 318.168 524.348 318.555 524.523 cv
318.941 524.703 319.258 524.941 319.512 525.238 cv
319.758 525.539 319.941 525.891 320.059 526.289 cv
320.172 526.695 320.23 527.125 320.234 527.578 cv
cp
318.941 527.43 mo
318.957 526.754 318.805 526.223 318.488 525.84 cv
318.172 525.457 317.703 525.266 317.086 525.262 cv
316.762 525.266 316.48 525.324 316.242 525.441 cv
316 525.562 315.801 525.723 315.641 525.918 cv
315.477 526.117 315.352 526.348 315.266 526.609 cv
315.176 526.871 315.125 527.145 315.117 527.43 cv
cp
f
326.301 525.066 mo
326.297 525.184 326.297 525.281 326.293 525.355 cv
326.285 525.437 326.273 525.5 326.262 525.539 cv
326.242 525.586 326.223 525.617 326.203 525.641 cv
326.176 525.664 326.145 525.676 326.105 525.676 cv
326.063 525.676 326.012 525.664 325.953 525.641 cv
325.891 525.617 325.82 525.594 325.75 525.57 cv
325.672 525.547 325.59 525.527 325.496 525.504 cv
325.402 525.488 325.301 525.477 325.191 525.473 cv
325.059 525.477 324.93 525.504 324.809 525.551 cv
324.684 525.605 324.555 525.691 324.418 525.809 cv
324.277 525.934 324.133 526.09 323.984 526.285 cv
323.832 526.48 323.664 526.723 323.484 527.008 cv
323.484 531.621 li
323.48 531.668 323.469 531.703 323.453 531.727 cv
323.43 531.758 323.398 531.781 323.352 531.801 cv
323.305 531.82 323.238 531.832 323.16 531.848 cv
323.074 531.855 322.969 531.863 322.84 531.863 cv
322.711 531.863 322.605 531.855 322.527 531.848 cv
322.441 531.832 322.375 531.82 322.328 531.801 cv
322.273 531.781 322.242 531.758 322.227 531.727 cv
322.207 531.703 322.195 531.668 322.199 531.621 cv
322.199 524.609 li
322.195 524.57 322.203 524.535 322.223 524.504 cv
322.234 524.477 322.266 524.453 322.316 524.426 cv
322.359 524.406 322.422 524.391 322.496 524.379 cv
322.566 524.375 322.66 524.371 322.785 524.367 cv
322.895 524.371 322.992 524.375 323.07 524.379 cv
323.145 524.391 323.203 524.406 323.246 524.426 cv
323.285 524.453 323.313 524.477 323.332 524.504 cv
323.348 524.535 323.355 524.57 323.359 524.609 cv
323.359 525.629 li
323.547 525.348 323.73 525.121 323.902 524.945 cv
324.07 524.77 324.23 524.629 324.383 524.527 cv
324.531 524.426 324.68 524.355 324.828 524.316 cv
324.977 524.277 325.125 524.258 325.277 524.258 cv
325.344 524.258 325.422 524.262 325.508 524.27 cv
325.594 524.277 325.684 524.293 325.777 524.312 cv
325.871 524.336 325.953 524.359 326.031 524.383 cv
326.102 524.41 326.156 524.437 326.191 524.461 cv
326.219 524.492 326.238 524.516 326.254 524.535 cv
326.262 524.562 326.273 524.594 326.281 524.625 cv
326.289 524.664 326.293 524.715 326.297 524.785 cv
326.297 524.855 326.297 524.949 326.301 525.066 cv
cp
f
338.059 528.035 mo
338.055 528.613 337.98 529.141 337.832 529.617 cv
337.68 530.102 337.453 530.516 337.156 530.859 cv
336.855 531.211 336.48 531.48 336.035 531.672 cv
335.582 531.867 335.063 531.961 334.473 531.965 cv
333.895 531.961 333.391 531.879 332.965 531.707 cv
332.535 531.539 332.18 531.289 331.895 530.961 cv
331.605 530.633 331.391 530.238 331.254 529.77 cv
331.113 529.305 331.047 528.773 331.047 528.176 cv
331.047 527.609 331.117 527.082 331.266 526.602 cv
331.41 526.121 331.637 525.707 331.938 525.355 cv
332.234 525.008 332.605 524.738 333.055 524.547 cv
333.5 524.355 334.023 524.258 334.621 524.258 cv
335.199 524.258 335.699 524.344 336.129 524.516 cv
336.555 524.687 336.914 524.937 337.199 525.266 cv
337.484 525.594 337.699 525.992 337.844 526.457 cv
337.984 526.926 338.055 527.453 338.059 528.035 cv
cp
336.727 528.121 mo
336.723 527.746 336.688 527.387 336.621 527.047 cv
336.547 526.711 336.43 526.418 336.27 526.16 cv
336.105 525.91 335.887 525.707 335.609 525.555 cv
335.328 525.41 334.98 525.336 334.57 525.332 cv
334.184 525.336 333.855 525.402 333.582 525.535 cv
333.305 525.672 333.078 525.863 332.902 526.109 cv
332.723 526.355 332.59 526.648 332.508 526.984 cv
332.418 527.324 332.375 527.691 332.379 528.09 cv
332.375 528.477 332.41 528.84 332.484 529.176 cv
332.551 529.516 332.668 529.809 332.836 530.059 cv
333 530.312 333.223 530.516 333.5 530.66 cv
333.777 530.812 334.125 530.887 334.539 530.883 cv
334.914 530.887 335.242 530.816 335.523 530.68 cv
335.801 530.547 336.027 530.359 336.207 530.109 cv
336.383 529.867 336.512 529.574 336.598 529.238 cv
336.68 528.902 336.723 528.531 336.727 528.121 cv
cp
f
343.789 521.723 mo
343.785 521.824 343.781 521.902 343.773 521.961 cv
343.762 522.023 343.75 522.074 343.738 522.105 cv
343.723 522.145 343.707 522.168 343.688 522.18 cv
343.664 522.195 343.637 522.203 343.609 522.199 cv
343.57 522.203 343.523 522.191 343.473 522.164 cv
343.414 522.145 343.348 522.117 343.273 522.086 cv
343.191 522.059 343.102 522.031 342.996 522.008 cv
342.887 521.984 342.762 521.973 342.629 521.973 cv
342.434 521.973 342.27 522.004 342.137 522.066 cv
341.996 522.129 341.887 522.227 341.809 522.359 cv
341.723 522.492 341.664 522.664 341.629 522.875 cv
341.59 523.086 341.57 523.344 341.574 523.641 cv
341.574 524.406 li
343.141 524.406 li
343.18 524.41 343.215 524.418 343.246 524.434 cv
343.273 524.453 343.301 524.484 343.324 524.527 cv
343.348 524.574 343.363 524.633 343.379 524.695 cv
343.387 524.766 343.395 524.848 343.398 524.941 cv
343.395 525.133 343.371 525.266 343.328 525.348 cv
343.277 525.434 343.215 525.477 343.141 525.473 cv
341.574 525.473 li
341.574 531.621 li
341.57 531.668 341.563 531.703 341.543 531.727 cv
341.52 531.758 341.484 531.781 341.438 531.801 cv
341.387 531.82 341.32 531.832 341.238 531.848 cv
341.152 531.855 341.047 531.863 340.93 531.863 cv
340.801 531.863 340.699 531.855 340.617 531.848 cv
340.531 531.832 340.465 531.82 340.418 531.801 cv
340.367 531.781 340.332 531.758 340.313 531.727 cv
340.289 531.703 340.277 531.668 340.281 531.621 cv
340.281 525.473 li
339.293 525.473 li
339.207 525.477 339.145 525.434 339.105 525.348 cv
339.063 525.266 339.039 525.133 339.043 524.941 cv
339.039 524.848 339.047 524.766 339.059 524.695 cv
339.066 524.633 339.082 524.574 339.105 524.527 cv
339.125 524.484 339.148 524.453 339.184 524.434 cv
339.211 524.418 339.25 524.41 339.293 524.406 cv
340.281 524.406 li
340.281 523.68 li
340.277 523.195 340.324 522.777 340.418 522.422 cv
340.508 522.074 340.645 521.785 340.832 521.562 cv
341.016 521.34 341.25 521.176 341.539 521.066 cv
341.82 520.961 342.156 520.906 342.543 520.906 cv
342.719 520.906 342.895 520.926 343.07 520.957 cv
343.238 520.996 343.371 521.031 343.469 521.066 cv
343.559 521.109 343.621 521.145 343.656 521.172 cv
343.684 521.207 343.711 521.246 343.734 521.293 cv
343.754 521.344 343.766 521.406 343.777 521.473 cv
343.781 521.547 343.785 521.629 343.789 521.723 cv
cp
f
353.988 528.988 mo
353.984 529.461 353.898 529.883 353.727 530.25 cv
353.551 530.625 353.309 530.937 353 531.191 cv
352.691 531.449 352.328 531.641 351.91 531.77 cv
351.488 531.898 351.039 531.961 350.559 531.965 cv
350.219 531.961 349.902 531.934 349.617 531.879 cv
349.328 531.82 349.074 531.754 348.848 531.668 cv
348.621 531.59 348.43 531.504 348.277 531.41 cv
348.121 531.324 348.016 531.246 347.957 531.184 cv
347.898 531.121 347.855 531.043 347.828 530.949 cv
347.797 530.855 347.781 530.727 347.785 530.562 cv
347.781 530.449 347.785 530.355 347.801 530.277 cv
347.809 530.203 347.824 530.141 347.848 530.094 cv
347.863 530.047 347.891 530.016 347.926 529.996 cv
347.953 529.98 347.988 529.973 348.031 529.969 cv
348.102 529.973 348.203 530.016 348.34 530.102 cv
348.469 530.191 348.641 530.289 348.852 530.391 cv
349.059 530.5 349.309 530.598 349.602 530.684 cv
349.895 530.777 350.234 530.82 350.621 530.82 cv
350.91 530.82 351.176 530.781 351.418 530.703 cv
351.656 530.625 351.863 530.516 352.043 530.371 cv
352.215 530.23 352.352 530.055 352.445 529.844 cv
352.539 529.637 352.586 529.402 352.586 529.137 cv
352.586 528.855 352.52 528.609 352.391 528.402 cv
352.258 528.203 352.086 528.027 351.875 527.871 cv
351.66 527.723 351.418 527.582 351.145 527.449 cv
350.871 527.324 350.59 527.191 350.309 527.059 cv
350.02 526.926 349.742 526.781 349.473 526.617 cv
349.203 526.461 348.961 526.27 348.75 526.051 cv
348.531 525.832 348.359 525.578 348.23 525.281 cv
348.094 524.992 348.027 524.641 348.031 524.227 cv
348.027 523.809 348.105 523.434 348.262 523.102 cv
348.414 522.773 348.625 522.496 348.902 522.27 cv
349.172 522.051 349.496 521.879 349.875 521.762 cv
350.25 521.645 350.66 521.586 351.098 521.586 cv
351.316 521.586 351.539 521.605 351.77 521.645 cv
351.992 521.684 352.203 521.734 352.406 521.797 cv
352.602 521.863 352.781 521.937 352.941 522.016 cv
353.094 522.098 353.195 522.164 353.25 522.211 cv
353.297 522.266 353.332 522.305 353.348 522.328 cv
353.363 522.359 353.375 522.395 353.387 522.437 cv
353.395 522.484 353.402 522.539 353.41 522.598 cv
353.414 522.664 353.418 522.742 353.418 522.84 cv
353.418 522.934 353.414 523.02 353.406 523.09 cv
353.398 523.168 353.387 523.227 353.371 523.273 cv
353.355 523.32 353.332 523.355 353.305 523.379 cv
353.273 523.402 353.242 523.414 353.207 523.414 cv
353.148 523.414 353.059 523.379 352.938 523.309 cv
352.813 523.238 352.66 523.156 352.488 523.062 cv
352.309 522.973 352.102 522.891 351.863 522.812 cv
351.617 522.738 351.348 522.699 351.051 522.699 cv
350.77 522.699 350.523 522.738 350.316 522.812 cv
350.105 522.891 349.934 522.992 349.801 523.113 cv
349.664 523.238 349.563 523.383 349.496 523.555 cv
349.43 523.727 349.398 523.91 349.398 524.102 cv
349.398 524.387 349.461 524.629 349.59 524.828 cv
349.719 525.031 349.891 525.211 350.109 525.363 cv
350.32 525.523 350.566 525.664 350.844 525.793 cv
351.117 525.926 351.398 526.059 351.688 526.187 cv
351.973 526.32 352.254 526.465 352.527 526.621 cv
352.801 526.781 353.047 526.969 353.266 527.184 cv
353.48 527.402 353.652 527.656 353.789 527.949 cv
353.918 528.242 353.984 528.59 353.988 528.988 cv
cp
f
361.754 531.621 mo
361.75 531.668 361.742 531.703 361.727 531.727 cv
361.707 531.758 361.672 531.781 361.629 531.801 cv
361.582 531.82 361.523 531.832 361.449 531.848 cv
361.371 531.855 361.277 531.863 361.172 531.863 cv
361.047 531.863 360.949 531.855 360.879 531.848 cv
360.801 531.832 360.742 531.82 360.699 531.801 cv
360.652 531.781 360.621 531.758 360.609 531.727 cv
360.59 531.703 360.582 531.668 360.586 531.621 cv
360.586 530.695 li
360.184 531.141 359.789 531.461 359.402 531.66 cv
359.008 531.863 358.613 531.961 358.219 531.965 cv
357.746 531.961 357.352 531.887 357.035 531.73 cv
356.715 531.578 356.457 531.367 356.262 531.098 cv
356.059 530.832 355.918 530.52 355.836 530.16 cv
355.746 529.805 355.703 529.371 355.707 528.863 cv
355.707 524.609 li
355.703 524.57 355.711 524.535 355.734 524.504 cv
355.75 524.477 355.785 524.453 355.84 524.426 cv
355.887 524.406 355.957 524.391 356.043 524.379 cv
356.125 524.375 356.227 524.371 356.355 524.367 cv
356.477 524.371 356.582 524.375 356.668 524.379 cv
356.75 524.391 356.816 524.406 356.863 524.426 cv
356.91 524.453 356.945 524.477 356.969 524.504 cv
356.988 524.535 356.996 524.57 357 524.609 cv
357 528.691 li
356.996 529.105 357.027 529.434 357.09 529.68 cv
357.148 529.926 357.238 530.137 357.363 530.309 cv
357.48 530.488 357.637 530.621 357.828 530.715 cv
358.012 530.812 358.23 530.863 358.48 530.859 cv
358.801 530.863 359.121 530.746 359.445 530.516 cv
359.762 530.289 360.102 529.953 360.461 529.508 cv
360.461 524.609 li
360.461 524.57 360.469 524.535 360.488 524.504 cv
360.504 524.477 360.539 524.453 360.594 524.426 cv
360.645 524.406 360.711 524.391 360.793 524.379 cv
360.871 524.375 360.977 524.371 361.109 524.367 cv
361.23 524.371 361.336 524.375 361.422 524.379 cv
361.504 524.391 361.566 524.406 361.613 524.426 cv
361.656 524.453 361.691 524.477 361.719 524.504 cv
361.738 524.535 361.75 524.57 361.754 524.609 cv
cp
f
370.613 528.02 mo
370.609 528.629 370.543 529.18 370.414 529.664 cv
370.277 530.152 370.082 530.566 369.828 530.906 cv
369.57 531.25 369.254 531.512 368.883 531.691 cv
368.508 531.875 368.082 531.961 367.598 531.965 cv
367.371 531.961 367.164 531.941 366.977 531.898 cv
366.789 531.852 366.602 531.781 366.422 531.684 cv
366.234 531.586 366.055 531.461 365.875 531.309 cv
365.691 531.16 365.5 530.98 365.301 530.766 cv
365.301 531.621 li
365.301 531.668 365.289 531.703 365.27 531.73 cv
365.246 531.766 365.211 531.789 365.168 531.805 cv
365.117 531.82 365.059 531.832 364.992 531.848 cv
364.918 531.855 364.828 531.863 364.723 531.863 cv
364.613 531.863 364.527 531.855 364.457 531.848 cv
364.383 531.832 364.32 531.82 364.277 531.805 cv
364.227 531.789 364.195 531.766 364.184 531.73 cv
364.164 531.703 364.156 531.668 364.16 531.621 cv
364.16 521.211 li
364.156 521.172 364.168 521.137 364.188 521.102 cv
364.203 521.074 364.234 521.047 364.289 521.023 cv
364.336 521.004 364.402 520.988 364.488 520.977 cv
364.566 520.969 364.672 520.965 364.801 520.961 cv
364.93 520.965 365.035 520.969 365.121 520.977 cv
365.199 520.988 365.266 521.004 365.313 521.023 cv
365.359 521.047 365.391 521.074 365.414 521.102 cv
365.43 521.137 365.441 521.172 365.445 521.211 cv
365.445 525.41 li
365.652 525.199 365.855 525.02 366.051 524.875 cv
366.246 524.73 366.434 524.613 366.621 524.52 cv
366.805 524.434 366.992 524.367 367.184 524.32 cv
367.367 524.281 367.566 524.258 367.777 524.258 cv
368.281 524.258 368.715 524.359 369.082 524.562 cv
369.441 524.766 369.734 525.039 369.961 525.375 cv
370.184 525.719 370.352 526.117 370.457 526.574 cv
370.559 527.031 370.609 527.512 370.613 528.02 cv
cp
369.281 528.168 mo
369.277 527.812 369.25 527.465 369.199 527.125 cv
369.141 526.789 369.047 526.492 368.91 526.23 cv
368.773 525.973 368.594 525.762 368.371 525.602 cv
368.145 525.445 367.863 525.367 367.531 525.363 cv
367.363 525.367 367.199 525.391 367.039 525.434 cv
366.875 525.484 366.711 525.562 366.543 525.668 cv
366.375 525.781 366.199 525.922 366.023 526.09 cv
365.84 526.266 365.648 526.48 365.445 526.734 cv
365.445 529.531 li
365.801 529.965 366.141 530.297 366.465 530.52 cv
366.789 530.75 367.125 530.863 367.477 530.859 cv
367.797 530.863 368.074 530.785 368.309 530.625 cv
368.535 530.473 368.723 530.266 368.867 530.004 cv
369.012 529.75 369.117 529.461 369.184 529.141 cv
369.246 528.824 369.277 528.5 369.281 528.168 cv
cp
f
375.77 527.883 mo
375.77 528.086 375.746 528.223 375.699 528.301 cv
375.652 528.379 375.582 528.418 375.496 528.418 cv
372.238 528.418 li
372.145 528.418 372.078 528.379 372.031 528.297 cv
371.984 528.219 371.961 528.082 371.961 527.883 cv
371.961 527.687 371.984 527.547 372.031 527.469 cv
372.078 527.391 372.145 527.352 372.238 527.352 cv
375.496 527.352 li
375.535 527.352 375.574 527.359 375.609 527.375 cv
375.641 527.391 375.668 527.422 375.695 527.465 cv
375.715 527.512 375.734 527.566 375.75 527.633 cv
375.762 527.703 375.77 527.789 375.77 527.883 cv
cp
f
379.02 531.613 mo
379.016 531.656 379.008 531.691 378.988 531.723 cv
378.965 531.754 378.926 531.781 378.879 531.797 cv
378.824 531.816 378.758 531.828 378.672 531.844 cv
378.586 531.855 378.477 531.863 378.352 531.863 cv
378.223 531.863 378.117 531.855 378.031 531.844 cv
377.941 531.828 377.871 531.816 377.82 531.797 cv
377.766 531.781 377.73 531.754 377.711 531.723 cv
377.688 531.691 377.676 531.656 377.68 531.613 cv
377.68 521.934 li
377.676 521.895 377.688 521.859 377.715 521.824 cv
377.734 521.797 377.773 521.77 377.832 521.75 cv
377.883 521.734 377.953 521.719 378.043 521.703 cv
378.125 521.691 378.227 521.687 378.352 521.684 cv
378.477 521.687 378.586 521.691 378.672 521.703 cv
378.758 521.719 378.824 521.734 378.879 521.75 cv
378.926 521.77 378.965 521.797 378.988 521.824 cv
379.008 521.859 379.016 521.895 379.02 521.934 cv
cp
f
392.008 531.621 mo
392.004 531.668 391.996 531.703 391.977 531.727 cv
391.953 531.758 391.918 531.781 391.875 531.801 cv
391.824 531.82 391.758 531.832 391.68 531.848 cv
391.594 531.855 391.492 531.863 391.367 531.863 cv
391.234 531.863 391.125 531.855 391.047 531.848 cv
390.961 531.832 390.895 531.82 390.848 531.801 cv
390.793 531.781 390.758 531.758 390.742 531.727 cv
390.719 531.703 390.711 531.668 390.711 531.621 cv
390.711 527.359 li
390.711 527.066 390.684 526.797 390.633 526.551 cv
390.578 526.309 390.496 526.098 390.383 525.918 cv
390.27 525.742 390.125 525.605 389.949 525.512 cv
389.77 525.418 389.559 525.371 389.324 525.371 cv
389.027 525.371 388.73 525.488 388.434 525.715 cv
388.129 525.949 387.801 526.281 387.445 526.719 cv
387.445 531.621 li
387.441 531.668 387.43 531.703 387.414 531.727 cv
387.391 531.758 387.359 531.781 387.313 531.801 cv
387.262 531.82 387.195 531.832 387.113 531.848 cv
387.027 531.855 386.922 531.863 386.801 531.863 cv
386.68 531.863 386.578 531.855 386.492 531.848 cv
386.406 531.832 386.336 531.82 386.289 531.801 cv
386.234 531.781 386.203 531.758 386.188 531.727 cv
386.168 531.703 386.156 531.668 386.16 531.621 cv
386.16 527.359 li
386.156 527.066 386.129 526.797 386.074 526.551 cv
386.016 526.309 385.93 526.098 385.816 525.918 cv
385.703 525.742 385.559 525.605 385.387 525.512 cv
385.207 525.418 385 525.371 384.766 525.371 cv
384.465 525.371 384.168 525.488 383.867 525.715 cv
383.566 525.949 383.238 526.281 382.887 526.719 cv
382.887 531.621 li
382.883 531.668 382.871 531.703 382.855 531.727 cv
382.832 531.758 382.801 531.781 382.754 531.801 cv
382.707 531.82 382.641 531.832 382.563 531.848 cv
382.477 531.855 382.371 531.863 382.242 531.863 cv
382.113 531.863 382.008 531.855 381.93 531.848 cv
381.844 531.832 381.777 531.82 381.73 531.801 cv
381.676 531.781 381.645 531.758 381.629 531.727 cv
381.609 531.703 381.598 531.668 381.602 531.621 cv
381.602 524.609 li
381.598 524.57 381.605 524.535 381.625 524.504 cv
381.637 524.477 381.668 524.453 381.719 524.426 cv
381.762 524.406 381.824 524.391 381.898 524.379 cv
381.969 524.375 382.063 524.371 382.188 524.367 cv
382.297 524.371 382.395 524.375 382.473 524.379 cv
382.547 524.391 382.605 524.406 382.648 524.426 cv
382.688 524.453 382.715 524.477 382.734 524.504 cv
382.75 524.535 382.758 524.57 382.762 524.609 cv
382.762 525.535 li
383.152 525.094 383.535 524.773 383.91 524.566 cv
384.277 524.363 384.656 524.258 385.039 524.258 cv
385.328 524.258 385.586 524.293 385.82 524.359 cv
386.047 524.43 386.254 524.523 386.434 524.645 cv
386.609 524.766 386.758 524.91 386.887 525.078 cv
387.008 525.25 387.113 525.441 387.199 525.645 cv
387.43 525.395 387.652 525.18 387.863 525 cv
388.074 524.828 388.277 524.684 388.473 524.57 cv
388.668 524.465 388.855 524.387 389.039 524.332 cv
389.223 524.285 389.41 524.258 389.598 524.258 cv
390.051 524.258 390.43 524.34 390.734 524.496 cv
391.039 524.66 391.285 524.871 391.48 525.133 cv
391.668 525.398 391.805 525.707 391.887 526.062 cv
391.965 526.418 392.004 526.793 392.008 527.187 cv
cp
f
399.637 531.629 mo
399.633 531.691 399.613 531.738 399.574 531.77 cv
399.531 531.801 399.473 531.824 399.402 531.84 cv
399.324 531.855 399.219 531.863 399.082 531.863 cv
398.945 531.863 398.836 531.855 398.758 531.84 cv
398.672 531.824 398.613 531.801 398.582 531.77 cv
398.543 531.738 398.527 531.691 398.531 531.629 cv
398.531 530.93 li
398.223 531.258 397.879 531.512 397.504 531.691 cv
397.125 531.875 396.727 531.961 396.309 531.965 cv
395.934 531.961 395.602 531.914 395.305 531.82 cv
395.008 531.723 394.754 531.586 394.543 531.402 cv
394.332 531.223 394.168 531 394.051 530.734 cv
393.934 530.473 393.875 530.172 393.879 529.828 cv
393.875 529.437 393.953 529.094 394.117 528.801 cv
394.273 528.512 394.508 528.27 394.813 528.078 cv
395.113 527.887 395.48 527.742 395.918 527.645 cv
396.352 527.551 396.844 527.504 397.391 527.5 cv
398.359 527.5 li
398.359 526.953 li
398.355 526.684 398.328 526.445 398.273 526.238 cv
398.215 526.031 398.121 525.859 397.996 525.719 cv
397.863 525.582 397.699 525.477 397.5 525.406 cv
397.293 525.336 397.043 525.301 396.754 525.301 cv
396.434 525.301 396.148 525.34 395.898 525.414 cv
395.641 525.492 395.422 525.574 395.234 525.664 cv
395.047 525.758 394.887 525.844 394.762 525.914 cv
394.629 525.992 394.535 526.027 394.477 526.027 cv
394.434 526.027 394.398 526.02 394.367 525.996 cv
394.336 525.98 394.309 525.949 394.285 525.902 cv
394.262 525.863 394.242 525.809 394.234 525.742 cv
394.219 525.68 394.215 525.609 394.219 525.527 cv
394.215 525.402 394.223 525.297 394.246 525.219 cv
394.262 525.145 394.309 525.074 394.379 525.004 cv
394.449 524.937 394.57 524.859 394.742 524.77 cv
394.914 524.68 395.109 524.598 395.332 524.52 cv
395.555 524.449 395.801 524.387 396.066 524.332 cv
396.332 524.285 396.598 524.258 396.871 524.258 cv
397.371 524.258 397.801 524.316 398.152 524.43 cv
398.504 524.547 398.789 524.715 399.012 524.934 cv
399.227 525.156 399.387 525.43 399.488 525.754 cv
399.586 526.086 399.633 526.469 399.637 526.898 cv
cp
398.359 528.426 mo
397.258 528.426 li
396.902 528.43 396.598 528.461 396.34 528.516 cv
396.078 528.578 395.863 528.664 395.691 528.781 cv
395.52 528.898 395.395 529.039 395.316 529.203 cv
395.234 529.367 395.191 529.555 395.195 529.766 cv
395.191 530.133 395.309 530.426 395.539 530.637 cv
395.77 530.855 396.094 530.961 396.512 530.961 cv
396.848 530.961 397.16 530.875 397.449 530.703 cv
397.738 530.531 398.039 530.27 398.359 529.914 cv
cp
f
407.859 524.926 mo
407.855 525.109 407.832 525.242 407.785 525.32 cv
407.734 525.402 407.672 525.441 407.598 525.441 cv
406.59 525.441 li
406.77 525.629 406.898 525.836 406.973 526.062 cv
407.043 526.289 407.078 526.523 407.082 526.766 cv
407.078 527.172 407.012 527.531 406.887 527.844 cv
406.754 528.156 406.57 528.422 406.328 528.633 cv
406.086 528.852 405.797 529.016 405.469 529.129 cv
405.133 529.246 404.766 529.305 404.363 529.301 cv
404.074 529.305 403.801 529.266 403.547 529.187 cv
403.285 529.113 403.09 529.02 402.953 528.902 cv
402.859 529 402.781 529.105 402.723 529.223 cv
402.66 529.344 402.629 529.48 402.633 529.633 cv
402.629 529.816 402.715 529.969 402.887 530.086 cv
403.055 530.211 403.277 530.273 403.559 530.281 cv
405.391 530.359 li
405.738 530.371 406.055 530.418 406.348 530.504 cv
406.637 530.59 406.891 530.715 407.105 530.871 cv
407.316 531.031 407.484 531.223 407.605 531.453 cv
407.723 531.687 407.781 531.957 407.785 532.262 cv
407.781 532.582 407.715 532.887 407.582 533.18 cv
407.445 533.469 407.238 533.723 406.961 533.945 cv
406.68 534.164 406.324 534.34 405.895 534.469 cv
405.465 534.594 404.957 534.656 404.371 534.66 cv
403.801 534.656 403.316 534.609 402.922 534.516 cv
402.523 534.418 402.199 534.285 401.945 534.121 cv
401.691 533.953 401.508 533.758 401.395 533.527 cv
401.277 533.293 401.219 533.039 401.223 532.773 cv
401.219 532.602 401.238 532.437 401.285 532.277 cv
401.324 532.113 401.387 531.961 401.473 531.816 cv
401.555 531.672 401.664 531.535 401.793 531.398 cv
401.918 531.27 402.063 531.137 402.234 531.008 cv
401.977 530.879 401.789 530.715 401.668 530.516 cv
401.547 530.32 401.488 530.109 401.488 529.875 cv
401.488 529.562 401.551 529.277 401.68 529.027 cv
401.809 528.777 401.969 528.555 402.164 528.355 cv
402 528.164 401.875 527.949 401.781 527.707 cv
401.688 527.469 401.641 527.176 401.641 526.828 cv
401.641 526.434 401.707 526.074 401.844 525.754 cv
401.977 525.437 402.164 525.172 402.406 524.953 cv
402.645 524.738 402.93 524.57 403.266 524.449 cv
403.598 524.336 403.965 524.277 404.363 524.273 cv
404.574 524.277 404.773 524.289 404.957 524.309 cv
405.141 524.336 405.313 524.367 405.477 524.406 cv
407.598 524.406 li
407.684 524.41 407.75 524.453 407.793 524.535 cv
407.836 524.625 407.855 524.754 407.859 524.926 cv
cp
405.852 526.773 mo
405.848 526.301 405.715 525.93 405.457 525.656 cv
405.191 525.391 404.82 525.254 404.34 525.254 cv
404.086 525.254 403.867 525.297 403.688 525.379 cv
403.5 525.465 403.348 525.578 403.227 525.723 cv
403.105 525.871 403.016 526.039 402.957 526.227 cv
402.895 526.414 402.863 526.613 402.867 526.82 cv
402.863 527.285 402.996 527.648 403.258 527.914 cv
403.52 528.18 403.887 528.312 404.363 528.309 cv
404.613 528.312 404.832 528.273 405.023 528.187 cv
405.207 528.109 405.363 527.996 405.488 527.855 cv
405.609 527.715 405.699 527.551 405.762 527.359 cv
405.816 527.176 405.848 526.98 405.852 526.773 cv
cp
406.496 532.332 mo
406.492 532.027 406.367 531.797 406.125 531.633 cv
405.875 531.473 405.543 531.383 405.125 531.371 cv
403.309 531.309 li
403.141 531.441 403.004 531.566 402.902 531.68 cv
402.793 531.797 402.711 531.906 402.648 532.016 cv
402.586 532.121 402.543 532.227 402.52 532.332 cv
402.496 532.434 402.484 532.539 402.484 532.648 cv
402.484 532.984 402.652 533.238 402.996 533.418 cv
403.336 533.59 403.816 533.68 404.434 533.68 cv
404.82 533.68 405.145 533.641 405.41 533.566 cv
405.668 533.488 405.879 533.387 406.043 533.266 cv
406.199 533.137 406.316 532.996 406.391 532.836 cv
406.457 532.676 406.492 532.508 406.496 532.332 cv
cp
f
415.418 527.812 mo
415.414 528.016 415.363 528.156 415.266 528.242 cv
415.16 528.328 415.043 528.371 414.918 528.371 cv
410.301 528.371 li
410.297 528.762 410.336 529.113 410.418 529.426 cv
410.492 529.738 410.625 530.008 410.809 530.227 cv
410.988 530.453 411.223 530.625 411.52 530.742 cv
411.809 530.867 412.168 530.926 412.594 530.922 cv
412.926 530.926 413.223 530.898 413.484 530.84 cv
413.746 530.789 413.973 530.727 414.164 530.656 cv
414.352 530.59 414.508 530.531 414.633 530.473 cv
414.754 530.422 414.848 530.395 414.91 530.391 cv
414.945 530.395 414.977 530.402 415.008 530.418 cv
415.035 530.437 415.059 530.465 415.078 530.5 cv
415.09 530.539 415.102 530.59 415.113 530.652 cv
415.117 530.719 415.121 530.797 415.125 530.891 cv
415.121 530.961 415.117 531.02 415.117 531.066 cv
415.109 531.113 415.105 531.156 415.098 531.195 cv
415.09 531.234 415.074 531.27 415.059 531.301 cv
415.035 531.332 415.012 531.363 414.988 531.391 cv
414.957 531.422 414.875 531.469 414.734 531.531 cv
414.594 531.598 414.41 531.66 414.188 531.723 cv
413.961 531.785 413.703 531.84 413.41 531.891 cv
413.117 531.937 412.805 531.961 412.473 531.965 cv
411.895 531.961 411.387 531.883 410.957 531.723 cv
410.52 531.562 410.156 531.324 409.863 531.008 cv
409.563 530.691 409.34 530.297 409.191 529.816 cv
409.043 529.34 408.969 528.781 408.969 528.145 cv
408.969 527.547 409.043 527.008 409.199 526.523 cv
409.352 526.047 409.578 525.637 409.875 525.301 cv
410.168 524.965 410.523 524.707 410.938 524.527 cv
411.352 524.348 411.816 524.258 412.332 524.258 cv
412.883 524.258 413.352 524.348 413.738 524.523 cv
414.125 524.703 414.441 524.941 414.695 525.238 cv
414.941 525.539 415.125 525.891 415.242 526.289 cv
415.355 526.695 415.414 527.125 415.418 527.578 cv
cp
414.125 527.43 mo
414.141 526.754 413.988 526.223 413.672 525.84 cv
413.355 525.457 412.887 525.266 412.27 525.262 cv
411.945 525.266 411.664 525.324 411.426 525.441 cv
411.184 525.562 410.984 525.723 410.824 525.918 cv
410.66 526.117 410.535 526.348 410.449 526.609 cv
410.359 526.871 410.309 527.145 410.301 527.43 cv
cp
f
421.785 529.711 mo
421.781 530.074 421.715 530.395 421.586 530.672 cv
421.453 530.953 421.266 531.187 421.023 531.379 cv
420.777 531.574 420.484 531.719 420.148 531.816 cv
419.809 531.914 419.438 531.961 419.035 531.965 cv
418.781 531.961 418.543 531.941 418.32 531.906 cv
418.094 531.863 417.895 531.816 417.715 531.758 cv
417.535 531.699 417.383 531.637 417.258 531.57 cv
417.133 531.508 417.039 531.449 416.984 531.395 cv
416.926 531.344 416.887 531.273 416.863 531.176 cv
416.836 531.086 416.824 530.957 416.824 530.797 cv
416.824 530.699 416.828 530.617 416.84 530.547 cv
416.848 530.48 416.859 530.426 416.879 530.383 cv
416.891 530.344 416.914 530.312 416.941 530.293 cv
416.969 530.277 417 530.27 417.039 530.266 cv
417.094 530.27 417.18 530.305 417.293 530.371 cv
417.402 530.445 417.539 530.523 417.707 530.602 cv
417.867 530.687 418.059 530.762 418.285 530.832 cv
418.504 530.902 418.762 530.937 419.059 530.937 cv
419.273 530.937 419.473 530.914 419.652 530.867 cv
419.828 530.82 419.98 530.754 420.109 530.66 cv
420.238 530.574 420.34 530.457 420.41 530.312 cv
420.48 530.176 420.516 530.008 420.516 529.812 cv
420.516 529.617 420.465 529.453 420.363 529.316 cv
420.262 529.184 420.125 529.062 419.961 528.957 cv
419.793 528.855 419.609 528.766 419.402 528.68 cv
419.191 528.602 418.977 528.516 418.758 528.426 cv
418.539 528.34 418.324 528.238 418.113 528.125 cv
417.902 528.016 417.711 527.883 417.547 527.719 cv
417.375 527.562 417.242 527.367 417.145 527.141 cv
417.039 526.918 416.988 526.652 416.992 526.34 cv
416.988 526.066 417.043 525.801 417.152 525.547 cv
417.258 525.297 417.418 525.078 417.633 524.887 cv
417.844 524.699 418.109 524.547 418.43 524.43 cv
418.75 524.316 419.121 524.258 419.551 524.258 cv
419.734 524.258 419.922 524.273 420.109 524.305 cv
420.293 524.336 420.461 524.375 420.617 524.422 cv
420.766 524.469 420.895 524.52 421.004 524.574 cv
421.105 524.629 421.188 524.68 421.246 524.719 cv
421.297 524.766 421.332 524.801 421.355 524.828 cv
421.371 524.859 421.387 524.895 421.395 524.93 cv
421.402 524.973 421.41 525.02 421.418 525.074 cv
421.426 525.133 421.43 525.203 421.43 525.285 cv
421.43 525.375 421.426 525.453 421.418 525.516 cv
421.41 525.586 421.395 525.637 421.379 525.676 cv
421.355 525.719 421.336 525.75 421.313 525.766 cv
421.285 525.785 421.254 525.793 421.227 525.793 cv
421.176 525.793 421.109 525.766 421.023 525.707 cv
420.934 525.652 420.82 525.59 420.68 525.523 cv
420.539 525.461 420.371 525.402 420.184 525.34 cv
419.992 525.285 419.777 525.254 419.535 525.254 cv
419.313 525.254 419.121 525.281 418.957 525.328 cv
418.789 525.383 418.652 525.453 418.547 525.539 cv
418.441 525.633 418.359 525.738 418.309 525.863 cv
418.25 525.988 418.223 526.125 418.227 526.27 cv
418.223 526.473 418.273 526.641 418.379 526.777 cv
418.48 526.918 418.617 527.039 418.785 527.141 cv
418.949 527.246 419.141 527.34 419.355 527.422 cv
419.566 527.508 419.781 527.594 420.004 527.68 cv
420.223 527.77 420.441 527.871 420.66 527.977 cv
420.875 528.086 421.066 528.215 421.234 528.371 cv
421.398 528.527 421.531 528.715 421.633 528.934 cv
421.73 529.152 421.781 529.414 421.785 529.711 cv
cp
f
223.746 11.691 mo
223.742 12.531 223.641 13.281 223.434 13.937 cv
223.227 14.602 222.918 15.16 222.508 15.617 cv
222.098 16.078 221.59 16.43 220.984 16.668 cv
220.379 16.91 219.68 17.027 218.887 17.031 cv
218.098 17.027 217.41 16.926 216.828 16.723 cv
216.242 16.52 215.754 16.207 215.367 15.785 cv
214.977 15.363 214.688 14.828 214.492 14.18 cv
214.297 13.531 214.199 12.762 214.203 11.871 cv
214.199 11.059 214.301 10.328 214.512 9.672 cv
214.715 9.02301 215.023 8.46899 215.438 8.008 cv
215.844 7.55499 216.352 7.203 216.961 6.95697 cv
217.563 6.71503 218.266 6.59399 219.07 6.59003 cv
219.832 6.59399 220.508 6.69501 221.094 6.89502 cv
221.676 7.09802 222.164 7.40601 222.559 7.828 cv
222.949 8.25 223.246 8.78101 223.445 9.422 cv
223.645 10.062 223.742 10.82 223.746 11.691 cv
cp
221.598 11.801 mo
221.594 11.273 221.551 10.793 221.473 10.359 cv
221.387 9.92603 221.246 9.55499 221.047 9.242 cv
220.844 8.93402 220.578 8.69501 220.246 8.52698 cv
219.914 8.35901 219.5 8.27301 219.004 8.27301 cv
218.496 8.27301 218.074 8.37097 217.738 8.55902 cv
217.402 8.75 217.129 9 216.922 9.31598 cv
216.711 9.63702 216.563 10.008 216.48 10.43 cv
216.391 10.852 216.348 11.301 216.352 11.77 cv
216.348 12.324 216.391 12.82 216.477 13.258 cv
216.559 13.699 216.699 14.074 216.898 14.383 cv
217.094 14.695 217.359 14.93 217.691 15.094 cv
218.023 15.258 218.441 15.34 218.949 15.34 cv
219.449 15.34 219.867 15.246 220.207 15.059 cv
220.543 14.871 220.816 14.617 221.027 14.297 cv
221.23 13.977 221.379 13.602 221.469 13.172 cv
221.551 12.742 221.594 12.285 221.598 11.801 cv
cp
f
231.746 9.62903 mo
231.742 9.65601 231.742 9.68701 231.742 9.72302 cv
231.738 9.76202 231.734 9.80103 231.727 9.84399 cv
231.719 9.88702 231.707 9.93701 231.695 9.992 cv
231.68 10.051 231.664 10.117 231.645 10.187 cv
229.559 16.477 li
229.531 16.566 229.496 16.641 229.453 16.691 cv
229.406 16.75 229.332 16.793 229.234 16.82 cv
229.129 16.852 228.992 16.867 228.82 16.883 cv
228.645 16.891 228.418 16.898 228.141 16.898 cv
227.863 16.898 227.637 16.891 227.465 16.879 cv
227.289 16.863 227.152 16.844 227.055 16.812 cv
226.953 16.785 226.883 16.742 226.84 16.684 cv
226.793 16.633 226.758 16.562 226.734 16.477 cv
224.648 10.187 li
224.617 10.086 224.59 9.992 224.574 9.90997 cv
224.551 9.828 224.543 9.77002 224.543 9.72998 cv
224.539 9.69897 224.535 9.664 224.539 9.62903 cv
224.535 9.578 224.551 9.53101 224.582 9.492 cv
224.609 9.453 224.66 9.422 224.734 9.39502 cv
224.805 9.37097 224.902 9.35199 225.031 9.34003 cv
225.156 9.33197 225.316 9.328 225.512 9.32397 cv
225.723 9.328 225.895 9.336 226.027 9.34399 cv
226.152 9.35901 226.258 9.375 226.336 9.39801 cv
226.41 9.422 226.461 9.45697 226.496 9.5 cv
226.523 9.547 226.551 9.60199 226.574 9.65997 cv
228.156 14.762 li
228.203 14.957 li
228.25 14.762 li
229.809 9.65997 li
229.82 9.60199 229.844 9.547 229.879 9.5 cv
229.91 9.45697 229.965 9.422 230.039 9.39801 cv
230.109 9.375 230.207 9.35901 230.332 9.34399 cv
230.453 9.336 230.613 9.328 230.813 9.32397 cv
231.004 9.328 231.16 9.33197 231.281 9.34003 cv
231.402 9.35199 231.496 9.37097 231.566 9.39502 cv
231.633 9.422 231.68 9.453 231.707 9.492 cv
231.73 9.53101 231.742 9.578 231.746 9.62903 cv
cp
f
239.227 12.91 mo
239.223 13.148 239.172 13.324 239.066 13.437 cv
238.957 13.555 238.809 13.613 238.629 13.609 cv
234.395 13.609 li
234.391 13.91 234.426 14.18 234.5 14.418 cv
234.566 14.66 234.68 14.863 234.836 15.031 cv
234.988 15.203 235.184 15.332 235.426 15.418 cv
235.664 15.508 235.953 15.551 236.297 15.551 cv
236.637 15.551 236.938 15.527 237.199 15.477 cv
237.457 15.43 237.684 15.375 237.875 15.312 cv
238.063 15.254 238.219 15.199 238.348 15.148 cv
238.469 15.102 238.57 15.078 238.652 15.074 cv
238.695 15.078 238.734 15.086 238.77 15.102 cv
238.797 15.121 238.824 15.152 238.844 15.199 cv
238.863 15.246 238.875 15.312 238.887 15.398 cv
238.891 15.484 238.895 15.594 238.898 15.723 cv
238.895 15.84 238.895 15.937 238.891 16.016 cv
238.883 16.098 238.875 16.164 238.867 16.219 cv
238.855 16.277 238.84 16.328 238.82 16.363 cv
238.801 16.406 238.773 16.441 238.742 16.477 cv
238.707 16.516 238.613 16.566 238.465 16.625 cv
238.309 16.691 238.117 16.754 237.887 16.809 cv
237.648 16.871 237.379 16.918 237.082 16.965 cv
236.777 17.004 236.457 17.027 236.117 17.031 cv
235.496 17.027 234.953 16.953 234.492 16.797 cv
234.023 16.645 233.637 16.406 233.328 16.09 cv
233.012 15.773 232.777 15.375 232.629 14.891 cv
232.473 14.41 232.398 13.844 232.402 13.187 cv
232.398 12.574 232.477 12.016 232.641 11.52 cv
232.797 11.023 233.031 10.605 233.344 10.258 cv
233.648 9.914 234.023 9.64801 234.461 9.46503 cv
234.898 9.28497 235.391 9.19501 235.945 9.19098 cv
236.523 9.19501 237.023 9.28101 237.438 9.44897 cv
237.852 9.625 238.188 9.86298 238.453 10.164 cv
238.715 10.469 238.91 10.828 239.039 11.242 cv
239.16 11.66 239.223 12.109 239.227 12.598 cv
cp
237.324 12.348 mo
237.336 11.797 237.227 11.363 236.992 11.051 cv
236.758 10.738 236.391 10.582 235.898 10.578 cv
235.648 10.582 235.434 10.629 235.25 10.719 cv
235.063 10.816 234.91 10.941 234.789 11.098 cv
234.664 11.258 234.57 11.445 234.508 11.66 cv
234.441 11.875 234.402 12.105 234.395 12.348 cv
cp
f
245.301 10.281 mo
245.301 10.473 245.293 10.625 245.285 10.742 cv
245.27 10.863 245.254 10.957 245.238 11.023 cv
245.215 11.094 245.188 11.141 245.156 11.164 cv
245.117 11.191 245.074 11.203 245.027 11.203 cv
244.98 11.203 244.934 11.195 244.887 11.176 cv
244.832 11.16 244.773 11.141 244.711 11.117 cv
244.641 11.098 244.57 11.078 244.496 11.059 cv
244.414 11.043 244.328 11.035 244.238 11.031 cv
244.125 11.035 244.016 11.055 243.91 11.098 cv
243.801 11.145 243.688 11.215 243.574 11.305 cv
243.453 11.398 243.332 11.523 243.207 11.676 cv
243.078 11.836 242.941 12.027 242.797 12.254 cv
242.797 16.586 li
242.793 16.641 242.777 16.684 242.75 16.723 cv
242.715 16.762 242.66 16.797 242.59 16.82 cv
242.512 16.848 242.414 16.863 242.289 16.879 cv
242.164 16.891 242.004 16.898 241.816 16.898 cv
241.621 16.898 241.465 16.891 241.34 16.879 cv
241.215 16.863 241.113 16.848 241.039 16.82 cv
240.961 16.797 240.906 16.762 240.879 16.723 cv
240.844 16.684 240.828 16.641 240.832 16.586 cv
240.832 9.63702 li
240.828 9.59003 240.844 9.54303 240.871 9.5 cv
240.895 9.46503 240.941 9.43402 241.012 9.40198 cv
241.078 9.37903 241.164 9.35901 241.273 9.34399 cv
241.379 9.336 241.512 9.328 241.676 9.32397 cv
241.84 9.328 241.977 9.336 242.086 9.34399 cv
242.191 9.35901 242.277 9.37903 242.34 9.40198 cv
242.398 9.43402 242.441 9.46503 242.469 9.5 cv
242.492 9.54303 242.504 9.59003 242.508 9.63702 cv
242.508 10.5 li
242.688 10.242 242.859 10.031 243.023 9.85901 cv
243.18 9.69501 243.336 9.55902 243.484 9.45697 cv
243.629 9.35901 243.773 9.29303 243.918 9.25 cv
244.063 9.21503 244.207 9.19501 244.355 9.19098 cv
244.422 9.19501 244.496 9.19897 244.574 9.203 cv
244.652 9.21503 244.73 9.22699 244.816 9.242 cv
244.895 9.26202 244.969 9.28101 245.035 9.30499 cv
245.094 9.328 245.141 9.35498 245.172 9.37903 cv
245.199 9.40997 245.219 9.43701 245.234 9.46503 cv
245.246 9.5 245.258 9.54303 245.27 9.59399 cv
245.277 9.65198 245.285 9.73401 245.293 9.84003 cv
245.297 9.94897 245.301 10.098 245.301 10.281 cv
cp
f
252.055 16.609 mo
252.051 16.687 252.023 16.742 251.977 16.781 cv
251.922 16.824 251.84 16.852 251.73 16.871 cv
251.613 16.887 251.449 16.898 251.234 16.898 cv
250.996 16.898 250.824 16.887 250.723 16.871 cv
250.613 16.852 250.539 16.824 250.5 16.781 cv
250.453 16.742 250.434 16.687 250.434 16.609 cv
250.434 16.059 li
250.145 16.367 249.816 16.605 249.453 16.773 cv
249.086 16.945 248.68 17.027 248.234 17.031 cv
247.863 17.027 247.523 16.98 247.215 16.887 cv
246.906 16.793 246.641 16.652 246.414 16.457 cv
246.188 16.27 246.012 16.035 245.887 15.754 cv
245.762 15.477 245.699 15.148 245.703 14.77 cv
245.699 14.371 245.777 14.02 245.938 13.715 cv
246.094 13.418 246.332 13.172 246.648 12.977 cv
246.961 12.785 247.352 12.641 247.82 12.543 cv
248.289 12.453 248.832 12.406 249.449 12.402 cv
250.129 12.402 li
250.129 11.98 li
250.129 11.766 250.105 11.574 250.063 11.41 cv
250.016 11.25 249.941 11.113 249.844 11 cv
249.738 10.895 249.605 10.812 249.438 10.758 cv
249.266 10.707 249.055 10.684 248.813 10.68 cv
248.48 10.684 248.188 10.719 247.934 10.789 cv
247.672 10.863 247.445 10.945 247.25 11.031 cv
247.051 11.125 246.887 11.203 246.758 11.273 cv
246.621 11.348 246.512 11.387 246.434 11.383 cv
246.371 11.387 246.32 11.367 246.281 11.328 cv
246.234 11.293 246.199 11.242 246.172 11.172 cv
246.141 11.109 246.117 11.023 246.105 10.922 cv
246.086 10.824 246.078 10.715 246.082 10.594 cv
246.078 10.434 246.094 10.309 246.121 10.211 cv
246.145 10.121 246.191 10.035 246.27 9.95697 cv
246.34 9.883 246.469 9.80103 246.652 9.711 cv
246.832 9.62097 247.043 9.53497 247.289 9.45697 cv
247.531 9.37903 247.801 9.31598 248.09 9.26599 cv
248.379 9.21899 248.676 9.19501 248.984 9.19098 cv
249.527 9.19501 249.992 9.24597 250.379 9.35199 cv
250.766 9.461 251.086 9.625 251.336 9.84399 cv
251.586 10.062 251.766 10.348 251.883 10.695 cv
251.992 11.047 252.051 11.461 252.055 11.934 cv
cp
250.129 13.633 mo
249.379 13.633 li
249.063 13.637 248.793 13.66 248.57 13.703 cv
248.344 13.754 248.16 13.824 248.023 13.914 cv
247.879 14.012 247.777 14.125 247.715 14.254 cv
247.648 14.391 247.613 14.539 247.617 14.707 cv
247.613 15 247.707 15.23 247.895 15.395 cv
248.078 15.562 248.336 15.645 248.664 15.645 cv
248.938 15.645 249.188 15.574 249.422 15.434 cv
249.648 15.293 249.887 15.09 250.129 14.816 cv
cp
f
255.977 16.586 mo
255.973 16.641 255.957 16.684 255.93 16.723 cv
255.895 16.762 255.84 16.797 255.77 16.82 cv
255.691 16.848 255.594 16.863 255.469 16.879 cv
255.344 16.891 255.184 16.898 254.996 16.898 cv
254.801 16.898 254.645 16.891 254.52 16.879 cv
254.395 16.863 254.293 16.848 254.219 16.82 cv
254.141 16.797 254.086 16.762 254.059 16.723 cv
254.023 16.684 254.008 16.641 254.012 16.586 cv
254.012 6.34003 li
254.008 6.289 254.023 6.242 254.059 6.19897 cv
254.086 6.15997 254.141 6.125 254.219 6.09399 cv
254.293 6.06598 254.395 6.047 254.52 6.02698 cv
254.645 6.01599 254.801 6.008 254.996 6.00403 cv
255.184 6.008 255.344 6.01599 255.469 6.02698 cv
255.594 6.047 255.691 6.06598 255.77 6.09399 cv
255.84 6.125 255.895 6.15997 255.93 6.19897 cv
255.957 6.242 255.973 6.289 255.977 6.34003 cv
cp
f
259.953 16.586 mo
259.949 16.641 259.934 16.684 259.906 16.723 cv
259.871 16.762 259.816 16.797 259.746 16.82 cv
259.668 16.848 259.57 16.863 259.445 16.879 cv
259.32 16.891 259.16 16.898 258.973 16.898 cv
258.777 16.898 258.621 16.891 258.496 16.879 cv
258.371 16.863 258.27 16.848 258.195 16.82 cv
258.117 16.797 258.063 16.762 258.035 16.723 cv
258 16.684 257.984 16.641 257.988 16.586 cv
257.988 6.34003 li
257.984 6.289 258 6.242 258.035 6.19897 cv
258.063 6.15997 258.117 6.125 258.195 6.09399 cv
258.27 6.06598 258.371 6.047 258.496 6.02698 cv
258.621 6.01599 258.777 6.008 258.973 6.00403 cv
259.16 6.008 259.32 6.01599 259.445 6.02698 cv
259.57 6.047 259.668 6.06598 259.746 6.09399 cv
259.816 6.125 259.871 6.15997 259.906 6.19897 cv
259.934 6.242 259.949 6.289 259.953 6.34003 cv
cp
f
273.117 16.586 mo
273.117 16.648 273.105 16.695 273.086 16.73 cv
273.066 16.773 273.02 16.805 272.941 16.828 cv
272.863 16.852 272.746 16.867 272.598 16.883 cv
272.441 16.891 272.238 16.898 271.98 16.898 cv
271.762 16.898 271.586 16.891 271.457 16.883 cv
271.328 16.867 271.227 16.852 271.152 16.824 cv
271.074 16.797 271.02 16.762 270.992 16.715 cv
270.957 16.676 270.934 16.621 270.914 16.555 cv
270.008 14.305 li
269.898 14.051 269.793 13.824 269.691 13.625 cv
269.582 13.43 269.469 13.266 269.344 13.133 cv
269.215 13.004 269.066 12.902 268.902 12.832 cv
268.734 12.766 268.543 12.734 268.328 12.73 cv
267.688 12.73 li
267.688 16.57 li
267.684 16.625 267.668 16.672 267.637 16.711 cv
267.602 16.754 267.547 16.789 267.469 16.812 cv
267.391 16.84 267.285 16.859 267.156 16.875 cv
267.023 16.891 266.859 16.898 266.66 16.898 cv
266.461 16.898 266.293 16.891 266.164 16.875 cv
266.027 16.859 265.922 16.84 265.848 16.812 cv
265.766 16.789 265.711 16.754 265.684 16.711 cv
265.648 16.672 265.633 16.625 265.637 16.57 cv
265.637 7.414 li
265.633 7.18701 265.691 7.02301 265.813 6.91803 cv
265.926 6.82001 266.07 6.77002 266.246 6.76599 cv
268.855 6.76599 li
269.117 6.77002 269.336 6.77301 269.512 6.78101 cv
269.68 6.79303 269.836 6.80499 269.98 6.82001 cv
270.383 6.87903 270.746 6.97998 271.07 7.117 cv
271.395 7.26202 271.672 7.44501 271.898 7.66803 cv
272.125 7.89801 272.297 8.164 272.418 8.47302 cv
272.535 8.78101 272.594 9.13702 272.598 9.53497 cv
272.594 9.875 272.551 10.184 272.469 10.457 cv
272.379 10.738 272.254 10.984 272.09 11.203 cv
271.922 11.422 271.715 11.613 271.473 11.77 cv
271.227 11.934 270.949 12.062 270.641 12.16 cv
270.789 12.234 270.934 12.324 271.066 12.426 cv
271.199 12.535 271.32 12.66 271.438 12.805 cv
271.551 12.953 271.664 13.121 271.77 13.309 cv
271.871 13.5 271.973 13.715 272.074 13.953 cv
272.926 15.941 li
273 16.141 273.051 16.281 273.078 16.371 cv
273.102 16.465 273.117 16.539 273.117 16.586 cv
cp
270.477 9.74597 mo
270.473 9.414 270.398 9.133 270.25 8.90198 cv
270.098 8.67603 269.852 8.51599 269.512 8.41803 cv
269.406 8.39502 269.289 8.37097 269.156 8.35498 cv
269.023 8.34003 268.84 8.33197 268.605 8.33197 cv
267.688 8.33197 li
267.688 11.195 li
268.73 11.195 li
269.02 11.199 269.277 11.164 269.496 11.09 cv
269.715 11.023 269.895 10.922 270.039 10.793 cv
270.184 10.668 270.293 10.516 270.367 10.336 cv
270.438 10.16 270.473 9.96503 270.477 9.74597 cv
cp
f
281.102 16.586 mo
281.098 16.641 281.086 16.684 281.063 16.723 cv
281.035 16.762 280.988 16.797 280.926 16.82 cv
280.859 16.848 280.773 16.863 280.668 16.879 cv
280.563 16.891 280.43 16.898 280.27 16.898 cv
280.094 16.898 279.953 16.891 279.852 16.879 cv
279.742 16.863 279.66 16.848 279.598 16.82 cv
279.535 16.797 279.488 16.762 279.465 16.723 cv
279.434 16.684 279.422 16.641 279.426 16.586 cv
279.426 15.785 li
279.039 16.199 278.648 16.512 278.254 16.719 cv
277.852 16.926 277.441 17.027 277.02 17.031 cv
276.539 17.027 276.137 16.953 275.813 16.797 cv
275.488 16.645 275.227 16.43 275.027 16.16 cv
274.824 15.891 274.68 15.578 274.598 15.219 cv
274.508 14.863 274.465 14.422 274.469 13.891 cv
274.469 9.63702 li
274.465 9.59003 274.48 9.54303 274.512 9.5 cv
274.539 9.46503 274.59 9.43402 274.668 9.40198 cv
274.742 9.37903 274.844 9.35901 274.973 9.34399 cv
275.098 9.336 275.254 9.328 275.445 9.32397 cv
275.633 9.328 275.793 9.336 275.918 9.34399 cv
276.043 9.35901 276.141 9.37903 276.219 9.40198 cv
276.289 9.43402 276.344 9.46503 276.379 9.5 cv
276.406 9.54303 276.422 9.59003 276.426 9.63702 cv
276.426 13.562 li
276.422 13.93 276.445 14.207 276.496 14.398 cv
276.539 14.59 276.609 14.754 276.711 14.891 cv
276.805 15.031 276.93 15.137 277.078 15.211 cv
277.227 15.289 277.398 15.328 277.594 15.324 cv
277.844 15.328 278.094 15.238 278.348 15.051 cv
278.598 14.871 278.867 14.605 279.152 14.258 cv
279.152 9.63702 li
279.152 9.59003 279.164 9.54303 279.195 9.5 cv
279.219 9.46503 279.273 9.43402 279.352 9.40198 cv
279.426 9.37903 279.523 9.35901 279.652 9.34399 cv
279.773 9.336 279.934 9.328 280.129 9.32397 cv
280.32 9.328 280.477 9.336 280.602 9.34399 cv
280.723 9.35901 280.824 9.37903 280.898 9.40198 cv
280.969 9.43402 281.02 9.46503 281.055 9.5 cv
281.082 9.54303 281.098 9.59003 281.102 9.63702 cv
cp
f
289.719 16.586 mo
289.715 16.641 289.699 16.684 289.672 16.723 cv
289.637 16.762 289.586 16.797 289.516 16.82 cv
289.441 16.848 289.34 16.863 289.215 16.879 cv
289.086 16.891 288.93 16.898 288.746 16.898 cv
288.551 16.898 288.391 16.891 288.266 16.879 cv
288.137 16.863 288.035 16.848 287.965 16.82 cv
287.887 16.797 287.836 16.762 287.809 16.723 cv
287.773 16.684 287.758 16.641 287.762 16.586 cv
287.762 12.621 li
287.758 12.285 287.734 12.02 287.688 11.824 cv
287.637 11.633 287.563 11.469 287.473 11.332 cv
287.379 11.195 287.262 11.09 287.113 11.012 cv
286.965 10.937 286.789 10.898 286.594 10.898 cv
286.34 10.898 286.09 10.992 285.836 11.172 cv
285.582 11.355 285.316 11.617 285.043 11.965 cv
285.043 16.586 li
285.039 16.641 285.023 16.684 284.996 16.723 cv
284.961 16.762 284.906 16.797 284.836 16.82 cv
284.758 16.848 284.66 16.863 284.535 16.879 cv
284.41 16.891 284.25 16.898 284.063 16.898 cv
283.867 16.898 283.711 16.891 283.586 16.879 cv
283.461 16.863 283.359 16.848 283.285 16.82 cv
283.207 16.797 283.152 16.762 283.125 16.723 cv
283.09 16.684 283.074 16.641 283.078 16.586 cv
283.078 9.63702 li
283.074 9.59003 283.09 9.54303 283.117 9.5 cv
283.141 9.46503 283.188 9.43402 283.258 9.40198 cv
283.324 9.37903 283.41 9.35901 283.52 9.34399 cv
283.625 9.336 283.758 9.328 283.922 9.32397 cv
284.086 9.328 284.223 9.336 284.332 9.34399 cv
284.438 9.35901 284.523 9.37903 284.586 9.40198 cv
284.645 9.43402 284.688 9.46503 284.715 9.5 cv
284.738 9.54303 284.75 9.59003 284.754 9.63702 cv
284.754 10.437 li
285.137 10.027 285.527 9.71503 285.926 9.50403 cv
286.32 9.297 286.738 9.19501 287.172 9.19098 cv
287.641 9.19501 288.039 9.27301 288.367 9.42603 cv
288.691 9.586 288.953 9.797 289.152 10.062 cv
289.352 10.332 289.496 10.645 289.586 11 cv
289.672 11.359 289.715 11.789 289.719 12.293 cv
cp
f
295.59 15.902 mo
295.59 16.129 295.574 16.305 295.547 16.426 cv
295.516 16.551 295.477 16.637 295.434 16.684 cv
295.383 16.734 295.316 16.777 295.227 16.816 cv
295.133 16.855 295.023 16.887 294.906 16.918 cv
294.781 16.941 294.648 16.965 294.508 16.984 cv
294.363 16.996 294.223 17.004 294.078 17.008 cv
293.688 17.004 293.348 16.953 293.063 16.859 cv
292.777 16.758 292.543 16.609 292.355 16.402 cv
292.168 16.199 292.027 15.941 291.941 15.629 cv
291.848 15.32 291.805 14.949 291.809 14.52 cv
291.809 10.961 li
290.977 10.961 li
290.875 10.965 290.801 10.902 290.75 10.777 cv
290.695 10.656 290.668 10.453 290.672 10.164 cv
290.668 10.016 290.676 9.88702 290.691 9.78497 cv
290.703 9.68402 290.723 9.60199 290.75 9.539 cv
290.773 9.47998 290.805 9.43701 290.848 9.40997 cv
290.883 9.38702 290.93 9.375 290.984 9.37097 cv
291.809 9.37097 li
291.809 7.82001 li
291.805 7.77301 291.82 7.72699 291.852 7.67999 cv
291.879 7.64099 291.93 7.60498 292.008 7.57397 cv
292.082 7.55103 292.184 7.52698 292.313 7.51202 cv
292.438 7.5 292.594 7.49597 292.785 7.492 cv
292.973 7.49597 293.133 7.5 293.262 7.51202 cv
293.387 7.52698 293.488 7.55103 293.563 7.57397 cv
293.633 7.60498 293.684 7.64099 293.719 7.67999 cv
293.746 7.72699 293.762 7.77301 293.766 7.82001 cv
293.766 9.37097 li
295.277 9.37097 li
295.328 9.375 295.375 9.38702 295.414 9.40997 cv
295.453 9.43701 295.484 9.47998 295.512 9.539 cv
295.535 9.60199 295.555 9.68402 295.57 9.78497 cv
295.582 9.88702 295.59 10.016 295.59 10.164 cv
295.59 10.453 295.563 10.656 295.512 10.777 cv
295.457 10.902 295.383 10.965 295.285 10.961 cv
293.766 10.961 li
293.766 14.227 li
293.762 14.605 293.82 14.891 293.945 15.078 cv
294.063 15.27 294.277 15.363 294.582 15.363 cv
294.684 15.363 294.777 15.355 294.863 15.336 cv
294.945 15.32 295.02 15.301 295.086 15.273 cv
295.148 15.254 295.203 15.23 295.25 15.211 cv
295.293 15.195 295.332 15.187 295.371 15.184 cv
295.398 15.187 295.43 15.195 295.461 15.211 cv
295.488 15.23 295.508 15.27 295.527 15.32 cv
295.539 15.379 295.555 15.453 295.57 15.543 cv
295.582 15.641 295.59 15.758 295.59 15.902 cv
cp
f
298.977 16.586 mo
298.973 16.641 298.957 16.684 298.93 16.723 cv
298.895 16.762 298.84 16.797 298.77 16.82 cv
298.691 16.848 298.594 16.863 298.469 16.879 cv
298.344 16.891 298.184 16.898 297.996 16.898 cv
297.801 16.898 297.645 16.891 297.52 16.879 cv
297.395 16.863 297.293 16.848 297.219 16.82 cv
297.141 16.797 297.086 16.762 297.059 16.723 cv
297.023 16.684 297.008 16.641 297.012 16.586 cv
297.012 9.65198 li
297.008 9.60199 297.023 9.55499 297.059 9.51599 cv
297.086 9.47699 297.141 9.44501 297.219 9.414 cv
297.293 9.39099 297.395 9.367 297.52 9.34802 cv
297.645 9.336 297.801 9.328 297.996 9.32397 cv
298.184 9.328 298.344 9.336 298.469 9.34802 cv
298.594 9.367 298.691 9.39099 298.77 9.414 cv
298.84 9.44501 298.895 9.47699 298.93 9.51599 cv
298.957 9.55499 298.973 9.60199 298.977 9.65198 cv
cp
299.125 7.28101 mo
299.125 7.67999 299.043 7.953 298.883 8.10199 cv
298.719 8.25403 298.422 8.328 297.988 8.32397 cv
297.543 8.328 297.242 8.25403 297.094 8.10901 cv
296.938 7.96503 296.863 7.703 296.863 7.32001 cv
296.863 6.92603 296.941 6.65198 297.102 6.5 cv
297.258 6.34802 297.559 6.27002 298.004 6.27002 cv
298.438 6.27002 298.734 6.34399 298.891 6.492 cv
299.047 6.64099 299.125 6.90601 299.125 7.28101 cv
cp
f
311.996 16.586 mo
311.992 16.641 311.977 16.684 311.949 16.723 cv
311.914 16.762 311.863 16.797 311.793 16.82 cv
311.719 16.848 311.617 16.863 311.496 16.879 cv
311.371 16.891 311.215 16.898 311.023 16.898 cv
310.824 16.898 310.664 16.891 310.539 16.879 cv
310.414 16.863 310.313 16.848 310.238 16.82 cv
310.16 16.797 310.109 16.762 310.082 16.723 cv
310.055 16.684 310.039 16.641 310.043 16.586 cv
310.043 12.465 li
310.039 12.234 310.02 12.02 309.977 11.824 cv
309.93 11.633 309.859 11.469 309.773 11.332 cv
309.68 11.195 309.566 11.09 309.43 11.012 cv
309.289 10.937 309.125 10.898 308.934 10.898 cv
308.699 10.898 308.461 10.992 308.223 11.172 cv
307.984 11.355 307.727 11.617 307.445 11.965 cv
307.445 16.586 li
307.445 16.641 307.43 16.684 307.398 16.723 cv
307.367 16.762 307.313 16.797 307.238 16.82 cv
307.16 16.848 307.059 16.863 306.938 16.879 cv
306.813 16.891 306.66 16.898 306.473 16.898 cv
306.277 16.898 306.117 16.891 305.996 16.879 cv
305.867 16.863 305.766 16.848 305.695 16.82 cv
305.617 16.797 305.566 16.762 305.535 16.723 cv
305.504 16.684 305.488 16.641 305.488 16.586 cv
305.488 12.465 li
305.488 12.234 305.465 12.02 305.422 11.824 cv
305.379 11.633 305.313 11.469 305.227 11.332 cv
305.133 11.195 305.02 11.09 304.883 11.012 cv
304.738 10.937 304.574 10.898 304.391 10.898 cv
304.148 10.898 303.91 10.992 303.672 11.172 cv
303.434 11.355 303.176 11.617 302.902 11.965 cv
302.902 16.586 li
302.898 16.641 302.883 16.684 302.855 16.723 cv
302.82 16.762 302.766 16.797 302.695 16.82 cv
302.617 16.848 302.52 16.863 302.395 16.879 cv
302.27 16.891 302.109 16.898 301.922 16.898 cv
301.727 16.898 301.57 16.891 301.445 16.879 cv
301.32 16.863 301.219 16.848 301.145 16.82 cv
301.066 16.797 301.012 16.762 300.984 16.723 cv
300.949 16.684 300.934 16.641 300.938 16.586 cv
300.938 9.63702 li
300.934 9.59003 300.949 9.54303 300.977 9.5 cv
301 9.46503 301.047 9.43402 301.117 9.40198 cv
301.184 9.37903 301.27 9.35901 301.379 9.34399 cv
301.484 9.336 301.617 9.328 301.781 9.32397 cv
301.945 9.328 302.082 9.336 302.191 9.34399 cv
302.297 9.35901 302.383 9.37903 302.445 9.40198 cv
302.504 9.43402 302.547 9.46503 302.574 9.5 cv
302.598 9.54303 302.609 9.59003 302.613 9.63702 cv
302.613 10.437 li
302.996 10.027 303.379 9.71503 303.762 9.50403 cv
304.141 9.297 304.543 9.19501 304.961 9.19098 cv
305.246 9.19501 305.5 9.22302 305.73 9.28101 cv
305.957 9.34399 306.164 9.42999 306.344 9.539 cv
306.523 9.65198 306.676 9.789 306.805 9.94098 cv
306.934 10.098 307.043 10.27 307.133 10.461 cv
307.34 10.238 307.543 10.047 307.746 9.88702 cv
307.941 9.72699 308.141 9.59399 308.336 9.492 cv
308.531 9.39099 308.727 9.31598 308.922 9.26599 cv
309.117 9.21899 309.316 9.19501 309.52 9.19098 cv
309.98 9.19501 310.367 9.27301 310.688 9.42603 cv
311 9.586 311.258 9.797 311.453 10.062 cv
311.648 10.332 311.785 10.645 311.871 11 cv
311.949 11.359 311.992 11.738 311.996 12.137 cv
cp
f
320.332 12.91 mo
320.328 13.148 320.277 13.324 320.172 13.437 cv
320.063 13.555 319.914 13.613 319.734 13.609 cv
315.5 13.609 li
315.496 13.91 315.531 14.18 315.605 14.418 cv
315.672 14.66 315.785 14.863 315.941 15.031 cv
316.094 15.203 316.289 15.332 316.531 15.418 cv
316.77 15.508 317.059 15.551 317.402 15.551 cv
317.742 15.551 318.043 15.527 318.305 15.477 cv
318.563 15.43 318.789 15.375 318.98 15.312 cv
319.168 15.254 319.324 15.199 319.453 15.148 cv
319.574 15.102 319.676 15.078 319.758 15.074 cv
319.801 15.078 319.84 15.086 319.875 15.102 cv
319.902 15.121 319.93 15.152 319.949 15.199 cv
319.969 15.246 319.98 15.312 319.992 15.398 cv
319.996 15.484 320 15.594 320.004 15.723 cv
320 15.84 320 15.937 319.996 16.016 cv
319.988 16.098 319.98 16.164 319.973 16.219 cv
319.961 16.277 319.945 16.328 319.926 16.363 cv
319.906 16.406 319.879 16.441 319.848 16.477 cv
319.813 16.516 319.719 16.566 319.57 16.625 cv
319.414 16.691 319.223 16.754 318.992 16.809 cv
318.754 16.871 318.484 16.918 318.188 16.965 cv
317.883 17.004 317.563 17.027 317.223 17.031 cv
316.602 17.027 316.059 16.953 315.598 16.797 cv
315.129 16.645 314.742 16.406 314.434 16.09 cv
314.117 15.773 313.883 15.375 313.734 14.891 cv
313.578 14.41 313.504 13.844 313.508 13.187 cv
313.504 12.574 313.582 12.016 313.746 11.52 cv
313.902 11.023 314.137 10.605 314.449 10.258 cv
314.754 9.914 315.129 9.64801 315.566 9.46503 cv
316.004 9.28497 316.496 9.19501 317.051 9.19098 cv
317.629 9.19501 318.129 9.28101 318.543 9.44897 cv
318.957 9.625 319.293 9.86298 319.559 10.164 cv
319.82 10.469 320.016 10.828 320.145 11.242 cv
320.266 11.66 320.328 12.109 320.332 12.598 cv
cp
318.43 12.348 mo
318.441 11.797 318.332 11.363 318.098 11.051 cv
317.863 10.738 317.496 10.582 317.004 10.578 cv
316.754 10.582 316.539 10.629 316.355 10.719 cv
316.168 10.816 316.016 10.941 315.895 11.098 cv
315.77 11.258 315.676 11.445 315.613 11.66 cv
315.547 11.875 315.508 12.105 315.5 12.348 cv
cp
f
326.832 14.621 mo
326.828 15.02 326.754 15.367 326.609 15.668 cv
326.461 15.969 326.254 16.223 325.984 16.422 cv
325.711 16.629 325.391 16.777 325.023 16.879 cv
324.656 16.977 324.254 17.027 323.824 17.031 cv
323.559 17.027 323.313 17.008 323.078 16.973 cv
322.844 16.93 322.633 16.883 322.445 16.824 cv
322.258 16.766 322.102 16.703 321.977 16.641 cv
321.852 16.578 321.758 16.52 321.703 16.465 cv
321.645 16.41 321.602 16.328 321.574 16.211 cv
321.539 16.098 321.523 15.922 321.527 15.691 cv
321.523 15.543 321.531 15.422 321.543 15.328 cv
321.551 15.238 321.566 15.168 321.59 15.109 cv
321.609 15.059 321.633 15.02 321.668 15 cv
321.695 14.984 321.734 14.977 321.781 14.973 cv
321.836 14.977 321.922 15.008 322.035 15.07 cv
322.145 15.137 322.281 15.211 322.453 15.285 cv
322.617 15.367 322.813 15.437 323.031 15.504 cv
323.25 15.574 323.5 15.609 323.785 15.605 cv
323.961 15.609 324.117 15.59 324.258 15.551 cv
324.391 15.516 324.512 15.465 324.617 15.395 cv
324.715 15.328 324.789 15.242 324.844 15.137 cv
324.891 15.035 324.918 14.914 324.922 14.777 cv
324.918 14.621 324.871 14.488 324.777 14.379 cv
324.684 14.27 324.555 14.172 324.398 14.086 cv
324.234 14.004 324.055 13.926 323.859 13.852 cv
323.656 13.781 323.453 13.703 323.242 13.609 cv
323.031 13.523 322.824 13.422 322.629 13.305 cv
322.426 13.195 322.246 13.055 322.09 12.887 cv
321.926 12.723 321.801 12.523 321.707 12.285 cv
321.613 12.055 321.566 11.773 321.566 11.441 cv
321.566 11.113 321.629 10.809 321.758 10.527 cv
321.887 10.254 322.074 10.016 322.32 9.81598 cv
322.563 9.62097 322.859 9.46899 323.211 9.35498 cv
323.559 9.25 323.953 9.19501 324.395 9.19098 cv
324.609 9.19501 324.82 9.211 325.027 9.23798 cv
325.23 9.27301 325.418 9.31201 325.586 9.35498 cv
325.75 9.40601 325.891 9.45697 326.008 9.508 cv
326.121 9.56598 326.203 9.61298 326.254 9.64801 cv
326.301 9.69098 326.336 9.72998 326.359 9.76599 cv
326.379 9.80902 326.391 9.85498 326.402 9.90601 cv
326.41 9.961 326.422 10.027 326.43 10.105 cv
326.438 10.191 326.441 10.289 326.441 10.406 cv
326.441 10.547 326.438 10.664 326.43 10.75 cv
326.422 10.844 326.406 10.914 326.391 10.961 cv
326.371 11.016 326.348 11.051 326.32 11.066 cv
326.285 11.09 326.25 11.098 326.211 11.094 cv
326.16 11.098 326.086 11.07 325.992 11.012 cv
325.891 10.961 325.77 10.902 325.621 10.836 cv
325.473 10.777 325.301 10.719 325.105 10.66 cv
324.91 10.609 324.688 10.582 324.441 10.578 cv
324.262 10.582 324.109 10.602 323.98 10.633 cv
323.848 10.672 323.738 10.723 323.66 10.789 cv
323.574 10.859 323.512 10.937 323.473 11.027 cv
323.426 11.121 323.406 11.219 323.41 11.32 cv
323.406 11.48 323.457 11.617 323.559 11.723 cv
323.656 11.836 323.785 11.93 323.949 12.012 cv
324.109 12.098 324.293 12.176 324.5 12.246 cv
324.703 12.32 324.91 12.402 325.121 12.484 cv
325.328 12.574 325.535 12.672 325.746 12.785 cv
325.949 12.898 326.133 13.039 326.293 13.203 cv
326.453 13.371 326.582 13.57 326.684 13.801 cv
326.777 14.035 326.828 14.309 326.832 14.621 cv
cp
f
335.625 12.934 mo
335.621 13.234 335.594 13.445 335.539 13.562 cv
335.48 13.687 335.391 13.746 335.266 13.742 cv
332.023 13.742 li
331.895 13.746 331.801 13.684 331.746 13.559 cv
331.684 13.437 331.656 13.23 331.66 12.934 cv
331.656 12.645 331.684 12.437 331.746 12.316 cv
331.801 12.199 331.895 12.141 332.023 12.137 cv
335.266 12.137 li
335.328 12.141 335.379 12.152 335.426 12.176 cv
335.465 12.203 335.504 12.25 335.539 12.309 cv
335.566 12.375 335.59 12.457 335.605 12.559 cv
335.617 12.664 335.621 12.789 335.625 12.934 cv
cp
f
348.297 16.586 mo
348.297 16.648 348.285 16.695 348.266 16.73 cv
348.246 16.773 348.199 16.805 348.121 16.828 cv
348.043 16.852 347.926 16.867 347.777 16.883 cv
347.621 16.891 347.418 16.898 347.16 16.898 cv
346.941 16.898 346.766 16.891 346.637 16.883 cv
346.508 16.867 346.406 16.852 346.332 16.824 cv
346.254 16.797 346.199 16.762 346.172 16.715 cv
346.137 16.676 346.113 16.621 346.094 16.555 cv
345.188 14.305 li
345.078 14.051 344.973 13.824 344.871 13.625 cv
344.762 13.43 344.648 13.266 344.523 13.133 cv
344.395 13.004 344.246 12.902 344.082 12.832 cv
343.914 12.766 343.723 12.734 343.508 12.73 cv
342.867 12.73 li
342.867 16.57 li
342.863 16.625 342.848 16.672 342.816 16.711 cv
342.781 16.754 342.727 16.789 342.648 16.812 cv
342.57 16.84 342.465 16.859 342.336 16.875 cv
342.203 16.891 342.039 16.898 341.84 16.898 cv
341.641 16.898 341.473 16.891 341.344 16.875 cv
341.207 16.859 341.102 16.84 341.027 16.812 cv
340.945 16.789 340.891 16.754 340.863 16.711 cv
340.828 16.672 340.813 16.625 340.816 16.57 cv
340.816 7.414 li
340.813 7.18701 340.871 7.02301 340.992 6.91803 cv
341.105 6.82001 341.25 6.77002 341.426 6.76599 cv
344.035 6.76599 li
344.297 6.77002 344.516 6.77301 344.691 6.78101 cv
344.859 6.79303 345.016 6.80499 345.16 6.82001 cv
345.563 6.87903 345.926 6.97998 346.25 7.117 cv
346.574 7.26202 346.852 7.44501 347.078 7.66803 cv
347.305 7.89801 347.477 8.164 347.598 8.47302 cv
347.715 8.78101 347.773 9.13702 347.777 9.53497 cv
347.773 9.875 347.73 10.184 347.648 10.457 cv
347.559 10.738 347.434 10.984 347.27 11.203 cv
347.102 11.422 346.895 11.613 346.652 11.77 cv
346.406 11.934 346.129 12.062 345.82 12.16 cv
345.969 12.234 346.113 12.324 346.246 12.426 cv
346.379 12.535 346.5 12.66 346.617 12.805 cv
346.73 12.953 346.844 13.121 346.949 13.309 cv
347.051 13.5 347.152 13.715 347.254 13.953 cv
348.105 15.941 li
348.18 16.141 348.23 16.281 348.258 16.371 cv
348.281 16.465 348.297 16.539 348.297 16.586 cv
cp
345.656 9.74597 mo
345.652 9.414 345.578 9.133 345.43 8.90198 cv
345.277 8.67603 345.031 8.51599 344.691 8.41803 cv
344.586 8.39502 344.469 8.37097 344.336 8.35498 cv
344.203 8.34003 344.02 8.33197 343.785 8.33197 cv
342.867 8.33197 li
342.867 11.195 li
343.91 11.195 li
344.199 11.199 344.457 11.164 344.676 11.09 cv
344.895 11.023 345.074 10.922 345.219 10.793 cv
345.363 10.668 345.473 10.516 345.547 10.336 cv
345.617 10.16 345.652 9.96503 345.656 9.74597 cv
cp
f
355.883 12.91 mo
355.879 13.148 355.828 13.324 355.723 13.437 cv
355.613 13.555 355.465 13.613 355.285 13.609 cv
351.051 13.609 li
351.047 13.91 351.082 14.18 351.156 14.418 cv
351.223 14.66 351.336 14.863 351.492 15.031 cv
351.645 15.203 351.84 15.332 352.082 15.418 cv
352.32 15.508 352.609 15.551 352.953 15.551 cv
353.293 15.551 353.594 15.527 353.855 15.477 cv
354.113 15.43 354.34 15.375 354.531 15.312 cv
354.719 15.254 354.875 15.199 355.004 15.148 cv
355.125 15.102 355.227 15.078 355.309 15.074 cv
355.352 15.078 355.391 15.086 355.426 15.102 cv
355.453 15.121 355.48 15.152 355.5 15.199 cv
355.52 15.246 355.531 15.312 355.543 15.398 cv
355.547 15.484 355.551 15.594 355.555 15.723 cv
355.551 15.84 355.551 15.937 355.547 16.016 cv
355.539 16.098 355.531 16.164 355.523 16.219 cv
355.512 16.277 355.496 16.328 355.477 16.363 cv
355.457 16.406 355.43 16.441 355.398 16.477 cv
355.363 16.516 355.27 16.566 355.121 16.625 cv
354.965 16.691 354.773 16.754 354.543 16.809 cv
354.305 16.871 354.035 16.918 353.738 16.965 cv
353.434 17.004 353.113 17.027 352.773 17.031 cv
352.152 17.027 351.609 16.953 351.148 16.797 cv
350.68 16.645 350.293 16.406 349.984 16.09 cv
349.668 15.773 349.434 15.375 349.285 14.891 cv
349.129 14.41 349.055 13.844 349.059 13.187 cv
349.055 12.574 349.133 12.016 349.297 11.52 cv
349.453 11.023 349.688 10.605 350 10.258 cv
350.305 9.914 350.68 9.64801 351.117 9.46503 cv
351.555 9.28497 352.047 9.19501 352.602 9.19098 cv
353.18 9.19501 353.68 9.28101 354.094 9.44897 cv
354.508 9.625 354.844 9.86298 355.109 10.164 cv
355.371 10.469 355.566 10.828 355.695 11.242 cv
355.816 11.66 355.879 12.109 355.883 12.598 cv
cp
353.98 12.348 mo
353.992 11.797 353.883 11.363 353.648 11.051 cv
353.414 10.738 353.047 10.582 352.555 10.578 cv
352.305 10.582 352.09 10.629 351.906 10.719 cv
351.719 10.816 351.566 10.941 351.445 11.098 cv
351.32 11.258 351.227 11.445 351.164 11.66 cv
351.098 11.875 351.059 12.105 351.051 12.348 cv
cp
f
368.551 16.586 mo
368.547 16.641 368.531 16.684 368.504 16.723 cv
368.469 16.762 368.418 16.797 368.348 16.82 cv
368.273 16.848 368.172 16.863 368.051 16.879 cv
367.926 16.891 367.77 16.898 367.578 16.898 cv
367.379 16.898 367.219 16.891 367.094 16.879 cv
366.969 16.863 366.867 16.848 366.793 16.82 cv
366.715 16.797 366.664 16.762 366.637 16.723 cv
366.609 16.684 366.594 16.641 366.598 16.586 cv
366.598 12.465 li
366.594 12.234 366.574 12.02 366.531 11.824 cv
366.484 11.633 366.414 11.469 366.328 11.332 cv
366.234 11.195 366.121 11.09 365.984 11.012 cv
365.844 10.937 365.68 10.898 365.488 10.898 cv
365.254 10.898 365.016 10.992 364.777 11.172 cv
364.539 11.355 364.281 11.617 364 11.965 cv
364 16.586 li
364 16.641 363.984 16.684 363.953 16.723 cv
363.922 16.762 363.867 16.797 363.793 16.82 cv
363.715 16.848 363.613 16.863 363.492 16.879 cv
363.367 16.891 363.215 16.898 363.027 16.898 cv
362.832 16.898 362.672 16.891 362.551 16.879 cv
362.422 16.863 362.32 16.848 362.25 16.82 cv
362.172 16.797 362.121 16.762 362.09 16.723 cv
362.059 16.684 362.043 16.641 362.043 16.586 cv
362.043 12.465 li
362.043 12.234 362.02 12.02 361.977 11.824 cv
361.934 11.633 361.867 11.469 361.781 11.332 cv
361.688 11.195 361.574 11.09 361.438 11.012 cv
361.293 10.937 361.129 10.898 360.945 10.898 cv
360.703 10.898 360.465 10.992 360.227 11.172 cv
359.988 11.355 359.73 11.617 359.457 11.965 cv
359.457 16.586 li
359.453 16.641 359.438 16.684 359.41 16.723 cv
359.375 16.762 359.32 16.797 359.25 16.82 cv
359.172 16.848 359.074 16.863 358.949 16.879 cv
358.824 16.891 358.664 16.898 358.477 16.898 cv
358.281 16.898 358.125 16.891 358 16.879 cv
357.875 16.863 357.773 16.848 357.699 16.82 cv
357.621 16.797 357.566 16.762 357.539 16.723 cv
357.504 16.684 357.488 16.641 357.492 16.586 cv
357.492 9.63702 li
357.488 9.59003 357.504 9.54303 357.531 9.5 cv
357.555 9.46503 357.602 9.43402 357.672 9.40198 cv
357.738 9.37903 357.824 9.35901 357.934 9.34399 cv
358.039 9.336 358.172 9.328 358.336 9.32397 cv
358.5 9.328 358.637 9.336 358.746 9.34399 cv
358.852 9.35901 358.938 9.37903 359 9.40198 cv
359.059 9.43402 359.102 9.46503 359.129 9.5 cv
359.152 9.54303 359.164 9.59003 359.168 9.63702 cv
359.168 10.437 li
359.551 10.027 359.934 9.71503 360.316 9.50403 cv
360.695 9.297 361.098 9.19501 361.516 9.19098 cv
361.801 9.19501 362.055 9.22302 362.285 9.28101 cv
362.512 9.34399 362.719 9.42999 362.898 9.539 cv
363.078 9.65198 363.23 9.789 363.359 9.94098 cv
363.488 10.098 363.598 10.27 363.688 10.461 cv
363.895 10.238 364.098 10.047 364.301 9.88702 cv
364.496 9.72699 364.695 9.59399 364.891 9.492 cv
365.086 9.39099 365.281 9.31598 365.477 9.26599 cv
365.672 9.21899 365.871 9.19501 366.074 9.19098 cv
366.535 9.19501 366.922 9.27301 367.242 9.42603 cv
367.555 9.586 367.813 9.797 368.008 10.062 cv
368.203 10.332 368.34 10.645 368.426 11 cv
368.504 11.359 368.547 11.738 368.551 12.137 cv
cp
f
377.496 13.039 mo
377.492 13.637 377.414 14.18 377.262 14.664 cv
377.102 15.156 376.867 15.574 376.551 15.926 cv
376.234 16.277 375.836 16.551 375.359 16.742 cv
374.879 16.934 374.32 17.027 373.684 17.031 cv
373.063 17.027 372.523 16.945 372.07 16.773 cv
371.609 16.605 371.23 16.355 370.934 16.027 cv
370.629 15.703 370.406 15.301 370.262 14.82 cv
370.117 14.344 370.047 13.797 370.047 13.18 cv
370.047 12.59 370.125 12.051 370.281 11.559 cv
370.438 11.07 370.676 10.648 370.996 10.297 cv
371.313 9.94897 371.707 9.67603 372.184 9.47998 cv
372.656 9.289 373.215 9.19501 373.855 9.19098 cv
374.48 9.19501 375.02 9.27698 375.477 9.44501 cv
375.934 9.617 376.313 9.867 376.609 10.191 cv
376.906 10.52 377.129 10.922 377.277 11.398 cv
377.422 11.879 377.492 12.426 377.496 13.039 cv
cp
375.477 13.117 mo
375.473 12.781 375.445 12.465 375.395 12.172 cv
375.336 11.887 375.242 11.637 375.117 11.422 cv
374.984 11.211 374.813 11.043 374.602 10.922 cv
374.383 10.805 374.113 10.746 373.785 10.742 cv
373.496 10.746 373.242 10.801 373.023 10.902 cv
372.805 11.012 372.625 11.168 372.484 11.371 cv
372.344 11.578 372.238 11.824 372.168 12.109 cv
372.098 12.402 372.063 12.73 372.063 13.094 cv
372.063 13.441 372.09 13.758 372.148 14.043 cv
372.203 14.336 372.297 14.586 372.426 14.797 cv
372.551 15.012 372.723 15.176 372.945 15.289 cv
373.16 15.41 373.43 15.469 373.754 15.465 cv
374.047 15.469 374.305 15.414 374.527 15.305 cv
374.742 15.199 374.922 15.047 375.063 14.84 cv
375.203 14.641 375.305 14.395 375.375 14.105 cv
375.438 13.82 375.473 13.492 375.477 13.117 cv
cp
f
383.203 15.902 mo
383.203 16.129 383.188 16.305 383.16 16.426 cv
383.129 16.551 383.09 16.637 383.047 16.684 cv
382.996 16.734 382.93 16.777 382.84 16.816 cv
382.746 16.855 382.637 16.887 382.52 16.918 cv
382.395 16.941 382.262 16.965 382.121 16.984 cv
381.977 16.996 381.836 17.004 381.691 17.008 cv
381.301 17.004 380.961 16.953 380.676 16.859 cv
380.391 16.758 380.156 16.609 379.969 16.402 cv
379.781 16.199 379.641 15.941 379.555 15.629 cv
379.461 15.32 379.418 14.949 379.422 14.52 cv
379.422 10.961 li
378.59 10.961 li
378.488 10.965 378.414 10.902 378.363 10.777 cv
378.309 10.656 378.281 10.453 378.285 10.164 cv
378.281 10.016 378.289 9.88702 378.305 9.78497 cv
378.316 9.68402 378.336 9.60199 378.363 9.539 cv
378.387 9.47998 378.418 9.43701 378.461 9.40997 cv
378.496 9.38702 378.543 9.375 378.598 9.37097 cv
379.422 9.37097 li
379.422 7.82001 li
379.418 7.77301 379.434 7.72699 379.465 7.67999 cv
379.492 7.64099 379.543 7.60498 379.621 7.57397 cv
379.695 7.55103 379.797 7.52698 379.926 7.51202 cv
380.051 7.5 380.207 7.49597 380.398 7.492 cv
380.586 7.49597 380.746 7.5 380.875 7.51202 cv
381 7.52698 381.102 7.55103 381.176 7.57397 cv
381.246 7.60498 381.297 7.64099 381.332 7.67999 cv
381.359 7.72699 381.375 7.77301 381.379 7.82001 cv
381.379 9.37097 li
382.891 9.37097 li
382.941 9.375 382.988 9.38702 383.027 9.40997 cv
383.066 9.43701 383.098 9.47998 383.125 9.539 cv
383.148 9.60199 383.168 9.68402 383.184 9.78497 cv
383.195 9.88702 383.203 10.016 383.203 10.164 cv
383.203 10.453 383.176 10.656 383.125 10.777 cv
383.07 10.902 382.996 10.965 382.898 10.961 cv
381.379 10.961 li
381.379 14.227 li
381.375 14.605 381.434 14.891 381.559 15.078 cv
381.676 15.27 381.891 15.363 382.195 15.363 cv
382.297 15.363 382.391 15.355 382.477 15.336 cv
382.559 15.32 382.633 15.301 382.699 15.273 cv
382.762 15.254 382.816 15.23 382.863 15.211 cv
382.906 15.195 382.945 15.187 382.984 15.184 cv
383.012 15.187 383.043 15.195 383.074 15.211 cv
383.102 15.23 383.121 15.27 383.141 15.32 cv
383.152 15.379 383.168 15.453 383.184 15.543 cv
383.195 15.641 383.203 15.758 383.203 15.902 cv
cp
f
390.789 12.91 mo
390.785 13.148 390.734 13.324 390.629 13.437 cv
390.52 13.555 390.371 13.613 390.191 13.609 cv
385.957 13.609 li
385.953 13.91 385.988 14.18 386.063 14.418 cv
386.129 14.66 386.242 14.863 386.398 15.031 cv
386.551 15.203 386.746 15.332 386.988 15.418 cv
387.227 15.508 387.516 15.551 387.859 15.551 cv
388.199 15.551 388.5 15.527 388.762 15.477 cv
389.02 15.43 389.246 15.375 389.438 15.312 cv
389.625 15.254 389.781 15.199 389.91 15.148 cv
390.031 15.102 390.133 15.078 390.215 15.074 cv
390.258 15.078 390.297 15.086 390.332 15.102 cv
390.359 15.121 390.387 15.152 390.406 15.199 cv
390.426 15.246 390.438 15.312 390.449 15.398 cv
390.453 15.484 390.457 15.594 390.461 15.723 cv
390.457 15.84 390.457 15.937 390.453 16.016 cv
390.445 16.098 390.438 16.164 390.43 16.219 cv
390.418 16.277 390.402 16.328 390.383 16.363 cv
390.363 16.406 390.336 16.441 390.305 16.477 cv
390.27 16.516 390.176 16.566 390.027 16.625 cv
389.871 16.691 389.68 16.754 389.449 16.809 cv
389.211 16.871 388.941 16.918 388.645 16.965 cv
388.34 17.004 388.02 17.027 387.68 17.031 cv
387.059 17.027 386.516 16.953 386.055 16.797 cv
385.586 16.645 385.199 16.406 384.891 16.09 cv
384.574 15.773 384.34 15.375 384.191 14.891 cv
384.035 14.41 383.961 13.844 383.965 13.187 cv
383.961 12.574 384.039 12.016 384.203 11.52 cv
384.359 11.023 384.594 10.605 384.906 10.258 cv
385.211 9.914 385.586 9.64801 386.023 9.46503 cv
386.461 9.28497 386.953 9.19501 387.508 9.19098 cv
388.086 9.19501 388.586 9.28101 389 9.44897 cv
389.414 9.625 389.75 9.86298 390.016 10.164 cv
390.277 10.469 390.473 10.828 390.602 11.242 cv
390.723 11.66 390.785 12.109 390.789 12.598 cv
cp
388.887 12.348 mo
388.898 11.797 388.789 11.363 388.555 11.051 cv
388.32 10.738 387.953 10.582 387.461 10.578 cv
387.211 10.582 386.996 10.629 386.813 10.719 cv
386.625 10.816 386.473 10.941 386.352 11.098 cv
386.227 11.258 386.133 11.445 386.07 11.66 cv
386.004 11.875 385.965 12.105 385.957 12.348 cv
cp
f
407.984 16.57 mo
407.98 16.625 407.969 16.672 407.941 16.711 cv
407.91 16.754 407.855 16.789 407.785 16.812 cv
407.707 16.84 407.609 16.859 407.484 16.875 cv
407.359 16.891 407.199 16.898 407.008 16.898 cv
406.82 16.898 406.664 16.891 406.543 16.875 cv
406.414 16.859 406.316 16.84 406.246 16.812 cv
406.172 16.789 406.121 16.754 406.09 16.711 cv
406.059 16.672 406.043 16.625 406.043 16.57 cv
406.043 8.36298 li
406.027 8.36298 li
403.105 16.562 li
403.082 16.633 403.047 16.687 403.004 16.73 cv
402.953 16.777 402.891 16.812 402.813 16.836 cv
402.73 16.863 402.629 16.879 402.504 16.887 cv
402.379 16.895 402.227 16.898 402.055 16.898 cv
401.875 16.898 401.727 16.891 401.602 16.879 cv
401.477 16.863 401.371 16.844 401.293 16.816 cv
401.207 16.789 401.145 16.754 401.102 16.711 cv
401.051 16.672 401.02 16.625 401.008 16.562 cv
398.188 8.36298 li
398.172 8.36298 li
398.172 16.57 li
398.168 16.625 398.152 16.672 398.129 16.711 cv
398.098 16.754 398.047 16.789 397.969 16.812 cv
397.891 16.84 397.789 16.859 397.668 16.875 cv
397.543 16.891 397.387 16.898 397.199 16.898 cv
397.008 16.898 396.852 16.891 396.73 16.875 cv
396.602 16.859 396.5 16.84 396.43 16.812 cv
396.352 16.789 396.301 16.754 396.273 16.711 cv
396.242 16.672 396.227 16.625 396.23 16.57 cv
396.23 7.586 li
396.227 7.32397 396.297 7.12097 396.441 6.97699 cv
396.578 6.84003 396.766 6.77002 397.004 6.76599 cv
398.344 6.76599 li
398.582 6.77002 398.785 6.789 398.957 6.82397 cv
399.125 6.867 399.273 6.92999 399.402 7.02002 cv
399.523 7.11298 399.629 7.23401 399.715 7.37903 cv
399.797 7.53101 399.867 7.71503 399.934 7.92999 cv
402.117 13.937 li
402.148 13.937 li
404.406 7.94501 li
404.473 7.72699 404.547 7.54303 404.629 7.39099 cv
404.707 7.242 404.801 7.12097 404.91 7.02301 cv
405.016 6.93402 405.141 6.867 405.285 6.82397 cv
405.43 6.789 405.598 6.77002 405.793 6.76599 cv
407.172 6.76599 li
407.309 6.77002 407.43 6.78497 407.535 6.82001 cv
407.633 6.85901 407.715 6.914 407.785 6.97998 cv
407.848 7.05499 407.898 7.14099 407.934 7.23798 cv
407.965 7.34399 407.98 7.461 407.984 7.586 cv
cp
f
417.094 13.039 mo
417.09 13.637 417.012 14.18 416.859 14.664 cv
416.699 15.156 416.465 15.574 416.148 15.926 cv
415.832 16.277 415.434 16.551 414.957 16.742 cv
414.477 16.934 413.918 17.027 413.281 17.031 cv
412.66 17.027 412.121 16.945 411.668 16.773 cv
411.207 16.605 410.828 16.355 410.531 16.027 cv
410.227 15.703 410.004 15.301 409.859 14.82 cv
409.715 14.344 409.645 13.797 409.645 13.18 cv
409.645 12.59 409.723 12.051 409.879 11.559 cv
410.035 11.07 410.273 10.648 410.594 10.297 cv
410.91 9.94897 411.305 9.67603 411.781 9.47998 cv
412.254 9.289 412.813 9.19501 413.453 9.19098 cv
414.078 9.19501 414.617 9.27698 415.074 9.44501 cv
415.531 9.617 415.91 9.867 416.207 10.191 cv
416.504 10.52 416.727 10.922 416.875 11.398 cv
417.02 11.879 417.09 12.426 417.094 13.039 cv
cp
415.074 13.117 mo
415.07 12.781 415.043 12.465 414.992 12.172 cv
414.934 11.887 414.84 11.637 414.715 11.422 cv
414.582 11.211 414.41 11.043 414.199 10.922 cv
413.98 10.805 413.711 10.746 413.383 10.742 cv
413.094 10.746 412.84 10.801 412.621 10.902 cv
412.402 11.012 412.223 11.168 412.082 11.371 cv
411.941 11.578 411.836 11.824 411.766 12.109 cv
411.695 12.402 411.66 12.73 411.66 13.094 cv
411.66 13.441 411.688 13.758 411.746 14.043 cv
411.801 14.336 411.895 14.586 412.023 14.797 cv
412.148 15.012 412.32 15.176 412.543 15.289 cv
412.758 15.41 413.027 15.469 413.352 15.465 cv
413.645 15.469 413.902 15.414 414.125 15.305 cv
414.34 15.199 414.52 15.047 414.66 14.84 cv
414.801 14.641 414.902 14.395 414.973 14.105 cv
415.035 13.82 415.07 13.492 415.074 13.117 cv
cp
f
425.242 16.586 mo
425.238 16.648 425.227 16.695 425.203 16.73 cv
425.176 16.773 425.129 16.805 425.07 16.828 cv
425.004 16.852 424.922 16.867 424.816 16.883 cv
424.711 16.891 424.578 16.898 424.426 16.898 cv
424.254 16.898 424.121 16.891 424.02 16.883 cv
423.914 16.867 423.828 16.852 423.766 16.828 cv
423.699 16.805 423.652 16.773 423.625 16.73 cv
423.594 16.695 423.578 16.648 423.582 16.586 cv
423.582 15.816 li
423.223 16.203 422.848 16.5 422.457 16.711 cv
422.059 16.922 421.625 17.027 421.152 17.031 cv
420.617 17.027 420.168 16.926 419.805 16.723 cv
419.438 16.52 419.141 16.246 418.91 15.895 cv
418.676 15.551 418.508 15.145 418.406 14.676 cv
418.305 14.215 418.254 13.723 418.254 13.203 cv
418.254 12.59 418.316 12.035 418.449 11.539 cv
418.578 11.047 418.773 10.625 419.031 10.277 cv
419.285 9.92999 419.602 9.664 419.98 9.47302 cv
420.359 9.289 420.797 9.19501 421.293 9.19098 cv
421.68 9.19501 422.031 9.27301 422.352 9.42999 cv
422.664 9.59003 422.98 9.82001 423.293 10.125 cv
423.293 6.36298 li
423.293 6.31201 423.305 6.26599 423.336 6.22302 cv
423.359 6.18402 423.414 6.14801 423.492 6.117 cv
423.566 6.09003 423.664 6.07001 423.793 6.05103 cv
423.914 6.039 424.074 6.03101 424.27 6.02698 cv
424.461 6.03101 424.617 6.039 424.742 6.05103 cv
424.863 6.07001 424.965 6.09003 425.039 6.117 cv
425.109 6.14801 425.16 6.18402 425.195 6.22302 cv
425.223 6.26599 425.238 6.31201 425.242 6.36298 cv
cp
423.293 11.941 mo
423.012 11.59 422.742 11.32 422.488 11.133 cv
422.227 10.945 421.957 10.852 421.68 10.852 cv
421.426 10.852 421.207 10.918 421.023 11.043 cv
420.836 11.176 420.688 11.344 420.578 11.555 cv
420.465 11.766 420.383 12.004 420.328 12.266 cv
420.273 12.531 420.246 12.801 420.246 13.07 cv
420.246 13.367 420.27 13.648 420.316 13.922 cv
420.363 14.199 420.438 14.445 420.547 14.66 cv
420.648 14.875 420.793 15.047 420.973 15.176 cv
421.148 15.309 421.371 15.375 421.641 15.371 cv
421.773 15.375 421.902 15.355 422.035 15.312 cv
422.16 15.277 422.293 15.215 422.426 15.121 cv
422.559 15.035 422.695 14.918 422.836 14.773 cv
422.977 14.633 423.129 14.457 423.293 14.25 cv
cp
f
433.641 12.91 mo
433.637 13.148 433.586 13.324 433.48 13.437 cv
433.371 13.555 433.223 13.613 433.043 13.609 cv
428.809 13.609 li
428.805 13.91 428.84 14.18 428.914 14.418 cv
428.98 14.66 429.094 14.863 429.25 15.031 cv
429.402 15.203 429.598 15.332 429.84 15.418 cv
430.078 15.508 430.367 15.551 430.711 15.551 cv
431.051 15.551 431.352 15.527 431.613 15.477 cv
431.871 15.43 432.098 15.375 432.289 15.312 cv
432.477 15.254 432.633 15.199 432.762 15.148 cv
432.883 15.102 432.984 15.078 433.066 15.074 cv
433.109 15.078 433.148 15.086 433.184 15.102 cv
433.211 15.121 433.238 15.152 433.258 15.199 cv
433.277 15.246 433.289 15.312 433.301 15.398 cv
433.305 15.484 433.309 15.594 433.313 15.723 cv
433.309 15.84 433.309 15.937 433.305 16.016 cv
433.297 16.098 433.289 16.164 433.281 16.219 cv
433.27 16.277 433.254 16.328 433.234 16.363 cv
433.215 16.406 433.188 16.441 433.156 16.477 cv
433.121 16.516 433.027 16.566 432.879 16.625 cv
432.723 16.691 432.531 16.754 432.301 16.809 cv
432.063 16.871 431.793 16.918 431.496 16.965 cv
431.191 17.004 430.871 17.027 430.531 17.031 cv
429.91 17.027 429.367 16.953 428.906 16.797 cv
428.438 16.645 428.051 16.406 427.742 16.09 cv
427.426 15.773 427.191 15.375 427.043 14.891 cv
426.887 14.41 426.813 13.844 426.816 13.187 cv
426.813 12.574 426.891 12.016 427.055 11.52 cv
427.211 11.023 427.445 10.605 427.758 10.258 cv
428.063 9.914 428.438 9.64801 428.875 9.46503 cv
429.313 9.28497 429.805 9.19501 430.359 9.19098 cv
430.938 9.19501 431.438 9.28101 431.852 9.44897 cv
432.266 9.625 432.602 9.86298 432.867 10.164 cv
433.129 10.469 433.324 10.828 433.453 11.242 cv
433.574 11.66 433.637 12.109 433.641 12.598 cv
cp
431.738 12.348 mo
431.75 11.797 431.641 11.363 431.406 11.051 cv
431.172 10.738 430.805 10.582 430.313 10.578 cv
430.063 10.582 429.848 10.629 429.664 10.719 cv
429.477 10.816 429.324 10.941 429.203 11.098 cv
429.078 11.258 428.984 11.445 428.922 11.66 cv
428.855 11.875 428.816 12.105 428.809 12.348 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
