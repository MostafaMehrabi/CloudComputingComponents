%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FirstScenario-OverallRuntime-RemoteMode.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:52:50 PM
%%BoundingBox: 0 0 645 538
%%HiResBoundingBox: 0 0 644.2800 537.6000
%%CropBox: 0 0 644.2800 537.6000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -537.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 537.6 li
644.28 537.6 li
644.28 0 li
cp
clp
0 0 mo
644.281 0 li
644.281 537.602 li
0 537.602 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
57.121 487.922 mo
632.16 487.922 li
57.121 477.359 mo
632.16 477.359 li
57.121 466.922 mo
632.16 466.922 li
57.121 456.359 mo
632.16 456.359 li
57.121 435.238 mo
632.16 435.238 li
57.121 424.801 mo
632.16 424.801 li
57.121 414.238 mo
632.16 414.238 li
57.121 403.68 mo
632.16 403.68 li
57.121 382.559 mo
632.16 382.559 li
57.121 372.121 mo
632.16 372.121 li
57.121 361.559 mo
632.16 361.559 li
57.121 351 mo
632.16 351 li
57.121 330 mo
632.16 330 li
57.121 319.441 mo
632.16 319.441 li
57.121 308.879 mo
632.16 308.879 li
57.121 298.32 mo
632.16 298.32 li
57.121 277.32 mo
632.16 277.32 li
57.121 266.762 mo
632.16 266.762 li
57.121 256.199 mo
632.16 256.199 li
57.121 245.641 mo
632.16 245.641 li
57.121 224.641 mo
632.16 224.641 li
57.121 214.078 mo
632.16 214.078 li
57.121 203.52 mo
632.16 203.52 li
57.121 192.961 mo
632.16 192.961 li
57.121 171.961 mo
632.16 171.961 li
57.121 161.398 mo
632.16 161.398 li
57.121 150.84 mo
632.16 150.84 li
57.121 140.398 mo
632.16 140.398 li
57.121 119.281 mo
632.16 119.281 li
57.121 108.719 mo
632.16 108.719 li
57.121 98.16 mo
632.16 98.16 li
57.121 87.719 mo
632.16 87.719 li
57.121 66.602 mo
632.16 66.602 li
57.121 56.039 mo
632.16 56.039 li
57.121 45.602 mo
632.16 45.602 li
57.121 35.039 mo
632.16 35.039 li
.140414 .108034 .108034 0 cmyk
@
57.121 445.801 mo
632.16 445.801 li
57.121 393.121 mo
632.16 393.121 li
57.121 340.441 mo
632.16 340.441 li
57.121 287.762 mo
632.16 287.762 li
57.121 235.199 mo
632.16 235.199 li
57.121 182.52 mo
632.16 182.52 li
57.121 129.84 mo
632.16 129.84 li
57.121 77.16 mo
632.16 77.16 li
57.121 24.48 mo
632.16 24.48 li
.328344 .284215 .278569 .000915541 cmyk
@
93.121 24.48 mo
93.121 498.48 li
165 24.48 mo
165 498.48 li
236.879 24.48 mo
236.879 498.48 li
308.762 24.48 mo
308.762 498.48 li
380.641 24.48 mo
380.641 498.48 li
452.52 24.48 mo
452.52 498.48 li
524.398 24.48 mo
524.398 498.48 li
596.281 24.48 mo
596.281 498.48 li
.178592 .148898 .143923 0 cmyk
@
57.121 24.48 mo
57.121 498.48 li
129 24.48 mo
129 498.48 li
200.879 24.48 mo
200.879 498.48 li
272.762 24.48 mo
272.762 498.48 li
344.641 24.48 mo
344.641 498.48 li
416.52 24.48 mo
416.52 498.48 li
488.398 24.48 mo
488.398 498.48 li
560.281 24.48 mo
560.281 498.48 li
632.16 24.48 mo
632.16 498.48 li
.328344 .284215 .278569 .000915541 cmyk
@
28.078 490.441 mo
45.961 490.441 li
45.961 505.199 li
28.078 505.199 li
cp
0 0 0 0 cmyk
ef
28.078 437.879 mo
45.961 437.879 li
45.961 452.52 li
28.078 452.52 li
cp
ef
28.078 385.199 mo
45.961 385.199 li
45.961 399.84 li
28.078 399.84 li
cp
ef
28.078 332.52 mo
45.961 332.52 li
45.961 347.161 li
28.078 347.161 li
cp
ef
21.961 279.84 mo
45.961 279.84 li
45.961 294.481 li
21.961 294.481 li
cp
ef
21.961 227.16 mo
45.961 227.16 li
45.961 241.801 li
21.961 241.801 li
cp
ef
21.961 174.48 mo
45.961 174.48 li
45.961 189.121 li
21.961 189.121 li
cp
ef
21.961 121.801 mo
45.961 121.801 li
45.961 136.442 li
21.961 136.442 li
cp
ef
21.961 69.121 mo
45.961 69.121 li
45.961 83.762 li
21.961 83.762 li
cp
ef
21.961 16.441 mo
45.961 16.441 li
45.961 31.199 li
21.961 31.199 li
cp
ef
.96 lw
57.121 498.48 mo
632.16 498.48 li
.367803 .29575 .300999 .00198367 cmyk
@
57.121 498.48 mo
57.121 502.32 li
129 498.48 mo
129 502.32 li
200.879 498.48 mo
200.879 502.32 li
272.762 498.48 mo
272.762 502.32 li
344.641 498.48 mo
344.641 502.32 li
416.52 498.48 mo
416.52 502.32 li
488.398 498.48 mo
488.398 502.32 li
560.281 498.48 mo
560.281 502.32 li
632.16 498.48 mo
632.16 502.32 li
@
gsave
57.121 24.48 mo
632.762 24.48 li
632.762 499.078 li
57.121 499.078 li
cp
clp
1 lc
57.121 401.398 mo
129 405.121 li
200.879 406.68 li
272.762 418.441 li
344.641 408.961 li
416.52 408.359 li
488.398 416.762 li
560.281 416.16 li
632.16 412.559 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
52.031 396.191 mo
61.988 396.191 li
61.988 406.148 li
52.031 406.148 li
cp
.62768 .285466 0 0 cmyk
@
123.91 400.031 mo
133.871 400.031 li
133.871 409.988 li
123.91 409.988 li
cp
@
195.789 401.469 mo
205.75 401.469 li
205.75 411.43 li
195.789 411.43 li
cp
@
267.672 413.23 mo
277.629 413.23 li
277.629 423.191 li
267.672 423.191 li
cp
@
339.551 403.75 mo
349.512 403.75 li
349.512 413.711 li
339.551 413.711 li
cp
@
411.43 403.148 mo
421.391 403.148 li
421.391 413.109 li
411.43 413.109 li
cp
@
483.309 411.551 mo
493.27 411.551 li
493.27 421.512 li
483.309 421.512 li
cp
@
555.191 410.949 mo
565.148 410.949 li
565.148 420.91 li
555.191 420.91 li
cp
@
627.07 407.352 mo
637.031 407.352 li
637.031 417.309 li
627.07 417.309 li
cp
@
gsave
57.121 24.48 mo
632.762 24.48 li
632.762 499.078 li
57.121 499.078 li
cp
clp
.96 lw
1 lc
57.121 395.281 mo
129 412.922 li
200.879 416.16 li
272.762 426.602 li
344.641 412.559 li
416.52 424.078 li
488.398 415.68 li
560.281 429.961 li
632.16 423.121 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
52.031 390.07 mo
61.988 390.07 li
61.988 400.031 li
52.031 400.031 li
cp
.0319219 .621851 .911223 .000427253 cmyk
@
123.91 407.828 mo
133.871 407.828 li
133.871 417.789 li
123.91 417.789 li
cp
@
195.789 410.949 mo
205.75 410.949 li
205.75 420.91 li
195.789 420.91 li
cp
@
267.672 421.512 mo
277.629 421.512 li
277.629 431.469 li
267.672 431.469 li
cp
@
339.551 407.352 mo
349.512 407.352 li
349.512 417.309 li
339.551 417.309 li
cp
@
411.43 418.988 mo
421.391 418.988 li
421.391 428.949 li
411.43 428.949 li
cp
@
483.309 410.59 mo
493.27 410.59 li
493.27 420.551 li
483.309 420.551 li
cp
@
555.191 424.871 mo
565.148 424.871 li
565.148 434.828 li
555.191 434.828 li
cp
@
627.07 417.91 mo
637.031 417.91 li
637.031 427.871 li
627.07 427.871 li
cp
@
gsave
57.121 24.48 mo
632.762 24.48 li
632.762 499.078 li
57.121 499.078 li
cp
clp
.96 lw
1 lc
57.121 386.879 mo
129 417.359 li
200.879 419.879 li
272.762 431.52 li
344.641 429.961 li
416.52 419.52 li
488.398 420.961 li
560.281 428.281 li
632.16 421.559 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
52.031 381.672 mo
61.988 381.672 li
61.988 391.629 li
52.031 391.629 li
cp
.619135 .109529 .981689 .00570687 cmyk
@
123.91 412.27 mo
133.871 412.27 li
133.871 422.231 li
123.91 422.231 li
cp
@
195.789 414.789 mo
205.75 414.789 li
205.75 424.75 li
195.789 424.75 li
cp
@
267.672 426.309 mo
277.629 426.309 li
277.629 436.27 li
267.672 436.27 li
cp
@
339.551 424.871 mo
349.512 424.871 li
349.512 434.828 li
339.551 434.828 li
cp
@
411.43 414.309 mo
421.391 414.309 li
421.391 424.27 li
411.43 424.27 li
cp
@
483.309 415.871 mo
493.27 415.871 li
493.27 425.828 li
483.309 425.828 li
cp
@
555.191 423.191 mo
565.148 423.191 li
565.148 433.148 li
555.191 433.148 li
cp
@
627.07 416.469 mo
637.031 416.469 li
637.031 426.43 li
627.07 426.43 li
cp
@
gsave
57.121 24.48 mo
632.762 24.48 li
632.762 499.078 li
57.121 499.078 li
cp
clp
.96 lw
1 lc
57.121 391.922 mo
129 410.398 li
200.879 420.48 li
272.762 417.121 li
344.641 418.441 li
416.52 428.762 li
488.398 412.559 li
560.281 419.281 li
632.16 430.922 li
0 .990631 1 .000396735 cmyk
@
grestore
52.031 386.711 mo
61.988 386.711 li
61.988 396.672 li
52.031 396.672 li
cp
0 .990631 1 .000396735 cmyk
@
123.91 405.309 mo
133.871 405.309 li
133.871 415.27 li
123.91 415.27 li
cp
@
195.789 415.391 mo
205.75 415.391 li
205.75 425.352 li
195.789 425.352 li
cp
@
267.672 412.031 mo
277.629 412.031 li
277.629 421.988 li
267.672 421.988 li
cp
@
339.551 413.23 mo
349.512 413.23 li
349.512 423.191 li
339.551 423.191 li
cp
@
411.43 423.551 mo
421.391 423.551 li
421.391 433.512 li
411.43 433.512 li
cp
@
483.309 407.352 mo
493.27 407.352 li
493.27 417.309 li
483.309 417.309 li
cp
@
555.191 414.07 mo
565.148 414.07 li
565.148 424.031 li
555.191 424.031 li
cp
@
627.07 425.711 mo
637.031 425.711 li
637.031 435.672 li
627.07 435.672 li
cp
@
gsave
57.121 24.48 mo
632.762 24.48 li
632.762 499.078 li
57.121 499.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.121 399.48 mo
129 411 li
200.879 416.762 li
272.762 429 li
344.641 420.359 li
416.52 417.121 li
488.398 422.398 li
560.281 422.039 li
632.16 407.641 li
.62768 .285466 0 0 cmyk
@
grestore
52.031 394.27 mo
61.988 394.27 li
61.988 404.231 li
52.031 404.231 li
cp
.62768 .285466 0 0 cmyk
@
123.91 405.91 mo
133.871 405.91 li
133.871 415.871 li
123.91 415.871 li
cp
@
195.789 411.551 mo
205.75 411.551 li
205.75 421.512 li
195.789 421.512 li
cp
@
267.672 423.789 mo
277.629 423.789 li
277.629 433.75 li
267.672 433.75 li
cp
@
339.551 415.148 mo
349.512 415.148 li
349.512 425.109 li
339.551 425.109 li
cp
@
411.43 412.031 mo
421.391 412.031 li
421.391 421.988 li
411.43 421.988 li
cp
@
483.309 417.309 mo
493.27 417.309 li
493.27 427.27 li
483.309 427.27 li
cp
@
555.191 416.828 mo
565.148 416.828 li
565.148 426.789 li
555.191 426.789 li
cp
@
627.07 402.551 mo
637.031 402.551 li
637.031 412.512 li
627.07 412.512 li
cp
@
gsave
57.121 24.48 mo
632.762 24.48 li
632.762 499.078 li
57.121 499.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.121 400.559 mo
129 419.281 li
200.879 425.16 li
272.762 429.359 li
344.641 416.281 li
416.52 425.16 li
488.398 416.16 li
560.281 423.48 li
632.16 415.078 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
52.512 395.828 mo
61.512 395.828 li
61.512 404.828 li
52.512 404.828 li
cp
.0319219 .621851 .911223 .000427253 cmyk
@
124.391 414.551 mo
133.391 414.551 li
133.391 423.551 li
124.391 423.551 li
cp
@
196.27 420.551 mo
205.27 420.551 li
205.27 429.551 li
196.27 429.551 li
cp
@
268.148 424.75 mo
277.148 424.75 li
277.148 433.75 li
268.148 433.75 li
cp
@
340.031 411.672 mo
349.031 411.672 li
349.031 420.672 li
340.031 420.672 li
cp
@
411.91 420.551 mo
420.91 420.551 li
420.91 429.551 li
411.91 429.551 li
cp
@
483.789 411.43 mo
492.789 411.43 li
492.789 420.43 li
483.789 420.43 li
cp
@
555.672 418.871 mo
564.668 418.871 li
564.668 427.871 li
555.672 427.871 li
cp
@
627.551 410.352 mo
636.551 410.352 li
636.551 419.352 li
627.551 419.352 li
cp
@
gsave
57.121 24.48 mo
632.762 24.48 li
632.762 499.078 li
57.121 499.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.121 396.121 mo
129 412.078 li
200.879 413.641 li
272.762 432.121 li
344.641 419.879 li
416.52 417.84 li
488.398 412.559 li
560.281 409.32 li
632.16 426.602 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
52.031 390.91 mo
61.988 390.91 li
61.988 400.871 li
52.031 400.871 li
cp
.619135 .109529 .981689 .00570687 cmyk
@
123.91 406.988 mo
133.871 406.988 li
133.871 416.949 li
123.91 416.949 li
cp
@
195.789 408.43 mo
205.75 408.43 li
205.75 418.391 li
195.789 418.391 li
cp
@
267.672 427.031 mo
277.629 427.031 li
277.629 436.988 li
267.672 436.988 li
cp
@
339.551 414.789 mo
349.512 414.789 li
349.512 424.75 li
339.551 424.75 li
cp
@
411.43 412.629 mo
421.391 412.629 li
421.391 422.59 li
411.43 422.59 li
cp
@
483.309 407.352 mo
493.27 407.352 li
493.27 417.309 li
483.309 417.309 li
cp
@
555.191 404.23 mo
565.148 404.23 li
565.148 414.191 li
555.191 414.191 li
cp
@
627.07 421.512 mo
637.031 421.512 li
637.031 431.469 li
627.07 431.469 li
cp
@
gsave
57.121 24.48 mo
632.762 24.48 li
632.762 499.078 li
57.121 499.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.121 384.719 mo
129 416.16 li
200.879 414.238 li
272.762 420.961 li
344.641 426.238 li
416.52 426.602 li
488.398 410.879 li
560.281 423.121 li
632.16 418.199 li
0 .990631 1 .000396735 cmyk
@
grestore
52.031 379.629 mo
61.988 379.629 li
61.988 389.59 li
52.031 389.59 li
cp
0 .990631 1 .000396735 cmyk
@
123.91 410.949 mo
133.871 410.949 li
133.871 420.91 li
123.91 420.91 li
cp
@
195.789 409.031 mo
205.75 409.031 li
205.75 418.988 li
195.789 418.988 li
cp
@
267.672 415.871 mo
277.629 415.871 li
277.629 425.828 li
267.672 425.828 li
cp
@
339.551 421.031 mo
349.512 421.031 li
349.512 430.988 li
339.551 430.988 li
cp
@
411.43 421.512 mo
421.391 421.512 li
421.391 431.469 li
411.43 431.469 li
cp
@
483.309 405.672 mo
493.27 405.672 li
493.27 415.629 li
483.309 415.629 li
cp
@
555.191 417.91 mo
565.148 417.91 li
565.148 427.871 li
555.191 427.871 li
cp
@
627.07 413.109 mo
637.031 413.109 li
637.031 423.07 li
627.07 423.07 li
cp
@
28.051 490.449 mo
45.953 490.449 li
45.953 505.097 li
28.051 505.097 li
cp
0 0 0 0 cmyk
ef
33.723 498.129 mo
33.719 498.711 33.672 499.242 33.586 499.723 cv
33.492 500.207 33.34 500.621 33.129 500.965 cv
32.91 501.309 32.633 501.578 32.293 501.766 cv
31.945 501.953 31.523 502.043 31.023 502.047 cv
30.547 502.043 30.145 501.961 29.82 501.793 cv
29.492 501.625 29.23 501.375 29.031 501.043 cv
28.828 500.715 28.684 500.309 28.605 499.824 cv
28.52 499.344 28.48 498.789 28.48 498.164 cv
28.48 497.586 28.527 497.059 28.621 496.574 cv
28.715 496.098 28.867 495.684 29.078 495.332 cv
29.289 494.988 29.566 494.719 29.91 494.527 cv
30.254 494.34 30.676 494.246 31.176 494.242 cv
31.652 494.246 32.055 494.332 32.383 494.5 cv
32.711 494.672 32.973 494.922 33.172 495.25 cv
33.371 495.582 33.512 495.988 33.598 496.469 cv
33.676 496.953 33.719 497.504 33.723 498.129 cv
cp
32.691 498.199 mo
32.688 497.824 32.676 497.484 32.652 497.18 cv
32.625 496.879 32.582 496.613 32.531 496.383 cv
32.477 496.156 32.41 495.961 32.324 495.789 cv
32.238 495.625 32.137 495.488 32.023 495.379 cv
31.902 495.277 31.77 495.199 31.621 495.145 cv
31.473 495.098 31.305 495.07 31.117 495.07 cv
30.785 495.07 30.516 495.148 30.309 495.305 cv
30.098 495.461 29.934 495.676 29.816 495.949 cv
29.699 496.223 29.617 496.543 29.574 496.91 cv
29.531 497.277 29.512 497.672 29.512 498.094 cv
29.512 498.664 29.539 499.148 29.598 499.539 cv
29.656 499.937 29.75 500.258 29.875 500.508 cv
30 500.758 30.16 500.941 30.363 501.055 cv
30.559 501.168 30.801 501.223 31.082 501.223 cv
31.301 501.223 31.492 501.187 31.66 501.117 cv
31.824 501.047 31.965 500.949 32.086 500.816 cv
32.203 500.687 32.305 500.527 32.383 500.344 cv
32.461 500.164 32.523 499.961 32.57 499.734 cv
32.617 499.512 32.648 499.273 32.664 499.012 cv
32.68 498.754 32.688 498.48 32.691 498.199 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.289 501.297 mo
36.289 501.578 36.242 501.762 36.148 501.855 cv
36.055 501.945 35.887 501.988 35.652 501.992 cv
35.414 501.988 35.254 501.945 35.164 501.855 cv
35.07 501.766 35.023 501.586 35.027 501.316 cv
35.023 501.039 35.07 500.855 35.164 500.762 cv
35.258 500.672 35.426 500.625 35.668 500.625 cv
35.902 500.625 36.063 500.672 36.152 500.762 cv
36.242 500.852 36.289 501.031 36.289 501.297 cv
cp
f
42.832 498.129 mo
42.828 498.711 42.781 499.242 42.695 499.723 cv
42.602 500.207 42.449 500.621 42.238 500.965 cv
42.02 501.309 41.742 501.578 41.402 501.766 cv
41.055 501.953 40.633 502.043 40.133 502.047 cv
39.656 502.043 39.254 501.961 38.93 501.793 cv
38.602 501.625 38.34 501.375 38.141 501.043 cv
37.938 500.715 37.793 500.309 37.715 499.824 cv
37.629 499.344 37.59 498.789 37.59 498.164 cv
37.59 497.586 37.637 497.059 37.73 496.574 cv
37.824 496.098 37.977 495.684 38.188 495.332 cv
38.398 494.988 38.676 494.719 39.02 494.527 cv
39.363 494.34 39.785 494.246 40.285 494.242 cv
40.762 494.246 41.164 494.332 41.492 494.5 cv
41.82 494.672 42.082 494.922 42.281 495.25 cv
42.48 495.582 42.621 495.988 42.707 496.469 cv
42.785 496.953 42.828 497.504 42.832 498.129 cv
cp
41.801 498.199 mo
41.797 497.824 41.785 497.484 41.762 497.18 cv
41.734 496.879 41.691 496.613 41.641 496.383 cv
41.586 496.156 41.52 495.961 41.434 495.789 cv
41.348 495.625 41.246 495.488 41.133 495.379 cv
41.012 495.277 40.879 495.199 40.73 495.145 cv
40.582 495.098 40.414 495.07 40.227 495.07 cv
39.895 495.07 39.625 495.148 39.418 495.305 cv
39.207 495.461 39.043 495.676 38.926 495.949 cv
38.809 496.223 38.727 496.543 38.684 496.91 cv
38.641 497.277 38.621 497.672 38.621 498.094 cv
38.621 498.664 38.648 499.148 38.707 499.539 cv
38.766 499.937 38.859 500.258 38.984 500.508 cv
39.109 500.758 39.27 500.941 39.473 501.055 cv
39.668 501.168 39.91 501.223 40.191 501.223 cv
40.41 501.223 40.602 501.187 40.77 501.117 cv
40.934 501.047 41.074 500.949 41.195 500.816 cv
41.313 500.687 41.414 500.527 41.492 500.344 cv
41.57 500.164 41.633 499.961 41.68 499.734 cv
41.727 499.512 41.758 499.273 41.773 499.012 cv
41.789 498.754 41.797 498.48 41.801 498.199 cv
cp
f
28.051 437.781 mo
45.953 437.781 li
45.953 452.429 li
28.051 452.429 li
cp
0 0 0 0 cmyk
ef
33.473 448.828 mo
33.473 448.898 33.465 448.961 33.457 449.016 cv
33.441 449.07 33.43 449.117 33.414 449.152 cv
33.398 449.191 33.375 449.219 33.344 449.234 cv
33.313 449.254 33.281 449.262 33.25 449.262 cv
29.059 449.262 li
29.004 449.262 28.957 449.258 28.918 449.242 cv
28.875 449.234 28.84 449.211 28.813 449.176 cv
28.781 449.148 28.758 449.102 28.746 449.039 cv
28.73 448.98 28.727 448.91 28.727 448.824 cv
28.727 448.75 28.727 448.68 28.734 448.617 cv
28.738 448.559 28.754 448.508 28.773 448.461 cv
28.793 448.418 28.816 448.375 28.848 448.328 cv
28.875 448.289 28.914 448.238 28.969 448.184 cv
30.484 446.625 li
30.832 446.266 31.109 445.945 31.324 445.66 cv
31.535 445.375 31.699 445.113 31.816 444.879 cv
31.926 444.645 32.004 444.434 32.043 444.242 cv
32.078 444.051 32.094 443.871 32.098 443.699 cv
32.094 443.535 32.066 443.375 32.012 443.223 cv
31.953 443.074 31.871 442.941 31.766 442.828 cv
31.656 442.719 31.523 442.629 31.363 442.559 cv
31.199 442.492 31.012 442.461 30.809 442.457 cv
30.559 442.461 30.34 442.492 30.145 442.559 cv
29.949 442.629 29.777 442.703 29.629 442.777 cv
29.48 442.859 29.355 442.93 29.262 442.992 cv
29.16 443.059 29.09 443.094 29.043 443.09 cv
29.012 443.094 28.984 443.086 28.965 443.066 cv
28.941 443.055 28.922 443.027 28.91 442.992 cv
28.895 442.961 28.887 442.914 28.879 442.852 cv
28.871 442.793 28.867 442.723 28.867 442.641 cv
28.867 442.582 28.867 442.531 28.871 442.488 cv
28.875 442.449 28.883 442.414 28.895 442.379 cv
28.902 442.352 28.914 442.32 28.934 442.289 cv
28.945 442.262 28.977 442.23 29.027 442.187 cv
29.07 442.148 29.152 442.09 29.27 442.02 cv
29.383 441.949 29.527 441.883 29.703 441.812 cv
29.875 441.746 30.066 441.687 30.277 441.637 cv
30.484 441.594 30.703 441.57 30.934 441.566 cv
31.301 441.57 31.621 441.621 31.898 441.723 cv
32.172 441.828 32.402 441.969 32.582 442.148 cv
32.762 442.328 32.898 442.539 32.992 442.777 cv
33.082 443.016 33.125 443.27 33.129 443.535 cv
33.125 443.785 33.105 444.027 33.063 444.262 cv
33.016 444.504 32.922 444.762 32.789 445.039 cv
32.648 445.32 32.449 445.633 32.188 445.973 cv
31.926 446.316 31.578 446.707 31.145 447.152 cv
29.945 448.406 li
33.246 448.406 li
33.273 448.406 33.305 448.418 33.336 448.434 cv
33.363 448.453 33.387 448.477 33.41 448.512 cv
33.426 448.551 33.441 448.598 33.457 448.645 cv
33.465 448.699 33.473 448.758 33.473 448.828 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.289 448.621 mo
36.289 448.902 36.242 449.086 36.148 449.18 cv
36.055 449.27 35.887 449.312 35.652 449.316 cv
35.414 449.312 35.254 449.27 35.164 449.18 cv
35.07 449.09 35.023 448.91 35.027 448.641 cv
35.023 448.363 35.07 448.18 35.164 448.086 cv
35.258 447.996 35.426 447.949 35.668 447.949 cv
35.902 447.949 36.063 447.996 36.152 448.086 cv
36.242 448.176 36.289 448.355 36.289 448.621 cv
cp
f
42.547 446.824 mo
42.547 447.23 42.477 447.594 42.34 447.91 cv
42.203 448.227 42.012 448.492 41.762 448.711 cv
41.512 448.93 41.211 449.094 40.867 449.203 cv
40.516 449.312 40.133 449.367 39.715 449.371 cv
39.477 449.367 39.254 449.352 39.047 449.32 cv
38.832 449.289 38.645 449.25 38.484 449.203 cv
38.316 449.156 38.184 449.109 38.082 449.059 cv
37.977 449.016 37.906 448.977 37.879 448.945 cv
37.848 448.918 37.828 448.895 37.816 448.867 cv
37.805 448.848 37.793 448.82 37.785 448.785 cv
37.77 448.754 37.766 448.711 37.766 448.66 cv
37.762 448.609 37.758 448.547 37.762 448.477 cv
37.758 448.414 37.762 448.355 37.77 448.301 cv
37.773 448.246 37.785 448.203 37.801 448.172 cv
37.816 448.141 37.832 448.117 37.855 448.098 cv
37.871 448.086 37.898 448.078 37.93 448.074 cv
37.969 448.078 38.027 448.102 38.109 448.148 cv
38.191 448.195 38.301 448.25 38.441 448.305 cv
38.578 448.363 38.75 448.414 38.957 448.465 cv
39.16 448.52 39.406 448.547 39.688 448.543 cv
39.949 448.547 40.188 448.516 40.41 448.449 cv
40.625 448.391 40.813 448.293 40.973 448.156 cv
41.129 448.027 41.254 447.859 41.344 447.656 cv
41.434 447.453 41.48 447.207 41.48 446.918 cv
41.48 446.676 41.441 446.465 41.367 446.277 cv
41.289 446.094 41.172 445.937 41.016 445.812 cv
40.855 445.691 40.656 445.602 40.414 445.539 cv
40.172 445.484 39.883 445.453 39.547 445.449 cv
39.309 445.453 39.102 445.465 38.934 445.484 cv
38.758 445.512 38.598 445.523 38.449 445.52 cv
38.336 445.523 38.258 445.496 38.215 445.441 cv
38.164 445.391 38.141 445.293 38.145 445.148 cv
38.145 442.059 li
38.141 441.934 38.172 441.836 38.234 441.773 cv
38.297 441.711 38.383 441.68 38.496 441.68 cv
41.855 441.68 li
41.887 441.68 41.914 441.691 41.945 441.707 cv
41.969 441.727 41.996 441.75 42.02 441.785 cv
42.039 441.824 42.051 441.871 42.063 441.922 cv
42.07 441.98 42.078 442.043 42.078 442.113 cv
42.078 442.254 42.059 442.363 42.02 442.441 cv
41.98 442.52 41.926 442.559 41.863 442.559 cv
39.152 442.559 li
39.152 444.684 li
39.281 444.668 39.418 444.656 39.559 444.652 cv
39.695 444.648 39.852 444.645 40.035 444.645 cv
40.449 444.645 40.816 444.699 41.129 444.801 cv
41.441 444.91 41.699 445.055 41.91 445.242 cv
42.117 445.43 42.277 445.66 42.387 445.93 cv
42.492 446.199 42.547 446.496 42.547 446.824 cv
cp
f
28.051 385.121 mo
45.953 385.121 li
45.953 399.769 li
28.051 399.769 li
cp
0 0 0 0 cmyk
ef
33.438 394.164 mo
33.438 394.57 33.367 394.934 33.23 395.25 cv
33.094 395.566 32.902 395.832 32.652 396.051 cv
32.402 396.27 32.102 396.434 31.758 396.543 cv
31.406 396.652 31.023 396.707 30.605 396.711 cv
30.367 396.707 30.145 396.691 29.938 396.66 cv
29.723 396.629 29.535 396.59 29.375 396.543 cv
29.207 396.496 29.074 396.449 28.973 396.398 cv
28.867 396.355 28.797 396.316 28.77 396.285 cv
28.738 396.258 28.719 396.234 28.707 396.207 cv
28.695 396.187 28.684 396.16 28.676 396.125 cv
28.66 396.094 28.656 396.051 28.656 396 cv
28.652 395.949 28.648 395.887 28.652 395.816 cv
28.648 395.754 28.652 395.695 28.66 395.641 cv
28.664 395.586 28.676 395.543 28.691 395.512 cv
28.707 395.48 28.723 395.457 28.746 395.437 cv
28.762 395.426 28.789 395.418 28.82 395.414 cv
28.859 395.418 28.918 395.441 29 395.488 cv
29.082 395.535 29.191 395.59 29.332 395.645 cv
29.469 395.703 29.641 395.754 29.848 395.805 cv
30.051 395.859 30.297 395.887 30.578 395.883 cv
30.84 395.887 31.078 395.855 31.301 395.789 cv
31.516 395.73 31.703 395.633 31.863 395.496 cv
32.02 395.367 32.145 395.199 32.234 394.996 cv
32.324 394.793 32.371 394.547 32.371 394.258 cv
32.371 394.016 32.332 393.805 32.258 393.617 cv
32.18 393.434 32.063 393.277 31.906 393.152 cv
31.746 393.031 31.547 392.941 31.305 392.879 cv
31.063 392.824 30.773 392.793 30.438 392.789 cv
30.199 392.793 29.992 392.805 29.824 392.824 cv
29.648 392.852 29.488 392.863 29.34 392.859 cv
29.227 392.863 29.148 392.836 29.105 392.781 cv
29.055 392.73 29.031 392.633 29.035 392.488 cv
29.035 389.398 li
29.031 389.273 29.063 389.176 29.125 389.113 cv
29.188 389.051 29.273 389.02 29.387 389.02 cv
32.746 389.02 li
32.777 389.02 32.805 389.031 32.836 389.047 cv
32.859 389.066 32.887 389.09 32.91 389.125 cv
32.93 389.164 32.941 389.211 32.953 389.262 cv
32.961 389.32 32.969 389.383 32.969 389.453 cv
32.969 389.594 32.949 389.703 32.91 389.781 cv
32.871 389.859 32.816 389.898 32.754 389.898 cv
30.043 389.898 li
30.043 392.023 li
30.172 392.008 30.309 391.996 30.449 391.992 cv
30.586 391.988 30.742 391.984 30.926 391.984 cv
31.34 391.984 31.707 392.039 32.02 392.141 cv
32.332 392.25 32.59 392.395 32.801 392.582 cv
33.008 392.77 33.168 393 33.277 393.27 cv
33.383 393.539 33.438 393.836 33.438 394.164 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.289 395.961 mo
36.289 396.242 36.242 396.426 36.148 396.52 cv
36.055 396.609 35.887 396.652 35.652 396.656 cv
35.414 396.652 35.254 396.609 35.164 396.52 cv
35.07 396.43 35.023 396.25 35.027 395.98 cv
35.023 395.703 35.07 395.52 35.164 395.426 cv
35.258 395.336 35.426 395.289 35.668 395.289 cv
35.902 395.289 36.063 395.336 36.152 395.426 cv
36.242 395.516 36.289 395.695 36.289 395.961 cv
cp
f
42.832 392.793 mo
42.828 393.375 42.781 393.906 42.695 394.387 cv
42.602 394.871 42.449 395.285 42.238 395.629 cv
42.02 395.973 41.742 396.242 41.402 396.43 cv
41.055 396.617 40.633 396.707 40.133 396.711 cv
39.656 396.707 39.254 396.625 38.93 396.457 cv
38.602 396.289 38.34 396.039 38.141 395.707 cv
37.938 395.379 37.793 394.973 37.715 394.488 cv
37.629 394.008 37.59 393.453 37.59 392.828 cv
37.59 392.25 37.637 391.723 37.73 391.238 cv
37.824 390.762 37.977 390.348 38.188 389.996 cv
38.398 389.652 38.676 389.383 39.02 389.191 cv
39.363 389.004 39.785 388.91 40.285 388.906 cv
40.762 388.91 41.164 388.996 41.492 389.164 cv
41.82 389.336 42.082 389.586 42.281 389.914 cv
42.48 390.246 42.621 390.652 42.707 391.133 cv
42.785 391.617 42.828 392.168 42.832 392.793 cv
cp
41.801 392.863 mo
41.797 392.488 41.785 392.148 41.762 391.844 cv
41.734 391.543 41.691 391.277 41.641 391.047 cv
41.586 390.82 41.52 390.625 41.434 390.453 cv
41.348 390.289 41.246 390.152 41.133 390.043 cv
41.012 389.941 40.879 389.863 40.73 389.809 cv
40.582 389.762 40.414 389.734 40.227 389.734 cv
39.895 389.734 39.625 389.812 39.418 389.969 cv
39.207 390.125 39.043 390.34 38.926 390.613 cv
38.809 390.887 38.727 391.207 38.684 391.574 cv
38.641 391.941 38.621 392.336 38.621 392.758 cv
38.621 393.328 38.648 393.812 38.707 394.203 cv
38.766 394.602 38.859 394.922 38.984 395.172 cv
39.109 395.422 39.27 395.605 39.473 395.719 cv
39.668 395.832 39.91 395.887 40.191 395.887 cv
40.41 395.887 40.602 395.852 40.77 395.781 cv
40.934 395.711 41.074 395.613 41.195 395.48 cv
41.313 395.352 41.414 395.191 41.492 395.008 cv
41.57 394.828 41.633 394.625 41.68 394.398 cv
41.727 394.176 41.758 393.937 41.773 393.676 cv
41.789 393.418 41.797 393.145 41.801 392.863 cv
cp
f
28.051 332.449 mo
45.953 332.449 li
45.953 347.101 li
28.051 347.101 li
cp
0 0 0 0 cmyk
ef
33.582 336.773 mo
33.578 336.844 33.574 336.91 33.574 336.965 cv
33.566 337.023 33.559 337.078 33.551 337.129 cv
33.535 337.184 33.523 337.234 33.508 337.281 cv
33.492 337.332 33.473 337.383 33.449 337.437 cv
30.719 343.727 li
30.699 343.777 30.672 343.816 30.645 343.844 cv
30.613 343.875 30.578 343.898 30.531 343.914 cv
30.484 343.93 30.426 343.937 30.359 343.945 cv
30.285 343.953 30.199 343.957 30.105 343.957 cv
29.965 343.957 29.863 343.949 29.793 343.937 cv
29.719 343.926 29.664 343.91 29.633 343.883 cv
29.598 343.859 29.582 343.828 29.586 343.789 cv
29.59 343.754 29.605 343.711 29.629 343.656 cv
32.5 337.227 li
28.863 337.227 li
28.785 337.23 28.73 337.191 28.691 337.109 cv
28.652 337.035 28.633 336.926 28.637 336.781 cv
28.633 336.707 28.637 336.641 28.652 336.586 cv
28.66 336.531 28.676 336.488 28.695 336.449 cv
28.715 336.414 28.738 336.387 28.766 336.367 cv
28.793 336.352 28.824 336.34 28.863 336.34 cv
33.277 336.34 li
33.332 336.34 33.379 336.348 33.422 336.359 cv
33.461 336.371 33.492 336.395 33.516 336.43 cv
33.535 336.465 33.555 336.508 33.566 336.562 cv
33.574 336.617 33.578 336.687 33.582 336.773 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.289 343.281 mo
36.289 343.562 36.242 343.746 36.148 343.84 cv
36.055 343.93 35.887 343.973 35.652 343.977 cv
35.414 343.973 35.254 343.93 35.164 343.84 cv
35.07 343.75 35.023 343.57 35.027 343.301 cv
35.023 343.023 35.07 342.84 35.164 342.746 cv
35.258 342.656 35.426 342.609 35.668 342.609 cv
35.902 342.609 36.063 342.656 36.152 342.746 cv
36.242 342.836 36.289 343.016 36.289 343.281 cv
cp
f
42.547 341.484 mo
42.547 341.891 42.477 342.254 42.34 342.57 cv
42.203 342.887 42.012 343.152 41.762 343.371 cv
41.512 343.59 41.211 343.754 40.867 343.863 cv
40.516 343.973 40.133 344.027 39.715 344.031 cv
39.477 344.027 39.254 344.012 39.047 343.98 cv
38.832 343.949 38.645 343.91 38.484 343.863 cv
38.316 343.816 38.184 343.77 38.082 343.719 cv
37.977 343.676 37.906 343.637 37.879 343.605 cv
37.848 343.578 37.828 343.555 37.816 343.527 cv
37.805 343.508 37.793 343.48 37.785 343.445 cv
37.77 343.414 37.766 343.371 37.766 343.32 cv
37.762 343.27 37.758 343.207 37.762 343.137 cv
37.758 343.074 37.762 343.016 37.77 342.961 cv
37.773 342.906 37.785 342.863 37.801 342.832 cv
37.816 342.801 37.832 342.777 37.855 342.758 cv
37.871 342.746 37.898 342.738 37.93 342.734 cv
37.969 342.738 38.027 342.762 38.109 342.809 cv
38.191 342.855 38.301 342.91 38.441 342.965 cv
38.578 343.023 38.75 343.074 38.957 343.125 cv
39.16 343.18 39.406 343.207 39.688 343.203 cv
39.949 343.207 40.188 343.176 40.41 343.109 cv
40.625 343.051 40.813 342.953 40.973 342.816 cv
41.129 342.687 41.254 342.52 41.344 342.316 cv
41.434 342.113 41.48 341.867 41.48 341.578 cv
41.48 341.336 41.441 341.125 41.367 340.937 cv
41.289 340.754 41.172 340.598 41.016 340.473 cv
40.855 340.352 40.656 340.262 40.414 340.199 cv
40.172 340.145 39.883 340.113 39.547 340.109 cv
39.309 340.113 39.102 340.125 38.934 340.145 cv
38.758 340.172 38.598 340.184 38.449 340.18 cv
38.336 340.184 38.258 340.156 38.215 340.102 cv
38.164 340.051 38.141 339.953 38.145 339.809 cv
38.145 336.719 li
38.141 336.594 38.172 336.496 38.234 336.434 cv
38.297 336.371 38.383 336.34 38.496 336.34 cv
41.855 336.34 li
41.887 336.34 41.914 336.352 41.945 336.367 cv
41.969 336.387 41.996 336.41 42.02 336.445 cv
42.039 336.484 42.051 336.531 42.063 336.582 cv
42.07 336.641 42.078 336.703 42.078 336.773 cv
42.078 336.914 42.059 337.023 42.02 337.102 cv
41.98 337.18 41.926 337.219 41.863 337.219 cv
39.152 337.219 li
39.152 339.344 li
39.281 339.328 39.418 339.316 39.559 339.312 cv
39.695 339.309 39.852 339.305 40.035 339.305 cv
40.449 339.305 40.816 339.359 41.129 339.461 cv
41.441 339.57 41.699 339.715 41.91 339.902 cv
42.117 340.09 42.277 340.32 42.387 340.59 cv
42.492 340.859 42.547 341.156 42.547 341.484 cv
cp
f
21.969 279.781 mo
45.953 279.781 li
45.953 294.429 li
21.969 294.429 li
cp
0 0 0 0 cmyk
ef
27.414 290.84 mo
27.41 290.914 27.406 290.977 27.398 291.027 cv
27.387 291.082 27.371 291.125 27.352 291.152 cv
27.328 291.187 27.305 291.211 27.281 291.219 cv
27.258 291.234 27.23 291.238 27.203 291.238 cv
23.242 291.238 li
23.215 291.238 23.191 291.234 23.168 291.219 cv
23.145 291.211 23.121 291.187 23.102 291.152 cv
23.078 291.125 23.063 291.082 23.051 291.027 cv
23.035 290.977 23.027 290.914 23.031 290.84 cv
23.027 290.77 23.035 290.711 23.051 290.66 cv
23.063 290.609 23.074 290.566 23.094 290.531 cv
23.109 290.5 23.133 290.477 23.156 290.457 cv
23.18 290.441 23.207 290.43 23.242 290.43 cv
24.828 290.43 li
24.828 284.664 li
23.359 285.535 li
23.285 285.582 23.227 285.605 23.184 285.609 cv
23.137 285.621 23.102 285.613 23.074 285.582 cv
23.043 285.559 23.023 285.516 23.016 285.457 cv
23.008 285.398 23.004 285.324 23.004 285.23 cv
23.004 285.168 23.004 285.109 23.012 285.062 cv
23.016 285.016 23.027 284.977 23.039 284.945 cv
23.047 284.914 23.063 284.887 23.086 284.863 cv
23.109 284.84 23.137 284.816 23.172 284.793 cv
24.922 283.676 li
24.934 283.664 24.953 283.652 24.98 283.645 cv
25 283.637 25.031 283.629 25.066 283.621 cv
25.098 283.613 25.137 283.609 25.188 283.609 cv
25.23 283.609 25.289 283.609 25.367 283.605 cv
25.457 283.609 25.535 283.613 25.602 283.617 cv
25.66 283.629 25.711 283.641 25.746 283.648 cv
25.777 283.664 25.801 283.68 25.816 283.699 cv
25.828 283.723 25.832 283.746 25.836 283.77 cv
25.836 290.43 li
27.203 290.43 li
27.23 290.43 27.262 290.441 27.293 290.457 cv
27.32 290.477 27.34 290.5 27.359 290.531 cv
27.375 290.566 27.391 290.609 27.398 290.66 cv
27.406 290.711 27.41 290.77 27.414 290.84 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
33.73 287.43 mo
33.727 288.012 33.68 288.543 33.594 289.023 cv
33.5 289.508 33.348 289.922 33.137 290.266 cv
32.918 290.609 32.641 290.879 32.301 291.066 cv
31.953 291.254 31.531 291.344 31.031 291.348 cv
30.555 291.344 30.152 291.262 29.828 291.094 cv
29.5 290.926 29.238 290.676 29.039 290.344 cv
28.836 290.016 28.691 289.609 28.613 289.125 cv
28.527 288.645 28.488 288.09 28.488 287.465 cv
28.488 286.887 28.535 286.359 28.629 285.875 cv
28.723 285.398 28.875 284.984 29.086 284.633 cv
29.297 284.289 29.574 284.02 29.918 283.828 cv
30.262 283.641 30.684 283.547 31.184 283.543 cv
31.66 283.547 32.063 283.633 32.391 283.801 cv
32.719 283.973 32.98 284.223 33.18 284.551 cv
33.379 284.883 33.52 285.289 33.605 285.77 cv
33.684 286.254 33.727 286.805 33.73 287.43 cv
cp
32.699 287.5 mo
32.695 287.125 32.684 286.785 32.66 286.48 cv
32.633 286.18 32.59 285.914 32.539 285.684 cv
32.484 285.457 32.418 285.262 32.332 285.09 cv
32.246 284.926 32.145 284.789 32.031 284.68 cv
31.91 284.578 31.777 284.5 31.629 284.445 cv
31.48 284.398 31.313 284.371 31.125 284.371 cv
30.793 284.371 30.523 284.449 30.316 284.605 cv
30.105 284.762 29.941 284.977 29.824 285.25 cv
29.707 285.523 29.625 285.844 29.582 286.211 cv
29.539 286.578 29.52 286.973 29.52 287.395 cv
29.52 287.965 29.547 288.449 29.605 288.84 cv
29.664 289.238 29.758 289.559 29.883 289.809 cv
30.008 290.059 30.168 290.242 30.371 290.355 cv
30.566 290.469 30.809 290.523 31.09 290.523 cv
31.309 290.523 31.5 290.488 31.668 290.418 cv
31.832 290.348 31.973 290.25 32.094 290.117 cv
32.211 289.988 32.313 289.828 32.391 289.645 cv
32.469 289.465 32.531 289.262 32.578 289.035 cv
32.625 288.812 32.656 288.574 32.672 288.312 cv
32.688 288.055 32.695 287.781 32.699 287.5 cv
cp
f
36.25 290.598 mo
36.25 290.879 36.203 291.062 36.109 291.156 cv
36.016 291.246 35.848 291.289 35.613 291.293 cv
35.375 291.289 35.215 291.246 35.125 291.156 cv
35.031 291.066 34.984 290.887 34.988 290.617 cv
34.984 290.34 35.031 290.156 35.125 290.062 cv
35.219 289.973 35.387 289.926 35.629 289.926 cv
35.863 289.926 36.023 289.973 36.113 290.062 cv
36.203 290.152 36.25 290.332 36.25 290.598 cv
cp
f
42.875 287.43 mo
42.871 288.012 42.824 288.543 42.738 289.023 cv
42.645 289.508 42.492 289.922 42.281 290.266 cv
42.063 290.609 41.785 290.879 41.445 291.066 cv
41.098 291.254 40.676 291.344 40.176 291.348 cv
39.699 291.344 39.297 291.262 38.973 291.094 cv
38.645 290.926 38.383 290.676 38.184 290.344 cv
37.98 290.016 37.836 289.609 37.758 289.125 cv
37.672 288.645 37.633 288.09 37.633 287.465 cv
37.633 286.887 37.68 286.359 37.773 285.875 cv
37.867 285.398 38.02 284.984 38.23 284.633 cv
38.441 284.289 38.719 284.02 39.063 283.828 cv
39.406 283.641 39.828 283.547 40.328 283.543 cv
40.805 283.547 41.207 283.633 41.535 283.801 cv
41.863 283.973 42.125 284.223 42.324 284.551 cv
42.523 284.883 42.664 285.289 42.75 285.77 cv
42.828 286.254 42.871 286.805 42.875 287.43 cv
cp
41.844 287.5 mo
41.84 287.125 41.828 286.785 41.805 286.48 cv
41.777 286.18 41.734 285.914 41.684 285.684 cv
41.629 285.457 41.563 285.262 41.477 285.09 cv
41.391 284.926 41.289 284.789 41.176 284.68 cv
41.055 284.578 40.922 284.5 40.773 284.445 cv
40.625 284.398 40.457 284.371 40.27 284.371 cv
39.938 284.371 39.668 284.449 39.461 284.605 cv
39.25 284.762 39.086 284.977 38.969 285.25 cv
38.852 285.523 38.77 285.844 38.727 286.211 cv
38.684 286.578 38.664 286.973 38.664 287.395 cv
38.664 287.965 38.691 288.449 38.75 288.84 cv
38.809 289.238 38.902 289.559 39.027 289.809 cv
39.152 290.059 39.313 290.242 39.516 290.355 cv
39.711 290.469 39.953 290.523 40.234 290.523 cv
40.453 290.523 40.645 290.488 40.813 290.418 cv
40.977 290.348 41.117 290.25 41.238 290.117 cv
41.355 289.988 41.457 289.828 41.535 289.645 cv
41.613 289.465 41.676 289.262 41.723 289.035 cv
41.77 288.812 41.801 288.574 41.816 288.312 cv
41.832 288.055 41.84 287.781 41.844 287.5 cv
cp
f
21.969 227.121 mo
45.953 227.121 li
45.953 241.769 li
21.969 241.769 li
cp
0 0 0 0 cmyk
ef
27.414 238.16 mo
27.41 238.234 27.406 238.297 27.398 238.348 cv
27.387 238.402 27.371 238.445 27.352 238.473 cv
27.328 238.508 27.305 238.531 27.281 238.539 cv
27.258 238.555 27.23 238.559 27.203 238.559 cv
23.242 238.559 li
23.215 238.559 23.191 238.555 23.168 238.539 cv
23.145 238.531 23.121 238.508 23.102 238.473 cv
23.078 238.445 23.063 238.402 23.051 238.348 cv
23.035 238.297 23.027 238.234 23.031 238.16 cv
23.027 238.09 23.035 238.031 23.051 237.98 cv
23.063 237.93 23.074 237.887 23.094 237.852 cv
23.109 237.82 23.133 237.797 23.156 237.777 cv
23.18 237.762 23.207 237.75 23.242 237.75 cv
24.828 237.75 li
24.828 231.984 li
23.359 232.855 li
23.285 232.902 23.227 232.926 23.184 232.93 cv
23.137 232.941 23.102 232.934 23.074 232.902 cv
23.043 232.879 23.023 232.836 23.016 232.777 cv
23.008 232.719 23.004 232.645 23.004 232.551 cv
23.004 232.488 23.004 232.43 23.012 232.383 cv
23.016 232.336 23.027 232.297 23.039 232.266 cv
23.047 232.234 23.063 232.207 23.086 232.184 cv
23.109 232.16 23.137 232.137 23.172 232.113 cv
24.922 230.996 li
24.934 230.984 24.953 230.973 24.98 230.965 cv
25 230.957 25.031 230.949 25.066 230.941 cv
25.098 230.934 25.137 230.93 25.188 230.93 cv
25.23 230.93 25.289 230.93 25.367 230.926 cv
25.457 230.93 25.535 230.934 25.602 230.937 cv
25.66 230.949 25.711 230.961 25.746 230.969 cv
25.777 230.984 25.801 231 25.816 231.02 cv
25.828 231.043 25.832 231.066 25.836 231.09 cv
25.836 237.75 li
27.203 237.75 li
27.23 237.75 27.262 237.762 27.293 237.777 cv
27.32 237.797 27.34 237.82 27.359 237.852 cv
27.375 237.887 27.391 237.93 27.398 237.98 cv
27.406 238.031 27.41 238.09 27.414 238.16 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
33.48 238.125 mo
33.48 238.195 33.473 238.258 33.465 238.312 cv
33.449 238.367 33.438 238.414 33.422 238.449 cv
33.406 238.488 33.383 238.516 33.352 238.531 cv
33.32 238.551 33.289 238.559 33.258 238.559 cv
29.066 238.559 li
29.012 238.559 28.965 238.555 28.926 238.539 cv
28.883 238.531 28.848 238.508 28.82 238.473 cv
28.789 238.445 28.766 238.398 28.754 238.336 cv
28.738 238.277 28.734 238.207 28.734 238.121 cv
28.734 238.047 28.734 237.977 28.742 237.914 cv
28.746 237.855 28.762 237.805 28.781 237.758 cv
28.801 237.715 28.824 237.672 28.855 237.625 cv
28.883 237.586 28.922 237.535 28.977 237.48 cv
30.492 235.922 li
30.84 235.562 31.117 235.242 31.332 234.957 cv
31.543 234.672 31.707 234.41 31.824 234.176 cv
31.934 233.941 32.012 233.73 32.051 233.539 cv
32.086 233.348 32.102 233.168 32.105 232.996 cv
32.102 232.832 32.074 232.672 32.02 232.52 cv
31.961 232.371 31.879 232.238 31.773 232.125 cv
31.664 232.016 31.531 231.926 31.371 231.855 cv
31.207 231.789 31.02 231.758 30.816 231.754 cv
30.566 231.758 30.348 231.789 30.152 231.855 cv
29.957 231.926 29.785 232 29.637 232.074 cv
29.488 232.156 29.363 232.227 29.27 232.289 cv
29.168 232.355 29.098 232.391 29.051 232.387 cv
29.02 232.391 28.992 232.383 28.973 232.363 cv
28.949 232.352 28.93 232.324 28.918 232.289 cv
28.902 232.258 28.895 232.211 28.887 232.148 cv
28.879 232.09 28.875 232.02 28.875 231.937 cv
28.875 231.879 28.875 231.828 28.879 231.785 cv
28.883 231.746 28.891 231.711 28.902 231.676 cv
28.91 231.648 28.922 231.617 28.941 231.586 cv
28.953 231.559 28.984 231.527 29.035 231.484 cv
29.078 231.445 29.16 231.387 29.277 231.316 cv
29.391 231.246 29.535 231.18 29.711 231.109 cv
29.883 231.043 30.074 230.984 30.285 230.934 cv
30.492 230.891 30.711 230.867 30.941 230.863 cv
31.309 230.867 31.629 230.918 31.906 231.02 cv
32.18 231.125 32.41 231.266 32.59 231.445 cv
32.77 231.625 32.906 231.836 33 232.074 cv
33.09 232.312 33.133 232.566 33.137 232.832 cv
33.133 233.082 33.113 233.324 33.07 233.559 cv
33.023 233.801 32.93 234.059 32.797 234.336 cv
32.656 234.617 32.457 234.93 32.195 235.27 cv
31.934 235.613 31.586 236.004 31.152 236.449 cv
29.953 237.703 li
33.254 237.703 li
33.281 237.703 33.313 237.715 33.344 237.73 cv
33.371 237.75 33.395 237.773 33.418 237.809 cv
33.434 237.848 33.449 237.895 33.465 237.941 cv
33.473 237.996 33.48 238.055 33.48 238.125 cv
cp
f
36.25 237.918 mo
36.25 238.199 36.203 238.383 36.109 238.477 cv
36.016 238.566 35.848 238.609 35.613 238.613 cv
35.375 238.609 35.215 238.566 35.125 238.477 cv
35.031 238.387 34.984 238.207 34.988 237.937 cv
34.984 237.66 35.031 237.477 35.125 237.383 cv
35.219 237.293 35.387 237.246 35.629 237.246 cv
35.863 237.246 36.023 237.293 36.113 237.383 cv
36.203 237.473 36.25 237.652 36.25 237.918 cv
cp
f
42.59 236.121 mo
42.59 236.527 42.52 236.891 42.383 237.207 cv
42.246 237.523 42.055 237.789 41.805 238.008 cv
41.555 238.227 41.254 238.391 40.91 238.5 cv
40.559 238.609 40.176 238.664 39.758 238.668 cv
39.52 238.664 39.297 238.648 39.09 238.617 cv
38.875 238.586 38.688 238.547 38.527 238.5 cv
38.359 238.453 38.227 238.406 38.125 238.355 cv
38.02 238.312 37.949 238.273 37.922 238.242 cv
37.891 238.215 37.871 238.191 37.859 238.164 cv
37.848 238.145 37.836 238.117 37.828 238.082 cv
37.813 238.051 37.809 238.008 37.809 237.957 cv
37.805 237.906 37.801 237.844 37.805 237.773 cv
37.801 237.711 37.805 237.652 37.813 237.598 cv
37.816 237.543 37.828 237.5 37.844 237.469 cv
37.859 237.437 37.875 237.414 37.898 237.395 cv
37.914 237.383 37.941 237.375 37.973 237.371 cv
38.012 237.375 38.07 237.398 38.152 237.445 cv
38.234 237.492 38.344 237.547 38.484 237.602 cv
38.621 237.66 38.793 237.711 39 237.762 cv
39.203 237.816 39.449 237.844 39.73 237.84 cv
39.992 237.844 40.23 237.812 40.453 237.746 cv
40.668 237.687 40.855 237.59 41.016 237.453 cv
41.172 237.324 41.297 237.156 41.387 236.953 cv
41.477 236.75 41.523 236.504 41.523 236.215 cv
41.523 235.973 41.484 235.762 41.41 235.574 cv
41.332 235.391 41.215 235.234 41.059 235.109 cv
40.898 234.988 40.699 234.898 40.457 234.836 cv
40.215 234.781 39.926 234.75 39.59 234.746 cv
39.352 234.75 39.145 234.762 38.977 234.781 cv
38.801 234.809 38.641 234.82 38.492 234.816 cv
38.379 234.82 38.301 234.793 38.258 234.738 cv
38.207 234.687 38.184 234.59 38.188 234.445 cv
38.188 231.355 li
38.184 231.23 38.215 231.133 38.277 231.07 cv
38.34 231.008 38.426 230.977 38.539 230.977 cv
41.898 230.977 li
41.93 230.977 41.957 230.988 41.988 231.004 cv
42.012 231.023 42.039 231.047 42.063 231.082 cv
42.082 231.121 42.094 231.168 42.105 231.219 cv
42.113 231.277 42.121 231.34 42.121 231.41 cv
42.121 231.551 42.102 231.66 42.063 231.738 cv
42.023 231.816 41.969 231.855 41.906 231.855 cv
39.195 231.855 li
39.195 233.98 li
39.324 233.965 39.461 233.953 39.602 233.949 cv
39.738 233.945 39.895 233.941 40.078 233.941 cv
40.492 233.941 40.859 233.996 41.172 234.098 cv
41.484 234.207 41.742 234.352 41.953 234.539 cv
42.16 234.727 42.32 234.957 42.43 235.227 cv
42.535 235.496 42.59 235.793 42.59 236.121 cv
cp
f
21.969 174.449 mo
45.953 174.449 li
45.953 189.101 li
21.969 189.101 li
cp
0 0 0 0 cmyk
ef
27.414 185.48 mo
27.41 185.555 27.406 185.617 27.398 185.668 cv
27.387 185.723 27.371 185.766 27.352 185.793 cv
27.328 185.828 27.305 185.852 27.281 185.859 cv
27.258 185.875 27.23 185.879 27.203 185.879 cv
23.242 185.879 li
23.215 185.879 23.191 185.875 23.168 185.859 cv
23.145 185.852 23.121 185.828 23.102 185.793 cv
23.078 185.766 23.063 185.723 23.051 185.668 cv
23.035 185.617 23.027 185.555 23.031 185.48 cv
23.027 185.41 23.035 185.352 23.051 185.301 cv
23.063 185.25 23.074 185.207 23.094 185.172 cv
23.109 185.141 23.133 185.117 23.156 185.098 cv
23.18 185.082 23.207 185.07 23.242 185.07 cv
24.828 185.07 li
24.828 179.305 li
23.359 180.176 li
23.285 180.223 23.227 180.246 23.184 180.25 cv
23.137 180.262 23.102 180.254 23.074 180.223 cv
23.043 180.199 23.023 180.156 23.016 180.098 cv
23.008 180.039 23.004 179.965 23.004 179.871 cv
23.004 179.809 23.004 179.75 23.012 179.703 cv
23.016 179.656 23.027 179.617 23.039 179.586 cv
23.047 179.555 23.063 179.527 23.086 179.504 cv
23.109 179.48 23.137 179.457 23.172 179.434 cv
24.922 178.316 li
24.934 178.305 24.953 178.293 24.98 178.285 cv
25 178.277 25.031 178.27 25.066 178.262 cv
25.098 178.254 25.137 178.25 25.188 178.25 cv
25.23 178.25 25.289 178.25 25.367 178.246 cv
25.457 178.25 25.535 178.254 25.602 178.258 cv
25.66 178.27 25.711 178.281 25.746 178.289 cv
25.777 178.305 25.801 178.32 25.816 178.34 cv
25.828 178.363 25.832 178.387 25.836 178.41 cv
25.836 185.07 li
27.203 185.07 li
27.23 185.07 27.262 185.082 27.293 185.098 cv
27.32 185.117 27.34 185.141 27.359 185.172 cv
27.375 185.207 27.391 185.25 27.398 185.301 cv
27.406 185.352 27.41 185.41 27.414 185.48 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
33.445 183.441 mo
33.445 183.848 33.375 184.211 33.238 184.527 cv
33.102 184.844 32.91 185.109 32.66 185.328 cv
32.41 185.547 32.109 185.711 31.766 185.82 cv
31.414 185.93 31.031 185.984 30.613 185.988 cv
30.375 185.984 30.152 185.969 29.945 185.937 cv
29.73 185.906 29.543 185.867 29.383 185.82 cv
29.215 185.773 29.082 185.727 28.98 185.676 cv
28.875 185.633 28.805 185.594 28.777 185.562 cv
28.746 185.535 28.727 185.512 28.715 185.484 cv
28.703 185.465 28.691 185.437 28.684 185.402 cv
28.668 185.371 28.664 185.328 28.664 185.277 cv
28.66 185.227 28.656 185.164 28.66 185.094 cv
28.656 185.031 28.66 184.973 28.668 184.918 cv
28.672 184.863 28.684 184.82 28.699 184.789 cv
28.715 184.758 28.73 184.734 28.754 184.715 cv
28.77 184.703 28.797 184.695 28.828 184.691 cv
28.867 184.695 28.926 184.719 29.008 184.766 cv
29.09 184.812 29.199 184.867 29.34 184.922 cv
29.477 184.98 29.648 185.031 29.855 185.082 cv
30.059 185.137 30.305 185.164 30.586 185.16 cv
30.848 185.164 31.086 185.133 31.309 185.066 cv
31.523 185.008 31.711 184.91 31.871 184.773 cv
32.027 184.645 32.152 184.477 32.242 184.273 cv
32.332 184.07 32.379 183.824 32.379 183.535 cv
32.379 183.293 32.34 183.082 32.266 182.895 cv
32.188 182.711 32.07 182.555 31.914 182.43 cv
31.754 182.309 31.555 182.219 31.313 182.156 cv
31.07 182.102 30.781 182.07 30.445 182.066 cv
30.207 182.07 30 182.082 29.832 182.102 cv
29.656 182.129 29.496 182.141 29.348 182.137 cv
29.234 182.141 29.156 182.113 29.113 182.059 cv
29.063 182.008 29.039 181.91 29.043 181.766 cv
29.043 178.676 li
29.039 178.551 29.07 178.453 29.133 178.391 cv
29.195 178.328 29.281 178.297 29.395 178.297 cv
32.754 178.297 li
32.785 178.297 32.813 178.309 32.844 178.324 cv
32.867 178.344 32.895 178.367 32.918 178.402 cv
32.938 178.441 32.949 178.488 32.961 178.539 cv
32.969 178.598 32.977 178.66 32.977 178.73 cv
32.977 178.871 32.957 178.98 32.918 179.059 cv
32.879 179.137 32.824 179.176 32.762 179.176 cv
30.051 179.176 li
30.051 181.301 li
30.18 181.285 30.316 181.273 30.457 181.27 cv
30.594 181.266 30.75 181.262 30.934 181.262 cv
31.348 181.262 31.715 181.316 32.027 181.418 cv
32.34 181.527 32.598 181.672 32.809 181.859 cv
33.016 182.047 33.176 182.277 33.285 182.547 cv
33.391 182.816 33.445 183.113 33.445 183.441 cv
cp
f
36.25 185.238 mo
36.25 185.52 36.203 185.703 36.109 185.797 cv
36.016 185.887 35.848 185.93 35.613 185.934 cv
35.375 185.93 35.215 185.887 35.125 185.797 cv
35.031 185.707 34.984 185.527 34.988 185.258 cv
34.984 184.98 35.031 184.797 35.125 184.703 cv
35.219 184.613 35.387 184.566 35.629 184.566 cv
35.863 184.566 36.023 184.613 36.113 184.703 cv
36.203 184.793 36.25 184.973 36.25 185.238 cv
cp
f
42.875 182.07 mo
42.871 182.652 42.824 183.184 42.738 183.664 cv
42.645 184.148 42.492 184.562 42.281 184.906 cv
42.063 185.25 41.785 185.52 41.445 185.707 cv
41.098 185.895 40.676 185.984 40.176 185.988 cv
39.699 185.984 39.297 185.902 38.973 185.734 cv
38.645 185.566 38.383 185.316 38.184 184.984 cv
37.98 184.656 37.836 184.25 37.758 183.766 cv
37.672 183.285 37.633 182.73 37.633 182.105 cv
37.633 181.527 37.68 181 37.773 180.516 cv
37.867 180.039 38.02 179.625 38.23 179.273 cv
38.441 178.93 38.719 178.66 39.063 178.469 cv
39.406 178.281 39.828 178.187 40.328 178.184 cv
40.805 178.187 41.207 178.273 41.535 178.441 cv
41.863 178.613 42.125 178.863 42.324 179.191 cv
42.523 179.523 42.664 179.93 42.75 180.41 cv
42.828 180.895 42.871 181.445 42.875 182.07 cv
cp
41.844 182.141 mo
41.84 181.766 41.828 181.426 41.805 181.121 cv
41.777 180.82 41.734 180.555 41.684 180.324 cv
41.629 180.098 41.563 179.902 41.477 179.73 cv
41.391 179.566 41.289 179.43 41.176 179.32 cv
41.055 179.219 40.922 179.141 40.773 179.086 cv
40.625 179.039 40.457 179.012 40.27 179.012 cv
39.938 179.012 39.668 179.09 39.461 179.246 cv
39.25 179.402 39.086 179.617 38.969 179.891 cv
38.852 180.164 38.77 180.484 38.727 180.852 cv
38.684 181.219 38.664 181.613 38.664 182.035 cv
38.664 182.605 38.691 183.09 38.75 183.48 cv
38.809 183.879 38.902 184.199 39.027 184.449 cv
39.152 184.699 39.313 184.883 39.516 184.996 cv
39.711 185.109 39.953 185.164 40.234 185.164 cv
40.453 185.164 40.645 185.129 40.813 185.059 cv
40.977 184.988 41.117 184.891 41.238 184.758 cv
41.355 184.629 41.457 184.469 41.535 184.285 cv
41.613 184.105 41.676 183.902 41.723 183.676 cv
41.77 183.453 41.801 183.215 41.816 182.953 cv
41.832 182.695 41.84 182.422 41.844 182.141 cv
cp
f
21.969 121.781 mo
45.953 121.781 li
45.953 136.429 li
21.969 136.429 li
cp
0 0 0 0 cmyk
ef
27.414 132.801 mo
27.41 132.875 27.406 132.937 27.398 132.988 cv
27.387 133.043 27.371 133.086 27.352 133.113 cv
27.328 133.148 27.305 133.172 27.281 133.18 cv
27.258 133.195 27.23 133.199 27.203 133.199 cv
23.242 133.199 li
23.215 133.199 23.191 133.195 23.168 133.18 cv
23.145 133.172 23.121 133.148 23.102 133.113 cv
23.078 133.086 23.063 133.043 23.051 132.988 cv
23.035 132.937 23.027 132.875 23.031 132.801 cv
23.027 132.73 23.035 132.672 23.051 132.621 cv
23.063 132.57 23.074 132.527 23.094 132.492 cv
23.109 132.461 23.133 132.437 23.156 132.418 cv
23.18 132.402 23.207 132.391 23.242 132.391 cv
24.828 132.391 li
24.828 126.625 li
23.359 127.496 li
23.285 127.543 23.227 127.566 23.184 127.57 cv
23.137 127.582 23.102 127.574 23.074 127.543 cv
23.043 127.52 23.023 127.477 23.016 127.418 cv
23.008 127.359 23.004 127.285 23.004 127.191 cv
23.004 127.129 23.004 127.07 23.012 127.023 cv
23.016 126.977 23.027 126.937 23.039 126.906 cv
23.047 126.875 23.063 126.848 23.086 126.824 cv
23.109 126.801 23.137 126.777 23.172 126.754 cv
24.922 125.637 li
24.934 125.625 24.953 125.613 24.98 125.605 cv
25 125.598 25.031 125.59 25.066 125.582 cv
25.098 125.574 25.137 125.57 25.188 125.57 cv
25.23 125.57 25.289 125.57 25.367 125.566 cv
25.457 125.57 25.535 125.574 25.602 125.578 cv
25.66 125.59 25.711 125.602 25.746 125.609 cv
25.777 125.625 25.801 125.641 25.816 125.66 cv
25.828 125.684 25.832 125.707 25.836 125.73 cv
25.836 132.391 li
27.203 132.391 li
27.23 132.391 27.262 132.402 27.293 132.418 cv
27.32 132.437 27.34 132.461 27.359 132.492 cv
27.375 132.527 27.391 132.57 27.398 132.621 cv
27.406 132.672 27.41 132.73 27.414 132.801 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
33.59 126.051 mo
33.586 126.121 33.582 126.187 33.582 126.242 cv
33.574 126.301 33.566 126.355 33.559 126.406 cv
33.543 126.461 33.531 126.512 33.516 126.559 cv
33.5 126.609 33.48 126.66 33.457 126.715 cv
30.727 133.004 li
30.707 133.055 30.68 133.094 30.652 133.121 cv
30.621 133.152 30.586 133.176 30.539 133.191 cv
30.492 133.207 30.434 133.215 30.367 133.223 cv
30.293 133.23 30.207 133.234 30.113 133.234 cv
29.973 133.234 29.871 133.227 29.801 133.215 cv
29.727 133.203 29.672 133.187 29.641 133.16 cv
29.605 133.137 29.59 133.105 29.594 133.066 cv
29.598 133.031 29.613 132.988 29.637 132.934 cv
32.508 126.504 li
28.871 126.504 li
28.793 126.508 28.738 126.469 28.699 126.387 cv
28.66 126.312 28.641 126.203 28.645 126.059 cv
28.641 125.984 28.645 125.918 28.66 125.863 cv
28.668 125.809 28.684 125.766 28.703 125.727 cv
28.723 125.691 28.746 125.664 28.773 125.645 cv
28.801 125.629 28.832 125.617 28.871 125.617 cv
33.285 125.617 li
33.34 125.617 33.387 125.625 33.43 125.637 cv
33.469 125.648 33.5 125.672 33.523 125.707 cv
33.543 125.742 33.563 125.785 33.574 125.84 cv
33.582 125.895 33.586 125.965 33.59 126.051 cv
cp
f
36.25 132.559 mo
36.25 132.84 36.203 133.023 36.109 133.117 cv
36.016 133.207 35.848 133.25 35.613 133.254 cv
35.375 133.25 35.215 133.207 35.125 133.117 cv
35.031 133.027 34.984 132.848 34.988 132.578 cv
34.984 132.301 35.031 132.117 35.125 132.023 cv
35.219 131.934 35.387 131.887 35.629 131.887 cv
35.863 131.887 36.023 131.934 36.113 132.023 cv
36.203 132.113 36.25 132.293 36.25 132.559 cv
cp
f
42.59 130.762 mo
42.59 131.168 42.52 131.531 42.383 131.848 cv
42.246 132.164 42.055 132.43 41.805 132.648 cv
41.555 132.867 41.254 133.031 40.91 133.141 cv
40.559 133.25 40.176 133.305 39.758 133.309 cv
39.52 133.305 39.297 133.289 39.09 133.258 cv
38.875 133.227 38.688 133.187 38.527 133.141 cv
38.359 133.094 38.227 133.047 38.125 132.996 cv
38.02 132.953 37.949 132.914 37.922 132.883 cv
37.891 132.855 37.871 132.832 37.859 132.805 cv
37.848 132.785 37.836 132.758 37.828 132.723 cv
37.813 132.691 37.809 132.648 37.809 132.598 cv
37.805 132.547 37.801 132.484 37.805 132.414 cv
37.801 132.352 37.805 132.293 37.813 132.238 cv
37.816 132.184 37.828 132.141 37.844 132.109 cv
37.859 132.078 37.875 132.055 37.898 132.035 cv
37.914 132.023 37.941 132.016 37.973 132.012 cv
38.012 132.016 38.07 132.039 38.152 132.086 cv
38.234 132.133 38.344 132.187 38.484 132.242 cv
38.621 132.301 38.793 132.352 39 132.402 cv
39.203 132.457 39.449 132.484 39.73 132.48 cv
39.992 132.484 40.23 132.453 40.453 132.387 cv
40.668 132.328 40.855 132.23 41.016 132.094 cv
41.172 131.965 41.297 131.797 41.387 131.594 cv
41.477 131.391 41.523 131.145 41.523 130.855 cv
41.523 130.613 41.484 130.402 41.41 130.215 cv
41.332 130.031 41.215 129.875 41.059 129.75 cv
40.898 129.629 40.699 129.539 40.457 129.477 cv
40.215 129.422 39.926 129.391 39.59 129.387 cv
39.352 129.391 39.145 129.402 38.977 129.422 cv
38.801 129.449 38.641 129.461 38.492 129.457 cv
38.379 129.461 38.301 129.434 38.258 129.379 cv
38.207 129.328 38.184 129.23 38.188 129.086 cv
38.188 125.996 li
38.184 125.871 38.215 125.773 38.277 125.711 cv
38.34 125.648 38.426 125.617 38.539 125.617 cv
41.898 125.617 li
41.93 125.617 41.957 125.629 41.988 125.645 cv
42.012 125.664 42.039 125.687 42.063 125.723 cv
42.082 125.762 42.094 125.809 42.105 125.859 cv
42.113 125.918 42.121 125.98 42.121 126.051 cv
42.121 126.191 42.102 126.301 42.063 126.379 cv
42.023 126.457 41.969 126.496 41.906 126.496 cv
39.195 126.496 li
39.195 128.621 li
39.324 128.605 39.461 128.594 39.602 128.59 cv
39.738 128.586 39.895 128.582 40.078 128.582 cv
40.492 128.582 40.859 128.637 41.172 128.738 cv
41.484 128.848 41.742 128.992 41.953 129.18 cv
42.16 129.367 42.32 129.598 42.43 129.867 cv
42.535 130.137 42.59 130.434 42.59 130.762 cv
cp
f
21.969 69.121 mo
45.953 69.121 li
45.953 83.769 li
21.969 83.769 li
cp
0 0 0 0 cmyk
ef
27.41 80.105 mo
27.41 80.176 27.402 80.238 27.395 80.293 cv
27.379 80.348 27.367 80.395 27.352 80.43 cv
27.336 80.469 27.313 80.496 27.281 80.512 cv
27.25 80.531 27.219 80.539 27.188 80.539 cv
22.988 80.539 li
22.93 80.539 22.883 80.535 22.844 80.52 cv
22.801 80.508 22.766 80.484 22.738 80.449 cv
22.707 80.422 22.684 80.375 22.672 80.316 cv
22.656 80.258 22.652 80.187 22.652 80.098 cv
22.652 80.023 22.652 79.953 22.66 79.895 cv
22.664 79.836 22.68 79.785 22.699 79.738 cv
22.719 79.695 22.742 79.652 22.777 79.605 cv
22.805 79.562 22.844 79.512 22.895 79.457 cv
24.414 77.898 li
24.762 77.539 25.043 77.215 25.258 76.93 cv
25.465 76.645 25.629 76.387 25.746 76.148 cv
25.863 75.918 25.938 75.703 25.977 75.508 cv
26.008 75.316 26.027 75.137 26.031 74.969 cv
26.027 74.801 26 74.641 25.945 74.488 cv
25.887 74.34 25.805 74.207 25.699 74.094 cv
25.59 73.98 25.453 73.891 25.297 73.824 cv
25.133 73.758 24.949 73.727 24.738 73.723 cv
24.492 73.727 24.27 73.758 24.074 73.824 cv
23.875 73.891 23.703 73.965 23.559 74.039 cv
23.41 74.121 23.289 74.191 23.191 74.258 cv
23.09 74.324 23.016 74.359 22.969 74.355 cv
22.941 74.359 22.914 74.352 22.895 74.332 cv
22.867 74.32 22.852 74.293 22.84 74.258 cv
22.824 74.223 22.813 74.176 22.805 74.117 cv
22.797 74.059 22.793 73.988 22.793 73.906 cv
22.793 73.848 22.793 73.797 22.797 73.754 cv
22.801 73.711 22.809 73.676 22.82 73.641 cv
22.828 73.613 22.84 73.582 22.859 73.555 cv
22.871 73.527 22.902 73.492 22.953 73.449 cv
22.996 73.41 23.078 73.355 23.195 73.281 cv
23.309 73.215 23.453 73.145 23.629 73.074 cv
23.801 73.008 23.992 72.953 24.203 72.902 cv
24.41 72.859 24.633 72.836 24.867 72.832 cv
25.234 72.836 25.555 72.887 25.832 72.988 cv
26.105 73.094 26.336 73.234 26.52 73.41 cv
26.699 73.594 26.832 73.805 26.926 74.039 cv
27.012 74.281 27.059 74.535 27.063 74.805 cv
27.059 75.051 27.035 75.293 26.996 75.531 cv
26.949 75.773 26.859 76.035 26.723 76.312 cv
26.582 76.594 26.383 76.902 26.121 77.246 cv
25.859 77.59 25.512 77.984 25.078 78.426 cv
23.875 79.684 li
27.18 79.684 li
27.207 79.684 27.238 79.695 27.27 79.711 cv
27.301 79.73 27.324 79.754 27.348 79.789 cv
27.363 79.824 27.379 79.871 27.395 79.922 cv
27.402 79.977 27.41 80.035 27.41 80.105 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
33.758 76.723 mo
33.754 77.309 33.707 77.84 33.621 78.32 cv
33.527 78.805 33.375 79.219 33.164 79.562 cv
32.945 79.91 32.668 80.18 32.324 80.367 cv
31.98 80.559 31.555 80.648 31.055 80.652 cv
30.57 80.648 30.168 80.566 29.844 80.398 cv
29.516 80.227 29.254 79.977 29.055 79.645 cv
28.855 79.316 28.711 78.91 28.629 78.426 cv
28.543 77.945 28.504 77.391 28.504 76.758 cv
28.504 76.184 28.551 75.652 28.645 75.164 cv
28.738 74.684 28.891 74.266 29.102 73.918 cv
29.313 73.574 29.59 73.309 29.938 73.117 cv
30.277 72.93 30.699 72.836 31.207 72.832 cv
31.684 72.836 32.086 72.918 32.414 73.086 cv
32.738 73.258 33.004 73.508 33.207 73.836 cv
33.406 74.168 33.547 74.578 33.633 75.059 cv
33.711 75.547 33.754 76.102 33.758 76.723 cv
cp
32.727 76.793 mo
32.723 76.418 32.707 76.078 32.684 75.773 cv
32.652 75.477 32.613 75.207 32.563 74.973 cv
32.508 74.742 32.441 74.547 32.359 74.379 cv
32.273 74.215 32.172 74.078 32.055 73.969 cv
31.938 73.863 31.801 73.781 31.652 73.73 cv
31.5 73.684 31.332 73.66 31.148 73.656 cv
30.813 73.66 30.543 73.738 30.336 73.895 cv
30.125 74.051 29.961 74.266 29.844 74.539 cv
29.723 74.812 29.641 75.137 29.602 75.504 cv
29.555 75.875 29.535 76.27 29.539 76.687 cv
29.535 77.258 29.563 77.738 29.625 78.137 cv
29.68 78.535 29.773 78.859 29.906 79.105 cv
30.031 79.359 30.195 79.543 30.391 79.652 cv
30.586 79.77 30.824 79.824 31.113 79.824 cv
31.328 79.824 31.52 79.789 31.688 79.719 cv
31.852 79.648 31.996 79.551 32.117 79.418 cv
32.234 79.289 32.332 79.129 32.414 78.945 cv
32.488 78.762 32.551 78.559 32.602 78.332 cv
32.645 78.109 32.68 77.867 32.699 77.605 cv
32.715 77.348 32.723 77.078 32.727 76.793 cv
cp
f
36.254 79.898 mo
36.25 80.18 36.203 80.363 36.113 80.457 cv
36.02 80.547 35.852 80.59 35.613 80.594 cv
35.375 80.59 35.215 80.547 35.125 80.457 cv
35.035 80.367 34.988 80.187 34.992 79.918 cv
34.988 79.641 35.035 79.457 35.129 79.363 cv
35.219 79.273 35.387 79.227 35.633 79.223 cv
35.863 79.227 36.023 79.273 36.117 79.359 cv
36.203 79.453 36.25 79.633 36.254 79.898 cv
cp
f
42.883 76.723 mo
42.879 77.309 42.832 77.84 42.746 78.32 cv
42.652 78.805 42.5 79.219 42.289 79.562 cv
42.07 79.91 41.793 80.18 41.449 80.367 cv
41.105 80.559 40.68 80.648 40.18 80.652 cv
39.695 80.648 39.293 80.566 38.969 80.398 cv
38.641 80.227 38.379 79.977 38.18 79.645 cv
37.98 79.316 37.836 78.91 37.754 78.426 cv
37.668 77.945 37.629 77.391 37.629 76.758 cv
37.629 76.184 37.676 75.652 37.77 75.164 cv
37.863 74.684 38.016 74.266 38.227 73.918 cv
38.438 73.574 38.715 73.309 39.063 73.117 cv
39.402 72.93 39.824 72.836 40.332 72.832 cv
40.809 72.836 41.211 72.918 41.539 73.086 cv
41.863 73.258 42.129 73.508 42.332 73.836 cv
42.531 74.168 42.672 74.578 42.758 75.059 cv
42.836 75.547 42.879 76.102 42.883 76.723 cv
cp
41.852 76.793 mo
41.848 76.418 41.832 76.078 41.809 75.773 cv
41.777 75.477 41.738 75.207 41.688 74.973 cv
41.633 74.742 41.566 74.547 41.484 74.379 cv
41.398 74.215 41.297 74.078 41.18 73.969 cv
41.063 73.863 40.926 73.781 40.777 73.73 cv
40.625 73.684 40.457 73.66 40.273 73.656 cv
39.938 73.66 39.668 73.738 39.461 73.895 cv
39.25 74.051 39.086 74.266 38.969 74.539 cv
38.848 74.812 38.766 75.137 38.727 75.504 cv
38.68 75.875 38.66 76.27 38.664 76.687 cv
38.66 77.258 38.688 77.738 38.75 78.137 cv
38.805 78.535 38.898 78.859 39.031 79.105 cv
39.156 79.359 39.32 79.543 39.516 79.652 cv
39.711 79.77 39.949 79.824 40.238 79.824 cv
40.453 79.824 40.645 79.789 40.813 79.719 cv
40.977 79.648 41.121 79.551 41.242 79.418 cv
41.359 79.289 41.457 79.129 41.539 78.945 cv
41.613 78.762 41.676 78.559 41.727 78.332 cv
41.77 78.109 41.805 77.867 41.824 77.605 cv
41.84 77.348 41.848 77.078 41.852 76.793 cv
cp
f
21.969 16.449 mo
45.953 16.449 li
45.953 31.101 li
21.969 31.101 li
cp
0 0 0 0 cmyk
ef
27.398 27.426 mo
27.398 27.496 27.391 27.559 27.383 27.613 cv
27.367 27.668 27.355 27.715 27.34 27.75 cv
27.324 27.789 27.301 27.816 27.27 27.832 cv
27.238 27.852 27.207 27.859 27.176 27.859 cv
22.984 27.859 li
22.93 27.859 22.883 27.855 22.844 27.84 cv
22.801 27.832 22.766 27.809 22.738 27.773 cv
22.707 27.746 22.684 27.699 22.672 27.637 cv
22.656 27.578 22.652 27.508 22.652 27.422 cv
22.652 27.348 22.652 27.277 22.66 27.215 cv
22.664 27.156 22.68 27.105 22.699 27.059 cv
22.719 27.016 22.742 26.973 22.773 26.926 cv
22.801 26.887 22.84 26.836 22.895 26.781 cv
24.41 25.223 li
24.758 24.863 25.035 24.543 25.25 24.258 cv
25.461 23.973 25.625 23.711 25.742 23.477 cv
25.852 23.242 25.93 23.031 25.969 22.84 cv
26.004 22.648 26.02 22.469 26.023 22.297 cv
26.02 22.133 25.992 21.973 25.938 21.82 cv
25.879 21.672 25.797 21.539 25.691 21.426 cv
25.582 21.316 25.449 21.227 25.289 21.156 cv
25.125 21.09 24.938 21.059 24.734 21.055 cv
24.484 21.059 24.266 21.09 24.07 21.156 cv
23.875 21.227 23.703 21.301 23.555 21.375 cv
23.406 21.457 23.281 21.527 23.188 21.59 cv
23.086 21.656 23.016 21.691 22.969 21.687 cv
22.938 21.691 22.91 21.684 22.891 21.664 cv
22.867 21.652 22.848 21.625 22.836 21.59 cv
22.82 21.559 22.813 21.512 22.805 21.449 cv
22.797 21.391 22.793 21.32 22.793 21.238 cv
22.793 21.18 22.793 21.129 22.797 21.086 cv
22.801 21.047 22.809 21.012 22.82 20.977 cv
22.828 20.949 22.84 20.918 22.859 20.887 cv
22.871 20.859 22.902 20.828 22.953 20.785 cv
22.996 20.746 23.078 20.687 23.195 20.617 cv
23.309 20.547 23.453 20.48 23.629 20.41 cv
23.801 20.344 23.992 20.285 24.203 20.234 cv
24.41 20.191 24.629 20.168 24.859 20.164 cv
25.227 20.168 25.547 20.219 25.824 20.32 cv
26.098 20.426 26.328 20.566 26.508 20.746 cv
26.688 20.926 26.824 21.137 26.918 21.375 cv
27.008 21.613 27.051 21.867 27.055 22.133 cv
27.051 22.383 27.031 22.625 26.988 22.859 cv
26.941 23.102 26.848 23.359 26.715 23.637 cv
26.574 23.918 26.375 24.23 26.113 24.57 cv
25.852 24.914 25.504 25.305 25.07 25.75 cv
23.871 27.004 li
27.172 27.004 li
27.199 27.004 27.23 27.016 27.262 27.031 cv
27.289 27.051 27.313 27.074 27.336 27.109 cv
27.352 27.148 27.367 27.195 27.383 27.242 cv
27.391 27.297 27.398 27.355 27.398 27.426 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
33.48 27.426 mo
33.48 27.496 33.473 27.559 33.465 27.613 cv
33.449 27.668 33.438 27.715 33.422 27.75 cv
33.406 27.789 33.383 27.816 33.352 27.832 cv
33.32 27.852 33.289 27.859 33.258 27.859 cv
29.066 27.859 li
29.012 27.859 28.965 27.855 28.926 27.84 cv
28.883 27.832 28.848 27.809 28.82 27.773 cv
28.789 27.746 28.766 27.699 28.754 27.637 cv
28.738 27.578 28.734 27.508 28.734 27.422 cv
28.734 27.348 28.734 27.277 28.742 27.215 cv
28.746 27.156 28.762 27.105 28.781 27.059 cv
28.801 27.016 28.824 26.973 28.855 26.926 cv
28.883 26.887 28.922 26.836 28.977 26.781 cv
30.492 25.223 li
30.84 24.863 31.117 24.543 31.332 24.258 cv
31.543 23.973 31.707 23.711 31.824 23.477 cv
31.934 23.242 32.012 23.031 32.051 22.84 cv
32.086 22.648 32.102 22.469 32.105 22.297 cv
32.102 22.133 32.074 21.973 32.02 21.82 cv
31.961 21.672 31.879 21.539 31.773 21.426 cv
31.664 21.316 31.531 21.227 31.371 21.156 cv
31.207 21.09 31.02 21.059 30.816 21.055 cv
30.566 21.059 30.348 21.09 30.152 21.156 cv
29.957 21.227 29.785 21.301 29.637 21.375 cv
29.488 21.457 29.363 21.527 29.27 21.59 cv
29.168 21.656 29.098 21.691 29.051 21.687 cv
29.02 21.691 28.992 21.684 28.973 21.664 cv
28.949 21.652 28.93 21.625 28.918 21.59 cv
28.902 21.559 28.895 21.512 28.887 21.449 cv
28.879 21.391 28.875 21.32 28.875 21.238 cv
28.875 21.18 28.875 21.129 28.879 21.086 cv
28.883 21.047 28.891 21.012 28.902 20.977 cv
28.91 20.949 28.922 20.918 28.941 20.887 cv
28.953 20.859 28.984 20.828 29.035 20.785 cv
29.078 20.746 29.16 20.687 29.277 20.617 cv
29.391 20.547 29.535 20.48 29.711 20.41 cv
29.883 20.344 30.074 20.285 30.285 20.234 cv
30.492 20.191 30.711 20.168 30.941 20.164 cv
31.309 20.168 31.629 20.219 31.906 20.32 cv
32.18 20.426 32.41 20.566 32.59 20.746 cv
32.77 20.926 32.906 21.137 33 21.375 cv
33.09 21.613 33.133 21.867 33.137 22.133 cv
33.133 22.383 33.113 22.625 33.07 22.859 cv
33.023 23.102 32.93 23.359 32.797 23.637 cv
32.656 23.918 32.457 24.23 32.195 24.57 cv
31.934 24.914 31.586 25.305 31.152 25.75 cv
29.953 27.004 li
33.254 27.004 li
33.281 27.004 33.313 27.016 33.344 27.031 cv
33.371 27.051 33.395 27.074 33.418 27.109 cv
33.434 27.148 33.449 27.195 33.465 27.242 cv
33.473 27.297 33.48 27.355 33.48 27.426 cv
cp
f
36.25 27.219 mo
36.25 27.5 36.203 27.684 36.109 27.777 cv
36.016 27.867 35.848 27.91 35.613 27.914 cv
35.375 27.91 35.215 27.867 35.125 27.777 cv
35.031 27.687 34.984 27.508 34.988 27.238 cv
34.984 26.961 35.031 26.777 35.125 26.684 cv
35.219 26.594 35.387 26.547 35.629 26.547 cv
35.863 26.547 36.023 26.594 36.113 26.684 cv
36.203 26.773 36.25 26.953 36.25 27.219 cv
cp
f
42.59 25.422 mo
42.59 25.828 42.52 26.191 42.383 26.508 cv
42.246 26.824 42.055 27.09 41.805 27.309 cv
41.555 27.527 41.254 27.691 40.91 27.801 cv
40.559 27.91 40.176 27.965 39.758 27.969 cv
39.52 27.965 39.297 27.949 39.09 27.918 cv
38.875 27.887 38.688 27.848 38.527 27.801 cv
38.359 27.754 38.227 27.707 38.125 27.656 cv
38.02 27.613 37.949 27.574 37.922 27.543 cv
37.891 27.516 37.871 27.492 37.859 27.465 cv
37.848 27.445 37.836 27.418 37.828 27.383 cv
37.813 27.352 37.809 27.309 37.809 27.258 cv
37.805 27.207 37.801 27.145 37.805 27.074 cv
37.801 27.012 37.805 26.953 37.813 26.898 cv
37.816 26.844 37.828 26.801 37.844 26.77 cv
37.859 26.738 37.875 26.715 37.898 26.695 cv
37.914 26.684 37.941 26.676 37.973 26.672 cv
38.012 26.676 38.07 26.699 38.152 26.746 cv
38.234 26.793 38.344 26.848 38.484 26.902 cv
38.621 26.961 38.793 27.012 39 27.062 cv
39.203 27.117 39.449 27.145 39.73 27.141 cv
39.992 27.145 40.23 27.113 40.453 27.047 cv
40.668 26.988 40.855 26.891 41.016 26.754 cv
41.172 26.625 41.297 26.457 41.387 26.254 cv
41.477 26.051 41.523 25.805 41.523 25.516 cv
41.523 25.273 41.484 25.062 41.41 24.875 cv
41.332 24.691 41.215 24.535 41.059 24.41 cv
40.898 24.289 40.699 24.199 40.457 24.137 cv
40.215 24.082 39.926 24.051 39.59 24.047 cv
39.352 24.051 39.145 24.062 38.977 24.082 cv
38.801 24.109 38.641 24.121 38.492 24.117 cv
38.379 24.121 38.301 24.094 38.258 24.039 cv
38.207 23.988 38.184 23.891 38.188 23.746 cv
38.188 20.656 li
38.184 20.531 38.215 20.434 38.277 20.371 cv
38.34 20.309 38.426 20.277 38.539 20.277 cv
41.898 20.277 li
41.93 20.277 41.957 20.289 41.988 20.305 cv
42.012 20.324 42.039 20.348 42.063 20.383 cv
42.082 20.422 42.094 20.469 42.105 20.52 cv
42.113 20.578 42.121 20.641 42.121 20.711 cv
42.121 20.852 42.102 20.961 42.063 21.039 cv
42.023 21.117 41.969 21.156 41.906 21.156 cv
39.195 21.156 li
39.195 23.281 li
39.324 23.266 39.461 23.254 39.602 23.25 cv
39.738 23.246 39.895 23.242 40.078 23.242 cv
40.492 23.242 40.859 23.297 41.172 23.398 cv
41.484 23.508 41.742 23.652 41.953 23.84 cv
42.16 24.027 42.32 24.258 42.43 24.527 cv
42.535 24.797 42.59 25.094 42.59 25.422 cv
cp
f
59.5 517.16 mo
59.496 517.234 59.492 517.297 59.484 517.348 cv
59.473 517.402 59.457 517.445 59.438 517.473 cv
59.414 517.508 59.391 517.531 59.367 517.539 cv
59.344 517.555 59.316 517.559 59.289 517.559 cv
55.328 517.559 li
55.301 517.559 55.277 517.555 55.254 517.539 cv
55.23 517.531 55.207 517.508 55.188 517.473 cv
55.164 517.445 55.148 517.402 55.137 517.348 cv
55.121 517.297 55.113 517.234 55.117 517.16 cv
55.113 517.09 55.121 517.031 55.137 516.98 cv
55.148 516.93 55.16 516.887 55.18 516.852 cv
55.195 516.82 55.219 516.797 55.242 516.777 cv
55.266 516.762 55.293 516.75 55.328 516.75 cv
56.914 516.75 li
56.914 510.984 li
55.445 511.855 li
55.371 511.902 55.313 511.926 55.27 511.93 cv
55.223 511.941 55.188 511.934 55.16 511.902 cv
55.129 511.879 55.109 511.836 55.102 511.777 cv
55.094 511.719 55.09 511.645 55.09 511.551 cv
55.09 511.488 55.09 511.43 55.098 511.383 cv
55.102 511.336 55.113 511.297 55.125 511.266 cv
55.133 511.234 55.148 511.207 55.172 511.184 cv
55.195 511.16 55.223 511.137 55.258 511.113 cv
57.008 509.996 li
57.02 509.984 57.039 509.973 57.066 509.965 cv
57.086 509.957 57.117 509.949 57.152 509.941 cv
57.184 509.934 57.223 509.93 57.273 509.93 cv
57.316 509.93 57.375 509.93 57.453 509.926 cv
57.543 509.93 57.621 509.934 57.688 509.937 cv
57.746 509.949 57.797 509.961 57.832 509.969 cv
57.863 509.984 57.887 510 57.902 510.02 cv
57.914 510.043 57.918 510.066 57.922 510.09 cv
57.922 516.75 li
59.289 516.75 li
59.316 516.75 59.348 516.762 59.379 516.777 cv
59.406 516.797 59.426 516.82 59.445 516.852 cv
59.461 516.887 59.477 516.93 59.484 516.98 cv
59.492 517.031 59.496 517.09 59.5 517.16 cv
cp
f
131.363 517.125 mo
131.363 517.195 131.355 517.258 131.348 517.312 cv
131.332 517.367 131.32 517.414 131.305 517.449 cv
131.289 517.488 131.266 517.516 131.234 517.531 cv
131.203 517.551 131.172 517.559 131.141 517.559 cv
126.949 517.559 li
126.895 517.559 126.848 517.555 126.809 517.539 cv
126.766 517.531 126.73 517.508 126.703 517.473 cv
126.672 517.445 126.648 517.398 126.637 517.336 cv
126.621 517.277 126.617 517.207 126.617 517.121 cv
126.617 517.047 126.617 516.977 126.625 516.914 cv
126.629 516.855 126.645 516.805 126.664 516.758 cv
126.684 516.715 126.707 516.672 126.738 516.625 cv
126.766 516.586 126.805 516.535 126.859 516.48 cv
128.375 514.922 li
128.723 514.562 129 514.242 129.215 513.957 cv
129.426 513.672 129.59 513.41 129.707 513.176 cv
129.816 512.941 129.895 512.73 129.934 512.539 cv
129.969 512.348 129.984 512.168 129.988 511.996 cv
129.984 511.832 129.957 511.672 129.902 511.52 cv
129.844 511.371 129.762 511.238 129.656 511.125 cv
129.547 511.016 129.414 510.926 129.254 510.855 cv
129.09 510.789 128.902 510.758 128.699 510.754 cv
128.449 510.758 128.23 510.789 128.035 510.855 cv
127.84 510.926 127.668 511 127.52 511.074 cv
127.371 511.156 127.246 511.227 127.152 511.289 cv
127.051 511.355 126.98 511.391 126.934 511.387 cv
126.902 511.391 126.875 511.383 126.855 511.363 cv
126.832 511.352 126.813 511.324 126.801 511.289 cv
126.785 511.258 126.777 511.211 126.77 511.148 cv
126.762 511.09 126.758 511.02 126.758 510.937 cv
126.758 510.879 126.758 510.828 126.762 510.785 cv
126.766 510.746 126.773 510.711 126.785 510.676 cv
126.793 510.648 126.805 510.617 126.824 510.586 cv
126.836 510.559 126.867 510.527 126.918 510.484 cv
126.961 510.445 127.043 510.387 127.16 510.316 cv
127.273 510.246 127.418 510.18 127.594 510.109 cv
127.766 510.043 127.957 509.984 128.168 509.934 cv
128.375 509.891 128.594 509.867 128.824 509.863 cv
129.191 509.867 129.512 509.918 129.789 510.02 cv
130.063 510.125 130.293 510.266 130.473 510.445 cv
130.652 510.625 130.789 510.836 130.883 511.074 cv
130.973 511.312 131.016 511.566 131.02 511.832 cv
131.016 512.082 130.996 512.324 130.953 512.559 cv
130.906 512.801 130.813 513.059 130.68 513.336 cv
130.539 513.617 130.34 513.93 130.078 514.27 cv
129.816 514.613 129.469 515.004 129.035 515.449 cv
127.836 516.703 li
131.137 516.703 li
131.164 516.703 131.195 516.715 131.227 516.73 cv
131.254 516.75 131.277 516.773 131.301 516.809 cv
131.316 516.848 131.332 516.895 131.348 516.941 cv
131.355 516.996 131.363 517.055 131.363 517.125 cv
cp
f
203.563 515.402 mo
203.559 515.535 203.539 515.637 203.504 515.707 cv
203.461 515.781 203.406 515.82 203.344 515.816 cv
202.484 515.816 li
202.484 517.41 li
202.48 517.445 202.473 517.473 202.461 517.492 cv
202.441 517.516 202.414 517.531 202.375 517.547 cv
202.336 517.562 202.281 517.574 202.219 517.582 cv
202.152 517.59 202.07 517.594 201.973 517.594 cv
201.871 517.594 201.793 517.59 201.73 517.582 cv
201.668 517.574 201.617 517.562 201.578 517.547 cv
201.539 517.531 201.512 517.516 201.496 517.492 cv
201.48 517.473 201.473 517.445 201.477 517.41 cv
201.477 515.816 li
198.375 515.816 li
198.328 515.82 198.293 515.812 198.262 515.801 cv
198.23 515.793 198.199 515.773 198.176 515.738 cv
198.145 515.711 198.129 515.664 198.121 515.602 cv
198.113 515.543 198.109 515.469 198.109 515.371 cv
198.109 515.301 198.109 515.234 198.113 515.176 cv
198.117 515.117 198.125 515.062 198.137 515.016 cv
198.148 514.969 198.164 514.922 198.184 514.875 cv
198.203 514.828 198.227 514.781 198.254 514.73 cv
200.957 510.121 li
200.977 510.094 201.004 510.066 201.043 510.039 cv
201.078 510.02 201.129 510 201.191 509.98 cv
201.25 509.969 201.32 509.957 201.41 509.949 cv
201.496 509.945 201.602 509.941 201.723 509.941 cv
201.852 509.941 201.965 509.949 202.063 509.957 cv
202.16 509.973 202.238 509.984 202.301 509.996 cv
202.355 510.016 202.402 510.035 202.438 510.059 cv
202.465 510.082 202.48 510.113 202.484 510.145 cv
202.484 514.988 li
203.344 514.988 li
203.406 514.992 203.461 515.027 203.5 515.09 cv
203.539 515.16 203.559 515.262 203.563 515.402 cv
cp
201.477 510.824 mo
201.469 510.824 li
199.031 514.988 li
201.477 514.988 li
cp
f
275.348 515.105 mo
275.344 515.437 275.293 515.758 275.195 516.07 cv
275.09 516.383 274.934 516.656 274.727 516.891 cv
274.512 517.125 274.246 517.316 273.922 517.457 cv
273.594 517.598 273.211 517.664 272.773 517.668 cv
272.457 517.664 272.176 517.629 271.938 517.551 cv
271.691 517.477 271.48 517.363 271.305 517.219 cv
271.121 517.078 270.973 516.902 270.855 516.687 cv
270.734 516.48 270.637 516.238 270.566 515.965 cv
270.488 515.695 270.438 515.402 270.41 515.078 cv
270.375 514.762 270.359 514.418 270.363 514.051 cv
270.359 513.727 270.379 513.398 270.418 513.066 cv
270.453 512.734 270.516 512.414 270.605 512.105 cv
270.691 511.797 270.813 511.508 270.969 511.234 cv
271.125 510.965 271.316 510.727 271.551 510.523 cv
271.781 510.324 272.063 510.164 272.387 510.047 cv
272.707 509.93 273.082 509.871 273.52 509.871 cv
273.66 509.871 273.809 509.883 273.957 509.898 cv
274.105 509.922 274.242 509.945 274.367 509.969 cv
274.492 510 274.598 510.031 274.684 510.066 cv
274.77 510.102 274.824 510.129 274.852 510.152 cv
274.879 510.176 274.898 510.199 274.914 510.223 cv
274.922 510.246 274.934 510.273 274.945 510.305 cv
274.949 510.336 274.957 510.371 274.965 510.402 cv
274.969 510.441 274.969 510.484 274.973 510.539 cv
274.969 510.609 274.969 510.672 274.969 510.723 cv
274.965 510.773 274.957 510.812 274.945 510.844 cv
274.93 510.875 274.91 510.898 274.891 510.914 cv
274.867 510.93 274.84 510.937 274.809 510.937 cv
274.762 510.937 274.703 510.926 274.629 510.898 cv
274.555 510.871 274.465 510.84 274.359 510.805 cv
274.254 510.773 274.125 510.742 273.977 510.715 cv
273.824 510.691 273.652 510.68 273.453 510.676 cv
273.09 510.68 272.777 510.754 272.516 510.898 cv
272.25 511.051 272.035 511.25 271.871 511.496 cv
271.707 511.75 271.582 512.039 271.504 512.367 cv
271.422 512.695 271.379 513.039 271.367 513.398 cv
271.469 513.34 271.582 513.281 271.711 513.223 cv
271.836 513.168 271.973 513.117 272.125 513.066 cv
272.273 513.023 272.434 512.984 272.602 512.953 cv
272.77 512.922 272.949 512.906 273.145 512.906 cv
273.551 512.906 273.898 512.965 274.18 513.074 cv
274.461 513.187 274.688 513.34 274.859 513.535 cv
275.031 513.734 275.156 513.969 275.234 514.234 cv
275.309 514.508 275.344 514.797 275.348 515.105 cv
cp
274.324 515.199 mo
274.32 514.973 274.297 514.766 274.258 514.578 cv
274.211 514.395 274.137 514.238 274.031 514.109 cv
273.926 513.98 273.785 513.879 273.609 513.809 cv
273.434 513.738 273.219 513.703 272.961 513.703 cv
272.816 513.703 272.672 513.719 272.527 513.742 cv
272.379 513.77 272.238 513.805 272.105 513.848 cv
271.973 513.895 271.844 513.945 271.719 514.008 cv
271.594 514.07 271.48 514.137 271.387 514.199 cv
271.383 514.707 271.414 515.129 271.48 515.469 cv
271.543 515.809 271.637 516.082 271.762 516.285 cv
271.883 516.492 272.039 516.637 272.223 516.723 cv
272.402 516.812 272.617 516.855 272.867 516.855 cv
273.117 516.855 273.332 516.809 273.516 516.715 cv
273.699 516.621 273.852 516.496 273.973 516.336 cv
274.094 516.18 274.184 516.004 274.238 515.805 cv
274.293 515.609 274.32 515.406 274.324 515.199 cv
cp
f
347.211 515.613 mo
347.211 515.941 347.152 516.234 347.035 516.488 cv
346.918 516.746 346.746 516.961 346.527 517.137 cv
346.305 517.316 346.035 517.449 345.711 517.535 cv
345.383 517.621 345.012 517.664 344.598 517.668 cv
344.207 517.664 343.855 517.625 343.547 517.547 cv
343.238 517.469 342.977 517.348 342.762 517.184 cv
342.547 517.023 342.383 516.828 342.27 516.59 cv
342.156 516.359 342.102 516.09 342.102 515.789 cv
342.102 515.555 342.141 515.336 342.219 515.133 cv
342.297 514.934 342.406 514.75 342.555 514.582 cv
342.699 514.418 342.883 514.262 343.098 514.113 cv
343.309 513.965 343.551 513.824 343.824 513.691 cv
343.59 513.574 343.383 513.449 343.203 513.309 cv
343.023 513.176 342.871 513.027 342.746 512.867 cv
342.621 512.711 342.523 512.543 342.461 512.359 cv
342.391 512.184 342.359 511.988 342.363 511.777 cv
342.359 511.516 342.406 511.266 342.508 511.031 cv
342.602 510.797 342.746 510.594 342.941 510.422 cv
343.129 510.25 343.375 510.117 343.68 510.016 cv
343.977 509.918 344.328 509.867 344.727 509.863 cv
345.109 509.867 345.438 509.914 345.719 510.004 cv
345.992 510.098 346.223 510.223 346.41 510.379 cv
346.59 510.539 346.727 510.723 346.813 510.937 cv
346.898 511.156 346.941 511.387 346.941 511.629 cv
346.941 511.828 346.906 512.02 346.844 512.203 cv
346.773 512.391 346.68 512.566 346.559 512.727 cv
346.43 512.895 346.277 513.047 346.098 513.187 cv
345.918 513.328 345.711 513.461 345.477 513.586 cv
345.754 513.727 346 513.867 346.219 514.008 cv
346.434 514.152 346.613 514.309 346.762 514.473 cv
346.902 514.641 347.016 514.816 347.094 515 cv
347.172 515.187 347.211 515.391 347.211 515.613 cv
cp
345.945 511.723 mo
345.945 511.559 345.914 511.41 345.859 511.277 cv
345.801 511.145 345.719 511.031 345.613 510.937 cv
345.5 510.844 345.363 510.773 345.203 510.727 cv
345.039 510.68 344.855 510.656 344.652 510.652 cv
344.227 510.656 343.906 510.75 343.691 510.937 cv
343.473 511.129 343.367 511.391 343.367 511.723 cv
343.367 511.875 343.391 512.02 343.445 512.148 cv
343.496 512.281 343.578 512.402 343.691 512.52 cv
343.801 512.637 343.941 512.754 344.113 512.863 cv
344.281 512.977 344.484 513.09 344.723 513.211 cv
345.113 513.008 345.418 512.785 345.629 512.539 cv
345.84 512.293 345.945 512.02 345.945 511.723 cv
cp
346.191 515.719 mo
346.191 515.539 346.156 515.379 346.09 515.23 cv
346.023 515.09 345.922 514.953 345.789 514.82 cv
345.652 514.695 345.484 514.57 345.285 514.449 cv
345.082 514.332 344.852 514.207 344.586 514.078 cv
344.336 514.203 344.117 514.324 343.938 514.441 cv
343.75 514.562 343.598 514.687 343.48 514.816 cv
343.355 514.949 343.266 515.086 343.211 515.227 cv
343.148 515.367 343.121 515.523 343.121 515.695 cv
343.121 516.074 343.25 516.367 343.512 516.574 cv
343.77 516.785 344.156 516.891 344.676 516.887 cv
345.172 516.891 345.551 516.785 345.809 516.574 cv
346.063 516.363 346.191 516.078 346.191 515.719 cv
cp
f
415.898 517.16 mo
415.895 517.234 415.891 517.297 415.883 517.348 cv
415.871 517.402 415.855 517.445 415.836 517.473 cv
415.813 517.508 415.789 517.531 415.766 517.539 cv
415.742 517.555 415.715 517.559 415.688 517.559 cv
411.727 517.559 li
411.699 517.559 411.676 517.555 411.652 517.539 cv
411.629 517.531 411.605 517.508 411.586 517.473 cv
411.563 517.445 411.547 517.402 411.535 517.348 cv
411.52 517.297 411.512 517.234 411.516 517.16 cv
411.512 517.09 411.52 517.031 411.535 516.98 cv
411.547 516.93 411.559 516.887 411.578 516.852 cv
411.594 516.82 411.617 516.797 411.641 516.777 cv
411.664 516.762 411.691 516.75 411.727 516.75 cv
413.313 516.75 li
413.313 510.984 li
411.844 511.855 li
411.77 511.902 411.711 511.926 411.668 511.93 cv
411.621 511.941 411.586 511.934 411.559 511.902 cv
411.527 511.879 411.508 511.836 411.5 511.777 cv
411.492 511.719 411.488 511.645 411.488 511.551 cv
411.488 511.488 411.488 511.43 411.496 511.383 cv
411.5 511.336 411.512 511.297 411.523 511.266 cv
411.531 511.234 411.547 511.207 411.57 511.184 cv
411.594 511.16 411.621 511.137 411.656 511.113 cv
413.406 509.996 li
413.418 509.984 413.438 509.973 413.465 509.965 cv
413.484 509.957 413.516 509.949 413.551 509.941 cv
413.582 509.934 413.621 509.93 413.672 509.93 cv
413.715 509.93 413.773 509.93 413.852 509.926 cv
413.941 509.93 414.02 509.934 414.086 509.937 cv
414.145 509.949 414.195 509.961 414.23 509.969 cv
414.262 509.984 414.285 510 414.301 510.02 cv
414.313 510.043 414.316 510.066 414.32 510.09 cv
414.32 516.75 li
415.688 516.75 li
415.715 516.75 415.746 516.762 415.777 516.777 cv
415.805 516.797 415.824 516.82 415.844 516.852 cv
415.859 516.887 415.875 516.93 415.883 516.98 cv
415.891 517.031 415.895 517.09 415.898 517.16 cv
cp
f
422.254 513.75 mo
422.25 514.332 422.203 514.863 422.117 515.344 cv
422.023 515.828 421.871 516.242 421.66 516.586 cv
421.441 516.93 421.164 517.199 420.824 517.387 cv
420.477 517.574 420.055 517.664 419.555 517.668 cv
419.078 517.664 418.676 517.582 418.352 517.414 cv
418.023 517.246 417.762 516.996 417.563 516.664 cv
417.359 516.336 417.215 515.93 417.137 515.445 cv
417.051 514.965 417.012 514.41 417.012 513.785 cv
417.012 513.207 417.059 512.68 417.152 512.195 cv
417.246 511.719 417.398 511.305 417.609 510.953 cv
417.82 510.609 418.098 510.34 418.441 510.148 cv
418.785 509.961 419.207 509.867 419.707 509.863 cv
420.184 509.867 420.586 509.953 420.914 510.121 cv
421.242 510.293 421.504 510.543 421.703 510.871 cv
421.902 511.203 422.043 511.609 422.129 512.09 cv
422.207 512.574 422.25 513.125 422.254 513.75 cv
cp
421.223 513.82 mo
421.219 513.445 421.207 513.105 421.184 512.801 cv
421.156 512.5 421.113 512.234 421.063 512.004 cv
421.008 511.777 420.941 511.582 420.855 511.41 cv
420.77 511.246 420.668 511.109 420.555 511 cv
420.434 510.898 420.301 510.82 420.152 510.766 cv
420.004 510.719 419.836 510.691 419.648 510.691 cv
419.316 510.691 419.047 510.77 418.84 510.926 cv
418.629 511.082 418.465 511.297 418.348 511.57 cv
418.23 511.844 418.148 512.164 418.105 512.531 cv
418.063 512.898 418.043 513.293 418.043 513.715 cv
418.043 514.285 418.07 514.77 418.129 515.16 cv
418.188 515.559 418.281 515.879 418.406 516.129 cv
418.531 516.379 418.691 516.562 418.895 516.676 cv
419.09 516.789 419.332 516.844 419.613 516.844 cv
419.832 516.844 420.023 516.809 420.191 516.738 cv
420.355 516.668 420.496 516.57 420.617 516.437 cv
420.734 516.309 420.836 516.148 420.914 515.965 cv
420.992 515.785 421.055 515.582 421.102 515.355 cv
421.148 515.133 421.18 514.895 421.195 514.633 cv
421.211 514.375 421.219 514.102 421.223 513.82 cv
cp
f
487.781 517.16 mo
487.777 517.234 487.773 517.297 487.766 517.348 cv
487.754 517.402 487.738 517.445 487.719 517.473 cv
487.695 517.508 487.672 517.531 487.648 517.539 cv
487.625 517.555 487.598 517.559 487.57 517.559 cv
483.609 517.559 li
483.582 517.559 483.559 517.555 483.535 517.539 cv
483.512 517.531 483.488 517.508 483.469 517.473 cv
483.445 517.445 483.43 517.402 483.418 517.348 cv
483.402 517.297 483.395 517.234 483.398 517.16 cv
483.395 517.09 483.402 517.031 483.418 516.98 cv
483.43 516.93 483.441 516.887 483.461 516.852 cv
483.477 516.82 483.5 516.797 483.523 516.777 cv
483.547 516.762 483.574 516.75 483.609 516.75 cv
485.195 516.75 li
485.195 510.984 li
483.727 511.855 li
483.652 511.902 483.594 511.926 483.551 511.93 cv
483.504 511.941 483.469 511.934 483.441 511.902 cv
483.41 511.879 483.391 511.836 483.383 511.777 cv
483.375 511.719 483.371 511.645 483.371 511.551 cv
483.371 511.488 483.371 511.43 483.379 511.383 cv
483.383 511.336 483.395 511.297 483.406 511.266 cv
483.414 511.234 483.43 511.207 483.453 511.184 cv
483.477 511.16 483.504 511.137 483.539 511.113 cv
485.289 509.996 li
485.301 509.984 485.32 509.973 485.348 509.965 cv
485.367 509.957 485.398 509.949 485.434 509.941 cv
485.465 509.934 485.504 509.93 485.555 509.93 cv
485.598 509.93 485.656 509.93 485.734 509.926 cv
485.824 509.93 485.902 509.934 485.969 509.937 cv
486.027 509.949 486.078 509.961 486.113 509.969 cv
486.145 509.984 486.168 510 486.184 510.02 cv
486.195 510.043 486.199 510.066 486.203 510.09 cv
486.203 516.75 li
487.57 516.75 li
487.598 516.75 487.629 516.762 487.66 516.777 cv
487.688 516.797 487.707 516.82 487.727 516.852 cv
487.742 516.887 487.758 516.93 487.766 516.98 cv
487.773 517.031 487.777 517.09 487.781 517.16 cv
cp
f
493.883 517.125 mo
493.883 517.195 493.875 517.258 493.867 517.312 cv
493.852 517.367 493.84 517.414 493.824 517.449 cv
493.809 517.488 493.785 517.516 493.754 517.531 cv
493.723 517.551 493.691 517.559 493.66 517.559 cv
489.469 517.559 li
489.414 517.559 489.367 517.555 489.328 517.539 cv
489.285 517.531 489.25 517.508 489.223 517.473 cv
489.191 517.445 489.168 517.398 489.156 517.336 cv
489.141 517.277 489.137 517.207 489.137 517.121 cv
489.137 517.047 489.137 516.977 489.145 516.914 cv
489.148 516.855 489.164 516.805 489.184 516.758 cv
489.203 516.715 489.227 516.672 489.258 516.625 cv
489.285 516.586 489.324 516.535 489.379 516.48 cv
490.895 514.922 li
491.242 514.562 491.52 514.242 491.734 513.957 cv
491.945 513.672 492.109 513.41 492.227 513.176 cv
492.336 512.941 492.414 512.73 492.453 512.539 cv
492.488 512.348 492.504 512.168 492.508 511.996 cv
492.504 511.832 492.477 511.672 492.422 511.52 cv
492.363 511.371 492.281 511.238 492.176 511.125 cv
492.066 511.016 491.934 510.926 491.773 510.855 cv
491.609 510.789 491.422 510.758 491.219 510.754 cv
490.969 510.758 490.75 510.789 490.555 510.855 cv
490.359 510.926 490.188 511 490.039 511.074 cv
489.891 511.156 489.766 511.227 489.672 511.289 cv
489.57 511.355 489.5 511.391 489.453 511.387 cv
489.422 511.391 489.395 511.383 489.375 511.363 cv
489.352 511.352 489.332 511.324 489.32 511.289 cv
489.305 511.258 489.297 511.211 489.289 511.148 cv
489.281 511.09 489.277 511.02 489.277 510.937 cv
489.277 510.879 489.277 510.828 489.281 510.785 cv
489.285 510.746 489.293 510.711 489.305 510.676 cv
489.313 510.648 489.324 510.617 489.344 510.586 cv
489.355 510.559 489.387 510.527 489.438 510.484 cv
489.48 510.445 489.563 510.387 489.68 510.316 cv
489.793 510.246 489.938 510.18 490.113 510.109 cv
490.285 510.043 490.477 509.984 490.688 509.934 cv
490.895 509.891 491.113 509.867 491.344 509.863 cv
491.711 509.867 492.031 509.918 492.309 510.02 cv
492.582 510.125 492.813 510.266 492.992 510.445 cv
493.172 510.625 493.309 510.836 493.402 511.074 cv
493.492 511.312 493.535 511.566 493.539 511.832 cv
493.535 512.082 493.516 512.324 493.473 512.559 cv
493.426 512.801 493.332 513.059 493.199 513.336 cv
493.059 513.617 492.859 513.93 492.598 514.27 cv
492.336 514.613 491.988 515.004 491.555 515.449 cv
490.355 516.703 li
493.656 516.703 li
493.684 516.703 493.715 516.715 493.746 516.73 cv
493.773 516.75 493.797 516.773 493.82 516.809 cv
493.836 516.848 493.852 516.895 493.867 516.941 cv
493.875 516.996 493.883 517.055 493.883 517.125 cv
cp
f
559.66 517.16 mo
559.656 517.234 559.652 517.297 559.645 517.348 cv
559.633 517.402 559.617 517.445 559.598 517.473 cv
559.574 517.508 559.551 517.531 559.527 517.539 cv
559.504 517.555 559.477 517.559 559.449 517.559 cv
555.488 517.559 li
555.461 517.559 555.438 517.555 555.414 517.539 cv
555.391 517.531 555.367 517.508 555.348 517.473 cv
555.324 517.445 555.309 517.402 555.297 517.348 cv
555.281 517.297 555.273 517.234 555.277 517.16 cv
555.273 517.09 555.281 517.031 555.297 516.98 cv
555.309 516.93 555.32 516.887 555.34 516.852 cv
555.355 516.82 555.379 516.797 555.402 516.777 cv
555.426 516.762 555.453 516.75 555.488 516.75 cv
557.074 516.75 li
557.074 510.984 li
555.605 511.855 li
555.531 511.902 555.473 511.926 555.43 511.93 cv
555.383 511.941 555.348 511.934 555.32 511.902 cv
555.289 511.879 555.27 511.836 555.262 511.777 cv
555.254 511.719 555.25 511.645 555.25 511.551 cv
555.25 511.488 555.25 511.43 555.258 511.383 cv
555.262 511.336 555.273 511.297 555.285 511.266 cv
555.293 511.234 555.309 511.207 555.332 511.184 cv
555.355 511.16 555.383 511.137 555.418 511.113 cv
557.168 509.996 li
557.18 509.984 557.199 509.973 557.227 509.965 cv
557.246 509.957 557.277 509.949 557.313 509.941 cv
557.344 509.934 557.383 509.93 557.434 509.93 cv
557.477 509.93 557.535 509.93 557.613 509.926 cv
557.703 509.93 557.781 509.934 557.848 509.937 cv
557.906 509.949 557.957 509.961 557.992 509.969 cv
558.023 509.984 558.047 510 558.063 510.02 cv
558.074 510.043 558.078 510.066 558.082 510.09 cv
558.082 516.75 li
559.449 516.75 li
559.477 516.75 559.508 516.762 559.539 516.777 cv
559.566 516.797 559.586 516.82 559.605 516.852 cv
559.621 516.887 559.637 516.93 559.645 516.98 cv
559.652 517.031 559.656 517.09 559.66 517.16 cv
cp
f
566.086 515.402 mo
566.082 515.535 566.063 515.637 566.027 515.707 cv
565.984 515.781 565.93 515.82 565.867 515.816 cv
565.008 515.816 li
565.008 517.41 li
565.004 517.445 564.996 517.473 564.984 517.492 cv
564.965 517.516 564.938 517.531 564.898 517.547 cv
564.859 517.562 564.805 517.574 564.742 517.582 cv
564.676 517.59 564.594 517.594 564.496 517.594 cv
564.395 517.594 564.316 517.59 564.254 517.582 cv
564.191 517.574 564.141 517.562 564.102 517.547 cv
564.063 517.531 564.035 517.516 564.02 517.492 cv
564.004 517.473 563.996 517.445 564 517.41 cv
564 515.816 li
560.898 515.816 li
560.852 515.82 560.816 515.812 560.785 515.801 cv
560.754 515.793 560.723 515.773 560.699 515.738 cv
560.668 515.711 560.652 515.664 560.645 515.602 cv
560.637 515.543 560.633 515.469 560.633 515.371 cv
560.633 515.301 560.633 515.234 560.637 515.176 cv
560.641 515.117 560.648 515.062 560.66 515.016 cv
560.672 514.969 560.688 514.922 560.707 514.875 cv
560.727 514.828 560.75 514.781 560.777 514.73 cv
563.48 510.121 li
563.5 510.094 563.527 510.066 563.566 510.039 cv
563.602 510.02 563.652 510 563.715 509.98 cv
563.773 509.969 563.844 509.957 563.934 509.949 cv
564.02 509.945 564.125 509.941 564.246 509.941 cv
564.375 509.941 564.488 509.949 564.586 509.957 cv
564.684 509.973 564.762 509.984 564.824 509.996 cv
564.879 510.016 564.926 510.035 564.961 510.059 cv
564.988 510.082 565.004 510.113 565.008 510.145 cv
565.008 514.988 li
565.867 514.988 li
565.93 514.992 565.984 515.027 566.023 515.09 cv
566.063 515.16 566.082 515.262 566.086 515.402 cv
cp
564 510.824 mo
563.992 510.824 li
561.555 514.988 li
564 514.988 li
cp
f
631.57 517.16 mo
631.566 517.234 631.563 517.297 631.555 517.348 cv
631.543 517.402 631.527 517.445 631.508 517.473 cv
631.484 517.508 631.461 517.531 631.438 517.539 cv
631.414 517.555 631.387 517.559 631.359 517.559 cv
627.398 517.559 li
627.371 517.559 627.348 517.555 627.324 517.539 cv
627.301 517.531 627.277 517.508 627.258 517.473 cv
627.234 517.445 627.219 517.402 627.207 517.348 cv
627.191 517.297 627.184 517.234 627.188 517.16 cv
627.184 517.09 627.191 517.031 627.207 516.98 cv
627.219 516.93 627.23 516.887 627.25 516.852 cv
627.266 516.82 627.289 516.797 627.313 516.777 cv
627.336 516.762 627.363 516.75 627.398 516.75 cv
628.984 516.75 li
628.984 510.984 li
627.516 511.855 li
627.441 511.902 627.383 511.926 627.34 511.93 cv
627.293 511.941 627.258 511.934 627.23 511.902 cv
627.199 511.879 627.18 511.836 627.172 511.777 cv
627.164 511.719 627.16 511.645 627.16 511.551 cv
627.16 511.488 627.16 511.43 627.168 511.383 cv
627.172 511.336 627.184 511.297 627.195 511.266 cv
627.203 511.234 627.219 511.207 627.242 511.184 cv
627.266 511.16 627.293 511.137 627.328 511.113 cv
629.078 509.996 li
629.09 509.984 629.109 509.973 629.137 509.965 cv
629.156 509.957 629.188 509.949 629.223 509.941 cv
629.254 509.934 629.293 509.93 629.344 509.93 cv
629.387 509.93 629.445 509.93 629.523 509.926 cv
629.613 509.93 629.691 509.934 629.758 509.937 cv
629.816 509.949 629.867 509.961 629.902 509.969 cv
629.934 509.984 629.957 510 629.973 510.02 cv
629.984 510.043 629.988 510.066 629.992 510.09 cv
629.992 516.75 li
631.359 516.75 li
631.387 516.75 631.418 516.762 631.449 516.777 cv
631.477 516.797 631.496 516.82 631.516 516.852 cv
631.531 516.887 631.547 516.93 631.555 516.98 cv
631.563 517.031 631.566 517.09 631.57 517.16 cv
cp
f
637.871 515.105 mo
637.867 515.437 637.816 515.758 637.719 516.07 cv
637.613 516.383 637.457 516.656 637.25 516.891 cv
637.035 517.125 636.77 517.316 636.445 517.457 cv
636.117 517.598 635.734 517.664 635.297 517.668 cv
634.98 517.664 634.699 517.629 634.461 517.551 cv
634.215 517.477 634.004 517.363 633.828 517.219 cv
633.645 517.078 633.496 516.902 633.379 516.687 cv
633.258 516.48 633.16 516.238 633.09 515.965 cv
633.012 515.695 632.961 515.402 632.934 515.078 cv
632.898 514.762 632.883 514.418 632.887 514.051 cv
632.883 513.727 632.902 513.398 632.941 513.066 cv
632.977 512.734 633.039 512.414 633.129 512.105 cv
633.215 511.797 633.336 511.508 633.492 511.234 cv
633.648 510.965 633.84 510.727 634.074 510.523 cv
634.305 510.324 634.586 510.164 634.91 510.047 cv
635.23 509.93 635.605 509.871 636.043 509.871 cv
636.184 509.871 636.332 509.883 636.48 509.898 cv
636.629 509.922 636.766 509.945 636.891 509.969 cv
637.016 510 637.121 510.031 637.207 510.066 cv
637.293 510.102 637.348 510.129 637.375 510.152 cv
637.402 510.176 637.422 510.199 637.438 510.223 cv
637.445 510.246 637.457 510.273 637.469 510.305 cv
637.473 510.336 637.48 510.371 637.488 510.402 cv
637.492 510.441 637.492 510.484 637.496 510.539 cv
637.492 510.609 637.492 510.672 637.492 510.723 cv
637.488 510.773 637.48 510.812 637.469 510.844 cv
637.453 510.875 637.434 510.898 637.414 510.914 cv
637.391 510.93 637.363 510.937 637.332 510.937 cv
637.285 510.937 637.227 510.926 637.152 510.898 cv
637.078 510.871 636.988 510.84 636.883 510.805 cv
636.777 510.773 636.648 510.742 636.5 510.715 cv
636.348 510.691 636.176 510.68 635.977 510.676 cv
635.613 510.68 635.301 510.754 635.039 510.898 cv
634.773 511.051 634.559 511.25 634.395 511.496 cv
634.23 511.75 634.105 512.039 634.027 512.367 cv
633.945 512.695 633.902 513.039 633.891 513.398 cv
633.992 513.34 634.105 513.281 634.234 513.223 cv
634.359 513.168 634.496 513.117 634.648 513.066 cv
634.797 513.023 634.957 512.984 635.125 512.953 cv
635.293 512.922 635.473 512.906 635.668 512.906 cv
636.074 512.906 636.422 512.965 636.703 513.074 cv
636.984 513.187 637.211 513.34 637.383 513.535 cv
637.555 513.734 637.68 513.969 637.758 514.234 cv
637.832 514.508 637.867 514.797 637.871 515.105 cv
cp
636.848 515.199 mo
636.844 514.973 636.82 514.766 636.781 514.578 cv
636.734 514.395 636.66 514.238 636.555 514.109 cv
636.449 513.98 636.309 513.879 636.133 513.809 cv
635.957 513.738 635.742 513.703 635.484 513.703 cv
635.34 513.703 635.195 513.719 635.051 513.742 cv
634.902 513.77 634.762 513.805 634.629 513.848 cv
634.496 513.895 634.367 513.945 634.242 514.008 cv
634.117 514.07 634.004 514.137 633.91 514.199 cv
633.906 514.707 633.938 515.129 634.004 515.469 cv
634.066 515.809 634.16 516.082 634.285 516.285 cv
634.406 516.492 634.563 516.637 634.746 516.723 cv
634.926 516.812 635.141 516.855 635.391 516.855 cv
635.641 516.855 635.855 516.809 636.039 516.715 cv
636.223 516.621 636.375 516.496 636.496 516.336 cv
636.617 516.18 636.707 516.004 636.762 515.805 cv
636.816 515.609 636.844 515.406 636.848 515.199 cv
cp
f
16.91 323.203 mo
16.953 323.207 16.988 323.215 17.02 323.227 cv
17.051 323.246 17.078 323.281 17.098 323.328 cv
17.117 323.383 17.129 323.453 17.145 323.547 cv
17.152 323.641 17.16 323.766 17.16 323.922 cv
17.16 324.059 17.152 324.172 17.145 324.254 cv
17.129 324.34 17.117 324.406 17.094 324.457 cv
17.074 324.512 17.039 324.551 16.996 324.578 cv
16.957 324.609 16.906 324.637 16.84 324.652 cv
14.465 325.582 li
14.195 325.695 13.949 325.809 13.719 325.922 cv
13.496 326.039 13.301 326.176 13.137 326.336 cv
12.977 326.5 12.848 326.691 12.754 326.906 cv
12.664 327.129 12.621 327.391 12.617 327.691 cv
12.617 328.59 li
16.91 328.59 li
16.953 328.594 16.988 328.605 17.02 328.625 cv
17.051 328.652 17.078 328.687 17.094 328.734 cv
17.113 328.785 17.125 328.852 17.141 328.937 cv
17.152 329.023 17.16 329.133 17.16 329.258 cv
17.16 329.391 17.152 329.496 17.141 329.582 cv
17.125 329.668 17.113 329.738 17.094 329.789 cv
17.078 329.844 17.051 329.879 17.02 329.898 cv
16.988 329.922 16.953 329.934 16.91 329.93 cv
7.574 329.93 li
7.371 329.934 7.23 329.879 7.148 329.77 cv
7.07 329.664 7.031 329.551 7.027 329.43 cv
7.027 327.289 li
7.031 327.039 7.035 326.824 7.047 326.652 cv
7.063 326.484 7.078 326.332 7.09 326.195 cv
7.16 325.809 7.266 325.465 7.41 325.164 cv
7.559 324.867 7.746 324.617 7.965 324.414 cv
8.191 324.211 8.445 324.059 8.734 323.957 cv
9.023 323.855 9.344 323.805 9.688 323.805 cv
10.027 323.805 10.328 323.852 10.594 323.941 cv
10.863 324.035 11.102 324.168 11.305 324.336 cv
11.516 324.508 11.691 324.711 11.84 324.949 cv
11.988 325.191 12.117 325.461 12.219 325.754 cv
12.297 325.59 12.387 325.437 12.496 325.301 cv
12.609 325.168 12.746 325.043 12.898 324.922 cv
13.059 324.809 13.238 324.695 13.438 324.59 cv
13.641 324.488 13.867 324.387 14.121 324.277 cv
16.34 323.375 li
16.527 323.305 16.66 323.258 16.734 323.234 cv
16.813 323.219 16.871 323.207 16.91 323.203 cv
cp
9.828 325.223 mo
9.438 325.223 9.102 325.312 8.828 325.488 cv
8.555 325.668 8.359 325.965 8.238 326.375 cv
8.203 326.508 8.176 326.652 8.16 326.816 cv
8.145 326.98 8.137 327.195 8.137 327.457 cv
8.137 328.59 li
11.535 328.59 li
11.535 327.281 li
11.535 326.93 11.492 326.625 11.406 326.363 cv
11.32 326.109 11.203 325.895 11.047 325.723 cv
10.898 325.555 10.715 325.43 10.504 325.344 cv
10.297 325.266 10.074 325.223 9.828 325.223 cv
cp
f
16.918 315.406 mo
16.965 315.41 17 315.418 17.023 315.434 cv
17.055 315.453 17.078 315.488 17.098 315.531 cv
17.117 315.578 17.129 315.637 17.145 315.711 cv
17.152 315.789 17.16 315.883 17.16 315.988 cv
17.16 316.113 17.152 316.211 17.145 316.281 cv
17.129 316.359 17.117 316.418 17.098 316.461 cv
17.078 316.508 17.055 316.539 17.023 316.551 cv
17 316.57 16.965 316.578 16.918 316.574 cv
15.992 316.574 li
16.438 316.977 16.758 317.371 16.957 317.758 cv
17.16 318.152 17.258 318.547 17.262 318.941 cv
17.258 319.414 17.184 319.809 17.027 320.125 cv
16.875 320.445 16.664 320.703 16.395 320.898 cv
16.129 321.102 15.816 321.242 15.457 321.324 cv
15.102 321.414 14.668 321.457 14.16 321.453 cv
9.906 321.453 li
9.867 321.457 9.832 321.449 9.801 321.426 cv
9.773 321.41 9.75 321.375 9.723 321.32 cv
9.703 321.273 9.688 321.203 9.676 321.117 cv
9.672 321.035 9.668 320.934 9.664 320.805 cv
9.668 320.684 9.672 320.578 9.676 320.492 cv
9.688 320.41 9.703 320.344 9.723 320.297 cv
9.75 320.25 9.773 320.215 9.801 320.191 cv
9.832 320.172 9.867 320.164 9.906 320.16 cv
13.988 320.16 li
14.402 320.164 14.73 320.133 14.977 320.07 cv
15.223 320.012 15.434 319.922 15.605 319.797 cv
15.785 319.68 15.918 319.523 16.012 319.332 cv
16.109 319.148 16.16 318.93 16.156 318.68 cv
16.16 318.359 16.043 318.039 15.813 317.715 cv
15.586 317.398 15.25 317.059 14.805 316.699 cv
9.906 316.699 li
9.867 316.699 9.832 316.691 9.801 316.672 cv
9.773 316.656 9.75 316.621 9.723 316.566 cv
9.703 316.516 9.688 316.449 9.676 316.367 cv
9.672 316.289 9.668 316.184 9.664 316.051 cv
9.668 315.93 9.672 315.824 9.676 315.738 cv
9.688 315.656 9.703 315.594 9.723 315.547 cv
9.75 315.504 9.773 315.469 9.801 315.441 cv
9.832 315.422 9.867 315.41 9.906 315.406 cv
cp
f
16.918 306.996 mo
16.965 306.996 17 307.008 17.023 307.027 cv
17.055 307.051 17.078 307.086 17.098 307.129 cv
17.117 307.18 17.129 307.242 17.145 307.324 cv
17.152 307.406 17.16 307.512 17.16 307.633 cv
17.16 307.766 17.152 307.871 17.145 307.953 cv
17.129 308.039 17.117 308.105 17.098 308.148 cv
17.078 308.199 17.055 308.23 17.023 308.25 cv
17 308.273 16.965 308.285 16.918 308.281 cv
12.813 308.281 li
12.414 308.285 12.094 308.316 11.848 308.375 cv
11.605 308.441 11.395 308.531 11.215 308.648 cv
11.039 308.766 10.902 308.922 10.809 309.109 cv
10.715 309.305 10.668 309.523 10.668 309.77 cv
10.668 310.094 10.785 310.418 11.012 310.738 cv
11.246 311.062 11.578 311.398 12.016 311.75 cv
16.918 311.75 li
16.965 311.754 17 311.766 17.023 311.781 cv
17.055 311.805 17.078 311.836 17.098 311.883 cv
17.117 311.93 17.129 311.996 17.145 312.074 cv
17.152 312.16 17.16 312.266 17.16 312.395 cv
17.16 312.523 17.152 312.629 17.145 312.707 cv
17.129 312.793 17.117 312.859 17.098 312.906 cv
17.078 312.961 17.055 312.992 17.023 313.008 cv
17 313.027 16.965 313.039 16.918 313.035 cv
9.906 313.035 li
9.867 313.039 9.832 313.031 9.801 313.012 cv
9.773 313 9.75 312.969 9.723 312.918 cv
9.703 312.875 9.688 312.812 9.676 312.738 cv
9.672 312.668 9.668 312.574 9.664 312.449 cv
9.668 312.34 9.672 312.242 9.676 312.164 cv
9.688 312.09 9.703 312.031 9.723 311.988 cv
9.75 311.949 9.773 311.922 9.801 311.902 cv
9.832 311.887 9.867 311.879 9.906 311.875 cv
10.832 311.875 li
10.391 311.484 10.07 311.09 9.863 310.695 cv
9.66 310.305 9.555 309.906 9.555 309.504 cv
9.555 309.035 9.637 308.645 9.793 308.324 cv
9.957 308.008 10.168 307.746 10.43 307.547 cv
10.695 307.352 11.004 307.211 11.359 307.125 cv
11.715 307.039 12.145 306.996 12.641 306.996 cv
cp
f
16.402 301.07 mo
16.559 301.07 16.676 301.082 16.762 301.102 cv
16.852 301.125 16.918 301.156 16.957 301.195 cv
17 301.238 17.039 301.301 17.074 301.383 cv
17.109 301.469 17.137 301.562 17.164 301.668 cv
17.184 301.777 17.203 301.891 17.223 302.008 cv
17.234 302.125 17.242 302.246 17.246 302.363 cv
17.242 302.73 17.195 303.043 17.102 303.301 cv
17.008 303.562 16.863 303.773 16.664 303.937 cv
16.473 304.105 16.227 304.227 15.926 304.301 cv
15.629 304.379 15.277 304.418 14.867 304.414 cv
10.77 304.414 li
10.77 305.395 li
10.773 305.473 10.73 305.535 10.645 305.582 cv
10.563 305.629 10.43 305.652 10.238 305.652 cv
10.145 305.652 10.063 305.648 9.992 305.633 cv
9.93 305.625 9.871 305.605 9.824 305.582 cv
9.781 305.562 9.75 305.535 9.73 305.5 cv
9.715 305.469 9.707 305.434 9.703 305.387 cv
9.703 304.414 li
8.035 304.414 li
8.004 304.418 7.969 304.406 7.934 304.387 cv
7.906 304.371 7.879 304.34 7.852 304.285 cv
7.832 304.238 7.816 304.172 7.801 304.086 cv
7.793 304.008 7.785 303.902 7.785 303.773 cv
7.785 303.645 7.793 303.539 7.801 303.457 cv
7.816 303.375 7.832 303.309 7.852 303.262 cv
7.879 303.215 7.906 303.184 7.934 303.16 cv
7.969 303.145 8.004 303.133 8.035 303.129 cv
9.703 303.129 li
9.703 301.328 li
9.707 301.289 9.715 301.254 9.73 301.219 cv
9.75 301.191 9.781 301.164 9.824 301.137 cv
9.871 301.117 9.93 301.102 9.992 301.086 cv
10.063 301.078 10.145 301.07 10.238 301.07 cv
10.43 301.07 10.563 301.094 10.645 301.141 cv
10.73 301.187 10.773 301.25 10.77 301.328 cv
10.77 303.129 li
14.684 303.129 li
15.168 303.133 15.531 303.062 15.777 302.914 cv
16.027 302.773 16.152 302.516 16.148 302.145 cv
16.152 302.031 16.141 301.926 16.113 301.828 cv
16.094 301.738 16.07 301.656 16.039 301.578 cv
16.016 301.508 15.988 301.445 15.965 301.391 cv
15.941 301.344 15.93 301.297 15.93 301.25 cv
15.93 301.227 15.938 301.199 15.949 301.176 cv
15.965 301.152 15.988 301.137 16.023 301.121 cv
16.063 301.113 16.113 301.102 16.172 301.086 cv
16.238 301.078 16.316 301.07 16.402 301.07 cv
cp
f
16.918 298.055 mo
16.965 298.059 17 298.07 17.023 298.086 cv
17.055 298.109 17.078 298.141 17.098 298.187 cv
17.117 298.234 17.129 298.301 17.145 298.379 cv
17.152 298.465 17.16 298.57 17.16 298.699 cv
17.16 298.828 17.152 298.934 17.145 299.012 cv
17.129 299.098 17.117 299.164 17.098 299.211 cv
17.078 299.266 17.055 299.297 17.023 299.312 cv
17 299.332 16.965 299.344 16.918 299.34 cv
9.906 299.34 li
9.871 299.344 9.84 299.332 9.805 299.312 cv
9.777 299.297 9.75 299.266 9.727 299.211 cv
9.707 299.164 9.691 299.098 9.68 299.012 cv
9.672 298.934 9.668 298.828 9.664 298.699 cv
9.668 298.57 9.672 298.465 9.68 298.379 cv
9.691 298.301 9.707 298.234 9.727 298.187 cv
9.75 298.141 9.777 298.109 9.805 298.086 cv
9.84 298.07 9.871 298.059 9.906 298.055 cv
cp
7.535 297.906 mo
7.84 297.906 8.047 297.965 8.152 298.078 cv
8.266 298.191 8.32 298.402 8.316 298.707 cv
8.32 299.012 8.266 299.219 8.156 299.328 cv
8.051 299.445 7.848 299.5 7.551 299.496 cv
7.25 299.5 7.047 299.441 6.938 299.324 cv
6.832 299.211 6.777 299 6.773 298.691 cv
6.777 298.391 6.832 298.187 6.934 298.074 cv
7.043 297.965 7.242 297.906 7.535 297.906 cv
cp
f
16.918 285.23 mo
16.965 285.234 17 285.242 17.023 285.262 cv
17.055 285.285 17.078 285.32 17.098 285.363 cv
17.117 285.414 17.129 285.48 17.145 285.559 cv
17.152 285.645 17.16 285.746 17.16 285.871 cv
17.16 286.004 17.152 286.113 17.145 286.191 cv
17.129 286.277 17.117 286.344 17.098 286.391 cv
17.078 286.445 17.055 286.48 17.023 286.496 cv
17 286.52 16.965 286.527 16.918 286.527 cv
12.656 286.527 li
12.363 286.527 12.094 286.555 11.848 286.605 cv
11.605 286.66 11.395 286.742 11.215 286.855 cv
11.039 286.969 10.902 287.113 10.809 287.289 cv
10.715 287.469 10.668 287.68 10.668 287.914 cv
10.668 288.211 10.785 288.508 11.012 288.805 cv
11.246 289.109 11.578 289.437 12.016 289.793 cv
16.918 289.793 li
16.965 289.797 17 289.809 17.023 289.824 cv
17.055 289.848 17.078 289.879 17.098 289.926 cv
17.117 289.977 17.129 290.043 17.145 290.125 cv
17.152 290.211 17.16 290.316 17.16 290.437 cv
17.16 290.559 17.152 290.66 17.145 290.746 cv
17.129 290.832 17.117 290.902 17.098 290.949 cv
17.078 291.004 17.055 291.035 17.023 291.051 cv
17 291.07 16.965 291.082 16.918 291.078 cv
12.656 291.078 li
12.363 291.082 12.094 291.109 11.848 291.164 cv
11.605 291.223 11.395 291.309 11.215 291.422 cv
11.039 291.535 10.902 291.68 10.809 291.852 cv
10.715 292.031 10.668 292.238 10.668 292.473 cv
10.668 292.773 10.785 293.07 11.012 293.371 cv
11.246 293.672 11.578 294 12.016 294.352 cv
16.918 294.352 li
16.965 294.355 17 294.367 17.023 294.383 cv
17.055 294.406 17.078 294.437 17.098 294.484 cv
17.117 294.531 17.129 294.598 17.145 294.676 cv
17.152 294.762 17.16 294.867 17.16 294.996 cv
17.16 295.125 17.152 295.23 17.145 295.309 cv
17.129 295.395 17.117 295.461 17.098 295.508 cv
17.078 295.562 17.055 295.594 17.023 295.609 cv
17 295.629 16.965 295.641 16.918 295.637 cv
9.906 295.637 li
9.867 295.641 9.832 295.633 9.801 295.613 cv
9.773 295.602 9.75 295.57 9.723 295.52 cv
9.703 295.477 9.688 295.414 9.676 295.34 cv
9.672 295.27 9.668 295.176 9.664 295.051 cv
9.668 294.941 9.672 294.844 9.676 294.766 cv
9.688 294.691 9.703 294.633 9.723 294.59 cv
9.75 294.551 9.773 294.523 9.801 294.504 cv
9.832 294.488 9.867 294.48 9.906 294.477 cv
10.832 294.477 li
10.391 294.086 10.07 293.703 9.863 293.328 cv
9.66 292.961 9.555 292.582 9.555 292.199 cv
9.555 291.91 9.59 291.652 9.656 291.418 cv
9.727 291.191 9.82 290.984 9.941 290.805 cv
10.063 290.629 10.207 290.48 10.375 290.352 cv
10.547 290.23 10.738 290.125 10.941 290.039 cv
10.691 289.809 10.477 289.586 10.297 289.375 cv
10.125 289.164 9.98 288.961 9.867 288.766 cv
9.762 288.57 9.684 288.383 9.629 288.199 cv
9.582 288.016 9.555 287.828 9.555 287.641 cv
9.555 287.187 9.637 286.809 9.793 286.504 cv
9.957 286.199 10.168 285.953 10.43 285.758 cv
10.695 285.57 11.004 285.434 11.359 285.352 cv
11.715 285.273 12.09 285.234 12.484 285.23 cv
cp
f
13.109 276.902 mo
13.313 276.906 13.453 276.957 13.539 277.055 cv
13.625 277.16 13.668 277.277 13.668 277.402 cv
13.668 282.02 li
14.059 282.023 14.41 281.984 14.723 281.902 cv
15.035 281.828 15.305 281.695 15.523 281.512 cv
15.75 281.332 15.922 281.098 16.039 280.801 cv
16.164 280.512 16.223 280.152 16.219 279.727 cv
16.223 279.395 16.195 279.098 16.137 278.836 cv
16.086 278.574 16.023 278.348 15.953 278.156 cv
15.887 277.969 15.828 277.812 15.77 277.687 cv
15.719 277.566 15.691 277.473 15.688 277.41 cv
15.691 277.375 15.699 277.344 15.715 277.312 cv
15.734 277.285 15.762 277.262 15.797 277.242 cv
15.836 277.23 15.887 277.219 15.949 277.207 cv
16.016 277.203 16.094 277.199 16.188 277.195 cv
16.258 277.199 16.316 277.203 16.363 277.203 cv
16.41 277.211 16.453 277.215 16.492 277.223 cv
16.531 277.23 16.566 277.246 16.598 277.262 cv
16.629 277.285 16.66 277.309 16.688 277.332 cv
16.719 277.363 16.766 277.445 16.828 277.586 cv
16.895 277.727 16.957 277.91 17.02 278.133 cv
17.082 278.359 17.137 278.617 17.188 278.91 cv
17.234 279.203 17.258 279.516 17.262 279.848 cv
17.258 280.426 17.18 280.934 17.02 281.363 cv
16.859 281.801 16.621 282.164 16.305 282.457 cv
15.988 282.758 15.594 282.98 15.113 283.129 cv
14.637 283.277 14.078 283.352 13.441 283.352 cv
12.844 283.352 12.305 283.277 11.82 283.121 cv
11.344 282.969 10.934 282.742 10.598 282.445 cv
10.262 282.152 10.004 281.797 9.824 281.383 cv
9.645 280.969 9.555 280.504 9.555 279.988 cv
9.555 279.437 9.645 278.969 9.82 278.582 cv
10 278.195 10.238 277.879 10.535 277.625 cv
10.836 277.379 11.188 277.195 11.586 277.078 cv
11.992 276.965 12.422 276.906 12.875 276.902 cv
cp
12.727 278.195 mo
12.051 278.18 11.52 278.332 11.137 278.648 cv
10.754 278.965 10.563 279.434 10.559 280.051 cv
10.563 280.375 10.621 280.656 10.738 280.895 cv
10.859 281.137 11.02 281.336 11.215 281.496 cv
11.414 281.66 11.645 281.785 11.906 281.871 cv
12.168 281.961 12.441 282.012 12.727 282.02 cv
cp
f
6.375 268.66 mo
7.422 269.156 8.492 269.523 9.59 269.766 cv
10.691 270.008 11.797 270.129 12.906 270.129 cv
14.023 270.129 15.133 270.008 16.227 269.758 cv
17.324 269.516 18.395 269.152 19.449 268.676 cv
19.508 268.652 19.563 268.641 19.609 268.633 cv
19.652 268.633 19.688 268.648 19.719 268.684 cv
19.746 268.723 19.766 268.777 19.781 268.852 cv
19.789 268.93 19.797 269.035 19.801 269.16 cv
19.797 269.258 19.793 269.336 19.793 269.402 cv
19.785 269.473 19.777 269.531 19.762 269.578 cv
19.746 269.629 19.727 269.672 19.707 269.699 cv
19.684 269.734 19.66 269.758 19.637 269.77 cv
19.105 270.051 18.57 270.297 18.027 270.508 cv
17.484 270.727 16.934 270.906 16.375 271.047 cv
15.813 271.195 15.246 271.305 14.672 271.375 cv
14.098 271.453 13.516 271.488 12.93 271.484 cv
12.344 271.488 11.766 271.449 11.191 271.363 cv
10.621 271.285 10.055 271.168 9.488 271.02 cv
8.926 270.871 8.371 270.691 7.824 270.48 cv
7.281 270.27 6.738 270.031 6.203 269.762 cv
6.184 269.758 6.168 269.742 6.148 269.719 cv
6.137 269.695 6.121 269.664 6.102 269.621 cv
6.09 269.582 6.078 269.523 6.066 269.449 cv
6.063 269.379 6.059 269.285 6.055 269.168 cv
6.059 269.051 6.066 268.957 6.078 268.879 cv
6.098 268.809 6.117 268.75 6.141 268.707 cv
6.168 268.668 6.203 268.645 6.242 268.637 cv
6.289 268.633 6.332 268.641 6.375 268.66 cv
cp
f
16.91 255.461 mo
16.953 255.461 16.988 255.473 17.02 255.492 cv
17.051 255.516 17.078 255.555 17.094 255.605 cv
17.113 255.66 17.125 255.727 17.141 255.809 cv
17.152 255.895 17.16 256.004 17.16 256.133 cv
17.16 256.262 17.152 256.367 17.141 256.453 cv
17.125 256.543 17.113 256.613 17.094 256.664 cv
17.078 256.715 17.051 256.75 17.02 256.77 cv
16.988 256.793 16.953 256.805 16.91 256.801 cv
8.129 256.801 li
8.129 256.816 li
16.949 260.371 li
16.988 260.387 17.02 260.41 17.043 260.437 cv
17.07 260.469 17.094 260.512 17.109 260.562 cv
17.129 260.621 17.141 260.684 17.148 260.758 cv
17.156 260.832 17.16 260.922 17.16 261.023 cv
17.16 261.137 17.152 261.23 17.145 261.305 cv
17.129 261.387 17.117 261.453 17.102 261.5 cv
17.086 261.555 17.066 261.594 17.035 261.621 cv
17.012 261.652 16.98 261.672 16.949 261.68 cv
8.129 265.078 li
8.129 265.086 li
16.91 265.086 li
16.953 265.09 16.988 265.098 17.02 265.117 cv
17.051 265.141 17.078 265.18 17.094 265.23 cv
17.113 265.285 17.125 265.355 17.141 265.437 cv
17.152 265.527 17.16 265.637 17.16 265.766 cv
17.16 265.898 17.152 266.004 17.141 266.09 cv
17.125 266.176 17.113 266.246 17.094 266.293 cv
17.078 266.348 17.051 266.383 17.02 266.398 cv
16.988 266.422 16.953 266.43 16.91 266.426 cv
7.637 266.426 li
7.422 266.43 7.266 266.371 7.168 266.254 cv
7.078 266.137 7.031 266.008 7.027 265.863 cv
7.027 265.039 li
7.031 264.875 7.047 264.727 7.074 264.598 cv
7.109 264.473 7.156 264.363 7.223 264.266 cv
7.293 264.172 7.379 264.09 7.48 264.027 cv
7.586 263.965 7.711 263.91 7.848 263.863 cv
15.148 260.977 li
15.148 260.937 li
7.871 257.937 li
7.719 257.883 7.586 257.82 7.473 257.75 cv
7.367 257.684 7.277 257.605 7.211 257.523 cv
7.148 257.441 7.102 257.352 7.07 257.25 cv
7.043 257.152 7.031 257.035 7.027 256.902 cv
7.027 256.039 li
7.031 255.961 7.043 255.883 7.063 255.812 cv
7.09 255.742 7.125 255.684 7.172 255.633 cv
7.223 255.582 7.285 255.539 7.359 255.508 cv
7.438 255.477 7.531 255.461 7.637 255.461 cv
cp
f
16.918 251.594 mo
16.965 251.598 17 251.609 17.023 251.625 cv
17.055 251.648 17.078 251.68 17.098 251.727 cv
17.117 251.773 17.129 251.84 17.145 251.918 cv
17.152 252.004 17.16 252.109 17.16 252.238 cv
17.16 252.367 17.152 252.473 17.145 252.551 cv
17.129 252.637 17.117 252.703 17.098 252.75 cv
17.078 252.805 17.055 252.836 17.023 252.852 cv
17 252.871 16.965 252.883 16.918 252.879 cv
9.906 252.879 li
9.871 252.883 9.84 252.871 9.805 252.852 cv
9.777 252.836 9.75 252.805 9.727 252.75 cv
9.707 252.703 9.691 252.637 9.68 252.551 cv
9.672 252.473 9.668 252.367 9.664 252.238 cv
9.668 252.109 9.672 252.004 9.68 251.918 cv
9.691 251.84 9.707 251.773 9.727 251.727 cv
9.75 251.68 9.777 251.648 9.805 251.625 cv
9.84 251.609 9.871 251.598 9.906 251.594 cv
cp
7.535 251.445 mo
7.84 251.445 8.047 251.504 8.152 251.617 cv
8.266 251.73 8.32 251.941 8.316 252.246 cv
8.32 252.551 8.266 252.758 8.156 252.867 cv
8.051 252.984 7.848 253.039 7.551 253.035 cv
7.25 253.039 7.047 252.98 6.938 252.863 cv
6.832 252.75 6.777 252.539 6.773 252.23 cv
6.777 251.93 6.832 251.727 6.934 251.613 cv
7.043 251.504 7.242 251.445 7.535 251.445 cv
cp
f
16.918 243.137 mo
16.965 243.137 17 243.148 17.023 243.168 cv
17.055 243.191 17.078 243.227 17.098 243.27 cv
17.117 243.32 17.129 243.383 17.145 243.465 cv
17.152 243.547 17.16 243.652 17.16 243.773 cv
17.16 243.906 17.152 244.012 17.145 244.094 cv
17.129 244.18 17.117 244.246 17.098 244.289 cv
17.078 244.34 17.055 244.371 17.023 244.391 cv
17 244.414 16.965 244.426 16.918 244.422 cv
12.813 244.422 li
12.414 244.426 12.094 244.457 11.848 244.516 cv
11.605 244.582 11.395 244.672 11.215 244.789 cv
11.039 244.906 10.902 245.062 10.809 245.25 cv
10.715 245.445 10.668 245.664 10.668 245.91 cv
10.668 246.234 10.785 246.559 11.012 246.879 cv
11.246 247.203 11.578 247.539 12.016 247.891 cv
16.918 247.891 li
16.965 247.895 17 247.906 17.023 247.922 cv
17.055 247.945 17.078 247.977 17.098 248.023 cv
17.117 248.07 17.129 248.137 17.145 248.215 cv
17.152 248.301 17.16 248.406 17.16 248.535 cv
17.16 248.664 17.152 248.77 17.145 248.848 cv
17.129 248.934 17.117 249 17.098 249.047 cv
17.078 249.102 17.055 249.133 17.023 249.148 cv
17 249.168 16.965 249.18 16.918 249.176 cv
9.906 249.176 li
9.867 249.18 9.832 249.172 9.801 249.152 cv
9.773 249.141 9.75 249.109 9.723 249.059 cv
9.703 249.016 9.688 248.953 9.676 248.879 cv
9.672 248.809 9.668 248.715 9.664 248.59 cv
9.668 248.48 9.672 248.383 9.676 248.305 cv
9.688 248.23 9.703 248.172 9.723 248.129 cv
9.75 248.09 9.773 248.062 9.801 248.043 cv
9.832 248.027 9.867 248.02 9.906 248.016 cv
10.832 248.016 li
10.391 247.625 10.07 247.23 9.863 246.836 cv
9.66 246.445 9.555 246.047 9.555 245.645 cv
9.555 245.176 9.637 244.785 9.793 244.465 cv
9.957 244.148 10.168 243.887 10.43 243.687 cv
10.695 243.492 11.004 243.352 11.359 243.266 cv
11.715 243.18 12.145 243.137 12.641 243.137 cv
cp
f
16.918 234.789 mo
16.965 234.793 17 234.801 17.023 234.816 cv
17.055 234.836 17.078 234.871 17.098 234.914 cv
17.117 234.961 17.129 235.02 17.145 235.094 cv
17.152 235.172 17.16 235.266 17.16 235.371 cv
17.16 235.496 17.152 235.594 17.145 235.664 cv
17.129 235.742 17.117 235.801 17.098 235.844 cv
17.078 235.891 17.055 235.922 17.023 235.934 cv
17 235.953 16.965 235.961 16.918 235.957 cv
15.992 235.957 li
16.438 236.359 16.758 236.754 16.957 237.141 cv
17.16 237.535 17.258 237.93 17.262 238.324 cv
17.258 238.797 17.184 239.191 17.027 239.508 cv
16.875 239.828 16.664 240.086 16.395 240.281 cv
16.129 240.484 15.816 240.625 15.457 240.707 cv
15.102 240.797 14.668 240.84 14.16 240.836 cv
9.906 240.836 li
9.867 240.84 9.832 240.832 9.801 240.809 cv
9.773 240.793 9.75 240.758 9.723 240.703 cv
9.703 240.656 9.688 240.586 9.676 240.5 cv
9.672 240.418 9.668 240.316 9.664 240.187 cv
9.668 240.066 9.672 239.961 9.676 239.875 cv
9.688 239.793 9.703 239.727 9.723 239.68 cv
9.75 239.633 9.773 239.598 9.801 239.574 cv
9.832 239.555 9.867 239.547 9.906 239.543 cv
13.988 239.543 li
14.402 239.547 14.73 239.516 14.977 239.453 cv
15.223 239.395 15.434 239.305 15.605 239.18 cv
15.785 239.062 15.918 238.906 16.012 238.715 cv
16.109 238.531 16.16 238.312 16.156 238.062 cv
16.16 237.742 16.043 237.422 15.813 237.098 cv
15.586 236.781 15.25 236.441 14.805 236.082 cv
9.906 236.082 li
9.867 236.082 9.832 236.074 9.801 236.055 cv
9.773 236.039 9.75 236.004 9.723 235.949 cv
9.703 235.898 9.688 235.832 9.676 235.75 cv
9.672 235.672 9.668 235.566 9.664 235.434 cv
9.668 235.312 9.672 235.207 9.676 235.121 cv
9.688 235.039 9.703 234.977 9.723 234.93 cv
9.75 234.887 9.773 234.852 9.801 234.824 cv
9.832 234.805 9.867 234.793 9.906 234.789 cv
cp
f
16.402 228.691 mo
16.559 228.691 16.676 228.703 16.762 228.723 cv
16.852 228.746 16.918 228.777 16.957 228.816 cv
17 228.859 17.039 228.922 17.074 229.004 cv
17.109 229.09 17.137 229.184 17.164 229.289 cv
17.184 229.398 17.203 229.512 17.223 229.629 cv
17.234 229.746 17.242 229.867 17.246 229.984 cv
17.242 230.352 17.195 230.664 17.102 230.922 cv
17.008 231.184 16.863 231.395 16.664 231.559 cv
16.473 231.727 16.227 231.848 15.926 231.922 cv
15.629 232 15.277 232.039 14.867 232.035 cv
10.77 232.035 li
10.77 233.016 li
10.773 233.094 10.73 233.156 10.645 233.203 cv
10.563 233.25 10.43 233.273 10.238 233.273 cv
10.145 233.273 10.063 233.27 9.992 233.254 cv
9.93 233.246 9.871 233.227 9.824 233.203 cv
9.781 233.184 9.75 233.156 9.73 233.121 cv
9.715 233.09 9.707 233.055 9.703 233.008 cv
9.703 232.035 li
8.035 232.035 li
8.004 232.039 7.969 232.027 7.934 232.008 cv
7.906 231.992 7.879 231.961 7.852 231.906 cv
7.832 231.859 7.816 231.793 7.801 231.707 cv
7.793 231.629 7.785 231.523 7.785 231.395 cv
7.785 231.266 7.793 231.16 7.801 231.078 cv
7.816 230.996 7.832 230.93 7.852 230.883 cv
7.879 230.836 7.906 230.805 7.934 230.781 cv
7.969 230.766 8.004 230.754 8.035 230.75 cv
9.703 230.75 li
9.703 228.949 li
9.707 228.91 9.715 228.875 9.73 228.84 cv
9.75 228.812 9.781 228.785 9.824 228.758 cv
9.871 228.738 9.93 228.723 9.992 228.707 cv
10.063 228.699 10.145 228.691 10.238 228.691 cv
10.43 228.691 10.563 228.715 10.645 228.762 cv
10.73 228.809 10.773 228.871 10.77 228.949 cv
10.77 230.75 li
14.684 230.75 li
15.168 230.754 15.531 230.684 15.777 230.535 cv
16.027 230.395 16.152 230.137 16.148 229.766 cv
16.152 229.652 16.141 229.547 16.113 229.449 cv
16.094 229.359 16.07 229.277 16.039 229.199 cv
16.016 229.129 15.988 229.066 15.965 229.012 cv
15.941 228.965 15.93 228.918 15.93 228.871 cv
15.93 228.848 15.938 228.82 15.949 228.797 cv
15.965 228.773 15.988 228.758 16.023 228.742 cv
16.063 228.734 16.113 228.723 16.172 228.707 cv
16.238 228.699 16.316 228.691 16.402 228.691 cv
cp
f
13.109 221.074 mo
13.313 221.078 13.453 221.129 13.539 221.227 cv
13.625 221.332 13.668 221.449 13.668 221.574 cv
13.668 226.191 li
14.059 226.195 14.41 226.156 14.723 226.074 cv
15.035 226 15.305 225.867 15.523 225.684 cv
15.75 225.504 15.922 225.27 16.039 224.973 cv
16.164 224.684 16.223 224.324 16.219 223.898 cv
16.223 223.566 16.195 223.27 16.137 223.008 cv
16.086 222.746 16.023 222.52 15.953 222.328 cv
15.887 222.141 15.828 221.984 15.77 221.859 cv
15.719 221.738 15.691 221.645 15.688 221.582 cv
15.691 221.547 15.699 221.516 15.715 221.484 cv
15.734 221.457 15.762 221.434 15.797 221.414 cv
15.836 221.402 15.887 221.391 15.949 221.379 cv
16.016 221.375 16.094 221.371 16.188 221.367 cv
16.258 221.371 16.316 221.375 16.363 221.375 cv
16.41 221.383 16.453 221.387 16.492 221.395 cv
16.531 221.402 16.566 221.418 16.598 221.434 cv
16.629 221.457 16.66 221.48 16.688 221.504 cv
16.719 221.535 16.766 221.617 16.828 221.758 cv
16.895 221.898 16.957 222.082 17.02 222.305 cv
17.082 222.531 17.137 222.789 17.188 223.082 cv
17.234 223.375 17.258 223.687 17.262 224.02 cv
17.258 224.598 17.18 225.105 17.02 225.535 cv
16.859 225.973 16.621 226.336 16.305 226.629 cv
15.988 226.93 15.594 227.152 15.113 227.301 cv
14.637 227.449 14.078 227.523 13.441 227.523 cv
12.844 227.523 12.305 227.449 11.82 227.293 cv
11.344 227.141 10.934 226.914 10.598 226.617 cv
10.262 226.324 10.004 225.969 9.824 225.555 cv
9.645 225.141 9.555 224.676 9.555 224.16 cv
9.555 223.609 9.645 223.141 9.82 222.754 cv
10 222.367 10.238 222.051 10.535 221.797 cv
10.836 221.551 11.188 221.367 11.586 221.25 cv
11.992 221.137 12.422 221.078 12.875 221.074 cv
cp
12.727 222.367 mo
12.051 222.352 11.52 222.504 11.137 222.82 cv
10.754 223.137 10.563 223.605 10.559 224.223 cv
10.563 224.547 10.621 224.828 10.738 225.066 cv
10.859 225.309 11.02 225.508 11.215 225.668 cv
11.414 225.832 11.645 225.957 11.906 226.043 cv
12.168 226.133 12.441 226.184 12.727 226.191 cv
cp
f
15.008 214.707 mo
15.371 214.711 15.691 214.777 15.969 214.906 cv
16.25 215.039 16.484 215.227 16.676 215.469 cv
16.871 215.715 17.016 216.008 17.113 216.344 cv
17.211 216.684 17.258 217.055 17.262 217.457 cv
17.258 217.711 17.238 217.949 17.203 218.172 cv
17.16 218.398 17.113 218.598 17.055 218.777 cv
16.996 218.957 16.934 219.109 16.867 219.234 cv
16.805 219.359 16.746 219.453 16.691 219.508 cv
16.641 219.566 16.57 219.605 16.473 219.629 cv
16.383 219.656 16.254 219.668 16.094 219.668 cv
15.996 219.668 15.914 219.664 15.844 219.652 cv
15.777 219.645 15.723 219.633 15.68 219.613 cv
15.641 219.602 15.609 219.578 15.59 219.551 cv
15.574 219.523 15.566 219.492 15.563 219.453 cv
15.566 219.398 15.602 219.312 15.668 219.199 cv
15.742 219.09 15.82 218.953 15.898 218.785 cv
15.984 218.625 16.059 218.434 16.129 218.207 cv
16.199 217.988 16.234 217.73 16.234 217.434 cv
16.234 217.219 16.211 217.02 16.164 216.84 cv
16.117 216.664 16.051 216.512 15.957 216.383 cv
15.871 216.254 15.754 216.152 15.609 216.082 cv
15.473 216.012 15.305 215.977 15.109 215.977 cv
14.914 215.977 14.75 216.027 14.613 216.129 cv
14.48 216.23 14.359 216.367 14.254 216.531 cv
14.152 216.699 14.063 216.883 13.977 217.09 cv
13.898 217.301 13.813 217.516 13.723 217.734 cv
13.637 217.953 13.535 218.168 13.422 218.379 cv
13.313 218.59 13.18 218.781 13.016 218.945 cv
12.859 219.117 12.664 219.25 12.438 219.348 cv
12.215 219.453 11.949 219.504 11.637 219.5 cv
11.363 219.504 11.098 219.449 10.844 219.34 cv
10.594 219.234 10.375 219.074 10.184 218.859 cv
9.996 218.648 9.844 218.383 9.727 218.062 cv
9.613 217.742 9.555 217.371 9.555 216.941 cv
9.555 216.758 9.57 216.57 9.602 216.383 cv
9.633 216.199 9.672 216.031 9.719 215.875 cv
9.766 215.727 9.816 215.598 9.871 215.488 cv
9.926 215.387 9.977 215.305 10.016 215.246 cv
10.063 215.195 10.098 215.16 10.125 215.137 cv
10.156 215.121 10.191 215.105 10.227 215.098 cv
10.27 215.09 10.316 215.082 10.371 215.074 cv
10.43 215.066 10.5 215.062 10.582 215.062 cv
10.672 215.062 10.75 215.066 10.813 215.074 cv
10.883 215.082 10.934 215.098 10.973 215.113 cv
11.016 215.137 11.047 215.156 11.063 215.18 cv
11.082 215.207 11.09 215.238 11.09 215.266 cv
11.09 215.316 11.063 215.383 11.004 215.469 cv
10.949 215.559 10.887 215.672 10.82 215.812 cv
10.758 215.953 10.699 216.121 10.637 216.309 cv
10.582 216.5 10.551 216.715 10.551 216.957 cv
10.551 217.18 10.578 217.371 10.625 217.535 cv
10.68 217.703 10.75 217.84 10.836 217.945 cv
10.93 218.051 11.035 218.133 11.16 218.184 cv
11.285 218.242 11.422 218.27 11.566 218.266 cv
11.77 218.27 11.938 218.219 12.074 218.113 cv
12.215 218.012 12.336 217.875 12.438 217.707 cv
12.543 217.543 12.637 217.352 12.719 217.137 cv
12.805 216.926 12.891 216.711 12.977 216.488 cv
13.066 216.27 13.168 216.051 13.273 215.832 cv
13.383 215.617 13.512 215.426 13.668 215.258 cv
13.824 215.094 14.012 214.961 14.23 214.859 cv
14.449 214.762 14.711 214.711 15.008 214.707 cv
cp
f
12.93 210.262 mo
13.516 210.262 14.098 210.301 14.672 210.371 cv
15.246 210.449 15.813 210.559 16.375 210.699 cv
16.934 210.848 17.484 211.023 18.027 211.234 cv
18.57 211.445 19.105 211.691 19.637 211.969 cv
19.66 211.988 19.684 212.012 19.707 212.039 cv
19.727 212.074 19.746 212.113 19.762 212.16 cv
19.777 212.211 19.785 212.27 19.793 212.336 cv
19.793 212.406 19.797 212.488 19.801 212.578 cv
19.797 212.715 19.789 212.82 19.781 212.895 cv
19.766 212.973 19.746 213.027 19.719 213.059 cv
19.688 213.094 19.652 213.109 19.609 213.105 cv
19.563 213.105 19.508 213.09 19.449 213.062 cv
18.398 212.586 17.328 212.227 16.23 211.98 cv
15.133 211.738 14.023 211.617 12.906 211.613 cv
11.797 211.617 10.691 211.738 9.59 211.98 cv
8.492 212.227 7.422 212.594 6.375 213.078 cv
6.332 213.102 6.289 213.109 6.242 213.102 cv
6.203 213.102 6.168 213.078 6.141 213.031 cv
6.117 212.992 6.098 212.934 6.078 212.859 cv
6.066 212.789 6.059 212.691 6.055 212.57 cv
6.059 212.461 6.063 212.371 6.066 212.297 cv
6.078 212.227 6.09 212.168 6.102 212.121 cv
6.121 212.078 6.137 212.047 6.148 212.023 cv
6.168 212.008 6.184 211.992 6.203 211.977 cv
7.27 211.445 8.367 211.023 9.488 210.719 cv
10.617 210.414 11.762 210.262 12.93 210.262 cv
cp
f
273.68 531.355 mo
273.676 531.461 273.66 531.551 273.625 531.621 cv
273.59 531.699 273.543 531.758 273.488 531.801 cv
273.43 531.852 273.367 531.887 273.301 531.902 cv
273.227 531.926 273.156 531.934 273.094 531.934 cv
272.648 531.934 li
272.508 531.934 272.387 531.922 272.281 531.891 cv
272.176 531.867 272.078 531.812 271.984 531.734 cv
271.891 531.66 271.797 531.559 271.703 531.426 cv
271.609 531.297 271.508 531.133 271.402 530.93 cv
268.328 525.191 li
268.164 524.898 268 524.59 267.84 524.262 cv
267.672 523.941 267.52 523.625 267.383 523.316 cv
267.367 523.316 li
267.375 523.691 267.383 524.074 267.391 524.461 cv
267.395 524.852 267.395 525.238 267.398 525.621 cv
267.398 531.707 li
267.395 531.746 267.383 531.781 267.363 531.812 cv
267.34 531.848 267.305 531.875 267.254 531.891 cv
267.199 531.91 267.129 531.922 267.047 531.937 cv
266.961 531.949 266.855 531.957 266.727 531.957 cv
266.59 531.957 266.48 531.949 266.398 531.937 cv
266.313 531.922 266.246 531.91 266.199 531.891 cv
266.148 531.875 266.113 531.848 266.09 531.812 cv
266.066 531.781 266.055 531.746 266.059 531.707 cv
266.059 522.402 li
266.055 522.195 266.113 522.047 266.234 521.957 cv
266.352 521.871 266.48 521.828 266.621 521.824 cv
267.281 521.824 li
267.434 521.828 267.566 521.84 267.672 521.863 cv
267.773 521.891 267.867 521.934 267.953 521.992 cv
268.035 522.055 268.113 522.137 268.195 522.242 cv
268.27 522.352 268.352 522.488 268.438 522.645 cv
270.805 527.07 li
270.949 527.344 271.09 527.609 271.227 527.863 cv
271.359 528.121 271.488 528.375 271.617 528.621 cv
271.738 528.875 271.863 529.121 271.988 529.359 cv
272.109 529.602 272.23 529.844 272.355 530.086 cv
272.363 530.086 li
272.352 529.68 272.344 529.25 272.344 528.805 cv
272.336 528.359 272.336 527.934 272.34 527.523 cv
272.34 522.051 li
272.336 522.016 272.348 521.98 272.371 521.949 cv
272.395 521.918 272.43 521.891 272.484 521.867 cv
272.531 521.844 272.602 521.828 272.688 521.816 cv
272.773 521.809 272.883 521.805 273.023 521.801 cv
273.141 521.805 273.246 521.809 273.336 521.816 cv
273.422 521.828 273.488 521.844 273.539 521.867 cv
273.586 521.891 273.621 521.918 273.645 521.949 cv
273.664 521.98 273.676 522.016 273.68 522.051 cv
cp
f
282.23 531.715 mo
282.227 531.762 282.219 531.797 282.203 531.82 cv
282.184 531.852 282.148 531.875 282.105 531.895 cv
282.059 531.914 282 531.926 281.926 531.941 cv
281.848 531.949 281.754 531.957 281.648 531.957 cv
281.523 531.957 281.426 531.949 281.355 531.941 cv
281.277 531.926 281.219 531.914 281.176 531.895 cv
281.129 531.875 281.098 531.852 281.086 531.82 cv
281.066 531.797 281.059 531.762 281.063 531.715 cv
281.063 530.789 li
280.66 531.234 280.266 531.555 279.879 531.754 cv
279.484 531.957 279.09 532.055 278.695 532.059 cv
278.223 532.055 277.828 531.98 277.512 531.824 cv
277.191 531.672 276.934 531.461 276.738 531.191 cv
276.535 530.926 276.395 530.613 276.313 530.254 cv
276.223 529.898 276.18 529.465 276.184 528.957 cv
276.184 524.703 li
276.18 524.664 276.188 524.629 276.211 524.598 cv
276.227 524.57 276.262 524.547 276.316 524.52 cv
276.363 524.5 276.434 524.484 276.52 524.473 cv
276.602 524.469 276.703 524.465 276.832 524.461 cv
276.953 524.465 277.059 524.469 277.145 524.473 cv
277.227 524.484 277.293 524.5 277.34 524.52 cv
277.387 524.547 277.422 524.57 277.445 524.598 cv
277.465 524.629 277.473 524.664 277.477 524.703 cv
277.477 528.785 li
277.473 529.199 277.504 529.527 277.566 529.773 cv
277.625 530.02 277.715 530.23 277.84 530.402 cv
277.957 530.582 278.113 530.715 278.305 530.809 cv
278.488 530.906 278.707 530.957 278.957 530.953 cv
279.277 530.957 279.598 530.84 279.922 530.609 cv
280.238 530.383 280.578 530.047 280.938 529.602 cv
280.938 524.703 li
280.938 524.664 280.945 524.629 280.965 524.598 cv
280.98 524.57 281.016 524.547 281.07 524.52 cv
281.121 524.5 281.188 524.484 281.27 524.473 cv
281.348 524.469 281.453 524.465 281.586 524.461 cv
281.707 524.465 281.813 524.469 281.898 524.473 cv
281.98 524.484 282.043 524.5 282.09 524.52 cv
282.133 524.547 282.168 524.57 282.195 524.598 cv
282.215 524.629 282.227 524.664 282.23 524.703 cv
cp
f
295.008 531.715 mo
295.004 531.762 294.996 531.797 294.977 531.82 cv
294.953 531.852 294.918 531.875 294.875 531.895 cv
294.824 531.914 294.758 531.926 294.68 531.941 cv
294.594 531.949 294.492 531.957 294.367 531.957 cv
294.234 531.957 294.125 531.949 294.047 531.941 cv
293.961 531.926 293.895 531.914 293.848 531.895 cv
293.793 531.875 293.758 531.852 293.742 531.82 cv
293.719 531.797 293.711 531.762 293.711 531.715 cv
293.711 527.453 li
293.711 527.16 293.684 526.891 293.633 526.645 cv
293.578 526.402 293.496 526.191 293.383 526.012 cv
293.27 525.836 293.125 525.699 292.949 525.605 cv
292.77 525.512 292.559 525.465 292.324 525.465 cv
292.027 525.465 291.73 525.582 291.434 525.809 cv
291.129 526.043 290.801 526.375 290.445 526.812 cv
290.445 531.715 li
290.441 531.762 290.43 531.797 290.414 531.82 cv
290.391 531.852 290.359 531.875 290.313 531.895 cv
290.262 531.914 290.195 531.926 290.113 531.941 cv
290.027 531.949 289.922 531.957 289.801 531.957 cv
289.68 531.957 289.578 531.949 289.492 531.941 cv
289.406 531.926 289.336 531.914 289.289 531.895 cv
289.234 531.875 289.203 531.852 289.188 531.82 cv
289.168 531.797 289.156 531.762 289.16 531.715 cv
289.16 527.453 li
289.156 527.16 289.129 526.891 289.074 526.645 cv
289.016 526.402 288.93 526.191 288.816 526.012 cv
288.703 525.836 288.559 525.699 288.387 525.605 cv
288.207 525.512 288 525.465 287.766 525.465 cv
287.465 525.465 287.168 525.582 286.867 525.809 cv
286.566 526.043 286.238 526.375 285.887 526.812 cv
285.887 531.715 li
285.883 531.762 285.871 531.797 285.855 531.82 cv
285.832 531.852 285.801 531.875 285.754 531.895 cv
285.707 531.914 285.641 531.926 285.563 531.941 cv
285.477 531.949 285.371 531.957 285.242 531.957 cv
285.113 531.957 285.008 531.949 284.93 531.941 cv
284.844 531.926 284.777 531.914 284.73 531.895 cv
284.676 531.875 284.645 531.852 284.629 531.82 cv
284.609 531.797 284.598 531.762 284.602 531.715 cv
284.602 524.703 li
284.598 524.664 284.605 524.629 284.625 524.598 cv
284.637 524.57 284.668 524.547 284.719 524.52 cv
284.762 524.5 284.824 524.484 284.898 524.473 cv
284.969 524.469 285.063 524.465 285.188 524.461 cv
285.297 524.465 285.395 524.469 285.473 524.473 cv
285.547 524.484 285.605 524.5 285.648 524.52 cv
285.688 524.547 285.715 524.57 285.734 524.598 cv
285.75 524.629 285.758 524.664 285.762 524.703 cv
285.762 525.629 li
286.152 525.187 286.535 524.867 286.91 524.66 cv
287.277 524.457 287.656 524.352 288.039 524.352 cv
288.328 524.352 288.586 524.387 288.82 524.453 cv
289.047 524.523 289.254 524.617 289.434 524.738 cv
289.609 524.859 289.758 525.004 289.887 525.172 cv
290.008 525.344 290.113 525.535 290.199 525.738 cv
290.43 525.488 290.652 525.273 290.863 525.094 cv
291.074 524.922 291.277 524.777 291.473 524.664 cv
291.668 524.559 291.855 524.48 292.039 524.426 cv
292.223 524.379 292.41 524.352 292.598 524.352 cv
293.051 524.352 293.43 524.434 293.734 524.59 cv
294.039 524.754 294.285 524.965 294.48 525.227 cv
294.668 525.492 294.805 525.801 294.887 526.156 cv
294.965 526.512 295.004 526.887 295.008 527.281 cv
cp
f
303.805 528.113 mo
303.801 528.723 303.734 529.273 303.605 529.758 cv
303.469 530.246 303.273 530.66 303.02 531 cv
302.762 531.344 302.445 531.605 302.074 531.785 cv
301.699 531.969 301.273 532.055 300.789 532.059 cv
300.563 532.055 300.355 532.035 300.168 531.992 cv
299.98 531.945 299.793 531.875 299.613 531.777 cv
299.426 531.68 299.246 531.555 299.066 531.402 cv
298.883 531.254 298.691 531.074 298.492 530.859 cv
298.492 531.715 li
298.492 531.762 298.48 531.797 298.461 531.824 cv
298.438 531.859 298.402 531.883 298.359 531.898 cv
298.309 531.914 298.25 531.926 298.184 531.941 cv
298.109 531.949 298.02 531.957 297.914 531.957 cv
297.805 531.957 297.719 531.949 297.648 531.941 cv
297.574 531.926 297.512 531.914 297.469 531.898 cv
297.418 531.883 297.387 531.859 297.375 531.824 cv
297.355 531.797 297.348 531.762 297.352 531.715 cv
297.352 521.305 li
297.348 521.266 297.359 521.23 297.379 521.195 cv
297.395 521.168 297.426 521.141 297.48 521.117 cv
297.527 521.098 297.594 521.082 297.68 521.07 cv
297.758 521.062 297.863 521.059 297.992 521.055 cv
298.121 521.059 298.227 521.062 298.313 521.07 cv
298.391 521.082 298.457 521.098 298.504 521.117 cv
298.551 521.141 298.582 521.168 298.605 521.195 cv
298.621 521.23 298.633 521.266 298.637 521.305 cv
298.637 525.504 li
298.844 525.293 299.047 525.113 299.242 524.969 cv
299.438 524.824 299.625 524.707 299.813 524.613 cv
299.996 524.527 300.184 524.461 300.375 524.414 cv
300.559 524.375 300.758 524.352 300.969 524.352 cv
301.473 524.352 301.906 524.453 302.273 524.656 cv
302.633 524.859 302.926 525.133 303.152 525.469 cv
303.375 525.812 303.543 526.211 303.648 526.668 cv
303.75 527.125 303.801 527.605 303.805 528.113 cv
cp
302.473 528.262 mo
302.469 527.906 302.441 527.559 302.391 527.219 cv
302.332 526.883 302.238 526.586 302.102 526.324 cv
301.965 526.066 301.785 525.855 301.563 525.695 cv
301.336 525.539 301.055 525.461 300.723 525.457 cv
300.555 525.461 300.391 525.484 300.23 525.527 cv
300.066 525.578 299.902 525.656 299.734 525.762 cv
299.566 525.875 299.391 526.016 299.215 526.184 cv
299.031 526.359 298.84 526.574 298.637 526.828 cv
298.637 529.625 li
298.992 530.059 299.332 530.391 299.656 530.613 cv
299.98 530.844 300.316 530.957 300.668 530.953 cv
300.988 530.957 301.266 530.879 301.5 530.719 cv
301.727 530.566 301.914 530.359 302.059 530.098 cv
302.203 529.844 302.309 529.555 302.375 529.234 cv
302.438 528.918 302.469 528.594 302.473 528.262 cv
cp
f
311.715 527.906 mo
311.711 528.109 311.66 528.25 311.563 528.336 cv
311.457 528.422 311.34 528.465 311.215 528.465 cv
306.598 528.465 li
306.594 528.855 306.633 529.207 306.715 529.52 cv
306.789 529.832 306.922 530.102 307.105 530.32 cv
307.285 530.547 307.52 530.719 307.816 530.836 cv
308.105 530.961 308.465 531.02 308.891 531.016 cv
309.223 531.02 309.52 530.992 309.781 530.934 cv
310.043 530.883 310.27 530.82 310.461 530.75 cv
310.648 530.684 310.805 530.625 310.93 530.566 cv
311.051 530.516 311.145 530.488 311.207 530.484 cv
311.242 530.488 311.273 530.496 311.305 530.512 cv
311.332 530.531 311.355 530.559 311.375 530.594 cv
311.387 530.633 311.398 530.684 311.41 530.746 cv
311.414 530.812 311.418 530.891 311.422 530.984 cv
311.418 531.055 311.414 531.113 311.414 531.16 cv
311.406 531.207 311.402 531.25 311.395 531.289 cv
311.387 531.328 311.371 531.363 311.355 531.395 cv
311.332 531.426 311.309 531.457 311.285 531.484 cv
311.254 531.516 311.172 531.562 311.031 531.625 cv
310.891 531.691 310.707 531.754 310.484 531.816 cv
310.258 531.879 310 531.934 309.707 531.984 cv
309.414 532.031 309.102 532.055 308.77 532.059 cv
308.191 532.055 307.684 531.977 307.254 531.816 cv
306.816 531.656 306.453 531.418 306.16 531.102 cv
305.859 530.785 305.637 530.391 305.488 529.91 cv
305.34 529.434 305.266 528.875 305.266 528.238 cv
305.266 527.641 305.34 527.102 305.496 526.617 cv
305.648 526.141 305.875 525.73 306.172 525.395 cv
306.465 525.059 306.82 524.801 307.234 524.621 cv
307.648 524.441 308.113 524.352 308.629 524.352 cv
309.18 524.352 309.648 524.441 310.035 524.617 cv
310.422 524.797 310.738 525.035 310.992 525.332 cv
311.238 525.633 311.422 525.984 311.539 526.383 cv
311.652 526.789 311.711 527.219 311.715 527.672 cv
cp
310.422 527.523 mo
310.438 526.848 310.285 526.316 309.969 525.934 cv
309.652 525.551 309.184 525.359 308.566 525.355 cv
308.242 525.359 307.961 525.418 307.723 525.535 cv
307.48 525.656 307.281 525.816 307.121 526.012 cv
306.957 526.211 306.832 526.441 306.746 526.703 cv
306.656 526.965 306.605 527.238 306.598 527.523 cv
cp
f
317.781 525.16 mo
317.777 525.277 317.777 525.375 317.773 525.449 cv
317.766 525.531 317.754 525.594 317.742 525.633 cv
317.723 525.68 317.703 525.711 317.684 525.734 cv
317.656 525.758 317.625 525.77 317.586 525.77 cv
317.543 525.77 317.492 525.758 317.434 525.734 cv
317.371 525.711 317.301 525.687 317.23 525.664 cv
317.152 525.641 317.07 525.621 316.977 525.598 cv
316.883 525.582 316.781 525.57 316.672 525.566 cv
316.539 525.57 316.41 525.598 316.289 525.645 cv
316.164 525.699 316.035 525.785 315.898 525.902 cv
315.758 526.027 315.613 526.184 315.465 526.379 cv
315.313 526.574 315.145 526.816 314.965 527.102 cv
314.965 531.715 li
314.961 531.762 314.949 531.797 314.934 531.82 cv
314.91 531.852 314.879 531.875 314.832 531.895 cv
314.785 531.914 314.719 531.926 314.641 531.941 cv
314.555 531.949 314.449 531.957 314.32 531.957 cv
314.191 531.957 314.086 531.949 314.008 531.941 cv
313.922 531.926 313.855 531.914 313.809 531.895 cv
313.754 531.875 313.723 531.852 313.707 531.82 cv
313.688 531.797 313.676 531.762 313.68 531.715 cv
313.68 524.703 li
313.676 524.664 313.684 524.629 313.703 524.598 cv
313.715 524.57 313.746 524.547 313.797 524.52 cv
313.84 524.5 313.902 524.484 313.977 524.473 cv
314.047 524.469 314.141 524.465 314.266 524.461 cv
314.375 524.465 314.473 524.469 314.551 524.473 cv
314.625 524.484 314.684 524.5 314.727 524.52 cv
314.766 524.547 314.793 524.57 314.813 524.598 cv
314.828 524.629 314.836 524.664 314.84 524.703 cv
314.84 525.723 li
315.027 525.441 315.211 525.215 315.383 525.039 cv
315.551 524.863 315.711 524.723 315.863 524.621 cv
316.012 524.52 316.16 524.449 316.309 524.41 cv
316.457 524.371 316.605 524.352 316.758 524.352 cv
316.824 524.352 316.902 524.355 316.988 524.363 cv
317.074 524.371 317.164 524.387 317.258 524.406 cv
317.352 524.43 317.434 524.453 317.512 524.477 cv
317.582 524.504 317.637 524.531 317.672 524.555 cv
317.699 524.586 317.719 524.609 317.734 524.629 cv
317.742 524.656 317.754 524.687 317.762 524.719 cv
317.77 524.758 317.773 524.809 317.777 524.879 cv
317.777 524.949 317.777 525.043 317.781 525.16 cv
cp
f
329.539 528.129 mo
329.535 528.707 329.461 529.234 329.313 529.711 cv
329.16 530.195 328.934 530.609 328.637 530.953 cv
328.336 531.305 327.961 531.574 327.516 531.766 cv
327.063 531.961 326.543 532.055 325.953 532.059 cv
325.375 532.055 324.871 531.973 324.445 531.801 cv
324.016 531.633 323.66 531.383 323.375 531.055 cv
323.086 530.727 322.871 530.332 322.734 529.863 cv
322.594 529.398 322.527 528.867 322.527 528.27 cv
322.527 527.703 322.598 527.176 322.746 526.695 cv
322.891 526.215 323.117 525.801 323.418 525.449 cv
323.715 525.102 324.086 524.832 324.535 524.641 cv
324.98 524.449 325.504 524.352 326.102 524.352 cv
326.68 524.352 327.18 524.437 327.609 524.609 cv
328.035 524.781 328.395 525.031 328.68 525.359 cv
328.965 525.687 329.18 526.086 329.324 526.551 cv
329.465 527.02 329.535 527.547 329.539 528.129 cv
cp
328.207 528.215 mo
328.203 527.84 328.168 527.48 328.102 527.141 cv
328.027 526.805 327.91 526.512 327.75 526.254 cv
327.586 526.004 327.367 525.801 327.09 525.648 cv
326.809 525.504 326.461 525.43 326.051 525.426 cv
325.664 525.43 325.336 525.496 325.063 525.629 cv
324.785 525.766 324.559 525.957 324.383 526.203 cv
324.203 526.449 324.07 526.742 323.988 527.078 cv
323.898 527.418 323.855 527.785 323.859 528.184 cv
323.855 528.57 323.891 528.934 323.965 529.27 cv
324.031 529.609 324.148 529.902 324.316 530.152 cv
324.48 530.406 324.703 530.609 324.98 530.754 cv
325.258 530.906 325.605 530.98 326.02 530.977 cv
326.395 530.98 326.723 530.91 327.004 530.773 cv
327.281 530.641 327.508 530.453 327.688 530.203 cv
327.863 529.961 327.992 529.668 328.078 529.332 cv
328.16 528.996 328.203 528.625 328.207 528.215 cv
cp
f
335.27 521.816 mo
335.266 521.918 335.262 521.996 335.254 522.055 cv
335.242 522.117 335.23 522.168 335.219 522.199 cv
335.203 522.238 335.188 522.262 335.168 522.273 cv
335.145 522.289 335.117 522.297 335.09 522.293 cv
335.051 522.297 335.004 522.285 334.953 522.258 cv
334.895 522.238 334.828 522.211 334.754 522.18 cv
334.672 522.152 334.582 522.125 334.477 522.102 cv
334.367 522.078 334.242 522.066 334.109 522.066 cv
333.914 522.066 333.75 522.098 333.617 522.16 cv
333.477 522.223 333.367 522.32 333.289 522.453 cv
333.203 522.586 333.145 522.758 333.109 522.969 cv
333.07 523.18 333.051 523.437 333.055 523.734 cv
333.055 524.5 li
334.621 524.5 li
334.66 524.504 334.695 524.512 334.727 524.527 cv
334.754 524.547 334.781 524.578 334.805 524.621 cv
334.828 524.668 334.844 524.727 334.859 524.789 cv
334.867 524.859 334.875 524.941 334.879 525.035 cv
334.875 525.227 334.852 525.359 334.809 525.441 cv
334.758 525.527 334.695 525.57 334.621 525.566 cv
333.055 525.566 li
333.055 531.715 li
333.051 531.762 333.043 531.797 333.023 531.82 cv
333 531.852 332.965 531.875 332.918 531.895 cv
332.867 531.914 332.801 531.926 332.719 531.941 cv
332.633 531.949 332.527 531.957 332.41 531.957 cv
332.281 531.957 332.18 531.949 332.098 531.941 cv
332.012 531.926 331.945 531.914 331.898 531.895 cv
331.848 531.875 331.813 531.852 331.793 531.82 cv
331.77 531.797 331.758 531.762 331.762 531.715 cv
331.762 525.566 li
330.773 525.566 li
330.688 525.57 330.625 525.527 330.586 525.441 cv
330.543 525.359 330.52 525.227 330.523 525.035 cv
330.52 524.941 330.527 524.859 330.539 524.789 cv
330.547 524.727 330.563 524.668 330.586 524.621 cv
330.605 524.578 330.629 524.547 330.664 524.527 cv
330.691 524.512 330.73 524.504 330.773 524.5 cv
331.762 524.5 li
331.762 523.773 li
331.758 523.289 331.805 522.871 331.898 522.516 cv
331.988 522.168 332.125 521.879 332.313 521.656 cv
332.496 521.434 332.73 521.27 333.02 521.16 cv
333.301 521.055 333.637 521 334.023 521 cv
334.199 521 334.375 521.02 334.551 521.051 cv
334.719 521.09 334.852 521.125 334.949 521.16 cv
335.039 521.203 335.102 521.238 335.137 521.266 cv
335.164 521.301 335.191 521.34 335.215 521.387 cv
335.234 521.437 335.246 521.5 335.258 521.566 cv
335.262 521.641 335.266 521.723 335.27 521.816 cv
cp
f
345.469 529.082 mo
345.465 529.555 345.379 529.977 345.207 530.344 cv
345.031 530.719 344.789 531.031 344.48 531.285 cv
344.172 531.543 343.809 531.734 343.391 531.863 cv
342.969 531.992 342.52 532.055 342.039 532.059 cv
341.699 532.055 341.383 532.027 341.098 531.973 cv
340.809 531.914 340.555 531.848 340.328 531.762 cv
340.102 531.684 339.91 531.598 339.758 531.504 cv
339.602 531.418 339.496 531.34 339.438 531.277 cv
339.379 531.215 339.336 531.137 339.309 531.043 cv
339.277 530.949 339.262 530.82 339.266 530.656 cv
339.262 530.543 339.266 530.449 339.281 530.371 cv
339.289 530.297 339.305 530.234 339.328 530.187 cv
339.344 530.141 339.371 530.109 339.406 530.09 cv
339.434 530.074 339.469 530.066 339.512 530.062 cv
339.582 530.066 339.684 530.109 339.82 530.195 cv
339.949 530.285 340.121 530.383 340.332 530.484 cv
340.539 530.594 340.789 530.691 341.082 530.777 cv
341.375 530.871 341.715 530.914 342.102 530.914 cv
342.391 530.914 342.656 530.875 342.898 530.797 cv
343.137 530.719 343.344 530.609 343.523 530.465 cv
343.695 530.324 343.832 530.148 343.926 529.937 cv
344.02 529.73 344.066 529.496 344.066 529.23 cv
344.066 528.949 344 528.703 343.871 528.496 cv
343.738 528.297 343.566 528.121 343.355 527.965 cv
343.141 527.816 342.898 527.676 342.625 527.543 cv
342.352 527.418 342.07 527.285 341.789 527.152 cv
341.5 527.02 341.223 526.875 340.953 526.711 cv
340.684 526.555 340.441 526.363 340.23 526.145 cv
340.012 525.926 339.84 525.672 339.711 525.375 cv
339.574 525.086 339.508 524.734 339.512 524.32 cv
339.508 523.902 339.586 523.527 339.742 523.195 cv
339.895 522.867 340.105 522.59 340.383 522.363 cv
340.652 522.145 340.977 521.973 341.355 521.855 cv
341.73 521.738 342.141 521.68 342.578 521.68 cv
342.797 521.68 343.02 521.699 343.25 521.738 cv
343.473 521.777 343.684 521.828 343.887 521.891 cv
344.082 521.957 344.262 522.031 344.422 522.109 cv
344.574 522.191 344.676 522.258 344.73 522.305 cv
344.777 522.359 344.813 522.398 344.828 522.422 cv
344.844 522.453 344.855 522.488 344.867 522.531 cv
344.875 522.578 344.883 522.633 344.891 522.691 cv
344.895 522.758 344.898 522.836 344.898 522.934 cv
344.898 523.027 344.895 523.113 344.887 523.184 cv
344.879 523.262 344.867 523.32 344.852 523.367 cv
344.836 523.414 344.813 523.449 344.785 523.473 cv
344.754 523.496 344.723 523.508 344.688 523.508 cv
344.629 523.508 344.539 523.473 344.418 523.402 cv
344.293 523.332 344.141 523.25 343.969 523.156 cv
343.789 523.066 343.582 522.984 343.344 522.906 cv
343.098 522.832 342.828 522.793 342.531 522.793 cv
342.25 522.793 342.004 522.832 341.797 522.906 cv
341.586 522.984 341.414 523.086 341.281 523.207 cv
341.145 523.332 341.043 523.477 340.977 523.648 cv
340.91 523.82 340.879 524.004 340.879 524.195 cv
340.879 524.48 340.941 524.723 341.07 524.922 cv
341.199 525.125 341.371 525.305 341.59 525.457 cv
341.801 525.617 342.047 525.758 342.324 525.887 cv
342.598 526.02 342.879 526.152 343.168 526.281 cv
343.453 526.414 343.734 526.559 344.008 526.715 cv
344.281 526.875 344.527 527.062 344.746 527.277 cv
344.961 527.496 345.133 527.75 345.27 528.043 cv
345.398 528.336 345.465 528.684 345.469 529.082 cv
cp
f
353.234 531.715 mo
353.23 531.762 353.223 531.797 353.207 531.82 cv
353.188 531.852 353.152 531.875 353.109 531.895 cv
353.063 531.914 353.004 531.926 352.93 531.941 cv
352.852 531.949 352.758 531.957 352.652 531.957 cv
352.527 531.957 352.43 531.949 352.359 531.941 cv
352.281 531.926 352.223 531.914 352.18 531.895 cv
352.133 531.875 352.102 531.852 352.09 531.82 cv
352.07 531.797 352.063 531.762 352.066 531.715 cv
352.066 530.789 li
351.664 531.234 351.27 531.555 350.883 531.754 cv
350.488 531.957 350.094 532.055 349.699 532.059 cv
349.227 532.055 348.832 531.98 348.516 531.824 cv
348.195 531.672 347.938 531.461 347.742 531.191 cv
347.539 530.926 347.398 530.613 347.316 530.254 cv
347.227 529.898 347.184 529.465 347.188 528.957 cv
347.188 524.703 li
347.184 524.664 347.191 524.629 347.215 524.598 cv
347.23 524.57 347.266 524.547 347.32 524.52 cv
347.367 524.5 347.438 524.484 347.523 524.473 cv
347.605 524.469 347.707 524.465 347.836 524.461 cv
347.957 524.465 348.063 524.469 348.148 524.473 cv
348.23 524.484 348.297 524.5 348.344 524.52 cv
348.391 524.547 348.426 524.57 348.449 524.598 cv
348.469 524.629 348.477 524.664 348.48 524.703 cv
348.48 528.785 li
348.477 529.199 348.508 529.527 348.57 529.773 cv
348.629 530.02 348.719 530.23 348.844 530.402 cv
348.961 530.582 349.117 530.715 349.309 530.809 cv
349.492 530.906 349.711 530.957 349.961 530.953 cv
350.281 530.957 350.602 530.84 350.926 530.609 cv
351.242 530.383 351.582 530.047 351.941 529.602 cv
351.941 524.703 li
351.941 524.664 351.949 524.629 351.969 524.598 cv
351.984 524.57 352.02 524.547 352.074 524.52 cv
352.125 524.5 352.191 524.484 352.273 524.473 cv
352.352 524.469 352.457 524.465 352.59 524.461 cv
352.711 524.465 352.816 524.469 352.902 524.473 cv
352.984 524.484 353.047 524.5 353.094 524.52 cv
353.137 524.547 353.172 524.57 353.199 524.598 cv
353.219 524.629 353.23 524.664 353.234 524.703 cv
cp
f
362.09 528.113 mo
362.086 528.723 362.02 529.273 361.891 529.758 cv
361.754 530.246 361.559 530.66 361.305 531 cv
361.047 531.344 360.73 531.605 360.359 531.785 cv
359.984 531.969 359.559 532.055 359.074 532.059 cv
358.848 532.055 358.641 532.035 358.453 531.992 cv
358.266 531.945 358.078 531.875 357.898 531.777 cv
357.711 531.68 357.531 531.555 357.352 531.402 cv
357.168 531.254 356.977 531.074 356.777 530.859 cv
356.777 531.715 li
356.777 531.762 356.766 531.797 356.746 531.824 cv
356.723 531.859 356.688 531.883 356.645 531.898 cv
356.594 531.914 356.535 531.926 356.469 531.941 cv
356.395 531.949 356.305 531.957 356.199 531.957 cv
356.09 531.957 356.004 531.949 355.934 531.941 cv
355.859 531.926 355.797 531.914 355.754 531.898 cv
355.703 531.883 355.672 531.859 355.66 531.824 cv
355.641 531.797 355.633 531.762 355.637 531.715 cv
355.637 521.305 li
355.633 521.266 355.645 521.23 355.664 521.195 cv
355.68 521.168 355.711 521.141 355.766 521.117 cv
355.813 521.098 355.879 521.082 355.965 521.07 cv
356.043 521.062 356.148 521.059 356.277 521.055 cv
356.406 521.059 356.512 521.062 356.598 521.07 cv
356.676 521.082 356.742 521.098 356.789 521.117 cv
356.836 521.141 356.867 521.168 356.891 521.195 cv
356.906 521.23 356.918 521.266 356.922 521.305 cv
356.922 525.504 li
357.129 525.293 357.332 525.113 357.527 524.969 cv
357.723 524.824 357.91 524.707 358.098 524.613 cv
358.281 524.527 358.469 524.461 358.66 524.414 cv
358.844 524.375 359.043 524.352 359.254 524.352 cv
359.758 524.352 360.191 524.453 360.559 524.656 cv
360.918 524.859 361.211 525.133 361.438 525.469 cv
361.66 525.812 361.828 526.211 361.934 526.668 cv
362.035 527.125 362.086 527.605 362.09 528.113 cv
cp
360.758 528.262 mo
360.754 527.906 360.727 527.559 360.676 527.219 cv
360.617 526.883 360.523 526.586 360.387 526.324 cv
360.25 526.066 360.07 525.855 359.848 525.695 cv
359.621 525.539 359.34 525.461 359.008 525.457 cv
358.84 525.461 358.676 525.484 358.516 525.527 cv
358.352 525.578 358.188 525.656 358.02 525.762 cv
357.852 525.875 357.676 526.016 357.5 526.184 cv
357.316 526.359 357.125 526.574 356.922 526.828 cv
356.922 529.625 li
357.277 530.059 357.617 530.391 357.941 530.613 cv
358.266 530.844 358.602 530.957 358.953 530.953 cv
359.273 530.957 359.551 530.879 359.785 530.719 cv
360.012 530.566 360.199 530.359 360.344 530.098 cv
360.488 529.844 360.594 529.555 360.66 529.234 cv
360.723 528.918 360.754 528.594 360.758 528.262 cv
cp
f
367.227 527.977 mo
367.227 528.18 367.203 528.316 367.156 528.395 cv
367.109 528.473 367.039 528.512 366.953 528.512 cv
363.695 528.512 li
363.602 528.512 363.535 528.473 363.488 528.391 cv
363.441 528.312 363.418 528.176 363.418 527.977 cv
363.418 527.781 363.441 527.641 363.488 527.562 cv
363.535 527.484 363.602 527.445 363.695 527.445 cv
366.953 527.445 li
366.992 527.445 367.031 527.453 367.066 527.469 cv
367.098 527.484 367.125 527.516 367.152 527.559 cv
367.172 527.605 367.191 527.66 367.207 527.727 cv
367.219 527.797 367.227 527.883 367.227 527.977 cv
cp
f
370.48 531.707 mo
370.477 531.75 370.469 531.785 370.449 531.816 cv
370.426 531.848 370.387 531.875 370.34 531.891 cv
370.285 531.91 370.219 531.922 370.133 531.937 cv
370.047 531.949 369.938 531.957 369.813 531.957 cv
369.684 531.957 369.578 531.949 369.492 531.937 cv
369.402 531.922 369.332 531.91 369.281 531.891 cv
369.227 531.875 369.191 531.848 369.172 531.816 cv
369.148 531.785 369.137 531.75 369.141 531.707 cv
369.141 522.027 li
369.137 521.988 369.148 521.953 369.176 521.918 cv
369.195 521.891 369.234 521.863 369.293 521.844 cv
369.344 521.828 369.414 521.812 369.504 521.797 cv
369.586 521.785 369.688 521.781 369.813 521.777 cv
369.938 521.781 370.047 521.785 370.133 521.797 cv
370.219 521.812 370.285 521.828 370.34 521.844 cv
370.387 521.863 370.426 521.891 370.449 521.918 cv
370.469 521.953 370.477 521.988 370.48 522.027 cv
cp
f
383.469 531.715 mo
383.465 531.762 383.457 531.797 383.438 531.82 cv
383.414 531.852 383.379 531.875 383.336 531.895 cv
383.285 531.914 383.219 531.926 383.141 531.941 cv
383.055 531.949 382.953 531.957 382.828 531.957 cv
382.695 531.957 382.586 531.949 382.508 531.941 cv
382.422 531.926 382.355 531.914 382.309 531.895 cv
382.254 531.875 382.219 531.852 382.203 531.82 cv
382.18 531.797 382.172 531.762 382.172 531.715 cv
382.172 527.453 li
382.172 527.16 382.145 526.891 382.094 526.645 cv
382.039 526.402 381.957 526.191 381.844 526.012 cv
381.73 525.836 381.586 525.699 381.41 525.605 cv
381.23 525.512 381.02 525.465 380.785 525.465 cv
380.488 525.465 380.191 525.582 379.895 525.809 cv
379.59 526.043 379.262 526.375 378.906 526.812 cv
378.906 531.715 li
378.902 531.762 378.891 531.797 378.875 531.82 cv
378.852 531.852 378.82 531.875 378.773 531.895 cv
378.723 531.914 378.656 531.926 378.574 531.941 cv
378.488 531.949 378.383 531.957 378.262 531.957 cv
378.141 531.957 378.039 531.949 377.953 531.941 cv
377.867 531.926 377.797 531.914 377.75 531.895 cv
377.695 531.875 377.664 531.852 377.648 531.82 cv
377.629 531.797 377.617 531.762 377.621 531.715 cv
377.621 527.453 li
377.617 527.16 377.59 526.891 377.535 526.645 cv
377.477 526.402 377.391 526.191 377.277 526.012 cv
377.164 525.836 377.02 525.699 376.848 525.605 cv
376.668 525.512 376.461 525.465 376.227 525.465 cv
375.926 525.465 375.629 525.582 375.328 525.809 cv
375.027 526.043 374.699 526.375 374.348 526.812 cv
374.348 531.715 li
374.344 531.762 374.332 531.797 374.316 531.82 cv
374.293 531.852 374.262 531.875 374.215 531.895 cv
374.168 531.914 374.102 531.926 374.023 531.941 cv
373.938 531.949 373.832 531.957 373.703 531.957 cv
373.574 531.957 373.469 531.949 373.391 531.941 cv
373.305 531.926 373.238 531.914 373.191 531.895 cv
373.137 531.875 373.105 531.852 373.09 531.82 cv
373.07 531.797 373.059 531.762 373.063 531.715 cv
373.063 524.703 li
373.059 524.664 373.066 524.629 373.086 524.598 cv
373.098 524.57 373.129 524.547 373.18 524.52 cv
373.223 524.5 373.285 524.484 373.359 524.473 cv
373.43 524.469 373.523 524.465 373.648 524.461 cv
373.758 524.465 373.855 524.469 373.934 524.473 cv
374.008 524.484 374.066 524.5 374.109 524.52 cv
374.148 524.547 374.176 524.57 374.195 524.598 cv
374.211 524.629 374.219 524.664 374.223 524.703 cv
374.223 525.629 li
374.613 525.187 374.996 524.867 375.371 524.66 cv
375.738 524.457 376.117 524.352 376.5 524.352 cv
376.789 524.352 377.047 524.387 377.281 524.453 cv
377.508 524.523 377.715 524.617 377.895 524.738 cv
378.07 524.859 378.219 525.004 378.348 525.172 cv
378.469 525.344 378.574 525.535 378.66 525.738 cv
378.891 525.488 379.113 525.273 379.324 525.094 cv
379.535 524.922 379.738 524.777 379.934 524.664 cv
380.129 524.559 380.316 524.48 380.5 524.426 cv
380.684 524.379 380.871 524.352 381.059 524.352 cv
381.512 524.352 381.891 524.434 382.195 524.59 cv
382.5 524.754 382.746 524.965 382.941 525.227 cv
383.129 525.492 383.266 525.801 383.348 526.156 cv
383.426 526.512 383.465 526.887 383.469 527.281 cv
cp
f
391.098 531.723 mo
391.094 531.785 391.074 531.832 391.035 531.863 cv
390.992 531.895 390.934 531.918 390.863 531.934 cv
390.785 531.949 390.68 531.957 390.543 531.957 cv
390.406 531.957 390.297 531.949 390.219 531.934 cv
390.133 531.918 390.074 531.895 390.043 531.863 cv
390.004 531.832 389.988 531.785 389.992 531.723 cv
389.992 531.023 li
389.684 531.352 389.34 531.605 388.965 531.785 cv
388.586 531.969 388.188 532.055 387.77 532.059 cv
387.395 532.055 387.063 532.008 386.766 531.914 cv
386.469 531.816 386.215 531.68 386.004 531.496 cv
385.793 531.316 385.629 531.094 385.512 530.828 cv
385.395 530.566 385.336 530.266 385.34 529.922 cv
385.336 529.531 385.414 529.187 385.578 528.895 cv
385.734 528.605 385.969 528.363 386.273 528.172 cv
386.574 527.98 386.941 527.836 387.379 527.738 cv
387.813 527.645 388.305 527.598 388.852 527.594 cv
389.82 527.594 li
389.82 527.047 li
389.816 526.777 389.789 526.539 389.734 526.332 cv
389.676 526.125 389.582 525.953 389.457 525.812 cv
389.324 525.676 389.16 525.57 388.961 525.5 cv
388.754 525.43 388.504 525.395 388.215 525.395 cv
387.895 525.395 387.609 525.434 387.359 525.508 cv
387.102 525.586 386.883 525.668 386.695 525.758 cv
386.508 525.852 386.348 525.937 386.223 526.008 cv
386.09 526.086 385.996 526.121 385.938 526.121 cv
385.895 526.121 385.859 526.113 385.828 526.09 cv
385.797 526.074 385.77 526.043 385.746 525.996 cv
385.723 525.957 385.703 525.902 385.695 525.836 cv
385.68 525.773 385.676 525.703 385.68 525.621 cv
385.676 525.496 385.684 525.391 385.707 525.312 cv
385.723 525.238 385.77 525.168 385.84 525.098 cv
385.91 525.031 386.031 524.953 386.203 524.863 cv
386.375 524.773 386.57 524.691 386.793 524.613 cv
387.016 524.543 387.262 524.48 387.527 524.426 cv
387.793 524.379 388.059 524.352 388.332 524.352 cv
388.832 524.352 389.262 524.41 389.613 524.523 cv
389.965 524.641 390.25 524.809 390.473 525.027 cv
390.688 525.25 390.848 525.523 390.949 525.848 cv
391.047 526.18 391.094 526.562 391.098 526.992 cv
cp
389.82 528.52 mo
388.719 528.52 li
388.363 528.523 388.059 528.555 387.801 528.609 cv
387.539 528.672 387.324 528.758 387.152 528.875 cv
386.98 528.992 386.855 529.133 386.777 529.297 cv
386.695 529.461 386.652 529.648 386.656 529.859 cv
386.652 530.227 386.77 530.52 387 530.73 cv
387.23 530.949 387.555 531.055 387.973 531.055 cv
388.309 531.055 388.621 530.969 388.91 530.797 cv
389.199 530.625 389.5 530.363 389.82 530.008 cv
cp
f
399.316 525.02 mo
399.313 525.203 399.289 525.336 399.242 525.414 cv
399.191 525.496 399.129 525.535 399.055 525.535 cv
398.047 525.535 li
398.227 525.723 398.355 525.93 398.43 526.156 cv
398.5 526.383 398.535 526.617 398.539 526.859 cv
398.535 527.266 398.469 527.625 398.344 527.937 cv
398.211 528.25 398.027 528.516 397.785 528.727 cv
397.543 528.945 397.254 529.109 396.926 529.223 cv
396.59 529.34 396.223 529.398 395.82 529.395 cv
395.531 529.398 395.258 529.359 395.004 529.281 cv
394.742 529.207 394.547 529.113 394.41 528.996 cv
394.316 529.094 394.238 529.199 394.18 529.316 cv
394.117 529.437 394.086 529.574 394.09 529.727 cv
394.086 529.91 394.172 530.062 394.344 530.18 cv
394.512 530.305 394.734 530.367 395.016 530.375 cv
396.848 530.453 li
397.195 530.465 397.512 530.512 397.805 530.598 cv
398.094 530.684 398.348 530.809 398.563 530.965 cv
398.773 531.125 398.941 531.316 399.063 531.547 cv
399.18 531.781 399.238 532.051 399.242 532.355 cv
399.238 532.676 399.172 532.98 399.039 533.273 cv
398.902 533.562 398.695 533.816 398.418 534.039 cv
398.137 534.258 397.781 534.434 397.352 534.562 cv
396.922 534.687 396.414 534.75 395.828 534.754 cv
395.258 534.75 394.773 534.703 394.379 534.609 cv
393.98 534.512 393.656 534.379 393.402 534.215 cv
393.148 534.047 392.965 533.852 392.852 533.621 cv
392.734 533.387 392.676 533.133 392.68 532.867 cv
392.676 532.695 392.695 532.531 392.742 532.371 cv
392.781 532.207 392.844 532.055 392.93 531.91 cv
393.012 531.766 393.121 531.629 393.25 531.492 cv
393.375 531.363 393.52 531.23 393.691 531.102 cv
393.434 530.973 393.246 530.809 393.125 530.609 cv
393.004 530.414 392.945 530.203 392.945 529.969 cv
392.945 529.656 393.008 529.371 393.137 529.121 cv
393.266 528.871 393.426 528.648 393.621 528.449 cv
393.457 528.258 393.332 528.043 393.238 527.801 cv
393.145 527.562 393.098 527.27 393.098 526.922 cv
393.098 526.527 393.164 526.168 393.301 525.848 cv
393.434 525.531 393.621 525.266 393.863 525.047 cv
394.102 524.832 394.387 524.664 394.723 524.543 cv
395.055 524.43 395.422 524.371 395.82 524.367 cv
396.031 524.371 396.23 524.383 396.414 524.402 cv
396.598 524.43 396.77 524.461 396.934 524.5 cv
399.055 524.5 li
399.141 524.504 399.207 524.547 399.25 524.629 cv
399.293 524.719 399.313 524.848 399.316 525.02 cv
cp
397.309 526.867 mo
397.305 526.395 397.172 526.023 396.914 525.75 cv
396.648 525.484 396.277 525.348 395.797 525.348 cv
395.543 525.348 395.324 525.391 395.145 525.473 cv
394.957 525.559 394.805 525.672 394.684 525.816 cv
394.563 525.965 394.473 526.133 394.414 526.32 cv
394.352 526.508 394.32 526.707 394.324 526.914 cv
394.32 527.379 394.453 527.742 394.715 528.008 cv
394.977 528.273 395.344 528.406 395.82 528.402 cv
396.07 528.406 396.289 528.367 396.48 528.281 cv
396.664 528.203 396.82 528.09 396.945 527.949 cv
397.066 527.809 397.156 527.645 397.219 527.453 cv
397.273 527.27 397.305 527.074 397.309 526.867 cv
cp
397.953 532.426 mo
397.949 532.121 397.824 531.891 397.582 531.727 cv
397.332 531.566 397 531.477 396.582 531.465 cv
394.766 531.402 li
394.598 531.535 394.461 531.66 394.359 531.773 cv
394.25 531.891 394.168 532 394.105 532.109 cv
394.043 532.215 394 532.32 393.977 532.426 cv
393.953 532.527 393.941 532.633 393.941 532.742 cv
393.941 533.078 394.109 533.332 394.453 533.512 cv
394.793 533.684 395.273 533.773 395.891 533.773 cv
396.277 533.773 396.602 533.734 396.867 533.66 cv
397.125 533.582 397.336 533.48 397.5 533.359 cv
397.656 533.23 397.773 533.09 397.848 532.93 cv
397.914 532.77 397.949 532.602 397.953 532.426 cv
cp
f
406.879 527.906 mo
406.875 528.109 406.824 528.25 406.727 528.336 cv
406.621 528.422 406.504 528.465 406.379 528.465 cv
401.762 528.465 li
401.758 528.855 401.797 529.207 401.879 529.52 cv
401.953 529.832 402.086 530.102 402.27 530.32 cv
402.449 530.547 402.684 530.719 402.98 530.836 cv
403.27 530.961 403.629 531.02 404.055 531.016 cv
404.387 531.02 404.684 530.992 404.945 530.934 cv
405.207 530.883 405.434 530.82 405.625 530.75 cv
405.813 530.684 405.969 530.625 406.094 530.566 cv
406.215 530.516 406.309 530.488 406.371 530.484 cv
406.406 530.488 406.438 530.496 406.469 530.512 cv
406.496 530.531 406.52 530.559 406.539 530.594 cv
406.551 530.633 406.563 530.684 406.574 530.746 cv
406.578 530.812 406.582 530.891 406.586 530.984 cv
406.582 531.055 406.578 531.113 406.578 531.16 cv
406.57 531.207 406.566 531.25 406.559 531.289 cv
406.551 531.328 406.535 531.363 406.52 531.395 cv
406.496 531.426 406.473 531.457 406.449 531.484 cv
406.418 531.516 406.336 531.562 406.195 531.625 cv
406.055 531.691 405.871 531.754 405.648 531.816 cv
405.422 531.879 405.164 531.934 404.871 531.984 cv
404.578 532.031 404.266 532.055 403.934 532.059 cv
403.355 532.055 402.848 531.977 402.418 531.816 cv
401.98 531.656 401.617 531.418 401.324 531.102 cv
401.023 530.785 400.801 530.391 400.652 529.91 cv
400.504 529.434 400.43 528.875 400.43 528.238 cv
400.43 527.641 400.504 527.102 400.66 526.617 cv
400.813 526.141 401.039 525.73 401.336 525.395 cv
401.629 525.059 401.984 524.801 402.398 524.621 cv
402.813 524.441 403.277 524.352 403.793 524.352 cv
404.344 524.352 404.813 524.441 405.199 524.617 cv
405.586 524.797 405.902 525.035 406.156 525.332 cv
406.402 525.633 406.586 525.984 406.703 526.383 cv
406.816 526.789 406.875 527.219 406.879 527.672 cv
cp
405.586 527.523 mo
405.602 526.848 405.449 526.316 405.133 525.934 cv
404.816 525.551 404.348 525.359 403.73 525.355 cv
403.406 525.359 403.125 525.418 402.887 525.535 cv
402.645 525.656 402.445 525.816 402.285 526.012 cv
402.121 526.211 401.996 526.441 401.91 526.703 cv
401.82 526.965 401.77 527.238 401.762 527.523 cv
cp
f
413.246 529.805 mo
413.242 530.168 413.176 530.488 413.047 530.766 cv
412.914 531.047 412.727 531.281 412.484 531.473 cv
412.238 531.668 411.945 531.812 411.609 531.91 cv
411.27 532.008 410.898 532.055 410.496 532.059 cv
410.242 532.055 410.004 532.035 409.781 532 cv
409.555 531.957 409.355 531.91 409.176 531.852 cv
408.996 531.793 408.844 531.73 408.719 531.664 cv
408.594 531.602 408.5 531.543 408.445 531.488 cv
408.387 531.437 408.348 531.367 408.324 531.27 cv
408.297 531.18 408.285 531.051 408.285 530.891 cv
408.285 530.793 408.289 530.711 408.301 530.641 cv
408.309 530.574 408.32 530.52 408.34 530.477 cv
408.352 530.437 408.375 530.406 408.402 530.387 cv
408.43 530.371 408.461 530.363 408.5 530.359 cv
408.555 530.363 408.641 530.398 408.754 530.465 cv
408.863 530.539 409 530.617 409.168 530.695 cv
409.328 530.781 409.52 530.855 409.746 530.926 cv
409.965 530.996 410.223 531.031 410.52 531.031 cv
410.734 531.031 410.934 531.008 411.113 530.961 cv
411.289 530.914 411.441 530.848 411.57 530.754 cv
411.699 530.668 411.801 530.551 411.871 530.406 cv
411.941 530.27 411.977 530.102 411.977 529.906 cv
411.977 529.711 411.926 529.547 411.824 529.41 cv
411.723 529.277 411.586 529.156 411.422 529.051 cv
411.254 528.949 411.07 528.859 410.863 528.773 cv
410.652 528.695 410.438 528.609 410.219 528.52 cv
410 528.434 409.785 528.332 409.574 528.219 cv
409.363 528.109 409.172 527.977 409.008 527.812 cv
408.836 527.656 408.703 527.461 408.605 527.234 cv
408.5 527.012 408.449 526.746 408.453 526.434 cv
408.449 526.16 408.504 525.895 408.613 525.641 cv
408.719 525.391 408.879 525.172 409.094 524.98 cv
409.305 524.793 409.57 524.641 409.891 524.523 cv
410.211 524.41 410.582 524.352 411.012 524.352 cv
411.195 524.352 411.383 524.367 411.57 524.398 cv
411.754 524.43 411.922 524.469 412.078 524.516 cv
412.227 524.562 412.355 524.613 412.465 524.668 cv
412.566 524.723 412.648 524.773 412.707 524.812 cv
412.758 524.859 412.793 524.895 412.816 524.922 cv
412.832 524.953 412.848 524.988 412.855 525.023 cv
412.863 525.066 412.871 525.113 412.879 525.168 cv
412.887 525.227 412.891 525.297 412.891 525.379 cv
412.891 525.469 412.887 525.547 412.879 525.609 cv
412.871 525.68 412.855 525.73 412.84 525.77 cv
412.816 525.812 412.797 525.844 412.773 525.859 cv
412.746 525.879 412.715 525.887 412.688 525.887 cv
412.637 525.887 412.57 525.859 412.484 525.801 cv
412.395 525.746 412.281 525.684 412.141 525.617 cv
412 525.555 411.832 525.496 411.645 525.434 cv
411.453 525.379 411.238 525.348 410.996 525.348 cv
410.773 525.348 410.582 525.375 410.418 525.422 cv
410.25 525.477 410.113 525.547 410.008 525.633 cv
409.902 525.727 409.82 525.832 409.77 525.957 cv
409.711 526.082 409.684 526.219 409.688 526.363 cv
409.684 526.566 409.734 526.734 409.84 526.871 cv
409.941 527.012 410.078 527.133 410.246 527.234 cv
410.41 527.34 410.602 527.434 410.816 527.516 cv
411.027 527.602 411.242 527.687 411.465 527.773 cv
411.684 527.863 411.902 527.965 412.121 528.07 cv
412.336 528.18 412.527 528.309 412.695 528.465 cv
412.859 528.621 412.992 528.809 413.094 529.027 cv
413.191 529.246 413.242 529.508 413.246 529.805 cv
cp
f
219.445 11.633 mo
219.445 12.473 219.34 13.223 219.133 13.883 cv
218.926 14.543 218.617 15.105 218.207 15.562 cv
217.793 16.027 217.285 16.379 216.68 16.617 cv
216.07 16.859 215.367 16.977 214.578 16.98 cv
213.789 16.977 213.105 16.875 212.52 16.672 cv
211.934 16.469 211.445 16.156 211.055 15.73 cv
210.664 15.312 210.371 14.777 210.18 14.125 cv
209.98 13.477 209.883 12.707 209.887 11.812 cv
209.883 11 209.988 10.266 210.199 9.60901 cv
210.406 8.961 210.715 8.40198 211.125 7.94098 cv
211.535 7.48401 212.043 7.13702 212.652 6.89099 cv
213.258 6.64801 213.961 6.52301 214.766 6.52301 cv
215.523 6.52301 216.199 6.625 216.789 6.828 cv
217.371 7.03101 217.859 7.34399 218.258 7.76202 cv
218.648 8.18701 218.945 8.71899 219.145 9.35901 cv
219.344 10.004 219.445 10.762 219.445 11.633 cv
cp
217.293 11.742 mo
217.289 11.219 217.246 10.734 217.168 10.297 cv
217.082 9.86298 216.941 9.492 216.742 9.17999 cv
216.539 8.87097 216.273 8.633 215.941 8.461 cv
215.605 8.297 215.188 8.211 214.695 8.20697 cv
214.188 8.211 213.766 8.30499 213.43 8.492 cv
213.086 8.68402 212.813 8.93701 212.609 9.25403 cv
212.398 9.57397 212.254 9.94501 212.168 10.367 cv
212.082 10.789 212.039 11.238 212.039 11.711 cv
212.039 12.266 212.078 12.762 212.164 13.199 cv
212.242 13.641 212.383 14.016 212.586 14.328 cv
212.781 14.641 213.047 14.879 213.383 15.043 cv
213.711 15.207 214.133 15.289 214.641 15.285 cv
215.141 15.289 215.559 15.195 215.902 15.008 cv
216.238 14.82 216.512 14.566 216.723 14.242 cv
216.926 13.922 217.074 13.547 217.164 13.113 cv
217.246 12.687 217.289 12.23 217.293 11.742 cv
cp
f
227.457 9.56598 mo
227.453 9.59399 227.453 9.625 227.453 9.65997 cv
227.449 9.69897 227.445 9.73798 227.438 9.78101 cv
227.43 9.828 227.418 9.87903 227.406 9.93402 cv
227.391 9.992 227.375 10.059 227.355 10.129 cv
225.266 16.426 li
225.234 16.516 225.199 16.59 225.16 16.641 cv
225.113 16.699 225.043 16.742 224.941 16.77 cv
224.84 16.801 224.699 16.816 224.527 16.832 cv
224.348 16.84 224.121 16.848 223.844 16.848 cv
223.566 16.848 223.34 16.84 223.168 16.828 cv
222.988 16.812 222.852 16.793 222.758 16.762 cv
222.656 16.734 222.586 16.691 222.543 16.633 cv
222.496 16.582 222.461 16.512 222.438 16.426 cv
220.348 10.129 li
220.316 10.027 220.289 9.93402 220.273 9.84802 cv
220.25 9.76599 220.242 9.70697 220.242 9.66803 cv
220.238 9.63702 220.234 9.60199 220.238 9.56598 cv
220.234 9.51599 220.25 9.46899 220.281 9.42999 cv
220.309 9.39099 220.359 9.35901 220.434 9.33197 cv
220.504 9.30902 220.605 9.289 220.734 9.27698 cv
220.859 9.27002 221.02 9.26599 221.215 9.26202 cv
221.426 9.26599 221.598 9.27301 221.73 9.28101 cv
221.859 9.297 221.961 9.31201 222.035 9.336 cv
222.109 9.35901 222.16 9.39502 222.195 9.43701 cv
222.223 9.48401 222.25 9.539 222.273 9.59802 cv
223.859 14.711 li
223.906 14.902 li
223.953 14.711 li
225.516 9.59802 li
225.531 9.539 225.555 9.48401 225.59 9.43701 cv
225.621 9.39502 225.676 9.35901 225.75 9.336 cv
225.82 9.31201 225.914 9.297 226.039 9.28101 cv
226.156 9.27301 226.316 9.26599 226.52 9.26202 cv
226.707 9.26599 226.867 9.27002 226.992 9.27698 cv
227.113 9.289 227.207 9.30902 227.277 9.33197 cv
227.344 9.35901 227.391 9.39099 227.418 9.42999 cv
227.441 9.46899 227.453 9.51599 227.457 9.56598 cv
cp
f
234.91 12.852 mo
234.906 13.094 234.855 13.273 234.75 13.383 cv
234.641 13.5 234.492 13.555 234.309 13.555 cv
230.07 13.555 li
230.066 13.852 230.102 14.121 230.176 14.363 cv
230.242 14.605 230.355 14.812 230.512 14.98 cv
230.664 15.148 230.863 15.277 231.105 15.363 cv
231.348 15.457 231.637 15.5 231.977 15.496 cv
232.316 15.5 232.617 15.477 232.883 15.422 cv
233.141 15.375 233.367 15.32 233.555 15.258 cv
233.742 15.203 233.898 15.148 234.027 15.094 cv
234.148 15.047 234.25 15.02 234.332 15.02 cv
234.375 15.02 234.414 15.031 234.449 15.047 cv
234.477 15.07 234.504 15.102 234.527 15.145 cv
234.547 15.195 234.559 15.262 234.57 15.344 cv
234.574 15.434 234.578 15.543 234.582 15.668 cv
234.578 15.785 234.578 15.883 234.574 15.961 cv
234.566 16.047 234.559 16.113 234.551 16.168 cv
234.539 16.227 234.523 16.277 234.504 16.312 cv
234.48 16.355 234.453 16.391 234.422 16.426 cv
234.387 16.465 234.293 16.516 234.145 16.574 cv
233.992 16.641 233.801 16.703 233.566 16.758 cv
233.332 16.82 233.063 16.867 232.766 16.914 cv
232.461 16.953 232.141 16.977 231.797 16.98 cv
231.176 16.977 230.633 16.902 230.168 16.746 cv
229.699 16.594 229.309 16.355 229 16.035 cv
228.688 15.719 228.457 15.32 228.305 14.836 cv
228.148 14.355 228.07 13.785 228.074 13.133 cv
228.07 12.516 228.152 11.961 228.316 11.461 cv
228.477 10.969 228.707 10.547 229.016 10.195 cv
229.32 9.85199 229.695 9.586 230.137 9.40198 cv
230.574 9.22302 231.07 9.133 231.625 9.12903 cv
232.207 9.133 232.703 9.21899 233.117 9.38702 cv
233.527 9.56201 233.867 9.80103 234.137 10.102 cv
234.398 10.41 234.594 10.77 234.723 11.184 cv
234.844 11.602 234.906 12.055 234.91 12.539 cv
cp
233.008 12.289 mo
233.02 11.738 232.91 11.309 232.676 10.992 cv
232.438 10.68 232.07 10.52 231.578 10.52 cv
231.324 10.52 231.105 10.566 230.926 10.66 cv
230.738 10.754 230.586 10.883 230.465 11.039 cv
230.34 11.199 230.246 11.383 230.184 11.598 cv
230.117 11.816 230.078 12.047 230.07 12.289 cv
cp
f
240.996 10.223 mo
240.992 10.414 240.988 10.566 240.98 10.684 cv
240.969 10.805 240.953 10.898 240.934 10.965 cv
240.91 11.031 240.883 11.078 240.852 11.102 cv
240.816 11.129 240.773 11.141 240.723 11.141 cv
240.68 11.141 240.633 11.133 240.582 11.113 cv
240.527 11.098 240.469 11.078 240.406 11.055 cv
240.34 11.035 240.27 11.016 240.191 10.996 cv
240.113 10.98 240.027 10.973 239.934 10.969 cv
239.824 10.973 239.715 10.992 239.605 11.035 cv
239.496 11.082 239.383 11.152 239.266 11.242 cv
239.148 11.34 239.023 11.465 238.898 11.617 cv
238.766 11.777 238.629 11.969 238.488 12.195 cv
238.488 16.535 li
238.484 16.59 238.469 16.633 238.441 16.672 cv
238.406 16.711 238.355 16.746 238.281 16.77 cv
238.203 16.797 238.102 16.812 237.98 16.828 cv
237.852 16.84 237.691 16.848 237.504 16.848 cv
237.309 16.848 237.152 16.84 237.031 16.828 cv
236.902 16.812 236.801 16.797 236.73 16.77 cv
236.652 16.746 236.602 16.711 236.57 16.672 cv
236.539 16.633 236.523 16.59 236.523 16.535 cv
236.523 9.57397 li
236.523 9.52698 236.535 9.47998 236.563 9.43701 cv
236.586 9.40198 236.633 9.37097 236.703 9.34003 cv
236.77 9.31598 236.855 9.297 236.965 9.28101 cv
237.066 9.27301 237.203 9.26599 237.367 9.26202 cv
237.531 9.26599 237.668 9.27301 237.777 9.28101 cv
237.887 9.297 237.969 9.31598 238.031 9.34003 cv
238.086 9.37097 238.129 9.40198 238.16 9.43701 cv
238.184 9.47998 238.199 9.52698 238.199 9.57397 cv
238.199 10.441 li
238.379 10.184 238.551 9.96899 238.715 9.797 cv
238.875 9.633 239.027 9.49597 239.176 9.39502 cv
239.32 9.297 239.465 9.22998 239.613 9.18701 cv
239.754 9.15198 239.902 9.133 240.051 9.12903 cv
240.117 9.133 240.188 9.13702 240.27 9.14099 cv
240.344 9.15198 240.426 9.164 240.512 9.17999 cv
240.594 9.19897 240.668 9.21899 240.73 9.242 cv
240.793 9.26599 240.836 9.29303 240.867 9.31598 cv
240.891 9.34802 240.914 9.375 240.93 9.40198 cv
240.941 9.43701 240.953 9.47998 240.965 9.53101 cv
240.973 9.59003 240.98 9.672 240.988 9.77698 cv
240.992 9.89099 240.992 10.039 240.996 10.223 cv
cp
f
247.727 16.559 mo
247.727 16.637 247.699 16.691 247.648 16.73 cv
247.594 16.773 247.512 16.801 247.402 16.82 cv
247.289 16.836 247.125 16.848 246.906 16.848 cv
246.672 16.848 246.5 16.836 246.398 16.82 cv
246.289 16.801 246.215 16.773 246.172 16.73 cv
246.125 16.691 246.102 16.637 246.105 16.559 cv
246.105 16.004 li
245.816 16.312 245.492 16.555 245.125 16.723 cv
244.758 16.895 244.348 16.977 243.902 16.98 cv
243.527 16.977 243.188 16.93 242.883 16.836 cv
242.57 16.742 242.305 16.602 242.082 16.406 cv
241.852 16.219 241.676 15.98 241.555 15.699 cv
241.426 15.418 241.363 15.094 241.367 14.719 cv
241.363 14.316 241.441 13.961 241.605 13.66 cv
241.762 13.363 242 13.117 242.313 12.918 cv
242.625 12.727 243.016 12.582 243.488 12.484 cv
243.953 12.395 244.496 12.348 245.121 12.344 cv
245.801 12.344 li
245.801 11.922 li
245.797 11.707 245.777 11.516 245.734 11.348 cv
245.688 11.187 245.613 11.051 245.516 10.941 cv
245.41 10.832 245.273 10.754 245.109 10.699 cv
244.938 10.652 244.73 10.625 244.48 10.621 cv
244.152 10.625 243.859 10.66 243.602 10.73 cv
243.344 10.805 243.113 10.887 242.918 10.973 cv
242.719 11.062 242.555 11.141 242.426 11.211 cv
242.289 11.285 242.184 11.324 242.102 11.32 cv
242.043 11.324 241.992 11.305 241.949 11.266 cv
241.902 11.23 241.863 11.18 241.84 11.109 cv
241.809 11.047 241.789 10.965 241.773 10.863 cv
241.758 10.77 241.75 10.66 241.75 10.535 cv
241.75 10.379 241.762 10.25 241.789 10.152 cv
241.813 10.062 241.863 9.97699 241.938 9.89801 cv
242.008 9.82397 242.133 9.742 242.32 9.64801 cv
242.5 9.55902 242.715 9.47302 242.957 9.39502 cv
243.199 9.31598 243.465 9.25403 243.758 9.203 cv
244.043 9.15601 244.34 9.133 244.652 9.12903 cv
245.195 9.133 245.664 9.18402 246.055 9.289 cv
246.441 9.39801 246.758 9.56201 247.008 9.78101 cv
247.254 10.004 247.438 10.289 247.555 10.637 cv
247.668 10.984 247.727 11.398 247.727 11.875 cv
cp
245.801 13.578 mo
245.051 13.578 li
244.73 13.578 244.461 13.602 244.238 13.648 cv
244.012 13.695 243.828 13.766 243.691 13.859 cv
243.547 13.953 243.445 14.066 243.383 14.199 cv
243.316 14.332 243.285 14.484 243.285 14.656 cv
243.285 14.945 243.375 15.176 243.563 15.34 cv
243.742 15.512 244 15.594 244.332 15.59 cv
244.605 15.594 244.859 15.523 245.094 15.379 cv
245.324 15.242 245.559 15.039 245.801 14.766 cv
cp
f
251.656 16.535 mo
251.652 16.59 251.637 16.633 251.609 16.672 cv
251.574 16.711 251.523 16.746 251.449 16.77 cv
251.371 16.797 251.27 16.812 251.148 16.828 cv
251.02 16.84 250.859 16.848 250.672 16.848 cv
250.477 16.848 250.32 16.84 250.199 16.828 cv
250.07 16.812 249.969 16.797 249.898 16.77 cv
249.82 16.746 249.77 16.711 249.738 16.672 cv
249.707 16.633 249.691 16.59 249.691 16.535 cv
249.691 6.27301 li
249.691 6.22302 249.707 6.17603 249.738 6.133 cv
249.77 6.09399 249.82 6.05902 249.898 6.02698 cv
249.969 6 250.07 5.97699 250.199 5.961 cv
250.32 5.94501 250.477 5.93701 250.672 5.93701 cv
250.859 5.93701 251.02 5.94501 251.148 5.961 cv
251.27 5.97699 251.371 6 251.449 6.02698 cv
251.523 6.05902 251.574 6.09399 251.609 6.133 cv
251.637 6.17603 251.652 6.22302 251.656 6.27301 cv
cp
f
255.621 16.535 mo
255.617 16.59 255.602 16.633 255.574 16.672 cv
255.539 16.711 255.488 16.746 255.414 16.77 cv
255.336 16.797 255.234 16.812 255.113 16.828 cv
254.984 16.84 254.824 16.848 254.637 16.848 cv
254.441 16.848 254.285 16.84 254.164 16.828 cv
254.035 16.812 253.934 16.797 253.863 16.77 cv
253.785 16.746 253.734 16.711 253.703 16.672 cv
253.672 16.633 253.656 16.59 253.656 16.535 cv
253.656 6.27301 li
253.656 6.22302 253.672 6.17603 253.703 6.133 cv
253.734 6.09399 253.785 6.05902 253.863 6.02698 cv
253.934 6 254.035 5.97699 254.164 5.961 cv
254.285 5.94501 254.441 5.93701 254.637 5.93701 cv
254.824 5.93701 254.984 5.94501 255.113 5.961 cv
255.234 5.97699 255.336 6 255.414 6.02698 cv
255.488 6.05902 255.539 6.09399 255.574 6.133 cv
255.602 6.17603 255.617 6.22302 255.621 6.27301 cv
cp
f
268.813 16.535 mo
268.809 16.598 268.797 16.645 268.781 16.68 cv
268.758 16.723 268.711 16.754 268.633 16.777 cv
268.555 16.801 268.438 16.816 268.289 16.832 cv
268.133 16.84 267.93 16.848 267.672 16.848 cv
267.453 16.848 267.277 16.84 267.148 16.832 cv
267.016 16.816 266.914 16.801 266.84 16.773 cv
266.762 16.746 266.707 16.711 266.68 16.664 cv
266.645 16.625 266.617 16.57 266.602 16.504 cv
265.699 14.25 li
265.586 14 265.48 13.773 265.379 13.57 cv
265.273 13.375 265.156 13.207 265.031 13.074 cv
264.898 12.941 264.754 12.844 264.59 12.773 cv
264.422 12.711 264.227 12.676 264.012 12.672 cv
263.371 12.672 li
263.371 16.52 li
263.371 16.574 263.352 16.621 263.32 16.66 cv
263.281 16.703 263.227 16.738 263.152 16.762 cv
263.07 16.789 262.965 16.809 262.84 16.824 cv
262.707 16.84 262.543 16.848 262.34 16.848 cv
262.145 16.848 261.98 16.84 261.848 16.824 cv
261.715 16.809 261.609 16.789 261.531 16.762 cv
261.453 16.738 261.398 16.703 261.367 16.66 cv
261.336 16.621 261.32 16.574 261.32 16.52 cv
261.32 7.34802 li
261.32 7.125 261.379 6.961 261.496 6.85498 cv
261.613 6.758 261.758 6.70697 261.93 6.703 cv
264.543 6.703 li
264.809 6.70697 265.027 6.711 265.199 6.71899 cv
265.371 6.72998 265.527 6.742 265.668 6.758 cv
266.07 6.81598 266.434 6.91803 266.762 7.05499 cv
267.086 7.19501 267.363 7.375 267.59 7.60199 cv
267.816 7.828 267.988 8.09802 268.109 8.40601 cv
268.227 8.71899 268.285 9.07397 268.289 9.47302 cv
268.285 9.81201 268.242 10.121 268.16 10.398 cv
268.07 10.68 267.945 10.93 267.781 11.145 cv
267.613 11.363 267.406 11.551 267.164 11.711 cv
266.914 11.875 266.637 12.004 266.328 12.102 cv
266.477 12.176 266.617 12.266 266.754 12.367 cv
266.883 12.473 267.008 12.598 267.129 12.746 cv
267.242 12.895 267.355 13.066 267.461 13.254 cv
267.563 13.449 267.664 13.664 267.766 13.898 cv
268.617 15.887 li
268.691 16.086 268.746 16.23 268.773 16.32 cv
268.797 16.414 268.809 16.488 268.813 16.535 cv
cp
266.164 9.68402 mo
266.16 9.35199 266.086 9.07001 265.938 8.84003 cv
265.789 8.61298 265.543 8.453 265.199 8.35498 cv
265.094 8.33197 264.973 8.30902 264.844 8.29303 cv
264.707 8.27698 264.523 8.27002 264.293 8.27002 cv
263.371 8.27002 li
263.371 11.133 li
264.418 11.133 li
264.707 11.137 264.961 11.102 265.184 11.031 cv
265.398 10.965 265.582 10.867 265.73 10.734 cv
265.875 10.609 265.984 10.457 266.055 10.277 cv
266.125 10.105 266.16 9.90601 266.164 9.68402 cv
cp
f
276.801 16.535 mo
276.797 16.59 276.785 16.633 276.762 16.672 cv
276.734 16.711 276.688 16.746 276.625 16.77 cv
276.559 16.797 276.473 16.812 276.367 16.828 cv
276.258 16.84 276.125 16.848 275.965 16.848 cv
275.793 16.848 275.652 16.84 275.547 16.828 cv
275.438 16.812 275.352 16.797 275.293 16.77 cv
275.227 16.746 275.184 16.711 275.16 16.672 cv
275.133 16.633 275.121 16.59 275.121 16.535 cv
275.121 15.73 li
274.738 16.148 274.348 16.461 273.949 16.668 cv
273.551 16.875 273.137 16.977 272.711 16.98 cv
272.23 16.977 271.828 16.902 271.504 16.746 cv
271.18 16.594 270.918 16.379 270.719 16.105 cv
270.516 15.836 270.371 15.523 270.289 15.168 cv
270.199 14.812 270.156 14.367 270.16 13.836 cv
270.16 9.57397 li
270.156 9.52698 270.172 9.47998 270.203 9.43701 cv
270.23 9.40198 270.281 9.37097 270.359 9.34003 cv
270.43 9.31598 270.531 9.297 270.664 9.28101 cv
270.789 9.27301 270.949 9.26599 271.137 9.26202 cv
271.324 9.26599 271.48 9.27301 271.609 9.28101 cv
271.73 9.297 271.832 9.31598 271.91 9.34003 cv
271.984 9.37097 272.035 9.40198 272.07 9.43701 cv
272.098 9.47998 272.113 9.52698 272.117 9.57397 cv
272.117 13.508 li
272.113 13.875 272.137 14.156 272.188 14.344 cv
272.23 14.539 272.305 14.703 272.402 14.84 cv
272.496 14.977 272.617 15.082 272.77 15.156 cv
272.914 15.234 273.086 15.273 273.289 15.27 cv
273.535 15.273 273.789 15.184 274.043 15 cv
274.293 14.82 274.563 14.555 274.852 14.203 cv
274.852 9.57397 li
274.852 9.52698 274.863 9.47998 274.895 9.43701 cv
274.918 9.40198 274.969 9.37097 275.047 9.34003 cv
275.117 9.31598 275.219 9.297 275.348 9.28101 cv
275.469 9.27301 275.629 9.26599 275.824 9.26202 cv
276.016 9.26599 276.172 9.27301 276.301 9.28101 cv
276.422 9.297 276.523 9.31598 276.598 9.34003 cv
276.668 9.37097 276.719 9.40198 276.754 9.43701 cv
276.781 9.47998 276.797 9.52698 276.801 9.57397 cv
cp
f
285.434 16.535 mo
285.43 16.59 285.414 16.633 285.387 16.672 cv
285.352 16.711 285.301 16.746 285.23 16.77 cv
285.156 16.797 285.055 16.812 284.93 16.828 cv
284.801 16.84 284.645 16.848 284.457 16.848 cv
284.262 16.848 284.102 16.84 283.977 16.828 cv
283.848 16.812 283.746 16.797 283.676 16.77 cv
283.602 16.746 283.551 16.711 283.523 16.672 cv
283.488 16.633 283.473 16.59 283.477 16.535 cv
283.477 12.562 li
283.473 12.227 283.449 11.961 283.402 11.766 cv
283.352 11.578 283.277 11.41 283.188 11.27 cv
283.09 11.133 282.969 11.027 282.824 10.953 cv
282.672 10.879 282.5 10.844 282.305 10.84 cv
282.051 10.844 281.797 10.934 281.547 11.113 cv
281.289 11.297 281.023 11.562 280.75 11.906 cv
280.75 16.535 li
280.746 16.59 280.73 16.633 280.703 16.672 cv
280.668 16.711 280.617 16.746 280.543 16.77 cv
280.465 16.797 280.363 16.812 280.242 16.828 cv
280.113 16.84 279.953 16.848 279.766 16.848 cv
279.57 16.848 279.414 16.84 279.293 16.828 cv
279.164 16.812 279.063 16.797 278.992 16.77 cv
278.914 16.746 278.863 16.711 278.832 16.672 cv
278.801 16.633 278.785 16.59 278.785 16.535 cv
278.785 9.57397 li
278.785 9.52698 278.797 9.47998 278.824 9.43701 cv
278.848 9.40198 278.895 9.37097 278.965 9.34003 cv
279.031 9.31598 279.117 9.297 279.227 9.28101 cv
279.328 9.27301 279.465 9.26599 279.629 9.26202 cv
279.793 9.26599 279.93 9.27301 280.039 9.28101 cv
280.148 9.297 280.23 9.31598 280.293 9.34003 cv
280.348 9.37097 280.391 9.40198 280.422 9.43701 cv
280.445 9.47998 280.461 9.52698 280.461 9.57397 cv
280.461 10.379 li
280.844 9.96503 281.234 9.65198 281.637 9.44098 cv
282.031 9.23401 282.445 9.133 282.883 9.12903 cv
283.352 9.133 283.75 9.211 284.078 9.36298 cv
284.398 9.52301 284.664 9.73401 284.867 10 cv
285.066 10.27 285.211 10.582 285.301 10.941 cv
285.387 11.301 285.43 11.734 285.434 12.234 cv
cp
f
291.266 15.848 mo
291.262 16.078 291.25 16.254 291.223 16.375 cv
291.191 16.5 291.152 16.586 291.109 16.633 cv
291.059 16.684 290.988 16.727 290.902 16.766 cv
290.809 16.805 290.703 16.836 290.582 16.867 cv
290.457 16.891 290.324 16.914 290.184 16.934 cv
290.039 16.945 289.895 16.953 289.75 16.957 cv
289.355 16.953 289.016 16.902 288.734 16.809 cv
288.445 16.707 288.211 16.559 288.023 16.352 cv
287.836 16.148 287.699 15.891 287.613 15.574 cv
287.523 15.266 287.477 14.895 287.48 14.469 cv
287.48 10.902 li
286.645 10.902 li
286.543 10.906 286.469 10.844 286.418 10.719 cv
286.363 10.598 286.336 10.395 286.34 10.105 cv
286.336 9.95697 286.344 9.828 286.359 9.72302 cv
286.371 9.62097 286.391 9.539 286.418 9.47699 cv
286.441 9.41803 286.473 9.375 286.516 9.34802 cv
286.551 9.32397 286.598 9.31201 286.652 9.30902 cv
287.48 9.30902 li
287.48 7.75403 li
287.477 7.703 287.492 7.65601 287.523 7.61298 cv
287.551 7.57397 287.602 7.539 287.68 7.508 cv
287.75 7.47998 287.852 7.461 287.98 7.44501 cv
288.105 7.43402 288.262 7.42603 288.453 7.42603 cv
288.641 7.42603 288.801 7.43402 288.934 7.44501 cv
289.059 7.461 289.16 7.47998 289.234 7.508 cv
289.305 7.539 289.355 7.57397 289.391 7.61298 cv
289.418 7.65601 289.434 7.703 289.438 7.75403 cv
289.438 9.30902 li
290.953 9.30902 li
291.004 9.31201 291.047 9.32397 291.09 9.34802 cv
291.125 9.375 291.16 9.41803 291.188 9.47699 cv
291.211 9.539 291.23 9.62097 291.246 9.72302 cv
291.258 9.828 291.262 9.95697 291.266 10.105 cv
291.262 10.395 291.238 10.598 291.188 10.719 cv
291.133 10.844 291.055 10.906 290.961 10.902 cv
289.438 10.902 li
289.438 14.172 li
289.434 14.555 289.496 14.84 289.617 15.027 cv
289.734 15.219 289.945 15.312 290.258 15.309 cv
290.359 15.312 290.453 15.305 290.539 15.281 cv
290.617 15.266 290.691 15.242 290.762 15.219 cv
290.824 15.195 290.879 15.176 290.926 15.156 cv
290.965 15.141 291.008 15.133 291.047 15.129 cv
291.078 15.133 291.105 15.141 291.137 15.156 cv
291.16 15.176 291.184 15.211 291.203 15.266 cv
291.215 15.32 291.23 15.395 291.246 15.488 cv
291.258 15.582 291.262 15.703 291.266 15.848 cv
cp
f
294.656 16.535 mo
294.652 16.59 294.637 16.633 294.609 16.672 cv
294.574 16.711 294.523 16.746 294.449 16.77 cv
294.371 16.797 294.27 16.812 294.148 16.828 cv
294.02 16.84 293.859 16.848 293.672 16.848 cv
293.477 16.848 293.32 16.84 293.199 16.828 cv
293.07 16.812 292.969 16.797 292.898 16.77 cv
292.82 16.746 292.77 16.711 292.738 16.672 cv
292.707 16.633 292.691 16.59 292.691 16.535 cv
292.691 9.59003 li
292.691 9.539 292.707 9.492 292.738 9.453 cv
292.77 9.414 292.82 9.383 292.898 9.35199 cv
292.969 9.328 293.07 9.30499 293.199 9.28497 cv
293.32 9.27301 293.477 9.26599 293.672 9.26202 cv
293.859 9.26599 294.02 9.27301 294.148 9.28497 cv
294.27 9.30499 294.371 9.328 294.449 9.35199 cv
294.523 9.383 294.574 9.414 294.609 9.453 cv
294.637 9.492 294.652 9.539 294.656 9.59003 cv
cp
294.805 7.21503 mo
294.801 7.61298 294.719 7.88702 294.563 8.03497 cv
294.398 8.18701 294.102 8.26599 293.664 8.26202 cv
293.223 8.26599 292.926 8.19098 292.773 8.04303 cv
292.617 7.89801 292.539 7.63702 292.543 7.25403 cv
292.539 6.86298 292.617 6.59003 292.781 6.43402 cv
292.938 6.28497 293.238 6.20697 293.68 6.203 cv
294.113 6.20697 294.41 6.28101 294.57 6.42603 cv
294.723 6.578 294.801 6.84003 294.805 7.21503 cv
cp
f
307.695 16.535 mo
307.695 16.59 307.68 16.633 307.648 16.672 cv
307.617 16.711 307.563 16.746 307.492 16.77 cv
307.414 16.797 307.316 16.812 307.195 16.828 cv
307.066 16.84 306.906 16.848 306.719 16.848 cv
306.516 16.848 306.355 16.84 306.234 16.828 cv
306.105 16.812 306.004 16.797 305.934 16.77 cv
305.855 16.746 305.805 16.711 305.777 16.672 cv
305.746 16.633 305.73 16.59 305.734 16.535 cv
305.734 12.406 li
305.73 12.172 305.711 11.961 305.668 11.766 cv
305.621 11.578 305.551 11.41 305.465 11.27 cv
305.371 11.133 305.258 11.027 305.125 10.953 cv
304.984 10.879 304.82 10.844 304.629 10.84 cv
304.391 10.844 304.152 10.934 303.918 11.113 cv
303.676 11.297 303.418 11.562 303.137 11.906 cv
303.137 16.535 li
303.137 16.59 303.121 16.633 303.09 16.672 cv
303.059 16.711 303.004 16.746 302.93 16.77 cv
302.852 16.797 302.75 16.812 302.629 16.828 cv
302.5 16.84 302.344 16.848 302.16 16.848 cv
301.965 16.848 301.809 16.84 301.684 16.828 cv
301.559 16.812 301.457 16.797 301.383 16.77 cv
301.309 16.746 301.258 16.711 301.227 16.672 cv
301.195 16.633 301.18 16.59 301.18 16.535 cv
301.18 12.406 li
301.18 12.172 301.156 11.961 301.113 11.766 cv
301.066 11.578 301 11.41 300.914 11.27 cv
300.824 11.133 300.711 11.027 300.57 10.953 cv
300.43 10.879 300.266 10.844 300.078 10.84 cv
299.836 10.844 299.594 10.934 299.359 11.113 cv
299.117 11.297 298.859 11.562 298.586 11.906 cv
298.586 16.535 li
298.582 16.59 298.566 16.633 298.539 16.672 cv
298.504 16.711 298.453 16.746 298.379 16.77 cv
298.301 16.797 298.199 16.812 298.078 16.828 cv
297.949 16.84 297.789 16.848 297.602 16.848 cv
297.406 16.848 297.25 16.84 297.129 16.828 cv
297 16.812 296.898 16.797 296.828 16.77 cv
296.75 16.746 296.699 16.711 296.668 16.672 cv
296.637 16.633 296.621 16.59 296.621 16.535 cv
296.621 9.57397 li
296.621 9.52698 296.633 9.47998 296.66 9.43701 cv
296.684 9.40198 296.73 9.37097 296.801 9.34003 cv
296.867 9.31598 296.953 9.297 297.063 9.28101 cv
297.164 9.27301 297.301 9.26599 297.465 9.26202 cv
297.629 9.26599 297.766 9.27301 297.875 9.28101 cv
297.984 9.297 298.066 9.31598 298.129 9.34003 cv
298.184 9.37097 298.227 9.40198 298.258 9.43701 cv
298.281 9.47998 298.297 9.52698 298.297 9.57397 cv
298.297 10.379 li
298.68 9.96503 299.063 9.65198 299.449 9.44098 cv
299.828 9.23401 300.227 9.133 300.648 9.12903 cv
300.93 9.133 301.188 9.15997 301.418 9.21899 cv
301.645 9.28101 301.848 9.367 302.031 9.47699 cv
302.207 9.59003 302.363 9.72699 302.496 9.87903 cv
302.625 10.039 302.734 10.211 302.824 10.402 cv
303.031 10.18 303.234 9.98798 303.438 9.82397 cv
303.633 9.664 303.832 9.53101 304.031 9.42999 cv
304.223 9.328 304.418 9.25403 304.617 9.203 cv
304.809 9.15601 305.008 9.133 305.215 9.12903 cv
305.672 9.133 306.063 9.211 306.383 9.36298 cv
306.699 9.52301 306.953 9.73401 307.152 10 cv
307.344 10.27 307.484 10.582 307.57 10.941 cv
307.652 11.301 307.695 11.68 307.695 12.078 cv
cp
f
316.047 12.852 mo
316.043 13.094 315.992 13.273 315.887 13.383 cv
315.777 13.5 315.629 13.555 315.445 13.555 cv
311.207 13.555 li
311.203 13.852 311.238 14.121 311.313 14.363 cv
311.379 14.605 311.492 14.812 311.648 14.98 cv
311.801 15.148 312 15.277 312.242 15.363 cv
312.484 15.457 312.773 15.5 313.113 15.496 cv
313.453 15.5 313.754 15.477 314.02 15.422 cv
314.277 15.375 314.504 15.32 314.691 15.258 cv
314.879 15.203 315.035 15.148 315.164 15.094 cv
315.285 15.047 315.387 15.02 315.469 15.02 cv
315.512 15.02 315.551 15.031 315.586 15.047 cv
315.613 15.07 315.641 15.102 315.664 15.145 cv
315.684 15.195 315.695 15.262 315.707 15.344 cv
315.711 15.434 315.715 15.543 315.719 15.668 cv
315.715 15.785 315.715 15.883 315.711 15.961 cv
315.703 16.047 315.695 16.113 315.688 16.168 cv
315.676 16.227 315.66 16.277 315.641 16.312 cv
315.617 16.355 315.59 16.391 315.559 16.426 cv
315.523 16.465 315.43 16.516 315.281 16.574 cv
315.129 16.641 314.938 16.703 314.703 16.758 cv
314.469 16.82 314.199 16.867 313.902 16.914 cv
313.598 16.953 313.277 16.977 312.934 16.98 cv
312.313 16.977 311.77 16.902 311.305 16.746 cv
310.836 16.594 310.445 16.355 310.137 16.035 cv
309.824 15.719 309.594 15.32 309.441 14.836 cv
309.285 14.355 309.207 13.785 309.211 13.133 cv
309.207 12.516 309.289 11.961 309.453 11.461 cv
309.613 10.969 309.844 10.547 310.152 10.195 cv
310.457 9.85199 310.832 9.586 311.273 9.40198 cv
311.711 9.22302 312.207 9.133 312.762 9.12903 cv
313.344 9.133 313.84 9.21899 314.254 9.38702 cv
314.664 9.56201 315.004 9.80103 315.273 10.102 cv
315.535 10.41 315.73 10.77 315.859 11.184 cv
315.98 11.602 316.043 12.055 316.047 12.539 cv
cp
314.145 12.289 mo
314.156 11.738 314.047 11.309 313.813 10.992 cv
313.574 10.68 313.207 10.52 312.715 10.52 cv
312.461 10.52 312.242 10.566 312.063 10.66 cv
311.875 10.754 311.723 10.883 311.602 11.039 cv
311.477 11.199 311.383 11.383 311.32 11.598 cv
311.254 11.816 311.215 12.047 311.207 12.289 cv
cp
f
322.555 14.57 mo
322.555 14.965 322.48 15.312 322.332 15.613 cv
322.184 15.918 321.973 16.172 321.707 16.371 cv
321.434 16.578 321.113 16.727 320.746 16.828 cv
320.371 16.926 319.973 16.977 319.543 16.98 cv
319.281 16.977 319.031 16.957 318.797 16.922 cv
318.559 16.879 318.348 16.832 318.164 16.773 cv
317.973 16.715 317.816 16.652 317.695 16.59 cv
317.566 16.527 317.477 16.469 317.422 16.414 cv
317.363 16.359 317.316 16.273 317.289 16.156 cv
317.254 16.039 317.238 15.867 317.242 15.637 cv
317.238 15.488 317.246 15.367 317.258 15.273 cv
317.266 15.184 317.281 15.109 317.305 15.055 cv
317.324 15 317.348 14.965 317.383 14.945 cv
317.41 14.93 317.449 14.922 317.5 14.918 cv
317.555 14.922 317.641 14.953 317.754 15.016 cv
317.863 15.082 318.004 15.152 318.172 15.23 cv
318.336 15.309 318.527 15.383 318.75 15.449 cv
318.969 15.52 319.219 15.555 319.504 15.551 cv
319.676 15.555 319.836 15.535 319.977 15.496 cv
320.113 15.461 320.23 15.41 320.336 15.34 cv
320.434 15.277 320.512 15.191 320.566 15.082 cv
320.617 14.98 320.645 14.859 320.645 14.727 cv
320.645 14.57 320.594 14.437 320.5 14.324 cv
320.398 14.215 320.273 14.117 320.117 14.031 cv
319.957 13.949 319.777 13.871 319.578 13.797 cv
319.375 13.727 319.168 13.645 318.961 13.555 cv
318.746 13.469 318.539 13.367 318.344 13.25 cv
318.141 13.137 317.965 12.996 317.809 12.828 cv
317.648 12.664 317.52 12.465 317.426 12.227 cv
317.328 11.996 317.281 11.715 317.281 11.383 cv
317.281 11.055 317.344 10.75 317.477 10.469 cv
317.602 10.191 317.789 9.953 318.039 9.75403 cv
318.281 9.55902 318.578 9.40601 318.93 9.29303 cv
319.277 9.18701 319.672 9.133 320.113 9.12903 cv
320.328 9.133 320.543 9.14801 320.75 9.17603 cv
320.953 9.211 321.137 9.25 321.309 9.29303 cv
321.473 9.34399 321.613 9.39502 321.73 9.44501 cv
321.84 9.50403 321.922 9.55103 321.977 9.586 cv
322.023 9.62903 322.059 9.66803 322.082 9.703 cv
322.098 9.74597 322.113 9.79303 322.129 9.84399 cv
322.137 9.90198 322.148 9.96899 322.156 10.047 cv
322.164 10.129 322.168 10.23 322.168 10.348 cv
322.168 10.492 322.164 10.605 322.156 10.691 cv
322.148 10.781 322.133 10.852 322.117 10.902 cv
322.094 10.953 322.07 10.988 322.043 11.004 cv
322.008 11.027 321.973 11.035 321.934 11.031 cv
321.887 11.035 321.813 11.008 321.715 10.953 cv
321.613 10.898 321.488 10.84 321.344 10.777 cv
321.191 10.715 321.02 10.656 320.828 10.602 cv
320.629 10.547 320.406 10.52 320.16 10.52 cv
319.98 10.52 319.828 10.539 319.699 10.574 cv
319.566 10.613 319.461 10.664 319.379 10.73 cv
319.293 10.801 319.23 10.883 319.191 10.969 cv
319.148 11.062 319.125 11.156 319.129 11.258 cv
319.125 11.422 319.176 11.559 319.277 11.664 cv
319.375 11.777 319.504 11.875 319.668 11.953 cv
319.824 12.039 320.008 12.117 320.219 12.187 cv
320.422 12.266 320.633 12.344 320.844 12.426 cv
321.055 12.516 321.262 12.617 321.469 12.727 cv
321.672 12.844 321.855 12.984 322.02 13.148 cv
322.18 13.32 322.309 13.52 322.406 13.746 cv
322.504 13.98 322.555 14.254 322.555 14.57 cv
cp
f
331.293 12.875 mo
331.289 13.18 331.262 13.391 331.207 13.508 cv
331.148 13.629 331.055 13.691 330.934 13.687 cv
327.688 13.687 li
327.555 13.691 327.461 13.629 327.406 13.504 cv
327.344 13.383 327.316 13.172 327.32 12.875 cv
327.316 12.586 327.344 12.383 327.406 12.258 cv
327.461 12.141 327.555 12.078 327.688 12.078 cv
330.934 12.078 li
330.992 12.078 331.047 12.094 331.094 12.117 cv
331.137 12.148 331.176 12.191 331.207 12.25 cv
331.238 12.316 331.258 12.398 331.273 12.5 cv
331.281 12.605 331.289 12.73 331.293 12.875 cv
cp
f
343.973 16.535 mo
343.969 16.598 343.957 16.645 343.941 16.68 cv
343.918 16.723 343.871 16.754 343.793 16.777 cv
343.715 16.801 343.598 16.816 343.449 16.832 cv
343.293 16.84 343.09 16.848 342.832 16.848 cv
342.613 16.848 342.438 16.84 342.309 16.832 cv
342.176 16.816 342.074 16.801 342 16.773 cv
341.922 16.746 341.867 16.711 341.84 16.664 cv
341.805 16.625 341.777 16.57 341.762 16.504 cv
340.859 14.25 li
340.746 14 340.641 13.773 340.539 13.57 cv
340.434 13.375 340.316 13.207 340.191 13.074 cv
340.059 12.941 339.914 12.844 339.75 12.773 cv
339.582 12.711 339.387 12.676 339.172 12.672 cv
338.531 12.672 li
338.531 16.52 li
338.531 16.574 338.512 16.621 338.48 16.66 cv
338.441 16.703 338.387 16.738 338.313 16.762 cv
338.23 16.789 338.125 16.809 338 16.824 cv
337.867 16.84 337.703 16.848 337.5 16.848 cv
337.305 16.848 337.141 16.84 337.008 16.824 cv
336.875 16.809 336.77 16.789 336.691 16.762 cv
336.613 16.738 336.559 16.703 336.527 16.66 cv
336.496 16.621 336.48 16.574 336.48 16.52 cv
336.48 7.34802 li
336.48 7.125 336.539 6.961 336.656 6.85498 cv
336.773 6.758 336.918 6.70697 337.09 6.703 cv
339.703 6.703 li
339.969 6.70697 340.188 6.711 340.359 6.71899 cv
340.531 6.72998 340.688 6.742 340.828 6.758 cv
341.23 6.81598 341.594 6.91803 341.922 7.05499 cv
342.246 7.19501 342.523 7.375 342.75 7.60199 cv
342.977 7.828 343.148 8.09802 343.27 8.40601 cv
343.387 8.71899 343.445 9.07397 343.449 9.47302 cv
343.445 9.81201 343.402 10.121 343.32 10.398 cv
343.23 10.68 343.105 10.93 342.941 11.145 cv
342.773 11.363 342.566 11.551 342.324 11.711 cv
342.074 11.875 341.797 12.004 341.488 12.102 cv
341.637 12.176 341.777 12.266 341.914 12.367 cv
342.043 12.473 342.168 12.598 342.289 12.746 cv
342.402 12.895 342.516 13.066 342.621 13.254 cv
342.723 13.449 342.824 13.664 342.926 13.898 cv
343.777 15.887 li
343.852 16.086 343.906 16.23 343.934 16.32 cv
343.957 16.414 343.969 16.488 343.973 16.535 cv
cp
341.324 9.68402 mo
341.32 9.35199 341.246 9.07001 341.098 8.84003 cv
340.949 8.61298 340.703 8.453 340.359 8.35498 cv
340.254 8.33197 340.133 8.30902 340.004 8.29303 cv
339.867 8.27698 339.684 8.27002 339.453 8.27002 cv
338.531 8.27002 li
338.531 11.133 li
339.578 11.133 li
339.867 11.137 340.121 11.102 340.344 11.031 cv
340.559 10.965 340.742 10.867 340.891 10.734 cv
341.035 10.609 341.145 10.457 341.215 10.277 cv
341.285 10.105 341.32 9.90601 341.324 9.68402 cv
cp
f
351.555 12.852 mo
351.551 13.094 351.5 13.273 351.395 13.383 cv
351.285 13.5 351.137 13.555 350.953 13.555 cv
346.715 13.555 li
346.711 13.852 346.746 14.121 346.82 14.363 cv
346.887 14.605 347 14.812 347.156 14.98 cv
347.309 15.148 347.508 15.277 347.75 15.363 cv
347.992 15.457 348.281 15.5 348.621 15.496 cv
348.961 15.5 349.262 15.477 349.527 15.422 cv
349.785 15.375 350.012 15.32 350.199 15.258 cv
350.387 15.203 350.543 15.148 350.672 15.094 cv
350.793 15.047 350.895 15.02 350.977 15.02 cv
351.02 15.02 351.059 15.031 351.094 15.047 cv
351.121 15.07 351.148 15.102 351.172 15.145 cv
351.191 15.195 351.203 15.262 351.215 15.344 cv
351.219 15.434 351.223 15.543 351.227 15.668 cv
351.223 15.785 351.223 15.883 351.219 15.961 cv
351.211 16.047 351.203 16.113 351.195 16.168 cv
351.184 16.227 351.168 16.277 351.148 16.312 cv
351.125 16.355 351.098 16.391 351.066 16.426 cv
351.031 16.465 350.938 16.516 350.789 16.574 cv
350.637 16.641 350.445 16.703 350.211 16.758 cv
349.977 16.82 349.707 16.867 349.41 16.914 cv
349.105 16.953 348.785 16.977 348.441 16.98 cv
347.82 16.977 347.277 16.902 346.813 16.746 cv
346.344 16.594 345.953 16.355 345.645 16.035 cv
345.332 15.719 345.102 15.32 344.949 14.836 cv
344.793 14.355 344.715 13.785 344.719 13.133 cv
344.715 12.516 344.797 11.961 344.961 11.461 cv
345.121 10.969 345.352 10.547 345.66 10.195 cv
345.965 9.85199 346.34 9.586 346.781 9.40198 cv
347.219 9.22302 347.715 9.133 348.27 9.12903 cv
348.852 9.133 349.348 9.21899 349.762 9.38702 cv
350.172 9.56201 350.512 9.80103 350.781 10.102 cv
351.043 10.41 351.238 10.77 351.367 11.184 cv
351.488 11.602 351.551 12.055 351.555 12.539 cv
cp
349.652 12.289 mo
349.664 11.738 349.555 11.309 349.32 10.992 cv
349.082 10.68 348.715 10.52 348.223 10.52 cv
347.969 10.52 347.75 10.566 347.57 10.66 cv
347.383 10.754 347.23 10.883 347.109 11.039 cv
346.984 11.199 346.891 11.383 346.828 11.598 cv
346.762 11.816 346.723 12.047 346.715 12.289 cv
cp
f
364.238 16.535 mo
364.238 16.59 364.223 16.633 364.191 16.672 cv
364.16 16.711 364.105 16.746 364.035 16.77 cv
363.957 16.797 363.859 16.812 363.738 16.828 cv
363.609 16.84 363.449 16.848 363.262 16.848 cv
363.059 16.848 362.898 16.84 362.777 16.828 cv
362.648 16.812 362.547 16.797 362.477 16.77 cv
362.398 16.746 362.348 16.711 362.32 16.672 cv
362.289 16.633 362.273 16.59 362.277 16.535 cv
362.277 12.406 li
362.273 12.172 362.254 11.961 362.211 11.766 cv
362.164 11.578 362.094 11.41 362.008 11.27 cv
361.914 11.133 361.801 11.027 361.668 10.953 cv
361.527 10.879 361.363 10.844 361.172 10.84 cv
360.934 10.844 360.695 10.934 360.461 11.113 cv
360.219 11.297 359.961 11.562 359.68 11.906 cv
359.68 16.535 li
359.68 16.59 359.664 16.633 359.633 16.672 cv
359.602 16.711 359.547 16.746 359.473 16.77 cv
359.395 16.797 359.293 16.812 359.172 16.828 cv
359.043 16.84 358.887 16.848 358.703 16.848 cv
358.508 16.848 358.352 16.84 358.227 16.828 cv
358.102 16.812 358 16.797 357.926 16.77 cv
357.852 16.746 357.801 16.711 357.77 16.672 cv
357.738 16.633 357.723 16.59 357.723 16.535 cv
357.723 12.406 li
357.723 12.172 357.699 11.961 357.656 11.766 cv
357.609 11.578 357.543 11.41 357.457 11.27 cv
357.367 11.133 357.254 11.027 357.113 10.953 cv
356.973 10.879 356.809 10.844 356.621 10.84 cv
356.379 10.844 356.137 10.934 355.902 11.113 cv
355.66 11.297 355.402 11.562 355.129 11.906 cv
355.129 16.535 li
355.125 16.59 355.109 16.633 355.082 16.672 cv
355.047 16.711 354.996 16.746 354.922 16.77 cv
354.844 16.797 354.742 16.812 354.621 16.828 cv
354.492 16.84 354.332 16.848 354.145 16.848 cv
353.949 16.848 353.793 16.84 353.672 16.828 cv
353.543 16.812 353.441 16.797 353.371 16.77 cv
353.293 16.746 353.242 16.711 353.211 16.672 cv
353.18 16.633 353.164 16.59 353.164 16.535 cv
353.164 9.57397 li
353.164 9.52698 353.176 9.47998 353.203 9.43701 cv
353.227 9.40198 353.273 9.37097 353.344 9.34003 cv
353.41 9.31598 353.496 9.297 353.605 9.28101 cv
353.707 9.27301 353.844 9.26599 354.008 9.26202 cv
354.172 9.26599 354.309 9.27301 354.418 9.28101 cv
354.527 9.297 354.609 9.31598 354.672 9.34003 cv
354.727 9.37097 354.77 9.40198 354.801 9.43701 cv
354.824 9.47998 354.84 9.52698 354.84 9.57397 cv
354.84 10.379 li
355.223 9.96503 355.605 9.65198 355.992 9.44098 cv
356.371 9.23401 356.77 9.133 357.191 9.12903 cv
357.473 9.133 357.73 9.15997 357.961 9.21899 cv
358.188 9.28101 358.391 9.367 358.574 9.47699 cv
358.75 9.59003 358.906 9.72699 359.039 9.87903 cv
359.168 10.039 359.277 10.211 359.367 10.402 cv
359.574 10.18 359.777 9.98798 359.98 9.82397 cv
360.176 9.664 360.375 9.53101 360.574 9.42999 cv
360.766 9.328 360.961 9.25403 361.16 9.203 cv
361.352 9.15601 361.551 9.133 361.758 9.12903 cv
362.215 9.133 362.605 9.211 362.926 9.36298 cv
363.242 9.52301 363.496 9.73401 363.695 10 cv
363.887 10.27 364.027 10.582 364.113 10.941 cv
364.195 11.301 364.238 11.68 364.238 12.078 cv
cp
f
373.199 12.984 mo
373.195 13.582 373.117 14.121 372.965 14.609 cv
372.805 15.098 372.57 15.52 372.254 15.871 cv
371.934 16.227 371.535 16.5 371.059 16.691 cv
370.582 16.883 370.023 16.977 369.383 16.98 cv
368.762 16.977 368.223 16.895 367.766 16.723 cv
367.309 16.555 366.93 16.305 366.629 15.973 cv
366.324 15.648 366.098 15.246 365.957 14.766 cv
365.809 14.289 365.738 13.742 365.738 13.125 cv
365.738 12.535 365.816 11.992 365.977 11.5 cv
366.133 11.012 366.371 10.59 366.688 10.234 cv
367.004 9.88702 367.398 9.61298 367.879 9.41803 cv
368.352 9.22699 368.91 9.133 369.555 9.12903 cv
370.176 9.133 370.719 9.21503 371.176 9.383 cv
371.633 9.55499 372.012 9.80499 372.313 10.129 cv
372.609 10.461 372.832 10.863 372.98 11.34 cv
373.125 11.816 373.195 12.367 373.199 12.984 cv
cp
371.176 13.062 mo
371.176 12.719 371.148 12.402 371.094 12.113 cv
371.039 11.824 370.945 11.574 370.82 11.359 cv
370.688 11.148 370.516 10.984 370.301 10.863 cv
370.082 10.746 369.809 10.684 369.484 10.684 cv
369.188 10.684 368.934 10.738 368.719 10.844 cv
368.496 10.949 368.316 11.105 368.18 11.309 cv
368.035 11.52 367.93 11.766 367.863 12.051 cv
367.789 12.344 367.754 12.672 367.758 13.039 cv
367.754 13.383 367.781 13.699 367.844 13.988 cv
367.898 14.277 367.992 14.531 368.121 14.742 cv
368.246 14.957 368.418 15.121 368.641 15.234 cv
368.855 15.355 369.129 15.414 369.453 15.41 cv
369.75 15.414 370.008 15.359 370.227 15.25 cv
370.445 15.145 370.625 14.992 370.766 14.789 cv
370.906 14.59 371.008 14.344 371.074 14.051 cv
371.141 13.766 371.176 13.434 371.176 13.062 cv
cp
f
378.879 15.848 mo
378.875 16.078 378.863 16.254 378.836 16.375 cv
378.805 16.5 378.766 16.586 378.723 16.633 cv
378.672 16.684 378.602 16.727 378.516 16.766 cv
378.422 16.805 378.316 16.836 378.195 16.867 cv
378.07 16.891 377.938 16.914 377.797 16.934 cv
377.652 16.945 377.508 16.953 377.363 16.957 cv
376.969 16.953 376.629 16.902 376.348 16.809 cv
376.059 16.707 375.824 16.559 375.637 16.352 cv
375.449 16.148 375.313 15.891 375.227 15.574 cv
375.137 15.266 375.09 14.895 375.094 14.469 cv
375.094 10.902 li
374.258 10.902 li
374.156 10.906 374.082 10.844 374.031 10.719 cv
373.977 10.598 373.949 10.395 373.953 10.105 cv
373.949 9.95697 373.957 9.828 373.973 9.72302 cv
373.984 9.62097 374.004 9.539 374.031 9.47699 cv
374.055 9.41803 374.086 9.375 374.129 9.34802 cv
374.164 9.32397 374.211 9.31201 374.266 9.30902 cv
375.094 9.30902 li
375.094 7.75403 li
375.09 7.703 375.105 7.65601 375.137 7.61298 cv
375.164 7.57397 375.215 7.539 375.293 7.508 cv
375.363 7.47998 375.465 7.461 375.594 7.44501 cv
375.719 7.43402 375.875 7.42603 376.066 7.42603 cv
376.254 7.42603 376.414 7.43402 376.547 7.44501 cv
376.672 7.461 376.773 7.47998 376.848 7.508 cv
376.918 7.539 376.969 7.57397 377.004 7.61298 cv
377.031 7.65601 377.047 7.703 377.051 7.75403 cv
377.051 9.30902 li
378.566 9.30902 li
378.617 9.31201 378.66 9.32397 378.703 9.34802 cv
378.738 9.375 378.773 9.41803 378.801 9.47699 cv
378.824 9.539 378.844 9.62097 378.859 9.72302 cv
378.871 9.828 378.875 9.95697 378.879 10.105 cv
378.875 10.395 378.852 10.598 378.801 10.719 cv
378.746 10.844 378.668 10.906 378.574 10.902 cv
377.051 10.902 li
377.051 14.172 li
377.047 14.555 377.109 14.84 377.23 15.027 cv
377.348 15.219 377.559 15.312 377.871 15.309 cv
377.973 15.312 378.066 15.305 378.152 15.281 cv
378.23 15.266 378.305 15.242 378.375 15.219 cv
378.438 15.195 378.492 15.176 378.539 15.156 cv
378.578 15.141 378.621 15.133 378.66 15.129 cv
378.691 15.133 378.719 15.141 378.75 15.156 cv
378.773 15.176 378.797 15.211 378.816 15.266 cv
378.828 15.32 378.844 15.395 378.859 15.488 cv
378.871 15.582 378.875 15.703 378.879 15.848 cv
cp
f
386.477 12.852 mo
386.473 13.094 386.422 13.273 386.316 13.383 cv
386.207 13.5 386.059 13.555 385.875 13.555 cv
381.637 13.555 li
381.633 13.852 381.668 14.121 381.742 14.363 cv
381.809 14.605 381.922 14.812 382.078 14.98 cv
382.23 15.148 382.43 15.277 382.672 15.363 cv
382.914 15.457 383.203 15.5 383.543 15.496 cv
383.883 15.5 384.184 15.477 384.449 15.422 cv
384.707 15.375 384.934 15.32 385.121 15.258 cv
385.309 15.203 385.465 15.148 385.594 15.094 cv
385.715 15.047 385.816 15.02 385.898 15.02 cv
385.941 15.02 385.98 15.031 386.016 15.047 cv
386.043 15.07 386.07 15.102 386.094 15.145 cv
386.113 15.195 386.125 15.262 386.137 15.344 cv
386.141 15.434 386.145 15.543 386.148 15.668 cv
386.145 15.785 386.145 15.883 386.141 15.961 cv
386.133 16.047 386.125 16.113 386.117 16.168 cv
386.105 16.227 386.09 16.277 386.07 16.312 cv
386.047 16.355 386.02 16.391 385.988 16.426 cv
385.953 16.465 385.859 16.516 385.711 16.574 cv
385.559 16.641 385.367 16.703 385.133 16.758 cv
384.898 16.82 384.629 16.867 384.332 16.914 cv
384.027 16.953 383.707 16.977 383.363 16.98 cv
382.742 16.977 382.199 16.902 381.734 16.746 cv
381.266 16.594 380.875 16.355 380.566 16.035 cv
380.254 15.719 380.023 15.32 379.871 14.836 cv
379.715 14.355 379.637 13.785 379.641 13.133 cv
379.637 12.516 379.719 11.961 379.883 11.461 cv
380.043 10.969 380.273 10.547 380.582 10.195 cv
380.887 9.85199 381.262 9.586 381.703 9.40198 cv
382.141 9.22302 382.637 9.133 383.191 9.12903 cv
383.773 9.133 384.27 9.21899 384.684 9.38702 cv
385.094 9.56201 385.434 9.80103 385.703 10.102 cv
385.965 10.41 386.16 10.77 386.289 11.184 cv
386.41 11.602 386.473 12.055 386.477 12.539 cv
cp
384.574 12.289 mo
384.586 11.738 384.477 11.309 384.242 10.992 cv
384.004 10.68 383.637 10.52 383.145 10.52 cv
382.891 10.52 382.672 10.566 382.492 10.66 cv
382.305 10.754 382.152 10.883 382.031 11.039 cv
381.906 11.199 381.813 11.383 381.75 11.598 cv
381.684 11.816 381.645 12.047 381.637 12.289 cv
cp
f
403.684 16.52 mo
403.68 16.574 403.664 16.621 403.641 16.66 cv
403.609 16.703 403.559 16.738 403.484 16.762 cv
403.406 16.789 403.305 16.809 403.184 16.824 cv
403.055 16.84 402.898 16.848 402.707 16.848 cv
402.52 16.848 402.363 16.84 402.238 16.824 cv
402.113 16.809 402.012 16.789 401.941 16.762 cv
401.863 16.738 401.813 16.703 401.785 16.66 cv
401.75 16.621 401.734 16.574 401.738 16.52 cv
401.738 8.30103 li
401.723 8.30103 li
398.797 16.512 li
398.773 16.582 398.738 16.637 398.695 16.68 cv
398.645 16.727 398.582 16.762 398.504 16.785 cv
398.422 16.812 398.32 16.828 398.195 16.836 cv
398.07 16.844 397.918 16.848 397.742 16.848 cv
397.563 16.848 397.41 16.84 397.289 16.828 cv
397.16 16.812 397.059 16.793 396.98 16.766 cv
396.898 16.738 396.836 16.703 396.789 16.66 cv
396.742 16.621 396.711 16.574 396.695 16.512 cv
393.871 8.30103 li
393.855 8.30103 li
393.855 16.52 li
393.852 16.574 393.84 16.621 393.813 16.66 cv
393.781 16.703 393.727 16.738 393.652 16.762 cv
393.57 16.789 393.469 16.809 393.352 16.824 cv
393.227 16.84 393.07 16.848 392.879 16.848 cv
392.691 16.848 392.535 16.84 392.414 16.824 cv
392.285 16.809 392.188 16.789 392.113 16.762 cv
392.035 16.738 391.98 16.703 391.957 16.66 cv
391.926 16.621 391.914 16.574 391.914 16.52 cv
391.914 7.52002 li
391.914 7.25403 391.984 7.05499 392.125 6.914 cv
392.266 6.77698 392.453 6.70697 392.688 6.703 cv
394.027 6.703 li
394.266 6.70697 394.473 6.72699 394.645 6.76202 cv
394.816 6.80499 394.965 6.867 395.09 6.95697 cv
395.215 7.047 395.316 7.16803 395.402 7.31201 cv
395.48 7.46503 395.555 7.64801 395.621 7.86298 cv
397.805 13.883 li
397.836 13.883 li
400.102 7.87903 li
400.164 7.664 400.238 7.47998 400.324 7.32397 cv
400.402 7.17603 400.496 7.05499 400.602 6.961 cv
400.707 6.87097 400.832 6.80499 400.98 6.76202 cv
401.121 6.72699 401.293 6.70697 401.488 6.703 cv
402.871 6.703 li
403.012 6.70697 403.133 6.72302 403.234 6.758 cv
403.336 6.797 403.418 6.85199 403.484 6.91803 cv
403.547 6.992 403.598 7.078 403.633 7.17603 cv
403.664 7.27698 403.68 7.39099 403.684 7.52002 cv
cp
f
412.758 12.984 mo
412.754 13.582 412.676 14.121 412.523 14.609 cv
412.363 15.098 412.129 15.52 411.813 15.871 cv
411.492 16.227 411.094 16.5 410.617 16.691 cv
410.141 16.883 409.582 16.977 408.941 16.98 cv
408.32 16.977 407.781 16.895 407.324 16.723 cv
406.867 16.555 406.488 16.305 406.188 15.973 cv
405.883 15.648 405.656 15.246 405.516 14.766 cv
405.367 14.289 405.297 13.742 405.297 13.125 cv
405.297 12.535 405.375 11.992 405.535 11.5 cv
405.691 11.012 405.93 10.59 406.246 10.234 cv
406.563 9.88702 406.957 9.61298 407.438 9.41803 cv
407.91 9.22699 408.469 9.133 409.113 9.12903 cv
409.734 9.133 410.277 9.21503 410.734 9.383 cv
411.191 9.55499 411.57 9.80499 411.871 10.129 cv
412.168 10.461 412.391 10.863 412.539 11.34 cv
412.684 11.816 412.754 12.367 412.758 12.984 cv
cp
410.734 13.062 mo
410.734 12.719 410.707 12.402 410.652 12.113 cv
410.598 11.824 410.504 11.574 410.379 11.359 cv
410.246 11.148 410.074 10.984 409.859 10.863 cv
409.641 10.746 409.367 10.684 409.043 10.684 cv
408.746 10.684 408.492 10.738 408.277 10.844 cv
408.055 10.949 407.875 11.105 407.738 11.309 cv
407.594 11.52 407.488 11.766 407.422 12.051 cv
407.348 12.344 407.313 12.672 407.316 13.039 cv
407.313 13.383 407.34 13.699 407.402 13.988 cv
407.457 14.277 407.551 14.531 407.68 14.742 cv
407.805 14.957 407.977 15.121 408.199 15.234 cv
408.414 15.355 408.688 15.414 409.012 15.41 cv
409.309 15.414 409.566 15.359 409.785 15.25 cv
410.004 15.145 410.184 14.992 410.324 14.789 cv
410.465 14.59 410.566 14.344 410.633 14.051 cv
410.699 13.766 410.734 13.434 410.734 13.062 cv
cp
f
420.918 16.535 mo
420.914 16.598 420.902 16.645 420.879 16.68 cv
420.852 16.723 420.805 16.754 420.746 16.777 cv
420.68 16.801 420.598 16.816 420.492 16.832 cv
420.383 16.84 420.25 16.848 420.098 16.848 cv
419.93 16.848 419.793 16.84 419.691 16.832 cv
419.582 16.816 419.5 16.801 419.438 16.777 cv
419.371 16.754 419.324 16.723 419.297 16.68 cv
419.266 16.645 419.25 16.598 419.254 16.535 cv
419.254 15.762 li
418.895 16.152 418.52 16.449 418.129 16.66 cv
417.734 16.871 417.297 16.977 416.82 16.98 cv
416.285 16.977 415.836 16.875 415.473 16.672 cv
415.105 16.469 414.809 16.191 414.578 15.84 cv
414.344 15.492 414.176 15.086 414.074 14.621 cv
413.969 14.156 413.918 13.668 413.918 13.148 cv
413.918 12.531 413.984 11.973 414.117 11.48 cv
414.25 10.988 414.441 10.566 414.699 10.215 cv
414.949 9.867 415.266 9.60199 415.648 9.40997 cv
416.023 9.22699 416.461 9.133 416.961 9.12903 cv
417.348 9.133 417.703 9.211 418.023 9.367 cv
418.34 9.52698 418.656 9.76202 418.969 10.066 cv
418.969 6.297 li
418.969 6.24597 418.98 6.19897 419.012 6.15601 cv
419.035 6.117 419.086 6.08197 419.164 6.05103 cv
419.234 6.02301 419.336 6 419.465 5.98401 cv
419.586 5.96899 419.746 5.961 419.941 5.961 cv
420.133 5.961 420.289 5.96899 420.418 5.98401 cv
420.539 6 420.641 6.02301 420.715 6.05103 cv
420.785 6.08197 420.836 6.117 420.871 6.15601 cv
420.898 6.19897 420.914 6.24597 420.918 6.297 cv
cp
418.969 11.883 mo
418.688 11.531 418.418 11.262 418.16 11.074 cv
417.902 10.891 417.633 10.797 417.352 10.793 cv
417.094 10.797 416.871 10.859 416.691 10.984 cv
416.504 11.113 416.355 11.281 416.246 11.492 cv
416.129 11.707 416.047 11.945 415.996 12.207 cv
415.938 12.473 415.91 12.742 415.914 13.016 cv
415.91 13.309 415.934 13.594 415.984 13.867 cv
416.027 14.145 416.105 14.391 416.215 14.605 cv
416.32 14.82 416.461 14.992 416.641 15.121 cv
416.816 15.254 417.039 15.32 417.313 15.316 cv
417.445 15.32 417.578 15.301 417.707 15.258 cv
417.832 15.223 417.961 15.156 418.098 15.066 cv
418.227 14.98 418.363 14.867 418.508 14.723 cv
418.645 14.582 418.801 14.406 418.969 14.195 cv
cp
f
429.332 12.852 mo
429.328 13.094 429.277 13.273 429.172 13.383 cv
429.063 13.5 428.914 13.555 428.73 13.555 cv
424.492 13.555 li
424.488 13.852 424.523 14.121 424.598 14.363 cv
424.664 14.605 424.777 14.812 424.934 14.98 cv
425.086 15.148 425.285 15.277 425.527 15.363 cv
425.77 15.457 426.059 15.5 426.398 15.496 cv
426.738 15.5 427.039 15.477 427.305 15.422 cv
427.563 15.375 427.789 15.32 427.977 15.258 cv
428.164 15.203 428.32 15.148 428.449 15.094 cv
428.57 15.047 428.672 15.02 428.754 15.02 cv
428.797 15.02 428.836 15.031 428.871 15.047 cv
428.898 15.07 428.926 15.102 428.949 15.145 cv
428.969 15.195 428.98 15.262 428.992 15.344 cv
428.996 15.434 429 15.543 429.004 15.668 cv
429 15.785 429 15.883 428.996 15.961 cv
428.988 16.047 428.98 16.113 428.973 16.168 cv
428.961 16.227 428.945 16.277 428.926 16.312 cv
428.902 16.355 428.875 16.391 428.844 16.426 cv
428.809 16.465 428.715 16.516 428.566 16.574 cv
428.414 16.641 428.223 16.703 427.988 16.758 cv
427.754 16.82 427.484 16.867 427.188 16.914 cv
426.883 16.953 426.563 16.977 426.219 16.98 cv
425.598 16.977 425.055 16.902 424.59 16.746 cv
424.121 16.594 423.73 16.355 423.422 16.035 cv
423.109 15.719 422.879 15.32 422.727 14.836 cv
422.57 14.355 422.492 13.785 422.496 13.133 cv
422.492 12.516 422.574 11.961 422.738 11.461 cv
422.898 10.969 423.129 10.547 423.438 10.195 cv
423.742 9.85199 424.117 9.586 424.559 9.40198 cv
424.996 9.22302 425.492 9.133 426.047 9.12903 cv
426.629 9.133 427.125 9.21899 427.539 9.38702 cv
427.949 9.56201 428.289 9.80103 428.559 10.102 cv
428.82 10.41 429.016 10.77 429.145 11.184 cv
429.266 11.602 429.328 12.055 429.332 12.539 cv
cp
427.43 12.289 mo
427.441 11.738 427.332 11.309 427.098 10.992 cv
426.859 10.68 426.492 10.52 426 10.52 cv
425.746 10.52 425.527 10.566 425.348 10.66 cv
425.16 10.754 425.008 10.883 424.887 11.039 cv
424.762 11.199 424.668 11.383 424.605 11.598 cv
424.539 11.816 424.5 12.047 424.492 12.289 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
