%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingOfFilteringTimes-Remote.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 4:10:18 p.m.
%%BoundingBox: 0 0 614 538
%%HiResBoundingBox: 0 0 613.7407 537.7486
%%CropBox: 0 0 613.7407 537.7486
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -537.749 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 537.749 li
613.741 537.749 li
613.741 0 li
cp
clp
gsave
0 537.749 mo
614 537.749 li
614 -.251404 li
0 -.251404 li
cp
clp
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
27.238 470.082 mo
607.078 470.082 li
27.238 445.602 mo
607.078 445.602 li
27.238 421 mo
607.078 421 li
27.238 396.52 mo
607.078 396.52 li
27.238 371.922 mo
607.078 371.922 li
27.238 347.321 mo
607.078 347.321 li
27.238 322.84 mo
607.078 322.84 li
27.238 298.239 mo
607.078 298.239 li
27.238 273.762 mo
607.078 273.762 li
27.238 249.161 mo
607.078 249.161 li
27.238 224.559 mo
607.078 224.559 li
27.238 200.082 mo
607.078 200.082 li
27.238 175.481 mo
607.078 175.481 li
27.238 151 mo
607.078 151 li
27.238 126.399 mo
607.078 126.399 li
27.238 101.801 mo
607.078 101.801 li
27.238 77.3206 mo
607.078 77.3206 li
27.238 52.7186 mo
607.078 52.7186 li
27.238 28.1206 mo
607.078 28.1206 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.328344 .284215 .278569 .000915541 cmyk
@
63.48 28.1206 mo
63.48 494.68 li
135.961 28.1206 mo
135.961 494.68 li
208.441 28.1206 mo
208.441 494.68 li
280.922 28.1206 mo
280.922 494.68 li
353.398 28.1206 mo
353.398 494.68 li
425.879 28.1206 mo
425.879 494.68 li
498.359 28.1206 mo
498.359 494.68 li
570.84 28.1206 mo
570.84 494.68 li
.178592 .148898 .143923 0 cmyk
@
27.238 28.1206 mo
27.238 494.68 li
99.719 28.1206 mo
99.719 494.68 li
172.199 28.1206 mo
172.199 494.68 li
244.68 28.1206 mo
244.68 494.68 li
317.16 28.1206 mo
317.16 494.68 li
389.641 28.1206 mo
389.641 494.68 li
462.121 28.1206 mo
462.121 494.68 li
534.602 28.1206 mo
534.602 494.68 li
607.078 28.1206 mo
607.078 494.68 li
.328344 .284215 .278569 .000915541 cmyk
@
7.199 485.321 mo
14.281 485.321 li
14.281 502.481 li
7.199 502.481 li
cp
0 0 0 0 cmyk
ef
7.199 460.84 mo
14.281 460.84 li
14.281 477.879 li
7.199 477.879 li
cp
ef
7.199 436.239 mo
14.281 436.239 li
14.281 453.399 li
7.199 453.399 li
cp
ef
7.199 411.762 mo
14.281 411.762 li
14.281 428.801 li
7.199 428.801 li
cp
ef
7.199 387.161 mo
14.281 387.161 li
14.281 404.2 li
7.199 404.2 li
cp
ef
7.199 362.559 mo
14.281 362.559 li
14.281 379.719 li
7.199 379.719 li
cp
ef
7.199 338.082 mo
14.281 338.082 li
14.281 355.121 li
7.199 355.121 li
cp
ef
7.199 313.481 mo
14.281 313.481 li
14.281 330.641 li
7.199 330.641 li
cp
ef
7.199 289 mo
14.281 289 li
14.281 306.039 li
7.199 306.039 li
cp
ef
0 264.399 mo
14.281 264.399 li
14.281 281.442 li
0 281.442 li
cp
ef
0 239.801 mo
14.281 239.801 li
14.281 256.961 li
0 256.961 li
cp
ef
0 215.321 mo
14.281 215.321 li
14.281 232.36 li
0 232.36 li
cp
ef
0 190.719 mo
14.281 190.719 li
14.281 207.879 li
0 207.879 li
cp
ef
0 166.121 mo
14.281 166.121 li
14.281 183.281 li
0 183.281 li
cp
ef
0 141.641 mo
14.281 141.641 li
14.281 158.68 li
0 158.68 li
cp
ef
0 117.039 mo
14.281 117.039 li
14.281 134.199 li
0 134.199 li
cp
ef
0 92.5586 mo
14.281 92.5586 li
14.281 109.602 li
0 109.602 li
cp
ef
0 67.9606 mo
14.281 67.9606 li
14.281 84.9996 li
0 84.9996 li
cp
ef
0 43.3596 mo
14.281 43.3596 li
14.281 60.5196 li
0 60.5196 li
cp
ef
0 18.8786 mo
14.281 18.8786 li
14.281 35.9216 li
0 35.9216 li
cp
ef
.96 lw
27.238 494.68 mo
607.078 494.68 li
.367803 .29575 .300999 .00198367 cmyk
@
27.238 494.68 mo
27.238 499.121 li
99.719 494.68 mo
99.719 499.121 li
172.199 494.68 mo
172.199 499.121 li
244.68 494.68 mo
244.68 499.121 li
317.16 494.68 mo
317.16 499.121 li
389.641 494.68 mo
389.641 499.121 li
462.121 494.68 mo
462.121 499.121 li
534.602 494.68 mo
534.602 499.121 li
607.078 494.68 mo
607.078 499.121 li
@
gsave
27.238 28.1206 mo
607.679 28.1206 li
607.679 495.398 li
27.238 495.398 li
cp
clp
1 lc
27.238 494.68 mo
99.719 470.199 li
244.68 372.52 li
317.16 325.238 li
389.641 273.641 li
462.121 226.121 li
534.602 174.281 li
607.078 128.082 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
22.129 489.672 mo
32.09 489.672 li
32.09 499.629 li
22.129 499.629 li
cp
.62768 .285466 0 0 cmyk
@
94.609 465.071 mo
104.57 465.071 li
104.57 475.032 li
94.609 475.032 li
cp
@
167.09 416.231 mo
177.051 416.231 li
177.051 426.192 li
167.09 426.192 li
cp
@
239.57 367.512 mo
249.531 367.512 li
249.531 377.469 li
239.57 377.469 li
cp
@
312.051 320.231 mo
322.012 320.231 li
322.012 330.192 li
312.051 330.192 li
cp
@
384.531 268.512 mo
394.488 268.512 li
394.488 278.469 li
384.531 278.469 li
cp
@
457.012 221.11 mo
466.969 221.11 li
466.969 231.071 li
457.012 231.071 li
cp
@
529.488 169.149 mo
539.449 169.149 li
539.449 179.11 li
529.488 179.11 li
cp
@
601.969 122.95 mo
611.93 122.95 li
611.93 132.911 li
601.969 132.911 li
cp
@
gsave
27.238 28.1206 mo
607.679 28.1206 li
607.679 495.398 li
27.238 495.398 li
cp
clp
.96 lw
1 lc
27.238 494.68 mo
99.719 470.082 li
172.199 420.879 li
244.68 372.16 li
317.16 322.359 li
389.641 277.359 li
462.121 225.281 li
534.602 182.32 li
607.078 129.039 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
22.129 489.672 mo
32.09 489.672 li
32.09 499.629 li
22.129 499.629 li
cp
.0319219 .621851 .911223 .000427253 cmyk
@
94.609 465.071 mo
104.57 465.071 li
104.57 475.032 li
94.609 475.032 li
cp
@
167.09 415.871 mo
177.051 415.871 li
177.051 425.832 li
167.09 425.832 li
cp
@
239.57 367.149 mo
249.531 367.149 li
249.531 377.11 li
239.57 377.11 li
cp
@
312.051 317.231 mo
322.012 317.231 li
322.012 327.192 li
312.051 327.192 li
cp
@
384.531 272.352 mo
394.488 272.352 li
394.488 282.309 li
384.531 282.309 li
cp
@
457.012 220.27 mo
466.969 220.27 li
466.969 230.231 li
457.012 230.231 li
cp
@
529.488 177.309 mo
539.449 177.309 li
539.449 187.27 li
529.488 187.27 li
cp
@
601.969 124.032 mo
611.93 124.032 li
611.93 133.989 li
601.969 133.989 li
cp
@
gsave
27.238 28.1206 mo
607.679 28.1206 li
607.679 495.398 li
27.238 495.398 li
cp
clp
.96 lw
1 lc
27.238 494.68 mo
99.719 470.082 li
172.199 421 li
244.68 375.16 li
317.16 326.801 li
389.641 273.879 li
462.121 224.922 li
534.602 188.68 li
607.078 127.359 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
22.129 489.672 mo
32.09 489.672 li
32.09 499.629 li
22.129 499.629 li
cp
.619135 .109529 .981689 .00570687 cmyk
@
94.609 465.071 mo
104.57 465.071 li
104.57 475.032 li
94.609 475.032 li
cp
@
167.09 415.989 mo
177.051 415.989 li
177.051 425.95 li
167.09 425.95 li
cp
@
239.57 370.149 mo
249.531 370.149 li
249.531 380.11 li
239.57 380.11 li
cp
@
312.051 321.789 mo
322.012 321.789 li
322.012 331.75 li
312.051 331.75 li
cp
@
384.531 268.871 mo
394.488 268.871 li
394.488 278.832 li
384.531 278.832 li
cp
@
457.012 219.911 mo
466.969 219.911 li
466.969 229.872 li
457.012 229.872 li
cp
@
529.488 183.551 mo
539.449 183.551 li
539.449 193.512 li
529.488 193.512 li
cp
@
601.969 122.231 mo
611.93 122.231 li
611.93 132.192 li
601.969 132.192 li
cp
@
gsave
27.238 28.1206 mo
607.679 28.1206 li
607.679 495.398 li
27.238 495.398 li
cp
clp
.96 lw
1 lc
27.238 494.68 mo
99.719 470.082 li
172.199 421.719 li
244.68 372.039 li
389.641 274.359 li
462.121 226.48 li
534.602 176.559 li
607.078 146.32 li
0 .990631 1 .000396735 cmyk
@
grestore
22.129 489.672 mo
32.09 489.672 li
32.09 499.629 li
22.129 499.629 li
cp
0 .990631 1 .000396735 cmyk
@
94.609 464.95 mo
104.57 464.95 li
104.57 474.911 li
94.609 474.911 li
cp
@
167.09 416.59 mo
177.051 416.59 li
177.051 426.551 li
167.09 426.551 li
cp
@
239.57 367.032 mo
249.531 367.032 li
249.531 376.989 li
239.57 376.989 li
cp
@
312.051 318.071 mo
322.012 318.071 li
322.012 328.032 li
312.051 328.032 li
cp
@
384.531 269.231 mo
394.488 269.231 li
394.488 279.192 li
384.531 279.192 li
cp
@
457.012 221.352 mo
466.969 221.352 li
466.969 231.309 li
457.012 231.309 li
cp
@
529.488 171.551 mo
539.449 171.551 li
539.449 181.512 li
529.488 181.512 li
cp
@
601.969 141.192 mo
611.93 141.192 li
611.93 151.149 li
601.969 151.149 li
cp
@
gsave
27.238 28.1206 mo
607.679 28.1206 li
607.679 495.398 li
27.238 495.398 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
27.238 494.68 mo
99.719 470.082 li
172.199 421.359 li
244.68 373 li
317.16 323.559 li
389.641 279.52 li
462.121 226.238 li
534.602 177.16 li
607.078 127.602 li
.62768 .285466 0 0 cmyk
@
grestore
[4 3 ] 0 dsh
22.129 489.672 mo
32.09 489.672 li
32.09 499.629 li
22.129 499.629 li
cp
.62768 .285466 0 0 cmyk
@
94.609 465.071 mo
104.57 465.071 li
104.57 475.032 li
94.609 475.032 li
cp
@
167.09 416.231 mo
177.051 416.231 li
177.051 426.192 li
167.09 426.192 li
cp
@
239.57 367.989 mo
249.531 367.989 li
249.531 377.95 li
239.57 377.95 li
cp
@
312.051 318.43 mo
322.012 318.43 li
322.012 328.391 li
312.051 328.391 li
cp
@
384.531 274.391 mo
394.488 274.391 li
394.488 284.352 li
384.531 284.352 li
cp
@
457.012 221.11 mo
466.969 221.11 li
466.969 231.071 li
457.012 231.071 li
cp
@
529.488 172.149 mo
539.449 172.149 li
539.449 182.11 li
529.488 182.11 li
cp
@
601.969 122.59 mo
611.93 122.59 li
611.93 132.551 li
601.969 132.551 li
cp
@
gsave
27.238 28.1206 mo
607.679 28.1206 li
607.679 495.398 li
27.238 495.398 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
27.238 494.68 mo
99.719 470.32 li
172.199 421.48 li
244.68 387.52 li
317.16 323.441 li
389.641 279.16 li
462.121 226.48 li
534.602 177.52 li
607.078 128.32 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
[] 0 dsh
22.129 489.672 mo
32.09 489.672 li
32.09 499.629 li
22.129 499.629 li
cp
.0319219 .621851 .911223 .000427253 cmyk
@
94.609 465.309 mo
104.57 465.309 li
104.57 475.27 li
94.609 475.27 li
cp
@
167.09 416.352 mo
177.051 416.352 li
177.051 426.309 li
167.09 426.309 li
cp
@
239.57 382.512 mo
249.531 382.512 li
249.531 392.469 li
239.57 392.469 li
cp
@
312.051 318.43 mo
322.012 318.43 li
322.012 328.391 li
312.051 328.391 li
cp
@
384.531 274.032 mo
394.488 274.032 li
394.488 283.989 li
384.531 283.989 li
cp
@
457.012 221.352 mo
466.969 221.352 li
466.969 231.309 li
457.012 231.309 li
cp
@
529.488 172.391 mo
539.449 172.391 li
539.449 182.352 li
529.488 182.352 li
cp
@
601.969 123.192 mo
611.93 123.192 li
611.93 133.149 li
601.969 133.149 li
cp
@
gsave
27.238 28.1206 mo
607.679 28.1206 li
607.679 495.398 li
27.238 495.398 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
27.238 494.68 mo
99.719 470.199 li
172.199 421.359 li
244.68 372.762 li
317.16 323.32 li
389.641 274.602 li
462.121 225.398 li
534.602 177.281 li
607.078 131.559 li
.466651 0 .889799 0 cmyk
@
grestore
22.129 489.672 mo
32.09 489.672 li
32.09 499.629 li
22.129 499.629 li
cp
.619135 .109529 .981689 .00570687 cmyk
@
94.609 465.071 mo
104.57 465.071 li
104.57 475.032 li
94.609 475.032 li
cp
@
167.09 416.231 mo
177.051 416.231 li
177.051 426.192 li
167.09 426.192 li
cp
@
239.57 367.75 mo
249.531 367.75 li
249.531 377.711 li
239.57 377.711 li
cp
@
312.051 318.192 mo
322.012 318.192 li
322.012 328.149 li
312.051 328.149 li
cp
@
384.531 269.469 mo
394.488 269.469 li
394.488 279.43 li
384.531 279.43 li
cp
@
457.012 220.391 mo
466.969 220.391 li
466.969 230.352 li
457.012 230.352 li
cp
@
529.488 172.27 mo
539.449 172.27 li
539.449 182.231 li
529.488 182.231 li
cp
@
601.969 126.551 mo
611.93 126.551 li
611.93 136.512 li
601.969 136.512 li
cp
@
gsave
27.238 28.1206 mo
607.679 28.1206 li
607.679 495.398 li
27.238 495.398 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
27.238 494.68 mo
99.719 470.441 li
172.199 427.48 li
244.68 372.398 li
317.16 323.68 li
389.641 280.602 li
462.121 226.602 li
534.602 178.238 li
607.078 129.16 li
0 .990631 1 .000396735 cmyk
@
grestore
22.129 489.672 mo
32.09 489.672 li
32.09 499.629 li
22.129 499.629 li
cp
0 .990631 1 .000396735 cmyk
@
94.609 465.309 mo
104.57 465.309 li
104.57 475.27 li
94.609 475.27 li
cp
@
167.09 422.352 mo
177.051 422.352 li
177.051 432.309 li
167.09 432.309 li
cp
@
239.57 367.27 mo
249.531 367.27 li
249.531 377.231 li
239.57 377.231 li
cp
@
312.051 318.551 mo
322.012 318.551 li
322.012 328.512 li
312.051 328.512 li
cp
@
384.531 275.469 mo
394.488 275.469 li
394.488 285.43 li
384.531 285.43 li
cp
@
457.012 221.59 mo
466.969 221.59 li
466.969 231.551 li
457.012 231.551 li
cp
@
529.488 173.11 mo
539.449 173.11 li
539.449 183.071 li
529.488 183.071 li
cp
@
601.969 124.149 mo
611.93 124.149 li
611.93 134.11 li
601.969 134.11 li
cp
@
7.191 485.403 mo
14.285 485.403 li
14.285 502.493 li
7.191 502.493 li
cp
0 0 0 0 cmyk
ef
13.555 498.344 mo
13.551 498.434 13.543 498.504 13.531 498.562 cv
13.516 498.625 13.496 498.676 13.477 498.707 cv
13.453 498.746 13.43 498.77 13.398 498.785 cv
13.367 498.801 13.336 498.809 13.309 498.809 cv
8.672 498.809 li
8.637 498.809 8.609 498.801 8.582 498.785 cv
8.555 498.77 8.527 498.746 8.504 498.707 cv
8.477 498.676 8.457 498.625 8.445 498.562 cv
8.43 498.504 8.422 498.434 8.426 498.344 cv
8.422 498.266 8.43 498.191 8.445 498.129 cv
8.457 498.07 8.473 498.023 8.496 497.984 cv
8.512 497.949 8.539 497.918 8.57 497.895 cv
8.602 497.875 8.633 497.867 8.672 497.863 cv
10.523 497.863 li
10.523 491.117 li
8.809 492.137 li
8.719 492.187 8.648 492.215 8.602 492.223 cv
8.547 492.23 8.504 492.223 8.473 492.191 cv
8.438 492.164 8.418 492.113 8.406 492.043 cv
8.395 491.977 8.387 491.891 8.391 491.781 cv
8.387 491.707 8.391 491.641 8.402 491.582 cv
8.406 491.531 8.418 491.484 8.434 491.445 cv
8.445 491.41 8.465 491.379 8.488 491.352 cv
8.512 491.324 8.543 491.297 8.59 491.27 cv
10.633 489.957 li
10.648 489.945 10.668 489.934 10.699 489.926 cv
10.723 489.918 10.758 489.91 10.805 489.898 cv
10.844 489.891 10.895 489.883 10.949 489.879 cv
11.004 489.879 11.07 489.879 11.156 489.875 cv
11.262 489.879 11.355 489.883 11.43 489.891 cv
11.5 489.898 11.555 489.914 11.602 489.93 cv
11.641 489.949 11.668 489.969 11.684 489.992 cv
11.691 490.02 11.699 490.043 11.703 490.066 cv
11.703 497.863 li
13.309 497.863 li
13.344 497.867 13.379 497.875 13.41 497.895 cv
13.441 497.918 13.465 497.949 13.488 497.984 cv
13.504 498.023 13.52 498.07 13.535 498.129 cv
13.543 498.191 13.551 498.266 13.555 498.344 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
7.191 460.848 mo
14.285 460.848 li
14.285 477.938 li
7.191 477.938 li
cp
0 0 0 0 cmyk
ef
13.535 473.75 mo
13.531 473.836 13.527 473.91 13.516 473.973 cv
13.504 474.039 13.488 474.094 13.469 474.133 cv
13.445 474.18 13.418 474.211 13.387 474.227 cv
13.352 474.25 13.313 474.258 13.273 474.258 cv
8.371 474.258 li
8.309 474.258 8.25 474.25 8.203 474.234 cv
8.152 474.219 8.113 474.195 8.078 474.156 cv
8.043 474.125 8.016 474.07 8.004 474 cv
7.984 473.93 7.977 473.844 7.98 473.742 cv
7.977 473.652 7.98 473.574 7.988 473.504 cv
7.992 473.437 8.008 473.379 8.035 473.324 cv
8.059 473.273 8.09 473.219 8.125 473.164 cv
8.16 473.113 8.203 473.059 8.262 472.996 cv
10.035 471.172 li
10.445 470.754 10.773 470.379 11.023 470.043 cv
11.27 469.715 11.461 469.41 11.594 469.133 cv
11.727 468.859 11.813 468.609 11.859 468.383 cv
11.898 468.16 11.922 467.949 11.922 467.754 cv
11.922 467.559 11.887 467.375 11.82 467.195 cv
11.754 467.023 11.66 466.867 11.535 466.73 cv
11.41 466.602 11.254 466.496 11.066 466.414 cv
10.879 466.34 10.66 466.301 10.414 466.297 cv
10.125 466.301 9.867 466.34 9.641 466.414 cv
9.41 466.496 9.211 466.582 9.039 466.668 cv
8.867 466.762 8.723 466.844 8.605 466.922 cv
8.488 467 8.402 467.039 8.352 467.039 cv
8.316 467.039 8.285 467.031 8.262 467.012 cv
8.23 466.996 8.211 466.965 8.195 466.922 cv
8.18 466.883 8.164 466.828 8.156 466.758 cv
8.145 466.691 8.141 466.609 8.145 466.512 cv
8.141 466.445 8.145 466.387 8.152 466.336 cv
8.156 466.285 8.164 466.242 8.176 466.203 cv
8.184 466.168 8.199 466.133 8.219 466.102 cv
8.238 466.07 8.273 466.031 8.332 465.98 cv
8.383 465.934 8.477 465.867 8.613 465.785 cv
8.746 465.703 8.918 465.625 9.121 465.543 cv
9.324 465.465 9.547 465.395 9.793 465.34 cv
10.035 465.285 10.293 465.258 10.566 465.258 cv
10.992 465.258 11.367 465.32 11.691 465.441 cv
12.012 465.562 12.277 465.727 12.492 465.937 cv
12.703 466.148 12.863 466.395 12.969 466.668 cv
13.074 466.949 13.129 467.246 13.129 467.559 cv
13.129 467.848 13.102 468.129 13.051 468.406 cv
13 468.691 12.895 468.996 12.734 469.32 cv
12.57 469.648 12.336 470.012 12.031 470.41 cv
11.723 470.812 11.316 471.273 10.813 471.789 cv
9.406 473.258 li
13.266 473.258 li
13.297 473.262 13.332 473.273 13.371 473.289 cv
13.402 473.312 13.434 473.344 13.461 473.383 cv
13.484 473.426 13.504 473.477 13.516 473.535 cv
13.527 473.602 13.531 473.672 13.535 473.75 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
7.191 436.301 mo
14.285 436.301 li
14.285 453.391 li
7.191 453.391 li
cp
0 0 0 0 cmyk
ef
13.465 447.164 mo
13.461 447.574 13.391 447.941 13.25 448.266 cv
13.105 448.594 12.902 448.875 12.641 449.105 cv
12.375 449.34 12.047 449.516 11.66 449.641 cv
11.27 449.766 10.832 449.828 10.348 449.828 cv
10.043 449.828 9.766 449.801 9.512 449.754 cv
9.25 449.707 9.02 449.656 8.824 449.586 cv
8.621 449.523 8.457 449.453 8.324 449.383 cv
8.191 449.312 8.105 449.262 8.074 449.227 cv
8.035 449.199 8.012 449.168 7.996 449.133 cv
7.977 449.102 7.957 449.062 7.945 449.016 cv
7.93 448.973 7.922 448.918 7.914 448.848 cv
7.906 448.785 7.902 448.703 7.906 448.602 cv
7.902 448.441 7.918 448.328 7.953 448.262 cv
7.984 448.199 8.031 448.164 8.094 448.164 cv
8.137 448.164 8.219 448.203 8.344 448.273 cv
8.465 448.352 8.625 448.43 8.82 448.512 cv
9.012 448.598 9.238 448.676 9.504 448.746 cv
9.762 448.82 10.055 448.855 10.375 448.855 cv
10.684 448.855 10.953 448.816 11.191 448.738 cv
11.422 448.66 11.621 448.551 11.781 448.41 cv
11.938 448.27 12.055 448.102 12.137 447.906 cv
12.215 447.711 12.254 447.5 12.258 447.273 cv
12.254 447.023 12.203 446.797 12.105 446.594 cv
12 446.395 11.852 446.223 11.66 446.074 cv
11.461 445.93 11.223 445.816 10.938 445.738 cv
10.652 445.66 10.328 445.621 9.965 445.621 cv
9.094 445.621 li
9.051 445.621 9.016 445.613 8.98 445.598 cv
8.945 445.582 8.914 445.555 8.891 445.516 cv
8.863 445.48 8.844 445.434 8.828 445.375 cv
8.813 445.316 8.805 445.238 8.805 445.141 cv
8.805 445.055 8.809 444.984 8.824 444.926 cv
8.832 444.871 8.852 444.824 8.883 444.789 cv
8.906 444.754 8.938 444.73 8.969 444.711 cv
9 444.699 9.035 444.691 9.078 444.687 cv
9.852 444.687 li
10.152 444.691 10.422 444.652 10.664 444.57 cv
10.898 444.496 11.102 444.383 11.273 444.234 cv
11.438 444.09 11.566 443.914 11.656 443.711 cv
11.746 443.508 11.793 443.281 11.793 443.027 cv
11.793 442.848 11.762 442.672 11.703 442.504 cv
11.641 442.34 11.551 442.195 11.434 442.07 cv
11.313 441.945 11.16 441.848 10.98 441.777 cv
10.793 441.707 10.582 441.672 10.34 441.672 cv
10.074 441.672 9.828 441.715 9.609 441.793 cv
9.383 441.875 9.188 441.961 9.016 442.051 cv
8.84 442.145 8.695 442.23 8.582 442.309 cv
8.469 442.391 8.387 442.43 8.344 442.426 cv
8.309 442.43 8.281 442.422 8.258 442.41 cv
8.23 442.398 8.211 442.375 8.195 442.34 cv
8.18 442.309 8.168 442.262 8.16 442.195 cv
8.152 442.137 8.148 442.055 8.152 441.953 cv
8.148 441.887 8.148 441.828 8.156 441.773 cv
8.156 441.723 8.168 441.676 8.184 441.633 cv
8.199 441.598 8.215 441.562 8.234 441.527 cv
8.25 441.5 8.281 441.461 8.324 441.414 cv
8.367 441.371 8.453 441.309 8.59 441.227 cv
8.719 441.145 8.883 441.066 9.078 440.984 cv
9.27 440.906 9.492 440.836 9.75 440.781 cv
10 440.727 10.273 440.699 10.57 440.699 cv
10.977 440.699 11.34 440.754 11.652 440.855 cv
11.965 440.965 12.223 441.113 12.434 441.301 cv
12.637 441.496 12.793 441.727 12.898 441.992 cv
13 442.262 13.051 442.555 13.055 442.879 cv
13.051 443.16 13.016 443.422 12.945 443.656 cv
12.871 443.898 12.762 444.109 12.621 444.293 cv
12.477 444.48 12.305 444.637 12.102 444.766 cv
11.895 444.898 11.656 444.992 11.387 445.039 cv
11.387 445.051 li
11.691 445.086 11.973 445.16 12.227 445.281 cv
12.48 445.402 12.699 445.555 12.883 445.738 cv
13.063 445.922 13.203 446.137 13.309 446.379 cv
13.41 446.625 13.461 446.887 13.465 447.164 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
7.191 411.739 mo
14.285 411.739 li
14.285 428.833 li
7.191 428.833 li
cp
0 0 0 0 cmyk
ef
13.91 422.625 mo
13.906 422.777 13.883 422.898 13.84 422.984 cv
13.793 423.074 13.73 423.117 13.648 423.113 cv
12.648 423.113 li
12.648 424.977 li
12.648 425.016 12.637 425.047 12.621 425.07 cv
12.598 425.098 12.566 425.117 12.523 425.137 cv
12.473 425.152 12.41 425.164 12.34 425.176 cv
12.262 425.184 12.168 425.187 12.051 425.191 cv
11.934 425.187 11.836 425.184 11.766 425.176 cv
11.688 425.164 11.629 425.152 11.586 425.137 cv
11.539 425.117 11.508 425.098 11.492 425.07 cv
11.473 425.047 11.465 425.016 11.469 424.977 cv
11.469 423.113 li
7.84 423.113 li
7.781 423.117 7.738 423.109 7.703 423.094 cv
7.668 423.082 7.633 423.055 7.605 423.016 cv
7.574 422.98 7.555 422.93 7.543 422.859 cv
7.531 422.793 7.527 422.703 7.527 422.59 cv
7.527 422.508 7.527 422.43 7.535 422.359 cv
7.535 422.289 7.547 422.227 7.563 422.172 cv
7.574 422.117 7.59 422.062 7.617 422.008 cv
7.637 421.953 7.664 421.898 7.699 421.836 cv
10.859 416.449 li
10.879 416.414 10.914 416.383 10.961 416.355 cv
11.004 416.328 11.059 416.305 11.133 416.285 cv
11.199 416.27 11.285 416.258 11.391 416.246 cv
11.492 416.242 11.613 416.238 11.754 416.234 cv
11.902 416.238 12.039 416.242 12.156 416.254 cv
12.27 416.266 12.359 416.281 12.434 416.297 cv
12.5 416.316 12.555 416.34 12.594 416.371 cv
12.629 416.402 12.648 416.437 12.648 416.477 cv
12.648 422.141 li
13.648 422.141 li
13.723 422.145 13.785 422.184 13.836 422.262 cv
13.883 422.344 13.906 422.465 13.91 422.625 cv
cp
11.469 417.273 mo
11.457 417.273 li
8.605 422.141 li
11.469 422.141 li
cp
.629114 .553033 .543389 .289647 cmyk
f
7.191 387.192 mo
14.285 387.192 li
14.285 404.282 li
7.191 404.282 li
cp
0 0 0 0 cmyk
ef
13.492 397.73 mo
13.492 398.207 13.41 398.629 13.25 399 cv
13.09 399.371 12.863 399.684 12.574 399.937 cv
12.277 400.191 11.93 400.387 11.527 400.516 cv
11.121 400.648 10.672 400.711 10.18 400.711 cv
9.902 400.711 9.641 400.691 9.398 400.652 cv
9.148 400.613 8.93 400.566 8.742 400.512 cv
8.547 400.457 8.391 400.402 8.266 400.344 cv
8.141 400.293 8.063 400.25 8.031 400.215 cv
7.996 400.184 7.973 400.152 7.961 400.125 cv
7.945 400.098 7.93 400.066 7.922 400.023 cv
7.906 399.988 7.898 399.937 7.898 399.875 cv
7.891 399.816 7.891 399.746 7.891 399.664 cv
7.891 399.59 7.895 399.52 7.902 399.457 cv
7.91 399.395 7.922 399.344 7.941 399.305 cv
7.957 399.266 7.977 399.238 8.004 399.219 cv
8.027 399.203 8.059 399.195 8.09 399.191 cv
8.137 399.195 8.207 399.223 8.301 399.277 cv
8.395 399.336 8.523 399.398 8.688 399.465 cv
8.852 399.531 9.051 399.594 9.293 399.652 cv
9.527 399.711 9.813 399.738 10.148 399.738 cv
10.449 399.738 10.73 399.703 10.988 399.629 cv
11.242 399.559 11.465 399.445 11.652 399.289 cv
11.836 399.137 11.98 398.941 12.086 398.703 cv
12.191 398.469 12.242 398.18 12.246 397.84 cv
12.242 397.559 12.199 397.309 12.109 397.09 cv
12.02 396.871 11.883 396.691 11.699 396.547 cv
11.512 396.406 11.277 396.301 10.996 396.227 cv
10.711 396.156 10.371 396.117 9.984 396.117 cv
9.699 396.117 9.461 396.133 9.262 396.16 cv
9.059 396.191 8.871 396.207 8.699 396.203 cv
8.57 396.207 8.477 396.176 8.426 396.113 cv
8.367 396.055 8.34 395.941 8.344 395.77 cv
8.344 392.156 li
8.34 392.008 8.375 391.898 8.449 391.82 cv
8.516 391.75 8.617 391.711 8.754 391.711 cv
12.684 391.711 li
12.719 391.711 12.754 391.723 12.789 391.742 cv
12.82 391.766 12.848 391.797 12.875 391.836 cv
12.895 391.879 12.91 391.93 12.926 391.992 cv
12.934 392.059 12.941 392.137 12.945 392.219 cv
12.941 392.387 12.918 392.512 12.879 392.602 cv
12.832 392.695 12.773 392.742 12.695 392.738 cv
9.523 392.738 li
9.523 395.227 li
9.676 395.207 9.832 395.195 9.996 395.187 cv
10.152 395.184 10.34 395.18 10.555 395.18 cv
11.039 395.18 11.465 395.242 11.832 395.363 cv
12.195 395.484 12.5 395.656 12.75 395.875 cv
12.992 396.102 13.18 396.367 13.305 396.68 cv
13.43 396.996 13.492 397.348 13.492 397.73 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
7.191 362.641 mo
14.285 362.641 li
14.285 379.731 li
7.191 379.731 li
cp
0 0 0 0 cmyk
ef
13.762 373.148 mo
13.762 373.539 13.699 373.918 13.582 374.277 cv
13.457 374.645 13.273 374.961 13.031 375.234 cv
12.781 375.512 12.469 375.734 12.094 375.898 cv
11.711 376.066 11.266 376.148 10.75 376.148 cv
10.379 376.148 10.051 376.105 9.77 376.012 cv
9.484 375.926 9.238 375.793 9.027 375.621 cv
8.816 375.453 8.641 375.246 8.504 375 cv
8.363 374.754 8.25 374.473 8.168 374.156 cv
8.082 373.844 8.023 373.5 7.988 373.121 cv
7.949 372.75 7.93 372.348 7.934 371.914 cv
7.93 371.535 7.949 371.152 7.992 370.762 cv
8.031 370.379 8.105 370.004 8.211 369.637 cv
8.316 369.277 8.461 368.937 8.641 368.621 cv
8.82 368.305 9.047 368.027 9.32 367.793 cv
9.594 367.559 9.918 367.371 10.297 367.23 cv
10.676 367.094 11.117 367.027 11.621 367.023 cv
11.789 367.027 11.961 367.035 12.133 367.055 cv
12.305 367.078 12.465 367.109 12.613 367.141 cv
12.762 367.18 12.883 367.215 12.984 367.254 cv
13.082 367.293 13.148 367.328 13.184 367.352 cv
13.211 367.379 13.234 367.406 13.254 367.434 cv
13.27 367.465 13.285 367.496 13.293 367.531 cv
13.301 367.566 13.305 367.605 13.313 367.648 cv
13.313 367.691 13.316 367.746 13.32 367.809 cv
13.316 367.895 13.316 367.965 13.316 368.02 cv
13.313 368.082 13.301 368.129 13.289 368.164 cv
13.27 368.203 13.25 368.23 13.227 368.246 cv
13.199 368.266 13.168 368.273 13.129 368.273 cv
13.078 368.273 13.008 368.258 12.922 368.227 cv
12.832 368.195 12.727 368.16 12.605 368.117 cv
12.48 368.082 12.332 368.047 12.156 368.012 cv
11.98 367.984 11.777 367.969 11.547 367.965 cv
11.117 367.969 10.75 368.055 10.445 368.227 cv
10.141 368.398 9.891 368.633 9.695 368.926 cv
9.5 369.219 9.355 369.559 9.266 369.941 cv
9.168 370.332 9.113 370.734 9.105 371.152 cv
9.223 371.086 9.359 371.02 9.508 370.949 cv
9.656 370.883 9.816 370.82 9.992 370.762 cv
10.168 370.711 10.355 370.664 10.551 370.629 cv
10.746 370.598 10.957 370.582 11.184 370.578 cv
11.66 370.582 12.063 370.648 12.395 370.773 cv
12.723 370.906 12.988 371.086 13.195 371.316 cv
13.395 371.547 13.539 371.816 13.629 372.129 cv
13.715 372.441 13.762 372.781 13.762 373.148 cv
cp
12.566 373.258 mo
12.566 372.996 12.539 372.754 12.488 372.535 cv
12.434 372.32 12.344 372.137 12.223 371.98 cv
12.098 371.832 11.934 371.715 11.73 371.633 cv
11.52 371.551 11.266 371.508 10.969 371.508 cv
10.797 371.508 10.629 371.523 10.461 371.555 cv
10.289 371.586 10.125 371.629 9.969 371.676 cv
9.809 371.73 9.66 371.793 9.52 371.863 cv
9.375 371.937 9.242 372.012 9.125 372.09 cv
9.121 372.684 9.16 373.18 9.238 373.574 cv
9.313 373.973 9.422 374.289 9.566 374.527 cv
9.711 374.77 9.891 374.941 10.105 375.043 cv
10.32 375.148 10.57 375.199 10.859 375.195 cv
11.148 375.199 11.402 375.145 11.617 375.031 cv
11.832 374.926 12.008 374.777 12.152 374.59 cv
12.293 374.406 12.398 374.199 12.465 373.969 cv
12.531 373.738 12.566 373.504 12.566 373.258 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
7.191 338.082 mo
14.285 338.082 li
14.285 355.172 li
7.191 355.172 li
cp
0 0 0 0 cmyk
ef
13.664 343.105 mo
13.66 343.191 13.656 343.266 13.652 343.328 cv
13.645 343.398 13.637 343.461 13.625 343.52 cv
13.613 343.586 13.598 343.645 13.578 343.699 cv
13.555 343.758 13.531 343.82 13.508 343.879 cv
10.313 351.242 li
10.285 351.301 10.258 351.344 10.227 351.375 cv
10.191 351.41 10.148 351.437 10.094 351.457 cv
10.039 351.477 9.969 351.488 9.891 351.5 cv
9.805 351.504 9.707 351.508 9.59 351.512 cv
9.434 351.508 9.313 351.5 9.227 351.488 cv
9.141 351.473 9.078 351.457 9.039 351.426 cv
9 351.398 8.98 351.359 8.988 351.316 cv
8.988 351.273 9.004 351.223 9.035 351.16 cv
12.395 343.633 li
8.137 343.633 li
8.051 343.637 7.984 343.59 7.941 343.496 cv
7.898 343.406 7.879 343.277 7.879 343.113 cv
7.879 343.027 7.883 342.953 7.895 342.887 cv
7.906 342.824 7.922 342.77 7.945 342.727 cv
7.965 342.684 7.992 342.652 8.027 342.629 cv
8.059 342.609 8.098 342.598 8.137 342.598 cv
13.309 342.598 li
13.367 342.598 13.422 342.605 13.473 342.621 cv
13.52 342.637 13.555 342.664 13.582 342.703 cv
13.605 342.742 13.625 342.797 13.641 342.859 cv
13.652 342.926 13.66 343.008 13.664 343.105 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
7.191 313.532 mo
14.285 313.532 li
14.285 330.622 li
7.191 330.622 li
cp
0 0 0 0 cmyk
ef
13.738 324.645 mo
13.738 325.031 13.668 325.375 13.531 325.672 cv
13.395 325.977 13.199 326.227 12.941 326.43 cv
12.684 326.637 12.363 326.793 11.984 326.895 cv
11.602 327 11.168 327.051 10.684 327.051 cv
10.223 327.051 9.813 327.004 9.453 326.91 cv
9.09 326.816 8.785 326.676 8.535 326.484 cv
8.285 326.301 8.094 326.07 7.961 325.793 cv
7.828 325.52 7.762 325.207 7.762 324.852 cv
7.762 324.578 7.805 324.32 7.898 324.086 cv
7.984 323.852 8.117 323.637 8.293 323.441 cv
8.461 323.246 8.672 323.062 8.926 322.887 cv
9.176 322.719 9.461 322.555 9.777 322.398 cv
9.504 322.258 9.262 322.109 9.051 321.949 cv
8.84 321.793 8.66 321.621 8.516 321.434 cv
8.367 321.25 8.258 321.055 8.184 320.844 cv
8.105 320.637 8.066 320.406 8.07 320.156 cv
8.066 319.848 8.121 319.555 8.238 319.281 cv
8.348 319.012 8.52 318.777 8.746 318.574 cv
8.973 318.375 9.258 318.215 9.609 318.098 cv
9.953 317.98 10.363 317.922 10.832 317.922 cv
11.277 317.922 11.664 317.977 11.992 318.082 cv
12.32 318.191 12.59 318.336 12.801 318.52 cv
13.012 318.707 13.168 318.926 13.273 319.176 cv
13.371 319.426 13.422 319.695 13.426 319.984 cv
13.422 320.219 13.383 320.445 13.313 320.656 cv
13.234 320.875 13.125 321.078 12.977 321.266 cv
12.828 321.461 12.648 321.641 12.438 321.805 cv
12.227 321.977 11.984 322.133 11.711 322.273 cv
12.031 322.437 12.316 322.602 12.574 322.77 cv
12.824 322.937 13.039 323.117 13.215 323.312 cv
13.383 323.508 13.512 323.715 13.605 323.93 cv
13.691 324.148 13.738 324.387 13.738 324.645 cv
cp
12.258 320.094 mo
12.254 319.906 12.223 319.73 12.156 319.574 cv
12.09 319.418 11.992 319.285 11.867 319.176 cv
11.738 319.066 11.578 318.984 11.391 318.926 cv
11.195 318.871 10.98 318.844 10.742 318.84 cv
10.246 318.844 9.871 318.953 9.621 319.176 cv
9.363 319.402 9.238 319.711 9.242 320.094 cv
9.238 320.273 9.27 320.437 9.332 320.59 cv
9.395 320.746 9.488 320.891 9.621 321.027 cv
9.746 321.164 9.91 321.297 10.113 321.426 cv
10.309 321.559 10.547 321.695 10.824 321.836 cv
11.285 321.602 11.641 321.34 11.887 321.047 cv
12.133 320.762 12.254 320.445 12.258 320.094 cv
cp
12.547 324.77 mo
12.543 324.562 12.504 324.371 12.43 324.199 cv
12.348 324.031 12.23 323.871 12.074 323.719 cv
11.918 323.57 11.719 323.426 11.484 323.285 cv
11.246 323.148 10.977 323.004 10.668 322.852 cv
10.379 322.996 10.125 323.137 9.91 323.277 cv
9.691 323.418 9.512 323.566 9.375 323.715 cv
9.234 323.871 9.129 324.027 9.059 324.191 cv
8.984 324.359 8.949 324.543 8.953 324.742 cv
8.949 325.187 9.102 325.531 9.41 325.77 cv
9.711 326.016 10.164 326.137 10.77 326.133 cv
11.352 326.137 11.797 326.016 12.098 325.766 cv
12.395 325.523 12.543 325.191 12.547 324.77 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
7.191 288.981 mo
14.285 288.981 li
14.285 306.071 li
7.191 306.071 li
cp
0 0 0 0 cmyk
ef
13.613 297.578 mo
13.609 297.965 13.586 298.355 13.543 298.746 cv
13.496 299.141 13.418 299.52 13.309 299.883 cv
13.195 300.246 13.047 300.586 12.867 300.906 cv
12.68 301.227 12.449 301.508 12.168 301.742 cv
11.887 301.984 11.551 302.168 11.164 302.301 cv
10.777 302.434 10.328 302.5 9.816 302.5 cv
9.617 302.5 9.426 302.484 9.242 302.461 cv
9.055 302.434 8.887 302.406 8.742 302.371 cv
8.59 302.336 8.465 302.297 8.367 302.254 cv
8.262 302.215 8.188 302.176 8.145 302.133 cv
8.098 302.094 8.066 302.039 8.047 301.965 cv
8.023 301.895 8.012 301.797 8.016 301.676 cv
8.012 301.578 8.016 301.5 8.023 301.437 cv
8.027 301.383 8.039 301.336 8.055 301.301 cv
8.07 301.27 8.09 301.246 8.113 301.234 cv
8.137 301.227 8.168 301.223 8.207 301.219 cv
8.258 301.223 8.328 301.238 8.422 301.27 cv
8.512 301.305 8.625 301.344 8.766 301.383 cv
8.902 301.426 9.066 301.465 9.258 301.496 cv
9.441 301.535 9.652 301.551 9.891 301.547 cv
10.332 301.551 10.715 301.465 11.035 301.289 cv
11.352 301.121 11.609 300.891 11.813 300.602 cv
12.012 300.312 12.164 299.98 12.266 299.598 cv
12.363 299.223 12.418 298.82 12.434 298.395 cv
12.184 298.539 11.895 298.664 11.559 298.773 cv
11.219 298.883 10.828 298.937 10.391 298.937 cv
9.895 298.937 9.48 298.871 9.145 298.734 cv
8.809 298.602 8.539 298.418 8.336 298.184 cv
8.133 297.953 7.984 297.676 7.895 297.352 cv
7.805 297.035 7.762 296.684 7.762 296.301 cv
7.762 295.91 7.816 295.539 7.934 295.18 cv
8.043 294.828 8.223 294.516 8.469 294.242 cv
8.707 293.977 9.016 293.762 9.395 293.598 cv
9.77 293.441 10.219 293.359 10.742 293.355 cv
11.113 293.359 11.441 293.406 11.727 293.496 cv
12.012 293.594 12.262 293.73 12.473 293.902 cv
12.684 294.082 12.859 294.293 13.008 294.539 cv
13.152 294.793 13.273 295.074 13.363 295.387 cv
13.449 295.703 13.512 296.047 13.555 296.414 cv
13.59 296.785 13.609 297.172 13.613 297.578 cv
cp
12.41 297.449 mo
12.406 296.863 12.367 296.371 12.293 295.969 cv
12.215 295.57 12.102 295.246 11.953 294.996 cv
11.797 294.75 11.613 294.57 11.395 294.461 cv
11.176 294.352 10.922 294.297 10.633 294.297 cv
10.336 294.297 10.082 294.352 9.871 294.457 cv
9.66 294.566 9.484 294.711 9.352 294.891 cv
9.211 295.074 9.113 295.277 9.051 295.504 cv
8.988 295.734 8.957 295.973 8.957 296.211 cv
8.957 296.484 8.984 296.73 9.043 296.953 cv
9.098 297.18 9.191 297.371 9.32 297.523 cv
9.445 297.684 9.609 297.805 9.82 297.887 cv
10.023 297.973 10.281 298.012 10.586 298.012 cv
10.93 298.012 11.262 297.961 11.582 297.859 cv
11.902 297.758 12.176 297.621 12.41 297.449 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
.102 264.422 mo
14.29 264.422 li
14.29 281.512 li
.102 281.512 li
cp
0 0 0 0 cmyk
ef
6.477 277.324 mo
6.473 277.414 6.465 277.484 6.453 277.543 cv
6.438 277.605 6.418 277.656 6.398 277.687 cv
6.375 277.727 6.352 277.75 6.32 277.766 cv
6.289 277.781 6.258 277.789 6.23 277.789 cv
1.594 277.789 li
1.559 277.789 1.531 277.781 1.504 277.766 cv
1.477 277.75 1.449 277.727 1.426 277.687 cv
1.398 277.656 1.379 277.605 1.367 277.543 cv
1.352 277.484 1.344 277.414 1.348 277.324 cv
1.344 277.246 1.352 277.172 1.367 277.109 cv
1.379 277.051 1.395 277.004 1.418 276.965 cv
1.434 276.93 1.461 276.898 1.492 276.875 cv
1.523 276.855 1.555 276.848 1.594 276.844 cv
3.445 276.844 li
3.445 270.098 li
1.73 271.117 li
1.641 271.168 1.57 271.195 1.523 271.203 cv
1.469 271.211 1.426 271.203 1.395 271.172 cv
1.359 271.145 1.34 271.094 1.328 271.023 cv
1.316 270.957 1.309 270.871 1.313 270.762 cv
1.309 270.687 1.313 270.621 1.324 270.562 cv
1.328 270.512 1.34 270.465 1.355 270.426 cv
1.367 270.391 1.387 270.359 1.41 270.332 cv
1.434 270.305 1.465 270.277 1.512 270.25 cv
3.555 268.937 li
3.57 268.926 3.59 268.914 3.621 268.906 cv
3.645 268.898 3.68 268.891 3.727 268.879 cv
3.766 268.871 3.816 268.863 3.871 268.859 cv
3.926 268.859 3.992 268.859 4.078 268.855 cv
4.184 268.859 4.277 268.863 4.352 268.871 cv
4.422 268.879 4.477 268.895 4.523 268.91 cv
4.563 268.93 4.59 268.949 4.605 268.973 cv
4.613 269 4.621 269.023 4.625 269.047 cv
4.625 276.844 li
6.23 276.844 li
6.266 276.848 6.301 276.855 6.332 276.875 cv
6.363 276.898 6.387 276.93 6.41 276.965 cv
6.426 277.004 6.441 277.051 6.457 277.109 cv
6.465 277.172 6.473 277.246 6.477 277.324 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.828 273.332 mo
13.824 274.016 13.773 274.637 13.668 275.199 cv
13.559 275.762 13.379 276.246 13.133 276.648 cv
12.879 277.055 12.551 277.367 12.152 277.586 cv
11.746 277.809 11.254 277.918 10.668 277.918 cv
10.109 277.918 9.637 277.82 9.258 277.621 cv
8.875 277.426 8.57 277.133 8.336 276.746 cv
8.102 276.359 7.934 275.887 7.84 275.32 cv
7.738 274.758 7.691 274.109 7.691 273.375 cv
7.691 272.703 7.746 272.082 7.855 271.516 cv
7.965 270.953 8.141 270.469 8.391 270.062 cv
8.633 269.66 8.957 269.348 9.363 269.121 cv
9.762 268.902 10.258 268.789 10.848 268.789 cv
11.406 268.789 11.879 268.891 12.262 269.086 cv
12.645 269.289 12.949 269.582 13.184 269.965 cv
13.414 270.355 13.582 270.828 13.68 271.391 cv
13.777 271.953 13.824 272.602 13.828 273.332 cv
cp
12.621 273.414 mo
12.617 272.973 12.602 272.574 12.574 272.223 cv
12.539 271.871 12.492 271.562 12.434 271.293 cv
12.367 271.023 12.289 270.793 12.191 270.598 cv
12.094 270.406 11.977 270.246 11.84 270.117 cv
11.699 269.992 11.539 269.898 11.367 269.84 cv
11.188 269.785 10.992 269.758 10.777 269.754 cv
10.387 269.758 10.07 269.848 9.832 270.031 cv
9.586 270.215 9.395 270.469 9.258 270.785 cv
9.117 271.105 9.023 271.477 8.973 271.906 cv
8.922 272.336 8.898 272.801 8.898 273.293 cv
8.898 273.957 8.93 274.52 9 274.98 cv
9.066 275.449 9.176 275.828 9.328 276.117 cv
9.473 276.414 9.664 276.625 9.895 276.754 cv
10.125 276.891 10.406 276.957 10.738 276.953 cv
10.992 276.957 11.215 276.918 11.41 276.832 cv
11.602 276.754 11.77 276.633 11.91 276.477 cv
12.051 276.324 12.164 276.141 12.258 275.926 cv
12.344 275.711 12.418 275.473 12.477 275.211 cv
12.527 274.953 12.566 274.672 12.59 274.367 cv
12.609 274.062 12.617 273.746 12.621 273.414 cv
cp
f
.102 239.871 mo
14.29 239.871 li
14.29 256.961 li
.102 256.961 li
cp
0 0 0 0 cmyk
ef
6.477 252.773 mo
6.473 252.863 6.465 252.934 6.453 252.992 cv
6.438 253.055 6.418 253.105 6.398 253.137 cv
6.375 253.176 6.352 253.199 6.32 253.215 cv
6.289 253.23 6.258 253.238 6.23 253.238 cv
1.594 253.238 li
1.559 253.238 1.531 253.23 1.504 253.215 cv
1.477 253.199 1.449 253.176 1.426 253.137 cv
1.398 253.105 1.379 253.055 1.367 252.992 cv
1.352 252.934 1.344 252.863 1.348 252.773 cv
1.344 252.695 1.352 252.621 1.367 252.559 cv
1.379 252.5 1.395 252.453 1.418 252.414 cv
1.434 252.379 1.461 252.348 1.492 252.324 cv
1.523 252.305 1.555 252.297 1.594 252.293 cv
3.445 252.293 li
3.445 245.547 li
1.73 246.566 li
1.641 246.617 1.57 246.645 1.523 246.652 cv
1.469 246.66 1.426 246.652 1.395 246.621 cv
1.359 246.594 1.34 246.543 1.328 246.473 cv
1.316 246.406 1.309 246.32 1.313 246.211 cv
1.309 246.137 1.313 246.07 1.324 246.012 cv
1.328 245.961 1.34 245.914 1.355 245.875 cv
1.367 245.84 1.387 245.809 1.41 245.781 cv
1.434 245.754 1.465 245.727 1.512 245.699 cv
3.555 244.387 li
3.57 244.375 3.59 244.363 3.621 244.355 cv
3.645 244.348 3.68 244.34 3.727 244.328 cv
3.766 244.32 3.816 244.312 3.871 244.309 cv
3.926 244.309 3.992 244.309 4.078 244.305 cv
4.184 244.309 4.277 244.312 4.352 244.32 cv
4.422 244.328 4.477 244.344 4.523 244.359 cv
4.563 244.379 4.59 244.398 4.605 244.422 cv
4.613 244.449 4.621 244.473 4.625 244.496 cv
4.625 252.293 li
6.23 252.293 li
6.266 252.297 6.301 252.305 6.332 252.324 cv
6.363 252.348 6.387 252.379 6.41 252.414 cv
6.426 252.453 6.441 252.5 6.457 252.559 cv
6.465 252.621 6.473 252.695 6.477 252.773 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.555 252.773 mo
13.551 252.863 13.543 252.934 13.531 252.992 cv
13.516 253.055 13.496 253.105 13.477 253.137 cv
13.453 253.176 13.43 253.199 13.398 253.215 cv
13.367 253.23 13.336 253.238 13.309 253.238 cv
8.672 253.238 li
8.637 253.238 8.609 253.23 8.582 253.215 cv
8.555 253.199 8.527 253.176 8.504 253.137 cv
8.477 253.105 8.457 253.055 8.445 252.992 cv
8.43 252.934 8.422 252.863 8.426 252.773 cv
8.422 252.695 8.43 252.621 8.445 252.559 cv
8.457 252.5 8.473 252.453 8.496 252.414 cv
8.512 252.379 8.539 252.348 8.57 252.324 cv
8.602 252.305 8.633 252.297 8.672 252.293 cv
10.523 252.293 li
10.523 245.547 li
8.809 246.566 li
8.719 246.617 8.648 246.645 8.602 246.652 cv
8.547 246.66 8.504 246.652 8.473 246.621 cv
8.438 246.594 8.418 246.543 8.406 246.473 cv
8.395 246.406 8.387 246.32 8.391 246.211 cv
8.387 246.137 8.391 246.07 8.402 246.012 cv
8.406 245.961 8.418 245.914 8.434 245.875 cv
8.445 245.84 8.465 245.809 8.488 245.781 cv
8.512 245.754 8.543 245.727 8.59 245.699 cv
10.633 244.387 li
10.648 244.375 10.668 244.363 10.699 244.355 cv
10.723 244.348 10.758 244.34 10.805 244.328 cv
10.844 244.32 10.895 244.312 10.949 244.309 cv
11.004 244.309 11.07 244.309 11.156 244.305 cv
11.262 244.309 11.355 244.312 11.43 244.32 cv
11.5 244.328 11.555 244.344 11.602 244.359 cv
11.641 244.379 11.668 244.398 11.684 244.422 cv
11.691 244.449 11.699 244.473 11.703 244.496 cv
11.703 252.293 li
13.309 252.293 li
13.344 252.297 13.379 252.305 13.41 252.324 cv
13.441 252.348 13.465 252.379 13.488 252.414 cv
13.504 252.453 13.52 252.5 13.535 252.559 cv
13.543 252.621 13.551 252.695 13.555 252.773 cv
cp
f
.102 215.321 mo
14.29 215.321 li
14.29 232.411 li
.102 232.411 li
cp
0 0 0 0 cmyk
ef
6.477 228.227 mo
6.473 228.316 6.465 228.387 6.453 228.445 cv
6.438 228.508 6.418 228.559 6.398 228.59 cv
6.375 228.629 6.352 228.652 6.32 228.668 cv
6.289 228.684 6.258 228.691 6.23 228.691 cv
1.594 228.691 li
1.559 228.691 1.531 228.684 1.504 228.668 cv
1.477 228.652 1.449 228.629 1.426 228.59 cv
1.398 228.559 1.379 228.508 1.367 228.445 cv
1.352 228.387 1.344 228.316 1.348 228.227 cv
1.344 228.148 1.352 228.074 1.367 228.012 cv
1.379 227.953 1.395 227.906 1.418 227.867 cv
1.434 227.832 1.461 227.801 1.492 227.777 cv
1.523 227.758 1.555 227.75 1.594 227.746 cv
3.445 227.746 li
3.445 221 li
1.73 222.02 li
1.641 222.07 1.57 222.098 1.523 222.105 cv
1.469 222.113 1.426 222.105 1.395 222.074 cv
1.359 222.047 1.34 221.996 1.328 221.926 cv
1.316 221.859 1.309 221.773 1.313 221.664 cv
1.309 221.59 1.313 221.523 1.324 221.465 cv
1.328 221.414 1.34 221.367 1.355 221.328 cv
1.367 221.293 1.387 221.262 1.41 221.234 cv
1.434 221.207 1.465 221.18 1.512 221.152 cv
3.555 219.84 li
3.57 219.828 3.59 219.816 3.621 219.809 cv
3.645 219.801 3.68 219.793 3.727 219.781 cv
3.766 219.773 3.816 219.766 3.871 219.762 cv
3.926 219.762 3.992 219.762 4.078 219.758 cv
4.184 219.762 4.277 219.766 4.352 219.773 cv
4.422 219.781 4.477 219.797 4.523 219.812 cv
4.563 219.832 4.59 219.852 4.605 219.875 cv
4.613 219.902 4.621 219.926 4.625 219.949 cv
4.625 227.746 li
6.23 227.746 li
6.266 227.75 6.301 227.758 6.332 227.777 cv
6.363 227.801 6.387 227.832 6.41 227.867 cv
6.426 227.906 6.441 227.953 6.457 228.012 cv
6.465 228.074 6.473 228.148 6.477 228.227 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.535 228.184 mo
13.531 228.27 13.527 228.344 13.516 228.406 cv
13.504 228.473 13.488 228.527 13.469 228.566 cv
13.445 228.613 13.418 228.645 13.387 228.66 cv
13.352 228.684 13.313 228.691 13.273 228.691 cv
8.371 228.691 li
8.309 228.691 8.25 228.684 8.203 228.668 cv
8.152 228.652 8.113 228.629 8.078 228.59 cv
8.043 228.559 8.016 228.504 8.004 228.434 cv
7.984 228.363 7.977 228.277 7.98 228.176 cv
7.977 228.086 7.98 228.008 7.988 227.937 cv
7.992 227.871 8.008 227.812 8.035 227.758 cv
8.059 227.707 8.09 227.652 8.125 227.598 cv
8.16 227.547 8.203 227.492 8.262 227.43 cv
10.035 225.605 li
10.445 225.187 10.773 224.812 11.023 224.477 cv
11.27 224.148 11.461 223.844 11.594 223.566 cv
11.727 223.293 11.813 223.043 11.859 222.816 cv
11.898 222.594 11.922 222.383 11.922 222.187 cv
11.922 221.992 11.887 221.809 11.82 221.629 cv
11.754 221.457 11.66 221.301 11.535 221.164 cv
11.41 221.035 11.254 220.93 11.066 220.848 cv
10.879 220.773 10.66 220.734 10.414 220.73 cv
10.125 220.734 9.867 220.773 9.641 220.848 cv
9.41 220.93 9.211 221.016 9.039 221.102 cv
8.867 221.195 8.723 221.277 8.605 221.355 cv
8.488 221.434 8.402 221.473 8.352 221.473 cv
8.316 221.473 8.285 221.465 8.262 221.445 cv
8.23 221.43 8.211 221.398 8.195 221.355 cv
8.18 221.316 8.164 221.262 8.156 221.191 cv
8.145 221.125 8.141 221.043 8.145 220.945 cv
8.141 220.879 8.145 220.82 8.152 220.77 cv
8.156 220.719 8.164 220.676 8.176 220.637 cv
8.184 220.602 8.199 220.566 8.219 220.535 cv
8.238 220.504 8.273 220.465 8.332 220.414 cv
8.383 220.367 8.477 220.301 8.613 220.219 cv
8.746 220.137 8.918 220.059 9.121 219.977 cv
9.324 219.898 9.547 219.828 9.793 219.773 cv
10.035 219.719 10.293 219.691 10.566 219.691 cv
10.992 219.691 11.367 219.754 11.691 219.875 cv
12.012 219.996 12.277 220.16 12.492 220.371 cv
12.703 220.582 12.863 220.828 12.969 221.102 cv
13.074 221.383 13.129 221.68 13.129 221.992 cv
13.129 222.281 13.102 222.562 13.051 222.84 cv
13 223.125 12.895 223.43 12.734 223.754 cv
12.57 224.082 12.336 224.445 12.031 224.844 cv
11.723 225.246 11.316 225.707 10.813 226.223 cv
9.406 227.691 li
13.266 227.691 li
13.297 227.695 13.332 227.707 13.371 227.723 cv
13.402 227.746 13.434 227.777 13.461 227.816 cv
13.484 227.859 13.504 227.91 13.516 227.969 cv
13.527 228.035 13.531 228.105 13.535 228.184 cv
cp
f
.102 190.762 mo
14.29 190.762 li
14.29 207.852 li
.102 207.852 li
cp
0 0 0 0 cmyk
ef
6.477 203.676 mo
6.473 203.766 6.465 203.836 6.453 203.895 cv
6.438 203.957 6.418 204.008 6.398 204.039 cv
6.375 204.078 6.352 204.102 6.32 204.117 cv
6.289 204.133 6.258 204.141 6.23 204.141 cv
1.594 204.141 li
1.559 204.141 1.531 204.133 1.504 204.117 cv
1.477 204.102 1.449 204.078 1.426 204.039 cv
1.398 204.008 1.379 203.957 1.367 203.895 cv
1.352 203.836 1.344 203.766 1.348 203.676 cv
1.344 203.598 1.352 203.523 1.367 203.461 cv
1.379 203.402 1.395 203.355 1.418 203.316 cv
1.434 203.281 1.461 203.25 1.492 203.227 cv
1.523 203.207 1.555 203.199 1.594 203.195 cv
3.445 203.195 li
3.445 196.449 li
1.73 197.469 li
1.641 197.52 1.57 197.547 1.523 197.555 cv
1.469 197.562 1.426 197.555 1.395 197.523 cv
1.359 197.496 1.34 197.445 1.328 197.375 cv
1.316 197.309 1.309 197.223 1.313 197.113 cv
1.309 197.039 1.313 196.973 1.324 196.914 cv
1.328 196.863 1.34 196.816 1.355 196.777 cv
1.367 196.742 1.387 196.711 1.41 196.684 cv
1.434 196.656 1.465 196.629 1.512 196.602 cv
3.555 195.289 li
3.57 195.277 3.59 195.266 3.621 195.258 cv
3.645 195.25 3.68 195.242 3.727 195.23 cv
3.766 195.223 3.816 195.215 3.871 195.211 cv
3.926 195.211 3.992 195.211 4.078 195.207 cv
4.184 195.211 4.277 195.215 4.352 195.223 cv
4.422 195.23 4.477 195.246 4.523 195.262 cv
4.563 195.281 4.59 195.301 4.605 195.324 cv
4.613 195.352 4.621 195.375 4.625 195.398 cv
4.625 203.195 li
6.23 203.195 li
6.266 203.199 6.301 203.207 6.332 203.227 cv
6.363 203.25 6.387 203.281 6.41 203.316 cv
6.426 203.355 6.441 203.402 6.457 203.461 cv
6.465 203.523 6.473 203.598 6.477 203.676 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.465 201.605 mo
13.461 202.016 13.391 202.383 13.25 202.707 cv
13.105 203.035 12.902 203.316 12.641 203.547 cv
12.375 203.781 12.047 203.957 11.66 204.082 cv
11.27 204.207 10.832 204.27 10.348 204.27 cv
10.043 204.27 9.766 204.242 9.512 204.195 cv
9.25 204.148 9.02 204.098 8.824 204.027 cv
8.621 203.965 8.457 203.895 8.324 203.824 cv
8.191 203.754 8.105 203.703 8.074 203.668 cv
8.035 203.641 8.012 203.609 7.996 203.574 cv
7.977 203.543 7.957 203.504 7.945 203.457 cv
7.93 203.414 7.922 203.359 7.914 203.289 cv
7.906 203.227 7.902 203.145 7.906 203.043 cv
7.902 202.883 7.918 202.77 7.953 202.703 cv
7.984 202.641 8.031 202.605 8.094 202.605 cv
8.137 202.605 8.219 202.645 8.344 202.715 cv
8.465 202.793 8.625 202.871 8.82 202.953 cv
9.012 203.039 9.238 203.117 9.504 203.187 cv
9.762 203.262 10.055 203.297 10.375 203.297 cv
10.684 203.297 10.953 203.258 11.191 203.18 cv
11.422 203.102 11.621 202.992 11.781 202.852 cv
11.938 202.711 12.055 202.543 12.137 202.348 cv
12.215 202.152 12.254 201.941 12.258 201.715 cv
12.254 201.465 12.203 201.238 12.105 201.035 cv
12 200.836 11.852 200.664 11.66 200.516 cv
11.461 200.371 11.223 200.258 10.938 200.18 cv
10.652 200.102 10.328 200.062 9.965 200.062 cv
9.094 200.062 li
9.051 200.062 9.016 200.055 8.98 200.039 cv
8.945 200.023 8.914 199.996 8.891 199.957 cv
8.863 199.922 8.844 199.875 8.828 199.816 cv
8.813 199.758 8.805 199.68 8.805 199.582 cv
8.805 199.496 8.809 199.426 8.824 199.367 cv
8.832 199.312 8.852 199.266 8.883 199.23 cv
8.906 199.195 8.938 199.172 8.969 199.152 cv
9 199.141 9.035 199.133 9.078 199.129 cv
9.852 199.129 li
10.152 199.133 10.422 199.094 10.664 199.012 cv
10.898 198.937 11.102 198.824 11.273 198.676 cv
11.438 198.531 11.566 198.355 11.656 198.152 cv
11.746 197.949 11.793 197.723 11.793 197.469 cv
11.793 197.289 11.762 197.113 11.703 196.945 cv
11.641 196.781 11.551 196.637 11.434 196.512 cv
11.313 196.387 11.16 196.289 10.98 196.219 cv
10.793 196.148 10.582 196.113 10.34 196.113 cv
10.074 196.113 9.828 196.156 9.609 196.234 cv
9.383 196.316 9.188 196.402 9.016 196.492 cv
8.84 196.586 8.695 196.672 8.582 196.75 cv
8.469 196.832 8.387 196.871 8.344 196.867 cv
8.309 196.871 8.281 196.863 8.258 196.852 cv
8.23 196.84 8.211 196.816 8.195 196.781 cv
8.18 196.75 8.168 196.703 8.16 196.637 cv
8.152 196.578 8.148 196.496 8.152 196.395 cv
8.148 196.328 8.148 196.27 8.156 196.215 cv
8.156 196.164 8.168 196.117 8.184 196.074 cv
8.199 196.039 8.215 196.004 8.234 195.969 cv
8.25 195.941 8.281 195.902 8.324 195.855 cv
8.367 195.812 8.453 195.75 8.59 195.668 cv
8.719 195.586 8.883 195.508 9.078 195.426 cv
9.27 195.348 9.492 195.277 9.75 195.223 cv
10 195.168 10.273 195.141 10.57 195.141 cv
10.977 195.141 11.34 195.195 11.652 195.297 cv
11.965 195.406 12.223 195.555 12.434 195.742 cv
12.637 195.937 12.793 196.168 12.898 196.434 cv
13 196.703 13.051 196.996 13.055 197.32 cv
13.051 197.602 13.016 197.863 12.945 198.098 cv
12.871 198.34 12.762 198.551 12.621 198.734 cv
12.477 198.922 12.305 199.078 12.102 199.207 cv
11.895 199.34 11.656 199.434 11.387 199.48 cv
11.387 199.492 li
11.691 199.527 11.973 199.602 12.227 199.723 cv
12.48 199.844 12.699 199.996 12.883 200.18 cv
13.063 200.363 13.203 200.578 13.309 200.82 cv
13.41 201.066 13.461 201.328 13.465 201.605 cv
cp
f
.102 166.211 mo
14.29 166.211 li
14.29 183.301 li
.102 183.301 li
cp
0 0 0 0 cmyk
ef
6.477 179.094 mo
6.473 179.184 6.465 179.254 6.453 179.312 cv
6.438 179.375 6.418 179.426 6.398 179.457 cv
6.375 179.496 6.352 179.52 6.32 179.535 cv
6.289 179.551 6.258 179.559 6.23 179.559 cv
1.594 179.559 li
1.559 179.559 1.531 179.551 1.504 179.535 cv
1.477 179.52 1.449 179.496 1.426 179.457 cv
1.398 179.426 1.379 179.375 1.367 179.312 cv
1.352 179.254 1.344 179.184 1.348 179.094 cv
1.344 179.016 1.352 178.941 1.367 178.879 cv
1.379 178.82 1.395 178.773 1.418 178.734 cv
1.434 178.699 1.461 178.668 1.492 178.645 cv
1.523 178.625 1.555 178.617 1.594 178.613 cv
3.445 178.613 li
3.445 171.867 li
1.73 172.887 li
1.641 172.937 1.57 172.965 1.523 172.973 cv
1.469 172.98 1.426 172.973 1.395 172.941 cv
1.359 172.914 1.34 172.863 1.328 172.793 cv
1.316 172.727 1.309 172.641 1.313 172.531 cv
1.309 172.457 1.313 172.391 1.324 172.332 cv
1.328 172.281 1.34 172.234 1.355 172.195 cv
1.367 172.16 1.387 172.129 1.41 172.102 cv
1.434 172.074 1.465 172.047 1.512 172.02 cv
3.555 170.707 li
3.57 170.695 3.59 170.684 3.621 170.676 cv
3.645 170.668 3.68 170.66 3.727 170.648 cv
3.766 170.641 3.816 170.633 3.871 170.629 cv
3.926 170.629 3.992 170.629 4.078 170.625 cv
4.184 170.629 4.277 170.633 4.352 170.641 cv
4.422 170.648 4.477 170.664 4.523 170.68 cv
4.563 170.699 4.59 170.719 4.605 170.742 cv
4.613 170.77 4.621 170.793 4.625 170.816 cv
4.625 178.613 li
6.23 178.613 li
6.266 178.617 6.301 178.625 6.332 178.645 cv
6.363 178.668 6.387 178.699 6.41 178.734 cv
6.426 178.773 6.441 178.82 6.457 178.879 cv
6.465 178.941 6.473 179.016 6.477 179.094 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.91 177.035 mo
13.906 177.187 13.883 177.309 13.84 177.395 cv
13.793 177.484 13.73 177.527 13.648 177.523 cv
12.648 177.523 li
12.648 179.387 li
12.648 179.426 12.637 179.457 12.621 179.48 cv
12.598 179.508 12.566 179.527 12.523 179.547 cv
12.473 179.562 12.41 179.574 12.34 179.586 cv
12.262 179.594 12.168 179.598 12.051 179.602 cv
11.934 179.598 11.836 179.594 11.766 179.586 cv
11.688 179.574 11.629 179.562 11.586 179.547 cv
11.539 179.527 11.508 179.508 11.492 179.48 cv
11.473 179.457 11.465 179.426 11.469 179.387 cv
11.469 177.523 li
7.84 177.523 li
7.781 177.527 7.738 177.52 7.703 177.504 cv
7.668 177.492 7.633 177.465 7.605 177.426 cv
7.574 177.391 7.555 177.34 7.543 177.27 cv
7.531 177.203 7.527 177.113 7.527 177 cv
7.527 176.918 7.527 176.84 7.535 176.77 cv
7.535 176.699 7.547 176.637 7.563 176.582 cv
7.574 176.527 7.59 176.473 7.617 176.418 cv
7.637 176.363 7.664 176.309 7.699 176.246 cv
10.859 170.859 li
10.879 170.824 10.914 170.793 10.961 170.766 cv
11.004 170.738 11.059 170.715 11.133 170.695 cv
11.199 170.68 11.285 170.668 11.391 170.656 cv
11.492 170.652 11.613 170.648 11.754 170.645 cv
11.902 170.648 12.039 170.652 12.156 170.664 cv
12.27 170.676 12.359 170.691 12.434 170.707 cv
12.5 170.727 12.555 170.75 12.594 170.781 cv
12.629 170.812 12.648 170.848 12.648 170.887 cv
12.648 176.551 li
13.648 176.551 li
13.723 176.555 13.785 176.594 13.836 176.672 cv
13.883 176.754 13.906 176.875 13.91 177.035 cv
cp
11.469 171.684 mo
11.457 171.684 li
8.605 176.551 li
11.469 176.551 li
cp
f
.102 141.661 mo
14.29 141.661 li
14.29 158.751 li
.102 158.751 li
cp
0 0 0 0 cmyk
ef
6.477 154.547 mo
6.473 154.637 6.465 154.707 6.453 154.766 cv
6.438 154.828 6.418 154.879 6.398 154.91 cv
6.375 154.949 6.352 154.973 6.32 154.988 cv
6.289 155.004 6.258 155.012 6.23 155.012 cv
1.594 155.012 li
1.559 155.012 1.531 155.004 1.504 154.988 cv
1.477 154.973 1.449 154.949 1.426 154.91 cv
1.398 154.879 1.379 154.828 1.367 154.766 cv
1.352 154.707 1.344 154.637 1.348 154.547 cv
1.344 154.469 1.352 154.395 1.367 154.332 cv
1.379 154.273 1.395 154.227 1.418 154.187 cv
1.434 154.152 1.461 154.121 1.492 154.098 cv
1.523 154.078 1.555 154.07 1.594 154.066 cv
3.445 154.066 li
3.445 147.32 li
1.73 148.34 li
1.641 148.391 1.57 148.418 1.523 148.426 cv
1.469 148.434 1.426 148.426 1.395 148.395 cv
1.359 148.367 1.34 148.316 1.328 148.246 cv
1.316 148.18 1.309 148.094 1.313 147.984 cv
1.309 147.91 1.313 147.844 1.324 147.785 cv
1.328 147.734 1.34 147.687 1.355 147.648 cv
1.367 147.613 1.387 147.582 1.41 147.555 cv
1.434 147.527 1.465 147.5 1.512 147.473 cv
3.555 146.16 li
3.57 146.148 3.59 146.137 3.621 146.129 cv
3.645 146.121 3.68 146.113 3.727 146.102 cv
3.766 146.094 3.816 146.086 3.871 146.082 cv
3.926 146.082 3.992 146.082 4.078 146.078 cv
4.184 146.082 4.277 146.086 4.352 146.094 cv
4.422 146.102 4.477 146.117 4.523 146.133 cv
4.563 146.152 4.59 146.172 4.605 146.195 cv
4.613 146.223 4.621 146.246 4.625 146.27 cv
4.625 154.066 li
6.23 154.066 li
6.266 154.07 6.301 154.078 6.332 154.098 cv
6.363 154.121 6.387 154.152 6.41 154.187 cv
6.426 154.227 6.441 154.273 6.457 154.332 cv
6.465 154.395 6.473 154.469 6.477 154.547 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.492 152.16 mo
13.492 152.637 13.41 153.059 13.25 153.43 cv
13.09 153.801 12.863 154.113 12.574 154.367 cv
12.277 154.621 11.93 154.816 11.527 154.945 cv
11.121 155.078 10.672 155.141 10.18 155.141 cv
9.902 155.141 9.641 155.121 9.398 155.082 cv
9.148 155.043 8.93 154.996 8.742 154.941 cv
8.547 154.887 8.391 154.832 8.266 154.773 cv
8.141 154.723 8.063 154.68 8.031 154.645 cv
7.996 154.613 7.973 154.582 7.961 154.555 cv
7.945 154.527 7.93 154.496 7.922 154.453 cv
7.906 154.418 7.898 154.367 7.898 154.305 cv
7.891 154.246 7.891 154.176 7.891 154.094 cv
7.891 154.02 7.895 153.949 7.902 153.887 cv
7.91 153.824 7.922 153.773 7.941 153.734 cv
7.957 153.695 7.977 153.668 8.004 153.648 cv
8.027 153.633 8.059 153.625 8.09 153.621 cv
8.137 153.625 8.207 153.652 8.301 153.707 cv
8.395 153.766 8.523 153.828 8.688 153.895 cv
8.852 153.961 9.051 154.023 9.293 154.082 cv
9.527 154.141 9.813 154.168 10.148 154.168 cv
10.449 154.168 10.73 154.133 10.988 154.059 cv
11.242 153.988 11.465 153.875 11.652 153.719 cv
11.836 153.566 11.98 153.371 12.086 153.133 cv
12.191 152.898 12.242 152.609 12.246 152.27 cv
12.242 151.988 12.199 151.738 12.109 151.52 cv
12.02 151.301 11.883 151.121 11.699 150.977 cv
11.512 150.836 11.277 150.73 10.996 150.656 cv
10.711 150.586 10.371 150.547 9.984 150.547 cv
9.699 150.547 9.461 150.562 9.262 150.59 cv
9.059 150.621 8.871 150.637 8.699 150.633 cv
8.57 150.637 8.477 150.605 8.426 150.543 cv
8.367 150.484 8.34 150.371 8.344 150.199 cv
8.344 146.586 li
8.34 146.437 8.375 146.328 8.449 146.25 cv
8.516 146.18 8.617 146.141 8.754 146.141 cv
12.684 146.141 li
12.719 146.141 12.754 146.152 12.789 146.172 cv
12.82 146.195 12.848 146.227 12.875 146.266 cv
12.895 146.309 12.91 146.359 12.926 146.422 cv
12.934 146.488 12.941 146.566 12.945 146.648 cv
12.941 146.816 12.918 146.941 12.879 147.031 cv
12.832 147.125 12.773 147.172 12.695 147.168 cv
9.523 147.168 li
9.523 149.656 li
9.676 149.637 9.832 149.625 9.996 149.617 cv
10.152 149.613 10.34 149.609 10.555 149.609 cv
11.039 149.609 11.465 149.672 11.832 149.793 cv
12.195 149.914 12.5 150.086 12.75 150.305 cv
12.992 150.531 13.18 150.797 13.305 151.109 cv
13.43 151.426 13.492 151.777 13.492 152.16 cv
cp
f
.102 117.102 mo
14.29 117.102 li
14.29 134.192 li
.102 134.192 li
cp
0 0 0 0 cmyk
ef
6.477 129.996 mo
6.473 130.086 6.465 130.156 6.453 130.215 cv
6.438 130.277 6.418 130.328 6.398 130.359 cv
6.375 130.398 6.352 130.422 6.32 130.437 cv
6.289 130.453 6.258 130.461 6.23 130.461 cv
1.594 130.461 li
1.559 130.461 1.531 130.453 1.504 130.437 cv
1.477 130.422 1.449 130.398 1.426 130.359 cv
1.398 130.328 1.379 130.277 1.367 130.215 cv
1.352 130.156 1.344 130.086 1.348 129.996 cv
1.344 129.918 1.352 129.844 1.367 129.781 cv
1.379 129.723 1.395 129.676 1.418 129.637 cv
1.434 129.602 1.461 129.57 1.492 129.547 cv
1.523 129.527 1.555 129.52 1.594 129.516 cv
3.445 129.516 li
3.445 122.77 li
1.73 123.789 li
1.641 123.84 1.57 123.867 1.523 123.875 cv
1.469 123.883 1.426 123.875 1.395 123.844 cv
1.359 123.816 1.34 123.766 1.328 123.695 cv
1.316 123.629 1.309 123.543 1.313 123.434 cv
1.309 123.359 1.313 123.293 1.324 123.234 cv
1.328 123.184 1.34 123.137 1.355 123.098 cv
1.367 123.062 1.387 123.031 1.41 123.004 cv
1.434 122.977 1.465 122.949 1.512 122.922 cv
3.555 121.609 li
3.57 121.598 3.59 121.586 3.621 121.578 cv
3.645 121.57 3.68 121.562 3.727 121.551 cv
3.766 121.543 3.816 121.535 3.871 121.531 cv
3.926 121.531 3.992 121.531 4.078 121.527 cv
4.184 121.531 4.277 121.535 4.352 121.543 cv
4.422 121.551 4.477 121.566 4.523 121.582 cv
4.563 121.602 4.59 121.621 4.605 121.645 cv
4.613 121.672 4.621 121.695 4.625 121.719 cv
4.625 129.516 li
6.23 129.516 li
6.266 129.52 6.301 129.527 6.332 129.547 cv
6.363 129.57 6.387 129.602 6.41 129.637 cv
6.426 129.676 6.441 129.723 6.457 129.781 cv
6.465 129.844 6.473 129.918 6.477 129.996 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.762 127.59 mo
13.762 127.98 13.699 128.359 13.582 128.719 cv
13.457 129.086 13.273 129.402 13.031 129.676 cv
12.781 129.953 12.469 130.176 12.094 130.34 cv
11.711 130.508 11.266 130.59 10.75 130.59 cv
10.379 130.59 10.051 130.547 9.77 130.453 cv
9.484 130.367 9.238 130.234 9.027 130.062 cv
8.816 129.895 8.641 129.687 8.504 129.441 cv
8.363 129.195 8.25 128.914 8.168 128.598 cv
8.082 128.285 8.023 127.941 7.988 127.562 cv
7.949 127.191 7.93 126.789 7.934 126.355 cv
7.93 125.977 7.949 125.594 7.992 125.203 cv
8.031 124.82 8.105 124.445 8.211 124.078 cv
8.316 123.719 8.461 123.379 8.641 123.062 cv
8.82 122.746 9.047 122.469 9.32 122.234 cv
9.594 122 9.918 121.812 10.297 121.672 cv
10.676 121.535 11.117 121.469 11.621 121.465 cv
11.789 121.469 11.961 121.477 12.133 121.496 cv
12.305 121.52 12.465 121.551 12.613 121.582 cv
12.762 121.621 12.883 121.656 12.984 121.695 cv
13.082 121.734 13.148 121.77 13.184 121.793 cv
13.211 121.82 13.234 121.848 13.254 121.875 cv
13.27 121.906 13.285 121.937 13.293 121.973 cv
13.301 122.008 13.305 122.047 13.313 122.09 cv
13.313 122.133 13.316 122.187 13.32 122.25 cv
13.316 122.336 13.316 122.406 13.316 122.461 cv
13.313 122.523 13.301 122.57 13.289 122.605 cv
13.27 122.645 13.25 122.672 13.227 122.687 cv
13.199 122.707 13.168 122.715 13.129 122.715 cv
13.078 122.715 13.008 122.699 12.922 122.668 cv
12.832 122.637 12.727 122.602 12.605 122.559 cv
12.48 122.523 12.332 122.488 12.156 122.453 cv
11.98 122.426 11.777 122.41 11.547 122.406 cv
11.117 122.41 10.75 122.496 10.445 122.668 cv
10.141 122.84 9.891 123.074 9.695 123.367 cv
9.5 123.66 9.355 124 9.266 124.383 cv
9.168 124.773 9.113 125.176 9.105 125.594 cv
9.223 125.527 9.359 125.461 9.508 125.391 cv
9.656 125.324 9.816 125.262 9.992 125.203 cv
10.168 125.152 10.355 125.105 10.551 125.07 cv
10.746 125.039 10.957 125.023 11.184 125.02 cv
11.66 125.023 12.063 125.09 12.395 125.215 cv
12.723 125.348 12.988 125.527 13.195 125.758 cv
13.395 125.988 13.539 126.258 13.629 126.57 cv
13.715 126.883 13.762 127.223 13.762 127.59 cv
cp
12.566 127.699 mo
12.566 127.437 12.539 127.195 12.488 126.977 cv
12.434 126.762 12.344 126.578 12.223 126.422 cv
12.098 126.273 11.934 126.156 11.73 126.074 cv
11.52 125.992 11.266 125.949 10.969 125.949 cv
10.797 125.949 10.629 125.965 10.461 125.996 cv
10.289 126.027 10.125 126.07 9.969 126.117 cv
9.809 126.172 9.66 126.234 9.52 126.305 cv
9.375 126.379 9.242 126.453 9.125 126.531 cv
9.121 127.125 9.16 127.621 9.238 128.016 cv
9.313 128.414 9.422 128.73 9.566 128.969 cv
9.711 129.211 9.891 129.383 10.105 129.484 cv
10.32 129.59 10.57 129.641 10.859 129.637 cv
11.148 129.641 11.402 129.586 11.617 129.473 cv
11.832 129.367 12.008 129.219 12.152 129.031 cv
12.293 128.848 12.398 128.641 12.465 128.41 cv
12.531 128.18 12.566 127.945 12.566 127.699 cv
cp
f
.102 92.5506 mo
14.29 92.5506 li
14.29 109.641 li
.102 109.641 li
cp
0 0 0 0 cmyk
ef
6.477 105.434 mo
6.473 105.523 6.465 105.594 6.453 105.652 cv
6.438 105.715 6.418 105.766 6.398 105.797 cv
6.375 105.836 6.352 105.859 6.32 105.875 cv
6.289 105.891 6.258 105.898 6.23 105.898 cv
1.594 105.898 li
1.559 105.898 1.531 105.891 1.504 105.875 cv
1.477 105.859 1.449 105.836 1.426 105.797 cv
1.398 105.766 1.379 105.715 1.367 105.652 cv
1.352 105.594 1.344 105.523 1.348 105.434 cv
1.344 105.355 1.352 105.281 1.367 105.219 cv
1.379 105.16 1.395 105.113 1.418 105.074 cv
1.434 105.039 1.461 105.008 1.492 104.984 cv
1.523 104.965 1.555 104.957 1.594 104.953 cv
3.445 104.953 li
3.445 98.207 li
1.73 99.227 li
1.641 99.277 1.57 99.305 1.523 99.312 cv
1.469 99.32 1.426 99.312 1.395 99.281 cv
1.359 99.254 1.34 99.203 1.328 99.133 cv
1.316 99.066 1.309 98.98 1.313 98.871 cv
1.309 98.797 1.313 98.73 1.324 98.672 cv
1.328 98.621 1.34 98.574 1.355 98.535 cv
1.367 98.5 1.387 98.469 1.41 98.441 cv
1.434 98.414 1.465 98.387 1.512 98.359 cv
3.555 97.047 li
3.57 97.035 3.59 97.023 3.621 97.016 cv
3.645 97.008 3.68 97 3.727 96.988 cv
3.766 96.98 3.816 96.973 3.871 96.969 cv
3.926 96.969 3.992 96.969 4.078 96.965 cv
4.184 96.969 4.277 96.973 4.352 96.98 cv
4.422 96.988 4.477 97.004 4.523 97.02 cv
4.563 97.039 4.59 97.059 4.605 97.082 cv
4.613 97.109 4.621 97.133 4.625 97.156 cv
4.625 104.953 li
6.23 104.953 li
6.266 104.957 6.301 104.965 6.332 104.984 cv
6.363 105.008 6.387 105.039 6.41 105.074 cv
6.426 105.113 6.441 105.16 6.457 105.219 cv
6.465 105.281 6.473 105.355 6.477 105.434 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.664 97.535 mo
13.66 97.621 13.656 97.695 13.652 97.758 cv
13.645 97.828 13.637 97.891 13.625 97.949 cv
13.613 98.016 13.598 98.074 13.578 98.129 cv
13.555 98.187 13.531 98.25 13.508 98.309 cv
10.313 105.672 li
10.285 105.73 10.258 105.773 10.227 105.805 cv
10.191 105.84 10.148 105.867 10.094 105.887 cv
10.039 105.906 9.969 105.918 9.891 105.93 cv
9.805 105.934 9.707 105.937 9.59 105.941 cv
9.434 105.937 9.313 105.93 9.227 105.918 cv
9.141 105.902 9.078 105.887 9.039 105.855 cv
9 105.828 8.98 105.789 8.988 105.746 cv
8.988 105.703 9.004 105.652 9.035 105.59 cv
12.395 98.062 li
8.137 98.062 li
8.051 98.066 7.984 98.02 7.941 97.926 cv
7.898 97.836 7.879 97.707 7.879 97.543 cv
7.879 97.457 7.883 97.383 7.895 97.316 cv
7.906 97.254 7.922 97.199 7.945 97.156 cv
7.965 97.113 7.992 97.082 8.027 97.059 cv
8.059 97.039 8.098 97.027 8.137 97.027 cv
13.309 97.027 li
13.367 97.027 13.422 97.035 13.473 97.051 cv
13.52 97.066 13.555 97.094 13.582 97.133 cv
13.605 97.172 13.625 97.227 13.641 97.289 cv
13.652 97.355 13.66 97.437 13.664 97.535 cv
cp
f
.102 67.9996 mo
14.29 67.9996 li
14.29 85.0896 li
.102 85.0896 li
cp
0 0 0 0 cmyk
ef
6.477 80.867 mo
6.473 80.957 6.465 81.027 6.453 81.086 cv
6.438 81.148 6.418 81.199 6.398 81.23 cv
6.375 81.27 6.352 81.293 6.32 81.309 cv
6.289 81.324 6.258 81.332 6.23 81.332 cv
1.594 81.332 li
1.559 81.332 1.531 81.324 1.504 81.309 cv
1.477 81.293 1.449 81.27 1.426 81.23 cv
1.398 81.199 1.379 81.148 1.367 81.086 cv
1.352 81.027 1.344 80.957 1.348 80.867 cv
1.344 80.789 1.352 80.715 1.367 80.652 cv
1.379 80.594 1.395 80.547 1.418 80.508 cv
1.434 80.473 1.461 80.441 1.492 80.418 cv
1.523 80.398 1.555 80.391 1.594 80.387 cv
3.445 80.387 li
3.445 73.641 li
1.73 74.66 li
1.641 74.711 1.57 74.738 1.523 74.746 cv
1.469 74.754 1.426 74.746 1.395 74.715 cv
1.359 74.687 1.34 74.637 1.328 74.566 cv
1.316 74.5 1.309 74.414 1.313 74.305 cv
1.309 74.23 1.313 74.164 1.324 74.105 cv
1.328 74.055 1.34 74.008 1.355 73.969 cv
1.367 73.934 1.387 73.902 1.41 73.875 cv
1.434 73.848 1.465 73.82 1.512 73.793 cv
3.555 72.48 li
3.57 72.469 3.59 72.457 3.621 72.449 cv
3.645 72.441 3.68 72.434 3.727 72.422 cv
3.766 72.414 3.816 72.406 3.871 72.402 cv
3.926 72.402 3.992 72.402 4.078 72.398 cv
4.184 72.402 4.277 72.406 4.352 72.414 cv
4.422 72.422 4.477 72.437 4.523 72.453 cv
4.563 72.473 4.59 72.492 4.605 72.516 cv
4.613 72.543 4.621 72.566 4.625 72.59 cv
4.625 80.387 li
6.23 80.387 li
6.266 80.391 6.301 80.398 6.332 80.418 cv
6.363 80.441 6.387 80.473 6.41 80.508 cv
6.426 80.547 6.441 80.594 6.457 80.652 cv
6.465 80.715 6.473 80.789 6.477 80.867 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.738 79.055 mo
13.738 79.441 13.668 79.785 13.531 80.082 cv
13.395 80.387 13.199 80.637 12.941 80.84 cv
12.684 81.047 12.363 81.203 11.984 81.305 cv
11.602 81.41 11.168 81.461 10.684 81.461 cv
10.223 81.461 9.813 81.414 9.453 81.32 cv
9.09 81.227 8.785 81.086 8.535 80.895 cv
8.285 80.711 8.094 80.48 7.961 80.203 cv
7.828 79.93 7.762 79.617 7.762 79.262 cv
7.762 78.988 7.805 78.73 7.898 78.496 cv
7.984 78.262 8.117 78.047 8.293 77.852 cv
8.461 77.656 8.672 77.473 8.926 77.297 cv
9.176 77.129 9.461 76.965 9.777 76.809 cv
9.504 76.668 9.262 76.52 9.051 76.359 cv
8.84 76.203 8.66 76.031 8.516 75.844 cv
8.367 75.66 8.258 75.465 8.184 75.254 cv
8.105 75.047 8.066 74.816 8.07 74.566 cv
8.066 74.258 8.121 73.965 8.238 73.691 cv
8.348 73.422 8.52 73.187 8.746 72.984 cv
8.973 72.785 9.258 72.625 9.609 72.508 cv
9.953 72.391 10.363 72.332 10.832 72.332 cv
11.277 72.332 11.664 72.387 11.992 72.492 cv
12.32 72.602 12.59 72.746 12.801 72.93 cv
13.012 73.117 13.168 73.336 13.273 73.586 cv
13.371 73.836 13.422 74.105 13.426 74.395 cv
13.422 74.629 13.383 74.855 13.313 75.066 cv
13.234 75.285 13.125 75.488 12.977 75.676 cv
12.828 75.871 12.648 76.051 12.438 76.215 cv
12.227 76.387 11.984 76.543 11.711 76.684 cv
12.031 76.848 12.316 77.012 12.574 77.18 cv
12.824 77.348 13.039 77.527 13.215 77.723 cv
13.383 77.918 13.512 78.125 13.605 78.34 cv
13.691 78.559 13.738 78.797 13.738 79.055 cv
cp
12.258 74.504 mo
12.254 74.316 12.223 74.141 12.156 73.984 cv
12.09 73.828 11.992 73.695 11.867 73.586 cv
11.738 73.477 11.578 73.395 11.391 73.336 cv
11.195 73.281 10.98 73.254 10.742 73.25 cv
10.246 73.254 9.871 73.363 9.621 73.586 cv
9.363 73.812 9.238 74.121 9.242 74.504 cv
9.238 74.684 9.27 74.848 9.332 75 cv
9.395 75.156 9.488 75.301 9.621 75.437 cv
9.746 75.574 9.91 75.707 10.113 75.836 cv
10.309 75.969 10.547 76.105 10.824 76.246 cv
11.285 76.012 11.641 75.75 11.887 75.457 cv
12.133 75.172 12.254 74.855 12.258 74.504 cv
cp
12.547 79.18 mo
12.543 78.973 12.504 78.781 12.43 78.609 cv
12.348 78.441 12.23 78.281 12.074 78.129 cv
11.918 77.98 11.719 77.836 11.484 77.695 cv
11.246 77.559 10.977 77.414 10.668 77.262 cv
10.379 77.406 10.125 77.547 9.91 77.687 cv
9.691 77.828 9.512 77.977 9.375 78.125 cv
9.234 78.281 9.129 78.437 9.059 78.602 cv
8.984 78.77 8.949 78.953 8.953 79.152 cv
8.949 79.598 9.102 79.941 9.41 80.18 cv
9.711 80.426 10.164 80.547 10.77 80.543 cv
11.352 80.547 11.797 80.426 12.098 80.176 cv
12.395 79.934 12.543 79.602 12.547 79.18 cv
cp
f
.102 43.4416 mo
14.29 43.4416 li
14.29 60.5316 li
.102 60.5316 li
cp
0 0 0 0 cmyk
ef
6.477 56.316 mo
6.473 56.406 6.465 56.477 6.453 56.535 cv
6.438 56.598 6.418 56.648 6.398 56.68 cv
6.375 56.719 6.352 56.742 6.32 56.758 cv
6.289 56.773 6.258 56.781 6.23 56.781 cv
1.594 56.781 li
1.559 56.781 1.531 56.773 1.504 56.758 cv
1.477 56.742 1.449 56.719 1.426 56.68 cv
1.398 56.648 1.379 56.598 1.367 56.535 cv
1.352 56.477 1.344 56.406 1.348 56.316 cv
1.344 56.238 1.352 56.164 1.367 56.102 cv
1.379 56.043 1.395 55.996 1.418 55.957 cv
1.434 55.922 1.461 55.891 1.492 55.867 cv
1.523 55.848 1.555 55.84 1.594 55.836 cv
3.445 55.836 li
3.445 49.09 li
1.73 50.109 li
1.641 50.16 1.57 50.187 1.523 50.195 cv
1.469 50.203 1.426 50.195 1.395 50.164 cv
1.359 50.137 1.34 50.086 1.328 50.016 cv
1.316 49.949 1.309 49.863 1.313 49.754 cv
1.309 49.68 1.313 49.613 1.324 49.555 cv
1.328 49.504 1.34 49.457 1.355 49.418 cv
1.367 49.383 1.387 49.352 1.41 49.324 cv
1.434 49.297 1.465 49.27 1.512 49.242 cv
3.555 47.93 li
3.57 47.918 3.59 47.906 3.621 47.898 cv
3.645 47.891 3.68 47.883 3.727 47.871 cv
3.766 47.863 3.816 47.855 3.871 47.852 cv
3.926 47.852 3.992 47.852 4.078 47.848 cv
4.184 47.852 4.277 47.855 4.352 47.863 cv
4.422 47.871 4.477 47.887 4.523 47.902 cv
4.563 47.922 4.59 47.941 4.605 47.965 cv
4.613 47.992 4.621 48.016 4.625 48.039 cv
4.625 55.836 li
6.23 55.836 li
6.266 55.84 6.301 55.848 6.332 55.867 cv
6.363 55.891 6.387 55.922 6.41 55.957 cv
6.426 55.996 6.441 56.043 6.457 56.102 cv
6.465 56.164 6.473 56.238 6.477 56.316 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.602 51.996 mo
13.598 52.383 13.574 52.77 13.531 53.16 cv
13.484 53.555 13.406 53.934 13.301 54.297 cv
13.188 54.66 13.043 55 12.859 55.316 cv
12.672 55.637 12.438 55.918 12.16 56.152 cv
11.875 56.395 11.539 56.578 11.156 56.711 cv
10.766 56.844 10.32 56.91 9.813 56.91 cv
9.613 56.91 9.422 56.895 9.238 56.871 cv
9.051 56.844 8.883 56.816 8.738 56.781 cv
8.586 56.746 8.461 56.707 8.363 56.664 cv
8.262 56.625 8.188 56.586 8.145 56.543 cv
8.098 56.504 8.066 56.449 8.047 56.375 cv
8.023 56.305 8.012 56.207 8.016 56.09 cv
8.012 55.988 8.016 55.91 8.023 55.852 cv
8.027 55.793 8.039 55.746 8.055 55.715 cv
8.07 55.684 8.09 55.664 8.113 55.648 cv
8.137 55.641 8.168 55.633 8.207 55.629 cv
8.254 55.633 8.324 55.648 8.418 55.68 cv
8.508 55.715 8.621 55.754 8.766 55.793 cv
8.902 55.836 9.066 55.875 9.254 55.906 cv
9.438 55.945 9.648 55.961 9.887 55.957 cv
10.328 55.961 10.707 55.875 11.027 55.703 cv
11.34 55.531 11.602 55.305 11.805 55.016 cv
12.008 54.73 12.156 54.395 12.258 54.012 cv
12.355 53.633 12.41 53.234 12.422 52.812 cv
12.176 52.957 11.887 53.082 11.551 53.187 cv
11.211 53.301 10.824 53.355 10.387 53.352 cv
9.895 53.355 9.48 53.289 9.145 53.152 cv
8.809 53.02 8.535 52.836 8.332 52.602 cv
8.125 52.371 7.98 52.094 7.895 51.77 cv
7.805 51.453 7.762 51.102 7.762 50.723 cv
7.762 50.332 7.816 49.961 7.934 49.602 cv
8.043 49.25 8.223 48.937 8.469 48.668 cv
8.707 48.398 9.016 48.184 9.395 48.023 cv
9.766 47.863 10.215 47.781 10.738 47.781 cv
11.105 47.781 11.43 47.828 11.719 47.922 cv
12 48.016 12.25 48.152 12.465 48.328 cv
12.672 48.504 12.852 48.715 13 48.965 cv
13.145 49.215 13.262 49.496 13.352 49.809 cv
13.438 50.125 13.5 50.469 13.543 50.836 cv
13.578 51.207 13.598 51.594 13.602 51.996 cv
cp
12.402 51.867 mo
12.402 51.285 12.363 50.793 12.285 50.391 cv
12.207 49.992 12.09 49.668 11.941 49.418 cv
11.789 49.172 11.605 48.992 11.387 48.883 cv
11.164 48.773 10.91 48.719 10.629 48.719 cv
10.324 48.719 10.07 48.773 9.863 48.883 cv
9.652 48.992 9.48 49.137 9.348 49.312 cv
9.211 49.496 9.109 49.699 9.047 49.926 cv
8.98 50.156 8.949 50.395 8.953 50.633 cv
8.949 50.906 8.98 51.152 9.039 51.371 cv
9.094 51.598 9.184 51.785 9.316 51.941 cv
9.441 52.098 9.609 52.219 9.816 52.305 cv
10.02 52.391 10.273 52.434 10.578 52.43 cv
10.918 52.434 11.25 52.383 11.574 52.277 cv
11.891 52.176 12.168 52.039 12.402 51.867 cv
cp
f
.102 18.8906 mo
14.29 18.8906 li
14.29 35.9806 li
.102 35.9806 li
cp
0 0 0 0 cmyk
ef
6.457 31.711 mo
6.453 31.797 6.449 31.871 6.438 31.934 cv
6.426 32 6.41 32.055 6.391 32.094 cv
6.367 32.141 6.34 32.172 6.309 32.187 cv
6.273 32.211 6.234 32.219 6.195 32.219 cv
1.293 32.219 li
1.23 32.219 1.172 32.211 1.125 32.195 cv
1.074 32.18 1.035 32.156 1 32.117 cv
.965 32.086 .938 32.031 .926 31.961 cv
.906 31.891 .898 31.805 .902 31.703 cv
.898 31.613 .902 31.535 .91 31.465 cv
.914 31.398 .93 31.34 .957 31.285 cv
.98 31.234 1.012 31.18 1.047 31.125 cv
1.082 31.074 1.125 31.02 1.184 30.957 cv
2.957 29.133 li
3.367 28.715 3.695 28.34 3.945 28.004 cv
4.191 27.676 4.383 27.371 4.516 27.094 cv
4.648 26.82 4.734 26.57 4.781 26.344 cv
4.82 26.121 4.844 25.91 4.844 25.715 cv
4.844 25.52 4.809 25.336 4.742 25.156 cv
4.676 24.984 4.582 24.828 4.457 24.691 cv
4.332 24.562 4.176 24.457 3.988 24.375 cv
3.801 24.301 3.582 24.262 3.336 24.258 cv
3.047 24.262 2.789 24.301 2.563 24.375 cv
2.332 24.457 2.133 24.543 1.961 24.629 cv
1.789 24.723 1.645 24.805 1.527 24.883 cv
1.41 24.961 1.324 25 1.273 25 cv
1.238 25 1.207 24.992 1.184 24.973 cv
1.152 24.957 1.133 24.926 1.117 24.883 cv
1.102 24.844 1.086 24.789 1.078 24.719 cv
1.066 24.652 1.063 24.57 1.066 24.473 cv
1.063 24.406 1.066 24.348 1.074 24.297 cv
1.078 24.246 1.086 24.203 1.098 24.164 cv
1.105 24.129 1.121 24.094 1.141 24.062 cv
1.16 24.031 1.195 23.992 1.254 23.941 cv
1.305 23.895 1.398 23.828 1.535 23.746 cv
1.668 23.664 1.84 23.586 2.043 23.504 cv
2.246 23.426 2.469 23.355 2.715 23.301 cv
2.957 23.246 3.215 23.219 3.488 23.219 cv
3.914 23.219 4.289 23.281 4.613 23.402 cv
4.934 23.523 5.199 23.687 5.414 23.898 cv
5.625 24.109 5.785 24.355 5.891 24.629 cv
5.996 24.91 6.051 25.207 6.051 25.52 cv
6.051 25.809 6.023 26.09 5.973 26.367 cv
5.922 26.652 5.816 26.957 5.656 27.281 cv
5.492 27.609 5.258 27.973 4.953 28.371 cv
4.645 28.773 4.238 29.234 3.734 29.75 cv
2.328 31.219 li
6.188 31.219 li
6.219 31.223 6.254 31.234 6.293 31.25 cv
6.324 31.273 6.355 31.305 6.383 31.344 cv
6.406 31.387 6.426 31.437 6.438 31.496 cv
6.449 31.562 6.453 31.633 6.457 31.711 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.828 27.762 mo
13.824 28.445 13.773 29.066 13.668 29.629 cv
13.559 30.191 13.379 30.676 13.133 31.078 cv
12.879 31.484 12.551 31.797 12.152 32.016 cv
11.746 32.238 11.254 32.348 10.668 32.348 cv
10.109 32.348 9.637 32.25 9.258 32.051 cv
8.875 31.855 8.57 31.562 8.336 31.176 cv
8.102 30.789 7.934 30.316 7.84 29.75 cv
7.738 29.187 7.691 28.539 7.691 27.805 cv
7.691 27.133 7.746 26.512 7.855 25.945 cv
7.965 25.383 8.141 24.898 8.391 24.492 cv
8.633 24.09 8.957 23.777 9.363 23.551 cv
9.762 23.332 10.258 23.219 10.848 23.219 cv
11.406 23.219 11.879 23.32 12.262 23.516 cv
12.645 23.719 12.949 24.012 13.184 24.395 cv
13.414 24.785 13.582 25.258 13.68 25.82 cv
13.777 26.383 13.824 27.031 13.828 27.762 cv
cp
12.621 27.844 mo
12.617 27.402 12.602 27.004 12.574 26.652 cv
12.539 26.301 12.492 25.992 12.434 25.723 cv
12.367 25.453 12.289 25.223 12.191 25.027 cv
12.094 24.836 11.977 24.676 11.84 24.547 cv
11.699 24.422 11.539 24.328 11.367 24.27 cv
11.188 24.215 10.992 24.187 10.777 24.184 cv
10.387 24.187 10.07 24.277 9.832 24.461 cv
9.586 24.645 9.395 24.898 9.258 25.215 cv
9.117 25.535 9.023 25.906 8.973 26.336 cv
8.922 26.766 8.898 27.23 8.898 27.723 cv
8.898 28.387 8.93 28.949 9 29.41 cv
9.066 29.879 9.176 30.258 9.328 30.547 cv
9.473 30.844 9.664 31.055 9.895 31.184 cv
10.125 31.32 10.406 31.387 10.738 31.383 cv
10.992 31.387 11.215 31.348 11.41 31.262 cv
11.602 31.184 11.77 31.062 11.91 30.906 cv
12.051 30.754 12.164 30.57 12.258 30.355 cv
12.344 30.141 12.418 29.902 12.477 29.641 cv
12.527 29.383 12.566 29.102 12.59 28.797 cv
12.609 28.492 12.617 28.176 12.621 27.844 cv
cp
f
30.094 516.559 mo
30.09 516.648 30.082 516.719 30.07 516.777 cv
30.055 516.84 30.035 516.891 30.016 516.922 cv
29.992 516.961 29.969 516.984 29.938 517 cv
29.906 517.016 29.875 517.023 29.848 517.023 cv
25.211 517.023 li
25.176 517.023 25.148 517.016 25.121 517 cv
25.094 516.984 25.066 516.961 25.043 516.922 cv
25.016 516.891 24.996 516.84 24.984 516.777 cv
24.969 516.719 24.961 516.648 24.965 516.559 cv
24.961 516.48 24.969 516.406 24.984 516.344 cv
24.996 516.285 25.012 516.238 25.035 516.199 cv
25.051 516.164 25.078 516.133 25.109 516.109 cv
25.141 516.09 25.172 516.082 25.211 516.078 cv
27.063 516.078 li
27.063 509.332 li
25.348 510.352 li
25.258 510.402 25.188 510.43 25.141 510.437 cv
25.086 510.445 25.043 510.437 25.012 510.406 cv
24.977 510.379 24.957 510.328 24.945 510.258 cv
24.934 510.191 24.926 510.105 24.93 509.996 cv
24.926 509.922 24.93 509.855 24.941 509.797 cv
24.945 509.746 24.957 509.699 24.973 509.66 cv
24.984 509.625 25.004 509.594 25.027 509.566 cv
25.051 509.539 25.082 509.512 25.129 509.484 cv
27.172 508.172 li
27.188 508.16 27.207 508.148 27.238 508.141 cv
27.262 508.133 27.297 508.125 27.344 508.113 cv
27.383 508.105 27.434 508.098 27.488 508.094 cv
27.543 508.094 27.609 508.094 27.695 508.09 cv
27.801 508.094 27.895 508.098 27.969 508.105 cv
28.039 508.113 28.094 508.129 28.141 508.145 cv
28.18 508.164 28.207 508.184 28.223 508.207 cv
28.23 508.234 28.238 508.258 28.242 508.281 cv
28.242 516.078 li
29.848 516.078 li
29.883 516.082 29.918 516.09 29.949 516.109 cv
29.98 516.133 30.004 516.164 30.027 516.199 cv
30.043 516.238 30.059 516.285 30.074 516.344 cv
30.082 516.406 30.09 516.48 30.094 516.559 cv
cp
f
102.574 516.516 mo
102.57 516.602 102.566 516.676 102.555 516.738 cv
102.543 516.805 102.527 516.859 102.508 516.898 cv
102.484 516.945 102.457 516.977 102.426 516.992 cv
102.391 517.016 102.352 517.023 102.313 517.023 cv
97.41 517.023 li
97.348 517.023 97.289 517.016 97.242 517 cv
97.191 516.984 97.152 516.961 97.117 516.922 cv
97.082 516.891 97.055 516.836 97.043 516.766 cv
97.023 516.695 97.016 516.609 97.02 516.508 cv
97.016 516.418 97.02 516.34 97.027 516.27 cv
97.031 516.203 97.047 516.145 97.074 516.09 cv
97.098 516.039 97.129 515.984 97.164 515.93 cv
97.199 515.879 97.242 515.824 97.301 515.762 cv
99.074 513.937 li
99.484 513.52 99.813 513.145 100.063 512.809 cv
100.309 512.48 100.5 512.176 100.633 511.898 cv
100.766 511.625 100.852 511.375 100.898 511.148 cv
100.938 510.926 100.961 510.715 100.961 510.52 cv
100.961 510.324 100.926 510.141 100.859 509.961 cv
100.793 509.789 100.699 509.633 100.574 509.496 cv
100.449 509.367 100.293 509.262 100.105 509.18 cv
99.918 509.105 99.699 509.066 99.453 509.062 cv
99.164 509.066 98.906 509.105 98.68 509.18 cv
98.449 509.262 98.25 509.348 98.078 509.434 cv
97.906 509.527 97.762 509.609 97.645 509.687 cv
97.527 509.766 97.441 509.805 97.391 509.805 cv
97.355 509.805 97.324 509.797 97.301 509.777 cv
97.27 509.762 97.25 509.73 97.234 509.687 cv
97.219 509.648 97.203 509.594 97.195 509.523 cv
97.184 509.457 97.18 509.375 97.184 509.277 cv
97.18 509.211 97.184 509.152 97.191 509.102 cv
97.195 509.051 97.203 509.008 97.215 508.969 cv
97.223 508.934 97.238 508.898 97.258 508.867 cv
97.277 508.836 97.313 508.797 97.371 508.746 cv
97.422 508.699 97.516 508.633 97.652 508.551 cv
97.785 508.469 97.957 508.391 98.16 508.309 cv
98.363 508.23 98.586 508.16 98.832 508.105 cv
99.074 508.051 99.332 508.023 99.605 508.023 cv
100.031 508.023 100.406 508.086 100.73 508.207 cv
101.051 508.328 101.316 508.492 101.531 508.703 cv
101.742 508.914 101.902 509.16 102.008 509.434 cv
102.113 509.715 102.168 510.012 102.168 510.324 cv
102.168 510.613 102.141 510.895 102.09 511.172 cv
102.039 511.457 101.934 511.762 101.773 512.086 cv
101.609 512.414 101.375 512.777 101.07 513.176 cv
100.762 513.578 100.355 514.039 99.852 514.555 cv
98.445 516.023 li
102.305 516.023 li
102.336 516.027 102.371 516.039 102.41 516.055 cv
102.441 516.078 102.473 516.109 102.5 516.148 cv
102.523 516.191 102.543 516.242 102.555 516.301 cv
102.566 516.367 102.57 516.437 102.574 516.516 cv
cp
f
175.43 514.5 mo
175.426 514.652 175.402 514.773 175.359 514.859 cv
175.313 514.949 175.25 514.992 175.168 514.988 cv
174.168 514.988 li
174.168 516.852 li
174.168 516.891 174.156 516.922 174.141 516.945 cv
174.117 516.973 174.086 516.992 174.043 517.012 cv
173.992 517.027 173.93 517.039 173.859 517.051 cv
173.781 517.059 173.688 517.062 173.57 517.066 cv
173.453 517.062 173.355 517.059 173.285 517.051 cv
173.207 517.039 173.148 517.027 173.105 517.012 cv
173.059 516.992 173.027 516.973 173.012 516.945 cv
172.992 516.922 172.984 516.891 172.988 516.852 cv
172.988 514.988 li
169.359 514.988 li
169.301 514.992 169.258 514.984 169.223 514.969 cv
169.188 514.957 169.152 514.93 169.125 514.891 cv
169.094 514.855 169.074 514.805 169.063 514.734 cv
169.051 514.668 169.047 514.578 169.047 514.465 cv
169.047 514.383 169.047 514.305 169.055 514.234 cv
169.055 514.164 169.066 514.102 169.082 514.047 cv
169.094 513.992 169.109 513.937 169.137 513.883 cv
169.156 513.828 169.184 513.773 169.219 513.711 cv
172.379 508.324 li
172.398 508.289 172.434 508.258 172.48 508.23 cv
172.523 508.203 172.578 508.18 172.652 508.16 cv
172.719 508.145 172.805 508.133 172.91 508.121 cv
173.012 508.117 173.133 508.113 173.273 508.109 cv
173.422 508.113 173.559 508.117 173.676 508.129 cv
173.789 508.141 173.879 508.156 173.953 508.172 cv
174.02 508.191 174.074 508.215 174.113 508.246 cv
174.148 508.277 174.168 508.312 174.168 508.352 cv
174.168 514.016 li
175.168 514.016 li
175.242 514.02 175.305 514.059 175.355 514.137 cv
175.402 514.219 175.426 514.34 175.43 514.5 cv
cp
172.988 509.148 mo
172.977 509.148 li
170.125 514.016 li
172.988 514.016 li
cp
f
247.762 514.152 mo
247.762 514.543 247.699 514.922 247.582 515.281 cv
247.457 515.648 247.273 515.965 247.031 516.238 cv
246.781 516.516 246.469 516.738 246.094 516.902 cv
245.711 517.07 245.266 517.152 244.75 517.152 cv
244.379 517.152 244.051 517.109 243.77 517.016 cv
243.484 516.93 243.238 516.797 243.027 516.625 cv
242.816 516.457 242.641 516.25 242.504 516.004 cv
242.363 515.758 242.25 515.477 242.168 515.16 cv
242.082 514.848 242.023 514.504 241.988 514.125 cv
241.949 513.754 241.93 513.352 241.934 512.918 cv
241.93 512.539 241.949 512.156 241.992 511.766 cv
242.031 511.383 242.105 511.008 242.211 510.641 cv
242.316 510.281 242.461 509.941 242.641 509.625 cv
242.82 509.309 243.047 509.031 243.32 508.797 cv
243.594 508.562 243.918 508.375 244.297 508.234 cv
244.676 508.098 245.117 508.031 245.621 508.027 cv
245.789 508.031 245.961 508.039 246.133 508.059 cv
246.305 508.082 246.465 508.113 246.613 508.145 cv
246.762 508.184 246.883 508.219 246.984 508.258 cv
247.082 508.297 247.148 508.332 247.184 508.355 cv
247.211 508.383 247.234 508.41 247.254 508.437 cv
247.27 508.469 247.285 508.5 247.293 508.535 cv
247.301 508.57 247.305 508.609 247.313 508.652 cv
247.313 508.695 247.316 508.75 247.32 508.812 cv
247.316 508.898 247.316 508.969 247.316 509.023 cv
247.313 509.086 247.301 509.133 247.289 509.168 cv
247.27 509.207 247.25 509.234 247.227 509.25 cv
247.199 509.27 247.168 509.277 247.129 509.277 cv
247.078 509.277 247.008 509.262 246.922 509.23 cv
246.832 509.199 246.727 509.164 246.605 509.121 cv
246.48 509.086 246.332 509.051 246.156 509.016 cv
245.98 508.988 245.777 508.973 245.547 508.969 cv
245.117 508.973 244.75 509.059 244.445 509.23 cv
244.141 509.402 243.891 509.637 243.695 509.93 cv
243.5 510.223 243.355 510.562 243.266 510.945 cv
243.168 511.336 243.113 511.738 243.105 512.156 cv
243.223 512.09 243.359 512.023 243.508 511.953 cv
243.656 511.887 243.816 511.824 243.992 511.766 cv
244.168 511.715 244.355 511.668 244.551 511.633 cv
244.746 511.602 244.957 511.586 245.184 511.582 cv
245.66 511.586 246.063 511.652 246.395 511.777 cv
246.723 511.91 246.988 512.09 247.195 512.32 cv
247.395 512.551 247.539 512.82 247.629 513.133 cv
247.715 513.445 247.762 513.785 247.762 514.152 cv
cp
246.566 514.262 mo
246.566 514 246.539 513.758 246.488 513.539 cv
246.434 513.324 246.344 513.141 246.223 512.984 cv
246.098 512.836 245.934 512.719 245.73 512.637 cv
245.52 512.555 245.266 512.512 244.969 512.512 cv
244.797 512.512 244.629 512.527 244.461 512.559 cv
244.289 512.59 244.125 512.633 243.969 512.68 cv
243.809 512.734 243.66 512.797 243.52 512.867 cv
243.375 512.941 243.242 513.016 243.125 513.094 cv
243.121 513.687 243.16 514.184 243.238 514.578 cv
243.313 514.977 243.422 515.293 243.566 515.531 cv
243.711 515.773 243.891 515.945 244.105 516.047 cv
244.32 516.152 244.57 516.203 244.859 516.199 cv
245.148 516.203 245.402 516.148 245.617 516.035 cv
245.832 515.93 246.008 515.781 246.152 515.594 cv
246.293 515.41 246.398 515.203 246.465 514.973 cv
246.531 514.742 246.566 514.508 246.566 514.262 cv
cp
f
320.238 514.746 mo
320.238 515.133 320.168 515.477 320.031 515.773 cv
319.895 516.078 319.699 516.328 319.441 516.531 cv
319.184 516.738 318.863 516.895 318.484 516.996 cv
318.102 517.102 317.668 517.152 317.184 517.152 cv
316.723 517.152 316.313 517.105 315.953 517.012 cv
315.59 516.918 315.285 516.777 315.035 516.586 cv
314.785 516.402 314.594 516.172 314.461 515.895 cv
314.328 515.621 314.262 515.309 314.262 514.953 cv
314.262 514.68 314.305 514.422 314.398 514.187 cv
314.484 513.953 314.617 513.738 314.793 513.543 cv
314.961 513.348 315.172 513.164 315.426 512.988 cv
315.676 512.82 315.961 512.656 316.277 512.5 cv
316.004 512.359 315.762 512.211 315.551 512.051 cv
315.34 511.895 315.16 511.723 315.016 511.535 cv
314.867 511.352 314.758 511.156 314.684 510.945 cv
314.605 510.738 314.566 510.508 314.57 510.258 cv
314.566 509.949 314.621 509.656 314.738 509.383 cv
314.848 509.113 315.02 508.879 315.246 508.676 cv
315.473 508.477 315.758 508.316 316.109 508.199 cv
316.453 508.082 316.863 508.023 317.332 508.023 cv
317.777 508.023 318.164 508.078 318.492 508.184 cv
318.82 508.293 319.09 508.437 319.301 508.621 cv
319.512 508.809 319.668 509.027 319.773 509.277 cv
319.871 509.527 319.922 509.797 319.926 510.086 cv
319.922 510.32 319.883 510.547 319.813 510.758 cv
319.734 510.977 319.625 511.18 319.477 511.367 cv
319.328 511.562 319.148 511.742 318.938 511.906 cv
318.727 512.078 318.484 512.234 318.211 512.375 cv
318.531 512.539 318.816 512.703 319.074 512.871 cv
319.324 513.039 319.539 513.219 319.715 513.414 cv
319.883 513.609 320.012 513.816 320.105 514.031 cv
320.191 514.25 320.238 514.488 320.238 514.746 cv
cp
318.758 510.195 mo
318.754 510.008 318.723 509.832 318.656 509.676 cv
318.59 509.52 318.492 509.387 318.367 509.277 cv
318.238 509.168 318.078 509.086 317.891 509.027 cv
317.695 508.973 317.48 508.945 317.242 508.941 cv
316.746 508.945 316.371 509.055 316.121 509.277 cv
315.863 509.504 315.738 509.812 315.742 510.195 cv
315.738 510.375 315.77 510.539 315.832 510.691 cv
315.895 510.848 315.988 510.992 316.121 511.129 cv
316.246 511.266 316.41 511.398 316.613 511.527 cv
316.809 511.66 317.047 511.797 317.324 511.937 cv
317.785 511.703 318.141 511.441 318.387 511.148 cv
318.633 510.863 318.754 510.547 318.758 510.195 cv
cp
319.047 514.871 mo
319.043 514.664 319.004 514.473 318.93 514.301 cv
318.848 514.133 318.73 513.973 318.574 513.82 cv
318.418 513.672 318.219 513.527 317.984 513.387 cv
317.746 513.25 317.477 513.105 317.168 512.953 cv
316.879 513.098 316.625 513.238 316.41 513.379 cv
316.191 513.52 316.012 513.668 315.875 513.816 cv
315.734 513.973 315.629 514.129 315.559 514.293 cv
315.484 514.461 315.449 514.645 315.453 514.844 cv
315.449 515.289 315.602 515.633 315.91 515.871 cv
316.211 516.117 316.664 516.238 317.27 516.234 cv
317.852 516.238 318.297 516.117 318.598 515.867 cv
318.895 515.625 319.043 515.293 319.047 514.871 cv
cp
f
388.984 516.559 mo
388.98 516.648 388.973 516.719 388.961 516.777 cv
388.945 516.84 388.926 516.891 388.906 516.922 cv
388.883 516.961 388.859 516.984 388.828 517 cv
388.797 517.016 388.766 517.023 388.738 517.023 cv
384.102 517.023 li
384.066 517.023 384.039 517.016 384.012 517 cv
383.984 516.984 383.957 516.961 383.934 516.922 cv
383.906 516.891 383.887 516.84 383.875 516.777 cv
383.859 516.719 383.852 516.648 383.855 516.559 cv
383.852 516.48 383.859 516.406 383.875 516.344 cv
383.887 516.285 383.902 516.238 383.926 516.199 cv
383.941 516.164 383.969 516.133 384 516.109 cv
384.031 516.09 384.063 516.082 384.102 516.078 cv
385.953 516.078 li
385.953 509.332 li
384.238 510.352 li
384.148 510.402 384.078 510.43 384.031 510.437 cv
383.977 510.445 383.934 510.437 383.902 510.406 cv
383.867 510.379 383.848 510.328 383.836 510.258 cv
383.824 510.191 383.816 510.105 383.82 509.996 cv
383.816 509.922 383.82 509.855 383.832 509.797 cv
383.836 509.746 383.848 509.699 383.863 509.66 cv
383.875 509.625 383.895 509.594 383.918 509.566 cv
383.941 509.539 383.973 509.512 384.02 509.484 cv
386.063 508.172 li
386.078 508.16 386.098 508.148 386.129 508.141 cv
386.152 508.133 386.188 508.125 386.234 508.113 cv
386.273 508.105 386.324 508.098 386.379 508.094 cv
386.434 508.094 386.5 508.094 386.586 508.09 cv
386.691 508.094 386.785 508.098 386.859 508.105 cv
386.93 508.113 386.984 508.129 387.031 508.145 cv
387.07 508.164 387.098 508.184 387.113 508.207 cv
387.121 508.234 387.129 508.258 387.133 508.281 cv
387.133 516.078 li
388.738 516.078 li
388.773 516.082 388.809 516.09 388.84 516.109 cv
388.871 516.133 388.895 516.164 388.918 516.199 cv
388.934 516.238 388.949 516.285 388.965 516.344 cv
388.973 516.406 388.98 516.48 388.984 516.559 cv
cp
f
396.34 512.566 mo
396.336 513.25 396.285 513.871 396.18 514.434 cv
396.07 514.996 395.891 515.48 395.645 515.883 cv
395.391 516.289 395.063 516.602 394.664 516.82 cv
394.258 517.043 393.766 517.152 393.18 517.152 cv
392.621 517.152 392.148 517.055 391.77 516.855 cv
391.387 516.66 391.082 516.367 390.848 515.98 cv
390.613 515.594 390.445 515.121 390.352 514.555 cv
390.25 513.992 390.203 513.344 390.203 512.609 cv
390.203 511.937 390.258 511.316 390.367 510.75 cv
390.477 510.187 390.652 509.703 390.902 509.297 cv
391.145 508.895 391.469 508.582 391.875 508.355 cv
392.273 508.137 392.77 508.023 393.359 508.023 cv
393.918 508.023 394.391 508.125 394.773 508.32 cv
395.156 508.523 395.461 508.816 395.695 509.199 cv
395.926 509.59 396.094 510.062 396.191 510.625 cv
396.289 511.187 396.336 511.836 396.34 512.566 cv
cp
395.133 512.648 mo
395.129 512.207 395.113 511.809 395.086 511.457 cv
395.051 511.105 395.004 510.797 394.945 510.527 cv
394.879 510.258 394.801 510.027 394.703 509.832 cv
394.605 509.641 394.488 509.48 394.352 509.352 cv
394.211 509.227 394.051 509.133 393.879 509.074 cv
393.699 509.02 393.504 508.992 393.289 508.988 cv
392.898 508.992 392.582 509.082 392.344 509.266 cv
392.098 509.449 391.906 509.703 391.77 510.02 cv
391.629 510.34 391.535 510.711 391.484 511.141 cv
391.434 511.57 391.41 512.035 391.41 512.527 cv
391.41 513.191 391.441 513.754 391.512 514.215 cv
391.578 514.684 391.688 515.062 391.84 515.352 cv
391.984 515.648 392.176 515.859 392.406 515.988 cv
392.637 516.125 392.918 516.191 393.25 516.187 cv
393.504 516.191 393.727 516.152 393.922 516.066 cv
394.113 515.988 394.281 515.867 394.422 515.711 cv
394.563 515.559 394.676 515.375 394.77 515.16 cv
394.855 514.945 394.93 514.707 394.988 514.445 cv
395.039 514.187 395.078 513.906 395.102 513.602 cv
395.121 513.297 395.129 512.98 395.133 512.648 cv
cp
f
461.465 516.559 mo
461.461 516.648 461.453 516.719 461.441 516.777 cv
461.426 516.84 461.406 516.891 461.387 516.922 cv
461.363 516.961 461.34 516.984 461.309 517 cv
461.277 517.016 461.246 517.023 461.219 517.023 cv
456.582 517.023 li
456.547 517.023 456.52 517.016 456.492 517 cv
456.465 516.984 456.438 516.961 456.414 516.922 cv
456.387 516.891 456.367 516.84 456.355 516.777 cv
456.34 516.719 456.332 516.648 456.336 516.559 cv
456.332 516.48 456.34 516.406 456.355 516.344 cv
456.367 516.285 456.383 516.238 456.406 516.199 cv
456.422 516.164 456.449 516.133 456.48 516.109 cv
456.512 516.09 456.543 516.082 456.582 516.078 cv
458.434 516.078 li
458.434 509.332 li
456.719 510.352 li
456.629 510.402 456.559 510.43 456.512 510.437 cv
456.457 510.445 456.414 510.437 456.383 510.406 cv
456.348 510.379 456.328 510.328 456.316 510.258 cv
456.305 510.191 456.297 510.105 456.301 509.996 cv
456.297 509.922 456.301 509.855 456.313 509.797 cv
456.316 509.746 456.328 509.699 456.344 509.66 cv
456.355 509.625 456.375 509.594 456.398 509.566 cv
456.422 509.539 456.453 509.512 456.5 509.484 cv
458.543 508.172 li
458.559 508.16 458.578 508.148 458.609 508.141 cv
458.633 508.133 458.668 508.125 458.715 508.113 cv
458.754 508.105 458.805 508.098 458.859 508.094 cv
458.914 508.094 458.98 508.094 459.066 508.09 cv
459.172 508.094 459.266 508.098 459.34 508.105 cv
459.41 508.113 459.465 508.129 459.512 508.145 cv
459.551 508.164 459.578 508.184 459.594 508.207 cv
459.602 508.234 459.609 508.258 459.613 508.281 cv
459.613 516.078 li
461.219 516.078 li
461.254 516.082 461.289 516.09 461.32 516.109 cv
461.352 516.133 461.375 516.164 461.398 516.199 cv
461.414 516.238 461.43 516.285 461.445 516.344 cv
461.453 516.406 461.461 516.48 461.465 516.559 cv
cp
f
468.527 516.516 mo
468.523 516.602 468.52 516.676 468.508 516.738 cv
468.496 516.805 468.48 516.859 468.461 516.898 cv
468.438 516.945 468.41 516.977 468.379 516.992 cv
468.344 517.016 468.305 517.023 468.266 517.023 cv
463.363 517.023 li
463.301 517.023 463.242 517.016 463.195 517 cv
463.145 516.984 463.105 516.961 463.07 516.922 cv
463.035 516.891 463.008 516.836 462.996 516.766 cv
462.977 516.695 462.969 516.609 462.973 516.508 cv
462.969 516.418 462.973 516.34 462.98 516.27 cv
462.984 516.203 463 516.145 463.027 516.09 cv
463.051 516.039 463.082 515.984 463.117 515.93 cv
463.152 515.879 463.195 515.824 463.254 515.762 cv
465.027 513.937 li
465.438 513.52 465.766 513.145 466.016 512.809 cv
466.262 512.48 466.453 512.176 466.586 511.898 cv
466.719 511.625 466.805 511.375 466.852 511.148 cv
466.891 510.926 466.914 510.715 466.914 510.52 cv
466.914 510.324 466.879 510.141 466.813 509.961 cv
466.746 509.789 466.652 509.633 466.527 509.496 cv
466.402 509.367 466.246 509.262 466.059 509.18 cv
465.871 509.105 465.652 509.066 465.406 509.062 cv
465.117 509.066 464.859 509.105 464.633 509.18 cv
464.402 509.262 464.203 509.348 464.031 509.434 cv
463.859 509.527 463.715 509.609 463.598 509.687 cv
463.48 509.766 463.395 509.805 463.344 509.805 cv
463.309 509.805 463.277 509.797 463.254 509.777 cv
463.223 509.762 463.203 509.73 463.188 509.687 cv
463.172 509.648 463.156 509.594 463.148 509.523 cv
463.137 509.457 463.133 509.375 463.137 509.277 cv
463.133 509.211 463.137 509.152 463.145 509.102 cv
463.148 509.051 463.156 509.008 463.168 508.969 cv
463.176 508.934 463.191 508.898 463.211 508.867 cv
463.23 508.836 463.266 508.797 463.324 508.746 cv
463.375 508.699 463.469 508.633 463.605 508.551 cv
463.738 508.469 463.91 508.391 464.113 508.309 cv
464.316 508.23 464.539 508.16 464.785 508.105 cv
465.027 508.051 465.285 508.023 465.559 508.023 cv
465.984 508.023 466.359 508.086 466.684 508.207 cv
467.004 508.328 467.27 508.492 467.484 508.703 cv
467.695 508.914 467.855 509.16 467.961 509.434 cv
468.066 509.715 468.121 510.012 468.121 510.324 cv
468.121 510.613 468.094 510.895 468.043 511.172 cv
467.992 511.457 467.887 511.762 467.727 512.086 cv
467.563 512.414 467.328 512.777 467.023 513.176 cv
466.715 513.578 466.309 514.039 465.805 514.555 cv
464.398 516.023 li
468.258 516.023 li
468.289 516.027 468.324 516.039 468.363 516.055 cv
468.395 516.078 468.426 516.109 468.453 516.148 cv
468.477 516.191 468.496 516.242 468.508 516.301 cv
468.52 516.367 468.523 516.437 468.527 516.516 cv
cp
f
533.977 516.559 mo
533.973 516.648 533.965 516.719 533.953 516.777 cv
533.938 516.84 533.918 516.891 533.898 516.922 cv
533.875 516.961 533.852 516.984 533.82 517 cv
533.789 517.016 533.758 517.023 533.73 517.023 cv
529.094 517.023 li
529.059 517.023 529.031 517.016 529.004 517 cv
528.977 516.984 528.949 516.961 528.926 516.922 cv
528.898 516.891 528.879 516.84 528.867 516.777 cv
528.852 516.719 528.844 516.648 528.848 516.559 cv
528.844 516.48 528.852 516.406 528.867 516.344 cv
528.879 516.285 528.895 516.238 528.918 516.199 cv
528.934 516.164 528.961 516.133 528.992 516.109 cv
529.023 516.09 529.055 516.082 529.094 516.078 cv
530.945 516.078 li
530.945 509.332 li
529.23 510.352 li
529.141 510.402 529.07 510.43 529.023 510.437 cv
528.969 510.445 528.926 510.437 528.895 510.406 cv
528.859 510.379 528.84 510.328 528.828 510.258 cv
528.816 510.191 528.809 510.105 528.813 509.996 cv
528.809 509.922 528.813 509.855 528.824 509.797 cv
528.828 509.746 528.84 509.699 528.855 509.66 cv
528.867 509.625 528.887 509.594 528.91 509.566 cv
528.934 509.539 528.965 509.512 529.012 509.484 cv
531.055 508.172 li
531.07 508.16 531.09 508.148 531.121 508.141 cv
531.145 508.133 531.18 508.125 531.227 508.113 cv
531.266 508.105 531.316 508.098 531.371 508.094 cv
531.426 508.094 531.492 508.094 531.578 508.09 cv
531.684 508.094 531.777 508.098 531.852 508.105 cv
531.922 508.113 531.977 508.129 532.023 508.145 cv
532.063 508.164 532.09 508.184 532.105 508.207 cv
532.113 508.234 532.121 508.258 532.125 508.281 cv
532.125 516.078 li
533.73 516.078 li
533.766 516.082 533.801 516.09 533.832 516.109 cv
533.863 516.133 533.887 516.164 533.91 516.199 cv
533.926 516.238 533.941 516.285 533.957 516.344 cv
533.965 516.406 533.973 516.48 533.977 516.559 cv
cp
f
541.41 514.5 mo
541.406 514.652 541.383 514.773 541.34 514.859 cv
541.293 514.949 541.23 514.992 541.148 514.988 cv
540.148 514.988 li
540.148 516.852 li
540.148 516.891 540.137 516.922 540.121 516.945 cv
540.098 516.973 540.066 516.992 540.023 517.012 cv
539.973 517.027 539.91 517.039 539.84 517.051 cv
539.762 517.059 539.668 517.062 539.551 517.066 cv
539.434 517.062 539.336 517.059 539.266 517.051 cv
539.188 517.039 539.129 517.027 539.086 517.012 cv
539.039 516.992 539.008 516.973 538.992 516.945 cv
538.973 516.922 538.965 516.891 538.969 516.852 cv
538.969 514.988 li
535.34 514.988 li
535.281 514.992 535.238 514.984 535.203 514.969 cv
535.168 514.957 535.133 514.93 535.105 514.891 cv
535.074 514.855 535.055 514.805 535.043 514.734 cv
535.031 514.668 535.027 514.578 535.027 514.465 cv
535.027 514.383 535.027 514.305 535.035 514.234 cv
535.035 514.164 535.047 514.102 535.063 514.047 cv
535.074 513.992 535.09 513.937 535.117 513.883 cv
535.137 513.828 535.164 513.773 535.199 513.711 cv
538.359 508.324 li
538.379 508.289 538.414 508.258 538.461 508.23 cv
538.504 508.203 538.559 508.18 538.633 508.16 cv
538.699 508.145 538.785 508.133 538.891 508.121 cv
538.992 508.117 539.113 508.113 539.254 508.109 cv
539.402 508.113 539.539 508.117 539.656 508.129 cv
539.77 508.141 539.859 508.156 539.934 508.172 cv
540 508.191 540.055 508.215 540.094 508.246 cv
540.129 508.277 540.148 508.312 540.148 508.352 cv
540.148 514.016 li
541.148 514.016 li
541.223 514.02 541.285 514.059 541.336 514.137 cv
541.383 514.219 541.406 514.34 541.41 514.5 cv
cp
538.969 509.148 mo
538.957 509.148 li
536.105 514.016 li
538.969 514.016 li
cp
f
606.457 516.559 mo
606.453 516.648 606.445 516.719 606.434 516.777 cv
606.418 516.84 606.398 516.891 606.379 516.922 cv
606.355 516.961 606.332 516.984 606.301 517 cv
606.27 517.016 606.238 517.023 606.211 517.023 cv
601.574 517.023 li
601.539 517.023 601.512 517.016 601.484 517 cv
601.457 516.984 601.43 516.961 601.406 516.922 cv
601.379 516.891 601.359 516.84 601.348 516.777 cv
601.332 516.719 601.324 516.648 601.328 516.559 cv
601.324 516.48 601.332 516.406 601.348 516.344 cv
601.359 516.285 601.375 516.238 601.398 516.199 cv
601.414 516.164 601.441 516.133 601.473 516.109 cv
601.504 516.09 601.535 516.082 601.574 516.078 cv
603.426 516.078 li
603.426 509.332 li
601.711 510.352 li
601.621 510.402 601.551 510.43 601.504 510.437 cv
601.449 510.445 601.406 510.437 601.375 510.406 cv
601.34 510.379 601.32 510.328 601.309 510.258 cv
601.297 510.191 601.289 510.105 601.293 509.996 cv
601.289 509.922 601.293 509.855 601.305 509.797 cv
601.309 509.746 601.32 509.699 601.336 509.66 cv
601.348 509.625 601.367 509.594 601.391 509.566 cv
601.414 509.539 601.445 509.512 601.492 509.484 cv
603.535 508.172 li
603.551 508.16 603.57 508.148 603.602 508.141 cv
603.625 508.133 603.66 508.125 603.707 508.113 cv
603.746 508.105 603.797 508.098 603.852 508.094 cv
603.906 508.094 603.973 508.094 604.059 508.09 cv
604.164 508.094 604.258 508.098 604.332 508.105 cv
604.402 508.113 604.457 508.129 604.504 508.145 cv
604.543 508.164 604.57 508.184 604.586 508.207 cv
604.594 508.234 604.602 508.258 604.605 508.281 cv
604.605 516.078 li
606.211 516.078 li
606.246 516.082 606.281 516.09 606.313 516.109 cv
606.344 516.133 606.367 516.164 606.391 516.199 cv
606.406 516.238 606.422 516.285 606.438 516.344 cv
606.445 516.406 606.453 516.48 606.457 516.559 cv
cp
f
613.742 514.152 mo
613.742 514.543 613.68 514.922 613.563 515.281 cv
613.438 515.648 613.254 515.965 613.012 516.238 cv
612.762 516.516 612.449 516.738 612.074 516.902 cv
611.691 517.07 611.246 517.152 610.73 517.152 cv
610.359 517.152 610.031 517.109 609.75 517.016 cv
609.465 516.93 609.219 516.797 609.008 516.625 cv
608.797 516.457 608.621 516.25 608.484 516.004 cv
608.344 515.758 608.23 515.477 608.148 515.16 cv
608.063 514.848 608.004 514.504 607.969 514.125 cv
607.93 513.754 607.91 513.352 607.914 512.918 cv
607.91 512.539 607.93 512.156 607.973 511.766 cv
608.012 511.383 608.086 511.008 608.191 510.641 cv
608.297 510.281 608.441 509.941 608.621 509.625 cv
608.801 509.309 609.027 509.031 609.301 508.797 cv
609.574 508.562 609.898 508.375 610.277 508.234 cv
610.656 508.098 611.098 508.031 611.602 508.027 cv
611.77 508.031 611.941 508.039 612.113 508.059 cv
612.285 508.082 612.445 508.113 612.594 508.145 cv
612.742 508.184 612.863 508.219 612.965 508.258 cv
613.063 508.297 613.129 508.332 613.164 508.355 cv
613.191 508.383 613.215 508.41 613.234 508.437 cv
613.25 508.469 613.266 508.5 613.273 508.535 cv
613.281 508.57 613.285 508.609 613.293 508.652 cv
613.293 508.695 613.297 508.75 613.301 508.812 cv
613.297 508.898 613.297 508.969 613.297 509.023 cv
613.293 509.086 613.281 509.133 613.27 509.168 cv
613.25 509.207 613.23 509.234 613.207 509.25 cv
613.18 509.27 613.148 509.277 613.109 509.277 cv
613.059 509.277 612.988 509.262 612.902 509.23 cv
612.813 509.199 612.707 509.164 612.586 509.121 cv
612.461 509.086 612.313 509.051 612.137 509.016 cv
611.961 508.988 611.758 508.973 611.527 508.969 cv
611.098 508.973 610.73 509.059 610.426 509.23 cv
610.121 509.402 609.871 509.637 609.676 509.93 cv
609.48 510.223 609.336 510.562 609.246 510.945 cv
609.148 511.336 609.094 511.738 609.086 512.156 cv
609.203 512.09 609.34 512.023 609.488 511.953 cv
609.637 511.887 609.797 511.824 609.973 511.766 cv
610.148 511.715 610.336 511.668 610.531 511.633 cv
610.727 511.602 610.938 511.586 611.164 511.582 cv
611.641 511.586 612.043 511.652 612.375 511.777 cv
612.703 511.91 612.969 512.09 613.176 512.32 cv
613.375 512.551 613.52 512.82 613.609 513.133 cv
613.695 513.445 613.742 513.785 613.742 514.152 cv
cp
612.547 514.262 mo
612.547 514 612.52 513.758 612.469 513.539 cv
612.414 513.324 612.324 513.141 612.203 512.984 cv
612.078 512.836 611.914 512.719 611.711 512.637 cv
611.5 512.555 611.246 512.512 610.949 512.512 cv
610.777 512.512 610.609 512.527 610.441 512.559 cv
610.27 512.59 610.105 512.633 609.949 512.68 cv
609.789 512.734 609.641 512.797 609.5 512.867 cv
609.355 512.941 609.223 513.016 609.105 513.094 cv
609.102 513.687 609.141 514.184 609.219 514.578 cv
609.293 514.977 609.402 515.293 609.547 515.531 cv
609.691 515.773 609.871 515.945 610.086 516.047 cv
610.301 516.152 610.551 516.203 610.84 516.199 cv
611.129 516.203 611.383 516.148 611.598 516.035 cv
611.813 515.93 611.988 515.781 612.133 515.594 cv
612.273 515.41 612.379 515.203 612.445 514.973 cv
612.512 514.742 612.547 514.508 612.547 514.262 cv
cp
f
256.18 534.348 mo
256.176 534.453 256.16 534.543 256.125 534.613 cv
256.09 534.691 256.043 534.75 255.988 534.793 cv
255.93 534.844 255.867 534.879 255.801 534.895 cv
255.727 534.918 255.656 534.926 255.594 534.926 cv
255.148 534.926 li
255.008 534.926 254.887 534.914 254.781 534.883 cv
254.676 534.859 254.578 534.805 254.484 534.727 cv
254.391 534.652 254.297 534.551 254.203 534.418 cv
254.109 534.289 254.008 534.125 253.902 533.922 cv
250.828 528.184 li
250.664 527.891 250.5 527.582 250.34 527.254 cv
250.172 526.934 250.02 526.617 249.883 526.309 cv
249.867 526.309 li
249.875 526.684 249.883 527.066 249.891 527.453 cv
249.895 527.844 249.895 528.23 249.898 528.613 cv
249.898 534.699 li
249.895 534.738 249.883 534.773 249.863 534.805 cv
249.84 534.84 249.805 534.867 249.754 534.883 cv
249.699 534.902 249.629 534.914 249.547 534.93 cv
249.461 534.941 249.355 534.949 249.227 534.949 cv
249.09 534.949 248.98 534.941 248.898 534.93 cv
248.813 534.914 248.746 534.902 248.699 534.883 cv
248.648 534.867 248.613 534.84 248.59 534.805 cv
248.566 534.773 248.555 534.738 248.559 534.699 cv
248.559 525.395 li
248.555 525.187 248.613 525.039 248.734 524.949 cv
248.852 524.863 248.98 524.82 249.121 524.816 cv
249.781 524.816 li
249.934 524.82 250.066 524.832 250.172 524.855 cv
250.273 524.883 250.367 524.926 250.453 524.984 cv
250.535 525.047 250.613 525.129 250.695 525.234 cv
250.77 525.344 250.852 525.48 250.938 525.637 cv
253.305 530.062 li
253.449 530.336 253.59 530.602 253.727 530.855 cv
253.859 531.113 253.988 531.367 254.117 531.613 cv
254.238 531.867 254.363 532.113 254.488 532.352 cv
254.609 532.594 254.73 532.836 254.855 533.078 cv
254.863 533.078 li
254.852 532.672 254.844 532.242 254.844 531.797 cv
254.836 531.352 254.836 530.926 254.84 530.516 cv
254.84 525.043 li
254.836 525.008 254.848 524.973 254.871 524.941 cv
254.895 524.91 254.93 524.883 254.984 524.859 cv
255.031 524.836 255.102 524.82 255.188 524.809 cv
255.273 524.801 255.383 524.797 255.523 524.793 cv
255.641 524.797 255.746 524.801 255.836 524.809 cv
255.922 524.82 255.988 524.836 256.039 524.859 cv
256.086 524.883 256.121 524.91 256.145 524.941 cv
256.164 524.973 256.176 525.008 256.18 525.043 cv
cp
f
264.73 534.707 mo
264.727 534.754 264.719 534.789 264.703 534.812 cv
264.684 534.844 264.648 534.867 264.605 534.887 cv
264.559 534.906 264.5 534.918 264.426 534.934 cv
264.348 534.941 264.254 534.949 264.148 534.949 cv
264.023 534.949 263.926 534.941 263.855 534.934 cv
263.777 534.918 263.719 534.906 263.676 534.887 cv
263.629 534.867 263.598 534.844 263.586 534.812 cv
263.566 534.789 263.559 534.754 263.563 534.707 cv
263.563 533.781 li
263.16 534.227 262.766 534.547 262.379 534.746 cv
261.984 534.949 261.59 535.047 261.195 535.051 cv
260.723 535.047 260.328 534.973 260.012 534.816 cv
259.691 534.664 259.434 534.453 259.238 534.184 cv
259.035 533.918 258.895 533.605 258.813 533.246 cv
258.723 532.891 258.68 532.457 258.684 531.949 cv
258.684 527.695 li
258.68 527.656 258.688 527.621 258.711 527.59 cv
258.727 527.562 258.762 527.539 258.816 527.512 cv
258.863 527.492 258.934 527.477 259.02 527.465 cv
259.102 527.461 259.203 527.457 259.332 527.453 cv
259.453 527.457 259.559 527.461 259.645 527.465 cv
259.727 527.477 259.793 527.492 259.84 527.512 cv
259.887 527.539 259.922 527.562 259.945 527.59 cv
259.965 527.621 259.973 527.656 259.977 527.695 cv
259.977 531.777 li
259.973 532.191 260.004 532.52 260.066 532.766 cv
260.125 533.012 260.215 533.223 260.34 533.395 cv
260.457 533.574 260.613 533.707 260.805 533.801 cv
260.988 533.898 261.207 533.949 261.457 533.945 cv
261.777 533.949 262.098 533.832 262.422 533.602 cv
262.738 533.375 263.078 533.039 263.438 532.594 cv
263.438 527.695 li
263.438 527.656 263.445 527.621 263.465 527.59 cv
263.48 527.562 263.516 527.539 263.57 527.512 cv
263.621 527.492 263.688 527.477 263.77 527.465 cv
263.848 527.461 263.953 527.457 264.086 527.453 cv
264.207 527.457 264.313 527.461 264.398 527.465 cv
264.48 527.477 264.543 527.492 264.59 527.512 cv
264.633 527.539 264.668 527.562 264.695 527.59 cv
264.715 527.621 264.727 527.656 264.73 527.695 cv
cp
f
277.508 534.707 mo
277.504 534.754 277.496 534.789 277.477 534.812 cv
277.453 534.844 277.418 534.867 277.375 534.887 cv
277.324 534.906 277.258 534.918 277.18 534.934 cv
277.094 534.941 276.992 534.949 276.867 534.949 cv
276.734 534.949 276.625 534.941 276.547 534.934 cv
276.461 534.918 276.395 534.906 276.348 534.887 cv
276.293 534.867 276.258 534.844 276.242 534.812 cv
276.219 534.789 276.211 534.754 276.211 534.707 cv
276.211 530.445 li
276.211 530.152 276.184 529.883 276.133 529.637 cv
276.078 529.395 275.996 529.184 275.883 529.004 cv
275.77 528.828 275.625 528.691 275.449 528.598 cv
275.27 528.504 275.059 528.457 274.824 528.457 cv
274.527 528.457 274.23 528.574 273.934 528.801 cv
273.629 529.035 273.301 529.367 272.945 529.805 cv
272.945 534.707 li
272.941 534.754 272.93 534.789 272.914 534.812 cv
272.891 534.844 272.859 534.867 272.813 534.887 cv
272.762 534.906 272.695 534.918 272.613 534.934 cv
272.527 534.941 272.422 534.949 272.301 534.949 cv
272.18 534.949 272.078 534.941 271.992 534.934 cv
271.906 534.918 271.836 534.906 271.789 534.887 cv
271.734 534.867 271.703 534.844 271.688 534.812 cv
271.668 534.789 271.656 534.754 271.66 534.707 cv
271.66 530.445 li
271.656 530.152 271.629 529.883 271.574 529.637 cv
271.516 529.395 271.43 529.184 271.316 529.004 cv
271.203 528.828 271.059 528.691 270.887 528.598 cv
270.707 528.504 270.5 528.457 270.266 528.457 cv
269.965 528.457 269.668 528.574 269.367 528.801 cv
269.066 529.035 268.738 529.367 268.387 529.805 cv
268.387 534.707 li
268.383 534.754 268.371 534.789 268.355 534.812 cv
268.332 534.844 268.301 534.867 268.254 534.887 cv
268.207 534.906 268.141 534.918 268.063 534.934 cv
267.977 534.941 267.871 534.949 267.742 534.949 cv
267.613 534.949 267.508 534.941 267.43 534.934 cv
267.344 534.918 267.277 534.906 267.23 534.887 cv
267.176 534.867 267.145 534.844 267.129 534.812 cv
267.109 534.789 267.098 534.754 267.102 534.707 cv
267.102 527.695 li
267.098 527.656 267.105 527.621 267.125 527.59 cv
267.137 527.562 267.168 527.539 267.219 527.512 cv
267.262 527.492 267.324 527.477 267.398 527.465 cv
267.469 527.461 267.563 527.457 267.688 527.453 cv
267.797 527.457 267.895 527.461 267.973 527.465 cv
268.047 527.477 268.105 527.492 268.148 527.512 cv
268.188 527.539 268.215 527.562 268.234 527.59 cv
268.25 527.621 268.258 527.656 268.262 527.695 cv
268.262 528.621 li
268.652 528.18 269.035 527.859 269.41 527.652 cv
269.777 527.449 270.156 527.344 270.539 527.344 cv
270.828 527.344 271.086 527.379 271.32 527.445 cv
271.547 527.516 271.754 527.609 271.934 527.73 cv
272.109 527.852 272.258 527.996 272.387 528.164 cv
272.508 528.336 272.613 528.527 272.699 528.73 cv
272.93 528.48 273.152 528.266 273.363 528.086 cv
273.574 527.914 273.777 527.77 273.973 527.656 cv
274.168 527.551 274.355 527.473 274.539 527.418 cv
274.723 527.371 274.91 527.344 275.098 527.344 cv
275.551 527.344 275.93 527.426 276.234 527.582 cv
276.539 527.746 276.785 527.957 276.98 528.219 cv
277.168 528.484 277.305 528.793 277.387 529.148 cv
277.465 529.504 277.504 529.879 277.508 530.273 cv
cp
f
286.305 531.105 mo
286.301 531.715 286.234 532.266 286.105 532.75 cv
285.969 533.238 285.773 533.652 285.52 533.992 cv
285.262 534.336 284.945 534.598 284.574 534.777 cv
284.199 534.961 283.773 535.047 283.289 535.051 cv
283.063 535.047 282.855 535.027 282.668 534.984 cv
282.48 534.937 282.293 534.867 282.113 534.77 cv
281.926 534.672 281.746 534.547 281.566 534.395 cv
281.383 534.246 281.191 534.066 280.992 533.852 cv
280.992 534.707 li
280.992 534.754 280.98 534.789 280.961 534.816 cv
280.938 534.852 280.902 534.875 280.859 534.891 cv
280.809 534.906 280.75 534.918 280.684 534.934 cv
280.609 534.941 280.52 534.949 280.414 534.949 cv
280.305 534.949 280.219 534.941 280.148 534.934 cv
280.074 534.918 280.012 534.906 279.969 534.891 cv
279.918 534.875 279.887 534.852 279.875 534.816 cv
279.855 534.789 279.848 534.754 279.852 534.707 cv
279.852 524.297 li
279.848 524.258 279.859 524.223 279.879 524.187 cv
279.895 524.16 279.926 524.133 279.98 524.109 cv
280.027 524.09 280.094 524.074 280.18 524.062 cv
280.258 524.055 280.363 524.051 280.492 524.047 cv
280.621 524.051 280.727 524.055 280.813 524.062 cv
280.891 524.074 280.957 524.09 281.004 524.109 cv
281.051 524.133 281.082 524.16 281.105 524.187 cv
281.121 524.223 281.133 524.258 281.137 524.297 cv
281.137 528.496 li
281.344 528.285 281.547 528.105 281.742 527.961 cv
281.938 527.816 282.125 527.699 282.313 527.605 cv
282.496 527.52 282.684 527.453 282.875 527.406 cv
283.059 527.367 283.258 527.344 283.469 527.344 cv
283.973 527.344 284.406 527.445 284.773 527.648 cv
285.133 527.852 285.426 528.125 285.652 528.461 cv
285.875 528.805 286.043 529.203 286.148 529.66 cv
286.25 530.117 286.301 530.598 286.305 531.105 cv
cp
284.973 531.254 mo
284.969 530.898 284.941 530.551 284.891 530.211 cv
284.832 529.875 284.738 529.578 284.602 529.316 cv
284.465 529.059 284.285 528.848 284.063 528.687 cv
283.836 528.531 283.555 528.453 283.223 528.449 cv
283.055 528.453 282.891 528.477 282.73 528.52 cv
282.566 528.57 282.402 528.648 282.234 528.754 cv
282.066 528.867 281.891 529.008 281.715 529.176 cv
281.531 529.352 281.34 529.566 281.137 529.82 cv
281.137 532.617 li
281.492 533.051 281.832 533.383 282.156 533.605 cv
282.48 533.836 282.816 533.949 283.168 533.945 cv
283.488 533.949 283.766 533.871 284 533.711 cv
284.227 533.559 284.414 533.352 284.559 533.09 cv
284.703 532.836 284.809 532.547 284.875 532.227 cv
284.938 531.91 284.969 531.586 284.973 531.254 cv
cp
f
294.215 530.898 mo
294.211 531.102 294.16 531.242 294.063 531.328 cv
293.957 531.414 293.84 531.457 293.715 531.457 cv
289.098 531.457 li
289.094 531.848 289.133 532.199 289.215 532.512 cv
289.289 532.824 289.422 533.094 289.605 533.312 cv
289.785 533.539 290.02 533.711 290.316 533.828 cv
290.605 533.953 290.965 534.012 291.391 534.008 cv
291.723 534.012 292.02 533.984 292.281 533.926 cv
292.543 533.875 292.77 533.812 292.961 533.742 cv
293.148 533.676 293.305 533.617 293.43 533.559 cv
293.551 533.508 293.645 533.48 293.707 533.477 cv
293.742 533.48 293.773 533.488 293.805 533.504 cv
293.832 533.523 293.855 533.551 293.875 533.586 cv
293.887 533.625 293.898 533.676 293.91 533.738 cv
293.914 533.805 293.918 533.883 293.922 533.977 cv
293.918 534.047 293.914 534.105 293.914 534.152 cv
293.906 534.199 293.902 534.242 293.895 534.281 cv
293.887 534.32 293.871 534.355 293.855 534.387 cv
293.832 534.418 293.809 534.449 293.785 534.477 cv
293.754 534.508 293.672 534.555 293.531 534.617 cv
293.391 534.684 293.207 534.746 292.984 534.809 cv
292.758 534.871 292.5 534.926 292.207 534.977 cv
291.914 535.023 291.602 535.047 291.27 535.051 cv
290.691 535.047 290.184 534.969 289.754 534.809 cv
289.316 534.648 288.953 534.41 288.66 534.094 cv
288.359 533.777 288.137 533.383 287.988 532.902 cv
287.84 532.426 287.766 531.867 287.766 531.23 cv
287.766 530.633 287.84 530.094 287.996 529.609 cv
288.148 529.133 288.375 528.723 288.672 528.387 cv
288.965 528.051 289.32 527.793 289.734 527.613 cv
290.148 527.434 290.613 527.344 291.129 527.344 cv
291.68 527.344 292.148 527.434 292.535 527.609 cv
292.922 527.789 293.238 528.027 293.492 528.324 cv
293.738 528.625 293.922 528.977 294.039 529.375 cv
294.152 529.781 294.211 530.211 294.215 530.664 cv
cp
292.922 530.516 mo
292.938 529.84 292.785 529.309 292.469 528.926 cv
292.152 528.543 291.684 528.352 291.066 528.348 cv
290.742 528.352 290.461 528.41 290.223 528.527 cv
289.98 528.648 289.781 528.809 289.621 529.004 cv
289.457 529.203 289.332 529.434 289.246 529.695 cv
289.156 529.957 289.105 530.23 289.098 530.516 cv
cp
f
300.281 528.152 mo
300.277 528.27 300.277 528.367 300.273 528.441 cv
300.266 528.523 300.254 528.586 300.242 528.625 cv
300.223 528.672 300.203 528.703 300.184 528.727 cv
300.156 528.75 300.125 528.762 300.086 528.762 cv
300.043 528.762 299.992 528.75 299.934 528.727 cv
299.871 528.703 299.801 528.68 299.73 528.656 cv
299.652 528.633 299.57 528.613 299.477 528.59 cv
299.383 528.574 299.281 528.562 299.172 528.559 cv
299.039 528.562 298.91 528.59 298.789 528.637 cv
298.664 528.691 298.535 528.777 298.398 528.895 cv
298.258 529.02 298.113 529.176 297.965 529.371 cv
297.813 529.566 297.645 529.809 297.465 530.094 cv
297.465 534.707 li
297.461 534.754 297.449 534.789 297.434 534.812 cv
297.41 534.844 297.379 534.867 297.332 534.887 cv
297.285 534.906 297.219 534.918 297.141 534.934 cv
297.055 534.941 296.949 534.949 296.82 534.949 cv
296.691 534.949 296.586 534.941 296.508 534.934 cv
296.422 534.918 296.355 534.906 296.309 534.887 cv
296.254 534.867 296.223 534.844 296.207 534.812 cv
296.188 534.789 296.176 534.754 296.18 534.707 cv
296.18 527.695 li
296.176 527.656 296.184 527.621 296.203 527.59 cv
296.215 527.562 296.246 527.539 296.297 527.512 cv
296.34 527.492 296.402 527.477 296.477 527.465 cv
296.547 527.461 296.641 527.457 296.766 527.453 cv
296.875 527.457 296.973 527.461 297.051 527.465 cv
297.125 527.477 297.184 527.492 297.227 527.512 cv
297.266 527.539 297.293 527.562 297.313 527.59 cv
297.328 527.621 297.336 527.656 297.34 527.695 cv
297.34 528.715 li
297.527 528.434 297.711 528.207 297.883 528.031 cv
298.051 527.855 298.211 527.715 298.363 527.613 cv
298.512 527.512 298.66 527.441 298.809 527.402 cv
298.957 527.363 299.105 527.344 299.258 527.344 cv
299.324 527.344 299.402 527.348 299.488 527.355 cv
299.574 527.363 299.664 527.379 299.758 527.398 cv
299.852 527.422 299.934 527.445 300.012 527.469 cv
300.082 527.496 300.137 527.523 300.172 527.547 cv
300.199 527.578 300.219 527.602 300.234 527.621 cv
300.242 527.648 300.254 527.68 300.262 527.711 cv
300.27 527.75 300.273 527.801 300.277 527.871 cv
300.277 527.941 300.277 528.035 300.281 528.152 cv
cp
f
312.039 531.121 mo
312.035 531.699 311.961 532.227 311.813 532.703 cv
311.66 533.187 311.434 533.602 311.137 533.945 cv
310.836 534.297 310.461 534.566 310.016 534.758 cv
309.563 534.953 309.043 535.047 308.453 535.051 cv
307.875 535.047 307.371 534.965 306.945 534.793 cv
306.516 534.625 306.16 534.375 305.875 534.047 cv
305.586 533.719 305.371 533.324 305.234 532.855 cv
305.094 532.391 305.027 531.859 305.027 531.262 cv
305.027 530.695 305.098 530.168 305.246 529.687 cv
305.391 529.207 305.617 528.793 305.918 528.441 cv
306.215 528.094 306.586 527.824 307.035 527.633 cv
307.48 527.441 308.004 527.344 308.602 527.344 cv
309.18 527.344 309.68 527.43 310.109 527.602 cv
310.535 527.773 310.895 528.023 311.18 528.352 cv
311.465 528.68 311.68 529.078 311.824 529.543 cv
311.965 530.012 312.035 530.539 312.039 531.121 cv
cp
310.707 531.207 mo
310.703 530.832 310.668 530.473 310.602 530.133 cv
310.527 529.797 310.41 529.504 310.25 529.246 cv
310.086 528.996 309.867 528.793 309.59 528.641 cv
309.309 528.496 308.961 528.422 308.551 528.418 cv
308.164 528.422 307.836 528.488 307.563 528.621 cv
307.285 528.758 307.059 528.949 306.883 529.195 cv
306.703 529.441 306.57 529.734 306.488 530.07 cv
306.398 530.41 306.355 530.777 306.359 531.176 cv
306.355 531.562 306.391 531.926 306.465 532.262 cv
306.531 532.602 306.648 532.895 306.816 533.145 cv
306.98 533.398 307.203 533.602 307.48 533.746 cv
307.758 533.898 308.105 533.973 308.52 533.969 cv
308.895 533.973 309.223 533.902 309.504 533.766 cv
309.781 533.633 310.008 533.445 310.188 533.195 cv
310.363 532.953 310.492 532.66 310.578 532.324 cv
310.66 531.988 310.703 531.617 310.707 531.207 cv
cp
f
317.77 524.809 mo
317.766 524.91 317.762 524.988 317.754 525.047 cv
317.742 525.109 317.73 525.16 317.719 525.191 cv
317.703 525.23 317.688 525.254 317.668 525.266 cv
317.645 525.281 317.617 525.289 317.59 525.285 cv
317.551 525.289 317.504 525.277 317.453 525.25 cv
317.395 525.23 317.328 525.203 317.254 525.172 cv
317.172 525.145 317.082 525.117 316.977 525.094 cv
316.867 525.07 316.742 525.059 316.609 525.059 cv
316.414 525.059 316.25 525.09 316.117 525.152 cv
315.977 525.215 315.867 525.312 315.789 525.445 cv
315.703 525.578 315.645 525.75 315.609 525.961 cv
315.57 526.172 315.551 526.43 315.555 526.727 cv
315.555 527.492 li
317.121 527.492 li
317.16 527.496 317.195 527.504 317.227 527.52 cv
317.254 527.539 317.281 527.57 317.305 527.613 cv
317.328 527.66 317.344 527.719 317.359 527.781 cv
317.367 527.852 317.375 527.934 317.379 528.027 cv
317.375 528.219 317.352 528.352 317.309 528.434 cv
317.258 528.52 317.195 528.562 317.121 528.559 cv
315.555 528.559 li
315.555 534.707 li
315.551 534.754 315.543 534.789 315.523 534.812 cv
315.5 534.844 315.465 534.867 315.418 534.887 cv
315.367 534.906 315.301 534.918 315.219 534.934 cv
315.133 534.941 315.027 534.949 314.91 534.949 cv
314.781 534.949 314.68 534.941 314.598 534.934 cv
314.512 534.918 314.445 534.906 314.398 534.887 cv
314.348 534.867 314.313 534.844 314.293 534.812 cv
314.27 534.789 314.258 534.754 314.262 534.707 cv
314.262 528.559 li
313.273 528.559 li
313.188 528.562 313.125 528.52 313.086 528.434 cv
313.043 528.352 313.02 528.219 313.023 528.027 cv
313.02 527.934 313.027 527.852 313.039 527.781 cv
313.047 527.719 313.063 527.66 313.086 527.613 cv
313.105 527.57 313.129 527.539 313.164 527.52 cv
313.191 527.504 313.23 527.496 313.273 527.492 cv
314.262 527.492 li
314.262 526.766 li
314.258 526.281 314.305 525.863 314.398 525.508 cv
314.488 525.16 314.625 524.871 314.813 524.648 cv
314.996 524.426 315.23 524.262 315.52 524.152 cv
315.801 524.047 316.137 523.992 316.523 523.992 cv
316.699 523.992 316.875 524.012 317.051 524.043 cv
317.219 524.082 317.352 524.117 317.449 524.152 cv
317.539 524.195 317.602 524.23 317.637 524.258 cv
317.664 524.293 317.691 524.332 317.715 524.379 cv
317.734 524.43 317.746 524.492 317.758 524.559 cv
317.762 524.633 317.766 524.715 317.77 524.809 cv
cp
f
327.969 532.074 mo
327.965 532.547 327.879 532.969 327.707 533.336 cv
327.531 533.711 327.289 534.023 326.98 534.277 cv
326.672 534.535 326.309 534.727 325.891 534.855 cv
325.469 534.984 325.02 535.047 324.539 535.051 cv
324.199 535.047 323.883 535.02 323.598 534.965 cv
323.309 534.906 323.055 534.84 322.828 534.754 cv
322.602 534.676 322.41 534.59 322.258 534.496 cv
322.102 534.41 321.996 534.332 321.938 534.27 cv
321.879 534.207 321.836 534.129 321.809 534.035 cv
321.777 533.941 321.762 533.812 321.766 533.648 cv
321.762 533.535 321.766 533.441 321.781 533.363 cv
321.789 533.289 321.805 533.227 321.828 533.18 cv
321.844 533.133 321.871 533.102 321.906 533.082 cv
321.934 533.066 321.969 533.059 322.012 533.055 cv
322.082 533.059 322.184 533.102 322.32 533.187 cv
322.449 533.277 322.621 533.375 322.832 533.477 cv
323.039 533.586 323.289 533.684 323.582 533.77 cv
323.875 533.863 324.215 533.906 324.602 533.906 cv
324.891 533.906 325.156 533.867 325.398 533.789 cv
325.637 533.711 325.844 533.602 326.023 533.457 cv
326.195 533.316 326.332 533.141 326.426 532.93 cv
326.52 532.723 326.566 532.488 326.566 532.223 cv
326.566 531.941 326.5 531.695 326.371 531.488 cv
326.238 531.289 326.066 531.113 325.855 530.957 cv
325.641 530.809 325.398 530.668 325.125 530.535 cv
324.852 530.41 324.57 530.277 324.289 530.145 cv
324 530.012 323.723 529.867 323.453 529.703 cv
323.184 529.547 322.941 529.355 322.73 529.137 cv
322.512 528.918 322.34 528.664 322.211 528.367 cv
322.074 528.078 322.008 527.727 322.012 527.312 cv
322.008 526.895 322.086 526.52 322.242 526.187 cv
322.395 525.859 322.605 525.582 322.883 525.355 cv
323.152 525.137 323.477 524.965 323.855 524.848 cv
324.23 524.73 324.641 524.672 325.078 524.672 cv
325.297 524.672 325.52 524.691 325.75 524.73 cv
325.973 524.77 326.184 524.82 326.387 524.883 cv
326.582 524.949 326.762 525.023 326.922 525.102 cv
327.074 525.184 327.176 525.25 327.23 525.297 cv
327.277 525.352 327.313 525.391 327.328 525.414 cv
327.344 525.445 327.355 525.48 327.367 525.523 cv
327.375 525.57 327.383 525.625 327.391 525.684 cv
327.395 525.75 327.398 525.828 327.398 525.926 cv
327.398 526.02 327.395 526.105 327.387 526.176 cv
327.379 526.254 327.367 526.312 327.352 526.359 cv
327.336 526.406 327.313 526.441 327.285 526.465 cv
327.254 526.488 327.223 526.5 327.188 526.5 cv
327.129 526.5 327.039 526.465 326.918 526.395 cv
326.793 526.324 326.641 526.242 326.469 526.148 cv
326.289 526.059 326.082 525.977 325.844 525.898 cv
325.598 525.824 325.328 525.785 325.031 525.785 cv
324.75 525.785 324.504 525.824 324.297 525.898 cv
324.086 525.977 323.914 526.078 323.781 526.199 cv
323.645 526.324 323.543 526.469 323.477 526.641 cv
323.41 526.812 323.379 526.996 323.379 527.187 cv
323.379 527.473 323.441 527.715 323.57 527.914 cv
323.699 528.117 323.871 528.297 324.09 528.449 cv
324.301 528.609 324.547 528.75 324.824 528.879 cv
325.098 529.012 325.379 529.145 325.668 529.273 cv
325.953 529.406 326.234 529.551 326.508 529.707 cv
326.781 529.867 327.027 530.055 327.246 530.27 cv
327.461 530.488 327.633 530.742 327.77 531.035 cv
327.898 531.328 327.965 531.676 327.969 532.074 cv
cp
f
335.734 534.707 mo
335.73 534.754 335.723 534.789 335.707 534.812 cv
335.688 534.844 335.652 534.867 335.609 534.887 cv
335.563 534.906 335.504 534.918 335.43 534.934 cv
335.352 534.941 335.258 534.949 335.152 534.949 cv
335.027 534.949 334.93 534.941 334.859 534.934 cv
334.781 534.918 334.723 534.906 334.68 534.887 cv
334.633 534.867 334.602 534.844 334.59 534.812 cv
334.57 534.789 334.563 534.754 334.566 534.707 cv
334.566 533.781 li
334.164 534.227 333.77 534.547 333.383 534.746 cv
332.988 534.949 332.594 535.047 332.199 535.051 cv
331.727 535.047 331.332 534.973 331.016 534.816 cv
330.695 534.664 330.438 534.453 330.242 534.184 cv
330.039 533.918 329.898 533.605 329.816 533.246 cv
329.727 532.891 329.684 532.457 329.688 531.949 cv
329.688 527.695 li
329.684 527.656 329.691 527.621 329.715 527.59 cv
329.73 527.562 329.766 527.539 329.82 527.512 cv
329.867 527.492 329.938 527.477 330.023 527.465 cv
330.105 527.461 330.207 527.457 330.336 527.453 cv
330.457 527.457 330.563 527.461 330.648 527.465 cv
330.73 527.477 330.797 527.492 330.844 527.512 cv
330.891 527.539 330.926 527.562 330.949 527.59 cv
330.969 527.621 330.977 527.656 330.98 527.695 cv
330.98 531.777 li
330.977 532.191 331.008 532.52 331.07 532.766 cv
331.129 533.012 331.219 533.223 331.344 533.395 cv
331.461 533.574 331.617 533.707 331.809 533.801 cv
331.992 533.898 332.211 533.949 332.461 533.945 cv
332.781 533.949 333.102 533.832 333.426 533.602 cv
333.742 533.375 334.082 533.039 334.441 532.594 cv
334.441 527.695 li
334.441 527.656 334.449 527.621 334.469 527.59 cv
334.484 527.562 334.52 527.539 334.574 527.512 cv
334.625 527.492 334.691 527.477 334.773 527.465 cv
334.852 527.461 334.957 527.457 335.09 527.453 cv
335.211 527.457 335.316 527.461 335.402 527.465 cv
335.484 527.477 335.547 527.492 335.594 527.512 cv
335.637 527.539 335.672 527.562 335.699 527.59 cv
335.719 527.621 335.73 527.656 335.734 527.695 cv
cp
f
344.59 531.105 mo
344.586 531.715 344.52 532.266 344.391 532.75 cv
344.254 533.238 344.059 533.652 343.805 533.992 cv
343.547 534.336 343.23 534.598 342.859 534.777 cv
342.484 534.961 342.059 535.047 341.574 535.051 cv
341.348 535.047 341.141 535.027 340.953 534.984 cv
340.766 534.937 340.578 534.867 340.398 534.77 cv
340.211 534.672 340.031 534.547 339.852 534.395 cv
339.668 534.246 339.477 534.066 339.277 533.852 cv
339.277 534.707 li
339.277 534.754 339.266 534.789 339.246 534.816 cv
339.223 534.852 339.188 534.875 339.145 534.891 cv
339.094 534.906 339.035 534.918 338.969 534.934 cv
338.895 534.941 338.805 534.949 338.699 534.949 cv
338.59 534.949 338.504 534.941 338.434 534.934 cv
338.359 534.918 338.297 534.906 338.254 534.891 cv
338.203 534.875 338.172 534.852 338.16 534.816 cv
338.141 534.789 338.133 534.754 338.137 534.707 cv
338.137 524.297 li
338.133 524.258 338.145 524.223 338.164 524.187 cv
338.18 524.16 338.211 524.133 338.266 524.109 cv
338.313 524.09 338.379 524.074 338.465 524.062 cv
338.543 524.055 338.648 524.051 338.777 524.047 cv
338.906 524.051 339.012 524.055 339.098 524.062 cv
339.176 524.074 339.242 524.09 339.289 524.109 cv
339.336 524.133 339.367 524.16 339.391 524.187 cv
339.406 524.223 339.418 524.258 339.422 524.297 cv
339.422 528.496 li
339.629 528.285 339.832 528.105 340.027 527.961 cv
340.223 527.816 340.41 527.699 340.598 527.605 cv
340.781 527.52 340.969 527.453 341.16 527.406 cv
341.344 527.367 341.543 527.344 341.754 527.344 cv
342.258 527.344 342.691 527.445 343.059 527.648 cv
343.418 527.852 343.711 528.125 343.938 528.461 cv
344.16 528.805 344.328 529.203 344.434 529.66 cv
344.535 530.117 344.586 530.598 344.59 531.105 cv
cp
343.258 531.254 mo
343.254 530.898 343.227 530.551 343.176 530.211 cv
343.117 529.875 343.023 529.578 342.887 529.316 cv
342.75 529.059 342.57 528.848 342.348 528.687 cv
342.121 528.531 341.84 528.453 341.508 528.449 cv
341.34 528.453 341.176 528.477 341.016 528.52 cv
340.852 528.57 340.688 528.648 340.52 528.754 cv
340.352 528.867 340.176 529.008 340 529.176 cv
339.816 529.352 339.625 529.566 339.422 529.82 cv
339.422 532.617 li
339.777 533.051 340.117 533.383 340.441 533.605 cv
340.766 533.836 341.102 533.949 341.453 533.945 cv
341.773 533.949 342.051 533.871 342.285 533.711 cv
342.512 533.559 342.699 533.352 342.844 533.09 cv
342.988 532.836 343.094 532.547 343.16 532.227 cv
343.223 531.91 343.254 531.586 343.258 531.254 cv
cp
f
349.758 530.969 mo
349.758 531.172 349.734 531.309 349.688 531.387 cv
349.641 531.465 349.57 531.504 349.484 531.504 cv
346.227 531.504 li
346.133 531.504 346.066 531.465 346.02 531.383 cv
345.973 531.305 345.949 531.168 345.949 530.969 cv
345.949 530.773 345.973 530.633 346.02 530.555 cv
346.066 530.477 346.133 530.437 346.227 530.437 cv
349.484 530.437 li
349.523 530.437 349.563 530.445 349.598 530.461 cv
349.629 530.477 349.656 530.508 349.684 530.551 cv
349.703 530.598 349.723 530.652 349.738 530.719 cv
349.75 530.789 349.758 530.875 349.758 530.969 cv
cp
f
353.008 534.699 mo
353.004 534.742 352.996 534.777 352.977 534.809 cv
352.953 534.84 352.914 534.867 352.867 534.883 cv
352.813 534.902 352.746 534.914 352.66 534.93 cv
352.574 534.941 352.465 534.949 352.34 534.949 cv
352.211 534.949 352.105 534.941 352.02 534.93 cv
351.93 534.914 351.859 534.902 351.809 534.883 cv
351.754 534.867 351.719 534.84 351.699 534.809 cv
351.676 534.777 351.664 534.742 351.668 534.699 cv
351.668 525.02 li
351.664 524.98 351.676 524.945 351.703 524.91 cv
351.723 524.883 351.762 524.855 351.82 524.836 cv
351.871 524.82 351.941 524.805 352.031 524.789 cv
352.113 524.777 352.215 524.773 352.34 524.77 cv
352.465 524.773 352.574 524.777 352.66 524.789 cv
352.746 524.805 352.813 524.82 352.867 524.836 cv
352.914 524.855 352.953 524.883 352.977 524.91 cv
352.996 524.945 353.004 524.98 353.008 525.02 cv
cp
f
365.996 534.707 mo
365.992 534.754 365.984 534.789 365.965 534.812 cv
365.941 534.844 365.906 534.867 365.863 534.887 cv
365.813 534.906 365.746 534.918 365.668 534.934 cv
365.582 534.941 365.48 534.949 365.355 534.949 cv
365.223 534.949 365.113 534.941 365.035 534.934 cv
364.949 534.918 364.883 534.906 364.836 534.887 cv
364.781 534.867 364.746 534.844 364.73 534.812 cv
364.707 534.789 364.699 534.754 364.699 534.707 cv
364.699 530.445 li
364.699 530.152 364.672 529.883 364.621 529.637 cv
364.566 529.395 364.484 529.184 364.371 529.004 cv
364.258 528.828 364.113 528.691 363.938 528.598 cv
363.758 528.504 363.547 528.457 363.313 528.457 cv
363.016 528.457 362.719 528.574 362.422 528.801 cv
362.117 529.035 361.789 529.367 361.434 529.805 cv
361.434 534.707 li
361.43 534.754 361.418 534.789 361.402 534.812 cv
361.379 534.844 361.348 534.867 361.301 534.887 cv
361.25 534.906 361.184 534.918 361.102 534.934 cv
361.016 534.941 360.91 534.949 360.789 534.949 cv
360.668 534.949 360.566 534.941 360.48 534.934 cv
360.395 534.918 360.324 534.906 360.277 534.887 cv
360.223 534.867 360.191 534.844 360.176 534.812 cv
360.156 534.789 360.145 534.754 360.148 534.707 cv
360.148 530.445 li
360.145 530.152 360.117 529.883 360.063 529.637 cv
360.004 529.395 359.918 529.184 359.805 529.004 cv
359.691 528.828 359.547 528.691 359.375 528.598 cv
359.195 528.504 358.988 528.457 358.754 528.457 cv
358.453 528.457 358.156 528.574 357.855 528.801 cv
357.555 529.035 357.227 529.367 356.875 529.805 cv
356.875 534.707 li
356.871 534.754 356.859 534.789 356.844 534.812 cv
356.82 534.844 356.789 534.867 356.742 534.887 cv
356.695 534.906 356.629 534.918 356.551 534.934 cv
356.465 534.941 356.359 534.949 356.23 534.949 cv
356.102 534.949 355.996 534.941 355.918 534.934 cv
355.832 534.918 355.766 534.906 355.719 534.887 cv
355.664 534.867 355.633 534.844 355.617 534.812 cv
355.598 534.789 355.586 534.754 355.59 534.707 cv
355.59 527.695 li
355.586 527.656 355.594 527.621 355.613 527.59 cv
355.625 527.562 355.656 527.539 355.707 527.512 cv
355.75 527.492 355.813 527.477 355.887 527.465 cv
355.957 527.461 356.051 527.457 356.176 527.453 cv
356.285 527.457 356.383 527.461 356.461 527.465 cv
356.535 527.477 356.594 527.492 356.637 527.512 cv
356.676 527.539 356.703 527.562 356.723 527.59 cv
356.738 527.621 356.746 527.656 356.75 527.695 cv
356.75 528.621 li
357.141 528.18 357.523 527.859 357.898 527.652 cv
358.266 527.449 358.645 527.344 359.027 527.344 cv
359.316 527.344 359.574 527.379 359.809 527.445 cv
360.035 527.516 360.242 527.609 360.422 527.73 cv
360.598 527.852 360.746 527.996 360.875 528.164 cv
360.996 528.336 361.102 528.527 361.188 528.73 cv
361.418 528.48 361.641 528.266 361.852 528.086 cv
362.063 527.914 362.266 527.77 362.461 527.656 cv
362.656 527.551 362.844 527.473 363.027 527.418 cv
363.211 527.371 363.398 527.344 363.586 527.344 cv
364.039 527.344 364.418 527.426 364.723 527.582 cv
365.027 527.746 365.273 527.957 365.469 528.219 cv
365.656 528.484 365.793 528.793 365.875 529.148 cv
365.953 529.504 365.992 529.879 365.996 530.273 cv
cp
f
373.629 534.715 mo
373.625 534.777 373.605 534.824 373.566 534.855 cv
373.523 534.887 373.465 534.91 373.395 534.926 cv
373.316 534.941 373.211 534.949 373.074 534.949 cv
372.938 534.949 372.828 534.941 372.75 534.926 cv
372.664 534.91 372.605 534.887 372.574 534.855 cv
372.535 534.824 372.52 534.777 372.523 534.715 cv
372.523 534.016 li
372.215 534.344 371.871 534.598 371.496 534.777 cv
371.117 534.961 370.719 535.047 370.301 535.051 cv
369.926 535.047 369.594 535 369.297 534.906 cv
369 534.809 368.746 534.672 368.535 534.488 cv
368.324 534.309 368.16 534.086 368.043 533.82 cv
367.926 533.559 367.867 533.258 367.871 532.914 cv
367.867 532.523 367.945 532.18 368.109 531.887 cv
368.266 531.598 368.5 531.355 368.805 531.164 cv
369.105 530.973 369.473 530.828 369.91 530.73 cv
370.344 530.637 370.836 530.59 371.383 530.586 cv
372.352 530.586 li
372.352 530.039 li
372.348 529.77 372.32 529.531 372.266 529.324 cv
372.207 529.117 372.113 528.945 371.988 528.805 cv
371.855 528.668 371.691 528.562 371.492 528.492 cv
371.285 528.422 371.035 528.387 370.746 528.387 cv
370.426 528.387 370.141 528.426 369.891 528.5 cv
369.633 528.578 369.414 528.66 369.227 528.75 cv
369.039 528.844 368.879 528.93 368.754 529 cv
368.621 529.078 368.527 529.113 368.469 529.113 cv
368.426 529.113 368.391 529.105 368.359 529.082 cv
368.328 529.066 368.301 529.035 368.277 528.988 cv
368.254 528.949 368.234 528.895 368.227 528.828 cv
368.211 528.766 368.207 528.695 368.211 528.613 cv
368.207 528.488 368.215 528.383 368.238 528.305 cv
368.254 528.23 368.301 528.16 368.371 528.09 cv
368.441 528.023 368.563 527.945 368.734 527.855 cv
368.906 527.766 369.102 527.684 369.324 527.605 cv
369.547 527.535 369.793 527.473 370.059 527.418 cv
370.324 527.371 370.59 527.344 370.863 527.344 cv
371.363 527.344 371.793 527.402 372.145 527.516 cv
372.496 527.633 372.781 527.801 373.004 528.02 cv
373.219 528.242 373.379 528.516 373.48 528.84 cv
373.578 529.172 373.625 529.555 373.629 529.984 cv
cp
372.352 531.512 mo
371.25 531.512 li
370.895 531.516 370.59 531.547 370.332 531.602 cv
370.07 531.664 369.855 531.75 369.684 531.867 cv
369.512 531.984 369.387 532.125 369.309 532.289 cv
369.227 532.453 369.184 532.641 369.188 532.852 cv
369.184 533.219 369.301 533.512 369.531 533.723 cv
369.762 533.941 370.086 534.047 370.504 534.047 cv
370.84 534.047 371.152 533.961 371.441 533.789 cv
371.73 533.617 372.031 533.355 372.352 533 cv
cp
f
381.848 528.012 mo
381.844 528.195 381.82 528.328 381.773 528.406 cv
381.723 528.488 381.66 528.527 381.586 528.527 cv
380.578 528.527 li
380.758 528.715 380.887 528.922 380.961 529.148 cv
381.031 529.375 381.066 529.609 381.07 529.852 cv
381.066 530.258 381 530.617 380.875 530.93 cv
380.742 531.242 380.559 531.508 380.316 531.719 cv
380.074 531.937 379.785 532.102 379.457 532.215 cv
379.121 532.332 378.754 532.391 378.352 532.387 cv
378.063 532.391 377.789 532.352 377.535 532.273 cv
377.273 532.199 377.078 532.105 376.941 531.988 cv
376.848 532.086 376.77 532.191 376.711 532.309 cv
376.648 532.43 376.617 532.566 376.621 532.719 cv
376.617 532.902 376.703 533.055 376.875 533.172 cv
377.043 533.297 377.266 533.359 377.547 533.367 cv
379.379 533.445 li
379.727 533.457 380.043 533.504 380.336 533.59 cv
380.625 533.676 380.879 533.801 381.094 533.957 cv
381.305 534.117 381.473 534.309 381.594 534.539 cv
381.711 534.773 381.77 535.043 381.773 535.348 cv
381.77 535.668 381.703 535.973 381.57 536.266 cv
381.434 536.555 381.227 536.809 380.949 537.031 cv
380.668 537.25 380.313 537.426 379.883 537.555 cv
379.453 537.68 378.945 537.742 378.359 537.746 cv
377.789 537.742 377.305 537.695 376.91 537.602 cv
376.512 537.504 376.188 537.371 375.934 537.207 cv
375.68 537.039 375.496 536.844 375.383 536.613 cv
375.266 536.379 375.207 536.125 375.211 535.859 cv
375.207 535.687 375.227 535.523 375.273 535.363 cv
375.313 535.199 375.375 535.047 375.461 534.902 cv
375.543 534.758 375.652 534.621 375.781 534.484 cv
375.906 534.355 376.051 534.223 376.223 534.094 cv
375.965 533.965 375.777 533.801 375.656 533.602 cv
375.535 533.406 375.477 533.195 375.477 532.961 cv
375.477 532.648 375.539 532.363 375.668 532.113 cv
375.797 531.863 375.957 531.641 376.152 531.441 cv
375.988 531.25 375.863 531.035 375.77 530.793 cv
375.676 530.555 375.629 530.262 375.629 529.914 cv
375.629 529.52 375.695 529.16 375.832 528.84 cv
375.965 528.523 376.152 528.258 376.395 528.039 cv
376.633 527.824 376.918 527.656 377.254 527.535 cv
377.586 527.422 377.953 527.363 378.352 527.359 cv
378.563 527.363 378.762 527.375 378.945 527.395 cv
379.129 527.422 379.301 527.453 379.465 527.492 cv
381.586 527.492 li
381.672 527.496 381.738 527.539 381.781 527.621 cv
381.824 527.711 381.844 527.84 381.848 528.012 cv
cp
379.84 529.859 mo
379.836 529.387 379.703 529.016 379.445 528.742 cv
379.18 528.477 378.809 528.34 378.328 528.34 cv
378.074 528.34 377.855 528.383 377.676 528.465 cv
377.488 528.551 377.336 528.664 377.215 528.809 cv
377.094 528.957 377.004 529.125 376.945 529.312 cv
376.883 529.5 376.852 529.699 376.855 529.906 cv
376.852 530.371 376.984 530.734 377.246 531 cv
377.508 531.266 377.875 531.398 378.352 531.395 cv
378.602 531.398 378.82 531.359 379.012 531.273 cv
379.195 531.195 379.352 531.082 379.477 530.941 cv
379.598 530.801 379.688 530.637 379.75 530.445 cv
379.805 530.262 379.836 530.066 379.84 529.859 cv
cp
380.484 535.418 mo
380.48 535.113 380.355 534.883 380.113 534.719 cv
379.863 534.559 379.531 534.469 379.113 534.457 cv
377.297 534.395 li
377.129 534.527 376.992 534.652 376.891 534.766 cv
376.781 534.883 376.699 534.992 376.637 535.102 cv
376.574 535.207 376.531 535.312 376.508 535.418 cv
376.484 535.52 376.473 535.625 376.473 535.734 cv
376.473 536.07 376.641 536.324 376.984 536.504 cv
377.324 536.676 377.805 536.766 378.422 536.766 cv
378.809 536.766 379.133 536.727 379.398 536.652 cv
379.656 536.574 379.867 536.473 380.031 536.352 cv
380.188 536.223 380.305 536.082 380.379 535.922 cv
380.445 535.762 380.48 535.594 380.484 535.418 cv
cp
f
389.41 530.898 mo
389.406 531.102 389.355 531.242 389.258 531.328 cv
389.152 531.414 389.035 531.457 388.91 531.457 cv
384.293 531.457 li
384.289 531.848 384.328 532.199 384.41 532.512 cv
384.484 532.824 384.617 533.094 384.801 533.312 cv
384.98 533.539 385.215 533.711 385.512 533.828 cv
385.801 533.953 386.16 534.012 386.586 534.008 cv
386.918 534.012 387.215 533.984 387.477 533.926 cv
387.738 533.875 387.965 533.812 388.156 533.742 cv
388.344 533.676 388.5 533.617 388.625 533.559 cv
388.746 533.508 388.84 533.48 388.902 533.477 cv
388.938 533.48 388.969 533.488 389 533.504 cv
389.027 533.523 389.051 533.551 389.07 533.586 cv
389.082 533.625 389.094 533.676 389.105 533.738 cv
389.109 533.805 389.113 533.883 389.117 533.977 cv
389.113 534.047 389.109 534.105 389.109 534.152 cv
389.102 534.199 389.098 534.242 389.09 534.281 cv
389.082 534.32 389.066 534.355 389.051 534.387 cv
389.027 534.418 389.004 534.449 388.98 534.477 cv
388.949 534.508 388.867 534.555 388.727 534.617 cv
388.586 534.684 388.402 534.746 388.18 534.809 cv
387.953 534.871 387.695 534.926 387.402 534.977 cv
387.109 535.023 386.797 535.047 386.465 535.051 cv
385.887 535.047 385.379 534.969 384.949 534.809 cv
384.512 534.648 384.148 534.41 383.855 534.094 cv
383.555 533.777 383.332 533.383 383.184 532.902 cv
383.035 532.426 382.961 531.867 382.961 531.23 cv
382.961 530.633 383.035 530.094 383.191 529.609 cv
383.344 529.133 383.57 528.723 383.867 528.387 cv
384.16 528.051 384.516 527.793 384.93 527.613 cv
385.344 527.434 385.809 527.344 386.324 527.344 cv
386.875 527.344 387.344 527.434 387.73 527.609 cv
388.117 527.789 388.434 528.027 388.688 528.324 cv
388.934 528.625 389.117 528.977 389.234 529.375 cv
389.348 529.781 389.406 530.211 389.41 530.664 cv
cp
388.117 530.516 mo
388.133 529.84 387.98 529.309 387.664 528.926 cv
387.348 528.543 386.879 528.352 386.262 528.348 cv
385.938 528.352 385.656 528.41 385.418 528.527 cv
385.176 528.648 384.977 528.809 384.816 529.004 cv
384.652 529.203 384.527 529.434 384.441 529.695 cv
384.352 529.957 384.301 530.23 384.293 530.516 cv
cp
f
395.777 532.797 mo
395.773 533.16 395.707 533.48 395.578 533.758 cv
395.445 534.039 395.258 534.273 395.016 534.465 cv
394.77 534.66 394.477 534.805 394.141 534.902 cv
393.801 535 393.43 535.047 393.027 535.051 cv
392.773 535.047 392.535 535.027 392.313 534.992 cv
392.086 534.949 391.887 534.902 391.707 534.844 cv
391.527 534.785 391.375 534.723 391.25 534.656 cv
391.125 534.594 391.031 534.535 390.977 534.48 cv
390.918 534.43 390.879 534.359 390.855 534.262 cv
390.828 534.172 390.816 534.043 390.816 533.883 cv
390.816 533.785 390.82 533.703 390.832 533.633 cv
390.84 533.566 390.852 533.512 390.871 533.469 cv
390.883 533.43 390.906 533.398 390.934 533.379 cv
390.961 533.363 390.992 533.355 391.031 533.352 cv
391.086 533.355 391.172 533.391 391.285 533.457 cv
391.395 533.531 391.531 533.609 391.699 533.687 cv
391.859 533.773 392.051 533.848 392.277 533.918 cv
392.496 533.988 392.754 534.023 393.051 534.023 cv
393.266 534.023 393.465 534 393.645 533.953 cv
393.82 533.906 393.973 533.84 394.102 533.746 cv
394.23 533.66 394.332 533.543 394.402 533.398 cv
394.473 533.262 394.508 533.094 394.508 532.898 cv
394.508 532.703 394.457 532.539 394.355 532.402 cv
394.254 532.27 394.117 532.148 393.953 532.043 cv
393.785 531.941 393.602 531.852 393.395 531.766 cv
393.184 531.687 392.969 531.602 392.75 531.512 cv
392.531 531.426 392.316 531.324 392.105 531.211 cv
391.895 531.102 391.703 530.969 391.539 530.805 cv
391.367 530.648 391.234 530.453 391.137 530.227 cv
391.031 530.004 390.98 529.738 390.984 529.426 cv
390.98 529.152 391.035 528.887 391.145 528.633 cv
391.25 528.383 391.41 528.164 391.625 527.973 cv
391.836 527.785 392.102 527.633 392.422 527.516 cv
392.742 527.402 393.113 527.344 393.543 527.344 cv
393.727 527.344 393.914 527.359 394.102 527.391 cv
394.285 527.422 394.453 527.461 394.609 527.508 cv
394.758 527.555 394.887 527.605 394.996 527.66 cv
395.098 527.715 395.18 527.766 395.238 527.805 cv
395.289 527.852 395.324 527.887 395.348 527.914 cv
395.363 527.945 395.379 527.98 395.387 528.016 cv
395.395 528.059 395.402 528.105 395.41 528.16 cv
395.418 528.219 395.422 528.289 395.422 528.371 cv
395.422 528.461 395.418 528.539 395.41 528.602 cv
395.402 528.672 395.387 528.723 395.371 528.762 cv
395.348 528.805 395.328 528.836 395.305 528.852 cv
395.277 528.871 395.246 528.879 395.219 528.879 cv
395.168 528.879 395.102 528.852 395.016 528.793 cv
394.926 528.738 394.813 528.676 394.672 528.609 cv
394.531 528.547 394.363 528.488 394.176 528.426 cv
393.984 528.371 393.77 528.34 393.527 528.34 cv
393.305 528.34 393.113 528.367 392.949 528.414 cv
392.781 528.469 392.645 528.539 392.539 528.625 cv
392.434 528.719 392.352 528.824 392.301 528.949 cv
392.242 529.074 392.215 529.211 392.219 529.355 cv
392.215 529.559 392.266 529.727 392.371 529.863 cv
392.473 530.004 392.609 530.125 392.777 530.227 cv
392.941 530.332 393.133 530.426 393.348 530.508 cv
393.559 530.594 393.773 530.68 393.996 530.766 cv
394.215 530.855 394.434 530.957 394.652 531.062 cv
394.867 531.172 395.059 531.301 395.227 531.457 cv
395.391 531.613 395.523 531.801 395.625 532.02 cv
395.723 532.238 395.773 532.5 395.777 532.797 cv
cp
f
117.613 7.88702 mo
117.609 8.41803 117.512 8.883 117.316 9.28101 cv
117.117 9.68402 116.852 10.02 116.516 10.285 cv
116.176 10.555 115.777 10.754 115.328 10.887 cv
114.875 11.02 114.395 11.086 113.883 11.09 cv
113.531 11.086 113.207 11.059 112.91 11.004 cv
112.609 10.945 112.348 10.879 112.121 10.797 cv
111.891 10.719 111.699 10.633 111.547 10.543 cv
111.395 10.457 111.285 10.379 111.219 10.309 cv
111.148 10.242 111.098 10.145 111.074 10.02 cv
111.043 9.89502 111.031 9.711 111.031 9.46899 cv
111.031 9.30902 111.035 9.17603 111.047 9.06201 cv
111.055 8.95697 111.07 8.867 111.098 8.797 cv
111.117 8.72998 111.148 8.68402 111.191 8.65198 cv
111.227 8.62903 111.273 8.61298 111.324 8.60901 cv
111.395 8.61298 111.496 8.65601 111.633 8.73798 cv
111.762 8.828 111.934 8.922 112.145 9.02301 cv
112.352 9.12903 112.598 9.22699 112.887 9.30902 cv
113.172 9.39801 113.508 9.44098 113.891 9.43701 cv
114.141 9.44098 114.363 9.40997 114.559 9.34802 cv
114.754 9.289 114.922 9.203 115.063 9.09399 cv
115.199 8.98401 115.305 8.85199 115.379 8.69098 cv
115.449 8.53101 115.484 8.35199 115.488 8.15198 cv
115.484 7.92603 115.422 7.72998 115.301 7.56201 cv
115.172 7.40198 115.008 7.258 114.813 7.12903 cv
114.609 7.00403 114.383 6.883 114.129 6.77002 cv
113.875 6.65997 113.613 6.54303 113.344 6.414 cv
113.07 6.29303 112.809 6.14801 112.555 5.98798 cv
112.301 5.83197 112.074 5.64502 111.875 5.422 cv
111.672 5.203 111.508 4.94098 111.387 4.63702 cv
111.262 4.336 111.199 3.97699 111.203 3.55499 cv
111.199 3.07397 111.289 2.64801 111.469 2.28101 cv
111.645 1.91803 111.887 1.61298 112.195 1.367 cv
112.496 1.12903 112.855 .948975 113.27 .828003 cv
113.684 .710999 114.121 .651978 114.582 .64801 cv
114.82 .651978 115.059 .66803 115.301 .703003 cv
115.539 .742004 115.762 .79303 115.969 .85199 cv
116.176 .914001 116.359 .984009 116.523 1.05902 cv
116.68 1.14099 116.789 1.203 116.844 1.25403 cv
116.895 1.30902 116.93 1.35498 116.949 1.38702 cv
116.965 1.42603 116.98 1.47302 116.996 1.53101 cv
117.008 1.59399 117.016 1.66803 117.023 1.758 cv
117.027 1.85199 117.031 1.96503 117.031 2.09802 cv
117.031 2.25 117.027 2.37903 117.02 2.47998 cv
117.012 2.586 116.996 2.672 116.98 2.73401 cv
116.957 2.80499 116.934 2.85199 116.902 2.883 cv
116.867 2.914 116.82 2.92999 116.766 2.92999 cv
116.707 2.92999 116.617 2.89502 116.492 2.82001 cv
116.367 2.75 116.211 2.672 116.031 2.58197 cv
115.848 2.5 115.641 2.422 115.402 2.35199 cv
115.16 2.28497 114.895 2.25 114.613 2.24597 cv
114.387 2.25 114.195 2.27698 114.031 2.328 cv
113.863 2.383 113.723 2.45697 113.613 2.55103 cv
113.5 2.64801 113.418 2.76599 113.363 2.89801 cv
113.309 3.039 113.281 3.17999 113.281 3.328 cv
113.281 3.55499 113.34 3.75 113.465 3.90997 cv
113.582 4.07397 113.746 4.21899 113.957 4.34399 cv
114.16 4.47302 114.395 4.59399 114.652 4.703 cv
114.91 4.82001 115.176 4.93701 115.449 5.05902 cv
115.719 5.18701 115.98 5.328 116.242 5.48401 cv
116.5 5.64099 116.734 5.83197 116.938 6.05103 cv
117.141 6.27698 117.301 6.53497 117.426 6.83197 cv
117.547 7.12903 117.609 7.47998 117.613 7.88702 cv
cp
f
124.332 9.539 mo
124.328 9.67603 124.324 9.789 124.32 9.87903 cv
124.309 9.97302 124.301 10.051 124.289 10.109 cv
124.273 10.172 124.258 10.223 124.242 10.258 cv
124.223 10.301 124.18 10.348 124.121 10.406 cv
124.055 10.469 123.949 10.543 123.801 10.625 cv
123.648 10.715 123.477 10.793 123.285 10.855 cv
123.094 10.926 122.887 10.977 122.66 11.02 cv
122.434 11.059 122.199 11.078 121.965 11.082 cv
121.426 11.078 120.953 11 120.539 10.832 cv
120.125 10.668 119.777 10.422 119.5 10.098 cv
119.215 9.77301 119.004 9.37903 118.863 8.90997 cv
118.723 8.44501 118.652 7.90601 118.652 7.30103 cv
118.652 6.60498 118.738 6.008 118.91 5.5 cv
119.082 4.99597 119.324 4.57397 119.641 4.242 cv
119.949 3.90997 120.316 3.664 120.746 3.5 cv
121.168 3.34003 121.637 3.258 122.148 3.258 cv
122.355 3.258 122.559 3.27698 122.762 3.31201 cv
122.957 3.35199 123.145 3.40198 123.32 3.461 cv
123.492 3.52698 123.648 3.59802 123.789 3.672 cv
123.926 3.75403 124.023 3.82001 124.082 3.875 cv
124.137 3.93402 124.176 3.97998 124.203 4.01599 cv
124.223 4.05902 124.242 4.10901 124.258 4.16803 cv
124.27 4.23401 124.281 4.31201 124.289 4.39801 cv
124.297 4.492 124.301 4.60199 124.301 4.72998 cv
124.301 5.03497 124.273 5.24597 124.223 5.367 cv
124.168 5.48798 124.102 5.55103 124.02 5.547 cv
123.93 5.55103 123.836 5.51599 123.738 5.44098 cv
123.637 5.37097 123.52 5.289 123.387 5.19897 cv
123.254 5.11298 123.094 5.03101 122.906 4.95697 cv
122.719 4.88702 122.492 4.85199 122.234 4.84802 cv
121.723 4.85199 121.336 5.047 121.066 5.43701 cv
120.793 5.828 120.656 6.40198 120.66 7.15997 cv
120.656 7.53497 120.691 7.867 120.762 8.15198 cv
120.828 8.43701 120.926 8.67603 121.063 8.867 cv
121.191 9.06201 121.359 9.20697 121.563 9.30103 cv
121.762 9.39801 121.992 9.44501 122.258 9.44501 cv
122.523 9.44501 122.758 9.40601 122.957 9.32397 cv
123.148 9.24597 123.316 9.15601 123.465 9.05499 cv
123.605 8.95697 123.73 8.867 123.832 8.78497 cv
123.93 8.70697 124.012 8.66803 124.082 8.664 cv
124.125 8.66803 124.164 8.67999 124.199 8.703 cv
124.227 8.72998 124.25 8.77698 124.273 8.84802 cv
124.289 8.91803 124.305 9.008 124.316 9.117 cv
124.324 9.22699 124.328 9.367 124.332 9.539 cv
cp
f
131.602 10.668 mo
131.598 10.746 131.57 10.801 131.523 10.84 cv
131.469 10.883 131.387 10.91 131.277 10.93 cv
131.16 10.945 130.996 10.957 130.781 10.957 cv
130.543 10.957 130.371 10.945 130.27 10.93 cv
130.16 10.91 130.086 10.883 130.047 10.84 cv
130 10.801 129.98 10.746 129.98 10.668 cv
129.98 10.117 li
129.691 10.426 129.363 10.664 129 10.832 cv
128.633 11.004 128.227 11.086 127.781 11.09 cv
127.41 11.086 127.07 11.039 126.762 10.945 cv
126.453 10.852 126.188 10.711 125.961 10.516 cv
125.734 10.328 125.559 10.094 125.434 9.81201 cv
125.309 9.53497 125.246 9.20697 125.25 8.828 cv
125.246 8.42999 125.324 8.078 125.484 7.77301 cv
125.641 7.47699 125.879 7.22998 126.195 7.03497 cv
126.508 6.84399 126.898 6.69897 127.367 6.60199 cv
127.836 6.51202 128.379 6.46503 128.996 6.461 cv
129.676 6.461 li
129.676 6.039 li
129.676 5.82397 129.652 5.633 129.609 5.46899 cv
129.563 5.30902 129.488 5.172 129.391 5.05902 cv
129.285 4.953 129.152 4.87097 128.984 4.81598 cv
128.813 4.76599 128.602 4.742 128.359 4.73798 cv
128.027 4.742 127.734 4.77698 127.48 4.84802 cv
127.219 4.922 126.992 5.00403 126.797 5.09003 cv
126.598 5.18402 126.434 5.26202 126.305 5.33197 cv
126.168 5.40601 126.059 5.44501 125.98 5.44098 cv
125.918 5.44501 125.867 5.42603 125.828 5.38702 cv
125.781 5.35199 125.746 5.30103 125.719 5.22998 cv
125.688 5.16803 125.664 5.08197 125.652 4.97998 cv
125.633 4.883 125.625 4.77301 125.629 4.65198 cv
125.625 4.492 125.641 4.367 125.668 4.27002 cv
125.691 4.17999 125.738 4.09399 125.816 4.01599 cv
125.887 3.94098 126.016 3.85901 126.199 3.77002 cv
126.379 3.67999 126.59 3.59399 126.836 3.51599 cv
127.078 3.43701 127.348 3.375 127.637 3.32397 cv
127.926 3.27698 128.223 3.25403 128.531 3.25 cv
129.074 3.25403 129.539 3.30499 129.926 3.40997 cv
130.313 3.52002 130.633 3.68402 130.883 3.90198 cv
131.133 4.12097 131.313 4.40601 131.43 4.75403 cv
131.539 5.10498 131.598 5.52002 131.602 5.992 cv
cp
129.676 7.69098 mo
128.926 7.69098 li
128.609 7.69501 128.34 7.71899 128.117 7.76202 cv
127.891 7.81201 127.707 7.883 127.57 7.97302 cv
127.426 8.07001 127.324 8.18402 127.262 8.31201 cv
127.195 8.44897 127.16 8.59802 127.164 8.76599 cv
127.16 9.05902 127.254 9.289 127.441 9.453 cv
127.625 9.62097 127.883 9.703 128.211 9.703 cv
128.484 9.703 128.734 9.633 128.969 9.492 cv
129.195 9.35199 129.434 9.14801 129.676 8.875 cv
cp
f
135.527 10.645 mo
135.523 10.699 135.508 10.742 135.48 10.781 cv
135.445 10.82 135.391 10.855 135.32 10.879 cv
135.242 10.906 135.145 10.922 135.02 10.937 cv
134.895 10.949 134.734 10.957 134.547 10.957 cv
134.352 10.957 134.195 10.949 134.07 10.937 cv
133.945 10.922 133.844 10.906 133.77 10.879 cv
133.691 10.855 133.637 10.82 133.609 10.781 cv
133.574 10.742 133.559 10.699 133.563 10.645 cv
133.563 .39801 li
133.559 .348022 133.574 .301025 133.609 .257996 cv
133.637 .218994 133.691 .184021 133.77 .151978 cv
133.844 .125 133.945 .10498 134.07 .0859985 cv
134.195 .0739746 134.352 .065979 134.547 .0620117 cv
134.734 .065979 134.895 .0739746 135.02 .0859985 cv
135.145 .10498 135.242 .125 135.32 .151978 cv
135.391 .184021 135.445 .218994 135.48 .257996 cv
135.508 .301025 135.523 .348022 135.527 .39801 cv
cp
f
139.5 10.645 mo
139.496 10.699 139.48 10.742 139.453 10.781 cv
139.418 10.82 139.363 10.855 139.293 10.879 cv
139.215 10.906 139.117 10.922 138.992 10.937 cv
138.867 10.949 138.707 10.957 138.52 10.957 cv
138.324 10.957 138.168 10.949 138.043 10.937 cv
137.918 10.922 137.816 10.906 137.742 10.879 cv
137.664 10.855 137.609 10.82 137.582 10.781 cv
137.547 10.742 137.531 10.699 137.535 10.645 cv
137.535 3.711 li
137.531 3.65997 137.547 3.61298 137.582 3.57397 cv
137.609 3.53497 137.664 3.50403 137.742 3.47302 cv
137.816 3.44897 137.918 3.42603 138.043 3.40601 cv
138.168 3.39502 138.324 3.38702 138.52 3.383 cv
138.707 3.38702 138.867 3.39502 138.992 3.40601 cv
139.117 3.42603 139.215 3.44897 139.293 3.47302 cv
139.363 3.50403 139.418 3.53497 139.453 3.57397 cv
139.48 3.61298 139.496 3.65997 139.5 3.711 cv
cp
139.648 1.34003 mo
139.648 1.73798 139.566 2.01202 139.406 2.15997 cv
139.242 2.31201 138.945 2.38702 138.512 2.383 cv
138.066 2.38702 137.766 2.31201 137.617 2.16803 cv
137.461 2.02301 137.387 1.76202 137.387 1.37903 cv
137.387 .984009 137.465 .710999 137.625 .559021 cv
137.781 .406006 138.082 .328003 138.527 .328003 cv
138.961 .328003 139.258 .401978 139.414 .551025 cv
139.57 .698975 139.648 .965027 139.648 1.34003 cv
cp
f
148.102 10.645 mo
148.098 10.699 148.082 10.742 148.055 10.781 cv
148.02 10.82 147.969 10.855 147.898 10.879 cv
147.824 10.906 147.723 10.922 147.598 10.937 cv
147.469 10.949 147.313 10.957 147.129 10.957 cv
146.934 10.957 146.773 10.949 146.648 10.937 cv
146.52 10.922 146.418 10.906 146.348 10.879 cv
146.27 10.855 146.219 10.82 146.191 10.781 cv
146.156 10.742 146.141 10.699 146.145 10.645 cv
146.145 6.67999 li
146.141 6.34399 146.117 6.078 146.07 5.883 cv
146.02 5.69098 145.945 5.52698 145.855 5.39099 cv
145.762 5.25403 145.645 5.14801 145.496 5.07001 cv
145.348 4.99597 145.172 4.95697 144.977 4.95697 cv
144.723 4.95697 144.473 5.05103 144.219 5.22998 cv
143.965 5.414 143.699 5.67603 143.426 6.02301 cv
143.426 10.645 li
143.422 10.699 143.406 10.742 143.379 10.781 cv
143.344 10.82 143.289 10.855 143.219 10.879 cv
143.141 10.906 143.043 10.922 142.918 10.937 cv
142.793 10.949 142.633 10.957 142.445 10.957 cv
142.25 10.957 142.094 10.949 141.969 10.937 cv
141.844 10.922 141.742 10.906 141.668 10.879 cv
141.59 10.855 141.535 10.82 141.508 10.781 cv
141.473 10.742 141.457 10.699 141.461 10.645 cv
141.461 3.69501 li
141.457 3.64801 141.473 3.60199 141.5 3.55902 cv
141.523 3.52301 141.57 3.492 141.641 3.461 cv
141.707 3.43701 141.793 3.41803 141.902 3.40198 cv
142.008 3.39502 142.141 3.38702 142.305 3.383 cv
142.469 3.38702 142.605 3.39502 142.715 3.40198 cv
142.82 3.41803 142.906 3.43701 142.969 3.461 cv
143.027 3.492 143.07 3.52301 143.098 3.55902 cv
143.121 3.60199 143.133 3.64801 143.137 3.69501 cv
143.137 4.49597 li
143.52 4.086 143.91 3.77301 144.309 3.56201 cv
144.703 3.35498 145.121 3.25403 145.555 3.25 cv
146.023 3.25403 146.422 3.33197 146.75 3.48401 cv
147.074 3.64502 147.336 3.85498 147.535 4.12097 cv
147.734 4.39099 147.879 4.703 147.969 5.05902 cv
148.055 5.41803 148.098 5.84802 148.102 6.35199 cv
cp
f
156.297 4.17603 mo
156.293 4.42999 156.266 4.61298 156.211 4.72998 cv
156.152 4.85199 156.082 4.90997 156.004 4.90997 cv
155.184 4.90997 li
155.297 5.03497 155.379 5.17999 155.43 5.336 cv
155.477 5.49597 155.5 5.65997 155.504 5.828 cv
155.5 6.23798 155.434 6.59802 155.301 6.90997 cv
155.164 7.22699 154.969 7.492 154.719 7.703 cv
154.465 7.922 154.164 8.086 153.809 8.19501 cv
153.449 8.31201 153.051 8.367 152.621 8.36298 cv
152.395 8.367 152.184 8.34003 151.98 8.28101 cv
151.777 8.22998 151.621 8.16803 151.512 8.09003 cv
151.449 8.15997 151.391 8.23798 151.344 8.33197 cv
151.293 8.42603 151.27 8.53101 151.273 8.64099 cv
151.27 8.797 151.336 8.91803 151.469 9.01202 cv
151.598 9.10901 151.785 9.164 152.027 9.172 cv
153.719 9.23401 li
154.113 9.25 154.465 9.30902 154.773 9.40198 cv
155.082 9.50403 155.344 9.63702 155.555 9.80902 cv
155.766 9.98401 155.926 10.195 156.035 10.437 cv
156.145 10.684 156.199 10.957 156.203 11.27 cv
156.199 11.605 156.125 11.93 155.977 12.238 cv
155.828 12.539 155.602 12.801 155.301 13.027 cv
154.996 13.246 154.617 13.426 154.164 13.559 cv
153.707 13.687 153.176 13.75 152.574 13.754 cv
151.977 13.75 151.473 13.703 151.055 13.613 cv
150.637 13.516 150.293 13.387 150.027 13.223 cv
149.758 13.055 149.563 12.855 149.445 12.629 cv
149.32 12.395 149.262 12.141 149.262 11.867 cv
149.262 11.695 149.281 11.535 149.328 11.379 cv
149.367 11.223 149.434 11.07 149.523 10.93 cv
149.605 10.785 149.711 10.652 149.836 10.52 cv
149.961 10.391 150.102 10.266 150.266 10.145 cv
150.039 10.031 149.867 9.87097 149.746 9.65997 cv
149.625 9.45697 149.566 9.22998 149.566 8.98401 cv
149.566 8.68402 149.633 8.40601 149.773 8.14801 cv
149.91 7.89801 150.094 7.66803 150.32 7.46503 cv
150.137 7.28497 149.992 7.07001 149.883 6.81201 cv
149.773 6.56201 149.719 6.242 149.723 5.85901 cv
149.719 5.45697 149.789 5.09802 149.934 4.77301 cv
150.074 4.45697 150.273 4.18701 150.531 3.96503 cv
150.785 3.74597 151.09 3.57397 151.441 3.45697 cv
151.793 3.34003 152.184 3.28101 152.613 3.28101 cv
152.832 3.28101 153.039 3.297 153.238 3.32001 cv
153.438 3.35199 153.625 3.38702 153.797 3.42999 cv
156.004 3.42999 li
156.086 3.43402 156.156 3.492 156.215 3.60199 cv
156.266 3.71899 156.293 3.90997 156.297 4.17603 cv
cp
153.781 5.82001 mo
153.777 5.44897 153.676 5.15997 153.469 4.94897 cv
153.258 4.74597 152.965 4.64099 152.59 4.63702 cv
152.395 4.64099 152.223 4.672 152.082 4.73401 cv
151.934 4.80103 151.813 4.89099 151.719 5 cv
151.617 5.11298 151.547 5.242 151.504 5.39099 cv
151.453 5.539 151.43 5.69501 151.434 5.85199 cv
151.43 6.211 151.535 6.48798 151.746 6.69098 cv
151.953 6.89801 152.242 7.00403 152.613 7 cv
152.809 7.00403 152.977 6.97302 153.125 6.90601 cv
153.266 6.84802 153.387 6.76202 153.488 6.64801 cv
153.582 6.54303 153.656 6.414 153.707 6.27002 cv
153.754 6.12903 153.777 5.97998 153.781 5.82001 cv
cp
154.242 11.371 mo
154.242 11.133 154.148 10.957 153.961 10.832 cv
153.773 10.711 153.516 10.641 153.188 10.629 cv
151.793 10.59 li
151.656 10.691 151.547 10.785 151.469 10.875 cv
151.387 10.965 151.324 11.051 151.277 11.137 cv
151.227 11.219 151.191 11.301 151.18 11.379 cv
151.16 11.457 151.152 11.535 151.156 11.621 cv
151.152 11.875 151.285 12.074 151.547 12.211 cv
151.809 12.344 152.18 12.41 152.66 12.414 cv
152.953 12.41 153.199 12.379 153.406 12.324 cv
153.605 12.262 153.77 12.184 153.898 12.086 cv
154.02 11.984 154.109 11.875 154.164 11.754 cv
154.215 11.633 154.242 11.504 154.242 11.371 cv
cp
f
162.492 8.67999 mo
162.488 9.078 162.414 9.42603 162.27 9.72699 cv
162.121 10.027 161.914 10.281 161.645 10.48 cv
161.371 10.687 161.051 10.836 160.684 10.937 cv
160.316 11.035 159.914 11.086 159.484 11.09 cv
159.219 11.086 158.973 11.066 158.738 11.031 cv
158.504 10.988 158.293 10.941 158.105 10.883 cv
157.918 10.824 157.762 10.762 157.637 10.699 cv
157.512 10.637 157.418 10.578 157.363 10.523 cv
157.305 10.469 157.262 10.387 157.234 10.27 cv
157.199 10.156 157.184 9.97998 157.188 9.75 cv
157.184 9.60199 157.191 9.47998 157.203 9.38702 cv
157.211 9.297 157.227 9.22699 157.25 9.16803 cv
157.27 9.117 157.293 9.078 157.328 9.05902 cv
157.355 9.04303 157.395 9.03497 157.441 9.03101 cv
157.496 9.03497 157.582 9.06598 157.695 9.12903 cv
157.805 9.19501 157.941 9.27002 158.113 9.34399 cv
158.277 9.42603 158.473 9.49597 158.691 9.56201 cv
158.91 9.633 159.16 9.66803 159.445 9.664 cv
159.621 9.66803 159.777 9.64801 159.918 9.60901 cv
160.051 9.57397 160.172 9.52301 160.277 9.453 cv
160.375 9.38702 160.449 9.30103 160.504 9.19501 cv
160.551 9.09399 160.578 8.97302 160.582 8.836 cv
160.578 8.67999 160.531 8.547 160.438 8.43701 cv
160.344 8.328 160.215 8.22998 160.059 8.14502 cv
159.895 8.06201 159.715 7.98401 159.52 7.90997 cv
159.316 7.84003 159.113 7.76202 158.902 7.66803 cv
158.691 7.58197 158.484 7.47998 158.289 7.36298 cv
158.086 7.25403 157.906 7.11298 157.75 6.94501 cv
157.586 6.78101 157.461 6.58197 157.367 6.34399 cv
157.273 6.11298 157.227 5.83197 157.227 5.5 cv
157.227 5.172 157.289 4.867 157.418 4.586 cv
157.547 4.31201 157.734 4.07397 157.98 3.875 cv
158.223 3.67999 158.52 3.52698 158.871 3.414 cv
159.219 3.30902 159.613 3.25403 160.055 3.25 cv
160.27 3.25403 160.48 3.27002 160.688 3.297 cv
160.891 3.33197 161.078 3.37097 161.246 3.414 cv
161.41 3.46503 161.551 3.51599 161.668 3.56598 cv
161.781 3.625 161.863 3.672 161.914 3.70697 cv
161.961 3.75 161.996 3.789 162.02 3.82397 cv
162.039 3.867 162.051 3.914 162.063 3.96503 cv
162.07 4.02002 162.082 4.086 162.09 4.164 cv
162.098 4.25 162.102 4.34802 162.102 4.46503 cv
162.102 4.60498 162.098 4.72302 162.09 4.80902 cv
162.082 4.90198 162.066 4.97302 162.051 5.02002 cv
162.031 5.07397 162.008 5.10901 161.98 5.125 cv
161.945 5.14801 161.91 5.15601 161.871 5.15198 cv
161.82 5.15601 161.746 5.12903 161.652 5.07001 cv
161.551 5.02002 161.43 4.961 161.281 4.89502 cv
161.133 4.836 160.961 4.77698 160.766 4.71899 cv
160.57 4.66803 160.348 4.64099 160.102 4.63702 cv
159.922 4.64099 159.77 4.65997 159.641 4.69098 cv
159.508 4.72998 159.398 4.78101 159.32 4.84802 cv
159.234 4.91803 159.172 4.99597 159.133 5.086 cv
159.086 5.17999 159.066 5.27698 159.07 5.37903 cv
159.066 5.539 159.117 5.67603 159.219 5.78101 cv
159.316 5.89502 159.445 5.98798 159.609 6.07001 cv
159.77 6.15601 159.953 6.23401 160.16 6.30499 cv
160.363 6.37903 160.57 6.461 160.781 6.54303 cv
160.988 6.633 161.195 6.72998 161.406 6.84399 cv
161.609 6.95697 161.793 7.09802 161.953 7.26202 cv
162.113 7.42999 162.242 7.62903 162.344 7.85901 cv
162.438 8.09399 162.488 8.367 162.492 8.67999 cv
cp
f
174.602 7.09802 mo
174.598 7.69501 174.52 8.23798 174.367 8.72302 cv
174.207 9.21503 173.973 9.633 173.656 9.98401 cv
173.34 10.336 172.941 10.609 172.465 10.801 cv
171.984 10.992 171.426 11.086 170.789 11.09 cv
170.168 11.086 169.629 11.004 169.176 10.832 cv
168.715 10.664 168.336 10.414 168.039 10.086 cv
167.734 9.76202 167.512 9.35901 167.367 8.87903 cv
167.223 8.40198 167.152 7.85498 167.152 7.23798 cv
167.152 6.64801 167.23 6.10901 167.387 5.617 cv
167.543 5.12903 167.781 4.70697 168.102 4.35498 cv
168.418 4.008 168.813 3.73401 169.289 3.539 cv
169.762 3.34802 170.32 3.25403 170.961 3.25 cv
171.586 3.25403 172.125 3.336 172.582 3.50403 cv
173.039 3.67603 173.418 3.92603 173.715 4.25 cv
174.012 4.578 174.234 4.97998 174.383 5.45697 cv
174.527 5.93701 174.598 6.48401 174.602 7.09802 cv
cp
172.582 7.17603 mo
172.578 6.84003 172.551 6.52301 172.5 6.22998 cv
172.441 5.94501 172.348 5.69501 172.223 5.47998 cv
172.09 5.27002 171.918 5.10199 171.707 4.97998 cv
171.488 4.86298 171.219 4.80499 170.891 4.80103 cv
170.602 4.80499 170.348 4.85901 170.129 4.961 cv
169.91 5.07001 169.73 5.22699 169.59 5.42999 cv
169.449 5.63702 169.344 5.883 169.273 6.16803 cv
169.203 6.461 169.168 6.789 169.168 7.15198 cv
169.168 7.5 169.195 7.81598 169.254 8.10199 cv
169.309 8.39502 169.402 8.64502 169.531 8.85498 cv
169.656 9.07001 169.828 9.23401 170.051 9.34802 cv
170.266 9.46899 170.535 9.52698 170.859 9.52301 cv
171.152 9.52698 171.41 9.47302 171.633 9.36298 cv
171.848 9.258 172.027 9.10498 172.168 8.89801 cv
172.309 8.69897 172.41 8.453 172.48 8.164 cv
172.543 7.87903 172.578 7.55103 172.582 7.17603 cv
cp
f
180.355 1.04303 mo
180.352 1.19501 180.348 1.31598 180.34 1.40601 cv
180.328 1.5 180.313 1.57001 180.293 1.617 cv
180.27 1.66803 180.246 1.703 180.223 1.71899 cv
180.195 1.73798 180.168 1.74597 180.137 1.74597 cv
180.098 1.74597 180.055 1.73798 180.016 1.71899 cv
179.969 1.703 179.914 1.68402 179.852 1.65997 cv
179.781 1.64099 179.707 1.62097 179.621 1.60199 cv
179.531 1.586 179.426 1.578 179.309 1.57397 cv
179.164 1.578 179.043 1.59802 178.945 1.64099 cv
178.844 1.68701 178.762 1.758 178.695 1.85199 cv
178.625 1.94897 178.574 2.07397 178.547 2.22699 cv
178.512 2.37903 178.496 2.56598 178.5 2.789 cv
178.5 3.42999 li
179.77 3.42999 li
179.813 3.43402 179.855 3.44501 179.898 3.46899 cv
179.934 3.49597 179.969 3.539 179.996 3.59802 cv
180.02 3.65997 180.039 3.742 180.055 3.84399 cv
180.066 3.94501 180.07 4.07397 180.074 4.22302 cv
180.07 4.51202 180.047 4.71503 179.996 4.836 cv
179.941 4.961 179.863 5.02301 179.77 5.02002 cv
178.5 5.02002 li
178.5 10.645 li
178.496 10.699 178.48 10.742 178.453 10.781 cv
178.418 10.82 178.367 10.855 178.297 10.879 cv
178.223 10.906 178.121 10.922 177.992 10.937 cv
177.859 10.949 177.699 10.957 177.516 10.957 cv
177.328 10.957 177.172 10.949 177.047 10.937 cv
176.918 10.922 176.816 10.906 176.742 10.879 cv
176.664 10.855 176.613 10.82 176.586 10.781 cv
176.555 10.742 176.539 10.699 176.543 10.645 cv
176.543 5.02002 li
175.672 5.02002 li
175.57 5.02301 175.496 4.961 175.449 4.836 cv
175.398 4.71503 175.371 4.51202 175.375 4.22302 cv
175.371 4.07397 175.379 3.94501 175.395 3.84399 cv
175.406 3.742 175.426 3.65997 175.449 3.59802 cv
175.473 3.539 175.504 3.49597 175.543 3.46899 cv
175.582 3.44501 175.625 3.43402 175.68 3.42999 cv
176.543 3.42999 li
176.543 2.84399 li
176.539 2.375 176.586 1.961 176.684 1.60199 cv
176.773 1.24597 176.922 .948975 177.125 .715027 cv
177.324 .47998 177.578 .304993 177.887 .179993 cv
178.195 .0620117 178.559 0 178.984 0 cv
179.18 0 179.371 .0200195 179.559 .0510254 cv
179.738 .0900269 179.883 .125 179.988 .159973 cv
180.09 .203003 180.16 .237976 180.199 .27002 cv
180.234 .304993 180.266 .35498 180.289 .41803 cv
180.313 .484009 180.328 .565979 180.34 .66803 cv
180.348 .77002 180.352 .89502 180.355 1.04303 cv
cp
f
188.926 9.961 mo
188.926 10.187 188.91 10.363 188.883 10.484 cv
188.852 10.609 188.813 10.695 188.77 10.742 cv
188.719 10.793 188.652 10.836 188.563 10.875 cv
188.469 10.914 188.359 10.945 188.242 10.977 cv
188.117 11 187.984 11.023 187.844 11.043 cv
187.699 11.055 187.559 11.062 187.414 11.066 cv
187.023 11.062 186.684 11.012 186.398 10.918 cv
186.113 10.816 185.879 10.668 185.691 10.461 cv
185.504 10.258 185.363 10 185.277 9.68701 cv
185.184 9.37903 185.141 9.008 185.145 8.578 cv
185.145 5.02002 li
184.313 5.02002 li
184.211 5.02301 184.137 4.961 184.086 4.836 cv
184.031 4.71503 184.004 4.51202 184.008 4.22302 cv
184.004 4.07397 184.012 3.94501 184.027 3.84399 cv
184.039 3.742 184.059 3.65997 184.086 3.59802 cv
184.109 3.539 184.141 3.49597 184.184 3.46899 cv
184.219 3.44501 184.266 3.43402 184.32 3.42999 cv
185.145 3.42999 li
185.145 1.87903 li
185.141 1.83197 185.156 1.78497 185.188 1.73798 cv
185.215 1.69897 185.266 1.664 185.344 1.633 cv
185.418 1.60901 185.52 1.586 185.648 1.57001 cv
185.773 1.55902 185.93 1.55499 186.121 1.55103 cv
186.309 1.55499 186.469 1.55902 186.598 1.57001 cv
186.723 1.586 186.824 1.60901 186.898 1.633 cv
186.969 1.664 187.02 1.69897 187.055 1.73798 cv
187.082 1.78497 187.098 1.83197 187.102 1.87903 cv
187.102 3.42999 li
188.613 3.42999 li
188.664 3.43402 188.711 3.44501 188.75 3.46899 cv
188.789 3.49597 188.82 3.539 188.848 3.59802 cv
188.871 3.65997 188.891 3.742 188.906 3.84399 cv
188.918 3.94501 188.926 4.07397 188.926 4.22302 cv
188.926 4.51202 188.898 4.71503 188.848 4.836 cv
188.793 4.961 188.719 5.02301 188.621 5.02002 cv
187.102 5.02002 li
187.102 8.28497 li
187.098 8.664 187.156 8.94897 187.281 9.13702 cv
187.398 9.328 187.613 9.422 187.918 9.422 cv
188.02 9.422 188.113 9.414 188.199 9.39502 cv
188.281 9.37903 188.355 9.35901 188.422 9.33197 cv
188.484 9.31201 188.539 9.289 188.586 9.27002 cv
188.629 9.25403 188.668 9.24597 188.707 9.242 cv
188.734 9.24597 188.766 9.25403 188.797 9.27002 cv
188.824 9.289 188.844 9.328 188.863 9.37903 cv
188.875 9.43701 188.891 9.51202 188.906 9.60199 cv
188.918 9.69897 188.926 9.81598 188.926 9.961 cv
cp
f
196.988 10.645 mo
196.984 10.699 196.969 10.742 196.941 10.781 cv
196.906 10.82 196.855 10.855 196.785 10.879 cv
196.711 10.906 196.609 10.922 196.484 10.937 cv
196.355 10.949 196.199 10.957 196.016 10.957 cv
195.82 10.957 195.66 10.949 195.535 10.937 cv
195.406 10.922 195.305 10.906 195.234 10.879 cv
195.156 10.855 195.105 10.82 195.078 10.781 cv
195.043 10.742 195.027 10.699 195.031 10.645 cv
195.031 6.67999 li
195.027 6.34399 195.004 6.078 194.957 5.883 cv
194.906 5.69098 194.832 5.52698 194.742 5.39099 cv
194.648 5.25403 194.531 5.14801 194.383 5.07001 cv
194.234 4.99597 194.059 4.95697 193.863 4.95697 cv
193.609 4.95697 193.359 5.05103 193.105 5.22998 cv
192.852 5.414 192.586 5.67603 192.313 6.02301 cv
192.313 10.645 li
192.309 10.699 192.293 10.742 192.266 10.781 cv
192.23 10.82 192.176 10.855 192.105 10.879 cv
192.027 10.906 191.93 10.922 191.805 10.937 cv
191.68 10.949 191.52 10.957 191.332 10.957 cv
191.137 10.957 190.98 10.949 190.855 10.937 cv
190.73 10.922 190.629 10.906 190.555 10.879 cv
190.477 10.855 190.422 10.82 190.395 10.781 cv
190.359 10.742 190.344 10.699 190.348 10.645 cv
190.348 .39801 li
190.344 .348022 190.359 .301025 190.395 .257996 cv
190.422 .218994 190.477 .184021 190.555 .151978 cv
190.629 .125 190.73 .10498 190.855 .0859985 cv
190.98 .0739746 191.137 .065979 191.332 .0620117 cv
191.52 .065979 191.68 .0739746 191.805 .0859985 cv
191.93 .10498 192.027 .125 192.105 .151978 cv
192.176 .184021 192.23 .218994 192.266 .257996 cv
192.293 .301025 192.309 .348022 192.313 .39801 cv
192.313 4.23798 li
192.648 3.90997 192.992 3.664 193.344 3.49597 cv
193.691 3.336 194.059 3.25403 194.441 3.25 cv
194.91 3.25403 195.309 3.33197 195.637 3.48401 cv
195.961 3.64502 196.223 3.85498 196.422 4.125 cv
196.621 4.39502 196.766 4.711 196.855 5.07001 cv
196.941 5.43402 196.984 5.87097 196.988 6.383 cv
cp
f
205.277 6.96899 mo
205.273 7.20697 205.223 7.383 205.117 7.49597 cv
205.008 7.61298 204.859 7.672 204.68 7.66803 cv
200.445 7.66803 li
200.441 7.96899 200.477 8.23798 200.551 8.47699 cv
200.617 8.71899 200.73 8.922 200.887 9.09003 cv
201.039 9.26202 201.234 9.39099 201.477 9.47699 cv
201.715 9.56598 202.004 9.60901 202.348 9.60901 cv
202.688 9.60901 202.988 9.586 203.25 9.53497 cv
203.508 9.48798 203.734 9.43402 203.926 9.37097 cv
204.113 9.31201 204.27 9.258 204.398 9.20697 cv
204.52 9.15997 204.621 9.13702 204.703 9.133 cv
204.746 9.13702 204.785 9.14502 204.82 9.15997 cv
204.848 9.17999 204.875 9.211 204.895 9.258 cv
204.914 9.30499 204.926 9.37097 204.938 9.45697 cv
204.941 9.54303 204.945 9.65198 204.949 9.78101 cv
204.945 9.89801 204.945 9.99597 204.941 10.074 cv
204.934 10.156 204.926 10.223 204.918 10.277 cv
204.906 10.336 204.891 10.387 204.871 10.422 cv
204.852 10.465 204.824 10.5 204.793 10.535 cv
204.758 10.574 204.664 10.625 204.516 10.684 cv
204.359 10.75 204.168 10.812 203.938 10.867 cv
203.699 10.93 203.43 10.977 203.133 11.023 cv
202.828 11.062 202.508 11.086 202.168 11.09 cv
201.547 11.086 201.004 11.012 200.543 10.855 cv
200.074 10.703 199.688 10.465 199.379 10.148 cv
199.063 9.83197 198.828 9.43402 198.68 8.94897 cv
198.523 8.46899 198.449 7.90198 198.453 7.24597 cv
198.449 6.633 198.527 6.07397 198.691 5.578 cv
198.848 5.08197 199.082 4.664 199.395 4.31598 cv
199.699 3.97302 200.074 3.70697 200.512 3.52301 cv
200.949 3.34399 201.441 3.25403 201.996 3.25 cv
202.574 3.25403 203.074 3.34003 203.488 3.508 cv
203.902 3.68402 204.238 3.922 204.504 4.22302 cv
204.766 4.52698 204.961 4.88702 205.09 5.30103 cv
205.211 5.71899 205.273 6.16803 205.277 6.65601 cv
cp
203.375 6.40601 mo
203.387 5.85498 203.277 5.422 203.043 5.10901 cv
202.809 4.797 202.441 4.64099 201.949 4.63702 cv
201.699 4.64099 201.484 4.68701 201.301 4.77698 cv
201.113 4.875 200.961 5 200.84 5.15601 cv
200.715 5.31598 200.621 5.50403 200.559 5.71899 cv
200.492 5.93402 200.453 6.164 200.445 6.40601 cv
cp
f
216.379 1.66803 mo
216.375 1.828 216.371 1.95697 216.359 2.06201 cv
216.344 2.172 216.32 2.258 216.297 2.31598 cv
216.266 2.37903 216.234 2.42603 216.199 2.453 cv
216.16 2.48798 216.117 2.50403 216.074 2.5 cv
212.777 2.5 li
212.777 5.21503 li
215.871 5.21503 li
215.914 5.21503 215.957 5.22998 215.996 5.25403 cv
216.031 5.28497 216.063 5.328 216.094 5.38702 cv
216.121 5.44897 216.141 5.53101 216.156 5.633 cv
216.164 5.73798 216.172 5.867 216.176 6.02301 cv
216.172 6.17999 216.164 6.31201 216.156 6.414 cv
216.141 6.52301 216.121 6.60901 216.094 6.672 cv
216.063 6.742 216.031 6.789 215.996 6.81598 cv
215.957 6.84802 215.914 6.86298 215.871 6.85901 cv
212.777 6.85901 li
212.777 10.613 li
212.773 10.672 212.758 10.723 212.73 10.762 cv
212.695 10.809 212.641 10.844 212.563 10.867 cv
212.48 10.898 212.375 10.918 212.246 10.934 cv
212.113 10.949 211.945 10.957 211.75 10.957 cv
211.547 10.957 211.383 10.949 211.254 10.934 cv
211.117 10.918 211.012 10.898 210.938 10.867 cv
210.855 10.844 210.801 10.809 210.77 10.762 cv
210.734 10.723 210.715 10.672 210.719 10.613 cv
210.719 1.47302 li
210.715 1.24597 210.773 1.08197 210.895 .97699 cv
211.008 .879028 211.152 .828003 211.328 .823975 cv
216.074 .823975 li
216.117 .828003 216.16 .840027 216.199 .867004 cv
216.234 .89801 216.266 .945007 216.297 1.008 cv
216.32 1.07397 216.344 1.164 216.359 1.27002 cv
216.371 1.383 216.375 1.51599 216.379 1.66803 cv
cp
f
219.891 10.645 mo
219.887 10.699 219.871 10.742 219.844 10.781 cv
219.809 10.82 219.754 10.855 219.684 10.879 cv
219.605 10.906 219.508 10.922 219.383 10.937 cv
219.258 10.949 219.098 10.957 218.91 10.957 cv
218.715 10.957 218.559 10.949 218.434 10.937 cv
218.309 10.922 218.207 10.906 218.133 10.879 cv
218.055 10.855 218 10.82 217.973 10.781 cv
217.938 10.742 217.922 10.699 217.926 10.645 cv
217.926 3.711 li
217.922 3.65997 217.938 3.61298 217.973 3.57397 cv
218 3.53497 218.055 3.50403 218.133 3.47302 cv
218.207 3.44897 218.309 3.42603 218.434 3.40601 cv
218.559 3.39502 218.715 3.38702 218.91 3.383 cv
219.098 3.38702 219.258 3.39502 219.383 3.40601 cv
219.508 3.42603 219.605 3.44897 219.684 3.47302 cv
219.754 3.50403 219.809 3.53497 219.844 3.57397 cv
219.871 3.61298 219.887 3.65997 219.891 3.711 cv
cp
220.039 1.34003 mo
220.039 1.73798 219.957 2.01202 219.797 2.15997 cv
219.633 2.31201 219.336 2.38702 218.902 2.383 cv
218.457 2.38702 218.156 2.31201 218.008 2.16803 cv
217.852 2.02301 217.777 1.76202 217.777 1.37903 cv
217.777 .984009 217.855 .710999 218.016 .559021 cv
218.172 .406006 218.473 .328003 218.918 .328003 cv
219.352 .328003 219.648 .401978 219.805 .551025 cv
219.961 .698975 220.039 .965027 220.039 1.34003 cv
cp
f
223.816 10.645 mo
223.813 10.699 223.797 10.742 223.77 10.781 cv
223.734 10.82 223.68 10.855 223.609 10.879 cv
223.531 10.906 223.434 10.922 223.309 10.937 cv
223.184 10.949 223.023 10.957 222.836 10.957 cv
222.641 10.957 222.484 10.949 222.359 10.937 cv
222.234 10.922 222.133 10.906 222.059 10.879 cv
221.98 10.855 221.926 10.82 221.898 10.781 cv
221.863 10.742 221.848 10.699 221.852 10.645 cv
221.852 .39801 li
221.848 .348022 221.863 .301025 221.898 .257996 cv
221.926 .218994 221.98 .184021 222.059 .151978 cv
222.133 .125 222.234 .10498 222.359 .0859985 cv
222.484 .0739746 222.641 .065979 222.836 .0620117 cv
223.023 .065979 223.184 .0739746 223.309 .0859985 cv
223.434 .10498 223.531 .125 223.609 .151978 cv
223.68 .184021 223.734 .218994 223.77 .257996 cv
223.797 .301025 223.813 .348022 223.816 .39801 cv
cp
f
229.941 9.961 mo
229.941 10.187 229.926 10.363 229.898 10.484 cv
229.867 10.609 229.828 10.695 229.785 10.742 cv
229.734 10.793 229.668 10.836 229.578 10.875 cv
229.484 10.914 229.375 10.945 229.258 10.977 cv
229.133 11 229 11.023 228.859 11.043 cv
228.715 11.055 228.574 11.062 228.43 11.066 cv
228.039 11.062 227.699 11.012 227.414 10.918 cv
227.129 10.816 226.895 10.668 226.707 10.461 cv
226.52 10.258 226.379 10 226.293 9.68701 cv
226.199 9.37903 226.156 9.008 226.16 8.578 cv
226.16 5.02002 li
225.328 5.02002 li
225.227 5.02301 225.152 4.961 225.102 4.836 cv
225.047 4.71503 225.02 4.51202 225.023 4.22302 cv
225.02 4.07397 225.027 3.94501 225.043 3.84399 cv
225.055 3.742 225.074 3.65997 225.102 3.59802 cv
225.125 3.539 225.156 3.49597 225.199 3.46899 cv
225.234 3.44501 225.281 3.43402 225.336 3.42999 cv
226.16 3.42999 li
226.16 1.87903 li
226.156 1.83197 226.172 1.78497 226.203 1.73798 cv
226.23 1.69897 226.281 1.664 226.359 1.633 cv
226.434 1.60901 226.535 1.586 226.664 1.57001 cv
226.789 1.55902 226.945 1.55499 227.137 1.55103 cv
227.324 1.55499 227.484 1.55902 227.613 1.57001 cv
227.738 1.586 227.84 1.60901 227.914 1.633 cv
227.984 1.664 228.035 1.69897 228.07 1.73798 cv
228.098 1.78497 228.113 1.83197 228.117 1.87903 cv
228.117 3.42999 li
229.629 3.42999 li
229.68 3.43402 229.727 3.44501 229.766 3.46899 cv
229.805 3.49597 229.836 3.539 229.863 3.59802 cv
229.887 3.65997 229.906 3.742 229.922 3.84399 cv
229.934 3.94501 229.941 4.07397 229.941 4.22302 cv
229.941 4.51202 229.914 4.71503 229.863 4.836 cv
229.809 4.961 229.734 5.02301 229.637 5.02002 cv
228.117 5.02002 li
228.117 8.28497 li
228.113 8.664 228.172 8.94897 228.297 9.13702 cv
228.414 9.328 228.629 9.422 228.934 9.422 cv
229.035 9.422 229.129 9.414 229.215 9.39502 cv
229.297 9.37903 229.371 9.35901 229.438 9.33197 cv
229.5 9.31201 229.555 9.289 229.602 9.27002 cv
229.645 9.25403 229.684 9.24597 229.723 9.242 cv
229.75 9.24597 229.781 9.25403 229.813 9.27002 cv
229.84 9.289 229.859 9.328 229.879 9.37903 cv
229.891 9.43701 229.906 9.51202 229.922 9.60199 cv
229.934 9.69897 229.941 9.81598 229.941 9.961 cv
cp
f
237.531 6.96899 mo
237.527 7.20697 237.477 7.383 237.371 7.49597 cv
237.262 7.61298 237.113 7.672 236.934 7.66803 cv
232.699 7.66803 li
232.695 7.96899 232.73 8.23798 232.805 8.47699 cv
232.871 8.71899 232.984 8.922 233.141 9.09003 cv
233.293 9.26202 233.488 9.39099 233.73 9.47699 cv
233.969 9.56598 234.258 9.60901 234.602 9.60901 cv
234.941 9.60901 235.242 9.586 235.504 9.53497 cv
235.762 9.48798 235.988 9.43402 236.18 9.37097 cv
236.367 9.31201 236.523 9.258 236.652 9.20697 cv
236.773 9.15997 236.875 9.13702 236.957 9.133 cv
237 9.13702 237.039 9.14502 237.074 9.15997 cv
237.102 9.17999 237.129 9.211 237.148 9.258 cv
237.168 9.30499 237.18 9.37097 237.191 9.45697 cv
237.195 9.54303 237.199 9.65198 237.203 9.78101 cv
237.199 9.89801 237.199 9.99597 237.195 10.074 cv
237.188 10.156 237.18 10.223 237.172 10.277 cv
237.16 10.336 237.145 10.387 237.125 10.422 cv
237.105 10.465 237.078 10.5 237.047 10.535 cv
237.012 10.574 236.918 10.625 236.77 10.684 cv
236.613 10.75 236.422 10.812 236.191 10.867 cv
235.953 10.93 235.684 10.977 235.387 11.023 cv
235.082 11.062 234.762 11.086 234.422 11.09 cv
233.801 11.086 233.258 11.012 232.797 10.855 cv
232.328 10.703 231.941 10.465 231.633 10.148 cv
231.316 9.83197 231.082 9.43402 230.934 8.94897 cv
230.777 8.46899 230.703 7.90198 230.707 7.24597 cv
230.703 6.633 230.781 6.07397 230.945 5.578 cv
231.102 5.08197 231.336 4.664 231.648 4.31598 cv
231.953 3.97302 232.328 3.70697 232.766 3.52301 cv
233.203 3.34399 233.695 3.25403 234.25 3.25 cv
234.828 3.25403 235.328 3.34003 235.742 3.508 cv
236.156 3.68402 236.492 3.922 236.758 4.22302 cv
237.02 4.52698 237.215 4.88702 237.344 5.30103 cv
237.465 5.71899 237.527 6.16803 237.531 6.65601 cv
cp
235.629 6.40601 mo
235.641 5.85498 235.531 5.422 235.297 5.10901 cv
235.063 4.797 234.695 4.64099 234.203 4.63702 cv
233.953 4.64099 233.738 4.68701 233.555 4.77698 cv
233.367 4.875 233.215 5 233.094 5.15601 cv
232.969 5.31598 232.875 5.50403 232.813 5.71899 cv
232.746 5.93402 232.707 6.164 232.699 6.40601 cv
cp
f
243.605 4.34003 mo
243.605 4.53101 243.598 4.68402 243.59 4.80103 cv
243.574 4.922 243.559 5.01599 243.543 5.08197 cv
243.52 5.15198 243.492 5.19897 243.461 5.22302 cv
243.422 5.25 243.379 5.26202 243.332 5.26202 cv
243.285 5.26202 243.238 5.25403 243.191 5.23401 cv
243.137 5.21899 243.078 5.19897 243.016 5.17603 cv
242.945 5.15601 242.875 5.13702 242.801 5.117 cv
242.719 5.10199 242.633 5.09399 242.543 5.09003 cv
242.43 5.09399 242.32 5.11298 242.215 5.15601 cv
242.105 5.203 241.992 5.27301 241.879 5.36298 cv
241.758 5.45697 241.637 5.58197 241.512 5.73401 cv
241.383 5.89502 241.246 6.086 241.102 6.31201 cv
241.102 10.645 li
241.098 10.699 241.082 10.742 241.055 10.781 cv
241.02 10.82 240.965 10.855 240.895 10.879 cv
240.816 10.906 240.719 10.922 240.594 10.937 cv
240.469 10.949 240.309 10.957 240.121 10.957 cv
239.926 10.957 239.77 10.949 239.645 10.937 cv
239.52 10.922 239.418 10.906 239.344 10.879 cv
239.266 10.855 239.211 10.82 239.184 10.781 cv
239.148 10.742 239.133 10.699 239.137 10.645 cv
239.137 3.69501 li
239.133 3.64801 239.148 3.60199 239.176 3.55902 cv
239.199 3.52301 239.246 3.492 239.316 3.461 cv
239.383 3.43701 239.469 3.41803 239.578 3.40198 cv
239.684 3.39502 239.816 3.38702 239.98 3.383 cv
240.145 3.38702 240.281 3.39502 240.391 3.40198 cv
240.496 3.41803 240.582 3.43701 240.645 3.461 cv
240.703 3.492 240.746 3.52301 240.773 3.55902 cv
240.797 3.60199 240.809 3.64801 240.813 3.69501 cv
240.813 4.55902 li
240.992 4.30103 241.164 4.09003 241.328 3.91803 cv
241.484 3.75403 241.641 3.617 241.789 3.51599 cv
241.934 3.41803 242.078 3.35199 242.223 3.30902 cv
242.367 3.27301 242.512 3.25403 242.66 3.25 cv
242.727 3.25403 242.801 3.258 242.879 3.26202 cv
242.957 3.27301 243.035 3.28497 243.121 3.30103 cv
243.199 3.32001 243.273 3.34003 243.34 3.36298 cv
243.398 3.38702 243.445 3.414 243.477 3.43701 cv
243.504 3.46899 243.523 3.49597 243.539 3.52301 cv
243.551 3.55902 243.563 3.60199 243.574 3.65198 cv
243.582 3.711 243.59 3.79303 243.598 3.89801 cv
243.602 4.008 243.605 4.15601 243.605 4.34003 cv
cp
f
246.766 10.645 mo
246.762 10.699 246.746 10.742 246.719 10.781 cv
246.684 10.82 246.629 10.855 246.559 10.879 cv
246.48 10.906 246.383 10.922 246.258 10.937 cv
246.133 10.949 245.973 10.957 245.785 10.957 cv
245.59 10.957 245.434 10.949 245.309 10.937 cv
245.184 10.922 245.082 10.906 245.008 10.879 cv
244.93 10.855 244.875 10.82 244.848 10.781 cv
244.813 10.742 244.797 10.699 244.801 10.645 cv
244.801 3.711 li
244.797 3.65997 244.813 3.61298 244.848 3.57397 cv
244.875 3.53497 244.93 3.50403 245.008 3.47302 cv
245.082 3.44897 245.184 3.42603 245.309 3.40601 cv
245.434 3.39502 245.59 3.38702 245.785 3.383 cv
245.973 3.38702 246.133 3.39502 246.258 3.40601 cv
246.383 3.42603 246.48 3.44897 246.559 3.47302 cv
246.629 3.50403 246.684 3.53497 246.719 3.57397 cv
246.746 3.61298 246.762 3.65997 246.766 3.711 cv
cp
246.914 1.34003 mo
246.914 1.73798 246.832 2.01202 246.672 2.15997 cv
246.508 2.31201 246.211 2.38702 245.777 2.383 cv
245.332 2.38702 245.031 2.31201 244.883 2.16803 cv
244.727 2.02301 244.652 1.76202 244.652 1.37903 cv
244.652 .984009 244.73 .710999 244.891 .559021 cv
245.047 .406006 245.348 .328003 245.793 .328003 cv
246.227 .328003 246.523 .401978 246.68 .551025 cv
246.836 .698975 246.914 .965027 246.914 1.34003 cv
cp
f
255.371 10.645 mo
255.367 10.699 255.352 10.742 255.324 10.781 cv
255.289 10.82 255.238 10.855 255.168 10.879 cv
255.094 10.906 254.992 10.922 254.867 10.937 cv
254.738 10.949 254.582 10.957 254.398 10.957 cv
254.203 10.957 254.043 10.949 253.918 10.937 cv
253.789 10.922 253.688 10.906 253.617 10.879 cv
253.539 10.855 253.488 10.82 253.461 10.781 cv
253.426 10.742 253.41 10.699 253.414 10.645 cv
253.414 6.67999 li
253.41 6.34399 253.387 6.078 253.34 5.883 cv
253.289 5.69098 253.215 5.52698 253.125 5.39099 cv
253.031 5.25403 252.914 5.14801 252.766 5.07001 cv
252.617 4.99597 252.441 4.95697 252.246 4.95697 cv
251.992 4.95697 251.742 5.05103 251.488 5.22998 cv
251.234 5.414 250.969 5.67603 250.695 6.02301 cv
250.695 10.645 li
250.691 10.699 250.676 10.742 250.648 10.781 cv
250.613 10.82 250.559 10.855 250.488 10.879 cv
250.41 10.906 250.313 10.922 250.188 10.937 cv
250.063 10.949 249.902 10.957 249.715 10.957 cv
249.52 10.957 249.363 10.949 249.238 10.937 cv
249.113 10.922 249.012 10.906 248.938 10.879 cv
248.859 10.855 248.805 10.82 248.777 10.781 cv
248.742 10.742 248.727 10.699 248.73 10.645 cv
248.73 3.69501 li
248.727 3.64801 248.742 3.60199 248.77 3.55902 cv
248.793 3.52301 248.84 3.492 248.91 3.461 cv
248.977 3.43701 249.063 3.41803 249.172 3.40198 cv
249.277 3.39502 249.41 3.38702 249.574 3.383 cv
249.738 3.38702 249.875 3.39502 249.984 3.40198 cv
250.09 3.41803 250.176 3.43701 250.238 3.461 cv
250.297 3.492 250.34 3.52301 250.367 3.55902 cv
250.391 3.60199 250.402 3.64801 250.406 3.69501 cv
250.406 4.49597 li
250.789 4.086 251.18 3.77301 251.578 3.56201 cv
251.973 3.35498 252.391 3.25403 252.824 3.25 cv
253.293 3.25403 253.691 3.33197 254.02 3.48401 cv
254.344 3.64502 254.605 3.85498 254.805 4.12097 cv
255.004 4.39099 255.148 4.703 255.238 5.05902 cv
255.324 5.41803 255.367 5.84802 255.371 6.35199 cv
cp
f
263.566 4.17603 mo
263.563 4.42999 263.535 4.61298 263.48 4.72998 cv
263.422 4.85199 263.352 4.90997 263.273 4.90997 cv
262.453 4.90997 li
262.566 5.03497 262.648 5.17999 262.699 5.336 cv
262.746 5.49597 262.77 5.65997 262.773 5.828 cv
262.77 6.23798 262.703 6.59802 262.57 6.90997 cv
262.434 7.22699 262.238 7.492 261.988 7.703 cv
261.734 7.922 261.434 8.086 261.078 8.19501 cv
260.719 8.31201 260.32 8.367 259.891 8.36298 cv
259.664 8.367 259.453 8.34003 259.25 8.28101 cv
259.047 8.22998 258.891 8.16803 258.781 8.09003 cv
258.719 8.15997 258.66 8.23798 258.613 8.33197 cv
258.563 8.42603 258.539 8.53101 258.543 8.64099 cv
258.539 8.797 258.605 8.91803 258.738 9.01202 cv
258.867 9.10901 259.055 9.164 259.297 9.172 cv
260.988 9.23401 li
261.383 9.25 261.734 9.30902 262.043 9.40198 cv
262.352 9.50403 262.613 9.63702 262.824 9.80902 cv
263.035 9.98401 263.195 10.195 263.305 10.437 cv
263.414 10.684 263.469 10.957 263.473 11.27 cv
263.469 11.605 263.395 11.93 263.246 12.238 cv
263.098 12.539 262.871 12.801 262.57 13.027 cv
262.266 13.246 261.887 13.426 261.434 13.559 cv
260.977 13.687 260.445 13.75 259.844 13.754 cv
259.246 13.75 258.742 13.703 258.324 13.613 cv
257.906 13.516 257.563 13.387 257.297 13.223 cv
257.027 13.055 256.832 12.855 256.715 12.629 cv
256.59 12.395 256.531 12.141 256.531 11.867 cv
256.531 11.695 256.551 11.535 256.598 11.379 cv
256.637 11.223 256.703 11.07 256.793 10.93 cv
256.875 10.785 256.98 10.652 257.105 10.52 cv
257.23 10.391 257.371 10.266 257.535 10.145 cv
257.309 10.031 257.137 9.87097 257.016 9.65997 cv
256.895 9.45697 256.836 9.22998 256.836 8.98401 cv
256.836 8.68402 256.902 8.40601 257.043 8.14801 cv
257.18 7.89801 257.363 7.66803 257.59 7.46503 cv
257.406 7.28497 257.262 7.07001 257.152 6.81201 cv
257.043 6.56201 256.988 6.242 256.992 5.85901 cv
256.988 5.45697 257.059 5.09802 257.203 4.77301 cv
257.344 4.45697 257.543 4.18701 257.801 3.96503 cv
258.055 3.74597 258.359 3.57397 258.711 3.45697 cv
259.063 3.34003 259.453 3.28101 259.883 3.28101 cv
260.102 3.28101 260.309 3.297 260.508 3.32001 cv
260.707 3.35199 260.895 3.38702 261.066 3.42999 cv
263.273 3.42999 li
263.355 3.43402 263.426 3.492 263.484 3.60199 cv
263.535 3.71899 263.563 3.90997 263.566 4.17603 cv
cp
261.051 5.82001 mo
261.047 5.44897 260.945 5.15997 260.738 4.94897 cv
260.527 4.74597 260.234 4.64099 259.859 4.63702 cv
259.664 4.64099 259.492 4.672 259.352 4.73401 cv
259.203 4.80103 259.082 4.89099 258.988 5 cv
258.887 5.11298 258.816 5.242 258.773 5.39099 cv
258.723 5.539 258.699 5.69501 258.703 5.85199 cv
258.699 6.211 258.805 6.48798 259.016 6.69098 cv
259.223 6.89801 259.512 7.00403 259.883 7 cv
260.078 7.00403 260.246 6.97302 260.395 6.90601 cv
260.535 6.84802 260.656 6.76202 260.758 6.64801 cv
260.852 6.54303 260.926 6.414 260.977 6.27002 cv
261.023 6.12903 261.047 5.97998 261.051 5.82001 cv
cp
261.512 11.371 mo
261.512 11.133 261.418 10.957 261.23 10.832 cv
261.043 10.711 260.785 10.641 260.457 10.629 cv
259.063 10.59 li
258.926 10.691 258.816 10.785 258.738 10.875 cv
258.656 10.965 258.594 11.051 258.547 11.137 cv
258.496 11.219 258.461 11.301 258.449 11.379 cv
258.43 11.457 258.422 11.535 258.426 11.621 cv
258.422 11.875 258.555 12.074 258.816 12.211 cv
259.078 12.344 259.449 12.41 259.93 12.414 cv
260.223 12.41 260.469 12.379 260.676 12.324 cv
260.875 12.262 261.039 12.184 261.168 12.086 cv
261.289 11.984 261.379 11.875 261.434 11.754 cv
261.484 11.633 261.512 11.504 261.512 11.371 cv
cp
f
275.477 1.66803 mo
275.473 1.82397 275.465 1.953 275.457 2.05499 cv
275.441 2.164 275.422 2.25 275.398 2.31201 cv
275.367 2.37903 275.336 2.42603 275.301 2.453 cv
275.258 2.48798 275.215 2.50403 275.172 2.5 cv
272.648 2.5 li
272.648 10.629 li
272.648 10.684 272.629 10.73 272.598 10.77 cv
272.559 10.812 272.504 10.848 272.43 10.871 cv
272.348 10.898 272.242 10.918 272.113 10.934 cv
271.977 10.949 271.813 10.957 271.617 10.957 cv
271.422 10.957 271.258 10.949 271.125 10.934 cv
270.992 10.918 270.887 10.898 270.809 10.871 cv
270.73 10.848 270.672 10.812 270.641 10.77 cv
270.602 10.73 270.586 10.684 270.59 10.629 cv
270.59 2.5 li
268.066 2.5 li
268.012 2.50403 267.965 2.48798 267.934 2.453 cv
267.895 2.42603 267.863 2.37903 267.84 2.31201 cv
267.809 2.25 267.789 2.164 267.781 2.05499 cv
267.766 1.953 267.762 1.82397 267.762 1.66803 cv
267.762 1.51599 267.766 1.383 267.781 1.27002 cv
267.789 1.164 267.809 1.07397 267.84 1.008 cv
267.863 .945007 267.895 .89801 267.934 .867004 cv
267.965 .840027 268.012 .828003 268.066 .823975 cv
275.172 .823975 li
275.215 .828003 275.258 .840027 275.301 .867004 cv
275.336 .89801 275.367 .945007 275.398 1.008 cv
275.422 1.07397 275.441 1.164 275.457 1.27002 cv
275.465 1.383 275.473 1.51599 275.477 1.66803 cv
cp
f
278.512 10.645 mo
278.508 10.699 278.492 10.742 278.465 10.781 cv
278.43 10.82 278.375 10.855 278.305 10.879 cv
278.227 10.906 278.129 10.922 278.004 10.937 cv
277.879 10.949 277.719 10.957 277.531 10.957 cv
277.336 10.957 277.18 10.949 277.055 10.937 cv
276.93 10.922 276.828 10.906 276.754 10.879 cv
276.676 10.855 276.621 10.82 276.594 10.781 cv
276.559 10.742 276.543 10.699 276.547 10.645 cv
276.547 3.711 li
276.543 3.65997 276.559 3.61298 276.594 3.57397 cv
276.621 3.53497 276.676 3.50403 276.754 3.47302 cv
276.828 3.44897 276.93 3.42603 277.055 3.40601 cv
277.18 3.39502 277.336 3.38702 277.531 3.383 cv
277.719 3.38702 277.879 3.39502 278.004 3.40601 cv
278.129 3.42603 278.227 3.44897 278.305 3.47302 cv
278.375 3.50403 278.43 3.53497 278.465 3.57397 cv
278.492 3.61298 278.508 3.65997 278.512 3.711 cv
cp
278.66 1.34003 mo
278.66 1.73798 278.578 2.01202 278.418 2.15997 cv
278.254 2.31201 277.957 2.38702 277.523 2.383 cv
277.078 2.38702 276.777 2.31201 276.629 2.16803 cv
276.473 2.02301 276.398 1.76202 276.398 1.37903 cv
276.398 .984009 276.477 .710999 276.637 .559021 cv
276.793 .406006 277.094 .328003 277.539 .328003 cv
277.973 .328003 278.27 .401978 278.426 .551025 cv
278.582 .698975 278.66 .965027 278.66 1.34003 cv
cp
f
291.563 10.645 mo
291.559 10.699 291.543 10.742 291.516 10.781 cv
291.48 10.82 291.43 10.855 291.359 10.879 cv
291.285 10.906 291.184 10.922 291.063 10.937 cv
290.938 10.949 290.781 10.957 290.59 10.957 cv
290.391 10.957 290.23 10.949 290.105 10.937 cv
289.98 10.922 289.879 10.906 289.805 10.879 cv
289.727 10.855 289.676 10.82 289.648 10.781 cv
289.621 10.742 289.605 10.699 289.609 10.645 cv
289.609 6.52301 li
289.605 6.29303 289.586 6.078 289.543 5.883 cv
289.496 5.69098 289.426 5.52698 289.34 5.39099 cv
289.246 5.25403 289.133 5.14801 288.996 5.07001 cv
288.855 4.99597 288.691 4.95697 288.5 4.95697 cv
288.266 4.95697 288.027 5.05103 287.789 5.22998 cv
287.551 5.414 287.293 5.67603 287.012 6.02301 cv
287.012 10.645 li
287.012 10.699 286.996 10.742 286.965 10.781 cv
286.934 10.82 286.879 10.855 286.805 10.879 cv
286.727 10.906 286.625 10.922 286.504 10.937 cv
286.379 10.949 286.227 10.957 286.039 10.957 cv
285.844 10.957 285.684 10.949 285.563 10.937 cv
285.434 10.922 285.332 10.906 285.262 10.879 cv
285.184 10.855 285.133 10.82 285.102 10.781 cv
285.07 10.742 285.055 10.699 285.055 10.645 cv
285.055 6.52301 li
285.055 6.29303 285.031 6.078 284.988 5.883 cv
284.945 5.69098 284.879 5.52698 284.793 5.39099 cv
284.699 5.25403 284.586 5.14801 284.449 5.07001 cv
284.305 4.99597 284.141 4.95697 283.957 4.95697 cv
283.715 4.95697 283.477 5.05103 283.238 5.22998 cv
283 5.414 282.742 5.67603 282.469 6.02301 cv
282.469 10.645 li
282.465 10.699 282.449 10.742 282.422 10.781 cv
282.387 10.82 282.332 10.855 282.262 10.879 cv
282.184 10.906 282.086 10.922 281.961 10.937 cv
281.836 10.949 281.676 10.957 281.488 10.957 cv
281.293 10.957 281.137 10.949 281.012 10.937 cv
280.887 10.922 280.785 10.906 280.711 10.879 cv
280.633 10.855 280.578 10.82 280.551 10.781 cv
280.516 10.742 280.5 10.699 280.504 10.645 cv
280.504 3.69501 li
280.5 3.64801 280.516 3.60199 280.543 3.55902 cv
280.566 3.52301 280.613 3.492 280.684 3.461 cv
280.75 3.43701 280.836 3.41803 280.945 3.40198 cv
281.051 3.39502 281.184 3.38702 281.348 3.383 cv
281.512 3.38702 281.648 3.39502 281.758 3.40198 cv
281.863 3.41803 281.949 3.43701 282.012 3.461 cv
282.07 3.492 282.113 3.52301 282.141 3.55902 cv
282.164 3.60199 282.176 3.64801 282.18 3.69501 cv
282.18 4.49597 li
282.563 4.086 282.945 3.77301 283.328 3.56201 cv
283.707 3.35498 284.109 3.25403 284.527 3.25 cv
284.813 3.25403 285.066 3.28101 285.297 3.34003 cv
285.523 3.40198 285.73 3.48798 285.91 3.59802 cv
286.09 3.711 286.242 3.84802 286.371 4 cv
286.5 4.15601 286.609 4.328 286.699 4.52002 cv
286.906 4.297 287.109 4.10498 287.313 3.94501 cv
287.508 3.78497 287.707 3.65198 287.902 3.55103 cv
288.098 3.44897 288.293 3.375 288.488 3.32397 cv
288.684 3.27698 288.883 3.25403 289.086 3.25 cv
289.547 3.25403 289.934 3.33197 290.254 3.48401 cv
290.566 3.64502 290.824 3.85498 291.02 4.12097 cv
291.215 4.39099 291.352 4.703 291.438 5.05902 cv
291.516 5.41803 291.559 5.797 291.563 6.19501 cv
cp
f
299.902 6.96899 mo
299.898 7.20697 299.848 7.383 299.742 7.49597 cv
299.633 7.61298 299.484 7.672 299.305 7.66803 cv
295.07 7.66803 li
295.066 7.96899 295.102 8.23798 295.176 8.47699 cv
295.242 8.71899 295.355 8.922 295.512 9.09003 cv
295.664 9.26202 295.859 9.39099 296.102 9.47699 cv
296.34 9.56598 296.629 9.60901 296.973 9.60901 cv
297.313 9.60901 297.613 9.586 297.875 9.53497 cv
298.133 9.48798 298.359 9.43402 298.551 9.37097 cv
298.738 9.31201 298.895 9.258 299.023 9.20697 cv
299.145 9.15997 299.246 9.13702 299.328 9.133 cv
299.371 9.13702 299.41 9.14502 299.445 9.15997 cv
299.473 9.17999 299.5 9.211 299.52 9.258 cv
299.539 9.30499 299.551 9.37097 299.563 9.45697 cv
299.566 9.54303 299.57 9.65198 299.574 9.78101 cv
299.57 9.89801 299.57 9.99597 299.566 10.074 cv
299.559 10.156 299.551 10.223 299.543 10.277 cv
299.531 10.336 299.516 10.387 299.496 10.422 cv
299.477 10.465 299.449 10.5 299.418 10.535 cv
299.383 10.574 299.289 10.625 299.141 10.684 cv
298.984 10.75 298.793 10.812 298.563 10.867 cv
298.324 10.93 298.055 10.977 297.758 11.023 cv
297.453 11.062 297.133 11.086 296.793 11.09 cv
296.172 11.086 295.629 11.012 295.168 10.855 cv
294.699 10.703 294.313 10.465 294.004 10.148 cv
293.688 9.83197 293.453 9.43402 293.305 8.94897 cv
293.148 8.46899 293.074 7.90198 293.078 7.24597 cv
293.074 6.633 293.152 6.07397 293.316 5.578 cv
293.473 5.08197 293.707 4.664 294.02 4.31598 cv
294.324 3.97302 294.699 3.70697 295.137 3.52301 cv
295.574 3.34399 296.066 3.25403 296.621 3.25 cv
297.199 3.25403 297.699 3.34003 298.113 3.508 cv
298.527 3.68402 298.863 3.922 299.129 4.22302 cv
299.391 4.52698 299.586 4.88702 299.715 5.30103 cv
299.836 5.71899 299.898 6.16803 299.902 6.65601 cv
cp
298 6.40601 mo
298.012 5.85498 297.902 5.422 297.668 5.10901 cv
297.434 4.797 297.066 4.64099 296.574 4.63702 cv
296.324 4.64099 296.109 4.68701 295.926 4.77698 cv
295.738 4.875 295.586 5 295.465 5.15601 cv
295.34 5.31598 295.246 5.50403 295.184 5.71899 cv
295.117 5.93402 295.078 6.164 295.07 6.40601 cv
cp
f
306.402 8.67999 mo
306.398 9.078 306.324 9.42603 306.18 9.72699 cv
306.031 10.027 305.824 10.281 305.555 10.48 cv
305.281 10.687 304.961 10.836 304.594 10.937 cv
304.227 11.035 303.824 11.086 303.395 11.09 cv
303.129 11.086 302.883 11.066 302.648 11.031 cv
302.414 10.988 302.203 10.941 302.016 10.883 cv
301.828 10.824 301.672 10.762 301.547 10.699 cv
301.422 10.637 301.328 10.578 301.273 10.523 cv
301.215 10.469 301.172 10.387 301.145 10.27 cv
301.109 10.156 301.094 9.97998 301.098 9.75 cv
301.094 9.60199 301.102 9.47998 301.113 9.38702 cv
301.121 9.297 301.137 9.22699 301.16 9.16803 cv
301.18 9.117 301.203 9.078 301.238 9.05902 cv
301.266 9.04303 301.305 9.03497 301.352 9.03101 cv
301.406 9.03497 301.492 9.06598 301.605 9.12903 cv
301.715 9.19501 301.852 9.27002 302.023 9.34399 cv
302.188 9.42603 302.383 9.49597 302.602 9.56201 cv
302.82 9.633 303.07 9.66803 303.355 9.664 cv
303.531 9.66803 303.688 9.64801 303.828 9.60901 cv
303.961 9.57397 304.082 9.52301 304.188 9.453 cv
304.285 9.38702 304.359 9.30103 304.414 9.19501 cv
304.461 9.09399 304.488 8.97302 304.492 8.836 cv
304.488 8.67999 304.441 8.547 304.348 8.43701 cv
304.254 8.328 304.125 8.22998 303.969 8.14502 cv
303.805 8.06201 303.625 7.98401 303.43 7.90997 cv
303.227 7.84003 303.023 7.76202 302.813 7.66803 cv
302.602 7.58197 302.395 7.47998 302.199 7.36298 cv
301.996 7.25403 301.816 7.11298 301.66 6.94501 cv
301.496 6.78101 301.371 6.58197 301.277 6.34399 cv
301.184 6.11298 301.137 5.83197 301.137 5.5 cv
301.137 5.172 301.199 4.867 301.328 4.586 cv
301.457 4.31201 301.645 4.07397 301.891 3.875 cv
302.133 3.67999 302.43 3.52698 302.781 3.414 cv
303.129 3.30902 303.523 3.25403 303.965 3.25 cv
304.18 3.25403 304.391 3.27002 304.598 3.297 cv
304.801 3.33197 304.988 3.37097 305.156 3.414 cv
305.32 3.46503 305.461 3.51599 305.578 3.56598 cv
305.691 3.625 305.773 3.672 305.824 3.70697 cv
305.871 3.75 305.906 3.789 305.93 3.82397 cv
305.949 3.867 305.961 3.914 305.973 3.96503 cv
305.98 4.02002 305.992 4.086 306 4.164 cv
306.008 4.25 306.012 4.34802 306.012 4.46503 cv
306.012 4.60498 306.008 4.72302 306 4.80902 cv
305.992 4.90198 305.977 4.97302 305.961 5.02002 cv
305.941 5.07397 305.918 5.10901 305.891 5.125 cv
305.855 5.14801 305.82 5.15601 305.781 5.15198 cv
305.73 5.15601 305.656 5.12903 305.563 5.07001 cv
305.461 5.02002 305.34 4.961 305.191 4.89502 cv
305.043 4.836 304.871 4.77698 304.676 4.71899 cv
304.48 4.66803 304.258 4.64099 304.012 4.63702 cv
303.832 4.64099 303.68 4.65997 303.551 4.69098 cv
303.418 4.72998 303.309 4.78101 303.23 4.84802 cv
303.145 4.91803 303.082 4.99597 303.043 5.086 cv
302.996 5.17999 302.977 5.27698 302.98 5.37903 cv
302.977 5.539 303.027 5.67603 303.129 5.78101 cv
303.227 5.89502 303.355 5.98798 303.52 6.07001 cv
303.68 6.15601 303.863 6.23401 304.07 6.30499 cv
304.273 6.37903 304.48 6.461 304.691 6.54303 cv
304.898 6.633 305.105 6.72998 305.316 6.84399 cv
305.52 6.95697 305.703 7.09802 305.863 7.26202 cv
306.023 7.42999 306.152 7.62903 306.254 7.85901 cv
306.348 8.09399 306.398 8.367 306.402 8.67999 cv
cp
f
318.594 7.09802 mo
318.59 7.69501 318.512 8.23798 318.359 8.72302 cv
318.199 9.21503 317.965 9.633 317.648 9.98401 cv
317.332 10.336 316.934 10.609 316.457 10.801 cv
315.977 10.992 315.418 11.086 314.781 11.09 cv
314.16 11.086 313.621 11.004 313.168 10.832 cv
312.707 10.664 312.328 10.414 312.031 10.086 cv
311.727 9.76202 311.504 9.35901 311.359 8.87903 cv
311.215 8.40198 311.145 7.85498 311.145 7.23798 cv
311.145 6.64801 311.223 6.10901 311.379 5.617 cv
311.535 5.12903 311.773 4.70697 312.094 4.35498 cv
312.41 4.008 312.805 3.73401 313.281 3.539 cv
313.754 3.34802 314.313 3.25403 314.953 3.25 cv
315.578 3.25403 316.117 3.336 316.574 3.50403 cv
317.031 3.67603 317.41 3.92603 317.707 4.25 cv
318.004 4.578 318.227 4.97998 318.375 5.45697 cv
318.52 5.93701 318.59 6.48401 318.594 7.09802 cv
cp
316.574 7.17603 mo
316.57 6.84003 316.543 6.52301 316.492 6.22998 cv
316.434 5.94501 316.34 5.69501 316.215 5.47998 cv
316.082 5.27002 315.91 5.10199 315.699 4.97998 cv
315.48 4.86298 315.211 4.80499 314.883 4.80103 cv
314.594 4.80499 314.34 4.85901 314.121 4.961 cv
313.902 5.07001 313.723 5.22699 313.582 5.42999 cv
313.441 5.63702 313.336 5.883 313.266 6.16803 cv
313.195 6.461 313.16 6.789 313.16 7.15198 cv
313.16 7.5 313.188 7.81598 313.246 8.10199 cv
313.301 8.39502 313.395 8.64502 313.523 8.85498 cv
313.648 9.07001 313.82 9.23401 314.043 9.34802 cv
314.258 9.46899 314.527 9.52698 314.852 9.52301 cv
315.145 9.52698 315.402 9.47302 315.625 9.36298 cv
315.84 9.258 316.02 9.10498 316.16 8.89801 cv
316.301 8.69897 316.402 8.453 316.473 8.164 cv
316.535 7.87903 316.57 7.55103 316.574 7.17603 cv
cp
f
324.375 1.04303 mo
324.371 1.19501 324.367 1.31598 324.359 1.40601 cv
324.348 1.5 324.332 1.57001 324.313 1.617 cv
324.289 1.66803 324.266 1.703 324.242 1.71899 cv
324.215 1.73798 324.188 1.74597 324.156 1.74597 cv
324.117 1.74597 324.074 1.73798 324.035 1.71899 cv
323.988 1.703 323.934 1.68402 323.871 1.65997 cv
323.801 1.64099 323.727 1.62097 323.641 1.60199 cv
323.551 1.586 323.445 1.578 323.328 1.57397 cv
323.184 1.578 323.063 1.59802 322.965 1.64099 cv
322.863 1.68701 322.781 1.758 322.715 1.85199 cv
322.645 1.94897 322.594 2.07397 322.566 2.22699 cv
322.531 2.37903 322.516 2.56598 322.52 2.789 cv
322.52 3.42999 li
323.789 3.42999 li
323.832 3.43402 323.875 3.44501 323.918 3.46899 cv
323.953 3.49597 323.988 3.539 324.016 3.59802 cv
324.039 3.65997 324.059 3.742 324.074 3.84399 cv
324.086 3.94501 324.09 4.07397 324.094 4.22302 cv
324.09 4.51202 324.066 4.71503 324.016 4.836 cv
323.961 4.961 323.883 5.02301 323.789 5.02002 cv
322.52 5.02002 li
322.52 10.645 li
322.516 10.699 322.5 10.742 322.473 10.781 cv
322.438 10.82 322.387 10.855 322.316 10.879 cv
322.242 10.906 322.141 10.922 322.012 10.937 cv
321.879 10.949 321.719 10.957 321.535 10.957 cv
321.348 10.957 321.191 10.949 321.066 10.937 cv
320.938 10.922 320.836 10.906 320.762 10.879 cv
320.684 10.855 320.633 10.82 320.605 10.781 cv
320.574 10.742 320.559 10.699 320.563 10.645 cv
320.563 5.02002 li
319.691 5.02002 li
319.59 5.02301 319.516 4.961 319.469 4.836 cv
319.418 4.71503 319.391 4.51202 319.395 4.22302 cv
319.391 4.07397 319.398 3.94501 319.414 3.84399 cv
319.426 3.742 319.445 3.65997 319.469 3.59802 cv
319.492 3.539 319.523 3.49597 319.563 3.46899 cv
319.602 3.44501 319.645 3.43402 319.699 3.42999 cv
320.563 3.42999 li
320.563 2.84399 li
320.559 2.375 320.605 1.961 320.703 1.60199 cv
320.793 1.24597 320.941 .948975 321.145 .715027 cv
321.344 .47998 321.598 .304993 321.906 .179993 cv
322.215 .0620117 322.578 0 323.004 0 cv
323.199 0 323.391 .0200195 323.578 .0510254 cv
323.758 .0900269 323.902 .125 324.008 .159973 cv
324.109 .203003 324.18 .237976 324.219 .27002 cv
324.254 .304993 324.285 .35498 324.309 .41803 cv
324.332 .484009 324.348 .565979 324.359 .66803 cv
324.367 .77002 324.371 .89502 324.375 1.04303 cv
cp
f
334.926 7.88702 mo
334.922 8.41803 334.824 8.883 334.629 9.28101 cv
334.43 9.68402 334.164 10.02 333.828 10.285 cv
333.488 10.555 333.09 10.754 332.641 10.887 cv
332.188 11.02 331.707 11.086 331.195 11.09 cv
330.844 11.086 330.52 11.059 330.223 11.004 cv
329.922 10.945 329.66 10.879 329.434 10.797 cv
329.203 10.719 329.012 10.633 328.859 10.543 cv
328.707 10.457 328.598 10.379 328.531 10.309 cv
328.461 10.242 328.41 10.145 328.387 10.02 cv
328.355 9.89502 328.344 9.711 328.344 9.46899 cv
328.344 9.30902 328.348 9.17603 328.359 9.06201 cv
328.367 8.95697 328.383 8.867 328.41 8.797 cv
328.43 8.72998 328.461 8.68402 328.504 8.65198 cv
328.539 8.62903 328.586 8.61298 328.637 8.60901 cv
328.707 8.61298 328.809 8.65601 328.945 8.73798 cv
329.074 8.828 329.246 8.922 329.457 9.02301 cv
329.664 9.12903 329.91 9.22699 330.199 9.30902 cv
330.484 9.39801 330.82 9.44098 331.203 9.43701 cv
331.453 9.44098 331.676 9.40997 331.871 9.34802 cv
332.066 9.289 332.234 9.203 332.375 9.09399 cv
332.512 8.98401 332.617 8.85199 332.691 8.69098 cv
332.762 8.53101 332.797 8.35199 332.801 8.15198 cv
332.797 7.92603 332.734 7.72998 332.613 7.56201 cv
332.484 7.40198 332.32 7.258 332.125 7.12903 cv
331.922 7.00403 331.695 6.883 331.441 6.77002 cv
331.188 6.65997 330.926 6.54303 330.656 6.414 cv
330.383 6.29303 330.121 6.14801 329.867 5.98798 cv
329.613 5.83197 329.387 5.64502 329.188 5.422 cv
328.984 5.203 328.82 4.94098 328.699 4.63702 cv
328.574 4.336 328.512 3.97699 328.516 3.55499 cv
328.512 3.07397 328.602 2.64801 328.781 2.28101 cv
328.957 1.91803 329.199 1.61298 329.508 1.367 cv
329.809 1.12903 330.168 .948975 330.582 .828003 cv
330.996 .710999 331.434 .651978 331.895 .64801 cv
332.133 .651978 332.371 .66803 332.613 .703003 cv
332.852 .742004 333.074 .79303 333.281 .85199 cv
333.488 .914001 333.672 .984009 333.836 1.05902 cv
333.992 1.14099 334.102 1.203 334.156 1.25403 cv
334.207 1.30902 334.242 1.35498 334.262 1.38702 cv
334.277 1.42603 334.293 1.47302 334.309 1.53101 cv
334.32 1.59399 334.328 1.66803 334.336 1.758 cv
334.34 1.85199 334.344 1.96503 334.344 2.09802 cv
334.344 2.25 334.34 2.37903 334.332 2.47998 cv
334.324 2.586 334.309 2.672 334.293 2.73401 cv
334.27 2.80499 334.246 2.85199 334.215 2.883 cv
334.18 2.914 334.133 2.92999 334.078 2.92999 cv
334.02 2.92999 333.93 2.89502 333.805 2.82001 cv
333.68 2.75 333.523 2.672 333.344 2.58197 cv
333.16 2.5 332.953 2.422 332.715 2.35199 cv
332.473 2.28497 332.207 2.25 331.926 2.24597 cv
331.699 2.25 331.508 2.27698 331.344 2.328 cv
331.176 2.383 331.035 2.45697 330.926 2.55103 cv
330.813 2.64801 330.73 2.76599 330.676 2.89801 cv
330.621 3.039 330.594 3.17999 330.594 3.328 cv
330.594 3.55499 330.652 3.75 330.777 3.90997 cv
330.895 4.07397 331.059 4.21899 331.27 4.34399 cv
331.473 4.47302 331.707 4.59399 331.965 4.703 cv
332.223 4.82001 332.488 4.93701 332.762 5.05902 cv
333.031 5.18701 333.293 5.328 333.555 5.48401 cv
333.813 5.64099 334.047 5.83197 334.25 6.05103 cv
334.453 6.27698 334.613 6.53497 334.738 6.83197 cv
334.859 7.12903 334.922 7.47998 334.926 7.88702 cv
cp
f
342.977 10.645 mo
342.973 10.699 342.961 10.742 342.938 10.781 cv
342.91 10.82 342.863 10.855 342.801 10.879 cv
342.734 10.906 342.648 10.922 342.543 10.937 cv
342.438 10.949 342.305 10.957 342.145 10.957 cv
341.969 10.957 341.828 10.949 341.727 10.937 cv
341.617 10.922 341.535 10.906 341.473 10.879 cv
341.41 10.855 341.363 10.82 341.34 10.781 cv
341.309 10.742 341.297 10.699 341.301 10.645 cv
341.301 9.84399 li
340.914 10.258 340.523 10.57 340.129 10.777 cv
339.727 10.984 339.316 11.086 338.895 11.09 cv
338.414 11.086 338.012 11.012 337.688 10.855 cv
337.363 10.703 337.102 10.488 336.902 10.219 cv
336.699 9.94897 336.555 9.63702 336.473 9.27698 cv
336.383 8.922 336.34 8.47998 336.344 7.94897 cv
336.344 3.69501 li
336.34 3.64801 336.355 3.60199 336.387 3.55902 cv
336.414 3.52301 336.465 3.492 336.543 3.461 cv
336.617 3.43701 336.719 3.41803 336.848 3.40198 cv
336.973 3.39502 337.129 3.38702 337.32 3.383 cv
337.508 3.38702 337.668 3.39502 337.793 3.40198 cv
337.918 3.41803 338.016 3.43701 338.094 3.461 cv
338.164 3.492 338.219 3.52301 338.254 3.55902 cv
338.281 3.60199 338.297 3.64801 338.301 3.69501 cv
338.301 7.62097 li
338.297 7.98798 338.32 8.26599 338.371 8.45697 cv
338.414 8.64801 338.484 8.81201 338.586 8.94897 cv
338.68 9.09003 338.805 9.19501 338.953 9.27002 cv
339.102 9.34802 339.273 9.38702 339.469 9.383 cv
339.719 9.38702 339.969 9.297 340.223 9.10901 cv
340.473 8.92999 340.742 8.664 341.027 8.31598 cv
341.027 3.69501 li
341.027 3.64801 341.039 3.60199 341.07 3.55902 cv
341.094 3.52301 341.148 3.492 341.227 3.461 cv
341.301 3.43701 341.398 3.41803 341.527 3.40198 cv
341.648 3.39502 341.809 3.38702 342.004 3.383 cv
342.195 3.38702 342.352 3.39502 342.477 3.40198 cv
342.598 3.41803 342.699 3.43701 342.773 3.461 cv
342.844 3.492 342.895 3.52301 342.93 3.55902 cv
342.957 3.60199 342.973 3.64801 342.977 3.69501 cv
cp
f
351.902 7.07397 mo
351.902 7.69501 351.832 8.25403 351.699 8.74597 cv
351.559 9.242 351.363 9.65997 351.113 10.008 cv
350.855 10.355 350.543 10.625 350.176 10.809 cv
349.801 10.996 349.379 11.086 348.91 11.09 cv
348.672 11.086 348.453 11.062 348.254 11.023 cv
348.047 10.977 347.855 10.91 347.672 10.809 cv
347.488 10.715 347.305 10.59 347.129 10.434 cv
346.945 10.285 346.762 10.102 346.578 9.89099 cv
346.578 10.645 li
346.574 10.707 346.563 10.754 346.535 10.789 cv
346.504 10.832 346.457 10.863 346.395 10.887 cv
346.328 10.91 346.238 10.926 346.133 10.941 cv
346.023 10.949 345.895 10.957 345.738 10.957 cv
345.574 10.957 345.438 10.949 345.336 10.941 cv
345.227 10.926 345.141 10.91 345.078 10.887 cv
345.008 10.863 344.965 10.832 344.941 10.789 cv
344.914 10.754 344.898 10.707 344.902 10.645 cv
344.902 .39801 li
344.898 .348022 344.914 .301025 344.949 .257996 cv
344.977 .218994 345.031 .184021 345.109 .151978 cv
345.184 .125 345.285 .10498 345.41 .0859985 cv
345.535 .0739746 345.691 .065979 345.887 .0620117 cv
346.074 .065979 346.234 .0739746 346.359 .0859985 cv
346.484 .10498 346.582 .125 346.66 .151978 cv
346.73 .184021 346.785 .218994 346.82 .257996 cv
346.848 .301025 346.863 .348022 346.867 .39801 cv
346.867 4.23798 li
347.043 4.06201 347.219 3.914 347.398 3.789 cv
347.57 3.66803 347.746 3.56201 347.926 3.47998 cv
348.098 3.40198 348.281 3.34399 348.473 3.30499 cv
348.656 3.27002 348.855 3.25403 349.066 3.25 cv
349.578 3.25403 350.012 3.35498 350.375 3.55902 cv
350.73 3.76599 351.023 4.04303 351.25 4.39099 cv
351.473 4.73798 351.637 5.14502 351.746 5.60901 cv
351.848 6.07397 351.902 6.56201 351.902 7.07397 cv
cp
349.867 7.21503 mo
349.863 6.922 349.84 6.63702 349.801 6.35901 cv
349.754 6.086 349.68 5.84399 349.57 5.62903 cv
349.461 5.41803 349.316 5.24597 349.145 5.117 cv
348.969 4.992 348.75 4.92999 348.488 4.92603 cv
348.355 4.92999 348.23 4.94501 348.105 4.97998 cv
347.98 5.02002 347.852 5.08197 347.719 5.16803 cv
347.586 5.258 347.449 5.375 347.313 5.51202 cv
347.168 5.65198 347.02 5.82397 346.867 6.03101 cv
346.867 8.34003 li
347.141 8.69501 347.402 8.96503 347.656 9.14502 cv
347.906 9.33197 348.172 9.422 348.449 9.422 cv
348.703 9.422 348.918 9.35901 349.098 9.22699 cv
349.27 9.10199 349.418 8.93402 349.535 8.72302 cv
349.652 8.52002 349.734 8.28101 349.789 8.01202 cv
349.836 7.75 349.863 7.48401 349.867 7.21503 cv
cp
f
357.035 6.992 mo
357.031 7.29303 357.004 7.50403 356.949 7.62097 cv
356.891 7.74597 356.801 7.80499 356.676 7.80103 cv
353.434 7.80103 li
353.305 7.80499 353.211 7.742 353.156 7.617 cv
353.094 7.49597 353.066 7.289 353.07 6.992 cv
353.066 6.703 353.094 6.49597 353.156 6.375 cv
353.211 6.258 353.305 6.19897 353.434 6.19501 cv
356.676 6.19501 li
356.738 6.19897 356.789 6.211 356.836 6.23401 cv
356.875 6.26202 356.914 6.30902 356.949 6.367 cv
356.977 6.43402 357 6.51599 357.016 6.617 cv
357.027 6.72302 357.031 6.84802 357.035 6.992 cv
cp
f
360.688 10.629 mo
360.684 10.684 360.668 10.73 360.637 10.77 cv
360.602 10.812 360.543 10.848 360.469 10.871 cv
360.387 10.898 360.285 10.918 360.156 10.934 cv
360.023 10.949 359.855 10.957 359.66 10.957 cv
359.457 10.957 359.293 10.949 359.164 10.934 cv
359.027 10.918 358.922 10.898 358.848 10.871 cv
358.766 10.848 358.711 10.812 358.68 10.77 cv
358.645 10.73 358.625 10.684 358.629 10.629 cv
358.629 1.10498 li
358.625 1.05902 358.645 1.01202 358.68 .965027 cv
358.711 .926025 358.766 .890991 358.852 .862976 cv
358.93 .840027 359.035 .820007 359.168 .801025 cv
359.293 .789001 359.457 .781006 359.66 .776978 cv
359.855 .781006 360.023 .789001 360.156 .801025 cv
360.285 .820007 360.387 .840027 360.469 .862976 cv
360.543 .890991 360.602 .926025 360.637 .965027 cv
360.668 1.01202 360.684 1.05902 360.688 1.10498 cv
cp
f
373.766 10.645 mo
373.762 10.699 373.746 10.742 373.719 10.781 cv
373.684 10.82 373.633 10.855 373.563 10.879 cv
373.488 10.906 373.387 10.922 373.266 10.937 cv
373.141 10.949 372.984 10.957 372.793 10.957 cv
372.594 10.957 372.434 10.949 372.309 10.937 cv
372.184 10.922 372.082 10.906 372.008 10.879 cv
371.93 10.855 371.879 10.82 371.852 10.781 cv
371.824 10.742 371.809 10.699 371.813 10.645 cv
371.813 6.52301 li
371.809 6.29303 371.789 6.078 371.746 5.883 cv
371.699 5.69098 371.629 5.52698 371.543 5.39099 cv
371.449 5.25403 371.336 5.14801 371.199 5.07001 cv
371.059 4.99597 370.895 4.95697 370.703 4.95697 cv
370.469 4.95697 370.23 5.05103 369.992 5.22998 cv
369.754 5.414 369.496 5.67603 369.215 6.02301 cv
369.215 10.645 li
369.215 10.699 369.199 10.742 369.168 10.781 cv
369.137 10.82 369.082 10.855 369.008 10.879 cv
368.93 10.906 368.828 10.922 368.707 10.937 cv
368.582 10.949 368.43 10.957 368.242 10.957 cv
368.047 10.957 367.887 10.949 367.766 10.937 cv
367.637 10.922 367.535 10.906 367.465 10.879 cv
367.387 10.855 367.336 10.82 367.305 10.781 cv
367.273 10.742 367.258 10.699 367.258 10.645 cv
367.258 6.52301 li
367.258 6.29303 367.234 6.078 367.191 5.883 cv
367.148 5.69098 367.082 5.52698 366.996 5.39099 cv
366.902 5.25403 366.789 5.14801 366.652 5.07001 cv
366.508 4.99597 366.344 4.95697 366.16 4.95697 cv
365.918 4.95697 365.68 5.05103 365.441 5.22998 cv
365.203 5.414 364.945 5.67603 364.672 6.02301 cv
364.672 10.645 li
364.668 10.699 364.652 10.742 364.625 10.781 cv
364.59 10.82 364.535 10.855 364.465 10.879 cv
364.387 10.906 364.289 10.922 364.164 10.937 cv
364.039 10.949 363.879 10.957 363.691 10.957 cv
363.496 10.957 363.34 10.949 363.215 10.937 cv
363.09 10.922 362.988 10.906 362.914 10.879 cv
362.836 10.855 362.781 10.82 362.754 10.781 cv
362.719 10.742 362.703 10.699 362.707 10.645 cv
362.707 3.69501 li
362.703 3.64801 362.719 3.60199 362.746 3.55902 cv
362.77 3.52301 362.816 3.492 362.887 3.461 cv
362.953 3.43701 363.039 3.41803 363.148 3.40198 cv
363.254 3.39502 363.387 3.38702 363.551 3.383 cv
363.715 3.38702 363.852 3.39502 363.961 3.40198 cv
364.066 3.41803 364.152 3.43701 364.215 3.461 cv
364.273 3.492 364.316 3.52301 364.344 3.55902 cv
364.367 3.60199 364.379 3.64801 364.383 3.69501 cv
364.383 4.49597 li
364.766 4.086 365.148 3.77301 365.531 3.56201 cv
365.91 3.35498 366.313 3.25403 366.73 3.25 cv
367.016 3.25403 367.27 3.28101 367.5 3.34003 cv
367.727 3.40198 367.934 3.48798 368.113 3.59802 cv
368.293 3.711 368.445 3.84802 368.574 4 cv
368.703 4.15601 368.813 4.328 368.902 4.52002 cv
369.109 4.297 369.313 4.10498 369.516 3.94501 cv
369.711 3.78497 369.91 3.65198 370.105 3.55103 cv
370.301 3.44897 370.496 3.375 370.691 3.32397 cv
370.887 3.27698 371.086 3.25403 371.289 3.25 cv
371.75 3.25403 372.137 3.33197 372.457 3.48401 cv
372.77 3.64502 373.027 3.85498 373.223 4.12097 cv
373.418 4.39099 373.555 4.703 373.641 5.05902 cv
373.719 5.41803 373.762 5.797 373.766 6.19501 cv
cp
f
381.609 10.668 mo
381.605 10.746 381.578 10.801 381.531 10.84 cv
381.477 10.883 381.395 10.91 381.285 10.93 cv
381.168 10.945 381.004 10.957 380.789 10.957 cv
380.551 10.957 380.379 10.945 380.277 10.93 cv
380.168 10.91 380.094 10.883 380.055 10.84 cv
380.008 10.801 379.988 10.746 379.988 10.668 cv
379.988 10.117 li
379.699 10.426 379.371 10.664 379.008 10.832 cv
378.641 11.004 378.234 11.086 377.789 11.09 cv
377.418 11.086 377.078 11.039 376.77 10.945 cv
376.461 10.852 376.195 10.711 375.969 10.516 cv
375.742 10.328 375.566 10.094 375.441 9.81201 cv
375.316 9.53497 375.254 9.20697 375.258 8.828 cv
375.254 8.42999 375.332 8.078 375.492 7.77301 cv
375.648 7.47699 375.887 7.22998 376.203 7.03497 cv
376.516 6.84399 376.906 6.69897 377.375 6.60199 cv
377.844 6.51202 378.387 6.46503 379.004 6.461 cv
379.684 6.461 li
379.684 6.039 li
379.684 5.82397 379.66 5.633 379.617 5.46899 cv
379.57 5.30902 379.496 5.172 379.398 5.05902 cv
379.293 4.953 379.16 4.87097 378.992 4.81598 cv
378.82 4.76599 378.609 4.742 378.367 4.73798 cv
378.035 4.742 377.742 4.77698 377.488 4.84802 cv
377.227 4.922 377 5.00403 376.805 5.09003 cv
376.605 5.18402 376.441 5.26202 376.313 5.33197 cv
376.176 5.40601 376.066 5.44501 375.988 5.44098 cv
375.926 5.44501 375.875 5.42603 375.836 5.38702 cv
375.789 5.35199 375.754 5.30103 375.727 5.22998 cv
375.695 5.16803 375.672 5.08197 375.66 4.97998 cv
375.641 4.883 375.633 4.77301 375.637 4.65198 cv
375.633 4.492 375.648 4.367 375.676 4.27002 cv
375.699 4.17999 375.746 4.09399 375.824 4.01599 cv
375.895 3.94098 376.023 3.85901 376.207 3.77002 cv
376.387 3.67999 376.598 3.59399 376.844 3.51599 cv
377.086 3.43701 377.355 3.375 377.645 3.32397 cv
377.934 3.27698 378.23 3.25403 378.539 3.25 cv
379.082 3.25403 379.547 3.30499 379.934 3.40997 cv
380.32 3.52002 380.641 3.68402 380.891 3.90198 cv
381.141 4.12097 381.32 4.40601 381.438 4.75403 cv
381.547 5.10498 381.605 5.52002 381.609 5.992 cv
cp
379.684 7.69098 mo
378.934 7.69098 li
378.617 7.69501 378.348 7.71899 378.125 7.76202 cv
377.898 7.81201 377.715 7.883 377.578 7.97302 cv
377.434 8.07001 377.332 8.18402 377.27 8.31201 cv
377.203 8.44897 377.168 8.59802 377.172 8.76599 cv
377.168 9.05902 377.262 9.289 377.449 9.453 cv
377.633 9.62097 377.891 9.703 378.219 9.703 cv
378.492 9.703 378.742 9.633 378.977 9.492 cv
379.203 9.35199 379.441 9.14801 379.684 8.875 cv
cp
f
389.832 4.17603 mo
389.828 4.42999 389.801 4.61298 389.746 4.72998 cv
389.688 4.85199 389.617 4.90997 389.539 4.90997 cv
388.719 4.90997 li
388.832 5.03497 388.914 5.17999 388.965 5.336 cv
389.012 5.49597 389.035 5.65997 389.039 5.828 cv
389.035 6.23798 388.969 6.59802 388.836 6.90997 cv
388.699 7.22699 388.504 7.492 388.254 7.703 cv
388 7.922 387.699 8.086 387.344 8.19501 cv
386.984 8.31201 386.586 8.367 386.156 8.36298 cv
385.93 8.367 385.719 8.34003 385.516 8.28101 cv
385.313 8.22998 385.156 8.16803 385.047 8.09003 cv
384.984 8.15997 384.926 8.23798 384.879 8.33197 cv
384.828 8.42603 384.805 8.53101 384.809 8.64099 cv
384.805 8.797 384.871 8.91803 385.004 9.01202 cv
385.133 9.10901 385.32 9.164 385.563 9.172 cv
387.254 9.23401 li
387.648 9.25 388 9.30902 388.309 9.40198 cv
388.617 9.50403 388.879 9.63702 389.09 9.80902 cv
389.301 9.98401 389.461 10.195 389.57 10.437 cv
389.68 10.684 389.734 10.957 389.738 11.27 cv
389.734 11.605 389.66 11.93 389.512 12.238 cv
389.363 12.539 389.137 12.801 388.836 13.027 cv
388.531 13.246 388.152 13.426 387.699 13.559 cv
387.242 13.687 386.711 13.75 386.109 13.754 cv
385.512 13.75 385.008 13.703 384.59 13.613 cv
384.172 13.516 383.828 13.387 383.563 13.223 cv
383.293 13.055 383.098 12.855 382.98 12.629 cv
382.855 12.395 382.797 12.141 382.797 11.867 cv
382.797 11.695 382.816 11.535 382.863 11.379 cv
382.902 11.223 382.969 11.07 383.059 10.93 cv
383.141 10.785 383.246 10.652 383.371 10.52 cv
383.496 10.391 383.637 10.266 383.801 10.145 cv
383.574 10.031 383.402 9.87097 383.281 9.65997 cv
383.16 9.45697 383.102 9.22998 383.102 8.98401 cv
383.102 8.68402 383.168 8.40601 383.309 8.14801 cv
383.445 7.89801 383.629 7.66803 383.855 7.46503 cv
383.672 7.28497 383.527 7.07001 383.418 6.81201 cv
383.309 6.56201 383.254 6.242 383.258 5.85901 cv
383.254 5.45697 383.324 5.09802 383.469 4.77301 cv
383.609 4.45697 383.809 4.18701 384.066 3.96503 cv
384.32 3.74597 384.625 3.57397 384.977 3.45697 cv
385.328 3.34003 385.719 3.28101 386.148 3.28101 cv
386.367 3.28101 386.574 3.297 386.773 3.32001 cv
386.973 3.35199 387.16 3.38702 387.332 3.42999 cv
389.539 3.42999 li
389.621 3.43402 389.691 3.492 389.75 3.60199 cv
389.801 3.71899 389.828 3.90997 389.832 4.17603 cv
cp
387.316 5.82001 mo
387.313 5.44897 387.211 5.15997 387.004 4.94897 cv
386.793 4.74597 386.5 4.64099 386.125 4.63702 cv
385.93 4.64099 385.758 4.672 385.617 4.73401 cv
385.469 4.80103 385.348 4.89099 385.254 5 cv
385.152 5.11298 385.082 5.242 385.039 5.39099 cv
384.988 5.539 384.965 5.69501 384.969 5.85199 cv
384.965 6.211 385.07 6.48798 385.281 6.69098 cv
385.488 6.89801 385.777 7.00403 386.148 7 cv
386.344 7.00403 386.512 6.97302 386.66 6.90601 cv
386.801 6.84802 386.922 6.76202 387.023 6.64801 cv
387.117 6.54303 387.191 6.414 387.242 6.27002 cv
387.289 6.12903 387.313 5.97998 387.316 5.82001 cv
cp
387.777 11.371 mo
387.777 11.133 387.684 10.957 387.496 10.832 cv
387.309 10.711 387.051 10.641 386.723 10.629 cv
385.328 10.59 li
385.191 10.691 385.082 10.785 385.004 10.875 cv
384.922 10.965 384.859 11.051 384.813 11.137 cv
384.762 11.219 384.727 11.301 384.715 11.379 cv
384.695 11.457 384.688 11.535 384.691 11.621 cv
384.688 11.875 384.82 12.074 385.082 12.211 cv
385.344 12.344 385.715 12.41 386.195 12.414 cv
386.488 12.41 386.734 12.379 386.941 12.324 cv
387.141 12.262 387.305 12.184 387.434 12.086 cv
387.555 11.984 387.645 11.875 387.699 11.754 cv
387.75 11.633 387.777 11.504 387.777 11.371 cv
cp
f
397.441 6.96899 mo
397.438 7.20697 397.387 7.383 397.281 7.49597 cv
397.172 7.61298 397.023 7.672 396.844 7.66803 cv
392.609 7.66803 li
392.605 7.96899 392.641 8.23798 392.715 8.47699 cv
392.781 8.71899 392.895 8.922 393.051 9.09003 cv
393.203 9.26202 393.398 9.39099 393.641 9.47699 cv
393.879 9.56598 394.168 9.60901 394.512 9.60901 cv
394.852 9.60901 395.152 9.586 395.414 9.53497 cv
395.672 9.48798 395.898 9.43402 396.09 9.37097 cv
396.277 9.31201 396.434 9.258 396.563 9.20697 cv
396.684 9.15997 396.785 9.13702 396.867 9.133 cv
396.91 9.13702 396.949 9.14502 396.984 9.15997 cv
397.012 9.17999 397.039 9.211 397.059 9.258 cv
397.078 9.30499 397.09 9.37097 397.102 9.45697 cv
397.105 9.54303 397.109 9.65198 397.113 9.78101 cv
397.109 9.89801 397.109 9.99597 397.105 10.074 cv
397.098 10.156 397.09 10.223 397.082 10.277 cv
397.07 10.336 397.055 10.387 397.035 10.422 cv
397.016 10.465 396.988 10.5 396.957 10.535 cv
396.922 10.574 396.828 10.625 396.68 10.684 cv
396.523 10.75 396.332 10.812 396.102 10.867 cv
395.863 10.93 395.594 10.977 395.297 11.023 cv
394.992 11.062 394.672 11.086 394.332 11.09 cv
393.711 11.086 393.168 11.012 392.707 10.855 cv
392.238 10.703 391.852 10.465 391.543 10.148 cv
391.227 9.83197 390.992 9.43402 390.844 8.94897 cv
390.688 8.46899 390.613 7.90198 390.617 7.24597 cv
390.613 6.633 390.691 6.07397 390.855 5.578 cv
391.012 5.08197 391.246 4.664 391.559 4.31598 cv
391.863 3.97302 392.238 3.70697 392.676 3.52301 cv
393.113 3.34399 393.605 3.25403 394.16 3.25 cv
394.738 3.25403 395.238 3.34003 395.652 3.508 cv
396.066 3.68402 396.402 3.922 396.668 4.22302 cv
396.93 4.52698 397.125 4.88702 397.254 5.30103 cv
397.375 5.71899 397.438 6.16803 397.441 6.65601 cv
cp
395.539 6.40601 mo
395.551 5.85498 395.441 5.422 395.207 5.10901 cv
394.973 4.797 394.605 4.64099 394.113 4.63702 cv
393.863 4.64099 393.648 4.68701 393.465 4.77698 cv
393.277 4.875 393.125 5 393.004 5.15601 cv
392.879 5.31598 392.785 5.50403 392.723 5.71899 cv
392.656 5.93402 392.617 6.164 392.609 6.40601 cv
cp
f
403.945 8.67999 mo
403.941 9.078 403.867 9.42603 403.723 9.72699 cv
403.574 10.027 403.367 10.281 403.098 10.48 cv
402.824 10.687 402.504 10.836 402.137 10.937 cv
401.77 11.035 401.367 11.086 400.938 11.09 cv
400.672 11.086 400.426 11.066 400.191 11.031 cv
399.957 10.988 399.746 10.941 399.559 10.883 cv
399.371 10.824 399.215 10.762 399.09 10.699 cv
398.965 10.637 398.871 10.578 398.816 10.523 cv
398.758 10.469 398.715 10.387 398.688 10.27 cv
398.652 10.156 398.637 9.97998 398.641 9.75 cv
398.637 9.60199 398.645 9.47998 398.656 9.38702 cv
398.664 9.297 398.68 9.22699 398.703 9.16803 cv
398.723 9.117 398.746 9.078 398.781 9.05902 cv
398.809 9.04303 398.848 9.03497 398.895 9.03101 cv
398.949 9.03497 399.035 9.06598 399.148 9.12903 cv
399.258 9.19501 399.395 9.27002 399.566 9.34399 cv
399.73 9.42603 399.926 9.49597 400.145 9.56201 cv
400.363 9.633 400.613 9.66803 400.898 9.664 cv
401.074 9.66803 401.23 9.64801 401.371 9.60901 cv
401.504 9.57397 401.625 9.52301 401.73 9.453 cv
401.828 9.38702 401.902 9.30103 401.957 9.19501 cv
402.004 9.09399 402.031 8.97302 402.035 8.836 cv
402.031 8.67999 401.984 8.547 401.891 8.43701 cv
401.797 8.328 401.668 8.22998 401.512 8.14502 cv
401.348 8.06201 401.168 7.98401 400.973 7.90997 cv
400.77 7.84003 400.566 7.76202 400.355 7.66803 cv
400.145 7.58197 399.938 7.47998 399.742 7.36298 cv
399.539 7.25403 399.359 7.11298 399.203 6.94501 cv
399.039 6.78101 398.914 6.58197 398.82 6.34399 cv
398.727 6.11298 398.68 5.83197 398.68 5.5 cv
398.68 5.172 398.742 4.867 398.871 4.586 cv
399 4.31201 399.188 4.07397 399.434 3.875 cv
399.676 3.67999 399.973 3.52698 400.324 3.414 cv
400.672 3.30902 401.066 3.25403 401.508 3.25 cv
401.723 3.25403 401.934 3.27002 402.141 3.297 cv
402.344 3.33197 402.531 3.37097 402.699 3.414 cv
402.863 3.46503 403.004 3.51599 403.121 3.56598 cv
403.234 3.625 403.316 3.672 403.367 3.70697 cv
403.414 3.75 403.449 3.789 403.473 3.82397 cv
403.492 3.867 403.504 3.914 403.516 3.96503 cv
403.523 4.02002 403.535 4.086 403.543 4.164 cv
403.551 4.25 403.555 4.34802 403.555 4.46503 cv
403.555 4.60498 403.551 4.72302 403.543 4.80902 cv
403.535 4.90198 403.52 4.97302 403.504 5.02002 cv
403.484 5.07397 403.461 5.10901 403.434 5.125 cv
403.398 5.14801 403.363 5.15601 403.324 5.15198 cv
403.273 5.15601 403.199 5.12903 403.105 5.07001 cv
403.004 5.02002 402.883 4.961 402.734 4.89502 cv
402.586 4.836 402.414 4.77698 402.219 4.71899 cv
402.023 4.66803 401.801 4.64099 401.555 4.63702 cv
401.375 4.64099 401.223 4.65997 401.094 4.69098 cv
400.961 4.72998 400.852 4.78101 400.773 4.84802 cv
400.688 4.91803 400.625 4.99597 400.586 5.086 cv
400.539 5.17999 400.52 5.27698 400.523 5.37903 cv
400.52 5.539 400.57 5.67603 400.672 5.78101 cv
400.77 5.89502 400.898 5.98798 401.063 6.07001 cv
401.223 6.15601 401.406 6.23401 401.613 6.30499 cv
401.816 6.37903 402.023 6.461 402.234 6.54303 cv
402.441 6.633 402.648 6.72998 402.859 6.84399 cv
403.063 6.95697 403.246 7.09802 403.406 7.26202 cv
403.566 7.42999 403.695 7.62903 403.797 7.85901 cv
403.891 8.09399 403.941 8.367 403.945 8.67999 cv
cp
f
412.734 6.992 mo
412.73 7.29303 412.703 7.50403 412.648 7.62097 cv
412.59 7.74597 412.5 7.80499 412.375 7.80103 cv
409.133 7.80103 li
409.004 7.80499 408.91 7.742 408.855 7.617 cv
408.793 7.49597 408.766 7.289 408.77 6.992 cv
408.766 6.703 408.793 6.49597 408.855 6.375 cv
408.91 6.258 409.004 6.19897 409.133 6.19501 cv
412.375 6.19501 li
412.438 6.19897 412.488 6.211 412.535 6.23401 cv
412.574 6.26202 412.613 6.30902 412.648 6.367 cv
412.676 6.43402 412.699 6.51599 412.715 6.617 cv
412.727 6.72302 412.73 6.84802 412.734 6.992 cv
cp
f
425.406 10.645 mo
425.406 10.707 425.395 10.754 425.375 10.789 cv
425.355 10.832 425.309 10.863 425.23 10.887 cv
425.152 10.91 425.035 10.926 424.887 10.941 cv
424.73 10.949 424.527 10.957 424.27 10.957 cv
424.051 10.957 423.875 10.949 423.746 10.941 cv
423.617 10.926 423.516 10.91 423.441 10.883 cv
423.363 10.855 423.309 10.82 423.281 10.773 cv
423.246 10.734 423.223 10.68 423.203 10.613 cv
422.297 8.36298 li
422.188 8.10901 422.082 7.883 421.98 7.68402 cv
421.871 7.48798 421.758 7.32397 421.633 7.19098 cv
421.504 7.06201 421.355 6.961 421.191 6.89099 cv
421.023 6.82397 420.832 6.79303 420.617 6.789 cv
419.977 6.789 li
419.977 10.629 li
419.973 10.684 419.957 10.73 419.926 10.77 cv
419.891 10.812 419.836 10.848 419.758 10.871 cv
419.68 10.898 419.574 10.918 419.445 10.934 cv
419.313 10.949 419.148 10.957 418.949 10.957 cv
418.75 10.957 418.582 10.949 418.453 10.934 cv
418.316 10.918 418.211 10.898 418.137 10.871 cv
418.055 10.848 418 10.812 417.973 10.77 cv
417.938 10.73 417.922 10.684 417.926 10.629 cv
417.926 1.47302 li
417.922 1.24597 417.98 1.08197 418.102 .97699 cv
418.215 .879028 418.359 .828003 418.535 .823975 cv
421.145 .823975 li
421.406 .828003 421.625 .83197 421.801 .840027 cv
421.969 .85199 422.125 .862976 422.27 .879028 cv
422.672 .937012 423.035 1.039 423.359 1.17603 cv
423.684 1.32001 423.961 1.50403 424.188 1.72699 cv
424.414 1.95697 424.586 2.22302 424.707 2.53101 cv
424.824 2.84003 424.883 3.19501 424.887 3.59399 cv
424.883 3.93402 424.84 4.242 424.758 4.51599 cv
424.668 4.797 424.543 5.04303 424.379 5.26202 cv
424.211 5.47998 424.004 5.672 423.762 5.828 cv
423.516 5.992 423.238 6.12097 422.93 6.21899 cv
423.078 6.29303 423.223 6.383 423.355 6.48401 cv
423.488 6.59399 423.609 6.71899 423.727 6.86298 cv
423.84 7.01202 423.953 7.17999 424.059 7.367 cv
424.16 7.55902 424.262 7.77301 424.363 8.01202 cv
425.215 10 li
425.289 10.199 425.34 10.34 425.367 10.43 cv
425.391 10.523 425.406 10.598 425.406 10.645 cv
cp
422.766 3.80499 mo
422.762 3.47302 422.688 3.19098 422.539 2.961 cv
422.387 2.73401 422.141 2.57397 421.801 2.47699 cv
421.695 2.453 421.578 2.42999 421.445 2.414 cv
421.313 2.39801 421.129 2.39099 420.895 2.39099 cv
419.977 2.39099 li
419.977 5.25403 li
421.02 5.25403 li
421.309 5.258 421.566 5.22302 421.785 5.14801 cv
422.004 5.08197 422.184 4.97998 422.328 4.85199 cv
422.473 4.72699 422.582 4.57397 422.656 4.39502 cv
422.727 4.21899 422.762 4.02301 422.766 3.80499 cv
cp
f
432.996 6.96899 mo
432.992 7.20697 432.941 7.383 432.836 7.49597 cv
432.727 7.61298 432.578 7.672 432.398 7.66803 cv
428.164 7.66803 li
428.16 7.96899 428.195 8.23798 428.27 8.47699 cv
428.336 8.71899 428.449 8.922 428.605 9.09003 cv
428.758 9.26202 428.953 9.39099 429.195 9.47699 cv
429.434 9.56598 429.723 9.60901 430.066 9.60901 cv
430.406 9.60901 430.707 9.586 430.969 9.53497 cv
431.227 9.48798 431.453 9.43402 431.645 9.37097 cv
431.832 9.31201 431.988 9.258 432.117 9.20697 cv
432.238 9.15997 432.34 9.13702 432.422 9.133 cv
432.465 9.13702 432.504 9.14502 432.539 9.15997 cv
432.566 9.17999 432.594 9.211 432.613 9.258 cv
432.633 9.30499 432.645 9.37097 432.656 9.45697 cv
432.66 9.54303 432.664 9.65198 432.668 9.78101 cv
432.664 9.89801 432.664 9.99597 432.66 10.074 cv
432.652 10.156 432.645 10.223 432.637 10.277 cv
432.625 10.336 432.609 10.387 432.59 10.422 cv
432.57 10.465 432.543 10.5 432.512 10.535 cv
432.477 10.574 432.383 10.625 432.234 10.684 cv
432.078 10.75 431.887 10.812 431.656 10.867 cv
431.418 10.93 431.148 10.977 430.852 11.023 cv
430.547 11.062 430.227 11.086 429.887 11.09 cv
429.266 11.086 428.723 11.012 428.262 10.855 cv
427.793 10.703 427.406 10.465 427.098 10.148 cv
426.781 9.83197 426.547 9.43402 426.398 8.94897 cv
426.242 8.46899 426.168 7.90198 426.172 7.24597 cv
426.168 6.633 426.246 6.07397 426.41 5.578 cv
426.566 5.08197 426.801 4.664 427.113 4.31598 cv
427.418 3.97302 427.793 3.70697 428.23 3.52301 cv
428.668 3.34399 429.16 3.25403 429.715 3.25 cv
430.293 3.25403 430.793 3.34003 431.207 3.508 cv
431.621 3.68402 431.957 3.922 432.223 4.22302 cv
432.484 4.52698 432.68 4.88702 432.809 5.30103 cv
432.93 5.71899 432.992 6.16803 432.996 6.65601 cv
cp
431.094 6.40601 mo
431.105 5.85498 430.996 5.422 430.762 5.10901 cv
430.527 4.797 430.16 4.64099 429.668 4.63702 cv
429.418 4.64099 429.203 4.68701 429.02 4.77698 cv
428.832 4.875 428.68 5 428.559 5.15601 cv
428.434 5.31598 428.34 5.50403 428.277 5.71899 cv
428.211 5.93402 428.172 6.164 428.164 6.40601 cv
cp
f
445.66 10.645 mo
445.656 10.699 445.641 10.742 445.613 10.781 cv
445.578 10.82 445.527 10.855 445.457 10.879 cv
445.383 10.906 445.281 10.922 445.16 10.937 cv
445.035 10.949 444.879 10.957 444.688 10.957 cv
444.488 10.957 444.328 10.949 444.203 10.937 cv
444.078 10.922 443.977 10.906 443.902 10.879 cv
443.824 10.855 443.773 10.82 443.746 10.781 cv
443.719 10.742 443.703 10.699 443.707 10.645 cv
443.707 6.52301 li
443.703 6.29303 443.684 6.078 443.641 5.883 cv
443.594 5.69098 443.523 5.52698 443.438 5.39099 cv
443.344 5.25403 443.23 5.14801 443.094 5.07001 cv
442.953 4.99597 442.789 4.95697 442.598 4.95697 cv
442.363 4.95697 442.125 5.05103 441.887 5.22998 cv
441.648 5.414 441.391 5.67603 441.109 6.02301 cv
441.109 10.645 li
441.109 10.699 441.094 10.742 441.063 10.781 cv
441.031 10.82 440.977 10.855 440.902 10.879 cv
440.824 10.906 440.723 10.922 440.602 10.937 cv
440.477 10.949 440.324 10.957 440.137 10.957 cv
439.941 10.957 439.781 10.949 439.66 10.937 cv
439.531 10.922 439.43 10.906 439.359 10.879 cv
439.281 10.855 439.23 10.82 439.199 10.781 cv
439.168 10.742 439.152 10.699 439.152 10.645 cv
439.152 6.52301 li
439.152 6.29303 439.129 6.078 439.086 5.883 cv
439.043 5.69098 438.977 5.52698 438.891 5.39099 cv
438.797 5.25403 438.684 5.14801 438.547 5.07001 cv
438.402 4.99597 438.238 4.95697 438.055 4.95697 cv
437.813 4.95697 437.574 5.05103 437.336 5.22998 cv
437.098 5.414 436.84 5.67603 436.566 6.02301 cv
436.566 10.645 li
436.563 10.699 436.547 10.742 436.52 10.781 cv
436.484 10.82 436.43 10.855 436.359 10.879 cv
436.281 10.906 436.184 10.922 436.059 10.937 cv
435.934 10.949 435.773 10.957 435.586 10.957 cv
435.391 10.957 435.234 10.949 435.109 10.937 cv
434.984 10.922 434.883 10.906 434.809 10.879 cv
434.73 10.855 434.676 10.82 434.648 10.781 cv
434.613 10.742 434.598 10.699 434.602 10.645 cv
434.602 3.69501 li
434.598 3.64801 434.613 3.60199 434.641 3.55902 cv
434.664 3.52301 434.711 3.492 434.781 3.461 cv
434.848 3.43701 434.934 3.41803 435.043 3.40198 cv
435.148 3.39502 435.281 3.38702 435.445 3.383 cv
435.609 3.38702 435.746 3.39502 435.855 3.40198 cv
435.961 3.41803 436.047 3.43701 436.109 3.461 cv
436.168 3.492 436.211 3.52301 436.238 3.55902 cv
436.262 3.60199 436.273 3.64801 436.277 3.69501 cv
436.277 4.49597 li
436.66 4.086 437.043 3.77301 437.426 3.56201 cv
437.805 3.35498 438.207 3.25403 438.625 3.25 cv
438.91 3.25403 439.164 3.28101 439.395 3.34003 cv
439.621 3.40198 439.828 3.48798 440.008 3.59802 cv
440.188 3.711 440.34 3.84802 440.469 4 cv
440.598 4.15601 440.707 4.328 440.797 4.52002 cv
441.004 4.297 441.207 4.10498 441.41 3.94501 cv
441.605 3.78497 441.805 3.65198 442 3.55103 cv
442.195 3.44897 442.391 3.375 442.586 3.32397 cv
442.781 3.27698 442.98 3.25403 443.184 3.25 cv
443.645 3.25403 444.031 3.33197 444.352 3.48401 cv
444.664 3.64502 444.922 3.85498 445.117 4.12097 cv
445.313 4.39099 445.449 4.703 445.535 5.05902 cv
445.613 5.41803 445.656 5.797 445.66 6.19501 cv
cp
f
454.605 7.09802 mo
454.602 7.69501 454.523 8.23798 454.371 8.72302 cv
454.211 9.21503 453.977 9.633 453.66 9.98401 cv
453.344 10.336 452.945 10.609 452.469 10.801 cv
451.988 10.992 451.43 11.086 450.793 11.09 cv
450.172 11.086 449.633 11.004 449.18 10.832 cv
448.719 10.664 448.34 10.414 448.043 10.086 cv
447.738 9.76202 447.516 9.35901 447.371 8.87903 cv
447.227 8.40198 447.156 7.85498 447.156 7.23798 cv
447.156 6.64801 447.234 6.10901 447.391 5.617 cv
447.547 5.12903 447.785 4.70697 448.105 4.35498 cv
448.422 4.008 448.816 3.73401 449.293 3.539 cv
449.766 3.34802 450.324 3.25403 450.965 3.25 cv
451.59 3.25403 452.129 3.336 452.586 3.50403 cv
453.043 3.67603 453.422 3.92603 453.719 4.25 cv
454.016 4.578 454.238 4.97998 454.387 5.45697 cv
454.531 5.93701 454.602 6.48401 454.605 7.09802 cv
cp
452.586 7.17603 mo
452.582 6.84003 452.555 6.52301 452.504 6.22998 cv
452.445 5.94501 452.352 5.69501 452.227 5.47998 cv
452.094 5.27002 451.922 5.10199 451.711 4.97998 cv
451.492 4.86298 451.223 4.80499 450.895 4.80103 cv
450.605 4.80499 450.352 4.85901 450.133 4.961 cv
449.914 5.07001 449.734 5.22699 449.594 5.42999 cv
449.453 5.63702 449.348 5.883 449.277 6.16803 cv
449.207 6.461 449.172 6.789 449.172 7.15198 cv
449.172 7.5 449.199 7.81598 449.258 8.10199 cv
449.313 8.39502 449.406 8.64502 449.535 8.85498 cv
449.66 9.07001 449.832 9.23401 450.055 9.34802 cv
450.27 9.46899 450.539 9.52698 450.863 9.52301 cv
451.156 9.52698 451.414 9.47302 451.637 9.36298 cv
451.852 9.258 452.031 9.10498 452.172 8.89801 cv
452.313 8.69897 452.414 8.453 452.484 8.164 cv
452.547 7.87903 452.582 7.55103 452.586 7.17603 cv
cp
f
460.313 9.961 mo
460.313 10.187 460.297 10.363 460.27 10.484 cv
460.238 10.609 460.199 10.695 460.156 10.742 cv
460.105 10.793 460.039 10.836 459.949 10.875 cv
459.855 10.914 459.746 10.945 459.629 10.977 cv
459.504 11 459.371 11.023 459.23 11.043 cv
459.086 11.055 458.945 11.062 458.801 11.066 cv
458.41 11.062 458.07 11.012 457.785 10.918 cv
457.5 10.816 457.266 10.668 457.078 10.461 cv
456.891 10.258 456.75 10 456.664 9.68701 cv
456.57 9.37903 456.527 9.008 456.531 8.578 cv
456.531 5.02002 li
455.699 5.02002 li
455.598 5.02301 455.523 4.961 455.473 4.836 cv
455.418 4.71503 455.391 4.51202 455.395 4.22302 cv
455.391 4.07397 455.398 3.94501 455.414 3.84399 cv
455.426 3.742 455.445 3.65997 455.473 3.59802 cv
455.496 3.539 455.527 3.49597 455.57 3.46899 cv
455.605 3.44501 455.652 3.43402 455.707 3.42999 cv
456.531 3.42999 li
456.531 1.87903 li
456.527 1.83197 456.543 1.78497 456.574 1.73798 cv
456.602 1.69897 456.652 1.664 456.73 1.633 cv
456.805 1.60901 456.906 1.586 457.035 1.57001 cv
457.16 1.55902 457.316 1.55499 457.508 1.55103 cv
457.695 1.55499 457.855 1.55902 457.984 1.57001 cv
458.109 1.586 458.211 1.60901 458.285 1.633 cv
458.355 1.664 458.406 1.69897 458.441 1.73798 cv
458.469 1.78497 458.484 1.83197 458.488 1.87903 cv
458.488 3.42999 li
460 3.42999 li
460.051 3.43402 460.098 3.44501 460.137 3.46899 cv
460.176 3.49597 460.207 3.539 460.234 3.59802 cv
460.258 3.65997 460.277 3.742 460.293 3.84399 cv
460.305 3.94501 460.313 4.07397 460.313 4.22302 cv
460.313 4.51202 460.285 4.71503 460.234 4.836 cv
460.18 4.961 460.105 5.02301 460.008 5.02002 cv
458.488 5.02002 li
458.488 8.28497 li
458.484 8.664 458.543 8.94897 458.668 9.13702 cv
458.785 9.328 459 9.422 459.305 9.422 cv
459.406 9.422 459.5 9.414 459.586 9.39502 cv
459.668 9.37903 459.742 9.35901 459.809 9.33197 cv
459.871 9.31201 459.926 9.289 459.973 9.27002 cv
460.016 9.25403 460.055 9.24597 460.094 9.242 cv
460.121 9.24597 460.152 9.25403 460.184 9.27002 cv
460.211 9.289 460.23 9.328 460.25 9.37903 cv
460.262 9.43701 460.277 9.51202 460.293 9.60199 cv
460.305 9.69897 460.313 9.81598 460.313 9.961 cv
cp
f
467.898 6.96899 mo
467.895 7.20697 467.844 7.383 467.738 7.49597 cv
467.629 7.61298 467.48 7.672 467.301 7.66803 cv
463.066 7.66803 li
463.063 7.96899 463.098 8.23798 463.172 8.47699 cv
463.238 8.71899 463.352 8.922 463.508 9.09003 cv
463.66 9.26202 463.855 9.39099 464.098 9.47699 cv
464.336 9.56598 464.625 9.60901 464.969 9.60901 cv
465.309 9.60901 465.609 9.586 465.871 9.53497 cv
466.129 9.48798 466.355 9.43402 466.547 9.37097 cv
466.734 9.31201 466.891 9.258 467.02 9.20697 cv
467.141 9.15997 467.242 9.13702 467.324 9.133 cv
467.367 9.13702 467.406 9.14502 467.441 9.15997 cv
467.469 9.17999 467.496 9.211 467.516 9.258 cv
467.535 9.30499 467.547 9.37097 467.559 9.45697 cv
467.563 9.54303 467.566 9.65198 467.57 9.78101 cv
467.566 9.89801 467.566 9.99597 467.563 10.074 cv
467.555 10.156 467.547 10.223 467.539 10.277 cv
467.527 10.336 467.512 10.387 467.492 10.422 cv
467.473 10.465 467.445 10.5 467.414 10.535 cv
467.379 10.574 467.285 10.625 467.137 10.684 cv
466.98 10.75 466.789 10.812 466.559 10.867 cv
466.32 10.93 466.051 10.977 465.754 11.023 cv
465.449 11.062 465.129 11.086 464.789 11.09 cv
464.168 11.086 463.625 11.012 463.164 10.855 cv
462.695 10.703 462.309 10.465 462 10.148 cv
461.684 9.83197 461.449 9.43402 461.301 8.94897 cv
461.145 8.46899 461.07 7.90198 461.074 7.24597 cv
461.07 6.633 461.148 6.07397 461.313 5.578 cv
461.469 5.08197 461.703 4.664 462.016 4.31598 cv
462.32 3.97302 462.695 3.70697 463.133 3.52301 cv
463.57 3.34399 464.063 3.25403 464.617 3.25 cv
465.195 3.25403 465.695 3.34003 466.109 3.508 cv
466.523 3.68402 466.859 3.922 467.125 4.22302 cv
467.387 4.52698 467.582 4.88702 467.711 5.30103 cv
467.832 5.71899 467.895 6.16803 467.898 6.65601 cv
cp
465.996 6.40601 mo
466.008 5.85498 465.898 5.422 465.664 5.10901 cv
465.43 4.797 465.063 4.64099 464.57 4.63702 cv
464.32 4.64099 464.105 4.68701 463.922 4.77698 cv
463.734 4.875 463.582 5 463.461 5.15601 cv
463.336 5.31598 463.242 5.50403 463.18 5.71899 cv
463.113 5.93402 463.074 6.164 463.066 6.40601 cv
cp
f
485.094 10.629 mo
485.09 10.684 485.078 10.73 485.051 10.77 cv
485.02 10.812 484.965 10.848 484.895 10.871 cv
484.816 10.898 484.719 10.918 484.594 10.934 cv
484.469 10.949 484.309 10.957 484.117 10.957 cv
483.93 10.957 483.773 10.949 483.652 10.934 cv
483.523 10.918 483.426 10.898 483.355 10.871 cv
483.281 10.848 483.23 10.812 483.199 10.77 cv
483.168 10.73 483.152 10.684 483.152 10.629 cv
483.152 2.422 li
483.137 2.422 li
480.215 10.621 li
480.191 10.691 480.156 10.746 480.113 10.789 cv
480.063 10.836 480 10.871 479.922 10.895 cv
479.84 10.922 479.738 10.937 479.613 10.945 cv
479.488 10.953 479.336 10.957 479.164 10.957 cv
478.984 10.957 478.836 10.949 478.711 10.937 cv
478.586 10.922 478.48 10.902 478.402 10.875 cv
478.316 10.848 478.254 10.812 478.211 10.77 cv
478.16 10.73 478.129 10.684 478.117 10.621 cv
475.297 2.422 li
475.281 2.422 li
475.281 10.629 li
475.277 10.684 475.262 10.73 475.238 10.77 cv
475.207 10.812 475.156 10.848 475.078 10.871 cv
475 10.898 474.898 10.918 474.777 10.934 cv
474.652 10.949 474.496 10.957 474.309 10.957 cv
474.117 10.957 473.961 10.949 473.84 10.934 cv
473.711 10.918 473.609 10.898 473.539 10.871 cv
473.461 10.848 473.41 10.812 473.383 10.77 cv
473.352 10.73 473.336 10.684 473.34 10.629 cv
473.34 1.64502 li
473.336 1.383 473.406 1.17999 473.551 1.03497 cv
473.688 .89801 473.875 .828003 474.113 .823975 cv
475.453 .823975 li
475.691 .828003 475.895 .848022 476.066 .882996 cv
476.234 .926025 476.383 .987976 476.512 1.078 cv
476.633 1.172 476.738 1.29303 476.824 1.43701 cv
476.906 1.59003 476.977 1.77301 477.043 1.98798 cv
479.227 7.99597 li
479.258 7.99597 li
481.516 2.00403 li
481.582 1.78497 481.656 1.60199 481.738 1.44897 cv
481.816 1.30103 481.91 1.17999 482.02 1.08197 cv
482.125 .992004 482.25 .926025 482.395 .882996 cv
482.539 .848022 482.707 .828003 482.902 .823975 cv
484.281 .823975 li
484.418 .828003 484.539 .843994 484.645 .879028 cv
484.742 .91803 484.824 .973022 484.895 1.039 cv
484.957 1.11298 485.008 1.19897 485.043 1.297 cv
485.074 1.40198 485.09 1.52002 485.094 1.64502 cv
cp
f
494.203 7.09802 mo
494.199 7.69501 494.121 8.23798 493.969 8.72302 cv
493.809 9.21503 493.574 9.633 493.258 9.98401 cv
492.941 10.336 492.543 10.609 492.066 10.801 cv
491.586 10.992 491.027 11.086 490.391 11.09 cv
489.77 11.086 489.23 11.004 488.777 10.832 cv
488.316 10.664 487.938 10.414 487.641 10.086 cv
487.336 9.76202 487.113 9.35901 486.969 8.87903 cv
486.824 8.40198 486.754 7.85498 486.754 7.23798 cv
486.754 6.64801 486.832 6.10901 486.988 5.617 cv
487.145 5.12903 487.383 4.70697 487.703 4.35498 cv
488.02 4.008 488.414 3.73401 488.891 3.539 cv
489.363 3.34802 489.922 3.25403 490.563 3.25 cv
491.188 3.25403 491.727 3.336 492.184 3.50403 cv
492.641 3.67603 493.02 3.92603 493.316 4.25 cv
493.613 4.578 493.836 4.97998 493.984 5.45697 cv
494.129 5.93701 494.199 6.48401 494.203 7.09802 cv
cp
492.184 7.17603 mo
492.18 6.84003 492.152 6.52301 492.102 6.22998 cv
492.043 5.94501 491.949 5.69501 491.824 5.47998 cv
491.691 5.27002 491.52 5.10199 491.309 4.97998 cv
491.09 4.86298 490.82 4.80499 490.492 4.80103 cv
490.203 4.80499 489.949 4.85901 489.73 4.961 cv
489.512 5.07001 489.332 5.22699 489.191 5.42999 cv
489.051 5.63702 488.945 5.883 488.875 6.16803 cv
488.805 6.461 488.77 6.789 488.77 7.15198 cv
488.77 7.5 488.797 7.81598 488.855 8.10199 cv
488.91 8.39502 489.004 8.64502 489.133 8.85498 cv
489.258 9.07001 489.43 9.23401 489.652 9.34802 cv
489.867 9.46899 490.137 9.52698 490.461 9.52301 cv
490.754 9.52698 491.012 9.47302 491.234 9.36298 cv
491.449 9.258 491.629 9.10498 491.77 8.89801 cv
491.91 8.69897 492.012 8.453 492.082 8.164 cv
492.145 7.87903 492.18 7.55103 492.184 7.17603 cv
cp
f
502.352 10.645 mo
502.348 10.707 502.336 10.754 502.313 10.789 cv
502.285 10.832 502.238 10.863 502.18 10.887 cv
502.113 10.91 502.031 10.926 501.926 10.941 cv
501.82 10.949 501.688 10.957 501.535 10.957 cv
501.363 10.957 501.23 10.949 501.129 10.941 cv
501.023 10.926 500.938 10.91 500.875 10.887 cv
500.809 10.863 500.762 10.832 500.734 10.789 cv
500.703 10.754 500.688 10.707 500.691 10.645 cv
500.691 9.875 li
500.332 10.262 499.957 10.559 499.566 10.77 cv
499.168 10.98 498.734 11.086 498.262 11.09 cv
497.727 11.086 497.277 10.984 496.914 10.781 cv
496.547 10.578 496.25 10.305 496.02 9.953 cv
495.785 9.60901 495.617 9.203 495.516 8.73401 cv
495.414 8.27301 495.363 7.78101 495.363 7.26202 cv
495.363 6.64801 495.426 6.09399 495.559 5.59802 cv
495.688 5.10498 495.883 4.68402 496.141 4.336 cv
496.395 3.98798 496.711 3.72302 497.09 3.53101 cv
497.469 3.34802 497.906 3.25403 498.402 3.25 cv
498.789 3.25403 499.141 3.33197 499.461 3.48798 cv
499.773 3.64801 500.09 3.87903 500.402 4.18402 cv
500.402 .421997 li
500.402 .370972 500.414 .323975 500.445 .281006 cv
500.469 .242004 500.523 .20697 500.602 .176025 cv
500.676 .14801 500.773 .129028 500.902 .109009 cv
501.023 .0980225 501.184 .0900269 501.379 .0859985 cv
501.57 .0900269 501.727 .0980225 501.852 .109009 cv
501.973 .129028 502.074 .14801 502.148 .176025 cv
502.219 .20697 502.27 .242004 502.305 .281006 cv
502.332 .323975 502.348 .370972 502.352 .421997 cv
cp
500.402 6 mo
500.121 5.64801 499.852 5.37903 499.598 5.19098 cv
499.336 5.00403 499.066 4.90997 498.789 4.90997 cv
498.535 4.90997 498.316 4.97699 498.133 5.10199 cv
497.945 5.23401 497.797 5.40198 497.688 5.61298 cv
497.574 5.82397 497.492 6.06201 497.438 6.32397 cv
497.383 6.59003 497.355 6.85901 497.355 7.12903 cv
497.355 7.42603 497.379 7.70697 497.426 7.97998 cv
497.473 8.258 497.547 8.50403 497.656 8.71899 cv
497.758 8.93402 497.902 9.10498 498.082 9.23401 cv
498.258 9.367 498.48 9.43402 498.75 9.42999 cv
498.883 9.43402 499.012 9.414 499.145 9.37097 cv
499.27 9.336 499.402 9.27301 499.535 9.17999 cv
499.668 9.09399 499.805 8.97699 499.945 8.83197 cv
500.086 8.69098 500.238 8.51599 500.402 8.30902 cv
cp
f
510.75 6.96899 mo
510.746 7.20697 510.695 7.383 510.59 7.49597 cv
510.48 7.61298 510.332 7.672 510.152 7.66803 cv
505.918 7.66803 li
505.914 7.96899 505.949 8.23798 506.023 8.47699 cv
506.09 8.71899 506.203 8.922 506.359 9.09003 cv
506.512 9.26202 506.707 9.39099 506.949 9.47699 cv
507.188 9.56598 507.477 9.60901 507.82 9.60901 cv
508.16 9.60901 508.461 9.586 508.723 9.53497 cv
508.98 9.48798 509.207 9.43402 509.398 9.37097 cv
509.586 9.31201 509.742 9.258 509.871 9.20697 cv
509.992 9.15997 510.094 9.13702 510.176 9.133 cv
510.219 9.13702 510.258 9.14502 510.293 9.15997 cv
510.32 9.17999 510.348 9.211 510.367 9.258 cv
510.387 9.30499 510.398 9.37097 510.41 9.45697 cv
510.414 9.54303 510.418 9.65198 510.422 9.78101 cv
510.418 9.89801 510.418 9.99597 510.414 10.074 cv
510.406 10.156 510.398 10.223 510.391 10.277 cv
510.379 10.336 510.363 10.387 510.344 10.422 cv
510.324 10.465 510.297 10.5 510.266 10.535 cv
510.23 10.574 510.137 10.625 509.988 10.684 cv
509.832 10.75 509.641 10.812 509.41 10.867 cv
509.172 10.93 508.902 10.977 508.605 11.023 cv
508.301 11.062 507.98 11.086 507.641 11.09 cv
507.02 11.086 506.477 11.012 506.016 10.855 cv
505.547 10.703 505.16 10.465 504.852 10.148 cv
504.535 9.83197 504.301 9.43402 504.152 8.94897 cv
503.996 8.46899 503.922 7.90198 503.926 7.24597 cv
503.922 6.633 504 6.07397 504.164 5.578 cv
504.32 5.08197 504.555 4.664 504.867 4.31598 cv
505.172 3.97302 505.547 3.70697 505.984 3.52301 cv
506.422 3.34399 506.914 3.25403 507.469 3.25 cv
508.047 3.25403 508.547 3.34003 508.961 3.508 cv
509.375 3.68402 509.711 3.922 509.977 4.22302 cv
510.238 4.52698 510.434 4.88702 510.563 5.30103 cv
510.684 5.71899 510.746 6.16803 510.75 6.65601 cv
cp
508.848 6.40601 mo
508.859 5.85498 508.75 5.422 508.516 5.10901 cv
508.281 4.797 507.914 4.64099 507.422 4.63702 cv
507.172 4.64099 506.957 4.68701 506.773 4.77698 cv
506.586 4.875 506.434 5 506.313 5.15601 cv
506.188 5.31598 506.094 5.50403 506.031 5.71899 cv
505.965 5.93402 505.926 6.164 505.918 6.40601 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
