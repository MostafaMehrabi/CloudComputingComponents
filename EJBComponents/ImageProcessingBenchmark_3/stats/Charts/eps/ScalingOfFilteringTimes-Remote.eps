%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingOfFilteringTimes-Remote.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 3:58:56 p.m.
%%BoundingBox: 0 0 615 547
%%HiResBoundingBox: 0 0 614.5307 546.7267
%%CropBox: 0 0 614.5307 546.7267
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -546.727 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 546.727 li
614.531 546.727 li
614.531 0 li
cp
clp
gsave
0 546.727 mo
615 546.727 li
615 -.273376 li
0 -.273376 li
cp
clp
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
27.172 478.77 mo
607.852 478.77 li
27.172 453.571 mo
607.852 453.571 li
27.172 428.371 mo
607.852 428.371 li
27.172 403.172 mo
607.852 403.172 li
27.172 377.969 mo
607.852 377.969 li
27.172 352.891 mo
607.852 352.891 li
27.172 327.692 mo
607.852 327.692 li
27.172 302.489 mo
607.852 302.489 li
27.172 277.289 mo
607.852 277.289 li
27.172 252.09 mo
607.852 252.09 li
27.172 226.891 mo
607.852 226.891 li
27.172 201.809 mo
607.852 201.809 li
27.172 176.61 mo
607.852 176.61 li
27.172 151.411 mo
607.852 151.411 li
27.172 126.211 mo
607.852 126.211 li
27.172 101.012 mo
607.852 101.012 li
27.172 75.8086 mo
607.852 75.8086 li
27.172 50.7306 mo
607.852 50.7306 li
27.172 25.5316 mo
607.852 25.5316 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.326574 .281529 .277562 0 cmyk
@
63.531 25.5316 mo
63.531 503.969 li
136.129 25.5316 mo
136.129 503.969 li
208.609 25.5316 mo
208.609 503.969 li
281.211 25.5316 mo
281.211 503.969 li
353.809 25.5316 mo
353.809 503.969 li
426.41 25.5316 mo
426.41 503.969 li
499.012 25.5316 mo
499.012 503.969 li
571.609 25.5316 mo
571.609 503.969 li
.175235 .144778 .143648 0 cmyk
@
27.172 25.5316 mo
27.172 503.969 li
99.77 25.5316 mo
99.77 503.969 li
172.371 25.5316 mo
172.371 503.969 li
244.969 25.5316 mo
244.969 503.969 li
317.57 25.5316 mo
317.57 503.969 li
390.172 25.5316 mo
390.172 503.969 li
462.77 25.5316 mo
462.77 503.969 li
535.371 25.5316 mo
535.371 503.969 li
607.852 25.5316 mo
607.852 503.969 li
.326574 .281529 .277562 0 cmyk
@
7.129 494.61 mo
14.211 494.61 li
14.211 511.649 li
7.129 511.649 li
cp
0 0 0 0 cmyk
ef
7.129 469.411 mo
14.211 469.411 li
14.211 486.571 li
7.129 486.571 li
cp
ef
7.129 444.211 mo
14.211 444.211 li
14.211 461.371 li
7.129 461.371 li
cp
ef
7.129 419.129 mo
14.211 419.129 li
14.211 436.172 li
7.129 436.172 li
cp
ef
7.129 393.93 mo
14.211 393.93 li
14.211 410.969 li
7.129 410.969 li
cp
ef
7.129 368.731 mo
14.211 368.731 li
14.211 385.77 li
7.129 385.77 li
cp
ef
7.129 343.532 mo
14.211 343.532 li
14.211 360.571 li
7.129 360.571 li
cp
ef
7.129 318.332 mo
14.211 318.332 li
14.211 335.488 li
7.129 335.488 li
cp
ef
7.129 293.129 mo
14.211 293.129 li
14.211 310.289 li
7.129 310.289 li
cp
ef
.051 268.051 mo
14.211 268.051 li
14.211 285.09 li
.051 285.09 li
cp
ef
.051 242.852 mo
14.211 242.852 li
14.211 259.891 li
.051 259.891 li
cp
ef
.051 217.649 mo
14.211 217.649 li
14.211 234.692 li
.051 234.692 li
cp
ef
.051 192.45 mo
14.211 192.45 li
14.211 209.489 li
.051 209.489 li
cp
ef
.051 167.25 mo
14.211 167.25 li
14.211 184.41 li
.051 184.41 li
cp
ef
.051 142.051 mo
14.211 142.051 li
14.211 159.211 li
.051 159.211 li
cp
ef
.051 116.969 mo
14.211 116.969 li
14.211 134.012 li
.051 134.012 li
cp
ef
.051 91.7696 mo
14.211 91.7696 li
14.211 108.809 li
.051 108.809 li
cp
ef
.051 66.5706 mo
14.211 66.5706 li
14.211 83.6096 li
.051 83.6096 li
cp
ef
.051 41.3706 mo
14.211 41.3706 li
14.211 58.4096 li
.051 58.4096 li
cp
ef
.051 16.1716 mo
14.211 16.1716 li
14.211 33.3316 li
.051 33.3316 li
cp
ef
.96 lw
27.172 503.969 mo
607.852 503.969 li
.369879 .299321 .304356 .000976577 cmyk
@
27.172 503.969 mo
27.172 508.411 li
99.77 503.969 mo
99.77 508.411 li
172.371 503.969 mo
172.371 508.411 li
244.969 503.969 mo
244.969 508.411 li
317.57 503.969 mo
317.57 508.411 li
390.172 503.969 mo
390.172 508.411 li
462.77 503.969 mo
462.77 508.411 li
535.371 503.969 mo
535.371 508.411 li
607.852 503.969 mo
607.852 508.411 li
@
gsave
27.172 25.4106 mo
608.57 25.4106 li
608.57 504.571 li
27.172 504.571 li
cp
clp
1 lc
27.172 503.969 mo
99.77 478.77 li
172.371 428.73 li
244.969 378.691 li
317.57 330.211 li
390.172 277.172 li
462.77 228.449 li
535.371 175.289 li
607.852 127.891 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
22.121 498.782 mo
32.078 498.782 li
32.078 508.739 li
22.121 508.739 li
cp
.62829 .284672 0 0 cmyk
@
94.719 473.7 mo
104.68 473.7 li
104.68 483.661 li
94.719 483.661 li
cp
@
167.199 423.539 mo
177.16 423.539 li
177.16 433.5 li
167.199 433.5 li
cp
@
239.801 373.621 mo
249.762 373.621 li
249.762 383.582 li
239.801 383.582 li
cp
@
312.398 325.02 mo
322.359 325.02 li
322.359 334.981 li
312.398 334.981 li
cp
@
385 272.102 mo
394.961 272.102 li
394.961 282.059 li
385 282.059 li
cp
@
457.602 223.379 mo
467.559 223.379 li
467.559 233.34 li
457.602 233.34 li
cp
@
530.199 170.219 mo
540.16 170.219 li
540.16 180.18 li
530.199 180.18 li
cp
@
602.801 122.821 mo
612.762 122.821 li
612.762 132.782 li
602.801 132.782 li
cp
@
gsave
27.172 25.4106 mo
608.57 25.4106 li
608.57 504.571 li
27.172 504.571 li
cp
clp
.96 lw
1 lc
27.172 503.969 mo
99.77 478.77 li
172.371 428.25 li
244.969 378.332 li
317.57 327.211 li
390.172 281.129 li
462.77 227.609 li
535.371 183.57 li
607.852 128.969 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
22.121 498.782 mo
32.078 498.782 li
32.078 508.739 li
22.121 508.739 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
94.719 473.582 mo
104.68 473.582 li
104.68 483.539 li
94.719 483.539 li
cp
@
167.199 423.18 mo
177.16 423.18 li
177.16 433.141 li
167.199 433.141 li
cp
@
239.801 373.141 mo
249.762 373.141 li
249.762 383.102 li
239.801 383.102 li
cp
@
312.398 322.02 mo
322.359 322.02 li
322.359 331.981 li
312.398 331.981 li
cp
@
385 275.942 mo
394.961 275.942 li
394.961 285.899 li
385 285.899 li
cp
@
457.602 222.539 mo
467.559 222.539 li
467.559 232.5 li
457.602 232.5 li
cp
@
530.199 178.5 mo
540.16 178.5 li
540.16 188.461 li
530.199 188.461 li
cp
@
602.801 123.899 mo
612.762 123.899 li
612.762 133.86 li
602.801 133.86 li
cp
@
gsave
27.172 25.4106 mo
608.57 25.4106 li
608.57 504.571 li
27.172 504.571 li
cp
clp
.96 lw
1 lc
27.172 503.969 mo
99.77 478.77 li
172.371 428.371 li
244.969 381.449 li
317.57 331.77 li
390.172 277.531 li
462.77 227.25 li
535.371 190.051 li
607.852 127.172 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
22.121 498.782 mo
32.078 498.782 li
32.078 508.739 li
22.121 508.739 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
94.719 473.582 mo
104.68 473.582 li
104.68 483.539 li
94.719 483.539 li
cp
@
167.199 423.301 mo
177.16 423.301 li
177.16 433.262 li
167.199 433.262 li
cp
@
239.801 376.262 mo
249.762 376.262 li
249.762 386.219 li
239.801 386.219 li
cp
@
312.398 326.582 mo
322.359 326.582 li
322.359 336.539 li
312.398 336.539 li
cp
@
385 272.461 mo
394.961 272.461 li
394.961 282.422 li
385 282.422 li
cp
@
457.602 222.18 mo
467.559 222.18 li
467.559 232.141 li
457.602 232.141 li
cp
@
530.199 184.86 mo
540.16 184.86 li
540.16 194.821 li
530.199 194.821 li
cp
@
602.801 122.102 mo
612.762 122.102 li
612.762 132.059 li
602.801 132.059 li
cp
@
gsave
27.172 25.4106 mo
608.57 25.4106 li
608.57 504.571 li
27.172 504.571 li
cp
clp
.96 lw
1 lc
27.172 503.969 mo
99.77 478.648 li
172.371 429.09 li
244.969 378.211 li
390.172 277.891 li
462.77 228.809 li
535.371 177.691 li
607.852 146.609 li
0 .993988 1 0 cmyk
@
grestore
22.121 498.782 mo
32.078 498.782 li
32.078 508.739 li
22.121 508.739 li
cp
0 .993988 1 0 cmyk
@
94.719 473.582 mo
104.68 473.582 li
104.68 483.539 li
94.719 483.539 li
cp
@
167.199 423.899 mo
177.16 423.899 li
177.16 433.86 li
167.199 433.86 li
cp
@
239.801 373.02 mo
249.762 373.02 li
249.762 382.981 li
239.801 382.981 li
cp
@
312.398 322.86 mo
322.359 322.86 li
322.359 332.821 li
312.398 332.821 li
cp
@
385 272.821 mo
394.961 272.821 li
394.961 282.782 li
385 282.782 li
cp
@
457.602 223.739 mo
467.559 223.739 li
467.559 233.7 li
457.602 233.7 li
cp
@
530.199 172.621 mo
540.16 172.621 li
540.16 182.582 li
530.199 182.582 li
cp
@
602.801 141.539 mo
612.762 141.539 li
612.762 151.5 li
602.801 151.5 li
cp
@
gsave
27.172 25.4106 mo
608.57 25.4106 li
608.57 504.571 li
27.172 504.571 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
27.172 503.969 mo
99.77 478.648 li
172.371 428.73 li
244.969 379.172 li
317.57 328.41 li
390.172 283.172 li
462.77 228.57 li
535.371 178.289 li
607.852 127.531 li
.62829 .284672 0 0 cmyk
@
grestore
[4 3 ] 0 dsh
22.121 498.782 mo
32.078 498.782 li
32.078 508.739 li
22.121 508.739 li
cp
.62829 .284672 0 0 cmyk
@
94.719 473.582 mo
104.68 473.582 li
104.68 483.539 li
94.719 483.539 li
cp
@
167.199 423.539 mo
177.16 423.539 li
177.16 433.5 li
167.199 433.5 li
cp
@
239.801 373.981 mo
249.762 373.981 li
249.762 383.942 li
239.801 383.942 li
cp
@
312.398 323.34 mo
322.359 323.34 li
322.359 333.301 li
312.398 333.301 li
cp
@
385 278.102 mo
394.961 278.102 li
394.961 288.059 li
385 288.059 li
cp
@
457.602 223.5 mo
467.559 223.5 li
467.559 233.461 li
457.602 233.461 li
cp
@
530.199 173.219 mo
540.16 173.219 li
540.16 183.18 li
530.199 183.18 li
cp
@
602.801 122.34 mo
612.762 122.34 li
612.762 132.301 li
602.801 132.301 li
cp
@
gsave
27.172 25.4106 mo
608.57 25.4106 li
608.57 504.571 li
27.172 504.571 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
27.172 503.969 mo
99.77 479.012 li
172.371 428.852 li
244.969 394.051 li
317.57 328.289 li
390.172 282.93 li
462.77 228.809 li
535.371 178.648 li
607.852 128.25 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
[] 0 dsh
22.121 498.782 mo
32.078 498.782 li
32.078 508.739 li
22.121 508.739 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
94.719 473.821 mo
104.68 473.821 li
104.68 483.782 li
94.719 483.782 li
cp
@
167.199 423.661 mo
177.16 423.661 li
177.16 433.622 li
167.199 433.622 li
cp
@
239.801 388.86 mo
249.762 388.86 li
249.762 398.821 li
239.801 398.821 li
cp
@
312.398 323.219 mo
322.359 323.219 li
322.359 333.18 li
312.398 333.18 li
cp
@
385 277.739 mo
394.961 277.739 li
394.961 287.7 li
385 287.7 li
cp
@
457.602 223.739 mo
467.559 223.739 li
467.559 233.7 li
457.602 233.7 li
cp
@
530.199 173.582 mo
540.16 173.582 li
540.16 183.539 li
530.199 183.539 li
cp
@
602.801 123.059 mo
612.762 123.059 li
612.762 133.02 li
602.801 133.02 li
cp
@
gsave
27.172 25.4106 mo
608.57 25.4106 li
608.57 504.571 li
27.172 504.571 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
27.172 503.969 mo
99.77 478.77 li
172.371 428.73 li
244.969 378.93 li
317.57 328.172 li
390.172 278.25 li
462.77 227.852 li
535.371 178.41 li
607.852 131.609 li
.467353 0 .87747 0 cmyk
@
grestore
22.121 498.782 mo
32.078 498.782 li
32.078 508.739 li
22.121 508.739 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
94.719 473.7 mo
104.68 473.7 li
104.68 483.661 li
94.719 483.661 li
cp
@
167.199 423.539 mo
177.16 423.539 li
177.16 433.5 li
167.199 433.5 li
cp
@
239.801 373.739 mo
249.762 373.739 li
249.762 383.7 li
239.801 383.7 li
cp
@
312.398 322.981 mo
322.359 322.981 li
322.359 332.942 li
312.398 332.942 li
cp
@
385 273.059 mo
394.961 273.059 li
394.961 283.02 li
385 283.02 li
cp
@
457.602 222.661 mo
467.559 222.661 li
467.559 232.622 li
457.602 232.622 li
cp
@
530.199 173.34 mo
540.16 173.34 li
540.16 183.301 li
530.199 183.301 li
cp
@
602.801 126.422 mo
612.762 126.422 li
612.762 136.379 li
602.801 136.379 li
cp
@
gsave
27.172 25.4106 mo
608.57 25.4106 li
608.57 504.571 li
27.172 504.571 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
27.172 503.969 mo
99.77 479.012 li
172.371 434.969 li
244.969 378.449 li
317.57 328.531 li
390.172 284.371 li
462.77 229.051 li
535.371 179.371 li
607.852 129.09 li
0 .993988 1 0 cmyk
@
grestore
22.121 498.782 mo
32.078 498.782 li
32.078 508.739 li
22.121 508.739 li
cp
0 .993988 1 0 cmyk
@
94.719 473.942 mo
104.68 473.942 li
104.68 483.899 li
94.719 483.899 li
cp
@
167.199 429.899 mo
177.16 429.899 li
177.16 439.86 li
167.199 439.86 li
cp
@
239.801 373.379 mo
249.762 373.379 li
249.762 383.34 li
239.801 383.34 li
cp
@
312.398 323.461 mo
322.359 323.461 li
322.359 333.422 li
312.398 333.422 li
cp
@
385 279.18 mo
394.961 279.18 li
394.961 289.141 li
385 289.141 li
cp
@
457.602 223.86 mo
467.559 223.86 li
467.559 233.821 li
457.602 233.821 li
cp
@
530.199 174.301 mo
540.16 174.301 li
540.16 184.262 li
530.199 184.262 li
cp
@
602.801 123.899 mo
612.762 123.899 li
612.762 133.86 li
602.801 133.86 li
cp
@
7.102 494.582 mo
14.196 494.582 li
14.196 511.672 li
7.102 511.672 li
cp
0 0 0 0 cmyk
ef
13.484 507.539 mo
13.48 507.629 13.473 507.699 13.461 507.758 cv
13.445 507.82 13.426 507.871 13.406 507.902 cv
13.383 507.941 13.359 507.965 13.328 507.98 cv
13.297 507.996 13.266 508.004 13.238 508.004 cv
8.602 508.004 li
8.566 508.004 8.539 507.996 8.512 507.98 cv
8.484 507.965 8.457 507.941 8.434 507.902 cv
8.406 507.871 8.387 507.82 8.375 507.758 cv
8.359 507.699 8.352 507.629 8.355 507.539 cv
8.352 507.461 8.359 507.387 8.375 507.324 cv
8.387 507.266 8.402 507.219 8.426 507.18 cv
8.441 507.145 8.469 507.113 8.5 507.09 cv
8.531 507.07 8.563 507.062 8.602 507.059 cv
10.453 507.059 li
10.453 500.312 li
8.738 501.332 li
8.648 501.383 8.578 501.41 8.531 501.418 cv
8.477 501.426 8.434 501.418 8.402 501.387 cv
8.367 501.359 8.348 501.309 8.336 501.238 cv
8.324 501.172 8.316 501.086 8.32 500.977 cv
8.316 500.902 8.32 500.836 8.332 500.777 cv
8.336 500.727 8.348 500.68 8.363 500.641 cv
8.375 500.605 8.395 500.574 8.418 500.547 cv
8.441 500.52 8.473 500.492 8.52 500.465 cv
10.563 499.152 li
10.578 499.141 10.598 499.129 10.629 499.121 cv
10.652 499.113 10.688 499.105 10.734 499.094 cv
10.773 499.086 10.824 499.078 10.879 499.074 cv
10.934 499.074 11 499.074 11.086 499.07 cv
11.191 499.074 11.285 499.078 11.359 499.086 cv
11.43 499.094 11.484 499.109 11.531 499.125 cv
11.57 499.145 11.598 499.164 11.613 499.187 cv
11.621 499.215 11.629 499.238 11.633 499.262 cv
11.633 507.059 li
13.238 507.059 li
13.273 507.062 13.309 507.07 13.34 507.09 cv
13.371 507.113 13.395 507.145 13.418 507.18 cv
13.434 507.219 13.449 507.266 13.465 507.324 cv
13.473 507.387 13.48 507.461 13.484 507.539 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
7.102 469.403 mo
14.196 469.403 li
14.196 486.493 li
7.102 486.493 li
cp
0 0 0 0 cmyk
ef
13.465 482.293 mo
13.461 482.379 13.457 482.453 13.445 482.516 cv
13.434 482.582 13.418 482.637 13.398 482.676 cv
13.375 482.723 13.348 482.754 13.316 482.77 cv
13.281 482.793 13.242 482.801 13.203 482.801 cv
8.301 482.801 li
8.238 482.801 8.18 482.793 8.133 482.777 cv
8.082 482.762 8.043 482.738 8.008 482.699 cv
7.973 482.668 7.945 482.613 7.934 482.543 cv
7.914 482.473 7.906 482.387 7.91 482.285 cv
7.906 482.195 7.91 482.117 7.918 482.047 cv
7.922 481.98 7.938 481.922 7.965 481.867 cv
7.988 481.816 8.02 481.762 8.055 481.707 cv
8.09 481.656 8.133 481.602 8.191 481.539 cv
9.965 479.715 li
10.375 479.297 10.703 478.922 10.953 478.586 cv
11.199 478.258 11.391 477.953 11.523 477.676 cv
11.656 477.402 11.742 477.152 11.789 476.926 cv
11.828 476.703 11.852 476.492 11.852 476.297 cv
11.852 476.102 11.816 475.918 11.75 475.738 cv
11.684 475.566 11.59 475.41 11.465 475.273 cv
11.34 475.145 11.184 475.039 10.996 474.957 cv
10.809 474.883 10.59 474.844 10.344 474.84 cv
10.055 474.844 9.797 474.883 9.57 474.957 cv
9.34 475.039 9.141 475.125 8.969 475.211 cv
8.797 475.305 8.652 475.387 8.535 475.465 cv
8.418 475.543 8.332 475.582 8.281 475.582 cv
8.246 475.582 8.215 475.574 8.191 475.555 cv
8.16 475.539 8.141 475.508 8.125 475.465 cv
8.109 475.426 8.094 475.371 8.086 475.301 cv
8.074 475.234 8.07 475.152 8.074 475.055 cv
8.07 474.988 8.074 474.93 8.082 474.879 cv
8.086 474.828 8.094 474.785 8.105 474.746 cv
8.113 474.711 8.129 474.676 8.148 474.645 cv
8.168 474.613 8.203 474.574 8.262 474.523 cv
8.313 474.477 8.406 474.41 8.543 474.328 cv
8.676 474.246 8.848 474.168 9.051 474.086 cv
9.254 474.008 9.477 473.937 9.723 473.883 cv
9.965 473.828 10.223 473.801 10.496 473.801 cv
10.922 473.801 11.297 473.863 11.621 473.984 cv
11.941 474.105 12.207 474.27 12.422 474.48 cv
12.633 474.691 12.793 474.937 12.898 475.211 cv
13.004 475.492 13.059 475.789 13.059 476.102 cv
13.059 476.391 13.031 476.672 12.98 476.949 cv
12.93 477.234 12.824 477.539 12.664 477.863 cv
12.5 478.191 12.266 478.555 11.961 478.953 cv
11.652 479.355 11.246 479.816 10.742 480.332 cv
9.336 481.801 li
13.195 481.801 li
13.227 481.805 13.262 481.816 13.301 481.832 cv
13.332 481.855 13.363 481.887 13.391 481.926 cv
13.414 481.969 13.434 482.02 13.445 482.078 cv
13.457 482.145 13.461 482.215 13.465 482.293 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
7.102 444.219 mo
14.196 444.219 li
14.196 461.309 li
7.102 461.309 li
cp
0 0 0 0 cmyk
ef
13.395 455.094 mo
13.391 455.504 13.32 455.871 13.18 456.195 cv
13.035 456.523 12.832 456.805 12.57 457.035 cv
12.305 457.27 11.977 457.445 11.59 457.57 cv
11.199 457.695 10.762 457.758 10.277 457.758 cv
9.973 457.758 9.695 457.73 9.441 457.684 cv
9.18 457.637 8.949 457.586 8.754 457.516 cv
8.551 457.453 8.387 457.383 8.254 457.312 cv
8.121 457.242 8.035 457.191 8.004 457.156 cv
7.965 457.129 7.941 457.098 7.926 457.062 cv
7.906 457.031 7.887 456.992 7.875 456.945 cv
7.859 456.902 7.852 456.848 7.844 456.777 cv
7.836 456.715 7.832 456.633 7.836 456.531 cv
7.832 456.371 7.848 456.258 7.883 456.191 cv
7.914 456.129 7.961 456.094 8.023 456.094 cv
8.066 456.094 8.148 456.133 8.273 456.203 cv
8.395 456.281 8.555 456.359 8.75 456.441 cv
8.941 456.527 9.168 456.605 9.434 456.676 cv
9.691 456.75 9.984 456.785 10.305 456.785 cv
10.613 456.785 10.883 456.746 11.121 456.668 cv
11.352 456.59 11.551 456.48 11.711 456.34 cv
11.867 456.199 11.984 456.031 12.066 455.836 cv
12.145 455.641 12.184 455.43 12.188 455.203 cv
12.184 454.953 12.133 454.727 12.035 454.523 cv
11.93 454.324 11.781 454.152 11.59 454.004 cv
11.391 453.859 11.152 453.746 10.867 453.668 cv
10.582 453.59 10.258 453.551 9.895 453.551 cv
9.023 453.551 li
8.98 453.551 8.945 453.543 8.91 453.527 cv
8.875 453.512 8.844 453.484 8.82 453.445 cv
8.793 453.41 8.773 453.363 8.758 453.305 cv
8.742 453.246 8.734 453.168 8.734 453.07 cv
8.734 452.984 8.738 452.914 8.754 452.855 cv
8.762 452.801 8.781 452.754 8.813 452.719 cv
8.836 452.684 8.867 452.66 8.898 452.641 cv
8.93 452.629 8.965 452.621 9.008 452.617 cv
9.781 452.617 li
10.082 452.621 10.352 452.582 10.594 452.5 cv
10.828 452.426 11.031 452.312 11.203 452.164 cv
11.367 452.02 11.496 451.844 11.586 451.641 cv
11.676 451.437 11.723 451.211 11.723 450.957 cv
11.723 450.777 11.691 450.602 11.633 450.434 cv
11.57 450.27 11.48 450.125 11.363 450 cv
11.242 449.875 11.09 449.777 10.91 449.707 cv
10.723 449.637 10.512 449.602 10.27 449.602 cv
10.004 449.602 9.758 449.645 9.539 449.723 cv
9.313 449.805 9.117 449.891 8.945 449.98 cv
8.77 450.074 8.625 450.16 8.512 450.238 cv
8.398 450.32 8.316 450.359 8.273 450.355 cv
8.238 450.359 8.211 450.352 8.188 450.34 cv
8.16 450.328 8.141 450.305 8.125 450.27 cv
8.109 450.238 8.098 450.191 8.09 450.125 cv
8.082 450.066 8.078 449.984 8.082 449.883 cv
8.078 449.816 8.078 449.758 8.086 449.703 cv
8.086 449.652 8.098 449.605 8.113 449.562 cv
8.129 449.527 8.145 449.492 8.164 449.457 cv
8.18 449.43 8.211 449.391 8.254 449.344 cv
8.297 449.301 8.383 449.238 8.52 449.156 cv
8.648 449.074 8.813 448.996 9.008 448.914 cv
9.199 448.836 9.422 448.766 9.68 448.711 cv
9.93 448.656 10.203 448.629 10.5 448.629 cv
10.906 448.629 11.27 448.684 11.582 448.785 cv
11.895 448.895 12.152 449.043 12.363 449.23 cv
12.566 449.426 12.723 449.656 12.828 449.922 cv
12.93 450.191 12.98 450.484 12.984 450.809 cv
12.98 451.09 12.945 451.352 12.875 451.586 cv
12.801 451.828 12.691 452.039 12.551 452.223 cv
12.406 452.41 12.234 452.566 12.031 452.695 cv
11.824 452.828 11.586 452.922 11.316 452.969 cv
11.316 452.98 li
11.621 453.016 11.902 453.09 12.156 453.211 cv
12.41 453.332 12.629 453.484 12.813 453.668 cv
12.992 453.852 13.133 454.066 13.238 454.309 cv
13.34 454.555 13.391 454.816 13.395 455.094 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
7.102 419.039 mo
14.196 419.039 li
14.196 436.129 li
7.102 436.129 li
cp
0 0 0 0 cmyk
ef
13.84 429.926 mo
13.836 430.078 13.813 430.199 13.77 430.285 cv
13.723 430.375 13.66 430.418 13.578 430.414 cv
12.578 430.414 li
12.578 432.277 li
12.578 432.316 12.566 432.348 12.551 432.371 cv
12.527 432.398 12.496 432.418 12.453 432.437 cv
12.402 432.453 12.34 432.465 12.27 432.477 cv
12.191 432.484 12.098 432.488 11.98 432.492 cv
11.863 432.488 11.766 432.484 11.695 432.477 cv
11.617 432.465 11.559 432.453 11.516 432.437 cv
11.469 432.418 11.438 432.398 11.422 432.371 cv
11.402 432.348 11.395 432.316 11.398 432.277 cv
11.398 430.414 li
7.77 430.414 li
7.711 430.418 7.668 430.41 7.633 430.395 cv
7.598 430.383 7.563 430.355 7.535 430.316 cv
7.504 430.281 7.484 430.23 7.473 430.16 cv
7.461 430.094 7.457 430.004 7.457 429.891 cv
7.457 429.809 7.457 429.73 7.465 429.66 cv
7.465 429.59 7.477 429.527 7.492 429.473 cv
7.504 429.418 7.52 429.363 7.547 429.309 cv
7.566 429.254 7.594 429.199 7.629 429.137 cv
10.789 423.75 li
10.809 423.715 10.844 423.684 10.891 423.656 cv
10.934 423.629 10.988 423.605 11.063 423.586 cv
11.129 423.57 11.215 423.559 11.32 423.547 cv
11.422 423.543 11.543 423.539 11.684 423.535 cv
11.832 423.539 11.969 423.543 12.086 423.555 cv
12.199 423.566 12.289 423.582 12.363 423.598 cv
12.43 423.617 12.484 423.641 12.523 423.672 cv
12.559 423.703 12.578 423.738 12.578 423.777 cv
12.578 429.441 li
13.578 429.441 li
13.652 429.445 13.715 429.484 13.766 429.562 cv
13.813 429.645 13.836 429.766 13.84 429.926 cv
cp
11.398 424.574 mo
11.387 424.574 li
8.535 429.441 li
11.398 429.441 li
cp
.629236 .549432 .540154 .282963 cmyk
f
7.102 393.86 mo
14.196 393.86 li
14.196 410.95 li
7.102 410.95 li
cp
0 0 0 0 cmyk
ef
13.422 404.398 mo
13.422 404.875 13.34 405.297 13.18 405.668 cv
13.02 406.039 12.793 406.352 12.504 406.605 cv
12.207 406.859 11.859 407.055 11.457 407.184 cv
11.051 407.316 10.602 407.379 10.109 407.379 cv
9.832 407.379 9.57 407.359 9.328 407.32 cv
9.078 407.281 8.859 407.234 8.672 407.18 cv
8.477 407.125 8.32 407.07 8.195 407.012 cv
8.07 406.961 7.992 406.918 7.961 406.883 cv
7.926 406.852 7.902 406.82 7.891 406.793 cv
7.875 406.766 7.859 406.734 7.852 406.691 cv
7.836 406.656 7.828 406.605 7.828 406.543 cv
7.82 406.484 7.82 406.414 7.82 406.332 cv
7.82 406.258 7.824 406.187 7.832 406.125 cv
7.84 406.062 7.852 406.012 7.871 405.973 cv
7.887 405.934 7.906 405.906 7.934 405.887 cv
7.957 405.871 7.988 405.863 8.02 405.859 cv
8.066 405.863 8.137 405.891 8.23 405.945 cv
8.324 406.004 8.453 406.066 8.617 406.133 cv
8.781 406.199 8.98 406.262 9.223 406.32 cv
9.457 406.379 9.742 406.406 10.078 406.406 cv
10.379 406.406 10.66 406.371 10.918 406.297 cv
11.172 406.227 11.395 406.113 11.582 405.957 cv
11.766 405.805 11.91 405.609 12.016 405.371 cv
12.121 405.137 12.172 404.848 12.176 404.508 cv
12.172 404.227 12.129 403.977 12.039 403.758 cv
11.949 403.539 11.813 403.359 11.629 403.215 cv
11.441 403.074 11.207 402.969 10.926 402.895 cv
10.641 402.824 10.301 402.785 9.914 402.785 cv
9.629 402.785 9.391 402.801 9.191 402.828 cv
8.988 402.859 8.801 402.875 8.629 402.871 cv
8.5 402.875 8.406 402.844 8.355 402.781 cv
8.297 402.723 8.27 402.609 8.273 402.437 cv
8.273 398.824 li
8.27 398.676 8.305 398.566 8.379 398.488 cv
8.445 398.418 8.547 398.379 8.684 398.379 cv
12.613 398.379 li
12.648 398.379 12.684 398.391 12.719 398.41 cv
12.75 398.434 12.777 398.465 12.805 398.504 cv
12.824 398.547 12.84 398.598 12.855 398.66 cv
12.863 398.727 12.871 398.805 12.875 398.887 cv
12.871 399.055 12.848 399.18 12.809 399.27 cv
12.762 399.363 12.703 399.41 12.625 399.406 cv
9.453 399.406 li
9.453 401.895 li
9.605 401.875 9.762 401.863 9.926 401.855 cv
10.082 401.852 10.27 401.848 10.484 401.848 cv
10.969 401.848 11.395 401.91 11.762 402.031 cv
12.125 402.152 12.43 402.324 12.68 402.543 cv
12.922 402.77 13.109 403.035 13.234 403.348 cv
13.359 403.664 13.422 404.016 13.422 404.398 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
7.102 368.68 mo
14.196 368.68 li
14.196 385.77 li
7.102 385.77 li
cp
0 0 0 0 cmyk
ef
13.691 379.199 mo
13.691 379.59 13.629 379.969 13.512 380.328 cv
13.387 380.695 13.203 381.012 12.961 381.285 cv
12.711 381.562 12.398 381.785 12.023 381.949 cv
11.641 382.117 11.195 382.199 10.68 382.199 cv
10.309 382.199 9.98 382.156 9.699 382.062 cv
9.414 381.977 9.168 381.844 8.957 381.672 cv
8.746 381.504 8.57 381.297 8.434 381.051 cv
8.293 380.805 8.18 380.523 8.098 380.207 cv
8.012 379.895 7.953 379.551 7.918 379.172 cv
7.879 378.801 7.859 378.398 7.863 377.965 cv
7.859 377.586 7.879 377.203 7.922 376.812 cv
7.961 376.43 8.035 376.055 8.141 375.687 cv
8.246 375.328 8.391 374.988 8.57 374.672 cv
8.75 374.355 8.977 374.078 9.25 373.844 cv
9.523 373.609 9.848 373.422 10.227 373.281 cv
10.605 373.145 11.047 373.078 11.551 373.074 cv
11.719 373.078 11.891 373.086 12.063 373.105 cv
12.234 373.129 12.395 373.16 12.543 373.191 cv
12.691 373.23 12.813 373.266 12.914 373.305 cv
13.012 373.344 13.078 373.379 13.113 373.402 cv
13.141 373.43 13.164 373.457 13.184 373.484 cv
13.199 373.516 13.215 373.547 13.223 373.582 cv
13.23 373.617 13.234 373.656 13.242 373.699 cv
13.242 373.742 13.246 373.797 13.25 373.859 cv
13.246 373.945 13.246 374.016 13.246 374.07 cv
13.242 374.133 13.23 374.18 13.219 374.215 cv
13.199 374.254 13.18 374.281 13.156 374.297 cv
13.129 374.316 13.098 374.324 13.059 374.324 cv
13.008 374.324 12.938 374.309 12.852 374.277 cv
12.762 374.246 12.656 374.211 12.535 374.168 cv
12.41 374.133 12.262 374.098 12.086 374.062 cv
11.91 374.035 11.707 374.02 11.477 374.016 cv
11.047 374.02 10.68 374.105 10.375 374.277 cv
10.07 374.449 9.82 374.684 9.625 374.977 cv
9.43 375.27 9.285 375.609 9.195 375.992 cv
9.098 376.383 9.043 376.785 9.035 377.203 cv
9.152 377.137 9.289 377.07 9.438 377 cv
9.586 376.934 9.746 376.871 9.922 376.812 cv
10.098 376.762 10.285 376.715 10.48 376.68 cv
10.676 376.648 10.887 376.633 11.113 376.629 cv
11.59 376.633 11.992 376.699 12.324 376.824 cv
12.652 376.957 12.918 377.137 13.125 377.367 cv
13.324 377.598 13.469 377.867 13.559 378.18 cv
13.645 378.492 13.691 378.832 13.691 379.199 cv
cp
12.496 379.309 mo
12.496 379.047 12.469 378.805 12.418 378.586 cv
12.363 378.371 12.273 378.187 12.152 378.031 cv
12.027 377.883 11.863 377.766 11.66 377.684 cv
11.449 377.602 11.195 377.559 10.898 377.559 cv
10.727 377.559 10.559 377.574 10.391 377.605 cv
10.219 377.637 10.055 377.68 9.898 377.727 cv
9.738 377.781 9.59 377.844 9.449 377.914 cv
9.305 377.988 9.172 378.062 9.055 378.141 cv
9.051 378.734 9.09 379.23 9.168 379.625 cv
9.242 380.023 9.352 380.34 9.496 380.578 cv
9.641 380.82 9.82 380.992 10.035 381.094 cv
10.25 381.199 10.5 381.25 10.789 381.246 cv
11.078 381.25 11.332 381.195 11.547 381.082 cv
11.762 380.977 11.938 380.828 12.082 380.641 cv
12.223 380.457 12.328 380.25 12.395 380.02 cv
12.461 379.789 12.496 379.555 12.496 379.309 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
7.102 343.5 mo
14.196 343.5 li
14.196 360.59 li
7.102 360.59 li
cp
0 0 0 0 cmyk
ef
13.594 348.535 mo
13.59 348.621 13.586 348.695 13.582 348.758 cv
13.574 348.828 13.566 348.891 13.555 348.949 cv
13.543 349.016 13.527 349.074 13.508 349.129 cv
13.484 349.187 13.461 349.25 13.438 349.309 cv
10.242 356.672 li
10.215 356.73 10.188 356.773 10.156 356.805 cv
10.121 356.84 10.078 356.867 10.023 356.887 cv
9.969 356.906 9.898 356.918 9.82 356.93 cv
9.734 356.934 9.637 356.937 9.52 356.941 cv
9.363 356.937 9.242 356.93 9.156 356.918 cv
9.07 356.902 9.008 356.887 8.969 356.855 cv
8.93 356.828 8.91 356.789 8.918 356.746 cv
8.918 356.703 8.934 356.652 8.965 356.59 cv
12.324 349.062 li
8.066 349.062 li
7.98 349.066 7.914 349.02 7.871 348.926 cv
7.828 348.836 7.809 348.707 7.809 348.543 cv
7.809 348.457 7.813 348.383 7.824 348.316 cv
7.836 348.254 7.852 348.199 7.875 348.156 cv
7.895 348.113 7.922 348.082 7.957 348.059 cv
7.988 348.039 8.027 348.027 8.066 348.027 cv
13.238 348.027 li
13.297 348.027 13.352 348.035 13.402 348.051 cv
13.449 348.066 13.484 348.094 13.512 348.133 cv
13.535 348.172 13.555 348.227 13.57 348.289 cv
13.582 348.355 13.59 348.437 13.594 348.535 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
7.102 318.321 mo
14.196 318.321 li
14.196 335.411 li
7.102 335.411 li
cp
0 0 0 0 cmyk
ef
13.668 329.422 mo
13.668 329.809 13.598 330.152 13.461 330.449 cv
13.324 330.754 13.129 331.004 12.871 331.207 cv
12.613 331.414 12.293 331.57 11.914 331.672 cv
11.531 331.777 11.098 331.828 10.613 331.828 cv
10.152 331.828 9.742 331.781 9.383 331.687 cv
9.02 331.594 8.715 331.453 8.465 331.262 cv
8.215 331.078 8.023 330.848 7.891 330.57 cv
7.758 330.297 7.691 329.984 7.691 329.629 cv
7.691 329.355 7.734 329.098 7.828 328.863 cv
7.914 328.629 8.047 328.414 8.223 328.219 cv
8.391 328.023 8.602 327.84 8.855 327.664 cv
9.105 327.496 9.391 327.332 9.707 327.176 cv
9.434 327.035 9.191 326.887 8.98 326.727 cv
8.77 326.57 8.59 326.398 8.445 326.211 cv
8.297 326.027 8.188 325.832 8.113 325.621 cv
8.035 325.414 7.996 325.184 8 324.934 cv
7.996 324.625 8.051 324.332 8.168 324.059 cv
8.277 323.789 8.449 323.555 8.676 323.352 cv
8.902 323.152 9.188 322.992 9.539 322.875 cv
9.883 322.758 10.293 322.699 10.762 322.699 cv
11.207 322.699 11.594 322.754 11.922 322.859 cv
12.25 322.969 12.52 323.113 12.73 323.297 cv
12.941 323.484 13.098 323.703 13.203 323.953 cv
13.301 324.203 13.352 324.473 13.355 324.762 cv
13.352 324.996 13.313 325.223 13.242 325.434 cv
13.164 325.652 13.055 325.855 12.906 326.043 cv
12.758 326.238 12.578 326.418 12.367 326.582 cv
12.156 326.754 11.914 326.91 11.641 327.051 cv
11.961 327.215 12.246 327.379 12.504 327.547 cv
12.754 327.715 12.969 327.895 13.145 328.09 cv
13.313 328.285 13.441 328.492 13.535 328.707 cv
13.621 328.926 13.668 329.164 13.668 329.422 cv
cp
12.188 324.871 mo
12.184 324.684 12.152 324.508 12.086 324.352 cv
12.02 324.195 11.922 324.062 11.797 323.953 cv
11.668 323.844 11.508 323.762 11.32 323.703 cv
11.125 323.648 10.91 323.621 10.672 323.617 cv
10.176 323.621 9.801 323.73 9.551 323.953 cv
9.293 324.18 9.168 324.488 9.172 324.871 cv
9.168 325.051 9.199 325.215 9.262 325.367 cv
9.324 325.523 9.418 325.668 9.551 325.805 cv
9.676 325.941 9.84 326.074 10.043 326.203 cv
10.238 326.336 10.477 326.473 10.754 326.613 cv
11.215 326.379 11.57 326.117 11.816 325.824 cv
12.063 325.539 12.184 325.223 12.188 324.871 cv
cp
12.477 329.547 mo
12.473 329.34 12.434 329.148 12.359 328.977 cv
12.277 328.809 12.16 328.648 12.004 328.496 cv
11.848 328.348 11.648 328.203 11.414 328.062 cv
11.176 327.926 10.906 327.781 10.598 327.629 cv
10.309 327.773 10.055 327.914 9.84 328.055 cv
9.621 328.195 9.441 328.344 9.305 328.492 cv
9.164 328.648 9.059 328.805 8.988 328.969 cv
8.914 329.137 8.879 329.32 8.883 329.52 cv
8.879 329.965 9.031 330.309 9.34 330.547 cv
9.641 330.793 10.094 330.914 10.699 330.91 cv
11.281 330.914 11.727 330.793 12.027 330.543 cv
12.324 330.301 12.473 329.969 12.477 329.547 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
7.102 293.141 mo
14.196 293.141 li
14.196 310.231 li
7.102 310.231 li
cp
0 0 0 0 cmyk
ef
13.531 301.734 mo
13.527 302.121 13.504 302.508 13.461 302.898 cv
13.414 303.293 13.336 303.672 13.23 304.035 cv
13.117 304.398 12.973 304.738 12.789 305.055 cv
12.602 305.375 12.367 305.656 12.09 305.891 cv
11.805 306.133 11.469 306.316 11.086 306.449 cv
10.695 306.582 10.25 306.648 9.742 306.648 cv
9.543 306.648 9.352 306.633 9.168 306.609 cv
8.98 306.582 8.813 306.555 8.668 306.52 cv
8.516 306.484 8.391 306.445 8.293 306.402 cv
8.191 306.363 8.117 306.324 8.074 306.281 cv
8.027 306.242 7.996 306.187 7.977 306.113 cv
7.953 306.043 7.941 305.945 7.945 305.828 cv
7.941 305.727 7.945 305.648 7.953 305.59 cv
7.957 305.531 7.969 305.484 7.984 305.453 cv
8 305.422 8.02 305.402 8.043 305.387 cv
8.066 305.379 8.098 305.371 8.137 305.367 cv
8.184 305.371 8.254 305.387 8.348 305.418 cv
8.438 305.453 8.551 305.492 8.695 305.531 cv
8.832 305.574 8.996 305.613 9.184 305.645 cv
9.367 305.684 9.578 305.699 9.816 305.695 cv
10.258 305.699 10.637 305.613 10.957 305.441 cv
11.27 305.27 11.531 305.043 11.734 304.754 cv
11.938 304.469 12.086 304.133 12.188 303.75 cv
12.285 303.371 12.34 302.973 12.352 302.551 cv
12.105 302.695 11.816 302.82 11.48 302.926 cv
11.141 303.039 10.754 303.094 10.316 303.09 cv
9.824 303.094 9.41 303.027 9.074 302.891 cv
8.738 302.758 8.465 302.574 8.262 302.34 cv
8.055 302.109 7.91 301.832 7.824 301.508 cv
7.734 301.191 7.691 300.84 7.691 300.461 cv
7.691 300.07 7.746 299.699 7.863 299.34 cv
7.973 298.988 8.152 298.676 8.398 298.406 cv
8.637 298.137 8.945 297.922 9.324 297.762 cv
9.695 297.602 10.145 297.52 10.668 297.52 cv
11.035 297.52 11.359 297.566 11.648 297.66 cv
11.93 297.754 12.18 297.891 12.395 298.066 cv
12.602 298.242 12.781 298.453 12.93 298.703 cv
13.074 298.953 13.191 299.234 13.281 299.547 cv
13.367 299.863 13.43 300.207 13.473 300.574 cv
13.508 300.945 13.527 301.332 13.531 301.734 cv
cp
12.332 301.605 mo
12.332 301.023 12.293 300.531 12.215 300.129 cv
12.137 299.73 12.02 299.406 11.871 299.156 cv
11.719 298.91 11.535 298.73 11.316 298.621 cv
11.094 298.512 10.84 298.457 10.559 298.457 cv
10.254 298.457 10 298.512 9.793 298.621 cv
9.582 298.73 9.41 298.875 9.277 299.051 cv
9.141 299.234 9.039 299.437 8.977 299.664 cv
8.91 299.895 8.879 300.133 8.883 300.371 cv
8.879 300.645 8.91 300.891 8.969 301.109 cv
9.023 301.336 9.113 301.523 9.246 301.68 cv
9.371 301.836 9.539 301.957 9.746 302.043 cv
9.949 302.129 10.203 302.172 10.508 302.168 cv
10.848 302.172 11.18 302.121 11.504 302.016 cv
11.82 301.914 12.098 301.777 12.332 301.605 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
0 267.961 mo
14.191 267.961 li
14.191 285.051 li
0 285.051 li
cp
0 0 0 0 cmyk
ef
6.387 280.887 mo
6.383 280.977 6.375 281.047 6.363 281.105 cv
6.348 281.168 6.328 281.219 6.309 281.25 cv
6.285 281.289 6.262 281.312 6.23 281.328 cv
6.199 281.344 6.168 281.352 6.141 281.352 cv
1.504 281.352 li
1.469 281.352 1.441 281.344 1.414 281.328 cv
1.387 281.312 1.359 281.289 1.336 281.25 cv
1.309 281.219 1.289 281.168 1.277 281.105 cv
1.262 281.047 1.254 280.977 1.258 280.887 cv
1.254 280.809 1.262 280.734 1.277 280.672 cv
1.289 280.613 1.305 280.566 1.328 280.527 cv
1.344 280.492 1.371 280.461 1.402 280.437 cv
1.434 280.418 1.465 280.41 1.504 280.406 cv
3.355 280.406 li
3.355 273.66 li
1.641 274.68 li
1.551 274.73 1.48 274.758 1.434 274.766 cv
1.379 274.773 1.336 274.766 1.305 274.734 cv
1.27 274.707 1.25 274.656 1.238 274.586 cv
1.227 274.52 1.219 274.434 1.223 274.324 cv
1.219 274.25 1.223 274.184 1.234 274.125 cv
1.238 274.074 1.25 274.027 1.266 273.988 cv
1.277 273.953 1.297 273.922 1.32 273.895 cv
1.344 273.867 1.375 273.84 1.422 273.812 cv
3.465 272.5 li
3.48 272.488 3.5 272.477 3.531 272.469 cv
3.555 272.461 3.59 272.453 3.637 272.441 cv
3.676 272.434 3.727 272.426 3.781 272.422 cv
3.836 272.422 3.902 272.422 3.988 272.418 cv
4.094 272.422 4.188 272.426 4.262 272.434 cv
4.332 272.441 4.387 272.457 4.434 272.473 cv
4.473 272.492 4.5 272.512 4.516 272.535 cv
4.523 272.562 4.531 272.586 4.535 272.609 cv
4.535 280.406 li
6.141 280.406 li
6.176 280.41 6.211 280.418 6.242 280.437 cv
6.273 280.461 6.297 280.492 6.32 280.527 cv
6.336 280.566 6.352 280.613 6.367 280.672 cv
6.375 280.734 6.383 280.809 6.387 280.887 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.738 276.895 mo
13.734 277.578 13.684 278.199 13.578 278.762 cv
13.469 279.324 13.289 279.809 13.043 280.211 cv
12.789 280.617 12.461 280.93 12.063 281.148 cv
11.656 281.371 11.164 281.48 10.578 281.48 cv
10.02 281.48 9.547 281.383 9.168 281.184 cv
8.785 280.988 8.48 280.695 8.246 280.309 cv
8.012 279.922 7.844 279.449 7.75 278.883 cv
7.648 278.32 7.602 277.672 7.602 276.937 cv
7.602 276.266 7.656 275.645 7.766 275.078 cv
7.875 274.516 8.051 274.031 8.301 273.625 cv
8.543 273.223 8.867 272.91 9.273 272.684 cv
9.672 272.465 10.168 272.352 10.758 272.352 cv
11.316 272.352 11.789 272.453 12.172 272.648 cv
12.555 272.852 12.859 273.145 13.094 273.527 cv
13.324 273.918 13.492 274.391 13.59 274.953 cv
13.688 275.516 13.734 276.164 13.738 276.895 cv
cp
12.531 276.977 mo
12.527 276.535 12.512 276.137 12.484 275.785 cv
12.449 275.434 12.402 275.125 12.344 274.855 cv
12.277 274.586 12.199 274.355 12.102 274.16 cv
12.004 273.969 11.887 273.809 11.75 273.68 cv
11.609 273.555 11.449 273.461 11.277 273.402 cv
11.098 273.348 10.902 273.32 10.688 273.316 cv
10.297 273.32 9.98 273.41 9.742 273.594 cv
9.496 273.777 9.305 274.031 9.168 274.348 cv
9.027 274.668 8.934 275.039 8.883 275.469 cv
8.832 275.898 8.809 276.363 8.809 276.855 cv
8.809 277.52 8.84 278.082 8.91 278.543 cv
8.977 279.012 9.086 279.391 9.238 279.68 cv
9.383 279.977 9.574 280.187 9.805 280.316 cv
10.035 280.453 10.316 280.52 10.648 280.516 cv
10.902 280.52 11.125 280.48 11.32 280.395 cv
11.512 280.316 11.68 280.195 11.82 280.039 cv
11.961 279.887 12.074 279.703 12.168 279.488 cv
12.254 279.273 12.328 279.035 12.387 278.773 cv
12.438 278.516 12.477 278.234 12.5 277.93 cv
12.52 277.625 12.527 277.309 12.531 276.977 cv
cp
f
0 242.782 mo
14.191 242.782 li
14.191 259.872 li
0 259.872 li
cp
0 0 0 0 cmyk
ef
6.387 255.684 mo
6.383 255.773 6.375 255.844 6.363 255.902 cv
6.348 255.965 6.328 256.016 6.309 256.047 cv
6.285 256.086 6.262 256.109 6.23 256.125 cv
6.199 256.141 6.168 256.148 6.141 256.148 cv
1.504 256.148 li
1.469 256.148 1.441 256.141 1.414 256.125 cv
1.387 256.109 1.359 256.086 1.336 256.047 cv
1.309 256.016 1.289 255.965 1.277 255.902 cv
1.262 255.844 1.254 255.773 1.258 255.684 cv
1.254 255.605 1.262 255.531 1.277 255.469 cv
1.289 255.41 1.305 255.363 1.328 255.324 cv
1.344 255.289 1.371 255.258 1.402 255.234 cv
1.434 255.215 1.465 255.207 1.504 255.203 cv
3.355 255.203 li
3.355 248.457 li
1.641 249.477 li
1.551 249.527 1.48 249.555 1.434 249.562 cv
1.379 249.57 1.336 249.562 1.305 249.531 cv
1.27 249.504 1.25 249.453 1.238 249.383 cv
1.227 249.316 1.219 249.23 1.223 249.121 cv
1.219 249.047 1.223 248.98 1.234 248.922 cv
1.238 248.871 1.25 248.824 1.266 248.785 cv
1.277 248.75 1.297 248.719 1.32 248.691 cv
1.344 248.664 1.375 248.637 1.422 248.609 cv
3.465 247.297 li
3.48 247.285 3.5 247.273 3.531 247.266 cv
3.555 247.258 3.59 247.25 3.637 247.238 cv
3.676 247.23 3.727 247.223 3.781 247.219 cv
3.836 247.219 3.902 247.219 3.988 247.215 cv
4.094 247.219 4.188 247.223 4.262 247.23 cv
4.332 247.238 4.387 247.254 4.434 247.27 cv
4.473 247.289 4.5 247.309 4.516 247.332 cv
4.523 247.359 4.531 247.383 4.535 247.406 cv
4.535 255.203 li
6.141 255.203 li
6.176 255.207 6.211 255.215 6.242 255.234 cv
6.273 255.258 6.297 255.289 6.32 255.324 cv
6.336 255.363 6.352 255.41 6.367 255.469 cv
6.375 255.531 6.383 255.605 6.387 255.684 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.465 255.684 mo
13.461 255.773 13.453 255.844 13.441 255.902 cv
13.426 255.965 13.406 256.016 13.387 256.047 cv
13.363 256.086 13.34 256.109 13.309 256.125 cv
13.277 256.141 13.246 256.148 13.219 256.148 cv
8.582 256.148 li
8.547 256.148 8.52 256.141 8.492 256.125 cv
8.465 256.109 8.438 256.086 8.414 256.047 cv
8.387 256.016 8.367 255.965 8.355 255.902 cv
8.34 255.844 8.332 255.773 8.336 255.684 cv
8.332 255.605 8.34 255.531 8.355 255.469 cv
8.367 255.41 8.383 255.363 8.406 255.324 cv
8.422 255.289 8.449 255.258 8.48 255.234 cv
8.512 255.215 8.543 255.207 8.582 255.203 cv
10.434 255.203 li
10.434 248.457 li
8.719 249.477 li
8.629 249.527 8.559 249.555 8.512 249.562 cv
8.457 249.57 8.414 249.562 8.383 249.531 cv
8.348 249.504 8.328 249.453 8.316 249.383 cv
8.305 249.316 8.297 249.23 8.301 249.121 cv
8.297 249.047 8.301 248.98 8.313 248.922 cv
8.316 248.871 8.328 248.824 8.344 248.785 cv
8.355 248.75 8.375 248.719 8.398 248.691 cv
8.422 248.664 8.453 248.637 8.5 248.609 cv
10.543 247.297 li
10.559 247.285 10.578 247.273 10.609 247.266 cv
10.633 247.258 10.668 247.25 10.715 247.238 cv
10.754 247.23 10.805 247.223 10.859 247.219 cv
10.914 247.219 10.98 247.219 11.066 247.215 cv
11.172 247.219 11.266 247.223 11.34 247.23 cv
11.41 247.238 11.465 247.254 11.512 247.27 cv
11.551 247.289 11.578 247.309 11.594 247.332 cv
11.602 247.359 11.609 247.383 11.613 247.406 cv
11.613 255.203 li
13.219 255.203 li
13.254 255.207 13.289 255.215 13.32 255.234 cv
13.352 255.258 13.375 255.289 13.398 255.324 cv
13.414 255.363 13.43 255.41 13.445 255.469 cv
13.453 255.531 13.461 255.605 13.465 255.684 cv
cp
f
0 217.602 mo
14.191 217.602 li
14.191 234.692 li
0 234.692 li
cp
0 0 0 0 cmyk
ef
6.387 230.504 mo
6.383 230.594 6.375 230.664 6.363 230.723 cv
6.348 230.785 6.328 230.836 6.309 230.867 cv
6.285 230.906 6.262 230.93 6.23 230.945 cv
6.199 230.961 6.168 230.969 6.141 230.969 cv
1.504 230.969 li
1.469 230.969 1.441 230.961 1.414 230.945 cv
1.387 230.93 1.359 230.906 1.336 230.867 cv
1.309 230.836 1.289 230.785 1.277 230.723 cv
1.262 230.664 1.254 230.594 1.258 230.504 cv
1.254 230.426 1.262 230.352 1.277 230.289 cv
1.289 230.23 1.305 230.184 1.328 230.145 cv
1.344 230.109 1.371 230.078 1.402 230.055 cv
1.434 230.035 1.465 230.027 1.504 230.023 cv
3.355 230.023 li
3.355 223.277 li
1.641 224.297 li
1.551 224.348 1.48 224.375 1.434 224.383 cv
1.379 224.391 1.336 224.383 1.305 224.352 cv
1.27 224.324 1.25 224.273 1.238 224.203 cv
1.227 224.137 1.219 224.051 1.223 223.941 cv
1.219 223.867 1.223 223.801 1.234 223.742 cv
1.238 223.691 1.25 223.645 1.266 223.605 cv
1.277 223.57 1.297 223.539 1.32 223.512 cv
1.344 223.484 1.375 223.457 1.422 223.43 cv
3.465 222.117 li
3.48 222.105 3.5 222.094 3.531 222.086 cv
3.555 222.078 3.59 222.07 3.637 222.059 cv
3.676 222.051 3.727 222.043 3.781 222.039 cv
3.836 222.039 3.902 222.039 3.988 222.035 cv
4.094 222.039 4.188 222.043 4.262 222.051 cv
4.332 222.059 4.387 222.074 4.434 222.09 cv
4.473 222.109 4.5 222.129 4.516 222.152 cv
4.523 222.18 4.531 222.203 4.535 222.227 cv
4.535 230.023 li
6.141 230.023 li
6.176 230.027 6.211 230.035 6.242 230.055 cv
6.273 230.078 6.297 230.109 6.32 230.145 cv
6.336 230.184 6.352 230.23 6.367 230.289 cv
6.375 230.352 6.383 230.426 6.387 230.504 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.445 230.461 mo
13.441 230.547 13.438 230.621 13.426 230.684 cv
13.414 230.75 13.398 230.805 13.379 230.844 cv
13.355 230.891 13.328 230.922 13.297 230.937 cv
13.262 230.961 13.223 230.969 13.184 230.969 cv
8.281 230.969 li
8.219 230.969 8.16 230.961 8.113 230.945 cv
8.063 230.93 8.023 230.906 7.988 230.867 cv
7.953 230.836 7.926 230.781 7.914 230.711 cv
7.895 230.641 7.887 230.555 7.891 230.453 cv
7.887 230.363 7.891 230.285 7.898 230.215 cv
7.902 230.148 7.918 230.09 7.945 230.035 cv
7.969 229.984 8 229.93 8.035 229.875 cv
8.07 229.824 8.113 229.77 8.172 229.707 cv
9.945 227.883 li
10.355 227.465 10.684 227.09 10.934 226.754 cv
11.18 226.426 11.371 226.121 11.504 225.844 cv
11.637 225.57 11.723 225.32 11.77 225.094 cv
11.809 224.871 11.832 224.66 11.832 224.465 cv
11.832 224.27 11.797 224.086 11.73 223.906 cv
11.664 223.734 11.57 223.578 11.445 223.441 cv
11.32 223.312 11.164 223.207 10.977 223.125 cv
10.789 223.051 10.57 223.012 10.324 223.008 cv
10.035 223.012 9.777 223.051 9.551 223.125 cv
9.32 223.207 9.121 223.293 8.949 223.379 cv
8.777 223.473 8.633 223.555 8.516 223.633 cv
8.398 223.711 8.313 223.75 8.262 223.75 cv
8.227 223.75 8.195 223.742 8.172 223.723 cv
8.141 223.707 8.121 223.676 8.105 223.633 cv
8.09 223.594 8.074 223.539 8.066 223.469 cv
8.055 223.402 8.051 223.32 8.055 223.223 cv
8.051 223.156 8.055 223.098 8.063 223.047 cv
8.066 222.996 8.074 222.953 8.086 222.914 cv
8.094 222.879 8.109 222.844 8.129 222.812 cv
8.148 222.781 8.184 222.742 8.242 222.691 cv
8.293 222.645 8.387 222.578 8.523 222.496 cv
8.656 222.414 8.828 222.336 9.031 222.254 cv
9.234 222.176 9.457 222.105 9.703 222.051 cv
9.945 221.996 10.203 221.969 10.477 221.969 cv
10.902 221.969 11.277 222.031 11.602 222.152 cv
11.922 222.273 12.188 222.437 12.402 222.648 cv
12.613 222.859 12.773 223.105 12.879 223.379 cv
12.984 223.66 13.039 223.957 13.039 224.27 cv
13.039 224.559 13.012 224.84 12.961 225.117 cv
12.91 225.402 12.805 225.707 12.645 226.031 cv
12.48 226.359 12.246 226.723 11.941 227.121 cv
11.633 227.523 11.227 227.984 10.723 228.5 cv
9.316 229.969 li
13.176 229.969 li
13.207 229.973 13.242 229.984 13.281 230 cv
13.313 230.023 13.344 230.055 13.371 230.094 cv
13.395 230.137 13.414 230.187 13.426 230.246 cv
13.438 230.312 13.441 230.383 13.445 230.461 cv
cp
f
0 192.422 mo
14.191 192.422 li
14.191 209.512 li
0 209.512 li
cp
0 0 0 0 cmyk
ef
6.398 205.32 mo
6.395 205.41 6.387 205.484 6.375 205.543 cv
6.359 205.605 6.34 205.656 6.32 205.687 cv
6.297 205.727 6.273 205.75 6.242 205.766 cv
6.211 205.781 6.18 205.789 6.148 205.789 cv
1.508 205.789 li
1.477 205.789 1.445 205.781 1.418 205.766 cv
1.391 205.75 1.363 205.727 1.34 205.687 cv
1.309 205.656 1.289 205.605 1.281 205.543 cv
1.266 205.484 1.262 205.41 1.262 205.32 cv
1.262 205.242 1.266 205.172 1.281 205.109 cv
1.289 205.051 1.309 205.004 1.332 204.961 cv
1.352 204.926 1.375 204.895 1.406 204.871 cv
1.434 204.852 1.469 204.84 1.508 204.84 cv
3.363 204.84 li
3.363 198.086 li
1.645 199.105 li
1.555 199.156 1.484 199.184 1.434 199.191 cv
1.379 199.199 1.34 199.191 1.309 199.16 cv
1.277 199.133 1.254 199.082 1.242 199.012 cv
1.23 198.945 1.227 198.859 1.227 198.75 cv
1.227 198.676 1.227 198.609 1.234 198.551 cv
1.238 198.5 1.25 198.453 1.266 198.414 cv
1.277 198.379 1.297 198.348 1.324 198.32 cv
1.348 198.293 1.383 198.266 1.426 198.234 cv
3.473 196.922 li
3.488 196.914 3.512 196.902 3.539 196.891 cv
3.566 196.883 3.602 196.875 3.645 196.863 cv
3.684 196.855 3.73 196.848 3.789 196.844 cv
3.84 196.844 3.91 196.844 3.992 196.84 cv
4.102 196.844 4.191 196.848 4.27 196.855 cv
4.34 196.867 4.398 196.879 4.438 196.895 cv
4.477 196.91 4.504 196.934 4.52 196.957 cv
4.535 196.984 4.543 197.008 4.543 197.035 cv
4.543 204.84 li
6.148 204.84 li
6.184 204.84 6.215 204.852 6.25 204.871 cv
6.281 204.895 6.309 204.926 6.332 204.961 cv
6.348 205.004 6.363 205.051 6.379 205.109 cv
6.387 205.172 6.395 205.242 6.398 205.32 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.387 203.25 mo
13.383 203.66 13.313 204.027 13.172 204.352 cv
13.027 204.68 12.824 204.957 12.563 205.191 cv
12.293 205.426 11.965 205.605 11.578 205.73 cv
11.188 205.855 10.75 205.918 10.262 205.918 cv
9.965 205.918 9.684 205.891 9.426 205.844 cv
9.164 205.797 8.934 205.746 8.734 205.676 cv
8.531 205.613 8.367 205.543 8.234 205.473 cv
8.102 205.402 8.016 205.352 7.984 205.316 cv
7.945 205.285 7.922 205.254 7.906 205.219 cv
7.887 205.191 7.867 205.152 7.855 205.105 cv
7.84 205.062 7.832 205.008 7.824 204.937 cv
7.816 204.875 7.813 204.793 7.816 204.691 cv
7.813 204.527 7.828 204.41 7.863 204.348 cv
7.895 204.285 7.941 204.254 8.008 204.25 cv
8.047 204.254 8.133 204.289 8.258 204.359 cv
8.383 204.434 8.539 204.516 8.734 204.598 cv
8.926 204.687 9.156 204.766 9.418 204.836 cv
9.676 204.91 9.965 204.945 10.289 204.945 cv
10.598 204.945 10.871 204.906 11.105 204.828 cv
11.34 204.75 11.535 204.641 11.695 204.5 cv
11.855 204.359 11.977 204.191 12.055 203.996 cv
12.133 203.801 12.172 203.59 12.176 203.359 cv
12.172 203.109 12.121 202.883 12.023 202.68 cv
11.918 202.48 11.77 202.305 11.578 202.156 cv
11.379 202.012 11.137 201.902 10.855 201.82 cv
10.566 201.746 10.242 201.707 9.879 201.703 cv
9.008 201.703 li
8.969 201.707 8.93 201.699 8.895 201.68 cv
8.859 201.668 8.828 201.641 8.805 201.602 cv
8.773 201.566 8.754 201.52 8.738 201.457 cv
8.723 201.402 8.715 201.324 8.715 201.223 cv
8.715 201.141 8.719 201.066 8.734 201.008 cv
8.746 200.953 8.766 200.91 8.793 200.871 cv
8.816 200.84 8.848 200.812 8.879 200.793 cv
8.91 200.781 8.945 200.773 8.992 200.77 cv
9.766 200.77 li
10.063 200.773 10.336 200.734 10.578 200.652 cv
10.82 200.578 11.023 200.465 11.191 200.316 cv
11.355 200.172 11.484 200 11.574 199.793 cv
11.664 199.59 11.707 199.359 11.711 199.105 cv
11.707 198.926 11.68 198.75 11.621 198.582 cv
11.559 198.418 11.469 198.273 11.352 198.148 cv
11.234 198.023 11.082 197.926 10.895 197.855 cv
10.707 197.785 10.492 197.75 10.254 197.746 cv
9.984 197.75 9.742 197.789 9.523 197.867 cv
9.301 197.949 9.102 198.035 8.93 198.125 cv
8.754 198.219 8.609 198.305 8.496 198.383 cv
8.379 198.465 8.301 198.508 8.258 198.504 cv
8.223 198.508 8.191 198.5 8.168 198.488 cv
8.141 198.477 8.121 198.453 8.109 198.418 cv
8.09 198.387 8.078 198.34 8.074 198.273 cv
8.063 198.215 8.059 198.133 8.063 198.027 cv
8.059 197.961 8.063 197.902 8.07 197.848 cv
8.074 197.801 8.082 197.754 8.098 197.711 cv
8.109 197.676 8.125 197.641 8.145 197.605 cv
8.16 197.574 8.191 197.535 8.238 197.492 cv
8.281 197.449 8.371 197.387 8.504 197.301 cv
8.637 197.219 8.797 197.137 8.992 197.059 cv
9.184 196.98 9.41 196.914 9.664 196.855 cv
9.918 196.805 10.191 196.777 10.488 196.773 cv
10.898 196.777 11.258 196.832 11.57 196.934 cv
11.879 197.043 12.141 197.191 12.352 197.379 cv
12.559 197.574 12.715 197.801 12.816 198.066 cv
12.918 198.336 12.969 198.633 12.973 198.957 cv
12.969 199.238 12.934 199.5 12.863 199.738 cv
12.789 199.98 12.68 200.191 12.539 200.375 cv
12.395 200.562 12.223 200.723 12.02 200.848 cv
11.813 200.98 11.574 201.07 11.305 201.121 cv
11.305 201.133 li
11.609 201.168 11.887 201.246 12.145 201.363 cv
12.395 201.488 12.613 201.641 12.801 201.82 cv
12.98 202.008 13.125 202.219 13.23 202.461 cv
13.332 202.707 13.383 202.973 13.387 203.25 cv
cp
f
0 167.239 mo
14.191 167.239 li
14.191 184.333 li
0 184.333 li
cp
0 0 0 0 cmyk
ef
6.387 180.125 mo
6.383 180.215 6.375 180.285 6.363 180.344 cv
6.348 180.406 6.328 180.457 6.309 180.488 cv
6.285 180.527 6.262 180.551 6.23 180.566 cv
6.199 180.582 6.168 180.59 6.141 180.59 cv
1.504 180.59 li
1.469 180.59 1.441 180.582 1.414 180.566 cv
1.387 180.551 1.359 180.527 1.336 180.488 cv
1.309 180.457 1.289 180.406 1.277 180.344 cv
1.262 180.285 1.254 180.215 1.258 180.125 cv
1.254 180.047 1.262 179.973 1.277 179.91 cv
1.289 179.852 1.305 179.805 1.328 179.766 cv
1.344 179.73 1.371 179.699 1.402 179.676 cv
1.434 179.656 1.465 179.648 1.504 179.645 cv
3.355 179.645 li
3.355 172.898 li
1.641 173.918 li
1.551 173.969 1.48 173.996 1.434 174.004 cv
1.379 174.012 1.336 174.004 1.305 173.973 cv
1.27 173.945 1.25 173.895 1.238 173.824 cv
1.227 173.758 1.219 173.672 1.223 173.562 cv
1.219 173.488 1.223 173.422 1.234 173.363 cv
1.238 173.312 1.25 173.266 1.266 173.227 cv
1.277 173.191 1.297 173.16 1.32 173.133 cv
1.344 173.105 1.375 173.078 1.422 173.051 cv
3.465 171.738 li
3.48 171.727 3.5 171.715 3.531 171.707 cv
3.555 171.699 3.59 171.691 3.637 171.68 cv
3.676 171.672 3.727 171.664 3.781 171.66 cv
3.836 171.66 3.902 171.66 3.988 171.656 cv
4.094 171.66 4.188 171.664 4.262 171.672 cv
4.332 171.68 4.387 171.695 4.434 171.711 cv
4.473 171.73 4.5 171.75 4.516 171.773 cv
4.523 171.801 4.531 171.824 4.535 171.848 cv
4.535 179.645 li
6.141 179.645 li
6.176 179.648 6.211 179.656 6.242 179.676 cv
6.273 179.699 6.297 179.73 6.32 179.766 cv
6.336 179.805 6.352 179.852 6.367 179.91 cv
6.375 179.973 6.383 180.047 6.387 180.125 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.82 178.066 mo
13.816 178.219 13.793 178.34 13.75 178.426 cv
13.703 178.516 13.641 178.559 13.559 178.555 cv
12.559 178.555 li
12.559 180.418 li
12.559 180.457 12.547 180.488 12.531 180.512 cv
12.508 180.539 12.477 180.559 12.434 180.578 cv
12.383 180.594 12.32 180.605 12.25 180.617 cv
12.172 180.625 12.078 180.629 11.961 180.633 cv
11.844 180.629 11.746 180.625 11.676 180.617 cv
11.598 180.605 11.539 180.594 11.496 180.578 cv
11.449 180.559 11.418 180.539 11.402 180.512 cv
11.383 180.488 11.375 180.457 11.379 180.418 cv
11.379 178.555 li
7.75 178.555 li
7.691 178.559 7.648 178.551 7.613 178.535 cv
7.578 178.523 7.543 178.496 7.516 178.457 cv
7.484 178.422 7.465 178.371 7.453 178.301 cv
7.441 178.234 7.438 178.145 7.438 178.031 cv
7.438 177.949 7.438 177.871 7.445 177.801 cv
7.445 177.73 7.457 177.668 7.473 177.613 cv
7.484 177.559 7.5 177.504 7.527 177.449 cv
7.547 177.395 7.574 177.34 7.609 177.277 cv
10.77 171.891 li
10.789 171.855 10.824 171.824 10.871 171.797 cv
10.914 171.77 10.969 171.746 11.043 171.727 cv
11.109 171.711 11.195 171.699 11.301 171.687 cv
11.402 171.684 11.523 171.68 11.664 171.676 cv
11.813 171.68 11.949 171.684 12.066 171.695 cv
12.18 171.707 12.27 171.723 12.344 171.738 cv
12.41 171.758 12.465 171.781 12.504 171.812 cv
12.539 171.844 12.559 171.879 12.559 171.918 cv
12.559 177.582 li
13.559 177.582 li
13.633 177.586 13.695 177.625 13.746 177.703 cv
13.793 177.785 13.816 177.906 13.82 178.066 cv
cp
11.379 172.715 mo
11.367 172.715 li
8.516 177.582 li
11.379 177.582 li
cp
f
0 142.059 mo
14.191 142.059 li
14.191 159.149 li
0 159.149 li
cp
0 0 0 0 cmyk
ef
6.387 154.957 mo
6.383 155.047 6.375 155.117 6.363 155.176 cv
6.348 155.238 6.328 155.289 6.309 155.32 cv
6.285 155.359 6.262 155.383 6.23 155.398 cv
6.199 155.414 6.168 155.422 6.141 155.422 cv
1.504 155.422 li
1.469 155.422 1.441 155.414 1.414 155.398 cv
1.387 155.383 1.359 155.359 1.336 155.32 cv
1.309 155.289 1.289 155.238 1.277 155.176 cv
1.262 155.117 1.254 155.047 1.258 154.957 cv
1.254 154.879 1.262 154.805 1.277 154.742 cv
1.289 154.684 1.305 154.637 1.328 154.598 cv
1.344 154.562 1.371 154.531 1.402 154.508 cv
1.434 154.488 1.465 154.48 1.504 154.477 cv
3.355 154.477 li
3.355 147.73 li
1.641 148.75 li
1.551 148.801 1.48 148.828 1.434 148.836 cv
1.379 148.844 1.336 148.836 1.305 148.805 cv
1.27 148.777 1.25 148.727 1.238 148.656 cv
1.227 148.59 1.219 148.504 1.223 148.395 cv
1.219 148.32 1.223 148.254 1.234 148.195 cv
1.238 148.145 1.25 148.098 1.266 148.059 cv
1.277 148.023 1.297 147.992 1.32 147.965 cv
1.344 147.937 1.375 147.91 1.422 147.883 cv
3.465 146.57 li
3.48 146.559 3.5 146.547 3.531 146.539 cv
3.555 146.531 3.59 146.523 3.637 146.512 cv
3.676 146.504 3.727 146.496 3.781 146.492 cv
3.836 146.492 3.902 146.492 3.988 146.488 cv
4.094 146.492 4.188 146.496 4.262 146.504 cv
4.332 146.512 4.387 146.527 4.434 146.543 cv
4.473 146.562 4.5 146.582 4.516 146.605 cv
4.523 146.633 4.531 146.656 4.535 146.68 cv
4.535 154.477 li
6.141 154.477 li
6.176 154.48 6.211 154.488 6.242 154.508 cv
6.273 154.531 6.297 154.562 6.32 154.598 cv
6.336 154.637 6.352 154.684 6.367 154.742 cv
6.375 154.805 6.383 154.879 6.387 154.957 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.402 152.57 mo
13.402 153.047 13.32 153.469 13.16 153.84 cv
13 154.211 12.773 154.523 12.484 154.777 cv
12.188 155.031 11.84 155.227 11.438 155.355 cv
11.031 155.488 10.582 155.551 10.09 155.551 cv
9.813 155.551 9.551 155.531 9.309 155.492 cv
9.059 155.453 8.84 155.406 8.652 155.352 cv
8.457 155.297 8.301 155.242 8.176 155.184 cv
8.051 155.133 7.973 155.09 7.941 155.055 cv
7.906 155.023 7.883 154.992 7.871 154.965 cv
7.855 154.937 7.84 154.906 7.832 154.863 cv
7.816 154.828 7.809 154.777 7.809 154.715 cv
7.801 154.656 7.801 154.586 7.801 154.504 cv
7.801 154.43 7.805 154.359 7.813 154.297 cv
7.82 154.234 7.832 154.184 7.852 154.145 cv
7.867 154.105 7.887 154.078 7.914 154.059 cv
7.938 154.043 7.969 154.035 8 154.031 cv
8.047 154.035 8.117 154.062 8.211 154.117 cv
8.305 154.176 8.434 154.238 8.598 154.305 cv
8.762 154.371 8.961 154.434 9.203 154.492 cv
9.438 154.551 9.723 154.578 10.059 154.578 cv
10.359 154.578 10.641 154.543 10.898 154.469 cv
11.152 154.398 11.375 154.285 11.563 154.129 cv
11.746 153.977 11.891 153.781 11.996 153.543 cv
12.102 153.309 12.152 153.02 12.156 152.68 cv
12.152 152.398 12.109 152.148 12.02 151.93 cv
11.93 151.711 11.793 151.531 11.609 151.387 cv
11.422 151.246 11.188 151.141 10.906 151.066 cv
10.621 150.996 10.281 150.957 9.895 150.957 cv
9.609 150.957 9.371 150.973 9.172 151 cv
8.969 151.031 8.781 151.047 8.609 151.043 cv
8.48 151.047 8.387 151.016 8.336 150.953 cv
8.277 150.895 8.25 150.781 8.254 150.609 cv
8.254 146.996 li
8.25 146.848 8.285 146.738 8.359 146.66 cv
8.426 146.59 8.527 146.551 8.664 146.551 cv
12.594 146.551 li
12.629 146.551 12.664 146.562 12.699 146.582 cv
12.73 146.605 12.758 146.637 12.785 146.676 cv
12.805 146.719 12.82 146.77 12.836 146.832 cv
12.844 146.898 12.852 146.977 12.855 147.059 cv
12.852 147.227 12.828 147.352 12.789 147.441 cv
12.742 147.535 12.684 147.582 12.605 147.578 cv
9.434 147.578 li
9.434 150.066 li
9.586 150.047 9.742 150.035 9.906 150.027 cv
10.063 150.023 10.25 150.02 10.465 150.02 cv
10.949 150.02 11.375 150.082 11.742 150.203 cv
12.105 150.324 12.41 150.496 12.66 150.715 cv
12.902 150.941 13.09 151.207 13.215 151.52 cv
13.34 151.836 13.402 152.187 13.402 152.57 cv
cp
f
0 116.879 mo
14.191 116.879 li
14.191 133.969 li
0 133.969 li
cp
0 0 0 0 cmyk
ef
6.387 129.754 mo
6.383 129.844 6.375 129.914 6.363 129.973 cv
6.348 130.035 6.328 130.086 6.309 130.117 cv
6.285 130.156 6.262 130.18 6.23 130.195 cv
6.199 130.211 6.168 130.219 6.141 130.219 cv
1.504 130.219 li
1.469 130.219 1.441 130.211 1.414 130.195 cv
1.387 130.18 1.359 130.156 1.336 130.117 cv
1.309 130.086 1.289 130.035 1.277 129.973 cv
1.262 129.914 1.254 129.844 1.258 129.754 cv
1.254 129.676 1.262 129.602 1.277 129.539 cv
1.289 129.48 1.305 129.434 1.328 129.395 cv
1.344 129.359 1.371 129.328 1.402 129.305 cv
1.434 129.285 1.465 129.277 1.504 129.273 cv
3.355 129.273 li
3.355 122.527 li
1.641 123.547 li
1.551 123.598 1.48 123.625 1.434 123.633 cv
1.379 123.641 1.336 123.633 1.305 123.602 cv
1.27 123.574 1.25 123.523 1.238 123.453 cv
1.227 123.387 1.219 123.301 1.223 123.191 cv
1.219 123.117 1.223 123.051 1.234 122.992 cv
1.238 122.941 1.25 122.895 1.266 122.855 cv
1.277 122.82 1.297 122.789 1.32 122.762 cv
1.344 122.734 1.375 122.707 1.422 122.68 cv
3.465 121.367 li
3.48 121.355 3.5 121.344 3.531 121.336 cv
3.555 121.328 3.59 121.32 3.637 121.309 cv
3.676 121.301 3.727 121.293 3.781 121.289 cv
3.836 121.289 3.902 121.289 3.988 121.285 cv
4.094 121.289 4.188 121.293 4.262 121.301 cv
4.332 121.309 4.387 121.324 4.434 121.34 cv
4.473 121.359 4.5 121.379 4.516 121.402 cv
4.523 121.43 4.531 121.453 4.535 121.477 cv
4.535 129.273 li
6.141 129.273 li
6.176 129.277 6.211 129.285 6.242 129.305 cv
6.273 129.328 6.297 129.359 6.32 129.395 cv
6.336 129.434 6.352 129.48 6.367 129.539 cv
6.375 129.602 6.383 129.676 6.387 129.754 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.672 127.348 mo
13.672 127.738 13.609 128.117 13.492 128.477 cv
13.367 128.844 13.184 129.16 12.941 129.434 cv
12.691 129.711 12.379 129.934 12.004 130.098 cv
11.621 130.266 11.176 130.348 10.66 130.348 cv
10.289 130.348 9.961 130.305 9.68 130.211 cv
9.395 130.125 9.148 129.992 8.938 129.82 cv
8.727 129.652 8.551 129.445 8.414 129.199 cv
8.273 128.953 8.16 128.672 8.078 128.355 cv
7.992 128.043 7.934 127.699 7.898 127.32 cv
7.859 126.949 7.84 126.547 7.844 126.113 cv
7.84 125.734 7.859 125.352 7.902 124.961 cv
7.941 124.578 8.016 124.203 8.121 123.836 cv
8.227 123.477 8.371 123.137 8.551 122.82 cv
8.73 122.504 8.957 122.227 9.23 121.992 cv
9.504 121.758 9.828 121.57 10.207 121.43 cv
10.586 121.293 11.027 121.227 11.531 121.223 cv
11.699 121.227 11.871 121.234 12.043 121.254 cv
12.215 121.277 12.375 121.309 12.523 121.34 cv
12.672 121.379 12.793 121.414 12.895 121.453 cv
12.992 121.492 13.059 121.527 13.094 121.551 cv
13.121 121.578 13.145 121.605 13.164 121.633 cv
13.18 121.664 13.195 121.695 13.203 121.73 cv
13.211 121.766 13.215 121.805 13.223 121.848 cv
13.223 121.891 13.227 121.945 13.23 122.008 cv
13.227 122.094 13.227 122.164 13.227 122.219 cv
13.223 122.281 13.211 122.328 13.199 122.363 cv
13.18 122.402 13.16 122.43 13.137 122.445 cv
13.109 122.465 13.078 122.473 13.039 122.473 cv
12.988 122.473 12.918 122.457 12.832 122.426 cv
12.742 122.395 12.637 122.359 12.516 122.316 cv
12.391 122.281 12.242 122.246 12.066 122.211 cv
11.891 122.184 11.688 122.168 11.457 122.164 cv
11.027 122.168 10.66 122.254 10.355 122.426 cv
10.051 122.598 9.801 122.832 9.605 123.125 cv
9.41 123.418 9.266 123.758 9.176 124.141 cv
9.078 124.531 9.023 124.934 9.016 125.352 cv
9.133 125.285 9.27 125.219 9.418 125.148 cv
9.566 125.082 9.727 125.02 9.902 124.961 cv
10.078 124.91 10.266 124.863 10.461 124.828 cv
10.656 124.797 10.867 124.781 11.094 124.777 cv
11.57 124.781 11.973 124.848 12.305 124.973 cv
12.633 125.105 12.898 125.285 13.105 125.516 cv
13.305 125.746 13.449 126.016 13.539 126.328 cv
13.625 126.641 13.672 126.98 13.672 127.348 cv
cp
12.477 127.457 mo
12.477 127.195 12.449 126.953 12.398 126.734 cv
12.344 126.52 12.254 126.336 12.133 126.18 cv
12.008 126.031 11.844 125.914 11.641 125.832 cv
11.43 125.75 11.176 125.707 10.879 125.707 cv
10.707 125.707 10.539 125.723 10.371 125.754 cv
10.199 125.785 10.035 125.828 9.879 125.875 cv
9.719 125.93 9.57 125.992 9.43 126.062 cv
9.285 126.137 9.152 126.211 9.035 126.289 cv
9.031 126.883 9.07 127.379 9.148 127.773 cv
9.223 128.172 9.332 128.488 9.477 128.727 cv
9.621 128.969 9.801 129.141 10.016 129.242 cv
10.23 129.348 10.48 129.398 10.77 129.395 cv
11.059 129.398 11.313 129.344 11.527 129.23 cv
11.742 129.125 11.918 128.977 12.063 128.789 cv
12.203 128.605 12.309 128.398 12.375 128.168 cv
12.441 127.937 12.477 127.703 12.477 127.457 cv
cp
f
0 91.6996 mo
14.191 91.6996 li
14.191 108.79 li
0 108.79 li
cp
0 0 0 0 cmyk
ef
6.387 104.574 mo
6.383 104.664 6.375 104.734 6.363 104.793 cv
6.348 104.855 6.328 104.906 6.309 104.937 cv
6.285 104.977 6.262 105 6.23 105.016 cv
6.199 105.031 6.168 105.039 6.141 105.039 cv
1.504 105.039 li
1.469 105.039 1.441 105.031 1.414 105.016 cv
1.387 105 1.359 104.977 1.336 104.937 cv
1.309 104.906 1.289 104.855 1.277 104.793 cv
1.262 104.734 1.254 104.664 1.258 104.574 cv
1.254 104.496 1.262 104.422 1.277 104.359 cv
1.289 104.301 1.305 104.254 1.328 104.215 cv
1.344 104.18 1.371 104.148 1.402 104.125 cv
1.434 104.105 1.465 104.098 1.504 104.094 cv
3.355 104.094 li
3.355 97.348 li
1.641 98.367 li
1.551 98.418 1.48 98.445 1.434 98.453 cv
1.379 98.461 1.336 98.453 1.305 98.422 cv
1.27 98.395 1.25 98.344 1.238 98.273 cv
1.227 98.207 1.219 98.121 1.223 98.012 cv
1.219 97.937 1.223 97.871 1.234 97.812 cv
1.238 97.762 1.25 97.715 1.266 97.676 cv
1.277 97.641 1.297 97.609 1.32 97.582 cv
1.344 97.555 1.375 97.527 1.422 97.5 cv
3.465 96.187 li
3.48 96.176 3.5 96.164 3.531 96.156 cv
3.555 96.148 3.59 96.141 3.637 96.129 cv
3.676 96.121 3.727 96.113 3.781 96.109 cv
3.836 96.109 3.902 96.109 3.988 96.105 cv
4.094 96.109 4.188 96.113 4.262 96.121 cv
4.332 96.129 4.387 96.145 4.434 96.16 cv
4.473 96.18 4.5 96.199 4.516 96.223 cv
4.523 96.25 4.531 96.273 4.535 96.297 cv
4.535 104.094 li
6.141 104.094 li
6.176 104.098 6.211 104.105 6.242 104.125 cv
6.273 104.148 6.297 104.18 6.32 104.215 cv
6.336 104.254 6.352 104.301 6.367 104.359 cv
6.375 104.422 6.383 104.496 6.387 104.574 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.574 96.676 mo
13.57 96.762 13.566 96.836 13.563 96.898 cv
13.555 96.969 13.547 97.031 13.535 97.09 cv
13.523 97.156 13.508 97.215 13.488 97.27 cv
13.465 97.328 13.441 97.391 13.418 97.449 cv
10.223 104.812 li
10.195 104.871 10.168 104.914 10.137 104.945 cv
10.102 104.98 10.059 105.008 10.004 105.027 cv
9.949 105.047 9.879 105.059 9.801 105.07 cv
9.715 105.074 9.617 105.078 9.5 105.082 cv
9.344 105.078 9.223 105.07 9.137 105.059 cv
9.051 105.043 8.988 105.027 8.949 104.996 cv
8.91 104.969 8.891 104.93 8.898 104.887 cv
8.898 104.844 8.914 104.793 8.945 104.73 cv
12.305 97.203 li
8.047 97.203 li
7.961 97.207 7.895 97.16 7.852 97.066 cv
7.809 96.977 7.789 96.848 7.789 96.684 cv
7.789 96.598 7.793 96.523 7.805 96.457 cv
7.816 96.395 7.832 96.34 7.855 96.297 cv
7.875 96.254 7.902 96.223 7.938 96.199 cv
7.969 96.18 8.008 96.168 8.047 96.168 cv
13.219 96.168 li
13.277 96.168 13.332 96.176 13.383 96.191 cv
13.43 96.207 13.465 96.234 13.492 96.273 cv
13.516 96.312 13.535 96.367 13.551 96.43 cv
13.563 96.496 13.57 96.578 13.574 96.676 cv
cp
f
0 66.5196 mo
14.191 66.5196 li
14.191 83.6096 li
0 83.6096 li
cp
0 0 0 0 cmyk
ef
6.387 79.406 mo
6.383 79.496 6.375 79.566 6.363 79.625 cv
6.348 79.687 6.328 79.738 6.309 79.77 cv
6.285 79.809 6.262 79.832 6.23 79.848 cv
6.199 79.863 6.168 79.871 6.141 79.871 cv
1.504 79.871 li
1.469 79.871 1.441 79.863 1.414 79.848 cv
1.387 79.832 1.359 79.809 1.336 79.77 cv
1.309 79.738 1.289 79.687 1.277 79.625 cv
1.262 79.566 1.254 79.496 1.258 79.406 cv
1.254 79.328 1.262 79.254 1.277 79.191 cv
1.289 79.133 1.305 79.086 1.328 79.047 cv
1.344 79.012 1.371 78.98 1.402 78.957 cv
1.434 78.937 1.465 78.93 1.504 78.926 cv
3.355 78.926 li
3.355 72.18 li
1.641 73.199 li
1.551 73.25 1.48 73.277 1.434 73.285 cv
1.379 73.293 1.336 73.285 1.305 73.254 cv
1.27 73.227 1.25 73.176 1.238 73.105 cv
1.227 73.039 1.219 72.953 1.223 72.844 cv
1.219 72.77 1.223 72.703 1.234 72.645 cv
1.238 72.594 1.25 72.547 1.266 72.508 cv
1.277 72.473 1.297 72.441 1.32 72.414 cv
1.344 72.387 1.375 72.359 1.422 72.332 cv
3.465 71.02 li
3.48 71.008 3.5 70.996 3.531 70.988 cv
3.555 70.98 3.59 70.973 3.637 70.961 cv
3.676 70.953 3.727 70.945 3.781 70.941 cv
3.836 70.941 3.902 70.941 3.988 70.937 cv
4.094 70.941 4.188 70.945 4.262 70.953 cv
4.332 70.961 4.387 70.977 4.434 70.992 cv
4.473 71.012 4.5 71.031 4.516 71.055 cv
4.523 71.082 4.531 71.105 4.535 71.129 cv
4.535 78.926 li
6.141 78.926 li
6.176 78.93 6.211 78.937 6.242 78.957 cv
6.273 78.98 6.297 79.012 6.32 79.047 cv
6.336 79.086 6.352 79.133 6.367 79.191 cv
6.375 79.254 6.383 79.328 6.387 79.406 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.648 77.594 mo
13.648 77.98 13.578 78.324 13.441 78.621 cv
13.305 78.926 13.109 79.176 12.852 79.379 cv
12.594 79.586 12.273 79.742 11.895 79.844 cv
11.512 79.949 11.078 80 10.594 80 cv
10.133 80 9.723 79.953 9.363 79.859 cv
9 79.766 8.695 79.625 8.445 79.434 cv
8.195 79.25 8.004 79.02 7.871 78.742 cv
7.738 78.469 7.672 78.156 7.672 77.801 cv
7.672 77.527 7.715 77.27 7.809 77.035 cv
7.895 76.801 8.027 76.586 8.203 76.391 cv
8.371 76.195 8.582 76.012 8.836 75.836 cv
9.086 75.668 9.371 75.504 9.688 75.348 cv
9.414 75.207 9.172 75.059 8.961 74.898 cv
8.75 74.742 8.57 74.57 8.426 74.383 cv
8.277 74.199 8.168 74.004 8.094 73.793 cv
8.016 73.586 7.977 73.355 7.98 73.105 cv
7.977 72.797 8.031 72.504 8.148 72.23 cv
8.258 71.961 8.43 71.727 8.656 71.523 cv
8.883 71.324 9.168 71.164 9.52 71.047 cv
9.863 70.93 10.273 70.871 10.742 70.871 cv
11.188 70.871 11.574 70.926 11.902 71.031 cv
12.23 71.141 12.5 71.285 12.711 71.469 cv
12.922 71.656 13.078 71.875 13.184 72.125 cv
13.281 72.375 13.332 72.645 13.336 72.934 cv
13.332 73.168 13.293 73.395 13.223 73.605 cv
13.145 73.824 13.035 74.027 12.887 74.215 cv
12.738 74.41 12.559 74.59 12.348 74.754 cv
12.137 74.926 11.895 75.082 11.621 75.223 cv
11.941 75.387 12.227 75.551 12.484 75.719 cv
12.734 75.887 12.949 76.066 13.125 76.262 cv
13.293 76.457 13.422 76.664 13.516 76.879 cv
13.602 77.098 13.648 77.336 13.648 77.594 cv
cp
12.168 73.043 mo
12.164 72.855 12.133 72.68 12.066 72.523 cv
12 72.367 11.902 72.234 11.777 72.125 cv
11.648 72.016 11.488 71.934 11.301 71.875 cv
11.105 71.82 10.891 71.793 10.652 71.789 cv
10.156 71.793 9.781 71.902 9.531 72.125 cv
9.273 72.352 9.148 72.66 9.152 73.043 cv
9.148 73.223 9.18 73.387 9.242 73.539 cv
9.305 73.695 9.398 73.84 9.531 73.977 cv
9.656 74.113 9.82 74.246 10.023 74.375 cv
10.219 74.508 10.457 74.645 10.734 74.785 cv
11.195 74.551 11.551 74.289 11.797 73.996 cv
12.043 73.711 12.164 73.395 12.168 73.043 cv
cp
12.457 77.719 mo
12.453 77.512 12.414 77.32 12.34 77.148 cv
12.258 76.98 12.141 76.82 11.984 76.668 cv
11.828 76.52 11.629 76.375 11.395 76.234 cv
11.156 76.098 10.887 75.953 10.578 75.801 cv
10.289 75.945 10.035 76.086 9.82 76.227 cv
9.602 76.367 9.422 76.516 9.285 76.664 cv
9.145 76.82 9.039 76.977 8.969 77.141 cv
8.895 77.309 8.859 77.492 8.863 77.691 cv
8.859 78.137 9.012 78.48 9.32 78.719 cv
9.621 78.965 10.074 79.086 10.68 79.082 cv
11.262 79.086 11.707 78.965 12.008 78.715 cv
12.305 78.473 12.453 78.141 12.457 77.719 cv
cp
f
0 41.3396 mo
14.191 41.3396 li
14.191 58.4296 li
0 58.4296 li
cp
0 0 0 0 cmyk
ef
6.387 54.207 mo
6.383 54.297 6.375 54.367 6.363 54.426 cv
6.348 54.488 6.328 54.539 6.309 54.57 cv
6.285 54.609 6.262 54.633 6.23 54.648 cv
6.199 54.664 6.168 54.672 6.141 54.672 cv
1.504 54.672 li
1.469 54.672 1.441 54.664 1.414 54.648 cv
1.387 54.633 1.359 54.609 1.336 54.57 cv
1.309 54.539 1.289 54.488 1.277 54.426 cv
1.262 54.367 1.254 54.297 1.258 54.207 cv
1.254 54.129 1.262 54.055 1.277 53.992 cv
1.289 53.934 1.305 53.887 1.328 53.848 cv
1.344 53.812 1.371 53.781 1.402 53.758 cv
1.434 53.738 1.465 53.73 1.504 53.727 cv
3.355 53.727 li
3.355 46.98 li
1.641 48 li
1.551 48.051 1.48 48.078 1.434 48.086 cv
1.379 48.094 1.336 48.086 1.305 48.055 cv
1.27 48.027 1.25 47.977 1.238 47.906 cv
1.227 47.84 1.219 47.754 1.223 47.645 cv
1.219 47.57 1.223 47.504 1.234 47.445 cv
1.238 47.395 1.25 47.348 1.266 47.309 cv
1.277 47.273 1.297 47.242 1.32 47.215 cv
1.344 47.187 1.375 47.16 1.422 47.133 cv
3.465 45.82 li
3.48 45.809 3.5 45.797 3.531 45.789 cv
3.555 45.781 3.59 45.773 3.637 45.762 cv
3.676 45.754 3.727 45.746 3.781 45.742 cv
3.836 45.742 3.902 45.742 3.988 45.738 cv
4.094 45.742 4.188 45.746 4.262 45.754 cv
4.332 45.762 4.387 45.777 4.434 45.793 cv
4.473 45.812 4.5 45.832 4.516 45.855 cv
4.523 45.883 4.531 45.906 4.535 45.93 cv
4.535 53.727 li
6.141 53.727 li
6.176 53.73 6.211 53.738 6.242 53.758 cv
6.273 53.781 6.297 53.812 6.32 53.848 cv
6.336 53.887 6.352 53.934 6.367 53.992 cv
6.375 54.055 6.383 54.129 6.387 54.207 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.512 49.887 mo
13.508 50.273 13.484 50.66 13.441 51.051 cv
13.395 51.445 13.316 51.824 13.211 52.187 cv
13.098 52.551 12.953 52.891 12.77 53.207 cv
12.582 53.527 12.348 53.809 12.07 54.043 cv
11.785 54.285 11.449 54.469 11.066 54.602 cv
10.676 54.734 10.23 54.801 9.723 54.801 cv
9.523 54.801 9.332 54.785 9.148 54.762 cv
8.961 54.734 8.793 54.707 8.648 54.672 cv
8.496 54.637 8.371 54.598 8.273 54.555 cv
8.172 54.516 8.098 54.477 8.055 54.434 cv
8.008 54.395 7.977 54.34 7.957 54.266 cv
7.934 54.195 7.922 54.098 7.926 53.98 cv
7.922 53.879 7.926 53.801 7.934 53.742 cv
7.938 53.684 7.949 53.637 7.965 53.605 cv
7.98 53.574 8 53.555 8.023 53.539 cv
8.047 53.531 8.078 53.523 8.117 53.52 cv
8.164 53.523 8.234 53.539 8.328 53.57 cv
8.418 53.605 8.531 53.645 8.676 53.684 cv
8.813 53.727 8.977 53.766 9.164 53.797 cv
9.348 53.836 9.559 53.852 9.797 53.848 cv
10.238 53.852 10.617 53.766 10.938 53.594 cv
11.25 53.422 11.512 53.195 11.715 52.906 cv
11.918 52.621 12.066 52.285 12.168 51.902 cv
12.266 51.523 12.32 51.125 12.332 50.703 cv
12.086 50.848 11.797 50.973 11.461 51.078 cv
11.121 51.191 10.734 51.246 10.297 51.242 cv
9.805 51.246 9.391 51.18 9.055 51.043 cv
8.719 50.91 8.445 50.727 8.242 50.492 cv
8.035 50.262 7.891 49.984 7.805 49.66 cv
7.715 49.344 7.672 48.992 7.672 48.613 cv
7.672 48.223 7.727 47.852 7.844 47.492 cv
7.953 47.141 8.133 46.828 8.379 46.559 cv
8.617 46.289 8.926 46.074 9.305 45.914 cv
9.676 45.754 10.125 45.672 10.648 45.672 cv
11.016 45.672 11.34 45.719 11.629 45.812 cv
11.91 45.906 12.16 46.043 12.375 46.219 cv
12.582 46.395 12.762 46.605 12.91 46.855 cv
13.055 47.105 13.172 47.387 13.262 47.699 cv
13.348 48.016 13.41 48.359 13.453 48.727 cv
13.488 49.098 13.508 49.484 13.512 49.887 cv
cp
12.313 49.758 mo
12.313 49.176 12.273 48.684 12.195 48.281 cv
12.117 47.883 12 47.559 11.852 47.309 cv
11.699 47.062 11.516 46.883 11.297 46.773 cv
11.074 46.664 10.82 46.609 10.539 46.609 cv
10.234 46.609 9.98 46.664 9.773 46.773 cv
9.563 46.883 9.391 47.027 9.258 47.203 cv
9.121 47.387 9.02 47.59 8.957 47.816 cv
8.891 48.047 8.859 48.285 8.863 48.523 cv
8.859 48.797 8.891 49.043 8.949 49.262 cv
9.004 49.488 9.094 49.676 9.227 49.832 cv
9.352 49.988 9.52 50.109 9.727 50.195 cv
9.93 50.281 10.184 50.324 10.488 50.32 cv
10.828 50.324 11.16 50.273 11.484 50.168 cv
11.801 50.066 12.078 49.93 12.313 49.758 cv
cp
f
0 16.1606 mo
14.191 16.1606 li
14.191 33.2507 li
0 33.2507 li
cp
0 0 0 0 cmyk
ef
6.367 28.98 mo
6.363 29.066 6.359 29.141 6.348 29.203 cv
6.336 29.27 6.32 29.324 6.301 29.363 cv
6.277 29.41 6.25 29.441 6.219 29.457 cv
6.184 29.48 6.145 29.488 6.105 29.488 cv
1.203 29.488 li
1.141 29.488 1.082 29.48 1.035 29.465 cv
.984 29.449 .945 29.426 .91 29.387 cv
.875 29.355 .848 29.301 .836 29.23 cv
.816 29.16 .809 29.074 .813 28.973 cv
.809 28.883 .813 28.805 .82 28.734 cv
.824 28.668 .84 28.609 .867 28.555 cv
.891 28.504 .922 28.449 .957 28.395 cv
.992 28.344 1.035 28.289 1.094 28.227 cv
2.867 26.402 li
3.277 25.984 3.605 25.609 3.855 25.273 cv
4.102 24.945 4.293 24.641 4.426 24.363 cv
4.559 24.09 4.645 23.84 4.691 23.613 cv
4.73 23.391 4.754 23.18 4.754 22.984 cv
4.754 22.789 4.719 22.605 4.652 22.426 cv
4.586 22.254 4.492 22.098 4.367 21.961 cv
4.242 21.832 4.086 21.727 3.898 21.645 cv
3.711 21.57 3.492 21.531 3.246 21.527 cv
2.957 21.531 2.699 21.57 2.473 21.645 cv
2.242 21.727 2.043 21.812 1.871 21.898 cv
1.699 21.992 1.555 22.074 1.438 22.152 cv
1.32 22.23 1.234 22.27 1.184 22.27 cv
1.148 22.27 1.117 22.262 1.094 22.242 cv
1.063 22.227 1.043 22.195 1.027 22.152 cv
1.012 22.113 .996 22.059 .988 21.988 cv
.977 21.922 .973 21.84 .977 21.742 cv
.973 21.676 .977 21.617 .984 21.566 cv
.988 21.516 .996 21.473 1.008 21.434 cv
1.016 21.398 1.031 21.363 1.051 21.332 cv
1.07 21.301 1.105 21.262 1.164 21.211 cv
1.215 21.164 1.309 21.098 1.445 21.016 cv
1.578 20.934 1.75 20.855 1.953 20.773 cv
2.156 20.695 2.379 20.625 2.625 20.57 cv
2.867 20.516 3.125 20.488 3.398 20.488 cv
3.824 20.488 4.199 20.551 4.523 20.672 cv
4.844 20.793 5.109 20.957 5.324 21.168 cv
5.535 21.379 5.695 21.625 5.801 21.898 cv
5.906 22.18 5.961 22.477 5.961 22.789 cv
5.961 23.078 5.934 23.359 5.883 23.637 cv
5.832 23.922 5.727 24.227 5.566 24.551 cv
5.402 24.879 5.168 25.242 4.863 25.641 cv
4.555 26.043 4.148 26.504 3.645 27.02 cv
2.238 28.488 li
6.098 28.488 li
6.129 28.492 6.164 28.504 6.203 28.52 cv
6.234 28.543 6.266 28.574 6.293 28.613 cv
6.316 28.656 6.336 28.707 6.348 28.766 cv
6.359 28.832 6.363 28.902 6.367 28.98 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.738 25.031 mo
13.734 25.715 13.684 26.336 13.578 26.898 cv
13.469 27.461 13.289 27.945 13.043 28.348 cv
12.789 28.754 12.461 29.066 12.063 29.285 cv
11.656 29.508 11.164 29.617 10.578 29.617 cv
10.02 29.617 9.547 29.52 9.168 29.32 cv
8.785 29.125 8.48 28.832 8.246 28.445 cv
8.012 28.059 7.844 27.586 7.75 27.02 cv
7.648 26.457 7.602 25.809 7.602 25.074 cv
7.602 24.402 7.656 23.781 7.766 23.215 cv
7.875 22.652 8.051 22.168 8.301 21.762 cv
8.543 21.359 8.867 21.047 9.273 20.82 cv
9.672 20.602 10.168 20.488 10.758 20.488 cv
11.316 20.488 11.789 20.59 12.172 20.785 cv
12.555 20.988 12.859 21.281 13.094 21.664 cv
13.324 22.055 13.492 22.527 13.59 23.09 cv
13.688 23.652 13.734 24.301 13.738 25.031 cv
cp
12.531 25.113 mo
12.527 24.672 12.512 24.273 12.484 23.922 cv
12.449 23.57 12.402 23.262 12.344 22.992 cv
12.277 22.723 12.199 22.492 12.102 22.297 cv
12.004 22.105 11.887 21.945 11.75 21.816 cv
11.609 21.691 11.449 21.598 11.277 21.539 cv
11.098 21.484 10.902 21.457 10.688 21.453 cv
10.297 21.457 9.98 21.547 9.742 21.73 cv
9.496 21.914 9.305 22.168 9.168 22.484 cv
9.027 22.805 8.934 23.176 8.883 23.605 cv
8.832 24.035 8.809 24.5 8.809 24.992 cv
8.809 25.656 8.84 26.219 8.91 26.68 cv
8.977 27.148 9.086 27.527 9.238 27.816 cv
9.383 28.113 9.574 28.324 9.805 28.453 cv
10.035 28.59 10.316 28.656 10.648 28.652 cv
10.902 28.656 11.125 28.617 11.32 28.531 cv
11.512 28.453 11.68 28.332 11.82 28.176 cv
11.961 28.023 12.074 27.84 12.168 27.625 cv
12.254 27.41 12.328 27.172 12.387 26.91 cv
12.438 26.652 12.477 26.371 12.5 26.066 cv
12.52 25.762 12.527 25.445 12.531 25.113 cv
cp
f
30.027 525.73 mo
30.023 525.82 30.016 525.891 30.004 525.949 cv
29.988 526.012 29.969 526.062 29.949 526.094 cv
29.926 526.133 29.902 526.156 29.871 526.172 cv
29.84 526.187 29.809 526.195 29.781 526.195 cv
25.145 526.195 li
25.109 526.195 25.082 526.187 25.055 526.172 cv
25.027 526.156 25 526.133 24.977 526.094 cv
24.949 526.062 24.93 526.012 24.918 525.949 cv
24.902 525.891 24.895 525.82 24.898 525.73 cv
24.895 525.652 24.902 525.578 24.918 525.516 cv
24.93 525.457 24.945 525.41 24.969 525.371 cv
24.984 525.336 25.012 525.305 25.043 525.281 cv
25.074 525.262 25.105 525.254 25.145 525.25 cv
26.996 525.25 li
26.996 518.504 li
25.281 519.523 li
25.191 519.574 25.121 519.602 25.074 519.609 cv
25.02 519.617 24.977 519.609 24.945 519.578 cv
24.91 519.551 24.891 519.5 24.879 519.43 cv
24.867 519.363 24.859 519.277 24.863 519.168 cv
24.859 519.094 24.863 519.027 24.875 518.969 cv
24.879 518.918 24.891 518.871 24.906 518.832 cv
24.918 518.797 24.938 518.766 24.961 518.738 cv
24.984 518.711 25.016 518.684 25.063 518.656 cv
27.105 517.344 li
27.121 517.332 27.141 517.32 27.172 517.312 cv
27.195 517.305 27.23 517.297 27.277 517.285 cv
27.316 517.277 27.367 517.27 27.422 517.266 cv
27.477 517.266 27.543 517.266 27.629 517.262 cv
27.734 517.266 27.828 517.27 27.902 517.277 cv
27.973 517.285 28.027 517.301 28.074 517.316 cv
28.113 517.336 28.141 517.355 28.156 517.379 cv
28.164 517.406 28.172 517.43 28.176 517.453 cv
28.176 525.25 li
29.781 525.25 li
29.816 525.254 29.852 525.262 29.883 525.281 cv
29.914 525.305 29.938 525.336 29.961 525.371 cv
29.977 525.41 29.992 525.457 30.008 525.516 cv
30.016 525.578 30.023 525.652 30.027 525.73 cv
cp
f
102.605 525.687 mo
102.602 525.773 102.598 525.848 102.586 525.91 cv
102.574 525.977 102.559 526.031 102.539 526.07 cv
102.516 526.117 102.488 526.148 102.457 526.164 cv
102.422 526.187 102.383 526.195 102.344 526.195 cv
97.441 526.195 li
97.379 526.195 97.32 526.187 97.273 526.172 cv
97.223 526.156 97.184 526.133 97.148 526.094 cv
97.113 526.062 97.086 526.008 97.074 525.937 cv
97.055 525.867 97.047 525.781 97.051 525.68 cv
97.047 525.59 97.051 525.512 97.059 525.441 cv
97.063 525.375 97.078 525.316 97.105 525.262 cv
97.129 525.211 97.16 525.156 97.195 525.102 cv
97.23 525.051 97.273 524.996 97.332 524.934 cv
99.105 523.109 li
99.516 522.691 99.844 522.316 100.094 521.98 cv
100.34 521.652 100.531 521.348 100.664 521.07 cv
100.797 520.797 100.883 520.547 100.93 520.32 cv
100.969 520.098 100.992 519.887 100.992 519.691 cv
100.992 519.496 100.957 519.312 100.891 519.133 cv
100.824 518.961 100.73 518.805 100.605 518.668 cv
100.48 518.539 100.324 518.434 100.137 518.352 cv
99.949 518.277 99.73 518.238 99.484 518.234 cv
99.195 518.238 98.938 518.277 98.711 518.352 cv
98.48 518.434 98.281 518.52 98.109 518.605 cv
97.938 518.699 97.793 518.781 97.676 518.859 cv
97.559 518.937 97.473 518.977 97.422 518.977 cv
97.387 518.977 97.355 518.969 97.332 518.949 cv
97.301 518.934 97.281 518.902 97.266 518.859 cv
97.25 518.82 97.234 518.766 97.227 518.695 cv
97.215 518.629 97.211 518.547 97.215 518.449 cv
97.211 518.383 97.215 518.324 97.223 518.273 cv
97.227 518.223 97.234 518.18 97.246 518.141 cv
97.254 518.105 97.27 518.07 97.289 518.039 cv
97.309 518.008 97.344 517.969 97.402 517.918 cv
97.453 517.871 97.547 517.805 97.684 517.723 cv
97.816 517.641 97.988 517.562 98.191 517.48 cv
98.395 517.402 98.617 517.332 98.863 517.277 cv
99.105 517.223 99.363 517.195 99.637 517.195 cv
100.063 517.195 100.438 517.258 100.762 517.379 cv
101.082 517.5 101.348 517.664 101.563 517.875 cv
101.773 518.086 101.934 518.332 102.039 518.605 cv
102.145 518.887 102.199 519.184 102.199 519.496 cv
102.199 519.785 102.172 520.066 102.121 520.344 cv
102.07 520.629 101.965 520.934 101.805 521.258 cv
101.641 521.586 101.406 521.949 101.102 522.348 cv
100.793 522.75 100.387 523.211 99.883 523.727 cv
98.477 525.195 li
102.336 525.195 li
102.367 525.199 102.402 525.211 102.441 525.227 cv
102.473 525.25 102.504 525.281 102.531 525.32 cv
102.555 525.363 102.574 525.414 102.586 525.473 cv
102.598 525.539 102.602 525.609 102.605 525.687 cv
cp
f
175.551 523.672 mo
175.547 523.824 175.523 523.945 175.48 524.031 cv
175.434 524.121 175.371 524.164 175.289 524.16 cv
174.289 524.16 li
174.289 526.023 li
174.289 526.062 174.277 526.094 174.262 526.117 cv
174.238 526.145 174.207 526.164 174.164 526.184 cv
174.113 526.199 174.051 526.211 173.98 526.223 cv
173.902 526.23 173.809 526.234 173.691 526.238 cv
173.574 526.234 173.477 526.23 173.406 526.223 cv
173.328 526.211 173.27 526.199 173.227 526.184 cv
173.18 526.164 173.148 526.145 173.133 526.117 cv
173.113 526.094 173.105 526.062 173.109 526.023 cv
173.109 524.16 li
169.48 524.16 li
169.422 524.164 169.379 524.156 169.344 524.141 cv
169.309 524.129 169.273 524.102 169.246 524.062 cv
169.215 524.027 169.195 523.977 169.184 523.906 cv
169.172 523.84 169.168 523.75 169.168 523.637 cv
169.168 523.555 169.168 523.477 169.176 523.406 cv
169.176 523.336 169.188 523.273 169.203 523.219 cv
169.215 523.164 169.23 523.109 169.258 523.055 cv
169.277 523 169.305 522.945 169.34 522.883 cv
172.5 517.496 li
172.52 517.461 172.555 517.43 172.602 517.402 cv
172.645 517.375 172.699 517.352 172.773 517.332 cv
172.84 517.316 172.926 517.305 173.031 517.293 cv
173.133 517.289 173.254 517.285 173.395 517.281 cv
173.543 517.285 173.68 517.289 173.797 517.301 cv
173.91 517.312 174 517.328 174.074 517.344 cv
174.141 517.363 174.195 517.387 174.234 517.418 cv
174.27 517.449 174.289 517.484 174.289 517.523 cv
174.289 523.187 li
175.289 523.187 li
175.363 523.191 175.426 523.23 175.477 523.309 cv
175.523 523.391 175.547 523.512 175.551 523.672 cv
cp
173.109 518.32 mo
173.098 518.32 li
170.246 523.187 li
173.109 523.187 li
cp
f
248.004 523.324 mo
248.004 523.715 247.941 524.094 247.824 524.453 cv
247.699 524.82 247.516 525.137 247.273 525.41 cv
247.023 525.687 246.711 525.91 246.336 526.074 cv
245.953 526.242 245.508 526.324 244.992 526.324 cv
244.621 526.324 244.293 526.281 244.012 526.187 cv
243.727 526.102 243.48 525.969 243.27 525.797 cv
243.059 525.629 242.883 525.422 242.746 525.176 cv
242.605 524.93 242.492 524.648 242.41 524.332 cv
242.324 524.02 242.266 523.676 242.23 523.297 cv
242.191 522.926 242.172 522.523 242.176 522.09 cv
242.172 521.711 242.191 521.328 242.234 520.937 cv
242.273 520.555 242.348 520.18 242.453 519.812 cv
242.559 519.453 242.703 519.113 242.883 518.797 cv
243.063 518.48 243.289 518.203 243.563 517.969 cv
243.836 517.734 244.16 517.547 244.539 517.406 cv
244.918 517.27 245.359 517.203 245.863 517.199 cv
246.031 517.203 246.203 517.211 246.375 517.23 cv
246.547 517.254 246.707 517.285 246.855 517.316 cv
247.004 517.355 247.125 517.391 247.227 517.43 cv
247.324 517.469 247.391 517.504 247.426 517.527 cv
247.453 517.555 247.477 517.582 247.496 517.609 cv
247.512 517.641 247.527 517.672 247.535 517.707 cv
247.543 517.742 247.547 517.781 247.555 517.824 cv
247.555 517.867 247.559 517.922 247.563 517.984 cv
247.559 518.07 247.559 518.141 247.559 518.195 cv
247.555 518.258 247.543 518.305 247.531 518.34 cv
247.512 518.379 247.492 518.406 247.469 518.422 cv
247.441 518.441 247.41 518.449 247.371 518.449 cv
247.32 518.449 247.25 518.434 247.164 518.402 cv
247.074 518.371 246.969 518.336 246.848 518.293 cv
246.723 518.258 246.574 518.223 246.398 518.187 cv
246.223 518.16 246.02 518.145 245.789 518.141 cv
245.359 518.145 244.992 518.23 244.688 518.402 cv
244.383 518.574 244.133 518.809 243.938 519.102 cv
243.742 519.395 243.598 519.734 243.508 520.117 cv
243.41 520.508 243.355 520.91 243.348 521.328 cv
243.465 521.262 243.602 521.195 243.75 521.125 cv
243.898 521.059 244.059 520.996 244.234 520.937 cv
244.41 520.887 244.598 520.84 244.793 520.805 cv
244.988 520.773 245.199 520.758 245.426 520.754 cv
245.902 520.758 246.305 520.824 246.637 520.949 cv
246.965 521.082 247.23 521.262 247.438 521.492 cv
247.637 521.723 247.781 521.992 247.871 522.305 cv
247.957 522.617 248.004 522.957 248.004 523.324 cv
cp
246.809 523.434 mo
246.809 523.172 246.781 522.93 246.73 522.711 cv
246.676 522.496 246.586 522.312 246.465 522.156 cv
246.34 522.008 246.176 521.891 245.973 521.809 cv
245.762 521.727 245.508 521.684 245.211 521.684 cv
245.039 521.684 244.871 521.699 244.703 521.73 cv
244.531 521.762 244.367 521.805 244.211 521.852 cv
244.051 521.906 243.902 521.969 243.762 522.039 cv
243.617 522.113 243.484 522.187 243.367 522.266 cv
243.363 522.859 243.402 523.355 243.48 523.75 cv
243.555 524.148 243.664 524.465 243.809 524.703 cv
243.953 524.945 244.133 525.117 244.348 525.219 cv
244.563 525.324 244.813 525.375 245.102 525.371 cv
245.391 525.375 245.645 525.32 245.859 525.207 cv
246.074 525.102 246.25 524.953 246.395 524.766 cv
246.535 524.582 246.641 524.375 246.707 524.145 cv
246.773 523.914 246.809 523.68 246.809 523.434 cv
cp
f
320.578 523.918 mo
320.578 524.305 320.508 524.648 320.371 524.945 cv
320.234 525.25 320.039 525.5 319.781 525.703 cv
319.523 525.91 319.203 526.066 318.824 526.168 cv
318.441 526.273 318.008 526.324 317.523 526.324 cv
317.063 526.324 316.652 526.277 316.293 526.184 cv
315.93 526.09 315.625 525.949 315.375 525.758 cv
315.125 525.574 314.934 525.344 314.801 525.066 cv
314.668 524.793 314.602 524.48 314.602 524.125 cv
314.602 523.852 314.645 523.594 314.738 523.359 cv
314.824 523.125 314.957 522.91 315.133 522.715 cv
315.301 522.52 315.512 522.336 315.766 522.16 cv
316.016 521.992 316.301 521.828 316.617 521.672 cv
316.344 521.531 316.102 521.383 315.891 521.223 cv
315.68 521.066 315.5 520.895 315.355 520.707 cv
315.207 520.523 315.098 520.328 315.023 520.117 cv
314.945 519.91 314.906 519.68 314.91 519.43 cv
314.906 519.121 314.961 518.828 315.078 518.555 cv
315.188 518.285 315.359 518.051 315.586 517.848 cv
315.813 517.648 316.098 517.488 316.449 517.371 cv
316.793 517.254 317.203 517.195 317.672 517.195 cv
318.117 517.195 318.504 517.25 318.832 517.355 cv
319.16 517.465 319.43 517.609 319.641 517.793 cv
319.852 517.98 320.008 518.199 320.113 518.449 cv
320.211 518.699 320.262 518.969 320.266 519.258 cv
320.262 519.492 320.223 519.719 320.152 519.93 cv
320.074 520.148 319.965 520.352 319.816 520.539 cv
319.668 520.734 319.488 520.914 319.277 521.078 cv
319.066 521.25 318.824 521.406 318.551 521.547 cv
318.871 521.711 319.156 521.875 319.414 522.043 cv
319.664 522.211 319.879 522.391 320.055 522.586 cv
320.223 522.781 320.352 522.988 320.445 523.203 cv
320.531 523.422 320.578 523.66 320.578 523.918 cv
cp
319.098 519.367 mo
319.094 519.18 319.063 519.004 318.996 518.848 cv
318.93 518.691 318.832 518.559 318.707 518.449 cv
318.578 518.34 318.418 518.258 318.23 518.199 cv
318.035 518.145 317.82 518.117 317.582 518.113 cv
317.086 518.117 316.711 518.227 316.461 518.449 cv
316.203 518.676 316.078 518.984 316.082 519.367 cv
316.078 519.547 316.109 519.711 316.172 519.863 cv
316.234 520.02 316.328 520.164 316.461 520.301 cv
316.586 520.437 316.75 520.57 316.953 520.699 cv
317.148 520.832 317.387 520.969 317.664 521.109 cv
318.125 520.875 318.48 520.613 318.727 520.32 cv
318.973 520.035 319.094 519.719 319.098 519.367 cv
cp
319.387 524.043 mo
319.383 523.836 319.344 523.645 319.27 523.473 cv
319.188 523.305 319.07 523.145 318.914 522.992 cv
318.758 522.844 318.559 522.699 318.324 522.559 cv
318.086 522.422 317.816 522.277 317.508 522.125 cv
317.219 522.27 316.965 522.41 316.75 522.551 cv
316.531 522.691 316.352 522.84 316.215 522.988 cv
316.074 523.145 315.969 523.301 315.898 523.465 cv
315.824 523.633 315.789 523.816 315.793 524.016 cv
315.789 524.461 315.941 524.805 316.25 525.043 cv
316.551 525.289 317.004 525.41 317.609 525.406 cv
318.191 525.41 318.637 525.289 318.938 525.039 cv
319.234 524.797 319.383 524.465 319.387 524.043 cv
cp
f
389.445 525.73 mo
389.441 525.82 389.434 525.891 389.422 525.949 cv
389.406 526.012 389.387 526.062 389.367 526.094 cv
389.344 526.133 389.32 526.156 389.289 526.172 cv
389.258 526.187 389.227 526.195 389.199 526.195 cv
384.563 526.195 li
384.527 526.195 384.5 526.187 384.473 526.172 cv
384.445 526.156 384.418 526.133 384.395 526.094 cv
384.367 526.062 384.348 526.012 384.336 525.949 cv
384.32 525.891 384.313 525.82 384.316 525.73 cv
384.313 525.652 384.32 525.578 384.336 525.516 cv
384.348 525.457 384.363 525.41 384.387 525.371 cv
384.402 525.336 384.43 525.305 384.461 525.281 cv
384.492 525.262 384.523 525.254 384.563 525.25 cv
386.414 525.25 li
386.414 518.504 li
384.699 519.523 li
384.609 519.574 384.539 519.602 384.492 519.609 cv
384.438 519.617 384.395 519.609 384.363 519.578 cv
384.328 519.551 384.309 519.5 384.297 519.43 cv
384.285 519.363 384.277 519.277 384.281 519.168 cv
384.277 519.094 384.281 519.027 384.293 518.969 cv
384.297 518.918 384.309 518.871 384.324 518.832 cv
384.336 518.797 384.355 518.766 384.379 518.738 cv
384.402 518.711 384.434 518.684 384.48 518.656 cv
386.523 517.344 li
386.539 517.332 386.559 517.32 386.59 517.312 cv
386.613 517.305 386.648 517.297 386.695 517.285 cv
386.734 517.277 386.785 517.27 386.84 517.266 cv
386.895 517.266 386.961 517.266 387.047 517.262 cv
387.152 517.266 387.246 517.27 387.32 517.277 cv
387.391 517.285 387.445 517.301 387.492 517.316 cv
387.531 517.336 387.559 517.355 387.574 517.379 cv
387.582 517.406 387.59 517.43 387.594 517.453 cv
387.594 525.25 li
389.199 525.25 li
389.234 525.254 389.27 525.262 389.301 525.281 cv
389.332 525.305 389.355 525.336 389.379 525.371 cv
389.395 525.41 389.41 525.457 389.426 525.516 cv
389.434 525.578 389.441 525.652 389.445 525.73 cv
cp
f
396.801 521.738 mo
396.797 522.422 396.746 523.043 396.641 523.605 cv
396.531 524.168 396.352 524.652 396.105 525.055 cv
395.852 525.461 395.523 525.773 395.125 525.992 cv
394.719 526.215 394.227 526.324 393.641 526.324 cv
393.082 526.324 392.609 526.227 392.23 526.027 cv
391.848 525.832 391.543 525.539 391.309 525.152 cv
391.074 524.766 390.906 524.293 390.813 523.727 cv
390.711 523.164 390.664 522.516 390.664 521.781 cv
390.664 521.109 390.719 520.488 390.828 519.922 cv
390.938 519.359 391.113 518.875 391.363 518.469 cv
391.605 518.066 391.93 517.754 392.336 517.527 cv
392.734 517.309 393.23 517.195 393.82 517.195 cv
394.379 517.195 394.852 517.297 395.234 517.492 cv
395.617 517.695 395.922 517.988 396.156 518.371 cv
396.387 518.762 396.555 519.234 396.652 519.797 cv
396.75 520.359 396.797 521.008 396.801 521.738 cv
cp
395.594 521.82 mo
395.59 521.379 395.574 520.98 395.547 520.629 cv
395.512 520.277 395.465 519.969 395.406 519.699 cv
395.34 519.43 395.262 519.199 395.164 519.004 cv
395.066 518.812 394.949 518.652 394.813 518.523 cv
394.672 518.398 394.512 518.305 394.34 518.246 cv
394.16 518.191 393.965 518.164 393.75 518.16 cv
393.359 518.164 393.043 518.254 392.805 518.437 cv
392.559 518.621 392.367 518.875 392.23 519.191 cv
392.09 519.512 391.996 519.883 391.945 520.312 cv
391.895 520.742 391.871 521.207 391.871 521.699 cv
391.871 522.363 391.902 522.926 391.973 523.387 cv
392.039 523.855 392.148 524.234 392.301 524.523 cv
392.445 524.82 392.637 525.031 392.867 525.16 cv
393.098 525.297 393.379 525.363 393.711 525.359 cv
393.965 525.363 394.188 525.324 394.383 525.238 cv
394.574 525.16 394.742 525.039 394.883 524.883 cv
395.023 524.73 395.137 524.547 395.23 524.332 cv
395.316 524.117 395.391 523.879 395.449 523.617 cv
395.5 523.359 395.539 523.078 395.563 522.773 cv
395.582 522.469 395.59 522.152 395.594 521.82 cv
cp
f
462.047 525.73 mo
462.043 525.82 462.035 525.891 462.023 525.949 cv
462.008 526.012 461.988 526.062 461.969 526.094 cv
461.945 526.133 461.922 526.156 461.891 526.172 cv
461.859 526.187 461.828 526.195 461.801 526.195 cv
457.164 526.195 li
457.129 526.195 457.102 526.187 457.074 526.172 cv
457.047 526.156 457.02 526.133 456.996 526.094 cv
456.969 526.062 456.949 526.012 456.938 525.949 cv
456.922 525.891 456.914 525.82 456.918 525.73 cv
456.914 525.652 456.922 525.578 456.938 525.516 cv
456.949 525.457 456.965 525.41 456.988 525.371 cv
457.004 525.336 457.031 525.305 457.063 525.281 cv
457.094 525.262 457.125 525.254 457.164 525.25 cv
459.016 525.25 li
459.016 518.504 li
457.301 519.523 li
457.211 519.574 457.141 519.602 457.094 519.609 cv
457.039 519.617 456.996 519.609 456.965 519.578 cv
456.93 519.551 456.91 519.5 456.898 519.43 cv
456.887 519.363 456.879 519.277 456.883 519.168 cv
456.879 519.094 456.883 519.027 456.895 518.969 cv
456.898 518.918 456.91 518.871 456.926 518.832 cv
456.938 518.797 456.957 518.766 456.98 518.738 cv
457.004 518.711 457.035 518.684 457.082 518.656 cv
459.125 517.344 li
459.141 517.332 459.16 517.32 459.191 517.312 cv
459.215 517.305 459.25 517.297 459.297 517.285 cv
459.336 517.277 459.387 517.27 459.441 517.266 cv
459.496 517.266 459.563 517.266 459.648 517.262 cv
459.754 517.266 459.848 517.27 459.922 517.277 cv
459.992 517.285 460.047 517.301 460.094 517.316 cv
460.133 517.336 460.16 517.355 460.176 517.379 cv
460.184 517.406 460.191 517.43 460.195 517.453 cv
460.195 525.25 li
461.801 525.25 li
461.836 525.254 461.871 525.262 461.902 525.281 cv
461.934 525.305 461.957 525.336 461.98 525.371 cv
461.996 525.41 462.012 525.457 462.027 525.516 cv
462.035 525.578 462.043 525.652 462.047 525.73 cv
cp
f
469.105 525.687 mo
469.102 525.773 469.098 525.848 469.086 525.91 cv
469.074 525.977 469.059 526.031 469.039 526.07 cv
469.016 526.117 468.988 526.148 468.957 526.164 cv
468.922 526.187 468.883 526.195 468.844 526.195 cv
463.941 526.195 li
463.879 526.195 463.82 526.187 463.773 526.172 cv
463.723 526.156 463.684 526.133 463.648 526.094 cv
463.613 526.062 463.586 526.008 463.574 525.937 cv
463.555 525.867 463.547 525.781 463.551 525.68 cv
463.547 525.59 463.551 525.512 463.559 525.441 cv
463.563 525.375 463.578 525.316 463.605 525.262 cv
463.629 525.211 463.66 525.156 463.695 525.102 cv
463.73 525.051 463.773 524.996 463.832 524.934 cv
465.605 523.109 li
466.016 522.691 466.344 522.316 466.594 521.98 cv
466.84 521.652 467.031 521.348 467.164 521.07 cv
467.297 520.797 467.383 520.547 467.43 520.32 cv
467.469 520.098 467.492 519.887 467.492 519.691 cv
467.492 519.496 467.457 519.312 467.391 519.133 cv
467.324 518.961 467.23 518.805 467.105 518.668 cv
466.98 518.539 466.824 518.434 466.637 518.352 cv
466.449 518.277 466.23 518.238 465.984 518.234 cv
465.695 518.238 465.438 518.277 465.211 518.352 cv
464.98 518.434 464.781 518.52 464.609 518.605 cv
464.438 518.699 464.293 518.781 464.176 518.859 cv
464.059 518.937 463.973 518.977 463.922 518.977 cv
463.887 518.977 463.855 518.969 463.832 518.949 cv
463.801 518.934 463.781 518.902 463.766 518.859 cv
463.75 518.82 463.734 518.766 463.727 518.695 cv
463.715 518.629 463.711 518.547 463.715 518.449 cv
463.711 518.383 463.715 518.324 463.723 518.273 cv
463.727 518.223 463.734 518.18 463.746 518.141 cv
463.754 518.105 463.77 518.07 463.789 518.039 cv
463.809 518.008 463.844 517.969 463.902 517.918 cv
463.953 517.871 464.047 517.805 464.184 517.723 cv
464.316 517.641 464.488 517.562 464.691 517.48 cv
464.895 517.402 465.117 517.332 465.363 517.277 cv
465.605 517.223 465.863 517.195 466.137 517.195 cv
466.563 517.195 466.938 517.258 467.262 517.379 cv
467.582 517.5 467.848 517.664 468.063 517.875 cv
468.273 518.086 468.434 518.332 468.539 518.605 cv
468.645 518.887 468.699 519.184 468.699 519.496 cv
468.699 519.785 468.672 520.066 468.621 520.344 cv
468.57 520.629 468.465 520.934 468.305 521.258 cv
468.141 521.586 467.906 521.949 467.602 522.348 cv
467.293 522.75 466.887 523.211 466.383 523.727 cv
464.977 525.195 li
468.836 525.195 li
468.867 525.199 468.902 525.211 468.941 525.227 cv
468.973 525.25 469.004 525.281 469.031 525.32 cv
469.055 525.363 469.074 525.414 469.086 525.473 cv
469.098 525.539 469.102 525.609 469.105 525.687 cv
cp
f
534.645 525.73 mo
534.641 525.82 534.633 525.891 534.621 525.949 cv
534.605 526.012 534.586 526.062 534.566 526.094 cv
534.543 526.133 534.52 526.156 534.488 526.172 cv
534.457 526.187 534.426 526.195 534.398 526.195 cv
529.762 526.195 li
529.727 526.195 529.699 526.187 529.672 526.172 cv
529.645 526.156 529.617 526.133 529.594 526.094 cv
529.566 526.062 529.547 526.012 529.535 525.949 cv
529.52 525.891 529.512 525.82 529.516 525.73 cv
529.512 525.652 529.52 525.578 529.535 525.516 cv
529.547 525.457 529.563 525.41 529.586 525.371 cv
529.602 525.336 529.629 525.305 529.66 525.281 cv
529.691 525.262 529.723 525.254 529.762 525.25 cv
531.613 525.25 li
531.613 518.504 li
529.898 519.523 li
529.809 519.574 529.738 519.602 529.691 519.609 cv
529.637 519.617 529.594 519.609 529.563 519.578 cv
529.527 519.551 529.508 519.5 529.496 519.43 cv
529.484 519.363 529.477 519.277 529.48 519.168 cv
529.477 519.094 529.48 519.027 529.492 518.969 cv
529.496 518.918 529.508 518.871 529.523 518.832 cv
529.535 518.797 529.555 518.766 529.578 518.738 cv
529.602 518.711 529.633 518.684 529.68 518.656 cv
531.723 517.344 li
531.738 517.332 531.758 517.32 531.789 517.312 cv
531.813 517.305 531.848 517.297 531.895 517.285 cv
531.934 517.277 531.984 517.27 532.039 517.266 cv
532.094 517.266 532.16 517.266 532.246 517.262 cv
532.352 517.266 532.445 517.27 532.52 517.277 cv
532.59 517.285 532.645 517.301 532.691 517.316 cv
532.73 517.336 532.758 517.355 532.773 517.379 cv
532.781 517.406 532.789 517.43 532.793 517.453 cv
532.793 525.25 li
534.398 525.25 li
534.434 525.254 534.469 525.262 534.5 525.281 cv
534.531 525.305 534.555 525.336 534.578 525.371 cv
534.594 525.41 534.609 525.457 534.625 525.516 cv
534.633 525.578 534.641 525.652 534.645 525.73 cv
cp
f
542.082 523.672 mo
542.078 523.824 542.055 523.945 542.012 524.031 cv
541.965 524.121 541.902 524.164 541.82 524.16 cv
540.82 524.16 li
540.82 526.023 li
540.82 526.062 540.809 526.094 540.793 526.117 cv
540.77 526.145 540.738 526.164 540.695 526.184 cv
540.645 526.199 540.582 526.211 540.512 526.223 cv
540.434 526.23 540.34 526.234 540.223 526.238 cv
540.105 526.234 540.008 526.23 539.938 526.223 cv
539.859 526.211 539.801 526.199 539.758 526.184 cv
539.711 526.164 539.68 526.145 539.664 526.117 cv
539.645 526.094 539.637 526.062 539.641 526.023 cv
539.641 524.16 li
536.012 524.16 li
535.953 524.164 535.91 524.156 535.875 524.141 cv
535.84 524.129 535.805 524.102 535.777 524.062 cv
535.746 524.027 535.727 523.977 535.715 523.906 cv
535.703 523.84 535.699 523.75 535.699 523.637 cv
535.699 523.555 535.699 523.477 535.707 523.406 cv
535.707 523.336 535.719 523.273 535.734 523.219 cv
535.746 523.164 535.762 523.109 535.789 523.055 cv
535.809 523 535.836 522.945 535.871 522.883 cv
539.031 517.496 li
539.051 517.461 539.086 517.43 539.133 517.402 cv
539.176 517.375 539.23 517.352 539.305 517.332 cv
539.371 517.316 539.457 517.305 539.563 517.293 cv
539.664 517.289 539.785 517.285 539.926 517.281 cv
540.074 517.285 540.211 517.289 540.328 517.301 cv
540.441 517.312 540.531 517.328 540.605 517.344 cv
540.672 517.363 540.727 517.387 540.766 517.418 cv
540.801 517.449 540.82 517.484 540.82 517.523 cv
540.82 523.187 li
541.82 523.187 li
541.895 523.191 541.957 523.23 542.008 523.309 cv
542.055 523.391 542.078 523.512 542.082 523.672 cv
cp
539.641 518.32 mo
539.629 518.32 li
536.777 523.187 li
539.641 523.187 li
cp
f
607.246 525.73 mo
607.242 525.82 607.234 525.891 607.223 525.949 cv
607.207 526.012 607.188 526.062 607.168 526.094 cv
607.145 526.133 607.121 526.156 607.09 526.172 cv
607.059 526.187 607.027 526.195 607 526.195 cv
602.363 526.195 li
602.328 526.195 602.301 526.187 602.273 526.172 cv
602.246 526.156 602.219 526.133 602.195 526.094 cv
602.168 526.062 602.148 526.012 602.137 525.949 cv
602.121 525.891 602.113 525.82 602.117 525.73 cv
602.113 525.652 602.121 525.578 602.137 525.516 cv
602.148 525.457 602.164 525.41 602.188 525.371 cv
602.203 525.336 602.23 525.305 602.262 525.281 cv
602.293 525.262 602.324 525.254 602.363 525.25 cv
604.215 525.25 li
604.215 518.504 li
602.5 519.523 li
602.41 519.574 602.34 519.602 602.293 519.609 cv
602.238 519.617 602.195 519.609 602.164 519.578 cv
602.129 519.551 602.109 519.5 602.098 519.43 cv
602.086 519.363 602.078 519.277 602.082 519.168 cv
602.078 519.094 602.082 519.027 602.094 518.969 cv
602.098 518.918 602.109 518.871 602.125 518.832 cv
602.137 518.797 602.156 518.766 602.18 518.738 cv
602.203 518.711 602.234 518.684 602.281 518.656 cv
604.324 517.344 li
604.34 517.332 604.359 517.32 604.391 517.312 cv
604.414 517.305 604.449 517.297 604.496 517.285 cv
604.535 517.277 604.586 517.27 604.641 517.266 cv
604.695 517.266 604.762 517.266 604.848 517.262 cv
604.953 517.266 605.047 517.27 605.121 517.277 cv
605.191 517.285 605.246 517.301 605.293 517.316 cv
605.332 517.336 605.359 517.355 605.375 517.379 cv
605.383 517.406 605.391 517.43 605.395 517.453 cv
605.395 525.25 li
607 525.25 li
607.035 525.254 607.07 525.262 607.102 525.281 cv
607.133 525.305 607.156 525.336 607.18 525.371 cv
607.195 525.41 607.211 525.457 607.227 525.516 cv
607.234 525.578 607.242 525.652 607.246 525.73 cv
cp
f
614.531 523.324 mo
614.531 523.715 614.469 524.094 614.352 524.453 cv
614.227 524.82 614.043 525.137 613.801 525.41 cv
613.551 525.687 613.238 525.91 612.863 526.074 cv
612.48 526.242 612.035 526.324 611.52 526.324 cv
611.148 526.324 610.82 526.281 610.539 526.187 cv
610.254 526.102 610.008 525.969 609.797 525.797 cv
609.586 525.629 609.41 525.422 609.273 525.176 cv
609.133 524.93 609.02 524.648 608.938 524.332 cv
608.852 524.02 608.793 523.676 608.758 523.297 cv
608.719 522.926 608.699 522.523 608.703 522.09 cv
608.699 521.711 608.719 521.328 608.762 520.937 cv
608.801 520.555 608.875 520.18 608.98 519.812 cv
609.086 519.453 609.23 519.113 609.41 518.797 cv
609.59 518.48 609.816 518.203 610.09 517.969 cv
610.363 517.734 610.688 517.547 611.066 517.406 cv
611.445 517.27 611.887 517.203 612.391 517.199 cv
612.559 517.203 612.73 517.211 612.902 517.23 cv
613.074 517.254 613.234 517.285 613.383 517.316 cv
613.531 517.355 613.652 517.391 613.754 517.43 cv
613.852 517.469 613.918 517.504 613.953 517.527 cv
613.98 517.555 614.004 517.582 614.023 517.609 cv
614.039 517.641 614.055 517.672 614.063 517.707 cv
614.07 517.742 614.074 517.781 614.082 517.824 cv
614.082 517.867 614.086 517.922 614.09 517.984 cv
614.086 518.07 614.086 518.141 614.086 518.195 cv
614.082 518.258 614.07 518.305 614.059 518.34 cv
614.039 518.379 614.02 518.406 613.996 518.422 cv
613.969 518.441 613.938 518.449 613.898 518.449 cv
613.848 518.449 613.777 518.434 613.691 518.402 cv
613.602 518.371 613.496 518.336 613.375 518.293 cv
613.25 518.258 613.102 518.223 612.926 518.187 cv
612.75 518.16 612.547 518.145 612.316 518.141 cv
611.887 518.145 611.52 518.23 611.215 518.402 cv
610.91 518.574 610.66 518.809 610.465 519.102 cv
610.27 519.395 610.125 519.734 610.035 520.117 cv
609.938 520.508 609.883 520.91 609.875 521.328 cv
609.992 521.262 610.129 521.195 610.277 521.125 cv
610.426 521.059 610.586 520.996 610.762 520.937 cv
610.938 520.887 611.125 520.84 611.32 520.805 cv
611.516 520.773 611.727 520.758 611.953 520.754 cv
612.43 520.758 612.832 520.824 613.164 520.949 cv
613.492 521.082 613.758 521.262 613.965 521.492 cv
614.164 521.723 614.309 521.992 614.398 522.305 cv
614.484 522.617 614.531 522.957 614.531 523.324 cv
cp
613.336 523.434 mo
613.336 523.172 613.309 522.93 613.258 522.711 cv
613.203 522.496 613.113 522.312 612.992 522.156 cv
612.867 522.008 612.703 521.891 612.5 521.809 cv
612.289 521.727 612.035 521.684 611.738 521.684 cv
611.566 521.684 611.398 521.699 611.23 521.73 cv
611.059 521.762 610.895 521.805 610.738 521.852 cv
610.578 521.906 610.43 521.969 610.289 522.039 cv
610.145 522.113 610.012 522.187 609.895 522.266 cv
609.891 522.859 609.93 523.355 610.008 523.75 cv
610.082 524.148 610.191 524.465 610.336 524.703 cv
610.48 524.945 610.66 525.117 610.875 525.219 cv
611.09 525.324 611.34 525.375 611.629 525.371 cv
611.918 525.375 612.172 525.32 612.387 525.207 cv
612.602 525.102 612.777 524.953 612.922 524.766 cv
613.063 524.582 613.168 524.375 613.234 524.145 cv
613.301 523.914 613.336 523.68 613.336 523.434 cv
cp
f
259.711 543.328 mo
259.707 543.434 259.691 543.523 259.656 543.594 cv
259.621 543.672 259.574 543.73 259.52 543.773 cv
259.461 543.824 259.398 543.859 259.332 543.875 cv
259.258 543.898 259.188 543.906 259.125 543.906 cv
258.68 543.906 li
258.539 543.906 258.418 543.895 258.313 543.863 cv
258.207 543.84 258.109 543.785 258.016 543.707 cv
257.922 543.633 257.828 543.531 257.734 543.398 cv
257.641 543.27 257.539 543.105 257.434 542.902 cv
254.359 537.164 li
254.195 536.871 254.031 536.562 253.871 536.234 cv
253.703 535.914 253.551 535.598 253.414 535.289 cv
253.398 535.289 li
253.406 535.664 253.414 536.047 253.422 536.434 cv
253.426 536.824 253.426 537.211 253.43 537.594 cv
253.43 543.68 li
253.426 543.719 253.414 543.754 253.395 543.785 cv
253.371 543.82 253.336 543.848 253.285 543.863 cv
253.23 543.883 253.16 543.895 253.078 543.91 cv
252.992 543.922 252.887 543.93 252.758 543.93 cv
252.621 543.93 252.512 543.922 252.43 543.91 cv
252.344 543.895 252.277 543.883 252.23 543.863 cv
252.18 543.848 252.145 543.82 252.121 543.785 cv
252.098 543.754 252.086 543.719 252.09 543.68 cv
252.09 534.375 li
252.086 534.168 252.145 534.02 252.266 533.93 cv
252.383 533.844 252.512 533.801 252.652 533.797 cv
253.313 533.797 li
253.465 533.801 253.598 533.812 253.703 533.836 cv
253.805 533.863 253.898 533.906 253.984 533.965 cv
254.066 534.027 254.145 534.109 254.227 534.215 cv
254.301 534.324 254.383 534.461 254.469 534.617 cv
256.836 539.043 li
256.98 539.316 257.121 539.582 257.258 539.836 cv
257.391 540.094 257.52 540.348 257.648 540.594 cv
257.77 540.848 257.895 541.094 258.02 541.332 cv
258.141 541.574 258.262 541.816 258.387 542.059 cv
258.395 542.059 li
258.383 541.652 258.375 541.223 258.375 540.777 cv
258.367 540.332 258.367 539.906 258.371 539.496 cv
258.371 534.023 li
258.367 533.988 258.379 533.953 258.402 533.922 cv
258.426 533.891 258.461 533.863 258.516 533.84 cv
258.563 533.816 258.633 533.801 258.719 533.789 cv
258.805 533.781 258.914 533.777 259.055 533.773 cv
259.172 533.777 259.277 533.781 259.367 533.789 cv
259.453 533.801 259.52 533.816 259.57 533.84 cv
259.617 533.863 259.652 533.891 259.676 533.922 cv
259.695 533.953 259.707 533.988 259.711 534.023 cv
cp
f
268.258 543.687 mo
268.254 543.734 268.246 543.77 268.23 543.793 cv
268.211 543.824 268.176 543.848 268.133 543.867 cv
268.086 543.887 268.027 543.898 267.953 543.914 cv
267.875 543.922 267.781 543.93 267.676 543.93 cv
267.551 543.93 267.453 543.922 267.383 543.914 cv
267.305 543.898 267.246 543.887 267.203 543.867 cv
267.156 543.848 267.125 543.824 267.113 543.793 cv
267.094 543.77 267.086 543.734 267.09 543.687 cv
267.09 542.762 li
266.688 543.207 266.293 543.527 265.906 543.727 cv
265.512 543.93 265.117 544.027 264.723 544.031 cv
264.25 544.027 263.855 543.953 263.539 543.797 cv
263.219 543.645 262.961 543.434 262.766 543.164 cv
262.563 542.898 262.422 542.586 262.34 542.227 cv
262.25 541.871 262.207 541.437 262.211 540.93 cv
262.211 536.676 li
262.207 536.637 262.215 536.602 262.238 536.57 cv
262.254 536.543 262.289 536.52 262.344 536.492 cv
262.391 536.473 262.461 536.457 262.547 536.445 cv
262.629 536.441 262.73 536.437 262.859 536.434 cv
262.98 536.437 263.086 536.441 263.172 536.445 cv
263.254 536.457 263.32 536.473 263.367 536.492 cv
263.414 536.52 263.449 536.543 263.473 536.57 cv
263.492 536.602 263.5 536.637 263.504 536.676 cv
263.504 540.758 li
263.5 541.172 263.531 541.5 263.594 541.746 cv
263.652 541.992 263.742 542.203 263.867 542.375 cv
263.984 542.555 264.141 542.687 264.332 542.781 cv
264.516 542.879 264.734 542.93 264.984 542.926 cv
265.305 542.93 265.625 542.812 265.949 542.582 cv
266.266 542.355 266.605 542.02 266.965 541.574 cv
266.965 536.676 li
266.965 536.637 266.973 536.602 266.992 536.57 cv
267.008 536.543 267.043 536.52 267.098 536.492 cv
267.148 536.473 267.215 536.457 267.297 536.445 cv
267.375 536.441 267.48 536.437 267.613 536.434 cv
267.734 536.437 267.84 536.441 267.926 536.445 cv
268.008 536.457 268.07 536.473 268.117 536.492 cv
268.16 536.52 268.195 536.543 268.223 536.57 cv
268.242 536.602 268.254 536.637 268.258 536.676 cv
cp
f
281.035 543.687 mo
281.031 543.734 281.023 543.77 281.004 543.793 cv
280.98 543.824 280.945 543.848 280.902 543.867 cv
280.852 543.887 280.785 543.898 280.707 543.914 cv
280.621 543.922 280.52 543.93 280.395 543.93 cv
280.262 543.93 280.152 543.922 280.074 543.914 cv
279.988 543.898 279.922 543.887 279.875 543.867 cv
279.82 543.848 279.785 543.824 279.77 543.793 cv
279.746 543.77 279.738 543.734 279.738 543.687 cv
279.738 539.426 li
279.738 539.133 279.711 538.863 279.66 538.617 cv
279.605 538.375 279.523 538.164 279.41 537.984 cv
279.297 537.809 279.152 537.672 278.977 537.578 cv
278.797 537.484 278.586 537.437 278.352 537.437 cv
278.055 537.437 277.758 537.555 277.461 537.781 cv
277.156 538.016 276.828 538.348 276.473 538.785 cv
276.473 543.687 li
276.469 543.734 276.457 543.77 276.441 543.793 cv
276.418 543.824 276.387 543.848 276.34 543.867 cv
276.289 543.887 276.223 543.898 276.141 543.914 cv
276.055 543.922 275.949 543.93 275.828 543.93 cv
275.707 543.93 275.605 543.922 275.52 543.914 cv
275.434 543.898 275.363 543.887 275.316 543.867 cv
275.262 543.848 275.23 543.824 275.215 543.793 cv
275.195 543.77 275.184 543.734 275.188 543.687 cv
275.188 539.426 li
275.184 539.133 275.156 538.863 275.102 538.617 cv
275.043 538.375 274.957 538.164 274.844 537.984 cv
274.73 537.809 274.586 537.672 274.414 537.578 cv
274.234 537.484 274.027 537.437 273.793 537.437 cv
273.492 537.437 273.195 537.555 272.895 537.781 cv
272.594 538.016 272.266 538.348 271.914 538.785 cv
271.914 543.687 li
271.91 543.734 271.898 543.77 271.883 543.793 cv
271.859 543.824 271.828 543.848 271.781 543.867 cv
271.734 543.887 271.668 543.898 271.59 543.914 cv
271.504 543.922 271.398 543.93 271.27 543.93 cv
271.141 543.93 271.035 543.922 270.957 543.914 cv
270.871 543.898 270.805 543.887 270.758 543.867 cv
270.703 543.848 270.672 543.824 270.656 543.793 cv
270.637 543.77 270.625 543.734 270.629 543.687 cv
270.629 536.676 li
270.625 536.637 270.633 536.602 270.652 536.57 cv
270.664 536.543 270.695 536.52 270.746 536.492 cv
270.789 536.473 270.852 536.457 270.926 536.445 cv
270.996 536.441 271.09 536.437 271.215 536.434 cv
271.324 536.437 271.422 536.441 271.5 536.445 cv
271.574 536.457 271.633 536.473 271.676 536.492 cv
271.715 536.52 271.742 536.543 271.762 536.57 cv
271.777 536.602 271.785 536.637 271.789 536.676 cv
271.789 537.602 li
272.18 537.16 272.563 536.84 272.938 536.633 cv
273.305 536.43 273.684 536.324 274.066 536.324 cv
274.355 536.324 274.613 536.359 274.848 536.426 cv
275.074 536.496 275.281 536.59 275.461 536.711 cv
275.637 536.832 275.785 536.977 275.914 537.145 cv
276.035 537.316 276.141 537.508 276.227 537.711 cv
276.457 537.461 276.68 537.246 276.891 537.066 cv
277.102 536.895 277.305 536.75 277.5 536.637 cv
277.695 536.531 277.883 536.453 278.066 536.398 cv
278.25 536.352 278.438 536.324 278.625 536.324 cv
279.078 536.324 279.457 536.406 279.762 536.562 cv
280.066 536.727 280.313 536.937 280.508 537.199 cv
280.695 537.465 280.832 537.773 280.914 538.129 cv
280.992 538.484 281.031 538.859 281.035 539.254 cv
cp
f
289.836 540.086 mo
289.832 540.695 289.766 541.246 289.637 541.73 cv
289.5 542.219 289.305 542.633 289.051 542.973 cv
288.793 543.316 288.477 543.578 288.105 543.758 cv
287.73 543.941 287.305 544.027 286.82 544.031 cv
286.594 544.027 286.387 544.008 286.199 543.965 cv
286.012 543.918 285.824 543.848 285.645 543.75 cv
285.457 543.652 285.277 543.527 285.098 543.375 cv
284.914 543.227 284.723 543.047 284.523 542.832 cv
284.523 543.687 li
284.523 543.734 284.512 543.77 284.492 543.797 cv
284.469 543.832 284.434 543.855 284.391 543.871 cv
284.34 543.887 284.281 543.898 284.215 543.914 cv
284.141 543.922 284.051 543.93 283.945 543.93 cv
283.836 543.93 283.75 543.922 283.68 543.914 cv
283.605 543.898 283.543 543.887 283.5 543.871 cv
283.449 543.855 283.418 543.832 283.406 543.797 cv
283.387 543.77 283.379 543.734 283.383 543.687 cv
283.383 533.277 li
283.379 533.238 283.391 533.203 283.41 533.168 cv
283.426 533.141 283.457 533.113 283.512 533.09 cv
283.559 533.07 283.625 533.055 283.711 533.043 cv
283.789 533.035 283.895 533.031 284.023 533.027 cv
284.152 533.031 284.258 533.035 284.344 533.043 cv
284.422 533.055 284.488 533.07 284.535 533.09 cv
284.582 533.113 284.613 533.141 284.637 533.168 cv
284.652 533.203 284.664 533.238 284.668 533.277 cv
284.668 537.477 li
284.875 537.266 285.078 537.086 285.273 536.941 cv
285.469 536.797 285.656 536.68 285.844 536.586 cv
286.027 536.5 286.215 536.434 286.406 536.387 cv
286.59 536.348 286.789 536.324 287 536.324 cv
287.504 536.324 287.938 536.426 288.305 536.629 cv
288.664 536.832 288.957 537.105 289.184 537.441 cv
289.406 537.785 289.574 538.184 289.68 538.641 cv
289.781 539.098 289.832 539.578 289.836 540.086 cv
cp
288.504 540.234 mo
288.5 539.879 288.473 539.531 288.422 539.191 cv
288.363 538.855 288.27 538.559 288.133 538.297 cv
287.996 538.039 287.816 537.828 287.594 537.668 cv
287.367 537.512 287.086 537.434 286.754 537.43 cv
286.586 537.434 286.422 537.457 286.262 537.5 cv
286.098 537.551 285.934 537.629 285.766 537.734 cv
285.598 537.848 285.422 537.988 285.246 538.156 cv
285.063 538.332 284.871 538.547 284.668 538.801 cv
284.668 541.598 li
285.023 542.031 285.363 542.363 285.688 542.586 cv
286.012 542.816 286.348 542.93 286.699 542.926 cv
287.02 542.93 287.297 542.852 287.531 542.691 cv
287.758 542.539 287.945 542.332 288.09 542.07 cv
288.234 541.816 288.34 541.527 288.406 541.207 cv
288.469 540.891 288.5 540.566 288.504 540.234 cv
cp
f
297.746 539.879 mo
297.742 540.082 297.691 540.223 297.594 540.309 cv
297.488 540.395 297.371 540.437 297.246 540.437 cv
292.629 540.437 li
292.625 540.828 292.664 541.18 292.746 541.492 cv
292.82 541.805 292.953 542.074 293.137 542.293 cv
293.316 542.52 293.551 542.691 293.848 542.809 cv
294.137 542.934 294.496 542.992 294.922 542.988 cv
295.254 542.992 295.551 542.965 295.813 542.906 cv
296.074 542.855 296.301 542.793 296.492 542.723 cv
296.68 542.656 296.836 542.598 296.961 542.539 cv
297.082 542.488 297.176 542.461 297.238 542.457 cv
297.273 542.461 297.305 542.469 297.336 542.484 cv
297.363 542.504 297.387 542.531 297.406 542.566 cv
297.418 542.605 297.43 542.656 297.441 542.719 cv
297.445 542.785 297.449 542.863 297.453 542.957 cv
297.449 543.027 297.445 543.086 297.445 543.133 cv
297.438 543.18 297.434 543.223 297.426 543.262 cv
297.418 543.301 297.402 543.336 297.387 543.367 cv
297.363 543.398 297.34 543.43 297.316 543.457 cv
297.285 543.488 297.203 543.535 297.063 543.598 cv
296.922 543.664 296.738 543.727 296.516 543.789 cv
296.289 543.852 296.031 543.906 295.738 543.957 cv
295.445 544.004 295.133 544.027 294.801 544.031 cv
294.223 544.027 293.715 543.949 293.285 543.789 cv
292.848 543.629 292.484 543.391 292.191 543.074 cv
291.891 542.758 291.668 542.363 291.52 541.883 cv
291.371 541.406 291.297 540.848 291.297 540.211 cv
291.297 539.613 291.371 539.074 291.527 538.59 cv
291.68 538.113 291.906 537.703 292.203 537.367 cv
292.496 537.031 292.852 536.773 293.266 536.594 cv
293.68 536.414 294.145 536.324 294.66 536.324 cv
295.211 536.324 295.68 536.414 296.066 536.59 cv
296.453 536.77 296.77 537.008 297.023 537.305 cv
297.27 537.605 297.453 537.957 297.57 538.355 cv
297.684 538.762 297.742 539.191 297.746 539.645 cv
cp
296.453 539.496 mo
296.469 538.82 296.316 538.289 296 537.906 cv
295.684 537.523 295.215 537.332 294.598 537.328 cv
294.273 537.332 293.992 537.391 293.754 537.508 cv
293.512 537.629 293.313 537.789 293.152 537.984 cv
292.988 538.184 292.863 538.414 292.777 538.676 cv
292.688 538.937 292.637 539.211 292.629 539.496 cv
cp
f
303.813 537.133 mo
303.809 537.25 303.809 537.348 303.805 537.422 cv
303.797 537.504 303.785 537.566 303.773 537.605 cv
303.754 537.652 303.734 537.684 303.715 537.707 cv
303.688 537.73 303.656 537.742 303.617 537.742 cv
303.574 537.742 303.523 537.73 303.465 537.707 cv
303.402 537.684 303.332 537.66 303.262 537.637 cv
303.184 537.613 303.102 537.594 303.008 537.57 cv
302.914 537.555 302.813 537.543 302.703 537.539 cv
302.57 537.543 302.441 537.57 302.32 537.617 cv
302.195 537.672 302.066 537.758 301.93 537.875 cv
301.789 538 301.645 538.156 301.496 538.352 cv
301.344 538.547 301.176 538.789 300.996 539.074 cv
300.996 543.687 li
300.992 543.734 300.98 543.77 300.965 543.793 cv
300.941 543.824 300.91 543.848 300.863 543.867 cv
300.816 543.887 300.75 543.898 300.672 543.914 cv
300.586 543.922 300.48 543.93 300.352 543.93 cv
300.223 543.93 300.117 543.922 300.039 543.914 cv
299.953 543.898 299.887 543.887 299.84 543.867 cv
299.785 543.848 299.754 543.824 299.738 543.793 cv
299.719 543.77 299.707 543.734 299.711 543.687 cv
299.711 536.676 li
299.707 536.637 299.715 536.602 299.734 536.57 cv
299.746 536.543 299.777 536.52 299.828 536.492 cv
299.871 536.473 299.934 536.457 300.008 536.445 cv
300.078 536.441 300.172 536.437 300.297 536.434 cv
300.406 536.437 300.504 536.441 300.582 536.445 cv
300.656 536.457 300.715 536.473 300.758 536.492 cv
300.797 536.52 300.824 536.543 300.844 536.57 cv
300.859 536.602 300.867 536.637 300.871 536.676 cv
300.871 537.695 li
301.059 537.414 301.242 537.187 301.414 537.012 cv
301.582 536.836 301.742 536.695 301.895 536.594 cv
302.043 536.492 302.191 536.422 302.34 536.383 cv
302.488 536.344 302.637 536.324 302.789 536.324 cv
302.855 536.324 302.934 536.328 303.02 536.336 cv
303.105 536.344 303.195 536.359 303.289 536.379 cv
303.383 536.402 303.465 536.426 303.543 536.449 cv
303.613 536.477 303.668 536.504 303.703 536.527 cv
303.73 536.559 303.75 536.582 303.766 536.602 cv
303.773 536.629 303.785 536.66 303.793 536.691 cv
303.801 536.73 303.805 536.781 303.809 536.852 cv
303.809 536.922 303.809 537.016 303.813 537.133 cv
cp
f
315.586 540.102 mo
315.582 540.68 315.508 541.207 315.359 541.684 cv
315.207 542.168 314.98 542.582 314.684 542.926 cv
314.383 543.277 314.008 543.547 313.563 543.738 cv
313.109 543.934 312.59 544.027 312 544.031 cv
311.422 544.027 310.918 543.945 310.492 543.773 cv
310.063 543.605 309.707 543.355 309.422 543.027 cv
309.133 542.699 308.918 542.305 308.781 541.836 cv
308.641 541.371 308.574 540.84 308.574 540.242 cv
308.574 539.676 308.645 539.148 308.793 538.668 cv
308.938 538.187 309.164 537.773 309.465 537.422 cv
309.762 537.074 310.133 536.805 310.582 536.613 cv
311.027 536.422 311.551 536.324 312.148 536.324 cv
312.727 536.324 313.227 536.41 313.656 536.582 cv
314.082 536.754 314.441 537.004 314.727 537.332 cv
315.012 537.66 315.227 538.059 315.371 538.523 cv
315.512 538.992 315.582 539.52 315.586 540.102 cv
cp
314.254 540.187 mo
314.25 539.812 314.215 539.453 314.148 539.113 cv
314.074 538.777 313.957 538.484 313.797 538.227 cv
313.633 537.977 313.414 537.773 313.137 537.621 cv
312.855 537.477 312.508 537.402 312.098 537.398 cv
311.711 537.402 311.383 537.469 311.109 537.602 cv
310.832 537.738 310.605 537.93 310.43 538.176 cv
310.25 538.422 310.117 538.715 310.035 539.051 cv
309.945 539.391 309.902 539.758 309.906 540.156 cv
309.902 540.543 309.938 540.906 310.012 541.242 cv
310.078 541.582 310.195 541.875 310.363 542.125 cv
310.527 542.379 310.75 542.582 311.027 542.727 cv
311.305 542.879 311.652 542.953 312.066 542.949 cv
312.441 542.953 312.77 542.883 313.051 542.746 cv
313.328 542.613 313.555 542.426 313.734 542.176 cv
313.91 541.934 314.039 541.641 314.125 541.305 cv
314.207 540.969 314.25 540.598 314.254 540.187 cv
cp
f
321.316 533.789 mo
321.313 533.891 321.309 533.969 321.301 534.027 cv
321.289 534.09 321.277 534.141 321.266 534.172 cv
321.25 534.211 321.234 534.234 321.215 534.246 cv
321.191 534.262 321.164 534.27 321.137 534.266 cv
321.098 534.27 321.051 534.258 321 534.23 cv
320.941 534.211 320.875 534.184 320.801 534.152 cv
320.719 534.125 320.629 534.098 320.523 534.074 cv
320.414 534.051 320.289 534.039 320.156 534.039 cv
319.961 534.039 319.797 534.07 319.664 534.133 cv
319.523 534.195 319.414 534.293 319.336 534.426 cv
319.25 534.559 319.191 534.73 319.156 534.941 cv
319.117 535.152 319.098 535.41 319.102 535.707 cv
319.102 536.473 li
320.668 536.473 li
320.707 536.477 320.742 536.484 320.773 536.5 cv
320.801 536.52 320.828 536.551 320.852 536.594 cv
320.875 536.641 320.891 536.699 320.906 536.762 cv
320.914 536.832 320.922 536.914 320.926 537.008 cv
320.922 537.199 320.898 537.332 320.855 537.414 cv
320.805 537.5 320.742 537.543 320.668 537.539 cv
319.102 537.539 li
319.102 543.687 li
319.098 543.734 319.09 543.77 319.07 543.793 cv
319.047 543.824 319.012 543.848 318.965 543.867 cv
318.914 543.887 318.848 543.898 318.766 543.914 cv
318.68 543.922 318.574 543.93 318.457 543.93 cv
318.328 543.93 318.227 543.922 318.145 543.914 cv
318.059 543.898 317.992 543.887 317.945 543.867 cv
317.895 543.848 317.859 543.824 317.84 543.793 cv
317.816 543.77 317.805 543.734 317.809 543.687 cv
317.809 537.539 li
316.82 537.539 li
316.734 537.543 316.672 537.5 316.633 537.414 cv
316.59 537.332 316.566 537.199 316.57 537.008 cv
316.566 536.914 316.574 536.832 316.586 536.762 cv
316.594 536.699 316.609 536.641 316.633 536.594 cv
316.652 536.551 316.676 536.52 316.711 536.5 cv
316.738 536.484 316.777 536.477 316.82 536.473 cv
317.809 536.473 li
317.809 535.746 li
317.805 535.262 317.852 534.844 317.945 534.488 cv
318.035 534.141 318.172 533.852 318.359 533.629 cv
318.543 533.406 318.777 533.242 319.066 533.133 cv
319.348 533.027 319.684 532.973 320.07 532.973 cv
320.246 532.973 320.422 532.992 320.598 533.023 cv
320.766 533.062 320.898 533.098 320.996 533.133 cv
321.086 533.176 321.148 533.211 321.184 533.238 cv
321.211 533.273 321.238 533.312 321.262 533.359 cv
321.281 533.41 321.293 533.473 321.305 533.539 cv
321.309 533.613 321.313 533.695 321.316 533.789 cv
cp
f
331.516 541.055 mo
331.512 541.527 331.426 541.949 331.254 542.316 cv
331.078 542.691 330.836 543.004 330.527 543.258 cv
330.219 543.516 329.855 543.707 329.438 543.836 cv
329.016 543.965 328.566 544.027 328.086 544.031 cv
327.746 544.027 327.43 544 327.145 543.945 cv
326.855 543.887 326.602 543.82 326.375 543.734 cv
326.148 543.656 325.957 543.57 325.805 543.477 cv
325.648 543.391 325.543 543.312 325.484 543.25 cv
325.426 543.187 325.383 543.109 325.355 543.016 cv
325.324 542.922 325.309 542.793 325.313 542.629 cv
325.309 542.516 325.313 542.422 325.328 542.344 cv
325.336 542.27 325.352 542.207 325.375 542.16 cv
325.391 542.113 325.418 542.082 325.453 542.062 cv
325.48 542.047 325.516 542.039 325.559 542.035 cv
325.629 542.039 325.73 542.082 325.867 542.168 cv
325.996 542.258 326.168 542.355 326.379 542.457 cv
326.586 542.566 326.836 542.664 327.129 542.75 cv
327.422 542.844 327.762 542.887 328.148 542.887 cv
328.438 542.887 328.703 542.848 328.945 542.77 cv
329.184 542.691 329.391 542.582 329.57 542.437 cv
329.742 542.297 329.879 542.121 329.973 541.91 cv
330.066 541.703 330.113 541.469 330.113 541.203 cv
330.113 540.922 330.047 540.676 329.918 540.469 cv
329.785 540.27 329.613 540.094 329.402 539.937 cv
329.188 539.789 328.945 539.648 328.672 539.516 cv
328.398 539.391 328.117 539.258 327.836 539.125 cv
327.547 538.992 327.27 538.848 327 538.684 cv
326.73 538.527 326.488 538.336 326.277 538.117 cv
326.059 537.898 325.887 537.645 325.758 537.348 cv
325.621 537.059 325.555 536.707 325.559 536.293 cv
325.555 535.875 325.633 535.5 325.789 535.168 cv
325.941 534.84 326.152 534.562 326.43 534.336 cv
326.699 534.117 327.023 533.945 327.402 533.828 cv
327.777 533.711 328.188 533.652 328.625 533.652 cv
328.844 533.652 329.066 533.672 329.297 533.711 cv
329.52 533.75 329.73 533.801 329.934 533.863 cv
330.129 533.93 330.309 534.004 330.469 534.082 cv
330.621 534.164 330.723 534.23 330.777 534.277 cv
330.824 534.332 330.859 534.371 330.875 534.395 cv
330.891 534.426 330.902 534.461 330.914 534.504 cv
330.922 534.551 330.93 534.605 330.938 534.664 cv
330.941 534.73 330.945 534.809 330.945 534.906 cv
330.945 535 330.941 535.086 330.934 535.156 cv
330.926 535.234 330.914 535.293 330.898 535.34 cv
330.883 535.387 330.859 535.422 330.832 535.445 cv
330.801 535.469 330.77 535.48 330.734 535.48 cv
330.676 535.48 330.586 535.445 330.465 535.375 cv
330.34 535.305 330.188 535.223 330.016 535.129 cv
329.836 535.039 329.629 534.957 329.391 534.879 cv
329.145 534.805 328.875 534.766 328.578 534.766 cv
328.297 534.766 328.051 534.805 327.844 534.879 cv
327.633 534.957 327.461 535.059 327.328 535.18 cv
327.191 535.305 327.09 535.449 327.023 535.621 cv
326.957 535.793 326.926 535.977 326.926 536.168 cv
326.926 536.453 326.988 536.695 327.117 536.895 cv
327.246 537.098 327.418 537.277 327.637 537.43 cv
327.848 537.59 328.094 537.73 328.371 537.859 cv
328.645 537.992 328.926 538.125 329.215 538.254 cv
329.5 538.387 329.781 538.531 330.055 538.687 cv
330.328 538.848 330.574 539.035 330.793 539.25 cv
331.008 539.469 331.18 539.723 331.316 540.016 cv
331.445 540.309 331.512 540.656 331.516 541.055 cv
cp
f
339.281 543.687 mo
339.277 543.734 339.27 543.77 339.254 543.793 cv
339.234 543.824 339.199 543.848 339.156 543.867 cv
339.109 543.887 339.051 543.898 338.977 543.914 cv
338.898 543.922 338.805 543.93 338.699 543.93 cv
338.574 543.93 338.477 543.922 338.406 543.914 cv
338.328 543.898 338.27 543.887 338.227 543.867 cv
338.18 543.848 338.148 543.824 338.137 543.793 cv
338.117 543.77 338.109 543.734 338.113 543.687 cv
338.113 542.762 li
337.711 543.207 337.316 543.527 336.93 543.727 cv
336.535 543.93 336.141 544.027 335.746 544.031 cv
335.273 544.027 334.879 543.953 334.563 543.797 cv
334.242 543.645 333.984 543.434 333.789 543.164 cv
333.586 542.898 333.445 542.586 333.363 542.227 cv
333.273 541.871 333.23 541.437 333.234 540.93 cv
333.234 536.676 li
333.23 536.637 333.238 536.602 333.262 536.57 cv
333.277 536.543 333.313 536.52 333.367 536.492 cv
333.414 536.473 333.484 536.457 333.57 536.445 cv
333.652 536.441 333.754 536.437 333.883 536.434 cv
334.004 536.437 334.109 536.441 334.195 536.445 cv
334.277 536.457 334.344 536.473 334.391 536.492 cv
334.438 536.52 334.473 536.543 334.496 536.57 cv
334.516 536.602 334.523 536.637 334.527 536.676 cv
334.527 540.758 li
334.523 541.172 334.555 541.5 334.617 541.746 cv
334.676 541.992 334.766 542.203 334.891 542.375 cv
335.008 542.555 335.164 542.687 335.355 542.781 cv
335.539 542.879 335.758 542.93 336.008 542.926 cv
336.328 542.93 336.648 542.812 336.973 542.582 cv
337.289 542.355 337.629 542.02 337.988 541.574 cv
337.988 536.676 li
337.988 536.637 337.996 536.602 338.016 536.57 cv
338.031 536.543 338.066 536.52 338.121 536.492 cv
338.172 536.473 338.238 536.457 338.32 536.445 cv
338.398 536.441 338.504 536.437 338.637 536.434 cv
338.758 536.437 338.863 536.441 338.949 536.445 cv
339.031 536.457 339.094 536.473 339.141 536.492 cv
339.184 536.52 339.219 536.543 339.246 536.57 cv
339.266 536.602 339.277 536.637 339.281 536.676 cv
cp
f
348.137 540.086 mo
348.133 540.695 348.066 541.246 347.938 541.73 cv
347.801 542.219 347.605 542.633 347.352 542.973 cv
347.094 543.316 346.777 543.578 346.406 543.758 cv
346.031 543.941 345.605 544.027 345.121 544.031 cv
344.895 544.027 344.688 544.008 344.5 543.965 cv
344.313 543.918 344.125 543.848 343.945 543.75 cv
343.758 543.652 343.578 543.527 343.398 543.375 cv
343.215 543.227 343.023 543.047 342.824 542.832 cv
342.824 543.687 li
342.824 543.734 342.813 543.77 342.793 543.797 cv
342.77 543.832 342.734 543.855 342.691 543.871 cv
342.641 543.887 342.582 543.898 342.516 543.914 cv
342.441 543.922 342.352 543.93 342.246 543.93 cv
342.137 543.93 342.051 543.922 341.98 543.914 cv
341.906 543.898 341.844 543.887 341.801 543.871 cv
341.75 543.855 341.719 543.832 341.707 543.797 cv
341.688 543.77 341.68 543.734 341.684 543.687 cv
341.684 533.277 li
341.68 533.238 341.691 533.203 341.711 533.168 cv
341.727 533.141 341.758 533.113 341.813 533.09 cv
341.859 533.07 341.926 533.055 342.012 533.043 cv
342.09 533.035 342.195 533.031 342.324 533.027 cv
342.453 533.031 342.559 533.035 342.645 533.043 cv
342.723 533.055 342.789 533.07 342.836 533.09 cv
342.883 533.113 342.914 533.141 342.938 533.168 cv
342.953 533.203 342.965 533.238 342.969 533.277 cv
342.969 537.477 li
343.176 537.266 343.379 537.086 343.574 536.941 cv
343.77 536.797 343.957 536.68 344.145 536.586 cv
344.328 536.5 344.516 536.434 344.707 536.387 cv
344.891 536.348 345.09 536.324 345.301 536.324 cv
345.805 536.324 346.238 536.426 346.605 536.629 cv
346.965 536.832 347.258 537.105 347.484 537.441 cv
347.707 537.785 347.875 538.184 347.98 538.641 cv
348.082 539.098 348.133 539.578 348.137 540.086 cv
cp
346.805 540.234 mo
346.801 539.879 346.773 539.531 346.723 539.191 cv
346.664 538.855 346.57 538.559 346.434 538.297 cv
346.297 538.039 346.117 537.828 345.895 537.668 cv
345.668 537.512 345.387 537.434 345.055 537.43 cv
344.887 537.434 344.723 537.457 344.563 537.5 cv
344.398 537.551 344.234 537.629 344.066 537.734 cv
343.898 537.848 343.723 537.988 343.547 538.156 cv
343.363 538.332 343.172 538.547 342.969 538.801 cv
342.969 541.598 li
343.324 542.031 343.664 542.363 343.988 542.586 cv
344.313 542.816 344.648 542.93 345 542.926 cv
345.32 542.93 345.598 542.852 345.832 542.691 cv
346.059 542.539 346.246 542.332 346.391 542.07 cv
346.535 541.816 346.641 541.527 346.707 541.207 cv
346.77 540.891 346.801 540.566 346.805 540.234 cv
cp
f
353.289 539.949 mo
353.289 540.152 353.266 540.289 353.219 540.367 cv
353.172 540.445 353.102 540.484 353.016 540.484 cv
349.758 540.484 li
349.664 540.484 349.598 540.445 349.551 540.363 cv
349.504 540.285 349.48 540.148 349.48 539.949 cv
349.48 539.754 349.504 539.613 349.551 539.535 cv
349.598 539.457 349.664 539.418 349.758 539.418 cv
353.016 539.418 li
353.055 539.418 353.094 539.426 353.129 539.441 cv
353.16 539.457 353.188 539.488 353.215 539.531 cv
353.234 539.578 353.254 539.633 353.27 539.699 cv
353.281 539.77 353.289 539.855 353.289 539.949 cv
cp
f
356.539 543.68 mo
356.535 543.723 356.527 543.758 356.508 543.789 cv
356.484 543.82 356.445 543.848 356.398 543.863 cv
356.344 543.883 356.277 543.895 356.191 543.91 cv
356.105 543.922 355.996 543.93 355.871 543.93 cv
355.742 543.93 355.637 543.922 355.551 543.91 cv
355.461 543.895 355.391 543.883 355.34 543.863 cv
355.285 543.848 355.25 543.82 355.23 543.789 cv
355.207 543.758 355.195 543.723 355.199 543.68 cv
355.199 534 li
355.195 533.961 355.207 533.926 355.234 533.891 cv
355.254 533.863 355.293 533.836 355.352 533.816 cv
355.402 533.801 355.473 533.785 355.563 533.77 cv
355.645 533.758 355.746 533.754 355.871 533.75 cv
355.996 533.754 356.105 533.758 356.191 533.77 cv
356.277 533.785 356.344 533.801 356.398 533.816 cv
356.445 533.836 356.484 533.863 356.508 533.891 cv
356.527 533.926 356.535 533.961 356.539 534 cv
cp
f
369.527 543.687 mo
369.523 543.734 369.516 543.77 369.496 543.793 cv
369.473 543.824 369.438 543.848 369.395 543.867 cv
369.344 543.887 369.277 543.898 369.199 543.914 cv
369.113 543.922 369.012 543.93 368.887 543.93 cv
368.754 543.93 368.645 543.922 368.566 543.914 cv
368.48 543.898 368.414 543.887 368.367 543.867 cv
368.313 543.848 368.277 543.824 368.262 543.793 cv
368.238 543.77 368.23 543.734 368.23 543.687 cv
368.23 539.426 li
368.23 539.133 368.203 538.863 368.152 538.617 cv
368.098 538.375 368.016 538.164 367.902 537.984 cv
367.789 537.809 367.645 537.672 367.469 537.578 cv
367.289 537.484 367.078 537.437 366.844 537.437 cv
366.547 537.437 366.25 537.555 365.953 537.781 cv
365.648 538.016 365.32 538.348 364.965 538.785 cv
364.965 543.687 li
364.961 543.734 364.949 543.77 364.934 543.793 cv
364.91 543.824 364.879 543.848 364.832 543.867 cv
364.781 543.887 364.715 543.898 364.633 543.914 cv
364.547 543.922 364.441 543.93 364.32 543.93 cv
364.199 543.93 364.098 543.922 364.012 543.914 cv
363.926 543.898 363.855 543.887 363.809 543.867 cv
363.754 543.848 363.723 543.824 363.707 543.793 cv
363.688 543.77 363.676 543.734 363.68 543.687 cv
363.68 539.426 li
363.676 539.133 363.648 538.863 363.594 538.617 cv
363.535 538.375 363.449 538.164 363.336 537.984 cv
363.223 537.809 363.078 537.672 362.906 537.578 cv
362.727 537.484 362.52 537.437 362.285 537.437 cv
361.984 537.437 361.688 537.555 361.387 537.781 cv
361.086 538.016 360.758 538.348 360.406 538.785 cv
360.406 543.687 li
360.402 543.734 360.391 543.77 360.375 543.793 cv
360.352 543.824 360.32 543.848 360.273 543.867 cv
360.227 543.887 360.16 543.898 360.082 543.914 cv
359.996 543.922 359.891 543.93 359.762 543.93 cv
359.633 543.93 359.527 543.922 359.449 543.914 cv
359.363 543.898 359.297 543.887 359.25 543.867 cv
359.195 543.848 359.164 543.824 359.148 543.793 cv
359.129 543.77 359.117 543.734 359.121 543.687 cv
359.121 536.676 li
359.117 536.637 359.125 536.602 359.145 536.57 cv
359.156 536.543 359.188 536.52 359.238 536.492 cv
359.281 536.473 359.344 536.457 359.418 536.445 cv
359.488 536.441 359.582 536.437 359.707 536.434 cv
359.816 536.437 359.914 536.441 359.992 536.445 cv
360.066 536.457 360.125 536.473 360.168 536.492 cv
360.207 536.52 360.234 536.543 360.254 536.57 cv
360.27 536.602 360.277 536.637 360.281 536.676 cv
360.281 537.602 li
360.672 537.16 361.055 536.84 361.43 536.633 cv
361.797 536.43 362.176 536.324 362.559 536.324 cv
362.848 536.324 363.105 536.359 363.34 536.426 cv
363.566 536.496 363.773 536.59 363.953 536.711 cv
364.129 536.832 364.277 536.977 364.406 537.145 cv
364.527 537.316 364.633 537.508 364.719 537.711 cv
364.949 537.461 365.172 537.246 365.383 537.066 cv
365.594 536.895 365.797 536.75 365.992 536.637 cv
366.188 536.531 366.375 536.453 366.559 536.398 cv
366.742 536.352 366.93 536.324 367.117 536.324 cv
367.57 536.324 367.949 536.406 368.254 536.562 cv
368.559 536.727 368.805 536.937 369 537.199 cv
369.188 537.465 369.324 537.773 369.406 538.129 cv
369.484 538.484 369.523 538.859 369.527 539.254 cv
cp
f
377.16 543.695 mo
377.156 543.758 377.137 543.805 377.098 543.836 cv
377.055 543.867 376.996 543.891 376.926 543.906 cv
376.848 543.922 376.742 543.93 376.605 543.93 cv
376.469 543.93 376.359 543.922 376.281 543.906 cv
376.195 543.891 376.137 543.867 376.105 543.836 cv
376.066 543.805 376.051 543.758 376.055 543.695 cv
376.055 542.996 li
375.746 543.324 375.402 543.578 375.027 543.758 cv
374.648 543.941 374.25 544.027 373.832 544.031 cv
373.457 544.027 373.125 543.98 372.828 543.887 cv
372.531 543.789 372.277 543.652 372.066 543.469 cv
371.855 543.289 371.691 543.066 371.574 542.801 cv
371.457 542.539 371.398 542.238 371.402 541.895 cv
371.398 541.504 371.477 541.16 371.641 540.867 cv
371.797 540.578 372.031 540.336 372.336 540.145 cv
372.637 539.953 373.004 539.809 373.441 539.711 cv
373.875 539.617 374.367 539.57 374.914 539.566 cv
375.883 539.566 li
375.883 539.02 li
375.879 538.75 375.852 538.512 375.797 538.305 cv
375.738 538.098 375.645 537.926 375.52 537.785 cv
375.387 537.648 375.223 537.543 375.023 537.473 cv
374.816 537.402 374.566 537.367 374.277 537.367 cv
373.957 537.367 373.672 537.406 373.422 537.48 cv
373.164 537.559 372.945 537.641 372.758 537.73 cv
372.57 537.824 372.41 537.91 372.285 537.98 cv
372.152 538.059 372.059 538.094 372 538.094 cv
371.957 538.094 371.922 538.086 371.891 538.062 cv
371.859 538.047 371.832 538.016 371.809 537.969 cv
371.785 537.93 371.766 537.875 371.758 537.809 cv
371.742 537.746 371.738 537.676 371.742 537.594 cv
371.738 537.469 371.746 537.363 371.77 537.285 cv
371.785 537.211 371.832 537.141 371.902 537.07 cv
371.973 537.004 372.094 536.926 372.266 536.836 cv
372.438 536.746 372.633 536.664 372.855 536.586 cv
373.078 536.516 373.324 536.453 373.59 536.398 cv
373.855 536.352 374.121 536.324 374.395 536.324 cv
374.895 536.324 375.324 536.383 375.676 536.496 cv
376.027 536.613 376.313 536.781 376.535 537 cv
376.75 537.223 376.91 537.496 377.012 537.82 cv
377.109 538.152 377.156 538.535 377.16 538.965 cv
cp
375.883 540.492 mo
374.781 540.492 li
374.426 540.496 374.121 540.527 373.863 540.582 cv
373.602 540.645 373.387 540.73 373.215 540.848 cv
373.043 540.965 372.918 541.105 372.84 541.27 cv
372.758 541.434 372.715 541.621 372.719 541.832 cv
372.715 542.199 372.832 542.492 373.063 542.703 cv
373.293 542.922 373.617 543.027 374.035 543.027 cv
374.371 543.027 374.684 542.941 374.973 542.77 cv
375.262 542.598 375.563 542.336 375.883 541.98 cv
cp
f
385.379 536.992 mo
385.375 537.176 385.352 537.309 385.305 537.387 cv
385.254 537.469 385.191 537.508 385.117 537.508 cv
384.109 537.508 li
384.289 537.695 384.418 537.902 384.492 538.129 cv
384.563 538.355 384.598 538.59 384.602 538.832 cv
384.598 539.238 384.531 539.598 384.406 539.91 cv
384.273 540.223 384.09 540.488 383.848 540.699 cv
383.605 540.918 383.316 541.082 382.988 541.195 cv
382.652 541.312 382.285 541.371 381.883 541.367 cv
381.594 541.371 381.32 541.332 381.066 541.254 cv
380.805 541.18 380.609 541.086 380.473 540.969 cv
380.379 541.066 380.301 541.172 380.242 541.289 cv
380.18 541.41 380.148 541.547 380.152 541.699 cv
380.148 541.883 380.234 542.035 380.406 542.152 cv
380.574 542.277 380.797 542.34 381.078 542.348 cv
382.91 542.426 li
383.258 542.437 383.574 542.484 383.867 542.57 cv
384.156 542.656 384.41 542.781 384.625 542.937 cv
384.836 543.098 385.004 543.289 385.125 543.52 cv
385.242 543.754 385.301 544.023 385.305 544.328 cv
385.301 544.648 385.234 544.953 385.102 545.246 cv
384.965 545.535 384.758 545.789 384.48 546.012 cv
384.199 546.23 383.844 546.406 383.414 546.535 cv
382.984 546.66 382.477 546.723 381.891 546.727 cv
381.32 546.723 380.836 546.676 380.441 546.582 cv
380.043 546.484 379.719 546.352 379.465 546.187 cv
379.211 546.02 379.027 545.824 378.914 545.594 cv
378.797 545.359 378.738 545.105 378.742 544.84 cv
378.738 544.668 378.758 544.504 378.805 544.344 cv
378.844 544.18 378.906 544.027 378.992 543.883 cv
379.074 543.738 379.184 543.602 379.313 543.465 cv
379.438 543.336 379.582 543.203 379.754 543.074 cv
379.496 542.945 379.309 542.781 379.188 542.582 cv
379.066 542.387 379.008 542.176 379.008 541.941 cv
379.008 541.629 379.07 541.344 379.199 541.094 cv
379.328 540.844 379.488 540.621 379.684 540.422 cv
379.52 540.23 379.395 540.016 379.301 539.773 cv
379.207 539.535 379.16 539.242 379.16 538.895 cv
379.16 538.5 379.227 538.141 379.363 537.82 cv
379.496 537.504 379.684 537.238 379.926 537.02 cv
380.164 536.805 380.449 536.637 380.785 536.516 cv
381.117 536.402 381.484 536.344 381.883 536.34 cv
382.094 536.344 382.293 536.355 382.477 536.375 cv
382.66 536.402 382.832 536.434 382.996 536.473 cv
385.117 536.473 li
385.203 536.477 385.27 536.52 385.313 536.602 cv
385.355 536.691 385.375 536.82 385.379 536.992 cv
cp
383.371 538.84 mo
383.367 538.367 383.234 537.996 382.977 537.723 cv
382.711 537.457 382.34 537.32 381.859 537.32 cv
381.605 537.32 381.387 537.363 381.207 537.445 cv
381.02 537.531 380.867 537.645 380.746 537.789 cv
380.625 537.937 380.535 538.105 380.477 538.293 cv
380.414 538.48 380.383 538.68 380.387 538.887 cv
380.383 539.352 380.516 539.715 380.777 539.98 cv
381.039 540.246 381.406 540.379 381.883 540.375 cv
382.133 540.379 382.352 540.34 382.543 540.254 cv
382.727 540.176 382.883 540.062 383.008 539.922 cv
383.129 539.781 383.219 539.617 383.281 539.426 cv
383.336 539.242 383.367 539.047 383.371 538.84 cv
cp
384.016 544.398 mo
384.012 544.094 383.887 543.863 383.645 543.699 cv
383.395 543.539 383.063 543.449 382.645 543.437 cv
380.828 543.375 li
380.66 543.508 380.523 543.633 380.422 543.746 cv
380.313 543.863 380.23 543.973 380.168 544.082 cv
380.105 544.187 380.063 544.293 380.039 544.398 cv
380.016 544.5 380.004 544.605 380.004 544.715 cv
380.004 545.051 380.172 545.305 380.516 545.484 cv
380.855 545.656 381.336 545.746 381.953 545.746 cv
382.34 545.746 382.664 545.707 382.93 545.633 cv
383.188 545.555 383.398 545.453 383.563 545.332 cv
383.719 545.203 383.836 545.062 383.91 544.902 cv
383.977 544.742 384.012 544.574 384.016 544.398 cv
cp
f
392.973 539.879 mo
392.969 540.082 392.918 540.223 392.82 540.309 cv
392.715 540.395 392.598 540.437 392.473 540.437 cv
387.855 540.437 li
387.852 540.828 387.891 541.18 387.973 541.492 cv
388.047 541.805 388.18 542.074 388.363 542.293 cv
388.543 542.52 388.777 542.691 389.074 542.809 cv
389.363 542.934 389.723 542.992 390.148 542.988 cv
390.48 542.992 390.777 542.965 391.039 542.906 cv
391.301 542.855 391.527 542.793 391.719 542.723 cv
391.906 542.656 392.063 542.598 392.188 542.539 cv
392.309 542.488 392.402 542.461 392.465 542.457 cv
392.5 542.461 392.531 542.469 392.563 542.484 cv
392.59 542.504 392.613 542.531 392.633 542.566 cv
392.645 542.605 392.656 542.656 392.668 542.719 cv
392.672 542.785 392.676 542.863 392.68 542.957 cv
392.676 543.027 392.672 543.086 392.672 543.133 cv
392.664 543.18 392.66 543.223 392.652 543.262 cv
392.645 543.301 392.629 543.336 392.613 543.367 cv
392.59 543.398 392.566 543.43 392.543 543.457 cv
392.512 543.488 392.43 543.535 392.289 543.598 cv
392.148 543.664 391.965 543.727 391.742 543.789 cv
391.516 543.852 391.258 543.906 390.965 543.957 cv
390.672 544.004 390.359 544.027 390.027 544.031 cv
389.449 544.027 388.941 543.949 388.512 543.789 cv
388.074 543.629 387.711 543.391 387.418 543.074 cv
387.117 542.758 386.895 542.363 386.746 541.883 cv
386.598 541.406 386.523 540.848 386.523 540.211 cv
386.523 539.613 386.598 539.074 386.754 538.59 cv
386.906 538.113 387.133 537.703 387.43 537.367 cv
387.723 537.031 388.078 536.773 388.492 536.594 cv
388.906 536.414 389.371 536.324 389.887 536.324 cv
390.438 536.324 390.906 536.414 391.293 536.59 cv
391.68 536.77 391.996 537.008 392.25 537.305 cv
392.496 537.605 392.68 537.957 392.797 538.355 cv
392.91 538.762 392.969 539.191 392.973 539.645 cv
cp
391.68 539.496 mo
391.695 538.82 391.543 538.289 391.227 537.906 cv
390.91 537.523 390.441 537.332 389.824 537.328 cv
389.5 537.332 389.219 537.391 388.98 537.508 cv
388.738 537.629 388.539 537.789 388.379 537.984 cv
388.215 538.184 388.09 538.414 388.004 538.676 cv
387.914 538.937 387.863 539.211 387.855 539.496 cv
cp
f
399.336 541.777 mo
399.332 542.141 399.266 542.461 399.137 542.738 cv
399.004 543.02 398.816 543.254 398.574 543.445 cv
398.328 543.641 398.035 543.785 397.699 543.883 cv
397.359 543.98 396.988 544.027 396.586 544.031 cv
396.332 544.027 396.094 544.008 395.871 543.973 cv
395.645 543.93 395.445 543.883 395.266 543.824 cv
395.086 543.766 394.934 543.703 394.809 543.637 cv
394.684 543.574 394.59 543.516 394.535 543.461 cv
394.477 543.41 394.438 543.34 394.414 543.242 cv
394.387 543.152 394.375 543.023 394.375 542.863 cv
394.375 542.766 394.379 542.684 394.391 542.613 cv
394.398 542.547 394.41 542.492 394.43 542.449 cv
394.441 542.41 394.465 542.379 394.492 542.359 cv
394.52 542.344 394.551 542.336 394.59 542.332 cv
394.645 542.336 394.73 542.371 394.844 542.437 cv
394.953 542.512 395.09 542.59 395.258 542.668 cv
395.418 542.754 395.609 542.828 395.836 542.898 cv
396.055 542.969 396.313 543.004 396.609 543.004 cv
396.824 543.004 397.023 542.98 397.203 542.934 cv
397.379 542.887 397.531 542.82 397.66 542.727 cv
397.789 542.641 397.891 542.523 397.961 542.379 cv
398.031 542.242 398.066 542.074 398.066 541.879 cv
398.066 541.684 398.016 541.52 397.914 541.383 cv
397.813 541.25 397.676 541.129 397.512 541.023 cv
397.344 540.922 397.16 540.832 396.953 540.746 cv
396.742 540.668 396.527 540.582 396.309 540.492 cv
396.09 540.406 395.875 540.305 395.664 540.191 cv
395.453 540.082 395.262 539.949 395.098 539.785 cv
394.926 539.629 394.793 539.434 394.695 539.207 cv
394.59 538.984 394.539 538.719 394.543 538.406 cv
394.539 538.133 394.594 537.867 394.703 537.613 cv
394.809 537.363 394.969 537.145 395.184 536.953 cv
395.395 536.766 395.66 536.613 395.98 536.496 cv
396.301 536.383 396.672 536.324 397.102 536.324 cv
397.285 536.324 397.473 536.34 397.66 536.371 cv
397.844 536.402 398.012 536.441 398.168 536.488 cv
398.316 536.535 398.445 536.586 398.555 536.641 cv
398.656 536.695 398.738 536.746 398.797 536.785 cv
398.848 536.832 398.883 536.867 398.906 536.895 cv
398.922 536.926 398.938 536.961 398.945 536.996 cv
398.953 537.039 398.961 537.086 398.969 537.141 cv
398.977 537.199 398.98 537.27 398.98 537.352 cv
398.98 537.441 398.977 537.52 398.969 537.582 cv
398.961 537.652 398.945 537.703 398.93 537.742 cv
398.906 537.785 398.887 537.816 398.863 537.832 cv
398.836 537.852 398.805 537.859 398.777 537.859 cv
398.727 537.859 398.66 537.832 398.574 537.773 cv
398.484 537.719 398.371 537.656 398.23 537.59 cv
398.09 537.527 397.922 537.469 397.734 537.406 cv
397.543 537.352 397.328 537.32 397.086 537.32 cv
396.863 537.32 396.672 537.348 396.508 537.395 cv
396.34 537.449 396.203 537.52 396.098 537.605 cv
395.992 537.699 395.91 537.805 395.859 537.93 cv
395.801 538.055 395.773 538.191 395.777 538.336 cv
395.773 538.539 395.824 538.707 395.93 538.844 cv
396.031 538.984 396.168 539.105 396.336 539.207 cv
396.5 539.312 396.691 539.406 396.906 539.488 cv
397.117 539.574 397.332 539.66 397.555 539.746 cv
397.773 539.836 397.992 539.937 398.211 540.043 cv
398.426 540.152 398.617 540.281 398.785 540.437 cv
398.949 540.594 399.082 540.781 399.184 541 cv
399.281 541.219 399.332 541.48 399.336 541.777 cv
cp
f
122.203 7.88702 mo
122.199 8.41803 122.102 8.883 121.906 9.28101 cv
121.707 9.68402 121.441 10.02 121.105 10.285 cv
120.766 10.555 120.367 10.754 119.918 10.887 cv
119.465 11.02 118.984 11.086 118.473 11.09 cv
118.121 11.086 117.797 11.059 117.5 11.004 cv
117.199 10.945 116.938 10.879 116.711 10.797 cv
116.48 10.719 116.289 10.633 116.137 10.543 cv
115.984 10.457 115.875 10.379 115.809 10.309 cv
115.738 10.242 115.688 10.145 115.664 10.02 cv
115.633 9.89502 115.621 9.711 115.621 9.46899 cv
115.621 9.30902 115.625 9.17603 115.637 9.06201 cv
115.645 8.95697 115.66 8.867 115.688 8.797 cv
115.707 8.72998 115.738 8.68402 115.781 8.65198 cv
115.816 8.62903 115.863 8.61298 115.914 8.60901 cv
115.984 8.61298 116.086 8.65601 116.223 8.73798 cv
116.352 8.828 116.523 8.922 116.734 9.02301 cv
116.941 9.12903 117.188 9.22699 117.477 9.30902 cv
117.762 9.39801 118.098 9.44098 118.48 9.43701 cv
118.73 9.44098 118.953 9.40997 119.148 9.34802 cv
119.344 9.289 119.512 9.203 119.652 9.09399 cv
119.789 8.98401 119.895 8.85199 119.969 8.69098 cv
120.039 8.53101 120.074 8.35199 120.078 8.15198 cv
120.074 7.92603 120.012 7.72998 119.891 7.56201 cv
119.762 7.40198 119.598 7.258 119.402 7.12903 cv
119.199 7.00403 118.973 6.883 118.719 6.77002 cv
118.465 6.65997 118.203 6.54303 117.934 6.414 cv
117.66 6.29303 117.398 6.14801 117.145 5.98798 cv
116.891 5.83197 116.664 5.64502 116.465 5.422 cv
116.262 5.203 116.098 4.94098 115.977 4.63702 cv
115.852 4.336 115.789 3.97699 115.793 3.55499 cv
115.789 3.07397 115.879 2.64801 116.059 2.28101 cv
116.234 1.91803 116.477 1.61298 116.785 1.367 cv
117.086 1.12903 117.445 .948975 117.859 .828003 cv
118.273 .710999 118.711 .651978 119.172 .64801 cv
119.41 .651978 119.648 .66803 119.891 .703003 cv
120.129 .742004 120.352 .79303 120.559 .85199 cv
120.766 .914001 120.949 .984009 121.113 1.05902 cv
121.27 1.14099 121.379 1.203 121.434 1.25403 cv
121.484 1.30902 121.52 1.35498 121.539 1.38702 cv
121.555 1.42603 121.57 1.47302 121.586 1.53101 cv
121.598 1.59399 121.605 1.66803 121.613 1.758 cv
121.617 1.85199 121.621 1.96503 121.621 2.09802 cv
121.621 2.25 121.617 2.37903 121.609 2.47998 cv
121.602 2.586 121.586 2.672 121.57 2.73401 cv
121.547 2.80499 121.523 2.85199 121.492 2.883 cv
121.457 2.914 121.41 2.92999 121.355 2.92999 cv
121.297 2.92999 121.207 2.89502 121.082 2.82001 cv
120.957 2.75 120.801 2.672 120.621 2.58197 cv
120.438 2.5 120.23 2.422 119.992 2.35199 cv
119.75 2.28497 119.484 2.25 119.203 2.24597 cv
118.977 2.25 118.785 2.27698 118.621 2.328 cv
118.453 2.383 118.313 2.45697 118.203 2.55103 cv
118.09 2.64801 118.008 2.76599 117.953 2.89801 cv
117.898 3.039 117.871 3.17999 117.871 3.328 cv
117.871 3.55499 117.93 3.75 118.055 3.90997 cv
118.172 4.07397 118.336 4.21899 118.547 4.34399 cv
118.75 4.47302 118.984 4.59399 119.242 4.703 cv
119.5 4.82001 119.766 4.93701 120.039 5.05902 cv
120.309 5.18701 120.57 5.328 120.832 5.48401 cv
121.09 5.64099 121.324 5.83197 121.527 6.05103 cv
121.73 6.27698 121.891 6.53497 122.016 6.83197 cv
122.137 7.12903 122.199 7.47998 122.203 7.88702 cv
cp
f
128.922 9.539 mo
128.918 9.67603 128.914 9.789 128.91 9.87903 cv
128.898 9.97302 128.891 10.051 128.879 10.109 cv
128.863 10.172 128.848 10.223 128.832 10.258 cv
128.813 10.301 128.77 10.348 128.711 10.406 cv
128.645 10.469 128.539 10.543 128.391 10.625 cv
128.238 10.715 128.066 10.793 127.875 10.855 cv
127.684 10.926 127.477 10.977 127.25 11.02 cv
127.023 11.059 126.789 11.078 126.555 11.082 cv
126.016 11.078 125.543 11 125.129 10.832 cv
124.715 10.668 124.367 10.422 124.09 10.098 cv
123.805 9.77301 123.594 9.37903 123.453 8.90997 cv
123.313 8.44501 123.242 7.90601 123.242 7.30103 cv
123.242 6.60498 123.328 6.008 123.5 5.5 cv
123.672 4.99597 123.914 4.57397 124.23 4.242 cv
124.539 3.90997 124.906 3.664 125.336 3.5 cv
125.758 3.34003 126.227 3.258 126.738 3.258 cv
126.945 3.258 127.148 3.27698 127.352 3.31201 cv
127.547 3.35199 127.734 3.40198 127.91 3.461 cv
128.082 3.52698 128.238 3.59802 128.379 3.672 cv
128.516 3.75403 128.613 3.82001 128.672 3.875 cv
128.727 3.93402 128.766 3.97998 128.793 4.01599 cv
128.813 4.05902 128.832 4.10901 128.848 4.16803 cv
128.859 4.23401 128.871 4.31201 128.879 4.39801 cv
128.887 4.492 128.891 4.60199 128.891 4.72998 cv
128.891 5.03497 128.863 5.24597 128.813 5.367 cv
128.758 5.48798 128.691 5.55103 128.609 5.547 cv
128.52 5.55103 128.426 5.51599 128.328 5.44098 cv
128.227 5.37097 128.109 5.289 127.977 5.19897 cv
127.844 5.11298 127.684 5.03101 127.496 4.95697 cv
127.309 4.88702 127.082 4.85199 126.824 4.84802 cv
126.313 4.85199 125.926 5.047 125.656 5.43701 cv
125.383 5.828 125.246 6.40198 125.25 7.15997 cv
125.246 7.53497 125.281 7.867 125.352 8.15198 cv
125.418 8.43701 125.516 8.67603 125.652 8.867 cv
125.781 9.06201 125.949 9.20697 126.152 9.30103 cv
126.352 9.39801 126.582 9.44501 126.848 9.44501 cv
127.113 9.44501 127.348 9.40601 127.547 9.32397 cv
127.738 9.24597 127.906 9.15601 128.055 9.05499 cv
128.195 8.95697 128.32 8.867 128.422 8.78497 cv
128.52 8.70697 128.602 8.66803 128.672 8.664 cv
128.715 8.66803 128.754 8.67999 128.789 8.703 cv
128.816 8.72998 128.84 8.77698 128.863 8.84802 cv
128.879 8.91803 128.895 9.008 128.906 9.117 cv
128.914 9.22699 128.918 9.367 128.922 9.539 cv
cp
f
136.191 10.668 mo
136.188 10.746 136.16 10.801 136.113 10.84 cv
136.059 10.883 135.977 10.91 135.867 10.93 cv
135.75 10.945 135.586 10.957 135.371 10.957 cv
135.133 10.957 134.961 10.945 134.859 10.93 cv
134.75 10.91 134.676 10.883 134.637 10.84 cv
134.59 10.801 134.57 10.746 134.57 10.668 cv
134.57 10.117 li
134.281 10.426 133.953 10.664 133.59 10.832 cv
133.223 11.004 132.816 11.086 132.371 11.09 cv
132 11.086 131.66 11.039 131.352 10.945 cv
131.043 10.852 130.777 10.711 130.551 10.516 cv
130.324 10.328 130.148 10.094 130.023 9.81201 cv
129.898 9.53497 129.836 9.20697 129.84 8.828 cv
129.836 8.42999 129.914 8.078 130.074 7.77301 cv
130.23 7.47699 130.469 7.22998 130.785 7.03497 cv
131.098 6.84399 131.488 6.69897 131.957 6.60199 cv
132.426 6.51202 132.969 6.46503 133.586 6.461 cv
134.266 6.461 li
134.266 6.039 li
134.266 5.82397 134.242 5.633 134.199 5.46899 cv
134.152 5.30902 134.078 5.172 133.98 5.05902 cv
133.875 4.953 133.742 4.87097 133.574 4.81598 cv
133.402 4.76599 133.191 4.742 132.949 4.73798 cv
132.617 4.742 132.324 4.77698 132.07 4.84802 cv
131.809 4.922 131.582 5.00403 131.387 5.09003 cv
131.188 5.18402 131.023 5.26202 130.895 5.33197 cv
130.758 5.40601 130.648 5.44501 130.57 5.44098 cv
130.508 5.44501 130.457 5.42603 130.418 5.38702 cv
130.371 5.35199 130.336 5.30103 130.309 5.22998 cv
130.277 5.16803 130.254 5.08197 130.242 4.97998 cv
130.223 4.883 130.215 4.77301 130.219 4.65198 cv
130.215 4.492 130.23 4.367 130.258 4.27002 cv
130.281 4.17999 130.328 4.09399 130.406 4.01599 cv
130.477 3.94098 130.605 3.85901 130.789 3.77002 cv
130.969 3.67999 131.18 3.59399 131.426 3.51599 cv
131.668 3.43701 131.938 3.375 132.227 3.32397 cv
132.516 3.27698 132.813 3.25403 133.121 3.25 cv
133.664 3.25403 134.129 3.30499 134.516 3.40997 cv
134.902 3.52002 135.223 3.68402 135.473 3.90198 cv
135.723 4.12097 135.902 4.40601 136.02 4.75403 cv
136.129 5.10498 136.188 5.52002 136.191 5.992 cv
cp
134.266 7.69098 mo
133.516 7.69098 li
133.199 7.69501 132.93 7.71899 132.707 7.76202 cv
132.48 7.81201 132.297 7.883 132.16 7.97302 cv
132.016 8.07001 131.914 8.18402 131.852 8.31201 cv
131.785 8.44897 131.75 8.59802 131.754 8.76599 cv
131.75 9.05902 131.844 9.289 132.031 9.453 cv
132.215 9.62097 132.473 9.703 132.801 9.703 cv
133.074 9.703 133.324 9.633 133.559 9.492 cv
133.785 9.35199 134.023 9.14801 134.266 8.875 cv
cp
f
140.117 10.645 mo
140.113 10.699 140.098 10.742 140.07 10.781 cv
140.035 10.82 139.98 10.855 139.91 10.879 cv
139.832 10.906 139.734 10.922 139.609 10.937 cv
139.484 10.949 139.324 10.957 139.137 10.957 cv
138.941 10.957 138.785 10.949 138.66 10.937 cv
138.535 10.922 138.434 10.906 138.359 10.879 cv
138.281 10.855 138.227 10.82 138.199 10.781 cv
138.164 10.742 138.148 10.699 138.152 10.645 cv
138.152 .39801 li
138.148 .348022 138.164 .301025 138.199 .257996 cv
138.227 .218994 138.281 .184021 138.359 .151978 cv
138.434 .125 138.535 .10498 138.66 .0859985 cv
138.785 .0739746 138.941 .065979 139.137 .0620117 cv
139.324 .065979 139.484 .0739746 139.609 .0859985 cv
139.734 .10498 139.832 .125 139.91 .151978 cv
139.98 .184021 140.035 .218994 140.07 .257996 cv
140.098 .301025 140.113 .348022 140.117 .39801 cv
cp
f
144.09 10.645 mo
144.086 10.699 144.07 10.742 144.043 10.781 cv
144.008 10.82 143.953 10.855 143.883 10.879 cv
143.805 10.906 143.707 10.922 143.582 10.937 cv
143.457 10.949 143.297 10.957 143.109 10.957 cv
142.914 10.957 142.758 10.949 142.633 10.937 cv
142.508 10.922 142.406 10.906 142.332 10.879 cv
142.254 10.855 142.199 10.82 142.172 10.781 cv
142.137 10.742 142.121 10.699 142.125 10.645 cv
142.125 3.711 li
142.121 3.65997 142.137 3.61298 142.172 3.57397 cv
142.199 3.53497 142.254 3.50403 142.332 3.47302 cv
142.406 3.44897 142.508 3.42603 142.633 3.40601 cv
142.758 3.39502 142.914 3.38702 143.109 3.383 cv
143.297 3.38702 143.457 3.39502 143.582 3.40601 cv
143.707 3.42603 143.805 3.44897 143.883 3.47302 cv
143.953 3.50403 144.008 3.53497 144.043 3.57397 cv
144.07 3.61298 144.086 3.65997 144.09 3.711 cv
cp
144.238 1.34003 mo
144.238 1.73798 144.156 2.01202 143.996 2.15997 cv
143.832 2.31201 143.535 2.38702 143.102 2.383 cv
142.656 2.38702 142.355 2.31201 142.207 2.16803 cv
142.051 2.02301 141.977 1.76202 141.977 1.37903 cv
141.977 .984009 142.055 .710999 142.215 .559021 cv
142.371 .406006 142.672 .328003 143.117 .328003 cv
143.551 .328003 143.848 .401978 144.004 .551025 cv
144.16 .698975 144.238 .965027 144.238 1.34003 cv
cp
f
152.691 10.645 mo
152.688 10.699 152.672 10.742 152.645 10.781 cv
152.609 10.82 152.559 10.855 152.488 10.879 cv
152.414 10.906 152.313 10.922 152.188 10.937 cv
152.059 10.949 151.902 10.957 151.719 10.957 cv
151.523 10.957 151.363 10.949 151.238 10.937 cv
151.109 10.922 151.008 10.906 150.938 10.879 cv
150.859 10.855 150.809 10.82 150.781 10.781 cv
150.746 10.742 150.73 10.699 150.734 10.645 cv
150.734 6.67999 li
150.73 6.34399 150.707 6.078 150.66 5.883 cv
150.609 5.69098 150.535 5.52698 150.445 5.39099 cv
150.352 5.25403 150.234 5.14801 150.086 5.07001 cv
149.938 4.99597 149.762 4.95697 149.566 4.95697 cv
149.313 4.95697 149.063 5.05103 148.809 5.22998 cv
148.555 5.414 148.289 5.67603 148.016 6.02301 cv
148.016 10.645 li
148.012 10.699 147.996 10.742 147.969 10.781 cv
147.934 10.82 147.879 10.855 147.809 10.879 cv
147.73 10.906 147.633 10.922 147.508 10.937 cv
147.383 10.949 147.223 10.957 147.035 10.957 cv
146.84 10.957 146.684 10.949 146.559 10.937 cv
146.434 10.922 146.332 10.906 146.258 10.879 cv
146.18 10.855 146.125 10.82 146.098 10.781 cv
146.063 10.742 146.047 10.699 146.051 10.645 cv
146.051 3.69501 li
146.047 3.64801 146.063 3.60199 146.09 3.55902 cv
146.113 3.52301 146.16 3.492 146.23 3.461 cv
146.297 3.43701 146.383 3.41803 146.492 3.40198 cv
146.598 3.39502 146.73 3.38702 146.895 3.383 cv
147.059 3.38702 147.195 3.39502 147.305 3.40198 cv
147.41 3.41803 147.496 3.43701 147.559 3.461 cv
147.617 3.492 147.66 3.52301 147.688 3.55902 cv
147.711 3.60199 147.723 3.64801 147.727 3.69501 cv
147.727 4.49597 li
148.109 4.086 148.5 3.77301 148.898 3.56201 cv
149.293 3.35498 149.711 3.25403 150.145 3.25 cv
150.613 3.25403 151.012 3.33197 151.34 3.48401 cv
151.664 3.64502 151.926 3.85498 152.125 4.12097 cv
152.324 4.39099 152.469 4.703 152.559 5.05902 cv
152.645 5.41803 152.688 5.84802 152.691 6.35199 cv
cp
f
160.887 4.17603 mo
160.883 4.42999 160.855 4.61298 160.801 4.72998 cv
160.742 4.85199 160.672 4.90997 160.594 4.90997 cv
159.773 4.90997 li
159.887 5.03497 159.969 5.17999 160.02 5.336 cv
160.066 5.49597 160.09 5.65997 160.094 5.828 cv
160.09 6.23798 160.023 6.59802 159.891 6.90997 cv
159.754 7.22699 159.559 7.492 159.309 7.703 cv
159.055 7.922 158.754 8.086 158.398 8.19501 cv
158.039 8.31201 157.641 8.367 157.211 8.36298 cv
156.984 8.367 156.773 8.34003 156.57 8.28101 cv
156.367 8.22998 156.211 8.16803 156.102 8.09003 cv
156.039 8.15997 155.98 8.23798 155.934 8.33197 cv
155.883 8.42603 155.859 8.53101 155.863 8.64099 cv
155.859 8.797 155.926 8.91803 156.059 9.01202 cv
156.188 9.10901 156.375 9.164 156.617 9.172 cv
158.309 9.23401 li
158.703 9.25 159.055 9.30902 159.363 9.40198 cv
159.672 9.50403 159.934 9.63702 160.145 9.80902 cv
160.355 9.98401 160.516 10.195 160.625 10.437 cv
160.734 10.684 160.789 10.957 160.793 11.27 cv
160.789 11.605 160.715 11.93 160.566 12.238 cv
160.418 12.539 160.191 12.801 159.891 13.027 cv
159.586 13.246 159.207 13.426 158.754 13.559 cv
158.297 13.687 157.766 13.75 157.164 13.754 cv
156.566 13.75 156.063 13.703 155.645 13.613 cv
155.227 13.516 154.883 13.387 154.617 13.223 cv
154.348 13.055 154.152 12.855 154.035 12.629 cv
153.91 12.395 153.852 12.141 153.852 11.867 cv
153.852 11.695 153.871 11.535 153.918 11.379 cv
153.957 11.223 154.023 11.07 154.113 10.93 cv
154.195 10.785 154.301 10.652 154.426 10.52 cv
154.551 10.391 154.691 10.266 154.855 10.145 cv
154.629 10.031 154.457 9.87097 154.336 9.65997 cv
154.215 9.45697 154.156 9.22998 154.156 8.98401 cv
154.156 8.68402 154.223 8.40601 154.363 8.14801 cv
154.5 7.89801 154.684 7.66803 154.91 7.46503 cv
154.727 7.28497 154.582 7.07001 154.473 6.81201 cv
154.363 6.56201 154.309 6.242 154.313 5.85901 cv
154.309 5.45697 154.379 5.09802 154.523 4.77301 cv
154.664 4.45697 154.863 4.18701 155.121 3.96503 cv
155.375 3.74597 155.68 3.57397 156.031 3.45697 cv
156.383 3.34003 156.773 3.28101 157.203 3.28101 cv
157.422 3.28101 157.629 3.297 157.828 3.32001 cv
158.027 3.35199 158.215 3.38702 158.387 3.42999 cv
160.594 3.42999 li
160.676 3.43402 160.746 3.492 160.805 3.60199 cv
160.855 3.71899 160.883 3.90997 160.887 4.17603 cv
cp
158.371 5.82001 mo
158.367 5.44897 158.266 5.15997 158.059 4.94897 cv
157.848 4.74597 157.555 4.64099 157.18 4.63702 cv
156.984 4.64099 156.813 4.672 156.672 4.73401 cv
156.523 4.80103 156.402 4.89099 156.309 5 cv
156.207 5.11298 156.137 5.242 156.094 5.39099 cv
156.043 5.539 156.02 5.69501 156.023 5.85199 cv
156.02 6.211 156.125 6.48798 156.336 6.69098 cv
156.543 6.89801 156.832 7.00403 157.203 7 cv
157.398 7.00403 157.566 6.97302 157.715 6.90601 cv
157.855 6.84802 157.977 6.76202 158.078 6.64801 cv
158.172 6.54303 158.246 6.414 158.297 6.27002 cv
158.344 6.12903 158.367 5.97998 158.371 5.82001 cv
cp
158.832 11.371 mo
158.832 11.133 158.738 10.957 158.551 10.832 cv
158.363 10.711 158.105 10.641 157.777 10.629 cv
156.383 10.59 li
156.246 10.691 156.137 10.785 156.059 10.875 cv
155.977 10.965 155.914 11.051 155.867 11.137 cv
155.816 11.219 155.781 11.301 155.77 11.379 cv
155.75 11.457 155.742 11.535 155.746 11.621 cv
155.742 11.875 155.875 12.074 156.137 12.211 cv
156.398 12.344 156.77 12.41 157.25 12.414 cv
157.543 12.41 157.789 12.379 157.996 12.324 cv
158.195 12.262 158.359 12.184 158.488 12.086 cv
158.609 11.984 158.699 11.875 158.754 11.754 cv
158.805 11.633 158.832 11.504 158.832 11.371 cv
cp
f
167.082 8.67999 mo
167.078 9.078 167.004 9.42603 166.859 9.72699 cv
166.711 10.027 166.504 10.281 166.234 10.48 cv
165.961 10.687 165.641 10.836 165.273 10.937 cv
164.906 11.035 164.504 11.086 164.074 11.09 cv
163.809 11.086 163.563 11.066 163.328 11.031 cv
163.094 10.988 162.883 10.941 162.695 10.883 cv
162.508 10.824 162.352 10.762 162.227 10.699 cv
162.102 10.637 162.008 10.578 161.953 10.523 cv
161.895 10.469 161.852 10.387 161.824 10.27 cv
161.789 10.156 161.773 9.97998 161.777 9.75 cv
161.773 9.60199 161.781 9.47998 161.793 9.38702 cv
161.801 9.297 161.816 9.22699 161.84 9.16803 cv
161.859 9.117 161.883 9.078 161.918 9.05902 cv
161.945 9.04303 161.984 9.03497 162.031 9.03101 cv
162.086 9.03497 162.172 9.06598 162.285 9.12903 cv
162.395 9.19501 162.531 9.27002 162.703 9.34399 cv
162.867 9.42603 163.063 9.49597 163.281 9.56201 cv
163.5 9.633 163.75 9.66803 164.035 9.664 cv
164.211 9.66803 164.367 9.64801 164.508 9.60901 cv
164.641 9.57397 164.762 9.52301 164.867 9.453 cv
164.965 9.38702 165.039 9.30103 165.094 9.19501 cv
165.141 9.09399 165.168 8.97302 165.172 8.836 cv
165.168 8.67999 165.121 8.547 165.027 8.43701 cv
164.934 8.328 164.805 8.22998 164.648 8.14502 cv
164.484 8.06201 164.305 7.98401 164.109 7.90997 cv
163.906 7.84003 163.703 7.76202 163.492 7.66803 cv
163.281 7.58197 163.074 7.47998 162.879 7.36298 cv
162.676 7.25403 162.496 7.11298 162.34 6.94501 cv
162.176 6.78101 162.051 6.58197 161.957 6.34399 cv
161.863 6.11298 161.816 5.83197 161.816 5.5 cv
161.816 5.172 161.879 4.867 162.008 4.586 cv
162.137 4.31201 162.324 4.07397 162.57 3.875 cv
162.813 3.67999 163.109 3.52698 163.461 3.414 cv
163.809 3.30902 164.203 3.25403 164.645 3.25 cv
164.859 3.25403 165.07 3.27002 165.277 3.297 cv
165.48 3.33197 165.668 3.37097 165.836 3.414 cv
166 3.46503 166.141 3.51599 166.258 3.56598 cv
166.371 3.625 166.453 3.672 166.504 3.70697 cv
166.551 3.75 166.586 3.789 166.609 3.82397 cv
166.629 3.867 166.641 3.914 166.652 3.96503 cv
166.66 4.02002 166.672 4.086 166.68 4.164 cv
166.688 4.25 166.691 4.34802 166.691 4.46503 cv
166.691 4.60498 166.688 4.72302 166.68 4.80902 cv
166.672 4.90198 166.656 4.97302 166.641 5.02002 cv
166.621 5.07397 166.598 5.10901 166.57 5.125 cv
166.535 5.14801 166.5 5.15601 166.461 5.15198 cv
166.41 5.15601 166.336 5.12903 166.242 5.07001 cv
166.141 5.02002 166.02 4.961 165.871 4.89502 cv
165.723 4.836 165.551 4.77698 165.355 4.71899 cv
165.16 4.66803 164.938 4.64099 164.691 4.63702 cv
164.512 4.64099 164.359 4.65997 164.23 4.69098 cv
164.098 4.72998 163.988 4.78101 163.91 4.84802 cv
163.824 4.91803 163.762 4.99597 163.723 5.086 cv
163.676 5.17999 163.656 5.27698 163.66 5.37903 cv
163.656 5.539 163.707 5.67603 163.809 5.78101 cv
163.906 5.89502 164.035 5.98798 164.199 6.07001 cv
164.359 6.15601 164.543 6.23401 164.75 6.30499 cv
164.953 6.37903 165.16 6.461 165.371 6.54303 cv
165.578 6.633 165.785 6.72998 165.996 6.84399 cv
166.199 6.95697 166.383 7.09802 166.543 7.26202 cv
166.703 7.42999 166.832 7.62903 166.934 7.85901 cv
167.027 8.09399 167.078 8.367 167.082 8.67999 cv
cp
f
179.191 7.09802 mo
179.188 7.69501 179.109 8.23798 178.957 8.72302 cv
178.797 9.21503 178.563 9.633 178.246 9.98401 cv
177.93 10.336 177.531 10.609 177.055 10.801 cv
176.574 10.992 176.016 11.086 175.379 11.09 cv
174.758 11.086 174.219 11.004 173.766 10.832 cv
173.305 10.664 172.926 10.414 172.629 10.086 cv
172.324 9.76202 172.102 9.35901 171.957 8.87903 cv
171.813 8.40198 171.742 7.85498 171.742 7.23798 cv
171.742 6.64801 171.82 6.10901 171.977 5.617 cv
172.133 5.12903 172.371 4.70697 172.691 4.35498 cv
173.008 4.008 173.402 3.73401 173.879 3.539 cv
174.352 3.34802 174.91 3.25403 175.551 3.25 cv
176.176 3.25403 176.715 3.336 177.172 3.50403 cv
177.629 3.67603 178.008 3.92603 178.305 4.25 cv
178.602 4.578 178.824 4.97998 178.973 5.45697 cv
179.117 5.93701 179.188 6.48401 179.191 7.09802 cv
cp
177.172 7.17603 mo
177.168 6.84003 177.141 6.52301 177.09 6.22998 cv
177.031 5.94501 176.938 5.69501 176.813 5.47998 cv
176.68 5.27002 176.508 5.10199 176.297 4.97998 cv
176.078 4.86298 175.809 4.80499 175.48 4.80103 cv
175.191 4.80499 174.938 4.85901 174.719 4.961 cv
174.5 5.07001 174.32 5.22699 174.18 5.42999 cv
174.039 5.63702 173.934 5.883 173.863 6.16803 cv
173.793 6.461 173.758 6.789 173.758 7.15198 cv
173.758 7.5 173.785 7.81598 173.844 8.10199 cv
173.898 8.39502 173.992 8.64502 174.121 8.85498 cv
174.246 9.07001 174.418 9.23401 174.641 9.34802 cv
174.855 9.46899 175.125 9.52698 175.449 9.52301 cv
175.742 9.52698 176 9.47302 176.223 9.36298 cv
176.438 9.258 176.617 9.10498 176.758 8.89801 cv
176.898 8.69897 177 8.453 177.07 8.164 cv
177.133 7.87903 177.168 7.55103 177.172 7.17603 cv
cp
f
184.945 1.04303 mo
184.941 1.19501 184.938 1.31598 184.93 1.40601 cv
184.918 1.5 184.902 1.57001 184.883 1.617 cv
184.859 1.66803 184.836 1.703 184.813 1.71899 cv
184.785 1.73798 184.758 1.74597 184.727 1.74597 cv
184.688 1.74597 184.645 1.73798 184.605 1.71899 cv
184.559 1.703 184.504 1.68402 184.441 1.65997 cv
184.371 1.64099 184.297 1.62097 184.211 1.60199 cv
184.121 1.586 184.016 1.578 183.898 1.57397 cv
183.754 1.578 183.633 1.59802 183.535 1.64099 cv
183.434 1.68701 183.352 1.758 183.285 1.85199 cv
183.215 1.94897 183.164 2.07397 183.137 2.22699 cv
183.102 2.37903 183.086 2.56598 183.09 2.789 cv
183.09 3.42999 li
184.359 3.42999 li
184.402 3.43402 184.445 3.44501 184.488 3.46899 cv
184.523 3.49597 184.559 3.539 184.586 3.59802 cv
184.609 3.65997 184.629 3.742 184.645 3.84399 cv
184.656 3.94501 184.66 4.07397 184.664 4.22302 cv
184.66 4.51202 184.637 4.71503 184.586 4.836 cv
184.531 4.961 184.453 5.02301 184.359 5.02002 cv
183.09 5.02002 li
183.09 10.645 li
183.086 10.699 183.07 10.742 183.043 10.781 cv
183.008 10.82 182.957 10.855 182.887 10.879 cv
182.813 10.906 182.711 10.922 182.582 10.937 cv
182.449 10.949 182.289 10.957 182.105 10.957 cv
181.918 10.957 181.762 10.949 181.637 10.937 cv
181.508 10.922 181.406 10.906 181.332 10.879 cv
181.254 10.855 181.203 10.82 181.176 10.781 cv
181.145 10.742 181.129 10.699 181.133 10.645 cv
181.133 5.02002 li
180.262 5.02002 li
180.16 5.02301 180.086 4.961 180.039 4.836 cv
179.988 4.71503 179.961 4.51202 179.965 4.22302 cv
179.961 4.07397 179.969 3.94501 179.984 3.84399 cv
179.996 3.742 180.016 3.65997 180.039 3.59802 cv
180.063 3.539 180.094 3.49597 180.133 3.46899 cv
180.172 3.44501 180.215 3.43402 180.27 3.42999 cv
181.133 3.42999 li
181.133 2.84399 li
181.129 2.375 181.176 1.961 181.273 1.60199 cv
181.363 1.24597 181.512 .948975 181.715 .715027 cv
181.914 .47998 182.168 .304993 182.477 .179993 cv
182.785 .0620117 183.148 0 183.574 0 cv
183.77 0 183.961 .0200195 184.148 .0510254 cv
184.328 .0900269 184.473 .125 184.578 .159973 cv
184.68 .203003 184.75 .237976 184.789 .27002 cv
184.824 .304993 184.855 .35498 184.879 .41803 cv
184.902 .484009 184.918 .565979 184.93 .66803 cv
184.938 .77002 184.941 .89502 184.945 1.04303 cv
cp
f
193.516 9.961 mo
193.516 10.187 193.5 10.363 193.473 10.484 cv
193.441 10.609 193.402 10.695 193.359 10.742 cv
193.309 10.793 193.242 10.836 193.152 10.875 cv
193.059 10.914 192.949 10.945 192.832 10.977 cv
192.707 11 192.574 11.023 192.434 11.043 cv
192.289 11.055 192.148 11.062 192.004 11.066 cv
191.613 11.062 191.273 11.012 190.988 10.918 cv
190.703 10.816 190.469 10.668 190.281 10.461 cv
190.094 10.258 189.953 10 189.867 9.68701 cv
189.773 9.37903 189.73 9.008 189.734 8.578 cv
189.734 5.02002 li
188.902 5.02002 li
188.801 5.02301 188.727 4.961 188.676 4.836 cv
188.621 4.71503 188.594 4.51202 188.598 4.22302 cv
188.594 4.07397 188.602 3.94501 188.617 3.84399 cv
188.629 3.742 188.648 3.65997 188.676 3.59802 cv
188.699 3.539 188.73 3.49597 188.773 3.46899 cv
188.809 3.44501 188.855 3.43402 188.91 3.42999 cv
189.734 3.42999 li
189.734 1.87903 li
189.73 1.83197 189.746 1.78497 189.777 1.73798 cv
189.805 1.69897 189.855 1.664 189.934 1.633 cv
190.008 1.60901 190.109 1.586 190.238 1.57001 cv
190.363 1.55902 190.52 1.55499 190.711 1.55103 cv
190.898 1.55499 191.059 1.55902 191.188 1.57001 cv
191.313 1.586 191.414 1.60901 191.488 1.633 cv
191.559 1.664 191.609 1.69897 191.645 1.73798 cv
191.672 1.78497 191.688 1.83197 191.691 1.87903 cv
191.691 3.42999 li
193.203 3.42999 li
193.254 3.43402 193.301 3.44501 193.34 3.46899 cv
193.379 3.49597 193.41 3.539 193.438 3.59802 cv
193.461 3.65997 193.48 3.742 193.496 3.84399 cv
193.508 3.94501 193.516 4.07397 193.516 4.22302 cv
193.516 4.51202 193.488 4.71503 193.438 4.836 cv
193.383 4.961 193.309 5.02301 193.211 5.02002 cv
191.691 5.02002 li
191.691 8.28497 li
191.688 8.664 191.746 8.94897 191.871 9.13702 cv
191.988 9.328 192.203 9.422 192.508 9.422 cv
192.609 9.422 192.703 9.414 192.789 9.39502 cv
192.871 9.37903 192.945 9.35901 193.012 9.33197 cv
193.074 9.31201 193.129 9.289 193.176 9.27002 cv
193.219 9.25403 193.258 9.24597 193.297 9.242 cv
193.324 9.24597 193.355 9.25403 193.387 9.27002 cv
193.414 9.289 193.434 9.328 193.453 9.37903 cv
193.465 9.43701 193.48 9.51202 193.496 9.60199 cv
193.508 9.69897 193.516 9.81598 193.516 9.961 cv
cp
f
201.578 10.645 mo
201.574 10.699 201.559 10.742 201.531 10.781 cv
201.496 10.82 201.445 10.855 201.375 10.879 cv
201.301 10.906 201.199 10.922 201.074 10.937 cv
200.945 10.949 200.789 10.957 200.605 10.957 cv
200.41 10.957 200.25 10.949 200.125 10.937 cv
199.996 10.922 199.895 10.906 199.824 10.879 cv
199.746 10.855 199.695 10.82 199.668 10.781 cv
199.633 10.742 199.617 10.699 199.621 10.645 cv
199.621 6.67999 li
199.617 6.34399 199.594 6.078 199.547 5.883 cv
199.496 5.69098 199.422 5.52698 199.332 5.39099 cv
199.238 5.25403 199.121 5.14801 198.973 5.07001 cv
198.824 4.99597 198.648 4.95697 198.453 4.95697 cv
198.199 4.95697 197.949 5.05103 197.695 5.22998 cv
197.441 5.414 197.176 5.67603 196.902 6.02301 cv
196.902 10.645 li
196.898 10.699 196.883 10.742 196.855 10.781 cv
196.82 10.82 196.766 10.855 196.695 10.879 cv
196.617 10.906 196.52 10.922 196.395 10.937 cv
196.27 10.949 196.109 10.957 195.922 10.957 cv
195.727 10.957 195.57 10.949 195.445 10.937 cv
195.32 10.922 195.219 10.906 195.145 10.879 cv
195.066 10.855 195.012 10.82 194.984 10.781 cv
194.949 10.742 194.934 10.699 194.938 10.645 cv
194.938 .39801 li
194.934 .348022 194.949 .301025 194.984 .257996 cv
195.012 .218994 195.066 .184021 195.145 .151978 cv
195.219 .125 195.32 .10498 195.445 .0859985 cv
195.57 .0739746 195.727 .065979 195.922 .0620117 cv
196.109 .065979 196.27 .0739746 196.395 .0859985 cv
196.52 .10498 196.617 .125 196.695 .151978 cv
196.766 .184021 196.82 .218994 196.855 .257996 cv
196.883 .301025 196.898 .348022 196.902 .39801 cv
196.902 4.23798 li
197.238 3.90997 197.582 3.664 197.934 3.49597 cv
198.281 3.336 198.648 3.25403 199.031 3.25 cv
199.5 3.25403 199.898 3.33197 200.227 3.48401 cv
200.551 3.64502 200.813 3.85498 201.012 4.125 cv
201.211 4.39502 201.355 4.711 201.445 5.07001 cv
201.531 5.43402 201.574 5.87097 201.578 6.383 cv
cp
f
209.867 6.96899 mo
209.863 7.20697 209.813 7.383 209.707 7.49597 cv
209.598 7.61298 209.449 7.672 209.27 7.66803 cv
205.035 7.66803 li
205.031 7.96899 205.066 8.23798 205.141 8.47699 cv
205.207 8.71899 205.32 8.922 205.477 9.09003 cv
205.629 9.26202 205.824 9.39099 206.066 9.47699 cv
206.305 9.56598 206.594 9.60901 206.938 9.60901 cv
207.277 9.60901 207.578 9.586 207.84 9.53497 cv
208.098 9.48798 208.324 9.43402 208.516 9.37097 cv
208.703 9.31201 208.859 9.258 208.988 9.20697 cv
209.109 9.15997 209.211 9.13702 209.293 9.133 cv
209.336 9.13702 209.375 9.14502 209.41 9.15997 cv
209.438 9.17999 209.465 9.211 209.484 9.258 cv
209.504 9.30499 209.516 9.37097 209.527 9.45697 cv
209.531 9.54303 209.535 9.65198 209.539 9.78101 cv
209.535 9.89801 209.535 9.99597 209.531 10.074 cv
209.523 10.156 209.516 10.223 209.508 10.277 cv
209.496 10.336 209.48 10.387 209.461 10.422 cv
209.441 10.465 209.414 10.5 209.383 10.535 cv
209.348 10.574 209.254 10.625 209.105 10.684 cv
208.949 10.75 208.758 10.812 208.527 10.867 cv
208.289 10.93 208.02 10.977 207.723 11.023 cv
207.418 11.062 207.098 11.086 206.758 11.09 cv
206.137 11.086 205.594 11.012 205.133 10.855 cv
204.664 10.703 204.277 10.465 203.969 10.148 cv
203.652 9.83197 203.418 9.43402 203.27 8.94897 cv
203.113 8.46899 203.039 7.90198 203.043 7.24597 cv
203.039 6.633 203.117 6.07397 203.281 5.578 cv
203.438 5.08197 203.672 4.664 203.984 4.31598 cv
204.289 3.97302 204.664 3.70697 205.102 3.52301 cv
205.539 3.34399 206.031 3.25403 206.586 3.25 cv
207.164 3.25403 207.664 3.34003 208.078 3.508 cv
208.492 3.68402 208.828 3.922 209.094 4.22302 cv
209.355 4.52698 209.551 4.88702 209.68 5.30103 cv
209.801 5.71899 209.863 6.16803 209.867 6.65601 cv
cp
207.965 6.40601 mo
207.977 5.85498 207.867 5.422 207.633 5.10901 cv
207.398 4.797 207.031 4.64099 206.539 4.63702 cv
206.289 4.64099 206.074 4.68701 205.891 4.77698 cv
205.703 4.875 205.551 5 205.43 5.15601 cv
205.305 5.31598 205.211 5.50403 205.148 5.71899 cv
205.082 5.93402 205.043 6.164 205.035 6.40601 cv
cp
f
220.969 1.66803 mo
220.965 1.828 220.961 1.95697 220.949 2.06201 cv
220.934 2.172 220.91 2.258 220.887 2.31598 cv
220.855 2.37903 220.824 2.42603 220.789 2.453 cv
220.75 2.48798 220.707 2.50403 220.664 2.5 cv
217.367 2.5 li
217.367 5.21503 li
220.461 5.21503 li
220.504 5.21503 220.547 5.22998 220.586 5.25403 cv
220.621 5.28497 220.652 5.328 220.684 5.38702 cv
220.711 5.44897 220.73 5.53101 220.746 5.633 cv
220.754 5.73798 220.762 5.867 220.766 6.02301 cv
220.762 6.17999 220.754 6.31201 220.746 6.414 cv
220.73 6.52301 220.711 6.60901 220.684 6.672 cv
220.652 6.742 220.621 6.789 220.586 6.81598 cv
220.547 6.84802 220.504 6.86298 220.461 6.85901 cv
217.367 6.85901 li
217.367 10.613 li
217.363 10.672 217.348 10.723 217.32 10.762 cv
217.285 10.809 217.23 10.844 217.152 10.867 cv
217.07 10.898 216.965 10.918 216.836 10.934 cv
216.703 10.949 216.535 10.957 216.34 10.957 cv
216.137 10.957 215.973 10.949 215.844 10.934 cv
215.707 10.918 215.602 10.898 215.527 10.867 cv
215.445 10.844 215.391 10.809 215.359 10.762 cv
215.324 10.723 215.305 10.672 215.309 10.613 cv
215.309 1.47302 li
215.305 1.24597 215.363 1.08197 215.484 .97699 cv
215.598 .879028 215.742 .828003 215.918 .823975 cv
220.664 .823975 li
220.707 .828003 220.75 .840027 220.789 .867004 cv
220.824 .89801 220.855 .945007 220.887 1.008 cv
220.91 1.07397 220.934 1.164 220.949 1.27002 cv
220.961 1.383 220.965 1.51599 220.969 1.66803 cv
cp
f
224.48 10.645 mo
224.477 10.699 224.461 10.742 224.434 10.781 cv
224.398 10.82 224.344 10.855 224.273 10.879 cv
224.195 10.906 224.098 10.922 223.973 10.937 cv
223.848 10.949 223.688 10.957 223.5 10.957 cv
223.305 10.957 223.148 10.949 223.023 10.937 cv
222.898 10.922 222.797 10.906 222.723 10.879 cv
222.645 10.855 222.59 10.82 222.563 10.781 cv
222.527 10.742 222.512 10.699 222.516 10.645 cv
222.516 3.711 li
222.512 3.65997 222.527 3.61298 222.563 3.57397 cv
222.59 3.53497 222.645 3.50403 222.723 3.47302 cv
222.797 3.44897 222.898 3.42603 223.023 3.40601 cv
223.148 3.39502 223.305 3.38702 223.5 3.383 cv
223.688 3.38702 223.848 3.39502 223.973 3.40601 cv
224.098 3.42603 224.195 3.44897 224.273 3.47302 cv
224.344 3.50403 224.398 3.53497 224.434 3.57397 cv
224.461 3.61298 224.477 3.65997 224.48 3.711 cv
cp
224.629 1.34003 mo
224.629 1.73798 224.547 2.01202 224.387 2.15997 cv
224.223 2.31201 223.926 2.38702 223.492 2.383 cv
223.047 2.38702 222.746 2.31201 222.598 2.16803 cv
222.441 2.02301 222.367 1.76202 222.367 1.37903 cv
222.367 .984009 222.445 .710999 222.605 .559021 cv
222.762 .406006 223.063 .328003 223.508 .328003 cv
223.941 .328003 224.238 .401978 224.395 .551025 cv
224.551 .698975 224.629 .965027 224.629 1.34003 cv
cp
f
228.406 10.645 mo
228.402 10.699 228.387 10.742 228.359 10.781 cv
228.324 10.82 228.27 10.855 228.199 10.879 cv
228.121 10.906 228.023 10.922 227.898 10.937 cv
227.773 10.949 227.613 10.957 227.426 10.957 cv
227.23 10.957 227.074 10.949 226.949 10.937 cv
226.824 10.922 226.723 10.906 226.648 10.879 cv
226.57 10.855 226.516 10.82 226.488 10.781 cv
226.453 10.742 226.438 10.699 226.441 10.645 cv
226.441 .39801 li
226.438 .348022 226.453 .301025 226.488 .257996 cv
226.516 .218994 226.57 .184021 226.648 .151978 cv
226.723 .125 226.824 .10498 226.949 .0859985 cv
227.074 .0739746 227.23 .065979 227.426 .0620117 cv
227.613 .065979 227.773 .0739746 227.898 .0859985 cv
228.023 .10498 228.121 .125 228.199 .151978 cv
228.27 .184021 228.324 .218994 228.359 .257996 cv
228.387 .301025 228.402 .348022 228.406 .39801 cv
cp
f
234.531 9.961 mo
234.531 10.187 234.516 10.363 234.488 10.484 cv
234.457 10.609 234.418 10.695 234.375 10.742 cv
234.324 10.793 234.258 10.836 234.168 10.875 cv
234.074 10.914 233.965 10.945 233.848 10.977 cv
233.723 11 233.59 11.023 233.449 11.043 cv
233.305 11.055 233.164 11.062 233.02 11.066 cv
232.629 11.062 232.289 11.012 232.004 10.918 cv
231.719 10.816 231.484 10.668 231.297 10.461 cv
231.109 10.258 230.969 10 230.883 9.68701 cv
230.789 9.37903 230.746 9.008 230.75 8.578 cv
230.75 5.02002 li
229.918 5.02002 li
229.816 5.02301 229.742 4.961 229.691 4.836 cv
229.637 4.71503 229.609 4.51202 229.613 4.22302 cv
229.609 4.07397 229.617 3.94501 229.633 3.84399 cv
229.645 3.742 229.664 3.65997 229.691 3.59802 cv
229.715 3.539 229.746 3.49597 229.789 3.46899 cv
229.824 3.44501 229.871 3.43402 229.926 3.42999 cv
230.75 3.42999 li
230.75 1.87903 li
230.746 1.83197 230.762 1.78497 230.793 1.73798 cv
230.82 1.69897 230.871 1.664 230.949 1.633 cv
231.023 1.60901 231.125 1.586 231.254 1.57001 cv
231.379 1.55902 231.535 1.55499 231.727 1.55103 cv
231.914 1.55499 232.074 1.55902 232.203 1.57001 cv
232.328 1.586 232.43 1.60901 232.504 1.633 cv
232.574 1.664 232.625 1.69897 232.66 1.73798 cv
232.688 1.78497 232.703 1.83197 232.707 1.87903 cv
232.707 3.42999 li
234.219 3.42999 li
234.27 3.43402 234.316 3.44501 234.355 3.46899 cv
234.395 3.49597 234.426 3.539 234.453 3.59802 cv
234.477 3.65997 234.496 3.742 234.512 3.84399 cv
234.523 3.94501 234.531 4.07397 234.531 4.22302 cv
234.531 4.51202 234.504 4.71503 234.453 4.836 cv
234.398 4.961 234.324 5.02301 234.227 5.02002 cv
232.707 5.02002 li
232.707 8.28497 li
232.703 8.664 232.762 8.94897 232.887 9.13702 cv
233.004 9.328 233.219 9.422 233.523 9.422 cv
233.625 9.422 233.719 9.414 233.805 9.39502 cv
233.887 9.37903 233.961 9.35901 234.027 9.33197 cv
234.09 9.31201 234.145 9.289 234.191 9.27002 cv
234.234 9.25403 234.273 9.24597 234.313 9.242 cv
234.34 9.24597 234.371 9.25403 234.402 9.27002 cv
234.43 9.289 234.449 9.328 234.469 9.37903 cv
234.48 9.43701 234.496 9.51202 234.512 9.60199 cv
234.523 9.69897 234.531 9.81598 234.531 9.961 cv
cp
f
242.121 6.96899 mo
242.117 7.20697 242.066 7.383 241.961 7.49597 cv
241.852 7.61298 241.703 7.672 241.523 7.66803 cv
237.289 7.66803 li
237.285 7.96899 237.32 8.23798 237.395 8.47699 cv
237.461 8.71899 237.574 8.922 237.73 9.09003 cv
237.883 9.26202 238.078 9.39099 238.32 9.47699 cv
238.559 9.56598 238.848 9.60901 239.191 9.60901 cv
239.531 9.60901 239.832 9.586 240.094 9.53497 cv
240.352 9.48798 240.578 9.43402 240.77 9.37097 cv
240.957 9.31201 241.113 9.258 241.242 9.20697 cv
241.363 9.15997 241.465 9.13702 241.547 9.133 cv
241.59 9.13702 241.629 9.14502 241.664 9.15997 cv
241.691 9.17999 241.719 9.211 241.738 9.258 cv
241.758 9.30499 241.77 9.37097 241.781 9.45697 cv
241.785 9.54303 241.789 9.65198 241.793 9.78101 cv
241.789 9.89801 241.789 9.99597 241.785 10.074 cv
241.777 10.156 241.77 10.223 241.762 10.277 cv
241.75 10.336 241.734 10.387 241.715 10.422 cv
241.695 10.465 241.668 10.5 241.637 10.535 cv
241.602 10.574 241.508 10.625 241.359 10.684 cv
241.203 10.75 241.012 10.812 240.781 10.867 cv
240.543 10.93 240.273 10.977 239.977 11.023 cv
239.672 11.062 239.352 11.086 239.012 11.09 cv
238.391 11.086 237.848 11.012 237.387 10.855 cv
236.918 10.703 236.531 10.465 236.223 10.148 cv
235.906 9.83197 235.672 9.43402 235.523 8.94897 cv
235.367 8.46899 235.293 7.90198 235.297 7.24597 cv
235.293 6.633 235.371 6.07397 235.535 5.578 cv
235.691 5.08197 235.926 4.664 236.238 4.31598 cv
236.543 3.97302 236.918 3.70697 237.355 3.52301 cv
237.793 3.34399 238.285 3.25403 238.84 3.25 cv
239.418 3.25403 239.918 3.34003 240.332 3.508 cv
240.746 3.68402 241.082 3.922 241.348 4.22302 cv
241.609 4.52698 241.805 4.88702 241.934 5.30103 cv
242.055 5.71899 242.117 6.16803 242.121 6.65601 cv
cp
240.219 6.40601 mo
240.23 5.85498 240.121 5.422 239.887 5.10901 cv
239.652 4.797 239.285 4.64099 238.793 4.63702 cv
238.543 4.64099 238.328 4.68701 238.145 4.77698 cv
237.957 4.875 237.805 5 237.684 5.15601 cv
237.559 5.31598 237.465 5.50403 237.402 5.71899 cv
237.336 5.93402 237.297 6.164 237.289 6.40601 cv
cp
f
248.195 4.34003 mo
248.195 4.53101 248.188 4.68402 248.18 4.80103 cv
248.164 4.922 248.148 5.01599 248.133 5.08197 cv
248.109 5.15198 248.082 5.19897 248.051 5.22302 cv
248.012 5.25 247.969 5.26202 247.922 5.26202 cv
247.875 5.26202 247.828 5.25403 247.781 5.23401 cv
247.727 5.21899 247.668 5.19897 247.605 5.17603 cv
247.535 5.15601 247.465 5.13702 247.391 5.117 cv
247.309 5.10199 247.223 5.09399 247.133 5.09003 cv
247.02 5.09399 246.91 5.11298 246.805 5.15601 cv
246.695 5.203 246.582 5.27301 246.469 5.36298 cv
246.348 5.45697 246.227 5.58197 246.102 5.73401 cv
245.973 5.89502 245.836 6.086 245.691 6.31201 cv
245.691 10.645 li
245.688 10.699 245.672 10.742 245.645 10.781 cv
245.609 10.82 245.555 10.855 245.484 10.879 cv
245.406 10.906 245.309 10.922 245.184 10.937 cv
245.059 10.949 244.898 10.957 244.711 10.957 cv
244.516 10.957 244.359 10.949 244.234 10.937 cv
244.109 10.922 244.008 10.906 243.934 10.879 cv
243.855 10.855 243.801 10.82 243.773 10.781 cv
243.738 10.742 243.723 10.699 243.727 10.645 cv
243.727 3.69501 li
243.723 3.64801 243.738 3.60199 243.766 3.55902 cv
243.789 3.52301 243.836 3.492 243.906 3.461 cv
243.973 3.43701 244.059 3.41803 244.168 3.40198 cv
244.273 3.39502 244.406 3.38702 244.57 3.383 cv
244.734 3.38702 244.871 3.39502 244.98 3.40198 cv
245.086 3.41803 245.172 3.43701 245.234 3.461 cv
245.293 3.492 245.336 3.52301 245.363 3.55902 cv
245.387 3.60199 245.398 3.64801 245.402 3.69501 cv
245.402 4.55902 li
245.582 4.30103 245.754 4.09003 245.918 3.91803 cv
246.074 3.75403 246.23 3.617 246.379 3.51599 cv
246.523 3.41803 246.668 3.35199 246.813 3.30902 cv
246.957 3.27301 247.102 3.25403 247.25 3.25 cv
247.316 3.25403 247.391 3.258 247.469 3.26202 cv
247.547 3.27301 247.625 3.28497 247.711 3.30103 cv
247.789 3.32001 247.863 3.34003 247.93 3.36298 cv
247.988 3.38702 248.035 3.414 248.066 3.43701 cv
248.094 3.46899 248.113 3.49597 248.129 3.52301 cv
248.141 3.55902 248.152 3.60199 248.164 3.65198 cv
248.172 3.711 248.18 3.79303 248.188 3.89801 cv
248.191 4.008 248.195 4.15601 248.195 4.34003 cv
cp
f
251.355 10.645 mo
251.352 10.699 251.336 10.742 251.309 10.781 cv
251.273 10.82 251.219 10.855 251.148 10.879 cv
251.07 10.906 250.973 10.922 250.848 10.937 cv
250.723 10.949 250.563 10.957 250.375 10.957 cv
250.18 10.957 250.023 10.949 249.898 10.937 cv
249.773 10.922 249.672 10.906 249.598 10.879 cv
249.52 10.855 249.465 10.82 249.438 10.781 cv
249.402 10.742 249.387 10.699 249.391 10.645 cv
249.391 3.711 li
249.387 3.65997 249.402 3.61298 249.438 3.57397 cv
249.465 3.53497 249.52 3.50403 249.598 3.47302 cv
249.672 3.44897 249.773 3.42603 249.898 3.40601 cv
250.023 3.39502 250.18 3.38702 250.375 3.383 cv
250.563 3.38702 250.723 3.39502 250.848 3.40601 cv
250.973 3.42603 251.07 3.44897 251.148 3.47302 cv
251.219 3.50403 251.273 3.53497 251.309 3.57397 cv
251.336 3.61298 251.352 3.65997 251.355 3.711 cv
cp
251.504 1.34003 mo
251.504 1.73798 251.422 2.01202 251.262 2.15997 cv
251.098 2.31201 250.801 2.38702 250.367 2.383 cv
249.922 2.38702 249.621 2.31201 249.473 2.16803 cv
249.316 2.02301 249.242 1.76202 249.242 1.37903 cv
249.242 .984009 249.32 .710999 249.48 .559021 cv
249.637 .406006 249.938 .328003 250.383 .328003 cv
250.816 .328003 251.113 .401978 251.27 .551025 cv
251.426 .698975 251.504 .965027 251.504 1.34003 cv
cp
f
259.961 10.645 mo
259.957 10.699 259.941 10.742 259.914 10.781 cv
259.879 10.82 259.828 10.855 259.758 10.879 cv
259.684 10.906 259.582 10.922 259.457 10.937 cv
259.328 10.949 259.172 10.957 258.988 10.957 cv
258.793 10.957 258.633 10.949 258.508 10.937 cv
258.379 10.922 258.277 10.906 258.207 10.879 cv
258.129 10.855 258.078 10.82 258.051 10.781 cv
258.016 10.742 258 10.699 258.004 10.645 cv
258.004 6.67999 li
258 6.34399 257.977 6.078 257.93 5.883 cv
257.879 5.69098 257.805 5.52698 257.715 5.39099 cv
257.621 5.25403 257.504 5.14801 257.355 5.07001 cv
257.207 4.99597 257.031 4.95697 256.836 4.95697 cv
256.582 4.95697 256.332 5.05103 256.078 5.22998 cv
255.824 5.414 255.559 5.67603 255.285 6.02301 cv
255.285 10.645 li
255.281 10.699 255.266 10.742 255.238 10.781 cv
255.203 10.82 255.148 10.855 255.078 10.879 cv
255 10.906 254.902 10.922 254.777 10.937 cv
254.652 10.949 254.492 10.957 254.305 10.957 cv
254.109 10.957 253.953 10.949 253.828 10.937 cv
253.703 10.922 253.602 10.906 253.527 10.879 cv
253.449 10.855 253.395 10.82 253.367 10.781 cv
253.332 10.742 253.316 10.699 253.32 10.645 cv
253.32 3.69501 li
253.316 3.64801 253.332 3.60199 253.359 3.55902 cv
253.383 3.52301 253.43 3.492 253.5 3.461 cv
253.566 3.43701 253.652 3.41803 253.762 3.40198 cv
253.867 3.39502 254 3.38702 254.164 3.383 cv
254.328 3.38702 254.465 3.39502 254.574 3.40198 cv
254.68 3.41803 254.766 3.43701 254.828 3.461 cv
254.887 3.492 254.93 3.52301 254.957 3.55902 cv
254.98 3.60199 254.992 3.64801 254.996 3.69501 cv
254.996 4.49597 li
255.379 4.086 255.77 3.77301 256.168 3.56201 cv
256.563 3.35498 256.98 3.25403 257.414 3.25 cv
257.883 3.25403 258.281 3.33197 258.609 3.48401 cv
258.934 3.64502 259.195 3.85498 259.395 4.12097 cv
259.594 4.39099 259.738 4.703 259.828 5.05902 cv
259.914 5.41803 259.957 5.84802 259.961 6.35199 cv
cp
f
268.156 4.17603 mo
268.152 4.42999 268.125 4.61298 268.07 4.72998 cv
268.012 4.85199 267.941 4.90997 267.863 4.90997 cv
267.043 4.90997 li
267.156 5.03497 267.238 5.17999 267.289 5.336 cv
267.336 5.49597 267.359 5.65997 267.363 5.828 cv
267.359 6.23798 267.293 6.59802 267.16 6.90997 cv
267.023 7.22699 266.828 7.492 266.578 7.703 cv
266.324 7.922 266.023 8.086 265.668 8.19501 cv
265.309 8.31201 264.91 8.367 264.48 8.36298 cv
264.254 8.367 264.043 8.34003 263.84 8.28101 cv
263.637 8.22998 263.48 8.16803 263.371 8.09003 cv
263.309 8.15997 263.25 8.23798 263.203 8.33197 cv
263.152 8.42603 263.129 8.53101 263.133 8.64099 cv
263.129 8.797 263.195 8.91803 263.328 9.01202 cv
263.457 9.10901 263.645 9.164 263.887 9.172 cv
265.578 9.23401 li
265.973 9.25 266.324 9.30902 266.633 9.40198 cv
266.941 9.50403 267.203 9.63702 267.414 9.80902 cv
267.625 9.98401 267.785 10.195 267.895 10.437 cv
268.004 10.684 268.059 10.957 268.063 11.27 cv
268.059 11.605 267.984 11.93 267.836 12.238 cv
267.688 12.539 267.461 12.801 267.16 13.027 cv
266.855 13.246 266.477 13.426 266.023 13.559 cv
265.566 13.687 265.035 13.75 264.434 13.754 cv
263.836 13.75 263.332 13.703 262.914 13.613 cv
262.496 13.516 262.152 13.387 261.887 13.223 cv
261.617 13.055 261.422 12.855 261.305 12.629 cv
261.18 12.395 261.121 12.141 261.121 11.867 cv
261.121 11.695 261.141 11.535 261.188 11.379 cv
261.227 11.223 261.293 11.07 261.383 10.93 cv
261.465 10.785 261.57 10.652 261.695 10.52 cv
261.82 10.391 261.961 10.266 262.125 10.145 cv
261.898 10.031 261.727 9.87097 261.605 9.65997 cv
261.484 9.45697 261.426 9.22998 261.426 8.98401 cv
261.426 8.68402 261.492 8.40601 261.633 8.14801 cv
261.77 7.89801 261.953 7.66803 262.18 7.46503 cv
261.996 7.28497 261.852 7.07001 261.742 6.81201 cv
261.633 6.56201 261.578 6.242 261.582 5.85901 cv
261.578 5.45697 261.648 5.09802 261.793 4.77301 cv
261.934 4.45697 262.133 4.18701 262.391 3.96503 cv
262.645 3.74597 262.949 3.57397 263.301 3.45697 cv
263.652 3.34003 264.043 3.28101 264.473 3.28101 cv
264.691 3.28101 264.898 3.297 265.098 3.32001 cv
265.297 3.35199 265.484 3.38702 265.656 3.42999 cv
267.863 3.42999 li
267.945 3.43402 268.016 3.492 268.074 3.60199 cv
268.125 3.71899 268.152 3.90997 268.156 4.17603 cv
cp
265.641 5.82001 mo
265.637 5.44897 265.535 5.15997 265.328 4.94897 cv
265.117 4.74597 264.824 4.64099 264.449 4.63702 cv
264.254 4.64099 264.082 4.672 263.941 4.73401 cv
263.793 4.80103 263.672 4.89099 263.578 5 cv
263.477 5.11298 263.406 5.242 263.363 5.39099 cv
263.313 5.539 263.289 5.69501 263.293 5.85199 cv
263.289 6.211 263.395 6.48798 263.605 6.69098 cv
263.813 6.89801 264.102 7.00403 264.473 7 cv
264.668 7.00403 264.836 6.97302 264.984 6.90601 cv
265.125 6.84802 265.246 6.76202 265.348 6.64801 cv
265.441 6.54303 265.516 6.414 265.566 6.27002 cv
265.613 6.12903 265.637 5.97998 265.641 5.82001 cv
cp
266.102 11.371 mo
266.102 11.133 266.008 10.957 265.82 10.832 cv
265.633 10.711 265.375 10.641 265.047 10.629 cv
263.652 10.59 li
263.516 10.691 263.406 10.785 263.328 10.875 cv
263.246 10.965 263.184 11.051 263.137 11.137 cv
263.086 11.219 263.051 11.301 263.039 11.379 cv
263.02 11.457 263.012 11.535 263.016 11.621 cv
263.012 11.875 263.145 12.074 263.406 12.211 cv
263.668 12.344 264.039 12.41 264.52 12.414 cv
264.813 12.41 265.059 12.379 265.266 12.324 cv
265.465 12.262 265.629 12.184 265.758 12.086 cv
265.879 11.984 265.969 11.875 266.023 11.754 cv
266.074 11.633 266.102 11.504 266.102 11.371 cv
cp
f
280.066 1.66803 mo
280.063 1.82397 280.055 1.953 280.047 2.05499 cv
280.031 2.164 280.012 2.25 279.988 2.31201 cv
279.957 2.37903 279.926 2.42603 279.891 2.453 cv
279.848 2.48798 279.805 2.50403 279.762 2.5 cv
277.238 2.5 li
277.238 10.629 li
277.238 10.684 277.219 10.73 277.188 10.77 cv
277.148 10.812 277.094 10.848 277.02 10.871 cv
276.938 10.898 276.832 10.918 276.703 10.934 cv
276.566 10.949 276.402 10.957 276.207 10.957 cv
276.012 10.957 275.848 10.949 275.715 10.934 cv
275.582 10.918 275.477 10.898 275.398 10.871 cv
275.32 10.848 275.262 10.812 275.23 10.77 cv
275.191 10.73 275.176 10.684 275.18 10.629 cv
275.18 2.5 li
272.656 2.5 li
272.602 2.50403 272.555 2.48798 272.523 2.453 cv
272.484 2.42603 272.453 2.37903 272.43 2.31201 cv
272.398 2.25 272.379 2.164 272.371 2.05499 cv
272.355 1.953 272.352 1.82397 272.352 1.66803 cv
272.352 1.51599 272.355 1.383 272.371 1.27002 cv
272.379 1.164 272.398 1.07397 272.43 1.008 cv
272.453 .945007 272.484 .89801 272.523 .867004 cv
272.555 .840027 272.602 .828003 272.656 .823975 cv
279.762 .823975 li
279.805 .828003 279.848 .840027 279.891 .867004 cv
279.926 .89801 279.957 .945007 279.988 1.008 cv
280.012 1.07397 280.031 1.164 280.047 1.27002 cv
280.055 1.383 280.063 1.51599 280.066 1.66803 cv
cp
f
283.102 10.645 mo
283.098 10.699 283.082 10.742 283.055 10.781 cv
283.02 10.82 282.965 10.855 282.895 10.879 cv
282.816 10.906 282.719 10.922 282.594 10.937 cv
282.469 10.949 282.309 10.957 282.121 10.957 cv
281.926 10.957 281.77 10.949 281.645 10.937 cv
281.52 10.922 281.418 10.906 281.344 10.879 cv
281.266 10.855 281.211 10.82 281.184 10.781 cv
281.148 10.742 281.133 10.699 281.137 10.645 cv
281.137 3.711 li
281.133 3.65997 281.148 3.61298 281.184 3.57397 cv
281.211 3.53497 281.266 3.50403 281.344 3.47302 cv
281.418 3.44897 281.52 3.42603 281.645 3.40601 cv
281.77 3.39502 281.926 3.38702 282.121 3.383 cv
282.309 3.38702 282.469 3.39502 282.594 3.40601 cv
282.719 3.42603 282.816 3.44897 282.895 3.47302 cv
282.965 3.50403 283.02 3.53497 283.055 3.57397 cv
283.082 3.61298 283.098 3.65997 283.102 3.711 cv
cp
283.25 1.34003 mo
283.25 1.73798 283.168 2.01202 283.008 2.15997 cv
282.844 2.31201 282.547 2.38702 282.113 2.383 cv
281.668 2.38702 281.367 2.31201 281.219 2.16803 cv
281.063 2.02301 280.988 1.76202 280.988 1.37903 cv
280.988 .984009 281.066 .710999 281.227 .559021 cv
281.383 .406006 281.684 .328003 282.129 .328003 cv
282.563 .328003 282.859 .401978 283.016 .551025 cv
283.172 .698975 283.25 .965027 283.25 1.34003 cv
cp
f
296.152 10.645 mo
296.148 10.699 296.133 10.742 296.105 10.781 cv
296.07 10.82 296.02 10.855 295.949 10.879 cv
295.875 10.906 295.773 10.922 295.652 10.937 cv
295.527 10.949 295.371 10.957 295.18 10.957 cv
294.98 10.957 294.82 10.949 294.695 10.937 cv
294.57 10.922 294.469 10.906 294.395 10.879 cv
294.316 10.855 294.266 10.82 294.238 10.781 cv
294.211 10.742 294.195 10.699 294.199 10.645 cv
294.199 6.52301 li
294.195 6.29303 294.176 6.078 294.133 5.883 cv
294.086 5.69098 294.016 5.52698 293.93 5.39099 cv
293.836 5.25403 293.723 5.14801 293.586 5.07001 cv
293.445 4.99597 293.281 4.95697 293.09 4.95697 cv
292.855 4.95697 292.617 5.05103 292.379 5.22998 cv
292.141 5.414 291.883 5.67603 291.602 6.02301 cv
291.602 10.645 li
291.602 10.699 291.586 10.742 291.555 10.781 cv
291.523 10.82 291.469 10.855 291.395 10.879 cv
291.316 10.906 291.215 10.922 291.094 10.937 cv
290.969 10.949 290.816 10.957 290.629 10.957 cv
290.434 10.957 290.273 10.949 290.152 10.937 cv
290.023 10.922 289.922 10.906 289.852 10.879 cv
289.773 10.855 289.723 10.82 289.691 10.781 cv
289.66 10.742 289.645 10.699 289.645 10.645 cv
289.645 6.52301 li
289.645 6.29303 289.621 6.078 289.578 5.883 cv
289.535 5.69098 289.469 5.52698 289.383 5.39099 cv
289.289 5.25403 289.176 5.14801 289.039 5.07001 cv
288.895 4.99597 288.73 4.95697 288.547 4.95697 cv
288.305 4.95697 288.066 5.05103 287.828 5.22998 cv
287.59 5.414 287.332 5.67603 287.059 6.02301 cv
287.059 10.645 li
287.055 10.699 287.039 10.742 287.012 10.781 cv
286.977 10.82 286.922 10.855 286.852 10.879 cv
286.773 10.906 286.676 10.922 286.551 10.937 cv
286.426 10.949 286.266 10.957 286.078 10.957 cv
285.883 10.957 285.727 10.949 285.602 10.937 cv
285.477 10.922 285.375 10.906 285.301 10.879 cv
285.223 10.855 285.168 10.82 285.141 10.781 cv
285.105 10.742 285.09 10.699 285.094 10.645 cv
285.094 3.69501 li
285.09 3.64801 285.105 3.60199 285.133 3.55902 cv
285.156 3.52301 285.203 3.492 285.273 3.461 cv
285.34 3.43701 285.426 3.41803 285.535 3.40198 cv
285.641 3.39502 285.773 3.38702 285.938 3.383 cv
286.102 3.38702 286.238 3.39502 286.348 3.40198 cv
286.453 3.41803 286.539 3.43701 286.602 3.461 cv
286.66 3.492 286.703 3.52301 286.73 3.55902 cv
286.754 3.60199 286.766 3.64801 286.77 3.69501 cv
286.77 4.49597 li
287.152 4.086 287.535 3.77301 287.918 3.56201 cv
288.297 3.35498 288.699 3.25403 289.117 3.25 cv
289.402 3.25403 289.656 3.28101 289.887 3.34003 cv
290.113 3.40198 290.32 3.48798 290.5 3.59802 cv
290.68 3.711 290.832 3.84802 290.961 4 cv
291.09 4.15601 291.199 4.328 291.289 4.52002 cv
291.496 4.297 291.699 4.10498 291.902 3.94501 cv
292.098 3.78497 292.297 3.65198 292.492 3.55103 cv
292.688 3.44897 292.883 3.375 293.078 3.32397 cv
293.273 3.27698 293.473 3.25403 293.676 3.25 cv
294.137 3.25403 294.523 3.33197 294.844 3.48401 cv
295.156 3.64502 295.414 3.85498 295.609 4.12097 cv
295.805 4.39099 295.941 4.703 296.027 5.05902 cv
296.105 5.41803 296.148 5.797 296.152 6.19501 cv
cp
f
304.492 6.96899 mo
304.488 7.20697 304.438 7.383 304.332 7.49597 cv
304.223 7.61298 304.074 7.672 303.895 7.66803 cv
299.66 7.66803 li
299.656 7.96899 299.691 8.23798 299.766 8.47699 cv
299.832 8.71899 299.945 8.922 300.102 9.09003 cv
300.254 9.26202 300.449 9.39099 300.691 9.47699 cv
300.93 9.56598 301.219 9.60901 301.563 9.60901 cv
301.902 9.60901 302.203 9.586 302.465 9.53497 cv
302.723 9.48798 302.949 9.43402 303.141 9.37097 cv
303.328 9.31201 303.484 9.258 303.613 9.20697 cv
303.734 9.15997 303.836 9.13702 303.918 9.133 cv
303.961 9.13702 304 9.14502 304.035 9.15997 cv
304.063 9.17999 304.09 9.211 304.109 9.258 cv
304.129 9.30499 304.141 9.37097 304.152 9.45697 cv
304.156 9.54303 304.16 9.65198 304.164 9.78101 cv
304.16 9.89801 304.16 9.99597 304.156 10.074 cv
304.148 10.156 304.141 10.223 304.133 10.277 cv
304.121 10.336 304.105 10.387 304.086 10.422 cv
304.066 10.465 304.039 10.5 304.008 10.535 cv
303.973 10.574 303.879 10.625 303.73 10.684 cv
303.574 10.75 303.383 10.812 303.152 10.867 cv
302.914 10.93 302.645 10.977 302.348 11.023 cv
302.043 11.062 301.723 11.086 301.383 11.09 cv
300.762 11.086 300.219 11.012 299.758 10.855 cv
299.289 10.703 298.902 10.465 298.594 10.148 cv
298.277 9.83197 298.043 9.43402 297.895 8.94897 cv
297.738 8.46899 297.664 7.90198 297.668 7.24597 cv
297.664 6.633 297.742 6.07397 297.906 5.578 cv
298.063 5.08197 298.297 4.664 298.609 4.31598 cv
298.914 3.97302 299.289 3.70697 299.727 3.52301 cv
300.164 3.34399 300.656 3.25403 301.211 3.25 cv
301.789 3.25403 302.289 3.34003 302.703 3.508 cv
303.117 3.68402 303.453 3.922 303.719 4.22302 cv
303.98 4.52698 304.176 4.88702 304.305 5.30103 cv
304.426 5.71899 304.488 6.16803 304.492 6.65601 cv
cp
302.59 6.40601 mo
302.602 5.85498 302.492 5.422 302.258 5.10901 cv
302.023 4.797 301.656 4.64099 301.164 4.63702 cv
300.914 4.64099 300.699 4.68701 300.516 4.77698 cv
300.328 4.875 300.176 5 300.055 5.15601 cv
299.93 5.31598 299.836 5.50403 299.773 5.71899 cv
299.707 5.93402 299.668 6.164 299.66 6.40601 cv
cp
f
310.992 8.67999 mo
310.988 9.078 310.914 9.42603 310.77 9.72699 cv
310.621 10.027 310.414 10.281 310.145 10.48 cv
309.871 10.687 309.551 10.836 309.184 10.937 cv
308.816 11.035 308.414 11.086 307.984 11.09 cv
307.719 11.086 307.473 11.066 307.238 11.031 cv
307.004 10.988 306.793 10.941 306.605 10.883 cv
306.418 10.824 306.262 10.762 306.137 10.699 cv
306.012 10.637 305.918 10.578 305.863 10.523 cv
305.805 10.469 305.762 10.387 305.734 10.27 cv
305.699 10.156 305.684 9.97998 305.688 9.75 cv
305.684 9.60199 305.691 9.47998 305.703 9.38702 cv
305.711 9.297 305.727 9.22699 305.75 9.16803 cv
305.77 9.117 305.793 9.078 305.828 9.05902 cv
305.855 9.04303 305.895 9.03497 305.941 9.03101 cv
305.996 9.03497 306.082 9.06598 306.195 9.12903 cv
306.305 9.19501 306.441 9.27002 306.613 9.34399 cv
306.777 9.42603 306.973 9.49597 307.191 9.56201 cv
307.41 9.633 307.66 9.66803 307.945 9.664 cv
308.121 9.66803 308.277 9.64801 308.418 9.60901 cv
308.551 9.57397 308.672 9.52301 308.777 9.453 cv
308.875 9.38702 308.949 9.30103 309.004 9.19501 cv
309.051 9.09399 309.078 8.97302 309.082 8.836 cv
309.078 8.67999 309.031 8.547 308.938 8.43701 cv
308.844 8.328 308.715 8.22998 308.559 8.14502 cv
308.395 8.06201 308.215 7.98401 308.02 7.90997 cv
307.816 7.84003 307.613 7.76202 307.402 7.66803 cv
307.191 7.58197 306.984 7.47998 306.789 7.36298 cv
306.586 7.25403 306.406 7.11298 306.25 6.94501 cv
306.086 6.78101 305.961 6.58197 305.867 6.34399 cv
305.773 6.11298 305.727 5.83197 305.727 5.5 cv
305.727 5.172 305.789 4.867 305.918 4.586 cv
306.047 4.31201 306.234 4.07397 306.48 3.875 cv
306.723 3.67999 307.02 3.52698 307.371 3.414 cv
307.719 3.30902 308.113 3.25403 308.555 3.25 cv
308.77 3.25403 308.98 3.27002 309.188 3.297 cv
309.391 3.33197 309.578 3.37097 309.746 3.414 cv
309.91 3.46503 310.051 3.51599 310.168 3.56598 cv
310.281 3.625 310.363 3.672 310.414 3.70697 cv
310.461 3.75 310.496 3.789 310.52 3.82397 cv
310.539 3.867 310.551 3.914 310.563 3.96503 cv
310.57 4.02002 310.582 4.086 310.59 4.164 cv
310.598 4.25 310.602 4.34802 310.602 4.46503 cv
310.602 4.60498 310.598 4.72302 310.59 4.80902 cv
310.582 4.90198 310.566 4.97302 310.551 5.02002 cv
310.531 5.07397 310.508 5.10901 310.48 5.125 cv
310.445 5.14801 310.41 5.15601 310.371 5.15198 cv
310.32 5.15601 310.246 5.12903 310.152 5.07001 cv
310.051 5.02002 309.93 4.961 309.781 4.89502 cv
309.633 4.836 309.461 4.77698 309.266 4.71899 cv
309.07 4.66803 308.848 4.64099 308.602 4.63702 cv
308.422 4.64099 308.27 4.65997 308.141 4.69098 cv
308.008 4.72998 307.898 4.78101 307.82 4.84802 cv
307.734 4.91803 307.672 4.99597 307.633 5.086 cv
307.586 5.17999 307.566 5.27698 307.57 5.37903 cv
307.566 5.539 307.617 5.67603 307.719 5.78101 cv
307.816 5.89502 307.945 5.98798 308.109 6.07001 cv
308.27 6.15601 308.453 6.23401 308.66 6.30499 cv
308.863 6.37903 309.07 6.461 309.281 6.54303 cv
309.488 6.633 309.695 6.72998 309.906 6.84399 cv
310.109 6.95697 310.293 7.09802 310.453 7.26202 cv
310.613 7.42999 310.742 7.62903 310.844 7.85901 cv
310.938 8.09399 310.988 8.367 310.992 8.67999 cv
cp
f
323.184 7.09802 mo
323.18 7.69501 323.102 8.23798 322.949 8.72302 cv
322.789 9.21503 322.555 9.633 322.238 9.98401 cv
321.922 10.336 321.523 10.609 321.047 10.801 cv
320.566 10.992 320.008 11.086 319.371 11.09 cv
318.75 11.086 318.211 11.004 317.758 10.832 cv
317.297 10.664 316.918 10.414 316.621 10.086 cv
316.316 9.76202 316.094 9.35901 315.949 8.87903 cv
315.805 8.40198 315.734 7.85498 315.734 7.23798 cv
315.734 6.64801 315.813 6.10901 315.969 5.617 cv
316.125 5.12903 316.363 4.70697 316.684 4.35498 cv
317 4.008 317.395 3.73401 317.871 3.539 cv
318.344 3.34802 318.902 3.25403 319.543 3.25 cv
320.168 3.25403 320.707 3.336 321.164 3.50403 cv
321.621 3.67603 322 3.92603 322.297 4.25 cv
322.594 4.578 322.816 4.97998 322.965 5.45697 cv
323.109 5.93701 323.18 6.48401 323.184 7.09802 cv
cp
321.164 7.17603 mo
321.16 6.84003 321.133 6.52301 321.082 6.22998 cv
321.023 5.94501 320.93 5.69501 320.805 5.47998 cv
320.672 5.27002 320.5 5.10199 320.289 4.97998 cv
320.07 4.86298 319.801 4.80499 319.473 4.80103 cv
319.184 4.80499 318.93 4.85901 318.711 4.961 cv
318.492 5.07001 318.313 5.22699 318.172 5.42999 cv
318.031 5.63702 317.926 5.883 317.855 6.16803 cv
317.785 6.461 317.75 6.789 317.75 7.15198 cv
317.75 7.5 317.777 7.81598 317.836 8.10199 cv
317.891 8.39502 317.984 8.64502 318.113 8.85498 cv
318.238 9.07001 318.41 9.23401 318.633 9.34802 cv
318.848 9.46899 319.117 9.52698 319.441 9.52301 cv
319.734 9.52698 319.992 9.47302 320.215 9.36298 cv
320.43 9.258 320.609 9.10498 320.75 8.89801 cv
320.891 8.69897 320.992 8.453 321.063 8.164 cv
321.125 7.87903 321.16 7.55103 321.164 7.17603 cv
cp
f
328.969 1.04303 mo
328.965 1.19501 328.961 1.31598 328.953 1.40601 cv
328.941 1.5 328.926 1.57001 328.906 1.617 cv
328.883 1.66803 328.859 1.703 328.836 1.71899 cv
328.809 1.73798 328.781 1.74597 328.75 1.74597 cv
328.711 1.74597 328.668 1.73798 328.629 1.71899 cv
328.582 1.703 328.527 1.68402 328.465 1.65997 cv
328.395 1.64099 328.32 1.62097 328.234 1.60199 cv
328.145 1.586 328.039 1.578 327.922 1.57397 cv
327.777 1.578 327.656 1.59802 327.559 1.64099 cv
327.457 1.68701 327.375 1.758 327.309 1.85199 cv
327.238 1.94897 327.188 2.07397 327.16 2.22699 cv
327.125 2.37903 327.109 2.56598 327.113 2.789 cv
327.113 3.42999 li
328.383 3.42999 li
328.426 3.43402 328.469 3.44501 328.512 3.46899 cv
328.547 3.49597 328.582 3.539 328.609 3.59802 cv
328.633 3.65997 328.652 3.742 328.668 3.84399 cv
328.68 3.94501 328.684 4.07397 328.688 4.22302 cv
328.684 4.51202 328.66 4.71503 328.609 4.836 cv
328.555 4.961 328.477 5.02301 328.383 5.02002 cv
327.113 5.02002 li
327.113 10.645 li
327.109 10.699 327.094 10.742 327.066 10.781 cv
327.031 10.82 326.98 10.855 326.91 10.879 cv
326.836 10.906 326.734 10.922 326.605 10.937 cv
326.473 10.949 326.313 10.957 326.129 10.957 cv
325.941 10.957 325.785 10.949 325.66 10.937 cv
325.531 10.922 325.43 10.906 325.355 10.879 cv
325.277 10.855 325.227 10.82 325.199 10.781 cv
325.168 10.742 325.152 10.699 325.156 10.645 cv
325.156 5.02002 li
324.285 5.02002 li
324.184 5.02301 324.109 4.961 324.063 4.836 cv
324.012 4.71503 323.984 4.51202 323.988 4.22302 cv
323.984 4.07397 323.992 3.94501 324.008 3.84399 cv
324.02 3.742 324.039 3.65997 324.063 3.59802 cv
324.086 3.539 324.117 3.49597 324.156 3.46899 cv
324.195 3.44501 324.238 3.43402 324.293 3.42999 cv
325.156 3.42999 li
325.156 2.84399 li
325.152 2.375 325.199 1.961 325.297 1.60199 cv
325.387 1.24597 325.535 .948975 325.738 .715027 cv
325.938 .47998 326.191 .304993 326.5 .179993 cv
326.809 .0620117 327.172 0 327.598 0 cv
327.793 0 327.984 .0200195 328.172 .0510254 cv
328.352 .0900269 328.496 .125 328.602 .159973 cv
328.703 .203003 328.773 .237976 328.813 .27002 cv
328.848 .304993 328.879 .35498 328.902 .41803 cv
328.926 .484009 328.941 .565979 328.953 .66803 cv
328.961 .77002 328.965 .89502 328.969 1.04303 cv
cp
f
339.516 7.88702 mo
339.512 8.41803 339.414 8.883 339.219 9.28101 cv
339.02 9.68402 338.754 10.02 338.418 10.285 cv
338.078 10.555 337.68 10.754 337.23 10.887 cv
336.777 11.02 336.297 11.086 335.785 11.09 cv
335.434 11.086 335.109 11.059 334.813 11.004 cv
334.512 10.945 334.25 10.879 334.023 10.797 cv
333.793 10.719 333.602 10.633 333.449 10.543 cv
333.297 10.457 333.188 10.379 333.121 10.309 cv
333.051 10.242 333 10.145 332.977 10.02 cv
332.945 9.89502 332.934 9.711 332.934 9.46899 cv
332.934 9.30902 332.938 9.17603 332.949 9.06201 cv
332.957 8.95697 332.973 8.867 333 8.797 cv
333.02 8.72998 333.051 8.68402 333.094 8.65198 cv
333.129 8.62903 333.176 8.61298 333.227 8.60901 cv
333.297 8.61298 333.398 8.65601 333.535 8.73798 cv
333.664 8.828 333.836 8.922 334.047 9.02301 cv
334.254 9.12903 334.5 9.22699 334.789 9.30902 cv
335.074 9.39801 335.41 9.44098 335.793 9.43701 cv
336.043 9.44098 336.266 9.40997 336.461 9.34802 cv
336.656 9.289 336.824 9.203 336.965 9.09399 cv
337.102 8.98401 337.207 8.85199 337.281 8.69098 cv
337.352 8.53101 337.387 8.35199 337.391 8.15198 cv
337.387 7.92603 337.324 7.72998 337.203 7.56201 cv
337.074 7.40198 336.91 7.258 336.715 7.12903 cv
336.512 7.00403 336.285 6.883 336.031 6.77002 cv
335.777 6.65997 335.516 6.54303 335.246 6.414 cv
334.973 6.29303 334.711 6.14801 334.457 5.98798 cv
334.203 5.83197 333.977 5.64502 333.777 5.422 cv
333.574 5.203 333.41 4.94098 333.289 4.63702 cv
333.164 4.336 333.102 3.97699 333.105 3.55499 cv
333.102 3.07397 333.191 2.64801 333.371 2.28101 cv
333.547 1.91803 333.789 1.61298 334.098 1.367 cv
334.398 1.12903 334.758 .948975 335.172 .828003 cv
335.586 .710999 336.023 .651978 336.484 .64801 cv
336.723 .651978 336.961 .66803 337.203 .703003 cv
337.441 .742004 337.664 .79303 337.871 .85199 cv
338.078 .914001 338.262 .984009 338.426 1.05902 cv
338.582 1.14099 338.691 1.203 338.746 1.25403 cv
338.797 1.30902 338.832 1.35498 338.852 1.38702 cv
338.867 1.42603 338.883 1.47302 338.898 1.53101 cv
338.91 1.59399 338.918 1.66803 338.926 1.758 cv
338.93 1.85199 338.934 1.96503 338.934 2.09802 cv
338.934 2.25 338.93 2.37903 338.922 2.47998 cv
338.914 2.586 338.898 2.672 338.883 2.73401 cv
338.859 2.80499 338.836 2.85199 338.805 2.883 cv
338.77 2.914 338.723 2.92999 338.668 2.92999 cv
338.609 2.92999 338.52 2.89502 338.395 2.82001 cv
338.27 2.75 338.113 2.672 337.934 2.58197 cv
337.75 2.5 337.543 2.422 337.305 2.35199 cv
337.063 2.28497 336.797 2.25 336.516 2.24597 cv
336.289 2.25 336.098 2.27698 335.934 2.328 cv
335.766 2.383 335.625 2.45697 335.516 2.55103 cv
335.402 2.64801 335.32 2.76599 335.266 2.89801 cv
335.211 3.039 335.184 3.17999 335.184 3.328 cv
335.184 3.55499 335.242 3.75 335.367 3.90997 cv
335.484 4.07397 335.648 4.21899 335.859 4.34399 cv
336.063 4.47302 336.297 4.59399 336.555 4.703 cv
336.813 4.82001 337.078 4.93701 337.352 5.05902 cv
337.621 5.18701 337.883 5.328 338.145 5.48401 cv
338.402 5.64099 338.637 5.83197 338.84 6.05103 cv
339.043 6.27698 339.203 6.53497 339.328 6.83197 cv
339.449 7.12903 339.512 7.47998 339.516 7.88702 cv
cp
f
347.566 10.645 mo
347.563 10.699 347.551 10.742 347.527 10.781 cv
347.5 10.82 347.453 10.855 347.391 10.879 cv
347.324 10.906 347.238 10.922 347.133 10.937 cv
347.027 10.949 346.895 10.957 346.734 10.957 cv
346.559 10.957 346.418 10.949 346.316 10.937 cv
346.207 10.922 346.125 10.906 346.063 10.879 cv
346 10.855 345.953 10.82 345.93 10.781 cv
345.898 10.742 345.887 10.699 345.891 10.645 cv
345.891 9.84399 li
345.504 10.258 345.113 10.57 344.719 10.777 cv
344.316 10.984 343.906 11.086 343.484 11.09 cv
343.004 11.086 342.602 11.012 342.277 10.855 cv
341.953 10.703 341.691 10.488 341.492 10.219 cv
341.289 9.94897 341.145 9.63702 341.063 9.27698 cv
340.973 8.922 340.93 8.47998 340.934 7.94897 cv
340.934 3.69501 li
340.93 3.64801 340.945 3.60199 340.977 3.55902 cv
341.004 3.52301 341.055 3.492 341.133 3.461 cv
341.207 3.43701 341.309 3.41803 341.438 3.40198 cv
341.563 3.39502 341.719 3.38702 341.91 3.383 cv
342.098 3.38702 342.258 3.39502 342.383 3.40198 cv
342.508 3.41803 342.605 3.43701 342.684 3.461 cv
342.754 3.492 342.809 3.52301 342.844 3.55902 cv
342.871 3.60199 342.887 3.64801 342.891 3.69501 cv
342.891 7.62097 li
342.887 7.98798 342.91 8.26599 342.961 8.45697 cv
343.004 8.64801 343.074 8.81201 343.176 8.94897 cv
343.27 9.09003 343.395 9.19501 343.543 9.27002 cv
343.691 9.34802 343.863 9.38702 344.059 9.383 cv
344.309 9.38702 344.559 9.297 344.813 9.10901 cv
345.063 8.92999 345.332 8.664 345.617 8.31598 cv
345.617 3.69501 li
345.617 3.64801 345.629 3.60199 345.66 3.55902 cv
345.684 3.52301 345.738 3.492 345.816 3.461 cv
345.891 3.43701 345.988 3.41803 346.117 3.40198 cv
346.238 3.39502 346.398 3.38702 346.594 3.383 cv
346.785 3.38702 346.941 3.39502 347.066 3.40198 cv
347.188 3.41803 347.289 3.43701 347.363 3.461 cv
347.434 3.492 347.484 3.52301 347.52 3.55902 cv
347.547 3.60199 347.563 3.64801 347.566 3.69501 cv
cp
f
356.492 7.07397 mo
356.492 7.69501 356.422 8.25403 356.289 8.74597 cv
356.148 9.242 355.953 9.65997 355.703 10.008 cv
355.445 10.355 355.133 10.625 354.766 10.809 cv
354.391 10.996 353.969 11.086 353.5 11.09 cv
353.262 11.086 353.043 11.062 352.844 11.023 cv
352.637 10.977 352.445 10.91 352.262 10.809 cv
352.078 10.715 351.895 10.59 351.719 10.434 cv
351.535 10.285 351.352 10.102 351.168 9.89099 cv
351.168 10.645 li
351.164 10.707 351.152 10.754 351.125 10.789 cv
351.094 10.832 351.047 10.863 350.984 10.887 cv
350.918 10.91 350.828 10.926 350.723 10.941 cv
350.613 10.949 350.484 10.957 350.328 10.957 cv
350.164 10.957 350.027 10.949 349.926 10.941 cv
349.816 10.926 349.73 10.91 349.668 10.887 cv
349.598 10.863 349.555 10.832 349.531 10.789 cv
349.504 10.754 349.488 10.707 349.492 10.645 cv
349.492 .39801 li
349.488 .348022 349.504 .301025 349.539 .257996 cv
349.566 .218994 349.621 .184021 349.699 .151978 cv
349.773 .125 349.875 .10498 350 .0859985 cv
350.125 .0739746 350.281 .065979 350.477 .0620117 cv
350.664 .065979 350.824 .0739746 350.949 .0859985 cv
351.074 .10498 351.172 .125 351.25 .151978 cv
351.32 .184021 351.375 .218994 351.41 .257996 cv
351.438 .301025 351.453 .348022 351.457 .39801 cv
351.457 4.23798 li
351.633 4.06201 351.809 3.914 351.988 3.789 cv
352.16 3.66803 352.336 3.56201 352.516 3.47998 cv
352.688 3.40198 352.871 3.34399 353.063 3.30499 cv
353.246 3.27002 353.445 3.25403 353.656 3.25 cv
354.168 3.25403 354.602 3.35498 354.965 3.55902 cv
355.32 3.76599 355.613 4.04303 355.84 4.39099 cv
356.063 4.73798 356.227 5.14502 356.336 5.60901 cv
356.438 6.07397 356.492 6.56201 356.492 7.07397 cv
cp
354.457 7.21503 mo
354.453 6.922 354.43 6.63702 354.391 6.35901 cv
354.344 6.086 354.27 5.84399 354.16 5.62903 cv
354.051 5.41803 353.906 5.24597 353.734 5.117 cv
353.559 4.992 353.34 4.92999 353.078 4.92603 cv
352.945 4.92999 352.82 4.94501 352.695 4.97998 cv
352.57 5.02002 352.441 5.08197 352.309 5.16803 cv
352.176 5.258 352.039 5.375 351.902 5.51202 cv
351.758 5.65198 351.609 5.82397 351.457 6.03101 cv
351.457 8.34003 li
351.73 8.69501 351.992 8.96503 352.246 9.14502 cv
352.496 9.33197 352.762 9.422 353.039 9.422 cv
353.293 9.422 353.508 9.35901 353.688 9.22699 cv
353.859 9.10199 354.008 8.93402 354.125 8.72302 cv
354.242 8.52002 354.324 8.28101 354.379 8.01202 cv
354.426 7.75 354.453 7.48401 354.457 7.21503 cv
cp
f
361.645 6.992 mo
361.641 7.29303 361.613 7.50403 361.559 7.62097 cv
361.5 7.74597 361.41 7.80499 361.285 7.80103 cv
358.043 7.80103 li
357.914 7.80499 357.82 7.742 357.766 7.617 cv
357.703 7.49597 357.676 7.289 357.68 6.992 cv
357.676 6.703 357.703 6.49597 357.766 6.375 cv
357.82 6.258 357.914 6.19897 358.043 6.19501 cv
361.285 6.19501 li
361.348 6.19897 361.398 6.211 361.445 6.23401 cv
361.484 6.26202 361.523 6.30902 361.559 6.367 cv
361.586 6.43402 361.609 6.51599 361.625 6.617 cv
361.637 6.72302 361.641 6.84802 361.645 6.992 cv
cp
f
365.297 10.629 mo
365.293 10.684 365.277 10.73 365.246 10.77 cv
365.211 10.812 365.152 10.848 365.078 10.871 cv
364.996 10.898 364.895 10.918 364.766 10.934 cv
364.633 10.949 364.465 10.957 364.27 10.957 cv
364.066 10.957 363.902 10.949 363.773 10.934 cv
363.637 10.918 363.531 10.898 363.457 10.871 cv
363.375 10.848 363.32 10.812 363.289 10.77 cv
363.254 10.73 363.234 10.684 363.238 10.629 cv
363.238 1.10498 li
363.234 1.05902 363.254 1.01202 363.289 .965027 cv
363.32 .926025 363.375 .890991 363.461 .862976 cv
363.539 .840027 363.645 .820007 363.777 .801025 cv
363.902 .789001 364.066 .781006 364.27 .776978 cv
364.465 .781006 364.633 .789001 364.766 .801025 cv
364.895 .820007 364.996 .840027 365.078 .862976 cv
365.152 .890991 365.211 .926025 365.246 .965027 cv
365.277 1.01202 365.293 1.05902 365.297 1.10498 cv
cp
f
378.375 10.645 mo
378.371 10.699 378.355 10.742 378.328 10.781 cv
378.293 10.82 378.242 10.855 378.172 10.879 cv
378.098 10.906 377.996 10.922 377.875 10.937 cv
377.75 10.949 377.594 10.957 377.402 10.957 cv
377.203 10.957 377.043 10.949 376.918 10.937 cv
376.793 10.922 376.691 10.906 376.617 10.879 cv
376.539 10.855 376.488 10.82 376.461 10.781 cv
376.434 10.742 376.418 10.699 376.422 10.645 cv
376.422 6.52301 li
376.418 6.29303 376.398 6.078 376.355 5.883 cv
376.309 5.69098 376.238 5.52698 376.152 5.39099 cv
376.059 5.25403 375.945 5.14801 375.809 5.07001 cv
375.668 4.99597 375.504 4.95697 375.313 4.95697 cv
375.078 4.95697 374.84 5.05103 374.602 5.22998 cv
374.363 5.414 374.105 5.67603 373.824 6.02301 cv
373.824 10.645 li
373.824 10.699 373.809 10.742 373.777 10.781 cv
373.746 10.82 373.691 10.855 373.617 10.879 cv
373.539 10.906 373.438 10.922 373.316 10.937 cv
373.191 10.949 373.039 10.957 372.852 10.957 cv
372.656 10.957 372.496 10.949 372.375 10.937 cv
372.246 10.922 372.145 10.906 372.074 10.879 cv
371.996 10.855 371.945 10.82 371.914 10.781 cv
371.883 10.742 371.867 10.699 371.867 10.645 cv
371.867 6.52301 li
371.867 6.29303 371.844 6.078 371.801 5.883 cv
371.758 5.69098 371.691 5.52698 371.605 5.39099 cv
371.512 5.25403 371.398 5.14801 371.262 5.07001 cv
371.117 4.99597 370.953 4.95697 370.77 4.95697 cv
370.527 4.95697 370.289 5.05103 370.051 5.22998 cv
369.813 5.414 369.555 5.67603 369.281 6.02301 cv
369.281 10.645 li
369.277 10.699 369.262 10.742 369.234 10.781 cv
369.199 10.82 369.145 10.855 369.074 10.879 cv
368.996 10.906 368.898 10.922 368.773 10.937 cv
368.648 10.949 368.488 10.957 368.301 10.957 cv
368.105 10.957 367.949 10.949 367.824 10.937 cv
367.699 10.922 367.598 10.906 367.523 10.879 cv
367.445 10.855 367.391 10.82 367.363 10.781 cv
367.328 10.742 367.313 10.699 367.316 10.645 cv
367.316 3.69501 li
367.313 3.64801 367.328 3.60199 367.355 3.55902 cv
367.379 3.52301 367.426 3.492 367.496 3.461 cv
367.563 3.43701 367.648 3.41803 367.758 3.40198 cv
367.863 3.39502 367.996 3.38702 368.16 3.383 cv
368.324 3.38702 368.461 3.39502 368.57 3.40198 cv
368.676 3.41803 368.762 3.43701 368.824 3.461 cv
368.883 3.492 368.926 3.52301 368.953 3.55902 cv
368.977 3.60199 368.988 3.64801 368.992 3.69501 cv
368.992 4.49597 li
369.375 4.086 369.758 3.77301 370.141 3.56201 cv
370.52 3.35498 370.922 3.25403 371.34 3.25 cv
371.625 3.25403 371.879 3.28101 372.109 3.34003 cv
372.336 3.40198 372.543 3.48798 372.723 3.59802 cv
372.902 3.711 373.055 3.84802 373.184 4 cv
373.313 4.15601 373.422 4.328 373.512 4.52002 cv
373.719 4.297 373.922 4.10498 374.125 3.94501 cv
374.32 3.78497 374.52 3.65198 374.715 3.55103 cv
374.91 3.44897 375.105 3.375 375.301 3.32397 cv
375.496 3.27698 375.695 3.25403 375.898 3.25 cv
376.359 3.25403 376.746 3.33197 377.066 3.48401 cv
377.379 3.64502 377.637 3.85498 377.832 4.12097 cv
378.027 4.39099 378.164 4.703 378.25 5.05902 cv
378.328 5.41803 378.371 5.797 378.375 6.19501 cv
cp
f
386.219 10.668 mo
386.215 10.746 386.188 10.801 386.141 10.84 cv
386.086 10.883 386.004 10.91 385.895 10.93 cv
385.777 10.945 385.613 10.957 385.398 10.957 cv
385.16 10.957 384.988 10.945 384.887 10.93 cv
384.777 10.91 384.703 10.883 384.664 10.84 cv
384.617 10.801 384.598 10.746 384.598 10.668 cv
384.598 10.117 li
384.309 10.426 383.98 10.664 383.617 10.832 cv
383.25 11.004 382.844 11.086 382.398 11.09 cv
382.027 11.086 381.688 11.039 381.379 10.945 cv
381.07 10.852 380.805 10.711 380.578 10.516 cv
380.352 10.328 380.176 10.094 380.051 9.81201 cv
379.926 9.53497 379.863 9.20697 379.867 8.828 cv
379.863 8.42999 379.941 8.078 380.102 7.77301 cv
380.258 7.47699 380.496 7.22998 380.813 7.03497 cv
381.125 6.84399 381.516 6.69897 381.984 6.60199 cv
382.453 6.51202 382.996 6.46503 383.613 6.461 cv
384.293 6.461 li
384.293 6.039 li
384.293 5.82397 384.27 5.633 384.227 5.46899 cv
384.18 5.30902 384.105 5.172 384.008 5.05902 cv
383.902 4.953 383.77 4.87097 383.602 4.81598 cv
383.43 4.76599 383.219 4.742 382.977 4.73798 cv
382.645 4.742 382.352 4.77698 382.098 4.84802 cv
381.836 4.922 381.609 5.00403 381.414 5.09003 cv
381.215 5.18402 381.051 5.26202 380.922 5.33197 cv
380.785 5.40601 380.676 5.44501 380.598 5.44098 cv
380.535 5.44501 380.484 5.42603 380.445 5.38702 cv
380.398 5.35199 380.363 5.30103 380.336 5.22998 cv
380.305 5.16803 380.281 5.08197 380.27 4.97998 cv
380.25 4.883 380.242 4.77301 380.246 4.65198 cv
380.242 4.492 380.258 4.367 380.285 4.27002 cv
380.309 4.17999 380.355 4.09399 380.434 4.01599 cv
380.504 3.94098 380.633 3.85901 380.816 3.77002 cv
380.996 3.67999 381.207 3.59399 381.453 3.51599 cv
381.695 3.43701 381.965 3.375 382.254 3.32397 cv
382.543 3.27698 382.84 3.25403 383.148 3.25 cv
383.691 3.25403 384.156 3.30499 384.543 3.40997 cv
384.93 3.52002 385.25 3.68402 385.5 3.90198 cv
385.75 4.12097 385.93 4.40601 386.047 4.75403 cv
386.156 5.10498 386.215 5.52002 386.219 5.992 cv
cp
384.293 7.69098 mo
383.543 7.69098 li
383.227 7.69501 382.957 7.71899 382.734 7.76202 cv
382.508 7.81201 382.324 7.883 382.188 7.97302 cv
382.043 8.07001 381.941 8.18402 381.879 8.31201 cv
381.813 8.44897 381.777 8.59802 381.781 8.76599 cv
381.777 9.05902 381.871 9.289 382.059 9.453 cv
382.242 9.62097 382.5 9.703 382.828 9.703 cv
383.102 9.703 383.352 9.633 383.586 9.492 cv
383.813 9.35199 384.051 9.14801 384.293 8.875 cv
cp
f
394.441 4.17603 mo
394.438 4.42999 394.41 4.61298 394.355 4.72998 cv
394.297 4.85199 394.227 4.90997 394.148 4.90997 cv
393.328 4.90997 li
393.441 5.03497 393.523 5.17999 393.574 5.336 cv
393.621 5.49597 393.645 5.65997 393.648 5.828 cv
393.645 6.23798 393.578 6.59802 393.445 6.90997 cv
393.309 7.22699 393.113 7.492 392.863 7.703 cv
392.609 7.922 392.309 8.086 391.953 8.19501 cv
391.594 8.31201 391.195 8.367 390.766 8.36298 cv
390.539 8.367 390.328 8.34003 390.125 8.28101 cv
389.922 8.22998 389.766 8.16803 389.656 8.09003 cv
389.594 8.15997 389.535 8.23798 389.488 8.33197 cv
389.438 8.42603 389.414 8.53101 389.418 8.64099 cv
389.414 8.797 389.48 8.91803 389.613 9.01202 cv
389.742 9.10901 389.93 9.164 390.172 9.172 cv
391.863 9.23401 li
392.258 9.25 392.609 9.30902 392.918 9.40198 cv
393.227 9.50403 393.488 9.63702 393.699 9.80902 cv
393.91 9.98401 394.07 10.195 394.18 10.437 cv
394.289 10.684 394.344 10.957 394.348 11.27 cv
394.344 11.605 394.27 11.93 394.121 12.238 cv
393.973 12.539 393.746 12.801 393.445 13.027 cv
393.141 13.246 392.762 13.426 392.309 13.559 cv
391.852 13.687 391.32 13.75 390.719 13.754 cv
390.121 13.75 389.617 13.703 389.199 13.613 cv
388.781 13.516 388.438 13.387 388.172 13.223 cv
387.902 13.055 387.707 12.855 387.59 12.629 cv
387.465 12.395 387.406 12.141 387.406 11.867 cv
387.406 11.695 387.426 11.535 387.473 11.379 cv
387.512 11.223 387.578 11.07 387.668 10.93 cv
387.75 10.785 387.855 10.652 387.98 10.52 cv
388.105 10.391 388.246 10.266 388.41 10.145 cv
388.184 10.031 388.012 9.87097 387.891 9.65997 cv
387.77 9.45697 387.711 9.22998 387.711 8.98401 cv
387.711 8.68402 387.777 8.40601 387.918 8.14801 cv
388.055 7.89801 388.238 7.66803 388.465 7.46503 cv
388.281 7.28497 388.137 7.07001 388.027 6.81201 cv
387.918 6.56201 387.863 6.242 387.867 5.85901 cv
387.863 5.45697 387.934 5.09802 388.078 4.77301 cv
388.219 4.45697 388.418 4.18701 388.676 3.96503 cv
388.93 3.74597 389.234 3.57397 389.586 3.45697 cv
389.938 3.34003 390.328 3.28101 390.758 3.28101 cv
390.977 3.28101 391.184 3.297 391.383 3.32001 cv
391.582 3.35199 391.77 3.38702 391.941 3.42999 cv
394.148 3.42999 li
394.23 3.43402 394.301 3.492 394.359 3.60199 cv
394.41 3.71899 394.438 3.90997 394.441 4.17603 cv
cp
391.926 5.82001 mo
391.922 5.44897 391.82 5.15997 391.613 4.94897 cv
391.402 4.74597 391.109 4.64099 390.734 4.63702 cv
390.539 4.64099 390.367 4.672 390.227 4.73401 cv
390.078 4.80103 389.957 4.89099 389.863 5 cv
389.762 5.11298 389.691 5.242 389.648 5.39099 cv
389.598 5.539 389.574 5.69501 389.578 5.85199 cv
389.574 6.211 389.68 6.48798 389.891 6.69098 cv
390.098 6.89801 390.387 7.00403 390.758 7 cv
390.953 7.00403 391.121 6.97302 391.27 6.90601 cv
391.41 6.84802 391.531 6.76202 391.633 6.64801 cv
391.727 6.54303 391.801 6.414 391.852 6.27002 cv
391.898 6.12903 391.922 5.97998 391.926 5.82001 cv
cp
392.387 11.371 mo
392.387 11.133 392.293 10.957 392.105 10.832 cv
391.918 10.711 391.66 10.641 391.332 10.629 cv
389.938 10.59 li
389.801 10.691 389.691 10.785 389.613 10.875 cv
389.531 10.965 389.469 11.051 389.422 11.137 cv
389.371 11.219 389.336 11.301 389.324 11.379 cv
389.305 11.457 389.297 11.535 389.301 11.621 cv
389.297 11.875 389.43 12.074 389.691 12.211 cv
389.953 12.344 390.324 12.41 390.805 12.414 cv
391.098 12.41 391.344 12.379 391.551 12.324 cv
391.75 12.262 391.914 12.184 392.043 12.086 cv
392.164 11.984 392.254 11.875 392.309 11.754 cv
392.359 11.633 392.387 11.504 392.387 11.371 cv
cp
f
402.055 6.96899 mo
402.051 7.20697 402 7.383 401.895 7.49597 cv
401.785 7.61298 401.637 7.672 401.457 7.66803 cv
397.223 7.66803 li
397.219 7.96899 397.254 8.23798 397.328 8.47699 cv
397.395 8.71899 397.508 8.922 397.664 9.09003 cv
397.816 9.26202 398.012 9.39099 398.254 9.47699 cv
398.492 9.56598 398.781 9.60901 399.125 9.60901 cv
399.465 9.60901 399.766 9.586 400.027 9.53497 cv
400.285 9.48798 400.512 9.43402 400.703 9.37097 cv
400.891 9.31201 401.047 9.258 401.176 9.20697 cv
401.297 9.15997 401.398 9.13702 401.48 9.133 cv
401.523 9.13702 401.563 9.14502 401.598 9.15997 cv
401.625 9.17999 401.652 9.211 401.672 9.258 cv
401.691 9.30499 401.703 9.37097 401.715 9.45697 cv
401.719 9.54303 401.723 9.65198 401.727 9.78101 cv
401.723 9.89801 401.723 9.99597 401.719 10.074 cv
401.711 10.156 401.703 10.223 401.695 10.277 cv
401.684 10.336 401.668 10.387 401.648 10.422 cv
401.629 10.465 401.602 10.5 401.57 10.535 cv
401.535 10.574 401.441 10.625 401.293 10.684 cv
401.137 10.75 400.945 10.812 400.715 10.867 cv
400.477 10.93 400.207 10.977 399.91 11.023 cv
399.605 11.062 399.285 11.086 398.945 11.09 cv
398.324 11.086 397.781 11.012 397.32 10.855 cv
396.852 10.703 396.465 10.465 396.156 10.148 cv
395.84 9.83197 395.605 9.43402 395.457 8.94897 cv
395.301 8.46899 395.227 7.90198 395.23 7.24597 cv
395.227 6.633 395.305 6.07397 395.469 5.578 cv
395.625 5.08197 395.859 4.664 396.172 4.31598 cv
396.477 3.97302 396.852 3.70697 397.289 3.52301 cv
397.727 3.34399 398.219 3.25403 398.773 3.25 cv
399.352 3.25403 399.852 3.34003 400.266 3.508 cv
400.68 3.68402 401.016 3.922 401.281 4.22302 cv
401.543 4.52698 401.738 4.88702 401.867 5.30103 cv
401.988 5.71899 402.051 6.16803 402.055 6.65601 cv
cp
400.152 6.40601 mo
400.164 5.85498 400.055 5.422 399.82 5.10901 cv
399.586 4.797 399.219 4.64099 398.727 4.63702 cv
398.477 4.64099 398.262 4.68701 398.078 4.77698 cv
397.891 4.875 397.738 5 397.617 5.15601 cv
397.492 5.31598 397.398 5.50403 397.336 5.71899 cv
397.27 5.93402 397.23 6.164 397.223 6.40601 cv
cp
f
408.555 8.67999 mo
408.551 9.078 408.477 9.42603 408.332 9.72699 cv
408.184 10.027 407.977 10.281 407.707 10.48 cv
407.434 10.687 407.113 10.836 406.746 10.937 cv
406.379 11.035 405.977 11.086 405.547 11.09 cv
405.281 11.086 405.035 11.066 404.801 11.031 cv
404.566 10.988 404.355 10.941 404.168 10.883 cv
403.98 10.824 403.824 10.762 403.699 10.699 cv
403.574 10.637 403.48 10.578 403.426 10.523 cv
403.367 10.469 403.324 10.387 403.297 10.27 cv
403.262 10.156 403.246 9.97998 403.25 9.75 cv
403.246 9.60199 403.254 9.47998 403.266 9.38702 cv
403.273 9.297 403.289 9.22699 403.313 9.16803 cv
403.332 9.117 403.355 9.078 403.391 9.05902 cv
403.418 9.04303 403.457 9.03497 403.504 9.03101 cv
403.559 9.03497 403.645 9.06598 403.758 9.12903 cv
403.867 9.19501 404.004 9.27002 404.176 9.34399 cv
404.34 9.42603 404.535 9.49597 404.754 9.56201 cv
404.973 9.633 405.223 9.66803 405.508 9.664 cv
405.684 9.66803 405.84 9.64801 405.98 9.60901 cv
406.113 9.57397 406.234 9.52301 406.34 9.453 cv
406.438 9.38702 406.512 9.30103 406.566 9.19501 cv
406.613 9.09399 406.641 8.97302 406.645 8.836 cv
406.641 8.67999 406.594 8.547 406.5 8.43701 cv
406.406 8.328 406.277 8.22998 406.121 8.14502 cv
405.957 8.06201 405.777 7.98401 405.582 7.90997 cv
405.379 7.84003 405.176 7.76202 404.965 7.66803 cv
404.754 7.58197 404.547 7.47998 404.352 7.36298 cv
404.148 7.25403 403.969 7.11298 403.813 6.94501 cv
403.648 6.78101 403.523 6.58197 403.43 6.34399 cv
403.336 6.11298 403.289 5.83197 403.289 5.5 cv
403.289 5.172 403.352 4.867 403.48 4.586 cv
403.609 4.31201 403.797 4.07397 404.043 3.875 cv
404.285 3.67999 404.582 3.52698 404.934 3.414 cv
405.281 3.30902 405.676 3.25403 406.117 3.25 cv
406.332 3.25403 406.543 3.27002 406.75 3.297 cv
406.953 3.33197 407.141 3.37097 407.309 3.414 cv
407.473 3.46503 407.613 3.51599 407.73 3.56598 cv
407.844 3.625 407.926 3.672 407.977 3.70697 cv
408.023 3.75 408.059 3.789 408.082 3.82397 cv
408.102 3.867 408.113 3.914 408.125 3.96503 cv
408.133 4.02002 408.145 4.086 408.152 4.164 cv
408.16 4.25 408.164 4.34802 408.164 4.46503 cv
408.164 4.60498 408.16 4.72302 408.152 4.80902 cv
408.145 4.90198 408.129 4.97302 408.113 5.02002 cv
408.094 5.07397 408.07 5.10901 408.043 5.125 cv
408.008 5.14801 407.973 5.15601 407.934 5.15198 cv
407.883 5.15601 407.809 5.12903 407.715 5.07001 cv
407.613 5.02002 407.492 4.961 407.344 4.89502 cv
407.195 4.836 407.023 4.77698 406.828 4.71899 cv
406.633 4.66803 406.41 4.64099 406.164 4.63702 cv
405.984 4.64099 405.832 4.65997 405.703 4.69098 cv
405.57 4.72998 405.461 4.78101 405.383 4.84802 cv
405.297 4.91803 405.234 4.99597 405.195 5.086 cv
405.148 5.17999 405.129 5.27698 405.133 5.37903 cv
405.129 5.539 405.18 5.67603 405.281 5.78101 cv
405.379 5.89502 405.508 5.98798 405.672 6.07001 cv
405.832 6.15601 406.016 6.23401 406.223 6.30499 cv
406.426 6.37903 406.633 6.461 406.844 6.54303 cv
407.051 6.633 407.258 6.72998 407.469 6.84399 cv
407.672 6.95697 407.855 7.09802 408.016 7.26202 cv
408.176 7.42999 408.305 7.62903 408.406 7.85901 cv
408.5 8.09399 408.551 8.367 408.555 8.67999 cv
cp
f
417.324 6.992 mo
417.32 7.29303 417.293 7.50403 417.238 7.62097 cv
417.18 7.74597 417.09 7.80499 416.965 7.80103 cv
413.723 7.80103 li
413.594 7.80499 413.5 7.742 413.445 7.617 cv
413.383 7.49597 413.355 7.289 413.359 6.992 cv
413.355 6.703 413.383 6.49597 413.445 6.375 cv
413.5 6.258 413.594 6.19897 413.723 6.19501 cv
416.965 6.19501 li
417.027 6.19897 417.078 6.211 417.125 6.23401 cv
417.164 6.26202 417.203 6.30902 417.238 6.367 cv
417.266 6.43402 417.289 6.51599 417.305 6.617 cv
417.316 6.72302 417.32 6.84802 417.324 6.992 cv
cp
f
430 10.645 mo
430 10.707 429.988 10.754 429.969 10.789 cv
429.949 10.832 429.902 10.863 429.824 10.887 cv
429.746 10.91 429.629 10.926 429.48 10.941 cv
429.324 10.949 429.121 10.957 428.863 10.957 cv
428.645 10.957 428.469 10.949 428.34 10.941 cv
428.211 10.926 428.109 10.91 428.035 10.883 cv
427.957 10.855 427.902 10.82 427.875 10.773 cv
427.84 10.734 427.816 10.68 427.797 10.613 cv
426.891 8.36298 li
426.781 8.10901 426.676 7.883 426.574 7.68402 cv
426.465 7.48798 426.352 7.32397 426.227 7.19098 cv
426.098 7.06201 425.949 6.961 425.785 6.89099 cv
425.617 6.82397 425.426 6.79303 425.211 6.789 cv
424.57 6.789 li
424.57 10.629 li
424.566 10.684 424.551 10.73 424.52 10.77 cv
424.484 10.812 424.43 10.848 424.352 10.871 cv
424.273 10.898 424.168 10.918 424.039 10.934 cv
423.906 10.949 423.742 10.957 423.543 10.957 cv
423.344 10.957 423.176 10.949 423.047 10.934 cv
422.91 10.918 422.805 10.898 422.73 10.871 cv
422.648 10.848 422.594 10.812 422.566 10.77 cv
422.531 10.73 422.516 10.684 422.52 10.629 cv
422.52 1.47302 li
422.516 1.24597 422.574 1.08197 422.695 .97699 cv
422.809 .879028 422.953 .828003 423.129 .823975 cv
425.738 .823975 li
426 .828003 426.219 .83197 426.395 .840027 cv
426.563 .85199 426.719 .862976 426.863 .879028 cv
427.266 .937012 427.629 1.039 427.953 1.17603 cv
428.277 1.32001 428.555 1.50403 428.781 1.72699 cv
429.008 1.95697 429.18 2.22302 429.301 2.53101 cv
429.418 2.84003 429.477 3.19501 429.48 3.59399 cv
429.477 3.93402 429.434 4.242 429.352 4.51599 cv
429.262 4.797 429.137 5.04303 428.973 5.26202 cv
428.805 5.47998 428.598 5.672 428.355 5.828 cv
428.109 5.992 427.832 6.12097 427.523 6.21899 cv
427.672 6.29303 427.816 6.383 427.949 6.48401 cv
428.082 6.59399 428.203 6.71899 428.32 6.86298 cv
428.434 7.01202 428.547 7.17999 428.652 7.367 cv
428.754 7.55902 428.855 7.77301 428.957 8.01202 cv
429.809 10 li
429.883 10.199 429.934 10.34 429.961 10.43 cv
429.984 10.523 430 10.598 430 10.645 cv
cp
427.359 3.80499 mo
427.355 3.47302 427.281 3.19098 427.133 2.961 cv
426.98 2.73401 426.734 2.57397 426.395 2.47699 cv
426.289 2.453 426.172 2.42999 426.039 2.414 cv
425.906 2.39801 425.723 2.39099 425.488 2.39099 cv
424.57 2.39099 li
424.57 5.25403 li
425.613 5.25403 li
425.902 5.258 426.16 5.22302 426.379 5.14801 cv
426.598 5.08197 426.777 4.97998 426.922 4.85199 cv
427.066 4.72699 427.176 4.57397 427.25 4.39502 cv
427.32 4.21899 427.355 4.02301 427.359 3.80499 cv
cp
f
437.586 6.96899 mo
437.582 7.20697 437.531 7.383 437.426 7.49597 cv
437.316 7.61298 437.168 7.672 436.988 7.66803 cv
432.754 7.66803 li
432.75 7.96899 432.785 8.23798 432.859 8.47699 cv
432.926 8.71899 433.039 8.922 433.195 9.09003 cv
433.348 9.26202 433.543 9.39099 433.785 9.47699 cv
434.023 9.56598 434.313 9.60901 434.656 9.60901 cv
434.996 9.60901 435.297 9.586 435.559 9.53497 cv
435.816 9.48798 436.043 9.43402 436.234 9.37097 cv
436.422 9.31201 436.578 9.258 436.707 9.20697 cv
436.828 9.15997 436.93 9.13702 437.012 9.133 cv
437.055 9.13702 437.094 9.14502 437.129 9.15997 cv
437.156 9.17999 437.184 9.211 437.203 9.258 cv
437.223 9.30499 437.234 9.37097 437.246 9.45697 cv
437.25 9.54303 437.254 9.65198 437.258 9.78101 cv
437.254 9.89801 437.254 9.99597 437.25 10.074 cv
437.242 10.156 437.234 10.223 437.227 10.277 cv
437.215 10.336 437.199 10.387 437.18 10.422 cv
437.16 10.465 437.133 10.5 437.102 10.535 cv
437.066 10.574 436.973 10.625 436.824 10.684 cv
436.668 10.75 436.477 10.812 436.246 10.867 cv
436.008 10.93 435.738 10.977 435.441 11.023 cv
435.137 11.062 434.816 11.086 434.477 11.09 cv
433.855 11.086 433.313 11.012 432.852 10.855 cv
432.383 10.703 431.996 10.465 431.688 10.148 cv
431.371 9.83197 431.137 9.43402 430.988 8.94897 cv
430.832 8.46899 430.758 7.90198 430.762 7.24597 cv
430.758 6.633 430.836 6.07397 431 5.578 cv
431.156 5.08197 431.391 4.664 431.703 4.31598 cv
432.008 3.97302 432.383 3.70697 432.82 3.52301 cv
433.258 3.34399 433.75 3.25403 434.305 3.25 cv
434.883 3.25403 435.383 3.34003 435.797 3.508 cv
436.211 3.68402 436.547 3.922 436.813 4.22302 cv
437.074 4.52698 437.27 4.88702 437.398 5.30103 cv
437.52 5.71899 437.582 6.16803 437.586 6.65601 cv
cp
435.684 6.40601 mo
435.695 5.85498 435.586 5.422 435.352 5.10901 cv
435.117 4.797 434.75 4.64099 434.258 4.63702 cv
434.008 4.64099 433.793 4.68701 433.609 4.77698 cv
433.422 4.875 433.27 5 433.148 5.15601 cv
433.023 5.31598 432.93 5.50403 432.867 5.71899 cv
432.801 5.93402 432.762 6.164 432.754 6.40601 cv
cp
f
450.25 10.645 mo
450.246 10.699 450.23 10.742 450.203 10.781 cv
450.168 10.82 450.117 10.855 450.047 10.879 cv
449.973 10.906 449.871 10.922 449.75 10.937 cv
449.625 10.949 449.469 10.957 449.277 10.957 cv
449.078 10.957 448.918 10.949 448.793 10.937 cv
448.668 10.922 448.566 10.906 448.492 10.879 cv
448.414 10.855 448.363 10.82 448.336 10.781 cv
448.309 10.742 448.293 10.699 448.297 10.645 cv
448.297 6.52301 li
448.293 6.29303 448.273 6.078 448.23 5.883 cv
448.184 5.69098 448.113 5.52698 448.027 5.39099 cv
447.934 5.25403 447.82 5.14801 447.684 5.07001 cv
447.543 4.99597 447.379 4.95697 447.188 4.95697 cv
446.953 4.95697 446.715 5.05103 446.477 5.22998 cv
446.238 5.414 445.98 5.67603 445.699 6.02301 cv
445.699 10.645 li
445.699 10.699 445.684 10.742 445.652 10.781 cv
445.621 10.82 445.566 10.855 445.492 10.879 cv
445.414 10.906 445.313 10.922 445.191 10.937 cv
445.066 10.949 444.914 10.957 444.727 10.957 cv
444.531 10.957 444.371 10.949 444.25 10.937 cv
444.121 10.922 444.02 10.906 443.949 10.879 cv
443.871 10.855 443.82 10.82 443.789 10.781 cv
443.758 10.742 443.742 10.699 443.742 10.645 cv
443.742 6.52301 li
443.742 6.29303 443.719 6.078 443.676 5.883 cv
443.633 5.69098 443.566 5.52698 443.48 5.39099 cv
443.387 5.25403 443.273 5.14801 443.137 5.07001 cv
442.992 4.99597 442.828 4.95697 442.645 4.95697 cv
442.402 4.95697 442.164 5.05103 441.926 5.22998 cv
441.688 5.414 441.43 5.67603 441.156 6.02301 cv
441.156 10.645 li
441.152 10.699 441.137 10.742 441.109 10.781 cv
441.074 10.82 441.02 10.855 440.949 10.879 cv
440.871 10.906 440.773 10.922 440.648 10.937 cv
440.523 10.949 440.363 10.957 440.176 10.957 cv
439.98 10.957 439.824 10.949 439.699 10.937 cv
439.574 10.922 439.473 10.906 439.398 10.879 cv
439.32 10.855 439.266 10.82 439.238 10.781 cv
439.203 10.742 439.188 10.699 439.191 10.645 cv
439.191 3.69501 li
439.188 3.64801 439.203 3.60199 439.23 3.55902 cv
439.254 3.52301 439.301 3.492 439.371 3.461 cv
439.438 3.43701 439.523 3.41803 439.633 3.40198 cv
439.738 3.39502 439.871 3.38702 440.035 3.383 cv
440.199 3.38702 440.336 3.39502 440.445 3.40198 cv
440.551 3.41803 440.637 3.43701 440.699 3.461 cv
440.758 3.492 440.801 3.52301 440.828 3.55902 cv
440.852 3.60199 440.863 3.64801 440.867 3.69501 cv
440.867 4.49597 li
441.25 4.086 441.633 3.77301 442.016 3.56201 cv
442.395 3.35498 442.797 3.25403 443.215 3.25 cv
443.5 3.25403 443.754 3.28101 443.984 3.34003 cv
444.211 3.40198 444.418 3.48798 444.598 3.59802 cv
444.777 3.711 444.93 3.84802 445.059 4 cv
445.188 4.15601 445.297 4.328 445.387 4.52002 cv
445.594 4.297 445.797 4.10498 446 3.94501 cv
446.195 3.78497 446.395 3.65198 446.59 3.55103 cv
446.785 3.44897 446.98 3.375 447.176 3.32397 cv
447.371 3.27698 447.57 3.25403 447.773 3.25 cv
448.234 3.25403 448.621 3.33197 448.941 3.48401 cv
449.254 3.64502 449.512 3.85498 449.707 4.12097 cv
449.902 4.39099 450.039 4.703 450.125 5.05902 cv
450.203 5.41803 450.246 5.797 450.25 6.19501 cv
cp
f
459.195 7.09802 mo
459.191 7.69501 459.113 8.23798 458.961 8.72302 cv
458.801 9.21503 458.566 9.633 458.25 9.98401 cv
457.934 10.336 457.535 10.609 457.059 10.801 cv
456.578 10.992 456.02 11.086 455.383 11.09 cv
454.762 11.086 454.223 11.004 453.77 10.832 cv
453.309 10.664 452.93 10.414 452.633 10.086 cv
452.328 9.76202 452.105 9.35901 451.961 8.87903 cv
451.816 8.40198 451.746 7.85498 451.746 7.23798 cv
451.746 6.64801 451.824 6.10901 451.98 5.617 cv
452.137 5.12903 452.375 4.70697 452.695 4.35498 cv
453.012 4.008 453.406 3.73401 453.883 3.539 cv
454.355 3.34802 454.914 3.25403 455.555 3.25 cv
456.18 3.25403 456.719 3.336 457.176 3.50403 cv
457.633 3.67603 458.012 3.92603 458.309 4.25 cv
458.605 4.578 458.828 4.97998 458.977 5.45697 cv
459.121 5.93701 459.191 6.48401 459.195 7.09802 cv
cp
457.176 7.17603 mo
457.172 6.84003 457.145 6.52301 457.094 6.22998 cv
457.035 5.94501 456.941 5.69501 456.816 5.47998 cv
456.684 5.27002 456.512 5.10199 456.301 4.97998 cv
456.082 4.86298 455.813 4.80499 455.484 4.80103 cv
455.195 4.80499 454.941 4.85901 454.723 4.961 cv
454.504 5.07001 454.324 5.22699 454.184 5.42999 cv
454.043 5.63702 453.938 5.883 453.867 6.16803 cv
453.797 6.461 453.762 6.789 453.762 7.15198 cv
453.762 7.5 453.789 7.81598 453.848 8.10199 cv
453.902 8.39502 453.996 8.64502 454.125 8.85498 cv
454.25 9.07001 454.422 9.23401 454.645 9.34802 cv
454.859 9.46899 455.129 9.52698 455.453 9.52301 cv
455.746 9.52698 456.004 9.47302 456.227 9.36298 cv
456.441 9.258 456.621 9.10498 456.762 8.89801 cv
456.902 8.69897 457.004 8.453 457.074 8.164 cv
457.137 7.87903 457.172 7.55103 457.176 7.17603 cv
cp
f
464.902 9.961 mo
464.902 10.187 464.887 10.363 464.859 10.484 cv
464.828 10.609 464.789 10.695 464.746 10.742 cv
464.695 10.793 464.629 10.836 464.539 10.875 cv
464.445 10.914 464.336 10.945 464.219 10.977 cv
464.094 11 463.961 11.023 463.82 11.043 cv
463.676 11.055 463.535 11.062 463.391 11.066 cv
463 11.062 462.66 11.012 462.375 10.918 cv
462.09 10.816 461.855 10.668 461.668 10.461 cv
461.48 10.258 461.34 10 461.254 9.68701 cv
461.16 9.37903 461.117 9.008 461.121 8.578 cv
461.121 5.02002 li
460.289 5.02002 li
460.188 5.02301 460.113 4.961 460.063 4.836 cv
460.008 4.71503 459.98 4.51202 459.984 4.22302 cv
459.98 4.07397 459.988 3.94501 460.004 3.84399 cv
460.016 3.742 460.035 3.65997 460.063 3.59802 cv
460.086 3.539 460.117 3.49597 460.16 3.46899 cv
460.195 3.44501 460.242 3.43402 460.297 3.42999 cv
461.121 3.42999 li
461.121 1.87903 li
461.117 1.83197 461.133 1.78497 461.164 1.73798 cv
461.191 1.69897 461.242 1.664 461.32 1.633 cv
461.395 1.60901 461.496 1.586 461.625 1.57001 cv
461.75 1.55902 461.906 1.55499 462.098 1.55103 cv
462.285 1.55499 462.445 1.55902 462.574 1.57001 cv
462.699 1.586 462.801 1.60901 462.875 1.633 cv
462.945 1.664 462.996 1.69897 463.031 1.73798 cv
463.059 1.78497 463.074 1.83197 463.078 1.87903 cv
463.078 3.42999 li
464.59 3.42999 li
464.641 3.43402 464.688 3.44501 464.727 3.46899 cv
464.766 3.49597 464.797 3.539 464.824 3.59802 cv
464.848 3.65997 464.867 3.742 464.883 3.84399 cv
464.895 3.94501 464.902 4.07397 464.902 4.22302 cv
464.902 4.51202 464.875 4.71503 464.824 4.836 cv
464.77 4.961 464.695 5.02301 464.598 5.02002 cv
463.078 5.02002 li
463.078 8.28497 li
463.074 8.664 463.133 8.94897 463.258 9.13702 cv
463.375 9.328 463.59 9.422 463.895 9.422 cv
463.996 9.422 464.09 9.414 464.176 9.39502 cv
464.258 9.37903 464.332 9.35901 464.398 9.33197 cv
464.461 9.31201 464.516 9.289 464.563 9.27002 cv
464.605 9.25403 464.645 9.24597 464.684 9.242 cv
464.711 9.24597 464.742 9.25403 464.773 9.27002 cv
464.801 9.289 464.82 9.328 464.84 9.37903 cv
464.852 9.43701 464.867 9.51202 464.883 9.60199 cv
464.895 9.69897 464.902 9.81598 464.902 9.961 cv
cp
f
472.488 6.96899 mo
472.484 7.20697 472.434 7.383 472.328 7.49597 cv
472.219 7.61298 472.07 7.672 471.891 7.66803 cv
467.656 7.66803 li
467.652 7.96899 467.688 8.23798 467.762 8.47699 cv
467.828 8.71899 467.941 8.922 468.098 9.09003 cv
468.25 9.26202 468.445 9.39099 468.688 9.47699 cv
468.926 9.56598 469.215 9.60901 469.559 9.60901 cv
469.898 9.60901 470.199 9.586 470.461 9.53497 cv
470.719 9.48798 470.945 9.43402 471.137 9.37097 cv
471.324 9.31201 471.48 9.258 471.609 9.20697 cv
471.73 9.15997 471.832 9.13702 471.914 9.133 cv
471.957 9.13702 471.996 9.14502 472.031 9.15997 cv
472.059 9.17999 472.086 9.211 472.105 9.258 cv
472.125 9.30499 472.137 9.37097 472.148 9.45697 cv
472.152 9.54303 472.156 9.65198 472.16 9.78101 cv
472.156 9.89801 472.156 9.99597 472.152 10.074 cv
472.145 10.156 472.137 10.223 472.129 10.277 cv
472.117 10.336 472.102 10.387 472.082 10.422 cv
472.063 10.465 472.035 10.5 472.004 10.535 cv
471.969 10.574 471.875 10.625 471.727 10.684 cv
471.57 10.75 471.379 10.812 471.148 10.867 cv
470.91 10.93 470.641 10.977 470.344 11.023 cv
470.039 11.062 469.719 11.086 469.379 11.09 cv
468.758 11.086 468.215 11.012 467.754 10.855 cv
467.285 10.703 466.898 10.465 466.59 10.148 cv
466.273 9.83197 466.039 9.43402 465.891 8.94897 cv
465.734 8.46899 465.66 7.90198 465.664 7.24597 cv
465.66 6.633 465.738 6.07397 465.902 5.578 cv
466.059 5.08197 466.293 4.664 466.605 4.31598 cv
466.91 3.97302 467.285 3.70697 467.723 3.52301 cv
468.16 3.34399 468.652 3.25403 469.207 3.25 cv
469.785 3.25403 470.285 3.34003 470.699 3.508 cv
471.113 3.68402 471.449 3.922 471.715 4.22302 cv
471.977 4.52698 472.172 4.88702 472.301 5.30103 cv
472.422 5.71899 472.484 6.16803 472.488 6.65601 cv
cp
470.586 6.40601 mo
470.598 5.85498 470.488 5.422 470.254 5.10901 cv
470.02 4.797 469.652 4.64099 469.16 4.63702 cv
468.91 4.64099 468.695 4.68701 468.512 4.77698 cv
468.324 4.875 468.172 5 468.051 5.15601 cv
467.926 5.31598 467.832 5.50403 467.77 5.71899 cv
467.703 5.93402 467.664 6.164 467.656 6.40601 cv
cp
f
489.684 10.629 mo
489.68 10.684 489.668 10.73 489.641 10.77 cv
489.609 10.812 489.555 10.848 489.484 10.871 cv
489.406 10.898 489.309 10.918 489.184 10.934 cv
489.059 10.949 488.898 10.957 488.707 10.957 cv
488.52 10.957 488.363 10.949 488.242 10.934 cv
488.113 10.918 488.016 10.898 487.945 10.871 cv
487.871 10.848 487.82 10.812 487.789 10.77 cv
487.758 10.73 487.742 10.684 487.742 10.629 cv
487.742 2.422 li
487.727 2.422 li
484.805 10.621 li
484.781 10.691 484.746 10.746 484.703 10.789 cv
484.652 10.836 484.59 10.871 484.512 10.895 cv
484.43 10.922 484.328 10.937 484.203 10.945 cv
484.078 10.953 483.926 10.957 483.754 10.957 cv
483.574 10.957 483.426 10.949 483.301 10.937 cv
483.176 10.922 483.07 10.902 482.992 10.875 cv
482.906 10.848 482.844 10.812 482.801 10.77 cv
482.75 10.73 482.719 10.684 482.707 10.621 cv
479.887 2.422 li
479.871 2.422 li
479.871 10.629 li
479.867 10.684 479.852 10.73 479.828 10.77 cv
479.797 10.812 479.746 10.848 479.668 10.871 cv
479.59 10.898 479.488 10.918 479.367 10.934 cv
479.242 10.949 479.086 10.957 478.898 10.957 cv
478.707 10.957 478.551 10.949 478.43 10.934 cv
478.301 10.918 478.199 10.898 478.129 10.871 cv
478.051 10.848 478 10.812 477.973 10.77 cv
477.941 10.73 477.926 10.684 477.93 10.629 cv
477.93 1.64502 li
477.926 1.383 477.996 1.17999 478.141 1.03497 cv
478.277 .89801 478.465 .828003 478.703 .823975 cv
480.043 .823975 li
480.281 .828003 480.484 .848022 480.656 .882996 cv
480.824 .926025 480.973 .987976 481.102 1.078 cv
481.223 1.172 481.328 1.29303 481.414 1.43701 cv
481.496 1.59003 481.566 1.77301 481.633 1.98798 cv
483.816 7.99597 li
483.848 7.99597 li
486.105 2.00403 li
486.172 1.78497 486.246 1.60199 486.328 1.44897 cv
486.406 1.30103 486.5 1.17999 486.609 1.08197 cv
486.715 .992004 486.84 .926025 486.984 .882996 cv
487.129 .848022 487.297 .828003 487.492 .823975 cv
488.871 .823975 li
489.008 .828003 489.129 .843994 489.234 .879028 cv
489.332 .91803 489.414 .973022 489.484 1.039 cv
489.547 1.11298 489.598 1.19897 489.633 1.297 cv
489.664 1.40198 489.68 1.52002 489.684 1.64502 cv
cp
f
498.793 7.09802 mo
498.789 7.69501 498.711 8.23798 498.559 8.72302 cv
498.398 9.21503 498.164 9.633 497.848 9.98401 cv
497.531 10.336 497.133 10.609 496.656 10.801 cv
496.176 10.992 495.617 11.086 494.98 11.09 cv
494.359 11.086 493.82 11.004 493.367 10.832 cv
492.906 10.664 492.527 10.414 492.23 10.086 cv
491.926 9.76202 491.703 9.35901 491.559 8.87903 cv
491.414 8.40198 491.344 7.85498 491.344 7.23798 cv
491.344 6.64801 491.422 6.10901 491.578 5.617 cv
491.734 5.12903 491.973 4.70697 492.293 4.35498 cv
492.609 4.008 493.004 3.73401 493.48 3.539 cv
493.953 3.34802 494.512 3.25403 495.152 3.25 cv
495.777 3.25403 496.316 3.336 496.773 3.50403 cv
497.23 3.67603 497.609 3.92603 497.906 4.25 cv
498.203 4.578 498.426 4.97998 498.574 5.45697 cv
498.719 5.93701 498.789 6.48401 498.793 7.09802 cv
cp
496.773 7.17603 mo
496.77 6.84003 496.742 6.52301 496.691 6.22998 cv
496.633 5.94501 496.539 5.69501 496.414 5.47998 cv
496.281 5.27002 496.109 5.10199 495.898 4.97998 cv
495.68 4.86298 495.41 4.80499 495.082 4.80103 cv
494.793 4.80499 494.539 4.85901 494.32 4.961 cv
494.102 5.07001 493.922 5.22699 493.781 5.42999 cv
493.641 5.63702 493.535 5.883 493.465 6.16803 cv
493.395 6.461 493.359 6.789 493.359 7.15198 cv
493.359 7.5 493.387 7.81598 493.445 8.10199 cv
493.5 8.39502 493.594 8.64502 493.723 8.85498 cv
493.848 9.07001 494.02 9.23401 494.242 9.34802 cv
494.457 9.46899 494.727 9.52698 495.051 9.52301 cv
495.344 9.52698 495.602 9.47302 495.824 9.36298 cv
496.039 9.258 496.219 9.10498 496.359 8.89801 cv
496.5 8.69897 496.602 8.453 496.672 8.164 cv
496.734 7.87903 496.77 7.55103 496.773 7.17603 cv
cp
f
506.941 10.645 mo
506.938 10.707 506.926 10.754 506.902 10.789 cv
506.875 10.832 506.828 10.863 506.77 10.887 cv
506.703 10.91 506.621 10.926 506.516 10.941 cv
506.41 10.949 506.277 10.957 506.125 10.957 cv
505.953 10.957 505.82 10.949 505.719 10.941 cv
505.613 10.926 505.527 10.91 505.465 10.887 cv
505.398 10.863 505.352 10.832 505.324 10.789 cv
505.293 10.754 505.277 10.707 505.281 10.645 cv
505.281 9.875 li
504.922 10.262 504.547 10.559 504.156 10.77 cv
503.758 10.98 503.324 11.086 502.852 11.09 cv
502.316 11.086 501.867 10.984 501.504 10.781 cv
501.137 10.578 500.84 10.305 500.609 9.953 cv
500.375 9.60901 500.207 9.203 500.105 8.73401 cv
500.004 8.27301 499.953 7.78101 499.953 7.26202 cv
499.953 6.64801 500.016 6.09399 500.148 5.59802 cv
500.277 5.10498 500.473 4.68402 500.73 4.336 cv
500.984 3.98798 501.301 3.72302 501.68 3.53101 cv
502.059 3.34802 502.496 3.25403 502.992 3.25 cv
503.379 3.25403 503.73 3.33197 504.051 3.48798 cv
504.363 3.64801 504.68 3.87903 504.992 4.18402 cv
504.992 .421997 li
504.992 .370972 505.004 .323975 505.035 .281006 cv
505.059 .242004 505.113 .20697 505.191 .176025 cv
505.266 .14801 505.363 .129028 505.492 .109009 cv
505.613 .0980225 505.773 .0900269 505.969 .0859985 cv
506.16 .0900269 506.316 .0980225 506.441 .109009 cv
506.563 .129028 506.664 .14801 506.738 .176025 cv
506.809 .20697 506.859 .242004 506.895 .281006 cv
506.922 .323975 506.938 .370972 506.941 .421997 cv
cp
504.992 6 mo
504.711 5.64801 504.441 5.37903 504.188 5.19098 cv
503.926 5.00403 503.656 4.90997 503.379 4.90997 cv
503.125 4.90997 502.906 4.97699 502.723 5.10199 cv
502.535 5.23401 502.387 5.40198 502.277 5.61298 cv
502.164 5.82397 502.082 6.06201 502.027 6.32397 cv
501.973 6.59003 501.945 6.85901 501.945 7.12903 cv
501.945 7.42603 501.969 7.70697 502.016 7.97998 cv
502.063 8.258 502.137 8.50403 502.246 8.71899 cv
502.348 8.93402 502.492 9.10498 502.672 9.23401 cv
502.848 9.367 503.07 9.43402 503.34 9.42999 cv
503.473 9.43402 503.602 9.414 503.734 9.37097 cv
503.859 9.336 503.992 9.27301 504.125 9.17999 cv
504.258 9.09399 504.395 8.97699 504.535 8.83197 cv
504.676 8.69098 504.828 8.51599 504.992 8.30902 cv
cp
f
515.34 6.96899 mo
515.336 7.20697 515.285 7.383 515.18 7.49597 cv
515.07 7.61298 514.922 7.672 514.742 7.66803 cv
510.508 7.66803 li
510.504 7.96899 510.539 8.23798 510.613 8.47699 cv
510.68 8.71899 510.793 8.922 510.949 9.09003 cv
511.102 9.26202 511.297 9.39099 511.539 9.47699 cv
511.777 9.56598 512.066 9.60901 512.41 9.60901 cv
512.75 9.60901 513.051 9.586 513.313 9.53497 cv
513.57 9.48798 513.797 9.43402 513.988 9.37097 cv
514.176 9.31201 514.332 9.258 514.461 9.20697 cv
514.582 9.15997 514.684 9.13702 514.766 9.133 cv
514.809 9.13702 514.848 9.14502 514.883 9.15997 cv
514.91 9.17999 514.938 9.211 514.957 9.258 cv
514.977 9.30499 514.988 9.37097 515 9.45697 cv
515.004 9.54303 515.008 9.65198 515.012 9.78101 cv
515.008 9.89801 515.008 9.99597 515.004 10.074 cv
514.996 10.156 514.988 10.223 514.98 10.277 cv
514.969 10.336 514.953 10.387 514.934 10.422 cv
514.914 10.465 514.887 10.5 514.855 10.535 cv
514.82 10.574 514.727 10.625 514.578 10.684 cv
514.422 10.75 514.23 10.812 514 10.867 cv
513.762 10.93 513.492 10.977 513.195 11.023 cv
512.891 11.062 512.57 11.086 512.23 11.09 cv
511.609 11.086 511.066 11.012 510.605 10.855 cv
510.137 10.703 509.75 10.465 509.441 10.148 cv
509.125 9.83197 508.891 9.43402 508.742 8.94897 cv
508.586 8.46899 508.512 7.90198 508.516 7.24597 cv
508.512 6.633 508.59 6.07397 508.754 5.578 cv
508.91 5.08197 509.145 4.664 509.457 4.31598 cv
509.762 3.97302 510.137 3.70697 510.574 3.52301 cv
511.012 3.34399 511.504 3.25403 512.059 3.25 cv
512.637 3.25403 513.137 3.34003 513.551 3.508 cv
513.965 3.68402 514.301 3.922 514.566 4.22302 cv
514.828 4.52698 515.023 4.88702 515.152 5.30103 cv
515.273 5.71899 515.336 6.16803 515.34 6.65601 cv
cp
513.438 6.40601 mo
513.449 5.85498 513.34 5.422 513.105 5.10901 cv
512.871 4.797 512.504 4.64099 512.012 4.63702 cv
511.762 4.64099 511.547 4.68701 511.363 4.77698 cv
511.176 4.875 511.023 5 510.902 5.15601 cv
510.777 5.31598 510.684 5.50403 510.621 5.71899 cv
510.555 5.93402 510.516 6.164 510.508 6.40601 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
