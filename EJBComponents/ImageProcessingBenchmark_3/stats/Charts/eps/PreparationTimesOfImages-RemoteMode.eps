%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: PreparationTimesOfImages-RemoteMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:59:18 p.m.
%%BoundingBox: 0 0 650 563
%%HiResBoundingBox: 0 0 649.2001 562.3201
%%CropBox: 0 0 649.2001 562.3201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -562.32 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 562.32 li
649.2 562.32 li
649.2 0 li
cp
clp
0 0 mo
649.199 0 li
649.199 562.32 li
0 562.32 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
54.48 496.922 mo
633.359 496.922 li
54.48 452.398 mo
633.359 452.398 li
54.48 407.879 mo
633.359 407.879 li
54.48 363.48 mo
633.359 363.48 li
54.48 318.961 mo
633.359 318.961 li
54.48 274.441 mo
633.359 274.441 li
54.48 229.922 mo
633.359 229.922 li
54.48 185.398 mo
633.359 185.398 li
54.48 140.879 mo
633.359 140.879 li
54.48 96.359 mo
633.359 96.359 li
54.48 51.961 mo
633.359 51.961 li
.140414 .108034 .108034 0 cmyk
@
54.48 474.719 mo
633.359 474.719 li
54.48 430.199 mo
633.359 430.199 li
54.48 385.68 mo
633.359 385.68 li
54.48 341.16 mo
633.359 341.16 li
54.48 296.641 mo
633.359 296.641 li
54.48 252.121 mo
633.359 252.121 li
54.48 207.719 mo
633.359 207.719 li
54.48 163.199 mo
633.359 163.199 li
54.48 118.68 mo
633.359 118.68 li
54.48 74.16 mo
633.359 74.16 li
54.48 29.641 mo
633.359 29.641 li
.328344 .284215 .278569 .000915541 cmyk
@
90.602 29.641 mo
90.602 519.238 li
162.961 29.641 mo
162.961 519.238 li
235.32 29.641 mo
235.32 519.238 li
307.68 29.641 mo
307.68 519.238 li
380.039 29.641 mo
380.039 519.238 li
452.398 29.641 mo
452.398 519.238 li
524.762 29.641 mo
524.762 519.238 li
597.121 29.641 mo
597.121 519.238 li
.178592 .148898 .143923 0 cmyk
@
54.48 29.641 mo
54.48 519.238 li
126.84 29.641 mo
126.84 519.238 li
199.199 29.641 mo
199.199 519.238 li
271.559 29.641 mo
271.559 519.238 li
343.922 29.641 mo
343.922 519.238 li
416.281 29.641 mo
416.281 519.238 li
488.641 29.641 mo
488.641 519.238 li
561 29.641 mo
561 519.238 li
633.359 29.641 mo
633.359 519.238 li
.328344 .284215 .278569 .000915541 cmyk
@
34.441 509.879 mo
41.519 509.879 li
41.519 526.922 li
34.441 526.922 li
cp
0 0 0 0 cmyk
ef
34.441 465.359 mo
41.519 465.359 li
41.519 482.398 li
34.441 482.398 li
cp
ef
34.441 420.84 mo
41.519 420.84 li
41.519 438 li
34.441 438 li
cp
ef
34.441 376.32 mo
41.519 376.32 li
41.519 393.48 li
34.441 393.48 li
cp
ef
34.441 331.801 mo
41.519 331.801 li
41.519 348.961 li
34.441 348.961 li
cp
ef
27.238 287.398 mo
41.519 287.398 li
41.519 304.441 li
27.238 304.441 li
cp
ef
27.238 242.879 mo
41.519 242.879 li
41.519 259.922 li
27.238 259.922 li
cp
ef
27.238 198.359 mo
41.519 198.359 li
41.519 215.398 li
27.238 215.398 li
cp
ef
27.238 153.84 mo
41.519 153.84 li
41.519 170.879 li
27.238 170.879 li
cp
ef
27.238 109.32 mo
41.519 109.32 li
41.519 126.48 li
27.238 126.48 li
cp
ef
27.238 64.801 mo
41.519 64.801 li
41.519 81.961 li
27.238 81.961 li
cp
ef
27.238 20.281 mo
41.519 20.281 li
41.519 37.441 li
27.238 37.441 li
cp
ef
.96 lw
54.48 519.238 mo
633.359 519.238 li
.367803 .29575 .300999 .00198367 cmyk
@
54.48 519.238 mo
54.48 523.68 li
126.84 519.238 mo
126.84 523.68 li
199.199 519.238 mo
199.199 523.68 li
271.559 519.238 mo
271.559 523.68 li
343.922 519.238 mo
343.922 523.68 li
416.281 519.238 mo
416.281 523.68 li
488.641 519.238 mo
488.641 523.68 li
561 519.238 mo
561 523.68 li
633.359 519.238 mo
633.359 523.68 li
@
gsave
54.359 29.641 mo
633.961 29.641 li
633.961 519.84 li
54.359 519.84 li
cp
clp
1 lc
54.48 435.48 mo
126.84 434.398 li
199.199 450.84 li
271.559 451.078 li
343.922 434.762 li
416.281 435.84 li
488.641 435.359 li
561 452.641 li
633.359 435.359 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
49.32 430.34 mo
59.281 430.34 li
59.281 440.301 li
49.32 440.301 li
cp
.62768 .285466 0 0 cmyk
@
121.68 429.262 mo
131.641 429.262 li
131.641 439.219 li
121.68 439.219 li
cp
@
194.039 445.82 mo
204 445.82 li
204 455.781 li
194.039 455.781 li
cp
@
266.398 445.941 mo
276.359 445.941 li
276.359 455.898 li
266.398 455.898 li
cp
@
338.762 429.621 mo
348.719 429.621 li
348.719 439.578 li
338.762 439.578 li
cp
@
411.121 430.699 mo
421.078 430.699 li
421.078 440.66 li
411.121 440.66 li
cp
@
483.48 430.219 mo
493.441 430.219 li
493.441 440.18 li
483.48 440.18 li
cp
@
555.84 447.5 mo
565.801 447.5 li
565.801 457.461 li
555.84 457.461 li
cp
@
628.199 430.34 mo
638.16 430.34 li
638.16 440.301 li
628.199 440.301 li
cp
@
gsave
54.359 29.641 mo
633.961 29.641 li
633.961 519.84 li
54.359 519.84 li
cp
clp
.96 lw
1 lc
54.48 433.441 mo
126.84 476.52 li
199.199 485.398 li
271.559 477.602 li
488.641 477.602 li
561 477.48 li
633.359 477.48 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
49.32 428.301 mo
59.281 428.301 li
59.281 438.262 li
49.32 438.262 li
cp
.0319219 .621851 .911223 .000427253 cmyk
@
121.68 471.379 mo
131.641 471.379 li
131.641 481.34 li
121.68 481.34 li
cp
@
194.039 480.379 mo
204 480.379 li
204 490.34 li
194.039 490.34 li
cp
@
266.398 472.461 mo
276.359 472.461 li
276.359 482.422 li
266.398 482.422 li
cp
@
338.762 472.578 mo
348.719 472.578 li
348.719 482.539 li
338.762 482.539 li
cp
@
411.121 472.578 mo
421.078 472.578 li
421.078 482.539 li
411.121 482.539 li
cp
@
483.48 472.578 mo
493.441 472.578 li
493.441 482.539 li
483.48 482.539 li
cp
@
555.84 472.34 mo
565.801 472.34 li
565.801 482.301 li
555.84 482.301 li
cp
@
628.199 472.34 mo
638.16 472.34 li
638.16 482.301 li
628.199 482.301 li
cp
@
gsave
54.359 29.641 mo
633.961 29.641 li
633.961 519.84 li
54.359 519.84 li
cp
clp
.96 lw
1 lc
54.48 422.52 mo
126.84 475.441 li
199.199 476.398 li
271.559 490.801 li
343.922 487.441 li
416.281 485.281 li
488.641 490.801 li
561 488.762 li
633.359 487.32 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
49.32 417.379 mo
59.281 417.379 li
59.281 427.34 li
49.32 427.34 li
cp
.619135 .109529 .981689 .00570687 cmyk
@
121.68 470.422 mo
131.641 470.422 li
131.641 480.379 li
121.68 480.379 li
cp
@
194.039 471.262 mo
204 471.262 li
204 481.219 li
194.039 481.219 li
cp
@
266.398 485.66 mo
276.359 485.66 li
276.359 495.621 li
266.398 495.621 li
cp
@
338.762 482.422 mo
348.719 482.422 li
348.719 492.379 li
338.762 492.379 li
cp
@
411.121 480.141 mo
421.078 480.141 li
421.078 490.102 li
411.121 490.102 li
cp
@
483.48 485.66 mo
493.441 485.66 li
493.441 495.621 li
483.48 495.621 li
cp
@
555.84 483.738 mo
565.801 483.738 li
565.801 493.699 li
555.84 493.699 li
cp
@
628.199 482.301 mo
638.16 482.301 li
638.16 492.262 li
628.199 492.262 li
cp
@
gsave
54.359 29.641 mo
633.961 29.641 li
633.961 519.84 li
54.359 519.84 li
cp
clp
.96 lw
1 lc
54.48 422.52 mo
126.84 475.441 li
199.199 498.121 li
271.559 490.801 li
343.922 497.762 li
416.281 493.68 li
488.641 497.879 li
561 495 li
633.359 501.719 li
0 .990631 1 .000396735 cmyk
@
grestore
49.32 417.379 mo
59.281 417.379 li
59.281 427.34 li
49.32 427.34 li
cp
0 .990631 1 .000396735 cmyk
@
121.68 470.301 mo
131.641 470.301 li
131.641 480.262 li
121.68 480.262 li
cp
@
194.039 493.102 mo
204 493.102 li
204 503.059 li
194.039 503.059 li
cp
@
266.398 485.781 mo
276.359 485.781 li
276.359 495.738 li
266.398 495.738 li
cp
@
338.762 492.738 mo
348.719 492.738 li
348.719 502.699 li
338.762 502.699 li
cp
@
411.121 488.66 mo
421.078 488.66 li
421.078 498.621 li
411.121 498.621 li
cp
@
483.48 492.738 mo
493.441 492.738 li
493.441 502.699 li
483.48 502.699 li
cp
@
555.84 489.859 mo
565.801 489.859 li
565.801 499.82 li
555.84 499.82 li
cp
@
628.199 496.699 mo
638.16 496.699 li
638.16 506.66 li
628.199 506.66 li
cp
@
gsave
54.359 29.641 mo
633.961 29.641 li
633.961 519.84 li
54.359 519.84 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.48 433.199 mo
126.84 476.52 li
199.199 497.641 li
271.559 487.922 li
343.922 499.801 li
416.281 496.199 li
488.641 494.879 li
561 497.16 li
633.359 498.961 li
.62768 .285466 0 0 cmyk
@
grestore
49.32 428.18 mo
59.281 428.18 li
59.281 438.141 li
49.32 438.141 li
cp
.62768 .285466 0 0 cmyk
@
121.68 471.5 mo
131.641 471.5 li
131.641 481.461 li
121.68 481.461 li
cp
@
194.039 492.5 mo
204 492.5 li
204 502.461 li
194.039 502.461 li
cp
@
266.398 482.898 mo
276.359 482.898 li
276.359 492.859 li
266.398 492.859 li
cp
@
338.762 494.66 mo
348.719 494.66 li
348.719 504.621 li
338.762 504.621 li
cp
@
411.121 491.18 mo
421.078 491.18 li
421.078 501.141 li
411.121 501.141 li
cp
@
483.48 489.738 mo
493.441 489.738 li
493.441 499.699 li
483.48 499.699 li
cp
@
555.84 492.141 mo
565.801 492.141 li
565.801 502.102 li
555.84 502.102 li
cp
@
628.199 493.941 mo
638.16 493.941 li
638.16 503.898 li
628.199 503.898 li
cp
@
gsave
54.359 29.641 mo
633.961 29.641 li
633.961 519.84 li
54.359 519.84 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.48 435.48 mo
126.84 476.52 li
199.199 498.121 li
271.559 497.039 li
343.922 493.078 li
416.281 497.641 li
488.641 501.121 li
561 495.48 li
633.359 497.52 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
49.32 430.34 mo
59.281 430.34 li
59.281 440.301 li
49.32 440.301 li
cp
.0319219 .621851 .911223 .000427253 cmyk
@
121.68 471.379 mo
131.641 471.379 li
131.641 481.34 li
121.68 481.34 li
cp
@
194.039 493.102 mo
204 493.102 li
204 503.059 li
194.039 503.059 li
cp
@
266.398 491.898 mo
276.359 491.898 li
276.359 501.859 li
266.398 501.859 li
cp
@
338.762 488.059 mo
348.719 488.059 li
348.719 498.02 li
338.762 498.02 li
cp
@
411.121 492.5 mo
421.078 492.5 li
421.078 502.461 li
411.121 502.461 li
cp
@
483.48 496.102 mo
493.441 496.102 li
493.441 506.059 li
483.48 506.059 li
cp
@
555.84 490.34 mo
565.801 490.34 li
565.801 500.301 li
555.84 500.301 li
cp
@
628.199 492.379 mo
638.16 492.379 li
638.16 502.34 li
628.199 502.34 li
cp
@
gsave
54.359 29.641 mo
633.961 29.641 li
633.961 519.84 li
54.359 519.84 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.48 433.199 mo
126.84 475.441 li
199.199 498.121 li
271.559 496.68 li
343.922 490.559 li
416.281 495.961 li
488.641 497.16 li
561 497.281 li
633.359 495.84 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
49.32 428.18 mo
59.281 428.18 li
59.281 438.141 li
49.32 438.141 li
cp
.619135 .109529 .981689 .00570687 cmyk
@
121.68 470.422 mo
131.641 470.422 li
131.641 480.379 li
121.68 480.379 li
cp
@
194.039 493.102 mo
204 493.102 li
204 503.059 li
194.039 503.059 li
cp
@
266.398 491.539 mo
276.359 491.539 li
276.359 501.5 li
266.398 501.5 li
cp
@
338.762 485.539 mo
348.719 485.539 li
348.719 495.5 li
338.762 495.5 li
cp
@
411.121 490.82 mo
421.078 490.82 li
421.078 500.781 li
411.121 500.781 li
cp
@
483.48 492.141 mo
493.441 492.141 li
493.441 502.102 li
483.48 502.102 li
cp
@
555.84 492.262 mo
565.801 492.262 li
565.801 502.219 li
555.84 502.219 li
cp
@
628.199 490.82 mo
638.16 490.82 li
638.16 500.781 li
628.199 500.781 li
cp
@
gsave
54.359 29.641 mo
633.961 29.641 li
633.961 519.84 li
54.359 519.84 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.48 422.52 mo
126.84 476.641 li
199.199 498.121 li
271.559 497.281 li
343.922 501 li
416.281 494.16 li
488.641 501.719 li
561 501 li
633.359 497.281 li
0 .990631 1 .000396735 cmyk
@
grestore
49.32 417.5 mo
59.281 417.5 li
59.281 427.461 li
49.32 427.461 li
cp
0 .990631 1 .000396735 cmyk
@
121.68 471.5 mo
131.641 471.5 li
131.641 481.461 li
121.68 481.461 li
cp
@
194.039 493.102 mo
204 493.102 li
204 503.059 li
194.039 503.059 li
cp
@
266.398 492.262 mo
276.359 492.262 li
276.359 502.219 li
266.398 502.219 li
cp
@
338.762 495.98 mo
348.719 495.98 li
348.719 505.941 li
338.762 505.941 li
cp
@
411.121 489.02 mo
421.078 489.02 li
421.078 498.981 li
411.121 498.981 li
cp
@
483.48 496.578 mo
493.441 496.578 li
493.441 506.539 li
483.48 506.539 li
cp
@
555.84 495.98 mo
565.801 495.98 li
565.801 505.941 li
555.84 505.941 li
cp
@
628.199 492.141 mo
638.16 492.141 li
638.16 502.102 li
628.199 502.102 li
cp
@
34.379 509.891 mo
41.477 509.891 li
41.477 526.981 li
34.379 526.981 li
cp
0 0 0 0 cmyk
ef
41.02 518.84 mo
41.016 519.523 40.965 520.145 40.859 520.707 cv
40.75 521.27 40.57 521.754 40.324 522.156 cv
40.07 522.562 39.742 522.875 39.344 523.094 cv
38.938 523.316 38.445 523.426 37.859 523.426 cv
37.301 523.426 36.828 523.328 36.449 523.129 cv
36.066 522.934 35.762 522.641 35.527 522.254 cv
35.293 521.867 35.125 521.395 35.031 520.828 cv
34.93 520.266 34.883 519.617 34.883 518.883 cv
34.883 518.211 34.938 517.59 35.047 517.023 cv
35.156 516.461 35.332 515.977 35.582 515.57 cv
35.824 515.168 36.148 514.855 36.555 514.629 cv
36.953 514.41 37.449 514.297 38.039 514.297 cv
38.598 514.297 39.07 514.398 39.453 514.594 cv
39.836 514.797 40.141 515.09 40.375 515.473 cv
40.605 515.863 40.773 516.336 40.871 516.898 cv
40.969 517.461 41.016 518.109 41.02 518.84 cv
cp
39.813 518.922 mo
39.809 518.48 39.793 518.082 39.766 517.73 cv
39.73 517.379 39.684 517.07 39.625 516.801 cv
39.559 516.531 39.48 516.301 39.383 516.105 cv
39.285 515.914 39.168 515.754 39.031 515.625 cv
38.891 515.5 38.73 515.406 38.559 515.348 cv
38.379 515.293 38.184 515.266 37.969 515.262 cv
37.578 515.266 37.262 515.355 37.023 515.539 cv
36.777 515.723 36.586 515.977 36.449 516.293 cv
36.309 516.613 36.215 516.984 36.164 517.414 cv
36.113 517.844 36.09 518.309 36.09 518.801 cv
36.09 519.465 36.121 520.027 36.191 520.488 cv
36.258 520.957 36.367 521.336 36.52 521.625 cv
36.664 521.922 36.855 522.133 37.086 522.262 cv
37.316 522.398 37.598 522.465 37.93 522.461 cv
38.184 522.465 38.406 522.426 38.602 522.34 cv
38.793 522.262 38.961 522.141 39.102 521.984 cv
39.242 521.832 39.355 521.648 39.449 521.434 cv
39.535 521.219 39.609 520.98 39.668 520.719 cv
39.719 520.461 39.758 520.18 39.781 519.875 cv
39.801 519.57 39.809 519.254 39.813 518.922 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.379 465.387 mo
41.477 465.387 li
41.477 482.477 li
34.379 482.477 li
cp
0 0 0 0 cmyk
ef
40.727 478.293 mo
40.723 478.379 40.719 478.453 40.707 478.516 cv
40.695 478.582 40.68 478.637 40.66 478.676 cv
40.637 478.723 40.609 478.754 40.578 478.77 cv
40.543 478.793 40.504 478.801 40.465 478.801 cv
35.563 478.801 li
35.5 478.801 35.441 478.793 35.395 478.777 cv
35.344 478.762 35.305 478.738 35.27 478.699 cv
35.234 478.668 35.207 478.613 35.195 478.543 cv
35.176 478.473 35.168 478.387 35.172 478.285 cv
35.168 478.195 35.172 478.117 35.18 478.047 cv
35.184 477.98 35.199 477.922 35.227 477.867 cv
35.25 477.816 35.281 477.762 35.316 477.707 cv
35.352 477.656 35.395 477.602 35.453 477.539 cv
37.227 475.715 li
37.637 475.297 37.965 474.922 38.215 474.586 cv
38.461 474.258 38.652 473.953 38.785 473.676 cv
38.918 473.402 39.004 473.152 39.051 472.926 cv
39.09 472.703 39.113 472.492 39.113 472.297 cv
39.113 472.102 39.078 471.918 39.012 471.738 cv
38.945 471.566 38.852 471.41 38.727 471.273 cv
38.602 471.145 38.445 471.039 38.258 470.957 cv
38.07 470.883 37.852 470.844 37.605 470.84 cv
37.316 470.844 37.059 470.883 36.832 470.957 cv
36.602 471.039 36.402 471.125 36.23 471.211 cv
36.059 471.305 35.914 471.387 35.797 471.465 cv
35.68 471.543 35.594 471.582 35.543 471.582 cv
35.508 471.582 35.477 471.574 35.453 471.555 cv
35.422 471.539 35.402 471.508 35.387 471.465 cv
35.371 471.426 35.355 471.371 35.348 471.301 cv
35.336 471.234 35.332 471.152 35.336 471.055 cv
35.332 470.988 35.336 470.93 35.344 470.879 cv
35.348 470.828 35.355 470.785 35.367 470.746 cv
35.375 470.711 35.391 470.676 35.41 470.645 cv
35.43 470.613 35.465 470.574 35.523 470.523 cv
35.574 470.477 35.668 470.41 35.805 470.328 cv
35.938 470.246 36.109 470.168 36.313 470.086 cv
36.516 470.008 36.738 469.937 36.984 469.883 cv
37.227 469.828 37.484 469.801 37.758 469.801 cv
38.184 469.801 38.559 469.863 38.883 469.984 cv
39.203 470.105 39.469 470.27 39.684 470.48 cv
39.895 470.691 40.055 470.937 40.16 471.211 cv
40.266 471.492 40.32 471.789 40.32 472.102 cv
40.32 472.391 40.293 472.672 40.242 472.949 cv
40.191 473.234 40.086 473.539 39.926 473.863 cv
39.762 474.191 39.527 474.555 39.223 474.953 cv
38.914 475.355 38.508 475.816 38.004 476.332 cv
36.598 477.801 li
40.457 477.801 li
40.488 477.805 40.523 477.816 40.563 477.832 cv
40.594 477.855 40.625 477.887 40.652 477.926 cv
40.676 477.969 40.695 478.02 40.707 478.078 cv
40.719 478.145 40.723 478.215 40.727 478.293 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.379 420.879 mo
41.477 420.879 li
41.477 437.969 li
34.379 437.969 li
cp
0 0 0 0 cmyk
ef
41.102 431.758 mo
41.098 431.91 41.074 432.031 41.031 432.117 cv
40.984 432.207 40.922 432.25 40.84 432.246 cv
39.84 432.246 li
39.84 434.109 li
39.84 434.148 39.828 434.18 39.813 434.203 cv
39.789 434.23 39.758 434.25 39.715 434.27 cv
39.664 434.285 39.602 434.297 39.531 434.309 cv
39.453 434.316 39.359 434.32 39.242 434.324 cv
39.125 434.32 39.027 434.316 38.957 434.309 cv
38.879 434.297 38.82 434.285 38.777 434.27 cv
38.73 434.25 38.699 434.23 38.684 434.203 cv
38.664 434.18 38.656 434.148 38.66 434.109 cv
38.66 432.246 li
35.031 432.246 li
34.973 432.25 34.93 432.242 34.895 432.227 cv
34.859 432.215 34.824 432.187 34.797 432.148 cv
34.766 432.113 34.746 432.062 34.734 431.992 cv
34.723 431.926 34.719 431.836 34.719 431.723 cv
34.719 431.641 34.719 431.562 34.727 431.492 cv
34.727 431.422 34.738 431.359 34.754 431.305 cv
34.766 431.25 34.781 431.195 34.809 431.141 cv
34.828 431.086 34.855 431.031 34.891 430.969 cv
38.051 425.582 li
38.07 425.547 38.105 425.516 38.152 425.488 cv
38.195 425.461 38.25 425.437 38.324 425.418 cv
38.391 425.402 38.477 425.391 38.582 425.379 cv
38.684 425.375 38.805 425.371 38.945 425.367 cv
39.094 425.371 39.23 425.375 39.348 425.387 cv
39.461 425.398 39.551 425.414 39.625 425.43 cv
39.691 425.449 39.746 425.473 39.785 425.504 cv
39.82 425.535 39.84 425.57 39.84 425.609 cv
39.84 431.273 li
40.84 431.273 li
40.914 431.277 40.977 431.316 41.027 431.395 cv
41.074 431.477 41.098 431.598 41.102 431.758 cv
cp
38.66 426.406 mo
38.648 426.406 li
35.797 431.273 li
38.66 431.273 li
cp
.629114 .553033 .543389 .289647 cmyk
f
34.379 376.379 mo
41.477 376.379 li
41.477 393.469 li
34.379 393.469 li
cp
0 0 0 0 cmyk
ef
40.953 386.891 mo
40.953 387.281 40.891 387.66 40.773 388.02 cv
40.648 388.387 40.465 388.703 40.223 388.977 cv
39.973 389.254 39.66 389.477 39.285 389.641 cv
38.902 389.809 38.457 389.891 37.941 389.891 cv
37.57 389.891 37.242 389.848 36.961 389.754 cv
36.676 389.668 36.43 389.535 36.219 389.363 cv
36.008 389.195 35.832 388.988 35.695 388.742 cv
35.555 388.496 35.441 388.215 35.359 387.898 cv
35.273 387.586 35.215 387.242 35.18 386.863 cv
35.141 386.492 35.121 386.09 35.125 385.656 cv
35.121 385.277 35.141 384.895 35.184 384.504 cv
35.223 384.121 35.297 383.746 35.402 383.379 cv
35.508 383.02 35.652 382.68 35.832 382.363 cv
36.012 382.047 36.238 381.77 36.512 381.535 cv
36.785 381.301 37.109 381.113 37.488 380.973 cv
37.867 380.836 38.309 380.77 38.813 380.766 cv
38.98 380.77 39.152 380.777 39.324 380.797 cv
39.496 380.82 39.656 380.852 39.805 380.883 cv
39.953 380.922 40.074 380.957 40.176 380.996 cv
40.273 381.035 40.34 381.07 40.375 381.094 cv
40.402 381.121 40.426 381.148 40.445 381.176 cv
40.461 381.207 40.477 381.238 40.484 381.273 cv
40.492 381.309 40.496 381.348 40.504 381.391 cv
40.504 381.434 40.508 381.488 40.512 381.551 cv
40.508 381.637 40.508 381.707 40.508 381.762 cv
40.504 381.824 40.492 381.871 40.48 381.906 cv
40.461 381.945 40.441 381.973 40.418 381.988 cv
40.391 382.008 40.359 382.016 40.32 382.016 cv
40.27 382.016 40.199 382 40.113 381.969 cv
40.023 381.937 39.918 381.902 39.797 381.859 cv
39.672 381.824 39.523 381.789 39.348 381.754 cv
39.172 381.727 38.969 381.711 38.738 381.707 cv
38.309 381.711 37.941 381.797 37.637 381.969 cv
37.332 382.141 37.082 382.375 36.887 382.668 cv
36.691 382.961 36.547 383.301 36.457 383.684 cv
36.359 384.074 36.305 384.477 36.297 384.895 cv
36.414 384.828 36.551 384.762 36.699 384.691 cv
36.848 384.625 37.008 384.562 37.184 384.504 cv
37.359 384.453 37.547 384.406 37.742 384.371 cv
37.938 384.34 38.148 384.324 38.375 384.32 cv
38.852 384.324 39.254 384.391 39.586 384.516 cv
39.914 384.648 40.18 384.828 40.387 385.059 cv
40.586 385.289 40.73 385.559 40.82 385.871 cv
40.906 386.184 40.953 386.523 40.953 386.891 cv
cp
39.758 387 mo
39.758 386.738 39.73 386.496 39.68 386.277 cv
39.625 386.062 39.535 385.879 39.414 385.723 cv
39.289 385.574 39.125 385.457 38.922 385.375 cv
38.711 385.293 38.457 385.25 38.16 385.25 cv
37.988 385.25 37.82 385.266 37.652 385.297 cv
37.48 385.328 37.316 385.371 37.16 385.418 cv
37 385.473 36.852 385.535 36.711 385.605 cv
36.566 385.68 36.434 385.754 36.316 385.832 cv
36.313 386.426 36.352 386.922 36.43 387.316 cv
36.504 387.715 36.613 388.031 36.758 388.27 cv
36.902 388.512 37.082 388.684 37.297 388.785 cv
37.512 388.891 37.762 388.941 38.051 388.937 cv
38.34 388.941 38.594 388.887 38.809 388.773 cv
39.023 388.668 39.199 388.52 39.344 388.332 cv
39.484 388.148 39.59 387.941 39.656 387.711 cv
39.723 387.48 39.758 387.246 39.758 387 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.379 331.879 mo
41.477 331.879 li
41.477 348.969 li
34.379 348.969 li
cp
0 0 0 0 cmyk
ef
40.93 342.984 mo
40.93 343.371 40.859 343.715 40.723 344.012 cv
40.586 344.316 40.391 344.566 40.133 344.77 cv
39.875 344.977 39.555 345.133 39.176 345.234 cv
38.793 345.34 38.359 345.391 37.875 345.391 cv
37.414 345.391 37.004 345.344 36.645 345.25 cv
36.281 345.156 35.977 345.016 35.727 344.824 cv
35.477 344.641 35.285 344.41 35.152 344.133 cv
35.02 343.859 34.953 343.547 34.953 343.191 cv
34.953 342.918 34.996 342.66 35.09 342.426 cv
35.176 342.191 35.309 341.977 35.484 341.781 cv
35.652 341.586 35.863 341.402 36.117 341.227 cv
36.367 341.059 36.652 340.895 36.969 340.738 cv
36.695 340.598 36.453 340.449 36.242 340.289 cv
36.031 340.133 35.852 339.961 35.707 339.773 cv
35.559 339.59 35.449 339.395 35.375 339.184 cv
35.297 338.977 35.258 338.746 35.262 338.496 cv
35.258 338.187 35.313 337.895 35.43 337.621 cv
35.539 337.352 35.711 337.117 35.938 336.914 cv
36.164 336.715 36.449 336.555 36.801 336.437 cv
37.145 336.32 37.555 336.262 38.023 336.262 cv
38.469 336.262 38.855 336.316 39.184 336.422 cv
39.512 336.531 39.781 336.676 39.992 336.859 cv
40.203 337.047 40.359 337.266 40.465 337.516 cv
40.563 337.766 40.613 338.035 40.617 338.324 cv
40.613 338.559 40.574 338.785 40.504 338.996 cv
40.426 339.215 40.316 339.418 40.168 339.605 cv
40.02 339.801 39.84 339.98 39.629 340.145 cv
39.418 340.316 39.176 340.473 38.902 340.613 cv
39.223 340.777 39.508 340.941 39.766 341.109 cv
40.016 341.277 40.23 341.457 40.406 341.652 cv
40.574 341.848 40.703 342.055 40.797 342.27 cv
40.883 342.488 40.93 342.727 40.93 342.984 cv
cp
39.449 338.434 mo
39.445 338.246 39.414 338.07 39.348 337.914 cv
39.281 337.758 39.184 337.625 39.059 337.516 cv
38.93 337.406 38.77 337.324 38.582 337.266 cv
38.387 337.211 38.172 337.184 37.934 337.18 cv
37.438 337.184 37.063 337.293 36.813 337.516 cv
36.555 337.742 36.43 338.051 36.434 338.434 cv
36.43 338.613 36.461 338.777 36.523 338.93 cv
36.586 339.086 36.68 339.23 36.813 339.367 cv
36.938 339.504 37.102 339.637 37.305 339.766 cv
37.5 339.898 37.738 340.035 38.016 340.176 cv
38.477 339.941 38.832 339.68 39.078 339.387 cv
39.324 339.102 39.445 338.785 39.449 338.434 cv
cp
39.738 343.109 mo
39.734 342.902 39.695 342.711 39.621 342.539 cv
39.539 342.371 39.422 342.211 39.266 342.059 cv
39.109 341.91 38.91 341.766 38.676 341.625 cv
38.438 341.488 38.168 341.344 37.859 341.191 cv
37.57 341.336 37.316 341.477 37.102 341.617 cv
36.883 341.758 36.703 341.906 36.566 342.055 cv
36.426 342.211 36.32 342.367 36.25 342.531 cv
36.176 342.699 36.141 342.883 36.145 343.082 cv
36.141 343.527 36.293 343.871 36.602 344.109 cv
36.902 344.355 37.355 344.477 37.961 344.473 cv
38.543 344.477 38.988 344.355 39.289 344.105 cv
39.586 343.863 39.734 343.531 39.738 343.109 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
27.289 287.371 mo
41.48 287.371 li
41.48 304.461 li
27.289 304.461 li
cp
0 0 0 0 cmyk
ef
33.664 300.273 mo
33.66 300.363 33.652 300.434 33.641 300.492 cv
33.625 300.555 33.605 300.605 33.586 300.637 cv
33.563 300.676 33.539 300.699 33.508 300.715 cv
33.477 300.73 33.445 300.738 33.418 300.738 cv
28.781 300.738 li
28.746 300.738 28.719 300.73 28.691 300.715 cv
28.664 300.699 28.637 300.676 28.613 300.637 cv
28.586 300.605 28.566 300.555 28.555 300.492 cv
28.539 300.434 28.531 300.363 28.535 300.273 cv
28.531 300.195 28.539 300.121 28.555 300.059 cv
28.566 300 28.582 299.953 28.605 299.914 cv
28.621 299.879 28.648 299.848 28.68 299.824 cv
28.711 299.805 28.742 299.797 28.781 299.793 cv
30.633 299.793 li
30.633 293.047 li
28.918 294.066 li
28.828 294.117 28.758 294.145 28.711 294.152 cv
28.656 294.16 28.613 294.152 28.582 294.121 cv
28.547 294.094 28.527 294.043 28.516 293.973 cv
28.504 293.906 28.496 293.82 28.5 293.711 cv
28.496 293.637 28.5 293.57 28.512 293.512 cv
28.516 293.461 28.527 293.414 28.543 293.375 cv
28.555 293.34 28.574 293.309 28.598 293.281 cv
28.621 293.254 28.652 293.227 28.699 293.199 cv
30.742 291.887 li
30.758 291.875 30.777 291.863 30.809 291.855 cv
30.832 291.848 30.867 291.84 30.914 291.828 cv
30.953 291.82 31.004 291.812 31.059 291.809 cv
31.113 291.809 31.18 291.809 31.266 291.805 cv
31.371 291.809 31.465 291.812 31.539 291.82 cv
31.609 291.828 31.664 291.844 31.711 291.859 cv
31.75 291.879 31.777 291.898 31.793 291.922 cv
31.801 291.949 31.809 291.973 31.813 291.996 cv
31.813 299.793 li
33.418 299.793 li
33.453 299.797 33.488 299.805 33.52 299.824 cv
33.551 299.848 33.574 299.879 33.598 299.914 cv
33.613 299.953 33.629 300 33.645 300.059 cv
33.652 300.121 33.66 300.195 33.664 300.273 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
41.02 296.281 mo
41.016 296.965 40.965 297.586 40.859 298.148 cv
40.75 298.711 40.57 299.195 40.324 299.598 cv
40.07 300.004 39.742 300.316 39.344 300.535 cv
38.938 300.758 38.445 300.867 37.859 300.867 cv
37.301 300.867 36.828 300.77 36.449 300.57 cv
36.066 300.375 35.762 300.082 35.527 299.695 cv
35.293 299.309 35.125 298.836 35.031 298.27 cv
34.93 297.707 34.883 297.059 34.883 296.324 cv
34.883 295.652 34.938 295.031 35.047 294.465 cv
35.156 293.902 35.332 293.418 35.582 293.012 cv
35.824 292.609 36.148 292.297 36.555 292.07 cv
36.953 291.852 37.449 291.738 38.039 291.738 cv
38.598 291.738 39.07 291.84 39.453 292.035 cv
39.836 292.238 40.141 292.531 40.375 292.914 cv
40.605 293.305 40.773 293.777 40.871 294.34 cv
40.969 294.902 41.016 295.551 41.02 296.281 cv
cp
39.813 296.363 mo
39.809 295.922 39.793 295.523 39.766 295.172 cv
39.73 294.82 39.684 294.512 39.625 294.242 cv
39.559 293.973 39.48 293.742 39.383 293.547 cv
39.285 293.355 39.168 293.195 39.031 293.066 cv
38.891 292.941 38.73 292.848 38.559 292.789 cv
38.379 292.734 38.184 292.707 37.969 292.703 cv
37.578 292.707 37.262 292.797 37.023 292.98 cv
36.777 293.164 36.586 293.418 36.449 293.734 cv
36.309 294.055 36.215 294.426 36.164 294.855 cv
36.113 295.285 36.09 295.75 36.09 296.242 cv
36.09 296.906 36.121 297.469 36.191 297.93 cv
36.258 298.398 36.367 298.777 36.52 299.066 cv
36.664 299.363 36.855 299.574 37.086 299.703 cv
37.316 299.84 37.598 299.906 37.93 299.902 cv
38.184 299.906 38.406 299.867 38.602 299.781 cv
38.793 299.703 38.961 299.582 39.102 299.426 cv
39.242 299.273 39.355 299.09 39.449 298.875 cv
39.535 298.66 39.609 298.422 39.668 298.16 cv
39.719 297.902 39.758 297.621 39.781 297.316 cv
39.801 297.012 39.809 296.695 39.813 296.363 cv
cp
f
27.289 242.871 mo
41.48 242.871 li
41.48 259.961 li
27.289 259.961 li
cp
0 0 0 0 cmyk
ef
33.664 255.785 mo
33.66 255.875 33.652 255.945 33.641 256.004 cv
33.625 256.066 33.605 256.117 33.586 256.148 cv
33.563 256.187 33.539 256.211 33.508 256.227 cv
33.477 256.242 33.445 256.25 33.418 256.25 cv
28.781 256.25 li
28.746 256.25 28.719 256.242 28.691 256.227 cv
28.664 256.211 28.637 256.187 28.613 256.148 cv
28.586 256.117 28.566 256.066 28.555 256.004 cv
28.539 255.945 28.531 255.875 28.535 255.785 cv
28.531 255.707 28.539 255.633 28.555 255.57 cv
28.566 255.512 28.582 255.465 28.605 255.426 cv
28.621 255.391 28.648 255.359 28.68 255.336 cv
28.711 255.316 28.742 255.309 28.781 255.305 cv
30.633 255.305 li
30.633 248.559 li
28.918 249.578 li
28.828 249.629 28.758 249.656 28.711 249.664 cv
28.656 249.672 28.613 249.664 28.582 249.633 cv
28.547 249.605 28.527 249.555 28.516 249.484 cv
28.504 249.418 28.496 249.332 28.5 249.223 cv
28.496 249.148 28.5 249.082 28.512 249.023 cv
28.516 248.973 28.527 248.926 28.543 248.887 cv
28.555 248.852 28.574 248.82 28.598 248.793 cv
28.621 248.766 28.652 248.738 28.699 248.711 cv
30.742 247.398 li
30.758 247.387 30.777 247.375 30.809 247.367 cv
30.832 247.359 30.867 247.352 30.914 247.34 cv
30.953 247.332 31.004 247.324 31.059 247.32 cv
31.113 247.32 31.18 247.32 31.266 247.316 cv
31.371 247.32 31.465 247.324 31.539 247.332 cv
31.609 247.34 31.664 247.355 31.711 247.371 cv
31.75 247.391 31.777 247.41 31.793 247.434 cv
31.801 247.461 31.809 247.484 31.813 247.508 cv
31.813 255.305 li
33.418 255.305 li
33.453 255.309 33.488 255.316 33.52 255.336 cv
33.551 255.359 33.574 255.391 33.598 255.426 cv
33.613 255.465 33.629 255.512 33.645 255.57 cv
33.652 255.633 33.66 255.707 33.664 255.785 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.727 255.742 mo
40.723 255.828 40.719 255.902 40.707 255.965 cv
40.695 256.031 40.68 256.086 40.66 256.125 cv
40.637 256.172 40.609 256.203 40.578 256.219 cv
40.543 256.242 40.504 256.25 40.465 256.25 cv
35.563 256.25 li
35.5 256.25 35.441 256.242 35.395 256.227 cv
35.344 256.211 35.305 256.187 35.27 256.148 cv
35.234 256.117 35.207 256.062 35.195 255.992 cv
35.176 255.922 35.168 255.836 35.172 255.734 cv
35.168 255.645 35.172 255.566 35.18 255.496 cv
35.184 255.43 35.199 255.371 35.227 255.316 cv
35.25 255.266 35.281 255.211 35.316 255.156 cv
35.352 255.105 35.395 255.051 35.453 254.988 cv
37.227 253.164 li
37.637 252.746 37.965 252.371 38.215 252.035 cv
38.461 251.707 38.652 251.402 38.785 251.125 cv
38.918 250.852 39.004 250.602 39.051 250.375 cv
39.09 250.152 39.113 249.941 39.113 249.746 cv
39.113 249.551 39.078 249.367 39.012 249.187 cv
38.945 249.016 38.852 248.859 38.727 248.723 cv
38.602 248.594 38.445 248.488 38.258 248.406 cv
38.07 248.332 37.852 248.293 37.605 248.289 cv
37.316 248.293 37.059 248.332 36.832 248.406 cv
36.602 248.488 36.402 248.574 36.23 248.66 cv
36.059 248.754 35.914 248.836 35.797 248.914 cv
35.68 248.992 35.594 249.031 35.543 249.031 cv
35.508 249.031 35.477 249.023 35.453 249.004 cv
35.422 248.988 35.402 248.957 35.387 248.914 cv
35.371 248.875 35.355 248.82 35.348 248.75 cv
35.336 248.684 35.332 248.602 35.336 248.504 cv
35.332 248.437 35.336 248.379 35.344 248.328 cv
35.348 248.277 35.355 248.234 35.367 248.195 cv
35.375 248.16 35.391 248.125 35.41 248.094 cv
35.43 248.062 35.465 248.023 35.523 247.973 cv
35.574 247.926 35.668 247.859 35.805 247.777 cv
35.938 247.695 36.109 247.617 36.313 247.535 cv
36.516 247.457 36.738 247.387 36.984 247.332 cv
37.227 247.277 37.484 247.25 37.758 247.25 cv
38.184 247.25 38.559 247.312 38.883 247.434 cv
39.203 247.555 39.469 247.719 39.684 247.93 cv
39.895 248.141 40.055 248.387 40.16 248.66 cv
40.266 248.941 40.32 249.238 40.32 249.551 cv
40.32 249.84 40.293 250.121 40.242 250.398 cv
40.191 250.684 40.086 250.988 39.926 251.312 cv
39.762 251.641 39.527 252.004 39.223 252.402 cv
38.914 252.805 38.508 253.266 38.004 253.781 cv
36.598 255.25 li
40.457 255.25 li
40.488 255.254 40.523 255.266 40.563 255.281 cv
40.594 255.305 40.625 255.336 40.652 255.375 cv
40.676 255.418 40.695 255.469 40.707 255.527 cv
40.719 255.594 40.723 255.664 40.727 255.742 cv
cp
f
27.289 198.371 mo
41.48 198.371 li
41.48 215.461 li
27.289 215.461 li
cp
0 0 0 0 cmyk
ef
33.664 211.266 mo
33.66 211.355 33.652 211.426 33.641 211.484 cv
33.625 211.547 33.605 211.598 33.586 211.629 cv
33.563 211.668 33.539 211.691 33.508 211.707 cv
33.477 211.723 33.445 211.73 33.418 211.73 cv
28.781 211.73 li
28.746 211.73 28.719 211.723 28.691 211.707 cv
28.664 211.691 28.637 211.668 28.613 211.629 cv
28.586 211.598 28.566 211.547 28.555 211.484 cv
28.539 211.426 28.531 211.355 28.535 211.266 cv
28.531 211.187 28.539 211.113 28.555 211.051 cv
28.566 210.992 28.582 210.945 28.605 210.906 cv
28.621 210.871 28.648 210.84 28.68 210.816 cv
28.711 210.797 28.742 210.789 28.781 210.785 cv
30.633 210.785 li
30.633 204.039 li
28.918 205.059 li
28.828 205.109 28.758 205.137 28.711 205.145 cv
28.656 205.152 28.613 205.145 28.582 205.113 cv
28.547 205.086 28.527 205.035 28.516 204.965 cv
28.504 204.898 28.496 204.812 28.5 204.703 cv
28.496 204.629 28.5 204.562 28.512 204.504 cv
28.516 204.453 28.527 204.406 28.543 204.367 cv
28.555 204.332 28.574 204.301 28.598 204.273 cv
28.621 204.246 28.652 204.219 28.699 204.191 cv
30.742 202.879 li
30.758 202.867 30.777 202.855 30.809 202.848 cv
30.832 202.84 30.867 202.832 30.914 202.82 cv
30.953 202.812 31.004 202.805 31.059 202.801 cv
31.113 202.801 31.18 202.801 31.266 202.797 cv
31.371 202.801 31.465 202.805 31.539 202.812 cv
31.609 202.82 31.664 202.836 31.711 202.852 cv
31.75 202.871 31.777 202.891 31.793 202.914 cv
31.801 202.941 31.809 202.965 31.813 202.988 cv
31.813 210.785 li
33.418 210.785 li
33.453 210.789 33.488 210.797 33.52 210.816 cv
33.551 210.84 33.574 210.871 33.598 210.906 cv
33.613 210.945 33.629 210.992 33.645 211.051 cv
33.652 211.113 33.66 211.187 33.664 211.266 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
41.102 209.207 mo
41.098 209.359 41.074 209.48 41.031 209.566 cv
40.984 209.656 40.922 209.699 40.84 209.695 cv
39.84 209.695 li
39.84 211.559 li
39.84 211.598 39.828 211.629 39.813 211.652 cv
39.789 211.68 39.758 211.699 39.715 211.719 cv
39.664 211.734 39.602 211.746 39.531 211.758 cv
39.453 211.766 39.359 211.77 39.242 211.773 cv
39.125 211.77 39.027 211.766 38.957 211.758 cv
38.879 211.746 38.82 211.734 38.777 211.719 cv
38.73 211.699 38.699 211.68 38.684 211.652 cv
38.664 211.629 38.656 211.598 38.66 211.559 cv
38.66 209.695 li
35.031 209.695 li
34.973 209.699 34.93 209.691 34.895 209.676 cv
34.859 209.664 34.824 209.637 34.797 209.598 cv
34.766 209.562 34.746 209.512 34.734 209.441 cv
34.723 209.375 34.719 209.285 34.719 209.172 cv
34.719 209.09 34.719 209.012 34.727 208.941 cv
34.727 208.871 34.738 208.809 34.754 208.754 cv
34.766 208.699 34.781 208.645 34.809 208.59 cv
34.828 208.535 34.855 208.48 34.891 208.418 cv
38.051 203.031 li
38.07 202.996 38.105 202.965 38.152 202.937 cv
38.195 202.91 38.25 202.887 38.324 202.867 cv
38.391 202.852 38.477 202.84 38.582 202.828 cv
38.684 202.824 38.805 202.82 38.945 202.816 cv
39.094 202.82 39.23 202.824 39.348 202.836 cv
39.461 202.848 39.551 202.863 39.625 202.879 cv
39.691 202.898 39.746 202.922 39.785 202.953 cv
39.82 202.984 39.84 203.02 39.84 203.059 cv
39.84 208.723 li
40.84 208.723 li
40.914 208.727 40.977 208.766 41.027 208.844 cv
41.074 208.926 41.098 209.047 41.102 209.207 cv
cp
38.66 203.855 mo
38.648 203.855 li
35.797 208.723 li
38.66 208.723 li
cp
f
27.289 153.859 mo
41.48 153.859 li
41.48 170.949 li
27.289 170.949 li
cp
0 0 0 0 cmyk
ef
33.664 166.746 mo
33.66 166.836 33.652 166.906 33.641 166.965 cv
33.625 167.027 33.605 167.078 33.586 167.109 cv
33.563 167.148 33.539 167.172 33.508 167.187 cv
33.477 167.203 33.445 167.211 33.418 167.211 cv
28.781 167.211 li
28.746 167.211 28.719 167.203 28.691 167.187 cv
28.664 167.172 28.637 167.148 28.613 167.109 cv
28.586 167.078 28.566 167.027 28.555 166.965 cv
28.539 166.906 28.531 166.836 28.535 166.746 cv
28.531 166.668 28.539 166.594 28.555 166.531 cv
28.566 166.473 28.582 166.426 28.605 166.387 cv
28.621 166.352 28.648 166.32 28.68 166.297 cv
28.711 166.277 28.742 166.27 28.781 166.266 cv
30.633 166.266 li
30.633 159.52 li
28.918 160.539 li
28.828 160.59 28.758 160.617 28.711 160.625 cv
28.656 160.633 28.613 160.625 28.582 160.594 cv
28.547 160.566 28.527 160.516 28.516 160.445 cv
28.504 160.379 28.496 160.293 28.5 160.184 cv
28.496 160.109 28.5 160.043 28.512 159.984 cv
28.516 159.934 28.527 159.887 28.543 159.848 cv
28.555 159.812 28.574 159.781 28.598 159.754 cv
28.621 159.727 28.652 159.699 28.699 159.672 cv
30.742 158.359 li
30.758 158.348 30.777 158.336 30.809 158.328 cv
30.832 158.32 30.867 158.312 30.914 158.301 cv
30.953 158.293 31.004 158.285 31.059 158.281 cv
31.113 158.281 31.18 158.281 31.266 158.277 cv
31.371 158.281 31.465 158.285 31.539 158.293 cv
31.609 158.301 31.664 158.316 31.711 158.332 cv
31.75 158.352 31.777 158.371 31.793 158.395 cv
31.801 158.422 31.809 158.445 31.813 158.469 cv
31.813 166.266 li
33.418 166.266 li
33.453 166.27 33.488 166.277 33.52 166.297 cv
33.551 166.32 33.574 166.352 33.598 166.387 cv
33.613 166.426 33.629 166.473 33.645 166.531 cv
33.652 166.594 33.66 166.668 33.664 166.746 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.953 164.34 mo
40.953 164.73 40.891 165.109 40.773 165.469 cv
40.648 165.836 40.465 166.152 40.223 166.426 cv
39.973 166.703 39.66 166.926 39.285 167.09 cv
38.902 167.258 38.457 167.34 37.941 167.34 cv
37.57 167.34 37.242 167.297 36.961 167.203 cv
36.676 167.117 36.43 166.984 36.219 166.812 cv
36.008 166.645 35.832 166.437 35.695 166.191 cv
35.555 165.945 35.441 165.664 35.359 165.348 cv
35.273 165.035 35.215 164.691 35.18 164.312 cv
35.141 163.941 35.121 163.539 35.125 163.105 cv
35.121 162.727 35.141 162.344 35.184 161.953 cv
35.223 161.57 35.297 161.195 35.402 160.828 cv
35.508 160.469 35.652 160.129 35.832 159.812 cv
36.012 159.496 36.238 159.219 36.512 158.984 cv
36.785 158.75 37.109 158.562 37.488 158.422 cv
37.867 158.285 38.309 158.219 38.813 158.215 cv
38.98 158.219 39.152 158.227 39.324 158.246 cv
39.496 158.27 39.656 158.301 39.805 158.332 cv
39.953 158.371 40.074 158.406 40.176 158.445 cv
40.273 158.484 40.34 158.52 40.375 158.543 cv
40.402 158.57 40.426 158.598 40.445 158.625 cv
40.461 158.656 40.477 158.687 40.484 158.723 cv
40.492 158.758 40.496 158.797 40.504 158.84 cv
40.504 158.883 40.508 158.937 40.512 159 cv
40.508 159.086 40.508 159.156 40.508 159.211 cv
40.504 159.273 40.492 159.32 40.48 159.355 cv
40.461 159.395 40.441 159.422 40.418 159.437 cv
40.391 159.457 40.359 159.465 40.32 159.465 cv
40.27 159.465 40.199 159.449 40.113 159.418 cv
40.023 159.387 39.918 159.352 39.797 159.309 cv
39.672 159.273 39.523 159.238 39.348 159.203 cv
39.172 159.176 38.969 159.16 38.738 159.156 cv
38.309 159.16 37.941 159.246 37.637 159.418 cv
37.332 159.59 37.082 159.824 36.887 160.117 cv
36.691 160.41 36.547 160.75 36.457 161.133 cv
36.359 161.523 36.305 161.926 36.297 162.344 cv
36.414 162.277 36.551 162.211 36.699 162.141 cv
36.848 162.074 37.008 162.012 37.184 161.953 cv
37.359 161.902 37.547 161.855 37.742 161.82 cv
37.938 161.789 38.148 161.773 38.375 161.77 cv
38.852 161.773 39.254 161.84 39.586 161.965 cv
39.914 162.098 40.18 162.277 40.387 162.508 cv
40.586 162.738 40.73 163.008 40.82 163.32 cv
40.906 163.633 40.953 163.973 40.953 164.34 cv
cp
39.758 164.449 mo
39.758 164.187 39.73 163.945 39.68 163.727 cv
39.625 163.512 39.535 163.328 39.414 163.172 cv
39.289 163.023 39.125 162.906 38.922 162.824 cv
38.711 162.742 38.457 162.699 38.16 162.699 cv
37.988 162.699 37.82 162.715 37.652 162.746 cv
37.48 162.777 37.316 162.82 37.16 162.867 cv
37 162.922 36.852 162.984 36.711 163.055 cv
36.566 163.129 36.434 163.203 36.316 163.281 cv
36.313 163.875 36.352 164.371 36.43 164.766 cv
36.504 165.164 36.613 165.48 36.758 165.719 cv
36.902 165.961 37.082 166.133 37.297 166.234 cv
37.512 166.34 37.762 166.391 38.051 166.387 cv
38.34 166.391 38.594 166.336 38.809 166.223 cv
39.023 166.117 39.199 165.969 39.344 165.781 cv
39.484 165.598 39.59 165.391 39.656 165.16 cv
39.723 164.93 39.758 164.695 39.758 164.449 cv
cp
f
27.289 109.359 mo
41.48 109.359 li
41.48 126.449 li
27.289 126.449 li
cp
0 0 0 0 cmyk
ef
33.664 122.246 mo
33.66 122.336 33.652 122.406 33.641 122.465 cv
33.625 122.527 33.605 122.578 33.586 122.609 cv
33.563 122.648 33.539 122.672 33.508 122.687 cv
33.477 122.703 33.445 122.711 33.418 122.711 cv
28.781 122.711 li
28.746 122.711 28.719 122.703 28.691 122.687 cv
28.664 122.672 28.637 122.648 28.613 122.609 cv
28.586 122.578 28.566 122.527 28.555 122.465 cv
28.539 122.406 28.531 122.336 28.535 122.246 cv
28.531 122.168 28.539 122.094 28.555 122.031 cv
28.566 121.973 28.582 121.926 28.605 121.887 cv
28.621 121.852 28.648 121.82 28.68 121.797 cv
28.711 121.777 28.742 121.77 28.781 121.766 cv
30.633 121.766 li
30.633 115.02 li
28.918 116.039 li
28.828 116.09 28.758 116.117 28.711 116.125 cv
28.656 116.133 28.613 116.125 28.582 116.094 cv
28.547 116.066 28.527 116.016 28.516 115.945 cv
28.504 115.879 28.496 115.793 28.5 115.684 cv
28.496 115.609 28.5 115.543 28.512 115.484 cv
28.516 115.434 28.527 115.387 28.543 115.348 cv
28.555 115.312 28.574 115.281 28.598 115.254 cv
28.621 115.227 28.652 115.199 28.699 115.172 cv
30.742 113.859 li
30.758 113.848 30.777 113.836 30.809 113.828 cv
30.832 113.82 30.867 113.812 30.914 113.801 cv
30.953 113.793 31.004 113.785 31.059 113.781 cv
31.113 113.781 31.18 113.781 31.266 113.777 cv
31.371 113.781 31.465 113.785 31.539 113.793 cv
31.609 113.801 31.664 113.816 31.711 113.832 cv
31.75 113.852 31.777 113.871 31.793 113.895 cv
31.801 113.922 31.809 113.945 31.813 113.969 cv
31.813 121.766 li
33.418 121.766 li
33.453 121.77 33.488 121.777 33.52 121.797 cv
33.551 121.82 33.574 121.852 33.598 121.887 cv
33.613 121.926 33.629 121.973 33.645 122.031 cv
33.652 122.094 33.66 122.168 33.664 122.246 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.93 120.434 mo
40.93 120.82 40.859 121.164 40.723 121.461 cv
40.586 121.766 40.391 122.016 40.133 122.219 cv
39.875 122.426 39.555 122.582 39.176 122.684 cv
38.793 122.789 38.359 122.84 37.875 122.84 cv
37.414 122.84 37.004 122.793 36.645 122.699 cv
36.281 122.605 35.977 122.465 35.727 122.273 cv
35.477 122.09 35.285 121.859 35.152 121.582 cv
35.02 121.309 34.953 120.996 34.953 120.641 cv
34.953 120.367 34.996 120.109 35.09 119.875 cv
35.176 119.641 35.309 119.426 35.484 119.23 cv
35.652 119.035 35.863 118.852 36.117 118.676 cv
36.367 118.508 36.652 118.344 36.969 118.187 cv
36.695 118.047 36.453 117.898 36.242 117.738 cv
36.031 117.582 35.852 117.41 35.707 117.223 cv
35.559 117.039 35.449 116.844 35.375 116.633 cv
35.297 116.426 35.258 116.195 35.262 115.945 cv
35.258 115.637 35.313 115.344 35.43 115.07 cv
35.539 114.801 35.711 114.566 35.938 114.363 cv
36.164 114.164 36.449 114.004 36.801 113.887 cv
37.145 113.77 37.555 113.711 38.023 113.711 cv
38.469 113.711 38.855 113.766 39.184 113.871 cv
39.512 113.98 39.781 114.125 39.992 114.309 cv
40.203 114.496 40.359 114.715 40.465 114.965 cv
40.563 115.215 40.613 115.484 40.617 115.773 cv
40.613 116.008 40.574 116.234 40.504 116.445 cv
40.426 116.664 40.316 116.867 40.168 117.055 cv
40.02 117.25 39.84 117.43 39.629 117.594 cv
39.418 117.766 39.176 117.922 38.902 118.062 cv
39.223 118.227 39.508 118.391 39.766 118.559 cv
40.016 118.727 40.23 118.906 40.406 119.102 cv
40.574 119.297 40.703 119.504 40.797 119.719 cv
40.883 119.937 40.93 120.176 40.93 120.434 cv
cp
39.449 115.883 mo
39.445 115.695 39.414 115.52 39.348 115.363 cv
39.281 115.207 39.184 115.074 39.059 114.965 cv
38.93 114.855 38.77 114.773 38.582 114.715 cv
38.387 114.66 38.172 114.633 37.934 114.629 cv
37.438 114.633 37.063 114.742 36.813 114.965 cv
36.555 115.191 36.43 115.5 36.434 115.883 cv
36.43 116.062 36.461 116.227 36.523 116.379 cv
36.586 116.535 36.68 116.68 36.813 116.816 cv
36.938 116.953 37.102 117.086 37.305 117.215 cv
37.5 117.348 37.738 117.484 38.016 117.625 cv
38.477 117.391 38.832 117.129 39.078 116.836 cv
39.324 116.551 39.445 116.234 39.449 115.883 cv
cp
39.738 120.559 mo
39.734 120.352 39.695 120.16 39.621 119.988 cv
39.539 119.82 39.422 119.66 39.266 119.508 cv
39.109 119.359 38.91 119.215 38.676 119.074 cv
38.438 118.937 38.168 118.793 37.859 118.641 cv
37.57 118.785 37.316 118.926 37.102 119.066 cv
36.883 119.207 36.703 119.355 36.566 119.504 cv
36.426 119.66 36.32 119.816 36.25 119.98 cv
36.176 120.148 36.141 120.332 36.145 120.531 cv
36.141 120.977 36.293 121.32 36.602 121.559 cv
36.902 121.805 37.355 121.926 37.961 121.922 cv
38.543 121.926 38.988 121.805 39.289 121.555 cv
39.586 121.312 39.734 120.98 39.738 120.559 cv
cp
f
27.289 64.859 mo
41.48 64.859 li
41.48 81.949 li
27.289 81.949 li
cp
0 0 0 0 cmyk
ef
33.645 77.684 mo
33.641 77.77 33.637 77.844 33.625 77.906 cv
33.613 77.973 33.598 78.027 33.578 78.066 cv
33.555 78.113 33.527 78.145 33.496 78.16 cv
33.461 78.184 33.422 78.191 33.383 78.191 cv
28.48 78.191 li
28.418 78.191 28.359 78.184 28.313 78.168 cv
28.262 78.152 28.223 78.129 28.188 78.09 cv
28.152 78.059 28.125 78.004 28.113 77.934 cv
28.094 77.863 28.086 77.777 28.09 77.676 cv
28.086 77.586 28.09 77.508 28.098 77.437 cv
28.102 77.371 28.117 77.312 28.145 77.258 cv
28.168 77.207 28.199 77.152 28.234 77.098 cv
28.27 77.047 28.313 76.992 28.371 76.93 cv
30.145 75.105 li
30.555 74.687 30.883 74.312 31.133 73.977 cv
31.379 73.648 31.57 73.344 31.703 73.066 cv
31.836 72.793 31.922 72.543 31.969 72.316 cv
32.008 72.094 32.031 71.883 32.031 71.687 cv
32.031 71.492 31.996 71.309 31.93 71.129 cv
31.863 70.957 31.77 70.801 31.645 70.664 cv
31.52 70.535 31.363 70.43 31.176 70.348 cv
30.988 70.273 30.77 70.234 30.523 70.23 cv
30.234 70.234 29.977 70.273 29.75 70.348 cv
29.52 70.43 29.32 70.516 29.148 70.602 cv
28.977 70.695 28.832 70.777 28.715 70.855 cv
28.598 70.934 28.512 70.973 28.461 70.973 cv
28.426 70.973 28.395 70.965 28.371 70.945 cv
28.34 70.93 28.32 70.898 28.305 70.855 cv
28.289 70.816 28.273 70.762 28.266 70.691 cv
28.254 70.625 28.25 70.543 28.254 70.445 cv
28.25 70.379 28.254 70.32 28.262 70.27 cv
28.266 70.219 28.273 70.176 28.285 70.137 cv
28.293 70.102 28.309 70.066 28.328 70.035 cv
28.348 70.004 28.383 69.965 28.441 69.914 cv
28.492 69.867 28.586 69.801 28.723 69.719 cv
28.855 69.637 29.027 69.559 29.23 69.477 cv
29.434 69.398 29.656 69.328 29.902 69.273 cv
30.145 69.219 30.402 69.191 30.676 69.191 cv
31.102 69.191 31.477 69.254 31.801 69.375 cv
32.121 69.496 32.387 69.66 32.602 69.871 cv
32.813 70.082 32.973 70.328 33.078 70.602 cv
33.184 70.883 33.238 71.18 33.238 71.492 cv
33.238 71.781 33.211 72.062 33.16 72.34 cv
33.109 72.625 33.004 72.93 32.844 73.254 cv
32.68 73.582 32.445 73.945 32.141 74.344 cv
31.832 74.746 31.426 75.207 30.922 75.723 cv
29.516 77.191 li
33.375 77.191 li
33.406 77.195 33.441 77.207 33.48 77.223 cv
33.512 77.246 33.543 77.277 33.57 77.316 cv
33.594 77.359 33.613 77.41 33.625 77.469 cv
33.637 77.535 33.641 77.605 33.645 77.684 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
41.02 73.734 mo
41.016 74.418 40.965 75.039 40.859 75.602 cv
40.75 76.164 40.57 76.648 40.324 77.051 cv
40.07 77.457 39.742 77.77 39.344 77.988 cv
38.938 78.211 38.445 78.32 37.859 78.32 cv
37.301 78.32 36.828 78.223 36.449 78.023 cv
36.066 77.828 35.762 77.535 35.527 77.148 cv
35.293 76.762 35.125 76.289 35.031 75.723 cv
34.93 75.16 34.883 74.512 34.883 73.777 cv
34.883 73.105 34.938 72.484 35.047 71.918 cv
35.156 71.355 35.332 70.871 35.582 70.465 cv
35.824 70.062 36.148 69.75 36.555 69.523 cv
36.953 69.305 37.449 69.191 38.039 69.191 cv
38.598 69.191 39.07 69.293 39.453 69.488 cv
39.836 69.691 40.141 69.984 40.375 70.367 cv
40.605 70.758 40.773 71.23 40.871 71.793 cv
40.969 72.355 41.016 73.004 41.02 73.734 cv
cp
39.813 73.816 mo
39.809 73.375 39.793 72.977 39.766 72.625 cv
39.73 72.273 39.684 71.965 39.625 71.695 cv
39.559 71.426 39.48 71.195 39.383 71 cv
39.285 70.809 39.168 70.648 39.031 70.52 cv
38.891 70.395 38.73 70.301 38.559 70.242 cv
38.379 70.187 38.184 70.16 37.969 70.156 cv
37.578 70.16 37.262 70.25 37.023 70.434 cv
36.777 70.617 36.586 70.871 36.449 71.187 cv
36.309 71.508 36.215 71.879 36.164 72.309 cv
36.113 72.738 36.09 73.203 36.09 73.695 cv
36.09 74.359 36.121 74.922 36.191 75.383 cv
36.258 75.852 36.367 76.23 36.52 76.52 cv
36.664 76.816 36.855 77.027 37.086 77.156 cv
37.316 77.293 37.598 77.359 37.93 77.355 cv
38.184 77.359 38.406 77.32 38.602 77.234 cv
38.793 77.156 38.961 77.035 39.102 76.879 cv
39.242 76.727 39.355 76.543 39.449 76.328 cv
39.535 76.113 39.609 75.875 39.668 75.613 cv
39.719 75.355 39.758 75.074 39.781 74.77 cv
39.801 74.465 39.809 74.148 39.813 73.816 cv
cp
f
27.289 20.352 mo
41.48 20.352 li
41.48 37.442 li
27.289 37.442 li
cp
0 0 0 0 cmyk
ef
33.645 33.164 mo
33.641 33.25 33.637 33.324 33.625 33.387 cv
33.613 33.453 33.598 33.508 33.578 33.547 cv
33.555 33.594 33.527 33.625 33.496 33.641 cv
33.461 33.664 33.422 33.672 33.383 33.672 cv
28.48 33.672 li
28.418 33.672 28.359 33.664 28.313 33.648 cv
28.262 33.633 28.223 33.609 28.188 33.57 cv
28.152 33.539 28.125 33.484 28.113 33.414 cv
28.094 33.344 28.086 33.258 28.09 33.156 cv
28.086 33.066 28.09 32.988 28.098 32.918 cv
28.102 32.852 28.117 32.793 28.145 32.738 cv
28.168 32.687 28.199 32.633 28.234 32.578 cv
28.27 32.527 28.313 32.473 28.371 32.41 cv
30.145 30.586 li
30.555 30.168 30.883 29.793 31.133 29.457 cv
31.379 29.129 31.57 28.824 31.703 28.547 cv
31.836 28.273 31.922 28.023 31.969 27.797 cv
32.008 27.574 32.031 27.363 32.031 27.168 cv
32.031 26.973 31.996 26.789 31.93 26.609 cv
31.863 26.437 31.77 26.281 31.645 26.145 cv
31.52 26.016 31.363 25.91 31.176 25.828 cv
30.988 25.754 30.77 25.715 30.523 25.711 cv
30.234 25.715 29.977 25.754 29.75 25.828 cv
29.52 25.91 29.32 25.996 29.148 26.082 cv
28.977 26.176 28.832 26.258 28.715 26.336 cv
28.598 26.414 28.512 26.453 28.461 26.453 cv
28.426 26.453 28.395 26.445 28.371 26.426 cv
28.34 26.41 28.32 26.379 28.305 26.336 cv
28.289 26.297 28.273 26.242 28.266 26.172 cv
28.254 26.105 28.25 26.023 28.254 25.926 cv
28.25 25.859 28.254 25.801 28.262 25.75 cv
28.266 25.699 28.273 25.656 28.285 25.617 cv
28.293 25.582 28.309 25.547 28.328 25.516 cv
28.348 25.484 28.383 25.445 28.441 25.395 cv
28.492 25.348 28.586 25.281 28.723 25.199 cv
28.855 25.117 29.027 25.039 29.23 24.957 cv
29.434 24.879 29.656 24.809 29.902 24.754 cv
30.145 24.699 30.402 24.672 30.676 24.672 cv
31.102 24.672 31.477 24.734 31.801 24.855 cv
32.121 24.977 32.387 25.141 32.602 25.352 cv
32.813 25.562 32.973 25.809 33.078 26.082 cv
33.184 26.363 33.238 26.66 33.238 26.973 cv
33.238 27.262 33.211 27.543 33.16 27.82 cv
33.109 28.105 33.004 28.41 32.844 28.734 cv
32.68 29.062 32.445 29.426 32.141 29.824 cv
31.832 30.227 31.426 30.687 30.922 31.203 cv
29.516 32.672 li
33.375 32.672 li
33.406 32.676 33.441 32.687 33.48 32.703 cv
33.512 32.727 33.543 32.758 33.57 32.797 cv
33.594 32.84 33.613 32.891 33.625 32.949 cv
33.637 33.016 33.641 33.086 33.645 33.164 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.727 33.164 mo
40.723 33.25 40.719 33.324 40.707 33.387 cv
40.695 33.453 40.68 33.508 40.66 33.547 cv
40.637 33.594 40.609 33.625 40.578 33.641 cv
40.543 33.664 40.504 33.672 40.465 33.672 cv
35.563 33.672 li
35.5 33.672 35.441 33.664 35.395 33.648 cv
35.344 33.633 35.305 33.609 35.27 33.57 cv
35.234 33.539 35.207 33.484 35.195 33.414 cv
35.176 33.344 35.168 33.258 35.172 33.156 cv
35.168 33.066 35.172 32.988 35.18 32.918 cv
35.184 32.852 35.199 32.793 35.227 32.738 cv
35.25 32.687 35.281 32.633 35.316 32.578 cv
35.352 32.527 35.395 32.473 35.453 32.41 cv
37.227 30.586 li
37.637 30.168 37.965 29.793 38.215 29.457 cv
38.461 29.129 38.652 28.824 38.785 28.547 cv
38.918 28.273 39.004 28.023 39.051 27.797 cv
39.09 27.574 39.113 27.363 39.113 27.168 cv
39.113 26.973 39.078 26.789 39.012 26.609 cv
38.945 26.437 38.852 26.281 38.727 26.145 cv
38.602 26.016 38.445 25.91 38.258 25.828 cv
38.07 25.754 37.852 25.715 37.605 25.711 cv
37.316 25.715 37.059 25.754 36.832 25.828 cv
36.602 25.91 36.402 25.996 36.23 26.082 cv
36.059 26.176 35.914 26.258 35.797 26.336 cv
35.68 26.414 35.594 26.453 35.543 26.453 cv
35.508 26.453 35.477 26.445 35.453 26.426 cv
35.422 26.41 35.402 26.379 35.387 26.336 cv
35.371 26.297 35.355 26.242 35.348 26.172 cv
35.336 26.105 35.332 26.023 35.336 25.926 cv
35.332 25.859 35.336 25.801 35.344 25.75 cv
35.348 25.699 35.355 25.656 35.367 25.617 cv
35.375 25.582 35.391 25.547 35.41 25.516 cv
35.43 25.484 35.465 25.445 35.523 25.395 cv
35.574 25.348 35.668 25.281 35.805 25.199 cv
35.938 25.117 36.109 25.039 36.313 24.957 cv
36.516 24.879 36.738 24.809 36.984 24.754 cv
37.227 24.699 37.484 24.672 37.758 24.672 cv
38.184 24.672 38.559 24.734 38.883 24.855 cv
39.203 24.977 39.469 25.141 39.684 25.352 cv
39.895 25.562 40.055 25.809 40.16 26.082 cv
40.266 26.363 40.32 26.66 40.32 26.973 cv
40.32 27.262 40.293 27.543 40.242 27.82 cv
40.191 28.105 40.086 28.41 39.926 28.734 cv
39.762 29.062 39.527 29.426 39.223 29.824 cv
38.914 30.227 38.508 30.687 38.004 31.203 cv
36.598 32.672 li
40.457 32.672 li
40.488 32.676 40.523 32.687 40.563 32.703 cv
40.594 32.727 40.625 32.758 40.652 32.797 cv
40.676 32.84 40.695 32.891 40.707 32.949 cv
40.719 33.016 40.723 33.086 40.727 33.164 cv
cp
f
57.285 541.047 mo
57.281 541.137 57.273 541.207 57.262 541.266 cv
57.246 541.328 57.227 541.379 57.207 541.41 cv
57.184 541.449 57.16 541.473 57.129 541.488 cv
57.098 541.504 57.066 541.512 57.039 541.512 cv
52.402 541.512 li
52.367 541.512 52.34 541.504 52.313 541.488 cv
52.285 541.473 52.258 541.449 52.234 541.41 cv
52.207 541.379 52.188 541.328 52.176 541.266 cv
52.16 541.207 52.152 541.137 52.156 541.047 cv
52.152 540.969 52.16 540.895 52.176 540.832 cv
52.188 540.773 52.203 540.727 52.227 540.687 cv
52.242 540.652 52.27 540.621 52.301 540.598 cv
52.332 540.578 52.363 540.57 52.402 540.566 cv
54.254 540.566 li
54.254 533.82 li
52.539 534.84 li
52.449 534.891 52.379 534.918 52.332 534.926 cv
52.277 534.934 52.234 534.926 52.203 534.895 cv
52.168 534.867 52.148 534.816 52.137 534.746 cv
52.125 534.68 52.117 534.594 52.121 534.484 cv
52.117 534.41 52.121 534.344 52.133 534.285 cv
52.137 534.234 52.148 534.187 52.164 534.148 cv
52.176 534.113 52.195 534.082 52.219 534.055 cv
52.242 534.027 52.273 534 52.32 533.973 cv
54.363 532.66 li
54.379 532.648 54.398 532.637 54.43 532.629 cv
54.453 532.621 54.488 532.613 54.535 532.602 cv
54.574 532.594 54.625 532.586 54.68 532.582 cv
54.734 532.582 54.801 532.582 54.887 532.578 cv
54.992 532.582 55.086 532.586 55.16 532.594 cv
55.23 532.602 55.285 532.617 55.332 532.633 cv
55.371 532.652 55.398 532.672 55.414 532.695 cv
55.422 532.723 55.43 532.746 55.434 532.77 cv
55.434 540.566 li
57.039 540.566 li
57.074 540.57 57.109 540.578 57.141 540.598 cv
57.172 540.621 57.195 540.652 57.219 540.687 cv
57.234 540.727 57.25 540.773 57.266 540.832 cv
57.273 540.895 57.281 540.969 57.285 541.047 cv
cp
f
129.645 541.004 mo
129.641 541.09 129.637 541.164 129.625 541.227 cv
129.613 541.293 129.598 541.348 129.578 541.387 cv
129.555 541.434 129.527 541.465 129.496 541.48 cv
129.461 541.504 129.422 541.512 129.383 541.512 cv
124.48 541.512 li
124.418 541.512 124.359 541.504 124.313 541.488 cv
124.262 541.473 124.223 541.449 124.188 541.41 cv
124.152 541.379 124.125 541.324 124.113 541.254 cv
124.094 541.184 124.086 541.098 124.09 540.996 cv
124.086 540.906 124.09 540.828 124.098 540.758 cv
124.102 540.691 124.117 540.633 124.145 540.578 cv
124.168 540.527 124.199 540.473 124.234 540.418 cv
124.27 540.367 124.313 540.312 124.371 540.25 cv
126.145 538.426 li
126.555 538.008 126.883 537.633 127.133 537.297 cv
127.379 536.969 127.57 536.664 127.703 536.387 cv
127.836 536.113 127.922 535.863 127.969 535.637 cv
128.008 535.414 128.031 535.203 128.031 535.008 cv
128.031 534.812 127.996 534.629 127.93 534.449 cv
127.863 534.277 127.77 534.121 127.645 533.984 cv
127.52 533.855 127.363 533.75 127.176 533.668 cv
126.988 533.594 126.77 533.555 126.523 533.551 cv
126.234 533.555 125.977 533.594 125.75 533.668 cv
125.52 533.75 125.32 533.836 125.148 533.922 cv
124.977 534.016 124.832 534.098 124.715 534.176 cv
124.598 534.254 124.512 534.293 124.461 534.293 cv
124.426 534.293 124.395 534.285 124.371 534.266 cv
124.34 534.25 124.32 534.219 124.305 534.176 cv
124.289 534.137 124.273 534.082 124.266 534.012 cv
124.254 533.945 124.25 533.863 124.254 533.766 cv
124.25 533.699 124.254 533.641 124.262 533.59 cv
124.266 533.539 124.273 533.496 124.285 533.457 cv
124.293 533.422 124.309 533.387 124.328 533.355 cv
124.348 533.324 124.383 533.285 124.441 533.234 cv
124.492 533.187 124.586 533.121 124.723 533.039 cv
124.855 532.957 125.027 532.879 125.23 532.797 cv
125.434 532.719 125.656 532.648 125.902 532.594 cv
126.145 532.539 126.402 532.512 126.676 532.512 cv
127.102 532.512 127.477 532.574 127.801 532.695 cv
128.121 532.816 128.387 532.98 128.602 533.191 cv
128.813 533.402 128.973 533.648 129.078 533.922 cv
129.184 534.203 129.238 534.5 129.238 534.812 cv
129.238 535.102 129.211 535.383 129.16 535.66 cv
129.109 535.945 129.004 536.25 128.844 536.574 cv
128.68 536.902 128.445 537.266 128.141 537.664 cv
127.832 538.066 127.426 538.527 126.922 539.043 cv
125.516 540.512 li
129.375 540.512 li
129.406 540.516 129.441 540.527 129.48 540.543 cv
129.512 540.566 129.543 540.598 129.57 540.637 cv
129.594 540.68 129.613 540.73 129.625 540.789 cv
129.637 540.855 129.641 540.926 129.645 541.004 cv
cp
f
202.383 538.988 mo
202.379 539.141 202.355 539.262 202.313 539.348 cv
202.266 539.437 202.203 539.48 202.121 539.477 cv
201.121 539.477 li
201.121 541.34 li
201.121 541.379 201.109 541.41 201.094 541.434 cv
201.07 541.461 201.039 541.48 200.996 541.5 cv
200.945 541.516 200.883 541.527 200.813 541.539 cv
200.734 541.547 200.641 541.551 200.523 541.555 cv
200.406 541.551 200.309 541.547 200.238 541.539 cv
200.16 541.527 200.102 541.516 200.059 541.5 cv
200.012 541.48 199.98 541.461 199.965 541.434 cv
199.945 541.41 199.938 541.379 199.941 541.34 cv
199.941 539.477 li
196.313 539.477 li
196.254 539.48 196.211 539.473 196.176 539.457 cv
196.141 539.445 196.105 539.418 196.078 539.379 cv
196.047 539.344 196.027 539.293 196.016 539.223 cv
196.004 539.156 196 539.066 196 538.953 cv
196 538.871 196 538.793 196.008 538.723 cv
196.008 538.652 196.02 538.59 196.035 538.535 cv
196.047 538.48 196.063 538.426 196.09 538.371 cv
196.109 538.316 196.137 538.262 196.172 538.199 cv
199.332 532.812 li
199.352 532.777 199.387 532.746 199.434 532.719 cv
199.477 532.691 199.531 532.668 199.605 532.648 cv
199.672 532.633 199.758 532.621 199.863 532.609 cv
199.965 532.605 200.086 532.602 200.227 532.598 cv
200.375 532.602 200.512 532.605 200.629 532.617 cv
200.742 532.629 200.832 532.645 200.906 532.66 cv
200.973 532.68 201.027 532.703 201.066 532.734 cv
201.102 532.766 201.121 532.801 201.121 532.84 cv
201.121 538.504 li
202.121 538.504 li
202.195 538.508 202.258 538.547 202.309 538.625 cv
202.355 538.707 202.379 538.828 202.383 538.988 cv
cp
199.941 533.637 mo
199.93 533.637 li
197.078 538.504 li
199.941 538.504 li
cp
f
274.594 538.641 mo
274.594 539.031 274.531 539.41 274.414 539.77 cv
274.289 540.137 274.105 540.453 273.863 540.727 cv
273.613 541.004 273.301 541.227 272.926 541.391 cv
272.543 541.559 272.098 541.641 271.582 541.641 cv
271.211 541.641 270.883 541.598 270.602 541.504 cv
270.316 541.418 270.07 541.285 269.859 541.113 cv
269.648 540.945 269.473 540.738 269.336 540.492 cv
269.195 540.246 269.082 539.965 269 539.648 cv
268.914 539.336 268.855 538.992 268.82 538.613 cv
268.781 538.242 268.762 537.84 268.766 537.406 cv
268.762 537.027 268.781 536.645 268.824 536.254 cv
268.863 535.871 268.938 535.496 269.043 535.129 cv
269.148 534.77 269.293 534.43 269.473 534.113 cv
269.652 533.797 269.879 533.52 270.152 533.285 cv
270.426 533.051 270.75 532.863 271.129 532.723 cv
271.508 532.586 271.949 532.52 272.453 532.516 cv
272.621 532.52 272.793 532.527 272.965 532.547 cv
273.137 532.57 273.297 532.602 273.445 532.633 cv
273.594 532.672 273.715 532.707 273.816 532.746 cv
273.914 532.785 273.98 532.82 274.016 532.844 cv
274.043 532.871 274.066 532.898 274.086 532.926 cv
274.102 532.957 274.117 532.988 274.125 533.023 cv
274.133 533.059 274.137 533.098 274.145 533.141 cv
274.145 533.184 274.148 533.238 274.152 533.301 cv
274.148 533.387 274.148 533.457 274.148 533.512 cv
274.145 533.574 274.133 533.621 274.121 533.656 cv
274.102 533.695 274.082 533.723 274.059 533.738 cv
274.031 533.758 274 533.766 273.961 533.766 cv
273.91 533.766 273.84 533.75 273.754 533.719 cv
273.664 533.687 273.559 533.652 273.438 533.609 cv
273.313 533.574 273.164 533.539 272.988 533.504 cv
272.813 533.477 272.609 533.461 272.379 533.457 cv
271.949 533.461 271.582 533.547 271.277 533.719 cv
270.973 533.891 270.723 534.125 270.527 534.418 cv
270.332 534.711 270.188 535.051 270.098 535.434 cv
270 535.824 269.945 536.227 269.938 536.645 cv
270.055 536.578 270.191 536.512 270.34 536.441 cv
270.488 536.375 270.648 536.312 270.824 536.254 cv
271 536.203 271.188 536.156 271.383 536.121 cv
271.578 536.09 271.789 536.074 272.016 536.07 cv
272.492 536.074 272.895 536.141 273.227 536.266 cv
273.555 536.398 273.82 536.578 274.027 536.809 cv
274.227 537.039 274.371 537.309 274.461 537.621 cv
274.547 537.934 274.594 538.273 274.594 538.641 cv
cp
273.398 538.75 mo
273.398 538.488 273.371 538.246 273.32 538.027 cv
273.266 537.812 273.176 537.629 273.055 537.473 cv
272.93 537.324 272.766 537.207 272.563 537.125 cv
272.352 537.043 272.098 537 271.801 537 cv
271.629 537 271.461 537.016 271.293 537.047 cv
271.121 537.078 270.957 537.121 270.801 537.168 cv
270.641 537.223 270.492 537.285 270.352 537.355 cv
270.207 537.43 270.074 537.504 269.957 537.582 cv
269.953 538.176 269.992 538.672 270.07 539.066 cv
270.145 539.465 270.254 539.781 270.398 540.02 cv
270.543 540.262 270.723 540.434 270.938 540.535 cv
271.152 540.641 271.402 540.691 271.691 540.687 cv
271.98 540.691 272.234 540.637 272.449 540.523 cv
272.664 540.418 272.84 540.27 272.984 540.082 cv
273.125 539.898 273.23 539.691 273.297 539.461 cv
273.363 539.23 273.398 538.996 273.398 538.75 cv
cp
f
346.93 539.234 mo
346.93 539.621 346.859 539.965 346.723 540.262 cv
346.586 540.566 346.391 540.816 346.133 541.02 cv
345.875 541.227 345.555 541.383 345.176 541.484 cv
344.793 541.59 344.359 541.641 343.875 541.641 cv
343.414 541.641 343.004 541.594 342.645 541.5 cv
342.281 541.406 341.977 541.266 341.727 541.074 cv
341.477 540.891 341.285 540.66 341.152 540.383 cv
341.02 540.109 340.953 539.797 340.953 539.441 cv
340.953 539.168 340.996 538.91 341.09 538.676 cv
341.176 538.441 341.309 538.227 341.484 538.031 cv
341.652 537.836 341.863 537.652 342.117 537.477 cv
342.367 537.309 342.652 537.145 342.969 536.988 cv
342.695 536.848 342.453 536.699 342.242 536.539 cv
342.031 536.383 341.852 536.211 341.707 536.023 cv
341.559 535.84 341.449 535.645 341.375 535.434 cv
341.297 535.227 341.258 534.996 341.262 534.746 cv
341.258 534.437 341.313 534.145 341.43 533.871 cv
341.539 533.602 341.711 533.367 341.938 533.164 cv
342.164 532.965 342.449 532.805 342.801 532.687 cv
343.145 532.57 343.555 532.512 344.023 532.512 cv
344.469 532.512 344.855 532.566 345.184 532.672 cv
345.512 532.781 345.781 532.926 345.992 533.109 cv
346.203 533.297 346.359 533.516 346.465 533.766 cv
346.563 534.016 346.613 534.285 346.617 534.574 cv
346.613 534.809 346.574 535.035 346.504 535.246 cv
346.426 535.465 346.316 535.668 346.168 535.855 cv
346.02 536.051 345.84 536.23 345.629 536.395 cv
345.418 536.566 345.176 536.723 344.902 536.863 cv
345.223 537.027 345.508 537.191 345.766 537.359 cv
346.016 537.527 346.23 537.707 346.406 537.902 cv
346.574 538.098 346.703 538.305 346.797 538.52 cv
346.883 538.738 346.93 538.977 346.93 539.234 cv
cp
345.449 534.684 mo
345.445 534.496 345.414 534.32 345.348 534.164 cv
345.281 534.008 345.184 533.875 345.059 533.766 cv
344.93 533.656 344.77 533.574 344.582 533.516 cv
344.387 533.461 344.172 533.434 343.934 533.43 cv
343.438 533.434 343.063 533.543 342.813 533.766 cv
342.555 533.992 342.43 534.301 342.434 534.684 cv
342.43 534.863 342.461 535.027 342.523 535.18 cv
342.586 535.336 342.68 535.48 342.813 535.617 cv
342.938 535.754 343.102 535.887 343.305 536.016 cv
343.5 536.148 343.738 536.285 344.016 536.426 cv
344.477 536.191 344.832 535.93 345.078 535.637 cv
345.324 535.352 345.445 535.035 345.449 534.684 cv
cp
345.738 539.359 mo
345.734 539.152 345.695 538.961 345.621 538.789 cv
345.539 538.621 345.422 538.461 345.266 538.309 cv
345.109 538.16 344.91 538.016 344.676 537.875 cv
344.438 537.738 344.168 537.594 343.859 537.441 cv
343.57 537.586 343.316 537.727 343.102 537.867 cv
342.883 538.008 342.703 538.156 342.566 538.305 cv
342.426 538.461 342.32 538.617 342.25 538.781 cv
342.176 538.949 342.141 539.133 342.145 539.332 cv
342.141 539.777 342.293 540.121 342.602 540.359 cv
342.902 540.605 343.355 540.727 343.961 540.723 cv
344.543 540.727 344.988 540.605 345.289 540.355 cv
345.586 540.113 345.734 539.781 345.738 539.359 cv
cp
f
415.574 541.047 mo
415.57 541.137 415.563 541.207 415.551 541.266 cv
415.535 541.328 415.516 541.379 415.496 541.41 cv
415.473 541.449 415.449 541.473 415.418 541.488 cv
415.387 541.504 415.355 541.512 415.328 541.512 cv
410.691 541.512 li
410.656 541.512 410.629 541.504 410.602 541.488 cv
410.574 541.473 410.547 541.449 410.523 541.41 cv
410.496 541.379 410.477 541.328 410.465 541.266 cv
410.449 541.207 410.441 541.137 410.445 541.047 cv
410.441 540.969 410.449 540.895 410.465 540.832 cv
410.477 540.773 410.492 540.727 410.516 540.687 cv
410.531 540.652 410.559 540.621 410.59 540.598 cv
410.621 540.578 410.652 540.57 410.691 540.566 cv
412.543 540.566 li
412.543 533.82 li
410.828 534.84 li
410.738 534.891 410.668 534.918 410.621 534.926 cv
410.566 534.934 410.523 534.926 410.492 534.895 cv
410.457 534.867 410.438 534.816 410.426 534.746 cv
410.414 534.68 410.406 534.594 410.41 534.484 cv
410.406 534.41 410.41 534.344 410.422 534.285 cv
410.426 534.234 410.438 534.187 410.453 534.148 cv
410.465 534.113 410.484 534.082 410.508 534.055 cv
410.531 534.027 410.563 534 410.609 533.973 cv
412.652 532.66 li
412.668 532.648 412.688 532.637 412.719 532.629 cv
412.742 532.621 412.777 532.613 412.824 532.602 cv
412.863 532.594 412.914 532.586 412.969 532.582 cv
413.023 532.582 413.09 532.582 413.176 532.578 cv
413.281 532.582 413.375 532.586 413.449 532.594 cv
413.52 532.602 413.574 532.617 413.621 532.633 cv
413.66 532.652 413.688 532.672 413.703 532.695 cv
413.711 532.723 413.719 532.746 413.723 532.77 cv
413.723 540.566 li
415.328 540.566 li
415.363 540.57 415.398 540.578 415.43 540.598 cv
415.461 540.621 415.484 540.652 415.508 540.687 cv
415.523 540.727 415.539 540.773 415.555 540.832 cv
415.563 540.895 415.57 540.969 415.574 541.047 cv
cp
f
422.93 537.055 mo
422.926 537.738 422.875 538.359 422.77 538.922 cv
422.66 539.484 422.48 539.969 422.234 540.371 cv
421.98 540.777 421.652 541.09 421.254 541.309 cv
420.848 541.531 420.355 541.641 419.77 541.641 cv
419.211 541.641 418.738 541.543 418.359 541.344 cv
417.977 541.148 417.672 540.855 417.438 540.469 cv
417.203 540.082 417.035 539.609 416.941 539.043 cv
416.84 538.48 416.793 537.832 416.793 537.098 cv
416.793 536.426 416.848 535.805 416.957 535.238 cv
417.066 534.676 417.242 534.191 417.492 533.785 cv
417.734 533.383 418.059 533.07 418.465 532.844 cv
418.863 532.625 419.359 532.512 419.949 532.512 cv
420.508 532.512 420.98 532.613 421.363 532.809 cv
421.746 533.012 422.051 533.305 422.285 533.687 cv
422.516 534.078 422.684 534.551 422.781 535.113 cv
422.879 535.676 422.926 536.324 422.93 537.055 cv
cp
421.723 537.137 mo
421.719 536.695 421.703 536.297 421.676 535.945 cv
421.641 535.594 421.594 535.285 421.535 535.016 cv
421.469 534.746 421.391 534.516 421.293 534.32 cv
421.195 534.129 421.078 533.969 420.941 533.84 cv
420.801 533.715 420.641 533.621 420.469 533.562 cv
420.289 533.508 420.094 533.48 419.879 533.477 cv
419.488 533.48 419.172 533.57 418.934 533.754 cv
418.688 533.937 418.496 534.191 418.359 534.508 cv
418.219 534.828 418.125 535.199 418.074 535.629 cv
418.023 536.059 418 536.523 418 537.016 cv
418 537.68 418.031 538.242 418.102 538.703 cv
418.168 539.172 418.277 539.551 418.43 539.84 cv
418.574 540.137 418.766 540.348 418.996 540.477 cv
419.227 540.613 419.508 540.68 419.84 540.676 cv
420.094 540.68 420.316 540.641 420.512 540.555 cv
420.703 540.477 420.871 540.355 421.012 540.199 cv
421.152 540.047 421.266 539.863 421.359 539.648 cv
421.445 539.434 421.52 539.195 421.578 538.934 cv
421.629 538.676 421.668 538.395 421.691 538.09 cv
421.711 537.785 421.719 537.469 421.723 537.137 cv
cp
f
487.934 541.047 mo
487.93 541.137 487.922 541.207 487.91 541.266 cv
487.895 541.328 487.875 541.379 487.855 541.41 cv
487.832 541.449 487.809 541.473 487.777 541.488 cv
487.746 541.504 487.715 541.512 487.688 541.512 cv
483.051 541.512 li
483.016 541.512 482.988 541.504 482.961 541.488 cv
482.934 541.473 482.906 541.449 482.883 541.41 cv
482.855 541.379 482.836 541.328 482.824 541.266 cv
482.809 541.207 482.801 541.137 482.805 541.047 cv
482.801 540.969 482.809 540.895 482.824 540.832 cv
482.836 540.773 482.852 540.727 482.875 540.687 cv
482.891 540.652 482.918 540.621 482.949 540.598 cv
482.98 540.578 483.012 540.57 483.051 540.566 cv
484.902 540.566 li
484.902 533.82 li
483.188 534.84 li
483.098 534.891 483.027 534.918 482.98 534.926 cv
482.926 534.934 482.883 534.926 482.852 534.895 cv
482.816 534.867 482.797 534.816 482.785 534.746 cv
482.773 534.68 482.766 534.594 482.77 534.484 cv
482.766 534.41 482.77 534.344 482.781 534.285 cv
482.785 534.234 482.797 534.187 482.813 534.148 cv
482.824 534.113 482.844 534.082 482.867 534.055 cv
482.891 534.027 482.922 534 482.969 533.973 cv
485.012 532.66 li
485.027 532.648 485.047 532.637 485.078 532.629 cv
485.102 532.621 485.137 532.613 485.184 532.602 cv
485.223 532.594 485.273 532.586 485.328 532.582 cv
485.383 532.582 485.449 532.582 485.535 532.578 cv
485.641 532.582 485.734 532.586 485.809 532.594 cv
485.879 532.602 485.934 532.617 485.98 532.633 cv
486.02 532.652 486.047 532.672 486.063 532.695 cv
486.07 532.723 486.078 532.746 486.082 532.77 cv
486.082 540.566 li
487.688 540.566 li
487.723 540.57 487.758 540.578 487.789 540.598 cv
487.82 540.621 487.844 540.652 487.867 540.687 cv
487.883 540.727 487.898 540.773 487.914 540.832 cv
487.922 540.895 487.93 540.969 487.934 541.047 cv
cp
f
494.996 541.004 mo
494.992 541.09 494.988 541.164 494.977 541.227 cv
494.965 541.293 494.949 541.348 494.93 541.387 cv
494.906 541.434 494.879 541.465 494.848 541.48 cv
494.813 541.504 494.773 541.512 494.734 541.512 cv
489.832 541.512 li
489.77 541.512 489.711 541.504 489.664 541.488 cv
489.613 541.473 489.574 541.449 489.539 541.41 cv
489.504 541.379 489.477 541.324 489.465 541.254 cv
489.445 541.184 489.438 541.098 489.441 540.996 cv
489.438 540.906 489.441 540.828 489.449 540.758 cv
489.453 540.691 489.469 540.633 489.496 540.578 cv
489.52 540.527 489.551 540.473 489.586 540.418 cv
489.621 540.367 489.664 540.312 489.723 540.25 cv
491.496 538.426 li
491.906 538.008 492.234 537.633 492.484 537.297 cv
492.73 536.969 492.922 536.664 493.055 536.387 cv
493.188 536.113 493.273 535.863 493.32 535.637 cv
493.359 535.414 493.383 535.203 493.383 535.008 cv
493.383 534.812 493.348 534.629 493.281 534.449 cv
493.215 534.277 493.121 534.121 492.996 533.984 cv
492.871 533.855 492.715 533.75 492.527 533.668 cv
492.34 533.594 492.121 533.555 491.875 533.551 cv
491.586 533.555 491.328 533.594 491.102 533.668 cv
490.871 533.75 490.672 533.836 490.5 533.922 cv
490.328 534.016 490.184 534.098 490.066 534.176 cv
489.949 534.254 489.863 534.293 489.813 534.293 cv
489.777 534.293 489.746 534.285 489.723 534.266 cv
489.691 534.25 489.672 534.219 489.656 534.176 cv
489.641 534.137 489.625 534.082 489.617 534.012 cv
489.605 533.945 489.602 533.863 489.605 533.766 cv
489.602 533.699 489.605 533.641 489.613 533.59 cv
489.617 533.539 489.625 533.496 489.637 533.457 cv
489.645 533.422 489.66 533.387 489.68 533.355 cv
489.699 533.324 489.734 533.285 489.793 533.234 cv
489.844 533.187 489.938 533.121 490.074 533.039 cv
490.207 532.957 490.379 532.879 490.582 532.797 cv
490.785 532.719 491.008 532.648 491.254 532.594 cv
491.496 532.539 491.754 532.512 492.027 532.512 cv
492.453 532.512 492.828 532.574 493.152 532.695 cv
493.473 532.816 493.738 532.98 493.953 533.191 cv
494.164 533.402 494.324 533.648 494.43 533.922 cv
494.535 534.203 494.59 534.5 494.59 534.812 cv
494.59 535.102 494.563 535.383 494.512 535.66 cv
494.461 535.945 494.355 536.25 494.195 536.574 cv
494.031 536.902 493.797 537.266 493.492 537.664 cv
493.184 538.066 492.777 538.527 492.273 539.043 cv
490.867 540.512 li
494.727 540.512 li
494.758 540.516 494.793 540.527 494.832 540.543 cv
494.863 540.566 494.895 540.598 494.922 540.637 cv
494.945 540.68 494.965 540.73 494.977 540.789 cv
494.988 540.855 494.992 540.926 494.996 541.004 cv
cp
f
560.297 541.047 mo
560.293 541.137 560.285 541.207 560.273 541.266 cv
560.258 541.328 560.238 541.379 560.219 541.41 cv
560.195 541.449 560.172 541.473 560.141 541.488 cv
560.109 541.504 560.078 541.512 560.051 541.512 cv
555.414 541.512 li
555.379 541.512 555.352 541.504 555.324 541.488 cv
555.297 541.473 555.27 541.449 555.246 541.41 cv
555.219 541.379 555.199 541.328 555.188 541.266 cv
555.172 541.207 555.164 541.137 555.168 541.047 cv
555.164 540.969 555.172 540.895 555.188 540.832 cv
555.199 540.773 555.215 540.727 555.238 540.687 cv
555.254 540.652 555.281 540.621 555.313 540.598 cv
555.344 540.578 555.375 540.57 555.414 540.566 cv
557.266 540.566 li
557.266 533.82 li
555.551 534.84 li
555.461 534.891 555.391 534.918 555.344 534.926 cv
555.289 534.934 555.246 534.926 555.215 534.895 cv
555.18 534.867 555.16 534.816 555.148 534.746 cv
555.137 534.68 555.129 534.594 555.133 534.484 cv
555.129 534.41 555.133 534.344 555.145 534.285 cv
555.148 534.234 555.16 534.187 555.176 534.148 cv
555.188 534.113 555.207 534.082 555.23 534.055 cv
555.254 534.027 555.285 534 555.332 533.973 cv
557.375 532.66 li
557.391 532.648 557.41 532.637 557.441 532.629 cv
557.465 532.621 557.5 532.613 557.547 532.602 cv
557.586 532.594 557.637 532.586 557.691 532.582 cv
557.746 532.582 557.813 532.582 557.898 532.578 cv
558.004 532.582 558.098 532.586 558.172 532.594 cv
558.242 532.602 558.297 532.617 558.344 532.633 cv
558.383 532.652 558.41 532.672 558.426 532.695 cv
558.434 532.723 558.441 532.746 558.445 532.77 cv
558.445 540.566 li
560.051 540.566 li
560.086 540.57 560.121 540.578 560.152 540.598 cv
560.184 540.621 560.207 540.652 560.23 540.687 cv
560.246 540.727 560.262 540.773 560.277 540.832 cv
560.285 540.895 560.293 540.969 560.297 541.047 cv
cp
f
567.73 538.988 mo
567.727 539.141 567.703 539.262 567.66 539.348 cv
567.613 539.437 567.551 539.48 567.469 539.477 cv
566.469 539.477 li
566.469 541.34 li
566.469 541.379 566.457 541.41 566.441 541.434 cv
566.418 541.461 566.387 541.48 566.344 541.5 cv
566.293 541.516 566.23 541.527 566.16 541.539 cv
566.082 541.547 565.988 541.551 565.871 541.555 cv
565.754 541.551 565.656 541.547 565.586 541.539 cv
565.508 541.527 565.449 541.516 565.406 541.5 cv
565.359 541.48 565.328 541.461 565.313 541.434 cv
565.293 541.41 565.285 541.379 565.289 541.34 cv
565.289 539.477 li
561.66 539.477 li
561.602 539.48 561.559 539.473 561.523 539.457 cv
561.488 539.445 561.453 539.418 561.426 539.379 cv
561.395 539.344 561.375 539.293 561.363 539.223 cv
561.352 539.156 561.348 539.066 561.348 538.953 cv
561.348 538.871 561.348 538.793 561.355 538.723 cv
561.355 538.652 561.367 538.59 561.383 538.535 cv
561.395 538.48 561.41 538.426 561.438 538.371 cv
561.457 538.316 561.484 538.262 561.52 538.199 cv
564.68 532.812 li
564.699 532.777 564.734 532.746 564.781 532.719 cv
564.824 532.691 564.879 532.668 564.953 532.648 cv
565.02 532.633 565.105 532.621 565.211 532.609 cv
565.313 532.605 565.434 532.602 565.574 532.598 cv
565.723 532.602 565.859 532.605 565.977 532.617 cv
566.09 532.629 566.18 532.645 566.254 532.66 cv
566.32 532.68 566.375 532.703 566.414 532.734 cv
566.449 532.766 566.469 532.801 566.469 532.84 cv
566.469 538.504 li
567.469 538.504 li
567.543 538.508 567.605 538.547 567.656 538.625 cv
567.703 538.707 567.727 538.828 567.73 538.988 cv
cp
565.289 533.637 mo
565.277 533.637 li
562.426 538.504 li
565.289 538.504 li
cp
f
632.684 541.047 mo
632.68 541.137 632.672 541.207 632.66 541.266 cv
632.645 541.328 632.625 541.379 632.605 541.41 cv
632.582 541.449 632.559 541.473 632.527 541.488 cv
632.496 541.504 632.465 541.512 632.438 541.512 cv
627.801 541.512 li
627.766 541.512 627.738 541.504 627.711 541.488 cv
627.684 541.473 627.656 541.449 627.633 541.41 cv
627.605 541.379 627.586 541.328 627.574 541.266 cv
627.559 541.207 627.551 541.137 627.555 541.047 cv
627.551 540.969 627.559 540.895 627.574 540.832 cv
627.586 540.773 627.602 540.727 627.625 540.687 cv
627.641 540.652 627.668 540.621 627.699 540.598 cv
627.73 540.578 627.762 540.57 627.801 540.566 cv
629.652 540.566 li
629.652 533.82 li
627.938 534.84 li
627.848 534.891 627.777 534.918 627.73 534.926 cv
627.676 534.934 627.633 534.926 627.602 534.895 cv
627.566 534.867 627.547 534.816 627.535 534.746 cv
627.523 534.68 627.516 534.594 627.52 534.484 cv
627.516 534.41 627.52 534.344 627.531 534.285 cv
627.535 534.234 627.547 534.187 627.563 534.148 cv
627.574 534.113 627.594 534.082 627.617 534.055 cv
627.641 534.027 627.672 534 627.719 533.973 cv
629.762 532.66 li
629.777 532.648 629.797 532.637 629.828 532.629 cv
629.852 532.621 629.887 532.613 629.934 532.602 cv
629.973 532.594 630.023 532.586 630.078 532.582 cv
630.133 532.582 630.199 532.582 630.285 532.578 cv
630.391 532.582 630.484 532.586 630.559 532.594 cv
630.629 532.602 630.684 532.617 630.73 532.633 cv
630.77 532.652 630.797 532.672 630.813 532.695 cv
630.82 532.723 630.828 532.746 630.832 532.77 cv
630.832 540.566 li
632.438 540.566 li
632.473 540.57 632.508 540.578 632.539 540.598 cv
632.57 540.621 632.594 540.652 632.617 540.687 cv
632.633 540.727 632.648 540.773 632.664 540.832 cv
632.672 540.895 632.68 540.969 632.684 541.047 cv
cp
f
639.973 538.641 mo
639.973 539.031 639.91 539.41 639.793 539.77 cv
639.668 540.137 639.484 540.453 639.242 540.727 cv
638.992 541.004 638.68 541.227 638.305 541.391 cv
637.922 541.559 637.477 541.641 636.961 541.641 cv
636.59 541.641 636.262 541.598 635.98 541.504 cv
635.695 541.418 635.449 541.285 635.238 541.113 cv
635.027 540.945 634.852 540.738 634.715 540.492 cv
634.574 540.246 634.461 539.965 634.379 539.648 cv
634.293 539.336 634.234 538.992 634.199 538.613 cv
634.16 538.242 634.141 537.84 634.145 537.406 cv
634.141 537.027 634.16 536.645 634.203 536.254 cv
634.242 535.871 634.316 535.496 634.422 535.129 cv
634.527 534.77 634.672 534.43 634.852 534.113 cv
635.031 533.797 635.258 533.52 635.531 533.285 cv
635.805 533.051 636.129 532.863 636.508 532.723 cv
636.887 532.586 637.328 532.52 637.832 532.516 cv
638 532.52 638.172 532.527 638.344 532.547 cv
638.516 532.57 638.676 532.602 638.824 532.633 cv
638.973 532.672 639.094 532.707 639.195 532.746 cv
639.293 532.785 639.359 532.82 639.395 532.844 cv
639.422 532.871 639.445 532.898 639.465 532.926 cv
639.48 532.957 639.496 532.988 639.504 533.023 cv
639.512 533.059 639.516 533.098 639.523 533.141 cv
639.523 533.184 639.527 533.238 639.531 533.301 cv
639.527 533.387 639.527 533.457 639.527 533.512 cv
639.523 533.574 639.512 533.621 639.5 533.656 cv
639.48 533.695 639.461 533.723 639.438 533.738 cv
639.41 533.758 639.379 533.766 639.34 533.766 cv
639.289 533.766 639.219 533.75 639.133 533.719 cv
639.043 533.687 638.938 533.652 638.816 533.609 cv
638.691 533.574 638.543 533.539 638.367 533.504 cv
638.191 533.477 637.988 533.461 637.758 533.457 cv
637.328 533.461 636.961 533.547 636.656 533.719 cv
636.352 533.891 636.102 534.125 635.906 534.418 cv
635.711 534.711 635.566 535.051 635.477 535.434 cv
635.379 535.824 635.324 536.227 635.316 536.645 cv
635.434 536.578 635.57 536.512 635.719 536.441 cv
635.867 536.375 636.027 536.312 636.203 536.254 cv
636.379 536.203 636.566 536.156 636.762 536.121 cv
636.957 536.09 637.168 536.074 637.395 536.07 cv
637.871 536.074 638.273 536.141 638.605 536.266 cv
638.934 536.398 639.199 536.578 639.406 536.809 cv
639.605 537.039 639.75 537.309 639.84 537.621 cv
639.926 537.934 639.973 538.273 639.973 538.641 cv
cp
638.777 538.75 mo
638.777 538.488 638.75 538.246 638.699 538.027 cv
638.645 537.812 638.555 537.629 638.434 537.473 cv
638.309 537.324 638.145 537.207 637.941 537.125 cv
637.73 537.043 637.477 537 637.18 537 cv
637.008 537 636.84 537.016 636.672 537.047 cv
636.5 537.078 636.336 537.121 636.18 537.168 cv
636.02 537.223 635.871 537.285 635.73 537.355 cv
635.586 537.43 635.453 537.504 635.336 537.582 cv
635.332 538.176 635.371 538.672 635.449 539.066 cv
635.523 539.465 635.633 539.781 635.777 540.02 cv
635.922 540.262 636.102 540.434 636.316 540.535 cv
636.531 540.641 636.781 540.691 637.07 540.687 cv
637.359 540.691 637.613 540.637 637.828 540.523 cv
638.043 540.418 638.219 540.27 638.363 540.082 cv
638.504 539.898 638.609 539.691 638.676 539.461 cv
638.742 539.23 638.777 538.996 638.777 538.75 cv
cp
f
7.672 307.051 mo
7.773 307.055 7.859 307.059 7.93 307.066 cv
8.004 307.078 8.063 307.094 8.105 307.117 cv
8.152 307.141 8.184 307.172 8.203 307.203 cv
8.227 307.242 8.238 307.277 8.234 307.316 cv
8.234 310.152 li
16.977 310.152 li
17.02 310.152 17.055 310.164 17.086 310.184 cv
17.117 310.207 17.145 310.242 17.16 310.293 cv
17.18 310.348 17.191 310.418 17.207 310.5 cv
17.219 310.59 17.227 310.695 17.227 310.82 cv
17.227 310.945 17.219 311.055 17.207 311.141 cv
17.191 311.234 17.18 311.305 17.16 311.352 cv
17.145 311.406 17.117 311.441 17.086 311.461 cv
17.055 311.484 17.02 311.496 16.977 311.492 cv
8.234 311.492 li
8.234 314.328 li
8.238 314.375 8.227 314.41 8.203 314.441 cv
8.184 314.477 8.152 314.504 8.105 314.523 cv
8.063 314.547 8.004 314.566 7.93 314.574 cv
7.859 314.59 7.773 314.594 7.672 314.594 cv
7.574 314.594 7.488 314.59 7.41 314.574 cv
7.34 314.566 7.277 314.547 7.227 314.523 cv
7.184 314.504 7.148 314.477 7.125 314.441 cv
7.105 314.41 7.098 314.375 7.094 314.328 cv
7.094 307.316 li
7.098 307.277 7.105 307.242 7.125 307.203 cv
7.148 307.172 7.184 307.141 7.227 307.117 cv
7.277 307.094 7.34 307.078 7.41 307.066 cv
7.488 307.059 7.574 307.055 7.672 307.051 cv
cp
f
16.984 304.461 mo
17.031 304.465 17.066 304.477 17.09 304.492 cv
17.121 304.516 17.145 304.547 17.164 304.594 cv
17.184 304.641 17.195 304.707 17.211 304.785 cv
17.219 304.871 17.227 304.977 17.227 305.105 cv
17.227 305.234 17.219 305.34 17.211 305.418 cv
17.195 305.504 17.184 305.57 17.164 305.617 cv
17.145 305.672 17.121 305.703 17.09 305.719 cv
17.066 305.738 17.031 305.75 16.984 305.746 cv
9.973 305.746 li
9.938 305.75 9.906 305.738 9.871 305.719 cv
9.844 305.703 9.816 305.672 9.793 305.617 cv
9.773 305.57 9.758 305.504 9.746 305.418 cv
9.738 305.34 9.734 305.234 9.73 305.105 cv
9.734 304.977 9.738 304.871 9.746 304.785 cv
9.758 304.707 9.773 304.641 9.793 304.594 cv
9.816 304.547 9.844 304.516 9.871 304.492 cv
9.906 304.477 9.938 304.465 9.973 304.461 cv
cp
7.602 304.312 mo
7.906 304.312 8.113 304.371 8.219 304.484 cv
8.332 304.598 8.387 304.809 8.383 305.113 cv
8.387 305.418 8.332 305.625 8.223 305.734 cv
8.117 305.852 7.914 305.906 7.617 305.902 cv
7.316 305.906 7.113 305.848 7.004 305.73 cv
6.898 305.617 6.844 305.406 6.84 305.098 cv
6.844 304.797 6.898 304.594 7 304.48 cv
7.109 304.371 7.309 304.312 7.602 304.312 cv
cp
f
16.984 291.605 mo
17.031 291.609 17.066 291.617 17.09 291.637 cv
17.121 291.66 17.145 291.695 17.164 291.738 cv
17.184 291.789 17.195 291.855 17.211 291.934 cv
17.219 292.02 17.227 292.121 17.227 292.246 cv
17.227 292.379 17.219 292.488 17.211 292.566 cv
17.195 292.652 17.184 292.719 17.164 292.766 cv
17.145 292.82 17.121 292.855 17.09 292.871 cv
17.066 292.895 17.031 292.902 16.984 292.902 cv
12.723 292.902 li
12.43 292.902 12.16 292.93 11.914 292.98 cv
11.672 293.035 11.461 293.117 11.281 293.23 cv
11.105 293.344 10.969 293.488 10.875 293.664 cv
10.781 293.844 10.734 294.055 10.734 294.289 cv
10.734 294.586 10.852 294.883 11.078 295.18 cv
11.313 295.484 11.645 295.812 12.082 296.168 cv
16.984 296.168 li
17.031 296.172 17.066 296.184 17.09 296.199 cv
17.121 296.223 17.145 296.254 17.164 296.301 cv
17.184 296.352 17.195 296.418 17.211 296.5 cv
17.219 296.586 17.227 296.691 17.227 296.812 cv
17.227 296.934 17.219 297.035 17.211 297.121 cv
17.195 297.207 17.184 297.277 17.164 297.324 cv
17.145 297.379 17.121 297.41 17.09 297.426 cv
17.066 297.445 17.031 297.457 16.984 297.453 cv
12.723 297.453 li
12.43 297.457 12.16 297.484 11.914 297.539 cv
11.672 297.598 11.461 297.684 11.281 297.797 cv
11.105 297.91 10.969 298.055 10.875 298.227 cv
10.781 298.406 10.734 298.613 10.734 298.848 cv
10.734 299.148 10.852 299.445 11.078 299.746 cv
11.313 300.047 11.645 300.375 12.082 300.727 cv
16.984 300.727 li
17.031 300.73 17.066 300.742 17.09 300.758 cv
17.121 300.781 17.145 300.812 17.164 300.859 cv
17.184 300.906 17.195 300.973 17.211 301.051 cv
17.219 301.137 17.227 301.242 17.227 301.371 cv
17.227 301.5 17.219 301.605 17.211 301.684 cv
17.195 301.77 17.184 301.836 17.164 301.883 cv
17.145 301.937 17.121 301.969 17.09 301.984 cv
17.066 302.004 17.031 302.016 16.984 302.012 cv
9.973 302.012 li
9.934 302.016 9.898 302.008 9.867 301.988 cv
9.84 301.977 9.816 301.945 9.789 301.895 cv
9.77 301.852 9.754 301.789 9.742 301.715 cv
9.738 301.645 9.734 301.551 9.73 301.426 cv
9.734 301.316 9.738 301.219 9.742 301.141 cv
9.754 301.066 9.77 301.008 9.789 300.965 cv
9.816 300.926 9.84 300.898 9.867 300.879 cv
9.898 300.863 9.934 300.855 9.973 300.852 cv
10.898 300.852 li
10.457 300.461 10.137 300.078 9.93 299.703 cv
9.727 299.336 9.621 298.957 9.621 298.574 cv
9.621 298.285 9.656 298.027 9.723 297.793 cv
9.793 297.566 9.887 297.359 10.008 297.18 cv
10.129 297.004 10.273 296.855 10.441 296.727 cv
10.613 296.605 10.805 296.5 11.008 296.414 cv
10.758 296.184 10.543 295.961 10.363 295.75 cv
10.191 295.539 10.047 295.336 9.934 295.141 cv
9.828 294.945 9.75 294.758 9.695 294.574 cv
9.648 294.391 9.621 294.203 9.621 294.016 cv
9.621 293.562 9.703 293.184 9.859 292.879 cv
10.023 292.574 10.234 292.328 10.496 292.133 cv
10.762 291.945 11.07 291.809 11.426 291.727 cv
11.781 291.648 12.156 291.609 12.551 291.605 cv
cp
f
13.176 283.273 mo
13.379 283.277 13.52 283.328 13.605 283.426 cv
13.691 283.531 13.734 283.648 13.734 283.773 cv
13.734 288.391 li
14.125 288.395 14.477 288.355 14.789 288.273 cv
15.102 288.199 15.371 288.066 15.59 287.883 cv
15.816 287.703 15.988 287.469 16.105 287.172 cv
16.23 286.883 16.289 286.523 16.285 286.098 cv
16.289 285.766 16.262 285.469 16.203 285.207 cv
16.152 284.945 16.09 284.719 16.02 284.527 cv
15.953 284.34 15.895 284.184 15.836 284.059 cv
15.785 283.937 15.758 283.844 15.754 283.781 cv
15.758 283.746 15.766 283.715 15.781 283.684 cv
15.801 283.656 15.828 283.633 15.863 283.613 cv
15.902 283.602 15.953 283.59 16.016 283.578 cv
16.082 283.574 16.16 283.57 16.254 283.566 cv
16.324 283.57 16.383 283.574 16.43 283.574 cv
16.477 283.582 16.52 283.586 16.559 283.594 cv
16.598 283.602 16.633 283.617 16.664 283.633 cv
16.695 283.656 16.727 283.68 16.754 283.703 cv
16.785 283.734 16.832 283.816 16.895 283.957 cv
16.961 284.098 17.023 284.281 17.086 284.504 cv
17.148 284.73 17.203 284.988 17.254 285.281 cv
17.301 285.574 17.324 285.887 17.328 286.219 cv
17.324 286.797 17.246 287.305 17.086 287.734 cv
16.926 288.172 16.688 288.535 16.371 288.828 cv
16.055 289.129 15.66 289.352 15.18 289.5 cv
14.703 289.648 14.145 289.723 13.508 289.723 cv
12.91 289.723 12.371 289.648 11.887 289.492 cv
11.41 289.34 11 289.113 10.664 288.816 cv
10.328 288.523 10.07 288.168 9.891 287.754 cv
9.711 287.34 9.621 286.875 9.621 286.359 cv
9.621 285.809 9.711 285.34 9.887 284.953 cv
10.066 284.566 10.305 284.25 10.602 283.996 cv
10.902 283.75 11.254 283.566 11.652 283.449 cv
12.059 283.336 12.488 283.277 12.941 283.273 cv
cp
12.793 284.566 mo
12.117 284.551 11.586 284.703 11.203 285.02 cv
10.82 285.336 10.629 285.805 10.625 286.422 cv
10.629 286.746 10.688 287.027 10.805 287.266 cv
10.926 287.508 11.086 287.707 11.281 287.867 cv
11.48 288.031 11.711 288.156 11.973 288.242 cv
12.234 288.332 12.508 288.383 12.793 288.391 cv
cp
f
6.441 275.102 mo
7.488 275.598 8.559 275.965 9.656 276.207 cv
10.758 276.449 11.863 276.57 12.973 276.57 cv
14.09 276.57 15.199 276.449 16.293 276.199 cv
17.391 275.957 18.461 275.594 19.516 275.117 cv
19.574 275.094 19.629 275.082 19.676 275.074 cv
19.719 275.074 19.754 275.09 19.785 275.125 cv
19.813 275.164 19.832 275.219 19.848 275.293 cv
19.855 275.371 19.863 275.477 19.867 275.602 cv
19.863 275.699 19.859 275.777 19.859 275.844 cv
19.852 275.914 19.844 275.973 19.828 276.02 cv
19.813 276.07 19.793 276.113 19.773 276.141 cv
19.75 276.176 19.727 276.199 19.703 276.211 cv
19.172 276.492 18.637 276.738 18.094 276.949 cv
17.551 277.168 17 277.348 16.441 277.488 cv
15.879 277.637 15.313 277.746 14.738 277.816 cv
14.164 277.895 13.582 277.93 12.996 277.926 cv
12.41 277.93 11.832 277.891 11.258 277.805 cv
10.688 277.727 10.121 277.609 9.555 277.461 cv
8.992 277.312 8.438 277.133 7.891 276.922 cv
7.348 276.711 6.805 276.473 6.27 276.203 cv
6.25 276.199 6.234 276.184 6.215 276.16 cv
6.203 276.137 6.188 276.105 6.168 276.062 cv
6.156 276.023 6.145 275.965 6.133 275.891 cv
6.129 275.82 6.125 275.727 6.121 275.609 cv
6.125 275.492 6.133 275.398 6.145 275.32 cv
6.164 275.25 6.184 275.191 6.207 275.148 cv
6.234 275.109 6.27 275.086 6.309 275.078 cv
6.355 275.074 6.398 275.082 6.441 275.102 cv
cp
f
16.977 261.82 mo
17.02 261.82 17.055 261.832 17.086 261.852 cv
17.117 261.875 17.145 261.914 17.16 261.965 cv
17.18 262.02 17.191 262.086 17.207 262.168 cv
17.219 262.254 17.227 262.363 17.227 262.492 cv
17.227 262.621 17.219 262.727 17.207 262.812 cv
17.191 262.902 17.18 262.973 17.16 263.023 cv
17.145 263.074 17.117 263.109 17.086 263.129 cv
17.055 263.152 17.02 263.164 16.977 263.16 cv
8.195 263.16 li
8.195 263.176 li
17.016 266.73 li
17.055 266.746 17.086 266.77 17.109 266.797 cv
17.137 266.828 17.16 266.871 17.176 266.922 cv
17.195 266.98 17.207 267.043 17.215 267.117 cv
17.223 267.191 17.227 267.281 17.227 267.383 cv
17.227 267.496 17.219 267.59 17.211 267.664 cv
17.195 267.746 17.184 267.812 17.168 267.859 cv
17.152 267.914 17.133 267.953 17.102 267.98 cv
17.078 268.012 17.047 268.031 17.016 268.039 cv
8.195 271.437 li
8.195 271.445 li
16.977 271.445 li
17.02 271.449 17.055 271.457 17.086 271.477 cv
17.117 271.5 17.145 271.539 17.16 271.59 cv
17.18 271.645 17.191 271.715 17.207 271.797 cv
17.219 271.887 17.227 271.996 17.227 272.125 cv
17.227 272.258 17.219 272.363 17.207 272.449 cv
17.191 272.535 17.18 272.605 17.16 272.652 cv
17.145 272.707 17.117 272.742 17.086 272.758 cv
17.055 272.781 17.02 272.789 16.977 272.785 cv
7.703 272.785 li
7.488 272.789 7.332 272.73 7.234 272.613 cv
7.145 272.496 7.098 272.367 7.094 272.223 cv
7.094 271.398 li
7.098 271.234 7.113 271.086 7.141 270.957 cv
7.176 270.832 7.223 270.723 7.289 270.625 cv
7.359 270.531 7.445 270.449 7.547 270.387 cv
7.652 270.324 7.777 270.27 7.914 270.223 cv
15.215 267.336 li
15.215 267.297 li
7.938 264.297 li
7.785 264.242 7.652 264.18 7.539 264.109 cv
7.434 264.043 7.344 263.965 7.277 263.883 cv
7.215 263.801 7.168 263.711 7.137 263.609 cv
7.109 263.512 7.098 263.395 7.094 263.262 cv
7.094 262.398 li
7.098 262.32 7.109 262.242 7.129 262.172 cv
7.156 262.102 7.191 262.043 7.238 261.992 cv
7.289 261.941 7.352 261.898 7.426 261.867 cv
7.504 261.836 7.598 261.82 7.703 261.82 cv
cp
f
16.984 258 mo
17.031 258.004 17.066 258.016 17.09 258.031 cv
17.121 258.055 17.145 258.086 17.164 258.133 cv
17.184 258.18 17.195 258.246 17.211 258.324 cv
17.219 258.41 17.227 258.516 17.227 258.645 cv
17.227 258.773 17.219 258.879 17.211 258.957 cv
17.195 259.043 17.184 259.109 17.164 259.156 cv
17.145 259.211 17.121 259.242 17.09 259.258 cv
17.066 259.277 17.031 259.289 16.984 259.285 cv
9.973 259.285 li
9.938 259.289 9.906 259.277 9.871 259.258 cv
9.844 259.242 9.816 259.211 9.793 259.156 cv
9.773 259.109 9.758 259.043 9.746 258.957 cv
9.738 258.879 9.734 258.773 9.73 258.645 cv
9.734 258.516 9.738 258.41 9.746 258.324 cv
9.758 258.246 9.773 258.18 9.793 258.133 cv
9.816 258.086 9.844 258.055 9.871 258.031 cv
9.906 258.016 9.938 258.004 9.973 258 cv
cp
7.602 257.852 mo
7.906 257.852 8.113 257.91 8.219 258.023 cv
8.332 258.137 8.387 258.348 8.383 258.652 cv
8.387 258.957 8.332 259.164 8.223 259.273 cv
8.117 259.391 7.914 259.445 7.617 259.441 cv
7.316 259.445 7.113 259.387 7.004 259.27 cv
6.898 259.156 6.844 258.945 6.84 258.637 cv
6.844 258.336 6.898 258.133 7 258.02 cv
7.109 257.91 7.309 257.852 7.602 257.852 cv
cp
f
16.984 249.578 mo
17.031 249.578 17.066 249.59 17.09 249.609 cv
17.121 249.633 17.145 249.668 17.164 249.711 cv
17.184 249.762 17.195 249.824 17.211 249.906 cv
17.219 249.988 17.227 250.094 17.227 250.215 cv
17.227 250.348 17.219 250.453 17.211 250.535 cv
17.195 250.621 17.184 250.687 17.164 250.73 cv
17.145 250.781 17.121 250.812 17.09 250.832 cv
17.066 250.855 17.031 250.867 16.984 250.863 cv
12.879 250.863 li
12.48 250.867 12.16 250.898 11.914 250.957 cv
11.672 251.023 11.461 251.113 11.281 251.23 cv
11.105 251.348 10.969 251.504 10.875 251.691 cv
10.781 251.887 10.734 252.105 10.734 252.352 cv
10.734 252.676 10.852 253 11.078 253.32 cv
11.313 253.645 11.645 253.98 12.082 254.332 cv
16.984 254.332 li
17.031 254.336 17.066 254.348 17.09 254.363 cv
17.121 254.387 17.145 254.418 17.164 254.465 cv
17.184 254.512 17.195 254.578 17.211 254.656 cv
17.219 254.742 17.227 254.848 17.227 254.977 cv
17.227 255.105 17.219 255.211 17.211 255.289 cv
17.195 255.375 17.184 255.441 17.164 255.488 cv
17.145 255.543 17.121 255.574 17.09 255.59 cv
17.066 255.609 17.031 255.621 16.984 255.617 cv
9.973 255.617 li
9.934 255.621 9.898 255.613 9.867 255.594 cv
9.84 255.582 9.816 255.551 9.789 255.5 cv
9.77 255.457 9.754 255.395 9.742 255.32 cv
9.738 255.25 9.734 255.156 9.73 255.031 cv
9.734 254.922 9.738 254.824 9.742 254.746 cv
9.754 254.672 9.77 254.613 9.789 254.57 cv
9.816 254.531 9.84 254.504 9.867 254.484 cv
9.898 254.469 9.934 254.461 9.973 254.457 cv
10.898 254.457 li
10.457 254.066 10.137 253.672 9.93 253.277 cv
9.727 252.887 9.621 252.488 9.621 252.086 cv
9.621 251.617 9.703 251.227 9.859 250.906 cv
10.023 250.59 10.234 250.328 10.496 250.129 cv
10.762 249.934 11.07 249.793 11.426 249.707 cv
11.781 249.621 12.211 249.578 12.707 249.578 cv
cp
f
16.984 241.18 mo
17.031 241.184 17.066 241.191 17.09 241.207 cv
17.121 241.227 17.145 241.262 17.164 241.305 cv
17.184 241.352 17.195 241.41 17.211 241.484 cv
17.219 241.562 17.227 241.656 17.227 241.762 cv
17.227 241.887 17.219 241.984 17.211 242.055 cv
17.195 242.133 17.184 242.191 17.164 242.234 cv
17.145 242.281 17.121 242.312 17.09 242.324 cv
17.066 242.344 17.031 242.352 16.984 242.348 cv
16.059 242.348 li
16.504 242.75 16.824 243.145 17.023 243.531 cv
17.227 243.926 17.324 244.32 17.328 244.715 cv
17.324 245.187 17.25 245.582 17.094 245.898 cv
16.941 246.219 16.73 246.477 16.461 246.672 cv
16.195 246.875 15.883 247.016 15.523 247.098 cv
15.168 247.187 14.734 247.23 14.227 247.227 cv
9.973 247.227 li
9.934 247.23 9.898 247.223 9.867 247.199 cv
9.84 247.184 9.816 247.148 9.789 247.094 cv
9.77 247.047 9.754 246.977 9.742 246.891 cv
9.738 246.809 9.734 246.707 9.73 246.578 cv
9.734 246.457 9.738 246.352 9.742 246.266 cv
9.754 246.184 9.77 246.117 9.789 246.07 cv
9.816 246.023 9.84 245.988 9.867 245.965 cv
9.898 245.945 9.934 245.937 9.973 245.934 cv
14.055 245.934 li
14.469 245.937 14.797 245.906 15.043 245.844 cv
15.289 245.785 15.5 245.695 15.672 245.57 cv
15.852 245.453 15.984 245.297 16.078 245.105 cv
16.176 244.922 16.227 244.703 16.223 244.453 cv
16.227 244.133 16.109 243.812 15.879 243.488 cv
15.652 243.172 15.316 242.832 14.871 242.473 cv
9.973 242.473 li
9.934 242.473 9.898 242.465 9.867 242.445 cv
9.84 242.43 9.816 242.395 9.789 242.34 cv
9.77 242.289 9.754 242.223 9.742 242.141 cv
9.738 242.062 9.734 241.957 9.73 241.824 cv
9.734 241.703 9.738 241.598 9.742 241.512 cv
9.754 241.43 9.77 241.367 9.789 241.32 cv
9.816 241.277 9.84 241.242 9.867 241.215 cv
9.898 241.195 9.934 241.184 9.973 241.18 cv
cp
f
16.469 235.16 mo
16.625 235.16 16.742 235.172 16.828 235.191 cv
16.918 235.215 16.984 235.246 17.023 235.285 cv
17.066 235.328 17.105 235.391 17.141 235.473 cv
17.176 235.559 17.203 235.652 17.23 235.758 cv
17.25 235.867 17.27 235.98 17.289 236.098 cv
17.301 236.215 17.309 236.336 17.313 236.453 cv
17.309 236.82 17.262 237.133 17.168 237.391 cv
17.074 237.652 16.93 237.863 16.73 238.027 cv
16.539 238.195 16.293 238.316 15.992 238.391 cv
15.695 238.469 15.344 238.508 14.934 238.504 cv
10.836 238.504 li
10.836 239.484 li
10.84 239.562 10.797 239.625 10.711 239.672 cv
10.629 239.719 10.496 239.742 10.305 239.742 cv
10.211 239.742 10.129 239.738 10.059 239.723 cv
9.996 239.715 9.938 239.695 9.891 239.672 cv
9.848 239.652 9.816 239.625 9.797 239.59 cv
9.781 239.559 9.773 239.523 9.77 239.477 cv
9.77 238.504 li
8.102 238.504 li
8.07 238.508 8.035 238.496 8 238.477 cv
7.973 238.461 7.945 238.43 7.918 238.375 cv
7.898 238.328 7.883 238.262 7.867 238.176 cv
7.859 238.098 7.852 237.992 7.852 237.863 cv
7.852 237.734 7.859 237.629 7.867 237.547 cv
7.883 237.465 7.898 237.398 7.918 237.352 cv
7.945 237.305 7.973 237.273 8 237.25 cv
8.035 237.234 8.07 237.223 8.102 237.219 cv
9.77 237.219 li
9.77 235.418 li
9.773 235.379 9.781 235.344 9.797 235.309 cv
9.816 235.281 9.848 235.254 9.891 235.227 cv
9.938 235.207 9.996 235.191 10.059 235.176 cv
10.129 235.168 10.211 235.16 10.305 235.16 cv
10.496 235.16 10.629 235.184 10.711 235.23 cv
10.797 235.277 10.84 235.34 10.836 235.418 cv
10.836 237.219 li
14.75 237.219 li
15.234 237.223 15.598 237.152 15.844 237.004 cv
16.094 236.863 16.219 236.605 16.215 236.234 cv
16.219 236.121 16.207 236.016 16.18 235.918 cv
16.16 235.828 16.137 235.746 16.105 235.668 cv
16.082 235.598 16.055 235.535 16.031 235.48 cv
16.008 235.434 15.996 235.387 15.996 235.34 cv
15.996 235.316 16.004 235.289 16.016 235.266 cv
16.031 235.242 16.055 235.227 16.09 235.211 cv
16.129 235.203 16.18 235.191 16.238 235.176 cv
16.305 235.168 16.383 235.16 16.469 235.16 cv
cp
f
13.176 227.48 mo
13.379 227.484 13.52 227.535 13.605 227.633 cv
13.691 227.738 13.734 227.855 13.734 227.98 cv
13.734 232.598 li
14.125 232.602 14.477 232.562 14.789 232.48 cv
15.102 232.406 15.371 232.273 15.59 232.09 cv
15.816 231.91 15.988 231.676 16.105 231.379 cv
16.23 231.09 16.289 230.73 16.285 230.305 cv
16.289 229.973 16.262 229.676 16.203 229.414 cv
16.152 229.152 16.09 228.926 16.02 228.734 cv
15.953 228.547 15.895 228.391 15.836 228.266 cv
15.785 228.145 15.758 228.051 15.754 227.988 cv
15.758 227.953 15.766 227.922 15.781 227.891 cv
15.801 227.863 15.828 227.84 15.863 227.82 cv
15.902 227.809 15.953 227.797 16.016 227.785 cv
16.082 227.781 16.16 227.777 16.254 227.773 cv
16.324 227.777 16.383 227.781 16.43 227.781 cv
16.477 227.789 16.52 227.793 16.559 227.801 cv
16.598 227.809 16.633 227.824 16.664 227.84 cv
16.695 227.863 16.727 227.887 16.754 227.91 cv
16.785 227.941 16.832 228.023 16.895 228.164 cv
16.961 228.305 17.023 228.488 17.086 228.711 cv
17.148 228.937 17.203 229.195 17.254 229.488 cv
17.301 229.781 17.324 230.094 17.328 230.426 cv
17.324 231.004 17.246 231.512 17.086 231.941 cv
16.926 232.379 16.688 232.742 16.371 233.035 cv
16.055 233.336 15.66 233.559 15.18 233.707 cv
14.703 233.855 14.145 233.93 13.508 233.93 cv
12.91 233.93 12.371 233.855 11.887 233.699 cv
11.41 233.547 11 233.32 10.664 233.023 cv
10.328 232.73 10.07 232.375 9.891 231.961 cv
9.711 231.547 9.621 231.082 9.621 230.566 cv
9.621 230.016 9.711 229.547 9.887 229.16 cv
10.066 228.773 10.305 228.457 10.602 228.203 cv
10.902 227.957 11.254 227.773 11.652 227.656 cv
12.059 227.543 12.488 227.484 12.941 227.48 cv
cp
12.793 228.773 mo
12.117 228.758 11.586 228.91 11.203 229.227 cv
10.82 229.543 10.629 230.012 10.625 230.629 cv
10.629 230.953 10.688 231.234 10.805 231.473 cv
10.926 231.715 11.086 231.914 11.281 232.074 cv
11.48 232.238 11.711 232.363 11.973 232.449 cv
12.234 232.539 12.508 232.59 12.793 232.598 cv
cp
f
15.074 221.191 mo
15.438 221.195 15.758 221.262 16.035 221.391 cv
16.316 221.523 16.551 221.711 16.742 221.953 cv
16.938 222.199 17.082 222.492 17.18 222.828 cv
17.277 223.168 17.324 223.539 17.328 223.941 cv
17.324 224.195 17.305 224.434 17.27 224.656 cv
17.227 224.883 17.18 225.082 17.121 225.262 cv
17.063 225.441 17 225.594 16.934 225.719 cv
16.871 225.844 16.813 225.937 16.758 225.992 cv
16.707 226.051 16.637 226.09 16.539 226.113 cv
16.449 226.141 16.32 226.152 16.16 226.152 cv
16.063 226.152 15.98 226.148 15.91 226.137 cv
15.844 226.129 15.789 226.117 15.746 226.098 cv
15.707 226.086 15.676 226.062 15.656 226.035 cv
15.641 226.008 15.633 225.977 15.629 225.937 cv
15.633 225.883 15.668 225.797 15.734 225.684 cv
15.809 225.574 15.887 225.437 15.965 225.27 cv
16.051 225.109 16.125 224.918 16.195 224.691 cv
16.266 224.473 16.301 224.215 16.301 223.918 cv
16.301 223.703 16.277 223.504 16.23 223.324 cv
16.184 223.148 16.117 222.996 16.023 222.867 cv
15.938 222.738 15.82 222.637 15.676 222.566 cv
15.539 222.496 15.371 222.461 15.176 222.461 cv
14.98 222.461 14.816 222.512 14.68 222.613 cv
14.547 222.715 14.426 222.852 14.32 223.016 cv
14.219 223.184 14.129 223.367 14.043 223.574 cv
13.965 223.785 13.879 224 13.789 224.219 cv
13.703 224.437 13.602 224.652 13.488 224.863 cv
13.379 225.074 13.246 225.266 13.082 225.43 cv
12.926 225.602 12.73 225.734 12.504 225.832 cv
12.281 225.937 12.016 225.988 11.703 225.984 cv
11.43 225.988 11.164 225.934 10.91 225.824 cv
10.66 225.719 10.441 225.559 10.25 225.344 cv
10.063 225.133 9.91 224.867 9.793 224.547 cv
9.68 224.227 9.621 223.855 9.621 223.426 cv
9.621 223.242 9.637 223.055 9.668 222.867 cv
9.699 222.684 9.738 222.516 9.785 222.359 cv
9.832 222.211 9.883 222.082 9.938 221.973 cv
9.992 221.871 10.043 221.789 10.082 221.73 cv
10.129 221.68 10.164 221.645 10.191 221.621 cv
10.223 221.605 10.258 221.59 10.293 221.582 cv
10.336 221.574 10.383 221.566 10.438 221.559 cv
10.496 221.551 10.566 221.547 10.648 221.547 cv
10.738 221.547 10.816 221.551 10.879 221.559 cv
10.949 221.566 11 221.582 11.039 221.598 cv
11.082 221.621 11.113 221.641 11.129 221.664 cv
11.148 221.691 11.156 221.723 11.156 221.75 cv
11.156 221.801 11.129 221.867 11.07 221.953 cv
11.016 222.043 10.953 222.156 10.887 222.297 cv
10.824 222.437 10.766 222.605 10.703 222.793 cv
10.648 222.984 10.617 223.199 10.617 223.441 cv
10.617 223.664 10.645 223.855 10.691 224.02 cv
10.746 224.187 10.816 224.324 10.902 224.43 cv
10.996 224.535 11.102 224.617 11.227 224.668 cv
11.352 224.727 11.488 224.754 11.633 224.75 cv
11.836 224.754 12.004 224.703 12.141 224.598 cv
12.281 224.496 12.402 224.359 12.504 224.191 cv
12.609 224.027 12.703 223.836 12.785 223.621 cv
12.871 223.41 12.957 223.195 13.043 222.973 cv
13.133 222.754 13.234 222.535 13.34 222.316 cv
13.449 222.102 13.578 221.91 13.734 221.742 cv
13.891 221.578 14.078 221.445 14.297 221.344 cv
14.516 221.246 14.777 221.195 15.074 221.191 cv
cp
f
12.996 216.75 mo
13.582 216.75 14.164 216.789 14.738 216.859 cv
15.313 216.937 15.879 217.047 16.441 217.187 cv
17 217.336 17.551 217.512 18.094 217.723 cv
18.637 217.934 19.172 218.18 19.703 218.457 cv
19.727 218.477 19.75 218.5 19.773 218.527 cv
19.793 218.562 19.813 218.602 19.828 218.648 cv
19.844 218.699 19.852 218.758 19.859 218.824 cv
19.859 218.895 19.863 218.977 19.867 219.066 cv
19.863 219.203 19.855 219.309 19.848 219.383 cv
19.832 219.461 19.813 219.516 19.785 219.547 cv
19.754 219.582 19.719 219.598 19.676 219.594 cv
19.629 219.594 19.574 219.578 19.516 219.551 cv
18.465 219.074 17.395 218.715 16.297 218.469 cv
15.199 218.227 14.09 218.105 12.973 218.102 cv
11.863 218.105 10.758 218.227 9.656 218.469 cv
8.559 218.715 7.488 219.082 6.441 219.566 cv
6.398 219.59 6.355 219.598 6.309 219.59 cv
6.27 219.59 6.234 219.566 6.207 219.52 cv
6.184 219.48 6.164 219.422 6.145 219.348 cv
6.133 219.277 6.125 219.18 6.121 219.059 cv
6.125 218.949 6.129 218.859 6.133 218.785 cv
6.145 218.715 6.156 218.656 6.168 218.609 cv
6.188 218.566 6.203 218.535 6.215 218.512 cv
6.234 218.496 6.25 218.48 6.27 218.465 cv
7.336 217.934 8.434 217.512 9.555 217.207 cv
10.684 216.902 11.828 216.75 12.996 216.75 cv
cp
f
279.801 556.078 mo
279.797 556.184 279.781 556.273 279.746 556.344 cv
279.711 556.422 279.664 556.48 279.609 556.523 cv
279.551 556.574 279.488 556.609 279.422 556.625 cv
279.348 556.648 279.277 556.656 279.215 556.656 cv
278.77 556.656 li
278.629 556.656 278.508 556.645 278.402 556.613 cv
278.297 556.59 278.199 556.535 278.105 556.457 cv
278.012 556.383 277.918 556.281 277.824 556.148 cv
277.73 556.02 277.629 555.855 277.523 555.652 cv
274.449 549.914 li
274.285 549.621 274.121 549.312 273.961 548.984 cv
273.793 548.664 273.641 548.348 273.504 548.039 cv
273.488 548.039 li
273.496 548.414 273.504 548.797 273.512 549.184 cv
273.516 549.574 273.516 549.961 273.52 550.344 cv
273.52 556.43 li
273.516 556.469 273.504 556.504 273.484 556.535 cv
273.461 556.57 273.426 556.598 273.375 556.613 cv
273.32 556.633 273.25 556.645 273.168 556.66 cv
273.082 556.672 272.977 556.68 272.848 556.68 cv
272.711 556.68 272.602 556.672 272.52 556.66 cv
272.434 556.645 272.367 556.633 272.32 556.613 cv
272.27 556.598 272.234 556.57 272.211 556.535 cv
272.188 556.504 272.176 556.469 272.18 556.43 cv
272.18 547.125 li
272.176 546.918 272.234 546.77 272.355 546.68 cv
272.473 546.594 272.602 546.551 272.742 546.547 cv
273.402 546.547 li
273.555 546.551 273.688 546.562 273.793 546.586 cv
273.895 546.613 273.988 546.656 274.074 546.715 cv
274.156 546.777 274.234 546.859 274.316 546.965 cv
274.391 547.074 274.473 547.211 274.559 547.367 cv
276.926 551.793 li
277.07 552.066 277.211 552.332 277.348 552.586 cv
277.48 552.844 277.609 553.098 277.738 553.344 cv
277.859 553.598 277.984 553.844 278.109 554.082 cv
278.23 554.324 278.352 554.566 278.477 554.809 cv
278.484 554.809 li
278.473 554.402 278.465 553.973 278.465 553.527 cv
278.457 553.082 278.457 552.656 278.461 552.246 cv
278.461 546.773 li
278.457 546.738 278.469 546.703 278.492 546.672 cv
278.516 546.641 278.551 546.613 278.605 546.59 cv
278.652 546.566 278.723 546.551 278.809 546.539 cv
278.895 546.531 279.004 546.527 279.145 546.523 cv
279.262 546.527 279.367 546.531 279.457 546.539 cv
279.543 546.551 279.609 546.566 279.66 546.59 cv
279.707 546.613 279.742 546.641 279.766 546.672 cv
279.785 546.703 279.797 546.738 279.801 546.773 cv
cp
f
288.348 556.437 mo
288.344 556.484 288.336 556.52 288.32 556.543 cv
288.301 556.574 288.266 556.598 288.223 556.617 cv
288.176 556.637 288.117 556.648 288.043 556.664 cv
287.965 556.672 287.871 556.68 287.766 556.68 cv
287.641 556.68 287.543 556.672 287.473 556.664 cv
287.395 556.648 287.336 556.637 287.293 556.617 cv
287.246 556.598 287.215 556.574 287.203 556.543 cv
287.184 556.52 287.176 556.484 287.18 556.437 cv
287.18 555.512 li
286.777 555.957 286.383 556.277 285.996 556.477 cv
285.602 556.68 285.207 556.777 284.813 556.781 cv
284.34 556.777 283.945 556.703 283.629 556.547 cv
283.309 556.395 283.051 556.184 282.855 555.914 cv
282.652 555.648 282.512 555.336 282.43 554.977 cv
282.34 554.621 282.297 554.187 282.301 553.68 cv
282.301 549.426 li
282.297 549.387 282.305 549.352 282.328 549.32 cv
282.344 549.293 282.379 549.27 282.434 549.242 cv
282.48 549.223 282.551 549.207 282.637 549.195 cv
282.719 549.191 282.82 549.187 282.949 549.184 cv
283.07 549.187 283.176 549.191 283.262 549.195 cv
283.344 549.207 283.41 549.223 283.457 549.242 cv
283.504 549.27 283.539 549.293 283.563 549.32 cv
283.582 549.352 283.59 549.387 283.594 549.426 cv
283.594 553.508 li
283.59 553.922 283.621 554.25 283.684 554.496 cv
283.742 554.742 283.832 554.953 283.957 555.125 cv
284.074 555.305 284.23 555.437 284.422 555.531 cv
284.605 555.629 284.824 555.68 285.074 555.676 cv
285.395 555.68 285.715 555.562 286.039 555.332 cv
286.355 555.105 286.695 554.77 287.055 554.324 cv
287.055 549.426 li
287.055 549.387 287.063 549.352 287.082 549.32 cv
287.098 549.293 287.133 549.27 287.188 549.242 cv
287.238 549.223 287.305 549.207 287.387 549.195 cv
287.465 549.191 287.57 549.187 287.703 549.184 cv
287.824 549.187 287.93 549.191 288.016 549.195 cv
288.098 549.207 288.16 549.223 288.207 549.242 cv
288.25 549.27 288.285 549.293 288.313 549.32 cv
288.332 549.352 288.344 549.387 288.348 549.426 cv
cp
f
301.125 556.437 mo
301.121 556.484 301.113 556.52 301.094 556.543 cv
301.07 556.574 301.035 556.598 300.992 556.617 cv
300.941 556.637 300.875 556.648 300.797 556.664 cv
300.711 556.672 300.609 556.68 300.484 556.68 cv
300.352 556.68 300.242 556.672 300.164 556.664 cv
300.078 556.648 300.012 556.637 299.965 556.617 cv
299.91 556.598 299.875 556.574 299.859 556.543 cv
299.836 556.52 299.828 556.484 299.828 556.437 cv
299.828 552.176 li
299.828 551.883 299.801 551.613 299.75 551.367 cv
299.695 551.125 299.613 550.914 299.5 550.734 cv
299.387 550.559 299.242 550.422 299.066 550.328 cv
298.887 550.234 298.676 550.187 298.441 550.187 cv
298.145 550.187 297.848 550.305 297.551 550.531 cv
297.246 550.766 296.918 551.098 296.563 551.535 cv
296.563 556.437 li
296.559 556.484 296.547 556.52 296.531 556.543 cv
296.508 556.574 296.477 556.598 296.43 556.617 cv
296.379 556.637 296.313 556.648 296.23 556.664 cv
296.145 556.672 296.039 556.68 295.918 556.68 cv
295.797 556.68 295.695 556.672 295.609 556.664 cv
295.523 556.648 295.453 556.637 295.406 556.617 cv
295.352 556.598 295.32 556.574 295.305 556.543 cv
295.285 556.52 295.273 556.484 295.277 556.437 cv
295.277 552.176 li
295.273 551.883 295.246 551.613 295.191 551.367 cv
295.133 551.125 295.047 550.914 294.934 550.734 cv
294.82 550.559 294.676 550.422 294.504 550.328 cv
294.324 550.234 294.117 550.187 293.883 550.187 cv
293.582 550.187 293.285 550.305 292.984 550.531 cv
292.684 550.766 292.355 551.098 292.004 551.535 cv
292.004 556.437 li
292 556.484 291.988 556.52 291.973 556.543 cv
291.949 556.574 291.918 556.598 291.871 556.617 cv
291.824 556.637 291.758 556.648 291.68 556.664 cv
291.594 556.672 291.488 556.68 291.359 556.68 cv
291.23 556.68 291.125 556.672 291.047 556.664 cv
290.961 556.648 290.895 556.637 290.848 556.617 cv
290.793 556.598 290.762 556.574 290.746 556.543 cv
290.727 556.52 290.715 556.484 290.719 556.437 cv
290.719 549.426 li
290.715 549.387 290.723 549.352 290.742 549.32 cv
290.754 549.293 290.785 549.27 290.836 549.242 cv
290.879 549.223 290.941 549.207 291.016 549.195 cv
291.086 549.191 291.18 549.187 291.305 549.184 cv
291.414 549.187 291.512 549.191 291.59 549.195 cv
291.664 549.207 291.723 549.223 291.766 549.242 cv
291.805 549.27 291.832 549.293 291.852 549.32 cv
291.867 549.352 291.875 549.387 291.879 549.426 cv
291.879 550.352 li
292.27 549.91 292.652 549.59 293.027 549.383 cv
293.395 549.18 293.773 549.074 294.156 549.074 cv
294.445 549.074 294.703 549.109 294.938 549.176 cv
295.164 549.246 295.371 549.34 295.551 549.461 cv
295.727 549.582 295.875 549.727 296.004 549.895 cv
296.125 550.066 296.23 550.258 296.316 550.461 cv
296.547 550.211 296.77 549.996 296.98 549.816 cv
297.191 549.645 297.395 549.5 297.59 549.387 cv
297.785 549.281 297.973 549.203 298.156 549.148 cv
298.34 549.102 298.527 549.074 298.715 549.074 cv
299.168 549.074 299.547 549.156 299.852 549.312 cv
300.156 549.477 300.402 549.687 300.598 549.949 cv
300.785 550.215 300.922 550.523 301.004 550.879 cv
301.082 551.234 301.121 551.609 301.125 552.004 cv
cp
f
309.926 552.836 mo
309.922 553.445 309.855 553.996 309.727 554.48 cv
309.59 554.969 309.395 555.383 309.141 555.723 cv
308.883 556.066 308.566 556.328 308.195 556.508 cv
307.82 556.691 307.395 556.777 306.91 556.781 cv
306.684 556.777 306.477 556.758 306.289 556.715 cv
306.102 556.668 305.914 556.598 305.734 556.5 cv
305.547 556.402 305.367 556.277 305.188 556.125 cv
305.004 555.977 304.813 555.797 304.613 555.582 cv
304.613 556.437 li
304.613 556.484 304.602 556.52 304.582 556.547 cv
304.559 556.582 304.523 556.605 304.48 556.621 cv
304.43 556.637 304.371 556.648 304.305 556.664 cv
304.23 556.672 304.141 556.68 304.035 556.68 cv
303.926 556.68 303.84 556.672 303.77 556.664 cv
303.695 556.648 303.633 556.637 303.59 556.621 cv
303.539 556.605 303.508 556.582 303.496 556.547 cv
303.477 556.52 303.469 556.484 303.473 556.437 cv
303.473 546.027 li
303.469 545.988 303.48 545.953 303.5 545.918 cv
303.516 545.891 303.547 545.863 303.602 545.84 cv
303.648 545.82 303.715 545.805 303.801 545.793 cv
303.879 545.785 303.984 545.781 304.113 545.777 cv
304.242 545.781 304.348 545.785 304.434 545.793 cv
304.512 545.805 304.578 545.82 304.625 545.84 cv
304.672 545.863 304.703 545.891 304.727 545.918 cv
304.742 545.953 304.754 545.988 304.758 546.027 cv
304.758 550.227 li
304.965 550.016 305.168 549.836 305.363 549.691 cv
305.559 549.547 305.746 549.43 305.934 549.336 cv
306.117 549.25 306.305 549.184 306.496 549.137 cv
306.68 549.098 306.879 549.074 307.09 549.074 cv
307.594 549.074 308.027 549.176 308.395 549.379 cv
308.754 549.582 309.047 549.855 309.273 550.191 cv
309.496 550.535 309.664 550.934 309.77 551.391 cv
309.871 551.848 309.922 552.328 309.926 552.836 cv
cp
308.594 552.984 mo
308.59 552.629 308.563 552.281 308.512 551.941 cv
308.453 551.605 308.359 551.309 308.223 551.047 cv
308.086 550.789 307.906 550.578 307.684 550.418 cv
307.457 550.262 307.176 550.184 306.844 550.18 cv
306.676 550.184 306.512 550.207 306.352 550.25 cv
306.188 550.301 306.023 550.379 305.855 550.484 cv
305.688 550.598 305.512 550.738 305.336 550.906 cv
305.152 551.082 304.961 551.297 304.758 551.551 cv
304.758 554.348 li
305.113 554.781 305.453 555.113 305.777 555.336 cv
306.102 555.566 306.438 555.68 306.789 555.676 cv
307.109 555.68 307.387 555.602 307.621 555.441 cv
307.848 555.289 308.035 555.082 308.18 554.82 cv
308.324 554.566 308.43 554.277 308.496 553.957 cv
308.559 553.641 308.59 553.316 308.594 552.984 cv
cp
f
317.836 552.629 mo
317.832 552.832 317.781 552.973 317.684 553.059 cv
317.578 553.145 317.461 553.187 317.336 553.187 cv
312.719 553.187 li
312.715 553.578 312.754 553.93 312.836 554.242 cv
312.91 554.555 313.043 554.824 313.227 555.043 cv
313.406 555.27 313.641 555.441 313.938 555.559 cv
314.227 555.684 314.586 555.742 315.012 555.738 cv
315.344 555.742 315.641 555.715 315.902 555.656 cv
316.164 555.605 316.391 555.543 316.582 555.473 cv
316.77 555.406 316.926 555.348 317.051 555.289 cv
317.172 555.238 317.266 555.211 317.328 555.207 cv
317.363 555.211 317.395 555.219 317.426 555.234 cv
317.453 555.254 317.477 555.281 317.496 555.316 cv
317.508 555.355 317.52 555.406 317.531 555.469 cv
317.535 555.535 317.539 555.613 317.543 555.707 cv
317.539 555.777 317.535 555.836 317.535 555.883 cv
317.527 555.93 317.523 555.973 317.516 556.012 cv
317.508 556.051 317.492 556.086 317.477 556.117 cv
317.453 556.148 317.43 556.18 317.406 556.207 cv
317.375 556.238 317.293 556.285 317.152 556.348 cv
317.012 556.414 316.828 556.477 316.605 556.539 cv
316.379 556.602 316.121 556.656 315.828 556.707 cv
315.535 556.754 315.223 556.777 314.891 556.781 cv
314.313 556.777 313.805 556.699 313.375 556.539 cv
312.938 556.379 312.574 556.141 312.281 555.824 cv
311.98 555.508 311.758 555.113 311.609 554.633 cv
311.461 554.156 311.387 553.598 311.387 552.961 cv
311.387 552.363 311.461 551.824 311.617 551.34 cv
311.77 550.863 311.996 550.453 312.293 550.117 cv
312.586 549.781 312.941 549.523 313.355 549.344 cv
313.77 549.164 314.234 549.074 314.75 549.074 cv
315.301 549.074 315.77 549.164 316.156 549.34 cv
316.543 549.52 316.859 549.758 317.113 550.055 cv
317.359 550.355 317.543 550.707 317.66 551.105 cv
317.773 551.512 317.832 551.941 317.836 552.395 cv
cp
316.543 552.246 mo
316.559 551.57 316.406 551.039 316.09 550.656 cv
315.773 550.273 315.305 550.082 314.688 550.078 cv
314.363 550.082 314.082 550.141 313.844 550.258 cv
313.602 550.379 313.402 550.539 313.242 550.734 cv
313.078 550.934 312.953 551.164 312.867 551.426 cv
312.777 551.687 312.727 551.961 312.719 552.246 cv
cp
f
323.902 549.883 mo
323.898 550 323.898 550.098 323.895 550.172 cv
323.887 550.254 323.875 550.316 323.863 550.355 cv
323.844 550.402 323.824 550.434 323.805 550.457 cv
323.777 550.48 323.746 550.492 323.707 550.492 cv
323.664 550.492 323.613 550.48 323.555 550.457 cv
323.492 550.434 323.422 550.41 323.352 550.387 cv
323.273 550.363 323.191 550.344 323.098 550.32 cv
323.004 550.305 322.902 550.293 322.793 550.289 cv
322.66 550.293 322.531 550.32 322.41 550.367 cv
322.285 550.422 322.156 550.508 322.02 550.625 cv
321.879 550.75 321.734 550.906 321.586 551.102 cv
321.434 551.297 321.266 551.539 321.086 551.824 cv
321.086 556.437 li
321.082 556.484 321.07 556.52 321.055 556.543 cv
321.031 556.574 321 556.598 320.953 556.617 cv
320.906 556.637 320.84 556.648 320.762 556.664 cv
320.676 556.672 320.57 556.68 320.441 556.68 cv
320.313 556.68 320.207 556.672 320.129 556.664 cv
320.043 556.648 319.977 556.637 319.93 556.617 cv
319.875 556.598 319.844 556.574 319.828 556.543 cv
319.809 556.52 319.797 556.484 319.801 556.437 cv
319.801 549.426 li
319.797 549.387 319.805 549.352 319.824 549.32 cv
319.836 549.293 319.867 549.27 319.918 549.242 cv
319.961 549.223 320.023 549.207 320.098 549.195 cv
320.168 549.191 320.262 549.187 320.387 549.184 cv
320.496 549.187 320.594 549.191 320.672 549.195 cv
320.746 549.207 320.805 549.223 320.848 549.242 cv
320.887 549.27 320.914 549.293 320.934 549.32 cv
320.949 549.352 320.957 549.387 320.961 549.426 cv
320.961 550.445 li
321.148 550.164 321.332 549.937 321.504 549.762 cv
321.672 549.586 321.832 549.445 321.984 549.344 cv
322.133 549.242 322.281 549.172 322.43 549.133 cv
322.578 549.094 322.727 549.074 322.879 549.074 cv
322.945 549.074 323.023 549.078 323.109 549.086 cv
323.195 549.094 323.285 549.109 323.379 549.129 cv
323.473 549.152 323.555 549.176 323.633 549.199 cv
323.703 549.227 323.758 549.254 323.793 549.277 cv
323.82 549.309 323.84 549.332 323.855 549.352 cv
323.863 549.379 323.875 549.41 323.883 549.441 cv
323.891 549.48 323.895 549.531 323.898 549.602 cv
323.898 549.672 323.898 549.766 323.902 549.883 cv
cp
f
335.66 552.852 mo
335.656 553.43 335.582 553.957 335.434 554.434 cv
335.281 554.918 335.055 555.332 334.758 555.676 cv
334.457 556.027 334.082 556.297 333.637 556.488 cv
333.184 556.684 332.664 556.777 332.074 556.781 cv
331.496 556.777 330.992 556.695 330.566 556.523 cv
330.137 556.355 329.781 556.105 329.496 555.777 cv
329.207 555.449 328.992 555.055 328.855 554.586 cv
328.715 554.121 328.648 553.59 328.648 552.992 cv
328.648 552.426 328.719 551.898 328.867 551.418 cv
329.012 550.937 329.238 550.523 329.539 550.172 cv
329.836 549.824 330.207 549.555 330.656 549.363 cv
331.102 549.172 331.625 549.074 332.223 549.074 cv
332.801 549.074 333.301 549.16 333.73 549.332 cv
334.156 549.504 334.516 549.754 334.801 550.082 cv
335.086 550.41 335.301 550.809 335.445 551.273 cv
335.586 551.742 335.656 552.27 335.66 552.852 cv
cp
334.328 552.937 mo
334.324 552.562 334.289 552.203 334.223 551.863 cv
334.148 551.527 334.031 551.234 333.871 550.977 cv
333.707 550.727 333.488 550.523 333.211 550.371 cv
332.93 550.227 332.582 550.152 332.172 550.148 cv
331.785 550.152 331.457 550.219 331.184 550.352 cv
330.906 550.488 330.68 550.68 330.504 550.926 cv
330.324 551.172 330.191 551.465 330.109 551.801 cv
330.02 552.141 329.977 552.508 329.98 552.906 cv
329.977 553.293 330.012 553.656 330.086 553.992 cv
330.152 554.332 330.27 554.625 330.438 554.875 cv
330.602 555.129 330.824 555.332 331.102 555.477 cv
331.379 555.629 331.727 555.703 332.141 555.699 cv
332.516 555.703 332.844 555.633 333.125 555.496 cv
333.402 555.363 333.629 555.176 333.809 554.926 cv
333.984 554.684 334.113 554.391 334.199 554.055 cv
334.281 553.719 334.324 553.348 334.328 552.937 cv
cp
f
341.391 546.539 mo
341.387 546.641 341.383 546.719 341.375 546.777 cv
341.363 546.84 341.352 546.891 341.34 546.922 cv
341.324 546.961 341.309 546.984 341.289 546.996 cv
341.266 547.012 341.238 547.02 341.211 547.016 cv
341.172 547.02 341.125 547.008 341.074 546.98 cv
341.016 546.961 340.949 546.934 340.875 546.902 cv
340.793 546.875 340.703 546.848 340.598 546.824 cv
340.488 546.801 340.363 546.789 340.23 546.789 cv
340.035 546.789 339.871 546.82 339.738 546.883 cv
339.598 546.945 339.488 547.043 339.41 547.176 cv
339.324 547.309 339.266 547.48 339.23 547.691 cv
339.191 547.902 339.172 548.16 339.176 548.457 cv
339.176 549.223 li
340.742 549.223 li
340.781 549.227 340.816 549.234 340.848 549.25 cv
340.875 549.27 340.902 549.301 340.926 549.344 cv
340.949 549.391 340.965 549.449 340.98 549.512 cv
340.988 549.582 340.996 549.664 341 549.758 cv
340.996 549.949 340.973 550.082 340.93 550.164 cv
340.879 550.25 340.816 550.293 340.742 550.289 cv
339.176 550.289 li
339.176 556.437 li
339.172 556.484 339.164 556.52 339.145 556.543 cv
339.121 556.574 339.086 556.598 339.039 556.617 cv
338.988 556.637 338.922 556.648 338.84 556.664 cv
338.754 556.672 338.648 556.68 338.531 556.68 cv
338.402 556.68 338.301 556.672 338.219 556.664 cv
338.133 556.648 338.066 556.637 338.02 556.617 cv
337.969 556.598 337.934 556.574 337.914 556.543 cv
337.891 556.52 337.879 556.484 337.883 556.437 cv
337.883 550.289 li
336.895 550.289 li
336.809 550.293 336.746 550.25 336.707 550.164 cv
336.664 550.082 336.641 549.949 336.645 549.758 cv
336.641 549.664 336.648 549.582 336.66 549.512 cv
336.668 549.449 336.684 549.391 336.707 549.344 cv
336.727 549.301 336.75 549.27 336.785 549.25 cv
336.813 549.234 336.852 549.227 336.895 549.223 cv
337.883 549.223 li
337.883 548.496 li
337.879 548.012 337.926 547.594 338.02 547.238 cv
338.109 546.891 338.246 546.602 338.434 546.379 cv
338.617 546.156 338.852 545.992 339.141 545.883 cv
339.422 545.777 339.758 545.723 340.145 545.723 cv
340.32 545.723 340.496 545.742 340.672 545.773 cv
340.84 545.812 340.973 545.848 341.07 545.883 cv
341.16 545.926 341.223 545.961 341.258 545.988 cv
341.285 546.023 341.313 546.062 341.336 546.109 cv
341.355 546.16 341.367 546.223 341.379 546.289 cv
341.383 546.363 341.387 546.445 341.391 546.539 cv
cp
f
351.59 553.805 mo
351.586 554.277 351.5 554.699 351.328 555.066 cv
351.152 555.441 350.91 555.754 350.602 556.008 cv
350.293 556.266 349.93 556.457 349.512 556.586 cv
349.09 556.715 348.641 556.777 348.16 556.781 cv
347.82 556.777 347.504 556.75 347.219 556.695 cv
346.93 556.637 346.676 556.57 346.449 556.484 cv
346.223 556.406 346.031 556.32 345.879 556.227 cv
345.723 556.141 345.617 556.062 345.559 556 cv
345.5 555.937 345.457 555.859 345.43 555.766 cv
345.398 555.672 345.383 555.543 345.387 555.379 cv
345.383 555.266 345.387 555.172 345.402 555.094 cv
345.41 555.02 345.426 554.957 345.449 554.91 cv
345.465 554.863 345.492 554.832 345.527 554.812 cv
345.555 554.797 345.59 554.789 345.633 554.785 cv
345.703 554.789 345.805 554.832 345.941 554.918 cv
346.07 555.008 346.242 555.105 346.453 555.207 cv
346.66 555.316 346.91 555.414 347.203 555.5 cv
347.496 555.594 347.836 555.637 348.223 555.637 cv
348.512 555.637 348.777 555.598 349.02 555.52 cv
349.258 555.441 349.465 555.332 349.645 555.187 cv
349.816 555.047 349.953 554.871 350.047 554.66 cv
350.141 554.453 350.188 554.219 350.188 553.953 cv
350.188 553.672 350.121 553.426 349.992 553.219 cv
349.859 553.02 349.688 552.844 349.477 552.687 cv
349.262 552.539 349.02 552.398 348.746 552.266 cv
348.473 552.141 348.191 552.008 347.91 551.875 cv
347.621 551.742 347.344 551.598 347.074 551.434 cv
346.805 551.277 346.563 551.086 346.352 550.867 cv
346.133 550.648 345.961 550.395 345.832 550.098 cv
345.695 549.809 345.629 549.457 345.633 549.043 cv
345.629 548.625 345.707 548.25 345.863 547.918 cv
346.016 547.59 346.227 547.312 346.504 547.086 cv
346.773 546.867 347.098 546.695 347.477 546.578 cv
347.852 546.461 348.262 546.402 348.699 546.402 cv
348.918 546.402 349.141 546.422 349.371 546.461 cv
349.594 546.5 349.805 546.551 350.008 546.613 cv
350.203 546.68 350.383 546.754 350.543 546.832 cv
350.695 546.914 350.797 546.98 350.852 547.027 cv
350.898 547.082 350.934 547.121 350.949 547.145 cv
350.965 547.176 350.977 547.211 350.988 547.254 cv
350.996 547.301 351.004 547.355 351.012 547.414 cv
351.016 547.48 351.02 547.559 351.02 547.656 cv
351.02 547.75 351.016 547.836 351.008 547.906 cv
351 547.984 350.988 548.043 350.973 548.09 cv
350.957 548.137 350.934 548.172 350.906 548.195 cv
350.875 548.219 350.844 548.23 350.809 548.23 cv
350.75 548.23 350.66 548.195 350.539 548.125 cv
350.414 548.055 350.262 547.973 350.09 547.879 cv
349.91 547.789 349.703 547.707 349.465 547.629 cv
349.219 547.555 348.949 547.516 348.652 547.516 cv
348.371 547.516 348.125 547.555 347.918 547.629 cv
347.707 547.707 347.535 547.809 347.402 547.93 cv
347.266 548.055 347.164 548.199 347.098 548.371 cv
347.031 548.543 347 548.727 347 548.918 cv
347 549.203 347.063 549.445 347.191 549.645 cv
347.32 549.848 347.492 550.027 347.711 550.18 cv
347.922 550.34 348.168 550.48 348.445 550.609 cv
348.719 550.742 349 550.875 349.289 551.004 cv
349.574 551.137 349.855 551.281 350.129 551.437 cv
350.402 551.598 350.648 551.785 350.867 552 cv
351.082 552.219 351.254 552.473 351.391 552.766 cv
351.52 553.059 351.586 553.406 351.59 553.805 cv
cp
f
359.355 556.437 mo
359.352 556.484 359.344 556.52 359.328 556.543 cv
359.309 556.574 359.273 556.598 359.23 556.617 cv
359.184 556.637 359.125 556.648 359.051 556.664 cv
358.973 556.672 358.879 556.68 358.773 556.68 cv
358.648 556.68 358.551 556.672 358.48 556.664 cv
358.402 556.648 358.344 556.637 358.301 556.617 cv
358.254 556.598 358.223 556.574 358.211 556.543 cv
358.191 556.52 358.184 556.484 358.188 556.437 cv
358.188 555.512 li
357.785 555.957 357.391 556.277 357.004 556.477 cv
356.609 556.68 356.215 556.777 355.82 556.781 cv
355.348 556.777 354.953 556.703 354.637 556.547 cv
354.316 556.395 354.059 556.184 353.863 555.914 cv
353.66 555.648 353.52 555.336 353.438 554.977 cv
353.348 554.621 353.305 554.187 353.309 553.68 cv
353.309 549.426 li
353.305 549.387 353.313 549.352 353.336 549.32 cv
353.352 549.293 353.387 549.27 353.441 549.242 cv
353.488 549.223 353.559 549.207 353.645 549.195 cv
353.727 549.191 353.828 549.187 353.957 549.184 cv
354.078 549.187 354.184 549.191 354.27 549.195 cv
354.352 549.207 354.418 549.223 354.465 549.242 cv
354.512 549.27 354.547 549.293 354.57 549.32 cv
354.59 549.352 354.598 549.387 354.602 549.426 cv
354.602 553.508 li
354.598 553.922 354.629 554.25 354.691 554.496 cv
354.75 554.742 354.84 554.953 354.965 555.125 cv
355.082 555.305 355.238 555.437 355.43 555.531 cv
355.613 555.629 355.832 555.68 356.082 555.676 cv
356.402 555.68 356.723 555.562 357.047 555.332 cv
357.363 555.105 357.703 554.77 358.063 554.324 cv
358.063 549.426 li
358.063 549.387 358.07 549.352 358.09 549.32 cv
358.105 549.293 358.141 549.27 358.195 549.242 cv
358.246 549.223 358.313 549.207 358.395 549.195 cv
358.473 549.191 358.578 549.187 358.711 549.184 cv
358.832 549.187 358.938 549.191 359.023 549.195 cv
359.105 549.207 359.168 549.223 359.215 549.242 cv
359.258 549.27 359.293 549.293 359.32 549.32 cv
359.34 549.352 359.352 549.387 359.355 549.426 cv
cp
f
368.211 552.836 mo
368.207 553.445 368.141 553.996 368.012 554.48 cv
367.875 554.969 367.68 555.383 367.426 555.723 cv
367.168 556.066 366.852 556.328 366.48 556.508 cv
366.105 556.691 365.68 556.777 365.195 556.781 cv
364.969 556.777 364.762 556.758 364.574 556.715 cv
364.387 556.668 364.199 556.598 364.02 556.5 cv
363.832 556.402 363.652 556.277 363.473 556.125 cv
363.289 555.977 363.098 555.797 362.898 555.582 cv
362.898 556.437 li
362.898 556.484 362.887 556.52 362.867 556.547 cv
362.844 556.582 362.809 556.605 362.766 556.621 cv
362.715 556.637 362.656 556.648 362.59 556.664 cv
362.516 556.672 362.426 556.68 362.32 556.68 cv
362.211 556.68 362.125 556.672 362.055 556.664 cv
361.98 556.648 361.918 556.637 361.875 556.621 cv
361.824 556.605 361.793 556.582 361.781 556.547 cv
361.762 556.52 361.754 556.484 361.758 556.437 cv
361.758 546.027 li
361.754 545.988 361.766 545.953 361.785 545.918 cv
361.801 545.891 361.832 545.863 361.887 545.84 cv
361.934 545.82 362 545.805 362.086 545.793 cv
362.164 545.785 362.27 545.781 362.398 545.777 cv
362.527 545.781 362.633 545.785 362.719 545.793 cv
362.797 545.805 362.863 545.82 362.91 545.84 cv
362.957 545.863 362.988 545.891 363.012 545.918 cv
363.027 545.953 363.039 545.988 363.043 546.027 cv
363.043 550.227 li
363.25 550.016 363.453 549.836 363.648 549.691 cv
363.844 549.547 364.031 549.43 364.219 549.336 cv
364.402 549.25 364.59 549.184 364.781 549.137 cv
364.965 549.098 365.164 549.074 365.375 549.074 cv
365.879 549.074 366.313 549.176 366.68 549.379 cv
367.039 549.582 367.332 549.855 367.559 550.191 cv
367.781 550.535 367.949 550.934 368.055 551.391 cv
368.156 551.848 368.207 552.328 368.211 552.836 cv
cp
366.879 552.984 mo
366.875 552.629 366.848 552.281 366.797 551.941 cv
366.738 551.605 366.645 551.309 366.508 551.047 cv
366.371 550.789 366.191 550.578 365.969 550.418 cv
365.742 550.262 365.461 550.184 365.129 550.18 cv
364.961 550.184 364.797 550.207 364.637 550.25 cv
364.473 550.301 364.309 550.379 364.141 550.484 cv
363.973 550.598 363.797 550.738 363.621 550.906 cv
363.438 551.082 363.246 551.297 363.043 551.551 cv
363.043 554.348 li
363.398 554.781 363.738 555.113 364.063 555.336 cv
364.387 555.566 364.723 555.68 365.074 555.676 cv
365.395 555.68 365.672 555.602 365.906 555.441 cv
366.133 555.289 366.32 555.082 366.465 554.82 cv
366.609 554.566 366.715 554.277 366.781 553.957 cv
366.844 553.641 366.875 553.316 366.879 552.984 cv
cp
f
373.348 552.699 mo
373.348 552.902 373.324 553.039 373.277 553.117 cv
373.23 553.195 373.16 553.234 373.074 553.234 cv
369.816 553.234 li
369.723 553.234 369.656 553.195 369.609 553.113 cv
369.563 553.035 369.539 552.898 369.539 552.699 cv
369.539 552.504 369.563 552.363 369.609 552.285 cv
369.656 552.207 369.723 552.168 369.816 552.168 cv
373.074 552.168 li
373.113 552.168 373.152 552.176 373.188 552.191 cv
373.219 552.207 373.246 552.238 373.273 552.281 cv
373.293 552.328 373.313 552.383 373.328 552.449 cv
373.34 552.52 373.348 552.605 373.348 552.699 cv
cp
f
376.602 556.43 mo
376.598 556.473 376.59 556.508 376.57 556.539 cv
376.547 556.57 376.508 556.598 376.461 556.613 cv
376.406 556.633 376.34 556.645 376.254 556.66 cv
376.168 556.672 376.059 556.68 375.934 556.68 cv
375.805 556.68 375.699 556.672 375.613 556.66 cv
375.523 556.645 375.453 556.633 375.402 556.613 cv
375.348 556.598 375.313 556.57 375.293 556.539 cv
375.27 556.508 375.258 556.473 375.262 556.43 cv
375.262 546.75 li
375.258 546.711 375.27 546.676 375.297 546.641 cv
375.316 546.613 375.355 546.586 375.414 546.566 cv
375.465 546.551 375.535 546.535 375.625 546.52 cv
375.707 546.508 375.809 546.504 375.934 546.5 cv
376.059 546.504 376.168 546.508 376.254 546.52 cv
376.34 546.535 376.406 546.551 376.461 546.566 cv
376.508 546.586 376.547 546.613 376.57 546.641 cv
376.59 546.676 376.598 546.711 376.602 546.75 cv
cp
f
389.586 556.437 mo
389.582 556.484 389.574 556.52 389.555 556.543 cv
389.531 556.574 389.496 556.598 389.453 556.617 cv
389.402 556.637 389.336 556.648 389.258 556.664 cv
389.172 556.672 389.07 556.68 388.945 556.68 cv
388.813 556.68 388.703 556.672 388.625 556.664 cv
388.539 556.648 388.473 556.637 388.426 556.617 cv
388.371 556.598 388.336 556.574 388.32 556.543 cv
388.297 556.52 388.289 556.484 388.289 556.437 cv
388.289 552.176 li
388.289 551.883 388.262 551.613 388.211 551.367 cv
388.156 551.125 388.074 550.914 387.961 550.734 cv
387.848 550.559 387.703 550.422 387.527 550.328 cv
387.348 550.234 387.137 550.187 386.902 550.187 cv
386.605 550.187 386.309 550.305 386.012 550.531 cv
385.707 550.766 385.379 551.098 385.023 551.535 cv
385.023 556.437 li
385.02 556.484 385.008 556.52 384.992 556.543 cv
384.969 556.574 384.938 556.598 384.891 556.617 cv
384.84 556.637 384.773 556.648 384.691 556.664 cv
384.605 556.672 384.5 556.68 384.379 556.68 cv
384.258 556.68 384.156 556.672 384.07 556.664 cv
383.984 556.648 383.914 556.637 383.867 556.617 cv
383.813 556.598 383.781 556.574 383.766 556.543 cv
383.746 556.52 383.734 556.484 383.738 556.437 cv
383.738 552.176 li
383.734 551.883 383.707 551.613 383.652 551.367 cv
383.594 551.125 383.508 550.914 383.395 550.734 cv
383.281 550.559 383.137 550.422 382.965 550.328 cv
382.785 550.234 382.578 550.187 382.344 550.187 cv
382.043 550.187 381.746 550.305 381.445 550.531 cv
381.145 550.766 380.816 551.098 380.465 551.535 cv
380.465 556.437 li
380.461 556.484 380.449 556.52 380.434 556.543 cv
380.41 556.574 380.379 556.598 380.332 556.617 cv
380.285 556.637 380.219 556.648 380.141 556.664 cv
380.055 556.672 379.949 556.68 379.82 556.68 cv
379.691 556.68 379.586 556.672 379.508 556.664 cv
379.422 556.648 379.355 556.637 379.309 556.617 cv
379.254 556.598 379.223 556.574 379.207 556.543 cv
379.188 556.52 379.176 556.484 379.18 556.437 cv
379.18 549.426 li
379.176 549.387 379.184 549.352 379.203 549.32 cv
379.215 549.293 379.246 549.27 379.297 549.242 cv
379.34 549.223 379.402 549.207 379.477 549.195 cv
379.547 549.191 379.641 549.187 379.766 549.184 cv
379.875 549.187 379.973 549.191 380.051 549.195 cv
380.125 549.207 380.184 549.223 380.227 549.242 cv
380.266 549.27 380.293 549.293 380.313 549.32 cv
380.328 549.352 380.336 549.387 380.34 549.426 cv
380.34 550.352 li
380.73 549.91 381.113 549.59 381.488 549.383 cv
381.855 549.18 382.234 549.074 382.617 549.074 cv
382.906 549.074 383.164 549.109 383.398 549.176 cv
383.625 549.246 383.832 549.34 384.012 549.461 cv
384.188 549.582 384.336 549.727 384.465 549.895 cv
384.586 550.066 384.691 550.258 384.777 550.461 cv
385.008 550.211 385.23 549.996 385.441 549.816 cv
385.652 549.645 385.855 549.5 386.051 549.387 cv
386.246 549.281 386.434 549.203 386.617 549.148 cv
386.801 549.102 386.988 549.074 387.176 549.074 cv
387.629 549.074 388.008 549.156 388.313 549.312 cv
388.617 549.477 388.863 549.687 389.059 549.949 cv
389.246 550.215 389.383 550.523 389.465 550.879 cv
389.543 551.234 389.582 551.609 389.586 552.004 cv
cp
f
397.219 556.445 mo
397.215 556.508 397.195 556.555 397.156 556.586 cv
397.113 556.617 397.055 556.641 396.984 556.656 cv
396.906 556.672 396.801 556.68 396.664 556.68 cv
396.527 556.68 396.418 556.672 396.34 556.656 cv
396.254 556.641 396.195 556.617 396.164 556.586 cv
396.125 556.555 396.109 556.508 396.113 556.445 cv
396.113 555.746 li
395.805 556.074 395.461 556.328 395.086 556.508 cv
394.707 556.691 394.309 556.777 393.891 556.781 cv
393.516 556.777 393.184 556.73 392.887 556.637 cv
392.59 556.539 392.336 556.402 392.125 556.219 cv
391.914 556.039 391.75 555.816 391.633 555.551 cv
391.516 555.289 391.457 554.988 391.461 554.645 cv
391.457 554.254 391.535 553.91 391.699 553.617 cv
391.855 553.328 392.09 553.086 392.395 552.895 cv
392.695 552.703 393.063 552.559 393.5 552.461 cv
393.934 552.367 394.426 552.32 394.973 552.316 cv
395.941 552.316 li
395.941 551.77 li
395.938 551.5 395.91 551.262 395.855 551.055 cv
395.797 550.848 395.703 550.676 395.578 550.535 cv
395.445 550.398 395.281 550.293 395.082 550.223 cv
394.875 550.152 394.625 550.117 394.336 550.117 cv
394.016 550.117 393.73 550.156 393.48 550.23 cv
393.223 550.309 393.004 550.391 392.816 550.48 cv
392.629 550.574 392.469 550.66 392.344 550.73 cv
392.211 550.809 392.117 550.844 392.059 550.844 cv
392.016 550.844 391.98 550.836 391.949 550.812 cv
391.918 550.797 391.891 550.766 391.867 550.719 cv
391.844 550.68 391.824 550.625 391.816 550.559 cv
391.801 550.496 391.797 550.426 391.801 550.344 cv
391.797 550.219 391.805 550.113 391.828 550.035 cv
391.844 549.961 391.891 549.891 391.961 549.82 cv
392.031 549.754 392.152 549.676 392.324 549.586 cv
392.496 549.496 392.691 549.414 392.914 549.336 cv
393.137 549.266 393.383 549.203 393.648 549.148 cv
393.914 549.102 394.18 549.074 394.453 549.074 cv
394.953 549.074 395.383 549.133 395.734 549.246 cv
396.086 549.363 396.371 549.531 396.594 549.75 cv
396.809 549.973 396.969 550.246 397.07 550.57 cv
397.168 550.902 397.215 551.285 397.219 551.715 cv
cp
395.941 553.242 mo
394.84 553.242 li
394.484 553.246 394.18 553.277 393.922 553.332 cv
393.66 553.395 393.445 553.48 393.273 553.598 cv
393.102 553.715 392.977 553.855 392.898 554.02 cv
392.816 554.184 392.773 554.371 392.777 554.582 cv
392.773 554.949 392.891 555.242 393.121 555.453 cv
393.352 555.672 393.676 555.777 394.094 555.777 cv
394.43 555.777 394.742 555.691 395.031 555.52 cv
395.32 555.348 395.621 555.086 395.941 554.73 cv
cp
f
405.438 549.742 mo
405.434 549.926 405.41 550.059 405.363 550.137 cv
405.313 550.219 405.25 550.258 405.176 550.258 cv
404.168 550.258 li
404.348 550.445 404.477 550.652 404.551 550.879 cv
404.621 551.105 404.656 551.34 404.66 551.582 cv
404.656 551.988 404.59 552.348 404.465 552.66 cv
404.332 552.973 404.148 553.238 403.906 553.449 cv
403.664 553.668 403.375 553.832 403.047 553.945 cv
402.711 554.062 402.344 554.121 401.941 554.117 cv
401.652 554.121 401.379 554.082 401.125 554.004 cv
400.863 553.93 400.668 553.836 400.531 553.719 cv
400.438 553.816 400.359 553.922 400.301 554.039 cv
400.238 554.16 400.207 554.297 400.211 554.449 cv
400.207 554.633 400.293 554.785 400.465 554.902 cv
400.633 555.027 400.855 555.09 401.137 555.098 cv
402.969 555.176 li
403.316 555.187 403.633 555.234 403.926 555.32 cv
404.215 555.406 404.469 555.531 404.684 555.687 cv
404.895 555.848 405.063 556.039 405.184 556.27 cv
405.301 556.504 405.359 556.773 405.363 557.078 cv
405.359 557.398 405.293 557.703 405.16 557.996 cv
405.023 558.285 404.816 558.539 404.539 558.762 cv
404.258 558.98 403.902 559.156 403.473 559.285 cv
403.043 559.41 402.535 559.473 401.949 559.477 cv
401.379 559.473 400.895 559.426 400.5 559.332 cv
400.102 559.234 399.777 559.102 399.523 558.937 cv
399.27 558.77 399.086 558.574 398.973 558.344 cv
398.855 558.109 398.797 557.855 398.801 557.59 cv
398.797 557.418 398.816 557.254 398.863 557.094 cv
398.902 556.93 398.965 556.777 399.051 556.633 cv
399.133 556.488 399.242 556.352 399.371 556.215 cv
399.496 556.086 399.641 555.953 399.813 555.824 cv
399.555 555.695 399.367 555.531 399.246 555.332 cv
399.125 555.137 399.066 554.926 399.066 554.691 cv
399.066 554.379 399.129 554.094 399.258 553.844 cv
399.387 553.594 399.547 553.371 399.742 553.172 cv
399.578 552.98 399.453 552.766 399.359 552.523 cv
399.266 552.285 399.219 551.992 399.219 551.645 cv
399.219 551.25 399.285 550.891 399.422 550.57 cv
399.555 550.254 399.742 549.988 399.984 549.77 cv
400.223 549.555 400.508 549.387 400.844 549.266 cv
401.176 549.152 401.543 549.094 401.941 549.09 cv
402.152 549.094 402.352 549.105 402.535 549.125 cv
402.719 549.152 402.891 549.184 403.055 549.223 cv
405.176 549.223 li
405.262 549.227 405.328 549.27 405.371 549.352 cv
405.414 549.441 405.434 549.57 405.438 549.742 cv
cp
403.43 551.59 mo
403.426 551.117 403.293 550.746 403.035 550.473 cv
402.77 550.207 402.398 550.07 401.918 550.07 cv
401.664 550.07 401.445 550.113 401.266 550.195 cv
401.078 550.281 400.926 550.395 400.805 550.539 cv
400.684 550.687 400.594 550.855 400.535 551.043 cv
400.473 551.23 400.441 551.43 400.445 551.637 cv
400.441 552.102 400.574 552.465 400.836 552.73 cv
401.098 552.996 401.465 553.129 401.941 553.125 cv
402.191 553.129 402.41 553.09 402.602 553.004 cv
402.785 552.926 402.941 552.812 403.066 552.672 cv
403.188 552.531 403.277 552.367 403.34 552.176 cv
403.395 551.992 403.426 551.797 403.43 551.59 cv
cp
404.074 557.148 mo
404.07 556.844 403.945 556.613 403.703 556.449 cv
403.453 556.289 403.121 556.199 402.703 556.187 cv
400.887 556.125 li
400.719 556.258 400.582 556.383 400.48 556.496 cv
400.371 556.613 400.289 556.723 400.227 556.832 cv
400.164 556.937 400.121 557.043 400.098 557.148 cv
400.074 557.25 400.063 557.355 400.063 557.465 cv
400.063 557.801 400.23 558.055 400.574 558.234 cv
400.914 558.406 401.395 558.496 402.012 558.496 cv
402.398 558.496 402.723 558.457 402.988 558.383 cv
403.246 558.305 403.457 558.203 403.621 558.082 cv
403.777 557.953 403.895 557.812 403.969 557.652 cv
404.035 557.492 404.07 557.324 404.074 557.148 cv
cp
f
413 552.629 mo
412.996 552.832 412.945 552.973 412.848 553.059 cv
412.742 553.145 412.625 553.187 412.5 553.187 cv
407.883 553.187 li
407.879 553.578 407.918 553.93 408 554.242 cv
408.074 554.555 408.207 554.824 408.391 555.043 cv
408.57 555.27 408.805 555.441 409.102 555.559 cv
409.391 555.684 409.75 555.742 410.176 555.738 cv
410.508 555.742 410.805 555.715 411.066 555.656 cv
411.328 555.605 411.555 555.543 411.746 555.473 cv
411.934 555.406 412.09 555.348 412.215 555.289 cv
412.336 555.238 412.43 555.211 412.492 555.207 cv
412.527 555.211 412.559 555.219 412.59 555.234 cv
412.617 555.254 412.641 555.281 412.66 555.316 cv
412.672 555.355 412.684 555.406 412.695 555.469 cv
412.699 555.535 412.703 555.613 412.707 555.707 cv
412.703 555.777 412.699 555.836 412.699 555.883 cv
412.691 555.93 412.688 555.973 412.68 556.012 cv
412.672 556.051 412.656 556.086 412.641 556.117 cv
412.617 556.148 412.594 556.18 412.57 556.207 cv
412.539 556.238 412.457 556.285 412.316 556.348 cv
412.176 556.414 411.992 556.477 411.77 556.539 cv
411.543 556.602 411.285 556.656 410.992 556.707 cv
410.699 556.754 410.387 556.777 410.055 556.781 cv
409.477 556.777 408.969 556.699 408.539 556.539 cv
408.102 556.379 407.738 556.141 407.445 555.824 cv
407.145 555.508 406.922 555.113 406.773 554.633 cv
406.625 554.156 406.551 553.598 406.551 552.961 cv
406.551 552.363 406.625 551.824 406.781 551.34 cv
406.934 550.863 407.16 550.453 407.457 550.117 cv
407.75 549.781 408.105 549.523 408.52 549.344 cv
408.934 549.164 409.398 549.074 409.914 549.074 cv
410.465 549.074 410.934 549.164 411.32 549.34 cv
411.707 549.52 412.023 549.758 412.277 550.055 cv
412.523 550.355 412.707 550.707 412.824 551.105 cv
412.938 551.512 412.996 551.941 413 552.395 cv
cp
411.707 552.246 mo
411.723 551.57 411.57 551.039 411.254 550.656 cv
410.938 550.273 410.469 550.082 409.852 550.078 cv
409.527 550.082 409.246 550.141 409.008 550.258 cv
408.766 550.379 408.566 550.539 408.406 550.734 cv
408.242 550.934 408.117 551.164 408.031 551.426 cv
407.941 551.687 407.891 551.961 407.883 552.246 cv
cp
f
419.367 554.527 mo
419.363 554.891 419.297 555.211 419.168 555.488 cv
419.035 555.77 418.848 556.004 418.605 556.195 cv
418.359 556.391 418.066 556.535 417.73 556.633 cv
417.391 556.73 417.02 556.777 416.617 556.781 cv
416.363 556.777 416.125 556.758 415.902 556.723 cv
415.676 556.68 415.477 556.633 415.297 556.574 cv
415.117 556.516 414.965 556.453 414.84 556.387 cv
414.715 556.324 414.621 556.266 414.566 556.211 cv
414.508 556.16 414.469 556.09 414.445 555.992 cv
414.418 555.902 414.406 555.773 414.406 555.613 cv
414.406 555.516 414.41 555.434 414.422 555.363 cv
414.43 555.297 414.441 555.242 414.461 555.199 cv
414.473 555.16 414.496 555.129 414.523 555.109 cv
414.551 555.094 414.582 555.086 414.621 555.082 cv
414.676 555.086 414.762 555.121 414.875 555.187 cv
414.984 555.262 415.121 555.34 415.289 555.418 cv
415.449 555.504 415.641 555.578 415.867 555.648 cv
416.086 555.719 416.344 555.754 416.641 555.754 cv
416.855 555.754 417.055 555.73 417.234 555.684 cv
417.41 555.637 417.563 555.57 417.691 555.477 cv
417.82 555.391 417.922 555.273 417.992 555.129 cv
418.063 554.992 418.098 554.824 418.098 554.629 cv
418.098 554.434 418.047 554.27 417.945 554.133 cv
417.844 554 417.707 553.879 417.543 553.773 cv
417.375 553.672 417.191 553.582 416.984 553.496 cv
416.773 553.418 416.559 553.332 416.34 553.242 cv
416.121 553.156 415.906 553.055 415.695 552.941 cv
415.484 552.832 415.293 552.699 415.129 552.535 cv
414.957 552.379 414.824 552.184 414.727 551.957 cv
414.621 551.734 414.57 551.469 414.574 551.156 cv
414.57 550.883 414.625 550.617 414.734 550.363 cv
414.84 550.113 415 549.895 415.215 549.703 cv
415.426 549.516 415.691 549.363 416.012 549.246 cv
416.332 549.133 416.703 549.074 417.133 549.074 cv
417.316 549.074 417.504 549.09 417.691 549.121 cv
417.875 549.152 418.043 549.191 418.199 549.238 cv
418.348 549.285 418.477 549.336 418.586 549.391 cv
418.688 549.445 418.77 549.496 418.828 549.535 cv
418.879 549.582 418.914 549.617 418.938 549.645 cv
418.953 549.676 418.969 549.711 418.977 549.746 cv
418.984 549.789 418.992 549.836 419 549.891 cv
419.008 549.949 419.012 550.02 419.012 550.102 cv
419.012 550.191 419.008 550.27 419 550.332 cv
418.992 550.402 418.977 550.453 418.961 550.492 cv
418.938 550.535 418.918 550.566 418.895 550.582 cv
418.867 550.602 418.836 550.609 418.809 550.609 cv
418.758 550.609 418.691 550.582 418.605 550.523 cv
418.516 550.469 418.402 550.406 418.262 550.34 cv
418.121 550.277 417.953 550.219 417.766 550.156 cv
417.574 550.102 417.359 550.07 417.117 550.07 cv
416.895 550.07 416.703 550.098 416.539 550.145 cv
416.371 550.199 416.234 550.27 416.129 550.355 cv
416.023 550.449 415.941 550.555 415.891 550.68 cv
415.832 550.805 415.805 550.941 415.809 551.086 cv
415.805 551.289 415.855 551.457 415.961 551.594 cv
416.063 551.734 416.199 551.855 416.367 551.957 cv
416.531 552.062 416.723 552.156 416.938 552.238 cv
417.148 552.324 417.363 552.41 417.586 552.496 cv
417.805 552.586 418.023 552.687 418.242 552.793 cv
418.457 552.902 418.648 553.031 418.816 553.187 cv
418.98 553.344 419.113 553.531 419.215 553.75 cv
419.313 553.969 419.363 554.23 419.367 554.527 cv
cp
f
208.625 10.359 mo
208.625 10.926 208.535 11.43 208.359 11.863 cv
208.18 12.301 207.922 12.668 207.586 12.965 cv
207.246 13.27 206.832 13.496 206.344 13.648 cv
205.852 13.805 205.273 13.883 204.609 13.879 cv
203.77 13.879 li
203.77 17.098 li
203.766 17.152 203.75 17.199 203.719 17.238 cv
203.684 17.281 203.629 17.316 203.551 17.34 cv
203.473 17.367 203.367 17.387 203.238 17.402 cv
203.105 17.418 202.941 17.426 202.742 17.426 cv
202.543 17.426 202.375 17.418 202.246 17.402 cv
202.109 17.387 202.004 17.367 201.93 17.34 cv
201.848 17.316 201.793 17.281 201.766 17.238 cv
201.73 17.199 201.715 17.152 201.719 17.098 cv
201.719 8.02698 li
201.715 7.78497 201.781 7.60199 201.91 7.47699 cv
202.035 7.35498 202.203 7.297 202.414 7.29303 cv
204.789 7.29303 li
205.023 7.297 205.254 7.30499 205.473 7.32001 cv
205.688 7.34003 205.945 7.37903 206.246 7.43701 cv
206.547 7.5 206.852 7.60901 207.164 7.77002 cv
207.473 7.93402 207.734 8.14099 207.953 8.383 cv
208.168 8.633 208.336 8.922 208.453 9.25 cv
208.566 9.58197 208.625 9.94897 208.625 10.359 cv
cp
206.48 10.504 mo
206.48 10.156 206.418 9.86298 206.293 9.633 cv
206.168 9.40601 206.012 9.23798 205.832 9.125 cv
205.648 9.02002 205.461 8.94897 205.262 8.91803 cv
205.059 8.89099 204.852 8.87903 204.641 8.875 cv
203.77 8.875 li
203.77 12.297 li
204.688 12.297 li
205.016 12.301 205.289 12.254 205.512 12.164 cv
205.73 12.078 205.91 11.957 206.051 11.797 cv
206.188 11.641 206.293 11.449 206.371 11.227 cv
206.441 11.008 206.48 10.77 206.48 10.504 cv
cp
f
214.559 10.809 mo
214.559 11 214.551 11.152 214.543 11.27 cv
214.527 11.391 214.512 11.484 214.496 11.551 cv
214.473 11.621 214.445 11.668 214.414 11.691 cv
214.375 11.719 214.332 11.73 214.285 11.73 cv
214.238 11.73 214.191 11.723 214.145 11.703 cv
214.09 11.687 214.031 11.668 213.969 11.645 cv
213.898 11.625 213.828 11.605 213.754 11.586 cv
213.672 11.57 213.586 11.562 213.496 11.559 cv
213.383 11.562 213.273 11.582 213.168 11.625 cv
213.059 11.672 212.945 11.742 212.832 11.832 cv
212.711 11.926 212.59 12.051 212.465 12.203 cv
212.336 12.363 212.199 12.555 212.055 12.781 cv
212.055 17.113 li
212.051 17.168 212.035 17.211 212.008 17.25 cv
211.973 17.289 211.918 17.324 211.848 17.348 cv
211.77 17.375 211.672 17.391 211.547 17.406 cv
211.422 17.418 211.262 17.426 211.074 17.426 cv
210.879 17.426 210.723 17.418 210.598 17.406 cv
210.473 17.391 210.371 17.375 210.297 17.348 cv
210.219 17.324 210.164 17.289 210.137 17.25 cv
210.102 17.211 210.086 17.168 210.09 17.113 cv
210.09 10.164 li
210.086 10.117 210.102 10.07 210.129 10.027 cv
210.152 9.992 210.199 9.961 210.27 9.92999 cv
210.336 9.90601 210.422 9.88702 210.531 9.87097 cv
210.637 9.86298 210.77 9.85498 210.934 9.85199 cv
211.098 9.85498 211.234 9.86298 211.344 9.87097 cv
211.449 9.88702 211.535 9.90601 211.598 9.92999 cv
211.656 9.961 211.699 9.992 211.727 10.027 cv
211.75 10.07 211.762 10.117 211.766 10.164 cv
211.766 11.027 li
211.945 10.77 212.117 10.559 212.281 10.387 cv
212.438 10.223 212.594 10.086 212.742 9.98401 cv
212.887 9.88702 213.031 9.82001 213.176 9.77698 cv
213.32 9.742 213.465 9.72302 213.613 9.71899 cv
213.68 9.72302 213.754 9.72699 213.832 9.72998 cv
213.91 9.742 213.988 9.75403 214.074 9.77002 cv
214.152 9.789 214.227 9.80902 214.293 9.83197 cv
214.352 9.85498 214.398 9.883 214.43 9.90601 cv
214.457 9.93701 214.477 9.96503 214.492 9.992 cv
214.504 10.027 214.516 10.07 214.527 10.121 cv
214.535 10.18 214.543 10.262 214.551 10.367 cv
214.555 10.477 214.559 10.625 214.559 10.809 cv
cp
f
222.066 13.437 mo
222.063 13.676 222.012 13.852 221.906 13.965 cv
221.797 14.082 221.648 14.141 221.469 14.137 cv
217.234 14.137 li
217.23 14.437 217.266 14.707 217.34 14.945 cv
217.406 15.187 217.52 15.391 217.676 15.559 cv
217.828 15.73 218.023 15.859 218.266 15.945 cv
218.504 16.035 218.793 16.078 219.137 16.078 cv
219.477 16.078 219.777 16.055 220.039 16.004 cv
220.297 15.957 220.523 15.902 220.715 15.84 cv
220.902 15.781 221.059 15.727 221.188 15.676 cv
221.309 15.629 221.41 15.605 221.492 15.602 cv
221.535 15.605 221.574 15.613 221.609 15.629 cv
221.637 15.648 221.664 15.68 221.684 15.727 cv
221.703 15.773 221.715 15.84 221.727 15.926 cv
221.73 16.012 221.734 16.121 221.738 16.25 cv
221.734 16.367 221.734 16.465 221.73 16.543 cv
221.723 16.625 221.715 16.691 221.707 16.746 cv
221.695 16.805 221.68 16.855 221.66 16.891 cv
221.641 16.934 221.613 16.969 221.582 17.004 cv
221.547 17.043 221.453 17.094 221.305 17.152 cv
221.148 17.219 220.957 17.281 220.727 17.336 cv
220.488 17.398 220.219 17.445 219.922 17.492 cv
219.617 17.531 219.297 17.555 218.957 17.559 cv
218.336 17.555 217.793 17.48 217.332 17.324 cv
216.863 17.172 216.477 16.934 216.168 16.617 cv
215.852 16.301 215.617 15.902 215.469 15.418 cv
215.313 14.937 215.238 14.371 215.242 13.715 cv
215.238 13.102 215.316 12.543 215.48 12.047 cv
215.637 11.551 215.871 11.133 216.184 10.785 cv
216.488 10.441 216.863 10.176 217.301 9.992 cv
217.738 9.81201 218.23 9.72302 218.785 9.71899 cv
219.363 9.72302 219.863 9.80902 220.277 9.97699 cv
220.691 10.152 221.027 10.391 221.293 10.691 cv
221.555 10.996 221.75 11.355 221.879 11.77 cv
222 12.187 222.063 12.637 222.066 13.125 cv
cp
220.164 12.875 mo
220.176 12.324 220.066 11.891 219.832 11.578 cv
219.598 11.266 219.23 11.109 218.738 11.105 cv
218.488 11.109 218.273 11.156 218.09 11.246 cv
217.902 11.344 217.75 11.469 217.629 11.625 cv
217.504 11.785 217.41 11.973 217.348 12.187 cv
217.281 12.402 217.242 12.633 217.234 12.875 cv
cp
f
230.672 13.535 mo
230.672 14.156 230.605 14.715 230.473 15.211 cv
230.34 15.707 230.145 16.129 229.891 16.477 cv
229.637 16.824 229.32 17.094 228.941 17.277 cv
228.559 17.465 228.125 17.555 227.641 17.559 cv
227.434 17.555 227.246 17.535 227.082 17.5 cv
226.91 17.457 226.746 17.398 226.59 17.32 cv
226.43 17.242 226.273 17.145 226.121 17.02 cv
225.961 16.902 225.801 16.762 225.637 16.598 cv
225.637 19.871 li
225.633 19.918 225.617 19.965 225.59 20.012 cv
225.555 20.051 225.5 20.086 225.43 20.117 cv
225.352 20.141 225.254 20.164 225.129 20.184 cv
225.004 20.195 224.844 20.203 224.656 20.207 cv
224.461 20.203 224.305 20.195 224.18 20.184 cv
224.055 20.164 223.953 20.141 223.879 20.117 cv
223.801 20.086 223.746 20.051 223.719 20.012 cv
223.684 19.965 223.668 19.918 223.672 19.871 cv
223.672 10.164 li
223.668 10.117 223.684 10.07 223.711 10.027 cv
223.734 9.992 223.777 9.961 223.848 9.92999 cv
223.91 9.90601 223.996 9.88702 224.105 9.87097 cv
224.207 9.86298 224.344 9.85498 224.508 9.85199 cv
224.664 9.85498 224.793 9.86298 224.898 9.87097 cv
225.004 9.88702 225.09 9.90601 225.156 9.92999 cv
225.219 9.961 225.266 9.992 225.293 10.027 cv
225.316 10.07 225.328 10.117 225.332 10.164 cv
225.332 10.98 li
225.531 10.773 225.73 10.594 225.93 10.434 cv
226.121 10.277 226.32 10.145 226.523 10.035 cv
226.727 9.93402 226.934 9.85199 227.152 9.797 cv
227.363 9.74597 227.594 9.72302 227.844 9.71899 cv
228.348 9.72302 228.781 9.82001 229.145 10.02 cv
229.5 10.223 229.793 10.5 230.02 10.844 cv
230.242 11.195 230.406 11.598 230.516 12.059 cv
230.617 12.52 230.672 13.012 230.672 13.535 cv
cp
228.629 13.676 mo
228.625 13.383 228.605 13.102 228.563 12.824 cv
228.516 12.555 228.438 12.312 228.336 12.098 cv
228.227 11.887 228.086 11.715 227.914 11.586 cv
227.738 11.461 227.523 11.398 227.266 11.395 cv
227.133 11.398 227.004 11.418 226.879 11.453 cv
226.75 11.496 226.621 11.559 226.488 11.645 cv
226.355 11.734 226.219 11.848 226.082 11.988 cv
225.938 12.129 225.789 12.305 225.637 12.508 cv
225.637 14.801 li
225.91 15.148 226.172 15.418 226.422 15.605 cv
226.668 15.797 226.93 15.891 227.203 15.891 cv
227.457 15.891 227.672 15.828 227.855 15.695 cv
228.031 15.57 228.18 15.398 228.293 15.187 cv
228.406 14.977 228.488 14.738 228.547 14.473 cv
228.598 14.207 228.625 13.941 228.629 13.676 cv
cp
f
238.168 17.137 mo
238.164 17.215 238.137 17.27 238.09 17.309 cv
238.035 17.352 237.953 17.379 237.844 17.398 cv
237.727 17.414 237.563 17.426 237.348 17.426 cv
237.109 17.426 236.938 17.414 236.836 17.398 cv
236.727 17.379 236.652 17.352 236.613 17.309 cv
236.566 17.27 236.547 17.215 236.547 17.137 cv
236.547 16.586 li
236.258 16.895 235.93 17.133 235.566 17.301 cv
235.199 17.473 234.793 17.555 234.348 17.559 cv
233.977 17.555 233.637 17.508 233.328 17.414 cv
233.02 17.32 232.754 17.18 232.527 16.984 cv
232.301 16.797 232.125 16.562 232 16.281 cv
231.875 16.004 231.813 15.676 231.816 15.297 cv
231.813 14.898 231.891 14.547 232.051 14.242 cv
232.207 13.945 232.445 13.699 232.762 13.504 cv
233.074 13.312 233.465 13.168 233.934 13.07 cv
234.402 12.98 234.945 12.934 235.563 12.93 cv
236.242 12.93 li
236.242 12.508 li
236.242 12.293 236.219 12.102 236.176 11.937 cv
236.129 11.777 236.055 11.641 235.957 11.527 cv
235.852 11.422 235.719 11.34 235.551 11.285 cv
235.379 11.234 235.168 11.211 234.926 11.207 cv
234.594 11.211 234.301 11.246 234.047 11.316 cv
233.785 11.391 233.559 11.473 233.363 11.559 cv
233.164 11.652 233 11.73 232.871 11.801 cv
232.734 11.875 232.625 11.914 232.547 11.91 cv
232.484 11.914 232.434 11.895 232.395 11.855 cv
232.348 11.82 232.313 11.77 232.285 11.699 cv
232.254 11.637 232.23 11.551 232.219 11.449 cv
232.199 11.352 232.191 11.242 232.195 11.121 cv
232.191 10.961 232.207 10.836 232.234 10.738 cv
232.258 10.648 232.305 10.562 232.383 10.484 cv
232.453 10.41 232.582 10.328 232.766 10.238 cv
232.945 10.148 233.156 10.062 233.402 9.98401 cv
233.645 9.90601 233.914 9.84399 234.203 9.79303 cv
234.492 9.74597 234.789 9.72302 235.098 9.71899 cv
235.641 9.72302 236.105 9.77301 236.492 9.87903 cv
236.879 9.98798 237.199 10.152 237.449 10.371 cv
237.699 10.59 237.879 10.875 237.996 11.223 cv
238.105 11.574 238.164 11.988 238.168 12.461 cv
cp
236.242 14.16 mo
235.492 14.16 li
235.176 14.164 234.906 14.187 234.684 14.23 cv
234.457 14.281 234.273 14.352 234.137 14.441 cv
233.992 14.539 233.891 14.652 233.828 14.781 cv
233.762 14.918 233.727 15.066 233.73 15.234 cv
233.727 15.527 233.82 15.758 234.008 15.922 cv
234.191 16.09 234.449 16.172 234.777 16.172 cv
235.051 16.172 235.301 16.102 235.535 15.961 cv
235.762 15.82 236 15.617 236.242 15.344 cv
cp
f
244.598 10.809 mo
244.598 11 244.59 11.152 244.582 11.27 cv
244.566 11.391 244.551 11.484 244.535 11.551 cv
244.512 11.621 244.484 11.668 244.453 11.691 cv
244.414 11.719 244.371 11.73 244.324 11.73 cv
244.277 11.73 244.23 11.723 244.184 11.703 cv
244.129 11.687 244.07 11.668 244.008 11.645 cv
243.938 11.625 243.867 11.605 243.793 11.586 cv
243.711 11.57 243.625 11.562 243.535 11.559 cv
243.422 11.562 243.313 11.582 243.207 11.625 cv
243.098 11.672 242.984 11.742 242.871 11.832 cv
242.75 11.926 242.629 12.051 242.504 12.203 cv
242.375 12.363 242.238 12.555 242.094 12.781 cv
242.094 17.113 li
242.09 17.168 242.074 17.211 242.047 17.25 cv
242.012 17.289 241.957 17.324 241.887 17.348 cv
241.809 17.375 241.711 17.391 241.586 17.406 cv
241.461 17.418 241.301 17.426 241.113 17.426 cv
240.918 17.426 240.762 17.418 240.637 17.406 cv
240.512 17.391 240.41 17.375 240.336 17.348 cv
240.258 17.324 240.203 17.289 240.176 17.25 cv
240.141 17.211 240.125 17.168 240.129 17.113 cv
240.129 10.164 li
240.125 10.117 240.141 10.07 240.168 10.027 cv
240.191 9.992 240.238 9.961 240.309 9.92999 cv
240.375 9.90601 240.461 9.88702 240.57 9.87097 cv
240.676 9.86298 240.809 9.85498 240.973 9.85199 cv
241.137 9.85498 241.273 9.86298 241.383 9.87097 cv
241.488 9.88702 241.574 9.90601 241.637 9.92999 cv
241.695 9.961 241.738 9.992 241.766 10.027 cv
241.789 10.07 241.801 10.117 241.805 10.164 cv
241.805 11.027 li
241.984 10.77 242.156 10.559 242.32 10.387 cv
242.477 10.223 242.633 10.086 242.781 9.98401 cv
242.926 9.88702 243.07 9.82001 243.215 9.77698 cv
243.359 9.742 243.504 9.72302 243.652 9.71899 cv
243.719 9.72302 243.793 9.72699 243.871 9.72998 cv
243.949 9.742 244.027 9.75403 244.113 9.77002 cv
244.191 9.789 244.266 9.80902 244.332 9.83197 cv
244.391 9.85498 244.438 9.883 244.469 9.90601 cv
244.496 9.93701 244.516 9.96503 244.531 9.992 cv
244.543 10.027 244.555 10.07 244.566 10.121 cv
244.574 10.18 244.582 10.262 244.59 10.367 cv
244.594 10.477 244.598 10.625 244.598 10.809 cv
cp
f
251.336 17.137 mo
251.332 17.215 251.305 17.27 251.258 17.309 cv
251.203 17.352 251.121 17.379 251.012 17.398 cv
250.895 17.414 250.73 17.426 250.516 17.426 cv
250.277 17.426 250.105 17.414 250.004 17.398 cv
249.895 17.379 249.82 17.352 249.781 17.309 cv
249.734 17.27 249.715 17.215 249.715 17.137 cv
249.715 16.586 li
249.426 16.895 249.098 17.133 248.734 17.301 cv
248.367 17.473 247.961 17.555 247.516 17.559 cv
247.145 17.555 246.805 17.508 246.496 17.414 cv
246.188 17.32 245.922 17.18 245.695 16.984 cv
245.469 16.797 245.293 16.562 245.168 16.281 cv
245.043 16.004 244.98 15.676 244.984 15.297 cv
244.98 14.898 245.059 14.547 245.219 14.242 cv
245.375 13.945 245.613 13.699 245.93 13.504 cv
246.242 13.312 246.633 13.168 247.102 13.07 cv
247.57 12.98 248.113 12.934 248.73 12.93 cv
249.41 12.93 li
249.41 12.508 li
249.41 12.293 249.387 12.102 249.344 11.937 cv
249.297 11.777 249.223 11.641 249.125 11.527 cv
249.02 11.422 248.887 11.34 248.719 11.285 cv
248.547 11.234 248.336 11.211 248.094 11.207 cv
247.762 11.211 247.469 11.246 247.215 11.316 cv
246.953 11.391 246.727 11.473 246.531 11.559 cv
246.332 11.652 246.168 11.73 246.039 11.801 cv
245.902 11.875 245.793 11.914 245.715 11.91 cv
245.652 11.914 245.602 11.895 245.563 11.855 cv
245.516 11.82 245.48 11.77 245.453 11.699 cv
245.422 11.637 245.398 11.551 245.387 11.449 cv
245.367 11.352 245.359 11.242 245.363 11.121 cv
245.359 10.961 245.375 10.836 245.402 10.738 cv
245.426 10.648 245.473 10.562 245.551 10.484 cv
245.621 10.41 245.75 10.328 245.934 10.238 cv
246.113 10.148 246.324 10.062 246.57 9.98401 cv
246.813 9.90601 247.082 9.84399 247.371 9.79303 cv
247.66 9.74597 247.957 9.72302 248.266 9.71899 cv
248.809 9.72302 249.273 9.77301 249.66 9.87903 cv
250.047 9.98798 250.367 10.152 250.617 10.371 cv
250.867 10.59 251.047 10.875 251.164 11.223 cv
251.273 11.574 251.332 11.988 251.336 12.461 cv
cp
249.41 14.16 mo
248.66 14.16 li
248.344 14.164 248.074 14.187 247.852 14.23 cv
247.625 14.281 247.441 14.352 247.305 14.441 cv
247.16 14.539 247.059 14.652 246.996 14.781 cv
246.93 14.918 246.895 15.066 246.898 15.234 cv
246.895 15.527 246.988 15.758 247.176 15.922 cv
247.359 16.09 247.617 16.172 247.945 16.172 cv
248.219 16.172 248.469 16.102 248.703 15.961 cv
248.93 15.82 249.168 15.617 249.41 15.344 cv
cp
f
257.332 16.43 mo
257.332 16.656 257.316 16.832 257.289 16.953 cv
257.258 17.078 257.219 17.164 257.176 17.211 cv
257.125 17.262 257.059 17.305 256.969 17.344 cv
256.875 17.383 256.766 17.414 256.648 17.445 cv
256.523 17.469 256.391 17.492 256.25 17.512 cv
256.105 17.523 255.965 17.531 255.82 17.535 cv
255.43 17.531 255.09 17.48 254.805 17.387 cv
254.52 17.285 254.285 17.137 254.098 16.93 cv
253.91 16.727 253.77 16.469 253.684 16.156 cv
253.59 15.848 253.547 15.477 253.551 15.047 cv
253.551 11.488 li
252.719 11.488 li
252.617 11.492 252.543 11.43 252.492 11.305 cv
252.438 11.184 252.41 10.98 252.414 10.691 cv
252.41 10.543 252.418 10.414 252.434 10.312 cv
252.445 10.211 252.465 10.129 252.492 10.066 cv
252.516 10.008 252.547 9.96503 252.59 9.93701 cv
252.625 9.914 252.672 9.90198 252.727 9.89801 cv
253.551 9.89801 li
253.551 8.34802 li
253.547 8.30103 253.563 8.25403 253.594 8.20697 cv
253.621 8.16803 253.672 8.133 253.75 8.10199 cv
253.824 8.078 253.926 8.05499 254.055 8.039 cv
254.18 8.02698 254.336 8.02301 254.527 8.02002 cv
254.715 8.02301 254.875 8.02698 255.004 8.039 cv
255.129 8.05499 255.23 8.078 255.305 8.10199 cv
255.375 8.133 255.426 8.16803 255.461 8.20697 cv
255.488 8.25403 255.504 8.30103 255.508 8.34802 cv
255.508 9.89801 li
257.02 9.89801 li
257.07 9.90198 257.117 9.914 257.156 9.93701 cv
257.195 9.96503 257.227 10.008 257.254 10.066 cv
257.277 10.129 257.297 10.211 257.313 10.312 cv
257.324 10.414 257.332 10.543 257.332 10.691 cv
257.332 10.98 257.305 11.184 257.254 11.305 cv
257.199 11.43 257.125 11.492 257.027 11.488 cv
255.508 11.488 li
255.508 14.754 li
255.504 15.133 255.563 15.418 255.688 15.605 cv
255.805 15.797 256.02 15.891 256.324 15.891 cv
256.426 15.891 256.52 15.883 256.605 15.863 cv
256.688 15.848 256.762 15.828 256.828 15.801 cv
256.891 15.781 256.945 15.758 256.992 15.738 cv
257.035 15.723 257.074 15.715 257.113 15.711 cv
257.141 15.715 257.172 15.723 257.203 15.738 cv
257.23 15.758 257.25 15.797 257.27 15.848 cv
257.281 15.906 257.297 15.98 257.313 16.07 cv
257.324 16.168 257.332 16.285 257.332 16.43 cv
cp
f
260.719 17.113 mo
260.715 17.168 260.699 17.211 260.672 17.25 cv
260.637 17.289 260.582 17.324 260.512 17.348 cv
260.434 17.375 260.336 17.391 260.211 17.406 cv
260.086 17.418 259.926 17.426 259.738 17.426 cv
259.543 17.426 259.387 17.418 259.262 17.406 cv
259.137 17.391 259.035 17.375 258.961 17.348 cv
258.883 17.324 258.828 17.289 258.801 17.25 cv
258.766 17.211 258.75 17.168 258.754 17.113 cv
258.754 10.18 li
258.75 10.129 258.766 10.082 258.801 10.043 cv
258.828 10.004 258.883 9.97302 258.961 9.94098 cv
259.035 9.91803 259.137 9.89502 259.262 9.875 cv
259.387 9.86298 259.543 9.85498 259.738 9.85199 cv
259.926 9.85498 260.086 9.86298 260.211 9.875 cv
260.336 9.89502 260.434 9.91803 260.512 9.94098 cv
260.582 9.97302 260.637 10.004 260.672 10.043 cv
260.699 10.082 260.715 10.129 260.719 10.18 cv
cp
260.867 7.80902 mo
260.867 8.20697 260.785 8.47998 260.625 8.62903 cv
260.461 8.78101 260.164 8.85498 259.73 8.85199 cv
259.285 8.85498 258.984 8.78101 258.836 8.63702 cv
258.68 8.492 258.605 8.22998 258.605 7.84802 cv
258.605 7.453 258.684 7.17999 258.844 7.02698 cv
259 6.875 259.301 6.797 259.746 6.797 cv
260.18 6.797 260.477 6.87097 260.633 7.02002 cv
260.789 7.16803 260.867 7.43402 260.867 7.80902 cv
cp
f
269.711 13.566 mo
269.707 14.164 269.629 14.707 269.477 15.191 cv
269.316 15.684 269.082 16.102 268.766 16.453 cv
268.449 16.805 268.051 17.078 267.574 17.27 cv
267.094 17.461 266.535 17.555 265.898 17.559 cv
265.277 17.555 264.738 17.473 264.285 17.301 cv
263.824 17.133 263.445 16.883 263.148 16.555 cv
262.844 16.23 262.621 15.828 262.477 15.348 cv
262.332 14.871 262.262 14.324 262.262 13.707 cv
262.262 13.117 262.34 12.578 262.496 12.086 cv
262.652 11.598 262.891 11.176 263.211 10.824 cv
263.527 10.477 263.922 10.203 264.398 10.008 cv
264.871 9.81598 265.43 9.72302 266.07 9.71899 cv
266.695 9.72302 267.234 9.80499 267.691 9.97302 cv
268.148 10.145 268.527 10.395 268.824 10.719 cv
269.121 11.047 269.344 11.449 269.492 11.926 cv
269.637 12.406 269.707 12.953 269.711 13.566 cv
cp
267.691 13.645 mo
267.688 13.309 267.66 12.992 267.609 12.699 cv
267.551 12.414 267.457 12.164 267.332 11.949 cv
267.199 11.738 267.027 11.57 266.816 11.449 cv
266.598 11.332 266.328 11.273 266 11.27 cv
265.711 11.273 265.457 11.328 265.238 11.43 cv
265.02 11.539 264.84 11.695 264.699 11.898 cv
264.559 12.105 264.453 12.352 264.383 12.637 cv
264.313 12.93 264.277 13.258 264.277 13.621 cv
264.277 13.969 264.305 14.285 264.363 14.57 cv
264.418 14.863 264.512 15.113 264.641 15.324 cv
264.766 15.539 264.938 15.703 265.16 15.816 cv
265.375 15.937 265.645 15.996 265.969 15.992 cv
266.262 15.996 266.52 15.941 266.742 15.832 cv
266.957 15.727 267.137 15.574 267.277 15.367 cv
267.418 15.168 267.52 14.922 267.59 14.633 cv
267.652 14.348 267.688 14.02 267.691 13.645 cv
cp
f
277.953 17.113 mo
277.949 17.168 277.934 17.211 277.906 17.25 cv
277.871 17.289 277.82 17.324 277.75 17.348 cv
277.676 17.375 277.574 17.391 277.449 17.406 cv
277.32 17.418 277.164 17.426 276.98 17.426 cv
276.785 17.426 276.625 17.418 276.5 17.406 cv
276.371 17.391 276.27 17.375 276.199 17.348 cv
276.121 17.324 276.07 17.289 276.043 17.25 cv
276.008 17.211 275.992 17.168 275.996 17.113 cv
275.996 13.148 li
275.992 12.812 275.969 12.547 275.922 12.352 cv
275.871 12.16 275.797 11.996 275.707 11.859 cv
275.613 11.723 275.496 11.617 275.348 11.539 cv
275.199 11.465 275.023 11.426 274.828 11.426 cv
274.574 11.426 274.324 11.52 274.07 11.699 cv
273.816 11.883 273.551 12.145 273.277 12.492 cv
273.277 17.113 li
273.273 17.168 273.258 17.211 273.23 17.25 cv
273.195 17.289 273.141 17.324 273.07 17.348 cv
272.992 17.375 272.895 17.391 272.77 17.406 cv
272.645 17.418 272.484 17.426 272.297 17.426 cv
272.102 17.426 271.945 17.418 271.82 17.406 cv
271.695 17.391 271.594 17.375 271.52 17.348 cv
271.441 17.324 271.387 17.289 271.359 17.25 cv
271.324 17.211 271.309 17.168 271.313 17.113 cv
271.313 10.164 li
271.309 10.117 271.324 10.07 271.352 10.027 cv
271.375 9.992 271.422 9.961 271.492 9.92999 cv
271.559 9.90601 271.645 9.88702 271.754 9.87097 cv
271.859 9.86298 271.992 9.85498 272.156 9.85199 cv
272.32 9.85498 272.457 9.86298 272.566 9.87097 cv
272.672 9.88702 272.758 9.90601 272.82 9.92999 cv
272.879 9.961 272.922 9.992 272.949 10.027 cv
272.973 10.07 272.984 10.117 272.988 10.164 cv
272.988 10.965 li
273.371 10.555 273.762 10.242 274.16 10.031 cv
274.555 9.82397 274.973 9.72302 275.406 9.71899 cv
275.875 9.72302 276.273 9.80103 276.602 9.953 cv
276.926 10.113 277.188 10.324 277.387 10.59 cv
277.586 10.859 277.73 11.172 277.82 11.527 cv
277.906 11.887 277.949 12.316 277.953 12.82 cv
cp
f
290.367 8.13702 mo
290.363 8.29303 290.355 8.422 290.348 8.52301 cv
290.332 8.633 290.313 8.71899 290.289 8.78101 cv
290.258 8.84802 290.227 8.89502 290.191 8.922 cv
290.148 8.95697 290.105 8.97302 290.063 8.96899 cv
287.539 8.96899 li
287.539 17.098 li
287.539 17.152 287.52 17.199 287.488 17.238 cv
287.449 17.281 287.395 17.316 287.32 17.34 cv
287.238 17.367 287.133 17.387 287.004 17.402 cv
286.867 17.418 286.703 17.426 286.508 17.426 cv
286.313 17.426 286.148 17.418 286.016 17.402 cv
285.883 17.387 285.777 17.367 285.699 17.34 cv
285.621 17.316 285.563 17.281 285.531 17.238 cv
285.492 17.199 285.477 17.152 285.48 17.098 cv
285.48 8.96899 li
282.957 8.96899 li
282.902 8.97302 282.855 8.95697 282.824 8.922 cv
282.785 8.89502 282.754 8.84802 282.73 8.78101 cv
282.699 8.71899 282.68 8.633 282.672 8.52301 cv
282.656 8.422 282.652 8.29303 282.652 8.13702 cv
282.652 7.98401 282.656 7.85199 282.672 7.73798 cv
282.68 7.633 282.699 7.54303 282.73 7.47699 cv
282.754 7.414 282.785 7.367 282.824 7.336 cv
282.855 7.30902 282.902 7.297 282.957 7.29303 cv
290.063 7.29303 li
290.105 7.297 290.148 7.30902 290.191 7.336 cv
290.227 7.367 290.258 7.414 290.289 7.47699 cv
290.313 7.54303 290.332 7.633 290.348 7.73798 cv
290.355 7.85199 290.363 7.98401 290.367 8.13702 cv
cp
f
293.402 17.113 mo
293.398 17.168 293.383 17.211 293.355 17.25 cv
293.32 17.289 293.266 17.324 293.195 17.348 cv
293.117 17.375 293.02 17.391 292.895 17.406 cv
292.77 17.418 292.609 17.426 292.422 17.426 cv
292.227 17.426 292.07 17.418 291.945 17.406 cv
291.82 17.391 291.719 17.375 291.645 17.348 cv
291.566 17.324 291.512 17.289 291.484 17.25 cv
291.449 17.211 291.434 17.168 291.438 17.113 cv
291.438 10.18 li
291.434 10.129 291.449 10.082 291.484 10.043 cv
291.512 10.004 291.566 9.97302 291.645 9.94098 cv
291.719 9.91803 291.82 9.89502 291.945 9.875 cv
292.07 9.86298 292.227 9.85498 292.422 9.85199 cv
292.609 9.85498 292.77 9.86298 292.895 9.875 cv
293.02 9.89502 293.117 9.91803 293.195 9.94098 cv
293.266 9.97302 293.32 10.004 293.355 10.043 cv
293.383 10.082 293.398 10.129 293.402 10.18 cv
cp
293.551 7.80902 mo
293.551 8.20697 293.469 8.47998 293.309 8.62903 cv
293.145 8.78101 292.848 8.85498 292.414 8.85199 cv
291.969 8.85498 291.668 8.78101 291.52 8.63702 cv
291.363 8.492 291.289 8.22998 291.289 7.84802 cv
291.289 7.453 291.367 7.17999 291.527 7.02698 cv
291.684 6.875 291.984 6.797 292.43 6.797 cv
292.863 6.797 293.16 6.87097 293.316 7.02002 cv
293.473 7.16803 293.551 7.43402 293.551 7.80902 cv
cp
f
306.457 17.113 mo
306.453 17.168 306.438 17.211 306.41 17.25 cv
306.375 17.289 306.324 17.324 306.254 17.348 cv
306.18 17.375 306.078 17.391 305.957 17.406 cv
305.832 17.418 305.676 17.426 305.484 17.426 cv
305.285 17.426 305.125 17.418 305 17.406 cv
304.875 17.391 304.773 17.375 304.699 17.348 cv
304.621 17.324 304.57 17.289 304.543 17.25 cv
304.516 17.211 304.5 17.168 304.504 17.113 cv
304.504 12.992 li
304.5 12.762 304.48 12.547 304.438 12.352 cv
304.391 12.16 304.32 11.996 304.234 11.859 cv
304.141 11.723 304.027 11.617 303.891 11.539 cv
303.75 11.465 303.586 11.426 303.395 11.426 cv
303.16 11.426 302.922 11.52 302.684 11.699 cv
302.445 11.883 302.188 12.145 301.906 12.492 cv
301.906 17.113 li
301.906 17.168 301.891 17.211 301.859 17.25 cv
301.828 17.289 301.773 17.324 301.699 17.348 cv
301.621 17.375 301.52 17.391 301.398 17.406 cv
301.273 17.418 301.121 17.426 300.934 17.426 cv
300.738 17.426 300.578 17.418 300.457 17.406 cv
300.328 17.391 300.227 17.375 300.156 17.348 cv
300.078 17.324 300.027 17.289 299.996 17.25 cv
299.965 17.211 299.949 17.168 299.949 17.113 cv
299.949 12.992 li
299.949 12.762 299.926 12.547 299.883 12.352 cv
299.84 12.16 299.773 11.996 299.688 11.859 cv
299.594 11.723 299.48 11.617 299.344 11.539 cv
299.199 11.465 299.035 11.426 298.852 11.426 cv
298.609 11.426 298.371 11.52 298.133 11.699 cv
297.895 11.883 297.637 12.145 297.363 12.492 cv
297.363 17.113 li
297.359 17.168 297.344 17.211 297.316 17.25 cv
297.281 17.289 297.227 17.324 297.156 17.348 cv
297.078 17.375 296.98 17.391 296.855 17.406 cv
296.73 17.418 296.57 17.426 296.383 17.426 cv
296.188 17.426 296.031 17.418 295.906 17.406 cv
295.781 17.391 295.68 17.375 295.605 17.348 cv
295.527 17.324 295.473 17.289 295.445 17.25 cv
295.41 17.211 295.395 17.168 295.398 17.113 cv
295.398 10.164 li
295.395 10.117 295.41 10.07 295.438 10.027 cv
295.461 9.992 295.508 9.961 295.578 9.92999 cv
295.645 9.90601 295.73 9.88702 295.84 9.87097 cv
295.945 9.86298 296.078 9.85498 296.242 9.85199 cv
296.406 9.85498 296.543 9.86298 296.652 9.87097 cv
296.758 9.88702 296.844 9.90601 296.906 9.92999 cv
296.965 9.961 297.008 9.992 297.035 10.027 cv
297.059 10.07 297.07 10.117 297.074 10.164 cv
297.074 10.965 li
297.457 10.555 297.84 10.242 298.223 10.031 cv
298.602 9.82397 299.004 9.72302 299.422 9.71899 cv
299.707 9.72302 299.961 9.75 300.191 9.80902 cv
300.418 9.87097 300.625 9.95697 300.805 10.066 cv
300.984 10.18 301.137 10.316 301.266 10.469 cv
301.395 10.625 301.504 10.797 301.594 10.988 cv
301.801 10.766 302.004 10.574 302.207 10.414 cv
302.402 10.254 302.602 10.121 302.797 10.02 cv
302.992 9.91803 303.188 9.84399 303.383 9.79303 cv
303.578 9.74597 303.777 9.72302 303.98 9.71899 cv
304.441 9.72302 304.828 9.80103 305.148 9.953 cv
305.461 10.113 305.719 10.324 305.914 10.59 cv
306.109 10.859 306.246 11.172 306.332 11.527 cv
306.41 11.887 306.453 12.266 306.457 12.664 cv
cp
f
314.793 13.437 mo
314.789 13.676 314.738 13.852 314.633 13.965 cv
314.523 14.082 314.375 14.141 314.195 14.137 cv
309.961 14.137 li
309.957 14.437 309.992 14.707 310.066 14.945 cv
310.133 15.187 310.246 15.391 310.402 15.559 cv
310.555 15.73 310.75 15.859 310.992 15.945 cv
311.23 16.035 311.52 16.078 311.863 16.078 cv
312.203 16.078 312.504 16.055 312.766 16.004 cv
313.023 15.957 313.25 15.902 313.441 15.84 cv
313.629 15.781 313.785 15.727 313.914 15.676 cv
314.035 15.629 314.137 15.605 314.219 15.602 cv
314.262 15.605 314.301 15.613 314.336 15.629 cv
314.363 15.648 314.391 15.68 314.41 15.727 cv
314.43 15.773 314.441 15.84 314.453 15.926 cv
314.457 16.012 314.461 16.121 314.465 16.25 cv
314.461 16.367 314.461 16.465 314.457 16.543 cv
314.449 16.625 314.441 16.691 314.434 16.746 cv
314.422 16.805 314.406 16.855 314.387 16.891 cv
314.367 16.934 314.34 16.969 314.309 17.004 cv
314.273 17.043 314.18 17.094 314.031 17.152 cv
313.875 17.219 313.684 17.281 313.453 17.336 cv
313.215 17.398 312.945 17.445 312.648 17.492 cv
312.344 17.531 312.023 17.555 311.684 17.559 cv
311.063 17.555 310.52 17.48 310.059 17.324 cv
309.59 17.172 309.203 16.934 308.895 16.617 cv
308.578 16.301 308.344 15.902 308.195 15.418 cv
308.039 14.937 307.965 14.371 307.969 13.715 cv
307.965 13.102 308.043 12.543 308.207 12.047 cv
308.363 11.551 308.598 11.133 308.91 10.785 cv
309.215 10.441 309.59 10.176 310.027 9.992 cv
310.465 9.81201 310.957 9.72302 311.512 9.71899 cv
312.09 9.72302 312.59 9.80902 313.004 9.97699 cv
313.418 10.152 313.754 10.391 314.02 10.691 cv
314.281 10.996 314.477 11.355 314.605 11.77 cv
314.727 12.187 314.789 12.637 314.793 13.125 cv
cp
312.891 12.875 mo
312.902 12.324 312.793 11.891 312.559 11.578 cv
312.324 11.266 311.957 11.109 311.465 11.105 cv
311.215 11.109 311 11.156 310.816 11.246 cv
310.629 11.344 310.477 11.469 310.355 11.625 cv
310.23 11.785 310.137 11.973 310.074 12.187 cv
310.008 12.402 309.969 12.633 309.961 12.875 cv
cp
f
321.297 15.148 mo
321.293 15.547 321.219 15.895 321.074 16.195 cv
320.926 16.496 320.719 16.75 320.449 16.949 cv
320.176 17.156 319.855 17.305 319.488 17.406 cv
319.121 17.504 318.719 17.555 318.289 17.559 cv
318.023 17.555 317.777 17.535 317.543 17.5 cv
317.309 17.457 317.098 17.41 316.91 17.352 cv
316.723 17.293 316.566 17.23 316.441 17.168 cv
316.316 17.105 316.223 17.047 316.168 16.992 cv
316.109 16.937 316.066 16.855 316.039 16.738 cv
316.004 16.625 315.988 16.449 315.992 16.219 cv
315.988 16.07 315.996 15.949 316.008 15.855 cv
316.016 15.766 316.031 15.695 316.055 15.637 cv
316.074 15.586 316.098 15.547 316.133 15.527 cv
316.16 15.512 316.199 15.504 316.246 15.5 cv
316.301 15.504 316.387 15.535 316.5 15.598 cv
316.609 15.664 316.746 15.738 316.918 15.812 cv
317.082 15.895 317.277 15.965 317.496 16.031 cv
317.715 16.102 317.965 16.137 318.25 16.133 cv
318.426 16.137 318.582 16.117 318.723 16.078 cv
318.855 16.043 318.977 15.992 319.082 15.922 cv
319.18 15.855 319.254 15.77 319.309 15.664 cv
319.355 15.562 319.383 15.441 319.387 15.305 cv
319.383 15.148 319.336 15.016 319.242 14.906 cv
319.148 14.797 319.02 14.699 318.863 14.613 cv
318.699 14.531 318.52 14.453 318.324 14.379 cv
318.121 14.309 317.918 14.23 317.707 14.137 cv
317.496 14.051 317.289 13.949 317.094 13.832 cv
316.891 13.723 316.711 13.582 316.555 13.414 cv
316.391 13.25 316.266 13.051 316.172 12.812 cv
316.078 12.582 316.031 12.301 316.031 11.969 cv
316.031 11.641 316.094 11.336 316.223 11.055 cv
316.352 10.781 316.539 10.543 316.785 10.344 cv
317.027 10.148 317.324 9.99597 317.676 9.883 cv
318.023 9.77698 318.418 9.72302 318.859 9.71899 cv
319.074 9.72302 319.285 9.73798 319.492 9.76599 cv
319.695 9.80103 319.883 9.84003 320.051 9.883 cv
320.215 9.93402 320.355 9.98401 320.473 10.035 cv
320.586 10.094 320.668 10.141 320.719 10.176 cv
320.766 10.219 320.801 10.258 320.824 10.293 cv
320.844 10.336 320.855 10.383 320.867 10.434 cv
320.875 10.488 320.887 10.555 320.895 10.633 cv
320.902 10.719 320.906 10.816 320.906 10.934 cv
320.906 11.074 320.902 11.191 320.895 11.277 cv
320.887 11.371 320.871 11.441 320.855 11.488 cv
320.836 11.543 320.813 11.578 320.785 11.594 cv
320.75 11.617 320.715 11.625 320.676 11.621 cv
320.625 11.625 320.551 11.598 320.457 11.539 cv
320.355 11.488 320.234 11.43 320.086 11.363 cv
319.938 11.305 319.766 11.246 319.57 11.187 cv
319.375 11.137 319.152 11.109 318.906 11.105 cv
318.727 11.109 318.574 11.129 318.445 11.16 cv
318.313 11.199 318.203 11.25 318.125 11.316 cv
318.039 11.387 317.977 11.465 317.938 11.555 cv
317.891 11.648 317.871 11.746 317.875 11.848 cv
317.871 12.008 317.922 12.145 318.023 12.25 cv
318.121 12.363 318.25 12.457 318.414 12.539 cv
318.574 12.625 318.758 12.703 318.965 12.773 cv
319.168 12.848 319.375 12.93 319.586 13.012 cv
319.793 13.102 320 13.199 320.211 13.312 cv
320.414 13.426 320.598 13.566 320.758 13.73 cv
320.918 13.898 321.047 14.098 321.148 14.328 cv
321.242 14.562 321.293 14.836 321.297 15.148 cv
cp
f
333.406 13.566 mo
333.402 14.164 333.324 14.707 333.172 15.191 cv
333.012 15.684 332.777 16.102 332.461 16.453 cv
332.145 16.805 331.746 17.078 331.27 17.27 cv
330.789 17.461 330.23 17.555 329.594 17.559 cv
328.973 17.555 328.434 17.473 327.98 17.301 cv
327.52 17.133 327.141 16.883 326.844 16.555 cv
326.539 16.23 326.316 15.828 326.172 15.348 cv
326.027 14.871 325.957 14.324 325.957 13.707 cv
325.957 13.117 326.035 12.578 326.191 12.086 cv
326.348 11.598 326.586 11.176 326.906 10.824 cv
327.223 10.477 327.617 10.203 328.094 10.008 cv
328.566 9.81598 329.125 9.72302 329.766 9.71899 cv
330.391 9.72302 330.93 9.80499 331.387 9.97302 cv
331.844 10.145 332.223 10.395 332.52 10.719 cv
332.816 11.047 333.039 11.449 333.188 11.926 cv
333.332 12.406 333.402 12.953 333.406 13.566 cv
cp
331.387 13.645 mo
331.383 13.309 331.355 12.992 331.305 12.699 cv
331.246 12.414 331.152 12.164 331.027 11.949 cv
330.895 11.738 330.723 11.57 330.512 11.449 cv
330.293 11.332 330.023 11.273 329.695 11.27 cv
329.406 11.273 329.152 11.328 328.934 11.43 cv
328.715 11.539 328.535 11.695 328.395 11.898 cv
328.254 12.105 328.148 12.352 328.078 12.637 cv
328.008 12.93 327.973 13.258 327.973 13.621 cv
327.973 13.969 328 14.285 328.059 14.57 cv
328.113 14.863 328.207 15.113 328.336 15.324 cv
328.461 15.539 328.633 15.703 328.855 15.816 cv
329.07 15.937 329.34 15.996 329.664 15.992 cv
329.957 15.996 330.215 15.941 330.438 15.832 cv
330.652 15.727 330.832 15.574 330.973 15.367 cv
331.113 15.168 331.215 14.922 331.285 14.633 cv
331.348 14.348 331.383 14.02 331.387 13.645 cv
cp
f
339.156 7.51202 mo
339.152 7.664 339.148 7.78497 339.141 7.875 cv
339.129 7.96899 339.113 8.039 339.094 8.086 cv
339.07 8.13702 339.047 8.172 339.023 8.18701 cv
338.996 8.20697 338.969 8.21503 338.938 8.21503 cv
338.898 8.21503 338.855 8.20697 338.816 8.18701 cv
338.77 8.172 338.715 8.15198 338.652 8.12903 cv
338.582 8.10901 338.508 8.09003 338.422 8.07001 cv
338.332 8.05499 338.227 8.047 338.109 8.04303 cv
337.965 8.047 337.844 8.06598 337.746 8.10901 cv
337.645 8.15601 337.563 8.22699 337.496 8.32001 cv
337.426 8.41803 337.375 8.54303 337.348 8.69501 cv
337.313 8.84802 337.297 9.03497 337.301 9.258 cv
337.301 9.89801 li
338.57 9.89801 li
338.613 9.90198 338.656 9.914 338.699 9.93701 cv
338.734 9.96503 338.77 10.008 338.797 10.066 cv
338.82 10.129 338.84 10.211 338.855 10.312 cv
338.867 10.414 338.871 10.543 338.875 10.691 cv
338.871 10.98 338.848 11.184 338.797 11.305 cv
338.742 11.43 338.664 11.492 338.57 11.488 cv
337.301 11.488 li
337.301 17.113 li
337.297 17.168 337.281 17.211 337.254 17.25 cv
337.219 17.289 337.168 17.324 337.098 17.348 cv
337.023 17.375 336.922 17.391 336.793 17.406 cv
336.66 17.418 336.5 17.426 336.316 17.426 cv
336.129 17.426 335.973 17.418 335.848 17.406 cv
335.719 17.391 335.617 17.375 335.543 17.348 cv
335.465 17.324 335.414 17.289 335.387 17.25 cv
335.355 17.211 335.34 17.168 335.344 17.113 cv
335.344 11.488 li
334.473 11.488 li
334.371 11.492 334.297 11.43 334.25 11.305 cv
334.199 11.184 334.172 10.98 334.176 10.691 cv
334.172 10.543 334.18 10.414 334.195 10.312 cv
334.207 10.211 334.227 10.129 334.25 10.066 cv
334.273 10.008 334.305 9.96503 334.344 9.93701 cv
334.383 9.914 334.426 9.90198 334.48 9.89801 cv
335.344 9.89801 li
335.344 9.31201 li
335.34 8.84399 335.387 8.42999 335.484 8.07001 cv
335.574 7.71503 335.723 7.41803 335.926 7.18402 cv
336.125 6.94897 336.379 6.77301 336.688 6.64801 cv
336.996 6.53101 337.359 6.46899 337.785 6.46899 cv
337.98 6.46899 338.172 6.48798 338.359 6.52002 cv
338.539 6.55902 338.684 6.59399 338.789 6.62903 cv
338.891 6.672 338.961 6.70697 339 6.73798 cv
339.035 6.77301 339.066 6.82397 339.09 6.88702 cv
339.113 6.953 339.129 7.03497 339.141 7.13702 cv
339.148 7.23798 339.152 7.36298 339.156 7.51202 cv
cp
f
345.789 17.098 mo
345.785 17.152 345.77 17.199 345.738 17.238 cv
345.703 17.281 345.645 17.316 345.57 17.34 cv
345.488 17.367 345.387 17.387 345.258 17.402 cv
345.125 17.418 344.957 17.426 344.762 17.426 cv
344.559 17.426 344.395 17.418 344.266 17.402 cv
344.129 17.387 344.023 17.367 343.949 17.34 cv
343.867 17.316 343.813 17.281 343.781 17.238 cv
343.746 17.199 343.727 17.152 343.73 17.098 cv
343.73 7.57397 li
343.727 7.52698 343.746 7.47998 343.781 7.43402 cv
343.813 7.39502 343.867 7.35901 343.953 7.33197 cv
344.031 7.30902 344.137 7.289 344.27 7.27002 cv
344.395 7.258 344.559 7.25 344.762 7.24597 cv
344.957 7.25 345.125 7.258 345.258 7.27002 cv
345.387 7.289 345.488 7.30902 345.57 7.33197 cv
345.645 7.35901 345.703 7.39502 345.738 7.43402 cv
345.77 7.47998 345.785 7.52698 345.789 7.57397 cv
cp
f
358.934 17.113 mo
358.93 17.168 358.914 17.211 358.887 17.25 cv
358.852 17.289 358.801 17.324 358.73 17.348 cv
358.656 17.375 358.555 17.391 358.434 17.406 cv
358.309 17.418 358.152 17.426 357.961 17.426 cv
357.762 17.426 357.602 17.418 357.477 17.406 cv
357.352 17.391 357.25 17.375 357.176 17.348 cv
357.098 17.324 357.047 17.289 357.02 17.25 cv
356.992 17.211 356.977 17.168 356.98 17.113 cv
356.98 12.992 li
356.977 12.762 356.957 12.547 356.914 12.352 cv
356.867 12.16 356.797 11.996 356.711 11.859 cv
356.617 11.723 356.504 11.617 356.367 11.539 cv
356.227 11.465 356.063 11.426 355.871 11.426 cv
355.637 11.426 355.398 11.52 355.16 11.699 cv
354.922 11.883 354.664 12.145 354.383 12.492 cv
354.383 17.113 li
354.383 17.168 354.367 17.211 354.336 17.25 cv
354.305 17.289 354.25 17.324 354.176 17.348 cv
354.098 17.375 353.996 17.391 353.875 17.406 cv
353.75 17.418 353.598 17.426 353.41 17.426 cv
353.215 17.426 353.055 17.418 352.934 17.406 cv
352.805 17.391 352.703 17.375 352.633 17.348 cv
352.555 17.324 352.504 17.289 352.473 17.25 cv
352.441 17.211 352.426 17.168 352.426 17.113 cv
352.426 12.992 li
352.426 12.762 352.402 12.547 352.359 12.352 cv
352.316 12.16 352.25 11.996 352.164 11.859 cv
352.07 11.723 351.957 11.617 351.82 11.539 cv
351.676 11.465 351.512 11.426 351.328 11.426 cv
351.086 11.426 350.848 11.52 350.609 11.699 cv
350.371 11.883 350.113 12.145 349.84 12.492 cv
349.84 17.113 li
349.836 17.168 349.82 17.211 349.793 17.25 cv
349.758 17.289 349.703 17.324 349.633 17.348 cv
349.555 17.375 349.457 17.391 349.332 17.406 cv
349.207 17.418 349.047 17.426 348.859 17.426 cv
348.664 17.426 348.508 17.418 348.383 17.406 cv
348.258 17.391 348.156 17.375 348.082 17.348 cv
348.004 17.324 347.949 17.289 347.922 17.25 cv
347.887 17.211 347.871 17.168 347.875 17.113 cv
347.875 10.164 li
347.871 10.117 347.887 10.07 347.914 10.027 cv
347.938 9.992 347.984 9.961 348.055 9.92999 cv
348.121 9.90601 348.207 9.88702 348.316 9.87097 cv
348.422 9.86298 348.555 9.85498 348.719 9.85199 cv
348.883 9.85498 349.02 9.86298 349.129 9.87097 cv
349.234 9.88702 349.32 9.90601 349.383 9.92999 cv
349.441 9.961 349.484 9.992 349.512 10.027 cv
349.535 10.07 349.547 10.117 349.551 10.164 cv
349.551 10.965 li
349.934 10.555 350.316 10.242 350.699 10.031 cv
351.078 9.82397 351.48 9.72302 351.898 9.71899 cv
352.184 9.72302 352.438 9.75 352.668 9.80902 cv
352.895 9.87097 353.102 9.95697 353.281 10.066 cv
353.461 10.18 353.613 10.316 353.742 10.469 cv
353.871 10.625 353.98 10.797 354.07 10.988 cv
354.277 10.766 354.48 10.574 354.684 10.414 cv
354.879 10.254 355.078 10.121 355.273 10.02 cv
355.469 9.91803 355.664 9.84399 355.859 9.79303 cv
356.055 9.74597 356.254 9.72302 356.457 9.71899 cv
356.918 9.72302 357.305 9.80103 357.625 9.953 cv
357.938 10.113 358.195 10.324 358.391 10.59 cv
358.586 10.859 358.723 11.172 358.809 11.527 cv
358.887 11.887 358.93 12.266 358.934 12.664 cv
cp
f
366.727 17.137 mo
366.723 17.215 366.695 17.27 366.648 17.309 cv
366.594 17.352 366.512 17.379 366.402 17.398 cv
366.285 17.414 366.121 17.426 365.906 17.426 cv
365.668 17.426 365.496 17.414 365.395 17.398 cv
365.285 17.379 365.211 17.352 365.172 17.309 cv
365.125 17.27 365.105 17.215 365.105 17.137 cv
365.105 16.586 li
364.816 16.895 364.488 17.133 364.125 17.301 cv
363.758 17.473 363.352 17.555 362.906 17.559 cv
362.535 17.555 362.195 17.508 361.887 17.414 cv
361.578 17.32 361.313 17.18 361.086 16.984 cv
360.859 16.797 360.684 16.562 360.559 16.281 cv
360.434 16.004 360.371 15.676 360.375 15.297 cv
360.371 14.898 360.449 14.547 360.609 14.242 cv
360.766 13.945 361.004 13.699 361.32 13.504 cv
361.633 13.312 362.023 13.168 362.492 13.07 cv
362.961 12.98 363.504 12.934 364.121 12.93 cv
364.801 12.93 li
364.801 12.508 li
364.801 12.293 364.777 12.102 364.734 11.937 cv
364.688 11.777 364.613 11.641 364.516 11.527 cv
364.41 11.422 364.277 11.34 364.109 11.285 cv
363.938 11.234 363.727 11.211 363.484 11.207 cv
363.152 11.211 362.859 11.246 362.605 11.316 cv
362.344 11.391 362.117 11.473 361.922 11.559 cv
361.723 11.652 361.559 11.73 361.43 11.801 cv
361.293 11.875 361.184 11.914 361.105 11.91 cv
361.043 11.914 360.992 11.895 360.953 11.855 cv
360.906 11.82 360.871 11.77 360.844 11.699 cv
360.813 11.637 360.789 11.551 360.777 11.449 cv
360.758 11.352 360.75 11.242 360.754 11.121 cv
360.75 10.961 360.766 10.836 360.793 10.738 cv
360.816 10.648 360.863 10.562 360.941 10.484 cv
361.012 10.41 361.141 10.328 361.324 10.238 cv
361.504 10.148 361.715 10.062 361.961 9.98401 cv
362.203 9.90601 362.473 9.84399 362.762 9.79303 cv
363.051 9.74597 363.348 9.72302 363.656 9.71899 cv
364.199 9.72302 364.664 9.77301 365.051 9.87903 cv
365.438 9.98798 365.758 10.152 366.008 10.371 cv
366.258 10.59 366.438 10.875 366.555 11.223 cv
366.664 11.574 366.723 11.988 366.727 12.461 cv
cp
364.801 14.16 mo
364.051 14.16 li
363.734 14.164 363.465 14.187 363.242 14.23 cv
363.016 14.281 362.832 14.352 362.695 14.441 cv
362.551 14.539 362.449 14.652 362.387 14.781 cv
362.32 14.918 362.285 15.066 362.289 15.234 cv
362.285 15.527 362.379 15.758 362.566 15.922 cv
362.75 16.09 363.008 16.172 363.336 16.172 cv
363.609 16.172 363.859 16.102 364.094 15.961 cv
364.32 15.82 364.559 15.617 364.801 15.344 cv
cp
f
374.953 10.645 mo
374.949 10.898 374.922 11.082 374.867 11.199 cv
374.809 11.32 374.738 11.379 374.66 11.379 cv
373.84 11.379 li
373.953 11.504 374.035 11.648 374.086 11.805 cv
374.133 11.965 374.156 12.129 374.16 12.297 cv
374.156 12.707 374.09 13.066 373.957 13.379 cv
373.82 13.695 373.625 13.961 373.375 14.172 cv
373.121 14.391 372.82 14.555 372.465 14.664 cv
372.105 14.781 371.707 14.836 371.277 14.832 cv
371.051 14.836 370.84 14.809 370.637 14.75 cv
370.434 14.699 370.277 14.637 370.168 14.559 cv
370.105 14.629 370.047 14.707 370 14.801 cv
369.949 14.895 369.926 15 369.93 15.109 cv
369.926 15.266 369.992 15.387 370.125 15.48 cv
370.254 15.578 370.441 15.633 370.684 15.641 cv
372.375 15.703 li
372.77 15.719 373.121 15.777 373.43 15.871 cv
373.738 15.973 374 16.105 374.211 16.277 cv
374.422 16.453 374.582 16.664 374.691 16.906 cv
374.801 17.152 374.855 17.426 374.859 17.738 cv
374.855 18.074 374.781 18.398 374.633 18.707 cv
374.484 19.008 374.258 19.27 373.957 19.496 cv
373.652 19.715 373.273 19.895 372.82 20.027 cv
372.363 20.156 371.832 20.219 371.23 20.223 cv
370.633 20.219 370.129 20.172 369.711 20.082 cv
369.293 19.984 368.949 19.855 368.684 19.691 cv
368.414 19.523 368.219 19.324 368.102 19.098 cv
367.977 18.863 367.918 18.609 367.918 18.336 cv
367.918 18.164 367.938 18.004 367.984 17.848 cv
368.023 17.691 368.09 17.539 368.18 17.398 cv
368.262 17.254 368.367 17.121 368.492 16.988 cv
368.617 16.859 368.758 16.734 368.922 16.613 cv
368.695 16.5 368.523 16.34 368.402 16.129 cv
368.281 15.926 368.223 15.699 368.223 15.453 cv
368.223 15.152 368.289 14.875 368.43 14.617 cv
368.566 14.367 368.75 14.137 368.977 13.934 cv
368.793 13.754 368.648 13.539 368.539 13.281 cv
368.43 13.031 368.375 12.711 368.379 12.328 cv
368.375 11.926 368.445 11.566 368.59 11.242 cv
368.73 10.926 368.93 10.656 369.188 10.434 cv
369.441 10.215 369.746 10.043 370.098 9.92603 cv
370.449 9.80902 370.84 9.75 371.27 9.75 cv
371.488 9.75 371.695 9.76599 371.895 9.789 cv
372.094 9.82001 372.281 9.85498 372.453 9.89801 cv
374.66 9.89801 li
374.742 9.90198 374.813 9.961 374.871 10.07 cv
374.922 10.187 374.949 10.379 374.953 10.645 cv
cp
372.438 12.289 mo
372.434 11.918 372.332 11.629 372.125 11.418 cv
371.914 11.215 371.621 11.109 371.246 11.105 cv
371.051 11.109 370.879 11.141 370.738 11.203 cv
370.59 11.27 370.469 11.359 370.375 11.469 cv
370.273 11.582 370.203 11.711 370.16 11.859 cv
370.109 12.008 370.086 12.164 370.09 12.32 cv
370.086 12.68 370.191 12.957 370.402 13.16 cv
370.609 13.367 370.898 13.473 371.27 13.469 cv
371.465 13.473 371.633 13.441 371.781 13.375 cv
371.922 13.316 372.043 13.23 372.145 13.117 cv
372.238 13.012 372.313 12.883 372.363 12.738 cv
372.41 12.598 372.434 12.449 372.438 12.289 cv
cp
372.898 17.84 mo
372.898 17.602 372.805 17.426 372.617 17.301 cv
372.43 17.18 372.172 17.109 371.844 17.098 cv
370.449 17.059 li
370.313 17.16 370.203 17.254 370.125 17.344 cv
370.043 17.434 369.98 17.52 369.934 17.605 cv
369.883 17.687 369.848 17.77 369.836 17.848 cv
369.816 17.926 369.809 18.004 369.813 18.09 cv
369.809 18.344 369.941 18.543 370.203 18.68 cv
370.465 18.812 370.836 18.879 371.316 18.883 cv
371.609 18.879 371.855 18.848 372.063 18.793 cv
372.262 18.73 372.426 18.652 372.555 18.555 cv
372.676 18.453 372.766 18.344 372.82 18.223 cv
372.871 18.102 372.898 17.973 372.898 17.84 cv
cp
f
382.578 13.437 mo
382.574 13.676 382.523 13.852 382.418 13.965 cv
382.309 14.082 382.16 14.141 381.98 14.137 cv
377.746 14.137 li
377.742 14.437 377.777 14.707 377.852 14.945 cv
377.918 15.187 378.031 15.391 378.188 15.559 cv
378.34 15.73 378.535 15.859 378.777 15.945 cv
379.016 16.035 379.305 16.078 379.648 16.078 cv
379.988 16.078 380.289 16.055 380.551 16.004 cv
380.809 15.957 381.035 15.902 381.227 15.84 cv
381.414 15.781 381.57 15.727 381.699 15.676 cv
381.82 15.629 381.922 15.605 382.004 15.602 cv
382.047 15.605 382.086 15.613 382.121 15.629 cv
382.148 15.648 382.176 15.68 382.195 15.727 cv
382.215 15.773 382.227 15.84 382.238 15.926 cv
382.242 16.012 382.246 16.121 382.25 16.25 cv
382.246 16.367 382.246 16.465 382.242 16.543 cv
382.234 16.625 382.227 16.691 382.219 16.746 cv
382.207 16.805 382.191 16.855 382.172 16.891 cv
382.152 16.934 382.125 16.969 382.094 17.004 cv
382.059 17.043 381.965 17.094 381.816 17.152 cv
381.66 17.219 381.469 17.281 381.238 17.336 cv
381 17.398 380.73 17.445 380.434 17.492 cv
380.129 17.531 379.809 17.555 379.469 17.559 cv
378.848 17.555 378.305 17.48 377.844 17.324 cv
377.375 17.172 376.988 16.934 376.68 16.617 cv
376.363 16.301 376.129 15.902 375.98 15.418 cv
375.824 14.937 375.75 14.371 375.754 13.715 cv
375.75 13.102 375.828 12.543 375.992 12.047 cv
376.148 11.551 376.383 11.133 376.695 10.785 cv
377 10.441 377.375 10.176 377.813 9.992 cv
378.25 9.81201 378.742 9.72302 379.297 9.71899 cv
379.875 9.72302 380.375 9.80902 380.789 9.97699 cv
381.203 10.152 381.539 10.391 381.805 10.691 cv
382.066 10.996 382.262 11.355 382.391 11.77 cv
382.512 12.187 382.574 12.637 382.578 13.125 cv
cp
380.676 12.875 mo
380.688 12.324 380.578 11.891 380.344 11.578 cv
380.109 11.266 379.742 11.109 379.25 11.105 cv
379 11.109 378.785 11.156 378.602 11.246 cv
378.414 11.344 378.262 11.469 378.141 11.625 cv
378.016 11.785 377.922 11.973 377.859 12.187 cv
377.793 12.402 377.754 12.633 377.746 12.875 cv
cp
f
389.078 15.148 mo
389.074 15.547 389 15.895 388.855 16.195 cv
388.707 16.496 388.5 16.75 388.23 16.949 cv
387.957 17.156 387.637 17.305 387.27 17.406 cv
386.902 17.504 386.5 17.555 386.07 17.559 cv
385.805 17.555 385.559 17.535 385.324 17.5 cv
385.09 17.457 384.879 17.41 384.691 17.352 cv
384.504 17.293 384.348 17.23 384.223 17.168 cv
384.098 17.105 384.004 17.047 383.949 16.992 cv
383.891 16.937 383.848 16.855 383.82 16.738 cv
383.785 16.625 383.77 16.449 383.773 16.219 cv
383.77 16.07 383.777 15.949 383.789 15.855 cv
383.797 15.766 383.813 15.695 383.836 15.637 cv
383.855 15.586 383.879 15.547 383.914 15.527 cv
383.941 15.512 383.98 15.504 384.027 15.5 cv
384.082 15.504 384.168 15.535 384.281 15.598 cv
384.391 15.664 384.527 15.738 384.699 15.812 cv
384.863 15.895 385.059 15.965 385.277 16.031 cv
385.496 16.102 385.746 16.137 386.031 16.133 cv
386.207 16.137 386.363 16.117 386.504 16.078 cv
386.637 16.043 386.758 15.992 386.863 15.922 cv
386.961 15.855 387.035 15.77 387.09 15.664 cv
387.137 15.562 387.164 15.441 387.168 15.305 cv
387.164 15.148 387.117 15.016 387.023 14.906 cv
386.93 14.797 386.801 14.699 386.645 14.613 cv
386.48 14.531 386.301 14.453 386.105 14.379 cv
385.902 14.309 385.699 14.23 385.488 14.137 cv
385.277 14.051 385.07 13.949 384.875 13.832 cv
384.672 13.723 384.492 13.582 384.336 13.414 cv
384.172 13.25 384.047 13.051 383.953 12.812 cv
383.859 12.582 383.813 12.301 383.813 11.969 cv
383.813 11.641 383.875 11.336 384.004 11.055 cv
384.133 10.781 384.32 10.543 384.566 10.344 cv
384.809 10.148 385.105 9.99597 385.457 9.883 cv
385.805 9.77698 386.199 9.72302 386.641 9.71899 cv
386.855 9.72302 387.066 9.73798 387.273 9.76599 cv
387.477 9.80103 387.664 9.84003 387.832 9.883 cv
387.996 9.93402 388.137 9.98401 388.254 10.035 cv
388.367 10.094 388.449 10.141 388.5 10.176 cv
388.547 10.219 388.582 10.258 388.605 10.293 cv
388.625 10.336 388.637 10.383 388.648 10.434 cv
388.656 10.488 388.668 10.555 388.676 10.633 cv
388.684 10.719 388.688 10.816 388.688 10.934 cv
388.688 11.074 388.684 11.191 388.676 11.277 cv
388.668 11.371 388.652 11.441 388.637 11.488 cv
388.617 11.543 388.594 11.578 388.566 11.594 cv
388.531 11.617 388.496 11.625 388.457 11.621 cv
388.406 11.625 388.332 11.598 388.238 11.539 cv
388.137 11.488 388.016 11.43 387.867 11.363 cv
387.719 11.305 387.547 11.246 387.352 11.187 cv
387.156 11.137 386.934 11.109 386.688 11.105 cv
386.508 11.109 386.355 11.129 386.227 11.16 cv
386.094 11.199 385.984 11.25 385.906 11.316 cv
385.82 11.387 385.758 11.465 385.719 11.555 cv
385.672 11.648 385.652 11.746 385.656 11.848 cv
385.652 12.008 385.703 12.145 385.805 12.25 cv
385.902 12.363 386.031 12.457 386.195 12.539 cv
386.355 12.625 386.539 12.703 386.746 12.773 cv
386.949 12.848 387.156 12.93 387.367 13.012 cv
387.574 13.102 387.781 13.199 387.992 13.312 cv
388.195 13.426 388.379 13.566 388.539 13.73 cv
388.699 13.898 388.828 14.098 388.93 14.328 cv
389.023 14.562 389.074 14.836 389.078 15.148 cv
cp
f
397.906 13.461 mo
397.902 13.762 397.875 13.973 397.82 14.09 cv
397.762 14.215 397.672 14.273 397.547 14.27 cv
394.305 14.27 li
394.176 14.273 394.082 14.211 394.027 14.086 cv
393.965 13.965 393.938 13.758 393.941 13.461 cv
393.938 13.172 393.965 12.965 394.027 12.844 cv
394.082 12.727 394.176 12.668 394.305 12.664 cv
397.547 12.664 li
397.609 12.668 397.66 12.68 397.707 12.703 cv
397.746 12.73 397.785 12.777 397.82 12.836 cv
397.848 12.902 397.871 12.984 397.887 13.086 cv
397.898 13.191 397.902 13.316 397.906 13.461 cv
cp
f
410.477 17.113 mo
410.477 17.176 410.465 17.223 410.445 17.258 cv
410.426 17.301 410.379 17.332 410.301 17.355 cv
410.223 17.379 410.105 17.395 409.957 17.41 cv
409.801 17.418 409.598 17.426 409.34 17.426 cv
409.121 17.426 408.945 17.418 408.816 17.41 cv
408.688 17.395 408.586 17.379 408.512 17.352 cv
408.434 17.324 408.379 17.289 408.352 17.242 cv
408.316 17.203 408.293 17.148 408.273 17.082 cv
407.367 14.832 li
407.258 14.578 407.152 14.352 407.051 14.152 cv
406.941 13.957 406.828 13.793 406.703 13.66 cv
406.574 13.531 406.426 13.43 406.262 13.359 cv
406.094 13.293 405.902 13.262 405.688 13.258 cv
405.047 13.258 li
405.047 17.098 li
405.043 17.152 405.027 17.199 404.996 17.238 cv
404.961 17.281 404.906 17.316 404.828 17.34 cv
404.75 17.367 404.645 17.387 404.516 17.402 cv
404.383 17.418 404.219 17.426 404.02 17.426 cv
403.82 17.426 403.652 17.418 403.523 17.402 cv
403.387 17.387 403.281 17.367 403.207 17.34 cv
403.125 17.316 403.07 17.281 403.043 17.238 cv
403.008 17.199 402.992 17.152 402.996 17.098 cv
402.996 7.94098 li
402.992 7.71503 403.051 7.55103 403.172 7.44501 cv
403.285 7.34802 403.43 7.297 403.605 7.29303 cv
406.215 7.29303 li
406.477 7.297 406.695 7.30103 406.871 7.30902 cv
407.039 7.32001 407.195 7.33197 407.34 7.34802 cv
407.742 7.40601 408.105 7.508 408.43 7.64502 cv
408.754 7.789 409.031 7.97302 409.258 8.19501 cv
409.484 8.42603 409.656 8.69098 409.777 9 cv
409.895 9.30902 409.953 9.664 409.957 10.062 cv
409.953 10.402 409.91 10.711 409.828 10.984 cv
409.738 11.266 409.613 11.512 409.449 11.73 cv
409.281 11.949 409.074 12.141 408.832 12.297 cv
408.586 12.461 408.309 12.59 408 12.687 cv
408.148 12.762 408.293 12.852 408.426 12.953 cv
408.559 13.062 408.68 13.187 408.797 13.332 cv
408.91 13.48 409.023 13.648 409.129 13.836 cv
409.23 14.027 409.332 14.242 409.434 14.48 cv
410.285 16.469 li
410.359 16.668 410.41 16.809 410.438 16.898 cv
410.461 16.992 410.477 17.066 410.477 17.113 cv
cp
407.836 10.273 mo
407.832 9.94098 407.758 9.65997 407.609 9.42999 cv
407.457 9.203 407.211 9.04303 406.871 8.94501 cv
406.766 8.922 406.648 8.89801 406.516 8.883 cv
406.383 8.867 406.199 8.85901 405.965 8.85901 cv
405.047 8.85901 li
405.047 11.723 li
406.09 11.723 li
406.379 11.727 406.637 11.691 406.855 11.617 cv
407.074 11.551 407.254 11.449 407.398 11.32 cv
407.543 11.195 407.652 11.043 407.727 10.863 cv
407.797 10.687 407.832 10.492 407.836 10.273 cv
cp
f
418.063 13.437 mo
418.059 13.676 418.008 13.852 417.902 13.965 cv
417.793 14.082 417.645 14.141 417.465 14.137 cv
413.23 14.137 li
413.227 14.437 413.262 14.707 413.336 14.945 cv
413.402 15.187 413.516 15.391 413.672 15.559 cv
413.824 15.73 414.02 15.859 414.262 15.945 cv
414.5 16.035 414.789 16.078 415.133 16.078 cv
415.473 16.078 415.773 16.055 416.035 16.004 cv
416.293 15.957 416.52 15.902 416.711 15.84 cv
416.898 15.781 417.055 15.727 417.184 15.676 cv
417.305 15.629 417.406 15.605 417.488 15.602 cv
417.531 15.605 417.57 15.613 417.605 15.629 cv
417.633 15.648 417.66 15.68 417.68 15.727 cv
417.699 15.773 417.711 15.84 417.723 15.926 cv
417.727 16.012 417.73 16.121 417.734 16.25 cv
417.73 16.367 417.73 16.465 417.727 16.543 cv
417.719 16.625 417.711 16.691 417.703 16.746 cv
417.691 16.805 417.676 16.855 417.656 16.891 cv
417.637 16.934 417.609 16.969 417.578 17.004 cv
417.543 17.043 417.449 17.094 417.301 17.152 cv
417.145 17.219 416.953 17.281 416.723 17.336 cv
416.484 17.398 416.215 17.445 415.918 17.492 cv
415.613 17.531 415.293 17.555 414.953 17.559 cv
414.332 17.555 413.789 17.48 413.328 17.324 cv
412.859 17.172 412.473 16.934 412.164 16.617 cv
411.848 16.301 411.613 15.902 411.465 15.418 cv
411.309 14.937 411.234 14.371 411.238 13.715 cv
411.234 13.102 411.313 12.543 411.477 12.047 cv
411.633 11.551 411.867 11.133 412.18 10.785 cv
412.484 10.441 412.859 10.176 413.297 9.992 cv
413.734 9.81201 414.227 9.72302 414.781 9.71899 cv
415.359 9.72302 415.859 9.80902 416.273 9.97699 cv
416.688 10.152 417.023 10.391 417.289 10.691 cv
417.551 10.996 417.746 11.355 417.875 11.77 cv
417.996 12.187 418.059 12.637 418.063 13.125 cv
cp
416.16 12.875 mo
416.172 12.324 416.063 11.891 415.828 11.578 cv
415.594 11.266 415.227 11.109 414.734 11.105 cv
414.484 11.109 414.27 11.156 414.086 11.246 cv
413.898 11.344 413.746 11.469 413.625 11.625 cv
413.5 11.785 413.406 11.973 413.344 12.187 cv
413.277 12.402 413.238 12.633 413.23 12.875 cv
cp
f
430.73 17.113 mo
430.727 17.168 430.711 17.211 430.684 17.25 cv
430.648 17.289 430.598 17.324 430.527 17.348 cv
430.453 17.375 430.352 17.391 430.23 17.406 cv
430.105 17.418 429.949 17.426 429.758 17.426 cv
429.559 17.426 429.398 17.418 429.273 17.406 cv
429.148 17.391 429.047 17.375 428.973 17.348 cv
428.895 17.324 428.844 17.289 428.816 17.25 cv
428.789 17.211 428.773 17.168 428.777 17.113 cv
428.777 12.992 li
428.773 12.762 428.754 12.547 428.711 12.352 cv
428.664 12.16 428.594 11.996 428.508 11.859 cv
428.414 11.723 428.301 11.617 428.164 11.539 cv
428.023 11.465 427.859 11.426 427.668 11.426 cv
427.434 11.426 427.195 11.52 426.957 11.699 cv
426.719 11.883 426.461 12.145 426.18 12.492 cv
426.18 17.113 li
426.18 17.168 426.164 17.211 426.133 17.25 cv
426.102 17.289 426.047 17.324 425.973 17.348 cv
425.895 17.375 425.793 17.391 425.672 17.406 cv
425.547 17.418 425.395 17.426 425.207 17.426 cv
425.012 17.426 424.852 17.418 424.73 17.406 cv
424.602 17.391 424.5 17.375 424.43 17.348 cv
424.352 17.324 424.301 17.289 424.27 17.25 cv
424.238 17.211 424.223 17.168 424.223 17.113 cv
424.223 12.992 li
424.223 12.762 424.199 12.547 424.156 12.352 cv
424.113 12.16 424.047 11.996 423.961 11.859 cv
423.867 11.723 423.754 11.617 423.617 11.539 cv
423.473 11.465 423.309 11.426 423.125 11.426 cv
422.883 11.426 422.645 11.52 422.406 11.699 cv
422.168 11.883 421.91 12.145 421.637 12.492 cv
421.637 17.113 li
421.633 17.168 421.617 17.211 421.59 17.25 cv
421.555 17.289 421.5 17.324 421.43 17.348 cv
421.352 17.375 421.254 17.391 421.129 17.406 cv
421.004 17.418 420.844 17.426 420.656 17.426 cv
420.461 17.426 420.305 17.418 420.18 17.406 cv
420.055 17.391 419.953 17.375 419.879 17.348 cv
419.801 17.324 419.746 17.289 419.719 17.25 cv
419.684 17.211 419.668 17.168 419.672 17.113 cv
419.672 10.164 li
419.668 10.117 419.684 10.07 419.711 10.027 cv
419.734 9.992 419.781 9.961 419.852 9.92999 cv
419.918 9.90601 420.004 9.88702 420.113 9.87097 cv
420.219 9.86298 420.352 9.85498 420.516 9.85199 cv
420.68 9.85498 420.816 9.86298 420.926 9.87097 cv
421.031 9.88702 421.117 9.90601 421.18 9.92999 cv
421.238 9.961 421.281 9.992 421.309 10.027 cv
421.332 10.07 421.344 10.117 421.348 10.164 cv
421.348 10.965 li
421.73 10.555 422.113 10.242 422.496 10.031 cv
422.875 9.82397 423.277 9.72302 423.695 9.71899 cv
423.98 9.72302 424.234 9.75 424.465 9.80902 cv
424.691 9.87097 424.898 9.95697 425.078 10.066 cv
425.258 10.18 425.41 10.316 425.539 10.469 cv
425.668 10.625 425.777 10.797 425.867 10.988 cv
426.074 10.766 426.277 10.574 426.48 10.414 cv
426.676 10.254 426.875 10.121 427.07 10.02 cv
427.266 9.91803 427.461 9.84399 427.656 9.79303 cv
427.852 9.74597 428.051 9.72302 428.254 9.71899 cv
428.715 9.72302 429.102 9.80103 429.422 9.953 cv
429.734 10.113 429.992 10.324 430.188 10.59 cv
430.383 10.859 430.52 11.172 430.605 11.527 cv
430.684 11.887 430.727 12.266 430.73 12.664 cv
cp
f
439.676 13.566 mo
439.672 14.164 439.594 14.707 439.441 15.191 cv
439.281 15.684 439.047 16.102 438.73 16.453 cv
438.414 16.805 438.016 17.078 437.539 17.27 cv
437.059 17.461 436.5 17.555 435.863 17.559 cv
435.242 17.555 434.703 17.473 434.25 17.301 cv
433.789 17.133 433.41 16.883 433.113 16.555 cv
432.809 16.23 432.586 15.828 432.441 15.348 cv
432.297 14.871 432.227 14.324 432.227 13.707 cv
432.227 13.117 432.305 12.578 432.461 12.086 cv
432.617 11.598 432.855 11.176 433.176 10.824 cv
433.492 10.477 433.887 10.203 434.363 10.008 cv
434.836 9.81598 435.395 9.72302 436.035 9.71899 cv
436.66 9.72302 437.199 9.80499 437.656 9.97302 cv
438.113 10.145 438.492 10.395 438.789 10.719 cv
439.086 11.047 439.309 11.449 439.457 11.926 cv
439.602 12.406 439.672 12.953 439.676 13.566 cv
cp
437.656 13.645 mo
437.652 13.309 437.625 12.992 437.574 12.699 cv
437.516 12.414 437.422 12.164 437.297 11.949 cv
437.164 11.738 436.992 11.57 436.781 11.449 cv
436.563 11.332 436.293 11.273 435.965 11.27 cv
435.676 11.273 435.422 11.328 435.203 11.43 cv
434.984 11.539 434.805 11.695 434.664 11.898 cv
434.523 12.105 434.418 12.352 434.348 12.637 cv
434.277 12.93 434.242 13.258 434.242 13.621 cv
434.242 13.969 434.27 14.285 434.328 14.57 cv
434.383 14.863 434.477 15.113 434.605 15.324 cv
434.73 15.539 434.902 15.703 435.125 15.816 cv
435.34 15.937 435.609 15.996 435.934 15.992 cv
436.227 15.996 436.484 15.941 436.707 15.832 cv
436.922 15.727 437.102 15.574 437.242 15.367 cv
437.383 15.168 437.484 14.922 437.555 14.633 cv
437.617 14.348 437.652 14.02 437.656 13.645 cv
cp
f
445.383 16.43 mo
445.383 16.656 445.367 16.832 445.34 16.953 cv
445.309 17.078 445.27 17.164 445.227 17.211 cv
445.176 17.262 445.109 17.305 445.02 17.344 cv
444.926 17.383 444.816 17.414 444.699 17.445 cv
444.574 17.469 444.441 17.492 444.301 17.512 cv
444.156 17.523 444.016 17.531 443.871 17.535 cv
443.48 17.531 443.141 17.48 442.855 17.387 cv
442.57 17.285 442.336 17.137 442.148 16.93 cv
441.961 16.727 441.82 16.469 441.734 16.156 cv
441.641 15.848 441.598 15.477 441.602 15.047 cv
441.602 11.488 li
440.77 11.488 li
440.668 11.492 440.594 11.43 440.543 11.305 cv
440.488 11.184 440.461 10.98 440.465 10.691 cv
440.461 10.543 440.469 10.414 440.484 10.312 cv
440.496 10.211 440.516 10.129 440.543 10.066 cv
440.566 10.008 440.598 9.96503 440.641 9.93701 cv
440.676 9.914 440.723 9.90198 440.777 9.89801 cv
441.602 9.89801 li
441.602 8.34802 li
441.598 8.30103 441.613 8.25403 441.645 8.20697 cv
441.672 8.16803 441.723 8.133 441.801 8.10199 cv
441.875 8.078 441.977 8.05499 442.105 8.039 cv
442.23 8.02698 442.387 8.02301 442.578 8.02002 cv
442.766 8.02301 442.926 8.02698 443.055 8.039 cv
443.18 8.05499 443.281 8.078 443.355 8.10199 cv
443.426 8.133 443.477 8.16803 443.512 8.20697 cv
443.539 8.25403 443.555 8.30103 443.559 8.34802 cv
443.559 9.89801 li
445.07 9.89801 li
445.121 9.90198 445.168 9.914 445.207 9.93701 cv
445.246 9.96503 445.277 10.008 445.305 10.066 cv
445.328 10.129 445.348 10.211 445.363 10.312 cv
445.375 10.414 445.383 10.543 445.383 10.691 cv
445.383 10.98 445.355 11.184 445.305 11.305 cv
445.25 11.43 445.176 11.492 445.078 11.488 cv
443.559 11.488 li
443.559 14.754 li
443.555 15.133 443.613 15.418 443.738 15.605 cv
443.855 15.797 444.07 15.891 444.375 15.891 cv
444.477 15.891 444.57 15.883 444.656 15.863 cv
444.738 15.848 444.813 15.828 444.879 15.801 cv
444.941 15.781 444.996 15.758 445.043 15.738 cv
445.086 15.723 445.125 15.715 445.164 15.711 cv
445.191 15.715 445.223 15.723 445.254 15.738 cv
445.281 15.758 445.301 15.797 445.32 15.848 cv
445.332 15.906 445.348 15.98 445.363 16.07 cv
445.375 16.168 445.383 16.285 445.383 16.43 cv
cp
f
452.969 13.437 mo
452.965 13.676 452.914 13.852 452.809 13.965 cv
452.699 14.082 452.551 14.141 452.371 14.137 cv
448.137 14.137 li
448.133 14.437 448.168 14.707 448.242 14.945 cv
448.309 15.187 448.422 15.391 448.578 15.559 cv
448.73 15.73 448.926 15.859 449.168 15.945 cv
449.406 16.035 449.695 16.078 450.039 16.078 cv
450.379 16.078 450.68 16.055 450.941 16.004 cv
451.199 15.957 451.426 15.902 451.617 15.84 cv
451.805 15.781 451.961 15.727 452.09 15.676 cv
452.211 15.629 452.313 15.605 452.395 15.602 cv
452.438 15.605 452.477 15.613 452.512 15.629 cv
452.539 15.648 452.566 15.68 452.586 15.727 cv
452.605 15.773 452.617 15.84 452.629 15.926 cv
452.633 16.012 452.637 16.121 452.641 16.25 cv
452.637 16.367 452.637 16.465 452.633 16.543 cv
452.625 16.625 452.617 16.691 452.609 16.746 cv
452.598 16.805 452.582 16.855 452.563 16.891 cv
452.543 16.934 452.516 16.969 452.484 17.004 cv
452.449 17.043 452.355 17.094 452.207 17.152 cv
452.051 17.219 451.859 17.281 451.629 17.336 cv
451.391 17.398 451.121 17.445 450.824 17.492 cv
450.52 17.531 450.199 17.555 449.859 17.559 cv
449.238 17.555 448.695 17.48 448.234 17.324 cv
447.766 17.172 447.379 16.934 447.07 16.617 cv
446.754 16.301 446.52 15.902 446.371 15.418 cv
446.215 14.937 446.141 14.371 446.145 13.715 cv
446.141 13.102 446.219 12.543 446.383 12.047 cv
446.539 11.551 446.773 11.133 447.086 10.785 cv
447.391 10.441 447.766 10.176 448.203 9.992 cv
448.641 9.81201 449.133 9.72302 449.688 9.71899 cv
450.266 9.72302 450.766 9.80902 451.18 9.97699 cv
451.594 10.152 451.93 10.391 452.195 10.691 cv
452.457 10.996 452.652 11.355 452.781 11.77 cv
452.902 12.187 452.965 12.637 452.969 13.125 cv
cp
451.066 12.875 mo
451.078 12.324 450.969 11.891 450.734 11.578 cv
450.5 11.266 450.133 11.109 449.641 11.105 cv
449.391 11.109 449.176 11.156 448.992 11.246 cv
448.805 11.344 448.652 11.469 448.531 11.625 cv
448.406 11.785 448.313 11.973 448.25 12.187 cv
448.184 12.402 448.145 12.633 448.137 12.875 cv
cp
f
470.277 17.098 mo
470.273 17.152 470.262 17.199 470.234 17.238 cv
470.203 17.281 470.148 17.316 470.078 17.34 cv
470 17.367 469.902 17.387 469.777 17.402 cv
469.652 17.418 469.492 17.426 469.301 17.426 cv
469.113 17.426 468.957 17.418 468.836 17.402 cv
468.707 17.387 468.609 17.367 468.539 17.34 cv
468.465 17.316 468.414 17.281 468.383 17.238 cv
468.352 17.199 468.336 17.152 468.336 17.098 cv
468.336 8.89099 li
468.32 8.89099 li
465.398 17.09 li
465.375 17.16 465.34 17.215 465.297 17.258 cv
465.246 17.305 465.184 17.34 465.105 17.363 cv
465.023 17.391 464.922 17.406 464.797 17.414 cv
464.672 17.422 464.52 17.426 464.348 17.426 cv
464.168 17.426 464.02 17.418 463.895 17.406 cv
463.77 17.391 463.664 17.371 463.586 17.344 cv
463.5 17.316 463.438 17.281 463.395 17.238 cv
463.344 17.199 463.313 17.152 463.301 17.09 cv
460.48 8.89099 li
460.465 8.89099 li
460.465 17.098 li
460.461 17.152 460.445 17.199 460.422 17.238 cv
460.391 17.281 460.34 17.316 460.262 17.34 cv
460.184 17.367 460.082 17.387 459.961 17.402 cv
459.836 17.418 459.68 17.426 459.492 17.426 cv
459.301 17.426 459.145 17.418 459.023 17.402 cv
458.895 17.387 458.793 17.367 458.723 17.34 cv
458.645 17.316 458.594 17.281 458.566 17.238 cv
458.535 17.199 458.52 17.152 458.523 17.098 cv
458.523 8.11298 li
458.52 7.85199 458.59 7.64801 458.734 7.50403 cv
458.871 7.367 459.059 7.297 459.297 7.29303 cv
460.637 7.29303 li
460.875 7.297 461.078 7.31598 461.25 7.35199 cv
461.418 7.39502 461.566 7.45697 461.695 7.547 cv
461.816 7.64099 461.922 7.76202 462.008 7.90601 cv
462.09 8.05902 462.16 8.242 462.227 8.45697 cv
464.41 14.465 li
464.441 14.465 li
466.699 8.47302 li
466.766 8.25403 466.84 8.07001 466.922 7.91803 cv
467 7.77002 467.094 7.64801 467.203 7.55103 cv
467.309 7.461 467.434 7.39502 467.578 7.35199 cv
467.723 7.31598 467.891 7.297 468.086 7.29303 cv
469.465 7.29303 li
469.602 7.297 469.723 7.31201 469.828 7.34802 cv
469.926 7.38702 470.008 7.44098 470.078 7.508 cv
470.141 7.58197 470.191 7.66803 470.227 7.76599 cv
470.258 7.87097 470.273 7.98798 470.277 8.11298 cv
cp
f
479.387 13.566 mo
479.383 14.164 479.305 14.707 479.152 15.191 cv
478.992 15.684 478.758 16.102 478.441 16.453 cv
478.125 16.805 477.727 17.078 477.25 17.27 cv
476.77 17.461 476.211 17.555 475.574 17.559 cv
474.953 17.555 474.414 17.473 473.961 17.301 cv
473.5 17.133 473.121 16.883 472.824 16.555 cv
472.52 16.23 472.297 15.828 472.152 15.348 cv
472.008 14.871 471.938 14.324 471.938 13.707 cv
471.938 13.117 472.016 12.578 472.172 12.086 cv
472.328 11.598 472.566 11.176 472.887 10.824 cv
473.203 10.477 473.598 10.203 474.074 10.008 cv
474.547 9.81598 475.105 9.72302 475.746 9.71899 cv
476.371 9.72302 476.91 9.80499 477.367 9.97302 cv
477.824 10.145 478.203 10.395 478.5 10.719 cv
478.797 11.047 479.02 11.449 479.168 11.926 cv
479.313 12.406 479.383 12.953 479.387 13.566 cv
cp
477.367 13.645 mo
477.363 13.309 477.336 12.992 477.285 12.699 cv
477.227 12.414 477.133 12.164 477.008 11.949 cv
476.875 11.738 476.703 11.57 476.492 11.449 cv
476.273 11.332 476.004 11.273 475.676 11.27 cv
475.387 11.273 475.133 11.328 474.914 11.43 cv
474.695 11.539 474.516 11.695 474.375 11.898 cv
474.234 12.105 474.129 12.352 474.059 12.637 cv
473.988 12.93 473.953 13.258 473.953 13.621 cv
473.953 13.969 473.98 14.285 474.039 14.57 cv
474.094 14.863 474.188 15.113 474.316 15.324 cv
474.441 15.539 474.613 15.703 474.836 15.816 cv
475.051 15.937 475.32 15.996 475.645 15.992 cv
475.938 15.996 476.195 15.941 476.418 15.832 cv
476.633 15.727 476.813 15.574 476.953 15.367 cv
477.094 15.168 477.195 14.922 477.266 14.633 cv
477.328 14.348 477.363 14.02 477.367 13.645 cv
cp
f
487.535 17.113 mo
487.531 17.176 487.52 17.223 487.496 17.258 cv
487.469 17.301 487.422 17.332 487.363 17.355 cv
487.297 17.379 487.215 17.395 487.109 17.41 cv
487.004 17.418 486.871 17.426 486.719 17.426 cv
486.547 17.426 486.414 17.418 486.313 17.41 cv
486.207 17.395 486.121 17.379 486.059 17.355 cv
485.992 17.332 485.945 17.301 485.918 17.258 cv
485.887 17.223 485.871 17.176 485.875 17.113 cv
485.875 16.344 li
485.516 16.73 485.141 17.027 484.75 17.238 cv
484.352 17.449 483.918 17.555 483.445 17.559 cv
482.91 17.555 482.461 17.453 482.098 17.25 cv
481.73 17.047 481.434 16.773 481.203 16.422 cv
480.969 16.078 480.801 15.672 480.699 15.203 cv
480.598 14.742 480.547 14.25 480.547 13.73 cv
480.547 13.117 480.609 12.562 480.742 12.066 cv
480.871 11.574 481.066 11.152 481.324 10.805 cv
481.578 10.457 481.895 10.191 482.273 10 cv
482.652 9.81598 483.09 9.72302 483.586 9.71899 cv
483.973 9.72302 484.324 9.80103 484.645 9.95697 cv
484.957 10.117 485.273 10.348 485.586 10.652 cv
485.586 6.89099 li
485.586 6.84003 485.598 6.79303 485.629 6.75 cv
485.652 6.711 485.707 6.67603 485.785 6.64502 cv
485.859 6.617 485.957 6.59802 486.086 6.578 cv
486.207 6.56598 486.367 6.55902 486.563 6.55499 cv
486.754 6.55902 486.91 6.56598 487.035 6.578 cv
487.156 6.59802 487.258 6.617 487.332 6.64502 cv
487.402 6.67603 487.453 6.711 487.488 6.75 cv
487.516 6.79303 487.531 6.84003 487.535 6.89099 cv
cp
485.586 12.469 mo
485.305 12.117 485.035 11.848 484.781 11.66 cv
484.52 11.473 484.25 11.379 483.973 11.379 cv
483.719 11.379 483.5 11.445 483.316 11.57 cv
483.129 11.703 482.98 11.871 482.871 12.082 cv
482.758 12.293 482.676 12.531 482.621 12.793 cv
482.566 13.059 482.539 13.328 482.539 13.598 cv
482.539 13.895 482.563 14.176 482.609 14.449 cv
482.656 14.727 482.73 14.973 482.84 15.187 cv
482.941 15.402 483.086 15.574 483.266 15.703 cv
483.441 15.836 483.664 15.902 483.934 15.898 cv
484.066 15.902 484.195 15.883 484.328 15.84 cv
484.453 15.805 484.586 15.742 484.719 15.648 cv
484.852 15.562 484.988 15.445 485.129 15.301 cv
485.27 15.16 485.422 14.984 485.586 14.777 cv
cp
f
495.934 13.437 mo
495.93 13.676 495.879 13.852 495.773 13.965 cv
495.664 14.082 495.516 14.141 495.336 14.137 cv
491.102 14.137 li
491.098 14.437 491.133 14.707 491.207 14.945 cv
491.273 15.187 491.387 15.391 491.543 15.559 cv
491.695 15.73 491.891 15.859 492.133 15.945 cv
492.371 16.035 492.66 16.078 493.004 16.078 cv
493.344 16.078 493.645 16.055 493.906 16.004 cv
494.164 15.957 494.391 15.902 494.582 15.84 cv
494.77 15.781 494.926 15.727 495.055 15.676 cv
495.176 15.629 495.277 15.605 495.359 15.602 cv
495.402 15.605 495.441 15.613 495.477 15.629 cv
495.504 15.648 495.531 15.68 495.551 15.727 cv
495.57 15.773 495.582 15.84 495.594 15.926 cv
495.598 16.012 495.602 16.121 495.605 16.25 cv
495.602 16.367 495.602 16.465 495.598 16.543 cv
495.59 16.625 495.582 16.691 495.574 16.746 cv
495.563 16.805 495.547 16.855 495.527 16.891 cv
495.508 16.934 495.48 16.969 495.449 17.004 cv
495.414 17.043 495.32 17.094 495.172 17.152 cv
495.016 17.219 494.824 17.281 494.594 17.336 cv
494.355 17.398 494.086 17.445 493.789 17.492 cv
493.484 17.531 493.164 17.555 492.824 17.559 cv
492.203 17.555 491.66 17.48 491.199 17.324 cv
490.73 17.172 490.344 16.934 490.035 16.617 cv
489.719 16.301 489.484 15.902 489.336 15.418 cv
489.18 14.937 489.105 14.371 489.109 13.715 cv
489.105 13.102 489.184 12.543 489.348 12.047 cv
489.504 11.551 489.738 11.133 490.051 10.785 cv
490.355 10.441 490.73 10.176 491.168 9.992 cv
491.605 9.81201 492.098 9.72302 492.652 9.71899 cv
493.23 9.72302 493.73 9.80902 494.145 9.97699 cv
494.559 10.152 494.895 10.391 495.16 10.691 cv
495.422 10.996 495.617 11.355 495.746 11.77 cv
495.867 12.187 495.93 12.637 495.934 13.125 cv
cp
494.031 12.875 mo
494.043 12.324 493.934 11.891 493.699 11.578 cv
493.465 11.266 493.098 11.109 492.605 11.105 cv
492.355 11.109 492.141 11.156 491.957 11.246 cv
491.77 11.344 491.617 11.469 491.496 11.625 cv
491.371 11.785 491.277 11.973 491.215 12.187 cv
491.148 12.402 491.109 12.633 491.102 12.875 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
