%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: PreparationTimesOfImages-LocalMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:56:52 p.m.
%%BoundingBox: 0 0 652 557
%%HiResBoundingBox: 0 0 651.7201 556.0800
%%CropBox: 0 0 651.7201 556.0800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -556.08 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 556.08 li
651.72 556.08 li
651.72 0 li
cp
clp
gsave
0 556.08 mo
652 556.08 li
652 -.920044 li
0 -.920044 li
cp
clp
0 -6.10352e-5 mo
651.719 -6.10352e-5 li
651.719 556.078 li
0 556.078 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
53.641 488.762 mo
635.762 488.762 li
53.641 445.68 mo
635.762 445.68 li
53.641 402.602 mo
635.762 402.602 li
53.641 359.52 mo
635.762 359.52 li
53.641 316.441 mo
635.762 316.441 li
53.641 273.359 mo
635.762 273.359 li
53.641 230.281 mo
635.762 230.281 li
53.641 187.199 mo
635.762 187.199 li
53.641 144.121 mo
635.762 144.121 li
53.641 100.922 mo
635.762 100.922 li
53.641 57.84 mo
635.762 57.84 li
.135805 .104005 .108583 0 cmyk
@
53.641 467.281 mo
635.762 467.281 li
53.641 424.199 mo
635.762 424.199 li
53.641 381.121 mo
635.762 381.121 li
53.641 338.039 mo
635.762 338.039 li
53.641 294.84 mo
635.762 294.84 li
53.641 251.762 mo
635.762 251.762 li
53.641 208.68 mo
635.762 208.68 li
53.641 165.602 mo
635.762 165.602 li
53.641 122.52 mo
635.762 122.52 li
53.641 79.4409 mo
635.762 79.4409 li
53.641 36.3589 mo
635.762 36.3589 li
.326574 .281529 .277562 0 cmyk
@
90 36.3589 mo
90 510.359 li
162.719 36.3589 mo
162.719 510.359 li
235.559 36.3589 mo
235.559 510.359 li
308.281 36.3589 mo
308.281 510.359 li
381 36.3589 mo
381 510.359 li
453.84 36.3589 mo
453.84 510.359 li
526.559 36.3589 mo
526.559 510.359 li
599.398 36.3589 mo
599.398 510.359 li
.175235 .144778 .143648 0 cmyk
@
53.641 36.3589 mo
53.641 510.359 li
126.359 36.3589 mo
126.359 510.359 li
199.078 36.3589 mo
199.078 510.359 li
271.922 36.3589 mo
271.922 510.359 li
344.641 36.3589 mo
344.641 510.359 li
417.48 36.3589 mo
417.48 510.359 li
490.199 36.3589 mo
490.199 510.359 li
563.039 36.3589 mo
563.039 510.359 li
635.762 36.3589 mo
635.762 510.359 li
.326574 .281529 .277562 0 cmyk
@
33.48 501 mo
40.558 501 li
40.558 518.16 li
33.48 518.16 li
cp
0 0 0 0 cmyk
ef
33.48 457.922 mo
40.558 457.922 li
40.558 475.078 li
33.48 475.078 li
cp
ef
33.48 414.84 mo
40.558 414.84 li
40.558 432 li
33.48 432 li
cp
ef
33.48 371.762 mo
40.558 371.762 li
40.558 388.801 li
33.48 388.801 li
cp
ef
33.48 328.68 mo
40.558 328.68 li
40.558 345.719 li
33.48 345.719 li
cp
ef
26.398 285.602 mo
40.558 285.602 li
40.558 302.641 li
26.398 302.641 li
cp
ef
26.398 242.52 mo
40.558 242.52 li
40.558 259.559 li
26.398 259.559 li
cp
ef
26.398 199.441 mo
40.558 199.441 li
40.558 216.48 li
26.398 216.48 li
cp
ef
26.398 156.238 mo
40.558 156.238 li
40.558 173.398 li
26.398 173.398 li
cp
ef
26.398 113.16 mo
40.558 113.16 li
40.558 130.32 li
26.398 130.32 li
cp
ef
26.398 70.0779 mo
40.558 70.0779 li
40.558 87.2379 li
26.398 87.2379 li
cp
ef
26.398 26.9999 mo
40.558 26.9999 li
40.558 44.0389 li
26.398 44.0389 li
cp
ef
.96 lw
53.641 510.359 mo
635.762 510.359 li
.369879 .299321 .304356 .000976577 cmyk
@
53.641 510.359 mo
53.641 514.801 li
126.359 510.359 mo
126.359 514.801 li
199.078 510.359 mo
199.078 514.801 li
271.922 510.359 mo
271.922 514.801 li
344.641 510.359 mo
344.641 514.801 li
417.48 510.359 mo
417.48 514.801 li
490.199 510.359 mo
490.199 514.801 li
563.039 510.359 mo
563.039 514.801 li
635.762 510.359 mo
635.762 514.801 li
@
gsave
53.52 36.238 mo
636.36 36.238 li
636.36 511.078 li
53.52 511.078 li
cp
clp
1 lc
53.641 55.199 mo
126.359 148.441 li
199.078 142.078 li
271.922 138.48 li
344.641 122.879 li
417.48 123.121 li
490.199 122.039 li
563.039 122.641 li
635.762 121.441 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
58.52 60.262 mo
48.441 50.18 li
48.441 60.262 mo
58.52 50.18 li
.62829 .284672 0 0 cmyk
@
131.359 153.379 mo
121.281 143.301 li
121.281 153.379 mo
131.359 143.301 li
@
204.078 147.141 mo
194 137.059 li
194 147.141 mo
204.078 137.059 li
@
276.801 143.539 mo
266.719 133.461 li
266.719 143.539 mo
276.801 133.461 li
@
349.641 127.82 mo
339.559 117.738 li
339.559 127.82 mo
349.641 117.738 li
@
422.359 128.059 mo
412.281 117.981 li
412.281 128.059 mo
422.359 117.981 li
@
495.199 126.981 mo
485.121 116.898 li
485.121 126.981 mo
495.199 116.898 li
@
567.922 127.699 mo
557.84 117.621 li
557.84 127.699 mo
567.922 117.621 li
@
640.641 126.5 mo
630.559 116.422 li
630.559 126.5 mo
640.641 116.422 li
@
gsave
53.52 36.238 mo
636.36 36.238 li
636.36 511.078 li
53.52 511.078 li
cp
clp
.96 lw
1 lc
53.641 279 mo
126.359 353.879 li
199.078 325.441 li
271.922 314.762 li
344.641 314.52 li
417.48 314.281 li
490.199 314.52 li
563.039 314.281 li
635.762 313.801 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
58.52 283.941 mo
48.441 273.859 li
48.441 283.941 mo
58.52 273.859 li
.0321965 .622736 .922606 .000579843 cmyk
@
131.359 358.941 mo
121.281 348.859 li
121.281 358.941 mo
131.359 348.859 li
@
204.078 330.5 mo
194 320.422 li
194 330.5 mo
204.078 320.422 li
@
276.801 319.699 mo
266.719 309.621 li
266.719 319.699 mo
276.801 309.621 li
@
349.641 319.461 mo
339.559 309.379 li
339.559 319.461 mo
349.641 309.379 li
@
422.359 319.34 mo
412.281 309.262 li
412.281 319.34 mo
422.359 309.262 li
@
495.199 319.461 mo
485.121 309.379 li
485.121 319.461 mo
495.199 309.379 li
@
567.922 319.34 mo
557.84 309.262 li
557.84 319.34 mo
567.922 309.262 li
@
640.641 318.859 mo
630.559 308.781 li
630.559 318.859 mo
640.641 308.781 li
@
gsave
53.52 36.238 mo
636.36 36.238 li
636.36 511.078 li
53.52 511.078 li
cp
clp
.96 lw
1 lc
53.641 354.238 mo
126.359 383.762 li
199.078 361.559 li
271.922 360 li
344.641 354.602 li
417.48 354.238 li
490.199 354.121 li
563.039 354 li
635.762 354 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
58.52 359.301 mo
48.441 349.219 li
48.441 359.301 mo
58.52 349.219 li
.621118 .109194 .980743 .0040589 cmyk
@
131.359 388.699 mo
121.281 378.621 li
121.281 388.699 mo
131.359 378.621 li
@
204.078 366.621 mo
194 356.539 li
194 366.621 mo
204.078 356.539 li
@
276.801 364.941 mo
266.719 354.859 li
266.719 364.941 mo
276.801 354.859 li
@
349.641 359.539 mo
339.559 349.461 li
339.559 359.539 mo
349.641 349.461 li
@
422.359 359.301 mo
412.281 349.219 li
412.281 359.301 mo
422.359 349.219 li
@
495.199 359.18 mo
485.121 349.102 li
485.121 359.18 mo
495.199 349.102 li
@
567.922 358.941 mo
557.84 348.859 li
557.84 358.941 mo
567.922 348.859 li
@
640.641 359.059 mo
630.559 348.981 li
630.559 359.059 mo
640.641 348.981 li
@
gsave
53.52 36.238 mo
636.36 36.238 li
636.36 511.078 li
53.52 511.078 li
cp
clp
.96 lw
1 lc
53.641 417 mo
126.359 475.078 li
199.078 492.84 li
271.922 469.801 li
344.641 493.441 li
417.48 469.922 li
490.199 489.719 li
563.039 475.68 li
635.762 489.602 li
0 .993988 1 0 cmyk
@
grestore
58.52 422.059 mo
48.441 411.981 li
48.441 422.059 mo
58.52 411.981 li
0 .993988 1 0 cmyk
@
131.359 480.141 mo
121.281 470.059 li
121.281 480.141 mo
131.359 470.059 li
@
204.078 497.781 mo
194 487.699 li
194 497.781 mo
204.078 487.699 li
@
276.801 474.859 mo
266.719 464.781 li
266.719 474.859 mo
276.801 464.781 li
@
349.641 498.379 mo
339.559 488.301 li
339.559 498.379 mo
349.641 488.301 li
@
422.359 474.981 mo
412.281 464.898 li
412.281 474.981 mo
422.359 464.898 li
@
495.199 494.781 mo
485.121 484.699 li
485.121 494.781 mo
495.199 484.699 li
@
567.922 480.621 mo
557.84 470.539 li
557.84 480.621 mo
567.922 470.539 li
@
640.641 494.66 mo
630.559 484.578 li
630.559 494.66 mo
640.641 484.578 li
@
gsave
53.52 36.238 mo
636.36 36.238 li
636.36 511.078 li
53.52 511.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.641 418.441 mo
126.359 476.039 li
199.078 492.961 li
271.922 472.441 li
344.641 461.16 li
417.48 485.879 li
490.199 474.84 li
563.039 489.238 li
635.762 482.762 li
.62829 .284672 0 0 cmyk
@
grestore
58.52 423.5 mo
48.441 413.422 li
48.441 423.5 mo
58.52 413.422 li
.62829 .284672 0 0 cmyk
@
131.359 480.981 mo
121.281 470.898 li
121.281 480.981 mo
131.359 470.898 li
@
204.078 497.898 mo
194 487.82 li
194 497.898 mo
204.078 487.82 li
@
276.801 477.5 mo
266.719 467.422 li
266.719 477.5 mo
276.801 467.422 li
@
349.641 466.219 mo
339.559 456.141 li
339.559 466.219 mo
349.641 456.141 li
@
422.359 490.82 mo
412.281 480.738 li
412.281 490.82 mo
422.359 480.738 li
@
495.199 479.781 mo
485.121 469.699 li
485.121 479.781 mo
495.199 469.699 li
@
567.922 494.301 mo
557.84 484.219 li
557.84 494.301 mo
567.922 484.219 li
@
640.641 487.82 mo
630.559 477.738 li
630.559 487.82 mo
640.641 477.738 li
@
gsave
53.52 36.238 mo
636.36 36.238 li
636.36 511.078 li
53.52 511.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.641 417 mo
126.359 475.68 li
199.078 492.84 li
271.922 490.32 li
344.641 477 li
417.48 489.238 li
490.199 485.641 li
563.039 478.078 li
635.762 489.238 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
58.52 421.941 mo
48.441 411.859 li
48.441 421.941 mo
58.52 411.859 li
.0321965 .622736 .922606 .000579843 cmyk
@
131.359 480.621 mo
121.281 470.539 li
121.281 480.621 mo
131.359 470.539 li
@
204.078 497.781 mo
194 487.699 li
194 497.781 mo
204.078 487.699 li
@
276.801 495.379 mo
266.719 485.301 li
266.719 495.379 mo
276.801 485.301 li
@
349.641 482.059 mo
339.559 471.981 li
339.559 482.059 mo
349.641 471.981 li
@
422.359 494.301 mo
412.281 484.219 li
412.281 494.301 mo
422.359 484.219 li
@
495.199 490.578 mo
485.121 480.5 li
485.121 490.578 mo
495.199 480.5 li
@
567.922 483.141 mo
557.84 473.059 li
557.84 483.141 mo
567.922 473.059 li
@
640.641 494.18 mo
630.559 484.102 li
630.559 494.18 mo
640.641 484.102 li
@
gsave
53.52 36.238 mo
636.36 36.238 li
636.36 511.078 li
53.52 511.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.641 416.879 mo
126.359 476.16 li
199.078 492.84 li
271.922 486.121 li
344.641 478.922 li
417.48 473.039 li
490.199 488.52 li
563.039 485.641 li
635.762 478.922 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
58.52 421.82 mo
48.441 411.738 li
48.441 421.82 mo
58.52 411.738 li
.621118 .109194 .980743 .0040589 cmyk
@
131.359 481.102 mo
121.281 471.02 li
121.281 481.102 mo
131.359 471.02 li
@
204.078 497.898 mo
194 487.82 li
194 497.898 mo
204.078 487.82 li
@
276.801 491.18 mo
266.719 481.102 li
266.719 491.18 mo
276.801 481.102 li
@
349.641 483.981 mo
339.559 473.898 li
339.559 483.981 mo
349.641 473.898 li
@
422.359 477.981 mo
412.281 467.898 li
412.281 477.981 mo
422.359 467.898 li
@
495.199 493.461 mo
485.121 483.379 li
485.121 493.461 mo
495.199 483.379 li
@
567.922 490.578 mo
557.84 480.5 li
557.84 490.578 mo
567.922 480.5 li
@
640.641 483.981 mo
630.559 473.898 li
630.559 483.981 mo
640.641 473.898 li
@
gsave
53.52 36.238 mo
636.36 36.238 li
636.36 511.078 li
53.52 511.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.641 430.441 mo
126.359 469.078 li
199.078 492.961 li
271.922 492.238 li
344.641 488.398 li
417.48 481.559 li
490.199 489.238 li
563.039 487.922 li
635.762 486.238 li
0 .993988 1 0 cmyk
@
grestore
58.52 435.379 mo
48.441 425.301 li
48.441 435.379 mo
58.52 425.301 li
0 .993988 1 0 cmyk
@
131.359 474.02 mo
121.281 463.941 li
121.281 474.02 mo
131.359 463.941 li
@
204.078 497.898 mo
194 487.82 li
194 497.898 mo
204.078 487.82 li
@
276.801 497.18 mo
266.719 487.102 li
266.719 497.18 mo
276.801 487.102 li
@
349.641 493.34 mo
339.559 483.262 li
339.559 493.34 mo
349.641 483.262 li
@
422.359 486.621 mo
412.281 476.539 li
412.281 486.621 mo
422.359 476.539 li
@
495.199 494.301 mo
485.121 484.219 li
485.121 494.301 mo
495.199 484.219 li
@
567.922 492.981 mo
557.84 482.898 li
557.84 492.981 mo
567.922 482.898 li
@
640.641 491.18 mo
630.559 481.102 li
630.559 491.18 mo
640.641 481.102 li
@
33.469 501.066 mo
40.567 501.066 li
40.567 518.156 li
33.469 518.156 li
cp
0 0 0 0 cmyk
ef
40.109 510.031 mo
40.105 510.715 40.055 511.336 39.949 511.898 cv
39.84 512.461 39.66 512.945 39.414 513.348 cv
39.16 513.754 38.832 514.066 38.434 514.285 cv
38.027 514.508 37.535 514.617 36.949 514.617 cv
36.391 514.617 35.918 514.52 35.539 514.32 cv
35.156 514.125 34.852 513.832 34.617 513.445 cv
34.383 513.059 34.215 512.586 34.121 512.02 cv
34.02 511.457 33.973 510.809 33.973 510.074 cv
33.973 509.402 34.027 508.781 34.137 508.215 cv
34.246 507.652 34.422 507.168 34.672 506.762 cv
34.914 506.359 35.238 506.047 35.645 505.82 cv
36.043 505.602 36.539 505.488 37.129 505.488 cv
37.688 505.488 38.16 505.59 38.543 505.785 cv
38.926 505.988 39.23 506.281 39.465 506.664 cv
39.695 507.055 39.863 507.527 39.961 508.09 cv
40.059 508.652 40.105 509.301 40.109 510.031 cv
cp
38.902 510.113 mo
38.898 509.672 38.883 509.273 38.855 508.922 cv
38.82 508.57 38.773 508.262 38.715 507.992 cv
38.648 507.723 38.57 507.492 38.473 507.297 cv
38.375 507.105 38.258 506.945 38.121 506.816 cv
37.98 506.691 37.82 506.598 37.648 506.539 cv
37.469 506.484 37.273 506.457 37.059 506.453 cv
36.668 506.457 36.352 506.547 36.113 506.73 cv
35.867 506.914 35.676 507.168 35.539 507.484 cv
35.398 507.805 35.305 508.176 35.254 508.605 cv
35.203 509.035 35.18 509.5 35.18 509.992 cv
35.18 510.656 35.211 511.219 35.281 511.68 cv
35.348 512.148 35.457 512.527 35.609 512.816 cv
35.754 513.113 35.945 513.324 36.176 513.453 cv
36.406 513.59 36.688 513.656 37.02 513.652 cv
37.273 513.656 37.496 513.617 37.691 513.531 cv
37.883 513.453 38.051 513.332 38.191 513.176 cv
38.332 513.023 38.445 512.84 38.539 512.625 cv
38.625 512.41 38.699 512.172 38.758 511.91 cv
38.809 511.652 38.848 511.371 38.871 511.066 cv
38.891 510.762 38.898 510.445 38.902 510.113 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
33.469 457.969 mo
40.567 457.969 li
40.567 475.059 li
33.469 475.059 li
cp
0 0 0 0 cmyk
ef
39.816 470.871 mo
39.813 470.957 39.809 471.031 39.797 471.094 cv
39.785 471.16 39.77 471.215 39.75 471.254 cv
39.727 471.301 39.699 471.332 39.668 471.348 cv
39.633 471.371 39.594 471.379 39.555 471.379 cv
34.652 471.379 li
34.59 471.379 34.531 471.371 34.484 471.355 cv
34.434 471.34 34.395 471.316 34.359 471.277 cv
34.324 471.246 34.297 471.191 34.285 471.121 cv
34.266 471.051 34.258 470.965 34.262 470.863 cv
34.258 470.773 34.262 470.695 34.27 470.625 cv
34.273 470.559 34.289 470.5 34.316 470.445 cv
34.34 470.395 34.371 470.34 34.406 470.285 cv
34.441 470.234 34.484 470.18 34.543 470.117 cv
36.316 468.293 li
36.727 467.875 37.055 467.5 37.305 467.164 cv
37.551 466.836 37.742 466.531 37.875 466.254 cv
38.008 465.98 38.094 465.73 38.141 465.504 cv
38.18 465.281 38.203 465.07 38.203 464.875 cv
38.203 464.68 38.168 464.496 38.102 464.316 cv
38.035 464.145 37.941 463.988 37.816 463.852 cv
37.691 463.723 37.535 463.617 37.348 463.535 cv
37.16 463.461 36.941 463.422 36.695 463.418 cv
36.406 463.422 36.148 463.461 35.922 463.535 cv
35.691 463.617 35.492 463.703 35.32 463.789 cv
35.148 463.883 35.004 463.965 34.887 464.043 cv
34.77 464.121 34.684 464.16 34.633 464.16 cv
34.598 464.16 34.566 464.152 34.543 464.133 cv
34.512 464.117 34.492 464.086 34.477 464.043 cv
34.461 464.004 34.445 463.949 34.438 463.879 cv
34.426 463.812 34.422 463.73 34.426 463.633 cv
34.422 463.566 34.426 463.508 34.434 463.457 cv
34.438 463.406 34.445 463.363 34.457 463.324 cv
34.465 463.289 34.48 463.254 34.5 463.223 cv
34.52 463.191 34.555 463.152 34.613 463.102 cv
34.664 463.055 34.758 462.988 34.895 462.906 cv
35.027 462.824 35.199 462.746 35.402 462.664 cv
35.605 462.586 35.828 462.516 36.074 462.461 cv
36.316 462.406 36.574 462.379 36.848 462.379 cv
37.273 462.379 37.648 462.441 37.973 462.562 cv
38.293 462.684 38.559 462.848 38.773 463.059 cv
38.984 463.27 39.145 463.516 39.25 463.789 cv
39.355 464.07 39.41 464.367 39.41 464.68 cv
39.41 464.969 39.383 465.25 39.332 465.527 cv
39.281 465.812 39.176 466.117 39.016 466.441 cv
38.852 466.77 38.617 467.133 38.313 467.531 cv
38.004 467.934 37.598 468.395 37.094 468.91 cv
35.688 470.379 li
39.547 470.379 li
39.578 470.383 39.613 470.395 39.652 470.41 cv
39.684 470.434 39.715 470.465 39.742 470.504 cv
39.766 470.547 39.785 470.598 39.797 470.656 cv
39.809 470.723 39.813 470.793 39.816 470.871 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
33.469 414.879 mo
40.567 414.879 li
40.567 431.969 li
33.469 431.969 li
cp
0 0 0 0 cmyk
ef
40.191 425.758 mo
40.188 425.91 40.164 426.031 40.121 426.117 cv
40.074 426.207 40.012 426.25 39.93 426.246 cv
38.93 426.246 li
38.93 428.109 li
38.93 428.148 38.918 428.18 38.902 428.203 cv
38.879 428.23 38.848 428.25 38.805 428.27 cv
38.754 428.285 38.691 428.297 38.621 428.309 cv
38.543 428.316 38.449 428.32 38.332 428.324 cv
38.215 428.32 38.117 428.316 38.047 428.309 cv
37.969 428.297 37.91 428.285 37.867 428.27 cv
37.82 428.25 37.789 428.23 37.773 428.203 cv
37.754 428.18 37.746 428.148 37.75 428.109 cv
37.75 426.246 li
34.121 426.246 li
34.063 426.25 34.02 426.242 33.984 426.227 cv
33.949 426.215 33.914 426.187 33.887 426.148 cv
33.855 426.113 33.836 426.062 33.824 425.992 cv
33.813 425.926 33.809 425.836 33.809 425.723 cv
33.809 425.641 33.809 425.562 33.816 425.492 cv
33.816 425.422 33.828 425.359 33.844 425.305 cv
33.855 425.25 33.871 425.195 33.898 425.141 cv
33.918 425.086 33.945 425.031 33.98 424.969 cv
37.141 419.582 li
37.16 419.547 37.195 419.516 37.242 419.488 cv
37.285 419.461 37.34 419.437 37.414 419.418 cv
37.48 419.402 37.566 419.391 37.672 419.379 cv
37.773 419.375 37.895 419.371 38.035 419.367 cv
38.184 419.371 38.32 419.375 38.438 419.387 cv
38.551 419.398 38.641 419.414 38.715 419.43 cv
38.781 419.449 38.836 419.473 38.875 419.504 cv
38.91 419.535 38.93 419.57 38.93 419.609 cv
38.93 425.273 li
39.93 425.273 li
40.004 425.277 40.066 425.316 40.117 425.395 cv
40.164 425.477 40.188 425.598 40.191 425.758 cv
cp
37.75 420.406 mo
37.738 420.406 li
34.887 425.273 li
37.75 425.273 li
cp
.629236 .549432 .540154 .282963 cmyk
f
33.469 371.781 mo
40.567 371.781 li
40.567 388.871 li
33.469 388.871 li
cp
0 0 0 0 cmyk
ef
40.043 382.309 mo
40.043 382.699 39.98 383.078 39.863 383.437 cv
39.738 383.805 39.555 384.121 39.313 384.395 cv
39.063 384.672 38.75 384.895 38.375 385.059 cv
37.992 385.227 37.547 385.309 37.031 385.309 cv
36.66 385.309 36.332 385.266 36.051 385.172 cv
35.766 385.086 35.52 384.953 35.309 384.781 cv
35.098 384.613 34.922 384.406 34.785 384.16 cv
34.645 383.914 34.531 383.633 34.449 383.316 cv
34.363 383.004 34.305 382.66 34.27 382.281 cv
34.23 381.91 34.211 381.508 34.215 381.074 cv
34.211 380.695 34.23 380.312 34.273 379.922 cv
34.313 379.539 34.387 379.164 34.492 378.797 cv
34.598 378.437 34.742 378.098 34.922 377.781 cv
35.102 377.465 35.328 377.187 35.602 376.953 cv
35.875 376.719 36.199 376.531 36.578 376.391 cv
36.957 376.254 37.398 376.187 37.902 376.184 cv
38.07 376.187 38.242 376.195 38.414 376.215 cv
38.586 376.238 38.746 376.27 38.895 376.301 cv
39.043 376.34 39.164 376.375 39.266 376.414 cv
39.363 376.453 39.43 376.488 39.465 376.512 cv
39.492 376.539 39.516 376.566 39.535 376.594 cv
39.551 376.625 39.566 376.656 39.574 376.691 cv
39.582 376.727 39.586 376.766 39.594 376.809 cv
39.594 376.852 39.598 376.906 39.602 376.969 cv
39.598 377.055 39.598 377.125 39.598 377.18 cv
39.594 377.242 39.582 377.289 39.57 377.324 cv
39.551 377.363 39.531 377.391 39.508 377.406 cv
39.48 377.426 39.449 377.434 39.41 377.434 cv
39.359 377.434 39.289 377.418 39.203 377.387 cv
39.113 377.355 39.008 377.32 38.887 377.277 cv
38.762 377.242 38.613 377.207 38.438 377.172 cv
38.262 377.145 38.059 377.129 37.828 377.125 cv
37.398 377.129 37.031 377.215 36.727 377.387 cv
36.422 377.559 36.172 377.793 35.977 378.086 cv
35.781 378.379 35.637 378.719 35.547 379.102 cv
35.449 379.492 35.395 379.895 35.387 380.312 cv
35.504 380.246 35.641 380.18 35.789 380.109 cv
35.938 380.043 36.098 379.98 36.273 379.922 cv
36.449 379.871 36.637 379.824 36.832 379.789 cv
37.027 379.758 37.238 379.742 37.465 379.738 cv
37.941 379.742 38.344 379.809 38.676 379.934 cv
39.004 380.066 39.27 380.246 39.477 380.477 cv
39.676 380.707 39.82 380.977 39.91 381.289 cv
39.996 381.602 40.043 381.941 40.043 382.309 cv
cp
38.848 382.418 mo
38.848 382.156 38.82 381.914 38.77 381.695 cv
38.715 381.48 38.625 381.297 38.504 381.141 cv
38.379 380.992 38.215 380.875 38.012 380.793 cv
37.801 380.711 37.547 380.668 37.25 380.668 cv
37.078 380.668 36.91 380.684 36.742 380.715 cv
36.57 380.746 36.406 380.789 36.25 380.836 cv
36.09 380.891 35.941 380.953 35.801 381.023 cv
35.656 381.098 35.523 381.172 35.406 381.25 cv
35.402 381.844 35.441 382.34 35.52 382.734 cv
35.594 383.133 35.703 383.449 35.848 383.687 cv
35.992 383.93 36.172 384.102 36.387 384.203 cv
36.602 384.309 36.852 384.359 37.141 384.355 cv
37.43 384.359 37.684 384.305 37.898 384.191 cv
38.113 384.086 38.289 383.937 38.434 383.75 cv
38.574 383.566 38.68 383.359 38.746 383.129 cv
38.813 382.898 38.848 382.664 38.848 382.418 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
33.469 328.691 mo
40.567 328.691 li
40.567 345.781 li
33.469 345.781 li
cp
0 0 0 0 cmyk
ef
40.02 339.793 mo
40.02 340.18 39.949 340.523 39.813 340.82 cv
39.676 341.125 39.48 341.375 39.223 341.578 cv
38.965 341.785 38.645 341.941 38.266 342.043 cv
37.883 342.148 37.449 342.199 36.965 342.199 cv
36.504 342.199 36.094 342.152 35.734 342.059 cv
35.371 341.965 35.066 341.824 34.816 341.633 cv
34.566 341.449 34.375 341.219 34.242 340.941 cv
34.109 340.668 34.043 340.355 34.043 340 cv
34.043 339.727 34.086 339.469 34.18 339.234 cv
34.266 339 34.398 338.785 34.574 338.59 cv
34.742 338.395 34.953 338.211 35.207 338.035 cv
35.457 337.867 35.742 337.703 36.059 337.547 cv
35.785 337.406 35.543 337.258 35.332 337.098 cv
35.121 336.941 34.941 336.77 34.797 336.582 cv
34.648 336.398 34.539 336.203 34.465 335.992 cv
34.387 335.785 34.348 335.555 34.352 335.305 cv
34.348 334.996 34.402 334.703 34.52 334.43 cv
34.629 334.16 34.801 333.926 35.027 333.723 cv
35.254 333.523 35.539 333.363 35.891 333.246 cv
36.234 333.129 36.645 333.07 37.113 333.07 cv
37.559 333.07 37.945 333.125 38.273 333.23 cv
38.602 333.34 38.871 333.484 39.082 333.668 cv
39.293 333.855 39.449 334.074 39.555 334.324 cv
39.652 334.574 39.703 334.844 39.707 335.133 cv
39.703 335.367 39.664 335.594 39.594 335.805 cv
39.516 336.023 39.406 336.227 39.258 336.414 cv
39.109 336.609 38.93 336.789 38.719 336.953 cv
38.508 337.125 38.266 337.281 37.992 337.422 cv
38.313 337.586 38.598 337.75 38.855 337.918 cv
39.105 338.086 39.32 338.266 39.496 338.461 cv
39.664 338.656 39.793 338.863 39.887 339.078 cv
39.973 339.297 40.02 339.535 40.02 339.793 cv
cp
38.539 335.242 mo
38.535 335.055 38.504 334.879 38.438 334.723 cv
38.371 334.566 38.273 334.434 38.148 334.324 cv
38.02 334.215 37.859 334.133 37.672 334.074 cv
37.477 334.02 37.262 333.992 37.023 333.988 cv
36.527 333.992 36.152 334.102 35.902 334.324 cv
35.645 334.551 35.52 334.859 35.523 335.242 cv
35.52 335.422 35.551 335.586 35.613 335.738 cv
35.676 335.895 35.77 336.039 35.902 336.176 cv
36.027 336.312 36.191 336.445 36.395 336.574 cv
36.59 336.707 36.828 336.844 37.105 336.984 cv
37.566 336.75 37.922 336.488 38.168 336.195 cv
38.414 335.91 38.535 335.594 38.539 335.242 cv
cp
38.828 339.918 mo
38.824 339.711 38.785 339.52 38.711 339.348 cv
38.629 339.18 38.512 339.02 38.355 338.867 cv
38.199 338.719 38 338.574 37.766 338.434 cv
37.527 338.297 37.258 338.152 36.949 338 cv
36.66 338.145 36.406 338.285 36.191 338.426 cv
35.973 338.566 35.793 338.715 35.656 338.863 cv
35.516 339.02 35.41 339.176 35.34 339.34 cv
35.266 339.508 35.23 339.691 35.234 339.891 cv
35.23 340.336 35.383 340.68 35.691 340.918 cv
35.992 341.164 36.445 341.285 37.051 341.281 cv
37.633 341.285 38.078 341.164 38.379 340.914 cv
38.676 340.672 38.824 340.34 38.828 339.918 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
26.379 285.59 mo
40.57 285.59 li
40.57 302.68 li
26.379 302.68 li
cp
0 0 0 0 cmyk
ef
32.754 298.504 mo
32.75 298.594 32.742 298.664 32.73 298.723 cv
32.715 298.785 32.695 298.836 32.676 298.867 cv
32.652 298.906 32.629 298.93 32.598 298.945 cv
32.566 298.961 32.535 298.969 32.508 298.969 cv
27.871 298.969 li
27.836 298.969 27.809 298.961 27.781 298.945 cv
27.754 298.93 27.727 298.906 27.703 298.867 cv
27.676 298.836 27.656 298.785 27.645 298.723 cv
27.629 298.664 27.621 298.594 27.625 298.504 cv
27.621 298.426 27.629 298.352 27.645 298.289 cv
27.656 298.23 27.672 298.184 27.695 298.145 cv
27.711 298.109 27.738 298.078 27.77 298.055 cv
27.801 298.035 27.832 298.027 27.871 298.023 cv
29.723 298.023 li
29.723 291.277 li
28.008 292.297 li
27.918 292.348 27.848 292.375 27.801 292.383 cv
27.746 292.391 27.703 292.383 27.672 292.352 cv
27.637 292.324 27.617 292.273 27.605 292.203 cv
27.594 292.137 27.586 292.051 27.59 291.941 cv
27.586 291.867 27.59 291.801 27.602 291.742 cv
27.605 291.691 27.617 291.645 27.633 291.605 cv
27.645 291.57 27.664 291.539 27.688 291.512 cv
27.711 291.484 27.742 291.457 27.789 291.43 cv
29.832 290.117 li
29.848 290.105 29.867 290.094 29.898 290.086 cv
29.922 290.078 29.957 290.07 30.004 290.059 cv
30.043 290.051 30.094 290.043 30.148 290.039 cv
30.203 290.039 30.27 290.039 30.355 290.035 cv
30.461 290.039 30.555 290.043 30.629 290.051 cv
30.699 290.059 30.754 290.074 30.801 290.09 cv
30.84 290.109 30.867 290.129 30.883 290.152 cv
30.891 290.18 30.898 290.203 30.902 290.227 cv
30.902 298.023 li
32.508 298.023 li
32.543 298.027 32.578 298.035 32.609 298.055 cv
32.641 298.078 32.664 298.109 32.688 298.145 cv
32.703 298.184 32.719 298.23 32.734 298.289 cv
32.742 298.352 32.75 298.426 32.754 298.504 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.109 294.512 mo
40.105 295.195 40.055 295.816 39.949 296.379 cv
39.84 296.941 39.66 297.426 39.414 297.828 cv
39.16 298.234 38.832 298.547 38.434 298.766 cv
38.027 298.988 37.535 299.098 36.949 299.098 cv
36.391 299.098 35.918 299 35.539 298.801 cv
35.156 298.605 34.852 298.312 34.617 297.926 cv
34.383 297.539 34.215 297.066 34.121 296.5 cv
34.02 295.937 33.973 295.289 33.973 294.555 cv
33.973 293.883 34.027 293.262 34.137 292.695 cv
34.246 292.133 34.422 291.648 34.672 291.242 cv
34.914 290.84 35.238 290.527 35.645 290.301 cv
36.043 290.082 36.539 289.969 37.129 289.969 cv
37.688 289.969 38.16 290.07 38.543 290.266 cv
38.926 290.469 39.23 290.762 39.465 291.145 cv
39.695 291.535 39.863 292.008 39.961 292.57 cv
40.059 293.133 40.105 293.781 40.109 294.512 cv
cp
38.902 294.594 mo
38.898 294.152 38.883 293.754 38.855 293.402 cv
38.82 293.051 38.773 292.742 38.715 292.473 cv
38.648 292.203 38.57 291.973 38.473 291.777 cv
38.375 291.586 38.258 291.426 38.121 291.297 cv
37.98 291.172 37.82 291.078 37.648 291.02 cv
37.469 290.965 37.273 290.937 37.059 290.934 cv
36.668 290.937 36.352 291.027 36.113 291.211 cv
35.867 291.395 35.676 291.648 35.539 291.965 cv
35.398 292.285 35.305 292.656 35.254 293.086 cv
35.203 293.516 35.18 293.98 35.18 294.473 cv
35.18 295.137 35.211 295.699 35.281 296.16 cv
35.348 296.629 35.457 297.008 35.609 297.297 cv
35.754 297.594 35.945 297.805 36.176 297.934 cv
36.406 298.07 36.688 298.137 37.02 298.133 cv
37.273 298.137 37.496 298.098 37.691 298.012 cv
37.883 297.934 38.051 297.812 38.191 297.656 cv
38.332 297.504 38.445 297.32 38.539 297.105 cv
38.625 296.891 38.699 296.652 38.758 296.391 cv
38.809 296.133 38.848 295.852 38.871 295.547 cv
38.891 295.242 38.898 294.926 38.902 294.594 cv
cp
f
26.379 242.5 mo
40.57 242.5 li
40.57 259.59 li
26.379 259.59 li
cp
0 0 0 0 cmyk
ef
32.754 255.395 mo
32.75 255.484 32.742 255.555 32.73 255.613 cv
32.715 255.676 32.695 255.727 32.676 255.758 cv
32.652 255.797 32.629 255.82 32.598 255.836 cv
32.566 255.852 32.535 255.859 32.508 255.859 cv
27.871 255.859 li
27.836 255.859 27.809 255.852 27.781 255.836 cv
27.754 255.82 27.727 255.797 27.703 255.758 cv
27.676 255.727 27.656 255.676 27.645 255.613 cv
27.629 255.555 27.621 255.484 27.625 255.395 cv
27.621 255.316 27.629 255.242 27.645 255.18 cv
27.656 255.121 27.672 255.074 27.695 255.035 cv
27.711 255 27.738 254.969 27.77 254.945 cv
27.801 254.926 27.832 254.918 27.871 254.914 cv
29.723 254.914 li
29.723 248.168 li
28.008 249.187 li
27.918 249.238 27.848 249.266 27.801 249.273 cv
27.746 249.281 27.703 249.273 27.672 249.242 cv
27.637 249.215 27.617 249.164 27.605 249.094 cv
27.594 249.027 27.586 248.941 27.59 248.832 cv
27.586 248.758 27.59 248.691 27.602 248.633 cv
27.605 248.582 27.617 248.535 27.633 248.496 cv
27.645 248.461 27.664 248.43 27.688 248.402 cv
27.711 248.375 27.742 248.348 27.789 248.32 cv
29.832 247.008 li
29.848 246.996 29.867 246.984 29.898 246.977 cv
29.922 246.969 29.957 246.961 30.004 246.949 cv
30.043 246.941 30.094 246.934 30.148 246.93 cv
30.203 246.93 30.27 246.93 30.355 246.926 cv
30.461 246.93 30.555 246.934 30.629 246.941 cv
30.699 246.949 30.754 246.965 30.801 246.98 cv
30.84 247 30.867 247.02 30.883 247.043 cv
30.891 247.07 30.898 247.094 30.902 247.117 cv
30.902 254.914 li
32.508 254.914 li
32.543 254.918 32.578 254.926 32.609 254.945 cv
32.641 254.969 32.664 255 32.688 255.035 cv
32.703 255.074 32.719 255.121 32.734 255.18 cv
32.742 255.242 32.75 255.316 32.754 255.395 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.816 255.352 mo
39.813 255.437 39.809 255.512 39.797 255.574 cv
39.785 255.641 39.77 255.695 39.75 255.734 cv
39.727 255.781 39.699 255.812 39.668 255.828 cv
39.633 255.852 39.594 255.859 39.555 255.859 cv
34.652 255.859 li
34.59 255.859 34.531 255.852 34.484 255.836 cv
34.434 255.82 34.395 255.797 34.359 255.758 cv
34.324 255.727 34.297 255.672 34.285 255.602 cv
34.266 255.531 34.258 255.445 34.262 255.344 cv
34.258 255.254 34.262 255.176 34.27 255.105 cv
34.273 255.039 34.289 254.98 34.316 254.926 cv
34.34 254.875 34.371 254.82 34.406 254.766 cv
34.441 254.715 34.484 254.66 34.543 254.598 cv
36.316 252.773 li
36.727 252.355 37.055 251.98 37.305 251.645 cv
37.551 251.316 37.742 251.012 37.875 250.734 cv
38.008 250.461 38.094 250.211 38.141 249.984 cv
38.18 249.762 38.203 249.551 38.203 249.355 cv
38.203 249.16 38.168 248.977 38.102 248.797 cv
38.035 248.625 37.941 248.469 37.816 248.332 cv
37.691 248.203 37.535 248.098 37.348 248.016 cv
37.16 247.941 36.941 247.902 36.695 247.898 cv
36.406 247.902 36.148 247.941 35.922 248.016 cv
35.691 248.098 35.492 248.184 35.32 248.27 cv
35.148 248.363 35.004 248.445 34.887 248.523 cv
34.77 248.602 34.684 248.641 34.633 248.641 cv
34.598 248.641 34.566 248.633 34.543 248.613 cv
34.512 248.598 34.492 248.566 34.477 248.523 cv
34.461 248.484 34.445 248.43 34.438 248.359 cv
34.426 248.293 34.422 248.211 34.426 248.113 cv
34.422 248.047 34.426 247.988 34.434 247.937 cv
34.438 247.887 34.445 247.844 34.457 247.805 cv
34.465 247.77 34.48 247.734 34.5 247.703 cv
34.52 247.672 34.555 247.633 34.613 247.582 cv
34.664 247.535 34.758 247.469 34.895 247.387 cv
35.027 247.305 35.199 247.227 35.402 247.145 cv
35.605 247.066 35.828 246.996 36.074 246.941 cv
36.316 246.887 36.574 246.859 36.848 246.859 cv
37.273 246.859 37.648 246.922 37.973 247.043 cv
38.293 247.164 38.559 247.328 38.773 247.539 cv
38.984 247.75 39.145 247.996 39.25 248.27 cv
39.355 248.551 39.41 248.848 39.41 249.16 cv
39.41 249.449 39.383 249.73 39.332 250.008 cv
39.281 250.293 39.176 250.598 39.016 250.922 cv
38.852 251.25 38.617 251.613 38.313 252.012 cv
38.004 252.414 37.598 252.875 37.094 253.391 cv
35.688 254.859 li
39.547 254.859 li
39.578 254.863 39.613 254.875 39.652 254.891 cv
39.684 254.914 39.715 254.945 39.742 254.984 cv
39.766 255.027 39.785 255.078 39.797 255.137 cv
39.809 255.203 39.813 255.273 39.816 255.352 cv
cp
f
26.379 199.41 mo
40.57 199.41 li
40.57 216.5 li
26.379 216.5 li
cp
0 0 0 0 cmyk
ef
32.754 212.297 mo
32.75 212.387 32.742 212.457 32.73 212.516 cv
32.715 212.578 32.695 212.629 32.676 212.66 cv
32.652 212.699 32.629 212.723 32.598 212.738 cv
32.566 212.754 32.535 212.762 32.508 212.762 cv
27.871 212.762 li
27.836 212.762 27.809 212.754 27.781 212.738 cv
27.754 212.723 27.727 212.699 27.703 212.66 cv
27.676 212.629 27.656 212.578 27.645 212.516 cv
27.629 212.457 27.621 212.387 27.625 212.297 cv
27.621 212.219 27.629 212.145 27.645 212.082 cv
27.656 212.023 27.672 211.977 27.695 211.937 cv
27.711 211.902 27.738 211.871 27.77 211.848 cv
27.801 211.828 27.832 211.82 27.871 211.816 cv
29.723 211.816 li
29.723 205.07 li
28.008 206.09 li
27.918 206.141 27.848 206.168 27.801 206.176 cv
27.746 206.184 27.703 206.176 27.672 206.145 cv
27.637 206.117 27.617 206.066 27.605 205.996 cv
27.594 205.93 27.586 205.844 27.59 205.734 cv
27.586 205.66 27.59 205.594 27.602 205.535 cv
27.605 205.484 27.617 205.437 27.633 205.398 cv
27.645 205.363 27.664 205.332 27.688 205.305 cv
27.711 205.277 27.742 205.25 27.789 205.223 cv
29.832 203.91 li
29.848 203.898 29.867 203.887 29.898 203.879 cv
29.922 203.871 29.957 203.863 30.004 203.852 cv
30.043 203.844 30.094 203.836 30.148 203.832 cv
30.203 203.832 30.27 203.832 30.355 203.828 cv
30.461 203.832 30.555 203.836 30.629 203.844 cv
30.699 203.852 30.754 203.867 30.801 203.883 cv
30.84 203.902 30.867 203.922 30.883 203.945 cv
30.891 203.973 30.898 203.996 30.902 204.02 cv
30.902 211.816 li
32.508 211.816 li
32.543 211.82 32.578 211.828 32.609 211.848 cv
32.641 211.871 32.664 211.902 32.688 211.937 cv
32.703 211.977 32.719 212.023 32.734 212.082 cv
32.742 212.145 32.75 212.219 32.754 212.297 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.191 210.238 mo
40.188 210.391 40.164 210.512 40.121 210.598 cv
40.074 210.687 40.012 210.73 39.93 210.727 cv
38.93 210.727 li
38.93 212.59 li
38.93 212.629 38.918 212.66 38.902 212.684 cv
38.879 212.711 38.848 212.73 38.805 212.75 cv
38.754 212.766 38.691 212.777 38.621 212.789 cv
38.543 212.797 38.449 212.801 38.332 212.805 cv
38.215 212.801 38.117 212.797 38.047 212.789 cv
37.969 212.777 37.91 212.766 37.867 212.75 cv
37.82 212.73 37.789 212.711 37.773 212.684 cv
37.754 212.66 37.746 212.629 37.75 212.59 cv
37.75 210.727 li
34.121 210.727 li
34.063 210.73 34.02 210.723 33.984 210.707 cv
33.949 210.695 33.914 210.668 33.887 210.629 cv
33.855 210.594 33.836 210.543 33.824 210.473 cv
33.813 210.406 33.809 210.316 33.809 210.203 cv
33.809 210.121 33.809 210.043 33.816 209.973 cv
33.816 209.902 33.828 209.84 33.844 209.785 cv
33.855 209.73 33.871 209.676 33.898 209.621 cv
33.918 209.566 33.945 209.512 33.98 209.449 cv
37.141 204.062 li
37.16 204.027 37.195 203.996 37.242 203.969 cv
37.285 203.941 37.34 203.918 37.414 203.898 cv
37.48 203.883 37.566 203.871 37.672 203.859 cv
37.773 203.855 37.895 203.852 38.035 203.848 cv
38.184 203.852 38.32 203.855 38.438 203.867 cv
38.551 203.879 38.641 203.895 38.715 203.91 cv
38.781 203.93 38.836 203.953 38.875 203.984 cv
38.91 204.016 38.93 204.051 38.93 204.09 cv
38.93 209.754 li
39.93 209.754 li
40.004 209.758 40.066 209.797 40.117 209.875 cv
40.164 209.957 40.188 210.078 40.191 210.238 cv
cp
37.75 204.887 mo
37.738 204.887 li
34.887 209.754 li
37.75 209.754 li
cp
f
26.379 156.309 mo
40.57 156.309 li
40.57 173.399 li
26.379 173.399 li
cp
0 0 0 0 cmyk
ef
32.754 169.195 mo
32.75 169.285 32.742 169.355 32.73 169.414 cv
32.715 169.477 32.695 169.527 32.676 169.559 cv
32.652 169.598 32.629 169.621 32.598 169.637 cv
32.566 169.652 32.535 169.66 32.508 169.66 cv
27.871 169.66 li
27.836 169.66 27.809 169.652 27.781 169.637 cv
27.754 169.621 27.727 169.598 27.703 169.559 cv
27.676 169.527 27.656 169.477 27.645 169.414 cv
27.629 169.355 27.621 169.285 27.625 169.195 cv
27.621 169.117 27.629 169.043 27.645 168.98 cv
27.656 168.922 27.672 168.875 27.695 168.836 cv
27.711 168.801 27.738 168.77 27.77 168.746 cv
27.801 168.727 27.832 168.719 27.871 168.715 cv
29.723 168.715 li
29.723 161.969 li
28.008 162.988 li
27.918 163.039 27.848 163.066 27.801 163.074 cv
27.746 163.082 27.703 163.074 27.672 163.043 cv
27.637 163.016 27.617 162.965 27.605 162.895 cv
27.594 162.828 27.586 162.742 27.59 162.633 cv
27.586 162.559 27.59 162.492 27.602 162.434 cv
27.605 162.383 27.617 162.336 27.633 162.297 cv
27.645 162.262 27.664 162.23 27.688 162.203 cv
27.711 162.176 27.742 162.148 27.789 162.121 cv
29.832 160.809 li
29.848 160.797 29.867 160.785 29.898 160.777 cv
29.922 160.77 29.957 160.762 30.004 160.75 cv
30.043 160.742 30.094 160.734 30.148 160.73 cv
30.203 160.73 30.27 160.73 30.355 160.727 cv
30.461 160.73 30.555 160.734 30.629 160.742 cv
30.699 160.75 30.754 160.766 30.801 160.781 cv
30.84 160.801 30.867 160.82 30.883 160.844 cv
30.891 160.871 30.898 160.895 30.902 160.918 cv
30.902 168.715 li
32.508 168.715 li
32.543 168.719 32.578 168.727 32.609 168.746 cv
32.641 168.77 32.664 168.801 32.688 168.836 cv
32.703 168.875 32.719 168.922 32.734 168.98 cv
32.742 169.043 32.75 169.117 32.754 169.195 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.043 166.789 mo
40.043 167.18 39.98 167.559 39.863 167.918 cv
39.738 168.285 39.555 168.602 39.313 168.875 cv
39.063 169.152 38.75 169.375 38.375 169.539 cv
37.992 169.707 37.547 169.789 37.031 169.789 cv
36.66 169.789 36.332 169.746 36.051 169.652 cv
35.766 169.566 35.52 169.434 35.309 169.262 cv
35.098 169.094 34.922 168.887 34.785 168.641 cv
34.645 168.395 34.531 168.113 34.449 167.797 cv
34.363 167.484 34.305 167.141 34.27 166.762 cv
34.23 166.391 34.211 165.988 34.215 165.555 cv
34.211 165.176 34.23 164.793 34.273 164.402 cv
34.313 164.02 34.387 163.645 34.492 163.277 cv
34.598 162.918 34.742 162.578 34.922 162.262 cv
35.102 161.945 35.328 161.668 35.602 161.434 cv
35.875 161.199 36.199 161.012 36.578 160.871 cv
36.957 160.734 37.398 160.668 37.902 160.664 cv
38.07 160.668 38.242 160.676 38.414 160.695 cv
38.586 160.719 38.746 160.75 38.895 160.781 cv
39.043 160.82 39.164 160.855 39.266 160.895 cv
39.363 160.934 39.43 160.969 39.465 160.992 cv
39.492 161.02 39.516 161.047 39.535 161.074 cv
39.551 161.105 39.566 161.137 39.574 161.172 cv
39.582 161.207 39.586 161.246 39.594 161.289 cv
39.594 161.332 39.598 161.387 39.602 161.449 cv
39.598 161.535 39.598 161.605 39.598 161.66 cv
39.594 161.723 39.582 161.77 39.57 161.805 cv
39.551 161.844 39.531 161.871 39.508 161.887 cv
39.48 161.906 39.449 161.914 39.41 161.914 cv
39.359 161.914 39.289 161.898 39.203 161.867 cv
39.113 161.836 39.008 161.801 38.887 161.758 cv
38.762 161.723 38.613 161.687 38.438 161.652 cv
38.262 161.625 38.059 161.609 37.828 161.605 cv
37.398 161.609 37.031 161.695 36.727 161.867 cv
36.422 162.039 36.172 162.273 35.977 162.566 cv
35.781 162.859 35.637 163.199 35.547 163.582 cv
35.449 163.973 35.395 164.375 35.387 164.793 cv
35.504 164.727 35.641 164.66 35.789 164.59 cv
35.938 164.523 36.098 164.461 36.273 164.402 cv
36.449 164.352 36.637 164.305 36.832 164.27 cv
37.027 164.238 37.238 164.223 37.465 164.219 cv
37.941 164.223 38.344 164.289 38.676 164.414 cv
39.004 164.547 39.27 164.727 39.477 164.957 cv
39.676 165.187 39.82 165.457 39.91 165.77 cv
39.996 166.082 40.043 166.422 40.043 166.789 cv
cp
38.848 166.898 mo
38.848 166.637 38.82 166.395 38.77 166.176 cv
38.715 165.961 38.625 165.777 38.504 165.621 cv
38.379 165.473 38.215 165.355 38.012 165.273 cv
37.801 165.191 37.547 165.148 37.25 165.148 cv
37.078 165.148 36.91 165.164 36.742 165.195 cv
36.57 165.227 36.406 165.27 36.25 165.316 cv
36.09 165.371 35.941 165.434 35.801 165.504 cv
35.656 165.578 35.523 165.652 35.406 165.73 cv
35.402 166.324 35.441 166.82 35.52 167.215 cv
35.594 167.613 35.703 167.93 35.848 168.168 cv
35.992 168.41 36.172 168.582 36.387 168.684 cv
36.602 168.789 36.852 168.84 37.141 168.836 cv
37.43 168.84 37.684 168.785 37.898 168.672 cv
38.113 168.566 38.289 168.418 38.434 168.23 cv
38.574 168.047 38.68 167.84 38.746 167.609 cv
38.813 167.379 38.848 167.145 38.848 166.898 cv
cp
f
26.379 113.219 mo
40.57 113.219 li
40.57 130.309 li
26.379 130.309 li
cp
0 0 0 0 cmyk
ef
32.754 126.086 mo
32.75 126.176 32.742 126.246 32.73 126.305 cv
32.715 126.367 32.695 126.418 32.676 126.449 cv
32.652 126.488 32.629 126.512 32.598 126.527 cv
32.566 126.543 32.535 126.551 32.508 126.551 cv
27.871 126.551 li
27.836 126.551 27.809 126.543 27.781 126.527 cv
27.754 126.512 27.727 126.488 27.703 126.449 cv
27.676 126.418 27.656 126.367 27.645 126.305 cv
27.629 126.246 27.621 126.176 27.625 126.086 cv
27.621 126.008 27.629 125.934 27.645 125.871 cv
27.656 125.812 27.672 125.766 27.695 125.727 cv
27.711 125.691 27.738 125.66 27.77 125.637 cv
27.801 125.617 27.832 125.609 27.871 125.605 cv
29.723 125.605 li
29.723 118.859 li
28.008 119.879 li
27.918 119.93 27.848 119.957 27.801 119.965 cv
27.746 119.973 27.703 119.965 27.672 119.934 cv
27.637 119.906 27.617 119.855 27.605 119.785 cv
27.594 119.719 27.586 119.633 27.59 119.523 cv
27.586 119.449 27.59 119.383 27.602 119.324 cv
27.605 119.273 27.617 119.227 27.633 119.187 cv
27.645 119.152 27.664 119.121 27.688 119.094 cv
27.711 119.066 27.742 119.039 27.789 119.012 cv
29.832 117.699 li
29.848 117.687 29.867 117.676 29.898 117.668 cv
29.922 117.66 29.957 117.652 30.004 117.641 cv
30.043 117.633 30.094 117.625 30.148 117.621 cv
30.203 117.621 30.27 117.621 30.355 117.617 cv
30.461 117.621 30.555 117.625 30.629 117.633 cv
30.699 117.641 30.754 117.656 30.801 117.672 cv
30.84 117.691 30.867 117.711 30.883 117.734 cv
30.891 117.762 30.898 117.785 30.902 117.809 cv
30.902 125.605 li
32.508 125.605 li
32.543 125.609 32.578 125.617 32.609 125.637 cv
32.641 125.66 32.664 125.691 32.688 125.727 cv
32.703 125.766 32.719 125.812 32.734 125.871 cv
32.742 125.934 32.75 126.008 32.754 126.086 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.02 124.273 mo
40.02 124.66 39.949 125.004 39.813 125.301 cv
39.676 125.605 39.48 125.855 39.223 126.059 cv
38.965 126.266 38.645 126.422 38.266 126.523 cv
37.883 126.629 37.449 126.68 36.965 126.68 cv
36.504 126.68 36.094 126.633 35.734 126.539 cv
35.371 126.445 35.066 126.305 34.816 126.113 cv
34.566 125.93 34.375 125.699 34.242 125.422 cv
34.109 125.148 34.043 124.836 34.043 124.48 cv
34.043 124.207 34.086 123.949 34.18 123.715 cv
34.266 123.48 34.398 123.266 34.574 123.07 cv
34.742 122.875 34.953 122.691 35.207 122.516 cv
35.457 122.348 35.742 122.184 36.059 122.027 cv
35.785 121.887 35.543 121.738 35.332 121.578 cv
35.121 121.422 34.941 121.25 34.797 121.062 cv
34.648 120.879 34.539 120.684 34.465 120.473 cv
34.387 120.266 34.348 120.035 34.352 119.785 cv
34.348 119.477 34.402 119.184 34.52 118.91 cv
34.629 118.641 34.801 118.406 35.027 118.203 cv
35.254 118.004 35.539 117.844 35.891 117.727 cv
36.234 117.609 36.645 117.551 37.113 117.551 cv
37.559 117.551 37.945 117.605 38.273 117.711 cv
38.602 117.82 38.871 117.965 39.082 118.148 cv
39.293 118.336 39.449 118.555 39.555 118.805 cv
39.652 119.055 39.703 119.324 39.707 119.613 cv
39.703 119.848 39.664 120.074 39.594 120.285 cv
39.516 120.504 39.406 120.707 39.258 120.895 cv
39.109 121.09 38.93 121.27 38.719 121.434 cv
38.508 121.605 38.266 121.762 37.992 121.902 cv
38.313 122.066 38.598 122.23 38.855 122.398 cv
39.105 122.566 39.32 122.746 39.496 122.941 cv
39.664 123.137 39.793 123.344 39.887 123.559 cv
39.973 123.777 40.02 124.016 40.02 124.273 cv
cp
38.539 119.723 mo
38.535 119.535 38.504 119.359 38.438 119.203 cv
38.371 119.047 38.273 118.914 38.148 118.805 cv
38.02 118.695 37.859 118.613 37.672 118.555 cv
37.477 118.5 37.262 118.473 37.023 118.469 cv
36.527 118.473 36.152 118.582 35.902 118.805 cv
35.645 119.031 35.52 119.34 35.523 119.723 cv
35.52 119.902 35.551 120.066 35.613 120.219 cv
35.676 120.375 35.77 120.52 35.902 120.656 cv
36.027 120.793 36.191 120.926 36.395 121.055 cv
36.59 121.187 36.828 121.324 37.105 121.465 cv
37.566 121.23 37.922 120.969 38.168 120.676 cv
38.414 120.391 38.535 120.074 38.539 119.723 cv
cp
38.828 124.398 mo
38.824 124.191 38.785 124 38.711 123.828 cv
38.629 123.66 38.512 123.5 38.355 123.348 cv
38.199 123.199 38 123.055 37.766 122.914 cv
37.527 122.777 37.258 122.633 36.949 122.48 cv
36.66 122.625 36.406 122.766 36.191 122.906 cv
35.973 123.047 35.793 123.195 35.656 123.344 cv
35.516 123.5 35.41 123.656 35.34 123.82 cv
35.266 123.988 35.23 124.172 35.234 124.371 cv
35.23 124.816 35.383 125.16 35.691 125.398 cv
35.992 125.645 36.445 125.766 37.051 125.762 cv
37.633 125.766 38.078 125.645 38.379 125.395 cv
38.676 125.152 38.824 124.82 38.828 124.398 cv
cp
f
26.379 70.1209 mo
40.57 70.1209 li
40.57 87.2109 li
26.379 87.2109 li
cp
0 0 0 0 cmyk
ef
32.734 82.941 mo
32.73 83.027 32.727 83.102 32.715 83.164 cv
32.703 83.23 32.688 83.285 32.668 83.324 cv
32.645 83.371 32.617 83.402 32.586 83.418 cv
32.551 83.441 32.512 83.449 32.473 83.449 cv
27.57 83.449 li
27.508 83.449 27.449 83.441 27.402 83.426 cv
27.352 83.41 27.313 83.387 27.277 83.348 cv
27.242 83.316 27.215 83.262 27.203 83.191 cv
27.184 83.121 27.176 83.035 27.18 82.934 cv
27.176 82.844 27.18 82.766 27.188 82.695 cv
27.191 82.629 27.207 82.57 27.234 82.516 cv
27.258 82.465 27.289 82.41 27.324 82.355 cv
27.359 82.305 27.402 82.25 27.461 82.187 cv
29.234 80.363 li
29.645 79.945 29.973 79.57 30.223 79.234 cv
30.469 78.906 30.66 78.602 30.793 78.324 cv
30.926 78.051 31.012 77.801 31.059 77.574 cv
31.098 77.352 31.121 77.141 31.121 76.945 cv
31.121 76.75 31.086 76.566 31.02 76.387 cv
30.953 76.215 30.859 76.059 30.734 75.922 cv
30.609 75.793 30.453 75.687 30.266 75.605 cv
30.078 75.531 29.859 75.492 29.613 75.488 cv
29.324 75.492 29.066 75.531 28.84 75.605 cv
28.609 75.687 28.41 75.773 28.238 75.859 cv
28.066 75.953 27.922 76.035 27.805 76.113 cv
27.688 76.191 27.602 76.23 27.551 76.23 cv
27.516 76.23 27.484 76.223 27.461 76.203 cv
27.43 76.187 27.41 76.156 27.395 76.113 cv
27.379 76.074 27.363 76.02 27.355 75.949 cv
27.344 75.883 27.34 75.801 27.344 75.703 cv
27.34 75.637 27.344 75.578 27.352 75.527 cv
27.355 75.477 27.363 75.434 27.375 75.395 cv
27.383 75.359 27.398 75.324 27.418 75.293 cv
27.438 75.262 27.473 75.223 27.531 75.172 cv
27.582 75.125 27.676 75.059 27.813 74.977 cv
27.945 74.895 28.117 74.816 28.32 74.734 cv
28.523 74.656 28.746 74.586 28.992 74.531 cv
29.234 74.477 29.492 74.449 29.766 74.449 cv
30.191 74.449 30.566 74.512 30.891 74.633 cv
31.211 74.754 31.477 74.918 31.691 75.129 cv
31.902 75.34 32.063 75.586 32.168 75.859 cv
32.273 76.141 32.328 76.437 32.328 76.75 cv
32.328 77.039 32.301 77.32 32.25 77.598 cv
32.199 77.883 32.094 78.187 31.934 78.512 cv
31.77 78.84 31.535 79.203 31.23 79.602 cv
30.922 80.004 30.516 80.465 30.012 80.98 cv
28.605 82.449 li
32.465 82.449 li
32.496 82.453 32.531 82.465 32.57 82.48 cv
32.602 82.504 32.633 82.535 32.66 82.574 cv
32.684 82.617 32.703 82.668 32.715 82.727 cv
32.727 82.793 32.73 82.863 32.734 82.941 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.109 78.992 mo
40.105 79.676 40.055 80.297 39.949 80.859 cv
39.84 81.422 39.66 81.906 39.414 82.309 cv
39.16 82.715 38.832 83.027 38.434 83.246 cv
38.027 83.469 37.535 83.578 36.949 83.578 cv
36.391 83.578 35.918 83.48 35.539 83.281 cv
35.156 83.086 34.852 82.793 34.617 82.406 cv
34.383 82.02 34.215 81.547 34.121 80.98 cv
34.02 80.418 33.973 79.77 33.973 79.035 cv
33.973 78.363 34.027 77.742 34.137 77.176 cv
34.246 76.613 34.422 76.129 34.672 75.723 cv
34.914 75.32 35.238 75.008 35.645 74.781 cv
36.043 74.562 36.539 74.449 37.129 74.449 cv
37.688 74.449 38.16 74.551 38.543 74.746 cv
38.926 74.949 39.23 75.242 39.465 75.625 cv
39.695 76.016 39.863 76.488 39.961 77.051 cv
40.059 77.613 40.105 78.262 40.109 78.992 cv
cp
38.902 79.074 mo
38.898 78.633 38.883 78.234 38.855 77.883 cv
38.82 77.531 38.773 77.223 38.715 76.953 cv
38.648 76.684 38.57 76.453 38.473 76.258 cv
38.375 76.066 38.258 75.906 38.121 75.777 cv
37.98 75.652 37.82 75.559 37.648 75.5 cv
37.469 75.445 37.273 75.418 37.059 75.414 cv
36.668 75.418 36.352 75.508 36.113 75.691 cv
35.867 75.875 35.676 76.129 35.539 76.445 cv
35.398 76.766 35.305 77.137 35.254 77.566 cv
35.203 77.996 35.18 78.461 35.18 78.953 cv
35.18 79.617 35.211 80.18 35.281 80.641 cv
35.348 81.109 35.457 81.488 35.609 81.777 cv
35.754 82.074 35.945 82.285 36.176 82.414 cv
36.406 82.551 36.688 82.617 37.02 82.613 cv
37.273 82.617 37.496 82.578 37.691 82.492 cv
37.883 82.414 38.051 82.293 38.191 82.137 cv
38.332 81.984 38.445 81.801 38.539 81.586 cv
38.625 81.371 38.699 81.133 38.758 80.871 cv
38.809 80.613 38.848 80.332 38.871 80.027 cv
38.891 79.723 38.898 79.406 38.902 79.074 cv
cp
f
26.379 27.0309 mo
40.57 27.0309 li
40.57 44.1209 li
26.379 44.1209 li
cp
0 0 0 0 cmyk
ef
32.742 39.863 mo
32.738 39.949 32.734 40.023 32.727 40.086 cv
32.715 40.152 32.699 40.207 32.68 40.246 cv
32.656 40.293 32.625 40.324 32.594 40.34 cv
32.555 40.363 32.52 40.371 32.484 40.371 cv
27.574 40.371 li
27.508 40.371 27.449 40.363 27.402 40.348 cv
27.352 40.332 27.313 40.309 27.281 40.27 cv
27.246 40.238 27.219 40.184 27.203 40.113 cv
27.184 40.043 27.176 39.957 27.18 39.855 cv
27.176 39.766 27.18 39.687 27.191 39.617 cv
27.195 39.551 27.211 39.488 27.238 39.434 cv
27.258 39.383 27.289 39.332 27.324 39.277 cv
27.359 39.227 27.406 39.172 27.465 39.109 cv
29.242 37.281 li
29.648 36.863 29.977 36.484 30.227 36.148 cv
30.469 35.816 30.66 35.512 30.801 35.234 cv
30.934 34.965 31.023 34.715 31.066 34.488 cv
31.105 34.262 31.125 34.051 31.129 33.855 cv
31.125 33.66 31.094 33.477 31.027 33.297 cv
30.961 33.125 30.863 32.969 30.742 32.832 cv
30.613 32.703 30.457 32.598 30.27 32.516 cv
30.078 32.441 29.863 32.402 29.621 32.398 cv
29.332 32.402 29.07 32.441 28.844 32.516 cv
28.609 32.598 28.41 32.684 28.242 32.77 cv
28.066 32.863 27.922 32.945 27.809 33.023 cv
27.691 33.102 27.605 33.141 27.551 33.141 cv
27.516 33.141 27.488 33.133 27.465 33.113 cv
27.438 33.098 27.414 33.066 27.398 33.023 cv
27.379 32.984 27.367 32.93 27.359 32.859 cv
27.352 32.789 27.348 32.707 27.348 32.609 cv
27.348 32.543 27.348 32.484 27.352 32.434 cv
27.355 32.383 27.363 32.34 27.375 32.301 cv
27.387 32.27 27.402 32.234 27.422 32.199 cv
27.438 32.172 27.473 32.133 27.531 32.082 cv
27.582 32.035 27.68 31.969 27.816 31.883 cv
27.949 31.801 28.117 31.719 28.324 31.641 cv
28.523 31.562 28.746 31.496 28.996 31.437 cv
29.238 31.387 29.496 31.359 29.77 31.355 cv
30.195 31.359 30.574 31.422 30.898 31.539 cv
31.219 31.664 31.484 31.828 31.703 32.035 cv
31.914 32.25 32.074 32.496 32.18 32.77 cv
32.285 33.051 32.34 33.348 32.34 33.66 cv
32.34 33.949 32.313 34.23 32.262 34.512 cv
32.211 34.793 32.105 35.098 31.941 35.426 cv
31.777 35.754 31.543 36.117 31.238 36.516 cv
30.934 36.918 30.523 37.379 30.016 37.898 cv
28.609 39.367 li
32.477 39.367 li
32.508 39.371 32.543 39.379 32.582 39.398 cv
32.613 39.422 32.645 39.453 32.672 39.492 cv
32.695 39.535 32.715 39.59 32.727 39.648 cv
32.734 39.711 32.738 39.781 32.742 39.863 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.824 39.863 mo
39.82 39.949 39.816 40.023 39.809 40.086 cv
39.797 40.152 39.781 40.207 39.762 40.246 cv
39.738 40.293 39.707 40.324 39.676 40.34 cv
39.637 40.363 39.602 40.371 39.566 40.371 cv
34.656 40.371 li
34.59 40.371 34.531 40.363 34.484 40.348 cv
34.434 40.332 34.395 40.309 34.363 40.27 cv
34.328 40.238 34.301 40.184 34.285 40.113 cv
34.266 40.043 34.258 39.957 34.262 39.855 cv
34.258 39.766 34.262 39.687 34.273 39.617 cv
34.277 39.551 34.293 39.488 34.32 39.434 cv
34.34 39.383 34.371 39.332 34.406 39.277 cv
34.441 39.227 34.488 39.172 34.547 39.109 cv
36.324 37.281 li
36.73 36.863 37.059 36.484 37.309 36.148 cv
37.551 35.816 37.742 35.512 37.883 35.234 cv
38.016 34.965 38.105 34.715 38.148 34.488 cv
38.188 34.262 38.207 34.051 38.211 33.855 cv
38.207 33.66 38.176 33.477 38.109 33.297 cv
38.043 33.125 37.945 32.969 37.824 32.832 cv
37.695 32.703 37.539 32.598 37.352 32.516 cv
37.16 32.441 36.945 32.402 36.703 32.398 cv
36.414 32.402 36.152 32.441 35.926 32.516 cv
35.691 32.598 35.492 32.684 35.324 32.77 cv
35.148 32.863 35.004 32.945 34.891 33.023 cv
34.773 33.102 34.688 33.141 34.633 33.141 cv
34.598 33.141 34.57 33.133 34.547 33.113 cv
34.52 33.098 34.496 33.066 34.48 33.023 cv
34.461 32.984 34.449 32.93 34.441 32.859 cv
34.434 32.789 34.43 32.707 34.43 32.609 cv
34.43 32.543 34.43 32.484 34.434 32.434 cv
34.438 32.383 34.445 32.34 34.457 32.301 cv
34.469 32.27 34.484 32.234 34.504 32.199 cv
34.52 32.172 34.555 32.133 34.613 32.082 cv
34.664 32.035 34.762 31.969 34.898 31.883 cv
35.031 31.801 35.199 31.719 35.406 31.641 cv
35.605 31.562 35.828 31.496 36.078 31.437 cv
36.32 31.387 36.578 31.359 36.852 31.355 cv
37.277 31.359 37.656 31.422 37.98 31.539 cv
38.301 31.664 38.566 31.828 38.785 32.035 cv
38.996 32.25 39.156 32.496 39.262 32.77 cv
39.367 33.051 39.422 33.348 39.422 33.66 cv
39.422 33.949 39.395 34.23 39.344 34.512 cv
39.293 34.793 39.188 35.098 39.023 35.426 cv
38.859 35.754 38.625 36.117 38.32 36.516 cv
38.016 36.918 37.605 37.379 37.098 37.898 cv
35.691 39.367 li
39.559 39.367 li
39.59 39.371 39.625 39.379 39.664 39.398 cv
39.695 39.422 39.727 39.453 39.754 39.492 cv
39.777 39.535 39.797 39.59 39.809 39.648 cv
39.816 39.711 39.82 39.781 39.824 39.863 cv
cp
f
56.395 532.215 mo
56.391 532.305 56.383 532.375 56.371 532.434 cv
56.355 532.496 56.336 532.547 56.316 532.578 cv
56.293 532.617 56.27 532.641 56.238 532.656 cv
56.207 532.672 56.176 532.68 56.148 532.68 cv
51.512 532.68 li
51.477 532.68 51.449 532.672 51.422 532.656 cv
51.395 532.641 51.367 532.617 51.344 532.578 cv
51.316 532.547 51.297 532.496 51.285 532.434 cv
51.27 532.375 51.262 532.305 51.266 532.215 cv
51.262 532.137 51.27 532.062 51.285 532 cv
51.297 531.941 51.313 531.895 51.336 531.855 cv
51.352 531.82 51.379 531.789 51.41 531.766 cv
51.441 531.746 51.473 531.738 51.512 531.734 cv
53.363 531.734 li
53.363 524.988 li
51.648 526.008 li
51.559 526.059 51.488 526.086 51.441 526.094 cv
51.387 526.102 51.344 526.094 51.313 526.062 cv
51.277 526.035 51.258 525.984 51.246 525.914 cv
51.234 525.848 51.227 525.762 51.23 525.652 cv
51.227 525.578 51.23 525.512 51.242 525.453 cv
51.246 525.402 51.258 525.355 51.273 525.316 cv
51.285 525.281 51.305 525.25 51.328 525.223 cv
51.352 525.195 51.383 525.168 51.43 525.141 cv
53.473 523.828 li
53.488 523.816 53.508 523.805 53.539 523.797 cv
53.563 523.789 53.598 523.781 53.645 523.77 cv
53.684 523.762 53.734 523.754 53.789 523.75 cv
53.844 523.75 53.91 523.75 53.996 523.746 cv
54.102 523.75 54.195 523.754 54.27 523.762 cv
54.34 523.77 54.395 523.785 54.441 523.801 cv
54.48 523.82 54.508 523.84 54.523 523.863 cv
54.531 523.891 54.539 523.914 54.543 523.937 cv
54.543 531.734 li
56.148 531.734 li
56.184 531.738 56.219 531.746 56.25 531.766 cv
56.281 531.789 56.305 531.82 56.328 531.855 cv
56.344 531.895 56.359 531.941 56.375 532 cv
56.383 532.062 56.391 532.137 56.395 532.215 cv
cp
f
129.145 532.172 mo
129.141 532.258 129.137 532.332 129.125 532.395 cv
129.113 532.461 129.098 532.516 129.078 532.555 cv
129.055 532.602 129.027 532.633 128.996 532.648 cv
128.961 532.672 128.922 532.68 128.883 532.68 cv
123.98 532.68 li
123.918 532.68 123.859 532.672 123.813 532.656 cv
123.762 532.641 123.723 532.617 123.688 532.578 cv
123.652 532.547 123.625 532.492 123.613 532.422 cv
123.594 532.352 123.586 532.266 123.59 532.164 cv
123.586 532.074 123.59 531.996 123.598 531.926 cv
123.602 531.859 123.617 531.801 123.645 531.746 cv
123.668 531.695 123.699 531.641 123.734 531.586 cv
123.77 531.535 123.813 531.48 123.871 531.418 cv
125.645 529.594 li
126.055 529.176 126.383 528.801 126.633 528.465 cv
126.879 528.137 127.07 527.832 127.203 527.555 cv
127.336 527.281 127.422 527.031 127.469 526.805 cv
127.508 526.582 127.531 526.371 127.531 526.176 cv
127.531 525.98 127.496 525.797 127.43 525.617 cv
127.363 525.445 127.27 525.289 127.145 525.152 cv
127.02 525.023 126.863 524.918 126.676 524.836 cv
126.488 524.762 126.27 524.723 126.023 524.719 cv
125.734 524.723 125.477 524.762 125.25 524.836 cv
125.02 524.918 124.82 525.004 124.648 525.09 cv
124.477 525.184 124.332 525.266 124.215 525.344 cv
124.098 525.422 124.012 525.461 123.961 525.461 cv
123.926 525.461 123.895 525.453 123.871 525.434 cv
123.84 525.418 123.82 525.387 123.805 525.344 cv
123.789 525.305 123.773 525.25 123.766 525.18 cv
123.754 525.113 123.75 525.031 123.754 524.934 cv
123.75 524.867 123.754 524.809 123.762 524.758 cv
123.766 524.707 123.773 524.664 123.785 524.625 cv
123.793 524.59 123.809 524.555 123.828 524.523 cv
123.848 524.492 123.883 524.453 123.941 524.402 cv
123.992 524.355 124.086 524.289 124.223 524.207 cv
124.355 524.125 124.527 524.047 124.73 523.965 cv
124.934 523.887 125.156 523.816 125.402 523.762 cv
125.645 523.707 125.902 523.68 126.176 523.68 cv
126.602 523.68 126.977 523.742 127.301 523.863 cv
127.621 523.984 127.887 524.148 128.102 524.359 cv
128.313 524.57 128.473 524.816 128.578 525.09 cv
128.684 525.371 128.738 525.668 128.738 525.98 cv
128.738 526.27 128.711 526.551 128.66 526.828 cv
128.609 527.113 128.504 527.418 128.344 527.742 cv
128.18 528.07 127.945 528.434 127.641 528.832 cv
127.332 529.234 126.926 529.695 126.422 530.211 cv
125.016 531.68 li
128.875 531.68 li
128.906 531.684 128.941 531.695 128.98 531.711 cv
129.012 531.734 129.043 531.766 129.07 531.805 cv
129.094 531.848 129.113 531.898 129.125 531.957 cv
129.137 532.023 129.141 532.094 129.145 532.172 cv
cp
f
202.289 530.156 mo
202.285 530.309 202.262 530.43 202.219 530.516 cv
202.172 530.605 202.109 530.648 202.027 530.645 cv
201.027 530.645 li
201.027 532.508 li
201.027 532.547 201.016 532.578 201 532.602 cv
200.977 532.629 200.945 532.648 200.902 532.668 cv
200.852 532.684 200.789 532.695 200.719 532.707 cv
200.641 532.715 200.547 532.719 200.43 532.723 cv
200.313 532.719 200.215 532.715 200.145 532.707 cv
200.066 532.695 200.008 532.684 199.965 532.668 cv
199.918 532.648 199.887 532.629 199.871 532.602 cv
199.852 532.578 199.844 532.547 199.848 532.508 cv
199.848 530.645 li
196.219 530.645 li
196.16 530.648 196.117 530.641 196.082 530.625 cv
196.047 530.613 196.012 530.586 195.984 530.547 cv
195.953 530.512 195.934 530.461 195.922 530.391 cv
195.91 530.324 195.906 530.234 195.906 530.121 cv
195.906 530.039 195.906 529.961 195.914 529.891 cv
195.914 529.82 195.926 529.758 195.941 529.703 cv
195.953 529.648 195.969 529.594 195.996 529.539 cv
196.016 529.484 196.043 529.43 196.078 529.367 cv
199.238 523.98 li
199.258 523.945 199.293 523.914 199.34 523.887 cv
199.383 523.859 199.438 523.836 199.512 523.816 cv
199.578 523.801 199.664 523.789 199.77 523.777 cv
199.871 523.773 199.992 523.77 200.133 523.766 cv
200.281 523.77 200.418 523.773 200.535 523.785 cv
200.648 523.797 200.738 523.812 200.813 523.828 cv
200.879 523.848 200.934 523.871 200.973 523.902 cv
201.008 523.934 201.027 523.969 201.027 524.008 cv
201.027 529.672 li
202.027 529.672 li
202.102 529.676 202.164 529.715 202.215 529.793 cv
202.262 529.875 202.285 529.996 202.289 530.156 cv
cp
199.848 524.805 mo
199.836 524.805 li
196.984 529.672 li
199.848 529.672 li
cp
f
274.934 529.809 mo
274.934 530.199 274.871 530.578 274.754 530.937 cv
274.629 531.305 274.445 531.621 274.203 531.895 cv
273.953 532.172 273.641 532.395 273.266 532.559 cv
272.883 532.727 272.438 532.809 271.922 532.809 cv
271.551 532.809 271.223 532.766 270.941 532.672 cv
270.656 532.586 270.41 532.453 270.199 532.281 cv
269.988 532.113 269.813 531.906 269.676 531.66 cv
269.535 531.414 269.422 531.133 269.34 530.816 cv
269.254 530.504 269.195 530.16 269.16 529.781 cv
269.121 529.41 269.102 529.008 269.105 528.574 cv
269.102 528.195 269.121 527.812 269.164 527.422 cv
269.203 527.039 269.277 526.664 269.383 526.297 cv
269.488 525.937 269.633 525.598 269.813 525.281 cv
269.992 524.965 270.219 524.687 270.492 524.453 cv
270.766 524.219 271.09 524.031 271.469 523.891 cv
271.848 523.754 272.289 523.687 272.793 523.684 cv
272.961 523.687 273.133 523.695 273.305 523.715 cv
273.477 523.738 273.637 523.77 273.785 523.801 cv
273.934 523.84 274.055 523.875 274.156 523.914 cv
274.254 523.953 274.32 523.988 274.355 524.012 cv
274.383 524.039 274.406 524.066 274.426 524.094 cv
274.441 524.125 274.457 524.156 274.465 524.191 cv
274.473 524.227 274.477 524.266 274.484 524.309 cv
274.484 524.352 274.488 524.406 274.492 524.469 cv
274.488 524.555 274.488 524.625 274.488 524.68 cv
274.484 524.742 274.473 524.789 274.461 524.824 cv
274.441 524.863 274.422 524.891 274.398 524.906 cv
274.371 524.926 274.34 524.934 274.301 524.934 cv
274.25 524.934 274.18 524.918 274.094 524.887 cv
274.004 524.855 273.898 524.82 273.777 524.777 cv
273.652 524.742 273.504 524.707 273.328 524.672 cv
273.152 524.645 272.949 524.629 272.719 524.625 cv
272.289 524.629 271.922 524.715 271.617 524.887 cv
271.313 525.059 271.063 525.293 270.867 525.586 cv
270.672 525.879 270.527 526.219 270.438 526.602 cv
270.34 526.992 270.285 527.395 270.277 527.812 cv
270.395 527.746 270.531 527.68 270.68 527.609 cv
270.828 527.543 270.988 527.48 271.164 527.422 cv
271.34 527.371 271.527 527.324 271.723 527.289 cv
271.918 527.258 272.129 527.242 272.355 527.238 cv
272.832 527.242 273.234 527.309 273.566 527.434 cv
273.895 527.566 274.16 527.746 274.367 527.977 cv
274.566 528.207 274.711 528.477 274.801 528.789 cv
274.887 529.102 274.934 529.441 274.934 529.809 cv
cp
273.738 529.918 mo
273.738 529.656 273.711 529.414 273.66 529.195 cv
273.605 528.98 273.516 528.797 273.395 528.641 cv
273.27 528.492 273.105 528.375 272.902 528.293 cv
272.691 528.211 272.438 528.168 272.141 528.168 cv
271.969 528.168 271.801 528.184 271.633 528.215 cv
271.461 528.246 271.297 528.289 271.141 528.336 cv
270.98 528.391 270.832 528.453 270.691 528.523 cv
270.547 528.598 270.414 528.672 270.297 528.75 cv
270.293 529.344 270.332 529.84 270.41 530.234 cv
270.484 530.633 270.594 530.949 270.738 531.187 cv
270.883 531.43 271.063 531.602 271.277 531.703 cv
271.492 531.809 271.742 531.859 272.031 531.855 cv
272.32 531.859 272.574 531.805 272.789 531.691 cv
273.004 531.586 273.18 531.437 273.324 531.25 cv
273.465 531.066 273.57 530.859 273.637 530.629 cv
273.703 530.398 273.738 530.164 273.738 529.918 cv
cp
f
347.68 530.402 mo
347.68 530.789 347.609 531.133 347.473 531.43 cv
347.336 531.734 347.141 531.984 346.883 532.187 cv
346.625 532.395 346.305 532.551 345.926 532.652 cv
345.543 532.758 345.109 532.809 344.625 532.809 cv
344.164 532.809 343.754 532.762 343.395 532.668 cv
343.031 532.574 342.727 532.434 342.477 532.242 cv
342.227 532.059 342.035 531.828 341.902 531.551 cv
341.77 531.277 341.703 530.965 341.703 530.609 cv
341.703 530.336 341.746 530.078 341.84 529.844 cv
341.926 529.609 342.059 529.395 342.234 529.199 cv
342.402 529.004 342.613 528.82 342.867 528.645 cv
343.117 528.477 343.402 528.312 343.719 528.156 cv
343.445 528.016 343.203 527.867 342.992 527.707 cv
342.781 527.551 342.602 527.379 342.457 527.191 cv
342.309 527.008 342.199 526.812 342.125 526.602 cv
342.047 526.395 342.008 526.164 342.012 525.914 cv
342.008 525.605 342.063 525.312 342.18 525.039 cv
342.289 524.77 342.461 524.535 342.688 524.332 cv
342.914 524.133 343.199 523.973 343.551 523.855 cv
343.895 523.738 344.305 523.68 344.773 523.68 cv
345.219 523.68 345.605 523.734 345.934 523.84 cv
346.262 523.949 346.531 524.094 346.742 524.277 cv
346.953 524.465 347.109 524.684 347.215 524.934 cv
347.313 525.184 347.363 525.453 347.367 525.742 cv
347.363 525.977 347.324 526.203 347.254 526.414 cv
347.176 526.633 347.066 526.836 346.918 527.023 cv
346.77 527.219 346.59 527.398 346.379 527.562 cv
346.168 527.734 345.926 527.891 345.652 528.031 cv
345.973 528.195 346.258 528.359 346.516 528.527 cv
346.766 528.695 346.98 528.875 347.156 529.07 cv
347.324 529.266 347.453 529.473 347.547 529.687 cv
347.633 529.906 347.68 530.145 347.68 530.402 cv
cp
346.199 525.852 mo
346.195 525.664 346.164 525.488 346.098 525.332 cv
346.031 525.176 345.934 525.043 345.809 524.934 cv
345.68 524.824 345.52 524.742 345.332 524.684 cv
345.137 524.629 344.922 524.602 344.684 524.598 cv
344.188 524.602 343.813 524.711 343.563 524.934 cv
343.305 525.16 343.18 525.469 343.184 525.852 cv
343.18 526.031 343.211 526.195 343.273 526.348 cv
343.336 526.504 343.43 526.648 343.563 526.785 cv
343.688 526.922 343.852 527.055 344.055 527.184 cv
344.25 527.316 344.488 527.453 344.766 527.594 cv
345.227 527.359 345.582 527.098 345.828 526.805 cv
346.074 526.52 346.195 526.203 346.199 525.852 cv
cp
346.488 530.527 mo
346.484 530.32 346.445 530.129 346.371 529.957 cv
346.289 529.789 346.172 529.629 346.016 529.477 cv
345.859 529.328 345.66 529.184 345.426 529.043 cv
345.188 528.906 344.918 528.762 344.609 528.609 cv
344.32 528.754 344.066 528.895 343.852 529.035 cv
343.633 529.176 343.453 529.324 343.316 529.473 cv
343.176 529.629 343.07 529.785 343 529.949 cv
342.926 530.117 342.891 530.301 342.895 530.5 cv
342.891 530.945 343.043 531.289 343.352 531.527 cv
343.652 531.773 344.105 531.895 344.711 531.891 cv
345.293 531.895 345.738 531.773 346.039 531.523 cv
346.336 531.281 346.484 530.949 346.488 530.527 cv
cp
f
416.734 532.215 mo
416.73 532.305 416.723 532.375 416.711 532.434 cv
416.695 532.496 416.676 532.547 416.656 532.578 cv
416.633 532.617 416.609 532.641 416.578 532.656 cv
416.547 532.672 416.516 532.68 416.488 532.68 cv
411.852 532.68 li
411.816 532.68 411.789 532.672 411.762 532.656 cv
411.734 532.641 411.707 532.617 411.684 532.578 cv
411.656 532.547 411.637 532.496 411.625 532.434 cv
411.609 532.375 411.602 532.305 411.605 532.215 cv
411.602 532.137 411.609 532.062 411.625 532 cv
411.637 531.941 411.652 531.895 411.676 531.855 cv
411.691 531.82 411.719 531.789 411.75 531.766 cv
411.781 531.746 411.813 531.738 411.852 531.734 cv
413.703 531.734 li
413.703 524.988 li
411.988 526.008 li
411.898 526.059 411.828 526.086 411.781 526.094 cv
411.727 526.102 411.684 526.094 411.652 526.062 cv
411.617 526.035 411.598 525.984 411.586 525.914 cv
411.574 525.848 411.566 525.762 411.57 525.652 cv
411.566 525.578 411.57 525.512 411.582 525.453 cv
411.586 525.402 411.598 525.355 411.613 525.316 cv
411.625 525.281 411.645 525.25 411.668 525.223 cv
411.691 525.195 411.723 525.168 411.77 525.141 cv
413.813 523.828 li
413.828 523.816 413.848 523.805 413.879 523.797 cv
413.902 523.789 413.938 523.781 413.984 523.77 cv
414.023 523.762 414.074 523.754 414.129 523.75 cv
414.184 523.75 414.25 523.75 414.336 523.746 cv
414.441 523.75 414.535 523.754 414.609 523.762 cv
414.68 523.77 414.734 523.785 414.781 523.801 cv
414.82 523.82 414.848 523.84 414.863 523.863 cv
414.871 523.891 414.879 523.914 414.883 523.937 cv
414.883 531.734 li
416.488 531.734 li
416.523 531.738 416.559 531.746 416.59 531.766 cv
416.621 531.789 416.645 531.82 416.668 531.855 cv
416.684 531.895 416.699 531.941 416.715 532 cv
416.723 532.062 416.73 532.137 416.734 532.215 cv
cp
f
424.09 528.223 mo
424.086 528.906 424.035 529.527 423.93 530.09 cv
423.82 530.652 423.641 531.137 423.395 531.539 cv
423.141 531.945 422.813 532.258 422.414 532.477 cv
422.008 532.699 421.516 532.809 420.93 532.809 cv
420.371 532.809 419.898 532.711 419.52 532.512 cv
419.137 532.316 418.832 532.023 418.598 531.637 cv
418.363 531.25 418.195 530.777 418.102 530.211 cv
418 529.648 417.953 529 417.953 528.266 cv
417.953 527.594 418.008 526.973 418.117 526.406 cv
418.227 525.844 418.402 525.359 418.652 524.953 cv
418.895 524.551 419.219 524.238 419.625 524.012 cv
420.023 523.793 420.52 523.68 421.109 523.68 cv
421.668 523.68 422.141 523.781 422.523 523.977 cv
422.906 524.18 423.211 524.473 423.445 524.855 cv
423.676 525.246 423.844 525.719 423.941 526.281 cv
424.039 526.844 424.086 527.492 424.09 528.223 cv
cp
422.883 528.305 mo
422.879 527.863 422.863 527.465 422.836 527.113 cv
422.801 526.762 422.754 526.453 422.695 526.184 cv
422.629 525.914 422.551 525.684 422.453 525.488 cv
422.355 525.297 422.238 525.137 422.102 525.008 cv
421.961 524.883 421.801 524.789 421.629 524.73 cv
421.449 524.676 421.254 524.648 421.039 524.645 cv
420.648 524.648 420.332 524.738 420.094 524.922 cv
419.848 525.105 419.656 525.359 419.52 525.676 cv
419.379 525.996 419.285 526.367 419.234 526.797 cv
419.184 527.227 419.16 527.691 419.16 528.184 cv
419.16 528.848 419.191 529.41 419.262 529.871 cv
419.328 530.34 419.438 530.719 419.59 531.008 cv
419.734 531.305 419.926 531.516 420.156 531.645 cv
420.387 531.781 420.668 531.848 421 531.844 cv
421.254 531.848 421.477 531.809 421.672 531.723 cv
421.863 531.645 422.031 531.523 422.172 531.367 cv
422.313 531.215 422.426 531.031 422.52 530.816 cv
422.605 530.602 422.68 530.363 422.738 530.102 cv
422.789 529.844 422.828 529.562 422.852 529.258 cv
422.871 528.953 422.879 528.637 422.883 528.305 cv
cp
f
489.496 532.215 mo
489.492 532.305 489.484 532.375 489.473 532.434 cv
489.457 532.496 489.438 532.547 489.418 532.578 cv
489.395 532.617 489.371 532.641 489.34 532.656 cv
489.309 532.672 489.277 532.68 489.25 532.68 cv
484.613 532.68 li
484.578 532.68 484.551 532.672 484.523 532.656 cv
484.496 532.641 484.469 532.617 484.445 532.578 cv
484.418 532.547 484.398 532.496 484.387 532.434 cv
484.371 532.375 484.363 532.305 484.367 532.215 cv
484.363 532.137 484.371 532.062 484.387 532 cv
484.398 531.941 484.414 531.895 484.438 531.855 cv
484.453 531.82 484.48 531.789 484.512 531.766 cv
484.543 531.746 484.574 531.738 484.613 531.734 cv
486.465 531.734 li
486.465 524.988 li
484.75 526.008 li
484.66 526.059 484.59 526.086 484.543 526.094 cv
484.488 526.102 484.445 526.094 484.414 526.062 cv
484.379 526.035 484.359 525.984 484.348 525.914 cv
484.336 525.848 484.328 525.762 484.332 525.652 cv
484.328 525.578 484.332 525.512 484.344 525.453 cv
484.348 525.402 484.359 525.355 484.375 525.316 cv
484.387 525.281 484.406 525.25 484.43 525.223 cv
484.453 525.195 484.484 525.168 484.531 525.141 cv
486.574 523.828 li
486.59 523.816 486.609 523.805 486.641 523.797 cv
486.664 523.789 486.699 523.781 486.746 523.77 cv
486.785 523.762 486.836 523.754 486.891 523.75 cv
486.945 523.75 487.012 523.75 487.098 523.746 cv
487.203 523.75 487.297 523.754 487.371 523.762 cv
487.441 523.77 487.496 523.785 487.543 523.801 cv
487.582 523.82 487.609 523.84 487.625 523.863 cv
487.633 523.891 487.641 523.914 487.645 523.937 cv
487.645 531.734 li
489.25 531.734 li
489.285 531.738 489.32 531.746 489.352 531.766 cv
489.383 531.789 489.406 531.82 489.43 531.855 cv
489.445 531.895 489.461 531.941 489.477 532 cv
489.484 532.062 489.492 532.137 489.496 532.215 cv
cp
f
496.555 532.172 mo
496.551 532.258 496.547 532.332 496.535 532.395 cv
496.523 532.461 496.508 532.516 496.488 532.555 cv
496.465 532.602 496.438 532.633 496.406 532.648 cv
496.371 532.672 496.332 532.68 496.293 532.68 cv
491.391 532.68 li
491.328 532.68 491.27 532.672 491.223 532.656 cv
491.172 532.641 491.133 532.617 491.098 532.578 cv
491.063 532.547 491.035 532.492 491.023 532.422 cv
491.004 532.352 490.996 532.266 491 532.164 cv
490.996 532.074 491 531.996 491.008 531.926 cv
491.012 531.859 491.027 531.801 491.055 531.746 cv
491.078 531.695 491.109 531.641 491.145 531.586 cv
491.18 531.535 491.223 531.48 491.281 531.418 cv
493.055 529.594 li
493.465 529.176 493.793 528.801 494.043 528.465 cv
494.289 528.137 494.48 527.832 494.613 527.555 cv
494.746 527.281 494.832 527.031 494.879 526.805 cv
494.918 526.582 494.941 526.371 494.941 526.176 cv
494.941 525.98 494.906 525.797 494.84 525.617 cv
494.773 525.445 494.68 525.289 494.555 525.152 cv
494.43 525.023 494.273 524.918 494.086 524.836 cv
493.898 524.762 493.68 524.723 493.434 524.719 cv
493.145 524.723 492.887 524.762 492.66 524.836 cv
492.43 524.918 492.23 525.004 492.059 525.09 cv
491.887 525.184 491.742 525.266 491.625 525.344 cv
491.508 525.422 491.422 525.461 491.371 525.461 cv
491.336 525.461 491.305 525.453 491.281 525.434 cv
491.25 525.418 491.23 525.387 491.215 525.344 cv
491.199 525.305 491.184 525.25 491.176 525.18 cv
491.164 525.113 491.16 525.031 491.164 524.934 cv
491.16 524.867 491.164 524.809 491.172 524.758 cv
491.176 524.707 491.184 524.664 491.195 524.625 cv
491.203 524.59 491.219 524.555 491.238 524.523 cv
491.258 524.492 491.293 524.453 491.352 524.402 cv
491.402 524.355 491.496 524.289 491.633 524.207 cv
491.766 524.125 491.938 524.047 492.141 523.965 cv
492.344 523.887 492.566 523.816 492.813 523.762 cv
493.055 523.707 493.313 523.68 493.586 523.68 cv
494.012 523.68 494.387 523.742 494.711 523.863 cv
495.031 523.984 495.297 524.148 495.512 524.359 cv
495.723 524.57 495.883 524.816 495.988 525.09 cv
496.094 525.371 496.148 525.668 496.148 525.98 cv
496.148 526.27 496.121 526.551 496.07 526.828 cv
496.02 527.113 495.914 527.418 495.754 527.742 cv
495.59 528.07 495.355 528.434 495.051 528.832 cv
494.742 529.234 494.336 529.695 493.832 530.211 cv
492.426 531.68 li
496.285 531.68 li
496.316 531.684 496.352 531.695 496.391 531.711 cv
496.422 531.734 496.453 531.766 496.48 531.805 cv
496.504 531.848 496.523 531.898 496.535 531.957 cv
496.547 532.023 496.551 532.094 496.555 532.172 cv
cp
f
562.297 532.215 mo
562.293 532.305 562.285 532.375 562.273 532.434 cv
562.258 532.496 562.238 532.547 562.219 532.578 cv
562.195 532.617 562.172 532.641 562.141 532.656 cv
562.109 532.672 562.078 532.68 562.051 532.68 cv
557.414 532.68 li
557.379 532.68 557.352 532.672 557.324 532.656 cv
557.297 532.641 557.27 532.617 557.246 532.578 cv
557.219 532.547 557.199 532.496 557.188 532.434 cv
557.172 532.375 557.164 532.305 557.168 532.215 cv
557.164 532.137 557.172 532.062 557.188 532 cv
557.199 531.941 557.215 531.895 557.238 531.855 cv
557.254 531.82 557.281 531.789 557.313 531.766 cv
557.344 531.746 557.375 531.738 557.414 531.734 cv
559.266 531.734 li
559.266 524.988 li
557.551 526.008 li
557.461 526.059 557.391 526.086 557.344 526.094 cv
557.289 526.102 557.246 526.094 557.215 526.062 cv
557.18 526.035 557.16 525.984 557.148 525.914 cv
557.137 525.848 557.129 525.762 557.133 525.652 cv
557.129 525.578 557.133 525.512 557.145 525.453 cv
557.148 525.402 557.16 525.355 557.176 525.316 cv
557.188 525.281 557.207 525.25 557.23 525.223 cv
557.254 525.195 557.285 525.168 557.332 525.141 cv
559.375 523.828 li
559.391 523.816 559.41 523.805 559.441 523.797 cv
559.465 523.789 559.5 523.781 559.547 523.77 cv
559.586 523.762 559.637 523.754 559.691 523.75 cv
559.746 523.75 559.813 523.75 559.898 523.746 cv
560.004 523.75 560.098 523.754 560.172 523.762 cv
560.242 523.77 560.297 523.785 560.344 523.801 cv
560.383 523.82 560.41 523.84 560.426 523.863 cv
560.434 523.891 560.441 523.914 560.445 523.937 cv
560.445 531.734 li
562.051 531.734 li
562.086 531.738 562.121 531.746 562.152 531.766 cv
562.184 531.789 562.207 531.82 562.23 531.855 cv
562.246 531.895 562.262 531.941 562.277 532 cv
562.285 532.062 562.293 532.137 562.297 532.215 cv
cp
f
569.73 530.156 mo
569.727 530.309 569.703 530.43 569.66 530.516 cv
569.613 530.605 569.551 530.648 569.469 530.645 cv
568.469 530.645 li
568.469 532.508 li
568.469 532.547 568.457 532.578 568.441 532.602 cv
568.418 532.629 568.387 532.648 568.344 532.668 cv
568.293 532.684 568.23 532.695 568.16 532.707 cv
568.082 532.715 567.988 532.719 567.871 532.723 cv
567.754 532.719 567.656 532.715 567.586 532.707 cv
567.508 532.695 567.449 532.684 567.406 532.668 cv
567.359 532.648 567.328 532.629 567.313 532.602 cv
567.293 532.578 567.285 532.547 567.289 532.508 cv
567.289 530.645 li
563.66 530.645 li
563.602 530.648 563.559 530.641 563.523 530.625 cv
563.488 530.613 563.453 530.586 563.426 530.547 cv
563.395 530.512 563.375 530.461 563.363 530.391 cv
563.352 530.324 563.348 530.234 563.348 530.121 cv
563.348 530.039 563.348 529.961 563.355 529.891 cv
563.355 529.82 563.367 529.758 563.383 529.703 cv
563.395 529.648 563.41 529.594 563.438 529.539 cv
563.457 529.484 563.484 529.43 563.52 529.367 cv
566.68 523.98 li
566.699 523.945 566.734 523.914 566.781 523.887 cv
566.824 523.859 566.879 523.836 566.953 523.816 cv
567.02 523.801 567.105 523.789 567.211 523.777 cv
567.313 523.773 567.434 523.77 567.574 523.766 cv
567.723 523.77 567.859 523.773 567.977 523.785 cv
568.09 523.797 568.18 523.812 568.254 523.828 cv
568.32 523.848 568.375 523.871 568.414 523.902 cv
568.449 523.934 568.469 523.969 568.469 524.008 cv
568.469 529.672 li
569.469 529.672 li
569.543 529.676 569.605 529.715 569.656 529.793 cv
569.703 529.875 569.727 529.996 569.73 530.156 cv
cp
567.289 524.805 mo
567.277 524.805 li
564.426 529.672 li
567.289 529.672 li
cp
f
635.055 532.215 mo
635.051 532.305 635.043 532.375 635.031 532.434 cv
635.016 532.496 634.996 532.547 634.977 532.578 cv
634.953 532.617 634.93 532.641 634.898 532.656 cv
634.867 532.672 634.836 532.68 634.809 532.68 cv
630.172 532.68 li
630.137 532.68 630.109 532.672 630.082 532.656 cv
630.055 532.641 630.027 532.617 630.004 532.578 cv
629.977 532.547 629.957 532.496 629.945 532.434 cv
629.93 532.375 629.922 532.305 629.926 532.215 cv
629.922 532.137 629.93 532.062 629.945 532 cv
629.957 531.941 629.973 531.895 629.996 531.855 cv
630.012 531.82 630.039 531.789 630.07 531.766 cv
630.102 531.746 630.133 531.738 630.172 531.734 cv
632.023 531.734 li
632.023 524.988 li
630.309 526.008 li
630.219 526.059 630.148 526.086 630.102 526.094 cv
630.047 526.102 630.004 526.094 629.973 526.062 cv
629.938 526.035 629.918 525.984 629.906 525.914 cv
629.895 525.848 629.887 525.762 629.891 525.652 cv
629.887 525.578 629.891 525.512 629.902 525.453 cv
629.906 525.402 629.918 525.355 629.934 525.316 cv
629.945 525.281 629.965 525.25 629.988 525.223 cv
630.012 525.195 630.043 525.168 630.09 525.141 cv
632.133 523.828 li
632.148 523.816 632.168 523.805 632.199 523.797 cv
632.223 523.789 632.258 523.781 632.305 523.77 cv
632.344 523.762 632.395 523.754 632.449 523.75 cv
632.504 523.75 632.57 523.75 632.656 523.746 cv
632.762 523.75 632.855 523.754 632.93 523.762 cv
633 523.77 633.055 523.785 633.102 523.801 cv
633.141 523.82 633.168 523.84 633.184 523.863 cv
633.191 523.891 633.199 523.914 633.203 523.937 cv
633.203 531.734 li
634.809 531.734 li
634.844 531.738 634.879 531.746 634.91 531.766 cv
634.941 531.789 634.965 531.82 634.988 531.855 cv
635.004 531.895 635.02 531.941 635.035 532 cv
635.043 532.062 635.051 532.137 635.055 532.215 cv
cp
f
642.344 529.809 mo
642.344 530.199 642.281 530.578 642.164 530.937 cv
642.039 531.305 641.855 531.621 641.613 531.895 cv
641.363 532.172 641.051 532.395 640.676 532.559 cv
640.293 532.727 639.848 532.809 639.332 532.809 cv
638.961 532.809 638.633 532.766 638.352 532.672 cv
638.066 532.586 637.82 532.453 637.609 532.281 cv
637.398 532.113 637.223 531.906 637.086 531.66 cv
636.945 531.414 636.832 531.133 636.75 530.816 cv
636.664 530.504 636.605 530.16 636.57 529.781 cv
636.531 529.41 636.512 529.008 636.516 528.574 cv
636.512 528.195 636.531 527.812 636.574 527.422 cv
636.613 527.039 636.688 526.664 636.793 526.297 cv
636.898 525.937 637.043 525.598 637.223 525.281 cv
637.402 524.965 637.629 524.687 637.902 524.453 cv
638.176 524.219 638.5 524.031 638.879 523.891 cv
639.258 523.754 639.699 523.687 640.203 523.684 cv
640.371 523.687 640.543 523.695 640.715 523.715 cv
640.887 523.738 641.047 523.77 641.195 523.801 cv
641.344 523.84 641.465 523.875 641.566 523.914 cv
641.664 523.953 641.73 523.988 641.766 524.012 cv
641.793 524.039 641.816 524.066 641.836 524.094 cv
641.852 524.125 641.867 524.156 641.875 524.191 cv
641.883 524.227 641.887 524.266 641.895 524.309 cv
641.895 524.352 641.898 524.406 641.902 524.469 cv
641.898 524.555 641.898 524.625 641.898 524.68 cv
641.895 524.742 641.883 524.789 641.871 524.824 cv
641.852 524.863 641.832 524.891 641.809 524.906 cv
641.781 524.926 641.75 524.934 641.711 524.934 cv
641.66 524.934 641.59 524.918 641.504 524.887 cv
641.414 524.855 641.309 524.82 641.188 524.777 cv
641.063 524.742 640.914 524.707 640.738 524.672 cv
640.563 524.645 640.359 524.629 640.129 524.625 cv
639.699 524.629 639.332 524.715 639.027 524.887 cv
638.723 525.059 638.473 525.293 638.277 525.586 cv
638.082 525.879 637.938 526.219 637.848 526.602 cv
637.75 526.992 637.695 527.395 637.688 527.812 cv
637.805 527.746 637.941 527.68 638.09 527.609 cv
638.238 527.543 638.398 527.48 638.574 527.422 cv
638.75 527.371 638.938 527.324 639.133 527.289 cv
639.328 527.258 639.539 527.242 639.766 527.238 cv
640.242 527.242 640.645 527.309 640.977 527.434 cv
641.305 527.566 641.57 527.746 641.777 527.977 cv
641.977 528.207 642.121 528.477 642.211 528.789 cv
642.297 529.102 642.344 529.441 642.344 529.809 cv
cp
641.148 529.918 mo
641.148 529.656 641.121 529.414 641.07 529.195 cv
641.016 528.98 640.926 528.797 640.805 528.641 cv
640.68 528.492 640.516 528.375 640.313 528.293 cv
640.102 528.211 639.848 528.168 639.551 528.168 cv
639.379 528.168 639.211 528.184 639.043 528.215 cv
638.871 528.246 638.707 528.289 638.551 528.336 cv
638.391 528.391 638.242 528.453 638.102 528.523 cv
637.957 528.598 637.824 528.672 637.707 528.75 cv
637.703 529.344 637.742 529.84 637.82 530.234 cv
637.895 530.633 638.004 530.949 638.148 531.187 cv
638.293 531.43 638.473 531.602 638.688 531.703 cv
638.902 531.809 639.152 531.859 639.441 531.855 cv
639.73 531.859 639.984 531.805 640.199 531.691 cv
640.414 531.586 640.59 531.437 640.734 531.25 cv
640.875 531.066 640.98 530.859 641.047 530.629 cv
641.113 530.398 641.148 530.164 641.148 529.918 cv
cp
f
7.633 307.051 mo
7.734 307.055 7.82 307.059 7.891 307.066 cv
7.965 307.078 8.023 307.094 8.066 307.117 cv
8.113 307.141 8.145 307.172 8.164 307.203 cv
8.188 307.242 8.199 307.277 8.195 307.316 cv
8.195 310.152 li
16.938 310.152 li
16.98 310.152 17.016 310.164 17.047 310.184 cv
17.078 310.207 17.105 310.242 17.121 310.293 cv
17.141 310.348 17.152 310.418 17.168 310.5 cv
17.18 310.59 17.188 310.695 17.188 310.82 cv
17.188 310.945 17.18 311.055 17.168 311.141 cv
17.152 311.234 17.141 311.305 17.121 311.352 cv
17.105 311.406 17.078 311.441 17.047 311.461 cv
17.016 311.484 16.98 311.496 16.938 311.492 cv
8.195 311.492 li
8.195 314.328 li
8.199 314.375 8.188 314.41 8.164 314.441 cv
8.145 314.477 8.113 314.504 8.066 314.523 cv
8.023 314.547 7.965 314.566 7.891 314.574 cv
7.82 314.59 7.734 314.594 7.633 314.594 cv
7.535 314.594 7.449 314.59 7.371 314.574 cv
7.301 314.566 7.238 314.547 7.188 314.523 cv
7.145 314.504 7.109 314.477 7.086 314.441 cv
7.066 314.41 7.059 314.375 7.055 314.328 cv
7.055 307.316 li
7.059 307.277 7.066 307.242 7.086 307.203 cv
7.109 307.172 7.145 307.141 7.188 307.117 cv
7.238 307.094 7.301 307.078 7.371 307.066 cv
7.449 307.059 7.535 307.055 7.633 307.051 cv
cp
f
16.945 304.461 mo
16.992 304.465 17.027 304.477 17.051 304.492 cv
17.082 304.516 17.105 304.547 17.125 304.594 cv
17.145 304.641 17.156 304.707 17.172 304.785 cv
17.18 304.871 17.188 304.977 17.188 305.105 cv
17.188 305.234 17.18 305.34 17.172 305.418 cv
17.156 305.504 17.145 305.57 17.125 305.617 cv
17.105 305.672 17.082 305.703 17.051 305.719 cv
17.027 305.738 16.992 305.75 16.945 305.746 cv
9.934 305.746 li
9.898 305.75 9.867 305.738 9.832 305.719 cv
9.805 305.703 9.777 305.672 9.754 305.617 cv
9.734 305.57 9.719 305.504 9.707 305.418 cv
9.699 305.34 9.695 305.234 9.691 305.105 cv
9.695 304.977 9.699 304.871 9.707 304.785 cv
9.719 304.707 9.734 304.641 9.754 304.594 cv
9.777 304.547 9.805 304.516 9.832 304.492 cv
9.867 304.477 9.898 304.465 9.934 304.461 cv
cp
7.563 304.312 mo
7.867 304.312 8.074 304.371 8.18 304.484 cv
8.293 304.598 8.348 304.809 8.344 305.113 cv
8.348 305.418 8.293 305.625 8.184 305.734 cv
8.078 305.852 7.875 305.906 7.578 305.902 cv
7.277 305.906 7.074 305.848 6.965 305.73 cv
6.859 305.617 6.805 305.406 6.801 305.098 cv
6.805 304.797 6.859 304.594 6.961 304.48 cv
7.07 304.371 7.27 304.312 7.563 304.312 cv
cp
f
16.945 291.605 mo
16.992 291.609 17.027 291.617 17.051 291.637 cv
17.082 291.66 17.105 291.695 17.125 291.738 cv
17.145 291.789 17.156 291.855 17.172 291.934 cv
17.18 292.02 17.188 292.121 17.188 292.246 cv
17.188 292.379 17.18 292.488 17.172 292.566 cv
17.156 292.652 17.145 292.719 17.125 292.766 cv
17.105 292.82 17.082 292.855 17.051 292.871 cv
17.027 292.895 16.992 292.902 16.945 292.902 cv
12.684 292.902 li
12.391 292.902 12.121 292.93 11.875 292.98 cv
11.633 293.035 11.422 293.117 11.242 293.23 cv
11.066 293.344 10.93 293.488 10.836 293.664 cv
10.742 293.844 10.695 294.055 10.695 294.289 cv
10.695 294.586 10.813 294.883 11.039 295.18 cv
11.273 295.484 11.605 295.812 12.043 296.168 cv
16.945 296.168 li
16.992 296.172 17.027 296.184 17.051 296.199 cv
17.082 296.223 17.105 296.254 17.125 296.301 cv
17.145 296.352 17.156 296.418 17.172 296.5 cv
17.18 296.586 17.188 296.691 17.188 296.812 cv
17.188 296.934 17.18 297.035 17.172 297.121 cv
17.156 297.207 17.145 297.277 17.125 297.324 cv
17.105 297.379 17.082 297.41 17.051 297.426 cv
17.027 297.445 16.992 297.457 16.945 297.453 cv
12.684 297.453 li
12.391 297.457 12.121 297.484 11.875 297.539 cv
11.633 297.598 11.422 297.684 11.242 297.797 cv
11.066 297.91 10.93 298.055 10.836 298.227 cv
10.742 298.406 10.695 298.613 10.695 298.848 cv
10.695 299.148 10.813 299.445 11.039 299.746 cv
11.273 300.047 11.605 300.375 12.043 300.727 cv
16.945 300.727 li
16.992 300.73 17.027 300.742 17.051 300.758 cv
17.082 300.781 17.105 300.812 17.125 300.859 cv
17.145 300.906 17.156 300.973 17.172 301.051 cv
17.18 301.137 17.188 301.242 17.188 301.371 cv
17.188 301.5 17.18 301.605 17.172 301.684 cv
17.156 301.77 17.145 301.836 17.125 301.883 cv
17.105 301.937 17.082 301.969 17.051 301.984 cv
17.027 302.004 16.992 302.016 16.945 302.012 cv
9.934 302.012 li
9.895 302.016 9.859 302.008 9.828 301.988 cv
9.801 301.977 9.777 301.945 9.75 301.895 cv
9.73 301.852 9.715 301.789 9.703 301.715 cv
9.699 301.645 9.695 301.551 9.691 301.426 cv
9.695 301.316 9.699 301.219 9.703 301.141 cv
9.715 301.066 9.73 301.008 9.75 300.965 cv
9.777 300.926 9.801 300.898 9.828 300.879 cv
9.859 300.863 9.895 300.855 9.934 300.852 cv
10.859 300.852 li
10.418 300.461 10.098 300.078 9.891 299.703 cv
9.688 299.336 9.582 298.957 9.582 298.574 cv
9.582 298.285 9.617 298.027 9.684 297.793 cv
9.754 297.566 9.848 297.359 9.969 297.18 cv
10.09 297.004 10.234 296.855 10.402 296.727 cv
10.574 296.605 10.766 296.5 10.969 296.414 cv
10.719 296.184 10.504 295.961 10.324 295.75 cv
10.152 295.539 10.008 295.336 9.895 295.141 cv
9.789 294.945 9.711 294.758 9.656 294.574 cv
9.609 294.391 9.582 294.203 9.582 294.016 cv
9.582 293.562 9.664 293.184 9.82 292.879 cv
9.984 292.574 10.195 292.328 10.457 292.133 cv
10.723 291.945 11.031 291.809 11.387 291.727 cv
11.742 291.648 12.117 291.609 12.512 291.605 cv
cp
f
13.137 283.273 mo
13.34 283.277 13.48 283.328 13.566 283.426 cv
13.652 283.531 13.695 283.648 13.695 283.773 cv
13.695 288.391 li
14.086 288.395 14.438 288.355 14.75 288.273 cv
15.063 288.199 15.332 288.066 15.551 287.883 cv
15.777 287.703 15.949 287.469 16.066 287.172 cv
16.191 286.883 16.25 286.523 16.246 286.098 cv
16.25 285.766 16.223 285.469 16.164 285.207 cv
16.113 284.945 16.051 284.719 15.98 284.527 cv
15.914 284.34 15.855 284.184 15.797 284.059 cv
15.746 283.937 15.719 283.844 15.715 283.781 cv
15.719 283.746 15.727 283.715 15.742 283.684 cv
15.762 283.656 15.789 283.633 15.824 283.613 cv
15.863 283.602 15.914 283.59 15.977 283.578 cv
16.043 283.574 16.121 283.57 16.215 283.566 cv
16.285 283.57 16.344 283.574 16.391 283.574 cv
16.438 283.582 16.48 283.586 16.52 283.594 cv
16.559 283.602 16.594 283.617 16.625 283.633 cv
16.656 283.656 16.688 283.68 16.715 283.703 cv
16.746 283.734 16.793 283.816 16.855 283.957 cv
16.922 284.098 16.984 284.281 17.047 284.504 cv
17.109 284.73 17.164 284.988 17.215 285.281 cv
17.262 285.574 17.285 285.887 17.289 286.219 cv
17.285 286.797 17.207 287.305 17.047 287.734 cv
16.887 288.172 16.648 288.535 16.332 288.828 cv
16.016 289.129 15.621 289.352 15.141 289.5 cv
14.664 289.648 14.105 289.723 13.469 289.723 cv
12.871 289.723 12.332 289.648 11.848 289.492 cv
11.371 289.34 10.961 289.113 10.625 288.816 cv
10.289 288.523 10.031 288.168 9.852 287.754 cv
9.672 287.34 9.582 286.875 9.582 286.359 cv
9.582 285.809 9.672 285.34 9.848 284.953 cv
10.027 284.566 10.266 284.25 10.563 283.996 cv
10.863 283.75 11.215 283.566 11.613 283.449 cv
12.02 283.336 12.449 283.277 12.902 283.273 cv
cp
12.754 284.566 mo
12.078 284.551 11.547 284.703 11.164 285.02 cv
10.781 285.336 10.59 285.805 10.586 286.422 cv
10.59 286.746 10.648 287.027 10.766 287.266 cv
10.887 287.508 11.047 287.707 11.242 287.867 cv
11.441 288.031 11.672 288.156 11.934 288.242 cv
12.195 288.332 12.469 288.383 12.754 288.391 cv
cp
f
6.402 275.102 mo
7.449 275.598 8.52 275.965 9.617 276.207 cv
10.719 276.449 11.824 276.57 12.934 276.57 cv
14.051 276.57 15.16 276.449 16.254 276.199 cv
17.352 275.957 18.422 275.594 19.477 275.117 cv
19.535 275.094 19.59 275.082 19.637 275.074 cv
19.68 275.074 19.715 275.09 19.746 275.125 cv
19.773 275.164 19.793 275.219 19.809 275.293 cv
19.816 275.371 19.824 275.477 19.828 275.602 cv
19.824 275.699 19.82 275.777 19.82 275.844 cv
19.813 275.914 19.805 275.973 19.789 276.02 cv
19.773 276.07 19.754 276.113 19.734 276.141 cv
19.711 276.176 19.688 276.199 19.664 276.211 cv
19.133 276.492 18.598 276.738 18.055 276.949 cv
17.512 277.168 16.961 277.348 16.402 277.488 cv
15.84 277.637 15.273 277.746 14.699 277.816 cv
14.125 277.895 13.543 277.93 12.957 277.926 cv
12.371 277.93 11.793 277.891 11.219 277.805 cv
10.648 277.727 10.082 277.609 9.516 277.461 cv
8.953 277.312 8.398 277.133 7.852 276.922 cv
7.309 276.711 6.766 276.473 6.23 276.203 cv
6.211 276.199 6.195 276.184 6.176 276.16 cv
6.164 276.137 6.148 276.105 6.129 276.062 cv
6.117 276.023 6.105 275.965 6.094 275.891 cv
6.09 275.82 6.086 275.727 6.082 275.609 cv
6.086 275.492 6.094 275.398 6.105 275.32 cv
6.125 275.25 6.145 275.191 6.168 275.148 cv
6.195 275.109 6.23 275.086 6.27 275.078 cv
6.316 275.074 6.359 275.082 6.402 275.102 cv
cp
f
16.938 261.82 mo
16.98 261.82 17.016 261.832 17.047 261.852 cv
17.078 261.875 17.105 261.914 17.121 261.965 cv
17.141 262.02 17.152 262.086 17.168 262.168 cv
17.18 262.254 17.188 262.363 17.188 262.492 cv
17.188 262.621 17.18 262.727 17.168 262.812 cv
17.152 262.902 17.141 262.973 17.121 263.023 cv
17.105 263.074 17.078 263.109 17.047 263.129 cv
17.016 263.152 16.98 263.164 16.938 263.16 cv
8.156 263.16 li
8.156 263.176 li
16.977 266.73 li
17.016 266.746 17.047 266.77 17.07 266.797 cv
17.098 266.828 17.121 266.871 17.137 266.922 cv
17.156 266.98 17.168 267.043 17.176 267.117 cv
17.184 267.191 17.188 267.281 17.188 267.383 cv
17.188 267.496 17.18 267.59 17.172 267.664 cv
17.156 267.746 17.145 267.812 17.129 267.859 cv
17.113 267.914 17.094 267.953 17.063 267.98 cv
17.039 268.012 17.008 268.031 16.977 268.039 cv
8.156 271.437 li
8.156 271.445 li
16.938 271.445 li
16.98 271.449 17.016 271.457 17.047 271.477 cv
17.078 271.5 17.105 271.539 17.121 271.59 cv
17.141 271.645 17.152 271.715 17.168 271.797 cv
17.18 271.887 17.188 271.996 17.188 272.125 cv
17.188 272.258 17.18 272.363 17.168 272.449 cv
17.152 272.535 17.141 272.605 17.121 272.652 cv
17.105 272.707 17.078 272.742 17.047 272.758 cv
17.016 272.781 16.98 272.789 16.938 272.785 cv
7.664 272.785 li
7.449 272.789 7.293 272.73 7.195 272.613 cv
7.105 272.496 7.059 272.367 7.055 272.223 cv
7.055 271.398 li
7.059 271.234 7.074 271.086 7.102 270.957 cv
7.137 270.832 7.184 270.723 7.25 270.625 cv
7.32 270.531 7.406 270.449 7.508 270.387 cv
7.613 270.324 7.738 270.27 7.875 270.223 cv
15.176 267.336 li
15.176 267.297 li
7.898 264.297 li
7.746 264.242 7.613 264.18 7.5 264.109 cv
7.395 264.043 7.305 263.965 7.238 263.883 cv
7.176 263.801 7.129 263.711 7.098 263.609 cv
7.07 263.512 7.059 263.395 7.055 263.262 cv
7.055 262.398 li
7.059 262.32 7.07 262.242 7.09 262.172 cv
7.117 262.102 7.152 262.043 7.199 261.992 cv
7.25 261.941 7.313 261.898 7.387 261.867 cv
7.465 261.836 7.559 261.82 7.664 261.82 cv
cp
f
16.945 258 mo
16.992 258.004 17.027 258.016 17.051 258.031 cv
17.082 258.055 17.105 258.086 17.125 258.133 cv
17.145 258.18 17.156 258.246 17.172 258.324 cv
17.18 258.41 17.188 258.516 17.188 258.645 cv
17.188 258.773 17.18 258.879 17.172 258.957 cv
17.156 259.043 17.145 259.109 17.125 259.156 cv
17.105 259.211 17.082 259.242 17.051 259.258 cv
17.027 259.277 16.992 259.289 16.945 259.285 cv
9.934 259.285 li
9.898 259.289 9.867 259.277 9.832 259.258 cv
9.805 259.242 9.777 259.211 9.754 259.156 cv
9.734 259.109 9.719 259.043 9.707 258.957 cv
9.699 258.879 9.695 258.773 9.691 258.645 cv
9.695 258.516 9.699 258.41 9.707 258.324 cv
9.719 258.246 9.734 258.18 9.754 258.133 cv
9.777 258.086 9.805 258.055 9.832 258.031 cv
9.867 258.016 9.898 258.004 9.934 258 cv
cp
7.563 257.852 mo
7.867 257.852 8.074 257.91 8.18 258.023 cv
8.293 258.137 8.348 258.348 8.344 258.652 cv
8.348 258.957 8.293 259.164 8.184 259.273 cv
8.078 259.391 7.875 259.445 7.578 259.441 cv
7.277 259.445 7.074 259.387 6.965 259.27 cv
6.859 259.156 6.805 258.945 6.801 258.637 cv
6.805 258.336 6.859 258.133 6.961 258.02 cv
7.07 257.91 7.27 257.852 7.563 257.852 cv
cp
f
16.945 249.578 mo
16.992 249.578 17.027 249.59 17.051 249.609 cv
17.082 249.633 17.105 249.668 17.125 249.711 cv
17.145 249.762 17.156 249.824 17.172 249.906 cv
17.18 249.988 17.188 250.094 17.188 250.215 cv
17.188 250.348 17.18 250.453 17.172 250.535 cv
17.156 250.621 17.145 250.687 17.125 250.73 cv
17.105 250.781 17.082 250.812 17.051 250.832 cv
17.027 250.855 16.992 250.867 16.945 250.863 cv
12.84 250.863 li
12.441 250.867 12.121 250.898 11.875 250.957 cv
11.633 251.023 11.422 251.113 11.242 251.23 cv
11.066 251.348 10.93 251.504 10.836 251.691 cv
10.742 251.887 10.695 252.105 10.695 252.352 cv
10.695 252.676 10.813 253 11.039 253.32 cv
11.273 253.645 11.605 253.98 12.043 254.332 cv
16.945 254.332 li
16.992 254.336 17.027 254.348 17.051 254.363 cv
17.082 254.387 17.105 254.418 17.125 254.465 cv
17.145 254.512 17.156 254.578 17.172 254.656 cv
17.18 254.742 17.188 254.848 17.188 254.977 cv
17.188 255.105 17.18 255.211 17.172 255.289 cv
17.156 255.375 17.145 255.441 17.125 255.488 cv
17.105 255.543 17.082 255.574 17.051 255.59 cv
17.027 255.609 16.992 255.621 16.945 255.617 cv
9.934 255.617 li
9.895 255.621 9.859 255.613 9.828 255.594 cv
9.801 255.582 9.777 255.551 9.75 255.5 cv
9.73 255.457 9.715 255.395 9.703 255.32 cv
9.699 255.25 9.695 255.156 9.691 255.031 cv
9.695 254.922 9.699 254.824 9.703 254.746 cv
9.715 254.672 9.73 254.613 9.75 254.57 cv
9.777 254.531 9.801 254.504 9.828 254.484 cv
9.859 254.469 9.895 254.461 9.934 254.457 cv
10.859 254.457 li
10.418 254.066 10.098 253.672 9.891 253.277 cv
9.688 252.887 9.582 252.488 9.582 252.086 cv
9.582 251.617 9.664 251.227 9.82 250.906 cv
9.984 250.59 10.195 250.328 10.457 250.129 cv
10.723 249.934 11.031 249.793 11.387 249.707 cv
11.742 249.621 12.172 249.578 12.668 249.578 cv
cp
f
16.945 241.18 mo
16.992 241.184 17.027 241.191 17.051 241.207 cv
17.082 241.227 17.105 241.262 17.125 241.305 cv
17.145 241.352 17.156 241.41 17.172 241.484 cv
17.18 241.562 17.188 241.656 17.188 241.762 cv
17.188 241.887 17.18 241.984 17.172 242.055 cv
17.156 242.133 17.145 242.191 17.125 242.234 cv
17.105 242.281 17.082 242.312 17.051 242.324 cv
17.027 242.344 16.992 242.352 16.945 242.348 cv
16.02 242.348 li
16.465 242.75 16.785 243.145 16.984 243.531 cv
17.188 243.926 17.285 244.32 17.289 244.715 cv
17.285 245.187 17.211 245.582 17.055 245.898 cv
16.902 246.219 16.691 246.477 16.422 246.672 cv
16.156 246.875 15.844 247.016 15.484 247.098 cv
15.129 247.187 14.695 247.23 14.188 247.227 cv
9.934 247.227 li
9.895 247.23 9.859 247.223 9.828 247.199 cv
9.801 247.184 9.777 247.148 9.75 247.094 cv
9.73 247.047 9.715 246.977 9.703 246.891 cv
9.699 246.809 9.695 246.707 9.691 246.578 cv
9.695 246.457 9.699 246.352 9.703 246.266 cv
9.715 246.184 9.73 246.117 9.75 246.07 cv
9.777 246.023 9.801 245.988 9.828 245.965 cv
9.859 245.945 9.895 245.937 9.934 245.934 cv
14.016 245.934 li
14.43 245.937 14.758 245.906 15.004 245.844 cv
15.25 245.785 15.461 245.695 15.633 245.57 cv
15.813 245.453 15.945 245.297 16.039 245.105 cv
16.137 244.922 16.188 244.703 16.184 244.453 cv
16.188 244.133 16.07 243.812 15.84 243.488 cv
15.613 243.172 15.277 242.832 14.832 242.473 cv
9.934 242.473 li
9.895 242.473 9.859 242.465 9.828 242.445 cv
9.801 242.43 9.777 242.395 9.75 242.34 cv
9.73 242.289 9.715 242.223 9.703 242.141 cv
9.699 242.062 9.695 241.957 9.691 241.824 cv
9.695 241.703 9.699 241.598 9.703 241.512 cv
9.715 241.43 9.73 241.367 9.75 241.32 cv
9.777 241.277 9.801 241.242 9.828 241.215 cv
9.859 241.195 9.895 241.184 9.934 241.18 cv
cp
f
16.43 235.16 mo
16.586 235.16 16.703 235.172 16.789 235.191 cv
16.879 235.215 16.945 235.246 16.984 235.285 cv
17.027 235.328 17.066 235.391 17.102 235.473 cv
17.137 235.559 17.164 235.652 17.191 235.758 cv
17.211 235.867 17.23 235.98 17.25 236.098 cv
17.262 236.215 17.27 236.336 17.273 236.453 cv
17.27 236.82 17.223 237.133 17.129 237.391 cv
17.035 237.652 16.891 237.863 16.691 238.027 cv
16.5 238.195 16.254 238.316 15.953 238.391 cv
15.656 238.469 15.305 238.508 14.895 238.504 cv
10.797 238.504 li
10.797 239.484 li
10.801 239.562 10.758 239.625 10.672 239.672 cv
10.59 239.719 10.457 239.742 10.266 239.742 cv
10.172 239.742 10.09 239.738 10.02 239.723 cv
9.957 239.715 9.898 239.695 9.852 239.672 cv
9.809 239.652 9.777 239.625 9.758 239.59 cv
9.742 239.559 9.734 239.523 9.73 239.477 cv
9.73 238.504 li
8.063 238.504 li
8.031 238.508 7.996 238.496 7.961 238.477 cv
7.934 238.461 7.906 238.43 7.879 238.375 cv
7.859 238.328 7.844 238.262 7.828 238.176 cv
7.82 238.098 7.813 237.992 7.813 237.863 cv
7.813 237.734 7.82 237.629 7.828 237.547 cv
7.844 237.465 7.859 237.398 7.879 237.352 cv
7.906 237.305 7.934 237.273 7.961 237.25 cv
7.996 237.234 8.031 237.223 8.063 237.219 cv
9.73 237.219 li
9.73 235.418 li
9.734 235.379 9.742 235.344 9.758 235.309 cv
9.777 235.281 9.809 235.254 9.852 235.227 cv
9.898 235.207 9.957 235.191 10.02 235.176 cv
10.09 235.168 10.172 235.16 10.266 235.16 cv
10.457 235.16 10.59 235.184 10.672 235.23 cv
10.758 235.277 10.801 235.34 10.797 235.418 cv
10.797 237.219 li
14.711 237.219 li
15.195 237.223 15.559 237.152 15.805 237.004 cv
16.055 236.863 16.18 236.605 16.176 236.234 cv
16.18 236.121 16.168 236.016 16.141 235.918 cv
16.121 235.828 16.098 235.746 16.066 235.668 cv
16.043 235.598 16.016 235.535 15.992 235.48 cv
15.969 235.434 15.957 235.387 15.957 235.34 cv
15.957 235.316 15.965 235.289 15.977 235.266 cv
15.992 235.242 16.016 235.227 16.051 235.211 cv
16.09 235.203 16.141 235.191 16.199 235.176 cv
16.266 235.168 16.344 235.16 16.43 235.16 cv
cp
f
13.137 227.48 mo
13.34 227.484 13.48 227.535 13.566 227.633 cv
13.652 227.738 13.695 227.855 13.695 227.98 cv
13.695 232.598 li
14.086 232.602 14.438 232.562 14.75 232.48 cv
15.063 232.406 15.332 232.273 15.551 232.09 cv
15.777 231.91 15.949 231.676 16.066 231.379 cv
16.191 231.09 16.25 230.73 16.246 230.305 cv
16.25 229.973 16.223 229.676 16.164 229.414 cv
16.113 229.152 16.051 228.926 15.98 228.734 cv
15.914 228.547 15.855 228.391 15.797 228.266 cv
15.746 228.145 15.719 228.051 15.715 227.988 cv
15.719 227.953 15.727 227.922 15.742 227.891 cv
15.762 227.863 15.789 227.84 15.824 227.82 cv
15.863 227.809 15.914 227.797 15.977 227.785 cv
16.043 227.781 16.121 227.777 16.215 227.773 cv
16.285 227.777 16.344 227.781 16.391 227.781 cv
16.438 227.789 16.48 227.793 16.52 227.801 cv
16.559 227.809 16.594 227.824 16.625 227.84 cv
16.656 227.863 16.688 227.887 16.715 227.91 cv
16.746 227.941 16.793 228.023 16.855 228.164 cv
16.922 228.305 16.984 228.488 17.047 228.711 cv
17.109 228.937 17.164 229.195 17.215 229.488 cv
17.262 229.781 17.285 230.094 17.289 230.426 cv
17.285 231.004 17.207 231.512 17.047 231.941 cv
16.887 232.379 16.648 232.742 16.332 233.035 cv
16.016 233.336 15.621 233.559 15.141 233.707 cv
14.664 233.855 14.105 233.93 13.469 233.93 cv
12.871 233.93 12.332 233.855 11.848 233.699 cv
11.371 233.547 10.961 233.32 10.625 233.023 cv
10.289 232.73 10.031 232.375 9.852 231.961 cv
9.672 231.547 9.582 231.082 9.582 230.566 cv
9.582 230.016 9.672 229.547 9.848 229.16 cv
10.027 228.773 10.266 228.457 10.563 228.203 cv
10.863 227.957 11.215 227.773 11.613 227.656 cv
12.02 227.543 12.449 227.484 12.902 227.48 cv
cp
12.754 228.773 mo
12.078 228.758 11.547 228.91 11.164 229.227 cv
10.781 229.543 10.59 230.012 10.586 230.629 cv
10.59 230.953 10.648 231.234 10.766 231.473 cv
10.887 231.715 11.047 231.914 11.242 232.074 cv
11.441 232.238 11.672 232.363 11.934 232.449 cv
12.195 232.539 12.469 232.59 12.754 232.598 cv
cp
f
15.035 221.191 mo
15.398 221.195 15.719 221.262 15.996 221.391 cv
16.277 221.523 16.512 221.711 16.703 221.953 cv
16.898 222.199 17.043 222.492 17.141 222.828 cv
17.238 223.168 17.285 223.539 17.289 223.941 cv
17.285 224.195 17.266 224.434 17.23 224.656 cv
17.188 224.883 17.141 225.082 17.082 225.262 cv
17.023 225.441 16.961 225.594 16.895 225.719 cv
16.832 225.844 16.773 225.937 16.719 225.992 cv
16.668 226.051 16.598 226.09 16.5 226.113 cv
16.41 226.141 16.281 226.152 16.121 226.152 cv
16.023 226.152 15.941 226.148 15.871 226.137 cv
15.805 226.129 15.75 226.117 15.707 226.098 cv
15.668 226.086 15.637 226.062 15.617 226.035 cv
15.602 226.008 15.594 225.977 15.59 225.937 cv
15.594 225.883 15.629 225.797 15.695 225.684 cv
15.77 225.574 15.848 225.437 15.926 225.27 cv
16.012 225.109 16.086 224.918 16.156 224.691 cv
16.227 224.473 16.262 224.215 16.262 223.918 cv
16.262 223.703 16.238 223.504 16.191 223.324 cv
16.145 223.148 16.078 222.996 15.984 222.867 cv
15.898 222.738 15.781 222.637 15.637 222.566 cv
15.5 222.496 15.332 222.461 15.137 222.461 cv
14.941 222.461 14.777 222.512 14.641 222.613 cv
14.508 222.715 14.387 222.852 14.281 223.016 cv
14.18 223.184 14.09 223.367 14.004 223.574 cv
13.926 223.785 13.84 224 13.75 224.219 cv
13.664 224.437 13.563 224.652 13.449 224.863 cv
13.34 225.074 13.207 225.266 13.043 225.43 cv
12.887 225.602 12.691 225.734 12.465 225.832 cv
12.242 225.937 11.977 225.988 11.664 225.984 cv
11.391 225.988 11.125 225.934 10.871 225.824 cv
10.621 225.719 10.402 225.559 10.211 225.344 cv
10.023 225.133 9.871 224.867 9.754 224.547 cv
9.641 224.227 9.582 223.855 9.582 223.426 cv
9.582 223.242 9.598 223.055 9.629 222.867 cv
9.66 222.684 9.699 222.516 9.746 222.359 cv
9.793 222.211 9.844 222.082 9.898 221.973 cv
9.953 221.871 10.004 221.789 10.043 221.73 cv
10.09 221.68 10.125 221.645 10.152 221.621 cv
10.184 221.605 10.219 221.59 10.254 221.582 cv
10.297 221.574 10.344 221.566 10.398 221.559 cv
10.457 221.551 10.527 221.547 10.609 221.547 cv
10.699 221.547 10.777 221.551 10.84 221.559 cv
10.91 221.566 10.961 221.582 11 221.598 cv
11.043 221.621 11.074 221.641 11.09 221.664 cv
11.109 221.691 11.117 221.723 11.117 221.75 cv
11.117 221.801 11.09 221.867 11.031 221.953 cv
10.977 222.043 10.914 222.156 10.848 222.297 cv
10.785 222.437 10.727 222.605 10.664 222.793 cv
10.609 222.984 10.578 223.199 10.578 223.441 cv
10.578 223.664 10.605 223.855 10.652 224.02 cv
10.707 224.187 10.777 224.324 10.863 224.43 cv
10.957 224.535 11.063 224.617 11.188 224.668 cv
11.313 224.727 11.449 224.754 11.594 224.75 cv
11.797 224.754 11.965 224.703 12.102 224.598 cv
12.242 224.496 12.363 224.359 12.465 224.191 cv
12.57 224.027 12.664 223.836 12.746 223.621 cv
12.832 223.41 12.918 223.195 13.004 222.973 cv
13.094 222.754 13.195 222.535 13.301 222.316 cv
13.41 222.102 13.539 221.91 13.695 221.742 cv
13.852 221.578 14.039 221.445 14.258 221.344 cv
14.477 221.246 14.738 221.195 15.035 221.191 cv
cp
f
12.957 216.75 mo
13.543 216.75 14.125 216.789 14.699 216.859 cv
15.273 216.937 15.84 217.047 16.402 217.187 cv
16.961 217.336 17.512 217.512 18.055 217.723 cv
18.598 217.934 19.133 218.18 19.664 218.457 cv
19.688 218.477 19.711 218.5 19.734 218.527 cv
19.754 218.562 19.773 218.602 19.789 218.648 cv
19.805 218.699 19.813 218.758 19.82 218.824 cv
19.82 218.895 19.824 218.977 19.828 219.066 cv
19.824 219.203 19.816 219.309 19.809 219.383 cv
19.793 219.461 19.773 219.516 19.746 219.547 cv
19.715 219.582 19.68 219.598 19.637 219.594 cv
19.59 219.594 19.535 219.578 19.477 219.551 cv
18.426 219.074 17.355 218.715 16.258 218.469 cv
15.16 218.227 14.051 218.105 12.934 218.102 cv
11.824 218.105 10.719 218.227 9.617 218.469 cv
8.52 218.715 7.449 219.082 6.402 219.566 cv
6.359 219.59 6.316 219.598 6.27 219.59 cv
6.23 219.59 6.195 219.566 6.168 219.52 cv
6.145 219.48 6.125 219.422 6.105 219.348 cv
6.094 219.277 6.086 219.18 6.082 219.059 cv
6.086 218.949 6.09 218.859 6.094 218.785 cv
6.105 218.715 6.117 218.656 6.129 218.609 cv
6.148 218.566 6.164 218.535 6.176 218.512 cv
6.195 218.496 6.211 218.48 6.23 218.465 cv
7.297 217.934 8.395 217.512 9.516 217.207 cv
10.645 216.902 11.789 216.75 12.957 216.75 cv
cp
f
294.75 549.887 mo
294.746 549.992 294.73 550.082 294.695 550.152 cv
294.66 550.23 294.613 550.289 294.559 550.332 cv
294.5 550.383 294.438 550.418 294.371 550.434 cv
294.297 550.457 294.227 550.465 294.164 550.465 cv
293.719 550.465 li
293.578 550.465 293.457 550.453 293.352 550.422 cv
293.246 550.398 293.148 550.344 293.055 550.266 cv
292.961 550.191 292.867 550.09 292.773 549.957 cv
292.68 549.828 292.578 549.664 292.473 549.461 cv
289.398 543.723 li
289.234 543.43 289.07 543.121 288.91 542.793 cv
288.742 542.473 288.59 542.156 288.453 541.848 cv
288.438 541.848 li
288.445 542.223 288.453 542.605 288.461 542.992 cv
288.465 543.383 288.465 543.77 288.469 544.152 cv
288.469 550.238 li
288.465 550.277 288.453 550.312 288.434 550.344 cv
288.41 550.379 288.375 550.406 288.324 550.422 cv
288.27 550.441 288.199 550.453 288.117 550.469 cv
288.031 550.48 287.926 550.488 287.797 550.488 cv
287.66 550.488 287.551 550.48 287.469 550.469 cv
287.383 550.453 287.316 550.441 287.27 550.422 cv
287.219 550.406 287.184 550.379 287.16 550.344 cv
287.137 550.312 287.125 550.277 287.129 550.238 cv
287.129 540.934 li
287.125 540.727 287.184 540.578 287.305 540.488 cv
287.422 540.402 287.551 540.359 287.691 540.355 cv
288.352 540.355 li
288.504 540.359 288.637 540.371 288.742 540.395 cv
288.844 540.422 288.938 540.465 289.023 540.523 cv
289.105 540.586 289.184 540.668 289.266 540.773 cv
289.34 540.883 289.422 541.02 289.508 541.176 cv
291.875 545.602 li
292.02 545.875 292.16 546.141 292.297 546.395 cv
292.43 546.652 292.559 546.906 292.688 547.152 cv
292.809 547.406 292.934 547.652 293.059 547.891 cv
293.18 548.133 293.301 548.375 293.426 548.617 cv
293.434 548.617 li
293.422 548.211 293.414 547.781 293.414 547.336 cv
293.406 546.891 293.406 546.465 293.41 546.055 cv
293.41 540.582 li
293.406 540.547 293.418 540.512 293.441 540.48 cv
293.465 540.449 293.5 540.422 293.555 540.398 cv
293.602 540.375 293.672 540.359 293.758 540.348 cv
293.844 540.34 293.953 540.336 294.094 540.332 cv
294.211 540.336 294.316 540.34 294.406 540.348 cv
294.492 540.359 294.559 540.375 294.609 540.398 cv
294.656 540.422 294.691 540.449 294.715 540.48 cv
294.734 540.512 294.746 540.547 294.75 540.582 cv
cp
f
303.301 550.246 mo
303.297 550.293 303.289 550.328 303.273 550.352 cv
303.254 550.383 303.219 550.406 303.176 550.426 cv
303.129 550.445 303.07 550.457 302.996 550.473 cv
302.918 550.48 302.824 550.488 302.719 550.488 cv
302.594 550.488 302.496 550.48 302.426 550.473 cv
302.348 550.457 302.289 550.445 302.246 550.426 cv
302.199 550.406 302.168 550.383 302.156 550.352 cv
302.137 550.328 302.129 550.293 302.133 550.246 cv
302.133 549.32 li
301.73 549.766 301.336 550.086 300.949 550.285 cv
300.555 550.488 300.16 550.586 299.766 550.59 cv
299.293 550.586 298.898 550.512 298.582 550.355 cv
298.262 550.203 298.004 549.992 297.809 549.723 cv
297.605 549.457 297.465 549.145 297.383 548.785 cv
297.293 548.43 297.25 547.996 297.254 547.488 cv
297.254 543.234 li
297.25 543.195 297.258 543.16 297.281 543.129 cv
297.297 543.102 297.332 543.078 297.387 543.051 cv
297.434 543.031 297.504 543.016 297.59 543.004 cv
297.672 543 297.773 542.996 297.902 542.992 cv
298.023 542.996 298.129 543 298.215 543.004 cv
298.297 543.016 298.363 543.031 298.41 543.051 cv
298.457 543.078 298.492 543.102 298.516 543.129 cv
298.535 543.16 298.543 543.195 298.547 543.234 cv
298.547 547.316 li
298.543 547.73 298.574 548.059 298.637 548.305 cv
298.695 548.551 298.785 548.762 298.91 548.934 cv
299.027 549.113 299.184 549.246 299.375 549.34 cv
299.559 549.437 299.777 549.488 300.027 549.484 cv
300.348 549.488 300.668 549.371 300.992 549.141 cv
301.309 548.914 301.648 548.578 302.008 548.133 cv
302.008 543.234 li
302.008 543.195 302.016 543.16 302.035 543.129 cv
302.051 543.102 302.086 543.078 302.141 543.051 cv
302.191 543.031 302.258 543.016 302.34 543.004 cv
302.418 543 302.523 542.996 302.656 542.992 cv
302.777 542.996 302.883 543 302.969 543.004 cv
303.051 543.016 303.113 543.031 303.16 543.051 cv
303.203 543.078 303.238 543.102 303.266 543.129 cv
303.285 543.16 303.297 543.195 303.301 543.234 cv
cp
f
316.078 550.246 mo
316.074 550.293 316.066 550.328 316.047 550.352 cv
316.023 550.383 315.988 550.406 315.945 550.426 cv
315.895 550.445 315.828 550.457 315.75 550.473 cv
315.664 550.48 315.563 550.488 315.438 550.488 cv
315.305 550.488 315.195 550.48 315.117 550.473 cv
315.031 550.457 314.965 550.445 314.918 550.426 cv
314.863 550.406 314.828 550.383 314.813 550.352 cv
314.789 550.328 314.781 550.293 314.781 550.246 cv
314.781 545.984 li
314.781 545.691 314.754 545.422 314.703 545.176 cv
314.648 544.934 314.566 544.723 314.453 544.543 cv
314.34 544.367 314.195 544.23 314.02 544.137 cv
313.84 544.043 313.629 543.996 313.395 543.996 cv
313.098 543.996 312.801 544.113 312.504 544.34 cv
312.199 544.574 311.871 544.906 311.516 545.344 cv
311.516 550.246 li
311.512 550.293 311.5 550.328 311.484 550.352 cv
311.461 550.383 311.43 550.406 311.383 550.426 cv
311.332 550.445 311.266 550.457 311.184 550.473 cv
311.098 550.48 310.992 550.488 310.871 550.488 cv
310.75 550.488 310.648 550.48 310.563 550.473 cv
310.477 550.457 310.406 550.445 310.359 550.426 cv
310.305 550.406 310.273 550.383 310.258 550.352 cv
310.238 550.328 310.227 550.293 310.23 550.246 cv
310.23 545.984 li
310.227 545.691 310.199 545.422 310.145 545.176 cv
310.086 544.934 310 544.723 309.887 544.543 cv
309.773 544.367 309.629 544.23 309.457 544.137 cv
309.277 544.043 309.07 543.996 308.836 543.996 cv
308.535 543.996 308.238 544.113 307.938 544.34 cv
307.637 544.574 307.309 544.906 306.957 545.344 cv
306.957 550.246 li
306.953 550.293 306.941 550.328 306.926 550.352 cv
306.902 550.383 306.871 550.406 306.824 550.426 cv
306.777 550.445 306.711 550.457 306.633 550.473 cv
306.547 550.48 306.441 550.488 306.313 550.488 cv
306.184 550.488 306.078 550.48 306 550.473 cv
305.914 550.457 305.848 550.445 305.801 550.426 cv
305.746 550.406 305.715 550.383 305.699 550.352 cv
305.68 550.328 305.668 550.293 305.672 550.246 cv
305.672 543.234 li
305.668 543.195 305.676 543.16 305.695 543.129 cv
305.707 543.102 305.738 543.078 305.789 543.051 cv
305.832 543.031 305.895 543.016 305.969 543.004 cv
306.039 543 306.133 542.996 306.258 542.992 cv
306.367 542.996 306.465 543 306.543 543.004 cv
306.617 543.016 306.676 543.031 306.719 543.051 cv
306.758 543.078 306.785 543.102 306.805 543.129 cv
306.82 543.16 306.828 543.195 306.832 543.234 cv
306.832 544.16 li
307.223 543.719 307.605 543.398 307.98 543.191 cv
308.348 542.988 308.727 542.883 309.109 542.883 cv
309.398 542.883 309.656 542.918 309.891 542.984 cv
310.117 543.055 310.324 543.148 310.504 543.27 cv
310.68 543.391 310.828 543.535 310.957 543.703 cv
311.078 543.875 311.184 544.066 311.27 544.27 cv
311.5 544.02 311.723 543.805 311.934 543.625 cv
312.145 543.453 312.348 543.309 312.543 543.195 cv
312.738 543.09 312.926 543.012 313.109 542.957 cv
313.293 542.91 313.48 542.883 313.668 542.883 cv
314.121 542.883 314.5 542.965 314.805 543.121 cv
315.109 543.285 315.355 543.496 315.551 543.758 cv
315.738 544.023 315.875 544.332 315.957 544.687 cv
316.035 545.043 316.074 545.418 316.078 545.812 cv
cp
f
324.875 546.645 mo
324.871 547.254 324.805 547.805 324.676 548.289 cv
324.539 548.777 324.344 549.191 324.09 549.531 cv
323.832 549.875 323.516 550.137 323.145 550.316 cv
322.77 550.5 322.344 550.586 321.859 550.59 cv
321.633 550.586 321.426 550.566 321.238 550.523 cv
321.051 550.477 320.863 550.406 320.684 550.309 cv
320.496 550.211 320.316 550.086 320.137 549.934 cv
319.953 549.785 319.762 549.605 319.563 549.391 cv
319.563 550.246 li
319.563 550.293 319.551 550.328 319.531 550.355 cv
319.508 550.391 319.473 550.414 319.43 550.43 cv
319.379 550.445 319.32 550.457 319.254 550.473 cv
319.18 550.48 319.09 550.488 318.984 550.488 cv
318.875 550.488 318.789 550.48 318.719 550.473 cv
318.645 550.457 318.582 550.445 318.539 550.43 cv
318.488 550.414 318.457 550.391 318.445 550.355 cv
318.426 550.328 318.418 550.293 318.422 550.246 cv
318.422 539.836 li
318.418 539.797 318.43 539.762 318.449 539.727 cv
318.465 539.699 318.496 539.672 318.551 539.648 cv
318.598 539.629 318.664 539.613 318.75 539.602 cv
318.828 539.594 318.934 539.59 319.063 539.586 cv
319.191 539.59 319.297 539.594 319.383 539.602 cv
319.461 539.613 319.527 539.629 319.574 539.648 cv
319.621 539.672 319.652 539.699 319.676 539.727 cv
319.691 539.762 319.703 539.797 319.707 539.836 cv
319.707 544.035 li
319.914 543.824 320.117 543.645 320.313 543.5 cv
320.508 543.355 320.695 543.238 320.883 543.145 cv
321.066 543.059 321.254 542.992 321.445 542.945 cv
321.629 542.906 321.828 542.883 322.039 542.883 cv
322.543 542.883 322.977 542.984 323.344 543.187 cv
323.703 543.391 323.996 543.664 324.223 544 cv
324.445 544.344 324.613 544.742 324.719 545.199 cv
324.82 545.656 324.871 546.137 324.875 546.645 cv
cp
323.543 546.793 mo
323.539 546.437 323.512 546.09 323.461 545.75 cv
323.402 545.414 323.309 545.117 323.172 544.855 cv
323.035 544.598 322.855 544.387 322.633 544.227 cv
322.406 544.07 322.125 543.992 321.793 543.988 cv
321.625 543.992 321.461 544.016 321.301 544.059 cv
321.137 544.109 320.973 544.187 320.805 544.293 cv
320.637 544.406 320.461 544.547 320.285 544.715 cv
320.102 544.891 319.91 545.105 319.707 545.359 cv
319.707 548.156 li
320.063 548.59 320.402 548.922 320.727 549.145 cv
321.051 549.375 321.387 549.488 321.738 549.484 cv
322.059 549.488 322.336 549.41 322.57 549.25 cv
322.797 549.098 322.984 548.891 323.129 548.629 cv
323.273 548.375 323.379 548.086 323.445 547.766 cv
323.508 547.449 323.539 547.125 323.543 546.793 cv
cp
f
332.785 546.437 mo
332.781 546.641 332.73 546.781 332.633 546.867 cv
332.527 546.953 332.41 546.996 332.285 546.996 cv
327.668 546.996 li
327.664 547.387 327.703 547.738 327.785 548.051 cv
327.859 548.363 327.992 548.633 328.176 548.852 cv
328.355 549.078 328.59 549.25 328.887 549.367 cv
329.176 549.492 329.535 549.551 329.961 549.547 cv
330.293 549.551 330.59 549.523 330.852 549.465 cv
331.113 549.414 331.34 549.352 331.531 549.281 cv
331.719 549.215 331.875 549.156 332 549.098 cv
332.121 549.047 332.215 549.02 332.277 549.016 cv
332.313 549.02 332.344 549.027 332.375 549.043 cv
332.402 549.062 332.426 549.09 332.445 549.125 cv
332.457 549.164 332.469 549.215 332.48 549.277 cv
332.484 549.344 332.488 549.422 332.492 549.516 cv
332.488 549.586 332.484 549.645 332.484 549.691 cv
332.477 549.738 332.473 549.781 332.465 549.82 cv
332.457 549.859 332.441 549.895 332.426 549.926 cv
332.402 549.957 332.379 549.988 332.355 550.016 cv
332.324 550.047 332.242 550.094 332.102 550.156 cv
331.961 550.223 331.777 550.285 331.555 550.348 cv
331.328 550.41 331.07 550.465 330.777 550.516 cv
330.484 550.562 330.172 550.586 329.84 550.59 cv
329.262 550.586 328.754 550.508 328.324 550.348 cv
327.887 550.187 327.523 549.949 327.23 549.633 cv
326.93 549.316 326.707 548.922 326.559 548.441 cv
326.41 547.965 326.336 547.406 326.336 546.77 cv
326.336 546.172 326.41 545.633 326.566 545.148 cv
326.719 544.672 326.945 544.262 327.242 543.926 cv
327.535 543.59 327.891 543.332 328.305 543.152 cv
328.719 542.973 329.184 542.883 329.699 542.883 cv
330.25 542.883 330.719 542.973 331.105 543.148 cv
331.492 543.328 331.809 543.566 332.063 543.863 cv
332.309 544.164 332.492 544.516 332.609 544.914 cv
332.723 545.32 332.781 545.75 332.785 546.203 cv
cp
331.492 546.055 mo
331.508 545.379 331.355 544.848 331.039 544.465 cv
330.723 544.082 330.254 543.891 329.637 543.887 cv
329.313 543.891 329.031 543.949 328.793 544.066 cv
328.551 544.187 328.352 544.348 328.191 544.543 cv
328.027 544.742 327.902 544.973 327.816 545.234 cv
327.727 545.496 327.676 545.77 327.668 546.055 cv
cp
f
338.852 543.691 mo
338.848 543.809 338.848 543.906 338.844 543.98 cv
338.836 544.062 338.824 544.125 338.813 544.164 cv
338.793 544.211 338.773 544.242 338.754 544.266 cv
338.727 544.289 338.695 544.301 338.656 544.301 cv
338.613 544.301 338.563 544.289 338.504 544.266 cv
338.441 544.242 338.371 544.219 338.301 544.195 cv
338.223 544.172 338.141 544.152 338.047 544.129 cv
337.953 544.113 337.852 544.102 337.742 544.098 cv
337.609 544.102 337.48 544.129 337.359 544.176 cv
337.234 544.23 337.105 544.316 336.969 544.434 cv
336.828 544.559 336.684 544.715 336.535 544.91 cv
336.383 545.105 336.215 545.348 336.035 545.633 cv
336.035 550.246 li
336.031 550.293 336.02 550.328 336.004 550.352 cv
335.98 550.383 335.949 550.406 335.902 550.426 cv
335.855 550.445 335.789 550.457 335.711 550.473 cv
335.625 550.48 335.52 550.488 335.391 550.488 cv
335.262 550.488 335.156 550.48 335.078 550.473 cv
334.992 550.457 334.926 550.445 334.879 550.426 cv
334.824 550.406 334.793 550.383 334.777 550.352 cv
334.758 550.328 334.746 550.293 334.75 550.246 cv
334.75 543.234 li
334.746 543.195 334.754 543.16 334.773 543.129 cv
334.785 543.102 334.816 543.078 334.867 543.051 cv
334.91 543.031 334.973 543.016 335.047 543.004 cv
335.117 543 335.211 542.996 335.336 542.992 cv
335.445 542.996 335.543 543 335.621 543.004 cv
335.695 543.016 335.754 543.031 335.797 543.051 cv
335.836 543.078 335.863 543.102 335.883 543.129 cv
335.898 543.16 335.906 543.195 335.91 543.234 cv
335.91 544.254 li
336.098 543.973 336.281 543.746 336.453 543.57 cv
336.621 543.395 336.781 543.254 336.934 543.152 cv
337.082 543.051 337.23 542.98 337.379 542.941 cv
337.527 542.902 337.676 542.883 337.828 542.883 cv
337.895 542.883 337.973 542.887 338.059 542.895 cv
338.145 542.902 338.234 542.918 338.328 542.937 cv
338.422 542.961 338.504 542.984 338.582 543.008 cv
338.652 543.035 338.707 543.062 338.742 543.086 cv
338.77 543.117 338.789 543.141 338.805 543.16 cv
338.813 543.187 338.824 543.219 338.832 543.25 cv
338.84 543.289 338.844 543.34 338.848 543.41 cv
338.848 543.48 338.848 543.574 338.852 543.691 cv
cp
f
350.609 546.66 mo
350.605 547.238 350.531 547.766 350.383 548.242 cv
350.23 548.727 350.004 549.141 349.707 549.484 cv
349.406 549.836 349.031 550.105 348.586 550.297 cv
348.133 550.492 347.613 550.586 347.023 550.59 cv
346.445 550.586 345.941 550.504 345.516 550.332 cv
345.086 550.164 344.73 549.914 344.445 549.586 cv
344.156 549.258 343.941 548.863 343.805 548.395 cv
343.664 547.93 343.598 547.398 343.598 546.801 cv
343.598 546.234 343.668 545.707 343.816 545.227 cv
343.961 544.746 344.188 544.332 344.488 543.98 cv
344.785 543.633 345.156 543.363 345.605 543.172 cv
346.051 542.98 346.574 542.883 347.172 542.883 cv
347.75 542.883 348.25 542.969 348.68 543.141 cv
349.105 543.312 349.465 543.562 349.75 543.891 cv
350.035 544.219 350.25 544.617 350.395 545.082 cv
350.535 545.551 350.605 546.078 350.609 546.66 cv
cp
349.277 546.746 mo
349.273 546.371 349.238 546.012 349.172 545.672 cv
349.098 545.336 348.98 545.043 348.82 544.785 cv
348.656 544.535 348.438 544.332 348.16 544.18 cv
347.879 544.035 347.531 543.961 347.121 543.957 cv
346.734 543.961 346.406 544.027 346.133 544.16 cv
345.855 544.297 345.629 544.488 345.453 544.734 cv
345.273 544.98 345.141 545.273 345.059 545.609 cv
344.969 545.949 344.926 546.316 344.93 546.715 cv
344.926 547.102 344.961 547.465 345.035 547.801 cv
345.102 548.141 345.219 548.434 345.387 548.684 cv
345.551 548.937 345.773 549.141 346.051 549.285 cv
346.328 549.437 346.676 549.512 347.09 549.508 cv
347.465 549.512 347.793 549.441 348.074 549.305 cv
348.352 549.172 348.578 548.984 348.758 548.734 cv
348.934 548.492 349.063 548.199 349.148 547.863 cv
349.23 547.527 349.273 547.156 349.277 546.746 cv
cp
f
356.34 540.348 mo
356.336 540.449 356.332 540.527 356.324 540.586 cv
356.313 540.648 356.301 540.699 356.289 540.73 cv
356.273 540.77 356.258 540.793 356.238 540.805 cv
356.215 540.82 356.188 540.828 356.16 540.824 cv
356.121 540.828 356.074 540.816 356.023 540.789 cv
355.965 540.77 355.898 540.742 355.824 540.711 cv
355.742 540.684 355.652 540.656 355.547 540.633 cv
355.438 540.609 355.313 540.598 355.18 540.598 cv
354.984 540.598 354.82 540.629 354.688 540.691 cv
354.547 540.754 354.438 540.852 354.359 540.984 cv
354.273 541.117 354.215 541.289 354.18 541.5 cv
354.141 541.711 354.121 541.969 354.125 542.266 cv
354.125 543.031 li
355.691 543.031 li
355.73 543.035 355.766 543.043 355.797 543.059 cv
355.824 543.078 355.852 543.109 355.875 543.152 cv
355.898 543.199 355.914 543.258 355.93 543.32 cv
355.938 543.391 355.945 543.473 355.949 543.566 cv
355.945 543.758 355.922 543.891 355.879 543.973 cv
355.828 544.059 355.766 544.102 355.691 544.098 cv
354.125 544.098 li
354.125 550.246 li
354.121 550.293 354.113 550.328 354.094 550.352 cv
354.07 550.383 354.035 550.406 353.988 550.426 cv
353.938 550.445 353.871 550.457 353.789 550.473 cv
353.703 550.48 353.598 550.488 353.48 550.488 cv
353.352 550.488 353.25 550.48 353.168 550.473 cv
353.082 550.457 353.016 550.445 352.969 550.426 cv
352.918 550.406 352.883 550.383 352.863 550.352 cv
352.84 550.328 352.828 550.293 352.832 550.246 cv
352.832 544.098 li
351.844 544.098 li
351.758 544.102 351.695 544.059 351.656 543.973 cv
351.613 543.891 351.59 543.758 351.594 543.566 cv
351.59 543.473 351.598 543.391 351.609 543.32 cv
351.617 543.258 351.633 543.199 351.656 543.152 cv
351.676 543.109 351.699 543.078 351.734 543.059 cv
351.762 543.043 351.801 543.035 351.844 543.031 cv
352.832 543.031 li
352.832 542.305 li
352.828 541.82 352.875 541.402 352.969 541.047 cv
353.059 540.699 353.195 540.41 353.383 540.187 cv
353.566 539.965 353.801 539.801 354.09 539.691 cv
354.371 539.586 354.707 539.531 355.094 539.531 cv
355.27 539.531 355.445 539.551 355.621 539.582 cv
355.789 539.621 355.922 539.656 356.02 539.691 cv
356.109 539.734 356.172 539.77 356.207 539.797 cv
356.234 539.832 356.262 539.871 356.285 539.918 cv
356.305 539.969 356.316 540.031 356.328 540.098 cv
356.332 540.172 356.336 540.254 356.34 540.348 cv
cp
f
366.539 547.613 mo
366.535 548.086 366.449 548.508 366.277 548.875 cv
366.102 549.25 365.859 549.562 365.551 549.816 cv
365.242 550.074 364.879 550.266 364.461 550.395 cv
364.039 550.523 363.59 550.586 363.109 550.59 cv
362.77 550.586 362.453 550.559 362.168 550.504 cv
361.879 550.445 361.625 550.379 361.398 550.293 cv
361.172 550.215 360.98 550.129 360.828 550.035 cv
360.672 549.949 360.566 549.871 360.508 549.809 cv
360.449 549.746 360.406 549.668 360.379 549.574 cv
360.348 549.48 360.332 549.352 360.336 549.187 cv
360.332 549.074 360.336 548.98 360.352 548.902 cv
360.359 548.828 360.375 548.766 360.398 548.719 cv
360.414 548.672 360.441 548.641 360.477 548.621 cv
360.504 548.605 360.539 548.598 360.582 548.594 cv
360.652 548.598 360.754 548.641 360.891 548.727 cv
361.02 548.816 361.191 548.914 361.402 549.016 cv
361.609 549.125 361.859 549.223 362.152 549.309 cv
362.445 549.402 362.785 549.445 363.172 549.445 cv
363.461 549.445 363.727 549.406 363.969 549.328 cv
364.207 549.25 364.414 549.141 364.594 548.996 cv
364.766 548.855 364.902 548.68 364.996 548.469 cv
365.09 548.262 365.137 548.027 365.137 547.762 cv
365.137 547.48 365.07 547.234 364.941 547.027 cv
364.809 546.828 364.637 546.652 364.426 546.496 cv
364.211 546.348 363.969 546.207 363.695 546.074 cv
363.422 545.949 363.141 545.816 362.859 545.684 cv
362.57 545.551 362.293 545.406 362.023 545.242 cv
361.754 545.086 361.512 544.895 361.301 544.676 cv
361.082 544.457 360.91 544.203 360.781 543.906 cv
360.645 543.617 360.578 543.266 360.582 542.852 cv
360.578 542.434 360.656 542.059 360.813 541.727 cv
360.965 541.398 361.176 541.121 361.453 540.895 cv
361.723 540.676 362.047 540.504 362.426 540.387 cv
362.801 540.27 363.211 540.211 363.648 540.211 cv
363.867 540.211 364.09 540.23 364.32 540.27 cv
364.543 540.309 364.754 540.359 364.957 540.422 cv
365.152 540.488 365.332 540.562 365.492 540.641 cv
365.645 540.723 365.746 540.789 365.801 540.836 cv
365.848 540.891 365.883 540.93 365.898 540.953 cv
365.914 540.984 365.926 541.02 365.938 541.062 cv
365.945 541.109 365.953 541.164 365.961 541.223 cv
365.965 541.289 365.969 541.367 365.969 541.465 cv
365.969 541.559 365.965 541.645 365.957 541.715 cv
365.949 541.793 365.938 541.852 365.922 541.898 cv
365.906 541.945 365.883 541.98 365.855 542.004 cv
365.824 542.027 365.793 542.039 365.758 542.039 cv
365.699 542.039 365.609 542.004 365.488 541.934 cv
365.363 541.863 365.211 541.781 365.039 541.687 cv
364.859 541.598 364.652 541.516 364.414 541.437 cv
364.168 541.363 363.898 541.324 363.602 541.324 cv
363.32 541.324 363.074 541.363 362.867 541.437 cv
362.656 541.516 362.484 541.617 362.352 541.738 cv
362.215 541.863 362.113 542.008 362.047 542.18 cv
361.98 542.352 361.949 542.535 361.949 542.727 cv
361.949 543.012 362.012 543.254 362.141 543.453 cv
362.27 543.656 362.441 543.836 362.66 543.988 cv
362.871 544.148 363.117 544.289 363.395 544.418 cv
363.668 544.551 363.949 544.684 364.238 544.812 cv
364.523 544.945 364.805 545.09 365.078 545.246 cv
365.352 545.406 365.598 545.594 365.816 545.809 cv
366.031 546.027 366.203 546.281 366.34 546.574 cv
366.469 546.867 366.535 547.215 366.539 547.613 cv
cp
f
374.305 550.246 mo
374.301 550.293 374.293 550.328 374.277 550.352 cv
374.258 550.383 374.223 550.406 374.18 550.426 cv
374.133 550.445 374.074 550.457 374 550.473 cv
373.922 550.48 373.828 550.488 373.723 550.488 cv
373.598 550.488 373.5 550.48 373.43 550.473 cv
373.352 550.457 373.293 550.445 373.25 550.426 cv
373.203 550.406 373.172 550.383 373.16 550.352 cv
373.141 550.328 373.133 550.293 373.137 550.246 cv
373.137 549.32 li
372.734 549.766 372.34 550.086 371.953 550.285 cv
371.559 550.488 371.164 550.586 370.77 550.59 cv
370.297 550.586 369.902 550.512 369.586 550.355 cv
369.266 550.203 369.008 549.992 368.813 549.723 cv
368.609 549.457 368.469 549.145 368.387 548.785 cv
368.297 548.43 368.254 547.996 368.258 547.488 cv
368.258 543.234 li
368.254 543.195 368.262 543.16 368.285 543.129 cv
368.301 543.102 368.336 543.078 368.391 543.051 cv
368.438 543.031 368.508 543.016 368.594 543.004 cv
368.676 543 368.777 542.996 368.906 542.992 cv
369.027 542.996 369.133 543 369.219 543.004 cv
369.301 543.016 369.367 543.031 369.414 543.051 cv
369.461 543.078 369.496 543.102 369.52 543.129 cv
369.539 543.16 369.547 543.195 369.551 543.234 cv
369.551 547.316 li
369.547 547.73 369.578 548.059 369.641 548.305 cv
369.699 548.551 369.789 548.762 369.914 548.934 cv
370.031 549.113 370.188 549.246 370.379 549.34 cv
370.563 549.437 370.781 549.488 371.031 549.484 cv
371.352 549.488 371.672 549.371 371.996 549.141 cv
372.313 548.914 372.652 548.578 373.012 548.133 cv
373.012 543.234 li
373.012 543.195 373.02 543.16 373.039 543.129 cv
373.055 543.102 373.09 543.078 373.145 543.051 cv
373.195 543.031 373.262 543.016 373.344 543.004 cv
373.422 543 373.527 542.996 373.66 542.992 cv
373.781 542.996 373.887 543 373.973 543.004 cv
374.055 543.016 374.117 543.031 374.164 543.051 cv
374.207 543.078 374.242 543.102 374.27 543.129 cv
374.289 543.16 374.301 543.195 374.305 543.234 cv
cp
f
383.16 546.645 mo
383.156 547.254 383.09 547.805 382.961 548.289 cv
382.824 548.777 382.629 549.191 382.375 549.531 cv
382.117 549.875 381.801 550.137 381.43 550.316 cv
381.055 550.5 380.629 550.586 380.145 550.59 cv
379.918 550.586 379.711 550.566 379.523 550.523 cv
379.336 550.477 379.148 550.406 378.969 550.309 cv
378.781 550.211 378.602 550.086 378.422 549.934 cv
378.238 549.785 378.047 549.605 377.848 549.391 cv
377.848 550.246 li
377.848 550.293 377.836 550.328 377.816 550.355 cv
377.793 550.391 377.758 550.414 377.715 550.43 cv
377.664 550.445 377.605 550.457 377.539 550.473 cv
377.465 550.48 377.375 550.488 377.27 550.488 cv
377.16 550.488 377.074 550.48 377.004 550.473 cv
376.93 550.457 376.867 550.445 376.824 550.43 cv
376.773 550.414 376.742 550.391 376.73 550.355 cv
376.711 550.328 376.703 550.293 376.707 550.246 cv
376.707 539.836 li
376.703 539.797 376.715 539.762 376.734 539.727 cv
376.75 539.699 376.781 539.672 376.836 539.648 cv
376.883 539.629 376.949 539.613 377.035 539.602 cv
377.113 539.594 377.219 539.59 377.348 539.586 cv
377.477 539.59 377.582 539.594 377.668 539.602 cv
377.746 539.613 377.813 539.629 377.859 539.648 cv
377.906 539.672 377.938 539.699 377.961 539.727 cv
377.977 539.762 377.988 539.797 377.992 539.836 cv
377.992 544.035 li
378.199 543.824 378.402 543.645 378.598 543.5 cv
378.793 543.355 378.98 543.238 379.168 543.145 cv
379.352 543.059 379.539 542.992 379.73 542.945 cv
379.914 542.906 380.113 542.883 380.324 542.883 cv
380.828 542.883 381.262 542.984 381.629 543.187 cv
381.988 543.391 382.281 543.664 382.508 544 cv
382.73 544.344 382.898 544.742 383.004 545.199 cv
383.105 545.656 383.156 546.137 383.16 546.645 cv
cp
381.828 546.793 mo
381.824 546.437 381.797 546.09 381.746 545.75 cv
381.688 545.414 381.594 545.117 381.457 544.855 cv
381.32 544.598 381.141 544.387 380.918 544.227 cv
380.691 544.07 380.41 543.992 380.078 543.988 cv
379.91 543.992 379.746 544.016 379.586 544.059 cv
379.422 544.109 379.258 544.187 379.09 544.293 cv
378.922 544.406 378.746 544.547 378.57 544.715 cv
378.387 544.891 378.195 545.105 377.992 545.359 cv
377.992 548.156 li
378.348 548.59 378.688 548.922 379.012 549.145 cv
379.336 549.375 379.672 549.488 380.023 549.484 cv
380.344 549.488 380.621 549.41 380.855 549.25 cv
381.082 549.098 381.27 548.891 381.414 548.629 cv
381.559 548.375 381.664 548.086 381.73 547.766 cv
381.793 547.449 381.824 547.125 381.828 546.793 cv
cp
f
388.328 546.508 mo
388.328 546.711 388.305 546.848 388.258 546.926 cv
388.211 547.004 388.141 547.043 388.055 547.043 cv
384.797 547.043 li
384.703 547.043 384.637 547.004 384.59 546.922 cv
384.543 546.844 384.52 546.707 384.52 546.508 cv
384.52 546.312 384.543 546.172 384.59 546.094 cv
384.637 546.016 384.703 545.977 384.797 545.977 cv
388.055 545.977 li
388.094 545.977 388.133 545.984 388.168 546 cv
388.199 546.016 388.227 546.047 388.254 546.09 cv
388.273 546.137 388.293 546.191 388.309 546.258 cv
388.32 546.328 388.328 546.414 388.328 546.508 cv
cp
f
391.578 550.238 mo
391.574 550.281 391.566 550.316 391.547 550.348 cv
391.523 550.379 391.484 550.406 391.438 550.422 cv
391.383 550.441 391.316 550.453 391.23 550.469 cv
391.145 550.48 391.035 550.488 390.91 550.488 cv
390.781 550.488 390.676 550.48 390.59 550.469 cv
390.5 550.453 390.43 550.441 390.379 550.422 cv
390.324 550.406 390.289 550.379 390.27 550.348 cv
390.246 550.316 390.234 550.281 390.238 550.238 cv
390.238 540.559 li
390.234 540.52 390.246 540.484 390.273 540.449 cv
390.293 540.422 390.332 540.395 390.391 540.375 cv
390.441 540.359 390.512 540.344 390.602 540.328 cv
390.684 540.316 390.785 540.312 390.91 540.309 cv
391.035 540.312 391.145 540.316 391.23 540.328 cv
391.316 540.344 391.383 540.359 391.438 540.375 cv
391.484 540.395 391.523 540.422 391.547 540.449 cv
391.566 540.484 391.574 540.52 391.578 540.559 cv
cp
f
404.566 550.246 mo
404.563 550.293 404.555 550.328 404.535 550.352 cv
404.512 550.383 404.477 550.406 404.434 550.426 cv
404.383 550.445 404.316 550.457 404.238 550.473 cv
404.152 550.48 404.051 550.488 403.926 550.488 cv
403.793 550.488 403.684 550.48 403.605 550.473 cv
403.52 550.457 403.453 550.445 403.406 550.426 cv
403.352 550.406 403.316 550.383 403.301 550.352 cv
403.277 550.328 403.27 550.293 403.27 550.246 cv
403.27 545.984 li
403.27 545.691 403.242 545.422 403.191 545.176 cv
403.137 544.934 403.055 544.723 402.941 544.543 cv
402.828 544.367 402.684 544.23 402.508 544.137 cv
402.328 544.043 402.117 543.996 401.883 543.996 cv
401.586 543.996 401.289 544.113 400.992 544.34 cv
400.688 544.574 400.359 544.906 400.004 545.344 cv
400.004 550.246 li
400 550.293 399.988 550.328 399.973 550.352 cv
399.949 550.383 399.918 550.406 399.871 550.426 cv
399.82 550.445 399.754 550.457 399.672 550.473 cv
399.586 550.48 399.48 550.488 399.359 550.488 cv
399.238 550.488 399.137 550.48 399.051 550.473 cv
398.965 550.457 398.895 550.445 398.848 550.426 cv
398.793 550.406 398.762 550.383 398.746 550.352 cv
398.727 550.328 398.715 550.293 398.719 550.246 cv
398.719 545.984 li
398.715 545.691 398.688 545.422 398.633 545.176 cv
398.574 544.934 398.488 544.723 398.375 544.543 cv
398.262 544.367 398.117 544.23 397.945 544.137 cv
397.766 544.043 397.559 543.996 397.324 543.996 cv
397.023 543.996 396.727 544.113 396.426 544.34 cv
396.125 544.574 395.797 544.906 395.445 545.344 cv
395.445 550.246 li
395.441 550.293 395.43 550.328 395.414 550.352 cv
395.391 550.383 395.359 550.406 395.313 550.426 cv
395.266 550.445 395.199 550.457 395.121 550.473 cv
395.035 550.48 394.93 550.488 394.801 550.488 cv
394.672 550.488 394.566 550.48 394.488 550.473 cv
394.402 550.457 394.336 550.445 394.289 550.426 cv
394.234 550.406 394.203 550.383 394.188 550.352 cv
394.168 550.328 394.156 550.293 394.16 550.246 cv
394.16 543.234 li
394.156 543.195 394.164 543.16 394.184 543.129 cv
394.195 543.102 394.227 543.078 394.277 543.051 cv
394.32 543.031 394.383 543.016 394.457 543.004 cv
394.527 543 394.621 542.996 394.746 542.992 cv
394.855 542.996 394.953 543 395.031 543.004 cv
395.105 543.016 395.164 543.031 395.207 543.051 cv
395.246 543.078 395.273 543.102 395.293 543.129 cv
395.309 543.16 395.316 543.195 395.32 543.234 cv
395.32 544.16 li
395.711 543.719 396.094 543.398 396.469 543.191 cv
396.836 542.988 397.215 542.883 397.598 542.883 cv
397.887 542.883 398.145 542.918 398.379 542.984 cv
398.605 543.055 398.813 543.148 398.992 543.27 cv
399.168 543.391 399.316 543.535 399.445 543.703 cv
399.566 543.875 399.672 544.066 399.758 544.27 cv
399.988 544.02 400.211 543.805 400.422 543.625 cv
400.633 543.453 400.836 543.309 401.031 543.195 cv
401.227 543.09 401.414 543.012 401.598 542.957 cv
401.781 542.91 401.969 542.883 402.156 542.883 cv
402.609 542.883 402.988 542.965 403.293 543.121 cv
403.598 543.285 403.844 543.496 404.039 543.758 cv
404.227 544.023 404.363 544.332 404.445 544.687 cv
404.523 545.043 404.563 545.418 404.566 545.812 cv
cp
f
412.199 550.254 mo
412.195 550.316 412.176 550.363 412.137 550.395 cv
412.094 550.426 412.035 550.449 411.965 550.465 cv
411.887 550.48 411.781 550.488 411.645 550.488 cv
411.508 550.488 411.398 550.48 411.32 550.465 cv
411.234 550.449 411.176 550.426 411.145 550.395 cv
411.105 550.363 411.09 550.316 411.094 550.254 cv
411.094 549.555 li
410.785 549.883 410.441 550.137 410.066 550.316 cv
409.688 550.5 409.289 550.586 408.871 550.59 cv
408.496 550.586 408.164 550.539 407.867 550.445 cv
407.57 550.348 407.316 550.211 407.105 550.027 cv
406.895 549.848 406.73 549.625 406.613 549.359 cv
406.496 549.098 406.438 548.797 406.441 548.453 cv
406.438 548.062 406.516 547.719 406.68 547.426 cv
406.836 547.137 407.07 546.895 407.375 546.703 cv
407.676 546.512 408.043 546.367 408.48 546.27 cv
408.914 546.176 409.406 546.129 409.953 546.125 cv
410.922 546.125 li
410.922 545.578 li
410.918 545.309 410.891 545.07 410.836 544.863 cv
410.777 544.656 410.684 544.484 410.559 544.344 cv
410.426 544.207 410.262 544.102 410.063 544.031 cv
409.855 543.961 409.605 543.926 409.316 543.926 cv
408.996 543.926 408.711 543.965 408.461 544.039 cv
408.203 544.117 407.984 544.199 407.797 544.289 cv
407.609 544.383 407.449 544.469 407.324 544.539 cv
407.191 544.617 407.098 544.652 407.039 544.652 cv
406.996 544.652 406.961 544.645 406.93 544.621 cv
406.898 544.605 406.871 544.574 406.848 544.527 cv
406.824 544.488 406.805 544.434 406.797 544.367 cv
406.781 544.305 406.777 544.234 406.781 544.152 cv
406.777 544.027 406.785 543.922 406.809 543.844 cv
406.824 543.77 406.871 543.699 406.941 543.629 cv
407.012 543.562 407.133 543.484 407.305 543.395 cv
407.477 543.305 407.672 543.223 407.895 543.145 cv
408.117 543.074 408.363 543.012 408.629 542.957 cv
408.895 542.91 409.16 542.883 409.434 542.883 cv
409.934 542.883 410.363 542.941 410.715 543.055 cv
411.066 543.172 411.352 543.34 411.574 543.559 cv
411.789 543.781 411.949 544.055 412.051 544.379 cv
412.148 544.711 412.195 545.094 412.199 545.523 cv
cp
410.922 547.051 mo
409.82 547.051 li
409.465 547.055 409.16 547.086 408.902 547.141 cv
408.641 547.203 408.426 547.289 408.254 547.406 cv
408.082 547.523 407.957 547.664 407.879 547.828 cv
407.797 547.992 407.754 548.18 407.758 548.391 cv
407.754 548.758 407.871 549.051 408.102 549.262 cv
408.332 549.48 408.656 549.586 409.074 549.586 cv
409.41 549.586 409.723 549.5 410.012 549.328 cv
410.301 549.156 410.602 548.895 410.922 548.539 cv
cp
f
420.418 543.551 mo
420.414 543.734 420.391 543.867 420.344 543.945 cv
420.293 544.027 420.23 544.066 420.156 544.066 cv
419.148 544.066 li
419.328 544.254 419.457 544.461 419.531 544.687 cv
419.602 544.914 419.637 545.148 419.641 545.391 cv
419.637 545.797 419.57 546.156 419.445 546.469 cv
419.313 546.781 419.129 547.047 418.887 547.258 cv
418.645 547.477 418.355 547.641 418.027 547.754 cv
417.691 547.871 417.324 547.93 416.922 547.926 cv
416.633 547.93 416.359 547.891 416.105 547.812 cv
415.844 547.738 415.648 547.645 415.512 547.527 cv
415.418 547.625 415.34 547.73 415.281 547.848 cv
415.219 547.969 415.188 548.105 415.191 548.258 cv
415.188 548.441 415.273 548.594 415.445 548.711 cv
415.613 548.836 415.836 548.898 416.117 548.906 cv
417.949 548.984 li
418.297 548.996 418.613 549.043 418.906 549.129 cv
419.195 549.215 419.449 549.34 419.664 549.496 cv
419.875 549.656 420.043 549.848 420.164 550.078 cv
420.281 550.312 420.34 550.582 420.344 550.887 cv
420.34 551.207 420.273 551.512 420.141 551.805 cv
420.004 552.094 419.797 552.348 419.52 552.57 cv
419.238 552.789 418.883 552.965 418.453 553.094 cv
418.023 553.219 417.516 553.281 416.93 553.285 cv
416.359 553.281 415.875 553.234 415.48 553.141 cv
415.082 553.043 414.758 552.91 414.504 552.746 cv
414.25 552.578 414.066 552.383 413.953 552.152 cv
413.836 551.918 413.777 551.664 413.781 551.398 cv
413.777 551.227 413.797 551.062 413.844 550.902 cv
413.883 550.738 413.945 550.586 414.031 550.441 cv
414.113 550.297 414.223 550.16 414.352 550.023 cv
414.477 549.895 414.621 549.762 414.793 549.633 cv
414.535 549.504 414.348 549.34 414.227 549.141 cv
414.105 548.945 414.047 548.734 414.047 548.5 cv
414.047 548.187 414.109 547.902 414.238 547.652 cv
414.367 547.402 414.527 547.18 414.723 546.98 cv
414.559 546.789 414.434 546.574 414.34 546.332 cv
414.246 546.094 414.199 545.801 414.199 545.453 cv
414.199 545.059 414.266 544.699 414.402 544.379 cv
414.535 544.062 414.723 543.797 414.965 543.578 cv
415.203 543.363 415.488 543.195 415.824 543.074 cv
416.156 542.961 416.523 542.902 416.922 542.898 cv
417.133 542.902 417.332 542.914 417.516 542.934 cv
417.699 542.961 417.871 542.992 418.035 543.031 cv
420.156 543.031 li
420.242 543.035 420.309 543.078 420.352 543.16 cv
420.395 543.25 420.414 543.379 420.418 543.551 cv
cp
418.41 545.398 mo
418.406 544.926 418.273 544.555 418.016 544.281 cv
417.75 544.016 417.379 543.879 416.898 543.879 cv
416.645 543.879 416.426 543.922 416.246 544.004 cv
416.059 544.09 415.906 544.203 415.785 544.348 cv
415.664 544.496 415.574 544.664 415.516 544.852 cv
415.453 545.039 415.422 545.238 415.426 545.445 cv
415.422 545.91 415.555 546.273 415.816 546.539 cv
416.078 546.805 416.445 546.937 416.922 546.934 cv
417.172 546.937 417.391 546.898 417.582 546.812 cv
417.766 546.734 417.922 546.621 418.047 546.48 cv
418.168 546.34 418.258 546.176 418.32 545.984 cv
418.375 545.801 418.406 545.605 418.41 545.398 cv
cp
419.055 550.957 mo
419.051 550.652 418.926 550.422 418.684 550.258 cv
418.434 550.098 418.102 550.008 417.684 549.996 cv
415.867 549.934 li
415.699 550.066 415.563 550.191 415.461 550.305 cv
415.352 550.422 415.27 550.531 415.207 550.641 cv
415.145 550.746 415.102 550.852 415.078 550.957 cv
415.055 551.059 415.043 551.164 415.043 551.273 cv
415.043 551.609 415.211 551.863 415.555 552.043 cv
415.895 552.215 416.375 552.305 416.992 552.305 cv
417.379 552.305 417.703 552.266 417.969 552.191 cv
418.227 552.113 418.438 552.012 418.602 551.891 cv
418.758 551.762 418.875 551.621 418.949 551.461 cv
419.016 551.301 419.051 551.133 419.055 550.957 cv
cp
f
427.98 546.437 mo
427.977 546.641 427.926 546.781 427.828 546.867 cv
427.723 546.953 427.605 546.996 427.48 546.996 cv
422.863 546.996 li
422.859 547.387 422.898 547.738 422.98 548.051 cv
423.055 548.363 423.188 548.633 423.371 548.852 cv
423.551 549.078 423.785 549.25 424.082 549.367 cv
424.371 549.492 424.73 549.551 425.156 549.547 cv
425.488 549.551 425.785 549.523 426.047 549.465 cv
426.309 549.414 426.535 549.352 426.727 549.281 cv
426.914 549.215 427.07 549.156 427.195 549.098 cv
427.316 549.047 427.41 549.02 427.473 549.016 cv
427.508 549.02 427.539 549.027 427.57 549.043 cv
427.598 549.062 427.621 549.09 427.641 549.125 cv
427.652 549.164 427.664 549.215 427.676 549.277 cv
427.68 549.344 427.684 549.422 427.688 549.516 cv
427.684 549.586 427.68 549.645 427.68 549.691 cv
427.672 549.738 427.668 549.781 427.66 549.82 cv
427.652 549.859 427.637 549.895 427.621 549.926 cv
427.598 549.957 427.574 549.988 427.551 550.016 cv
427.52 550.047 427.438 550.094 427.297 550.156 cv
427.156 550.223 426.973 550.285 426.75 550.348 cv
426.523 550.41 426.266 550.465 425.973 550.516 cv
425.68 550.562 425.367 550.586 425.035 550.59 cv
424.457 550.586 423.949 550.508 423.52 550.348 cv
423.082 550.187 422.719 549.949 422.426 549.633 cv
422.125 549.316 421.902 548.922 421.754 548.441 cv
421.605 547.965 421.531 547.406 421.531 546.77 cv
421.531 546.172 421.605 545.633 421.762 545.148 cv
421.914 544.672 422.141 544.262 422.438 543.926 cv
422.73 543.59 423.086 543.332 423.5 543.152 cv
423.914 542.973 424.379 542.883 424.895 542.883 cv
425.445 542.883 425.914 542.973 426.301 543.148 cv
426.688 543.328 427.004 543.566 427.258 543.863 cv
427.504 544.164 427.688 544.516 427.805 544.914 cv
427.918 545.32 427.977 545.75 427.98 546.203 cv
cp
426.688 546.055 mo
426.703 545.379 426.551 544.848 426.234 544.465 cv
425.918 544.082 425.449 543.891 424.832 543.887 cv
424.508 543.891 424.227 543.949 423.988 544.066 cv
423.746 544.187 423.547 544.348 423.387 544.543 cv
423.223 544.742 423.098 544.973 423.012 545.234 cv
422.922 545.496 422.871 545.77 422.863 546.055 cv
cp
f
434.348 548.336 mo
434.344 548.699 434.277 549.02 434.148 549.297 cv
434.016 549.578 433.828 549.812 433.586 550.004 cv
433.34 550.199 433.047 550.344 432.711 550.441 cv
432.371 550.539 432 550.586 431.598 550.59 cv
431.344 550.586 431.105 550.566 430.883 550.531 cv
430.656 550.488 430.457 550.441 430.277 550.383 cv
430.098 550.324 429.945 550.262 429.82 550.195 cv
429.695 550.133 429.602 550.074 429.547 550.02 cv
429.488 549.969 429.449 549.898 429.426 549.801 cv
429.398 549.711 429.387 549.582 429.387 549.422 cv
429.387 549.324 429.391 549.242 429.402 549.172 cv
429.41 549.105 429.422 549.051 429.441 549.008 cv
429.453 548.969 429.477 548.937 429.504 548.918 cv
429.531 548.902 429.563 548.895 429.602 548.891 cv
429.656 548.895 429.742 548.93 429.855 548.996 cv
429.965 549.07 430.102 549.148 430.27 549.227 cv
430.43 549.312 430.621 549.387 430.848 549.457 cv
431.066 549.527 431.324 549.562 431.621 549.562 cv
431.836 549.562 432.035 549.539 432.215 549.492 cv
432.391 549.445 432.543 549.379 432.672 549.285 cv
432.801 549.199 432.902 549.082 432.973 548.937 cv
433.043 548.801 433.078 548.633 433.078 548.437 cv
433.078 548.242 433.027 548.078 432.926 547.941 cv
432.824 547.809 432.688 547.687 432.523 547.582 cv
432.355 547.48 432.172 547.391 431.965 547.305 cv
431.754 547.227 431.539 547.141 431.32 547.051 cv
431.102 546.965 430.887 546.863 430.676 546.75 cv
430.465 546.641 430.273 546.508 430.109 546.344 cv
429.938 546.187 429.805 545.992 429.707 545.766 cv
429.602 545.543 429.551 545.277 429.555 544.965 cv
429.551 544.691 429.605 544.426 429.715 544.172 cv
429.82 543.922 429.98 543.703 430.195 543.512 cv
430.406 543.324 430.672 543.172 430.992 543.055 cv
431.313 542.941 431.684 542.883 432.113 542.883 cv
432.297 542.883 432.484 542.898 432.672 542.93 cv
432.855 542.961 433.023 543 433.18 543.047 cv
433.328 543.094 433.457 543.145 433.566 543.199 cv
433.668 543.254 433.75 543.305 433.809 543.344 cv
433.859 543.391 433.895 543.426 433.918 543.453 cv
433.934 543.484 433.949 543.52 433.957 543.555 cv
433.965 543.598 433.973 543.645 433.98 543.699 cv
433.988 543.758 433.992 543.828 433.992 543.91 cv
433.992 544 433.988 544.078 433.98 544.141 cv
433.973 544.211 433.957 544.262 433.941 544.301 cv
433.918 544.344 433.898 544.375 433.875 544.391 cv
433.848 544.41 433.816 544.418 433.789 544.418 cv
433.738 544.418 433.672 544.391 433.586 544.332 cv
433.496 544.277 433.383 544.215 433.242 544.148 cv
433.102 544.086 432.934 544.027 432.746 543.965 cv
432.555 543.91 432.34 543.879 432.098 543.879 cv
431.875 543.879 431.684 543.906 431.52 543.953 cv
431.352 544.008 431.215 544.078 431.109 544.164 cv
431.004 544.258 430.922 544.363 430.871 544.488 cv
430.813 544.613 430.785 544.75 430.789 544.895 cv
430.785 545.098 430.836 545.266 430.941 545.402 cv
431.043 545.543 431.18 545.664 431.348 545.766 cv
431.512 545.871 431.703 545.965 431.918 546.047 cv
432.129 546.133 432.344 546.219 432.566 546.305 cv
432.785 546.395 433.004 546.496 433.223 546.602 cv
433.438 546.711 433.629 546.84 433.797 546.996 cv
433.961 547.152 434.094 547.34 434.195 547.559 cv
434.293 547.777 434.344 548.039 434.348 548.336 cv
cp
f
215.414 9.94897 mo
215.414 10.516 215.324 11.02 215.148 11.453 cv
214.969 11.891 214.711 12.258 214.375 12.555 cv
214.035 12.859 213.621 13.086 213.133 13.238 cv
212.641 13.395 212.063 13.473 211.398 13.469 cv
210.559 13.469 li
210.559 16.687 li
210.555 16.742 210.539 16.789 210.508 16.828 cv
210.473 16.871 210.418 16.906 210.34 16.93 cv
210.262 16.957 210.156 16.977 210.027 16.992 cv
209.895 17.008 209.73 17.016 209.531 17.016 cv
209.332 17.016 209.164 17.008 209.035 16.992 cv
208.898 16.977 208.793 16.957 208.719 16.93 cv
208.637 16.906 208.582 16.871 208.555 16.828 cv
208.52 16.789 208.504 16.742 208.508 16.687 cv
208.508 7.617 li
208.504 7.375 208.57 7.19098 208.699 7.06598 cv
208.824 6.94501 208.992 6.88702 209.203 6.883 cv
211.578 6.883 li
211.813 6.88702 212.043 6.89502 212.262 6.90997 cv
212.477 6.92999 212.734 6.96899 213.035 7.02698 cv
213.336 7.09003 213.641 7.19897 213.953 7.35901 cv
214.262 7.52301 214.523 7.72998 214.742 7.97302 cv
214.957 8.22302 215.125 8.51202 215.242 8.84003 cv
215.355 9.172 215.414 9.539 215.414 9.94897 cv
cp
213.27 10.094 mo
213.27 9.74597 213.207 9.453 213.082 9.22302 cv
212.957 8.99597 212.801 8.828 212.621 8.71503 cv
212.438 8.60901 212.25 8.539 212.051 8.508 cv
211.848 8.47998 211.641 8.46899 211.43 8.46503 cv
210.559 8.46503 li
210.559 11.887 li
211.477 11.887 li
211.805 11.891 212.078 11.844 212.301 11.754 cv
212.52 11.668 212.699 11.547 212.84 11.387 cv
212.977 11.23 213.082 11.039 213.16 10.816 cv
213.23 10.598 213.27 10.359 213.27 10.094 cv
cp
f
221.352 10.398 mo
221.352 10.59 221.344 10.742 221.336 10.859 cv
221.32 10.98 221.305 11.074 221.289 11.141 cv
221.266 11.211 221.238 11.258 221.207 11.281 cv
221.168 11.309 221.125 11.32 221.078 11.32 cv
221.031 11.32 220.984 11.312 220.938 11.293 cv
220.883 11.277 220.824 11.258 220.762 11.234 cv
220.691 11.215 220.621 11.195 220.547 11.176 cv
220.465 11.16 220.379 11.152 220.289 11.148 cv
220.176 11.152 220.066 11.172 219.961 11.215 cv
219.852 11.262 219.738 11.332 219.625 11.422 cv
219.504 11.516 219.383 11.641 219.258 11.793 cv
219.129 11.953 218.992 12.145 218.848 12.371 cv
218.848 16.703 li
218.844 16.758 218.828 16.801 218.801 16.84 cv
218.766 16.879 218.711 16.914 218.641 16.937 cv
218.563 16.965 218.465 16.98 218.34 16.996 cv
218.215 17.008 218.055 17.016 217.867 17.016 cv
217.672 17.016 217.516 17.008 217.391 16.996 cv
217.266 16.98 217.164 16.965 217.09 16.937 cv
217.012 16.914 216.957 16.879 216.93 16.84 cv
216.895 16.801 216.879 16.758 216.883 16.703 cv
216.883 9.75403 li
216.879 9.70697 216.895 9.65997 216.922 9.617 cv
216.945 9.58197 216.992 9.55103 217.063 9.52002 cv
217.129 9.49597 217.215 9.47699 217.324 9.461 cv
217.43 9.453 217.563 9.44501 217.727 9.44098 cv
217.891 9.44501 218.027 9.453 218.137 9.461 cv
218.242 9.47699 218.328 9.49597 218.391 9.52002 cv
218.449 9.55103 218.492 9.58197 218.52 9.617 cv
218.543 9.65997 218.555 9.70697 218.559 9.75403 cv
218.559 10.617 li
218.738 10.359 218.91 10.148 219.074 9.97699 cv
219.23 9.81201 219.387 9.67603 219.535 9.57397 cv
219.68 9.47699 219.824 9.40997 219.969 9.367 cv
220.113 9.33197 220.258 9.31201 220.406 9.30902 cv
220.473 9.31201 220.547 9.31598 220.625 9.32001 cv
220.703 9.33197 220.781 9.34399 220.867 9.35901 cv
220.945 9.37903 221.02 9.39801 221.086 9.422 cv
221.145 9.44501 221.191 9.47302 221.223 9.49597 cv
221.25 9.52698 221.27 9.55499 221.285 9.58197 cv
221.297 9.617 221.309 9.65997 221.32 9.711 cv
221.328 9.77002 221.336 9.85199 221.344 9.95697 cv
221.348 10.066 221.352 10.215 221.352 10.398 cv
cp
f
228.855 13.027 mo
228.852 13.266 228.801 13.441 228.695 13.555 cv
228.586 13.672 228.438 13.73 228.258 13.727 cv
224.023 13.727 li
224.02 14.027 224.055 14.297 224.129 14.535 cv
224.195 14.777 224.309 14.98 224.465 15.148 cv
224.617 15.32 224.813 15.449 225.055 15.535 cv
225.293 15.625 225.582 15.668 225.926 15.668 cv
226.266 15.668 226.566 15.645 226.828 15.594 cv
227.086 15.547 227.313 15.492 227.504 15.43 cv
227.691 15.371 227.848 15.316 227.977 15.266 cv
228.098 15.219 228.199 15.195 228.281 15.191 cv
228.324 15.195 228.363 15.203 228.398 15.219 cv
228.426 15.238 228.453 15.27 228.473 15.316 cv
228.492 15.363 228.504 15.43 228.516 15.516 cv
228.52 15.602 228.523 15.711 228.527 15.84 cv
228.523 15.957 228.523 16.055 228.52 16.133 cv
228.512 16.215 228.504 16.281 228.496 16.336 cv
228.484 16.395 228.469 16.445 228.449 16.48 cv
228.43 16.523 228.402 16.559 228.371 16.594 cv
228.336 16.633 228.242 16.684 228.094 16.742 cv
227.938 16.809 227.746 16.871 227.516 16.926 cv
227.277 16.988 227.008 17.035 226.711 17.082 cv
226.406 17.121 226.086 17.145 225.746 17.148 cv
225.125 17.145 224.582 17.07 224.121 16.914 cv
223.652 16.762 223.266 16.523 222.957 16.207 cv
222.641 15.891 222.406 15.492 222.258 15.008 cv
222.102 14.527 222.027 13.961 222.031 13.305 cv
222.027 12.691 222.105 12.133 222.27 11.637 cv
222.426 11.141 222.66 10.723 222.973 10.375 cv
223.277 10.031 223.652 9.76599 224.09 9.58197 cv
224.527 9.40198 225.02 9.31201 225.574 9.30902 cv
226.152 9.31201 226.652 9.39801 227.066 9.56598 cv
227.48 9.742 227.816 9.97998 228.082 10.281 cv
228.344 10.586 228.539 10.945 228.668 11.359 cv
228.789 11.777 228.852 12.227 228.855 12.715 cv
cp
226.953 12.465 mo
226.965 11.914 226.855 11.48 226.621 11.168 cv
226.387 10.855 226.02 10.699 225.527 10.695 cv
225.277 10.699 225.063 10.746 224.879 10.836 cv
224.691 10.934 224.539 11.059 224.418 11.215 cv
224.293 11.375 224.199 11.562 224.137 11.777 cv
224.07 11.992 224.031 12.223 224.023 12.465 cv
cp
f
237.465 13.125 mo
237.465 13.746 237.398 14.305 237.266 14.801 cv
237.133 15.297 236.938 15.719 236.684 16.066 cv
236.43 16.414 236.113 16.684 235.734 16.867 cv
235.352 17.055 234.918 17.145 234.434 17.148 cv
234.227 17.145 234.039 17.125 233.875 17.09 cv
233.703 17.047 233.539 16.988 233.383 16.91 cv
233.223 16.832 233.066 16.734 232.914 16.609 cv
232.754 16.492 232.594 16.352 232.43 16.187 cv
232.43 19.461 li
232.426 19.508 232.41 19.555 232.383 19.602 cv
232.348 19.641 232.293 19.676 232.223 19.707 cv
232.145 19.73 232.047 19.754 231.922 19.773 cv
231.797 19.785 231.637 19.793 231.449 19.797 cv
231.254 19.793 231.098 19.785 230.973 19.773 cv
230.848 19.754 230.746 19.73 230.672 19.707 cv
230.594 19.676 230.539 19.641 230.512 19.602 cv
230.477 19.555 230.461 19.508 230.465 19.461 cv
230.465 9.75403 li
230.461 9.70697 230.477 9.65997 230.504 9.617 cv
230.527 9.58197 230.57 9.55103 230.641 9.52002 cv
230.703 9.49597 230.789 9.47699 230.898 9.461 cv
231 9.453 231.137 9.44501 231.301 9.44098 cv
231.457 9.44501 231.586 9.453 231.691 9.461 cv
231.797 9.47699 231.883 9.49597 231.949 9.52002 cv
232.012 9.55103 232.059 9.58197 232.086 9.617 cv
232.109 9.65997 232.121 9.70697 232.125 9.75403 cv
232.125 10.57 li
232.324 10.363 232.523 10.184 232.723 10.023 cv
232.914 9.867 233.113 9.73401 233.316 9.625 cv
233.52 9.52301 233.727 9.44098 233.945 9.38702 cv
234.156 9.336 234.387 9.31201 234.637 9.30902 cv
235.141 9.31201 235.574 9.40997 235.938 9.60901 cv
236.293 9.81201 236.586 10.09 236.813 10.434 cv
237.035 10.785 237.199 11.187 237.309 11.648 cv
237.41 12.109 237.465 12.602 237.465 13.125 cv
cp
235.422 13.266 mo
235.418 12.973 235.398 12.691 235.355 12.414 cv
235.309 12.145 235.23 11.902 235.129 11.687 cv
235.02 11.477 234.879 11.305 234.707 11.176 cv
234.531 11.051 234.316 10.988 234.059 10.984 cv
233.926 10.988 233.797 11.008 233.672 11.043 cv
233.543 11.086 233.414 11.148 233.281 11.234 cv
233.148 11.324 233.012 11.437 232.875 11.578 cv
232.73 11.719 232.582 11.895 232.43 12.098 cv
232.43 14.391 li
232.703 14.738 232.965 15.008 233.215 15.195 cv
233.461 15.387 233.723 15.48 233.996 15.48 cv
234.25 15.48 234.465 15.418 234.648 15.285 cv
234.824 15.16 234.973 14.988 235.086 14.777 cv
235.199 14.566 235.281 14.328 235.34 14.062 cv
235.391 13.797 235.418 13.531 235.422 13.266 cv
cp
f
244.961 16.727 mo
244.957 16.805 244.93 16.859 244.883 16.898 cv
244.828 16.941 244.746 16.969 244.637 16.988 cv
244.52 17.004 244.355 17.016 244.141 17.016 cv
243.902 17.016 243.73 17.004 243.629 16.988 cv
243.52 16.969 243.445 16.941 243.406 16.898 cv
243.359 16.859 243.34 16.805 243.34 16.727 cv
243.34 16.176 li
243.051 16.484 242.723 16.723 242.359 16.891 cv
241.992 17.062 241.586 17.145 241.141 17.148 cv
240.77 17.145 240.43 17.098 240.121 17.004 cv
239.813 16.91 239.547 16.77 239.32 16.574 cv
239.094 16.387 238.918 16.152 238.793 15.871 cv
238.668 15.594 238.605 15.266 238.609 14.887 cv
238.605 14.488 238.684 14.137 238.844 13.832 cv
239 13.535 239.238 13.289 239.555 13.094 cv
239.867 12.902 240.258 12.758 240.727 12.66 cv
241.195 12.57 241.738 12.523 242.355 12.52 cv
243.035 12.52 li
243.035 12.098 li
243.035 11.883 243.012 11.691 242.969 11.527 cv
242.922 11.367 242.848 11.23 242.75 11.117 cv
242.645 11.012 242.512 10.93 242.344 10.875 cv
242.172 10.824 241.961 10.801 241.719 10.797 cv
241.387 10.801 241.094 10.836 240.84 10.906 cv
240.578 10.98 240.352 11.062 240.156 11.148 cv
239.957 11.242 239.793 11.32 239.664 11.391 cv
239.527 11.465 239.418 11.504 239.34 11.5 cv
239.277 11.504 239.227 11.484 239.188 11.445 cv
239.141 11.41 239.105 11.359 239.078 11.289 cv
239.047 11.227 239.023 11.141 239.012 11.039 cv
238.992 10.941 238.984 10.832 238.988 10.711 cv
238.984 10.551 239 10.426 239.027 10.328 cv
239.051 10.238 239.098 10.152 239.176 10.074 cv
239.246 10 239.375 9.91803 239.559 9.828 cv
239.738 9.73798 239.949 9.65198 240.195 9.57397 cv
240.438 9.49597 240.707 9.43402 240.996 9.383 cv
241.285 9.336 241.582 9.31201 241.891 9.30902 cv
242.434 9.31201 242.898 9.36298 243.285 9.46899 cv
243.672 9.578 243.992 9.742 244.242 9.961 cv
244.492 10.18 244.672 10.465 244.789 10.812 cv
244.898 11.164 244.957 11.578 244.961 12.051 cv
cp
243.035 13.75 mo
242.285 13.75 li
241.969 13.754 241.699 13.777 241.477 13.82 cv
241.25 13.871 241.066 13.941 240.93 14.031 cv
240.785 14.129 240.684 14.242 240.621 14.371 cv
240.555 14.508 240.52 14.656 240.523 14.824 cv
240.52 15.117 240.613 15.348 240.801 15.512 cv
240.984 15.68 241.242 15.762 241.57 15.762 cv
241.844 15.762 242.094 15.691 242.328 15.551 cv
242.555 15.41 242.793 15.207 243.035 14.934 cv
cp
f
251.387 10.398 mo
251.387 10.59 251.379 10.742 251.371 10.859 cv
251.355 10.98 251.34 11.074 251.324 11.141 cv
251.301 11.211 251.273 11.258 251.242 11.281 cv
251.203 11.309 251.16 11.32 251.113 11.32 cv
251.066 11.32 251.02 11.312 250.973 11.293 cv
250.918 11.277 250.859 11.258 250.797 11.234 cv
250.727 11.215 250.656 11.195 250.582 11.176 cv
250.5 11.16 250.414 11.152 250.324 11.148 cv
250.211 11.152 250.102 11.172 249.996 11.215 cv
249.887 11.262 249.773 11.332 249.66 11.422 cv
249.539 11.516 249.418 11.641 249.293 11.793 cv
249.164 11.953 249.027 12.145 248.883 12.371 cv
248.883 16.703 li
248.879 16.758 248.863 16.801 248.836 16.84 cv
248.801 16.879 248.746 16.914 248.676 16.937 cv
248.598 16.965 248.5 16.98 248.375 16.996 cv
248.25 17.008 248.09 17.016 247.902 17.016 cv
247.707 17.016 247.551 17.008 247.426 16.996 cv
247.301 16.98 247.199 16.965 247.125 16.937 cv
247.047 16.914 246.992 16.879 246.965 16.84 cv
246.93 16.801 246.914 16.758 246.918 16.703 cv
246.918 9.75403 li
246.914 9.70697 246.93 9.65997 246.957 9.617 cv
246.98 9.58197 247.027 9.55103 247.098 9.52002 cv
247.164 9.49597 247.25 9.47699 247.359 9.461 cv
247.465 9.453 247.598 9.44501 247.762 9.44098 cv
247.926 9.44501 248.063 9.453 248.172 9.461 cv
248.277 9.47699 248.363 9.49597 248.426 9.52002 cv
248.484 9.55103 248.527 9.58197 248.555 9.617 cv
248.578 9.65997 248.59 9.70697 248.594 9.75403 cv
248.594 10.617 li
248.773 10.359 248.945 10.148 249.109 9.97699 cv
249.266 9.81201 249.422 9.67603 249.57 9.57397 cv
249.715 9.47699 249.859 9.40997 250.004 9.367 cv
250.148 9.33197 250.293 9.31201 250.441 9.30902 cv
250.508 9.31201 250.582 9.31598 250.66 9.32001 cv
250.738 9.33197 250.816 9.34399 250.902 9.35901 cv
250.98 9.37903 251.055 9.39801 251.121 9.422 cv
251.18 9.44501 251.227 9.47302 251.258 9.49597 cv
251.285 9.52698 251.305 9.55499 251.32 9.58197 cv
251.332 9.617 251.344 9.65997 251.355 9.711 cv
251.363 9.77002 251.371 9.85199 251.379 9.95697 cv
251.383 10.066 251.387 10.215 251.387 10.398 cv
cp
f
258.125 16.727 mo
258.121 16.805 258.094 16.859 258.047 16.898 cv
257.992 16.941 257.91 16.969 257.801 16.988 cv
257.684 17.004 257.52 17.016 257.305 17.016 cv
257.066 17.016 256.895 17.004 256.793 16.988 cv
256.684 16.969 256.609 16.941 256.57 16.898 cv
256.523 16.859 256.504 16.805 256.504 16.727 cv
256.504 16.176 li
256.215 16.484 255.887 16.723 255.523 16.891 cv
255.156 17.062 254.75 17.145 254.305 17.148 cv
253.934 17.145 253.594 17.098 253.285 17.004 cv
252.977 16.91 252.711 16.77 252.484 16.574 cv
252.258 16.387 252.082 16.152 251.957 15.871 cv
251.832 15.594 251.77 15.266 251.773 14.887 cv
251.77 14.488 251.848 14.137 252.008 13.832 cv
252.164 13.535 252.402 13.289 252.719 13.094 cv
253.031 12.902 253.422 12.758 253.891 12.66 cv
254.359 12.57 254.902 12.523 255.52 12.52 cv
256.199 12.52 li
256.199 12.098 li
256.199 11.883 256.176 11.691 256.133 11.527 cv
256.086 11.367 256.012 11.23 255.914 11.117 cv
255.809 11.012 255.676 10.93 255.508 10.875 cv
255.336 10.824 255.125 10.801 254.883 10.797 cv
254.551 10.801 254.258 10.836 254.004 10.906 cv
253.742 10.98 253.516 11.062 253.32 11.148 cv
253.121 11.242 252.957 11.32 252.828 11.391 cv
252.691 11.465 252.582 11.504 252.504 11.5 cv
252.441 11.504 252.391 11.484 252.352 11.445 cv
252.305 11.41 252.27 11.359 252.242 11.289 cv
252.211 11.227 252.188 11.141 252.176 11.039 cv
252.156 10.941 252.148 10.832 252.152 10.711 cv
252.148 10.551 252.164 10.426 252.191 10.328 cv
252.215 10.238 252.262 10.152 252.34 10.074 cv
252.41 10 252.539 9.91803 252.723 9.828 cv
252.902 9.73798 253.113 9.65198 253.359 9.57397 cv
253.602 9.49597 253.871 9.43402 254.16 9.383 cv
254.449 9.336 254.746 9.31201 255.055 9.30902 cv
255.598 9.31201 256.063 9.36298 256.449 9.46899 cv
256.836 9.578 257.156 9.742 257.406 9.961 cv
257.656 10.18 257.836 10.465 257.953 10.812 cv
258.063 11.164 258.121 11.578 258.125 12.051 cv
cp
256.199 13.75 mo
255.449 13.75 li
255.133 13.754 254.863 13.777 254.641 13.82 cv
254.414 13.871 254.23 13.941 254.094 14.031 cv
253.949 14.129 253.848 14.242 253.785 14.371 cv
253.719 14.508 253.684 14.656 253.688 14.824 cv
253.684 15.117 253.777 15.348 253.965 15.512 cv
254.148 15.68 254.406 15.762 254.734 15.762 cv
255.008 15.762 255.258 15.691 255.492 15.551 cv
255.719 15.41 255.957 15.207 256.199 14.934 cv
cp
f
264.121 16.02 mo
264.121 16.246 264.105 16.422 264.078 16.543 cv
264.047 16.668 264.008 16.754 263.965 16.801 cv
263.914 16.852 263.848 16.895 263.758 16.934 cv
263.664 16.973 263.555 17.004 263.438 17.035 cv
263.313 17.059 263.18 17.082 263.039 17.102 cv
262.895 17.113 262.754 17.121 262.609 17.125 cv
262.219 17.121 261.879 17.07 261.594 16.977 cv
261.309 16.875 261.074 16.727 260.887 16.52 cv
260.699 16.316 260.559 16.059 260.473 15.746 cv
260.379 15.437 260.336 15.066 260.34 14.637 cv
260.34 11.078 li
259.508 11.078 li
259.406 11.082 259.332 11.02 259.281 10.895 cv
259.227 10.773 259.199 10.57 259.203 10.281 cv
259.199 10.133 259.207 10.004 259.223 9.90198 cv
259.234 9.80103 259.254 9.71899 259.281 9.65601 cv
259.305 9.59802 259.336 9.55499 259.379 9.52698 cv
259.414 9.50403 259.461 9.492 259.516 9.48798 cv
260.34 9.48798 li
260.34 7.93701 li
260.336 7.89099 260.352 7.84399 260.383 7.797 cv
260.41 7.758 260.461 7.72302 260.539 7.69098 cv
260.613 7.66803 260.715 7.64502 260.844 7.62903 cv
260.969 7.617 261.125 7.61298 261.316 7.60901 cv
261.504 7.61298 261.664 7.617 261.793 7.62903 cv
261.918 7.64502 262.02 7.66803 262.094 7.69098 cv
262.164 7.72302 262.215 7.758 262.25 7.797 cv
262.277 7.84399 262.293 7.89099 262.297 7.93701 cv
262.297 9.48798 li
263.809 9.48798 li
263.859 9.492 263.906 9.50403 263.945 9.52698 cv
263.984 9.55499 264.016 9.59802 264.043 9.65601 cv
264.066 9.71899 264.086 9.80103 264.102 9.90198 cv
264.113 10.004 264.121 10.133 264.121 10.281 cv
264.121 10.57 264.094 10.773 264.043 10.895 cv
263.988 11.02 263.914 11.082 263.816 11.078 cv
262.297 11.078 li
262.297 14.344 li
262.293 14.723 262.352 15.008 262.477 15.195 cv
262.594 15.387 262.809 15.48 263.113 15.48 cv
263.215 15.48 263.309 15.473 263.395 15.453 cv
263.477 15.437 263.551 15.418 263.617 15.391 cv
263.68 15.371 263.734 15.348 263.781 15.328 cv
263.824 15.312 263.863 15.305 263.902 15.301 cv
263.93 15.305 263.961 15.312 263.992 15.328 cv
264.02 15.348 264.039 15.387 264.059 15.437 cv
264.07 15.496 264.086 15.57 264.102 15.66 cv
264.113 15.758 264.121 15.875 264.121 16.02 cv
cp
f
267.508 16.703 mo
267.504 16.758 267.488 16.801 267.461 16.84 cv
267.426 16.879 267.371 16.914 267.301 16.937 cv
267.223 16.965 267.125 16.98 267 16.996 cv
266.875 17.008 266.715 17.016 266.527 17.016 cv
266.332 17.016 266.176 17.008 266.051 16.996 cv
265.926 16.98 265.824 16.965 265.75 16.937 cv
265.672 16.914 265.617 16.879 265.59 16.84 cv
265.555 16.801 265.539 16.758 265.543 16.703 cv
265.543 9.77002 li
265.539 9.71899 265.555 9.672 265.59 9.633 cv
265.617 9.59399 265.672 9.56201 265.75 9.53101 cv
265.824 9.508 265.926 9.48401 266.051 9.46503 cv
266.176 9.453 266.332 9.44501 266.527 9.44098 cv
266.715 9.44501 266.875 9.453 267 9.46503 cv
267.125 9.48401 267.223 9.508 267.301 9.53101 cv
267.371 9.56201 267.426 9.59399 267.461 9.633 cv
267.488 9.672 267.504 9.71899 267.508 9.77002 cv
cp
267.656 7.39801 mo
267.656 7.797 267.574 8.07001 267.414 8.21899 cv
267.25 8.37097 266.953 8.44501 266.52 8.44098 cv
266.074 8.44501 265.773 8.37097 265.625 8.22699 cv
265.469 8.08197 265.395 7.82001 265.395 7.43701 cv
265.395 7.04303 265.473 6.77002 265.633 6.617 cv
265.789 6.46503 266.09 6.38702 266.535 6.38702 cv
266.969 6.38702 267.266 6.461 267.422 6.60901 cv
267.578 6.758 267.656 7.02301 267.656 7.39801 cv
cp
f
276.5 13.156 mo
276.496 13.754 276.418 14.297 276.266 14.781 cv
276.105 15.273 275.871 15.691 275.555 16.043 cv
275.238 16.395 274.84 16.668 274.363 16.859 cv
273.883 17.051 273.324 17.145 272.688 17.148 cv
272.066 17.145 271.527 17.062 271.074 16.891 cv
270.613 16.723 270.234 16.473 269.938 16.145 cv
269.633 15.82 269.41 15.418 269.266 14.937 cv
269.121 14.461 269.051 13.914 269.051 13.297 cv
269.051 12.707 269.129 12.168 269.285 11.676 cv
269.441 11.187 269.68 10.766 270 10.414 cv
270.316 10.066 270.711 9.79303 271.188 9.59802 cv
271.66 9.40601 272.219 9.31201 272.859 9.30902 cv
273.484 9.31201 274.023 9.39502 274.48 9.56201 cv
274.938 9.73401 275.316 9.98401 275.613 10.309 cv
275.91 10.637 276.133 11.039 276.281 11.516 cv
276.426 11.996 276.496 12.543 276.5 13.156 cv
cp
274.48 13.234 mo
274.477 12.898 274.449 12.582 274.398 12.289 cv
274.34 12.004 274.246 11.754 274.121 11.539 cv
273.988 11.328 273.816 11.16 273.605 11.039 cv
273.387 10.922 273.117 10.863 272.789 10.859 cv
272.5 10.863 272.246 10.918 272.027 11.02 cv
271.809 11.129 271.629 11.285 271.488 11.488 cv
271.348 11.695 271.242 11.941 271.172 12.227 cv
271.102 12.52 271.066 12.848 271.066 13.211 cv
271.066 13.559 271.094 13.875 271.152 14.16 cv
271.207 14.453 271.301 14.703 271.43 14.914 cv
271.555 15.129 271.727 15.293 271.949 15.406 cv
272.164 15.527 272.434 15.586 272.758 15.582 cv
273.051 15.586 273.309 15.531 273.531 15.422 cv
273.746 15.316 273.926 15.164 274.066 14.957 cv
274.207 14.758 274.309 14.512 274.379 14.223 cv
274.441 13.937 274.477 13.609 274.48 13.234 cv
cp
f
284.746 16.703 mo
284.742 16.758 284.727 16.801 284.699 16.84 cv
284.664 16.879 284.613 16.914 284.543 16.937 cv
284.469 16.965 284.367 16.98 284.242 16.996 cv
284.113 17.008 283.957 17.016 283.773 17.016 cv
283.578 17.016 283.418 17.008 283.293 16.996 cv
283.164 16.98 283.063 16.965 282.992 16.937 cv
282.914 16.914 282.863 16.879 282.836 16.84 cv
282.801 16.801 282.785 16.758 282.789 16.703 cv
282.789 12.738 li
282.785 12.402 282.762 12.137 282.715 11.941 cv
282.664 11.75 282.59 11.586 282.5 11.449 cv
282.406 11.312 282.289 11.207 282.141 11.129 cv
281.992 11.055 281.816 11.016 281.621 11.016 cv
281.367 11.016 281.117 11.109 280.863 11.289 cv
280.609 11.473 280.344 11.734 280.07 12.082 cv
280.07 16.703 li
280.066 16.758 280.051 16.801 280.023 16.84 cv
279.988 16.879 279.934 16.914 279.863 16.937 cv
279.785 16.965 279.688 16.98 279.563 16.996 cv
279.438 17.008 279.277 17.016 279.09 17.016 cv
278.895 17.016 278.738 17.008 278.613 16.996 cv
278.488 16.98 278.387 16.965 278.313 16.937 cv
278.234 16.914 278.18 16.879 278.152 16.84 cv
278.117 16.801 278.102 16.758 278.105 16.703 cv
278.105 9.75403 li
278.102 9.70697 278.117 9.65997 278.145 9.617 cv
278.168 9.58197 278.215 9.55103 278.285 9.52002 cv
278.352 9.49597 278.438 9.47699 278.547 9.461 cv
278.652 9.453 278.785 9.44501 278.949 9.44098 cv
279.113 9.44501 279.25 9.453 279.359 9.461 cv
279.465 9.47699 279.551 9.49597 279.613 9.52002 cv
279.672 9.55103 279.715 9.58197 279.742 9.617 cv
279.766 9.65997 279.777 9.70697 279.781 9.75403 cv
279.781 10.555 li
280.164 10.145 280.555 9.83197 280.953 9.62097 cv
281.348 9.414 281.766 9.31201 282.199 9.30902 cv
282.668 9.31201 283.066 9.39099 283.395 9.54303 cv
283.719 9.703 283.98 9.914 284.18 10.18 cv
284.379 10.449 284.523 10.762 284.613 11.117 cv
284.699 11.477 284.742 11.906 284.746 12.41 cv
cp
f
297.156 7.72699 mo
297.152 7.883 297.145 8.01202 297.137 8.11298 cv
297.121 8.22302 297.102 8.30902 297.078 8.37097 cv
297.047 8.43701 297.016 8.48401 296.98 8.51202 cv
296.938 8.547 296.895 8.56201 296.852 8.55902 cv
294.328 8.55902 li
294.328 16.687 li
294.328 16.742 294.309 16.789 294.277 16.828 cv
294.238 16.871 294.184 16.906 294.109 16.93 cv
294.027 16.957 293.922 16.977 293.793 16.992 cv
293.656 17.008 293.492 17.016 293.297 17.016 cv
293.102 17.016 292.938 17.008 292.805 16.992 cv
292.672 16.977 292.566 16.957 292.488 16.93 cv
292.41 16.906 292.352 16.871 292.32 16.828 cv
292.281 16.789 292.266 16.742 292.27 16.687 cv
292.27 8.55902 li
289.746 8.55902 li
289.691 8.56201 289.645 8.547 289.613 8.51202 cv
289.574 8.48401 289.543 8.43701 289.52 8.37097 cv
289.488 8.30902 289.469 8.22302 289.461 8.11298 cv
289.445 8.01202 289.441 7.883 289.441 7.72699 cv
289.441 7.57397 289.445 7.44098 289.461 7.328 cv
289.469 7.22302 289.488 7.133 289.52 7.06598 cv
289.543 7.00403 289.574 6.95697 289.613 6.92603 cv
289.645 6.89801 289.691 6.88702 289.746 6.883 cv
296.852 6.883 li
296.895 6.88702 296.938 6.89801 296.98 6.92603 cv
297.016 6.95697 297.047 7.00403 297.078 7.06598 cv
297.102 7.133 297.121 7.22302 297.137 7.328 cv
297.145 7.44098 297.152 7.57397 297.156 7.72699 cv
cp
f
300.195 16.703 mo
300.191 16.758 300.176 16.801 300.148 16.84 cv
300.113 16.879 300.059 16.914 299.988 16.937 cv
299.91 16.965 299.813 16.98 299.688 16.996 cv
299.563 17.008 299.402 17.016 299.215 17.016 cv
299.02 17.016 298.863 17.008 298.738 16.996 cv
298.613 16.98 298.512 16.965 298.438 16.937 cv
298.359 16.914 298.305 16.879 298.277 16.84 cv
298.242 16.801 298.227 16.758 298.23 16.703 cv
298.23 9.77002 li
298.227 9.71899 298.242 9.672 298.277 9.633 cv
298.305 9.59399 298.359 9.56201 298.438 9.53101 cv
298.512 9.508 298.613 9.48401 298.738 9.46503 cv
298.863 9.453 299.02 9.44501 299.215 9.44098 cv
299.402 9.44501 299.563 9.453 299.688 9.46503 cv
299.813 9.48401 299.91 9.508 299.988 9.53101 cv
300.059 9.56201 300.113 9.59399 300.148 9.633 cv
300.176 9.672 300.191 9.71899 300.195 9.77002 cv
cp
300.344 7.39801 mo
300.344 7.797 300.262 8.07001 300.102 8.21899 cv
299.938 8.37097 299.641 8.44501 299.207 8.44098 cv
298.762 8.44501 298.461 8.37097 298.313 8.22699 cv
298.156 8.08197 298.082 7.82001 298.082 7.43701 cv
298.082 7.04303 298.16 6.77002 298.32 6.617 cv
298.477 6.46503 298.777 6.38702 299.223 6.38702 cv
299.656 6.38702 299.953 6.461 300.109 6.60901 cv
300.266 6.758 300.344 7.02301 300.344 7.39801 cv
cp
f
313.246 16.703 mo
313.242 16.758 313.227 16.801 313.199 16.84 cv
313.164 16.879 313.113 16.914 313.043 16.937 cv
312.969 16.965 312.867 16.98 312.746 16.996 cv
312.621 17.008 312.465 17.016 312.273 17.016 cv
312.074 17.016 311.914 17.008 311.789 16.996 cv
311.664 16.98 311.563 16.965 311.488 16.937 cv
311.41 16.914 311.359 16.879 311.332 16.84 cv
311.305 16.801 311.289 16.758 311.293 16.703 cv
311.293 12.582 li
311.289 12.352 311.27 12.137 311.227 11.941 cv
311.18 11.75 311.109 11.586 311.023 11.449 cv
310.93 11.312 310.816 11.207 310.68 11.129 cv
310.539 11.055 310.375 11.016 310.184 11.016 cv
309.949 11.016 309.711 11.109 309.473 11.289 cv
309.234 11.473 308.977 11.734 308.695 12.082 cv
308.695 16.703 li
308.695 16.758 308.68 16.801 308.648 16.84 cv
308.617 16.879 308.563 16.914 308.488 16.937 cv
308.41 16.965 308.309 16.98 308.188 16.996 cv
308.063 17.008 307.91 17.016 307.723 17.016 cv
307.527 17.016 307.367 17.008 307.246 16.996 cv
307.117 16.98 307.016 16.965 306.945 16.937 cv
306.867 16.914 306.816 16.879 306.785 16.84 cv
306.754 16.801 306.738 16.758 306.738 16.703 cv
306.738 12.582 li
306.738 12.352 306.715 12.137 306.672 11.941 cv
306.629 11.75 306.563 11.586 306.477 11.449 cv
306.383 11.312 306.27 11.207 306.133 11.129 cv
305.988 11.055 305.824 11.016 305.641 11.016 cv
305.398 11.016 305.16 11.109 304.922 11.289 cv
304.684 11.473 304.426 11.734 304.152 12.082 cv
304.152 16.703 li
304.148 16.758 304.133 16.801 304.105 16.84 cv
304.07 16.879 304.016 16.914 303.945 16.937 cv
303.867 16.965 303.77 16.98 303.645 16.996 cv
303.52 17.008 303.359 17.016 303.172 17.016 cv
302.977 17.016 302.82 17.008 302.695 16.996 cv
302.57 16.98 302.469 16.965 302.395 16.937 cv
302.316 16.914 302.262 16.879 302.234 16.84 cv
302.199 16.801 302.184 16.758 302.188 16.703 cv
302.188 9.75403 li
302.184 9.70697 302.199 9.65997 302.227 9.617 cv
302.25 9.58197 302.297 9.55103 302.367 9.52002 cv
302.434 9.49597 302.52 9.47699 302.629 9.461 cv
302.734 9.453 302.867 9.44501 303.031 9.44098 cv
303.195 9.44501 303.332 9.453 303.441 9.461 cv
303.547 9.47699 303.633 9.49597 303.695 9.52002 cv
303.754 9.55103 303.797 9.58197 303.824 9.617 cv
303.848 9.65997 303.859 9.70697 303.863 9.75403 cv
303.863 10.555 li
304.246 10.145 304.629 9.83197 305.012 9.62097 cv
305.391 9.414 305.793 9.31201 306.211 9.30902 cv
306.496 9.31201 306.75 9.34003 306.98 9.39801 cv
307.207 9.461 307.414 9.547 307.594 9.65601 cv
307.773 9.77002 307.926 9.90601 308.055 10.059 cv
308.184 10.215 308.293 10.387 308.383 10.578 cv
308.59 10.355 308.793 10.164 308.996 10.004 cv
309.191 9.84399 309.391 9.711 309.586 9.60901 cv
309.781 9.508 309.977 9.43402 310.172 9.383 cv
310.367 9.336 310.566 9.31201 310.77 9.30902 cv
311.23 9.31201 311.617 9.39099 311.938 9.54303 cv
312.25 9.703 312.508 9.914 312.703 10.18 cv
312.898 10.449 313.035 10.762 313.121 11.117 cv
313.199 11.477 313.242 11.855 313.246 12.254 cv
cp
f
321.586 13.027 mo
321.582 13.266 321.531 13.441 321.426 13.555 cv
321.316 13.672 321.168 13.73 320.988 13.727 cv
316.754 13.727 li
316.75 14.027 316.785 14.297 316.859 14.535 cv
316.926 14.777 317.039 14.98 317.195 15.148 cv
317.348 15.32 317.543 15.449 317.785 15.535 cv
318.023 15.625 318.313 15.668 318.656 15.668 cv
318.996 15.668 319.297 15.645 319.559 15.594 cv
319.816 15.547 320.043 15.492 320.234 15.43 cv
320.422 15.371 320.578 15.316 320.707 15.266 cv
320.828 15.219 320.93 15.195 321.012 15.191 cv
321.055 15.195 321.094 15.203 321.129 15.219 cv
321.156 15.238 321.184 15.27 321.203 15.316 cv
321.223 15.363 321.234 15.43 321.246 15.516 cv
321.25 15.602 321.254 15.711 321.258 15.84 cv
321.254 15.957 321.254 16.055 321.25 16.133 cv
321.242 16.215 321.234 16.281 321.227 16.336 cv
321.215 16.395 321.199 16.445 321.18 16.48 cv
321.16 16.523 321.133 16.559 321.102 16.594 cv
321.066 16.633 320.973 16.684 320.824 16.742 cv
320.668 16.809 320.477 16.871 320.246 16.926 cv
320.008 16.988 319.738 17.035 319.441 17.082 cv
319.137 17.121 318.816 17.145 318.477 17.148 cv
317.855 17.145 317.313 17.07 316.852 16.914 cv
316.383 16.762 315.996 16.523 315.688 16.207 cv
315.371 15.891 315.137 15.492 314.988 15.008 cv
314.832 14.527 314.758 13.961 314.762 13.305 cv
314.758 12.691 314.836 12.133 315 11.637 cv
315.156 11.141 315.391 10.723 315.703 10.375 cv
316.008 10.031 316.383 9.76599 316.82 9.58197 cv
317.258 9.40198 317.75 9.31201 318.305 9.30902 cv
318.883 9.31201 319.383 9.39801 319.797 9.56598 cv
320.211 9.742 320.547 9.97998 320.813 10.281 cv
321.074 10.586 321.27 10.945 321.398 11.359 cv
321.52 11.777 321.582 12.227 321.586 12.715 cv
cp
319.684 12.465 mo
319.695 11.914 319.586 11.48 319.352 11.168 cv
319.117 10.855 318.75 10.699 318.258 10.695 cv
318.008 10.699 317.793 10.746 317.609 10.836 cv
317.422 10.934 317.27 11.059 317.148 11.215 cv
317.023 11.375 316.93 11.562 316.867 11.777 cv
316.801 11.992 316.762 12.223 316.754 12.465 cv
cp
f
328.086 14.738 mo
328.082 15.137 328.008 15.484 327.863 15.785 cv
327.715 16.086 327.508 16.34 327.238 16.539 cv
326.965 16.746 326.645 16.895 326.277 16.996 cv
325.91 17.094 325.508 17.145 325.078 17.148 cv
324.813 17.145 324.566 17.125 324.332 17.09 cv
324.098 17.047 323.887 17 323.699 16.941 cv
323.512 16.883 323.355 16.82 323.23 16.758 cv
323.105 16.695 323.012 16.637 322.957 16.582 cv
322.898 16.527 322.855 16.445 322.828 16.328 cv
322.793 16.215 322.777 16.039 322.781 15.809 cv
322.777 15.66 322.785 15.539 322.797 15.445 cv
322.805 15.355 322.82 15.285 322.844 15.227 cv
322.863 15.176 322.887 15.137 322.922 15.117 cv
322.949 15.102 322.988 15.094 323.035 15.09 cv
323.09 15.094 323.176 15.125 323.289 15.187 cv
323.398 15.254 323.535 15.328 323.707 15.402 cv
323.871 15.484 324.066 15.555 324.285 15.621 cv
324.504 15.691 324.754 15.727 325.039 15.723 cv
325.215 15.727 325.371 15.707 325.512 15.668 cv
325.645 15.633 325.766 15.582 325.871 15.512 cv
325.969 15.445 326.043 15.359 326.098 15.254 cv
326.145 15.152 326.172 15.031 326.176 14.895 cv
326.172 14.738 326.125 14.605 326.031 14.496 cv
325.938 14.387 325.809 14.289 325.652 14.203 cv
325.488 14.121 325.309 14.043 325.113 13.969 cv
324.91 13.898 324.707 13.82 324.496 13.727 cv
324.285 13.641 324.078 13.539 323.883 13.422 cv
323.68 13.312 323.5 13.172 323.344 13.004 cv
323.18 12.84 323.055 12.641 322.961 12.402 cv
322.867 12.172 322.82 11.891 322.82 11.559 cv
322.82 11.23 322.883 10.926 323.012 10.645 cv
323.141 10.371 323.328 10.133 323.574 9.93402 cv
323.816 9.73798 324.113 9.586 324.465 9.47302 cv
324.813 9.367 325.207 9.31201 325.648 9.30902 cv
325.863 9.31201 326.074 9.328 326.281 9.35498 cv
326.484 9.39099 326.672 9.42999 326.84 9.47302 cv
327.004 9.52301 327.145 9.57397 327.262 9.625 cv
327.375 9.68402 327.457 9.72998 327.508 9.76599 cv
327.555 9.80902 327.59 9.84802 327.613 9.883 cv
327.633 9.92603 327.645 9.97302 327.656 10.023 cv
327.664 10.078 327.676 10.145 327.684 10.223 cv
327.691 10.309 327.695 10.406 327.695 10.523 cv
327.695 10.664 327.691 10.781 327.684 10.867 cv
327.676 10.961 327.66 11.031 327.645 11.078 cv
327.625 11.133 327.602 11.168 327.574 11.184 cv
327.539 11.207 327.504 11.215 327.465 11.211 cv
327.414 11.215 327.34 11.187 327.246 11.129 cv
327.145 11.078 327.023 11.02 326.875 10.953 cv
326.727 10.895 326.555 10.836 326.359 10.777 cv
326.164 10.727 325.941 10.699 325.695 10.695 cv
325.516 10.699 325.363 10.719 325.234 10.75 cv
325.102 10.789 324.992 10.84 324.914 10.906 cv
324.828 10.977 324.766 11.055 324.727 11.145 cv
324.68 11.238 324.66 11.336 324.664 11.437 cv
324.66 11.598 324.711 11.734 324.813 11.84 cv
324.91 11.953 325.039 12.047 325.203 12.129 cv
325.363 12.215 325.547 12.293 325.754 12.363 cv
325.957 12.437 326.164 12.52 326.375 12.602 cv
326.582 12.691 326.789 12.789 327 12.902 cv
327.203 13.016 327.387 13.156 327.547 13.32 cv
327.707 13.488 327.836 13.687 327.938 13.918 cv
328.031 14.152 328.082 14.426 328.086 14.738 cv
cp
f
340.195 13.156 mo
340.191 13.754 340.113 14.297 339.961 14.781 cv
339.801 15.273 339.566 15.691 339.25 16.043 cv
338.934 16.395 338.535 16.668 338.059 16.859 cv
337.578 17.051 337.02 17.145 336.383 17.148 cv
335.762 17.145 335.223 17.062 334.77 16.891 cv
334.309 16.723 333.93 16.473 333.633 16.145 cv
333.328 15.82 333.105 15.418 332.961 14.937 cv
332.816 14.461 332.746 13.914 332.746 13.297 cv
332.746 12.707 332.824 12.168 332.98 11.676 cv
333.137 11.187 333.375 10.766 333.695 10.414 cv
334.012 10.066 334.406 9.79303 334.883 9.59802 cv
335.355 9.40601 335.914 9.31201 336.555 9.30902 cv
337.18 9.31201 337.719 9.39502 338.176 9.56201 cv
338.633 9.73401 339.012 9.98401 339.309 10.309 cv
339.605 10.637 339.828 11.039 339.977 11.516 cv
340.121 11.996 340.191 12.543 340.195 13.156 cv
cp
338.176 13.234 mo
338.172 12.898 338.145 12.582 338.094 12.289 cv
338.035 12.004 337.941 11.754 337.816 11.539 cv
337.684 11.328 337.512 11.16 337.301 11.039 cv
337.082 10.922 336.813 10.863 336.484 10.859 cv
336.195 10.863 335.941 10.918 335.723 11.02 cv
335.504 11.129 335.324 11.285 335.184 11.488 cv
335.043 11.695 334.938 11.941 334.867 12.227 cv
334.797 12.52 334.762 12.848 334.762 13.211 cv
334.762 13.559 334.789 13.875 334.848 14.16 cv
334.902 14.453 334.996 14.703 335.125 14.914 cv
335.25 15.129 335.422 15.293 335.645 15.406 cv
335.859 15.527 336.129 15.586 336.453 15.582 cv
336.746 15.586 337.004 15.531 337.227 15.422 cv
337.441 15.316 337.621 15.164 337.762 14.957 cv
337.902 14.758 338.004 14.512 338.074 14.223 cv
338.137 13.937 338.172 13.609 338.176 13.234 cv
cp
f
345.949 7.10199 mo
345.945 7.25403 345.941 7.375 345.934 7.46503 cv
345.922 7.55902 345.906 7.62903 345.887 7.67603 cv
345.863 7.72699 345.84 7.76202 345.816 7.77698 cv
345.789 7.797 345.762 7.80499 345.73 7.80499 cv
345.691 7.80499 345.648 7.797 345.609 7.77698 cv
345.563 7.76202 345.508 7.742 345.445 7.71899 cv
345.375 7.69897 345.301 7.67999 345.215 7.65997 cv
345.125 7.64502 345.02 7.63702 344.902 7.633 cv
344.758 7.63702 344.637 7.65601 344.539 7.69897 cv
344.438 7.74597 344.355 7.81598 344.289 7.90997 cv
344.219 8.008 344.168 8.133 344.141 8.28497 cv
344.105 8.43701 344.09 8.625 344.094 8.84802 cv
344.094 9.48798 li
345.363 9.48798 li
345.406 9.492 345.449 9.50403 345.492 9.52698 cv
345.527 9.55499 345.563 9.59802 345.59 9.65601 cv
345.613 9.71899 345.633 9.80103 345.648 9.90198 cv
345.66 10.004 345.664 10.133 345.668 10.281 cv
345.664 10.57 345.641 10.773 345.59 10.895 cv
345.535 11.02 345.457 11.082 345.363 11.078 cv
344.094 11.078 li
344.094 16.703 li
344.09 16.758 344.074 16.801 344.047 16.84 cv
344.012 16.879 343.961 16.914 343.891 16.937 cv
343.816 16.965 343.715 16.98 343.586 16.996 cv
343.453 17.008 343.293 17.016 343.109 17.016 cv
342.922 17.016 342.766 17.008 342.641 16.996 cv
342.512 16.98 342.41 16.965 342.336 16.937 cv
342.258 16.914 342.207 16.879 342.18 16.84 cv
342.148 16.801 342.133 16.758 342.137 16.703 cv
342.137 11.078 li
341.266 11.078 li
341.164 11.082 341.09 11.02 341.043 10.895 cv
340.992 10.773 340.965 10.57 340.969 10.281 cv
340.965 10.133 340.973 10.004 340.988 9.90198 cv
341 9.80103 341.02 9.71899 341.043 9.65601 cv
341.066 9.59802 341.098 9.55499 341.137 9.52698 cv
341.176 9.50403 341.219 9.492 341.273 9.48798 cv
342.137 9.48798 li
342.137 8.90198 li
342.133 8.43402 342.18 8.02002 342.277 7.65997 cv
342.367 7.30499 342.516 7.008 342.719 6.77301 cv
342.918 6.539 343.172 6.36298 343.48 6.23798 cv
343.789 6.12097 344.152 6.05902 344.578 6.05902 cv
344.773 6.05902 344.965 6.078 345.152 6.10901 cv
345.332 6.14801 345.477 6.18402 345.582 6.21899 cv
345.684 6.26202 345.754 6.297 345.793 6.328 cv
345.828 6.36298 345.859 6.414 345.883 6.47699 cv
345.906 6.54303 345.922 6.625 345.934 6.72699 cv
345.941 6.828 345.945 6.953 345.949 7.10199 cv
cp
f
352.578 16.687 mo
352.574 16.742 352.559 16.789 352.527 16.828 cv
352.492 16.871 352.434 16.906 352.359 16.93 cv
352.277 16.957 352.176 16.977 352.047 16.992 cv
351.914 17.008 351.746 17.016 351.551 17.016 cv
351.348 17.016 351.184 17.008 351.055 16.992 cv
350.918 16.977 350.813 16.957 350.738 16.93 cv
350.656 16.906 350.602 16.871 350.57 16.828 cv
350.535 16.789 350.516 16.742 350.52 16.687 cv
350.52 7.164 li
350.516 7.117 350.535 7.07001 350.57 7.02301 cv
350.602 6.98401 350.656 6.94897 350.742 6.922 cv
350.82 6.89801 350.926 6.87903 351.059 6.85901 cv
351.184 6.84802 351.348 6.84003 351.551 6.836 cv
351.746 6.84003 351.914 6.84802 352.047 6.85901 cv
352.176 6.87903 352.277 6.89801 352.359 6.922 cv
352.434 6.94897 352.492 6.98401 352.527 7.02301 cv
352.559 7.07001 352.574 7.117 352.578 7.164 cv
cp
f
365.723 16.703 mo
365.719 16.758 365.703 16.801 365.676 16.84 cv
365.641 16.879 365.59 16.914 365.52 16.937 cv
365.445 16.965 365.344 16.98 365.223 16.996 cv
365.098 17.008 364.941 17.016 364.75 17.016 cv
364.551 17.016 364.391 17.008 364.266 16.996 cv
364.141 16.98 364.039 16.965 363.965 16.937 cv
363.887 16.914 363.836 16.879 363.809 16.84 cv
363.781 16.801 363.766 16.758 363.77 16.703 cv
363.77 12.582 li
363.766 12.352 363.746 12.137 363.703 11.941 cv
363.656 11.75 363.586 11.586 363.5 11.449 cv
363.406 11.312 363.293 11.207 363.156 11.129 cv
363.016 11.055 362.852 11.016 362.66 11.016 cv
362.426 11.016 362.188 11.109 361.949 11.289 cv
361.711 11.473 361.453 11.734 361.172 12.082 cv
361.172 16.703 li
361.172 16.758 361.156 16.801 361.125 16.84 cv
361.094 16.879 361.039 16.914 360.965 16.937 cv
360.887 16.965 360.785 16.98 360.664 16.996 cv
360.539 17.008 360.387 17.016 360.199 17.016 cv
360.004 17.016 359.844 17.008 359.723 16.996 cv
359.594 16.98 359.492 16.965 359.422 16.937 cv
359.344 16.914 359.293 16.879 359.262 16.84 cv
359.23 16.801 359.215 16.758 359.215 16.703 cv
359.215 12.582 li
359.215 12.352 359.191 12.137 359.148 11.941 cv
359.105 11.75 359.039 11.586 358.953 11.449 cv
358.859 11.312 358.746 11.207 358.609 11.129 cv
358.465 11.055 358.301 11.016 358.117 11.016 cv
357.875 11.016 357.637 11.109 357.398 11.289 cv
357.16 11.473 356.902 11.734 356.629 12.082 cv
356.629 16.703 li
356.625 16.758 356.609 16.801 356.582 16.84 cv
356.547 16.879 356.492 16.914 356.422 16.937 cv
356.344 16.965 356.246 16.98 356.121 16.996 cv
355.996 17.008 355.836 17.016 355.648 17.016 cv
355.453 17.016 355.297 17.008 355.172 16.996 cv
355.047 16.98 354.945 16.965 354.871 16.937 cv
354.793 16.914 354.738 16.879 354.711 16.84 cv
354.676 16.801 354.66 16.758 354.664 16.703 cv
354.664 9.75403 li
354.66 9.70697 354.676 9.65997 354.703 9.617 cv
354.727 9.58197 354.773 9.55103 354.844 9.52002 cv
354.91 9.49597 354.996 9.47699 355.105 9.461 cv
355.211 9.453 355.344 9.44501 355.508 9.44098 cv
355.672 9.44501 355.809 9.453 355.918 9.461 cv
356.023 9.47699 356.109 9.49597 356.172 9.52002 cv
356.23 9.55103 356.273 9.58197 356.301 9.617 cv
356.324 9.65997 356.336 9.70697 356.34 9.75403 cv
356.34 10.555 li
356.723 10.145 357.105 9.83197 357.488 9.62097 cv
357.867 9.414 358.27 9.31201 358.688 9.30902 cv
358.973 9.31201 359.227 9.34003 359.457 9.39801 cv
359.684 9.461 359.891 9.547 360.07 9.65601 cv
360.25 9.77002 360.402 9.90601 360.531 10.059 cv
360.66 10.215 360.77 10.387 360.859 10.578 cv
361.066 10.355 361.27 10.164 361.473 10.004 cv
361.668 9.84399 361.867 9.711 362.063 9.60901 cv
362.258 9.508 362.453 9.43402 362.648 9.383 cv
362.844 9.336 363.043 9.31201 363.246 9.30902 cv
363.707 9.31201 364.094 9.39099 364.414 9.54303 cv
364.727 9.703 364.984 9.914 365.18 10.18 cv
365.375 10.449 365.512 10.762 365.598 11.117 cv
365.676 11.477 365.719 11.855 365.723 12.254 cv
cp
f
373.516 16.727 mo
373.512 16.805 373.484 16.859 373.438 16.898 cv
373.383 16.941 373.301 16.969 373.191 16.988 cv
373.074 17.004 372.91 17.016 372.695 17.016 cv
372.457 17.016 372.285 17.004 372.184 16.988 cv
372.074 16.969 372 16.941 371.961 16.898 cv
371.914 16.859 371.895 16.805 371.895 16.727 cv
371.895 16.176 li
371.605 16.484 371.277 16.723 370.914 16.891 cv
370.547 17.062 370.141 17.145 369.695 17.148 cv
369.324 17.145 368.984 17.098 368.676 17.004 cv
368.367 16.91 368.102 16.77 367.875 16.574 cv
367.648 16.387 367.473 16.152 367.348 15.871 cv
367.223 15.594 367.16 15.266 367.164 14.887 cv
367.16 14.488 367.238 14.137 367.398 13.832 cv
367.555 13.535 367.793 13.289 368.109 13.094 cv
368.422 12.902 368.813 12.758 369.281 12.66 cv
369.75 12.57 370.293 12.523 370.91 12.52 cv
371.59 12.52 li
371.59 12.098 li
371.59 11.883 371.566 11.691 371.523 11.527 cv
371.477 11.367 371.402 11.23 371.305 11.117 cv
371.199 11.012 371.066 10.93 370.898 10.875 cv
370.727 10.824 370.516 10.801 370.273 10.797 cv
369.941 10.801 369.648 10.836 369.395 10.906 cv
369.133 10.98 368.906 11.062 368.711 11.148 cv
368.512 11.242 368.348 11.32 368.219 11.391 cv
368.082 11.465 367.973 11.504 367.895 11.5 cv
367.832 11.504 367.781 11.484 367.742 11.445 cv
367.695 11.41 367.66 11.359 367.633 11.289 cv
367.602 11.227 367.578 11.141 367.566 11.039 cv
367.547 10.941 367.539 10.832 367.543 10.711 cv
367.539 10.551 367.555 10.426 367.582 10.328 cv
367.605 10.238 367.652 10.152 367.73 10.074 cv
367.801 10 367.93 9.91803 368.113 9.828 cv
368.293 9.73798 368.504 9.65198 368.75 9.57397 cv
368.992 9.49597 369.262 9.43402 369.551 9.383 cv
369.84 9.336 370.137 9.31201 370.445 9.30902 cv
370.988 9.31201 371.453 9.36298 371.84 9.46899 cv
372.227 9.578 372.547 9.742 372.797 9.961 cv
373.047 10.18 373.227 10.465 373.344 10.812 cv
373.453 11.164 373.512 11.578 373.516 12.051 cv
cp
371.59 13.75 mo
370.84 13.75 li
370.523 13.754 370.254 13.777 370.031 13.82 cv
369.805 13.871 369.621 13.941 369.484 14.031 cv
369.34 14.129 369.238 14.242 369.176 14.371 cv
369.109 14.508 369.074 14.656 369.078 14.824 cv
369.074 15.117 369.168 15.348 369.355 15.512 cv
369.539 15.68 369.797 15.762 370.125 15.762 cv
370.398 15.762 370.648 15.691 370.883 15.551 cv
371.109 15.41 371.348 15.207 371.59 14.934 cv
cp
f
381.742 10.234 mo
381.738 10.488 381.711 10.672 381.656 10.789 cv
381.598 10.91 381.527 10.969 381.449 10.969 cv
380.629 10.969 li
380.742 11.094 380.824 11.238 380.875 11.395 cv
380.922 11.555 380.945 11.719 380.949 11.887 cv
380.945 12.297 380.879 12.656 380.746 12.969 cv
380.609 13.285 380.414 13.551 380.164 13.762 cv
379.91 13.98 379.609 14.145 379.254 14.254 cv
378.895 14.371 378.496 14.426 378.066 14.422 cv
377.84 14.426 377.629 14.398 377.426 14.34 cv
377.223 14.289 377.066 14.227 376.957 14.148 cv
376.895 14.219 376.836 14.297 376.789 14.391 cv
376.738 14.484 376.715 14.59 376.719 14.699 cv
376.715 14.855 376.781 14.977 376.914 15.07 cv
377.043 15.168 377.23 15.223 377.473 15.23 cv
379.164 15.293 li
379.559 15.309 379.91 15.367 380.219 15.461 cv
380.527 15.562 380.789 15.695 381 15.867 cv
381.211 16.043 381.371 16.254 381.48 16.496 cv
381.59 16.742 381.645 17.016 381.648 17.328 cv
381.645 17.664 381.57 17.988 381.422 18.297 cv
381.273 18.598 381.047 18.859 380.746 19.086 cv
380.441 19.305 380.063 19.484 379.609 19.617 cv
379.152 19.746 378.621 19.809 378.02 19.812 cv
377.422 19.809 376.918 19.762 376.5 19.672 cv
376.082 19.574 375.738 19.445 375.473 19.281 cv
375.203 19.113 375.008 18.914 374.891 18.687 cv
374.766 18.453 374.707 18.199 374.707 17.926 cv
374.707 17.754 374.727 17.594 374.773 17.437 cv
374.813 17.281 374.879 17.129 374.969 16.988 cv
375.051 16.844 375.156 16.711 375.281 16.578 cv
375.406 16.449 375.547 16.324 375.711 16.203 cv
375.484 16.09 375.313 15.93 375.191 15.719 cv
375.07 15.516 375.012 15.289 375.012 15.043 cv
375.012 14.742 375.078 14.465 375.219 14.207 cv
375.355 13.957 375.539 13.727 375.766 13.523 cv
375.582 13.344 375.438 13.129 375.328 12.871 cv
375.219 12.621 375.164 12.301 375.168 11.918 cv
375.164 11.516 375.234 11.156 375.379 10.832 cv
375.52 10.516 375.719 10.246 375.977 10.023 cv
376.23 9.80499 376.535 9.633 376.887 9.51599 cv
377.238 9.39801 377.629 9.34003 378.059 9.34003 cv
378.277 9.34003 378.484 9.35498 378.684 9.37903 cv
378.883 9.40997 379.07 9.44501 379.242 9.48798 cv
381.449 9.48798 li
381.531 9.492 381.602 9.55103 381.66 9.65997 cv
381.711 9.77698 381.738 9.96899 381.742 10.234 cv
cp
379.227 11.879 mo
379.223 11.508 379.121 11.219 378.914 11.008 cv
378.703 10.805 378.41 10.699 378.035 10.695 cv
377.84 10.699 377.668 10.73 377.527 10.793 cv
377.379 10.859 377.258 10.949 377.164 11.059 cv
377.063 11.172 376.992 11.301 376.949 11.449 cv
376.898 11.598 376.875 11.754 376.879 11.91 cv
376.875 12.27 376.98 12.547 377.191 12.75 cv
377.398 12.957 377.688 13.062 378.059 13.059 cv
378.254 13.062 378.422 13.031 378.57 12.965 cv
378.711 12.906 378.832 12.82 378.934 12.707 cv
379.027 12.602 379.102 12.473 379.152 12.328 cv
379.199 12.187 379.223 12.039 379.227 11.879 cv
cp
379.688 17.43 mo
379.688 17.191 379.594 17.016 379.406 16.891 cv
379.219 16.77 378.961 16.699 378.633 16.687 cv
377.238 16.648 li
377.102 16.75 376.992 16.844 376.914 16.934 cv
376.832 17.023 376.77 17.109 376.723 17.195 cv
376.672 17.277 376.637 17.359 376.625 17.437 cv
376.605 17.516 376.598 17.594 376.602 17.68 cv
376.598 17.934 376.73 18.133 376.992 18.27 cv
377.254 18.402 377.625 18.469 378.105 18.473 cv
378.398 18.469 378.645 18.437 378.852 18.383 cv
379.051 18.32 379.215 18.242 379.344 18.145 cv
379.465 18.043 379.555 17.934 379.609 17.812 cv
379.66 17.691 379.688 17.562 379.688 17.43 cv
cp
f
389.367 13.027 mo
389.363 13.266 389.313 13.441 389.207 13.555 cv
389.098 13.672 388.949 13.73 388.77 13.727 cv
384.535 13.727 li
384.531 14.027 384.566 14.297 384.641 14.535 cv
384.707 14.777 384.82 14.98 384.977 15.148 cv
385.129 15.32 385.324 15.449 385.566 15.535 cv
385.805 15.625 386.094 15.668 386.438 15.668 cv
386.777 15.668 387.078 15.645 387.34 15.594 cv
387.598 15.547 387.824 15.492 388.016 15.43 cv
388.203 15.371 388.359 15.316 388.488 15.266 cv
388.609 15.219 388.711 15.195 388.793 15.191 cv
388.836 15.195 388.875 15.203 388.91 15.219 cv
388.938 15.238 388.965 15.27 388.984 15.316 cv
389.004 15.363 389.016 15.43 389.027 15.516 cv
389.031 15.602 389.035 15.711 389.039 15.84 cv
389.035 15.957 389.035 16.055 389.031 16.133 cv
389.023 16.215 389.016 16.281 389.008 16.336 cv
388.996 16.395 388.98 16.445 388.961 16.48 cv
388.941 16.523 388.914 16.559 388.883 16.594 cv
388.848 16.633 388.754 16.684 388.605 16.742 cv
388.449 16.809 388.258 16.871 388.027 16.926 cv
387.789 16.988 387.52 17.035 387.223 17.082 cv
386.918 17.121 386.598 17.145 386.258 17.148 cv
385.637 17.145 385.094 17.07 384.633 16.914 cv
384.164 16.762 383.777 16.523 383.469 16.207 cv
383.152 15.891 382.918 15.492 382.77 15.008 cv
382.613 14.527 382.539 13.961 382.543 13.305 cv
382.539 12.691 382.617 12.133 382.781 11.637 cv
382.938 11.141 383.172 10.723 383.484 10.375 cv
383.789 10.031 384.164 9.76599 384.602 9.58197 cv
385.039 9.40198 385.531 9.31201 386.086 9.30902 cv
386.664 9.31201 387.164 9.39801 387.578 9.56598 cv
387.992 9.742 388.328 9.97998 388.594 10.281 cv
388.855 10.586 389.051 10.945 389.18 11.359 cv
389.301 11.777 389.363 12.227 389.367 12.715 cv
cp
387.465 12.465 mo
387.477 11.914 387.367 11.48 387.133 11.168 cv
386.898 10.855 386.531 10.699 386.039 10.695 cv
385.789 10.699 385.574 10.746 385.391 10.836 cv
385.203 10.934 385.051 11.059 384.93 11.215 cv
384.805 11.375 384.711 11.562 384.648 11.777 cv
384.582 11.992 384.543 12.223 384.535 12.465 cv
cp
f
395.867 14.738 mo
395.863 15.137 395.789 15.484 395.645 15.785 cv
395.496 16.086 395.289 16.34 395.02 16.539 cv
394.746 16.746 394.426 16.895 394.059 16.996 cv
393.691 17.094 393.289 17.145 392.859 17.148 cv
392.594 17.145 392.348 17.125 392.113 17.09 cv
391.879 17.047 391.668 17 391.48 16.941 cv
391.293 16.883 391.137 16.82 391.012 16.758 cv
390.887 16.695 390.793 16.637 390.738 16.582 cv
390.68 16.527 390.637 16.445 390.609 16.328 cv
390.574 16.215 390.559 16.039 390.563 15.809 cv
390.559 15.66 390.566 15.539 390.578 15.445 cv
390.586 15.355 390.602 15.285 390.625 15.227 cv
390.645 15.176 390.668 15.137 390.703 15.117 cv
390.73 15.102 390.77 15.094 390.816 15.09 cv
390.871 15.094 390.957 15.125 391.07 15.187 cv
391.18 15.254 391.316 15.328 391.488 15.402 cv
391.652 15.484 391.848 15.555 392.066 15.621 cv
392.285 15.691 392.535 15.727 392.82 15.723 cv
392.996 15.727 393.152 15.707 393.293 15.668 cv
393.426 15.633 393.547 15.582 393.652 15.512 cv
393.75 15.445 393.824 15.359 393.879 15.254 cv
393.926 15.152 393.953 15.031 393.957 14.895 cv
393.953 14.738 393.906 14.605 393.813 14.496 cv
393.719 14.387 393.59 14.289 393.434 14.203 cv
393.27 14.121 393.09 14.043 392.895 13.969 cv
392.691 13.898 392.488 13.82 392.277 13.727 cv
392.066 13.641 391.859 13.539 391.664 13.422 cv
391.461 13.312 391.281 13.172 391.125 13.004 cv
390.961 12.84 390.836 12.641 390.742 12.402 cv
390.648 12.172 390.602 11.891 390.602 11.559 cv
390.602 11.23 390.664 10.926 390.793 10.645 cv
390.922 10.371 391.109 10.133 391.355 9.93402 cv
391.598 9.73798 391.895 9.586 392.246 9.47302 cv
392.594 9.367 392.988 9.31201 393.43 9.30902 cv
393.645 9.31201 393.855 9.328 394.063 9.35498 cv
394.266 9.39099 394.453 9.42999 394.621 9.47302 cv
394.785 9.52301 394.926 9.57397 395.043 9.625 cv
395.156 9.68402 395.238 9.72998 395.289 9.76599 cv
395.336 9.80902 395.371 9.84802 395.395 9.883 cv
395.414 9.92603 395.426 9.97302 395.438 10.023 cv
395.445 10.078 395.457 10.145 395.465 10.223 cv
395.473 10.309 395.477 10.406 395.477 10.523 cv
395.477 10.664 395.473 10.781 395.465 10.867 cv
395.457 10.961 395.441 11.031 395.426 11.078 cv
395.406 11.133 395.383 11.168 395.355 11.184 cv
395.32 11.207 395.285 11.215 395.246 11.211 cv
395.195 11.215 395.121 11.187 395.027 11.129 cv
394.926 11.078 394.805 11.02 394.656 10.953 cv
394.508 10.895 394.336 10.836 394.141 10.777 cv
393.945 10.727 393.723 10.699 393.477 10.695 cv
393.297 10.699 393.145 10.719 393.016 10.75 cv
392.883 10.789 392.773 10.84 392.695 10.906 cv
392.609 10.977 392.547 11.055 392.508 11.145 cv
392.461 11.238 392.441 11.336 392.445 11.437 cv
392.441 11.598 392.492 11.734 392.594 11.84 cv
392.691 11.953 392.82 12.047 392.984 12.129 cv
393.145 12.215 393.328 12.293 393.535 12.363 cv
393.738 12.437 393.945 12.52 394.156 12.602 cv
394.363 12.691 394.57 12.789 394.781 12.902 cv
394.984 13.016 395.168 13.156 395.328 13.32 cv
395.488 13.488 395.617 13.687 395.719 13.918 cv
395.813 14.152 395.863 14.426 395.867 14.738 cv
cp
f
404.695 13.051 mo
404.691 13.352 404.664 13.562 404.609 13.68 cv
404.551 13.805 404.461 13.863 404.336 13.859 cv
401.094 13.859 li
400.965 13.863 400.871 13.801 400.816 13.676 cv
400.754 13.555 400.727 13.348 400.73 13.051 cv
400.727 12.762 400.754 12.555 400.816 12.434 cv
400.871 12.316 400.965 12.258 401.094 12.254 cv
404.336 12.254 li
404.398 12.258 404.449 12.27 404.496 12.293 cv
404.535 12.32 404.574 12.367 404.609 12.426 cv
404.637 12.492 404.66 12.574 404.676 12.676 cv
404.688 12.781 404.691 12.906 404.695 13.051 cv
cp
f
415.313 16.113 mo
415.309 16.27 415.305 16.402 415.293 16.504 cv
415.277 16.613 415.258 16.699 415.234 16.77 cv
415.207 16.84 415.172 16.891 415.137 16.922 cv
415.094 16.953 415.051 16.969 415 16.969 cv
410.379 16.969 li
410.203 16.969 410.059 16.918 409.945 16.816 cv
409.824 16.715 409.766 16.551 409.77 16.32 cv
409.77 7.164 li
409.766 7.117 409.785 7.07001 409.82 7.02301 cv
409.852 6.98401 409.906 6.94897 409.988 6.922 cv
410.063 6.89801 410.168 6.87903 410.305 6.85901 cv
410.434 6.84802 410.598 6.84003 410.801 6.836 cv
410.996 6.84003 411.164 6.84802 411.297 6.85901 cv
411.426 6.87903 411.527 6.89801 411.609 6.922 cv
411.684 6.94897 411.742 6.98401 411.777 7.02301 cv
411.809 7.07001 411.824 7.117 411.828 7.164 cv
411.828 15.277 li
415 15.277 li
415.051 15.281 415.094 15.297 415.137 15.32 cv
415.172 15.352 415.207 15.398 415.234 15.461 cv
415.258 15.531 415.277 15.617 415.293 15.719 cv
415.305 15.828 415.309 15.957 415.313 16.113 cv
cp
f
423.434 13.156 mo
423.43 13.754 423.352 14.297 423.199 14.781 cv
423.039 15.273 422.805 15.691 422.488 16.043 cv
422.172 16.395 421.773 16.668 421.297 16.859 cv
420.816 17.051 420.258 17.145 419.621 17.148 cv
419 17.145 418.461 17.062 418.008 16.891 cv
417.547 16.723 417.168 16.473 416.871 16.145 cv
416.566 15.82 416.344 15.418 416.199 14.937 cv
416.055 14.461 415.984 13.914 415.984 13.297 cv
415.984 12.707 416.063 12.168 416.219 11.676 cv
416.375 11.187 416.613 10.766 416.934 10.414 cv
417.25 10.066 417.645 9.79303 418.121 9.59802 cv
418.594 9.40601 419.152 9.31201 419.793 9.30902 cv
420.418 9.31201 420.957 9.39502 421.414 9.56201 cv
421.871 9.73401 422.25 9.98401 422.547 10.309 cv
422.844 10.637 423.066 11.039 423.215 11.516 cv
423.359 11.996 423.43 12.543 423.434 13.156 cv
cp
421.414 13.234 mo
421.41 12.898 421.383 12.582 421.332 12.289 cv
421.273 12.004 421.18 11.754 421.055 11.539 cv
420.922 11.328 420.75 11.16 420.539 11.039 cv
420.32 10.922 420.051 10.863 419.723 10.859 cv
419.434 10.863 419.18 10.918 418.961 11.02 cv
418.742 11.129 418.563 11.285 418.422 11.488 cv
418.281 11.695 418.176 11.941 418.105 12.227 cv
418.035 12.52 418 12.848 418 13.211 cv
418 13.559 418.027 13.875 418.086 14.16 cv
418.141 14.453 418.234 14.703 418.363 14.914 cv
418.488 15.129 418.66 15.293 418.883 15.406 cv
419.098 15.527 419.367 15.586 419.691 15.582 cv
419.984 15.586 420.242 15.531 420.465 15.422 cv
420.68 15.316 420.859 15.164 421 14.957 cv
421.141 14.758 421.242 14.512 421.313 14.223 cv
421.375 13.937 421.41 13.609 421.414 13.234 cv
cp
f
430.25 15.598 mo
430.246 15.734 430.242 15.848 430.238 15.937 cv
430.227 16.031 430.219 16.109 430.207 16.168 cv
430.191 16.23 430.176 16.281 430.16 16.316 cv
430.141 16.359 430.098 16.406 430.039 16.465 cv
429.973 16.527 429.867 16.602 429.719 16.684 cv
429.566 16.773 429.395 16.852 429.203 16.914 cv
429.012 16.984 428.805 17.035 428.578 17.078 cv
428.352 17.117 428.117 17.137 427.883 17.141 cv
427.344 17.137 426.871 17.059 426.457 16.891 cv
426.043 16.727 425.695 16.48 425.418 16.156 cv
425.133 15.832 424.922 15.437 424.781 14.969 cv
424.641 14.504 424.57 13.965 424.57 13.359 cv
424.57 12.664 424.656 12.066 424.828 11.559 cv
425 11.055 425.242 10.633 425.559 10.301 cv
425.867 9.96899 426.234 9.72302 426.664 9.55902 cv
427.086 9.39801 427.555 9.31598 428.066 9.31598 cv
428.273 9.31598 428.477 9.336 428.68 9.37097 cv
428.875 9.40997 429.063 9.461 429.238 9.52002 cv
429.41 9.586 429.566 9.65601 429.707 9.72998 cv
429.844 9.81201 429.941 9.87903 430 9.93402 cv
430.055 9.992 430.094 10.039 430.121 10.074 cv
430.141 10.117 430.16 10.168 430.176 10.227 cv
430.188 10.293 430.199 10.371 430.207 10.457 cv
430.215 10.551 430.219 10.66 430.219 10.789 cv
430.219 11.094 430.191 11.305 430.141 11.426 cv
430.086 11.547 430.02 11.609 429.938 11.605 cv
429.848 11.609 429.754 11.574 429.656 11.5 cv
429.555 11.43 429.438 11.348 429.305 11.258 cv
429.172 11.172 429.012 11.09 428.824 11.016 cv
428.637 10.945 428.41 10.91 428.152 10.906 cv
427.641 10.91 427.254 11.105 426.984 11.496 cv
426.711 11.887 426.574 12.461 426.578 13.219 cv
426.574 13.594 426.609 13.926 426.68 14.211 cv
426.746 14.496 426.844 14.734 426.98 14.926 cv
427.109 15.121 427.277 15.266 427.48 15.359 cv
427.68 15.457 427.91 15.504 428.176 15.504 cv
428.441 15.504 428.676 15.465 428.875 15.383 cv
429.066 15.305 429.234 15.215 429.383 15.113 cv
429.523 15.016 429.648 14.926 429.75 14.844 cv
429.848 14.766 429.93 14.727 430 14.723 cv
430.043 14.727 430.082 14.738 430.117 14.762 cv
430.145 14.789 430.168 14.836 430.191 14.906 cv
430.207 14.977 430.223 15.066 430.234 15.176 cv
430.242 15.285 430.246 15.426 430.25 15.598 cv
cp
f
437.539 16.727 mo
437.535 16.805 437.508 16.859 437.461 16.898 cv
437.406 16.941 437.324 16.969 437.215 16.988 cv
437.098 17.004 436.934 17.016 436.719 17.016 cv
436.48 17.016 436.309 17.004 436.207 16.988 cv
436.098 16.969 436.023 16.941 435.984 16.898 cv
435.938 16.859 435.918 16.805 435.918 16.727 cv
435.918 16.176 li
435.629 16.484 435.301 16.723 434.938 16.891 cv
434.57 17.062 434.164 17.145 433.719 17.148 cv
433.348 17.145 433.008 17.098 432.699 17.004 cv
432.391 16.91 432.125 16.77 431.898 16.574 cv
431.672 16.387 431.496 16.152 431.371 15.871 cv
431.246 15.594 431.184 15.266 431.188 14.887 cv
431.184 14.488 431.262 14.137 431.422 13.832 cv
431.578 13.535 431.816 13.289 432.133 13.094 cv
432.445 12.902 432.836 12.758 433.305 12.66 cv
433.773 12.57 434.316 12.523 434.934 12.52 cv
435.613 12.52 li
435.613 12.098 li
435.613 11.883 435.59 11.691 435.547 11.527 cv
435.5 11.367 435.426 11.23 435.328 11.117 cv
435.223 11.012 435.09 10.93 434.922 10.875 cv
434.75 10.824 434.539 10.801 434.297 10.797 cv
433.965 10.801 433.672 10.836 433.418 10.906 cv
433.156 10.98 432.93 11.062 432.734 11.148 cv
432.535 11.242 432.371 11.32 432.242 11.391 cv
432.105 11.465 431.996 11.504 431.918 11.5 cv
431.855 11.504 431.805 11.484 431.766 11.445 cv
431.719 11.41 431.684 11.359 431.656 11.289 cv
431.625 11.227 431.602 11.141 431.59 11.039 cv
431.57 10.941 431.563 10.832 431.566 10.711 cv
431.563 10.551 431.578 10.426 431.605 10.328 cv
431.629 10.238 431.676 10.152 431.754 10.074 cv
431.824 10 431.953 9.91803 432.137 9.828 cv
432.316 9.73798 432.527 9.65198 432.773 9.57397 cv
433.016 9.49597 433.285 9.43402 433.574 9.383 cv
433.863 9.336 434.16 9.31201 434.469 9.30902 cv
435.012 9.31201 435.477 9.36298 435.863 9.46899 cv
436.25 9.578 436.57 9.742 436.82 9.961 cv
437.07 10.18 437.25 10.465 437.367 10.812 cv
437.477 11.164 437.535 11.578 437.539 12.051 cv
cp
435.613 13.75 mo
434.863 13.75 li
434.547 13.754 434.277 13.777 434.055 13.82 cv
433.828 13.871 433.645 13.941 433.508 14.031 cv
433.363 14.129 433.262 14.242 433.199 14.371 cv
433.133 14.508 433.098 14.656 433.102 14.824 cv
433.098 15.117 433.191 15.348 433.379 15.512 cv
433.563 15.68 433.82 15.762 434.148 15.762 cv
434.422 15.762 434.672 15.691 434.906 15.551 cv
435.133 15.41 435.371 15.207 435.613 14.934 cv
cp
f
441.461 16.703 mo
441.457 16.758 441.441 16.801 441.414 16.84 cv
441.379 16.879 441.324 16.914 441.254 16.937 cv
441.176 16.965 441.078 16.98 440.953 16.996 cv
440.828 17.008 440.668 17.016 440.48 17.016 cv
440.285 17.016 440.129 17.008 440.004 16.996 cv
439.879 16.98 439.777 16.965 439.703 16.937 cv
439.625 16.914 439.57 16.879 439.543 16.84 cv
439.508 16.801 439.492 16.758 439.496 16.703 cv
439.496 6.45697 li
439.492 6.40601 439.508 6.35901 439.543 6.31598 cv
439.57 6.27698 439.625 6.242 439.703 6.211 cv
439.777 6.18402 439.879 6.164 440.004 6.14502 cv
440.129 6.133 440.285 6.125 440.48 6.12097 cv
440.668 6.125 440.828 6.133 440.953 6.14502 cv
441.078 6.164 441.176 6.18402 441.254 6.211 cv
441.324 6.242 441.379 6.27698 441.414 6.31598 cv
441.441 6.35901 441.457 6.40601 441.461 6.45697 cv
cp
f
458.949 16.687 mo
458.945 16.742 458.934 16.789 458.906 16.828 cv
458.875 16.871 458.82 16.906 458.75 16.93 cv
458.672 16.957 458.574 16.977 458.449 16.992 cv
458.324 17.008 458.164 17.016 457.973 17.016 cv
457.785 17.016 457.629 17.008 457.508 16.992 cv
457.379 16.977 457.281 16.957 457.211 16.93 cv
457.137 16.906 457.086 16.871 457.055 16.828 cv
457.023 16.789 457.008 16.742 457.008 16.687 cv
457.008 8.47998 li
456.992 8.47998 li
454.07 16.68 li
454.047 16.75 454.012 16.805 453.969 16.848 cv
453.918 16.895 453.855 16.93 453.777 16.953 cv
453.695 16.98 453.594 16.996 453.469 17.004 cv
453.344 17.012 453.191 17.016 453.02 17.016 cv
452.84 17.016 452.691 17.008 452.566 16.996 cv
452.441 16.98 452.336 16.961 452.258 16.934 cv
452.172 16.906 452.109 16.871 452.066 16.828 cv
452.016 16.789 451.984 16.742 451.973 16.68 cv
449.152 8.47998 li
449.137 8.47998 li
449.137 16.687 li
449.133 16.742 449.117 16.789 449.094 16.828 cv
449.063 16.871 449.012 16.906 448.934 16.93 cv
448.855 16.957 448.754 16.977 448.633 16.992 cv
448.508 17.008 448.352 17.016 448.164 17.016 cv
447.973 17.016 447.816 17.008 447.695 16.992 cv
447.566 16.977 447.465 16.957 447.395 16.93 cv
447.316 16.906 447.266 16.871 447.238 16.828 cv
447.207 16.789 447.191 16.742 447.195 16.687 cv
447.195 7.703 li
447.191 7.44098 447.262 7.23798 447.406 7.09399 cv
447.543 6.95697 447.73 6.88702 447.969 6.883 cv
449.309 6.883 li
449.547 6.88702 449.75 6.90601 449.922 6.94098 cv
450.09 6.98401 450.238 7.047 450.367 7.13702 cv
450.488 7.22998 450.594 7.35199 450.68 7.49597 cv
450.762 7.64801 450.832 7.83197 450.898 8.047 cv
453.082 14.055 li
453.113 14.055 li
455.371 8.06201 li
455.438 7.84399 455.512 7.65997 455.594 7.508 cv
455.672 7.35901 455.766 7.23798 455.875 7.14099 cv
455.98 7.05103 456.105 6.98401 456.25 6.94098 cv
456.395 6.90601 456.563 6.88702 456.758 6.883 cv
458.137 6.883 li
458.273 6.88702 458.395 6.90198 458.5 6.93701 cv
458.598 6.97699 458.68 7.03101 458.75 7.09802 cv
458.813 7.172 458.863 7.258 458.898 7.35498 cv
458.93 7.461 458.945 7.578 458.949 7.703 cv
cp
f
468.059 13.156 mo
468.055 13.754 467.977 14.297 467.824 14.781 cv
467.664 15.273 467.43 15.691 467.113 16.043 cv
466.797 16.395 466.398 16.668 465.922 16.859 cv
465.441 17.051 464.883 17.145 464.246 17.148 cv
463.625 17.145 463.086 17.062 462.633 16.891 cv
462.172 16.723 461.793 16.473 461.496 16.145 cv
461.191 15.82 460.969 15.418 460.824 14.937 cv
460.68 14.461 460.609 13.914 460.609 13.297 cv
460.609 12.707 460.688 12.168 460.844 11.676 cv
461 11.187 461.238 10.766 461.559 10.414 cv
461.875 10.066 462.27 9.79303 462.746 9.59802 cv
463.219 9.40601 463.777 9.31201 464.418 9.30902 cv
465.043 9.31201 465.582 9.39502 466.039 9.56201 cv
466.496 9.73401 466.875 9.98401 467.172 10.309 cv
467.469 10.637 467.691 11.039 467.84 11.516 cv
467.984 11.996 468.055 12.543 468.059 13.156 cv
cp
466.039 13.234 mo
466.035 12.898 466.008 12.582 465.957 12.289 cv
465.898 12.004 465.805 11.754 465.68 11.539 cv
465.547 11.328 465.375 11.16 465.164 11.039 cv
464.945 10.922 464.676 10.863 464.348 10.859 cv
464.059 10.863 463.805 10.918 463.586 11.02 cv
463.367 11.129 463.188 11.285 463.047 11.488 cv
462.906 11.695 462.801 11.941 462.73 12.227 cv
462.66 12.52 462.625 12.848 462.625 13.211 cv
462.625 13.559 462.652 13.875 462.711 14.16 cv
462.766 14.453 462.859 14.703 462.988 14.914 cv
463.113 15.129 463.285 15.293 463.508 15.406 cv
463.723 15.527 463.992 15.586 464.316 15.582 cv
464.609 15.586 464.867 15.531 465.09 15.422 cv
465.305 15.316 465.484 15.164 465.625 14.957 cv
465.766 14.758 465.867 14.512 465.938 14.223 cv
466 13.937 466.035 13.609 466.039 13.234 cv
cp
f
476.207 16.703 mo
476.203 16.766 476.191 16.812 476.168 16.848 cv
476.141 16.891 476.094 16.922 476.035 16.945 cv
475.969 16.969 475.887 16.984 475.781 17 cv
475.676 17.008 475.543 17.016 475.391 17.016 cv
475.219 17.016 475.086 17.008 474.984 17 cv
474.879 16.984 474.793 16.969 474.73 16.945 cv
474.664 16.922 474.617 16.891 474.59 16.848 cv
474.559 16.812 474.543 16.766 474.547 16.703 cv
474.547 15.934 li
474.188 16.32 473.813 16.617 473.422 16.828 cv
473.023 17.039 472.59 17.145 472.117 17.148 cv
471.582 17.145 471.133 17.043 470.77 16.84 cv
470.402 16.637 470.105 16.363 469.875 16.012 cv
469.641 15.668 469.473 15.262 469.371 14.793 cv
469.27 14.332 469.219 13.84 469.219 13.32 cv
469.219 12.707 469.281 12.152 469.414 11.656 cv
469.543 11.164 469.738 10.742 469.996 10.395 cv
470.25 10.047 470.566 9.78101 470.945 9.59003 cv
471.324 9.40601 471.762 9.31201 472.258 9.30902 cv
472.645 9.31201 472.996 9.39099 473.316 9.547 cv
473.629 9.70697 473.945 9.93701 474.258 10.242 cv
474.258 6.47998 li
474.258 6.42999 474.27 6.383 474.301 6.34003 cv
474.324 6.30103 474.379 6.26599 474.457 6.23401 cv
474.531 6.20697 474.629 6.18701 474.758 6.16803 cv
474.879 6.15601 475.039 6.14801 475.234 6.14502 cv
475.426 6.14801 475.582 6.15601 475.707 6.16803 cv
475.828 6.18701 475.93 6.20697 476.004 6.23401 cv
476.074 6.26599 476.125 6.30103 476.16 6.34003 cv
476.188 6.383 476.203 6.42999 476.207 6.47998 cv
cp
474.258 12.059 mo
473.977 11.707 473.707 11.437 473.453 11.25 cv
473.191 11.062 472.922 10.969 472.645 10.969 cv
472.391 10.969 472.172 11.035 471.988 11.16 cv
471.801 11.293 471.652 11.461 471.543 11.672 cv
471.43 11.883 471.348 12.121 471.293 12.383 cv
471.238 12.648 471.211 12.918 471.211 13.187 cv
471.211 13.484 471.234 13.766 471.281 14.039 cv
471.328 14.316 471.402 14.562 471.512 14.777 cv
471.613 14.992 471.758 15.164 471.938 15.293 cv
472.113 15.426 472.336 15.492 472.605 15.488 cv
472.738 15.492 472.867 15.473 473 15.43 cv
473.125 15.395 473.258 15.332 473.391 15.238 cv
473.523 15.152 473.66 15.035 473.801 14.891 cv
473.941 14.75 474.094 14.574 474.258 14.367 cv
cp
f
484.605 13.027 mo
484.602 13.266 484.551 13.441 484.445 13.555 cv
484.336 13.672 484.188 13.73 484.008 13.727 cv
479.773 13.727 li
479.77 14.027 479.805 14.297 479.879 14.535 cv
479.945 14.777 480.059 14.98 480.215 15.148 cv
480.367 15.32 480.563 15.449 480.805 15.535 cv
481.043 15.625 481.332 15.668 481.676 15.668 cv
482.016 15.668 482.316 15.645 482.578 15.594 cv
482.836 15.547 483.063 15.492 483.254 15.43 cv
483.441 15.371 483.598 15.316 483.727 15.266 cv
483.848 15.219 483.949 15.195 484.031 15.191 cv
484.074 15.195 484.113 15.203 484.148 15.219 cv
484.176 15.238 484.203 15.27 484.223 15.316 cv
484.242 15.363 484.254 15.43 484.266 15.516 cv
484.27 15.602 484.273 15.711 484.277 15.84 cv
484.273 15.957 484.273 16.055 484.27 16.133 cv
484.262 16.215 484.254 16.281 484.246 16.336 cv
484.234 16.395 484.219 16.445 484.199 16.48 cv
484.18 16.523 484.152 16.559 484.121 16.594 cv
484.086 16.633 483.992 16.684 483.844 16.742 cv
483.688 16.809 483.496 16.871 483.266 16.926 cv
483.027 16.988 482.758 17.035 482.461 17.082 cv
482.156 17.121 481.836 17.145 481.496 17.148 cv
480.875 17.145 480.332 17.07 479.871 16.914 cv
479.402 16.762 479.016 16.523 478.707 16.207 cv
478.391 15.891 478.156 15.492 478.008 15.008 cv
477.852 14.527 477.777 13.961 477.781 13.305 cv
477.777 12.691 477.855 12.133 478.02 11.637 cv
478.176 11.141 478.41 10.723 478.723 10.375 cv
479.027 10.031 479.402 9.76599 479.84 9.58197 cv
480.277 9.40198 480.77 9.31201 481.324 9.30902 cv
481.902 9.31201 482.402 9.39801 482.816 9.56598 cv
483.23 9.742 483.566 9.97998 483.832 10.281 cv
484.094 10.586 484.289 10.945 484.418 11.359 cv
484.539 11.777 484.602 12.227 484.605 12.715 cv
cp
482.703 12.465 mo
482.715 11.914 482.605 11.48 482.371 11.168 cv
482.137 10.855 481.77 10.699 481.277 10.695 cv
481.027 10.699 480.813 10.746 480.629 10.836 cv
480.441 10.934 480.289 11.059 480.168 11.215 cv
480.043 11.375 479.949 11.562 479.887 11.777 cv
479.82 11.992 479.781 12.223 479.773 12.465 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
