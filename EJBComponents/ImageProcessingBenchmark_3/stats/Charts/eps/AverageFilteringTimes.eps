%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AverageFilteringTimes.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 4:00:16 p.m.
%%BoundingBox: 0 0 709 551
%%HiResBoundingBox: 0 0 708.9601 550.8000
%%CropBox: 0 0 708.9601 550.8000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -550.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 550.8 li
708.96 550.8 li
708.96 0 li
cp
clp
gsave
0 550.8 mo
709 550.8 li
709 -.200012 li
0 -.200012 li
cp
clp
0 0 mo
708.961 0 li
708.961 550.801 li
0 550.801 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
52.68 491.52 mo
691.68 491.52 li
52.68 479.641 mo
691.68 479.641 li
52.68 467.641 mo
691.68 467.641 li
52.68 455.641 mo
691.68 455.641 li
52.68 431.762 mo
691.68 431.762 li
52.68 419.762 mo
691.68 419.762 li
52.68 407.879 mo
691.68 407.879 li
52.68 395.879 mo
691.68 395.879 li
52.68 372 mo
691.68 372 li
52.68 360 mo
691.68 360 li
52.68 348 mo
691.68 348 li
52.68 336.121 mo
691.68 336.121 li
52.68 312.121 mo
691.68 312.121 li
52.68 300.121 mo
691.68 300.121 li
52.68 288.238 mo
691.68 288.238 li
52.68 276.238 mo
691.68 276.238 li
52.68 252.359 mo
691.68 252.359 li
52.68 240.359 mo
691.68 240.359 li
52.68 228.359 mo
691.68 228.359 li
52.68 216.48 mo
691.68 216.48 li
52.68 192.48 mo
691.68 192.48 li
52.68 180.602 mo
691.68 180.602 li
52.68 168.602 mo
691.68 168.602 li
52.68 156.602 mo
691.68 156.602 li
52.68 132.719 mo
691.68 132.719 li
52.68 120.719 mo
691.68 120.719 li
52.68 108.84 mo
691.68 108.84 li
52.68 96.84 mo
691.68 96.84 li
52.68 72.961 mo
691.68 72.961 li
52.68 60.961 mo
691.68 60.961 li
52.68 48.961 mo
691.68 48.961 li
52.68 37.078 mo
691.68 37.078 li
.135805 .104005 .108583 0 cmyk
@
52.68 443.762 mo
691.68 443.762 li
52.68 383.879 mo
691.68 383.879 li
52.68 324.121 mo
691.68 324.121 li
52.68 264.238 mo
691.68 264.238 li
52.68 204.48 mo
691.68 204.48 li
52.68 144.719 mo
691.68 144.719 li
52.68 84.84 mo
691.68 84.84 li
52.68 25.078 mo
691.68 25.078 li
.326574 .281529 .277562 0 cmyk
@
92.641 25.078 mo
92.641 503.52 li
172.559 25.078 mo
172.559 503.52 li
252.359 25.078 mo
252.359 503.52 li
332.281 25.078 mo
332.281 503.52 li
412.078 25.078 mo
412.078 503.52 li
492 25.078 mo
492 503.52 li
571.801 25.078 mo
571.801 503.52 li
651.719 25.078 mo
651.719 503.52 li
.175235 .144778 .143648 0 cmyk
@
52.68 25.078 mo
52.68 503.52 li
132.602 25.078 mo
132.602 503.52 li
212.398 25.078 mo
212.398 503.52 li
292.32 25.078 mo
292.32 503.52 li
372.238 25.078 mo
372.238 503.52 li
452.039 25.078 mo
452.039 503.52 li
531.961 25.078 mo
531.961 503.52 li
611.762 25.078 mo
611.762 503.52 li
691.68 25.078 mo
691.68 503.52 li
.326574 .281529 .277562 0 cmyk
@
32.641 494.16 mo
39.719 494.16 li
39.719 511.32 li
32.641 511.32 li
cp
0 0 0 0 cmyk
ef
32.641 434.398 mo
39.719 434.398 li
39.719 451.441 li
32.641 451.441 li
cp
ef
25.559 374.641 mo
39.719 374.641 li
39.719 391.68 li
25.559 391.68 li
cp
ef
25.559 314.762 mo
39.719 314.762 li
39.719 331.922 li
25.559 331.922 li
cp
ef
25.559 255 mo
39.719 255 li
39.719 272.039 li
25.559 272.039 li
cp
ef
25.559 195.121 mo
39.719 195.121 li
39.719 212.281 li
25.559 212.281 li
cp
ef
25.559 135.359 mo
39.719 135.359 li
39.719 152.519 li
25.559 152.519 li
cp
ef
25.559 75.602 mo
39.719 75.602 li
39.719 92.641 li
25.559 92.641 li
cp
ef
25.559 15.719 mo
39.719 15.719 li
39.719 32.879 li
25.559 32.879 li
cp
ef
.96 lw
52.68 503.52 mo
691.68 503.52 li
.369879 .299321 .304356 .000976577 cmyk
@
52.68 503.52 mo
52.68 507.961 li
132.602 503.52 mo
132.602 507.961 li
212.398 503.52 mo
212.398 507.961 li
292.32 503.52 mo
292.32 507.961 li
372.238 503.52 mo
372.238 507.961 li
452.039 503.52 mo
452.039 507.961 li
531.961 503.52 mo
531.961 507.961 li
611.762 503.52 mo
611.762 507.961 li
691.68 503.52 mo
691.68 507.961 li
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
1 lc
52.68 101.16 mo
132.602 344.16 li
212.398 421.922 li
292.32 448.32 li
372.238 462.121 li
452.039 470.398 li
531.961 475.801 li
611.762 479.762 li
691.68 482.641 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
57.711 106.039 mo
47.629 95.961 li
47.629 106.039 mo
57.711 95.961 li
.62829 .284672 0 0 cmyk
@
137.512 349.16 mo
127.43 339.078 li
127.43 349.16 mo
137.512 339.078 li
@
217.43 426.801 mo
207.352 416.719 li
207.352 426.801 mo
217.43 416.719 li
@
297.352 453.32 mo
287.27 443.238 li
287.27 453.32 mo
297.352 443.238 li
@
377.148 467 mo
367.07 456.922 li
367.07 467 mo
377.148 456.922 li
@
457.07 475.281 mo
446.988 465.199 li
446.988 475.281 mo
457.07 465.199 li
@
536.871 480.801 mo
526.789 470.719 li
526.789 480.801 mo
536.871 470.719 li
@
616.789 484.762 mo
606.711 474.68 li
606.711 484.762 mo
616.789 474.68 li
@
696.59 487.641 mo
686.512 477.559 li
686.512 487.641 mo
696.59 477.559 li
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
52.68 21.121 mo
132.602 262.078 li
212.398 382.559 li
292.32 422.762 li
372.238 442.441 li
452.039 455.281 li
531.961 463.078 li
611.762 469.199 li
691.68 473.281 li
@
grestore
127.43 256.879 mo
137.391 256.879 li
137.391 266.84 li
127.43 266.84 li
cp
@
207.352 377.359 mo
217.309 377.359 li
217.309 387.32 li
207.352 387.32 li
cp
@
287.27 417.68 mo
297.231 417.68 li
297.231 427.641 li
287.27 427.641 li
cp
@
367.07 437.359 mo
377.031 437.359 li
377.031 447.32 li
367.07 447.32 li
cp
@
446.988 450.199 mo
456.949 450.199 li
456.949 460.16 li
446.988 460.16 li
cp
@
526.789 458 mo
536.75 458 li
536.75 467.961 li
526.789 467.961 li
cp
@
606.711 464 mo
616.672 464 li
616.672 473.961 li
606.711 473.961 li
cp
@
686.512 468.078 mo
696.469 468.078 li
696.469 478.039 li
686.512 478.039 li
cp
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
52.68 95.641 mo
132.602 371.281 li
212.398 421.559 li
292.32 447.719 li
372.238 461.641 li
452.039 469.922 li
531.961 475.559 li
611.762 479.52 li
691.68 482.398 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
57.711 100.641 mo
47.629 90.559 li
47.629 100.641 mo
57.711 90.559 li
.0321965 .622736 .922606 .000579843 cmyk
@
137.512 376.16 mo
127.43 366.078 li
127.43 376.16 mo
137.512 366.078 li
@
217.43 426.441 mo
207.352 416.359 li
207.352 426.441 mo
217.43 416.359 li
@
297.352 452.719 mo
287.27 442.641 li
287.27 452.719 mo
297.352 442.641 li
@
377.148 466.52 mo
367.07 456.441 li
367.07 466.52 mo
377.148 456.441 li
@
457.07 474.922 mo
446.988 464.84 li
446.988 474.922 mo
457.07 464.84 li
@
536.871 480.441 mo
526.789 470.359 li
526.789 480.441 mo
536.871 470.359 li
@
616.789 484.52 mo
606.711 474.441 li
606.711 484.52 mo
616.789 474.441 li
@
696.59 487.398 mo
686.512 477.32 li
686.512 487.398 mo
696.59 477.32 li
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
52.68 23.762 mo
132.602 263.762 li
212.398 383.762 li
292.32 423.48 li
372.238 443.641 li
452.039 454.801 li
531.961 463.441 li
611.762 468.602 li
691.68 473.281 li
@
grestore
127.43 258.68 mo
137.391 258.68 li
137.391 268.641 li
127.43 268.641 li
cp
@
207.352 378.559 mo
217.309 378.559 li
217.309 388.52 li
207.352 388.52 li
cp
@
287.27 418.281 mo
297.231 418.281 li
297.231 428.238 li
287.27 428.238 li
cp
@
367.07 438.559 mo
377.031 438.559 li
377.031 448.52 li
367.07 448.52 li
cp
@
446.988 449.719 mo
456.949 449.719 li
456.949 459.68 li
446.988 459.68 li
cp
@
526.789 458.359 mo
536.75 458.359 li
536.75 468.32 li
526.789 468.32 li
cp
@
606.711 463.398 mo
616.672 463.398 li
616.672 473.359 li
606.711 473.359 li
cp
@
686.512 468.199 mo
696.469 468.199 li
696.469 478.16 li
686.512 478.16 li
cp
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
52.68 92.281 mo
132.602 341.762 li
212.398 403.199 li
292.32 434.281 li
372.238 451.441 li
452.039 461.762 li
531.961 468.719 li
611.762 473.641 li
691.68 477.359 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
57.711 97.16 mo
47.629 87.078 li
47.629 97.16 mo
57.711 87.078 li
.621118 .109194 .980743 .0040589 cmyk
@
137.512 346.641 mo
127.43 336.559 li
127.43 346.641 mo
137.512 336.559 li
@
217.43 408.199 mo
207.352 398.121 li
207.352 408.199 mo
217.43 398.121 li
@
297.352 439.281 mo
287.27 429.199 li
287.27 439.281 mo
297.352 429.199 li
@
377.148 456.441 mo
367.07 446.359 li
367.07 456.441 mo
377.148 446.359 li
@
457.07 466.762 mo
446.988 456.68 li
446.988 466.762 mo
457.07 456.68 li
@
536.871 473.602 mo
526.789 463.52 li
526.789 473.602 mo
536.871 463.52 li
@
616.789 478.641 mo
606.711 468.559 li
606.711 478.641 mo
616.789 468.559 li
@
696.59 482.238 mo
686.512 472.16 li
686.512 482.238 mo
696.59 472.16 li
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
52.68 24.719 mo
132.602 264.121 li
212.398 383.762 li
292.32 421.922 li
372.238 442.441 li
452.039 455.641 li
531.961 463.559 li
611.762 468 li
691.68 473.52 li
@
grestore
127.43 258.922 mo
137.391 258.922 li
137.391 268.879 li
127.43 268.879 li
cp
@
207.352 378.68 mo
217.309 378.68 li
217.309 388.641 li
207.352 388.641 li
cp
@
287.27 416.719 mo
297.231 416.719 li
297.231 426.68 li
287.27 426.68 li
cp
@
367.07 437.238 mo
377.031 437.238 li
377.031 447.199 li
367.07 447.199 li
cp
@
446.988 450.441 mo
456.949 450.441 li
456.949 460.398 li
446.988 460.398 li
cp
@
526.789 458.48 mo
536.75 458.48 li
536.75 468.441 li
526.789 468.441 li
cp
@
606.711 462.801 mo
616.672 462.801 li
616.672 472.762 li
606.711 472.762 li
cp
@
686.512 468.32 mo
696.469 468.32 li
696.469 478.281 li
686.512 478.281 li
cp
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
52.68 91.32 mo
132.602 307.078 li
212.398 418.078 li
292.32 433.441 li
372.238 450.238 li
452.039 461.52 li
531.961 468.238 li
611.762 473.398 li
691.68 476.641 li
0 .993988 1 0 cmyk
@
grestore
57.711 96.32 mo
47.629 86.238 li
47.629 96.32 mo
57.711 86.238 li
0 .993988 1 0 cmyk
@
137.512 312.078 mo
127.43 302 li
127.43 312.078 mo
137.512 302 li
@
217.43 423.078 mo
207.352 413 li
207.352 423.078 mo
217.43 413 li
@
297.352 438.441 mo
287.27 428.359 li
287.27 438.441 mo
297.352 428.359 li
@
377.148 455.238 mo
367.07 445.16 li
367.07 455.238 mo
377.148 445.16 li
@
457.07 466.398 mo
446.988 456.32 li
446.988 466.398 mo
457.07 456.32 li
@
536.871 473.238 mo
526.789 463.16 li
526.789 473.238 mo
536.871 463.16 li
@
616.789 478.398 mo
606.711 468.32 li
606.711 478.398 mo
616.789 468.32 li
@
696.59 481.641 mo
686.512 471.559 li
686.512 481.641 mo
696.59 471.559 li
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
52.68 24.961 mo
132.602 264.602 li
212.398 383.039 li
292.32 423.719 li
372.238 443.641 li
452.039 455.52 li
531.961 463.441 li
611.762 469.199 li
691.68 471.961 li
@
grestore
127.43 259.52 mo
137.391 259.52 li
137.391 269.481 li
127.43 269.481 li
cp
@
207.352 377.961 mo
217.309 377.961 li
217.309 387.922 li
207.352 387.922 li
cp
@
287.27 418.52 mo
297.231 418.52 li
297.231 428.481 li
287.27 428.481 li
cp
@
367.07 438.441 mo
377.031 438.441 li
377.031 448.398 li
367.07 448.398 li
cp
@
446.988 450.441 mo
456.949 450.441 li
456.949 460.398 li
446.988 460.398 li
cp
@
526.789 458.238 mo
536.75 458.238 li
536.75 468.199 li
526.789 468.199 li
cp
@
606.711 464.121 mo
616.672 464.121 li
616.672 474.078 li
606.711 474.078 li
cp
@
686.512 466.879 mo
696.469 466.879 li
696.469 476.84 li
686.512 476.84 li
cp
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.68 89.398 mo
132.602 307.199 li
212.398 401.16 li
292.32 417 li
372.238 438.719 li
452.039 451.078 li
531.961 459.961 li
611.762 467.762 li
691.68 470.52 li
.62829 .284672 0 0 cmyk
@
grestore
57.711 94.281 mo
47.629 84.199 li
47.629 94.281 mo
57.711 84.199 li
.62829 .284672 0 0 cmyk
@
137.512 312.078 mo
127.43 302 li
127.43 312.078 mo
137.512 302 li
@
217.43 406.039 mo
207.352 395.961 li
207.352 406.039 mo
217.43 395.961 li
@
297.352 422 mo
287.27 411.922 li
287.27 422 mo
297.352 411.922 li
@
377.148 443.719 mo
367.07 433.641 li
367.07 443.719 mo
377.148 433.641 li
@
457.07 456.078 mo
446.988 446 li
446.988 456.078 mo
457.07 446 li
@
536.871 464.961 mo
526.789 454.879 li
526.789 464.961 mo
536.871 454.879 li
@
616.789 472.641 mo
606.711 462.559 li
606.711 472.641 mo
616.789 462.559 li
@
696.59 475.398 mo
686.512 465.32 li
686.512 475.398 mo
696.59 465.32 li
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.68 25.441 mo
132.602 264.719 li
212.398 383.641 li
292.32 423.238 li
372.238 443.52 li
452.039 454.559 li
531.961 463.441 li
611.762 469.199 li
691.68 473.52 li
@
grestore
[4 3 ] 0 dsh
47.629 20.359 mo
57.59 20.359 li
57.59 30.32 li
47.629 30.32 li
cp
@
127.43 259.641 mo
137.391 259.641 li
137.391 269.602 li
127.43 269.602 li
cp
@
207.352 378.441 mo
217.309 378.441 li
217.309 388.398 li
207.352 388.398 li
cp
@
287.27 418.039 mo
297.231 418.039 li
297.231 428 li
287.27 428 li
cp
@
367.07 438.441 mo
377.031 438.441 li
377.031 448.398 li
367.07 448.398 li
cp
@
446.988 449.359 mo
456.949 449.359 li
456.949 459.32 li
446.988 459.32 li
cp
@
526.789 458.359 mo
536.75 458.359 li
536.75 468.32 li
526.789 468.32 li
cp
@
606.711 464 mo
616.672 464 li
616.672 473.961 li
606.711 473.961 li
cp
@
686.512 468.441 mo
696.469 468.441 li
696.469 478.398 li
686.512 478.398 li
cp
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.68 90.961 mo
132.602 305.641 li
212.398 418.801 li
292.32 400.32 li
372.238 428.281 li
452.039 448.078 li
531.961 451.199 li
611.762 459.238 li
691.68 466.559 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
[] 0 dsh
57.711 95.961 mo
47.629 85.879 li
47.629 95.961 mo
57.711 85.879 li
.0321965 .622736 .922606 .000579843 cmyk
@
137.512 310.641 mo
127.43 300.559 li
127.43 310.641 mo
137.512 300.559 li
@
217.43 423.68 mo
207.352 413.602 li
207.352 423.68 mo
217.43 413.602 li
@
297.352 405.199 mo
287.27 395.121 li
287.27 405.199 mo
297.352 395.121 li
@
377.148 433.16 mo
367.07 423.078 li
367.07 433.16 mo
377.148 423.078 li
@
457.07 452.961 mo
446.988 442.879 li
446.988 452.961 mo
457.07 442.879 li
@
536.871 456.078 mo
526.789 446 li
526.789 456.078 mo
536.871 446 li
@
616.789 464.238 mo
606.711 454.16 li
606.711 464.238 mo
616.789 454.16 li
@
696.59 471.559 mo
686.512 461.48 li
686.512 471.559 mo
696.59 461.48 li
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.68 26.039 mo
132.602 263.641 li
212.398 383.641 li
292.32 414.48 li
372.238 443.641 li
452.039 454.68 li
531.961 463.441 li
611.762 469.199 li
691.68 473.52 li
@
grestore
47.629 20.961 mo
57.59 20.961 li
57.59 30.922 li
47.629 30.922 li
cp
@
127.43 258.559 mo
137.391 258.559 li
137.391 268.52 li
127.43 268.52 li
cp
@
207.352 378.441 mo
217.309 378.441 li
217.309 388.398 li
207.352 388.398 li
cp
@
287.27 409.398 mo
297.231 409.398 li
297.231 419.359 li
287.27 419.359 li
cp
@
367.07 438.441 mo
377.031 438.441 li
377.031 448.398 li
367.07 448.398 li
cp
@
446.988 449.602 mo
456.949 449.602 li
456.949 459.559 li
446.988 459.559 li
cp
@
526.789 458.359 mo
536.75 458.359 li
536.75 468.32 li
526.789 468.32 li
cp
@
606.711 464.121 mo
616.672 464.121 li
616.672 474.078 li
606.711 474.078 li
cp
@
686.512 468.441 mo
696.469 468.441 li
696.469 478.398 li
686.512 478.398 li
cp
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.68 90.238 mo
132.602 333.602 li
212.398 417.84 li
292.32 398.879 li
372.238 414.961 li
452.039 434.039 li
531.961 447.719 li
611.762 451.199 li
691.68 458.52 li
.467353 0 .87747 0 cmyk
@
grestore
57.711 95.238 mo
47.629 85.16 li
47.629 95.238 mo
57.711 85.16 li
.621118 .109194 .980743 .0040589 cmyk
@
137.512 338.48 mo
127.43 328.398 li
127.43 338.48 mo
137.512 328.398 li
@
217.43 422.719 mo
207.352 412.641 li
207.352 422.719 mo
217.43 412.641 li
@
297.352 403.762 mo
287.27 393.68 li
287.27 403.762 mo
297.352 393.68 li
@
377.148 419.84 mo
367.07 409.762 li
367.07 419.84 mo
377.148 409.762 li
@
457.07 438.922 mo
446.988 428.84 li
446.988 438.922 mo
457.07 428.84 li
@
536.871 452.719 mo
526.789 442.641 li
526.789 452.719 mo
536.871 442.641 li
@
616.789 456.199 mo
606.711 446.121 li
606.711 456.199 mo
616.789 446.121 li
@
696.59 463.52 mo
686.512 453.441 li
686.512 463.52 mo
696.59 453.441 li
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.68 25.922 mo
132.602 264.48 li
212.398 383.762 li
292.32 423.48 li
372.238 443.641 li
452.039 455.641 li
531.961 463.559 li
611.762 469.199 li
691.68 473.281 li
.467353 0 .87747 0 cmyk
@
grestore
47.629 20.84 mo
57.59 20.84 li
57.59 30.801 li
47.629 30.801 li
cp
@
127.43 259.281 mo
137.391 259.281 li
137.391 269.238 li
127.43 269.238 li
cp
@
207.352 378.68 mo
217.309 378.68 li
217.309 388.641 li
207.352 388.641 li
cp
@
287.27 418.281 mo
297.231 418.281 li
297.231 428.238 li
287.27 428.238 li
cp
@
367.07 438.559 mo
377.031 438.559 li
377.031 448.52 li
367.07 448.52 li
cp
@
446.988 450.441 mo
456.949 450.441 li
456.949 460.398 li
446.988 460.398 li
cp
@
526.789 458.48 mo
536.75 458.48 li
536.75 468.441 li
526.789 468.441 li
cp
@
606.711 464.121 mo
616.672 464.121 li
616.672 474.078 li
606.711 474.078 li
cp
@
686.512 468.078 mo
696.469 468.078 li
696.469 478.039 li
686.512 478.039 li
cp
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.68 91.078 mo
132.602 306.961 li
212.398 418.922 li
292.32 415.32 li
372.238 401.039 li
452.039 424.801 li
531.961 452.879 li
611.762 448.441 li
691.68 451.441 li
0 .993988 1 0 cmyk
@
grestore
57.711 95.961 mo
47.629 85.879 li
47.629 95.961 mo
57.711 85.879 li
0 .993988 1 0 cmyk
@
137.512 311.84 mo
127.43 301.762 li
127.43 311.84 mo
137.512 301.762 li
@
217.43 423.922 mo
207.352 413.84 li
207.352 423.922 mo
217.43 413.84 li
@
297.352 420.32 mo
287.27 410.238 li
287.27 420.32 mo
297.352 410.238 li
@
377.148 406.039 mo
367.07 395.961 li
367.07 406.039 mo
377.148 395.961 li
@
457.07 429.801 mo
446.988 419.719 li
446.988 429.801 mo
457.07 419.719 li
@
536.871 457.879 mo
526.789 447.801 li
526.789 457.879 mo
536.871 447.801 li
@
616.789 453.32 mo
606.711 443.238 li
606.711 453.32 mo
616.789 443.238 li
@
696.59 456.441 mo
686.512 446.359 li
686.512 456.441 mo
696.59 446.359 li
@
gsave
52.68 25.078 mo
692.282 25.078 li
692.282 504.121 li
52.68 504.121 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
52.68 25.199 mo
132.602 262.922 li
212.398 375.602 li
292.32 423.602 li
372.238 443.52 li
452.039 454.32 li
531.961 463.441 li
611.762 469.078 li
691.68 473.398 li
@
grestore
47.629 20.121 mo
57.59 20.121 li
57.59 30.0779 li
47.629 30.0779 li
cp
@
127.43 257.84 mo
137.391 257.84 li
137.391 267.801 li
127.43 267.801 li
cp
@
207.352 370.398 mo
217.309 370.398 li
217.309 380.359 li
207.352 380.359 li
cp
@
287.27 418.398 mo
297.231 418.398 li
297.231 428.359 li
287.27 428.359 li
cp
@
367.07 438.32 mo
377.031 438.32 li
377.031 448.281 li
367.07 448.281 li
cp
@
446.988 449.121 mo
456.949 449.121 li
456.949 459.078 li
446.988 459.078 li
cp
@
526.789 458.238 mo
536.75 458.238 li
536.75 468.199 li
526.789 468.199 li
cp
@
606.711 463.879 mo
616.672 463.879 li
616.672 473.84 li
606.711 473.84 li
cp
@
686.512 468.32 mo
696.469 468.32 li
696.469 478.281 li
686.512 478.281 li
cp
@
32.637 494.152 mo
39.731 494.152 li
39.731 511.242 li
32.637 511.242 li
cp
0 0 0 0 cmyk
ef
39.27 503.117 mo
39.266 503.801 39.215 504.422 39.109 504.984 cv
39 505.547 38.82 506.031 38.574 506.434 cv
38.32 506.84 37.992 507.152 37.594 507.371 cv
37.188 507.594 36.695 507.703 36.109 507.703 cv
35.551 507.703 35.078 507.605 34.699 507.406 cv
34.316 507.211 34.012 506.918 33.777 506.531 cv
33.543 506.145 33.375 505.672 33.281 505.105 cv
33.18 504.543 33.133 503.895 33.133 503.16 cv
33.133 502.488 33.188 501.867 33.297 501.301 cv
33.406 500.738 33.582 500.254 33.832 499.848 cv
34.074 499.445 34.398 499.133 34.805 498.906 cv
35.203 498.687 35.699 498.574 36.289 498.574 cv
36.848 498.574 37.32 498.676 37.703 498.871 cv
38.086 499.074 38.391 499.367 38.625 499.75 cv
38.855 500.141 39.023 500.613 39.121 501.176 cv
39.219 501.738 39.266 502.387 39.27 503.117 cv
cp
38.063 503.199 mo
38.059 502.758 38.043 502.359 38.016 502.008 cv
37.98 501.656 37.934 501.348 37.875 501.078 cv
37.809 500.809 37.73 500.578 37.633 500.383 cv
37.535 500.191 37.418 500.031 37.281 499.902 cv
37.141 499.777 36.98 499.684 36.809 499.625 cv
36.629 499.57 36.434 499.543 36.219 499.539 cv
35.828 499.543 35.512 499.633 35.273 499.816 cv
35.027 500 34.836 500.254 34.699 500.57 cv
34.559 500.891 34.465 501.262 34.414 501.691 cv
34.363 502.121 34.34 502.586 34.34 503.078 cv
34.34 503.742 34.371 504.305 34.441 504.766 cv
34.508 505.234 34.617 505.613 34.77 505.902 cv
34.914 506.199 35.105 506.41 35.336 506.539 cv
35.566 506.676 35.848 506.742 36.18 506.738 cv
36.434 506.742 36.656 506.703 36.852 506.617 cv
37.043 506.539 37.211 506.418 37.352 506.262 cv
37.492 506.109 37.605 505.926 37.699 505.711 cv
37.785 505.496 37.859 505.258 37.918 504.996 cv
37.969 504.738 38.008 504.457 38.031 504.152 cv
38.051 503.848 38.059 503.531 38.063 503.199 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.637 434.352 mo
39.731 434.352 li
39.731 451.442 li
32.637 451.442 li
cp
0 0 0 0 cmyk
ef
38.934 444.887 mo
38.934 445.363 38.852 445.785 38.691 446.156 cv
38.531 446.527 38.305 446.84 38.016 447.094 cv
37.719 447.348 37.371 447.543 36.969 447.672 cv
36.563 447.805 36.113 447.867 35.621 447.867 cv
35.344 447.867 35.082 447.848 34.84 447.809 cv
34.59 447.77 34.371 447.723 34.184 447.668 cv
33.988 447.613 33.832 447.559 33.707 447.5 cv
33.582 447.449 33.504 447.406 33.473 447.371 cv
33.438 447.34 33.414 447.309 33.402 447.281 cv
33.387 447.254 33.371 447.223 33.363 447.18 cv
33.348 447.145 33.34 447.094 33.34 447.031 cv
33.332 446.973 33.332 446.902 33.332 446.82 cv
33.332 446.746 33.336 446.676 33.344 446.613 cv
33.352 446.551 33.363 446.5 33.383 446.461 cv
33.398 446.422 33.418 446.395 33.445 446.375 cv
33.469 446.359 33.5 446.352 33.531 446.348 cv
33.578 446.352 33.648 446.379 33.742 446.434 cv
33.836 446.492 33.965 446.555 34.129 446.621 cv
34.293 446.687 34.492 446.75 34.734 446.809 cv
34.969 446.867 35.254 446.895 35.59 446.895 cv
35.891 446.895 36.172 446.859 36.43 446.785 cv
36.684 446.715 36.906 446.602 37.094 446.445 cv
37.277 446.293 37.422 446.098 37.527 445.859 cv
37.633 445.625 37.684 445.336 37.688 444.996 cv
37.684 444.715 37.641 444.465 37.551 444.246 cv
37.461 444.027 37.324 443.848 37.141 443.703 cv
36.953 443.562 36.719 443.457 36.438 443.383 cv
36.152 443.312 35.813 443.273 35.426 443.273 cv
35.141 443.273 34.902 443.289 34.703 443.316 cv
34.5 443.348 34.313 443.363 34.141 443.359 cv
34.012 443.363 33.918 443.332 33.867 443.27 cv
33.809 443.211 33.781 443.098 33.785 442.926 cv
33.785 439.312 li
33.781 439.164 33.816 439.055 33.891 438.977 cv
33.957 438.906 34.059 438.867 34.195 438.867 cv
38.125 438.867 li
38.16 438.867 38.195 438.879 38.23 438.898 cv
38.262 438.922 38.289 438.953 38.316 438.992 cv
38.336 439.035 38.352 439.086 38.367 439.148 cv
38.375 439.215 38.383 439.293 38.387 439.375 cv
38.383 439.543 38.359 439.668 38.32 439.758 cv
38.273 439.852 38.215 439.898 38.137 439.895 cv
34.965 439.895 li
34.965 442.383 li
35.117 442.363 35.273 442.352 35.438 442.344 cv
35.594 442.34 35.781 442.336 35.996 442.336 cv
36.48 442.336 36.906 442.398 37.273 442.52 cv
37.637 442.641 37.941 442.812 38.191 443.031 cv
38.434 443.258 38.621 443.523 38.746 443.836 cv
38.871 444.152 38.934 444.504 38.934 444.887 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
25.539 374.551 mo
39.73 374.551 li
39.73 391.641 li
25.539 391.641 li
cp
0 0 0 0 cmyk
ef
31.914 387.477 mo
31.91 387.566 31.902 387.637 31.891 387.695 cv
31.875 387.758 31.855 387.809 31.836 387.84 cv
31.813 387.879 31.789 387.902 31.758 387.918 cv
31.727 387.934 31.695 387.941 31.668 387.941 cv
27.031 387.941 li
26.996 387.941 26.969 387.934 26.941 387.918 cv
26.914 387.902 26.887 387.879 26.863 387.84 cv
26.836 387.809 26.816 387.758 26.805 387.695 cv
26.789 387.637 26.781 387.566 26.785 387.477 cv
26.781 387.398 26.789 387.324 26.805 387.262 cv
26.816 387.203 26.832 387.156 26.855 387.117 cv
26.871 387.082 26.898 387.051 26.93 387.027 cv
26.961 387.008 26.992 387 27.031 386.996 cv
28.883 386.996 li
28.883 380.25 li
27.168 381.27 li
27.078 381.32 27.008 381.348 26.961 381.355 cv
26.906 381.363 26.863 381.355 26.832 381.324 cv
26.797 381.297 26.777 381.246 26.766 381.176 cv
26.754 381.109 26.746 381.023 26.75 380.914 cv
26.746 380.84 26.75 380.773 26.762 380.715 cv
26.766 380.664 26.777 380.617 26.793 380.578 cv
26.805 380.543 26.824 380.512 26.848 380.484 cv
26.871 380.457 26.902 380.43 26.949 380.402 cv
28.992 379.09 li
29.008 379.078 29.027 379.066 29.059 379.059 cv
29.082 379.051 29.117 379.043 29.164 379.031 cv
29.203 379.023 29.254 379.016 29.309 379.012 cv
29.363 379.012 29.43 379.012 29.516 379.008 cv
29.621 379.012 29.715 379.016 29.789 379.023 cv
29.859 379.031 29.914 379.047 29.961 379.062 cv
30 379.082 30.027 379.102 30.043 379.125 cv
30.051 379.152 30.059 379.176 30.063 379.199 cv
30.063 386.996 li
31.668 386.996 li
31.703 387 31.738 387.008 31.77 387.027 cv
31.801 387.051 31.824 387.082 31.848 387.117 cv
31.863 387.156 31.879 387.203 31.895 387.262 cv
31.902 387.324 31.91 387.398 31.914 387.477 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.27 383.484 mo
39.266 384.168 39.215 384.789 39.109 385.352 cv
39 385.914 38.82 386.398 38.574 386.801 cv
38.32 387.207 37.992 387.52 37.594 387.738 cv
37.188 387.961 36.695 388.07 36.109 388.07 cv
35.551 388.07 35.078 387.973 34.699 387.773 cv
34.316 387.578 34.012 387.285 33.777 386.898 cv
33.543 386.512 33.375 386.039 33.281 385.473 cv
33.18 384.91 33.133 384.262 33.133 383.527 cv
33.133 382.855 33.188 382.234 33.297 381.668 cv
33.406 381.105 33.582 380.621 33.832 380.215 cv
34.074 379.812 34.398 379.5 34.805 379.273 cv
35.203 379.055 35.699 378.941 36.289 378.941 cv
36.848 378.941 37.32 379.043 37.703 379.238 cv
38.086 379.441 38.391 379.734 38.625 380.117 cv
38.855 380.508 39.023 380.98 39.121 381.543 cv
39.219 382.105 39.266 382.754 39.27 383.484 cv
cp
38.063 383.566 mo
38.059 383.125 38.043 382.727 38.016 382.375 cv
37.98 382.023 37.934 381.715 37.875 381.445 cv
37.809 381.176 37.73 380.945 37.633 380.75 cv
37.535 380.559 37.418 380.398 37.281 380.27 cv
37.141 380.145 36.98 380.051 36.809 379.992 cv
36.629 379.937 36.434 379.91 36.219 379.906 cv
35.828 379.91 35.512 380 35.273 380.184 cv
35.027 380.367 34.836 380.621 34.699 380.937 cv
34.559 381.258 34.465 381.629 34.414 382.059 cv
34.363 382.488 34.34 382.953 34.34 383.445 cv
34.34 384.109 34.371 384.672 34.441 385.133 cv
34.508 385.602 34.617 385.98 34.77 386.27 cv
34.914 386.566 35.105 386.777 35.336 386.906 cv
35.566 387.043 35.848 387.109 36.18 387.105 cv
36.434 387.109 36.656 387.07 36.852 386.984 cv
37.043 386.906 37.211 386.785 37.352 386.629 cv
37.492 386.477 37.605 386.293 37.699 386.078 cv
37.785 385.863 37.859 385.625 37.918 385.363 cv
37.969 385.105 38.008 384.824 38.031 384.52 cv
38.051 384.215 38.059 383.898 38.063 383.566 cv
cp
f
25.539 314.738 mo
39.73 314.738 li
39.73 331.828 li
25.539 331.828 li
cp
0 0 0 0 cmyk
ef
31.914 327.664 mo
31.91 327.754 31.902 327.824 31.891 327.883 cv
31.875 327.945 31.855 327.996 31.836 328.027 cv
31.813 328.066 31.789 328.09 31.758 328.105 cv
31.727 328.121 31.695 328.129 31.668 328.129 cv
27.031 328.129 li
26.996 328.129 26.969 328.121 26.941 328.105 cv
26.914 328.09 26.887 328.066 26.863 328.027 cv
26.836 327.996 26.816 327.945 26.805 327.883 cv
26.789 327.824 26.781 327.754 26.785 327.664 cv
26.781 327.586 26.789 327.512 26.805 327.449 cv
26.816 327.391 26.832 327.344 26.855 327.305 cv
26.871 327.27 26.898 327.238 26.93 327.215 cv
26.961 327.195 26.992 327.187 27.031 327.184 cv
28.883 327.184 li
28.883 320.437 li
27.168 321.457 li
27.078 321.508 27.008 321.535 26.961 321.543 cv
26.906 321.551 26.863 321.543 26.832 321.512 cv
26.797 321.484 26.777 321.434 26.766 321.363 cv
26.754 321.297 26.746 321.211 26.75 321.102 cv
26.746 321.027 26.75 320.961 26.762 320.902 cv
26.766 320.852 26.777 320.805 26.793 320.766 cv
26.805 320.73 26.824 320.699 26.848 320.672 cv
26.871 320.645 26.902 320.617 26.949 320.59 cv
28.992 319.277 li
29.008 319.266 29.027 319.254 29.059 319.246 cv
29.082 319.238 29.117 319.23 29.164 319.219 cv
29.203 319.211 29.254 319.203 29.309 319.199 cv
29.363 319.199 29.43 319.199 29.516 319.195 cv
29.621 319.199 29.715 319.203 29.789 319.211 cv
29.859 319.219 29.914 319.234 29.961 319.25 cv
30 319.27 30.027 319.289 30.043 319.312 cv
30.051 319.34 30.059 319.363 30.063 319.387 cv
30.063 327.184 li
31.668 327.184 li
31.703 327.187 31.738 327.195 31.77 327.215 cv
31.801 327.238 31.824 327.27 31.848 327.305 cv
31.863 327.344 31.879 327.391 31.895 327.449 cv
31.902 327.512 31.91 327.586 31.914 327.664 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.934 325.277 mo
38.934 325.754 38.852 326.176 38.691 326.547 cv
38.531 326.918 38.305 327.23 38.016 327.484 cv
37.719 327.738 37.371 327.934 36.969 328.062 cv
36.563 328.195 36.113 328.258 35.621 328.258 cv
35.344 328.258 35.082 328.238 34.84 328.199 cv
34.59 328.16 34.371 328.113 34.184 328.059 cv
33.988 328.004 33.832 327.949 33.707 327.891 cv
33.582 327.84 33.504 327.797 33.473 327.762 cv
33.438 327.73 33.414 327.699 33.402 327.672 cv
33.387 327.645 33.371 327.613 33.363 327.57 cv
33.348 327.535 33.34 327.484 33.34 327.422 cv
33.332 327.363 33.332 327.293 33.332 327.211 cv
33.332 327.137 33.336 327.066 33.344 327.004 cv
33.352 326.941 33.363 326.891 33.383 326.852 cv
33.398 326.812 33.418 326.785 33.445 326.766 cv
33.469 326.75 33.5 326.742 33.531 326.738 cv
33.578 326.742 33.648 326.77 33.742 326.824 cv
33.836 326.883 33.965 326.945 34.129 327.012 cv
34.293 327.078 34.492 327.141 34.734 327.199 cv
34.969 327.258 35.254 327.285 35.59 327.285 cv
35.891 327.285 36.172 327.25 36.43 327.176 cv
36.684 327.105 36.906 326.992 37.094 326.836 cv
37.277 326.684 37.422 326.488 37.527 326.25 cv
37.633 326.016 37.684 325.727 37.688 325.387 cv
37.684 325.105 37.641 324.855 37.551 324.637 cv
37.461 324.418 37.324 324.238 37.141 324.094 cv
36.953 323.953 36.719 323.848 36.438 323.773 cv
36.152 323.703 35.813 323.664 35.426 323.664 cv
35.141 323.664 34.902 323.68 34.703 323.707 cv
34.5 323.738 34.313 323.754 34.141 323.75 cv
34.012 323.754 33.918 323.723 33.867 323.66 cv
33.809 323.602 33.781 323.488 33.785 323.316 cv
33.785 319.703 li
33.781 319.555 33.816 319.445 33.891 319.367 cv
33.957 319.297 34.059 319.258 34.195 319.258 cv
38.125 319.258 li
38.16 319.258 38.195 319.27 38.23 319.289 cv
38.262 319.312 38.289 319.344 38.316 319.383 cv
38.336 319.426 38.352 319.477 38.367 319.539 cv
38.375 319.605 38.383 319.684 38.387 319.766 cv
38.383 319.934 38.359 320.059 38.32 320.148 cv
38.273 320.242 38.215 320.289 38.137 320.285 cv
34.965 320.285 li
34.965 322.773 li
35.117 322.754 35.273 322.742 35.438 322.734 cv
35.594 322.73 35.781 322.727 35.996 322.727 cv
36.48 322.727 36.906 322.789 37.273 322.91 cv
37.637 323.031 37.941 323.203 38.191 323.422 cv
38.434 323.648 38.621 323.914 38.746 324.227 cv
38.871 324.543 38.934 324.895 38.934 325.277 cv
cp
f
25.539 254.941 mo
39.73 254.941 li
39.73 272.031 li
25.539 272.031 li
cp
0 0 0 0 cmyk
ef
31.895 267.812 mo
31.891 267.898 31.887 267.973 31.875 268.035 cv
31.863 268.102 31.848 268.156 31.828 268.195 cv
31.805 268.242 31.777 268.273 31.746 268.289 cv
31.711 268.312 31.672 268.32 31.633 268.32 cv
26.73 268.32 li
26.668 268.32 26.609 268.312 26.563 268.297 cv
26.512 268.281 26.473 268.258 26.438 268.219 cv
26.402 268.187 26.375 268.133 26.363 268.062 cv
26.344 267.992 26.336 267.906 26.34 267.805 cv
26.336 267.715 26.34 267.637 26.348 267.566 cv
26.352 267.5 26.367 267.441 26.395 267.387 cv
26.418 267.336 26.449 267.281 26.484 267.227 cv
26.52 267.176 26.563 267.121 26.621 267.059 cv
28.395 265.234 li
28.805 264.816 29.133 264.441 29.383 264.105 cv
29.629 263.777 29.82 263.473 29.953 263.195 cv
30.086 262.922 30.172 262.672 30.219 262.445 cv
30.258 262.223 30.281 262.012 30.281 261.816 cv
30.281 261.621 30.246 261.437 30.18 261.258 cv
30.113 261.086 30.02 260.93 29.895 260.793 cv
29.77 260.664 29.613 260.559 29.426 260.477 cv
29.238 260.402 29.02 260.363 28.773 260.359 cv
28.484 260.363 28.227 260.402 28 260.477 cv
27.77 260.559 27.57 260.645 27.398 260.73 cv
27.227 260.824 27.082 260.906 26.965 260.984 cv
26.848 261.062 26.762 261.102 26.711 261.102 cv
26.676 261.102 26.645 261.094 26.621 261.074 cv
26.59 261.059 26.57 261.027 26.555 260.984 cv
26.539 260.945 26.523 260.891 26.516 260.82 cv
26.504 260.754 26.5 260.672 26.504 260.574 cv
26.5 260.508 26.504 260.449 26.512 260.398 cv
26.516 260.348 26.523 260.305 26.535 260.266 cv
26.543 260.23 26.559 260.195 26.578 260.164 cv
26.598 260.133 26.633 260.094 26.691 260.043 cv
26.742 259.996 26.836 259.93 26.973 259.848 cv
27.105 259.766 27.277 259.687 27.48 259.605 cv
27.684 259.527 27.906 259.457 28.152 259.402 cv
28.395 259.348 28.652 259.32 28.926 259.32 cv
29.352 259.32 29.727 259.383 30.051 259.504 cv
30.371 259.625 30.637 259.789 30.852 260 cv
31.063 260.211 31.223 260.457 31.328 260.73 cv
31.434 261.012 31.488 261.309 31.488 261.621 cv
31.488 261.91 31.461 262.191 31.41 262.469 cv
31.359 262.754 31.254 263.059 31.094 263.383 cv
30.93 263.711 30.695 264.074 30.391 264.473 cv
30.082 264.875 29.676 265.336 29.172 265.852 cv
27.766 267.32 li
31.625 267.32 li
31.656 267.324 31.691 267.336 31.73 267.352 cv
31.762 267.375 31.793 267.406 31.82 267.445 cv
31.844 267.488 31.863 267.539 31.875 267.598 cv
31.887 267.664 31.891 267.734 31.895 267.812 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.27 263.863 mo
39.266 264.547 39.215 265.168 39.109 265.73 cv
39 266.293 38.82 266.777 38.574 267.18 cv
38.32 267.586 37.992 267.898 37.594 268.117 cv
37.188 268.34 36.695 268.449 36.109 268.449 cv
35.551 268.449 35.078 268.352 34.699 268.152 cv
34.316 267.957 34.012 267.664 33.777 267.277 cv
33.543 266.891 33.375 266.418 33.281 265.852 cv
33.18 265.289 33.133 264.641 33.133 263.906 cv
33.133 263.234 33.188 262.613 33.297 262.047 cv
33.406 261.484 33.582 261 33.832 260.594 cv
34.074 260.191 34.398 259.879 34.805 259.652 cv
35.203 259.434 35.699 259.32 36.289 259.32 cv
36.848 259.32 37.32 259.422 37.703 259.617 cv
38.086 259.82 38.391 260.113 38.625 260.496 cv
38.855 260.887 39.023 261.359 39.121 261.922 cv
39.219 262.484 39.266 263.133 39.27 263.863 cv
cp
38.063 263.945 mo
38.059 263.504 38.043 263.105 38.016 262.754 cv
37.98 262.402 37.934 262.094 37.875 261.824 cv
37.809 261.555 37.73 261.324 37.633 261.129 cv
37.535 260.937 37.418 260.777 37.281 260.648 cv
37.141 260.523 36.98 260.43 36.809 260.371 cv
36.629 260.316 36.434 260.289 36.219 260.285 cv
35.828 260.289 35.512 260.379 35.273 260.562 cv
35.027 260.746 34.836 261 34.699 261.316 cv
34.559 261.637 34.465 262.008 34.414 262.437 cv
34.363 262.867 34.34 263.332 34.34 263.824 cv
34.34 264.488 34.371 265.051 34.441 265.512 cv
34.508 265.98 34.617 266.359 34.77 266.648 cv
34.914 266.945 35.105 267.156 35.336 267.285 cv
35.566 267.422 35.848 267.488 36.18 267.484 cv
36.434 267.488 36.656 267.449 36.852 267.363 cv
37.043 267.285 37.211 267.164 37.352 267.008 cv
37.492 266.855 37.605 266.672 37.699 266.457 cv
37.785 266.242 37.859 266.004 37.918 265.742 cv
37.969 265.484 38.008 265.203 38.031 264.898 cv
38.051 264.594 38.059 264.277 38.063 263.945 cv
cp
f
25.539 195.141 mo
39.73 195.141 li
39.73 212.231 li
25.539 212.231 li
cp
0 0 0 0 cmyk
ef
31.895 207.98 mo
31.891 208.066 31.887 208.141 31.875 208.203 cv
31.863 208.27 31.848 208.324 31.828 208.363 cv
31.805 208.41 31.777 208.441 31.746 208.457 cv
31.711 208.48 31.672 208.488 31.633 208.488 cv
26.73 208.488 li
26.668 208.488 26.609 208.48 26.563 208.465 cv
26.512 208.449 26.473 208.426 26.438 208.387 cv
26.402 208.355 26.375 208.301 26.363 208.23 cv
26.344 208.16 26.336 208.074 26.34 207.973 cv
26.336 207.883 26.34 207.805 26.348 207.734 cv
26.352 207.668 26.367 207.609 26.395 207.555 cv
26.418 207.504 26.449 207.449 26.484 207.395 cv
26.52 207.344 26.563 207.289 26.621 207.227 cv
28.395 205.402 li
28.805 204.984 29.133 204.609 29.383 204.273 cv
29.629 203.945 29.82 203.641 29.953 203.363 cv
30.086 203.09 30.172 202.84 30.219 202.613 cv
30.258 202.391 30.281 202.18 30.281 201.984 cv
30.281 201.789 30.246 201.605 30.18 201.426 cv
30.113 201.254 30.02 201.098 29.895 200.961 cv
29.77 200.832 29.613 200.727 29.426 200.645 cv
29.238 200.57 29.02 200.531 28.773 200.527 cv
28.484 200.531 28.227 200.57 28 200.645 cv
27.77 200.727 27.57 200.812 27.398 200.898 cv
27.227 200.992 27.082 201.074 26.965 201.152 cv
26.848 201.23 26.762 201.27 26.711 201.27 cv
26.676 201.27 26.645 201.262 26.621 201.242 cv
26.59 201.227 26.57 201.195 26.555 201.152 cv
26.539 201.113 26.523 201.059 26.516 200.988 cv
26.504 200.922 26.5 200.84 26.504 200.742 cv
26.5 200.676 26.504 200.617 26.512 200.566 cv
26.516 200.516 26.523 200.473 26.535 200.434 cv
26.543 200.398 26.559 200.363 26.578 200.332 cv
26.598 200.301 26.633 200.262 26.691 200.211 cv
26.742 200.164 26.836 200.098 26.973 200.016 cv
27.105 199.934 27.277 199.855 27.48 199.773 cv
27.684 199.695 27.906 199.625 28.152 199.57 cv
28.395 199.516 28.652 199.488 28.926 199.488 cv
29.352 199.488 29.727 199.551 30.051 199.672 cv
30.371 199.793 30.637 199.957 30.852 200.168 cv
31.063 200.379 31.223 200.625 31.328 200.898 cv
31.434 201.18 31.488 201.477 31.488 201.789 cv
31.488 202.078 31.461 202.359 31.41 202.637 cv
31.359 202.922 31.254 203.227 31.094 203.551 cv
30.93 203.879 30.695 204.242 30.391 204.641 cv
30.082 205.043 29.676 205.504 29.172 206.02 cv
27.766 207.488 li
31.625 207.488 li
31.656 207.492 31.691 207.504 31.73 207.52 cv
31.762 207.543 31.793 207.574 31.82 207.613 cv
31.844 207.656 31.863 207.707 31.875 207.766 cv
31.887 207.832 31.891 207.902 31.895 207.98 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.934 205.637 mo
38.934 206.113 38.852 206.535 38.691 206.906 cv
38.531 207.277 38.305 207.59 38.016 207.844 cv
37.719 208.098 37.371 208.293 36.969 208.422 cv
36.563 208.555 36.113 208.617 35.621 208.617 cv
35.344 208.617 35.082 208.598 34.84 208.559 cv
34.59 208.52 34.371 208.473 34.184 208.418 cv
33.988 208.363 33.832 208.309 33.707 208.25 cv
33.582 208.199 33.504 208.156 33.473 208.121 cv
33.438 208.09 33.414 208.059 33.402 208.031 cv
33.387 208.004 33.371 207.973 33.363 207.93 cv
33.348 207.895 33.34 207.844 33.34 207.781 cv
33.332 207.723 33.332 207.652 33.332 207.57 cv
33.332 207.496 33.336 207.426 33.344 207.363 cv
33.352 207.301 33.363 207.25 33.383 207.211 cv
33.398 207.172 33.418 207.145 33.445 207.125 cv
33.469 207.109 33.5 207.102 33.531 207.098 cv
33.578 207.102 33.648 207.129 33.742 207.184 cv
33.836 207.242 33.965 207.305 34.129 207.371 cv
34.293 207.437 34.492 207.5 34.734 207.559 cv
34.969 207.617 35.254 207.645 35.59 207.645 cv
35.891 207.645 36.172 207.609 36.43 207.535 cv
36.684 207.465 36.906 207.352 37.094 207.195 cv
37.277 207.043 37.422 206.848 37.527 206.609 cv
37.633 206.375 37.684 206.086 37.688 205.746 cv
37.684 205.465 37.641 205.215 37.551 204.996 cv
37.461 204.777 37.324 204.598 37.141 204.453 cv
36.953 204.312 36.719 204.207 36.438 204.133 cv
36.152 204.062 35.813 204.023 35.426 204.023 cv
35.141 204.023 34.902 204.039 34.703 204.066 cv
34.5 204.098 34.313 204.113 34.141 204.109 cv
34.012 204.113 33.918 204.082 33.867 204.02 cv
33.809 203.961 33.781 203.848 33.785 203.676 cv
33.785 200.062 li
33.781 199.914 33.816 199.805 33.891 199.727 cv
33.957 199.656 34.059 199.617 34.195 199.617 cv
38.125 199.617 li
38.16 199.617 38.195 199.629 38.23 199.648 cv
38.262 199.672 38.289 199.703 38.316 199.742 cv
38.336 199.785 38.352 199.836 38.367 199.898 cv
38.375 199.965 38.383 200.043 38.387 200.125 cv
38.383 200.293 38.359 200.418 38.32 200.508 cv
38.273 200.602 38.215 200.648 38.137 200.645 cv
34.965 200.645 li
34.965 203.133 li
35.117 203.113 35.273 203.102 35.438 203.094 cv
35.594 203.09 35.781 203.086 35.996 203.086 cv
36.48 203.086 36.906 203.148 37.273 203.27 cv
37.637 203.391 37.941 203.562 38.191 203.781 cv
38.434 204.008 38.621 204.273 38.746 204.586 cv
38.871 204.902 38.934 205.254 38.934 205.637 cv
cp
f
25.539 135.34 mo
39.73 135.34 li
39.73 152.43 li
25.539 152.43 li
cp
0 0 0 0 cmyk
ef
31.824 146.145 mo
31.82 146.555 31.75 146.922 31.609 147.246 cv
31.465 147.574 31.262 147.855 31 148.086 cv
30.734 148.32 30.406 148.496 30.02 148.621 cv
29.629 148.746 29.191 148.809 28.707 148.809 cv
28.402 148.809 28.125 148.781 27.871 148.734 cv
27.609 148.687 27.379 148.637 27.184 148.566 cv
26.98 148.504 26.816 148.434 26.684 148.363 cv
26.551 148.293 26.465 148.242 26.434 148.207 cv
26.395 148.18 26.371 148.148 26.355 148.113 cv
26.336 148.082 26.316 148.043 26.305 147.996 cv
26.289 147.953 26.281 147.898 26.273 147.828 cv
26.266 147.766 26.262 147.684 26.266 147.582 cv
26.262 147.422 26.277 147.309 26.313 147.242 cv
26.344 147.18 26.391 147.145 26.453 147.145 cv
26.496 147.145 26.578 147.184 26.703 147.254 cv
26.824 147.332 26.984 147.41 27.18 147.492 cv
27.371 147.578 27.598 147.656 27.863 147.727 cv
28.121 147.801 28.414 147.836 28.734 147.836 cv
29.043 147.836 29.313 147.797 29.551 147.719 cv
29.781 147.641 29.98 147.531 30.141 147.391 cv
30.297 147.25 30.414 147.082 30.496 146.887 cv
30.574 146.691 30.613 146.48 30.617 146.254 cv
30.613 146.004 30.563 145.777 30.465 145.574 cv
30.359 145.375 30.211 145.203 30.02 145.055 cv
29.82 144.91 29.582 144.797 29.297 144.719 cv
29.012 144.641 28.688 144.602 28.324 144.602 cv
27.453 144.602 li
27.41 144.602 27.375 144.594 27.34 144.578 cv
27.305 144.562 27.273 144.535 27.25 144.496 cv
27.223 144.461 27.203 144.414 27.188 144.355 cv
27.172 144.297 27.164 144.219 27.164 144.121 cv
27.164 144.035 27.168 143.965 27.184 143.906 cv
27.191 143.852 27.211 143.805 27.242 143.77 cv
27.266 143.734 27.297 143.711 27.328 143.691 cv
27.359 143.68 27.395 143.672 27.438 143.668 cv
28.211 143.668 li
28.512 143.672 28.781 143.633 29.023 143.551 cv
29.258 143.477 29.461 143.363 29.633 143.215 cv
29.797 143.07 29.926 142.895 30.016 142.691 cv
30.105 142.488 30.152 142.262 30.152 142.008 cv
30.152 141.828 30.121 141.652 30.063 141.484 cv
30 141.32 29.91 141.176 29.793 141.051 cv
29.672 140.926 29.52 140.828 29.34 140.758 cv
29.152 140.687 28.941 140.652 28.699 140.652 cv
28.434 140.652 28.188 140.695 27.969 140.773 cv
27.742 140.855 27.547 140.941 27.375 141.031 cv
27.199 141.125 27.055 141.211 26.941 141.289 cv
26.828 141.371 26.746 141.41 26.703 141.406 cv
26.668 141.41 26.641 141.402 26.617 141.391 cv
26.59 141.379 26.57 141.355 26.555 141.32 cv
26.539 141.289 26.527 141.242 26.52 141.176 cv
26.512 141.117 26.508 141.035 26.512 140.934 cv
26.508 140.867 26.508 140.809 26.516 140.754 cv
26.516 140.703 26.527 140.656 26.543 140.613 cv
26.559 140.578 26.574 140.543 26.594 140.508 cv
26.609 140.48 26.641 140.441 26.684 140.395 cv
26.727 140.352 26.813 140.289 26.949 140.207 cv
27.078 140.125 27.242 140.047 27.438 139.965 cv
27.629 139.887 27.852 139.816 28.109 139.762 cv
28.359 139.707 28.633 139.68 28.93 139.68 cv
29.336 139.68 29.699 139.734 30.012 139.836 cv
30.324 139.945 30.582 140.094 30.793 140.281 cv
30.996 140.477 31.152 140.707 31.258 140.973 cv
31.359 141.242 31.41 141.535 31.414 141.859 cv
31.41 142.141 31.375 142.402 31.305 142.637 cv
31.23 142.879 31.121 143.09 30.98 143.273 cv
30.836 143.461 30.664 143.617 30.461 143.746 cv
30.254 143.879 30.016 143.973 29.746 144.02 cv
29.746 144.031 li
30.051 144.066 30.332 144.141 30.586 144.262 cv
30.84 144.383 31.059 144.535 31.242 144.719 cv
31.422 144.902 31.563 145.117 31.668 145.359 cv
31.77 145.605 31.82 145.867 31.824 146.145 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.27 144.223 mo
39.266 144.906 39.215 145.527 39.109 146.09 cv
39 146.652 38.82 147.137 38.574 147.539 cv
38.32 147.945 37.992 148.258 37.594 148.477 cv
37.188 148.699 36.695 148.809 36.109 148.809 cv
35.551 148.809 35.078 148.711 34.699 148.512 cv
34.316 148.316 34.012 148.023 33.777 147.637 cv
33.543 147.25 33.375 146.777 33.281 146.211 cv
33.18 145.648 33.133 145 33.133 144.266 cv
33.133 143.594 33.188 142.973 33.297 142.406 cv
33.406 141.844 33.582 141.359 33.832 140.953 cv
34.074 140.551 34.398 140.238 34.805 140.012 cv
35.203 139.793 35.699 139.68 36.289 139.68 cv
36.848 139.68 37.32 139.781 37.703 139.977 cv
38.086 140.18 38.391 140.473 38.625 140.855 cv
38.855 141.246 39.023 141.719 39.121 142.281 cv
39.219 142.844 39.266 143.492 39.27 144.223 cv
cp
38.063 144.305 mo
38.059 143.863 38.043 143.465 38.016 143.113 cv
37.98 142.762 37.934 142.453 37.875 142.184 cv
37.809 141.914 37.73 141.684 37.633 141.488 cv
37.535 141.297 37.418 141.137 37.281 141.008 cv
37.141 140.883 36.98 140.789 36.809 140.73 cv
36.629 140.676 36.434 140.648 36.219 140.645 cv
35.828 140.648 35.512 140.738 35.273 140.922 cv
35.027 141.105 34.836 141.359 34.699 141.676 cv
34.559 141.996 34.465 142.367 34.414 142.797 cv
34.363 143.227 34.34 143.691 34.34 144.184 cv
34.34 144.848 34.371 145.41 34.441 145.871 cv
34.508 146.34 34.617 146.719 34.77 147.008 cv
34.914 147.305 35.105 147.516 35.336 147.645 cv
35.566 147.781 35.848 147.848 36.18 147.844 cv
36.434 147.848 36.656 147.809 36.852 147.723 cv
37.043 147.645 37.211 147.523 37.352 147.367 cv
37.492 147.215 37.605 147.031 37.699 146.816 cv
37.785 146.602 37.859 146.363 37.918 146.102 cv
37.969 145.844 38.008 145.562 38.031 145.258 cv
38.051 144.953 38.059 144.637 38.063 144.305 cv
cp
f
25.539 75.531 mo
39.73 75.531 li
39.73 92.621 li
25.539 92.621 li
cp
0 0 0 0 cmyk
ef
31.824 86.336 mo
31.82 86.746 31.75 87.113 31.609 87.437 cv
31.465 87.766 31.262 88.047 31 88.277 cv
30.734 88.512 30.406 88.687 30.02 88.812 cv
29.629 88.937 29.191 89 28.707 89 cv
28.402 89 28.125 88.973 27.871 88.926 cv
27.609 88.879 27.379 88.828 27.184 88.758 cv
26.98 88.695 26.816 88.625 26.684 88.555 cv
26.551 88.484 26.465 88.434 26.434 88.398 cv
26.395 88.371 26.371 88.34 26.355 88.305 cv
26.336 88.273 26.316 88.234 26.305 88.187 cv
26.289 88.145 26.281 88.09 26.273 88.02 cv
26.266 87.957 26.262 87.875 26.266 87.773 cv
26.262 87.613 26.277 87.5 26.313 87.434 cv
26.344 87.371 26.391 87.336 26.453 87.336 cv
26.496 87.336 26.578 87.375 26.703 87.445 cv
26.824 87.523 26.984 87.602 27.18 87.684 cv
27.371 87.77 27.598 87.848 27.863 87.918 cv
28.121 87.992 28.414 88.027 28.734 88.027 cv
29.043 88.027 29.313 87.988 29.551 87.91 cv
29.781 87.832 29.98 87.723 30.141 87.582 cv
30.297 87.441 30.414 87.273 30.496 87.078 cv
30.574 86.883 30.613 86.672 30.617 86.445 cv
30.613 86.195 30.563 85.969 30.465 85.766 cv
30.359 85.566 30.211 85.395 30.02 85.246 cv
29.82 85.102 29.582 84.988 29.297 84.91 cv
29.012 84.832 28.688 84.793 28.324 84.793 cv
27.453 84.793 li
27.41 84.793 27.375 84.785 27.34 84.77 cv
27.305 84.754 27.273 84.727 27.25 84.687 cv
27.223 84.652 27.203 84.605 27.188 84.547 cv
27.172 84.488 27.164 84.41 27.164 84.312 cv
27.164 84.227 27.168 84.156 27.184 84.098 cv
27.191 84.043 27.211 83.996 27.242 83.961 cv
27.266 83.926 27.297 83.902 27.328 83.883 cv
27.359 83.871 27.395 83.863 27.438 83.859 cv
28.211 83.859 li
28.512 83.863 28.781 83.824 29.023 83.742 cv
29.258 83.668 29.461 83.555 29.633 83.406 cv
29.797 83.262 29.926 83.086 30.016 82.883 cv
30.105 82.68 30.152 82.453 30.152 82.199 cv
30.152 82.02 30.121 81.844 30.063 81.676 cv
30 81.512 29.91 81.367 29.793 81.242 cv
29.672 81.117 29.52 81.02 29.34 80.949 cv
29.152 80.879 28.941 80.844 28.699 80.844 cv
28.434 80.844 28.188 80.887 27.969 80.965 cv
27.742 81.047 27.547 81.133 27.375 81.223 cv
27.199 81.316 27.055 81.402 26.941 81.48 cv
26.828 81.562 26.746 81.602 26.703 81.598 cv
26.668 81.602 26.641 81.594 26.617 81.582 cv
26.59 81.57 26.57 81.547 26.555 81.512 cv
26.539 81.48 26.527 81.434 26.52 81.367 cv
26.512 81.309 26.508 81.227 26.512 81.125 cv
26.508 81.059 26.508 81 26.516 80.945 cv
26.516 80.895 26.527 80.848 26.543 80.805 cv
26.559 80.77 26.574 80.734 26.594 80.699 cv
26.609 80.672 26.641 80.633 26.684 80.586 cv
26.727 80.543 26.813 80.48 26.949 80.398 cv
27.078 80.316 27.242 80.238 27.438 80.156 cv
27.629 80.078 27.852 80.008 28.109 79.953 cv
28.359 79.898 28.633 79.871 28.93 79.871 cv
29.336 79.871 29.699 79.926 30.012 80.027 cv
30.324 80.137 30.582 80.285 30.793 80.473 cv
30.996 80.668 31.152 80.898 31.258 81.164 cv
31.359 81.434 31.41 81.727 31.414 82.051 cv
31.41 82.332 31.375 82.594 31.305 82.828 cv
31.23 83.07 31.121 83.281 30.98 83.465 cv
30.836 83.652 30.664 83.809 30.461 83.937 cv
30.254 84.07 30.016 84.164 29.746 84.211 cv
29.746 84.223 li
30.051 84.258 30.332 84.332 30.586 84.453 cv
30.84 84.574 31.059 84.727 31.242 84.91 cv
31.422 85.094 31.563 85.309 31.668 85.551 cv
31.77 85.797 31.82 86.059 31.824 86.336 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.934 86.02 mo
38.934 86.496 38.852 86.918 38.691 87.289 cv
38.531 87.66 38.305 87.973 38.016 88.227 cv
37.719 88.48 37.371 88.676 36.969 88.805 cv
36.563 88.937 36.113 89 35.621 89 cv
35.344 89 35.082 88.98 34.84 88.941 cv
34.59 88.902 34.371 88.855 34.184 88.801 cv
33.988 88.746 33.832 88.691 33.707 88.633 cv
33.582 88.582 33.504 88.539 33.473 88.504 cv
33.438 88.473 33.414 88.441 33.402 88.414 cv
33.387 88.387 33.371 88.355 33.363 88.312 cv
33.348 88.277 33.34 88.227 33.34 88.164 cv
33.332 88.105 33.332 88.035 33.332 87.953 cv
33.332 87.879 33.336 87.809 33.344 87.746 cv
33.352 87.684 33.363 87.633 33.383 87.594 cv
33.398 87.555 33.418 87.527 33.445 87.508 cv
33.469 87.492 33.5 87.484 33.531 87.48 cv
33.578 87.484 33.648 87.512 33.742 87.566 cv
33.836 87.625 33.965 87.687 34.129 87.754 cv
34.293 87.82 34.492 87.883 34.734 87.941 cv
34.969 88 35.254 88.027 35.59 88.027 cv
35.891 88.027 36.172 87.992 36.43 87.918 cv
36.684 87.848 36.906 87.734 37.094 87.578 cv
37.277 87.426 37.422 87.23 37.527 86.992 cv
37.633 86.758 37.684 86.469 37.688 86.129 cv
37.684 85.848 37.641 85.598 37.551 85.379 cv
37.461 85.16 37.324 84.98 37.141 84.836 cv
36.953 84.695 36.719 84.59 36.438 84.516 cv
36.152 84.445 35.813 84.406 35.426 84.406 cv
35.141 84.406 34.902 84.422 34.703 84.449 cv
34.5 84.48 34.313 84.496 34.141 84.492 cv
34.012 84.496 33.918 84.465 33.867 84.402 cv
33.809 84.344 33.781 84.23 33.785 84.059 cv
33.785 80.445 li
33.781 80.297 33.816 80.187 33.891 80.109 cv
33.957 80.039 34.059 80 34.195 80 cv
38.125 80 li
38.16 80 38.195 80.012 38.23 80.031 cv
38.262 80.055 38.289 80.086 38.316 80.125 cv
38.336 80.168 38.352 80.219 38.367 80.281 cv
38.375 80.348 38.383 80.426 38.387 80.508 cv
38.383 80.676 38.359 80.801 38.32 80.891 cv
38.273 80.984 38.215 81.031 38.137 81.027 cv
34.965 81.027 li
34.965 83.516 li
35.117 83.496 35.273 83.484 35.438 83.477 cv
35.594 83.473 35.781 83.469 35.996 83.469 cv
36.48 83.469 36.906 83.531 37.273 83.652 cv
37.637 83.773 37.941 83.945 38.191 84.164 cv
38.434 84.391 38.621 84.656 38.746 84.969 cv
38.871 85.285 38.934 85.637 38.934 86.02 cv
cp
f
25.539 15.73 mo
39.73 15.73 li
39.73 32.82 li
25.539 32.82 li
cp
0 0 0 0 cmyk
ef
32.27 26.535 mo
32.266 26.687 32.242 26.809 32.199 26.895 cv
32.152 26.984 32.09 27.027 32.008 27.023 cv
31.008 27.023 li
31.008 28.887 li
31.008 28.926 30.996 28.957 30.98 28.98 cv
30.957 29.008 30.926 29.027 30.883 29.047 cv
30.832 29.062 30.77 29.074 30.699 29.086 cv
30.621 29.094 30.527 29.098 30.41 29.102 cv
30.293 29.098 30.195 29.094 30.125 29.086 cv
30.047 29.074 29.988 29.062 29.945 29.047 cv
29.898 29.027 29.867 29.008 29.852 28.98 cv
29.832 28.957 29.824 28.926 29.828 28.887 cv
29.828 27.023 li
26.199 27.023 li
26.141 27.027 26.098 27.02 26.063 27.004 cv
26.027 26.992 25.992 26.965 25.965 26.926 cv
25.934 26.891 25.914 26.84 25.902 26.77 cv
25.891 26.703 25.887 26.613 25.887 26.5 cv
25.887 26.418 25.887 26.34 25.895 26.27 cv
25.895 26.199 25.906 26.137 25.922 26.082 cv
25.934 26.027 25.949 25.973 25.977 25.918 cv
25.996 25.863 26.023 25.809 26.059 25.746 cv
29.219 20.359 li
29.238 20.324 29.273 20.293 29.32 20.266 cv
29.363 20.238 29.418 20.215 29.492 20.195 cv
29.559 20.18 29.645 20.168 29.75 20.156 cv
29.852 20.152 29.973 20.148 30.113 20.145 cv
30.262 20.148 30.398 20.152 30.516 20.164 cv
30.629 20.176 30.719 20.191 30.793 20.207 cv
30.859 20.227 30.914 20.25 30.953 20.281 cv
30.988 20.312 31.008 20.348 31.008 20.387 cv
31.008 26.051 li
32.008 26.051 li
32.082 26.055 32.145 26.094 32.195 26.172 cv
32.242 26.254 32.266 26.375 32.27 26.535 cv
cp
29.828 21.184 mo
29.816 21.184 li
26.965 26.051 li
29.828 26.051 li
cp
.629236 .549432 .540154 .282963 cmyk
f
39.27 24.602 mo
39.266 25.285 39.215 25.906 39.109 26.469 cv
39 27.031 38.82 27.516 38.574 27.918 cv
38.32 28.324 37.992 28.637 37.594 28.855 cv
37.188 29.078 36.695 29.187 36.109 29.187 cv
35.551 29.187 35.078 29.09 34.699 28.891 cv
34.316 28.695 34.012 28.402 33.777 28.016 cv
33.543 27.629 33.375 27.156 33.281 26.59 cv
33.18 26.027 33.133 25.379 33.133 24.645 cv
33.133 23.973 33.188 23.352 33.297 22.785 cv
33.406 22.223 33.582 21.738 33.832 21.332 cv
34.074 20.93 34.398 20.617 34.805 20.391 cv
35.203 20.172 35.699 20.059 36.289 20.059 cv
36.848 20.059 37.32 20.16 37.703 20.355 cv
38.086 20.559 38.391 20.852 38.625 21.234 cv
38.855 21.625 39.023 22.098 39.121 22.66 cv
39.219 23.223 39.266 23.871 39.27 24.602 cv
cp
38.063 24.684 mo
38.059 24.242 38.043 23.844 38.016 23.492 cv
37.98 23.141 37.934 22.832 37.875 22.562 cv
37.809 22.293 37.73 22.062 37.633 21.867 cv
37.535 21.676 37.418 21.516 37.281 21.387 cv
37.141 21.262 36.98 21.168 36.809 21.109 cv
36.629 21.055 36.434 21.027 36.219 21.023 cv
35.828 21.027 35.512 21.117 35.273 21.301 cv
35.027 21.484 34.836 21.738 34.699 22.055 cv
34.559 22.375 34.465 22.746 34.414 23.176 cv
34.363 23.605 34.34 24.07 34.34 24.562 cv
34.34 25.227 34.371 25.789 34.441 26.25 cv
34.508 26.719 34.617 27.098 34.77 27.387 cv
34.914 27.684 35.105 27.895 35.336 28.023 cv
35.566 28.16 35.848 28.227 36.18 28.223 cv
36.434 28.227 36.656 28.187 36.852 28.102 cv
37.043 28.023 37.211 27.902 37.352 27.746 cv
37.492 27.594 37.605 27.41 37.699 27.195 cv
37.785 26.98 37.859 26.742 37.918 26.48 cv
37.969 26.223 38.008 25.941 38.031 25.637 cv
38.051 25.332 38.059 25.016 38.063 24.684 cv
cp
f
55.535 525.305 mo
55.531 525.395 55.523 525.465 55.512 525.523 cv
55.496 525.586 55.477 525.637 55.457 525.668 cv
55.434 525.707 55.41 525.73 55.379 525.746 cv
55.348 525.762 55.316 525.77 55.289 525.77 cv
50.652 525.77 li
50.617 525.77 50.59 525.762 50.563 525.746 cv
50.535 525.73 50.508 525.707 50.484 525.668 cv
50.457 525.637 50.438 525.586 50.426 525.523 cv
50.41 525.465 50.402 525.395 50.406 525.305 cv
50.402 525.227 50.41 525.152 50.426 525.09 cv
50.438 525.031 50.453 524.984 50.477 524.945 cv
50.492 524.91 50.52 524.879 50.551 524.855 cv
50.582 524.836 50.613 524.828 50.652 524.824 cv
52.504 524.824 li
52.504 518.078 li
50.789 519.098 li
50.699 519.148 50.629 519.176 50.582 519.184 cv
50.527 519.191 50.484 519.184 50.453 519.152 cv
50.418 519.125 50.398 519.074 50.387 519.004 cv
50.375 518.937 50.367 518.852 50.371 518.742 cv
50.367 518.668 50.371 518.602 50.383 518.543 cv
50.387 518.492 50.398 518.445 50.414 518.406 cv
50.426 518.371 50.445 518.34 50.469 518.312 cv
50.492 518.285 50.523 518.258 50.57 518.23 cv
52.613 516.918 li
52.629 516.906 52.648 516.895 52.68 516.887 cv
52.703 516.879 52.738 516.871 52.785 516.859 cv
52.824 516.852 52.875 516.844 52.93 516.84 cv
52.984 516.84 53.051 516.84 53.137 516.836 cv
53.242 516.84 53.336 516.844 53.41 516.852 cv
53.48 516.859 53.535 516.875 53.582 516.891 cv
53.621 516.91 53.648 516.93 53.664 516.953 cv
53.672 516.98 53.68 517.004 53.684 517.027 cv
53.684 524.824 li
55.289 524.824 li
55.324 524.828 55.359 524.836 55.391 524.855 cv
55.422 524.879 55.445 524.91 55.469 524.945 cv
55.484 524.984 55.5 525.031 55.516 525.09 cv
55.523 525.152 55.531 525.227 55.535 525.305 cv
cp
f
135.406 525.262 mo
135.402 525.348 135.398 525.422 135.387 525.484 cv
135.375 525.551 135.359 525.605 135.34 525.645 cv
135.316 525.691 135.289 525.723 135.258 525.738 cv
135.223 525.762 135.184 525.77 135.145 525.77 cv
130.242 525.77 li
130.18 525.77 130.121 525.762 130.074 525.746 cv
130.023 525.73 129.984 525.707 129.949 525.668 cv
129.914 525.637 129.887 525.582 129.875 525.512 cv
129.855 525.441 129.848 525.355 129.852 525.254 cv
129.848 525.164 129.852 525.086 129.859 525.016 cv
129.863 524.949 129.879 524.891 129.906 524.836 cv
129.93 524.785 129.961 524.73 129.996 524.676 cv
130.031 524.625 130.074 524.57 130.133 524.508 cv
131.906 522.684 li
132.316 522.266 132.645 521.891 132.895 521.555 cv
133.141 521.227 133.332 520.922 133.465 520.645 cv
133.598 520.371 133.684 520.121 133.73 519.895 cv
133.77 519.672 133.793 519.461 133.793 519.266 cv
133.793 519.07 133.758 518.887 133.691 518.707 cv
133.625 518.535 133.531 518.379 133.406 518.242 cv
133.281 518.113 133.125 518.008 132.938 517.926 cv
132.75 517.852 132.531 517.812 132.285 517.809 cv
131.996 517.812 131.738 517.852 131.512 517.926 cv
131.281 518.008 131.082 518.094 130.91 518.18 cv
130.738 518.273 130.594 518.355 130.477 518.434 cv
130.359 518.512 130.273 518.551 130.223 518.551 cv
130.188 518.551 130.156 518.543 130.133 518.523 cv
130.102 518.508 130.082 518.477 130.066 518.434 cv
130.051 518.395 130.035 518.34 130.027 518.27 cv
130.016 518.203 130.012 518.121 130.016 518.023 cv
130.012 517.957 130.016 517.898 130.023 517.848 cv
130.027 517.797 130.035 517.754 130.047 517.715 cv
130.055 517.68 130.07 517.645 130.09 517.613 cv
130.109 517.582 130.145 517.543 130.203 517.492 cv
130.254 517.445 130.348 517.379 130.484 517.297 cv
130.617 517.215 130.789 517.137 130.992 517.055 cv
131.195 516.977 131.418 516.906 131.664 516.852 cv
131.906 516.797 132.164 516.77 132.438 516.77 cv
132.863 516.77 133.238 516.832 133.563 516.953 cv
133.883 517.074 134.148 517.238 134.363 517.449 cv
134.574 517.66 134.734 517.906 134.84 518.18 cv
134.945 518.461 135 518.758 135 519.07 cv
135 519.359 134.973 519.641 134.922 519.918 cv
134.871 520.203 134.766 520.508 134.605 520.832 cv
134.441 521.16 134.207 521.523 133.902 521.922 cv
133.594 522.324 133.188 522.785 132.684 523.301 cv
131.277 524.77 li
135.137 524.77 li
135.168 524.773 135.203 524.785 135.242 524.801 cv
135.273 524.824 135.305 524.855 135.332 524.895 cv
135.355 524.937 135.375 524.988 135.387 525.047 cv
135.398 525.113 135.402 525.184 135.406 525.262 cv
cp
f
215.652 523.246 mo
215.648 523.398 215.625 523.52 215.582 523.605 cv
215.535 523.695 215.473 523.738 215.391 523.734 cv
214.391 523.734 li
214.391 525.598 li
214.391 525.637 214.379 525.668 214.363 525.691 cv
214.34 525.719 214.309 525.738 214.266 525.758 cv
214.215 525.773 214.152 525.785 214.082 525.797 cv
214.004 525.805 213.91 525.809 213.793 525.812 cv
213.676 525.809 213.578 525.805 213.508 525.797 cv
213.43 525.785 213.371 525.773 213.328 525.758 cv
213.281 525.738 213.25 525.719 213.234 525.691 cv
213.215 525.668 213.207 525.637 213.211 525.598 cv
213.211 523.734 li
209.582 523.734 li
209.523 523.738 209.48 523.73 209.445 523.715 cv
209.41 523.703 209.375 523.676 209.348 523.637 cv
209.316 523.602 209.297 523.551 209.285 523.48 cv
209.273 523.414 209.27 523.324 209.27 523.211 cv
209.27 523.129 209.27 523.051 209.277 522.98 cv
209.277 522.91 209.289 522.848 209.305 522.793 cv
209.316 522.738 209.332 522.684 209.359 522.629 cv
209.379 522.574 209.406 522.52 209.441 522.457 cv
212.602 517.07 li
212.621 517.035 212.656 517.004 212.703 516.977 cv
212.746 516.949 212.801 516.926 212.875 516.906 cv
212.941 516.891 213.027 516.879 213.133 516.867 cv
213.234 516.863 213.355 516.859 213.496 516.855 cv
213.645 516.859 213.781 516.863 213.898 516.875 cv
214.012 516.887 214.102 516.902 214.176 516.918 cv
214.242 516.937 214.297 516.961 214.336 516.992 cv
214.371 517.023 214.391 517.059 214.391 517.098 cv
214.391 522.762 li
215.391 522.762 li
215.465 522.766 215.527 522.805 215.578 522.883 cv
215.625 522.965 215.648 523.086 215.652 523.246 cv
cp
213.211 517.895 mo
213.199 517.895 li
210.348 522.762 li
213.211 522.762 li
cp
f
295.383 522.898 mo
295.383 523.289 295.32 523.668 295.203 524.027 cv
295.078 524.395 294.895 524.711 294.652 524.984 cv
294.402 525.262 294.09 525.484 293.715 525.648 cv
293.332 525.816 292.887 525.898 292.371 525.898 cv
292 525.898 291.672 525.855 291.391 525.762 cv
291.105 525.676 290.859 525.543 290.648 525.371 cv
290.438 525.203 290.262 524.996 290.125 524.75 cv
289.984 524.504 289.871 524.223 289.789 523.906 cv
289.703 523.594 289.645 523.25 289.609 522.871 cv
289.57 522.5 289.551 522.098 289.555 521.664 cv
289.551 521.285 289.57 520.902 289.613 520.512 cv
289.652 520.129 289.727 519.754 289.832 519.387 cv
289.938 519.027 290.082 518.687 290.262 518.371 cv
290.441 518.055 290.668 517.777 290.941 517.543 cv
291.215 517.309 291.539 517.121 291.918 516.98 cv
292.297 516.844 292.738 516.777 293.242 516.773 cv
293.41 516.777 293.582 516.785 293.754 516.805 cv
293.926 516.828 294.086 516.859 294.234 516.891 cv
294.383 516.93 294.504 516.965 294.605 517.004 cv
294.703 517.043 294.77 517.078 294.805 517.102 cv
294.832 517.129 294.855 517.156 294.875 517.184 cv
294.891 517.215 294.906 517.246 294.914 517.281 cv
294.922 517.316 294.926 517.355 294.934 517.398 cv
294.934 517.441 294.938 517.496 294.941 517.559 cv
294.938 517.645 294.938 517.715 294.938 517.77 cv
294.934 517.832 294.922 517.879 294.91 517.914 cv
294.891 517.953 294.871 517.98 294.848 517.996 cv
294.82 518.016 294.789 518.023 294.75 518.023 cv
294.699 518.023 294.629 518.008 294.543 517.977 cv
294.453 517.945 294.348 517.91 294.227 517.867 cv
294.102 517.832 293.953 517.797 293.777 517.762 cv
293.602 517.734 293.398 517.719 293.168 517.715 cv
292.738 517.719 292.371 517.805 292.066 517.977 cv
291.762 518.148 291.512 518.383 291.316 518.676 cv
291.121 518.969 290.977 519.309 290.887 519.691 cv
290.789 520.082 290.734 520.484 290.727 520.902 cv
290.844 520.836 290.98 520.77 291.129 520.699 cv
291.277 520.633 291.438 520.57 291.613 520.512 cv
291.789 520.461 291.977 520.414 292.172 520.379 cv
292.367 520.348 292.578 520.332 292.805 520.328 cv
293.281 520.332 293.684 520.398 294.016 520.523 cv
294.344 520.656 294.609 520.836 294.816 521.066 cv
295.016 521.297 295.16 521.566 295.25 521.879 cv
295.336 522.191 295.383 522.531 295.383 522.898 cv
cp
294.188 523.008 mo
294.188 522.746 294.16 522.504 294.109 522.285 cv
294.055 522.07 293.965 521.887 293.844 521.73 cv
293.719 521.582 293.555 521.465 293.352 521.383 cv
293.141 521.301 292.887 521.258 292.59 521.258 cv
292.418 521.258 292.25 521.273 292.082 521.305 cv
291.91 521.336 291.746 521.379 291.59 521.426 cv
291.43 521.48 291.281 521.543 291.141 521.613 cv
290.996 521.687 290.863 521.762 290.746 521.84 cv
290.742 522.434 290.781 522.93 290.859 523.324 cv
290.934 523.723 291.043 524.039 291.188 524.277 cv
291.332 524.52 291.512 524.691 291.727 524.793 cv
291.941 524.898 292.191 524.949 292.48 524.945 cv
292.77 524.949 293.023 524.895 293.238 524.781 cv
293.453 524.676 293.629 524.527 293.773 524.34 cv
293.914 524.156 294.02 523.949 294.086 523.719 cv
294.152 523.488 294.188 523.254 294.188 523.008 cv
cp
f
375.23 523.492 mo
375.23 523.879 375.16 524.223 375.023 524.52 cv
374.887 524.824 374.691 525.074 374.434 525.277 cv
374.176 525.484 373.855 525.641 373.477 525.742 cv
373.094 525.848 372.66 525.898 372.176 525.898 cv
371.715 525.898 371.305 525.852 370.945 525.758 cv
370.582 525.664 370.277 525.523 370.027 525.332 cv
369.777 525.148 369.586 524.918 369.453 524.641 cv
369.32 524.367 369.254 524.055 369.254 523.699 cv
369.254 523.426 369.297 523.168 369.391 522.934 cv
369.477 522.699 369.609 522.484 369.785 522.289 cv
369.953 522.094 370.164 521.91 370.418 521.734 cv
370.668 521.566 370.953 521.402 371.27 521.246 cv
370.996 521.105 370.754 520.957 370.543 520.797 cv
370.332 520.641 370.152 520.469 370.008 520.281 cv
369.859 520.098 369.75 519.902 369.676 519.691 cv
369.598 519.484 369.559 519.254 369.563 519.004 cv
369.559 518.695 369.613 518.402 369.73 518.129 cv
369.84 517.859 370.012 517.625 370.238 517.422 cv
370.465 517.223 370.75 517.062 371.102 516.945 cv
371.445 516.828 371.855 516.77 372.324 516.77 cv
372.77 516.77 373.156 516.824 373.484 516.93 cv
373.813 517.039 374.082 517.184 374.293 517.367 cv
374.504 517.555 374.66 517.773 374.766 518.023 cv
374.863 518.273 374.914 518.543 374.918 518.832 cv
374.914 519.066 374.875 519.293 374.805 519.504 cv
374.727 519.723 374.617 519.926 374.469 520.113 cv
374.32 520.309 374.141 520.488 373.93 520.652 cv
373.719 520.824 373.477 520.98 373.203 521.121 cv
373.523 521.285 373.809 521.449 374.066 521.617 cv
374.316 521.785 374.531 521.965 374.707 522.16 cv
374.875 522.355 375.004 522.562 375.098 522.777 cv
375.184 522.996 375.23 523.234 375.23 523.492 cv
cp
373.75 518.941 mo
373.746 518.754 373.715 518.578 373.648 518.422 cv
373.582 518.266 373.484 518.133 373.359 518.023 cv
373.23 517.914 373.07 517.832 372.883 517.773 cv
372.688 517.719 372.473 517.691 372.234 517.687 cv
371.738 517.691 371.363 517.801 371.113 518.023 cv
370.855 518.25 370.73 518.559 370.734 518.941 cv
370.73 519.121 370.762 519.285 370.824 519.437 cv
370.887 519.594 370.98 519.738 371.113 519.875 cv
371.238 520.012 371.402 520.145 371.605 520.273 cv
371.801 520.406 372.039 520.543 372.316 520.684 cv
372.777 520.449 373.133 520.187 373.379 519.895 cv
373.625 519.609 373.746 519.293 373.75 518.941 cv
cp
374.039 523.617 mo
374.035 523.41 373.996 523.219 373.922 523.047 cv
373.84 522.879 373.723 522.719 373.566 522.566 cv
373.41 522.418 373.211 522.273 372.977 522.133 cv
372.738 521.996 372.469 521.852 372.16 521.699 cv
371.871 521.844 371.617 521.984 371.402 522.125 cv
371.184 522.266 371.004 522.414 370.867 522.562 cv
370.727 522.719 370.621 522.875 370.551 523.039 cv
370.477 523.207 370.441 523.391 370.445 523.59 cv
370.441 524.035 370.594 524.379 370.902 524.617 cv
371.203 524.863 371.656 524.984 372.262 524.98 cv
372.844 524.984 373.289 524.863 373.59 524.613 cv
373.887 524.371 374.035 524.039 374.039 523.617 cv
cp
f
451.367 525.305 mo
451.363 525.395 451.355 525.465 451.344 525.523 cv
451.328 525.586 451.309 525.637 451.289 525.668 cv
451.266 525.707 451.242 525.73 451.211 525.746 cv
451.18 525.762 451.148 525.77 451.121 525.77 cv
446.484 525.77 li
446.449 525.77 446.422 525.762 446.395 525.746 cv
446.367 525.73 446.34 525.707 446.316 525.668 cv
446.289 525.637 446.27 525.586 446.258 525.523 cv
446.242 525.465 446.234 525.395 446.238 525.305 cv
446.234 525.227 446.242 525.152 446.258 525.09 cv
446.27 525.031 446.285 524.984 446.309 524.945 cv
446.324 524.91 446.352 524.879 446.383 524.855 cv
446.414 524.836 446.445 524.828 446.484 524.824 cv
448.336 524.824 li
448.336 518.078 li
446.621 519.098 li
446.531 519.148 446.461 519.176 446.414 519.184 cv
446.359 519.191 446.316 519.184 446.285 519.152 cv
446.25 519.125 446.23 519.074 446.219 519.004 cv
446.207 518.937 446.199 518.852 446.203 518.742 cv
446.199 518.668 446.203 518.602 446.215 518.543 cv
446.219 518.492 446.23 518.445 446.246 518.406 cv
446.258 518.371 446.277 518.34 446.301 518.312 cv
446.324 518.285 446.355 518.258 446.402 518.23 cv
448.445 516.918 li
448.461 516.906 448.48 516.895 448.512 516.887 cv
448.535 516.879 448.57 516.871 448.617 516.859 cv
448.656 516.852 448.707 516.844 448.762 516.84 cv
448.816 516.84 448.883 516.84 448.969 516.836 cv
449.074 516.84 449.168 516.844 449.242 516.852 cv
449.313 516.859 449.367 516.875 449.414 516.891 cv
449.453 516.91 449.48 516.93 449.496 516.953 cv
449.504 516.98 449.512 517.004 449.516 517.027 cv
449.516 524.824 li
451.121 524.824 li
451.156 524.828 451.191 524.836 451.223 524.855 cv
451.254 524.879 451.277 524.91 451.301 524.945 cv
451.316 524.984 451.332 525.031 451.348 525.09 cv
451.355 525.152 451.363 525.227 451.367 525.305 cv
cp
f
458.719 521.312 mo
458.715 521.996 458.664 522.617 458.559 523.18 cv
458.449 523.742 458.27 524.227 458.023 524.629 cv
457.77 525.035 457.441 525.348 457.043 525.566 cv
456.637 525.789 456.145 525.898 455.559 525.898 cv
455 525.898 454.527 525.801 454.148 525.602 cv
453.766 525.406 453.461 525.113 453.227 524.727 cv
452.992 524.34 452.824 523.867 452.73 523.301 cv
452.629 522.738 452.582 522.09 452.582 521.355 cv
452.582 520.684 452.637 520.062 452.746 519.496 cv
452.855 518.934 453.031 518.449 453.281 518.043 cv
453.523 517.641 453.848 517.328 454.254 517.102 cv
454.652 516.883 455.148 516.77 455.738 516.77 cv
456.297 516.77 456.77 516.871 457.152 517.066 cv
457.535 517.27 457.84 517.562 458.074 517.945 cv
458.305 518.336 458.473 518.809 458.57 519.371 cv
458.668 519.934 458.715 520.582 458.719 521.312 cv
cp
457.512 521.395 mo
457.508 520.953 457.492 520.555 457.465 520.203 cv
457.43 519.852 457.383 519.543 457.324 519.273 cv
457.258 519.004 457.18 518.773 457.082 518.578 cv
456.984 518.387 456.867 518.227 456.73 518.098 cv
456.59 517.973 456.43 517.879 456.258 517.82 cv
456.078 517.766 455.883 517.738 455.668 517.734 cv
455.277 517.738 454.961 517.828 454.723 518.012 cv
454.477 518.195 454.285 518.449 454.148 518.766 cv
454.008 519.086 453.914 519.457 453.863 519.887 cv
453.813 520.316 453.789 520.781 453.789 521.273 cv
453.789 521.937 453.82 522.5 453.891 522.961 cv
453.957 523.43 454.066 523.809 454.219 524.098 cv
454.363 524.395 454.555 524.605 454.785 524.734 cv
455.016 524.871 455.297 524.937 455.629 524.934 cv
455.883 524.937 456.105 524.898 456.301 524.812 cv
456.492 524.734 456.66 524.613 456.801 524.457 cv
456.941 524.305 457.055 524.121 457.148 523.906 cv
457.234 523.691 457.309 523.453 457.367 523.191 cv
457.418 522.934 457.457 522.652 457.48 522.348 cv
457.5 522.043 457.508 521.727 457.512 521.395 cv
cp
f
531.234 525.305 mo
531.23 525.395 531.223 525.465 531.211 525.523 cv
531.195 525.586 531.176 525.637 531.156 525.668 cv
531.133 525.707 531.109 525.73 531.078 525.746 cv
531.047 525.762 531.016 525.77 530.988 525.77 cv
526.352 525.77 li
526.316 525.77 526.289 525.762 526.262 525.746 cv
526.234 525.73 526.207 525.707 526.184 525.668 cv
526.156 525.637 526.137 525.586 526.125 525.523 cv
526.109 525.465 526.102 525.395 526.105 525.305 cv
526.102 525.227 526.109 525.152 526.125 525.09 cv
526.137 525.031 526.152 524.984 526.176 524.945 cv
526.191 524.91 526.219 524.879 526.25 524.855 cv
526.281 524.836 526.313 524.828 526.352 524.824 cv
528.203 524.824 li
528.203 518.078 li
526.488 519.098 li
526.398 519.148 526.328 519.176 526.281 519.184 cv
526.227 519.191 526.184 519.184 526.152 519.152 cv
526.117 519.125 526.098 519.074 526.086 519.004 cv
526.074 518.937 526.066 518.852 526.07 518.742 cv
526.066 518.668 526.07 518.602 526.082 518.543 cv
526.086 518.492 526.098 518.445 526.113 518.406 cv
526.125 518.371 526.145 518.34 526.168 518.312 cv
526.191 518.285 526.223 518.258 526.27 518.23 cv
528.313 516.918 li
528.328 516.906 528.348 516.895 528.379 516.887 cv
528.402 516.879 528.438 516.871 528.484 516.859 cv
528.523 516.852 528.574 516.844 528.629 516.84 cv
528.684 516.84 528.75 516.84 528.836 516.836 cv
528.941 516.84 529.035 516.844 529.109 516.852 cv
529.18 516.859 529.234 516.875 529.281 516.891 cv
529.32 516.91 529.348 516.93 529.363 516.953 cv
529.371 516.98 529.379 517.004 529.383 517.027 cv
529.383 524.824 li
530.988 524.824 li
531.023 524.828 531.059 524.836 531.09 524.855 cv
531.121 524.879 531.145 524.91 531.168 524.945 cv
531.184 524.984 531.199 525.031 531.215 525.09 cv
531.223 525.152 531.23 525.227 531.234 525.305 cv
cp
f
538.297 525.262 mo
538.293 525.348 538.289 525.422 538.277 525.484 cv
538.266 525.551 538.25 525.605 538.23 525.645 cv
538.207 525.691 538.18 525.723 538.148 525.738 cv
538.113 525.762 538.074 525.77 538.035 525.77 cv
533.133 525.77 li
533.07 525.77 533.012 525.762 532.965 525.746 cv
532.914 525.73 532.875 525.707 532.84 525.668 cv
532.805 525.637 532.777 525.582 532.766 525.512 cv
532.746 525.441 532.738 525.355 532.742 525.254 cv
532.738 525.164 532.742 525.086 532.75 525.016 cv
532.754 524.949 532.77 524.891 532.797 524.836 cv
532.82 524.785 532.852 524.73 532.887 524.676 cv
532.922 524.625 532.965 524.57 533.023 524.508 cv
534.797 522.684 li
535.207 522.266 535.535 521.891 535.785 521.555 cv
536.031 521.227 536.223 520.922 536.355 520.645 cv
536.488 520.371 536.574 520.121 536.621 519.895 cv
536.66 519.672 536.684 519.461 536.684 519.266 cv
536.684 519.07 536.648 518.887 536.582 518.707 cv
536.516 518.535 536.422 518.379 536.297 518.242 cv
536.172 518.113 536.016 518.008 535.828 517.926 cv
535.641 517.852 535.422 517.812 535.176 517.809 cv
534.887 517.812 534.629 517.852 534.402 517.926 cv
534.172 518.008 533.973 518.094 533.801 518.18 cv
533.629 518.273 533.484 518.355 533.367 518.434 cv
533.25 518.512 533.164 518.551 533.113 518.551 cv
533.078 518.551 533.047 518.543 533.023 518.523 cv
532.992 518.508 532.973 518.477 532.957 518.434 cv
532.941 518.395 532.926 518.34 532.918 518.27 cv
532.906 518.203 532.902 518.121 532.906 518.023 cv
532.902 517.957 532.906 517.898 532.914 517.848 cv
532.918 517.797 532.926 517.754 532.938 517.715 cv
532.945 517.68 532.961 517.645 532.98 517.613 cv
533 517.582 533.035 517.543 533.094 517.492 cv
533.145 517.445 533.238 517.379 533.375 517.297 cv
533.508 517.215 533.68 517.137 533.883 517.055 cv
534.086 516.977 534.309 516.906 534.555 516.852 cv
534.797 516.797 535.055 516.77 535.328 516.77 cv
535.754 516.77 536.129 516.832 536.453 516.953 cv
536.773 517.074 537.039 517.238 537.254 517.449 cv
537.465 517.66 537.625 517.906 537.73 518.18 cv
537.836 518.461 537.891 518.758 537.891 519.07 cv
537.891 519.359 537.863 519.641 537.813 519.918 cv
537.762 520.203 537.656 520.508 537.496 520.832 cv
537.332 521.16 537.098 521.523 536.793 521.922 cv
536.484 522.324 536.078 522.785 535.574 523.301 cv
534.168 524.77 li
538.027 524.77 li
538.059 524.773 538.094 524.785 538.133 524.801 cv
538.164 524.824 538.195 524.855 538.223 524.895 cv
538.246 524.937 538.266 524.988 538.277 525.047 cv
538.289 525.113 538.293 525.184 538.297 525.262 cv
cp
f
611.105 525.305 mo
611.102 525.395 611.094 525.465 611.082 525.523 cv
611.066 525.586 611.047 525.637 611.027 525.668 cv
611.004 525.707 610.98 525.73 610.949 525.746 cv
610.918 525.762 610.887 525.77 610.859 525.77 cv
606.223 525.77 li
606.188 525.77 606.16 525.762 606.133 525.746 cv
606.105 525.73 606.078 525.707 606.055 525.668 cv
606.027 525.637 606.008 525.586 605.996 525.523 cv
605.98 525.465 605.973 525.395 605.977 525.305 cv
605.973 525.227 605.98 525.152 605.996 525.09 cv
606.008 525.031 606.023 524.984 606.047 524.945 cv
606.063 524.91 606.09 524.879 606.121 524.855 cv
606.152 524.836 606.184 524.828 606.223 524.824 cv
608.074 524.824 li
608.074 518.078 li
606.359 519.098 li
606.27 519.148 606.199 519.176 606.152 519.184 cv
606.098 519.191 606.055 519.184 606.023 519.152 cv
605.988 519.125 605.969 519.074 605.957 519.004 cv
605.945 518.937 605.938 518.852 605.941 518.742 cv
605.938 518.668 605.941 518.602 605.953 518.543 cv
605.957 518.492 605.969 518.445 605.984 518.406 cv
605.996 518.371 606.016 518.34 606.039 518.312 cv
606.063 518.285 606.094 518.258 606.141 518.23 cv
608.184 516.918 li
608.199 516.906 608.219 516.895 608.25 516.887 cv
608.273 516.879 608.309 516.871 608.355 516.859 cv
608.395 516.852 608.445 516.844 608.5 516.84 cv
608.555 516.84 608.621 516.84 608.707 516.836 cv
608.813 516.84 608.906 516.844 608.98 516.852 cv
609.051 516.859 609.105 516.875 609.152 516.891 cv
609.191 516.91 609.219 516.93 609.234 516.953 cv
609.242 516.98 609.25 517.004 609.254 517.027 cv
609.254 524.824 li
610.859 524.824 li
610.895 524.828 610.93 524.836 610.961 524.855 cv
610.992 524.879 611.016 524.91 611.039 524.945 cv
611.055 524.984 611.07 525.031 611.086 525.09 cv
611.094 525.152 611.102 525.227 611.105 525.305 cv
cp
f
618.539 523.246 mo
618.535 523.398 618.512 523.52 618.469 523.605 cv
618.422 523.695 618.359 523.738 618.277 523.734 cv
617.277 523.734 li
617.277 525.598 li
617.277 525.637 617.266 525.668 617.25 525.691 cv
617.227 525.719 617.195 525.738 617.152 525.758 cv
617.102 525.773 617.039 525.785 616.969 525.797 cv
616.891 525.805 616.797 525.809 616.68 525.812 cv
616.563 525.809 616.465 525.805 616.395 525.797 cv
616.316 525.785 616.258 525.773 616.215 525.758 cv
616.168 525.738 616.137 525.719 616.121 525.691 cv
616.102 525.668 616.094 525.637 616.098 525.598 cv
616.098 523.734 li
612.469 523.734 li
612.41 523.738 612.367 523.73 612.332 523.715 cv
612.297 523.703 612.262 523.676 612.234 523.637 cv
612.203 523.602 612.184 523.551 612.172 523.48 cv
612.16 523.414 612.156 523.324 612.156 523.211 cv
612.156 523.129 612.156 523.051 612.164 522.98 cv
612.164 522.91 612.176 522.848 612.191 522.793 cv
612.203 522.738 612.219 522.684 612.246 522.629 cv
612.266 522.574 612.293 522.52 612.328 522.457 cv
615.488 517.07 li
615.508 517.035 615.543 517.004 615.59 516.977 cv
615.633 516.949 615.688 516.926 615.762 516.906 cv
615.828 516.891 615.914 516.879 616.02 516.867 cv
616.121 516.863 616.242 516.859 616.383 516.855 cv
616.531 516.859 616.668 516.863 616.785 516.875 cv
616.898 516.887 616.988 516.902 617.063 516.918 cv
617.129 516.937 617.184 516.961 617.223 516.992 cv
617.258 517.023 617.277 517.059 617.277 517.098 cv
617.277 522.762 li
618.277 522.762 li
618.352 522.766 618.414 522.805 618.465 522.883 cv
618.512 522.965 618.535 523.086 618.539 523.246 cv
cp
616.098 517.895 mo
616.086 517.895 li
613.234 522.762 li
616.098 522.762 li
cp
f
691.004 525.305 mo
691 525.395 690.992 525.465 690.98 525.523 cv
690.965 525.586 690.945 525.637 690.926 525.668 cv
690.902 525.707 690.879 525.73 690.848 525.746 cv
690.816 525.762 690.785 525.77 690.758 525.77 cv
686.121 525.77 li
686.086 525.77 686.059 525.762 686.031 525.746 cv
686.004 525.73 685.977 525.707 685.953 525.668 cv
685.926 525.637 685.906 525.586 685.895 525.523 cv
685.879 525.465 685.871 525.395 685.875 525.305 cv
685.871 525.227 685.879 525.152 685.895 525.09 cv
685.906 525.031 685.922 524.984 685.945 524.945 cv
685.961 524.91 685.988 524.879 686.02 524.855 cv
686.051 524.836 686.082 524.828 686.121 524.824 cv
687.973 524.824 li
687.973 518.078 li
686.258 519.098 li
686.168 519.148 686.098 519.176 686.051 519.184 cv
685.996 519.191 685.953 519.184 685.922 519.152 cv
685.887 519.125 685.867 519.074 685.855 519.004 cv
685.844 518.937 685.836 518.852 685.84 518.742 cv
685.836 518.668 685.84 518.602 685.852 518.543 cv
685.855 518.492 685.867 518.445 685.883 518.406 cv
685.895 518.371 685.914 518.34 685.938 518.312 cv
685.961 518.285 685.992 518.258 686.039 518.23 cv
688.082 516.918 li
688.098 516.906 688.117 516.895 688.148 516.887 cv
688.172 516.879 688.207 516.871 688.254 516.859 cv
688.293 516.852 688.344 516.844 688.398 516.84 cv
688.453 516.84 688.52 516.84 688.605 516.836 cv
688.711 516.84 688.805 516.844 688.879 516.852 cv
688.949 516.859 689.004 516.875 689.051 516.891 cv
689.09 516.91 689.117 516.93 689.133 516.953 cv
689.141 516.98 689.148 517.004 689.152 517.027 cv
689.152 524.824 li
690.758 524.824 li
690.793 524.828 690.828 524.836 690.859 524.855 cv
690.891 524.879 690.914 524.91 690.938 524.945 cv
690.953 524.984 690.969 525.031 690.984 525.09 cv
690.992 525.152 691 525.227 691.004 525.305 cv
cp
f
698.293 522.898 mo
698.293 523.289 698.23 523.668 698.113 524.027 cv
697.988 524.395 697.805 524.711 697.563 524.984 cv
697.313 525.262 697 525.484 696.625 525.648 cv
696.242 525.816 695.797 525.898 695.281 525.898 cv
694.91 525.898 694.582 525.855 694.301 525.762 cv
694.016 525.676 693.77 525.543 693.559 525.371 cv
693.348 525.203 693.172 524.996 693.035 524.75 cv
692.895 524.504 692.781 524.223 692.699 523.906 cv
692.613 523.594 692.555 523.25 692.52 522.871 cv
692.48 522.5 692.461 522.098 692.465 521.664 cv
692.461 521.285 692.48 520.902 692.523 520.512 cv
692.563 520.129 692.637 519.754 692.742 519.387 cv
692.848 519.027 692.992 518.687 693.172 518.371 cv
693.352 518.055 693.578 517.777 693.852 517.543 cv
694.125 517.309 694.449 517.121 694.828 516.98 cv
695.207 516.844 695.648 516.777 696.152 516.773 cv
696.32 516.777 696.492 516.785 696.664 516.805 cv
696.836 516.828 696.996 516.859 697.145 516.891 cv
697.293 516.93 697.414 516.965 697.516 517.004 cv
697.613 517.043 697.68 517.078 697.715 517.102 cv
697.742 517.129 697.766 517.156 697.785 517.184 cv
697.801 517.215 697.816 517.246 697.824 517.281 cv
697.832 517.316 697.836 517.355 697.844 517.398 cv
697.844 517.441 697.848 517.496 697.852 517.559 cv
697.848 517.645 697.848 517.715 697.848 517.77 cv
697.844 517.832 697.832 517.879 697.82 517.914 cv
697.801 517.953 697.781 517.98 697.758 517.996 cv
697.73 518.016 697.699 518.023 697.66 518.023 cv
697.609 518.023 697.539 518.008 697.453 517.977 cv
697.363 517.945 697.258 517.91 697.137 517.867 cv
697.012 517.832 696.863 517.797 696.688 517.762 cv
696.512 517.734 696.309 517.719 696.078 517.715 cv
695.648 517.719 695.281 517.805 694.977 517.977 cv
694.672 518.148 694.422 518.383 694.227 518.676 cv
694.031 518.969 693.887 519.309 693.797 519.691 cv
693.699 520.082 693.645 520.484 693.637 520.902 cv
693.754 520.836 693.891 520.77 694.039 520.699 cv
694.188 520.633 694.348 520.57 694.523 520.512 cv
694.699 520.461 694.887 520.414 695.082 520.379 cv
695.277 520.348 695.488 520.332 695.715 520.328 cv
696.191 520.332 696.594 520.398 696.926 520.523 cv
697.254 520.656 697.52 520.836 697.727 521.066 cv
697.926 521.297 698.07 521.566 698.16 521.879 cv
698.246 522.191 698.293 522.531 698.293 522.898 cv
cp
697.098 523.008 mo
697.098 522.746 697.07 522.504 697.02 522.285 cv
696.965 522.07 696.875 521.887 696.754 521.73 cv
696.629 521.582 696.465 521.465 696.262 521.383 cv
696.051 521.301 695.797 521.258 695.5 521.258 cv
695.328 521.258 695.16 521.273 694.992 521.305 cv
694.82 521.336 694.656 521.379 694.5 521.426 cv
694.34 521.48 694.191 521.543 694.051 521.613 cv
693.906 521.687 693.773 521.762 693.656 521.84 cv
693.652 522.434 693.691 522.93 693.77 523.324 cv
693.844 523.723 693.953 524.039 694.098 524.277 cv
694.242 524.52 694.422 524.691 694.637 524.793 cv
694.852 524.898 695.102 524.949 695.391 524.945 cv
695.68 524.949 695.934 524.895 696.148 524.781 cv
696.363 524.676 696.539 524.527 696.684 524.34 cv
696.824 524.156 696.93 523.949 696.996 523.719 cv
697.063 523.488 697.098 523.254 697.098 523.008 cv
cp
f
7.699 308.129 mo
7.801 308.133 7.887 308.137 7.957 308.145 cv
8.031 308.156 8.09 308.172 8.133 308.195 cv
8.18 308.219 8.211 308.25 8.23 308.281 cv
8.254 308.32 8.266 308.355 8.262 308.395 cv
8.262 311.23 li
17.004 311.23 li
17.047 311.23 17.082 311.242 17.113 311.262 cv
17.145 311.285 17.172 311.32 17.188 311.371 cv
17.207 311.426 17.219 311.496 17.234 311.578 cv
17.246 311.668 17.254 311.773 17.254 311.898 cv
17.254 312.023 17.246 312.133 17.234 312.219 cv
17.219 312.312 17.207 312.383 17.188 312.43 cv
17.172 312.484 17.145 312.52 17.113 312.539 cv
17.082 312.562 17.047 312.574 17.004 312.57 cv
8.262 312.57 li
8.262 315.406 li
8.266 315.453 8.254 315.488 8.23 315.52 cv
8.211 315.555 8.18 315.582 8.133 315.602 cv
8.09 315.625 8.031 315.645 7.957 315.652 cv
7.887 315.668 7.801 315.672 7.699 315.672 cv
7.602 315.672 7.516 315.668 7.438 315.652 cv
7.367 315.645 7.305 315.625 7.254 315.602 cv
7.211 315.582 7.176 315.555 7.152 315.52 cv
7.133 315.488 7.125 315.453 7.121 315.406 cv
7.121 308.395 li
7.125 308.355 7.133 308.32 7.152 308.281 cv
7.176 308.25 7.211 308.219 7.254 308.195 cv
7.305 308.172 7.367 308.156 7.438 308.145 cv
7.516 308.137 7.602 308.133 7.699 308.129 cv
cp
f
17.012 305.539 mo
17.059 305.543 17.094 305.555 17.117 305.57 cv
17.148 305.594 17.172 305.625 17.191 305.672 cv
17.211 305.719 17.223 305.785 17.238 305.863 cv
17.246 305.949 17.254 306.055 17.254 306.184 cv
17.254 306.312 17.246 306.418 17.238 306.496 cv
17.223 306.582 17.211 306.648 17.191 306.695 cv
17.172 306.75 17.148 306.781 17.117 306.797 cv
17.094 306.816 17.059 306.828 17.012 306.824 cv
10 306.824 li
9.965 306.828 9.934 306.816 9.898 306.797 cv
9.871 306.781 9.844 306.75 9.82 306.695 cv
9.801 306.648 9.785 306.582 9.773 306.496 cv
9.766 306.418 9.762 306.312 9.758 306.184 cv
9.762 306.055 9.766 305.949 9.773 305.863 cv
9.785 305.785 9.801 305.719 9.82 305.672 cv
9.844 305.625 9.871 305.594 9.898 305.57 cv
9.934 305.555 9.965 305.543 10 305.539 cv
cp
7.629 305.391 mo
7.934 305.391 8.141 305.449 8.246 305.562 cv
8.359 305.676 8.414 305.887 8.41 306.191 cv
8.414 306.496 8.359 306.703 8.25 306.812 cv
8.145 306.93 7.941 306.984 7.645 306.98 cv
7.344 306.984 7.141 306.926 7.031 306.809 cv
6.926 306.695 6.871 306.484 6.867 306.176 cv
6.871 305.875 6.926 305.672 7.027 305.559 cv
7.137 305.449 7.336 305.391 7.629 305.391 cv
cp
f
17.012 292.684 mo
17.059 292.687 17.094 292.695 17.117 292.715 cv
17.148 292.738 17.172 292.773 17.191 292.816 cv
17.211 292.867 17.223 292.934 17.238 293.012 cv
17.246 293.098 17.254 293.199 17.254 293.324 cv
17.254 293.457 17.246 293.566 17.238 293.645 cv
17.223 293.73 17.211 293.797 17.191 293.844 cv
17.172 293.898 17.148 293.934 17.117 293.949 cv
17.094 293.973 17.059 293.98 17.012 293.98 cv
12.75 293.98 li
12.457 293.98 12.188 294.008 11.941 294.059 cv
11.699 294.113 11.488 294.195 11.309 294.309 cv
11.133 294.422 10.996 294.566 10.902 294.742 cv
10.809 294.922 10.762 295.133 10.762 295.367 cv
10.762 295.664 10.879 295.961 11.105 296.258 cv
11.34 296.562 11.672 296.891 12.109 297.246 cv
17.012 297.246 li
17.059 297.25 17.094 297.262 17.117 297.277 cv
17.148 297.301 17.172 297.332 17.191 297.379 cv
17.211 297.43 17.223 297.496 17.238 297.578 cv
17.246 297.664 17.254 297.77 17.254 297.891 cv
17.254 298.012 17.246 298.113 17.238 298.199 cv
17.223 298.285 17.211 298.355 17.191 298.402 cv
17.172 298.457 17.148 298.488 17.117 298.504 cv
17.094 298.523 17.059 298.535 17.012 298.531 cv
12.75 298.531 li
12.457 298.535 12.188 298.562 11.941 298.617 cv
11.699 298.676 11.488 298.762 11.309 298.875 cv
11.133 298.988 10.996 299.133 10.902 299.305 cv
10.809 299.484 10.762 299.691 10.762 299.926 cv
10.762 300.227 10.879 300.523 11.105 300.824 cv
11.34 301.125 11.672 301.453 12.109 301.805 cv
17.012 301.805 li
17.059 301.809 17.094 301.82 17.117 301.836 cv
17.148 301.859 17.172 301.891 17.191 301.937 cv
17.211 301.984 17.223 302.051 17.238 302.129 cv
17.246 302.215 17.254 302.32 17.254 302.449 cv
17.254 302.578 17.246 302.684 17.238 302.762 cv
17.223 302.848 17.211 302.914 17.191 302.961 cv
17.172 303.016 17.148 303.047 17.117 303.062 cv
17.094 303.082 17.059 303.094 17.012 303.09 cv
10 303.09 li
9.961 303.094 9.926 303.086 9.895 303.066 cv
9.867 303.055 9.844 303.023 9.816 302.973 cv
9.797 302.93 9.781 302.867 9.77 302.793 cv
9.766 302.723 9.762 302.629 9.758 302.504 cv
9.762 302.395 9.766 302.297 9.77 302.219 cv
9.781 302.145 9.797 302.086 9.816 302.043 cv
9.844 302.004 9.867 301.977 9.895 301.957 cv
9.926 301.941 9.961 301.934 10 301.93 cv
10.926 301.93 li
10.484 301.539 10.164 301.156 9.957 300.781 cv
9.754 300.414 9.648 300.035 9.648 299.652 cv
9.648 299.363 9.684 299.105 9.75 298.871 cv
9.82 298.645 9.914 298.437 10.035 298.258 cv
10.156 298.082 10.301 297.934 10.469 297.805 cv
10.641 297.684 10.832 297.578 11.035 297.492 cv
10.785 297.262 10.57 297.039 10.391 296.828 cv
10.219 296.617 10.074 296.414 9.961 296.219 cv
9.855 296.023 9.777 295.836 9.723 295.652 cv
9.676 295.469 9.648 295.281 9.648 295.094 cv
9.648 294.641 9.73 294.262 9.887 293.957 cv
10.051 293.652 10.262 293.406 10.523 293.211 cv
10.789 293.023 11.098 292.887 11.453 292.805 cv
11.809 292.727 12.184 292.687 12.578 292.684 cv
cp
f
13.203 284.355 mo
13.406 284.359 13.547 284.41 13.633 284.508 cv
13.719 284.613 13.762 284.73 13.762 284.855 cv
13.762 289.473 li
14.152 289.477 14.504 289.437 14.816 289.355 cv
15.129 289.281 15.398 289.148 15.617 288.965 cv
15.844 288.785 16.016 288.551 16.133 288.254 cv
16.258 287.965 16.316 287.605 16.313 287.18 cv
16.316 286.848 16.289 286.551 16.23 286.289 cv
16.18 286.027 16.117 285.801 16.047 285.609 cv
15.98 285.422 15.922 285.266 15.863 285.141 cv
15.813 285.02 15.785 284.926 15.781 284.863 cv
15.785 284.828 15.793 284.797 15.809 284.766 cv
15.828 284.738 15.855 284.715 15.891 284.695 cv
15.93 284.684 15.98 284.672 16.043 284.66 cv
16.109 284.656 16.188 284.652 16.281 284.648 cv
16.352 284.652 16.41 284.656 16.457 284.656 cv
16.504 284.664 16.547 284.668 16.586 284.676 cv
16.625 284.684 16.66 284.699 16.691 284.715 cv
16.723 284.738 16.754 284.762 16.781 284.785 cv
16.813 284.816 16.859 284.898 16.922 285.039 cv
16.988 285.18 17.051 285.363 17.113 285.586 cv
17.176 285.812 17.23 286.07 17.281 286.363 cv
17.328 286.656 17.352 286.969 17.355 287.301 cv
17.352 287.879 17.273 288.387 17.113 288.816 cv
16.953 289.254 16.715 289.617 16.398 289.91 cv
16.082 290.211 15.688 290.434 15.207 290.582 cv
14.73 290.73 14.172 290.805 13.535 290.805 cv
12.938 290.805 12.398 290.73 11.914 290.574 cv
11.438 290.422 11.027 290.195 10.691 289.898 cv
10.355 289.605 10.098 289.25 9.918 288.836 cv
9.738 288.422 9.648 287.957 9.648 287.441 cv
9.648 286.891 9.738 286.422 9.914 286.035 cv
10.094 285.648 10.332 285.332 10.629 285.078 cv
10.93 284.832 11.281 284.648 11.68 284.531 cv
12.086 284.418 12.516 284.359 12.969 284.355 cv
cp
12.82 285.648 mo
12.145 285.633 11.613 285.785 11.23 286.102 cv
10.848 286.418 10.656 286.887 10.652 287.504 cv
10.656 287.828 10.715 288.109 10.832 288.348 cv
10.953 288.59 11.113 288.789 11.309 288.949 cv
11.508 289.113 11.738 289.238 12 289.324 cv
12.262 289.414 12.535 289.465 12.82 289.473 cv
cp
f
6.469 276.18 mo
7.516 276.676 8.586 277.043 9.684 277.285 cv
10.785 277.527 11.891 277.648 13 277.648 cv
14.117 277.648 15.227 277.527 16.32 277.277 cv
17.418 277.035 18.488 276.672 19.543 276.195 cv
19.602 276.172 19.656 276.16 19.703 276.152 cv
19.746 276.152 19.781 276.168 19.813 276.203 cv
19.84 276.242 19.859 276.297 19.875 276.371 cv
19.883 276.449 19.891 276.555 19.895 276.68 cv
19.891 276.777 19.887 276.855 19.887 276.922 cv
19.879 276.992 19.871 277.051 19.855 277.098 cv
19.84 277.148 19.82 277.191 19.801 277.219 cv
19.777 277.254 19.754 277.277 19.73 277.289 cv
19.199 277.57 18.664 277.816 18.121 278.027 cv
17.578 278.246 17.027 278.426 16.469 278.566 cv
15.906 278.715 15.34 278.824 14.766 278.895 cv
14.191 278.973 13.609 279.008 13.023 279.004 cv
12.438 279.008 11.859 278.969 11.285 278.883 cv
10.715 278.805 10.148 278.687 9.582 278.539 cv
9.02 278.391 8.465 278.211 7.918 278 cv
7.375 277.789 6.832 277.551 6.297 277.281 cv
6.277 277.277 6.262 277.262 6.242 277.238 cv
6.23 277.215 6.215 277.184 6.195 277.141 cv
6.184 277.102 6.172 277.043 6.16 276.969 cv
6.156 276.898 6.152 276.805 6.148 276.687 cv
6.152 276.57 6.16 276.477 6.172 276.398 cv
6.191 276.328 6.211 276.27 6.234 276.227 cv
6.262 276.187 6.297 276.164 6.336 276.156 cv
6.383 276.152 6.426 276.16 6.469 276.18 cv
cp
f
14.379 268.445 mo
14.852 268.449 15.273 268.535 15.641 268.707 cv
16.016 268.883 16.328 269.125 16.582 269.434 cv
16.84 269.742 17.031 270.105 17.16 270.523 cv
17.289 270.945 17.352 271.395 17.355 271.875 cv
17.352 272.215 17.324 272.531 17.27 272.816 cv
17.211 273.105 17.145 273.359 17.059 273.586 cv
16.98 273.812 16.895 274.004 16.801 274.156 cv
16.715 274.312 16.637 274.418 16.574 274.477 cv
16.512 274.535 16.434 274.578 16.34 274.605 cv
16.246 274.637 16.117 274.652 15.953 274.648 cv
15.84 274.652 15.746 274.648 15.668 274.633 cv
15.594 274.625 15.531 274.609 15.484 274.586 cv
15.438 274.57 15.406 274.543 15.387 274.508 cv
15.371 274.48 15.363 274.445 15.359 274.402 cv
15.363 274.332 15.406 274.23 15.492 274.094 cv
15.582 273.965 15.68 273.793 15.781 273.582 cv
15.891 273.375 15.988 273.125 16.074 272.832 cv
16.168 272.539 16.211 272.199 16.211 271.812 cv
16.211 271.523 16.172 271.258 16.094 271.016 cv
16.016 270.777 15.906 270.57 15.762 270.391 cv
15.621 270.219 15.445 270.082 15.234 269.988 cv
15.027 269.895 14.793 269.848 14.527 269.848 cv
14.246 269.848 14 269.914 13.793 270.043 cv
13.594 270.176 13.418 270.348 13.262 270.559 cv
13.113 270.773 12.973 271.016 12.84 271.289 cv
12.715 271.562 12.582 271.844 12.449 272.125 cv
12.316 272.414 12.172 272.691 12.008 272.961 cv
11.852 273.23 11.66 273.473 11.441 273.684 cv
11.223 273.902 10.969 274.074 10.672 274.203 cv
10.383 274.34 10.031 274.406 9.617 274.402 cv
9.199 274.406 8.824 274.328 8.492 274.172 cv
8.164 274.02 7.887 273.809 7.66 273.531 cv
7.441 273.262 7.27 272.937 7.152 272.559 cv
7.035 272.184 6.977 271.773 6.977 271.336 cv
6.977 271.117 6.996 270.895 7.035 270.664 cv
7.074 270.441 7.125 270.23 7.188 270.027 cv
7.254 269.832 7.328 269.652 7.406 269.492 cv
7.488 269.34 7.555 269.238 7.602 269.184 cv
7.656 269.137 7.695 269.102 7.719 269.086 cv
7.75 269.07 7.785 269.059 7.828 269.047 cv
7.875 269.039 7.93 269.031 7.988 269.023 cv
8.055 269.02 8.133 269.016 8.23 269.016 cv
8.324 269.016 8.41 269.02 8.48 269.027 cv
8.559 269.035 8.617 269.047 8.664 269.062 cv
8.711 269.078 8.746 269.102 8.77 269.129 cv
8.793 269.16 8.805 269.191 8.805 269.227 cv
8.805 269.285 8.77 269.375 8.699 269.496 cv
8.629 269.621 8.547 269.773 8.453 269.945 cv
8.363 270.125 8.281 270.332 8.203 270.57 cv
8.129 270.816 8.09 271.086 8.09 271.383 cv
8.09 271.664 8.129 271.91 8.203 272.117 cv
8.281 272.328 8.383 272.5 8.504 272.633 cv
8.629 272.77 8.773 272.871 8.945 272.937 cv
9.117 273.004 9.301 273.035 9.492 273.035 cv
9.777 273.035 10.02 272.973 10.219 272.844 cv
10.422 272.715 10.602 272.543 10.754 272.324 cv
10.914 272.113 11.055 271.867 11.184 271.59 cv
11.316 271.316 11.449 271.035 11.578 270.746 cv
11.711 270.461 11.855 270.18 12.012 269.906 cv
12.172 269.633 12.359 269.387 12.574 269.168 cv
12.793 268.953 13.047 268.781 13.34 268.645 cv
13.633 268.516 13.98 268.449 14.379 268.445 cv
cp
f
13.203 260.75 mo
13.406 260.754 13.547 260.805 13.633 260.902 cv
13.719 261.008 13.762 261.125 13.762 261.25 cv
13.762 265.867 li
14.152 265.871 14.504 265.832 14.816 265.75 cv
15.129 265.676 15.398 265.543 15.617 265.359 cv
15.844 265.18 16.016 264.945 16.133 264.648 cv
16.258 264.359 16.316 264 16.313 263.574 cv
16.316 263.242 16.289 262.945 16.23 262.684 cv
16.18 262.422 16.117 262.195 16.047 262.004 cv
15.98 261.816 15.922 261.66 15.863 261.535 cv
15.813 261.414 15.785 261.32 15.781 261.258 cv
15.785 261.223 15.793 261.191 15.809 261.16 cv
15.828 261.133 15.855 261.109 15.891 261.09 cv
15.93 261.078 15.98 261.066 16.043 261.055 cv
16.109 261.051 16.188 261.047 16.281 261.043 cv
16.352 261.047 16.41 261.051 16.457 261.051 cv
16.504 261.059 16.547 261.062 16.586 261.07 cv
16.625 261.078 16.66 261.094 16.691 261.109 cv
16.723 261.133 16.754 261.156 16.781 261.18 cv
16.813 261.211 16.859 261.293 16.922 261.434 cv
16.988 261.574 17.051 261.758 17.113 261.98 cv
17.176 262.207 17.23 262.465 17.281 262.758 cv
17.328 263.051 17.352 263.363 17.355 263.695 cv
17.352 264.273 17.273 264.781 17.113 265.211 cv
16.953 265.648 16.715 266.012 16.398 266.305 cv
16.082 266.605 15.688 266.828 15.207 266.977 cv
14.73 267.125 14.172 267.199 13.535 267.199 cv
12.938 267.199 12.398 267.125 11.914 266.969 cv
11.438 266.816 11.027 266.59 10.691 266.293 cv
10.355 266 10.098 265.645 9.918 265.23 cv
9.738 264.816 9.648 264.352 9.648 263.836 cv
9.648 263.285 9.738 262.816 9.914 262.43 cv
10.094 262.043 10.332 261.727 10.629 261.473 cv
10.93 261.227 11.281 261.043 11.68 260.926 cv
12.086 260.812 12.516 260.754 12.969 260.75 cv
cp
12.82 262.043 mo
12.145 262.027 11.613 262.18 11.23 262.496 cv
10.848 262.812 10.656 263.281 10.652 263.898 cv
10.656 264.223 10.715 264.504 10.832 264.742 cv
10.953 264.984 11.113 265.184 11.309 265.344 cv
11.508 265.508 11.738 265.633 12 265.719 cv
12.262 265.809 12.535 265.859 12.82 265.867 cv
cp
f
15.945 253.742 mo
16.039 253.742 16.113 253.746 16.176 253.75 cv
16.242 253.758 16.297 253.766 16.34 253.777 cv
16.387 253.793 16.426 253.809 16.457 253.824 cv
16.488 253.844 16.539 253.887 16.602 253.949 cv
16.672 254.016 16.75 254.125 16.844 254.281 cv
16.941 254.437 17.027 254.613 17.102 254.809 cv
17.176 255.004 17.234 255.215 17.285 255.441 cv
17.328 255.672 17.352 255.91 17.355 256.148 cv
17.352 256.656 17.273 257.102 17.105 257.492 cv
16.941 257.883 16.699 258.211 16.379 258.469 cv
16.063 258.734 15.668 258.934 15.203 259.07 cv
14.738 259.207 14.203 259.273 13.59 259.273 cv
12.902 259.273 12.309 259.191 11.813 259.023 cv
11.316 258.855 10.91 258.625 10.594 258.328 cv
10.277 258.039 10.043 257.691 9.887 257.293 cv
9.738 256.895 9.66 256.465 9.656 256.004 cv
9.66 255.781 9.68 255.566 9.719 255.352 cv
9.762 255.145 9.816 254.949 9.883 254.773 cv
9.953 254.598 10.031 254.441 10.117 254.301 cv
10.203 254.164 10.277 254.062 10.34 254 cv
10.402 253.937 10.453 253.895 10.488 253.871 cv
10.527 253.848 10.57 253.828 10.617 253.812 cv
10.668 253.797 10.723 253.789 10.785 253.781 cv
10.848 253.781 10.926 253.777 11.02 253.773 cv
11.223 253.777 11.367 253.801 11.445 253.844 cv
11.531 253.895 11.57 253.953 11.566 254.016 cv
11.57 254.098 11.527 254.187 11.438 254.285 cv
11.355 254.391 11.262 254.52 11.152 254.672 cv
11.051 254.828 10.953 255.016 10.867 255.234 cv
10.781 255.461 10.738 255.723 10.738 256.02 cv
10.738 256.641 10.977 257.113 11.453 257.441 cv
11.93 257.773 12.621 257.937 13.52 257.934 cv
13.977 257.937 14.371 257.895 14.711 257.805 cv
15.051 257.723 15.336 257.598 15.563 257.43 cv
15.793 257.266 15.965 257.062 16.074 256.816 cv
16.191 256.578 16.246 256.301 16.242 255.988 cv
16.246 255.695 16.199 255.434 16.102 255.207 cv
16.012 254.984 15.91 254.793 15.793 254.629 cv
15.684 254.469 15.582 254.332 15.488 254.215 cv
15.402 254.105 15.355 254.016 15.352 253.953 cv
15.355 253.918 15.367 253.887 15.383 253.859 cv
15.406 253.836 15.441 253.816 15.488 253.793 cv
15.543 253.777 15.605 253.762 15.676 253.754 cv
15.754 253.746 15.844 253.742 15.945 253.742 cv
cp
f
13.426 245.687 mo
14.004 245.691 14.531 245.766 15.008 245.914 cv
15.492 246.066 15.906 246.293 16.25 246.59 cv
16.602 246.891 16.871 247.266 17.063 247.711 cv
17.258 248.164 17.352 248.684 17.355 249.273 cv
17.352 249.852 17.27 250.355 17.098 250.781 cv
16.93 251.211 16.68 251.566 16.352 251.852 cv
16.023 252.141 15.629 252.355 15.16 252.492 cv
14.695 252.633 14.164 252.699 13.566 252.699 cv
13 252.699 12.473 252.629 11.992 252.48 cv
11.512 252.336 11.098 252.109 10.746 251.809 cv
10.398 251.512 10.129 251.141 9.938 250.691 cv
9.746 250.246 9.648 249.723 9.648 249.125 cv
9.648 248.547 9.734 248.047 9.906 247.617 cv
10.078 247.191 10.328 246.832 10.656 246.547 cv
10.984 246.262 11.383 246.047 11.848 245.902 cv
12.316 245.762 12.844 245.691 13.426 245.687 cv
cp
13.512 247.02 mo
13.137 247.023 12.777 247.059 12.438 247.125 cv
12.102 247.199 11.809 247.316 11.551 247.477 cv
11.301 247.641 11.098 247.859 10.945 248.137 cv
10.801 248.418 10.727 248.766 10.723 249.176 cv
10.727 249.562 10.793 249.891 10.926 250.164 cv
11.063 250.441 11.254 250.668 11.5 250.844 cv
11.746 251.023 12.039 251.156 12.375 251.238 cv
12.715 251.328 13.082 251.371 13.48 251.367 cv
13.867 251.371 14.23 251.336 14.566 251.262 cv
14.906 251.195 15.199 251.078 15.449 250.91 cv
15.703 250.746 15.906 250.523 16.051 250.246 cv
16.203 249.969 16.277 249.621 16.273 249.207 cv
16.277 248.832 16.207 248.504 16.07 248.223 cv
15.938 247.945 15.75 247.719 15.5 247.539 cv
15.258 247.363 14.965 247.234 14.629 247.148 cv
14.293 247.066 13.922 247.023 13.512 247.02 cv
cp
f
17.012 237.762 mo
17.059 237.762 17.094 237.773 17.117 237.793 cv
17.148 237.816 17.172 237.852 17.191 237.895 cv
17.211 237.945 17.223 238.008 17.238 238.09 cv
17.246 238.172 17.254 238.277 17.254 238.398 cv
17.254 238.531 17.246 238.637 17.238 238.719 cv
17.223 238.805 17.211 238.871 17.191 238.914 cv
17.172 238.965 17.148 238.996 17.117 239.016 cv
17.094 239.039 17.059 239.051 17.012 239.047 cv
12.906 239.047 li
12.508 239.051 12.188 239.082 11.941 239.141 cv
11.699 239.207 11.488 239.297 11.309 239.414 cv
11.133 239.531 10.996 239.687 10.902 239.875 cv
10.809 240.07 10.762 240.289 10.762 240.535 cv
10.762 240.859 10.879 241.184 11.105 241.504 cv
11.34 241.828 11.672 242.164 12.109 242.516 cv
17.012 242.516 li
17.059 242.52 17.094 242.531 17.117 242.547 cv
17.148 242.57 17.172 242.602 17.191 242.648 cv
17.211 242.695 17.223 242.762 17.238 242.84 cv
17.246 242.926 17.254 243.031 17.254 243.16 cv
17.254 243.289 17.246 243.395 17.238 243.473 cv
17.223 243.559 17.211 243.625 17.191 243.672 cv
17.172 243.727 17.148 243.758 17.117 243.773 cv
17.094 243.793 17.059 243.805 17.012 243.801 cv
10 243.801 li
9.961 243.805 9.926 243.797 9.895 243.777 cv
9.867 243.766 9.844 243.734 9.816 243.684 cv
9.797 243.641 9.781 243.578 9.77 243.504 cv
9.766 243.434 9.762 243.34 9.758 243.215 cv
9.762 243.105 9.766 243.008 9.77 242.93 cv
9.781 242.855 9.797 242.797 9.816 242.754 cv
9.844 242.715 9.867 242.687 9.895 242.668 cv
9.926 242.652 9.961 242.645 10 242.641 cv
10.926 242.641 li
10.484 242.25 10.164 241.855 9.957 241.461 cv
9.754 241.07 9.648 240.672 9.648 240.27 cv
9.648 239.801 9.73 239.41 9.887 239.09 cv
10.051 238.773 10.262 238.512 10.523 238.312 cv
10.789 238.117 11.098 237.977 11.453 237.891 cv
11.809 237.805 12.238 237.762 12.734 237.762 cv
cp
f
17.012 229.414 mo
17.059 229.418 17.094 229.426 17.121 229.441 cv
17.156 229.461 17.18 229.492 17.195 229.535 cv
17.211 229.578 17.223 229.637 17.238 229.707 cv
17.246 229.781 17.254 229.871 17.254 229.973 cv
17.254 230.086 17.246 230.176 17.238 230.246 cv
17.223 230.32 17.211 230.379 17.195 230.426 cv
17.18 230.473 17.156 230.508 17.121 230.527 cv
17.094 230.551 17.059 230.562 17.012 230.559 cv
16.086 230.559 li
16.488 230.934 16.797 231.316 17.02 231.711 cv
17.242 232.109 17.352 232.543 17.355 233.012 cv
17.352 233.531 17.254 233.973 17.055 234.332 cv
16.855 234.699 16.586 234.992 16.246 235.215 cv
15.906 235.445 15.508 235.609 15.047 235.711 cv
14.59 235.812 14.105 235.863 13.59 235.863 cv
12.992 235.863 12.449 235.801 11.961 235.672 cv
11.477 235.543 11.059 235.352 10.715 235.094 cv
10.371 234.844 10.109 234.527 9.926 234.148 cv
9.742 233.773 9.648 233.336 9.648 232.84 cv
9.648 232.434 9.738 232.059 9.918 231.715 cv
10.098 231.375 10.363 231.039 10.707 230.707 cv
6.633 230.707 li
6.598 230.707 6.563 230.699 6.527 230.68 cv
6.496 230.664 6.469 230.629 6.449 230.574 cv
6.434 230.523 6.418 230.457 6.402 230.375 cv
6.391 230.297 6.387 230.195 6.383 230.066 cv
6.387 229.941 6.391 229.832 6.402 229.746 cv
6.418 229.664 6.434 229.602 6.449 229.555 cv
6.469 229.512 6.496 229.477 6.527 229.449 cv
6.563 229.43 6.598 229.418 6.633 229.414 cv
cp
12.078 230.707 mo
11.652 231.055 11.324 231.391 11.094 231.715 cv
10.871 232.043 10.758 232.383 10.754 232.73 cv
10.758 233.062 10.836 233.34 10.988 233.566 cv
11.148 233.797 11.352 233.984 11.605 234.125 cv
11.859 234.27 12.148 234.371 12.469 234.434 cv
12.793 234.5 13.121 234.535 13.449 234.531 cv
13.809 234.535 14.152 234.508 14.488 234.449 cv
14.824 234.398 15.125 234.305 15.387 234.168 cv
15.652 234.035 15.863 233.855 16.02 233.629 cv
16.18 233.41 16.258 233.129 16.258 232.785 cv
16.258 232.621 16.234 232.457 16.188 232.293 cv
16.141 232.137 16.063 231.973 15.953 231.805 cv
15.844 231.641 15.703 231.469 15.527 231.285 cv
15.355 231.105 15.141 230.91 14.883 230.707 cv
cp
f
15.102 222.641 mo
15.465 222.645 15.785 222.711 16.063 222.84 cv
16.344 222.973 16.578 223.16 16.77 223.402 cv
16.965 223.648 17.109 223.941 17.207 224.277 cv
17.305 224.617 17.352 224.988 17.355 225.391 cv
17.352 225.645 17.332 225.883 17.297 226.105 cv
17.254 226.332 17.207 226.531 17.148 226.711 cv
17.09 226.891 17.027 227.043 16.961 227.168 cv
16.898 227.293 16.84 227.387 16.785 227.441 cv
16.734 227.5 16.664 227.539 16.566 227.562 cv
16.477 227.59 16.348 227.602 16.188 227.602 cv
16.09 227.602 16.008 227.598 15.938 227.586 cv
15.871 227.578 15.816 227.566 15.773 227.547 cv
15.734 227.535 15.703 227.512 15.684 227.484 cv
15.668 227.457 15.66 227.426 15.656 227.387 cv
15.66 227.332 15.695 227.246 15.762 227.133 cv
15.836 227.023 15.914 226.887 15.992 226.719 cv
16.078 226.559 16.152 226.367 16.223 226.141 cv
16.293 225.922 16.328 225.664 16.328 225.367 cv
16.328 225.152 16.305 224.953 16.258 224.773 cv
16.211 224.598 16.145 224.445 16.051 224.316 cv
15.965 224.187 15.848 224.086 15.703 224.016 cv
15.566 223.945 15.398 223.91 15.203 223.91 cv
15.008 223.91 14.844 223.961 14.707 224.062 cv
14.574 224.164 14.453 224.301 14.348 224.465 cv
14.246 224.633 14.156 224.816 14.07 225.023 cv
13.992 225.234 13.906 225.449 13.816 225.668 cv
13.73 225.887 13.629 226.102 13.516 226.312 cv
13.406 226.523 13.273 226.715 13.109 226.879 cv
12.953 227.051 12.758 227.184 12.531 227.281 cv
12.309 227.387 12.043 227.437 11.73 227.434 cv
11.457 227.437 11.191 227.383 10.938 227.273 cv
10.688 227.168 10.469 227.008 10.277 226.793 cv
10.09 226.582 9.938 226.316 9.82 225.996 cv
9.707 225.676 9.648 225.305 9.648 224.875 cv
9.648 224.691 9.664 224.504 9.695 224.316 cv
9.727 224.133 9.766 223.965 9.813 223.809 cv
9.859 223.66 9.91 223.531 9.965 223.422 cv
10.02 223.32 10.07 223.238 10.109 223.18 cv
10.156 223.129 10.191 223.094 10.219 223.07 cv
10.25 223.055 10.285 223.039 10.32 223.031 cv
10.363 223.023 10.41 223.016 10.465 223.008 cv
10.523 223 10.594 222.996 10.676 222.996 cv
10.766 222.996 10.844 223 10.906 223.008 cv
10.977 223.016 11.027 223.031 11.066 223.047 cv
11.109 223.07 11.141 223.09 11.156 223.113 cv
11.176 223.141 11.184 223.172 11.184 223.199 cv
11.184 223.25 11.156 223.316 11.098 223.402 cv
11.043 223.492 10.98 223.605 10.914 223.746 cv
10.852 223.887 10.793 224.055 10.73 224.242 cv
10.676 224.434 10.645 224.648 10.645 224.891 cv
10.645 225.113 10.672 225.305 10.719 225.469 cv
10.773 225.637 10.844 225.773 10.93 225.879 cv
11.023 225.984 11.129 226.066 11.254 226.117 cv
11.379 226.176 11.516 226.203 11.66 226.199 cv
11.863 226.203 12.031 226.152 12.168 226.047 cv
12.309 225.945 12.43 225.809 12.531 225.641 cv
12.637 225.477 12.73 225.285 12.813 225.07 cv
12.898 224.859 12.984 224.645 13.07 224.422 cv
13.16 224.203 13.262 223.984 13.367 223.766 cv
13.477 223.551 13.605 223.359 13.762 223.191 cv
13.918 223.027 14.105 222.895 14.324 222.793 cv
14.543 222.695 14.805 222.645 15.102 222.641 cv
cp
f
13.023 218.195 mo
13.609 218.195 14.191 218.234 14.766 218.305 cv
15.34 218.383 15.906 218.492 16.469 218.633 cv
17.027 218.781 17.578 218.957 18.121 219.168 cv
18.664 219.379 19.199 219.625 19.73 219.902 cv
19.754 219.922 19.777 219.945 19.801 219.973 cv
19.82 220.008 19.84 220.047 19.855 220.094 cv
19.871 220.145 19.879 220.203 19.887 220.27 cv
19.887 220.34 19.891 220.422 19.895 220.512 cv
19.891 220.648 19.883 220.754 19.875 220.828 cv
19.859 220.906 19.84 220.961 19.813 220.992 cv
19.781 221.027 19.746 221.043 19.703 221.039 cv
19.656 221.039 19.602 221.023 19.543 220.996 cv
18.492 220.52 17.422 220.16 16.324 219.914 cv
15.227 219.672 14.117 219.551 13 219.547 cv
11.891 219.551 10.785 219.672 9.684 219.914 cv
8.586 220.16 7.516 220.527 6.469 221.012 cv
6.426 221.035 6.383 221.043 6.336 221.035 cv
6.297 221.035 6.262 221.012 6.234 220.965 cv
6.211 220.926 6.191 220.867 6.172 220.793 cv
6.16 220.723 6.152 220.625 6.148 220.504 cv
6.152 220.395 6.156 220.305 6.16 220.23 cv
6.172 220.16 6.184 220.102 6.195 220.055 cv
6.215 220.012 6.23 219.98 6.242 219.957 cv
6.262 219.941 6.277 219.926 6.297 219.91 cv
7.363 219.379 8.461 218.957 9.582 218.652 cv
10.711 218.348 11.855 218.195 13.023 218.195 cv
cp
f
297.852 544.559 mo
297.848 544.664 297.832 544.754 297.797 544.824 cv
297.762 544.902 297.715 544.961 297.66 545.004 cv
297.602 545.055 297.539 545.09 297.473 545.105 cv
297.398 545.129 297.328 545.137 297.266 545.137 cv
296.82 545.137 li
296.68 545.137 296.559 545.125 296.453 545.094 cv
296.348 545.07 296.25 545.016 296.156 544.937 cv
296.063 544.863 295.969 544.762 295.875 544.629 cv
295.781 544.5 295.68 544.336 295.574 544.133 cv
292.5 538.395 li
292.336 538.102 292.172 537.793 292.012 537.465 cv
291.844 537.145 291.691 536.828 291.555 536.52 cv
291.539 536.52 li
291.547 536.895 291.555 537.277 291.563 537.664 cv
291.566 538.055 291.566 538.441 291.57 538.824 cv
291.57 544.91 li
291.566 544.949 291.555 544.984 291.535 545.016 cv
291.512 545.051 291.477 545.078 291.426 545.094 cv
291.371 545.113 291.301 545.125 291.219 545.141 cv
291.133 545.152 291.027 545.16 290.898 545.16 cv
290.762 545.16 290.652 545.152 290.57 545.141 cv
290.484 545.125 290.418 545.113 290.371 545.094 cv
290.32 545.078 290.285 545.051 290.262 545.016 cv
290.238 544.984 290.227 544.949 290.23 544.91 cv
290.23 535.605 li
290.227 535.398 290.285 535.25 290.406 535.16 cv
290.523 535.074 290.652 535.031 290.793 535.027 cv
291.453 535.027 li
291.605 535.031 291.738 535.043 291.844 535.066 cv
291.945 535.094 292.039 535.137 292.125 535.195 cv
292.207 535.258 292.285 535.34 292.367 535.445 cv
292.441 535.555 292.523 535.691 292.609 535.848 cv
294.977 540.273 li
295.121 540.547 295.262 540.812 295.398 541.066 cv
295.531 541.324 295.66 541.578 295.789 541.824 cv
295.91 542.078 296.035 542.324 296.16 542.562 cv
296.281 542.805 296.402 543.047 296.527 543.289 cv
296.535 543.289 li
296.523 542.883 296.516 542.453 296.516 542.008 cv
296.508 541.562 296.508 541.137 296.512 540.727 cv
296.512 535.254 li
296.508 535.219 296.52 535.184 296.543 535.152 cv
296.566 535.121 296.602 535.094 296.656 535.07 cv
296.703 535.047 296.773 535.031 296.859 535.02 cv
296.945 535.012 297.055 535.008 297.195 535.004 cv
297.313 535.008 297.418 535.012 297.508 535.02 cv
297.594 535.031 297.66 535.047 297.711 535.07 cv
297.758 535.094 297.793 535.121 297.816 535.152 cv
297.836 535.184 297.848 535.219 297.852 535.254 cv
cp
f
306.398 544.918 mo
306.395 544.965 306.387 545 306.371 545.023 cv
306.352 545.055 306.316 545.078 306.273 545.098 cv
306.227 545.117 306.168 545.129 306.094 545.145 cv
306.016 545.152 305.922 545.16 305.816 545.16 cv
305.691 545.16 305.594 545.152 305.523 545.145 cv
305.445 545.129 305.387 545.117 305.344 545.098 cv
305.297 545.078 305.266 545.055 305.254 545.023 cv
305.234 545 305.227 544.965 305.23 544.918 cv
305.23 543.992 li
304.828 544.437 304.434 544.758 304.047 544.957 cv
303.652 545.16 303.258 545.258 302.863 545.262 cv
302.391 545.258 301.996 545.184 301.68 545.027 cv
301.359 544.875 301.102 544.664 300.906 544.395 cv
300.703 544.129 300.563 543.816 300.48 543.457 cv
300.391 543.102 300.348 542.668 300.352 542.16 cv
300.352 537.906 li
300.348 537.867 300.355 537.832 300.379 537.801 cv
300.395 537.773 300.43 537.75 300.484 537.723 cv
300.531 537.703 300.602 537.687 300.688 537.676 cv
300.77 537.672 300.871 537.668 301 537.664 cv
301.121 537.668 301.227 537.672 301.313 537.676 cv
301.395 537.687 301.461 537.703 301.508 537.723 cv
301.555 537.75 301.59 537.773 301.613 537.801 cv
301.633 537.832 301.641 537.867 301.645 537.906 cv
301.645 541.988 li
301.641 542.402 301.672 542.73 301.734 542.977 cv
301.793 543.223 301.883 543.434 302.008 543.605 cv
302.125 543.785 302.281 543.918 302.473 544.012 cv
302.656 544.109 302.875 544.16 303.125 544.156 cv
303.445 544.16 303.766 544.043 304.09 543.812 cv
304.406 543.586 304.746 543.25 305.105 542.805 cv
305.105 537.906 li
305.105 537.867 305.113 537.832 305.133 537.801 cv
305.148 537.773 305.184 537.75 305.238 537.723 cv
305.289 537.703 305.355 537.687 305.438 537.676 cv
305.516 537.672 305.621 537.668 305.754 537.664 cv
305.875 537.668 305.98 537.672 306.066 537.676 cv
306.148 537.687 306.211 537.703 306.258 537.723 cv
306.301 537.75 306.336 537.773 306.363 537.801 cv
306.383 537.832 306.395 537.867 306.398 537.906 cv
cp
f
319.176 544.918 mo
319.172 544.965 319.164 545 319.145 545.023 cv
319.121 545.055 319.086 545.078 319.043 545.098 cv
318.992 545.117 318.926 545.129 318.848 545.145 cv
318.762 545.152 318.66 545.16 318.535 545.16 cv
318.402 545.16 318.293 545.152 318.215 545.145 cv
318.129 545.129 318.063 545.117 318.016 545.098 cv
317.961 545.078 317.926 545.055 317.91 545.023 cv
317.887 545 317.879 544.965 317.879 544.918 cv
317.879 540.656 li
317.879 540.363 317.852 540.094 317.801 539.848 cv
317.746 539.605 317.664 539.395 317.551 539.215 cv
317.438 539.039 317.293 538.902 317.117 538.809 cv
316.938 538.715 316.727 538.668 316.492 538.668 cv
316.195 538.668 315.898 538.785 315.602 539.012 cv
315.297 539.246 314.969 539.578 314.613 540.016 cv
314.613 544.918 li
314.609 544.965 314.598 545 314.582 545.023 cv
314.559 545.055 314.527 545.078 314.48 545.098 cv
314.43 545.117 314.363 545.129 314.281 545.145 cv
314.195 545.152 314.09 545.16 313.969 545.16 cv
313.848 545.16 313.746 545.152 313.66 545.145 cv
313.574 545.129 313.504 545.117 313.457 545.098 cv
313.402 545.078 313.371 545.055 313.355 545.023 cv
313.336 545 313.324 544.965 313.328 544.918 cv
313.328 540.656 li
313.324 540.363 313.297 540.094 313.242 539.848 cv
313.184 539.605 313.098 539.395 312.984 539.215 cv
312.871 539.039 312.727 538.902 312.555 538.809 cv
312.375 538.715 312.168 538.668 311.934 538.668 cv
311.633 538.668 311.336 538.785 311.035 539.012 cv
310.734 539.246 310.406 539.578 310.055 540.016 cv
310.055 544.918 li
310.051 544.965 310.039 545 310.023 545.023 cv
310 545.055 309.969 545.078 309.922 545.098 cv
309.875 545.117 309.809 545.129 309.73 545.145 cv
309.645 545.152 309.539 545.16 309.41 545.16 cv
309.281 545.16 309.176 545.152 309.098 545.145 cv
309.012 545.129 308.945 545.117 308.898 545.098 cv
308.844 545.078 308.813 545.055 308.797 545.023 cv
308.777 545 308.766 544.965 308.77 544.918 cv
308.77 537.906 li
308.766 537.867 308.773 537.832 308.793 537.801 cv
308.805 537.773 308.836 537.75 308.887 537.723 cv
308.93 537.703 308.992 537.687 309.066 537.676 cv
309.137 537.672 309.23 537.668 309.355 537.664 cv
309.465 537.668 309.563 537.672 309.641 537.676 cv
309.715 537.687 309.773 537.703 309.816 537.723 cv
309.855 537.75 309.883 537.773 309.902 537.801 cv
309.918 537.832 309.926 537.867 309.93 537.906 cv
309.93 538.832 li
310.32 538.391 310.703 538.07 311.078 537.863 cv
311.445 537.66 311.824 537.555 312.207 537.555 cv
312.496 537.555 312.754 537.59 312.988 537.656 cv
313.215 537.727 313.422 537.82 313.602 537.941 cv
313.777 538.062 313.926 538.207 314.055 538.375 cv
314.176 538.547 314.281 538.738 314.367 538.941 cv
314.598 538.691 314.82 538.477 315.031 538.297 cv
315.242 538.125 315.445 537.98 315.641 537.867 cv
315.836 537.762 316.023 537.684 316.207 537.629 cv
316.391 537.582 316.578 537.555 316.766 537.555 cv
317.219 537.555 317.598 537.637 317.902 537.793 cv
318.207 537.957 318.453 538.168 318.648 538.43 cv
318.836 538.695 318.973 539.004 319.055 539.359 cv
319.133 539.715 319.172 540.09 319.176 540.484 cv
cp
f
327.977 541.316 mo
327.973 541.926 327.906 542.477 327.777 542.961 cv
327.641 543.449 327.445 543.863 327.191 544.203 cv
326.934 544.547 326.617 544.809 326.246 544.988 cv
325.871 545.172 325.445 545.258 324.961 545.262 cv
324.734 545.258 324.527 545.238 324.34 545.195 cv
324.152 545.148 323.965 545.078 323.785 544.98 cv
323.598 544.883 323.418 544.758 323.238 544.605 cv
323.055 544.457 322.863 544.277 322.664 544.062 cv
322.664 544.918 li
322.664 544.965 322.652 545 322.633 545.027 cv
322.609 545.062 322.574 545.086 322.531 545.102 cv
322.48 545.117 322.422 545.129 322.355 545.145 cv
322.281 545.152 322.191 545.16 322.086 545.16 cv
321.977 545.16 321.891 545.152 321.82 545.145 cv
321.746 545.129 321.684 545.117 321.641 545.102 cv
321.59 545.086 321.559 545.062 321.547 545.027 cv
321.527 545 321.52 544.965 321.523 544.918 cv
321.523 534.508 li
321.52 534.469 321.531 534.434 321.551 534.398 cv
321.566 534.371 321.598 534.344 321.652 534.32 cv
321.699 534.301 321.766 534.285 321.852 534.273 cv
321.93 534.266 322.035 534.262 322.164 534.258 cv
322.293 534.262 322.398 534.266 322.484 534.273 cv
322.563 534.285 322.629 534.301 322.676 534.32 cv
322.723 534.344 322.754 534.371 322.777 534.398 cv
322.793 534.434 322.805 534.469 322.809 534.508 cv
322.809 538.707 li
323.016 538.496 323.219 538.316 323.414 538.172 cv
323.609 538.027 323.797 537.91 323.984 537.816 cv
324.168 537.73 324.355 537.664 324.547 537.617 cv
324.73 537.578 324.93 537.555 325.141 537.555 cv
325.645 537.555 326.078 537.656 326.445 537.859 cv
326.805 538.062 327.098 538.336 327.324 538.672 cv
327.547 539.016 327.715 539.414 327.82 539.871 cv
327.922 540.328 327.973 540.809 327.977 541.316 cv
cp
326.645 541.465 mo
326.641 541.109 326.613 540.762 326.563 540.422 cv
326.504 540.086 326.41 539.789 326.273 539.527 cv
326.137 539.27 325.957 539.059 325.734 538.898 cv
325.508 538.742 325.227 538.664 324.895 538.66 cv
324.727 538.664 324.563 538.687 324.402 538.73 cv
324.238 538.781 324.074 538.859 323.906 538.965 cv
323.738 539.078 323.563 539.219 323.387 539.387 cv
323.203 539.562 323.012 539.777 322.809 540.031 cv
322.809 542.828 li
323.164 543.262 323.504 543.594 323.828 543.816 cv
324.152 544.047 324.488 544.16 324.84 544.156 cv
325.16 544.16 325.438 544.082 325.672 543.922 cv
325.898 543.77 326.086 543.562 326.23 543.301 cv
326.375 543.047 326.48 542.758 326.547 542.437 cv
326.609 542.121 326.641 541.797 326.645 541.465 cv
cp
f
335.887 541.109 mo
335.883 541.312 335.832 541.453 335.734 541.539 cv
335.629 541.625 335.512 541.668 335.387 541.668 cv
330.77 541.668 li
330.766 542.059 330.805 542.41 330.887 542.723 cv
330.961 543.035 331.094 543.305 331.277 543.523 cv
331.457 543.75 331.691 543.922 331.988 544.039 cv
332.277 544.164 332.637 544.223 333.063 544.219 cv
333.395 544.223 333.691 544.195 333.953 544.137 cv
334.215 544.086 334.441 544.023 334.633 543.953 cv
334.82 543.887 334.977 543.828 335.102 543.77 cv
335.223 543.719 335.316 543.691 335.379 543.687 cv
335.414 543.691 335.445 543.699 335.477 543.715 cv
335.504 543.734 335.527 543.762 335.547 543.797 cv
335.559 543.836 335.57 543.887 335.582 543.949 cv
335.586 544.016 335.59 544.094 335.594 544.187 cv
335.59 544.258 335.586 544.316 335.586 544.363 cv
335.578 544.41 335.574 544.453 335.566 544.492 cv
335.559 544.531 335.543 544.566 335.527 544.598 cv
335.504 544.629 335.48 544.66 335.457 544.687 cv
335.426 544.719 335.344 544.766 335.203 544.828 cv
335.063 544.895 334.879 544.957 334.656 545.02 cv
334.43 545.082 334.172 545.137 333.879 545.187 cv
333.586 545.234 333.273 545.258 332.941 545.262 cv
332.363 545.258 331.855 545.18 331.426 545.02 cv
330.988 544.859 330.625 544.621 330.332 544.305 cv
330.031 543.988 329.809 543.594 329.66 543.113 cv
329.512 542.637 329.438 542.078 329.438 541.441 cv
329.438 540.844 329.512 540.305 329.668 539.82 cv
329.82 539.344 330.047 538.934 330.344 538.598 cv
330.637 538.262 330.992 538.004 331.406 537.824 cv
331.82 537.645 332.285 537.555 332.801 537.555 cv
333.352 537.555 333.82 537.645 334.207 537.82 cv
334.594 538 334.91 538.238 335.164 538.535 cv
335.41 538.836 335.594 539.187 335.711 539.586 cv
335.824 539.992 335.883 540.422 335.887 540.875 cv
cp
334.594 540.727 mo
334.609 540.051 334.457 539.52 334.141 539.137 cv
333.824 538.754 333.355 538.562 332.738 538.559 cv
332.414 538.562 332.133 538.621 331.895 538.738 cv
331.652 538.859 331.453 539.02 331.293 539.215 cv
331.129 539.414 331.004 539.645 330.918 539.906 cv
330.828 540.168 330.777 540.441 330.77 540.727 cv
cp
f
341.953 538.363 mo
341.949 538.48 341.949 538.578 341.945 538.652 cv
341.938 538.734 341.926 538.797 341.914 538.836 cv
341.895 538.883 341.875 538.914 341.855 538.937 cv
341.828 538.961 341.797 538.973 341.758 538.973 cv
341.715 538.973 341.664 538.961 341.605 538.937 cv
341.543 538.914 341.473 538.891 341.402 538.867 cv
341.324 538.844 341.242 538.824 341.148 538.801 cv
341.055 538.785 340.953 538.773 340.844 538.77 cv
340.711 538.773 340.582 538.801 340.461 538.848 cv
340.336 538.902 340.207 538.988 340.07 539.105 cv
339.93 539.23 339.785 539.387 339.637 539.582 cv
339.484 539.777 339.316 540.02 339.137 540.305 cv
339.137 544.918 li
339.133 544.965 339.121 545 339.105 545.023 cv
339.082 545.055 339.051 545.078 339.004 545.098 cv
338.957 545.117 338.891 545.129 338.813 545.145 cv
338.727 545.152 338.621 545.16 338.492 545.16 cv
338.363 545.16 338.258 545.152 338.18 545.145 cv
338.094 545.129 338.027 545.117 337.98 545.098 cv
337.926 545.078 337.895 545.055 337.879 545.023 cv
337.859 545 337.848 544.965 337.852 544.918 cv
337.852 537.906 li
337.848 537.867 337.855 537.832 337.875 537.801 cv
337.887 537.773 337.918 537.75 337.969 537.723 cv
338.012 537.703 338.074 537.687 338.148 537.676 cv
338.219 537.672 338.313 537.668 338.438 537.664 cv
338.547 537.668 338.645 537.672 338.723 537.676 cv
338.797 537.687 338.855 537.703 338.898 537.723 cv
338.938 537.75 338.965 537.773 338.984 537.801 cv
339 537.832 339.008 537.867 339.012 537.906 cv
339.012 538.926 li
339.199 538.645 339.383 538.418 339.555 538.242 cv
339.723 538.066 339.883 537.926 340.035 537.824 cv
340.184 537.723 340.332 537.652 340.48 537.613 cv
340.629 537.574 340.777 537.555 340.93 537.555 cv
340.996 537.555 341.074 537.559 341.16 537.566 cv
341.246 537.574 341.336 537.59 341.43 537.609 cv
341.523 537.633 341.605 537.656 341.684 537.68 cv
341.754 537.707 341.809 537.734 341.844 537.758 cv
341.871 537.789 341.891 537.812 341.906 537.832 cv
341.914 537.859 341.926 537.891 341.934 537.922 cv
341.941 537.961 341.945 538.012 341.949 538.082 cv
341.949 538.152 341.949 538.246 341.953 538.363 cv
cp
f
353.727 541.332 mo
353.723 541.91 353.648 542.437 353.5 542.914 cv
353.348 543.398 353.121 543.812 352.824 544.156 cv
352.523 544.508 352.148 544.777 351.703 544.969 cv
351.25 545.164 350.73 545.258 350.141 545.262 cv
349.563 545.258 349.059 545.176 348.633 545.004 cv
348.203 544.836 347.848 544.586 347.563 544.258 cv
347.273 543.93 347.059 543.535 346.922 543.066 cv
346.781 542.602 346.715 542.07 346.715 541.473 cv
346.715 540.906 346.785 540.379 346.934 539.898 cv
347.078 539.418 347.305 539.004 347.605 538.652 cv
347.902 538.305 348.273 538.035 348.723 537.844 cv
349.168 537.652 349.691 537.555 350.289 537.555 cv
350.867 537.555 351.367 537.641 351.797 537.812 cv
352.223 537.984 352.582 538.234 352.867 538.562 cv
353.152 538.891 353.367 539.289 353.512 539.754 cv
353.652 540.223 353.723 540.75 353.727 541.332 cv
cp
352.395 541.418 mo
352.391 541.043 352.355 540.684 352.289 540.344 cv
352.215 540.008 352.098 539.715 351.938 539.457 cv
351.773 539.207 351.555 539.004 351.277 538.852 cv
350.996 538.707 350.648 538.633 350.238 538.629 cv
349.852 538.633 349.523 538.699 349.25 538.832 cv
348.973 538.969 348.746 539.16 348.57 539.406 cv
348.391 539.652 348.258 539.945 348.176 540.281 cv
348.086 540.621 348.043 540.988 348.047 541.387 cv
348.043 541.773 348.078 542.137 348.152 542.473 cv
348.219 542.812 348.336 543.105 348.504 543.355 cv
348.668 543.609 348.891 543.812 349.168 543.957 cv
349.445 544.109 349.793 544.184 350.207 544.18 cv
350.582 544.184 350.91 544.113 351.191 543.977 cv
351.469 543.844 351.695 543.656 351.875 543.406 cv
352.051 543.164 352.18 542.871 352.266 542.535 cv
352.348 542.199 352.391 541.828 352.395 541.418 cv
cp
f
359.457 535.02 mo
359.453 535.121 359.449 535.199 359.441 535.258 cv
359.43 535.32 359.418 535.371 359.406 535.402 cv
359.391 535.441 359.375 535.465 359.355 535.477 cv
359.332 535.492 359.305 535.5 359.277 535.496 cv
359.238 535.5 359.191 535.488 359.141 535.461 cv
359.082 535.441 359.016 535.414 358.941 535.383 cv
358.859 535.355 358.77 535.328 358.664 535.305 cv
358.555 535.281 358.43 535.27 358.297 535.27 cv
358.102 535.27 357.938 535.301 357.805 535.363 cv
357.664 535.426 357.555 535.523 357.477 535.656 cv
357.391 535.789 357.332 535.961 357.297 536.172 cv
357.258 536.383 357.238 536.641 357.242 536.937 cv
357.242 537.703 li
358.809 537.703 li
358.848 537.707 358.883 537.715 358.914 537.73 cv
358.941 537.75 358.969 537.781 358.992 537.824 cv
359.016 537.871 359.031 537.93 359.047 537.992 cv
359.055 538.062 359.063 538.145 359.066 538.238 cv
359.063 538.43 359.039 538.562 358.996 538.645 cv
358.945 538.73 358.883 538.773 358.809 538.77 cv
357.242 538.77 li
357.242 544.918 li
357.238 544.965 357.23 545 357.211 545.023 cv
357.188 545.055 357.152 545.078 357.105 545.098 cv
357.055 545.117 356.988 545.129 356.906 545.145 cv
356.82 545.152 356.715 545.16 356.598 545.16 cv
356.469 545.16 356.367 545.152 356.285 545.145 cv
356.199 545.129 356.133 545.117 356.086 545.098 cv
356.035 545.078 356 545.055 355.98 545.023 cv
355.957 545 355.945 544.965 355.949 544.918 cv
355.949 538.77 li
354.961 538.77 li
354.875 538.773 354.813 538.73 354.773 538.645 cv
354.73 538.562 354.707 538.43 354.711 538.238 cv
354.707 538.145 354.715 538.062 354.727 537.992 cv
354.734 537.93 354.75 537.871 354.773 537.824 cv
354.793 537.781 354.816 537.75 354.852 537.73 cv
354.879 537.715 354.918 537.707 354.961 537.703 cv
355.949 537.703 li
355.949 536.977 li
355.945 536.492 355.992 536.074 356.086 535.719 cv
356.176 535.371 356.313 535.082 356.5 534.859 cv
356.684 534.637 356.918 534.473 357.207 534.363 cv
357.488 534.258 357.824 534.203 358.211 534.203 cv
358.387 534.203 358.563 534.223 358.738 534.254 cv
358.906 534.293 359.039 534.328 359.137 534.363 cv
359.227 534.406 359.289 534.441 359.324 534.469 cv
359.352 534.504 359.379 534.543 359.402 534.59 cv
359.422 534.641 359.434 534.703 359.445 534.77 cv
359.449 534.844 359.453 534.926 359.457 535.02 cv
cp
f
369.656 542.285 mo
369.652 542.758 369.566 543.18 369.395 543.547 cv
369.219 543.922 368.977 544.234 368.668 544.488 cv
368.359 544.746 367.996 544.937 367.578 545.066 cv
367.156 545.195 366.707 545.258 366.227 545.262 cv
365.887 545.258 365.57 545.23 365.285 545.176 cv
364.996 545.117 364.742 545.051 364.516 544.965 cv
364.289 544.887 364.098 544.801 363.945 544.707 cv
363.789 544.621 363.684 544.543 363.625 544.48 cv
363.566 544.418 363.523 544.34 363.496 544.246 cv
363.465 544.152 363.449 544.023 363.453 543.859 cv
363.449 543.746 363.453 543.652 363.469 543.574 cv
363.477 543.5 363.492 543.437 363.516 543.391 cv
363.531 543.344 363.559 543.312 363.594 543.293 cv
363.621 543.277 363.656 543.27 363.699 543.266 cv
363.77 543.27 363.871 543.312 364.008 543.398 cv
364.137 543.488 364.309 543.586 364.52 543.687 cv
364.727 543.797 364.977 543.895 365.27 543.98 cv
365.563 544.074 365.902 544.117 366.289 544.117 cv
366.578 544.117 366.844 544.078 367.086 544 cv
367.324 543.922 367.531 543.812 367.711 543.668 cv
367.883 543.527 368.02 543.352 368.113 543.141 cv
368.207 542.934 368.254 542.699 368.254 542.434 cv
368.254 542.152 368.188 541.906 368.059 541.699 cv
367.926 541.5 367.754 541.324 367.543 541.168 cv
367.328 541.02 367.086 540.879 366.813 540.746 cv
366.539 540.621 366.258 540.488 365.977 540.355 cv
365.688 540.223 365.41 540.078 365.141 539.914 cv
364.871 539.758 364.629 539.566 364.418 539.348 cv
364.199 539.129 364.027 538.875 363.898 538.578 cv
363.762 538.289 363.695 537.937 363.699 537.523 cv
363.695 537.105 363.773 536.73 363.93 536.398 cv
364.082 536.07 364.293 535.793 364.57 535.566 cv
364.84 535.348 365.164 535.176 365.543 535.059 cv
365.918 534.941 366.328 534.883 366.766 534.883 cv
366.984 534.883 367.207 534.902 367.438 534.941 cv
367.66 534.98 367.871 535.031 368.074 535.094 cv
368.27 535.16 368.449 535.234 368.609 535.312 cv
368.762 535.395 368.863 535.461 368.918 535.508 cv
368.965 535.562 369 535.602 369.016 535.625 cv
369.031 535.656 369.043 535.691 369.055 535.734 cv
369.063 535.781 369.07 535.836 369.078 535.895 cv
369.082 535.961 369.086 536.039 369.086 536.137 cv
369.086 536.23 369.082 536.316 369.074 536.387 cv
369.066 536.465 369.055 536.523 369.039 536.57 cv
369.023 536.617 369 536.652 368.973 536.676 cv
368.941 536.699 368.91 536.711 368.875 536.711 cv
368.816 536.711 368.727 536.676 368.605 536.605 cv
368.48 536.535 368.328 536.453 368.156 536.359 cv
367.977 536.27 367.77 536.187 367.531 536.109 cv
367.285 536.035 367.016 535.996 366.719 535.996 cv
366.438 535.996 366.191 536.035 365.984 536.109 cv
365.773 536.187 365.602 536.289 365.469 536.41 cv
365.332 536.535 365.23 536.68 365.164 536.852 cv
365.098 537.023 365.066 537.207 365.066 537.398 cv
365.066 537.684 365.129 537.926 365.258 538.125 cv
365.387 538.328 365.559 538.508 365.777 538.66 cv
365.988 538.82 366.234 538.961 366.512 539.09 cv
366.785 539.223 367.066 539.355 367.355 539.484 cv
367.641 539.617 367.922 539.762 368.195 539.918 cv
368.469 540.078 368.715 540.266 368.934 540.48 cv
369.148 540.699 369.32 540.953 369.457 541.246 cv
369.586 541.539 369.652 541.887 369.656 542.285 cv
cp
f
377.422 544.918 mo
377.418 544.965 377.41 545 377.395 545.023 cv
377.375 545.055 377.34 545.078 377.297 545.098 cv
377.25 545.117 377.191 545.129 377.117 545.145 cv
377.039 545.152 376.945 545.16 376.84 545.16 cv
376.715 545.16 376.617 545.152 376.547 545.145 cv
376.469 545.129 376.41 545.117 376.367 545.098 cv
376.32 545.078 376.289 545.055 376.277 545.023 cv
376.258 545 376.25 544.965 376.254 544.918 cv
376.254 543.992 li
375.852 544.437 375.457 544.758 375.07 544.957 cv
374.676 545.16 374.281 545.258 373.887 545.262 cv
373.414 545.258 373.02 545.184 372.703 545.027 cv
372.383 544.875 372.125 544.664 371.93 544.395 cv
371.727 544.129 371.586 543.816 371.504 543.457 cv
371.414 543.102 371.371 542.668 371.375 542.16 cv
371.375 537.906 li
371.371 537.867 371.379 537.832 371.402 537.801 cv
371.418 537.773 371.453 537.75 371.508 537.723 cv
371.555 537.703 371.625 537.687 371.711 537.676 cv
371.793 537.672 371.895 537.668 372.023 537.664 cv
372.145 537.668 372.25 537.672 372.336 537.676 cv
372.418 537.687 372.484 537.703 372.531 537.723 cv
372.578 537.75 372.613 537.773 372.637 537.801 cv
372.656 537.832 372.664 537.867 372.668 537.906 cv
372.668 541.988 li
372.664 542.402 372.695 542.73 372.758 542.977 cv
372.816 543.223 372.906 543.434 373.031 543.605 cv
373.148 543.785 373.305 543.918 373.496 544.012 cv
373.68 544.109 373.898 544.16 374.148 544.156 cv
374.469 544.16 374.789 544.043 375.113 543.812 cv
375.43 543.586 375.77 543.25 376.129 542.805 cv
376.129 537.906 li
376.129 537.867 376.137 537.832 376.156 537.801 cv
376.172 537.773 376.207 537.75 376.262 537.723 cv
376.313 537.703 376.379 537.687 376.461 537.676 cv
376.539 537.672 376.645 537.668 376.777 537.664 cv
376.898 537.668 377.004 537.672 377.09 537.676 cv
377.172 537.687 377.234 537.703 377.281 537.723 cv
377.324 537.75 377.359 537.773 377.387 537.801 cv
377.406 537.832 377.418 537.867 377.422 537.906 cv
cp
f
386.277 541.316 mo
386.273 541.926 386.207 542.477 386.078 542.961 cv
385.941 543.449 385.746 543.863 385.492 544.203 cv
385.234 544.547 384.918 544.809 384.547 544.988 cv
384.172 545.172 383.746 545.258 383.262 545.262 cv
383.035 545.258 382.828 545.238 382.641 545.195 cv
382.453 545.148 382.266 545.078 382.086 544.98 cv
381.898 544.883 381.719 544.758 381.539 544.605 cv
381.355 544.457 381.164 544.277 380.965 544.062 cv
380.965 544.918 li
380.965 544.965 380.953 545 380.934 545.027 cv
380.91 545.062 380.875 545.086 380.832 545.102 cv
380.781 545.117 380.723 545.129 380.656 545.145 cv
380.582 545.152 380.492 545.16 380.387 545.16 cv
380.277 545.16 380.191 545.152 380.121 545.145 cv
380.047 545.129 379.984 545.117 379.941 545.102 cv
379.891 545.086 379.859 545.062 379.848 545.027 cv
379.828 545 379.82 544.965 379.824 544.918 cv
379.824 534.508 li
379.82 534.469 379.832 534.434 379.852 534.398 cv
379.867 534.371 379.898 534.344 379.953 534.32 cv
380 534.301 380.066 534.285 380.152 534.273 cv
380.23 534.266 380.336 534.262 380.465 534.258 cv
380.594 534.262 380.699 534.266 380.785 534.273 cv
380.863 534.285 380.93 534.301 380.977 534.32 cv
381.023 534.344 381.055 534.371 381.078 534.398 cv
381.094 534.434 381.105 534.469 381.109 534.508 cv
381.109 538.707 li
381.316 538.496 381.52 538.316 381.715 538.172 cv
381.91 538.027 382.098 537.91 382.285 537.816 cv
382.469 537.73 382.656 537.664 382.848 537.617 cv
383.031 537.578 383.23 537.555 383.441 537.555 cv
383.945 537.555 384.379 537.656 384.746 537.859 cv
385.105 538.062 385.398 538.336 385.625 538.672 cv
385.848 539.016 386.016 539.414 386.121 539.871 cv
386.223 540.328 386.273 540.809 386.277 541.316 cv
cp
384.945 541.465 mo
384.941 541.109 384.914 540.762 384.863 540.422 cv
384.805 540.086 384.711 539.789 384.574 539.527 cv
384.438 539.27 384.258 539.059 384.035 538.898 cv
383.809 538.742 383.527 538.664 383.195 538.66 cv
383.027 538.664 382.863 538.687 382.703 538.73 cv
382.539 538.781 382.375 538.859 382.207 538.965 cv
382.039 539.078 381.863 539.219 381.688 539.387 cv
381.504 539.562 381.313 539.777 381.109 540.031 cv
381.109 542.828 li
381.465 543.262 381.805 543.594 382.129 543.816 cv
382.453 544.047 382.789 544.16 383.141 544.156 cv
383.461 544.16 383.738 544.082 383.973 543.922 cv
384.199 543.77 384.387 543.562 384.531 543.301 cv
384.676 543.047 384.781 542.758 384.848 542.437 cv
384.91 542.121 384.941 541.797 384.945 541.465 cv
cp
f
391.398 541.18 mo
391.398 541.383 391.375 541.52 391.328 541.598 cv
391.281 541.676 391.211 541.715 391.125 541.715 cv
387.867 541.715 li
387.773 541.715 387.707 541.676 387.66 541.594 cv
387.613 541.516 387.59 541.379 387.59 541.18 cv
387.59 540.984 387.613 540.844 387.66 540.766 cv
387.707 540.687 387.773 540.648 387.867 540.648 cv
391.125 540.648 li
391.164 540.648 391.203 540.656 391.238 540.672 cv
391.27 540.687 391.297 540.719 391.324 540.762 cv
391.344 540.809 391.363 540.863 391.379 540.93 cv
391.391 541 391.398 541.086 391.398 541.18 cv
cp
f
394.648 544.91 mo
394.645 544.953 394.637 544.988 394.617 545.02 cv
394.594 545.051 394.555 545.078 394.508 545.094 cv
394.453 545.113 394.387 545.125 394.301 545.141 cv
394.215 545.152 394.105 545.16 393.98 545.16 cv
393.852 545.16 393.746 545.152 393.66 545.141 cv
393.57 545.125 393.5 545.113 393.449 545.094 cv
393.395 545.078 393.359 545.051 393.34 545.02 cv
393.316 544.988 393.305 544.953 393.309 544.91 cv
393.309 535.23 li
393.305 535.191 393.316 535.156 393.344 535.121 cv
393.363 535.094 393.402 535.066 393.461 535.047 cv
393.512 535.031 393.582 535.016 393.672 535 cv
393.754 534.988 393.855 534.984 393.98 534.98 cv
394.105 534.984 394.215 534.988 394.301 535 cv
394.387 535.016 394.453 535.031 394.508 535.047 cv
394.555 535.066 394.594 535.094 394.617 535.121 cv
394.637 535.156 394.645 535.191 394.648 535.23 cv
cp
f
407.637 544.918 mo
407.633 544.965 407.625 545 407.605 545.023 cv
407.582 545.055 407.547 545.078 407.504 545.098 cv
407.453 545.117 407.387 545.129 407.309 545.145 cv
407.223 545.152 407.121 545.16 406.996 545.16 cv
406.863 545.16 406.754 545.152 406.676 545.145 cv
406.59 545.129 406.523 545.117 406.477 545.098 cv
406.422 545.078 406.387 545.055 406.371 545.023 cv
406.348 545 406.34 544.965 406.34 544.918 cv
406.34 540.656 li
406.34 540.363 406.313 540.094 406.262 539.848 cv
406.207 539.605 406.125 539.395 406.012 539.215 cv
405.898 539.039 405.754 538.902 405.578 538.809 cv
405.398 538.715 405.188 538.668 404.953 538.668 cv
404.656 538.668 404.359 538.785 404.063 539.012 cv
403.758 539.246 403.43 539.578 403.074 540.016 cv
403.074 544.918 li
403.07 544.965 403.059 545 403.043 545.023 cv
403.02 545.055 402.988 545.078 402.941 545.098 cv
402.891 545.117 402.824 545.129 402.742 545.145 cv
402.656 545.152 402.551 545.16 402.43 545.16 cv
402.309 545.16 402.207 545.152 402.121 545.145 cv
402.035 545.129 401.965 545.117 401.918 545.098 cv
401.863 545.078 401.832 545.055 401.816 545.023 cv
401.797 545 401.785 544.965 401.789 544.918 cv
401.789 540.656 li
401.785 540.363 401.758 540.094 401.703 539.848 cv
401.645 539.605 401.559 539.395 401.445 539.215 cv
401.332 539.039 401.188 538.902 401.016 538.809 cv
400.836 538.715 400.629 538.668 400.395 538.668 cv
400.094 538.668 399.797 538.785 399.496 539.012 cv
399.195 539.246 398.867 539.578 398.516 540.016 cv
398.516 544.918 li
398.512 544.965 398.5 545 398.484 545.023 cv
398.461 545.055 398.43 545.078 398.383 545.098 cv
398.336 545.117 398.27 545.129 398.191 545.145 cv
398.105 545.152 398 545.16 397.871 545.16 cv
397.742 545.16 397.637 545.152 397.559 545.145 cv
397.473 545.129 397.406 545.117 397.359 545.098 cv
397.305 545.078 397.273 545.055 397.258 545.023 cv
397.238 545 397.227 544.965 397.23 544.918 cv
397.23 537.906 li
397.227 537.867 397.234 537.832 397.254 537.801 cv
397.266 537.773 397.297 537.75 397.348 537.723 cv
397.391 537.703 397.453 537.687 397.527 537.676 cv
397.598 537.672 397.691 537.668 397.816 537.664 cv
397.926 537.668 398.023 537.672 398.102 537.676 cv
398.176 537.687 398.234 537.703 398.277 537.723 cv
398.316 537.75 398.344 537.773 398.363 537.801 cv
398.379 537.832 398.387 537.867 398.391 537.906 cv
398.391 538.832 li
398.781 538.391 399.164 538.07 399.539 537.863 cv
399.906 537.66 400.285 537.555 400.668 537.555 cv
400.957 537.555 401.215 537.59 401.449 537.656 cv
401.676 537.727 401.883 537.82 402.063 537.941 cv
402.238 538.062 402.387 538.207 402.516 538.375 cv
402.637 538.547 402.742 538.738 402.828 538.941 cv
403.059 538.691 403.281 538.477 403.492 538.297 cv
403.703 538.125 403.906 537.98 404.102 537.867 cv
404.297 537.762 404.484 537.684 404.668 537.629 cv
404.852 537.582 405.039 537.555 405.227 537.555 cv
405.68 537.555 406.059 537.637 406.363 537.793 cv
406.668 537.957 406.914 538.168 407.109 538.43 cv
407.297 538.695 407.434 539.004 407.516 539.359 cv
407.594 539.715 407.633 540.09 407.637 540.484 cv
cp
f
415.27 544.926 mo
415.266 544.988 415.246 545.035 415.207 545.066 cv
415.164 545.098 415.105 545.121 415.035 545.137 cv
414.957 545.152 414.852 545.16 414.715 545.16 cv
414.578 545.16 414.469 545.152 414.391 545.137 cv
414.305 545.121 414.246 545.098 414.215 545.066 cv
414.176 545.035 414.16 544.988 414.164 544.926 cv
414.164 544.227 li
413.855 544.555 413.512 544.809 413.137 544.988 cv
412.758 545.172 412.359 545.258 411.941 545.262 cv
411.566 545.258 411.234 545.211 410.938 545.117 cv
410.641 545.02 410.387 544.883 410.176 544.699 cv
409.965 544.52 409.801 544.297 409.684 544.031 cv
409.566 543.77 409.508 543.469 409.512 543.125 cv
409.508 542.734 409.586 542.391 409.75 542.098 cv
409.906 541.809 410.141 541.566 410.445 541.375 cv
410.746 541.184 411.113 541.039 411.551 540.941 cv
411.984 540.848 412.477 540.801 413.023 540.797 cv
413.992 540.797 li
413.992 540.25 li
413.988 539.98 413.961 539.742 413.906 539.535 cv
413.848 539.328 413.754 539.156 413.629 539.016 cv
413.496 538.879 413.332 538.773 413.133 538.703 cv
412.926 538.633 412.676 538.598 412.387 538.598 cv
412.066 538.598 411.781 538.637 411.531 538.711 cv
411.273 538.789 411.055 538.871 410.867 538.961 cv
410.68 539.055 410.52 539.141 410.395 539.211 cv
410.262 539.289 410.168 539.324 410.109 539.324 cv
410.066 539.324 410.031 539.316 410 539.293 cv
409.969 539.277 409.941 539.246 409.918 539.199 cv
409.895 539.16 409.875 539.105 409.867 539.039 cv
409.852 538.977 409.848 538.906 409.852 538.824 cv
409.848 538.699 409.855 538.594 409.879 538.516 cv
409.895 538.441 409.941 538.371 410.012 538.301 cv
410.082 538.234 410.203 538.156 410.375 538.066 cv
410.547 537.977 410.742 537.895 410.965 537.816 cv
411.188 537.746 411.434 537.684 411.699 537.629 cv
411.965 537.582 412.23 537.555 412.504 537.555 cv
413.004 537.555 413.434 537.613 413.785 537.727 cv
414.137 537.844 414.422 538.012 414.645 538.23 cv
414.859 538.453 415.02 538.727 415.121 539.051 cv
415.219 539.383 415.266 539.766 415.27 540.195 cv
cp
413.992 541.723 mo
412.891 541.723 li
412.535 541.727 412.23 541.758 411.973 541.812 cv
411.711 541.875 411.496 541.961 411.324 542.078 cv
411.152 542.195 411.027 542.336 410.949 542.5 cv
410.867 542.664 410.824 542.852 410.828 543.062 cv
410.824 543.43 410.941 543.723 411.172 543.934 cv
411.402 544.152 411.727 544.258 412.145 544.258 cv
412.48 544.258 412.793 544.172 413.082 544 cv
413.371 543.828 413.672 543.566 413.992 543.211 cv
cp
f
423.488 538.223 mo
423.484 538.406 423.461 538.539 423.414 538.617 cv
423.363 538.699 423.301 538.738 423.227 538.738 cv
422.219 538.738 li
422.398 538.926 422.527 539.133 422.602 539.359 cv
422.672 539.586 422.707 539.82 422.711 540.062 cv
422.707 540.469 422.641 540.828 422.516 541.141 cv
422.383 541.453 422.199 541.719 421.957 541.93 cv
421.715 542.148 421.426 542.312 421.098 542.426 cv
420.762 542.543 420.395 542.602 419.992 542.598 cv
419.703 542.602 419.43 542.562 419.176 542.484 cv
418.914 542.41 418.719 542.316 418.582 542.199 cv
418.488 542.297 418.41 542.402 418.352 542.52 cv
418.289 542.641 418.258 542.777 418.262 542.93 cv
418.258 543.113 418.344 543.266 418.516 543.383 cv
418.684 543.508 418.906 543.57 419.188 543.578 cv
421.02 543.656 li
421.367 543.668 421.684 543.715 421.977 543.801 cv
422.266 543.887 422.52 544.012 422.734 544.168 cv
422.945 544.328 423.113 544.52 423.234 544.75 cv
423.352 544.984 423.41 545.254 423.414 545.559 cv
423.41 545.879 423.344 546.184 423.211 546.477 cv
423.074 546.766 422.867 547.02 422.59 547.242 cv
422.309 547.461 421.953 547.637 421.523 547.766 cv
421.094 547.891 420.586 547.953 420 547.957 cv
419.43 547.953 418.945 547.906 418.551 547.812 cv
418.152 547.715 417.828 547.582 417.574 547.418 cv
417.32 547.25 417.137 547.055 417.023 546.824 cv
416.906 546.59 416.848 546.336 416.852 546.07 cv
416.848 545.898 416.867 545.734 416.914 545.574 cv
416.953 545.41 417.016 545.258 417.102 545.113 cv
417.184 544.969 417.293 544.832 417.422 544.695 cv
417.547 544.566 417.691 544.434 417.863 544.305 cv
417.605 544.176 417.418 544.012 417.297 543.812 cv
417.176 543.617 417.117 543.406 417.117 543.172 cv
417.117 542.859 417.18 542.574 417.309 542.324 cv
417.438 542.074 417.598 541.852 417.793 541.652 cv
417.629 541.461 417.504 541.246 417.41 541.004 cv
417.316 540.766 417.27 540.473 417.27 540.125 cv
417.27 539.73 417.336 539.371 417.473 539.051 cv
417.605 538.734 417.793 538.469 418.035 538.25 cv
418.273 538.035 418.559 537.867 418.895 537.746 cv
419.227 537.633 419.594 537.574 419.992 537.57 cv
420.203 537.574 420.402 537.586 420.586 537.605 cv
420.77 537.633 420.941 537.664 421.105 537.703 cv
423.227 537.703 li
423.313 537.707 423.379 537.75 423.422 537.832 cv
423.465 537.922 423.484 538.051 423.488 538.223 cv
cp
421.48 540.07 mo
421.477 539.598 421.344 539.227 421.086 538.953 cv
420.82 538.687 420.449 538.551 419.969 538.551 cv
419.715 538.551 419.496 538.594 419.316 538.676 cv
419.129 538.762 418.977 538.875 418.855 539.02 cv
418.734 539.168 418.645 539.336 418.586 539.523 cv
418.523 539.711 418.492 539.91 418.496 540.117 cv
418.492 540.582 418.625 540.945 418.887 541.211 cv
419.148 541.477 419.516 541.609 419.992 541.605 cv
420.242 541.609 420.461 541.57 420.652 541.484 cv
420.836 541.406 420.992 541.293 421.117 541.152 cv
421.238 541.012 421.328 540.848 421.391 540.656 cv
421.445 540.473 421.477 540.277 421.48 540.07 cv
cp
422.125 545.629 mo
422.121 545.324 421.996 545.094 421.754 544.93 cv
421.504 544.77 421.172 544.68 420.754 544.668 cv
418.938 544.605 li
418.77 544.738 418.633 544.863 418.531 544.977 cv
418.422 545.094 418.34 545.203 418.277 545.312 cv
418.215 545.418 418.172 545.523 418.148 545.629 cv
418.125 545.73 418.113 545.836 418.113 545.945 cv
418.113 546.281 418.281 546.535 418.625 546.715 cv
418.965 546.887 419.445 546.977 420.063 546.977 cv
420.449 546.977 420.773 546.937 421.039 546.863 cv
421.297 546.785 421.508 546.684 421.672 546.562 cv
421.828 546.434 421.945 546.293 422.02 546.133 cv
422.086 545.973 422.121 545.805 422.125 545.629 cv
cp
f
431.082 541.109 mo
431.078 541.312 431.027 541.453 430.93 541.539 cv
430.824 541.625 430.707 541.668 430.582 541.668 cv
425.965 541.668 li
425.961 542.059 426 542.41 426.082 542.723 cv
426.156 543.035 426.289 543.305 426.473 543.523 cv
426.652 543.75 426.887 543.922 427.184 544.039 cv
427.473 544.164 427.832 544.223 428.258 544.219 cv
428.59 544.223 428.887 544.195 429.148 544.137 cv
429.41 544.086 429.637 544.023 429.828 543.953 cv
430.016 543.887 430.172 543.828 430.297 543.77 cv
430.418 543.719 430.512 543.691 430.574 543.687 cv
430.609 543.691 430.641 543.699 430.672 543.715 cv
430.699 543.734 430.723 543.762 430.742 543.797 cv
430.754 543.836 430.766 543.887 430.777 543.949 cv
430.781 544.016 430.785 544.094 430.789 544.187 cv
430.785 544.258 430.781 544.316 430.781 544.363 cv
430.773 544.41 430.77 544.453 430.762 544.492 cv
430.754 544.531 430.738 544.566 430.723 544.598 cv
430.699 544.629 430.676 544.66 430.652 544.687 cv
430.621 544.719 430.539 544.766 430.398 544.828 cv
430.258 544.895 430.074 544.957 429.852 545.02 cv
429.625 545.082 429.367 545.137 429.074 545.187 cv
428.781 545.234 428.469 545.258 428.137 545.262 cv
427.559 545.258 427.051 545.18 426.621 545.02 cv
426.184 544.859 425.82 544.621 425.527 544.305 cv
425.227 543.988 425.004 543.594 424.855 543.113 cv
424.707 542.637 424.633 542.078 424.633 541.441 cv
424.633 540.844 424.707 540.305 424.863 539.82 cv
425.016 539.344 425.242 538.934 425.539 538.598 cv
425.832 538.262 426.188 538.004 426.602 537.824 cv
427.016 537.645 427.48 537.555 427.996 537.555 cv
428.547 537.555 429.016 537.645 429.402 537.82 cv
429.789 538 430.105 538.238 430.359 538.535 cv
430.605 538.836 430.789 539.187 430.906 539.586 cv
431.02 539.992 431.078 540.422 431.082 540.875 cv
cp
429.789 540.727 mo
429.805 540.051 429.652 539.52 429.336 539.137 cv
429.02 538.754 428.551 538.562 427.934 538.559 cv
427.609 538.562 427.328 538.621 427.09 538.738 cv
426.848 538.859 426.648 539.02 426.488 539.215 cv
426.324 539.414 426.199 539.645 426.113 539.906 cv
426.023 540.168 425.973 540.441 425.965 540.727 cv
cp
f
437.449 543.008 mo
437.445 543.371 437.379 543.691 437.25 543.969 cv
437.117 544.25 436.93 544.484 436.688 544.676 cv
436.441 544.871 436.148 545.016 435.813 545.113 cv
435.473 545.211 435.102 545.258 434.699 545.262 cv
434.445 545.258 434.207 545.238 433.984 545.203 cv
433.758 545.16 433.559 545.113 433.379 545.055 cv
433.199 544.996 433.047 544.934 432.922 544.867 cv
432.797 544.805 432.703 544.746 432.648 544.691 cv
432.59 544.641 432.551 544.57 432.527 544.473 cv
432.5 544.383 432.488 544.254 432.488 544.094 cv
432.488 543.996 432.492 543.914 432.504 543.844 cv
432.512 543.777 432.523 543.723 432.543 543.68 cv
432.555 543.641 432.578 543.609 432.605 543.59 cv
432.633 543.574 432.664 543.566 432.703 543.562 cv
432.758 543.566 432.844 543.602 432.957 543.668 cv
433.066 543.742 433.203 543.82 433.371 543.898 cv
433.531 543.984 433.723 544.059 433.949 544.129 cv
434.168 544.199 434.426 544.234 434.723 544.234 cv
434.938 544.234 435.137 544.211 435.316 544.164 cv
435.492 544.117 435.645 544.051 435.773 543.957 cv
435.902 543.871 436.004 543.754 436.074 543.609 cv
436.145 543.473 436.18 543.305 436.18 543.109 cv
436.18 542.914 436.129 542.75 436.027 542.613 cv
435.926 542.48 435.789 542.359 435.625 542.254 cv
435.457 542.152 435.273 542.062 435.066 541.977 cv
434.855 541.898 434.641 541.812 434.422 541.723 cv
434.203 541.637 433.988 541.535 433.777 541.422 cv
433.566 541.312 433.375 541.18 433.211 541.016 cv
433.039 540.859 432.906 540.664 432.809 540.437 cv
432.703 540.215 432.652 539.949 432.656 539.637 cv
432.652 539.363 432.707 539.098 432.816 538.844 cv
432.922 538.594 433.082 538.375 433.297 538.184 cv
433.508 537.996 433.773 537.844 434.094 537.727 cv
434.414 537.613 434.785 537.555 435.215 537.555 cv
435.398 537.555 435.586 537.57 435.773 537.602 cv
435.957 537.633 436.125 537.672 436.281 537.719 cv
436.43 537.766 436.559 537.816 436.668 537.871 cv
436.77 537.926 436.852 537.977 436.91 538.016 cv
436.961 538.062 436.996 538.098 437.02 538.125 cv
437.035 538.156 437.051 538.191 437.059 538.227 cv
437.066 538.27 437.074 538.316 437.082 538.371 cv
437.09 538.43 437.094 538.5 437.094 538.582 cv
437.094 538.672 437.09 538.75 437.082 538.812 cv
437.074 538.883 437.059 538.934 437.043 538.973 cv
437.02 539.016 437 539.047 436.977 539.062 cv
436.949 539.082 436.918 539.09 436.891 539.09 cv
436.84 539.09 436.773 539.062 436.688 539.004 cv
436.598 538.949 436.484 538.887 436.344 538.82 cv
436.203 538.758 436.035 538.699 435.848 538.637 cv
435.656 538.582 435.441 538.551 435.199 538.551 cv
434.977 538.551 434.785 538.578 434.621 538.625 cv
434.453 538.68 434.316 538.75 434.211 538.836 cv
434.105 538.93 434.023 539.035 433.973 539.16 cv
433.914 539.285 433.887 539.422 433.891 539.566 cv
433.887 539.77 433.938 539.937 434.043 540.074 cv
434.145 540.215 434.281 540.336 434.449 540.437 cv
434.613 540.543 434.805 540.637 435.02 540.719 cv
435.23 540.805 435.445 540.891 435.668 540.977 cv
435.887 541.066 436.105 541.168 436.324 541.273 cv
436.539 541.383 436.73 541.512 436.898 541.668 cv
437.063 541.824 437.195 542.012 437.297 542.23 cv
437.395 542.449 437.445 542.711 437.449 543.008 cv
cp
f
244.371 15.934 mo
244.43 16.125 244.469 16.273 244.488 16.379 cv
244.5 16.492 244.48 16.574 244.426 16.625 cv
244.367 16.68 244.266 16.711 244.121 16.727 cv
243.973 16.738 243.773 16.746 243.523 16.746 cv
243.254 16.746 243.047 16.742 242.902 16.734 cv
242.75 16.727 242.637 16.711 242.563 16.687 cv
242.48 16.664 242.426 16.633 242.398 16.59 cv
242.363 16.551 242.336 16.496 242.32 16.426 cv
241.645 14.398 li
237.855 14.398 li
237.219 16.371 li
237.195 16.445 237.168 16.508 237.137 16.555 cv
237.102 16.605 237.047 16.645 236.973 16.672 cv
236.895 16.699 236.789 16.715 236.652 16.73 cv
236.512 16.738 236.328 16.746 236.109 16.746 cv
235.867 16.746 235.684 16.738 235.551 16.723 cv
235.414 16.707 235.32 16.672 235.27 16.609 cv
235.215 16.555 235.195 16.469 235.215 16.355 cv
235.227 16.25 235.266 16.105 235.332 15.918 cv
238.441 6.97302 li
238.469 6.88702 238.508 6.81598 238.551 6.758 cv
238.59 6.70697 238.656 6.664 238.75 6.633 cv
238.84 6.60498 238.965 6.59003 239.125 6.578 cv
239.285 6.57397 239.496 6.57001 239.766 6.56598 cv
240.07 6.57001 240.316 6.57397 240.496 6.578 cv
240.676 6.59003 240.816 6.60498 240.922 6.633 cv
241.02 6.664 241.094 6.70697 241.141 6.76202 cv
241.184 6.82001 241.219 6.89801 241.254 6.99597 cv
cp
239.742 8.539 mo
239.734 8.539 li
238.309 12.824 li
241.168 12.824 li
cp
f
251.742 9.47699 mo
251.738 9.50403 251.738 9.53497 251.738 9.57001 cv
251.734 9.60901 251.73 9.64801 251.723 9.69098 cv
251.715 9.73401 251.703 9.78497 251.691 9.84003 cv
251.676 9.89801 251.66 9.96503 251.641 10.035 cv
249.555 16.324 li
249.527 16.414 249.492 16.488 249.449 16.539 cv
249.402 16.598 249.328 16.641 249.23 16.668 cv
249.125 16.699 248.988 16.715 248.816 16.73 cv
248.641 16.738 248.414 16.746 248.137 16.746 cv
247.859 16.746 247.633 16.738 247.461 16.727 cv
247.285 16.711 247.148 16.691 247.051 16.66 cv
246.949 16.633 246.879 16.59 246.836 16.531 cv
246.789 16.48 246.754 16.41 246.73 16.324 cv
244.645 10.035 li
244.613 9.93402 244.586 9.84003 244.57 9.758 cv
244.547 9.67603 244.539 9.617 244.539 9.578 cv
244.535 9.547 244.531 9.51202 244.535 9.47699 cv
244.531 9.42603 244.547 9.37903 244.578 9.34003 cv
244.605 9.30103 244.656 9.27002 244.73 9.242 cv
244.801 9.21899 244.898 9.19897 245.027 9.18701 cv
245.152 9.17999 245.313 9.17603 245.508 9.172 cv
245.719 9.17603 245.891 9.18402 246.023 9.19098 cv
246.148 9.20697 246.254 9.22302 246.332 9.24597 cv
246.406 9.27002 246.457 9.30499 246.492 9.34802 cv
246.52 9.39502 246.547 9.44897 246.57 9.508 cv
248.152 14.609 li
248.199 14.805 li
248.246 14.609 li
249.805 9.508 li
249.816 9.44897 249.84 9.39502 249.875 9.34802 cv
249.906 9.30499 249.961 9.27002 250.035 9.24597 cv
250.105 9.22302 250.203 9.20697 250.328 9.19098 cv
250.449 9.18402 250.609 9.17603 250.809 9.172 cv
251 9.17603 251.156 9.17999 251.277 9.18701 cv
251.398 9.19897 251.492 9.21899 251.563 9.242 cv
251.629 9.27002 251.676 9.30103 251.703 9.34003 cv
251.727 9.37903 251.738 9.42603 251.742 9.47699 cv
cp
f
259.203 12.758 mo
259.199 12.996 259.148 13.172 259.043 13.285 cv
258.934 13.402 258.785 13.461 258.605 13.457 cv
254.371 13.457 li
254.367 13.758 254.402 14.027 254.477 14.266 cv
254.543 14.508 254.656 14.711 254.813 14.879 cv
254.965 15.051 255.16 15.18 255.402 15.266 cv
255.641 15.355 255.93 15.398 256.273 15.398 cv
256.613 15.398 256.914 15.375 257.176 15.324 cv
257.434 15.277 257.66 15.223 257.852 15.16 cv
258.039 15.102 258.195 15.047 258.324 14.996 cv
258.445 14.949 258.547 14.926 258.629 14.922 cv
258.672 14.926 258.711 14.934 258.746 14.949 cv
258.773 14.969 258.801 15 258.82 15.047 cv
258.84 15.094 258.852 15.16 258.863 15.246 cv
258.867 15.332 258.871 15.441 258.875 15.57 cv
258.871 15.687 258.871 15.785 258.867 15.863 cv
258.859 15.945 258.852 16.012 258.844 16.066 cv
258.832 16.125 258.816 16.176 258.797 16.211 cv
258.777 16.254 258.75 16.289 258.719 16.324 cv
258.684 16.363 258.59 16.414 258.441 16.473 cv
258.285 16.539 258.094 16.602 257.863 16.656 cv
257.625 16.719 257.355 16.766 257.059 16.812 cv
256.754 16.852 256.434 16.875 256.094 16.879 cv
255.473 16.875 254.93 16.801 254.469 16.645 cv
254 16.492 253.613 16.254 253.305 15.937 cv
252.988 15.621 252.754 15.223 252.605 14.738 cv
252.449 14.258 252.375 13.691 252.379 13.035 cv
252.375 12.422 252.453 11.863 252.617 11.367 cv
252.773 10.871 253.008 10.453 253.32 10.105 cv
253.625 9.76202 254 9.49597 254.438 9.31201 cv
254.875 9.133 255.367 9.04303 255.922 9.039 cv
256.5 9.04303 257 9.12903 257.414 9.297 cv
257.828 9.47302 258.164 9.711 258.43 10.012 cv
258.691 10.316 258.887 10.676 259.016 11.09 cv
259.137 11.508 259.199 11.957 259.203 12.445 cv
cp
257.301 12.195 mo
257.313 11.645 257.203 11.211 256.969 10.898 cv
256.734 10.586 256.367 10.43 255.875 10.426 cv
255.625 10.43 255.41 10.477 255.227 10.566 cv
255.039 10.664 254.887 10.789 254.766 10.945 cv
254.641 11.105 254.547 11.293 254.484 11.508 cv
254.418 11.723 254.379 11.953 254.371 12.195 cv
cp
f
265.277 10.129 mo
265.277 10.32 265.27 10.473 265.262 10.59 cv
265.246 10.711 265.23 10.805 265.215 10.871 cv
265.191 10.941 265.164 10.988 265.133 11.012 cv
265.094 11.039 265.051 11.051 265.004 11.051 cv
264.957 11.051 264.91 11.043 264.863 11.023 cv
264.809 11.008 264.75 10.988 264.688 10.965 cv
264.617 10.945 264.547 10.926 264.473 10.906 cv
264.391 10.891 264.305 10.883 264.215 10.879 cv
264.102 10.883 263.992 10.902 263.887 10.945 cv
263.777 10.992 263.664 11.062 263.551 11.152 cv
263.43 11.246 263.309 11.371 263.184 11.523 cv
263.055 11.684 262.918 11.875 262.773 12.102 cv
262.773 16.434 li
262.77 16.488 262.754 16.531 262.727 16.57 cv
262.691 16.609 262.637 16.645 262.566 16.668 cv
262.488 16.695 262.391 16.711 262.266 16.727 cv
262.141 16.738 261.98 16.746 261.793 16.746 cv
261.598 16.746 261.441 16.738 261.316 16.727 cv
261.191 16.711 261.09 16.695 261.016 16.668 cv
260.938 16.645 260.883 16.609 260.855 16.57 cv
260.82 16.531 260.805 16.488 260.809 16.434 cv
260.809 9.48401 li
260.805 9.43701 260.82 9.39099 260.848 9.34802 cv
260.871 9.31201 260.918 9.28101 260.988 9.25 cv
261.055 9.22699 261.141 9.20697 261.25 9.19098 cv
261.355 9.18402 261.488 9.17603 261.652 9.172 cv
261.816 9.17603 261.953 9.18402 262.063 9.19098 cv
262.168 9.20697 262.254 9.22699 262.316 9.25 cv
262.375 9.28101 262.418 9.31201 262.445 9.34802 cv
262.469 9.39099 262.48 9.43701 262.484 9.48401 cv
262.484 10.348 li
262.664 10.09 262.836 9.87903 263 9.70697 cv
263.156 9.54303 263.313 9.40601 263.461 9.30499 cv
263.605 9.20697 263.75 9.14099 263.895 9.09802 cv
264.039 9.06201 264.184 9.04303 264.332 9.039 cv
264.398 9.04303 264.473 9.047 264.551 9.05103 cv
264.629 9.06201 264.707 9.07397 264.793 9.09003 cv
264.871 9.10901 264.945 9.12903 265.012 9.15198 cv
265.07 9.17603 265.117 9.203 265.148 9.22699 cv
265.176 9.258 265.195 9.28497 265.211 9.31201 cv
265.223 9.34802 265.234 9.39099 265.246 9.44098 cv
265.254 9.5 265.262 9.58197 265.27 9.68701 cv
265.273 9.797 265.277 9.94501 265.277 10.129 cv
cp
f
272.031 16.457 mo
272.027 16.535 272 16.59 271.953 16.629 cv
271.898 16.672 271.816 16.699 271.707 16.719 cv
271.59 16.734 271.426 16.746 271.211 16.746 cv
270.973 16.746 270.801 16.734 270.699 16.719 cv
270.59 16.699 270.516 16.672 270.477 16.629 cv
270.43 16.59 270.41 16.535 270.41 16.457 cv
270.41 15.906 li
270.121 16.215 269.793 16.453 269.43 16.621 cv
269.063 16.793 268.656 16.875 268.211 16.879 cv
267.84 16.875 267.5 16.828 267.191 16.734 cv
266.883 16.641 266.617 16.5 266.391 16.305 cv
266.164 16.117 265.988 15.883 265.863 15.602 cv
265.738 15.324 265.676 14.996 265.68 14.617 cv
265.676 14.219 265.754 13.867 265.914 13.562 cv
266.07 13.266 266.309 13.02 266.625 12.824 cv
266.938 12.633 267.328 12.488 267.797 12.391 cv
268.266 12.301 268.809 12.254 269.426 12.25 cv
270.105 12.25 li
270.105 11.828 li
270.105 11.613 270.082 11.422 270.039 11.258 cv
269.992 11.098 269.918 10.961 269.82 10.848 cv
269.715 10.742 269.582 10.66 269.414 10.605 cv
269.242 10.555 269.031 10.531 268.789 10.527 cv
268.457 10.531 268.164 10.566 267.91 10.637 cv
267.648 10.711 267.422 10.793 267.227 10.879 cv
267.027 10.973 266.863 11.051 266.734 11.121 cv
266.598 11.195 266.488 11.234 266.41 11.23 cv
266.348 11.234 266.297 11.215 266.258 11.176 cv
266.211 11.141 266.176 11.09 266.148 11.02 cv
266.117 10.957 266.094 10.871 266.082 10.77 cv
266.063 10.672 266.055 10.562 266.059 10.441 cv
266.055 10.281 266.07 10.156 266.098 10.059 cv
266.121 9.96899 266.168 9.883 266.246 9.80499 cv
266.316 9.72998 266.445 9.64801 266.629 9.55902 cv
266.809 9.46899 267.02 9.383 267.266 9.30499 cv
267.508 9.22699 267.777 9.164 268.066 9.11298 cv
268.355 9.06598 268.652 9.04303 268.961 9.039 cv
269.504 9.04303 269.969 9.09399 270.355 9.19897 cv
270.742 9.30902 271.063 9.47302 271.313 9.69098 cv
271.563 9.90997 271.742 10.195 271.859 10.543 cv
271.969 10.895 272.027 11.309 272.031 11.781 cv
cp
270.105 13.48 mo
269.355 13.48 li
269.039 13.484 268.77 13.508 268.547 13.551 cv
268.32 13.602 268.137 13.672 268 13.762 cv
267.855 13.859 267.754 13.973 267.691 14.102 cv
267.625 14.238 267.59 14.387 267.594 14.555 cv
267.59 14.848 267.684 15.078 267.871 15.242 cv
268.055 15.41 268.313 15.492 268.641 15.492 cv
268.914 15.492 269.164 15.422 269.398 15.281 cv
269.625 15.141 269.863 14.937 270.105 14.664 cv
cp
f
280.258 9.96503 mo
280.254 10.219 280.227 10.402 280.172 10.52 cv
280.113 10.641 280.043 10.699 279.965 10.699 cv
279.145 10.699 li
279.258 10.824 279.34 10.969 279.391 11.125 cv
279.438 11.285 279.461 11.449 279.465 11.617 cv
279.461 12.027 279.395 12.387 279.262 12.699 cv
279.125 13.016 278.93 13.281 278.68 13.492 cv
278.426 13.711 278.125 13.875 277.77 13.984 cv
277.41 14.102 277.012 14.156 276.582 14.152 cv
276.355 14.156 276.145 14.129 275.941 14.07 cv
275.738 14.02 275.582 13.957 275.473 13.879 cv
275.41 13.949 275.352 14.027 275.305 14.121 cv
275.254 14.215 275.23 14.32 275.234 14.43 cv
275.23 14.586 275.297 14.707 275.43 14.801 cv
275.559 14.898 275.746 14.953 275.988 14.961 cv
277.68 15.023 li
278.074 15.039 278.426 15.098 278.734 15.191 cv
279.043 15.293 279.305 15.426 279.516 15.598 cv
279.727 15.773 279.887 15.984 279.996 16.227 cv
280.105 16.473 280.16 16.746 280.164 17.059 cv
280.16 17.395 280.086 17.719 279.938 18.027 cv
279.789 18.328 279.563 18.59 279.262 18.816 cv
278.957 19.035 278.578 19.215 278.125 19.348 cv
277.668 19.477 277.137 19.539 276.535 19.543 cv
275.938 19.539 275.434 19.492 275.016 19.402 cv
274.598 19.305 274.254 19.176 273.988 19.012 cv
273.719 18.844 273.523 18.645 273.406 18.418 cv
273.281 18.184 273.223 17.93 273.223 17.656 cv
273.223 17.484 273.242 17.324 273.289 17.168 cv
273.328 17.012 273.395 16.859 273.484 16.719 cv
273.566 16.574 273.672 16.441 273.797 16.309 cv
273.922 16.18 274.063 16.055 274.227 15.934 cv
274 15.82 273.828 15.66 273.707 15.449 cv
273.586 15.246 273.527 15.02 273.527 14.773 cv
273.527 14.473 273.594 14.195 273.734 13.937 cv
273.871 13.687 274.055 13.457 274.281 13.254 cv
274.098 13.074 273.953 12.859 273.844 12.602 cv
273.734 12.352 273.68 12.031 273.684 11.648 cv
273.68 11.246 273.75 10.887 273.895 10.562 cv
274.035 10.246 274.234 9.97699 274.492 9.75403 cv
274.746 9.53497 275.051 9.36298 275.402 9.24597 cv
275.754 9.12903 276.145 9.07001 276.574 9.07001 cv
276.793 9.07001 277 9.086 277.199 9.10901 cv
277.398 9.14099 277.586 9.17603 277.758 9.21899 cv
279.965 9.21899 li
280.047 9.22302 280.117 9.28101 280.176 9.39099 cv
280.227 9.508 280.254 9.69897 280.258 9.96503 cv
cp
277.742 11.609 mo
277.738 11.238 277.637 10.949 277.43 10.738 cv
277.219 10.535 276.926 10.43 276.551 10.426 cv
276.355 10.43 276.184 10.461 276.043 10.523 cv
275.895 10.59 275.773 10.68 275.68 10.789 cv
275.578 10.902 275.508 11.031 275.465 11.18 cv
275.414 11.328 275.391 11.484 275.395 11.641 cv
275.391 12 275.496 12.277 275.707 12.48 cv
275.914 12.687 276.203 12.793 276.574 12.789 cv
276.77 12.793 276.938 12.762 277.086 12.695 cv
277.227 12.637 277.348 12.551 277.449 12.437 cv
277.543 12.332 277.617 12.203 277.668 12.059 cv
277.715 11.918 277.738 11.77 277.742 11.609 cv
cp
278.203 17.16 mo
278.203 16.922 278.109 16.746 277.922 16.621 cv
277.734 16.5 277.477 16.43 277.148 16.418 cv
275.754 16.379 li
275.617 16.48 275.508 16.574 275.43 16.664 cv
275.348 16.754 275.285 16.84 275.238 16.926 cv
275.188 17.008 275.152 17.09 275.141 17.168 cv
275.121 17.246 275.113 17.324 275.117 17.41 cv
275.113 17.664 275.246 17.863 275.508 18 cv
275.77 18.133 276.141 18.199 276.621 18.203 cv
276.914 18.199 277.16 18.168 277.367 18.113 cv
277.566 18.051 277.73 17.973 277.859 17.875 cv
277.98 17.773 278.07 17.664 278.125 17.543 cv
278.176 17.422 278.203 17.293 278.203 17.16 cv
cp
f
287.883 12.758 mo
287.879 12.996 287.828 13.172 287.723 13.285 cv
287.613 13.402 287.465 13.461 287.285 13.457 cv
283.051 13.457 li
283.047 13.758 283.082 14.027 283.156 14.266 cv
283.223 14.508 283.336 14.711 283.492 14.879 cv
283.645 15.051 283.84 15.18 284.082 15.266 cv
284.32 15.355 284.609 15.398 284.953 15.398 cv
285.293 15.398 285.594 15.375 285.855 15.324 cv
286.113 15.277 286.34 15.223 286.531 15.16 cv
286.719 15.102 286.875 15.047 287.004 14.996 cv
287.125 14.949 287.227 14.926 287.309 14.922 cv
287.352 14.926 287.391 14.934 287.426 14.949 cv
287.453 14.969 287.48 15 287.5 15.047 cv
287.52 15.094 287.531 15.16 287.543 15.246 cv
287.547 15.332 287.551 15.441 287.555 15.57 cv
287.551 15.687 287.551 15.785 287.547 15.863 cv
287.539 15.945 287.531 16.012 287.523 16.066 cv
287.512 16.125 287.496 16.176 287.477 16.211 cv
287.457 16.254 287.43 16.289 287.398 16.324 cv
287.363 16.363 287.27 16.414 287.121 16.473 cv
286.965 16.539 286.773 16.602 286.543 16.656 cv
286.305 16.719 286.035 16.766 285.738 16.812 cv
285.434 16.852 285.113 16.875 284.773 16.879 cv
284.152 16.875 283.609 16.801 283.148 16.645 cv
282.68 16.492 282.293 16.254 281.984 15.937 cv
281.668 15.621 281.434 15.223 281.285 14.738 cv
281.129 14.258 281.055 13.691 281.059 13.035 cv
281.055 12.422 281.133 11.863 281.297 11.367 cv
281.453 10.871 281.688 10.453 282 10.105 cv
282.305 9.76202 282.68 9.49597 283.117 9.31201 cv
283.555 9.133 284.047 9.04303 284.602 9.039 cv
285.18 9.04303 285.68 9.12903 286.094 9.297 cv
286.508 9.47302 286.844 9.711 287.109 10.012 cv
287.371 10.316 287.566 10.676 287.695 11.09 cv
287.816 11.508 287.879 11.957 287.883 12.445 cv
cp
285.98 12.195 mo
285.992 11.645 285.883 11.211 285.648 10.898 cv
285.414 10.586 285.047 10.43 284.555 10.426 cv
284.305 10.43 284.09 10.477 283.906 10.566 cv
283.719 10.664 283.566 10.789 283.445 10.945 cv
283.32 11.105 283.227 11.293 283.164 11.508 cv
283.098 11.723 283.059 11.953 283.051 12.195 cv
cp
f
298.871 7.45697 mo
298.867 7.617 298.863 7.74597 298.852 7.85199 cv
298.836 7.961 298.813 8.047 298.789 8.10498 cv
298.758 8.16803 298.727 8.21503 298.691 8.242 cv
298.652 8.27698 298.609 8.29303 298.566 8.289 cv
295.27 8.289 li
295.27 11.004 li
298.363 11.004 li
298.406 11.004 298.449 11.02 298.488 11.043 cv
298.523 11.074 298.555 11.117 298.586 11.176 cv
298.613 11.238 298.633 11.32 298.648 11.422 cv
298.656 11.527 298.664 11.656 298.668 11.812 cv
298.664 11.969 298.656 12.102 298.648 12.203 cv
298.633 12.312 298.613 12.398 298.586 12.461 cv
298.555 12.531 298.523 12.578 298.488 12.605 cv
298.449 12.637 298.406 12.652 298.363 12.648 cv
295.27 12.648 li
295.27 16.402 li
295.266 16.461 295.25 16.512 295.223 16.551 cv
295.188 16.598 295.133 16.633 295.055 16.656 cv
294.973 16.687 294.867 16.707 294.738 16.723 cv
294.605 16.738 294.438 16.746 294.242 16.746 cv
294.039 16.746 293.875 16.738 293.746 16.723 cv
293.609 16.707 293.504 16.687 293.43 16.656 cv
293.348 16.633 293.293 16.598 293.262 16.551 cv
293.227 16.512 293.207 16.461 293.211 16.402 cv
293.211 7.26202 li
293.207 7.03497 293.266 6.87097 293.387 6.76599 cv
293.5 6.66803 293.645 6.617 293.82 6.61298 cv
298.566 6.61298 li
298.609 6.617 298.652 6.62903 298.691 6.65601 cv
298.727 6.68701 298.758 6.73401 298.789 6.797 cv
298.813 6.86298 298.836 6.953 298.852 7.05902 cv
298.863 7.172 298.867 7.30499 298.871 7.45697 cv
cp
f
302.387 16.434 mo
302.383 16.488 302.367 16.531 302.34 16.57 cv
302.305 16.609 302.25 16.645 302.18 16.668 cv
302.102 16.695 302.004 16.711 301.879 16.727 cv
301.754 16.738 301.594 16.746 301.406 16.746 cv
301.211 16.746 301.055 16.738 300.93 16.727 cv
300.805 16.711 300.703 16.695 300.629 16.668 cv
300.551 16.645 300.496 16.609 300.469 16.57 cv
300.434 16.531 300.418 16.488 300.422 16.434 cv
300.422 9.5 li
300.418 9.44897 300.434 9.40198 300.469 9.36298 cv
300.496 9.32397 300.551 9.29303 300.629 9.26202 cv
300.703 9.23798 300.805 9.21503 300.93 9.19501 cv
301.055 9.18402 301.211 9.17603 301.406 9.172 cv
301.594 9.17603 301.754 9.18402 301.879 9.19501 cv
302.004 9.21503 302.102 9.23798 302.18 9.26202 cv
302.25 9.29303 302.305 9.32397 302.34 9.36298 cv
302.367 9.40198 302.383 9.44897 302.387 9.5 cv
cp
302.535 7.12903 mo
302.535 7.52698 302.453 7.80103 302.293 7.94897 cv
302.129 8.10199 301.832 8.17603 301.398 8.172 cv
300.953 8.17603 300.652 8.10199 300.504 7.95697 cv
300.348 7.81201 300.273 7.55103 300.273 7.16803 cv
300.273 6.77301 300.352 6.5 300.512 6.34802 cv
300.668 6.19501 300.969 6.117 301.414 6.117 cv
301.848 6.117 302.145 6.19098 302.301 6.34003 cv
302.457 6.48798 302.535 6.75403 302.535 7.12903 cv
cp
f
306.313 16.434 mo
306.309 16.488 306.293 16.531 306.266 16.57 cv
306.23 16.609 306.176 16.645 306.105 16.668 cv
306.027 16.695 305.93 16.711 305.805 16.727 cv
305.68 16.738 305.52 16.746 305.332 16.746 cv
305.137 16.746 304.98 16.738 304.855 16.727 cv
304.73 16.711 304.629 16.695 304.555 16.668 cv
304.477 16.645 304.422 16.609 304.395 16.57 cv
304.359 16.531 304.344 16.488 304.348 16.434 cv
304.348 6.18701 li
304.344 6.13702 304.359 6.09003 304.395 6.047 cv
304.422 6.008 304.477 5.97302 304.555 5.94098 cv
304.629 5.914 304.73 5.89502 304.855 5.875 cv
304.98 5.86298 305.137 5.85498 305.332 5.85199 cv
305.52 5.85498 305.68 5.86298 305.805 5.875 cv
305.93 5.89502 306.027 5.914 306.105 5.94098 cv
306.176 5.97302 306.23 6.008 306.266 6.047 cv
306.293 6.09003 306.309 6.13702 306.313 6.18701 cv
cp
f
312.438 15.75 mo
312.438 15.977 312.422 16.152 312.395 16.273 cv
312.363 16.398 312.324 16.484 312.281 16.531 cv
312.23 16.582 312.164 16.625 312.074 16.664 cv
311.98 16.703 311.871 16.734 311.754 16.766 cv
311.629 16.789 311.496 16.812 311.355 16.832 cv
311.211 16.844 311.07 16.852 310.926 16.855 cv
310.535 16.852 310.195 16.801 309.91 16.707 cv
309.625 16.605 309.391 16.457 309.203 16.25 cv
309.016 16.047 308.875 15.789 308.789 15.477 cv
308.695 15.168 308.652 14.797 308.656 14.367 cv
308.656 10.809 li
307.824 10.809 li
307.723 10.812 307.648 10.75 307.598 10.625 cv
307.543 10.504 307.516 10.301 307.52 10.012 cv
307.516 9.86298 307.523 9.73401 307.539 9.633 cv
307.551 9.53101 307.57 9.44897 307.598 9.38702 cv
307.621 9.328 307.652 9.28497 307.695 9.258 cv
307.73 9.23401 307.777 9.22302 307.832 9.21899 cv
308.656 9.21899 li
308.656 7.66803 li
308.652 7.62097 308.668 7.57397 308.699 7.52698 cv
308.727 7.48798 308.777 7.453 308.855 7.422 cv
308.93 7.39801 309.031 7.375 309.16 7.35901 cv
309.285 7.34802 309.441 7.34399 309.633 7.34003 cv
309.82 7.34399 309.98 7.34802 310.109 7.35901 cv
310.234 7.375 310.336 7.39801 310.41 7.422 cv
310.48 7.453 310.531 7.48798 310.566 7.52698 cv
310.594 7.57397 310.609 7.62097 310.613 7.66803 cv
310.613 9.21899 li
312.125 9.21899 li
312.176 9.22302 312.223 9.23401 312.262 9.258 cv
312.301 9.28497 312.332 9.328 312.359 9.38702 cv
312.383 9.44897 312.402 9.53101 312.418 9.633 cv
312.43 9.73401 312.438 9.86298 312.438 10.012 cv
312.438 10.301 312.41 10.504 312.359 10.625 cv
312.305 10.75 312.23 10.812 312.133 10.809 cv
310.613 10.809 li
310.613 14.074 li
310.609 14.453 310.668 14.738 310.793 14.926 cv
310.91 15.117 311.125 15.211 311.43 15.211 cv
311.531 15.211 311.625 15.203 311.711 15.184 cv
311.793 15.168 311.867 15.148 311.934 15.121 cv
311.996 15.102 312.051 15.078 312.098 15.059 cv
312.141 15.043 312.18 15.035 312.219 15.031 cv
312.246 15.035 312.277 15.043 312.309 15.059 cv
312.336 15.078 312.355 15.117 312.375 15.168 cv
312.387 15.227 312.402 15.301 312.418 15.391 cv
312.43 15.488 312.438 15.605 312.438 15.75 cv
cp
f
320.027 12.758 mo
320.023 12.996 319.973 13.172 319.867 13.285 cv
319.758 13.402 319.609 13.461 319.43 13.457 cv
315.195 13.457 li
315.191 13.758 315.227 14.027 315.301 14.266 cv
315.367 14.508 315.48 14.711 315.637 14.879 cv
315.789 15.051 315.984 15.18 316.227 15.266 cv
316.465 15.355 316.754 15.398 317.098 15.398 cv
317.438 15.398 317.738 15.375 318 15.324 cv
318.258 15.277 318.484 15.223 318.676 15.16 cv
318.863 15.102 319.02 15.047 319.148 14.996 cv
319.27 14.949 319.371 14.926 319.453 14.922 cv
319.496 14.926 319.535 14.934 319.57 14.949 cv
319.598 14.969 319.625 15 319.645 15.047 cv
319.664 15.094 319.676 15.16 319.688 15.246 cv
319.691 15.332 319.695 15.441 319.699 15.57 cv
319.695 15.687 319.695 15.785 319.691 15.863 cv
319.684 15.945 319.676 16.012 319.668 16.066 cv
319.656 16.125 319.641 16.176 319.621 16.211 cv
319.602 16.254 319.574 16.289 319.543 16.324 cv
319.508 16.363 319.414 16.414 319.266 16.473 cv
319.109 16.539 318.918 16.602 318.688 16.656 cv
318.449 16.719 318.18 16.766 317.883 16.812 cv
317.578 16.852 317.258 16.875 316.918 16.879 cv
316.297 16.875 315.754 16.801 315.293 16.645 cv
314.824 16.492 314.438 16.254 314.129 15.937 cv
313.813 15.621 313.578 15.223 313.43 14.738 cv
313.273 14.258 313.199 13.691 313.203 13.035 cv
313.199 12.422 313.277 11.863 313.441 11.367 cv
313.598 10.871 313.832 10.453 314.145 10.105 cv
314.449 9.76202 314.824 9.49597 315.262 9.31201 cv
315.699 9.133 316.191 9.04303 316.746 9.039 cv
317.324 9.04303 317.824 9.12903 318.238 9.297 cv
318.652 9.47302 318.988 9.711 319.254 10.012 cv
319.516 10.316 319.711 10.676 319.84 11.09 cv
319.961 11.508 320.023 11.957 320.027 12.445 cv
cp
318.125 12.195 mo
318.137 11.645 318.027 11.211 317.793 10.898 cv
317.559 10.586 317.191 10.43 316.699 10.426 cv
316.449 10.43 316.234 10.477 316.051 10.566 cv
315.863 10.664 315.711 10.789 315.59 10.945 cv
315.465 11.105 315.371 11.293 315.309 11.508 cv
315.242 11.723 315.203 11.953 315.195 12.195 cv
cp
f
326.102 10.129 mo
326.102 10.32 326.094 10.473 326.086 10.59 cv
326.07 10.711 326.055 10.805 326.039 10.871 cv
326.016 10.941 325.988 10.988 325.957 11.012 cv
325.918 11.039 325.875 11.051 325.828 11.051 cv
325.781 11.051 325.734 11.043 325.688 11.023 cv
325.633 11.008 325.574 10.988 325.512 10.965 cv
325.441 10.945 325.371 10.926 325.297 10.906 cv
325.215 10.891 325.129 10.883 325.039 10.879 cv
324.926 10.883 324.816 10.902 324.711 10.945 cv
324.602 10.992 324.488 11.062 324.375 11.152 cv
324.254 11.246 324.133 11.371 324.008 11.523 cv
323.879 11.684 323.742 11.875 323.598 12.102 cv
323.598 16.434 li
323.594 16.488 323.578 16.531 323.551 16.57 cv
323.516 16.609 323.461 16.645 323.391 16.668 cv
323.313 16.695 323.215 16.711 323.09 16.727 cv
322.965 16.738 322.805 16.746 322.617 16.746 cv
322.422 16.746 322.266 16.738 322.141 16.727 cv
322.016 16.711 321.914 16.695 321.84 16.668 cv
321.762 16.645 321.707 16.609 321.68 16.57 cv
321.645 16.531 321.629 16.488 321.633 16.434 cv
321.633 9.48401 li
321.629 9.43701 321.645 9.39099 321.672 9.34802 cv
321.695 9.31201 321.742 9.28101 321.813 9.25 cv
321.879 9.22699 321.965 9.20697 322.074 9.19098 cv
322.18 9.18402 322.313 9.17603 322.477 9.172 cv
322.641 9.17603 322.777 9.18402 322.887 9.19098 cv
322.992 9.20697 323.078 9.22699 323.141 9.25 cv
323.199 9.28101 323.242 9.31201 323.27 9.34802 cv
323.293 9.39099 323.305 9.43701 323.309 9.48401 cv
323.309 10.348 li
323.488 10.09 323.66 9.87903 323.824 9.70697 cv
323.98 9.54303 324.137 9.40601 324.285 9.30499 cv
324.43 9.20697 324.574 9.14099 324.719 9.09802 cv
324.863 9.06201 325.008 9.04303 325.156 9.039 cv
325.223 9.04303 325.297 9.047 325.375 9.05103 cv
325.453 9.06201 325.531 9.07397 325.617 9.09003 cv
325.695 9.10901 325.77 9.12903 325.836 9.15198 cv
325.895 9.17603 325.941 9.203 325.973 9.22699 cv
326 9.258 326.02 9.28497 326.035 9.31201 cv
326.047 9.34802 326.059 9.39099 326.07 9.44098 cv
326.078 9.5 326.086 9.58197 326.094 9.68701 cv
326.098 9.797 326.102 9.94501 326.102 10.129 cv
cp
f
329.262 16.434 mo
329.258 16.488 329.242 16.531 329.215 16.57 cv
329.18 16.609 329.125 16.645 329.055 16.668 cv
328.977 16.695 328.879 16.711 328.754 16.727 cv
328.629 16.738 328.469 16.746 328.281 16.746 cv
328.086 16.746 327.93 16.738 327.805 16.727 cv
327.68 16.711 327.578 16.695 327.504 16.668 cv
327.426 16.645 327.371 16.609 327.344 16.57 cv
327.309 16.531 327.293 16.488 327.297 16.434 cv
327.297 9.5 li
327.293 9.44897 327.309 9.40198 327.344 9.36298 cv
327.371 9.32397 327.426 9.29303 327.504 9.26202 cv
327.578 9.23798 327.68 9.21503 327.805 9.19501 cv
327.93 9.18402 328.086 9.17603 328.281 9.172 cv
328.469 9.17603 328.629 9.18402 328.754 9.19501 cv
328.879 9.21503 328.977 9.23798 329.055 9.26202 cv
329.125 9.29303 329.18 9.32397 329.215 9.36298 cv
329.242 9.40198 329.258 9.44897 329.262 9.5 cv
cp
329.41 7.12903 mo
329.41 7.52698 329.328 7.80103 329.168 7.94897 cv
329.004 8.10199 328.707 8.17603 328.273 8.172 cv
327.828 8.17603 327.527 8.10199 327.379 7.95697 cv
327.223 7.81201 327.148 7.55103 327.148 7.16803 cv
327.148 6.77301 327.227 6.5 327.387 6.34802 cv
327.543 6.19501 327.844 6.117 328.289 6.117 cv
328.723 6.117 329.02 6.19098 329.176 6.34003 cv
329.332 6.48798 329.41 6.75403 329.41 7.12903 cv
cp
f
337.863 16.434 mo
337.859 16.488 337.844 16.531 337.816 16.57 cv
337.781 16.609 337.73 16.645 337.66 16.668 cv
337.586 16.695 337.484 16.711 337.359 16.727 cv
337.23 16.738 337.074 16.746 336.891 16.746 cv
336.695 16.746 336.535 16.738 336.41 16.727 cv
336.281 16.711 336.18 16.695 336.109 16.668 cv
336.031 16.645 335.98 16.609 335.953 16.57 cv
335.918 16.531 335.902 16.488 335.906 16.434 cv
335.906 12.469 li
335.902 12.133 335.879 11.867 335.832 11.672 cv
335.781 11.48 335.707 11.316 335.617 11.18 cv
335.523 11.043 335.406 10.937 335.258 10.859 cv
335.109 10.785 334.934 10.746 334.738 10.746 cv
334.484 10.746 334.234 10.84 333.98 11.02 cv
333.727 11.203 333.461 11.465 333.188 11.812 cv
333.188 16.434 li
333.184 16.488 333.168 16.531 333.141 16.57 cv
333.105 16.609 333.051 16.645 332.98 16.668 cv
332.902 16.695 332.805 16.711 332.68 16.727 cv
332.555 16.738 332.395 16.746 332.207 16.746 cv
332.012 16.746 331.855 16.738 331.73 16.727 cv
331.605 16.711 331.504 16.695 331.43 16.668 cv
331.352 16.645 331.297 16.609 331.27 16.57 cv
331.234 16.531 331.219 16.488 331.223 16.434 cv
331.223 9.48401 li
331.219 9.43701 331.234 9.39099 331.262 9.34802 cv
331.285 9.31201 331.332 9.28101 331.402 9.25 cv
331.469 9.22699 331.555 9.20697 331.664 9.19098 cv
331.77 9.18402 331.902 9.17603 332.066 9.172 cv
332.23 9.17603 332.367 9.18402 332.477 9.19098 cv
332.582 9.20697 332.668 9.22699 332.73 9.25 cv
332.789 9.28101 332.832 9.31201 332.859 9.34802 cv
332.883 9.39099 332.895 9.43701 332.898 9.48401 cv
332.898 10.285 li
333.281 9.875 333.672 9.56201 334.07 9.35199 cv
334.465 9.14502 334.883 9.04303 335.316 9.039 cv
335.785 9.04303 336.184 9.12097 336.512 9.27301 cv
336.836 9.43402 337.098 9.64502 337.297 9.90997 cv
337.496 10.18 337.641 10.492 337.73 10.848 cv
337.816 11.207 337.859 11.637 337.863 12.141 cv
cp
f
346.059 9.96503 mo
346.055 10.219 346.027 10.402 345.973 10.52 cv
345.914 10.641 345.844 10.699 345.766 10.699 cv
344.945 10.699 li
345.059 10.824 345.141 10.969 345.191 11.125 cv
345.238 11.285 345.262 11.449 345.266 11.617 cv
345.262 12.027 345.195 12.387 345.063 12.699 cv
344.926 13.016 344.73 13.281 344.48 13.492 cv
344.227 13.711 343.926 13.875 343.57 13.984 cv
343.211 14.102 342.813 14.156 342.383 14.152 cv
342.156 14.156 341.945 14.129 341.742 14.07 cv
341.539 14.02 341.383 13.957 341.273 13.879 cv
341.211 13.949 341.152 14.027 341.105 14.121 cv
341.055 14.215 341.031 14.32 341.035 14.43 cv
341.031 14.586 341.098 14.707 341.23 14.801 cv
341.359 14.898 341.547 14.953 341.789 14.961 cv
343.48 15.023 li
343.875 15.039 344.227 15.098 344.535 15.191 cv
344.844 15.293 345.105 15.426 345.316 15.598 cv
345.527 15.773 345.688 15.984 345.797 16.227 cv
345.906 16.473 345.961 16.746 345.965 17.059 cv
345.961 17.395 345.887 17.719 345.738 18.027 cv
345.59 18.328 345.363 18.59 345.063 18.816 cv
344.758 19.035 344.379 19.215 343.926 19.348 cv
343.469 19.477 342.938 19.539 342.336 19.543 cv
341.738 19.539 341.234 19.492 340.816 19.402 cv
340.398 19.305 340.055 19.176 339.789 19.012 cv
339.52 18.844 339.324 18.645 339.207 18.418 cv
339.082 18.184 339.023 17.93 339.023 17.656 cv
339.023 17.484 339.043 17.324 339.09 17.168 cv
339.129 17.012 339.195 16.859 339.285 16.719 cv
339.367 16.574 339.473 16.441 339.598 16.309 cv
339.723 16.18 339.863 16.055 340.027 15.934 cv
339.801 15.82 339.629 15.66 339.508 15.449 cv
339.387 15.246 339.328 15.02 339.328 14.773 cv
339.328 14.473 339.395 14.195 339.535 13.937 cv
339.672 13.687 339.855 13.457 340.082 13.254 cv
339.898 13.074 339.754 12.859 339.645 12.602 cv
339.535 12.352 339.48 12.031 339.484 11.648 cv
339.48 11.246 339.551 10.887 339.695 10.562 cv
339.836 10.246 340.035 9.97699 340.293 9.75403 cv
340.547 9.53497 340.852 9.36298 341.203 9.24597 cv
341.555 9.12903 341.945 9.07001 342.375 9.07001 cv
342.594 9.07001 342.801 9.086 343 9.10901 cv
343.199 9.14099 343.387 9.17603 343.559 9.21899 cv
345.766 9.21899 li
345.848 9.22302 345.918 9.28101 345.977 9.39099 cv
346.027 9.508 346.055 9.69897 346.059 9.96503 cv
cp
343.543 11.609 mo
343.539 11.238 343.438 10.949 343.23 10.738 cv
343.02 10.535 342.727 10.43 342.352 10.426 cv
342.156 10.43 341.984 10.461 341.844 10.523 cv
341.695 10.59 341.574 10.68 341.48 10.789 cv
341.379 10.902 341.309 11.031 341.266 11.18 cv
341.215 11.328 341.191 11.484 341.195 11.641 cv
341.191 12 341.297 12.277 341.508 12.48 cv
341.715 12.687 342.004 12.793 342.375 12.789 cv
342.57 12.793 342.738 12.762 342.887 12.695 cv
343.027 12.637 343.148 12.551 343.25 12.437 cv
343.344 12.332 343.418 12.203 343.469 12.059 cv
343.516 11.918 343.539 11.77 343.543 11.609 cv
cp
344.004 17.16 mo
344.004 16.922 343.91 16.746 343.723 16.621 cv
343.535 16.5 343.277 16.43 342.949 16.418 cv
341.555 16.379 li
341.418 16.48 341.309 16.574 341.23 16.664 cv
341.148 16.754 341.086 16.84 341.039 16.926 cv
340.988 17.008 340.953 17.09 340.941 17.168 cv
340.922 17.246 340.914 17.324 340.918 17.41 cv
340.914 17.664 341.047 17.863 341.309 18 cv
341.57 18.133 341.941 18.199 342.422 18.203 cv
342.715 18.199 342.961 18.168 343.168 18.113 cv
343.367 18.051 343.531 17.973 343.66 17.875 cv
343.781 17.773 343.871 17.664 343.926 17.543 cv
343.977 17.422 344.004 17.293 344.004 17.16 cv
cp
f
357.859 7.45697 mo
357.855 7.61298 357.848 7.742 357.84 7.84399 cv
357.824 7.953 357.805 8.039 357.781 8.10199 cv
357.75 8.16803 357.719 8.21503 357.684 8.242 cv
357.641 8.27698 357.598 8.29303 357.555 8.289 cv
355.031 8.289 li
355.031 16.418 li
355.031 16.473 355.012 16.52 354.98 16.559 cv
354.941 16.602 354.887 16.637 354.813 16.66 cv
354.73 16.687 354.625 16.707 354.496 16.723 cv
354.359 16.738 354.195 16.746 354 16.746 cv
353.805 16.746 353.641 16.738 353.508 16.723 cv
353.375 16.707 353.27 16.687 353.191 16.66 cv
353.113 16.637 353.055 16.602 353.023 16.559 cv
352.984 16.52 352.969 16.473 352.973 16.418 cv
352.973 8.289 li
350.449 8.289 li
350.395 8.29303 350.348 8.27698 350.316 8.242 cv
350.277 8.21503 350.246 8.16803 350.223 8.10199 cv
350.191 8.039 350.172 7.953 350.164 7.84399 cv
350.148 7.742 350.145 7.61298 350.145 7.45697 cv
350.145 7.30499 350.148 7.172 350.164 7.05902 cv
350.172 6.953 350.191 6.86298 350.223 6.797 cv
350.246 6.73401 350.277 6.68701 350.316 6.65601 cv
350.348 6.62903 350.395 6.617 350.449 6.61298 cv
357.555 6.61298 li
357.598 6.617 357.641 6.62903 357.684 6.65601 cv
357.719 6.68701 357.75 6.73401 357.781 6.797 cv
357.805 6.86298 357.824 6.953 357.84 7.05902 cv
357.848 7.172 357.855 7.30499 357.859 7.45697 cv
cp
f
360.895 16.434 mo
360.891 16.488 360.875 16.531 360.848 16.57 cv
360.813 16.609 360.758 16.645 360.688 16.668 cv
360.609 16.695 360.512 16.711 360.387 16.727 cv
360.262 16.738 360.102 16.746 359.914 16.746 cv
359.719 16.746 359.563 16.738 359.438 16.727 cv
359.313 16.711 359.211 16.695 359.137 16.668 cv
359.059 16.645 359.004 16.609 358.977 16.57 cv
358.941 16.531 358.926 16.488 358.93 16.434 cv
358.93 9.5 li
358.926 9.44897 358.941 9.40198 358.977 9.36298 cv
359.004 9.32397 359.059 9.29303 359.137 9.26202 cv
359.211 9.23798 359.313 9.21503 359.438 9.19501 cv
359.563 9.18402 359.719 9.17603 359.914 9.172 cv
360.102 9.17603 360.262 9.18402 360.387 9.19501 cv
360.512 9.21503 360.609 9.23798 360.688 9.26202 cv
360.758 9.29303 360.813 9.32397 360.848 9.36298 cv
360.875 9.40198 360.891 9.44897 360.895 9.5 cv
cp
361.043 7.12903 mo
361.043 7.52698 360.961 7.80103 360.801 7.94897 cv
360.637 8.10199 360.34 8.17603 359.906 8.172 cv
359.461 8.17603 359.16 8.10199 359.012 7.95697 cv
358.855 7.81201 358.781 7.55103 358.781 7.16803 cv
358.781 6.77301 358.859 6.5 359.02 6.34802 cv
359.176 6.19501 359.477 6.117 359.922 6.117 cv
360.355 6.117 360.652 6.19098 360.809 6.34003 cv
360.965 6.48798 361.043 6.75403 361.043 7.12903 cv
cp
f
373.945 16.434 mo
373.941 16.488 373.926 16.531 373.898 16.57 cv
373.863 16.609 373.813 16.645 373.742 16.668 cv
373.668 16.695 373.566 16.711 373.445 16.727 cv
373.32 16.738 373.164 16.746 372.973 16.746 cv
372.773 16.746 372.613 16.738 372.488 16.727 cv
372.363 16.711 372.262 16.695 372.188 16.668 cv
372.109 16.645 372.059 16.609 372.031 16.57 cv
372.004 16.531 371.988 16.488 371.992 16.434 cv
371.992 12.312 li
371.988 12.082 371.969 11.867 371.926 11.672 cv
371.879 11.48 371.809 11.316 371.723 11.18 cv
371.629 11.043 371.516 10.937 371.379 10.859 cv
371.238 10.785 371.074 10.746 370.883 10.746 cv
370.648 10.746 370.41 10.84 370.172 11.02 cv
369.934 11.203 369.676 11.465 369.395 11.812 cv
369.395 16.434 li
369.395 16.488 369.379 16.531 369.348 16.57 cv
369.316 16.609 369.262 16.645 369.188 16.668 cv
369.109 16.695 369.008 16.711 368.887 16.727 cv
368.762 16.738 368.609 16.746 368.422 16.746 cv
368.227 16.746 368.066 16.738 367.945 16.727 cv
367.816 16.711 367.715 16.695 367.645 16.668 cv
367.566 16.645 367.516 16.609 367.484 16.57 cv
367.453 16.531 367.438 16.488 367.438 16.434 cv
367.438 12.312 li
367.438 12.082 367.414 11.867 367.371 11.672 cv
367.328 11.48 367.262 11.316 367.176 11.18 cv
367.082 11.043 366.969 10.937 366.832 10.859 cv
366.688 10.785 366.523 10.746 366.34 10.746 cv
366.098 10.746 365.859 10.84 365.621 11.02 cv
365.383 11.203 365.125 11.465 364.852 11.812 cv
364.852 16.434 li
364.848 16.488 364.832 16.531 364.805 16.57 cv
364.77 16.609 364.715 16.645 364.645 16.668 cv
364.566 16.695 364.469 16.711 364.344 16.727 cv
364.219 16.738 364.059 16.746 363.871 16.746 cv
363.676 16.746 363.52 16.738 363.395 16.727 cv
363.27 16.711 363.168 16.695 363.094 16.668 cv
363.016 16.645 362.961 16.609 362.934 16.57 cv
362.898 16.531 362.883 16.488 362.887 16.434 cv
362.887 9.48401 li
362.883 9.43701 362.898 9.39099 362.926 9.34802 cv
362.949 9.31201 362.996 9.28101 363.066 9.25 cv
363.133 9.22699 363.219 9.20697 363.328 9.19098 cv
363.434 9.18402 363.566 9.17603 363.73 9.172 cv
363.895 9.17603 364.031 9.18402 364.141 9.19098 cv
364.246 9.20697 364.332 9.22699 364.395 9.25 cv
364.453 9.28101 364.496 9.31201 364.523 9.34802 cv
364.547 9.39099 364.559 9.43701 364.563 9.48401 cv
364.563 10.285 li
364.945 9.875 365.328 9.56201 365.711 9.35199 cv
366.09 9.14502 366.492 9.04303 366.91 9.039 cv
367.195 9.04303 367.449 9.07001 367.68 9.12903 cv
367.906 9.19098 368.113 9.27698 368.293 9.38702 cv
368.473 9.5 368.625 9.63702 368.754 9.789 cv
368.883 9.94501 368.992 10.117 369.082 10.309 cv
369.289 10.086 369.492 9.89502 369.695 9.73401 cv
369.891 9.57397 370.09 9.44098 370.285 9.34003 cv
370.48 9.23798 370.676 9.164 370.871 9.11298 cv
371.066 9.06598 371.266 9.04303 371.469 9.039 cv
371.93 9.04303 372.316 9.12097 372.637 9.27301 cv
372.949 9.43402 373.207 9.64502 373.402 9.90997 cv
373.598 10.18 373.734 10.492 373.82 10.848 cv
373.898 11.207 373.941 11.586 373.945 11.984 cv
cp
f
382.285 12.758 mo
382.281 12.996 382.23 13.172 382.125 13.285 cv
382.016 13.402 381.867 13.461 381.688 13.457 cv
377.453 13.457 li
377.449 13.758 377.484 14.027 377.559 14.266 cv
377.625 14.508 377.738 14.711 377.895 14.879 cv
378.047 15.051 378.242 15.18 378.484 15.266 cv
378.723 15.355 379.012 15.398 379.355 15.398 cv
379.695 15.398 379.996 15.375 380.258 15.324 cv
380.516 15.277 380.742 15.223 380.934 15.16 cv
381.121 15.102 381.277 15.047 381.406 14.996 cv
381.527 14.949 381.629 14.926 381.711 14.922 cv
381.754 14.926 381.793 14.934 381.828 14.949 cv
381.855 14.969 381.883 15 381.902 15.047 cv
381.922 15.094 381.934 15.16 381.945 15.246 cv
381.949 15.332 381.953 15.441 381.957 15.57 cv
381.953 15.687 381.953 15.785 381.949 15.863 cv
381.941 15.945 381.934 16.012 381.926 16.066 cv
381.914 16.125 381.898 16.176 381.879 16.211 cv
381.859 16.254 381.832 16.289 381.801 16.324 cv
381.766 16.363 381.672 16.414 381.523 16.473 cv
381.367 16.539 381.176 16.602 380.945 16.656 cv
380.707 16.719 380.438 16.766 380.141 16.812 cv
379.836 16.852 379.516 16.875 379.176 16.879 cv
378.555 16.875 378.012 16.801 377.551 16.645 cv
377.082 16.492 376.695 16.254 376.387 15.937 cv
376.07 15.621 375.836 15.223 375.688 14.738 cv
375.531 14.258 375.457 13.691 375.461 13.035 cv
375.457 12.422 375.535 11.863 375.699 11.367 cv
375.855 10.871 376.09 10.453 376.402 10.105 cv
376.707 9.76202 377.082 9.49597 377.52 9.31201 cv
377.957 9.133 378.449 9.04303 379.004 9.039 cv
379.582 9.04303 380.082 9.12903 380.496 9.297 cv
380.91 9.47302 381.246 9.711 381.512 10.012 cv
381.773 10.316 381.969 10.676 382.098 11.09 cv
382.219 11.508 382.281 11.957 382.285 12.445 cv
cp
380.383 12.195 mo
380.395 11.645 380.285 11.211 380.051 10.898 cv
379.816 10.586 379.449 10.43 378.957 10.426 cv
378.707 10.43 378.492 10.477 378.309 10.566 cv
378.121 10.664 377.969 10.789 377.848 10.945 cv
377.723 11.105 377.629 11.293 377.566 11.508 cv
377.5 11.723 377.461 11.953 377.453 12.195 cv
cp
f
388.785 14.469 mo
388.781 14.867 388.707 15.215 388.563 15.516 cv
388.414 15.816 388.207 16.07 387.938 16.27 cv
387.664 16.477 387.344 16.625 386.977 16.727 cv
386.609 16.824 386.207 16.875 385.777 16.879 cv
385.512 16.875 385.266 16.855 385.031 16.82 cv
384.797 16.777 384.586 16.73 384.398 16.672 cv
384.211 16.613 384.055 16.551 383.93 16.488 cv
383.805 16.426 383.711 16.367 383.656 16.312 cv
383.598 16.258 383.555 16.176 383.527 16.059 cv
383.492 15.945 383.477 15.77 383.48 15.539 cv
383.477 15.391 383.484 15.27 383.496 15.176 cv
383.504 15.086 383.52 15.016 383.543 14.957 cv
383.563 14.906 383.586 14.867 383.621 14.848 cv
383.648 14.832 383.688 14.824 383.734 14.82 cv
383.789 14.824 383.875 14.855 383.988 14.918 cv
384.098 14.984 384.234 15.059 384.406 15.133 cv
384.57 15.215 384.766 15.285 384.984 15.352 cv
385.203 15.422 385.453 15.457 385.738 15.453 cv
385.914 15.457 386.07 15.437 386.211 15.398 cv
386.344 15.363 386.465 15.312 386.57 15.242 cv
386.668 15.176 386.742 15.09 386.797 14.984 cv
386.844 14.883 386.871 14.762 386.875 14.625 cv
386.871 14.469 386.824 14.336 386.73 14.227 cv
386.637 14.117 386.508 14.02 386.352 13.934 cv
386.188 13.852 386.008 13.773 385.813 13.699 cv
385.609 13.629 385.406 13.551 385.195 13.457 cv
384.984 13.371 384.777 13.27 384.582 13.152 cv
384.379 13.043 384.199 12.902 384.043 12.734 cv
383.879 12.57 383.754 12.371 383.66 12.133 cv
383.566 11.902 383.52 11.621 383.52 11.289 cv
383.52 10.961 383.582 10.656 383.711 10.375 cv
383.84 10.102 384.027 9.86298 384.273 9.664 cv
384.516 9.46899 384.813 9.31598 385.164 9.203 cv
385.512 9.09802 385.906 9.04303 386.348 9.039 cv
386.563 9.04303 386.773 9.05902 386.98 9.086 cv
387.184 9.12097 387.371 9.15997 387.539 9.203 cv
387.703 9.25403 387.844 9.30499 387.961 9.35498 cv
388.074 9.414 388.156 9.461 388.207 9.49597 cv
388.254 9.539 388.289 9.578 388.313 9.61298 cv
388.332 9.65601 388.344 9.703 388.355 9.75403 cv
388.363 9.80902 388.375 9.875 388.383 9.953 cv
388.391 10.039 388.395 10.137 388.395 10.254 cv
388.395 10.395 388.391 10.512 388.383 10.598 cv
388.375 10.691 388.359 10.762 388.344 10.809 cv
388.324 10.863 388.301 10.898 388.273 10.914 cv
388.238 10.937 388.203 10.945 388.164 10.941 cv
388.113 10.945 388.039 10.918 387.945 10.859 cv
387.844 10.809 387.723 10.75 387.574 10.684 cv
387.426 10.625 387.254 10.566 387.059 10.508 cv
386.863 10.457 386.641 10.43 386.395 10.426 cv
386.215 10.43 386.063 10.449 385.934 10.48 cv
385.801 10.52 385.691 10.57 385.613 10.637 cv
385.527 10.707 385.465 10.785 385.426 10.875 cv
385.379 10.969 385.359 11.066 385.363 11.168 cv
385.359 11.328 385.41 11.465 385.512 11.57 cv
385.609 11.684 385.738 11.777 385.902 11.859 cv
386.063 11.945 386.246 12.023 386.453 12.094 cv
386.656 12.168 386.863 12.25 387.074 12.332 cv
387.281 12.422 387.488 12.52 387.699 12.633 cv
387.902 12.746 388.086 12.887 388.246 13.051 cv
388.406 13.219 388.535 13.418 388.637 13.648 cv
388.73 13.883 388.781 14.156 388.785 14.469 cv
cp
f
400.977 12.887 mo
400.973 13.484 400.895 14.027 400.742 14.512 cv
400.582 15.004 400.348 15.422 400.031 15.773 cv
399.715 16.125 399.316 16.398 398.84 16.59 cv
398.359 16.781 397.801 16.875 397.164 16.879 cv
396.543 16.875 396.004 16.793 395.551 16.621 cv
395.09 16.453 394.711 16.203 394.414 15.875 cv
394.109 15.551 393.887 15.148 393.742 14.668 cv
393.598 14.191 393.527 13.645 393.527 13.027 cv
393.527 12.437 393.605 11.898 393.762 11.406 cv
393.918 10.918 394.156 10.496 394.477 10.145 cv
394.793 9.797 395.188 9.52301 395.664 9.328 cv
396.137 9.13702 396.695 9.04303 397.336 9.039 cv
397.961 9.04303 398.5 9.125 398.957 9.29303 cv
399.414 9.46503 399.793 9.71503 400.09 10.039 cv
400.387 10.367 400.609 10.77 400.758 11.246 cv
400.902 11.727 400.973 12.273 400.977 12.887 cv
cp
398.957 12.965 mo
398.953 12.629 398.926 12.312 398.875 12.02 cv
398.816 11.734 398.723 11.484 398.598 11.27 cv
398.465 11.059 398.293 10.891 398.082 10.77 cv
397.863 10.652 397.594 10.594 397.266 10.59 cv
396.977 10.594 396.723 10.648 396.504 10.75 cv
396.285 10.859 396.105 11.016 395.965 11.219 cv
395.824 11.426 395.719 11.672 395.648 11.957 cv
395.578 12.25 395.543 12.578 395.543 12.941 cv
395.543 13.289 395.57 13.605 395.629 13.891 cv
395.684 14.184 395.777 14.434 395.906 14.645 cv
396.031 14.859 396.203 15.023 396.426 15.137 cv
396.641 15.258 396.91 15.316 397.234 15.312 cv
397.527 15.316 397.785 15.262 398.008 15.152 cv
398.223 15.047 398.402 14.895 398.543 14.687 cv
398.684 14.488 398.785 14.242 398.855 13.953 cv
398.918 13.668 398.953 13.34 398.957 12.965 cv
cp
f
406.762 6.83197 mo
406.758 6.98401 406.754 7.10498 406.746 7.19501 cv
406.734 7.289 406.719 7.35901 406.699 7.40601 cv
406.676 7.45697 406.652 7.492 406.629 7.508 cv
406.602 7.52698 406.574 7.53497 406.543 7.53497 cv
406.504 7.53497 406.461 7.52698 406.422 7.508 cv
406.375 7.492 406.32 7.47302 406.258 7.44897 cv
406.188 7.42999 406.113 7.40997 406.027 7.39099 cv
405.938 7.375 405.832 7.367 405.715 7.36298 cv
405.57 7.367 405.449 7.38702 405.352 7.42999 cv
405.25 7.47699 405.168 7.547 405.102 7.64099 cv
405.031 7.73798 404.98 7.86298 404.953 8.01599 cv
404.918 8.16803 404.902 8.35498 404.906 8.578 cv
404.906 9.21899 li
406.176 9.21899 li
406.219 9.22302 406.262 9.23401 406.305 9.258 cv
406.34 9.28497 406.375 9.328 406.402 9.38702 cv
406.426 9.44897 406.445 9.53101 406.461 9.633 cv
406.473 9.73401 406.477 9.86298 406.48 10.012 cv
406.477 10.301 406.453 10.504 406.402 10.625 cv
406.348 10.75 406.27 10.812 406.176 10.809 cv
404.906 10.809 li
404.906 16.434 li
404.902 16.488 404.887 16.531 404.859 16.57 cv
404.824 16.609 404.773 16.645 404.703 16.668 cv
404.629 16.695 404.527 16.711 404.398 16.727 cv
404.266 16.738 404.105 16.746 403.922 16.746 cv
403.734 16.746 403.578 16.738 403.453 16.727 cv
403.324 16.711 403.223 16.695 403.148 16.668 cv
403.07 16.645 403.02 16.609 402.992 16.57 cv
402.961 16.531 402.945 16.488 402.949 16.434 cv
402.949 10.809 li
402.078 10.809 li
401.977 10.812 401.902 10.75 401.855 10.625 cv
401.805 10.504 401.777 10.301 401.781 10.012 cv
401.777 9.86298 401.785 9.73401 401.801 9.633 cv
401.813 9.53101 401.832 9.44897 401.855 9.38702 cv
401.879 9.328 401.91 9.28497 401.949 9.258 cv
401.988 9.23401 402.031 9.22302 402.086 9.21899 cv
402.949 9.21899 li
402.949 8.633 li
402.945 8.164 402.992 7.75 403.09 7.39099 cv
403.18 7.03497 403.328 6.73798 403.531 6.50403 cv
403.73 6.27002 403.984 6.09399 404.293 5.96899 cv
404.602 5.85199 404.965 5.789 405.391 5.789 cv
405.586 5.789 405.777 5.80902 405.965 5.84003 cv
406.145 5.87903 406.289 5.914 406.395 5.94897 cv
406.496 5.992 406.566 6.02698 406.605 6.05902 cv
406.641 6.09399 406.672 6.14502 406.695 6.20697 cv
406.719 6.27301 406.734 6.35498 406.746 6.45697 cv
406.754 6.55902 406.758 6.68402 406.762 6.83197 cv
cp
f
417.309 13.676 mo
417.305 14.207 417.207 14.672 417.012 15.07 cv
416.813 15.473 416.547 15.809 416.211 16.074 cv
415.871 16.344 415.473 16.543 415.023 16.676 cv
414.57 16.809 414.09 16.875 413.578 16.879 cv
413.227 16.875 412.902 16.848 412.605 16.793 cv
412.305 16.734 412.043 16.668 411.816 16.586 cv
411.586 16.508 411.395 16.422 411.242 16.332 cv
411.09 16.246 410.98 16.168 410.914 16.098 cv
410.844 16.031 410.793 15.934 410.77 15.809 cv
410.738 15.684 410.727 15.5 410.727 15.258 cv
410.727 15.098 410.73 14.965 410.742 14.852 cv
410.75 14.746 410.766 14.656 410.793 14.586 cv
410.813 14.52 410.844 14.473 410.887 14.441 cv
410.922 14.418 410.969 14.402 411.02 14.398 cv
411.09 14.402 411.191 14.445 411.328 14.527 cv
411.457 14.617 411.629 14.711 411.84 14.812 cv
412.047 14.918 412.293 15.016 412.582 15.098 cv
412.867 15.187 413.203 15.23 413.586 15.227 cv
413.836 15.23 414.059 15.199 414.254 15.137 cv
414.449 15.078 414.617 14.992 414.758 14.883 cv
414.895 14.773 415 14.641 415.074 14.48 cv
415.145 14.32 415.18 14.141 415.184 13.941 cv
415.18 13.715 415.117 13.52 414.996 13.352 cv
414.867 13.191 414.703 13.047 414.508 12.918 cv
414.305 12.793 414.078 12.672 413.824 12.559 cv
413.57 12.449 413.309 12.332 413.039 12.203 cv
412.766 12.082 412.504 11.937 412.25 11.777 cv
411.996 11.621 411.77 11.434 411.57 11.211 cv
411.367 10.992 411.203 10.73 411.082 10.426 cv
410.957 10.125 410.895 9.76599 410.898 9.34399 cv
410.895 8.86298 410.984 8.43701 411.164 8.07001 cv
411.34 7.70697 411.582 7.40198 411.891 7.15601 cv
412.191 6.91803 412.551 6.73798 412.965 6.617 cv
413.379 6.5 413.816 6.44098 414.277 6.43701 cv
414.516 6.44098 414.754 6.45697 414.996 6.492 cv
415.234 6.53101 415.457 6.58197 415.664 6.64099 cv
415.871 6.703 416.055 6.77301 416.219 6.84802 cv
416.375 6.92999 416.484 6.992 416.539 7.04303 cv
416.59 7.09802 416.625 7.14502 416.645 7.17603 cv
416.66 7.21503 416.676 7.26202 416.691 7.32001 cv
416.703 7.383 416.711 7.45697 416.719 7.547 cv
416.723 7.64099 416.727 7.75403 416.727 7.88702 cv
416.727 8.039 416.723 8.16803 416.715 8.27002 cv
416.707 8.375 416.691 8.461 416.676 8.52301 cv
416.652 8.59399 416.629 8.64099 416.598 8.672 cv
416.563 8.703 416.516 8.71899 416.461 8.71899 cv
416.402 8.71899 416.313 8.68402 416.188 8.60901 cv
416.063 8.539 415.906 8.461 415.727 8.37097 cv
415.543 8.289 415.336 8.211 415.098 8.14099 cv
414.855 8.07397 414.59 8.039 414.309 8.03497 cv
414.082 8.039 413.891 8.06598 413.727 8.117 cv
413.559 8.172 413.418 8.24597 413.309 8.34003 cv
413.195 8.43701 413.113 8.55499 413.059 8.68701 cv
413.004 8.828 412.977 8.96899 412.977 9.117 cv
412.977 9.34399 413.035 9.539 413.16 9.69897 cv
413.277 9.86298 413.441 10.008 413.652 10.133 cv
413.855 10.262 414.09 10.383 414.348 10.492 cv
414.605 10.609 414.871 10.727 415.145 10.848 cv
415.414 10.977 415.676 11.117 415.938 11.273 cv
416.195 11.43 416.43 11.621 416.633 11.84 cv
416.836 12.066 416.996 12.324 417.121 12.621 cv
417.242 12.918 417.305 13.27 417.309 13.676 cv
cp
f
425.359 16.434 mo
425.355 16.488 425.344 16.531 425.32 16.57 cv
425.293 16.609 425.246 16.645 425.184 16.668 cv
425.117 16.695 425.031 16.711 424.926 16.727 cv
424.82 16.738 424.688 16.746 424.527 16.746 cv
424.352 16.746 424.211 16.738 424.109 16.727 cv
424 16.711 423.918 16.695 423.855 16.668 cv
423.793 16.645 423.746 16.609 423.723 16.57 cv
423.691 16.531 423.68 16.488 423.684 16.434 cv
423.684 15.633 li
423.297 16.047 422.906 16.359 422.512 16.566 cv
422.109 16.773 421.699 16.875 421.277 16.879 cv
420.797 16.875 420.395 16.801 420.07 16.645 cv
419.746 16.492 419.484 16.277 419.285 16.008 cv
419.082 15.738 418.938 15.426 418.855 15.066 cv
418.766 14.711 418.723 14.27 418.727 13.738 cv
418.727 9.48401 li
418.723 9.43701 418.738 9.39099 418.77 9.34802 cv
418.797 9.31201 418.848 9.28101 418.926 9.25 cv
419 9.22699 419.102 9.20697 419.23 9.19098 cv
419.355 9.18402 419.512 9.17603 419.703 9.172 cv
419.891 9.17603 420.051 9.18402 420.176 9.19098 cv
420.301 9.20697 420.398 9.22699 420.477 9.25 cv
420.547 9.28101 420.602 9.31201 420.637 9.34802 cv
420.664 9.39099 420.68 9.43701 420.684 9.48401 cv
420.684 13.41 li
420.68 13.777 420.703 14.055 420.754 14.246 cv
420.797 14.437 420.867 14.602 420.969 14.738 cv
421.063 14.879 421.188 14.984 421.336 15.059 cv
421.484 15.137 421.656 15.176 421.852 15.172 cv
422.102 15.176 422.352 15.086 422.605 14.898 cv
422.855 14.719 423.125 14.453 423.41 14.105 cv
423.41 9.48401 li
423.41 9.43701 423.422 9.39099 423.453 9.34802 cv
423.477 9.31201 423.531 9.28101 423.609 9.25 cv
423.684 9.22699 423.781 9.20697 423.91 9.19098 cv
424.031 9.18402 424.191 9.17603 424.387 9.172 cv
424.578 9.17603 424.734 9.18402 424.859 9.19098 cv
424.98 9.20697 425.082 9.22699 425.156 9.25 cv
425.227 9.28101 425.277 9.31201 425.313 9.34802 cv
425.34 9.39099 425.355 9.43701 425.359 9.48401 cv
cp
f
434.285 12.863 mo
434.285 13.484 434.215 14.043 434.082 14.535 cv
433.941 15.031 433.746 15.449 433.496 15.797 cv
433.238 16.145 432.926 16.414 432.559 16.598 cv
432.184 16.785 431.762 16.875 431.293 16.879 cv
431.055 16.875 430.836 16.852 430.637 16.812 cv
430.43 16.766 430.238 16.699 430.055 16.598 cv
429.871 16.504 429.688 16.379 429.512 16.223 cv
429.328 16.074 429.145 15.891 428.961 15.68 cv
428.961 16.434 li
428.957 16.496 428.945 16.543 428.918 16.578 cv
428.887 16.621 428.84 16.652 428.777 16.676 cv
428.711 16.699 428.621 16.715 428.516 16.73 cv
428.406 16.738 428.277 16.746 428.121 16.746 cv
427.957 16.746 427.82 16.738 427.719 16.73 cv
427.609 16.715 427.523 16.699 427.461 16.676 cv
427.391 16.652 427.348 16.621 427.324 16.578 cv
427.297 16.543 427.281 16.496 427.285 16.434 cv
427.285 6.18701 li
427.281 6.13702 427.297 6.09003 427.332 6.047 cv
427.359 6.008 427.414 5.97302 427.492 5.94098 cv
427.566 5.914 427.668 5.89502 427.793 5.875 cv
427.918 5.86298 428.074 5.85498 428.27 5.85199 cv
428.457 5.85498 428.617 5.86298 428.742 5.875 cv
428.867 5.89502 428.965 5.914 429.043 5.94098 cv
429.113 5.97302 429.168 6.008 429.203 6.047 cv
429.23 6.09003 429.246 6.13702 429.25 6.18701 cv
429.25 10.027 li
429.426 9.85199 429.602 9.703 429.781 9.578 cv
429.953 9.45697 430.129 9.35199 430.309 9.27002 cv
430.48 9.19098 430.664 9.133 430.855 9.09399 cv
431.039 9.05902 431.238 9.04303 431.449 9.039 cv
431.961 9.04303 432.395 9.14502 432.758 9.34802 cv
433.113 9.55499 433.406 9.83197 433.633 10.18 cv
433.855 10.527 434.02 10.934 434.129 11.398 cv
434.23 11.863 434.285 12.352 434.285 12.863 cv
cp
432.25 13.004 mo
432.246 12.711 432.223 12.426 432.184 12.148 cv
432.137 11.875 432.063 11.633 431.953 11.418 cv
431.844 11.207 431.699 11.035 431.527 10.906 cv
431.352 10.781 431.133 10.719 430.871 10.715 cv
430.738 10.719 430.613 10.734 430.488 10.77 cv
430.363 10.809 430.234 10.871 430.102 10.957 cv
429.969 11.047 429.832 11.164 429.695 11.301 cv
429.551 11.441 429.402 11.613 429.25 11.82 cv
429.25 14.129 li
429.523 14.484 429.785 14.754 430.039 14.934 cv
430.289 15.121 430.555 15.211 430.832 15.211 cv
431.086 15.211 431.301 15.148 431.48 15.016 cv
431.652 14.891 431.801 14.723 431.918 14.512 cv
432.035 14.309 432.117 14.07 432.172 13.801 cv
432.219 13.539 432.246 13.273 432.25 13.004 cv
cp
f
439.406 12.781 mo
439.402 13.082 439.375 13.293 439.32 13.41 cv
439.262 13.535 439.172 13.594 439.047 13.59 cv
435.805 13.59 li
435.676 13.594 435.582 13.531 435.527 13.406 cv
435.465 13.285 435.438 13.078 435.441 12.781 cv
435.438 12.492 435.465 12.285 435.527 12.164 cv
435.582 12.047 435.676 11.988 435.805 11.984 cv
439.047 11.984 li
439.109 11.988 439.16 12 439.207 12.023 cv
439.246 12.051 439.285 12.098 439.32 12.156 cv
439.348 12.223 439.371 12.305 439.387 12.406 cv
439.398 12.512 439.402 12.637 439.406 12.781 cv
cp
f
443.055 16.418 mo
443.051 16.473 443.035 16.52 443.004 16.559 cv
442.969 16.602 442.91 16.637 442.836 16.66 cv
442.754 16.687 442.652 16.707 442.523 16.723 cv
442.391 16.738 442.223 16.746 442.027 16.746 cv
441.824 16.746 441.66 16.738 441.531 16.723 cv
441.395 16.707 441.289 16.687 441.215 16.66 cv
441.133 16.637 441.078 16.602 441.047 16.559 cv
441.012 16.52 440.992 16.473 440.996 16.418 cv
440.996 6.89502 li
440.992 6.84802 441.012 6.80103 441.047 6.75403 cv
441.078 6.71503 441.133 6.67999 441.219 6.65198 cv
441.297 6.62903 441.402 6.60901 441.535 6.59003 cv
441.66 6.578 441.824 6.57001 442.027 6.56598 cv
442.223 6.57001 442.391 6.578 442.523 6.59003 cv
442.652 6.60901 442.754 6.62903 442.836 6.65198 cv
442.91 6.67999 442.969 6.71503 443.004 6.75403 cv
443.035 6.80103 443.051 6.84802 443.055 6.89502 cv
cp
f
456.137 16.434 mo
456.133 16.488 456.117 16.531 456.09 16.57 cv
456.055 16.609 456.004 16.645 455.934 16.668 cv
455.859 16.695 455.758 16.711 455.637 16.727 cv
455.512 16.738 455.355 16.746 455.164 16.746 cv
454.965 16.746 454.805 16.738 454.68 16.727 cv
454.555 16.711 454.453 16.695 454.379 16.668 cv
454.301 16.645 454.25 16.609 454.223 16.57 cv
454.195 16.531 454.18 16.488 454.184 16.434 cv
454.184 12.312 li
454.18 12.082 454.16 11.867 454.117 11.672 cv
454.07 11.48 454 11.316 453.914 11.18 cv
453.82 11.043 453.707 10.937 453.57 10.859 cv
453.43 10.785 453.266 10.746 453.074 10.746 cv
452.84 10.746 452.602 10.84 452.363 11.02 cv
452.125 11.203 451.867 11.465 451.586 11.812 cv
451.586 16.434 li
451.586 16.488 451.57 16.531 451.539 16.57 cv
451.508 16.609 451.453 16.645 451.379 16.668 cv
451.301 16.695 451.199 16.711 451.078 16.727 cv
450.953 16.738 450.801 16.746 450.613 16.746 cv
450.418 16.746 450.258 16.738 450.137 16.727 cv
450.008 16.711 449.906 16.695 449.836 16.668 cv
449.758 16.645 449.707 16.609 449.676 16.57 cv
449.645 16.531 449.629 16.488 449.629 16.434 cv
449.629 12.312 li
449.629 12.082 449.605 11.867 449.563 11.672 cv
449.52 11.48 449.453 11.316 449.367 11.18 cv
449.273 11.043 449.16 10.937 449.023 10.859 cv
448.879 10.785 448.715 10.746 448.531 10.746 cv
448.289 10.746 448.051 10.84 447.813 11.02 cv
447.574 11.203 447.316 11.465 447.043 11.812 cv
447.043 16.434 li
447.039 16.488 447.023 16.531 446.996 16.57 cv
446.961 16.609 446.906 16.645 446.836 16.668 cv
446.758 16.695 446.66 16.711 446.535 16.727 cv
446.41 16.738 446.25 16.746 446.063 16.746 cv
445.867 16.746 445.711 16.738 445.586 16.727 cv
445.461 16.711 445.359 16.695 445.285 16.668 cv
445.207 16.645 445.152 16.609 445.125 16.57 cv
445.09 16.531 445.074 16.488 445.078 16.434 cv
445.078 9.48401 li
445.074 9.43701 445.09 9.39099 445.117 9.34802 cv
445.141 9.31201 445.188 9.28101 445.258 9.25 cv
445.324 9.22699 445.41 9.20697 445.52 9.19098 cv
445.625 9.18402 445.758 9.17603 445.922 9.172 cv
446.086 9.17603 446.223 9.18402 446.332 9.19098 cv
446.438 9.20697 446.523 9.22699 446.586 9.25 cv
446.645 9.28101 446.688 9.31201 446.715 9.34802 cv
446.738 9.39099 446.75 9.43701 446.754 9.48401 cv
446.754 10.285 li
447.137 9.875 447.52 9.56201 447.902 9.35199 cv
448.281 9.14502 448.684 9.04303 449.102 9.039 cv
449.387 9.04303 449.641 9.07001 449.871 9.12903 cv
450.098 9.19098 450.305 9.27698 450.484 9.38702 cv
450.664 9.5 450.816 9.63702 450.945 9.789 cv
451.074 9.94501 451.184 10.117 451.273 10.309 cv
451.48 10.086 451.684 9.89502 451.887 9.73401 cv
452.082 9.57397 452.281 9.44098 452.477 9.34003 cv
452.672 9.23798 452.867 9.164 453.063 9.11298 cv
453.258 9.06598 453.457 9.04303 453.66 9.039 cv
454.121 9.04303 454.508 9.12097 454.828 9.27301 cv
455.141 9.43402 455.398 9.64502 455.594 9.90997 cv
455.789 10.18 455.926 10.492 456.012 10.848 cv
456.09 11.207 456.133 11.586 456.137 11.984 cv
cp
f
463.98 16.457 mo
463.977 16.535 463.949 16.59 463.902 16.629 cv
463.848 16.672 463.766 16.699 463.656 16.719 cv
463.539 16.734 463.375 16.746 463.16 16.746 cv
462.922 16.746 462.75 16.734 462.648 16.719 cv
462.539 16.699 462.465 16.672 462.426 16.629 cv
462.379 16.59 462.359 16.535 462.359 16.457 cv
462.359 15.906 li
462.07 16.215 461.742 16.453 461.379 16.621 cv
461.012 16.793 460.605 16.875 460.16 16.879 cv
459.789 16.875 459.449 16.828 459.141 16.734 cv
458.832 16.641 458.566 16.5 458.34 16.305 cv
458.113 16.117 457.938 15.883 457.813 15.602 cv
457.688 15.324 457.625 14.996 457.629 14.617 cv
457.625 14.219 457.703 13.867 457.863 13.562 cv
458.02 13.266 458.258 13.02 458.574 12.824 cv
458.887 12.633 459.277 12.488 459.746 12.391 cv
460.215 12.301 460.758 12.254 461.375 12.25 cv
462.055 12.25 li
462.055 11.828 li
462.055 11.613 462.031 11.422 461.988 11.258 cv
461.941 11.098 461.867 10.961 461.77 10.848 cv
461.664 10.742 461.531 10.66 461.363 10.605 cv
461.191 10.555 460.98 10.531 460.738 10.527 cv
460.406 10.531 460.113 10.566 459.859 10.637 cv
459.598 10.711 459.371 10.793 459.176 10.879 cv
458.977 10.973 458.813 11.051 458.684 11.121 cv
458.547 11.195 458.438 11.234 458.359 11.23 cv
458.297 11.234 458.246 11.215 458.207 11.176 cv
458.16 11.141 458.125 11.09 458.098 11.02 cv
458.066 10.957 458.043 10.871 458.031 10.77 cv
458.012 10.672 458.004 10.562 458.008 10.441 cv
458.004 10.281 458.02 10.156 458.047 10.059 cv
458.07 9.96899 458.117 9.883 458.195 9.80499 cv
458.266 9.72998 458.395 9.64801 458.578 9.55902 cv
458.758 9.46899 458.969 9.383 459.215 9.30499 cv
459.457 9.22699 459.727 9.164 460.016 9.11298 cv
460.305 9.06598 460.602 9.04303 460.91 9.039 cv
461.453 9.04303 461.918 9.09399 462.305 9.19897 cv
462.691 9.30902 463.012 9.47302 463.262 9.69098 cv
463.512 9.90997 463.691 10.195 463.809 10.543 cv
463.918 10.895 463.977 11.309 463.98 11.781 cv
cp
462.055 13.48 mo
461.305 13.48 li
460.988 13.484 460.719 13.508 460.496 13.551 cv
460.27 13.602 460.086 13.672 459.949 13.762 cv
459.805 13.859 459.703 13.973 459.641 14.102 cv
459.574 14.238 459.539 14.387 459.543 14.555 cv
459.539 14.848 459.633 15.078 459.82 15.242 cv
460.004 15.41 460.262 15.492 460.59 15.492 cv
460.863 15.492 461.113 15.422 461.348 15.281 cv
461.574 15.141 461.813 14.937 462.055 14.664 cv
cp
f
472.203 9.96503 mo
472.199 10.219 472.172 10.402 472.117 10.52 cv
472.059 10.641 471.988 10.699 471.91 10.699 cv
471.09 10.699 li
471.203 10.824 471.285 10.969 471.336 11.125 cv
471.383 11.285 471.406 11.449 471.41 11.617 cv
471.406 12.027 471.34 12.387 471.207 12.699 cv
471.07 13.016 470.875 13.281 470.625 13.492 cv
470.371 13.711 470.07 13.875 469.715 13.984 cv
469.355 14.102 468.957 14.156 468.527 14.152 cv
468.301 14.156 468.09 14.129 467.887 14.07 cv
467.684 14.02 467.527 13.957 467.418 13.879 cv
467.355 13.949 467.297 14.027 467.25 14.121 cv
467.199 14.215 467.176 14.32 467.18 14.43 cv
467.176 14.586 467.242 14.707 467.375 14.801 cv
467.504 14.898 467.691 14.953 467.934 14.961 cv
469.625 15.023 li
470.02 15.039 470.371 15.098 470.68 15.191 cv
470.988 15.293 471.25 15.426 471.461 15.598 cv
471.672 15.773 471.832 15.984 471.941 16.227 cv
472.051 16.473 472.105 16.746 472.109 17.059 cv
472.105 17.395 472.031 17.719 471.883 18.027 cv
471.734 18.328 471.508 18.59 471.207 18.816 cv
470.902 19.035 470.523 19.215 470.07 19.348 cv
469.613 19.477 469.082 19.539 468.48 19.543 cv
467.883 19.539 467.379 19.492 466.961 19.402 cv
466.543 19.305 466.199 19.176 465.934 19.012 cv
465.664 18.844 465.469 18.645 465.352 18.418 cv
465.227 18.184 465.168 17.93 465.168 17.656 cv
465.168 17.484 465.188 17.324 465.234 17.168 cv
465.273 17.012 465.34 16.859 465.43 16.719 cv
465.512 16.574 465.617 16.441 465.742 16.309 cv
465.867 16.18 466.008 16.055 466.172 15.934 cv
465.945 15.82 465.773 15.66 465.652 15.449 cv
465.531 15.246 465.473 15.02 465.473 14.773 cv
465.473 14.473 465.539 14.195 465.68 13.937 cv
465.816 13.687 466 13.457 466.227 13.254 cv
466.043 13.074 465.898 12.859 465.789 12.602 cv
465.68 12.352 465.625 12.031 465.629 11.648 cv
465.625 11.246 465.695 10.887 465.84 10.562 cv
465.98 10.246 466.18 9.97699 466.438 9.75403 cv
466.691 9.53497 466.996 9.36298 467.348 9.24597 cv
467.699 9.12903 468.09 9.07001 468.52 9.07001 cv
468.738 9.07001 468.945 9.086 469.145 9.10901 cv
469.344 9.14099 469.531 9.17603 469.703 9.21899 cv
471.91 9.21899 li
471.992 9.22302 472.063 9.28101 472.121 9.39099 cv
472.172 9.508 472.199 9.69897 472.203 9.96503 cv
cp
469.688 11.609 mo
469.684 11.238 469.582 10.949 469.375 10.738 cv
469.164 10.535 468.871 10.43 468.496 10.426 cv
468.301 10.43 468.129 10.461 467.988 10.523 cv
467.84 10.59 467.719 10.68 467.625 10.789 cv
467.523 10.902 467.453 11.031 467.41 11.18 cv
467.359 11.328 467.336 11.484 467.34 11.641 cv
467.336 12 467.441 12.277 467.652 12.48 cv
467.859 12.687 468.148 12.793 468.52 12.789 cv
468.715 12.793 468.883 12.762 469.031 12.695 cv
469.172 12.637 469.293 12.551 469.395 12.437 cv
469.488 12.332 469.563 12.203 469.613 12.059 cv
469.66 11.918 469.684 11.77 469.688 11.609 cv
cp
470.148 17.16 mo
470.148 16.922 470.055 16.746 469.867 16.621 cv
469.68 16.5 469.422 16.43 469.094 16.418 cv
467.699 16.379 li
467.563 16.48 467.453 16.574 467.375 16.664 cv
467.293 16.754 467.23 16.84 467.184 16.926 cv
467.133 17.008 467.098 17.09 467.086 17.168 cv
467.066 17.246 467.059 17.324 467.063 17.41 cv
467.059 17.664 467.191 17.863 467.453 18 cv
467.715 18.133 468.086 18.199 468.566 18.203 cv
468.859 18.199 469.105 18.168 469.313 18.113 cv
469.512 18.051 469.676 17.973 469.805 17.875 cv
469.926 17.773 470.016 17.664 470.07 17.543 cv
470.121 17.422 470.148 17.293 470.148 17.16 cv
cp
f
479.813 12.758 mo
479.809 12.996 479.758 13.172 479.652 13.285 cv
479.543 13.402 479.395 13.461 479.215 13.457 cv
474.98 13.457 li
474.977 13.758 475.012 14.027 475.086 14.266 cv
475.152 14.508 475.266 14.711 475.422 14.879 cv
475.574 15.051 475.77 15.18 476.012 15.266 cv
476.25 15.355 476.539 15.398 476.883 15.398 cv
477.223 15.398 477.523 15.375 477.785 15.324 cv
478.043 15.277 478.27 15.223 478.461 15.16 cv
478.648 15.102 478.805 15.047 478.934 14.996 cv
479.055 14.949 479.156 14.926 479.238 14.922 cv
479.281 14.926 479.32 14.934 479.355 14.949 cv
479.383 14.969 479.41 15 479.43 15.047 cv
479.449 15.094 479.461 15.16 479.473 15.246 cv
479.477 15.332 479.48 15.441 479.484 15.57 cv
479.48 15.687 479.48 15.785 479.477 15.863 cv
479.469 15.945 479.461 16.012 479.453 16.066 cv
479.441 16.125 479.426 16.176 479.406 16.211 cv
479.387 16.254 479.359 16.289 479.328 16.324 cv
479.293 16.363 479.199 16.414 479.051 16.473 cv
478.895 16.539 478.703 16.602 478.473 16.656 cv
478.234 16.719 477.965 16.766 477.668 16.812 cv
477.363 16.852 477.043 16.875 476.703 16.879 cv
476.082 16.875 475.539 16.801 475.078 16.645 cv
474.609 16.492 474.223 16.254 473.914 15.937 cv
473.598 15.621 473.363 15.223 473.215 14.738 cv
473.059 14.258 472.984 13.691 472.988 13.035 cv
472.984 12.422 473.063 11.863 473.227 11.367 cv
473.383 10.871 473.617 10.453 473.93 10.105 cv
474.234 9.76202 474.609 9.49597 475.047 9.31201 cv
475.484 9.133 475.977 9.04303 476.531 9.039 cv
477.109 9.04303 477.609 9.12903 478.023 9.297 cv
478.438 9.47302 478.773 9.711 479.039 10.012 cv
479.301 10.316 479.496 10.676 479.625 11.09 cv
479.746 11.508 479.809 11.957 479.813 12.445 cv
cp
477.91 12.195 mo
477.922 11.645 477.813 11.211 477.578 10.898 cv
477.344 10.586 476.977 10.43 476.484 10.426 cv
476.234 10.43 476.02 10.477 475.836 10.566 cv
475.648 10.664 475.496 10.789 475.375 10.945 cv
475.25 11.105 475.156 11.293 475.094 11.508 cv
475.027 11.723 474.988 11.953 474.98 12.195 cv
cp
f
486.313 14.469 mo
486.309 14.867 486.234 15.215 486.09 15.516 cv
485.941 15.816 485.734 16.07 485.465 16.27 cv
485.191 16.477 484.871 16.625 484.504 16.727 cv
484.137 16.824 483.734 16.875 483.305 16.879 cv
483.039 16.875 482.793 16.855 482.559 16.82 cv
482.324 16.777 482.113 16.73 481.926 16.672 cv
481.738 16.613 481.582 16.551 481.457 16.488 cv
481.332 16.426 481.238 16.367 481.184 16.312 cv
481.125 16.258 481.082 16.176 481.055 16.059 cv
481.02 15.945 481.004 15.77 481.008 15.539 cv
481.004 15.391 481.012 15.27 481.023 15.176 cv
481.031 15.086 481.047 15.016 481.07 14.957 cv
481.09 14.906 481.113 14.867 481.148 14.848 cv
481.176 14.832 481.215 14.824 481.262 14.82 cv
481.316 14.824 481.402 14.855 481.516 14.918 cv
481.625 14.984 481.762 15.059 481.934 15.133 cv
482.098 15.215 482.293 15.285 482.512 15.352 cv
482.73 15.422 482.98 15.457 483.266 15.453 cv
483.441 15.457 483.598 15.437 483.738 15.398 cv
483.871 15.363 483.992 15.312 484.098 15.242 cv
484.195 15.176 484.27 15.09 484.324 14.984 cv
484.371 14.883 484.398 14.762 484.402 14.625 cv
484.398 14.469 484.352 14.336 484.258 14.227 cv
484.164 14.117 484.035 14.02 483.879 13.934 cv
483.715 13.852 483.535 13.773 483.34 13.699 cv
483.137 13.629 482.934 13.551 482.723 13.457 cv
482.512 13.371 482.305 13.27 482.109 13.152 cv
481.906 13.043 481.727 12.902 481.57 12.734 cv
481.406 12.57 481.281 12.371 481.188 12.133 cv
481.094 11.902 481.047 11.621 481.047 11.289 cv
481.047 10.961 481.109 10.656 481.238 10.375 cv
481.367 10.102 481.555 9.86298 481.801 9.664 cv
482.043 9.46899 482.34 9.31598 482.691 9.203 cv
483.039 9.09802 483.434 9.04303 483.875 9.039 cv
484.09 9.04303 484.301 9.05902 484.508 9.086 cv
484.711 9.12097 484.898 9.15997 485.066 9.203 cv
485.23 9.25403 485.371 9.30499 485.488 9.35498 cv
485.602 9.414 485.684 9.461 485.734 9.49597 cv
485.781 9.539 485.816 9.578 485.84 9.61298 cv
485.859 9.65601 485.871 9.703 485.883 9.75403 cv
485.891 9.80902 485.902 9.875 485.91 9.953 cv
485.918 10.039 485.922 10.137 485.922 10.254 cv
485.922 10.395 485.918 10.512 485.91 10.598 cv
485.902 10.691 485.887 10.762 485.871 10.809 cv
485.852 10.863 485.828 10.898 485.801 10.914 cv
485.766 10.937 485.73 10.945 485.691 10.941 cv
485.641 10.945 485.566 10.918 485.473 10.859 cv
485.371 10.809 485.25 10.75 485.102 10.684 cv
484.953 10.625 484.781 10.566 484.586 10.508 cv
484.391 10.457 484.168 10.43 483.922 10.426 cv
483.742 10.43 483.59 10.449 483.461 10.48 cv
483.328 10.52 483.219 10.57 483.141 10.637 cv
483.055 10.707 482.992 10.785 482.953 10.875 cv
482.906 10.969 482.887 11.066 482.891 11.168 cv
482.887 11.328 482.938 11.465 483.039 11.57 cv
483.137 11.684 483.266 11.777 483.43 11.859 cv
483.59 11.945 483.773 12.023 483.98 12.094 cv
484.184 12.168 484.391 12.25 484.602 12.332 cv
484.809 12.422 485.016 12.52 485.227 12.633 cv
485.43 12.746 485.613 12.887 485.773 13.051 cv
485.934 13.219 486.063 13.418 486.164 13.648 cv
486.258 13.883 486.309 14.156 486.313 14.469 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
