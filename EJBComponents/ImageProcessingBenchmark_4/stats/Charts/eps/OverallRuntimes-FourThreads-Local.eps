%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntimes-FourThreads-Local.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:43:56 PM
%%BoundingBox: 0 0 627 546
%%HiResBoundingBox: 0 0 626.4001 545.1601
%%CropBox: 0 0 626.4001 545.1601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -545.16 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 545.16 li
626.4 545.16 li
626.4 0 li
cp
clp
gsave
0 545.16 mo
627 545.16 li
627 -.839966 li
0 -.839966 li
cp
clp
0 6.10352e-5 mo
626.398 6.10352e-5 li
626.398 545.16 li
0 545.16 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.078 489.602 mo
614.398 489.602 li
49.078 471.719 mo
614.398 471.719 li
49.078 435.961 mo
614.398 435.961 li
49.078 418.078 mo
614.398 418.078 li
49.078 382.32 mo
614.398 382.32 li
49.078 364.441 mo
614.398 364.441 li
49.078 328.68 mo
614.398 328.68 li
49.078 310.801 mo
614.398 310.801 li
49.078 275.039 mo
614.398 275.039 li
49.078 257.16 mo
614.398 257.16 li
49.078 221.398 mo
614.398 221.398 li
49.078 203.519 mo
614.398 203.519 li
49.078 167.879 mo
614.398 167.879 li
49.078 150 mo
614.398 150 li
49.078 114.238 mo
614.398 114.238 li
49.078 96.359 mo
614.398 96.359 li
49.078 60.602 mo
614.398 60.602 li
49.078 42.719 mo
614.398 42.719 li
.140414 .108034 .108034 0 cmyk
@
49.078 453.84 mo
614.398 453.84 li
49.078 400.199 mo
614.398 400.199 li
49.078 346.559 mo
614.398 346.559 li
49.078 292.922 mo
614.398 292.922 li
49.078 239.281 mo
614.398 239.281 li
49.078 185.762 mo
614.398 185.762 li
49.078 132.121 mo
614.398 132.121 li
49.078 78.48 mo
614.398 78.48 li
49.078 24.84 mo
614.398 24.84 li
.246403 .201175 .450446 .000885023 cmyk
@
84.359 24.84 mo
84.359 507.48 li
155.039 24.84 mo
155.039 507.48 li
225.719 24.84 mo
225.719 507.48 li
296.398 24.84 mo
296.398 507.48 li
367.078 24.84 mo
367.078 507.48 li
437.762 24.84 mo
437.762 507.48 li
508.32 24.84 mo
508.32 507.48 li
579 24.84 mo
579 507.48 li
.131685 .102663 .236637 0 cmyk
@
49.078 24.84 mo
49.078 507.48 li
119.762 24.84 mo
119.762 507.48 li
190.441 24.84 mo
190.441 507.48 li
261 24.84 mo
261 507.48 li
331.68 24.84 mo
331.68 507.48 li
402.359 24.84 mo
402.359 507.48 li
473.039 24.84 mo
473.039 507.48 li
543.719 24.84 mo
543.719 507.48 li
614.398 24.84 mo
614.398 507.48 li
.246403 .201175 .450446 .000885023 cmyk
@
22.68 499.441 mo
37.922 499.441 li
37.922 514.078 li
22.68 514.078 li
cp
0 0 0 0 cmyk
ef
22.68 445.801 mo
37.922 445.801 li
37.922 460.442 li
22.68 460.442 li
cp
ef
22.68 392.281 mo
37.922 392.281 li
37.922 406.922 li
22.68 406.922 li
cp
ef
22.68 338.641 mo
37.922 338.641 li
37.922 353.282 li
22.68 353.282 li
cp
ef
22.68 285 mo
37.922 285 li
37.922 299.641 li
22.68 299.641 li
cp
ef
22.68 231.359 mo
37.922 231.359 li
37.922 246 li
22.68 246 li
cp
ef
22.68 177.719 mo
37.922 177.719 li
37.922 192.36 li
22.68 192.36 li
cp
ef
16.68 124.078 mo
37.922 124.078 li
37.922 138.719 li
16.68 138.719 li
cp
ef
16.68 70.441 mo
37.922 70.441 li
37.922 85.078 li
16.68 85.078 li
cp
ef
16.68 16.801 mo
37.922 16.801 li
37.922 31.442 li
16.68 31.442 li
cp
ef
.96 lw
49.078 507.48 mo
614.398 507.48 li
.367803 .29575 .300999 .00198367 cmyk
@
49.078 507.48 mo
49.078 511.32 li
119.762 507.48 mo
119.762 511.32 li
190.441 507.48 mo
190.441 511.32 li
261 507.48 mo
261 511.32 li
331.68 507.48 mo
331.68 511.32 li
402.359 507.48 mo
402.359 511.32 li
473.039 507.48 mo
473.039 511.32 li
543.719 507.48 mo
543.719 511.32 li
614.398 507.48 mo
614.398 511.32 li
@
gsave
49.078 24.84 mo
615.121 24.84 li
615.121 508.199 li
49.078 508.199 li
cp
clp
1 lc
49.078 491.398 mo
119.762 499.199 li
190.441 503.52 li
261 501 li
331.68 502.801 li
402.359 502.078 li
473.039 502.078 li
543.719 501.719 li
614.398 502.078 li
.719875 .440223 .0276493 0 cmyk
@
grestore
1 lw
54.039 496.359 mo
43.961 486.281 li
43.961 496.359 mo
54.039 486.281 li
.719875 .440223 .0276493 0 cmyk
@
124.719 504.281 mo
114.641 494.199 li
114.641 504.281 mo
124.719 494.199 li
@
195.398 508.602 mo
185.32 498.519 li
185.32 508.602 mo
195.398 498.519 li
@
266.078 506.078 mo
256 496 li
256 506.078 mo
266.078 496 li
@
336.762 507.879 mo
326.68 497.801 li
326.68 507.879 mo
336.762 497.801 li
@
407.441 507.16 mo
397.359 497.078 li
397.359 507.16 mo
407.441 497.078 li
@
478.121 507.16 mo
468.039 497.078 li
468.039 507.16 mo
478.121 497.078 li
@
548.68 506.801 mo
538.602 496.719 li
538.602 506.801 mo
548.68 496.719 li
@
619.359 507.16 mo
609.281 497.078 li
609.281 507.16 mo
619.359 497.078 li
@
gsave
49.078 24.84 mo
615.121 24.84 li
615.121 508.199 li
49.078 508.199 li
cp
clp
.96 lw
1 lc
49.078 465.238 mo
119.762 486 li
190.441 496.32 li
261 492.84 li
331.68 496.32 li
402.359 492.121 li
473.039 496.68 li
543.719 492.84 li
614.398 495.719 li
.466651 0 .889799 0 cmyk
@
grestore
54.039 470.32 mo
43.961 460.238 li
43.961 470.32 mo
54.039 460.238 li
.466651 0 .889799 0 cmyk
@
124.719 491.078 mo
114.641 481 li
114.641 491.078 mo
124.719 481 li
@
195.398 501.398 mo
185.32 491.32 li
185.32 501.398 mo
195.398 491.32 li
@
266.078 497.801 mo
256 487.719 li
256 497.801 mo
266.078 487.719 li
@
336.762 501.398 mo
326.68 491.32 li
326.68 501.398 mo
336.762 491.32 li
@
407.441 497.078 mo
397.359 487 li
397.359 497.078 mo
407.441 487 li
@
478.121 501.762 mo
468.039 491.68 li
468.039 501.762 mo
478.121 491.68 li
@
548.68 497.801 mo
538.602 487.719 li
538.602 497.801 mo
548.68 487.719 li
@
619.359 500.68 mo
609.281 490.602 li
609.281 500.68 mo
619.359 490.602 li
@
gsave
49.078 24.84 mo
615.121 24.84 li
615.121 508.199 li
49.078 508.199 li
cp
clp
.96 lw
1 lc
49.078 365.16 mo
119.762 434.879 li
190.441 469.922 li
261 451.68 li
331.68 465.238 li
402.359 462.719 li
473.039 461.762 li
543.719 465.961 li
614.398 462.359 li
0 .990631 1 .000396735 cmyk
@
grestore
54.039 370.238 mo
43.961 360.16 li
43.961 370.238 mo
54.039 360.16 li
0 .990631 1 .000396735 cmyk
@
124.719 439.961 mo
114.641 429.879 li
114.641 439.961 mo
124.719 429.879 li
@
195.398 475 mo
185.32 464.922 li
185.32 475 mo
195.398 464.922 li
@
266.078 456.762 mo
256 446.68 li
256 456.762 mo
266.078 446.68 li
@
336.762 470.32 mo
326.68 460.238 li
326.68 470.32 mo
336.762 460.238 li
@
407.441 467.801 mo
397.359 457.719 li
397.359 467.801 mo
407.441 457.719 li
@
478.121 466.719 mo
468.039 456.641 li
468.039 466.719 mo
478.121 456.641 li
@
548.68 471.039 mo
538.602 460.961 li
538.602 471.039 mo
548.68 460.961 li
@
619.359 467.441 mo
609.281 457.359 li
609.281 467.441 mo
619.359 457.359 li
@
gsave
49.078 24.84 mo
615.121 24.84 li
615.121 508.199 li
49.078 508.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.078 415.922 mo
119.762 460.68 li
190.441 483.121 li
261 471.359 li
331.68 483.121 li
402.359 478.559 li
473.039 483.84 li
543.719 469.559 li
614.398 481.32 li
@
grestore
54.039 421 mo
43.961 410.922 li
43.961 421 mo
54.039 410.922 li
@
124.719 465.641 mo
114.641 455.559 li
114.641 465.641 mo
124.719 455.559 li
@
195.398 488.199 mo
185.32 478.121 li
185.32 488.199 mo
195.398 478.121 li
@
266.078 476.32 mo
256 466.238 li
256 476.32 mo
266.078 466.238 li
@
336.762 488.199 mo
326.68 478.121 li
326.68 488.199 mo
336.762 478.121 li
@
407.441 483.519 mo
397.359 473.441 li
397.359 483.519 mo
407.441 473.441 li
@
478.121 488.922 mo
468.039 478.84 li
468.039 488.922 mo
478.121 478.84 li
@
548.68 474.641 mo
538.602 464.559 li
538.602 474.641 mo
548.68 464.559 li
@
619.359 486.398 mo
609.281 476.32 li
609.281 486.398 mo
619.359 476.32 li
@
gsave
49.078 24.84 mo
615.121 24.84 li
615.121 508.199 li
49.078 508.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.078 256.801 mo
119.762 380.16 li
190.441 442.078 li
261 417.719 li
331.68 424.922 li
402.359 408.121 li
473.039 415.922 li
543.719 419.52 li
614.398 414.48 li
.719875 .440223 .0276493 0 cmyk
@
grestore
53.559 261.398 mo
44.441 252.281 li
44.441 261.398 mo
53.559 252.281 li
.719875 .440223 .0276493 0 cmyk
@
124.238 384.762 mo
115.121 375.641 li
115.121 384.762 mo
124.238 375.641 li
@
194.922 446.559 mo
185.801 437.441 li
185.801 446.559 mo
194.922 437.441 li
@
265.602 422.32 mo
256.48 413.199 li
256.48 422.32 mo
265.602 413.199 li
@
336.281 429.398 mo
327.16 420.281 li
327.16 429.398 mo
336.281 420.281 li
@
406.961 412.602 mo
397.84 403.48 li
397.84 412.602 mo
406.961 403.48 li
@
477.641 420.519 mo
468.52 411.398 li
468.52 420.519 mo
477.641 411.398 li
@
548.199 424 mo
539.078 414.879 li
539.078 424 mo
548.199 414.879 li
@
618.879 419.078 mo
609.762 409.961 li
609.762 419.078 mo
618.879 409.961 li
@
gsave
49.078 24.84 mo
615.121 24.84 li
615.121 508.199 li
49.078 508.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.078 314.039 mo
119.762 408.84 li
190.441 457.078 li
261 437.762 li
331.68 443.879 li
402.359 430.559 li
473.039 439.559 li
543.719 444.84 li
614.398 442.078 li
.466651 0 .889799 0 cmyk
@
grestore
54.039 319.121 mo
43.961 309.039 li
43.961 319.121 mo
54.039 309.039 li
.466651 0 .889799 0 cmyk
@
124.719 413.801 mo
114.641 403.719 li
114.641 413.801 mo
124.719 403.719 li
@
195.398 462.039 mo
185.32 451.961 li
185.32 462.039 mo
195.398 451.961 li
@
266.078 442.719 mo
256 432.641 li
256 442.719 mo
266.078 432.641 li
@
336.762 448.84 mo
326.68 438.762 li
326.68 448.84 mo
336.762 438.762 li
@
407.441 435.641 mo
397.359 425.559 li
397.359 435.641 mo
407.441 425.559 li
@
478.121 444.519 mo
468.039 434.441 li
468.039 444.519 mo
478.121 434.441 li
@
548.68 449.922 mo
538.602 439.84 li
538.602 449.922 mo
548.68 439.84 li
@
619.359 447.039 mo
609.281 436.961 li
609.281 447.039 mo
619.359 436.961 li
@
22.77 499.516 mo
37.961 499.516 li
37.961 514.164 li
22.77 514.164 li
cp
0 0 0 0 cmyk
ef
28.445 507.199 mo
28.441 507.781 28.395 508.312 28.309 508.793 cv
28.215 509.277 28.063 509.691 27.852 510.035 cv
27.633 510.379 27.355 510.648 27.016 510.836 cv
26.668 511.023 26.246 511.113 25.746 511.117 cv
25.27 511.113 24.867 511.031 24.543 510.863 cv
24.215 510.695 23.953 510.445 23.754 510.113 cv
23.551 509.785 23.406 509.379 23.328 508.895 cv
23.242 508.414 23.203 507.859 23.203 507.234 cv
23.203 506.656 23.25 506.129 23.344 505.645 cv
23.438 505.168 23.59 504.754 23.801 504.402 cv
24.012 504.059 24.289 503.789 24.633 503.598 cv
24.977 503.41 25.398 503.316 25.898 503.312 cv
26.375 503.316 26.777 503.402 27.105 503.57 cv
27.434 503.742 27.695 503.992 27.895 504.32 cv
28.094 504.652 28.234 505.059 28.32 505.539 cv
28.398 506.023 28.441 506.574 28.445 507.199 cv
cp
27.414 507.27 mo
27.41 506.895 27.398 506.555 27.375 506.25 cv
27.348 505.949 27.305 505.684 27.254 505.453 cv
27.199 505.227 27.133 505.031 27.047 504.859 cv
26.961 504.695 26.859 504.559 26.746 504.449 cv
26.625 504.348 26.492 504.27 26.344 504.215 cv
26.195 504.168 26.027 504.141 25.84 504.141 cv
25.508 504.141 25.238 504.219 25.031 504.375 cv
24.82 504.531 24.656 504.746 24.539 505.02 cv
24.422 505.293 24.34 505.613 24.297 505.98 cv
24.254 506.348 24.234 506.742 24.234 507.164 cv
24.234 507.734 24.262 508.219 24.32 508.609 cv
24.379 509.008 24.473 509.328 24.598 509.578 cv
24.723 509.828 24.883 510.012 25.086 510.125 cv
25.281 510.238 25.523 510.293 25.805 510.293 cv
26.023 510.293 26.215 510.258 26.383 510.187 cv
26.547 510.117 26.688 510.02 26.809 509.887 cv
26.926 509.758 27.027 509.598 27.105 509.414 cv
27.184 509.234 27.246 509.031 27.293 508.805 cv
27.34 508.582 27.371 508.344 27.387 508.082 cv
27.402 507.824 27.41 507.551 27.414 507.27 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
31.008 510.367 mo
31.008 510.648 30.961 510.832 30.867 510.926 cv
30.773 511.016 30.605 511.059 30.371 511.062 cv
30.133 511.059 29.973 511.016 29.883 510.926 cv
29.789 510.836 29.742 510.656 29.746 510.387 cv
29.742 510.109 29.789 509.926 29.883 509.832 cv
29.977 509.742 30.145 509.695 30.387 509.695 cv
30.621 509.695 30.781 509.742 30.871 509.832 cv
30.961 509.922 31.008 510.102 31.008 510.367 cv
cp
f
37.551 507.199 mo
37.547 507.781 37.5 508.312 37.414 508.793 cv
37.32 509.277 37.168 509.691 36.957 510.035 cv
36.738 510.379 36.461 510.648 36.121 510.836 cv
35.773 511.023 35.352 511.113 34.852 511.117 cv
34.375 511.113 33.973 511.031 33.648 510.863 cv
33.32 510.695 33.059 510.445 32.859 510.113 cv
32.656 509.785 32.512 509.379 32.434 508.895 cv
32.348 508.414 32.309 507.859 32.309 507.234 cv
32.309 506.656 32.355 506.129 32.449 505.645 cv
32.543 505.168 32.695 504.754 32.906 504.402 cv
33.117 504.059 33.395 503.789 33.738 503.598 cv
34.082 503.41 34.504 503.316 35.004 503.312 cv
35.48 503.316 35.883 503.402 36.211 503.57 cv
36.539 503.742 36.801 503.992 37 504.32 cv
37.199 504.652 37.34 505.059 37.426 505.539 cv
37.504 506.023 37.547 506.574 37.551 507.199 cv
cp
36.52 507.27 mo
36.516 506.895 36.504 506.555 36.48 506.25 cv
36.453 505.949 36.41 505.684 36.359 505.453 cv
36.305 505.227 36.238 505.031 36.152 504.859 cv
36.066 504.695 35.965 504.559 35.852 504.449 cv
35.73 504.348 35.598 504.27 35.449 504.215 cv
35.301 504.168 35.133 504.141 34.945 504.141 cv
34.613 504.141 34.344 504.219 34.137 504.375 cv
33.926 504.531 33.762 504.746 33.645 505.02 cv
33.527 505.293 33.445 505.613 33.402 505.98 cv
33.359 506.348 33.34 506.742 33.34 507.164 cv
33.34 507.734 33.367 508.219 33.426 508.609 cv
33.484 509.008 33.578 509.328 33.703 509.578 cv
33.828 509.828 33.988 510.012 34.191 510.125 cv
34.387 510.238 34.629 510.293 34.91 510.293 cv
35.129 510.293 35.32 510.258 35.488 510.187 cv
35.652 510.117 35.793 510.02 35.914 509.887 cv
36.031 509.758 36.133 509.598 36.211 509.414 cv
36.289 509.234 36.352 509.031 36.398 508.805 cv
36.445 508.582 36.477 508.344 36.492 508.082 cv
36.508 507.824 36.516 507.551 36.52 507.27 cv
cp
f
22.77 445.891 mo
37.961 445.891 li
37.961 460.539 li
22.77 460.539 li
cp
0 0 0 0 cmyk
ef
28.211 456.973 mo
28.207 457.047 28.203 457.109 28.195 457.16 cv
28.184 457.215 28.168 457.258 28.148 457.285 cv
28.125 457.32 28.102 457.344 28.078 457.352 cv
28.055 457.367 28.027 457.371 28 457.371 cv
24.039 457.371 li
24.012 457.371 23.988 457.367 23.965 457.352 cv
23.941 457.344 23.918 457.32 23.898 457.285 cv
23.875 457.258 23.859 457.215 23.848 457.16 cv
23.832 457.109 23.824 457.047 23.828 456.973 cv
23.824 456.902 23.832 456.844 23.848 456.793 cv
23.859 456.742 23.871 456.699 23.891 456.664 cv
23.906 456.633 23.93 456.609 23.953 456.59 cv
23.977 456.574 24.004 456.562 24.039 456.562 cv
25.625 456.562 li
25.625 450.797 li
24.156 451.668 li
24.082 451.715 24.023 451.738 23.98 451.742 cv
23.934 451.754 23.898 451.746 23.871 451.715 cv
23.84 451.691 23.82 451.648 23.813 451.59 cv
23.805 451.531 23.801 451.457 23.801 451.363 cv
23.801 451.301 23.801 451.242 23.809 451.195 cv
23.813 451.148 23.824 451.109 23.836 451.078 cv
23.844 451.047 23.859 451.02 23.883 450.996 cv
23.906 450.973 23.934 450.949 23.969 450.926 cv
25.719 449.809 li
25.73 449.797 25.75 449.785 25.777 449.777 cv
25.797 449.77 25.828 449.762 25.863 449.754 cv
25.895 449.746 25.934 449.742 25.984 449.742 cv
26.027 449.742 26.086 449.742 26.164 449.738 cv
26.254 449.742 26.332 449.746 26.398 449.75 cv
26.457 449.762 26.508 449.773 26.543 449.781 cv
26.574 449.797 26.598 449.812 26.613 449.832 cv
26.625 449.855 26.629 449.879 26.633 449.902 cv
26.633 456.562 li
28 456.562 li
28.027 456.562 28.059 456.574 28.09 456.59 cv
28.117 456.609 28.137 456.633 28.156 456.664 cv
28.172 456.699 28.188 456.742 28.195 456.793 cv
28.203 456.844 28.207 456.902 28.211 456.973 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
31.008 456.73 mo
31.008 457.012 30.961 457.195 30.867 457.289 cv
30.773 457.379 30.605 457.422 30.371 457.426 cv
30.133 457.422 29.973 457.379 29.883 457.289 cv
29.789 457.199 29.742 457.02 29.746 456.75 cv
29.742 456.473 29.789 456.289 29.883 456.195 cv
29.977 456.105 30.145 456.059 30.387 456.059 cv
30.621 456.059 30.781 456.105 30.871 456.195 cv
30.961 456.285 31.008 456.465 31.008 456.73 cv
cp
f
37.266 454.934 mo
37.266 455.34 37.195 455.703 37.059 456.02 cv
36.922 456.336 36.73 456.602 36.48 456.82 cv
36.23 457.039 35.93 457.203 35.586 457.312 cv
35.234 457.422 34.852 457.477 34.434 457.48 cv
34.195 457.477 33.973 457.461 33.766 457.43 cv
33.551 457.398 33.363 457.359 33.203 457.312 cv
33.035 457.266 32.902 457.219 32.801 457.168 cv
32.695 457.125 32.625 457.086 32.598 457.055 cv
32.566 457.027 32.547 457.004 32.535 456.977 cv
32.523 456.957 32.512 456.93 32.504 456.895 cv
32.488 456.863 32.484 456.82 32.484 456.77 cv
32.48 456.719 32.477 456.656 32.48 456.586 cv
32.477 456.523 32.48 456.465 32.488 456.41 cv
32.492 456.355 32.504 456.312 32.52 456.281 cv
32.535 456.25 32.551 456.227 32.574 456.207 cv
32.59 456.195 32.617 456.187 32.648 456.184 cv
32.688 456.187 32.746 456.211 32.828 456.258 cv
32.91 456.305 33.02 456.359 33.16 456.414 cv
33.297 456.473 33.469 456.523 33.676 456.574 cv
33.879 456.629 34.125 456.656 34.406 456.652 cv
34.668 456.656 34.906 456.625 35.129 456.559 cv
35.344 456.5 35.531 456.402 35.691 456.266 cv
35.848 456.137 35.973 455.969 36.063 455.766 cv
36.152 455.562 36.199 455.316 36.199 455.027 cv
36.199 454.785 36.16 454.574 36.086 454.387 cv
36.008 454.203 35.891 454.047 35.734 453.922 cv
35.574 453.801 35.375 453.711 35.133 453.648 cv
34.891 453.594 34.602 453.562 34.266 453.559 cv
34.027 453.562 33.82 453.574 33.652 453.594 cv
33.477 453.621 33.316 453.633 33.168 453.629 cv
33.055 453.633 32.977 453.605 32.934 453.551 cv
32.883 453.5 32.859 453.402 32.863 453.258 cv
32.863 450.168 li
32.859 450.043 32.891 449.945 32.953 449.883 cv
33.016 449.82 33.102 449.789 33.215 449.789 cv
36.574 449.789 li
36.605 449.789 36.633 449.801 36.664 449.816 cv
36.688 449.836 36.715 449.859 36.738 449.895 cv
36.758 449.934 36.77 449.98 36.781 450.031 cv
36.789 450.09 36.797 450.152 36.797 450.223 cv
36.797 450.363 36.777 450.473 36.738 450.551 cv
36.699 450.629 36.645 450.668 36.582 450.668 cv
33.871 450.668 li
33.871 452.793 li
34 452.777 34.137 452.766 34.277 452.762 cv
34.414 452.758 34.57 452.754 34.754 452.754 cv
35.168 452.754 35.535 452.809 35.848 452.91 cv
36.16 453.02 36.418 453.164 36.629 453.352 cv
36.836 453.539 36.996 453.77 37.105 454.039 cv
37.211 454.309 37.266 454.605 37.266 454.934 cv
cp
f
22.77 392.262 mo
37.961 392.262 li
37.961 406.91 li
22.77 406.91 li
cp
0 0 0 0 cmyk
ef
28.148 401.578 mo
28.148 401.93 28.086 402.246 27.965 402.523 cv
27.844 402.805 27.668 403.043 27.441 403.242 cv
27.211 403.441 26.934 403.594 26.602 403.703 cv
26.27 403.809 25.895 403.859 25.477 403.863 cv
25.219 403.859 24.98 403.84 24.762 403.801 cv
24.539 403.758 24.34 403.711 24.172 403.652 cv
23.996 403.598 23.855 403.539 23.742 403.477 cv
23.629 403.418 23.555 403.375 23.527 403.348 cv
23.496 403.32 23.477 403.293 23.461 403.266 cv
23.445 403.238 23.43 403.203 23.418 403.164 cv
23.406 403.125 23.398 403.078 23.395 403.02 cv
23.387 402.965 23.383 402.895 23.387 402.812 cv
23.383 402.672 23.398 402.574 23.426 402.516 cv
23.453 402.465 23.492 402.437 23.547 402.434 cv
23.582 402.437 23.652 402.469 23.762 402.527 cv
23.863 402.594 24 402.66 24.172 402.73 cv
24.336 402.805 24.531 402.875 24.754 402.934 cv
24.977 403 25.227 403.031 25.5 403.027 cv
25.766 403.031 25.996 402.996 26.199 402.93 cv
26.395 402.863 26.563 402.77 26.703 402.648 cv
26.836 402.527 26.941 402.383 27.012 402.215 cv
27.078 402.051 27.109 401.871 27.113 401.672 cv
27.109 401.457 27.066 401.262 26.98 401.09 cv
26.891 400.918 26.766 400.77 26.602 400.645 cv
26.434 400.52 26.227 400.426 25.984 400.359 cv
25.738 400.293 25.461 400.258 25.148 400.258 cv
24.402 400.258 li
24.367 400.258 24.336 400.254 24.309 400.238 cv
24.277 400.227 24.25 400.203 24.23 400.168 cv
24.207 400.141 24.191 400.098 24.176 400.047 cv
24.16 399.996 24.152 399.93 24.156 399.848 cv
24.152 399.773 24.156 399.711 24.172 399.66 cv
24.18 399.613 24.199 399.574 24.223 399.543 cv
24.242 399.516 24.266 399.496 24.293 399.48 cv
24.32 399.469 24.352 399.461 24.391 399.457 cv
25.055 399.457 li
25.313 399.461 25.543 399.43 25.75 399.359 cv
25.953 399.297 26.125 399.199 26.27 399.07 cv
26.41 398.949 26.52 398.801 26.598 398.621 cv
26.672 398.449 26.711 398.254 26.715 398.039 cv
26.711 397.883 26.688 397.734 26.637 397.59 cv
26.586 397.449 26.508 397.324 26.41 397.219 cv
26.305 397.113 26.176 397.031 26.02 396.969 cv
25.859 396.91 25.676 396.879 25.469 396.875 cv
25.238 396.879 25.031 396.914 24.844 396.98 cv
24.652 397.051 24.48 397.121 24.336 397.199 cv
24.184 397.277 24.063 397.352 23.965 397.418 cv
23.867 397.488 23.797 397.523 23.762 397.52 cv
23.73 397.523 23.707 397.52 23.688 397.508 cv
23.664 397.5 23.645 397.48 23.633 397.449 cv
23.617 397.422 23.609 397.379 23.605 397.324 cv
23.598 397.273 23.594 397.203 23.598 397.117 cv
23.594 397.059 23.598 397.008 23.602 396.961 cv
23.605 396.918 23.613 396.879 23.625 396.844 cv
23.637 396.812 23.648 396.781 23.668 396.754 cv
23.68 396.727 23.707 396.695 23.746 396.656 cv
23.781 396.621 23.855 396.566 23.973 396.492 cv
24.082 396.426 24.223 396.355 24.391 396.285 cv
24.555 396.219 24.746 396.164 24.965 396.113 cv
25.18 396.07 25.414 396.047 25.668 396.043 cv
26.02 396.047 26.328 396.09 26.598 396.18 cv
26.859 396.27 27.082 396.398 27.262 396.559 cv
27.438 396.727 27.57 396.922 27.664 397.148 cv
27.75 397.379 27.797 397.633 27.797 397.91 cv
27.797 398.148 27.762 398.371 27.699 398.574 cv
27.633 398.785 27.543 398.965 27.422 399.121 cv
27.301 399.281 27.152 399.418 26.977 399.527 cv
26.801 399.641 26.598 399.719 26.367 399.758 cv
26.367 399.77 li
26.629 399.801 26.867 399.863 27.086 399.965 cv
27.301 400.07 27.488 400.203 27.648 400.355 cv
27.801 400.516 27.922 400.699 28.016 400.906 cv
28.102 401.117 28.148 401.34 28.148 401.578 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
31.023 403.109 mo
31.02 403.391 30.973 403.574 30.883 403.668 cv
30.789 403.758 30.621 403.801 30.383 403.805 cv
30.145 403.801 29.984 403.758 29.895 403.668 cv
29.805 403.578 29.758 403.398 29.762 403.129 cv
29.758 402.852 29.805 402.668 29.898 402.574 cv
29.988 402.484 30.156 402.437 30.402 402.434 cv
30.633 402.437 30.793 402.484 30.887 402.57 cv
30.973 402.664 31.02 402.844 31.023 403.109 cv
cp
f
37.582 399.934 mo
37.578 400.52 37.531 401.051 37.445 401.531 cv
37.352 402.016 37.199 402.43 36.988 402.773 cv
36.77 403.121 36.492 403.391 36.148 403.578 cv
35.805 403.77 35.379 403.859 34.879 403.863 cv
34.395 403.859 33.992 403.777 33.668 403.609 cv
33.34 403.437 33.078 403.187 32.879 402.855 cv
32.68 402.527 32.535 402.121 32.453 401.637 cv
32.367 401.156 32.328 400.602 32.328 399.969 cv
32.328 399.395 32.375 398.863 32.469 398.375 cv
32.563 397.895 32.715 397.477 32.926 397.129 cv
33.137 396.785 33.414 396.52 33.762 396.328 cv
34.102 396.141 34.523 396.047 35.031 396.043 cv
35.508 396.047 35.91 396.129 36.238 396.297 cv
36.563 396.469 36.828 396.719 37.031 397.047 cv
37.23 397.379 37.371 397.789 37.457 398.27 cv
37.535 398.758 37.578 399.312 37.582 399.934 cv
cp
36.551 400.004 mo
36.547 399.629 36.531 399.289 36.508 398.984 cv
36.477 398.687 36.438 398.418 36.387 398.184 cv
36.332 397.953 36.266 397.758 36.184 397.59 cv
36.098 397.426 35.996 397.289 35.879 397.18 cv
35.762 397.074 35.625 396.992 35.477 396.941 cv
35.324 396.895 35.156 396.871 34.973 396.867 cv
34.637 396.871 34.367 396.949 34.16 397.105 cv
33.949 397.262 33.785 397.477 33.668 397.75 cv
33.547 398.023 33.465 398.348 33.426 398.715 cv
33.379 399.086 33.359 399.48 33.363 399.898 cv
33.359 400.469 33.387 400.949 33.449 401.348 cv
33.504 401.746 33.598 402.07 33.73 402.316 cv
33.855 402.57 34.02 402.754 34.215 402.863 cv
34.41 402.98 34.648 403.035 34.938 403.035 cv
35.152 403.035 35.344 403 35.512 402.93 cv
35.676 402.859 35.82 402.762 35.941 402.629 cv
36.059 402.5 36.156 402.34 36.238 402.156 cv
36.313 401.973 36.375 401.77 36.426 401.543 cv
36.469 401.32 36.504 401.078 36.523 400.816 cv
36.539 400.559 36.547 400.289 36.551 400.004 cv
cp
f
22.77 338.641 mo
37.961 338.641 li
37.961 353.289 li
22.77 353.289 li
cp
0 0 0 0 cmyk
ef
28.516 347.953 mo
28.512 348.086 28.492 348.187 28.457 348.258 cv
28.414 348.332 28.359 348.371 28.297 348.367 cv
27.438 348.367 li
27.438 349.961 li
27.434 349.996 27.426 350.023 27.414 350.043 cv
27.395 350.066 27.367 350.082 27.328 350.098 cv
27.289 350.113 27.234 350.125 27.172 350.133 cv
27.105 350.141 27.023 350.145 26.926 350.145 cv
26.824 350.145 26.746 350.141 26.684 350.133 cv
26.621 350.125 26.57 350.113 26.531 350.098 cv
26.492 350.082 26.465 350.066 26.449 350.043 cv
26.434 350.023 26.426 349.996 26.43 349.961 cv
26.43 348.367 li
23.328 348.367 li
23.281 348.371 23.246 348.363 23.215 348.352 cv
23.184 348.344 23.152 348.324 23.129 348.289 cv
23.098 348.262 23.082 348.215 23.074 348.152 cv
23.066 348.094 23.063 348.02 23.063 347.922 cv
23.063 347.852 23.063 347.785 23.066 347.727 cv
23.07 347.668 23.078 347.613 23.09 347.566 cv
23.102 347.52 23.117 347.473 23.137 347.426 cv
23.156 347.379 23.18 347.332 23.207 347.281 cv
25.91 342.672 li
25.93 342.645 25.957 342.617 25.996 342.59 cv
26.031 342.57 26.082 342.551 26.145 342.531 cv
26.203 342.52 26.273 342.508 26.363 342.5 cv
26.449 342.496 26.555 342.492 26.676 342.492 cv
26.805 342.492 26.918 342.5 27.016 342.508 cv
27.113 342.523 27.191 342.535 27.254 342.547 cv
27.309 342.566 27.355 342.586 27.391 342.609 cv
27.418 342.633 27.434 342.664 27.438 342.695 cv
27.438 347.539 li
28.297 347.539 li
28.359 347.543 28.414 347.578 28.453 347.641 cv
28.492 347.711 28.512 347.812 28.516 347.953 cv
cp
26.43 343.375 mo
26.422 343.375 li
23.984 347.539 li
26.43 347.539 li
cp
.629114 .553033 .543389 .289647 cmyk
f
31.008 349.469 mo
31.008 349.75 30.961 349.934 30.867 350.027 cv
30.773 350.117 30.605 350.16 30.371 350.164 cv
30.133 350.16 29.973 350.117 29.883 350.027 cv
29.789 349.937 29.742 349.758 29.746 349.488 cv
29.742 349.211 29.789 349.027 29.883 348.934 cv
29.977 348.844 30.145 348.797 30.387 348.797 cv
30.621 348.797 30.781 348.844 30.871 348.934 cv
30.961 349.023 31.008 349.203 31.008 349.469 cv
cp
f
37.266 347.672 mo
37.266 348.078 37.195 348.441 37.059 348.758 cv
36.922 349.074 36.73 349.34 36.48 349.559 cv
36.23 349.777 35.93 349.941 35.586 350.051 cv
35.234 350.16 34.852 350.215 34.434 350.219 cv
34.195 350.215 33.973 350.199 33.766 350.168 cv
33.551 350.137 33.363 350.098 33.203 350.051 cv
33.035 350.004 32.902 349.957 32.801 349.906 cv
32.695 349.863 32.625 349.824 32.598 349.793 cv
32.566 349.766 32.547 349.742 32.535 349.715 cv
32.523 349.695 32.512 349.668 32.504 349.633 cv
32.488 349.602 32.484 349.559 32.484 349.508 cv
32.48 349.457 32.477 349.395 32.48 349.324 cv
32.477 349.262 32.48 349.203 32.488 349.148 cv
32.492 349.094 32.504 349.051 32.52 349.02 cv
32.535 348.988 32.551 348.965 32.574 348.945 cv
32.59 348.934 32.617 348.926 32.648 348.922 cv
32.688 348.926 32.746 348.949 32.828 348.996 cv
32.91 349.043 33.02 349.098 33.16 349.152 cv
33.297 349.211 33.469 349.262 33.676 349.312 cv
33.879 349.367 34.125 349.395 34.406 349.391 cv
34.668 349.395 34.906 349.363 35.129 349.297 cv
35.344 349.238 35.531 349.141 35.691 349.004 cv
35.848 348.875 35.973 348.707 36.063 348.504 cv
36.152 348.301 36.199 348.055 36.199 347.766 cv
36.199 347.523 36.16 347.312 36.086 347.125 cv
36.008 346.941 35.891 346.785 35.734 346.66 cv
35.574 346.539 35.375 346.449 35.133 346.387 cv
34.891 346.332 34.602 346.301 34.266 346.297 cv
34.027 346.301 33.82 346.312 33.652 346.332 cv
33.477 346.359 33.316 346.371 33.168 346.367 cv
33.055 346.371 32.977 346.344 32.934 346.289 cv
32.883 346.238 32.859 346.141 32.863 345.996 cv
32.863 342.906 li
32.859 342.781 32.891 342.684 32.953 342.621 cv
33.016 342.559 33.102 342.527 33.215 342.527 cv
36.574 342.527 li
36.605 342.527 36.633 342.539 36.664 342.555 cv
36.688 342.574 36.715 342.598 36.738 342.633 cv
36.758 342.672 36.77 342.719 36.781 342.77 cv
36.789 342.828 36.797 342.891 36.797 342.961 cv
36.797 343.102 36.777 343.211 36.738 343.289 cv
36.699 343.367 36.645 343.406 36.582 343.406 cv
33.871 343.406 li
33.871 345.531 li
34 345.516 34.137 345.504 34.277 345.5 cv
34.414 345.496 34.57 345.492 34.754 345.492 cv
35.168 345.492 35.535 345.547 35.848 345.648 cv
36.16 345.758 36.418 345.902 36.629 346.09 cv
36.836 346.277 36.996 346.508 37.105 346.777 cv
37.211 347.047 37.266 347.344 37.266 347.672 cv
cp
f
22.77 285.012 mo
37.961 285.012 li
37.961 299.66 li
22.77 299.66 li
cp
0 0 0 0 cmyk
ef
28.391 294.016 mo
28.387 294.348 28.336 294.668 28.238 294.98 cv
28.133 295.293 27.977 295.566 27.77 295.801 cv
27.555 296.035 27.289 296.227 26.965 296.367 cv
26.637 296.508 26.254 296.574 25.816 296.578 cv
25.5 296.574 25.219 296.539 24.98 296.461 cv
24.734 296.387 24.523 296.273 24.348 296.129 cv
24.164 295.988 24.016 295.812 23.898 295.598 cv
23.777 295.391 23.68 295.148 23.609 294.875 cv
23.531 294.605 23.48 294.312 23.453 293.988 cv
23.418 293.672 23.402 293.328 23.406 292.961 cv
23.402 292.637 23.422 292.309 23.461 291.977 cv
23.496 291.645 23.559 291.324 23.648 291.016 cv
23.734 290.707 23.855 290.418 24.012 290.145 cv
24.168 289.875 24.359 289.637 24.594 289.434 cv
24.824 289.234 25.105 289.074 25.43 288.957 cv
25.75 288.84 26.125 288.781 26.563 288.781 cv
26.703 288.781 26.852 288.793 27 288.809 cv
27.148 288.832 27.285 288.855 27.41 288.879 cv
27.535 288.91 27.641 288.941 27.727 288.977 cv
27.813 289.012 27.867 289.039 27.895 289.062 cv
27.922 289.086 27.941 289.109 27.957 289.133 cv
27.965 289.156 27.977 289.184 27.988 289.215 cv
27.992 289.246 28 289.281 28.008 289.312 cv
28.012 289.352 28.012 289.395 28.016 289.449 cv
28.012 289.52 28.012 289.582 28.012 289.633 cv
28.008 289.684 28 289.723 27.988 289.754 cv
27.973 289.785 27.953 289.809 27.934 289.824 cv
27.91 289.84 27.883 289.848 27.852 289.848 cv
27.805 289.848 27.746 289.836 27.672 289.809 cv
27.598 289.781 27.508 289.75 27.402 289.715 cv
27.297 289.684 27.168 289.652 27.02 289.625 cv
26.867 289.602 26.695 289.59 26.496 289.586 cv
26.133 289.59 25.82 289.664 25.559 289.809 cv
25.293 289.961 25.078 290.16 24.914 290.406 cv
24.75 290.66 24.625 290.949 24.547 291.277 cv
24.465 291.605 24.422 291.949 24.41 292.309 cv
24.512 292.25 24.625 292.191 24.754 292.133 cv
24.879 292.078 25.016 292.027 25.168 291.977 cv
25.316 291.934 25.477 291.895 25.645 291.863 cv
25.813 291.832 25.992 291.816 26.188 291.816 cv
26.594 291.816 26.941 291.875 27.223 291.984 cv
27.504 292.098 27.73 292.25 27.902 292.445 cv
28.074 292.645 28.199 292.879 28.277 293.145 cv
28.352 293.418 28.387 293.707 28.391 294.016 cv
cp
27.367 294.109 mo
27.363 293.883 27.34 293.676 27.301 293.488 cv
27.254 293.305 27.18 293.148 27.074 293.02 cv
26.969 292.891 26.828 292.789 26.652 292.719 cv
26.477 292.648 26.262 292.613 26.004 292.613 cv
25.859 292.613 25.715 292.629 25.57 292.652 cv
25.422 292.68 25.281 292.715 25.148 292.758 cv
25.016 292.805 24.887 292.855 24.762 292.918 cv
24.637 292.98 24.523 293.047 24.43 293.109 cv
24.426 293.617 24.457 294.039 24.523 294.379 cv
24.586 294.719 24.68 294.992 24.805 295.195 cv
24.926 295.402 25.082 295.547 25.266 295.633 cv
25.445 295.723 25.66 295.766 25.91 295.766 cv
26.16 295.766 26.375 295.719 26.559 295.625 cv
26.742 295.531 26.895 295.406 27.016 295.246 cv
27.137 295.09 27.227 294.914 27.281 294.715 cv
27.336 294.52 27.363 294.316 27.367 294.109 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
31.008 295.828 mo
31.008 296.109 30.961 296.293 30.867 296.387 cv
30.773 296.477 30.605 296.52 30.371 296.523 cv
30.133 296.52 29.973 296.477 29.883 296.387 cv
29.789 296.297 29.742 296.117 29.746 295.848 cv
29.742 295.57 29.789 295.387 29.883 295.293 cv
29.977 295.203 30.145 295.156 30.387 295.156 cv
30.621 295.156 30.781 295.203 30.871 295.293 cv
30.961 295.383 31.008 295.562 31.008 295.828 cv
cp
f
37.551 292.66 mo
37.547 293.242 37.5 293.773 37.414 294.254 cv
37.32 294.738 37.168 295.152 36.957 295.496 cv
36.738 295.84 36.461 296.109 36.121 296.297 cv
35.773 296.484 35.352 296.574 34.852 296.578 cv
34.375 296.574 33.973 296.492 33.648 296.324 cv
33.32 296.156 33.059 295.906 32.859 295.574 cv
32.656 295.246 32.512 294.84 32.434 294.355 cv
32.348 293.875 32.309 293.32 32.309 292.695 cv
32.309 292.117 32.355 291.59 32.449 291.105 cv
32.543 290.629 32.695 290.215 32.906 289.863 cv
33.117 289.52 33.395 289.25 33.738 289.059 cv
34.082 288.871 34.504 288.777 35.004 288.773 cv
35.48 288.777 35.883 288.863 36.211 289.031 cv
36.539 289.203 36.801 289.453 37 289.781 cv
37.199 290.113 37.34 290.52 37.426 291 cv
37.504 291.484 37.547 292.035 37.551 292.66 cv
cp
36.52 292.73 mo
36.516 292.355 36.504 292.016 36.48 291.711 cv
36.453 291.41 36.41 291.145 36.359 290.914 cv
36.305 290.687 36.238 290.492 36.152 290.32 cv
36.066 290.156 35.965 290.02 35.852 289.91 cv
35.73 289.809 35.598 289.73 35.449 289.676 cv
35.301 289.629 35.133 289.602 34.945 289.602 cv
34.613 289.602 34.344 289.68 34.137 289.836 cv
33.926 289.992 33.762 290.207 33.645 290.48 cv
33.527 290.754 33.445 291.074 33.402 291.441 cv
33.359 291.809 33.34 292.203 33.34 292.625 cv
33.34 293.195 33.367 293.68 33.426 294.07 cv
33.484 294.469 33.578 294.789 33.703 295.039 cv
33.828 295.289 33.988 295.473 34.191 295.586 cv
34.387 295.699 34.629 295.754 34.91 295.754 cv
35.129 295.754 35.32 295.719 35.488 295.648 cv
35.652 295.578 35.793 295.48 35.914 295.348 cv
36.031 295.219 36.133 295.059 36.211 294.875 cv
36.289 294.695 36.352 294.492 36.398 294.266 cv
36.445 294.043 36.477 293.805 36.492 293.543 cv
36.508 293.285 36.516 293.012 36.52 292.73 cv
cp
f
22.77 231.379 mo
37.961 231.379 li
37.961 246.031 li
22.77 246.031 li
cp
0 0 0 0 cmyk
ef
28.305 235.68 mo
28.301 235.75 28.297 235.816 28.297 235.871 cv
28.289 235.93 28.281 235.984 28.273 236.035 cv
28.258 236.09 28.246 236.141 28.23 236.187 cv
28.215 236.238 28.195 236.289 28.172 236.344 cv
25.441 242.633 li
25.422 242.684 25.395 242.723 25.367 242.75 cv
25.336 242.781 25.301 242.805 25.254 242.82 cv
25.207 242.836 25.148 242.844 25.082 242.852 cv
25.008 242.859 24.922 242.863 24.828 242.863 cv
24.688 242.863 24.586 242.855 24.516 242.844 cv
24.441 242.832 24.387 242.816 24.355 242.789 cv
24.32 242.766 24.305 242.734 24.309 242.695 cv
24.313 242.66 24.328 242.617 24.352 242.562 cv
27.223 236.133 li
23.586 236.133 li
23.508 236.137 23.453 236.098 23.414 236.016 cv
23.375 235.941 23.355 235.832 23.359 235.687 cv
23.355 235.613 23.359 235.547 23.375 235.492 cv
23.383 235.437 23.398 235.395 23.418 235.355 cv
23.438 235.32 23.461 235.293 23.488 235.273 cv
23.516 235.258 23.547 235.246 23.586 235.246 cv
28 235.246 li
28.055 235.246 28.102 235.254 28.145 235.266 cv
28.184 235.277 28.215 235.301 28.238 235.336 cv
28.258 235.371 28.277 235.414 28.289 235.469 cv
28.297 235.523 28.301 235.594 28.305 235.68 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
31.008 242.187 mo
31.008 242.469 30.961 242.652 30.867 242.746 cv
30.773 242.836 30.605 242.879 30.371 242.883 cv
30.133 242.879 29.973 242.836 29.883 242.746 cv
29.789 242.656 29.742 242.477 29.746 242.207 cv
29.742 241.93 29.789 241.746 29.883 241.652 cv
29.977 241.562 30.145 241.516 30.387 241.516 cv
30.621 241.516 30.781 241.562 30.871 241.652 cv
30.961 241.742 31.008 241.922 31.008 242.187 cv
cp
f
37.266 240.391 mo
37.266 240.797 37.195 241.16 37.059 241.477 cv
36.922 241.793 36.73 242.059 36.48 242.277 cv
36.23 242.496 35.93 242.66 35.586 242.77 cv
35.234 242.879 34.852 242.934 34.434 242.937 cv
34.195 242.934 33.973 242.918 33.766 242.887 cv
33.551 242.855 33.363 242.816 33.203 242.77 cv
33.035 242.723 32.902 242.676 32.801 242.625 cv
32.695 242.582 32.625 242.543 32.598 242.512 cv
32.566 242.484 32.547 242.461 32.535 242.434 cv
32.523 242.414 32.512 242.387 32.504 242.352 cv
32.488 242.32 32.484 242.277 32.484 242.227 cv
32.48 242.176 32.477 242.113 32.48 242.043 cv
32.477 241.98 32.48 241.922 32.488 241.867 cv
32.492 241.812 32.504 241.77 32.52 241.738 cv
32.535 241.707 32.551 241.684 32.574 241.664 cv
32.59 241.652 32.617 241.645 32.648 241.641 cv
32.688 241.645 32.746 241.668 32.828 241.715 cv
32.91 241.762 33.02 241.816 33.16 241.871 cv
33.297 241.93 33.469 241.98 33.676 242.031 cv
33.879 242.086 34.125 242.113 34.406 242.109 cv
34.668 242.113 34.906 242.082 35.129 242.016 cv
35.344 241.957 35.531 241.859 35.691 241.723 cv
35.848 241.594 35.973 241.426 36.063 241.223 cv
36.152 241.02 36.199 240.773 36.199 240.484 cv
36.199 240.242 36.16 240.031 36.086 239.844 cv
36.008 239.66 35.891 239.504 35.734 239.379 cv
35.574 239.258 35.375 239.168 35.133 239.105 cv
34.891 239.051 34.602 239.02 34.266 239.016 cv
34.027 239.02 33.82 239.031 33.652 239.051 cv
33.477 239.078 33.316 239.09 33.168 239.086 cv
33.055 239.09 32.977 239.062 32.934 239.008 cv
32.883 238.957 32.859 238.859 32.863 238.715 cv
32.863 235.625 li
32.859 235.5 32.891 235.402 32.953 235.34 cv
33.016 235.277 33.102 235.246 33.215 235.246 cv
36.574 235.246 li
36.605 235.246 36.633 235.258 36.664 235.273 cv
36.688 235.293 36.715 235.316 36.738 235.352 cv
36.758 235.391 36.77 235.437 36.781 235.488 cv
36.789 235.547 36.797 235.609 36.797 235.68 cv
36.797 235.82 36.777 235.93 36.738 236.008 cv
36.699 236.086 36.645 236.125 36.582 236.125 cv
33.871 236.125 li
33.871 238.25 li
34 238.234 34.137 238.223 34.277 238.219 cv
34.414 238.215 34.57 238.211 34.754 238.211 cv
35.168 238.211 35.535 238.266 35.848 238.367 cv
36.16 238.477 36.418 238.621 36.629 238.809 cv
36.836 238.996 36.996 239.227 37.105 239.496 cv
37.211 239.766 37.266 240.062 37.266 240.391 cv
cp
f
22.77 177.762 mo
37.961 177.762 li
37.961 192.41 li
22.77 192.41 li
cp
0 0 0 0 cmyk
ef
28.254 185.102 mo
28.254 185.43 28.234 185.762 28.195 186.098 cv
28.156 186.434 28.09 186.758 27.996 187.07 cv
27.902 187.383 27.773 187.676 27.617 187.941 cv
27.457 188.215 27.258 188.449 27.02 188.652 cv
26.777 188.855 26.492 189.016 26.164 189.129 cv
25.832 189.242 25.449 189.297 25.016 189.301 cv
24.844 189.297 24.68 189.285 24.523 189.27 cv
24.363 189.246 24.223 189.223 24.098 189.191 cv
23.969 189.16 23.863 189.129 23.777 189.094 cv
23.691 189.059 23.629 189.023 23.59 188.988 cv
23.551 188.953 23.52 188.906 23.504 188.844 cv
23.48 188.789 23.473 188.707 23.477 188.598 cv
23.473 188.52 23.477 188.449 23.484 188.395 cv
23.492 188.344 23.5 188.305 23.512 188.277 cv
23.523 188.254 23.539 188.238 23.563 188.223 cv
23.578 188.215 23.605 188.207 23.641 188.207 cv
23.684 188.207 23.746 188.223 23.824 188.25 cv
23.902 188.281 24 188.312 24.117 188.348 cv
24.234 188.387 24.375 188.422 24.539 188.445 cv
24.699 188.477 24.879 188.488 25.078 188.488 cv
25.457 188.488 25.781 188.418 26.055 188.27 cv
26.324 188.129 26.547 187.93 26.719 187.68 cv
26.891 187.434 27.02 187.148 27.105 186.824 cv
27.191 186.504 27.238 186.164 27.246 185.801 cv
27.039 185.922 26.789 186.027 26.504 186.121 cv
26.211 186.215 25.879 186.262 25.508 186.262 cv
25.082 186.262 24.727 186.207 24.441 186.09 cv
24.152 185.98 23.922 185.82 23.75 185.617 cv
23.574 185.418 23.449 185.184 23.375 184.906 cv
23.297 184.637 23.262 184.336 23.262 184.012 cv
23.262 183.676 23.309 183.359 23.406 183.055 cv
23.504 182.754 23.656 182.484 23.863 182.254 cv
24.07 182.027 24.336 181.844 24.656 181.703 cv
24.977 181.566 25.359 181.5 25.805 181.496 cv
26.121 181.5 26.398 181.539 26.645 181.617 cv
26.887 181.699 27.102 181.816 27.281 181.965 cv
27.461 182.121 27.613 182.301 27.738 182.512 cv
27.863 182.723 27.961 182.965 28.039 183.234 cv
28.113 183.504 28.168 183.797 28.203 184.109 cv
28.234 184.43 28.254 184.758 28.254 185.102 cv
cp
27.227 184.988 mo
27.223 184.492 27.191 184.07 27.129 183.727 cv
27.063 183.387 26.965 183.109 26.836 182.898 cv
26.703 182.687 26.543 182.535 26.359 182.441 cv
26.168 182.348 25.953 182.301 25.711 182.301 cv
25.453 182.301 25.234 182.348 25.059 182.437 cv
24.875 182.531 24.727 182.656 24.617 182.809 cv
24.5 182.965 24.418 183.137 24.363 183.332 cv
24.309 183.527 24.281 183.73 24.281 183.934 cv
24.281 184.168 24.305 184.379 24.355 184.57 cv
24.402 184.762 24.48 184.922 24.594 185.055 cv
24.699 185.187 24.844 185.293 25.02 185.363 cv
25.191 185.441 25.406 185.477 25.672 185.473 cv
25.961 185.477 26.246 185.434 26.52 185.34 cv
26.793 185.254 27.027 185.137 27.227 184.988 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
31.008 188.551 mo
31.008 188.832 30.961 189.016 30.867 189.109 cv
30.773 189.199 30.605 189.242 30.371 189.246 cv
30.133 189.242 29.973 189.199 29.883 189.109 cv
29.789 189.02 29.742 188.84 29.746 188.57 cv
29.742 188.293 29.789 188.109 29.883 188.016 cv
29.977 187.926 30.145 187.879 30.387 187.879 cv
30.621 187.879 30.781 187.926 30.871 188.016 cv
30.961 188.105 31.008 188.285 31.008 188.551 cv
cp
f
37.551 185.383 mo
37.547 185.965 37.5 186.496 37.414 186.977 cv
37.32 187.461 37.168 187.875 36.957 188.219 cv
36.738 188.562 36.461 188.832 36.121 189.02 cv
35.773 189.207 35.352 189.297 34.852 189.301 cv
34.375 189.297 33.973 189.215 33.648 189.047 cv
33.32 188.879 33.059 188.629 32.859 188.297 cv
32.656 187.969 32.512 187.562 32.434 187.078 cv
32.348 186.598 32.309 186.043 32.309 185.418 cv
32.309 184.84 32.355 184.312 32.449 183.828 cv
32.543 183.352 32.695 182.937 32.906 182.586 cv
33.117 182.242 33.395 181.973 33.738 181.781 cv
34.082 181.594 34.504 181.5 35.004 181.496 cv
35.48 181.5 35.883 181.586 36.211 181.754 cv
36.539 181.926 36.801 182.176 37 182.504 cv
37.199 182.836 37.34 183.242 37.426 183.723 cv
37.504 184.207 37.547 184.758 37.551 185.383 cv
cp
36.52 185.453 mo
36.516 185.078 36.504 184.738 36.48 184.434 cv
36.453 184.133 36.41 183.867 36.359 183.637 cv
36.305 183.41 36.238 183.215 36.152 183.043 cv
36.066 182.879 35.965 182.742 35.852 182.633 cv
35.73 182.531 35.598 182.453 35.449 182.398 cv
35.301 182.352 35.133 182.324 34.945 182.324 cv
34.613 182.324 34.344 182.402 34.137 182.559 cv
33.926 182.715 33.762 182.93 33.645 183.203 cv
33.527 183.477 33.445 183.797 33.402 184.164 cv
33.359 184.531 33.34 184.926 33.34 185.348 cv
33.34 185.918 33.367 186.402 33.426 186.793 cv
33.484 187.191 33.578 187.512 33.703 187.762 cv
33.828 188.012 33.988 188.195 34.191 188.309 cv
34.387 188.422 34.629 188.477 34.91 188.477 cv
35.129 188.477 35.32 188.441 35.488 188.371 cv
35.652 188.301 35.793 188.203 35.914 188.07 cv
36.031 187.941 36.133 187.781 36.211 187.598 cv
36.289 187.418 36.352 187.215 36.398 186.988 cv
36.445 186.766 36.477 186.527 36.492 186.266 cv
36.508 186.008 36.516 185.734 36.52 185.453 cv
cp
f
16.691 124.129 mo
37.961 124.129 li
37.961 138.781 li
16.691 138.781 li
cp
0 0 0 0 cmyk
ef
22.129 135.152 mo
22.125 135.227 22.121 135.289 22.113 135.34 cv
22.102 135.395 22.086 135.437 22.066 135.465 cv
22.043 135.5 22.02 135.523 21.996 135.531 cv
21.973 135.547 21.945 135.551 21.918 135.551 cv
17.957 135.551 li
17.93 135.551 17.906 135.547 17.883 135.531 cv
17.859 135.523 17.836 135.5 17.816 135.465 cv
17.793 135.437 17.777 135.395 17.766 135.34 cv
17.75 135.289 17.742 135.227 17.746 135.152 cv
17.742 135.082 17.75 135.023 17.766 134.973 cv
17.777 134.922 17.789 134.879 17.809 134.844 cv
17.824 134.812 17.848 134.789 17.871 134.77 cv
17.895 134.754 17.922 134.742 17.957 134.742 cv
19.543 134.742 li
19.543 128.977 li
18.074 129.848 li
18 129.895 17.941 129.918 17.898 129.922 cv
17.852 129.934 17.816 129.926 17.789 129.895 cv
17.758 129.871 17.738 129.828 17.73 129.77 cv
17.723 129.711 17.719 129.637 17.719 129.543 cv
17.719 129.48 17.719 129.422 17.727 129.375 cv
17.73 129.328 17.742 129.289 17.754 129.258 cv
17.762 129.227 17.777 129.199 17.801 129.176 cv
17.824 129.152 17.852 129.129 17.887 129.105 cv
19.637 127.988 li
19.648 127.977 19.668 127.965 19.695 127.957 cv
19.715 127.949 19.746 127.941 19.781 127.934 cv
19.813 127.926 19.852 127.922 19.902 127.922 cv
19.945 127.922 20.004 127.922 20.082 127.918 cv
20.172 127.922 20.25 127.926 20.316 127.93 cv
20.375 127.941 20.426 127.953 20.461 127.961 cv
20.492 127.977 20.516 127.992 20.531 128.012 cv
20.543 128.035 20.547 128.059 20.551 128.082 cv
20.551 134.742 li
21.918 134.742 li
21.945 134.742 21.977 134.754 22.008 134.77 cv
22.035 134.789 22.055 134.812 22.074 134.844 cv
22.09 134.879 22.105 134.922 22.113 134.973 cv
22.121 135.023 22.125 135.082 22.129 135.152 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.449 131.742 mo
28.445 132.324 28.398 132.855 28.313 133.336 cv
28.219 133.82 28.066 134.234 27.855 134.578 cv
27.637 134.922 27.359 135.191 27.02 135.379 cv
26.672 135.566 26.25 135.656 25.75 135.66 cv
25.273 135.656 24.871 135.574 24.547 135.406 cv
24.219 135.238 23.957 134.988 23.758 134.656 cv
23.555 134.328 23.41 133.922 23.332 133.437 cv
23.246 132.957 23.207 132.402 23.207 131.777 cv
23.207 131.199 23.254 130.672 23.348 130.187 cv
23.441 129.711 23.594 129.297 23.805 128.945 cv
24.016 128.602 24.293 128.332 24.637 128.141 cv
24.98 127.953 25.402 127.859 25.902 127.855 cv
26.379 127.859 26.781 127.945 27.109 128.113 cv
27.438 128.285 27.699 128.535 27.898 128.863 cv
28.098 129.195 28.238 129.602 28.324 130.082 cv
28.402 130.566 28.445 131.117 28.449 131.742 cv
cp
27.418 131.812 mo
27.414 131.437 27.402 131.098 27.379 130.793 cv
27.352 130.492 27.309 130.227 27.258 129.996 cv
27.203 129.77 27.137 129.574 27.051 129.402 cv
26.965 129.238 26.863 129.102 26.75 128.992 cv
26.629 128.891 26.496 128.812 26.348 128.758 cv
26.199 128.711 26.031 128.684 25.844 128.684 cv
25.512 128.684 25.242 128.762 25.035 128.918 cv
24.824 129.074 24.66 129.289 24.543 129.562 cv
24.426 129.836 24.344 130.156 24.301 130.523 cv
24.258 130.891 24.238 131.285 24.238 131.707 cv
24.238 132.277 24.266 132.762 24.324 133.152 cv
24.383 133.551 24.477 133.871 24.602 134.121 cv
24.727 134.371 24.887 134.555 25.09 134.668 cv
25.285 134.781 25.527 134.836 25.809 134.836 cv
26.027 134.836 26.219 134.801 26.387 134.73 cv
26.551 134.66 26.691 134.562 26.813 134.43 cv
26.93 134.301 27.031 134.141 27.109 133.957 cv
27.188 133.777 27.25 133.574 27.297 133.348 cv
27.344 133.125 27.375 132.887 27.391 132.625 cv
27.406 132.367 27.414 132.094 27.418 131.812 cv
cp
f
30.965 134.91 mo
30.965 135.191 30.918 135.375 30.824 135.469 cv
30.73 135.559 30.563 135.602 30.328 135.605 cv
30.09 135.602 29.93 135.559 29.84 135.469 cv
29.746 135.379 29.699 135.199 29.703 134.93 cv
29.699 134.652 29.746 134.469 29.84 134.375 cv
29.934 134.285 30.102 134.238 30.344 134.238 cv
30.578 134.238 30.738 134.285 30.828 134.375 cv
30.918 134.465 30.965 134.645 30.965 134.91 cv
cp
f
37.309 133.113 mo
37.309 133.52 37.238 133.883 37.102 134.199 cv
36.965 134.516 36.773 134.781 36.523 135 cv
36.273 135.219 35.973 135.383 35.629 135.492 cv
35.277 135.602 34.895 135.656 34.477 135.66 cv
34.238 135.656 34.016 135.641 33.809 135.609 cv
33.594 135.578 33.406 135.539 33.246 135.492 cv
33.078 135.445 32.945 135.398 32.844 135.348 cv
32.738 135.305 32.668 135.266 32.641 135.234 cv
32.609 135.207 32.59 135.184 32.578 135.156 cv
32.566 135.137 32.555 135.109 32.547 135.074 cv
32.531 135.043 32.527 135 32.527 134.949 cv
32.523 134.898 32.52 134.836 32.523 134.766 cv
32.52 134.703 32.523 134.645 32.531 134.59 cv
32.535 134.535 32.547 134.492 32.563 134.461 cv
32.578 134.43 32.594 134.406 32.617 134.387 cv
32.633 134.375 32.66 134.367 32.691 134.363 cv
32.73 134.367 32.789 134.391 32.871 134.437 cv
32.953 134.484 33.063 134.539 33.203 134.594 cv
33.34 134.652 33.512 134.703 33.719 134.754 cv
33.922 134.809 34.168 134.836 34.449 134.832 cv
34.711 134.836 34.949 134.805 35.172 134.738 cv
35.387 134.68 35.574 134.582 35.734 134.445 cv
35.891 134.316 36.016 134.148 36.105 133.945 cv
36.195 133.742 36.242 133.496 36.242 133.207 cv
36.242 132.965 36.203 132.754 36.129 132.566 cv
36.051 132.383 35.934 132.227 35.777 132.102 cv
35.617 131.98 35.418 131.891 35.176 131.828 cv
34.934 131.773 34.645 131.742 34.309 131.738 cv
34.07 131.742 33.863 131.754 33.695 131.773 cv
33.52 131.801 33.359 131.812 33.211 131.809 cv
33.098 131.812 33.02 131.785 32.977 131.73 cv
32.926 131.68 32.902 131.582 32.906 131.437 cv
32.906 128.348 li
32.902 128.223 32.934 128.125 32.996 128.062 cv
33.059 128 33.145 127.969 33.258 127.969 cv
36.617 127.969 li
36.648 127.969 36.676 127.98 36.707 127.996 cv
36.73 128.016 36.758 128.039 36.781 128.074 cv
36.801 128.113 36.813 128.16 36.824 128.211 cv
36.832 128.27 36.84 128.332 36.84 128.402 cv
36.84 128.543 36.82 128.652 36.781 128.73 cv
36.742 128.809 36.688 128.848 36.625 128.848 cv
33.914 128.848 li
33.914 130.973 li
34.043 130.957 34.18 130.945 34.32 130.941 cv
34.457 130.937 34.613 130.934 34.797 130.934 cv
35.211 130.934 35.578 130.988 35.891 131.09 cv
36.203 131.199 36.461 131.344 36.672 131.531 cv
36.879 131.719 37.039 131.949 37.148 132.219 cv
37.254 132.488 37.309 132.785 37.309 133.113 cv
cp
f
16.691 70.5 mo
37.961 70.5 li
37.961 85.148 li
16.691 85.148 li
cp
0 0 0 0 cmyk
ef
22.141 81.543 mo
22.137 81.617 22.129 81.68 22.121 81.73 cv
22.105 81.781 22.09 81.824 22.074 81.852 cv
22.051 81.887 22.031 81.91 22.008 81.922 cv
21.984 81.937 21.957 81.941 21.93 81.941 cv
17.961 81.941 li
17.93 81.941 17.906 81.937 17.887 81.922 cv
17.859 81.91 17.836 81.887 17.816 81.852 cv
17.793 81.824 17.777 81.781 17.766 81.73 cv
17.754 81.68 17.746 81.617 17.75 81.543 cv
17.746 81.473 17.754 81.414 17.766 81.363 cv
17.777 81.312 17.793 81.27 17.813 81.234 cv
17.828 81.203 17.848 81.18 17.875 81.16 cv
17.898 81.145 17.926 81.133 17.961 81.133 cv
19.547 81.133 li
19.547 75.355 li
18.078 76.23 li
18 76.273 17.941 76.297 17.898 76.301 cv
17.852 76.312 17.816 76.305 17.789 76.273 cv
17.762 76.25 17.742 76.207 17.734 76.148 cv
17.723 76.09 17.719 76.016 17.723 75.922 cv
17.719 75.859 17.723 75.801 17.73 75.754 cv
17.734 75.707 17.742 75.668 17.754 75.637 cv
17.766 75.605 17.781 75.578 17.805 75.555 cv
17.824 75.531 17.852 75.508 17.891 75.484 cv
19.641 74.363 li
19.656 74.355 19.676 74.344 19.699 74.332 cv
19.723 74.328 19.75 74.32 19.785 74.309 cv
19.82 74.305 19.863 74.301 19.91 74.297 cv
19.957 74.297 20.016 74.297 20.086 74.293 cv
20.18 74.297 20.258 74.301 20.32 74.305 cv
20.383 74.316 20.43 74.324 20.465 74.336 cv
20.5 74.352 20.523 74.371 20.535 74.391 cv
20.547 74.414 20.555 74.437 20.555 74.457 cv
20.555 81.133 li
21.93 81.133 li
21.957 81.133 21.984 81.145 22.016 81.16 cv
22.039 81.18 22.063 81.203 22.086 81.234 cv
22.102 81.27 22.117 81.312 22.125 81.363 cv
22.133 81.414 22.137 81.473 22.141 81.543 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.223 81.508 mo
28.223 81.578 28.215 81.641 28.207 81.695 cv
28.191 81.75 28.18 81.797 28.164 81.832 cv
28.148 81.871 28.125 81.898 28.094 81.914 cv
28.063 81.934 28.031 81.941 28 81.941 cv
23.801 81.941 li
23.742 81.941 23.695 81.937 23.656 81.922 cv
23.613 81.91 23.578 81.887 23.551 81.852 cv
23.52 81.824 23.496 81.777 23.484 81.719 cv
23.469 81.66 23.465 81.59 23.465 81.5 cv
23.465 81.426 23.465 81.355 23.473 81.297 cv
23.477 81.238 23.492 81.187 23.512 81.141 cv
23.531 81.098 23.555 81.055 23.59 81.008 cv
23.617 80.965 23.656 80.914 23.707 80.859 cv
25.227 79.301 li
25.574 78.941 25.855 78.617 26.07 78.332 cv
26.277 78.047 26.441 77.789 26.559 77.551 cv
26.676 77.32 26.75 77.105 26.789 76.91 cv
26.82 76.719 26.84 76.539 26.844 76.371 cv
26.84 76.203 26.813 76.043 26.758 75.891 cv
26.699 75.742 26.617 75.609 26.512 75.496 cv
26.402 75.383 26.266 75.293 26.109 75.227 cv
25.945 75.16 25.762 75.129 25.551 75.125 cv
25.305 75.129 25.082 75.16 24.887 75.227 cv
24.688 75.293 24.516 75.367 24.371 75.441 cv
24.223 75.523 24.102 75.594 24.004 75.66 cv
23.902 75.727 23.828 75.762 23.781 75.758 cv
23.754 75.762 23.727 75.754 23.707 75.734 cv
23.68 75.723 23.664 75.695 23.652 75.66 cv
23.637 75.625 23.625 75.578 23.617 75.52 cv
23.609 75.461 23.605 75.391 23.605 75.309 cv
23.605 75.25 23.605 75.199 23.609 75.156 cv
23.613 75.113 23.621 75.078 23.633 75.043 cv
23.641 75.016 23.652 74.984 23.672 74.957 cv
23.684 74.93 23.715 74.895 23.766 74.852 cv
23.809 74.812 23.891 74.758 24.008 74.684 cv
24.121 74.617 24.266 74.547 24.441 74.477 cv
24.613 74.41 24.805 74.355 25.016 74.305 cv
25.223 74.262 25.445 74.238 25.68 74.234 cv
26.047 74.238 26.367 74.289 26.645 74.391 cv
26.918 74.496 27.148 74.637 27.332 74.812 cv
27.512 74.996 27.645 75.207 27.738 75.441 cv
27.824 75.684 27.871 75.937 27.875 76.207 cv
27.871 76.453 27.848 76.695 27.809 76.934 cv
27.762 77.176 27.672 77.437 27.535 77.715 cv
27.395 77.996 27.195 78.305 26.934 78.648 cv
26.672 78.992 26.324 79.387 25.891 79.828 cv
24.688 81.086 li
27.992 81.086 li
28.02 81.086 28.051 81.098 28.082 81.113 cv
28.113 81.133 28.137 81.156 28.16 81.191 cv
28.176 81.227 28.191 81.273 28.207 81.324 cv
28.215 81.379 28.223 81.437 28.223 81.508 cv
cp
f
30.969 81.301 mo
30.965 81.582 30.918 81.766 30.828 81.859 cv
30.734 81.949 30.566 81.992 30.328 81.996 cv
30.09 81.992 29.93 81.949 29.84 81.859 cv
29.75 81.77 29.703 81.59 29.707 81.32 cv
29.703 81.043 29.75 80.859 29.844 80.766 cv
29.934 80.676 30.102 80.629 30.348 80.625 cv
30.578 80.629 30.738 80.676 30.832 80.762 cv
30.918 80.855 30.965 81.035 30.969 81.301 cv
cp
f
37.598 78.125 mo
37.594 78.711 37.547 79.242 37.461 79.723 cv
37.367 80.207 37.215 80.621 37.004 80.965 cv
36.785 81.312 36.508 81.582 36.164 81.77 cv
35.82 81.961 35.395 82.051 34.895 82.055 cv
34.41 82.051 34.008 81.969 33.684 81.801 cv
33.355 81.629 33.094 81.379 32.895 81.047 cv
32.695 80.719 32.551 80.312 32.469 79.828 cv
32.383 79.348 32.344 78.793 32.344 78.16 cv
32.344 77.586 32.391 77.055 32.484 76.566 cv
32.578 76.086 32.73 75.668 32.941 75.32 cv
33.152 74.977 33.43 74.711 33.777 74.52 cv
34.117 74.332 34.539 74.238 35.047 74.234 cv
35.523 74.238 35.926 74.32 36.254 74.488 cv
36.578 74.66 36.844 74.91 37.047 75.238 cv
37.246 75.57 37.387 75.98 37.473 76.461 cv
37.551 76.949 37.594 77.504 37.598 78.125 cv
cp
36.566 78.195 mo
36.563 77.82 36.547 77.48 36.523 77.176 cv
36.492 76.879 36.453 76.609 36.402 76.375 cv
36.348 76.145 36.281 75.949 36.199 75.781 cv
36.113 75.617 36.012 75.48 35.895 75.371 cv
35.777 75.266 35.641 75.184 35.492 75.133 cv
35.34 75.086 35.172 75.062 34.988 75.059 cv
34.652 75.062 34.383 75.141 34.176 75.297 cv
33.965 75.453 33.801 75.668 33.684 75.941 cv
33.563 76.215 33.48 76.539 33.441 76.906 cv
33.395 77.277 33.375 77.672 33.379 78.09 cv
33.375 78.66 33.402 79.141 33.465 79.539 cv
33.52 79.937 33.613 80.262 33.746 80.508 cv
33.871 80.762 34.035 80.945 34.23 81.055 cv
34.426 81.172 34.664 81.227 34.953 81.227 cv
35.168 81.227 35.359 81.191 35.527 81.121 cv
35.691 81.051 35.836 80.953 35.957 80.82 cv
36.074 80.691 36.172 80.531 36.254 80.348 cv
36.328 80.164 36.391 79.961 36.441 79.734 cv
36.484 79.512 36.52 79.27 36.539 79.008 cv
36.555 78.75 36.563 78.48 36.566 78.195 cv
cp
f
16.691 16.879 mo
37.961 16.879 li
37.961 31.531 li
16.691 31.531 li
cp
0 0 0 0 cmyk
ef
22.129 27.902 mo
22.125 27.977 22.121 28.039 22.113 28.09 cv
22.102 28.145 22.086 28.187 22.066 28.215 cv
22.043 28.25 22.02 28.273 21.996 28.281 cv
21.973 28.297 21.945 28.301 21.918 28.301 cv
17.957 28.301 li
17.93 28.301 17.906 28.297 17.883 28.281 cv
17.859 28.273 17.836 28.25 17.816 28.215 cv
17.793 28.187 17.777 28.145 17.766 28.09 cv
17.75 28.039 17.742 27.977 17.746 27.902 cv
17.742 27.832 17.75 27.773 17.766 27.723 cv
17.777 27.672 17.789 27.629 17.809 27.594 cv
17.824 27.562 17.848 27.539 17.871 27.52 cv
17.895 27.504 17.922 27.492 17.957 27.492 cv
19.543 27.492 li
19.543 21.727 li
18.074 22.598 li
18 22.645 17.941 22.668 17.898 22.672 cv
17.852 22.684 17.816 22.676 17.789 22.645 cv
17.758 22.621 17.738 22.578 17.73 22.52 cv
17.723 22.461 17.719 22.387 17.719 22.293 cv
17.719 22.23 17.719 22.172 17.727 22.125 cv
17.73 22.078 17.742 22.039 17.754 22.008 cv
17.762 21.977 17.777 21.949 17.801 21.926 cv
17.824 21.902 17.852 21.879 17.887 21.855 cv
19.637 20.738 li
19.648 20.727 19.668 20.715 19.695 20.707 cv
19.715 20.699 19.746 20.691 19.781 20.684 cv
19.813 20.676 19.852 20.672 19.902 20.672 cv
19.945 20.672 20.004 20.672 20.082 20.668 cv
20.172 20.672 20.25 20.676 20.316 20.68 cv
20.375 20.691 20.426 20.703 20.461 20.711 cv
20.492 20.727 20.516 20.742 20.531 20.762 cv
20.543 20.785 20.547 20.809 20.551 20.832 cv
20.551 27.492 li
21.918 27.492 li
21.945 27.492 21.977 27.504 22.008 27.52 cv
22.035 27.539 22.055 27.562 22.074 27.594 cv
22.09 27.629 22.105 27.672 22.113 27.723 cv
22.121 27.773 22.125 27.832 22.129 27.902 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.141 26.133 mo
28.141 26.48 28.078 26.797 27.957 27.074 cv
27.836 27.355 27.664 27.594 27.438 27.793 cv
27.211 27.992 26.93 28.145 26.598 28.25 cv
26.266 28.355 25.891 28.406 25.473 28.41 cv
25.219 28.406 24.98 28.387 24.762 28.348 cv
24.539 28.309 24.344 28.262 24.176 28.207 cv
24 28.152 23.859 28.094 23.746 28.031 cv
23.629 27.969 23.555 27.926 23.531 27.898 cv
23.5 27.871 23.48 27.844 23.465 27.816 cv
23.449 27.789 23.434 27.754 23.422 27.715 cv
23.41 27.676 23.402 27.629 23.395 27.574 cv
23.387 27.52 23.383 27.449 23.387 27.363 cv
23.383 27.223 23.398 27.125 23.43 27.07 cv
23.457 27.016 23.496 26.988 23.551 26.988 cv
23.586 26.988 23.656 27.02 23.762 27.082 cv
23.867 27.145 24.004 27.215 24.172 27.285 cv
24.336 27.363 24.531 27.43 24.754 27.488 cv
24.977 27.555 25.223 27.586 25.5 27.582 cv
25.758 27.586 25.992 27.551 26.195 27.48 cv
26.395 27.414 26.563 27.32 26.699 27.199 cv
26.836 27.082 26.938 26.941 27.008 26.77 cv
27.074 26.605 27.109 26.422 27.109 26.227 cv
27.109 26.012 27.063 25.82 26.977 25.645 cv
26.887 25.477 26.762 25.328 26.598 25.199 cv
26.43 25.078 26.223 24.98 25.98 24.914 cv
25.73 24.852 25.453 24.82 25.148 24.816 cv
24.406 24.816 li
24.371 24.82 24.34 24.812 24.309 24.797 cv
24.277 24.781 24.25 24.758 24.23 24.727 cv
24.207 24.695 24.188 24.656 24.176 24.605 cv
24.16 24.555 24.156 24.488 24.156 24.402 cv
24.156 24.332 24.16 24.27 24.172 24.219 cv
24.184 24.172 24.199 24.133 24.223 24.102 cv
24.238 24.074 24.266 24.055 24.297 24.039 cv
24.324 24.031 24.355 24.023 24.391 24.02 cv
25.051 24.02 li
25.309 24.023 25.539 23.988 25.746 23.918 cv
25.949 23.852 26.125 23.758 26.266 23.629 cv
26.406 23.508 26.516 23.359 26.594 23.184 cv
26.672 23.012 26.711 22.816 26.711 22.598 cv
26.711 22.445 26.684 22.297 26.633 22.152 cv
26.582 22.012 26.508 21.887 26.406 21.781 cv
26.305 21.676 26.172 21.594 26.016 21.531 cv
25.852 21.477 25.672 21.445 25.469 21.441 cv
25.242 21.445 25.031 21.48 24.844 21.543 cv
24.648 21.613 24.48 21.684 24.336 21.762 cv
24.184 21.84 24.063 21.914 23.969 21.98 cv
23.871 22.051 23.801 22.086 23.762 22.082 cv
23.734 22.086 23.711 22.082 23.691 22.07 cv
23.668 22.062 23.648 22.043 23.637 22.012 cv
23.621 21.984 23.613 21.941 23.605 21.887 cv
23.598 21.836 23.594 21.766 23.598 21.68 cv
23.594 21.621 23.598 21.57 23.605 21.523 cv
23.609 21.48 23.617 21.441 23.629 21.406 cv
23.637 21.375 23.648 21.344 23.668 21.316 cv
23.68 21.293 23.707 21.262 23.746 21.223 cv
23.785 21.184 23.859 21.129 23.973 21.059 cv
24.086 20.988 24.227 20.922 24.395 20.852 cv
24.559 20.785 24.75 20.727 24.969 20.676 cv
25.184 20.633 25.418 20.609 25.668 20.605 cv
26.02 20.609 26.328 20.652 26.594 20.742 cv
26.859 20.836 27.078 20.965 27.258 21.125 cv
27.434 21.293 27.566 21.488 27.656 21.715 cv
27.742 21.941 27.789 22.195 27.789 22.473 cv
27.789 22.711 27.758 22.934 27.695 23.137 cv
27.633 23.344 27.539 23.523 27.418 23.68 cv
27.297 23.84 27.148 23.977 26.973 24.086 cv
26.797 24.203 26.594 24.277 26.363 24.316 cv
26.363 24.328 li
26.625 24.359 26.863 24.426 27.082 24.527 cv
27.297 24.629 27.484 24.758 27.645 24.914 cv
27.797 25.07 27.918 25.254 28.008 25.465 cv
28.094 25.676 28.141 25.898 28.141 26.133 cv
cp
f
30.965 27.66 mo
30.965 27.941 30.918 28.125 30.824 28.219 cv
30.73 28.309 30.563 28.352 30.328 28.355 cv
30.09 28.352 29.93 28.309 29.84 28.219 cv
29.746 28.129 29.699 27.949 29.703 27.68 cv
29.699 27.402 29.746 27.219 29.84 27.125 cv
29.934 27.035 30.102 26.988 30.344 26.988 cv
30.578 26.988 30.738 27.035 30.828 27.125 cv
30.918 27.215 30.965 27.395 30.965 27.66 cv
cp
f
37.309 25.863 mo
37.309 26.27 37.238 26.633 37.102 26.949 cv
36.965 27.266 36.773 27.531 36.523 27.75 cv
36.273 27.969 35.973 28.133 35.629 28.242 cv
35.277 28.352 34.895 28.406 34.477 28.41 cv
34.238 28.406 34.016 28.391 33.809 28.359 cv
33.594 28.328 33.406 28.289 33.246 28.242 cv
33.078 28.195 32.945 28.148 32.844 28.098 cv
32.738 28.055 32.668 28.016 32.641 27.984 cv
32.609 27.957 32.59 27.934 32.578 27.906 cv
32.566 27.887 32.555 27.859 32.547 27.824 cv
32.531 27.793 32.527 27.75 32.527 27.699 cv
32.523 27.648 32.52 27.586 32.523 27.516 cv
32.52 27.453 32.523 27.395 32.531 27.34 cv
32.535 27.285 32.547 27.242 32.563 27.211 cv
32.578 27.18 32.594 27.156 32.617 27.137 cv
32.633 27.125 32.66 27.117 32.691 27.113 cv
32.73 27.117 32.789 27.141 32.871 27.187 cv
32.953 27.234 33.063 27.289 33.203 27.344 cv
33.34 27.402 33.512 27.453 33.719 27.504 cv
33.922 27.559 34.168 27.586 34.449 27.582 cv
34.711 27.586 34.949 27.555 35.172 27.488 cv
35.387 27.43 35.574 27.332 35.734 27.195 cv
35.891 27.066 36.016 26.898 36.105 26.695 cv
36.195 26.492 36.242 26.246 36.242 25.957 cv
36.242 25.715 36.203 25.504 36.129 25.316 cv
36.051 25.133 35.934 24.977 35.777 24.852 cv
35.617 24.73 35.418 24.641 35.176 24.578 cv
34.934 24.523 34.645 24.492 34.309 24.488 cv
34.07 24.492 33.863 24.504 33.695 24.523 cv
33.52 24.551 33.359 24.562 33.211 24.559 cv
33.098 24.562 33.02 24.535 32.977 24.48 cv
32.926 24.43 32.902 24.332 32.906 24.187 cv
32.906 21.098 li
32.902 20.973 32.934 20.875 32.996 20.812 cv
33.059 20.75 33.145 20.719 33.258 20.719 cv
36.617 20.719 li
36.648 20.719 36.676 20.73 36.707 20.746 cv
36.73 20.766 36.758 20.789 36.781 20.824 cv
36.801 20.863 36.813 20.91 36.824 20.961 cv
36.832 21.02 36.84 21.082 36.84 21.152 cv
36.84 21.293 36.82 21.402 36.781 21.48 cv
36.742 21.559 36.688 21.598 36.625 21.598 cv
33.914 21.598 li
33.914 23.723 li
34.043 23.707 34.18 23.695 34.32 23.691 cv
34.457 23.687 34.613 23.684 34.797 23.684 cv
35.211 23.684 35.578 23.738 35.891 23.84 cv
36.203 23.949 36.461 24.094 36.672 24.281 cv
36.879 24.469 37.039 24.699 37.148 24.969 cv
37.254 25.238 37.309 25.535 37.309 25.863 cv
cp
f
51.508 526.211 mo
51.504 526.285 51.5 526.348 51.492 526.398 cv
51.48 526.453 51.465 526.496 51.445 526.523 cv
51.422 526.559 51.398 526.582 51.375 526.59 cv
51.352 526.605 51.324 526.609 51.297 526.609 cv
47.336 526.609 li
47.309 526.609 47.285 526.605 47.262 526.59 cv
47.238 526.582 47.215 526.559 47.195 526.523 cv
47.172 526.496 47.156 526.453 47.145 526.398 cv
47.129 526.348 47.121 526.285 47.125 526.211 cv
47.121 526.141 47.129 526.082 47.145 526.031 cv
47.156 525.98 47.168 525.937 47.188 525.902 cv
47.203 525.871 47.227 525.848 47.25 525.828 cv
47.273 525.812 47.301 525.801 47.336 525.801 cv
48.922 525.801 li
48.922 520.035 li
47.453 520.906 li
47.379 520.953 47.32 520.977 47.277 520.98 cv
47.23 520.992 47.195 520.984 47.168 520.953 cv
47.137 520.93 47.117 520.887 47.109 520.828 cv
47.102 520.77 47.098 520.695 47.098 520.602 cv
47.098 520.539 47.098 520.48 47.105 520.434 cv
47.109 520.387 47.121 520.348 47.133 520.316 cv
47.141 520.285 47.156 520.258 47.18 520.234 cv
47.203 520.211 47.23 520.187 47.266 520.164 cv
49.016 519.047 li
49.027 519.035 49.047 519.023 49.074 519.016 cv
49.094 519.008 49.125 519 49.16 518.992 cv
49.191 518.984 49.23 518.98 49.281 518.98 cv
49.324 518.98 49.383 518.98 49.461 518.977 cv
49.551 518.98 49.629 518.984 49.695 518.988 cv
49.754 519 49.805 519.012 49.84 519.02 cv
49.871 519.035 49.895 519.051 49.91 519.07 cv
49.922 519.094 49.926 519.117 49.93 519.141 cv
49.93 525.801 li
51.297 525.801 li
51.324 525.801 51.355 525.812 51.387 525.828 cv
51.414 525.848 51.434 525.871 51.453 525.902 cv
51.469 525.937 51.484 525.98 51.492 526.031 cv
51.5 526.082 51.504 526.141 51.508 526.211 cv
cp
f
122.152 526.176 mo
122.152 526.246 122.145 526.309 122.137 526.363 cv
122.121 526.418 122.109 526.465 122.094 526.5 cv
122.078 526.539 122.055 526.566 122.023 526.582 cv
121.992 526.602 121.961 526.609 121.93 526.609 cv
117.738 526.609 li
117.684 526.609 117.637 526.605 117.598 526.59 cv
117.555 526.582 117.52 526.559 117.492 526.523 cv
117.461 526.496 117.438 526.449 117.426 526.387 cv
117.41 526.328 117.406 526.258 117.406 526.172 cv
117.406 526.098 117.406 526.027 117.414 525.965 cv
117.418 525.906 117.434 525.855 117.453 525.809 cv
117.473 525.766 117.496 525.723 117.527 525.676 cv
117.555 525.637 117.594 525.586 117.648 525.531 cv
119.164 523.973 li
119.512 523.613 119.789 523.293 120.004 523.008 cv
120.215 522.723 120.379 522.461 120.496 522.227 cv
120.605 521.992 120.684 521.781 120.723 521.59 cv
120.758 521.398 120.773 521.219 120.777 521.047 cv
120.773 520.883 120.746 520.723 120.691 520.57 cv
120.633 520.422 120.551 520.289 120.445 520.176 cv
120.336 520.066 120.203 519.977 120.043 519.906 cv
119.879 519.84 119.691 519.809 119.488 519.805 cv
119.238 519.809 119.02 519.84 118.824 519.906 cv
118.629 519.977 118.457 520.051 118.309 520.125 cv
118.16 520.207 118.035 520.277 117.941 520.34 cv
117.84 520.406 117.77 520.441 117.723 520.437 cv
117.691 520.441 117.664 520.434 117.645 520.414 cv
117.621 520.402 117.602 520.375 117.59 520.34 cv
117.574 520.309 117.566 520.262 117.559 520.199 cv
117.551 520.141 117.547 520.07 117.547 519.988 cv
117.547 519.93 117.547 519.879 117.551 519.836 cv
117.555 519.797 117.563 519.762 117.574 519.727 cv
117.582 519.699 117.594 519.668 117.613 519.637 cv
117.625 519.609 117.656 519.578 117.707 519.535 cv
117.75 519.496 117.832 519.437 117.949 519.367 cv
118.063 519.297 118.207 519.23 118.383 519.16 cv
118.555 519.094 118.746 519.035 118.957 518.984 cv
119.164 518.941 119.383 518.918 119.613 518.914 cv
119.98 518.918 120.301 518.969 120.578 519.07 cv
120.852 519.176 121.082 519.316 121.262 519.496 cv
121.441 519.676 121.578 519.887 121.672 520.125 cv
121.762 520.363 121.805 520.617 121.809 520.883 cv
121.805 521.133 121.785 521.375 121.742 521.609 cv
121.695 521.852 121.602 522.109 121.469 522.387 cv
121.328 522.668 121.129 522.98 120.867 523.32 cv
120.605 523.664 120.258 524.055 119.824 524.5 cv
118.625 525.754 li
121.926 525.754 li
121.953 525.754 121.984 525.766 122.016 525.781 cv
122.043 525.801 122.066 525.824 122.09 525.859 cv
122.105 525.898 122.121 525.945 122.137 525.992 cv
122.145 526.047 122.152 526.105 122.152 526.176 cv
cp
f
193.156 524.453 mo
193.152 524.586 193.133 524.687 193.098 524.758 cv
193.055 524.832 193 524.871 192.938 524.867 cv
192.078 524.867 li
192.078 526.461 li
192.074 526.496 192.066 526.523 192.055 526.543 cv
192.035 526.566 192.008 526.582 191.969 526.598 cv
191.93 526.613 191.875 526.625 191.813 526.633 cv
191.746 526.641 191.664 526.645 191.566 526.645 cv
191.465 526.645 191.387 526.641 191.324 526.633 cv
191.262 526.625 191.211 526.613 191.172 526.598 cv
191.133 526.582 191.105 526.566 191.09 526.543 cv
191.074 526.523 191.066 526.496 191.07 526.461 cv
191.07 524.867 li
187.969 524.867 li
187.922 524.871 187.887 524.863 187.855 524.852 cv
187.824 524.844 187.793 524.824 187.77 524.789 cv
187.738 524.762 187.723 524.715 187.715 524.652 cv
187.707 524.594 187.703 524.52 187.703 524.422 cv
187.703 524.352 187.703 524.285 187.707 524.227 cv
187.711 524.168 187.719 524.113 187.73 524.066 cv
187.742 524.02 187.758 523.973 187.777 523.926 cv
187.797 523.879 187.82 523.832 187.848 523.781 cv
190.551 519.172 li
190.57 519.145 190.598 519.117 190.637 519.09 cv
190.672 519.07 190.723 519.051 190.785 519.031 cv
190.844 519.02 190.914 519.008 191.004 519 cv
191.09 518.996 191.195 518.992 191.316 518.992 cv
191.445 518.992 191.559 519 191.656 519.008 cv
191.754 519.023 191.832 519.035 191.895 519.047 cv
191.949 519.066 191.996 519.086 192.031 519.109 cv
192.059 519.133 192.074 519.164 192.078 519.195 cv
192.078 524.039 li
192.938 524.039 li
193 524.043 193.055 524.078 193.094 524.141 cv
193.133 524.211 193.152 524.312 193.156 524.453 cv
cp
191.07 519.875 mo
191.063 519.875 li
188.625 524.039 li
191.07 524.039 li
cp
f
263.711 524.156 mo
263.707 524.488 263.656 524.809 263.559 525.121 cv
263.453 525.434 263.297 525.707 263.09 525.941 cv
262.875 526.176 262.609 526.367 262.285 526.508 cv
261.957 526.648 261.574 526.715 261.137 526.719 cv
260.82 526.715 260.539 526.68 260.301 526.602 cv
260.055 526.527 259.844 526.414 259.668 526.27 cv
259.484 526.129 259.336 525.953 259.219 525.738 cv
259.098 525.531 259 525.289 258.93 525.016 cv
258.852 524.746 258.801 524.453 258.773 524.129 cv
258.738 523.812 258.723 523.469 258.727 523.102 cv
258.723 522.777 258.742 522.449 258.781 522.117 cv
258.816 521.785 258.879 521.465 258.969 521.156 cv
259.055 520.848 259.176 520.559 259.332 520.285 cv
259.488 520.016 259.68 519.777 259.914 519.574 cv
260.145 519.375 260.426 519.215 260.75 519.098 cv
261.07 518.98 261.445 518.922 261.883 518.922 cv
262.023 518.922 262.172 518.934 262.32 518.949 cv
262.469 518.973 262.605 518.996 262.73 519.02 cv
262.855 519.051 262.961 519.082 263.047 519.117 cv
263.133 519.152 263.188 519.18 263.215 519.203 cv
263.242 519.227 263.262 519.25 263.277 519.273 cv
263.285 519.297 263.297 519.324 263.309 519.355 cv
263.313 519.387 263.32 519.422 263.328 519.453 cv
263.332 519.492 263.332 519.535 263.336 519.59 cv
263.332 519.66 263.332 519.723 263.332 519.773 cv
263.328 519.824 263.32 519.863 263.309 519.895 cv
263.293 519.926 263.273 519.949 263.254 519.965 cv
263.23 519.98 263.203 519.988 263.172 519.988 cv
263.125 519.988 263.066 519.977 262.992 519.949 cv
262.918 519.922 262.828 519.891 262.723 519.855 cv
262.617 519.824 262.488 519.793 262.34 519.766 cv
262.188 519.742 262.016 519.73 261.816 519.727 cv
261.453 519.73 261.141 519.805 260.879 519.949 cv
260.613 520.102 260.398 520.301 260.234 520.547 cv
260.07 520.801 259.945 521.09 259.867 521.418 cv
259.785 521.746 259.742 522.09 259.73 522.449 cv
259.832 522.391 259.945 522.332 260.074 522.273 cv
260.199 522.219 260.336 522.168 260.488 522.117 cv
260.637 522.074 260.797 522.035 260.965 522.004 cv
261.133 521.973 261.313 521.957 261.508 521.957 cv
261.914 521.957 262.262 522.016 262.543 522.125 cv
262.824 522.238 263.051 522.391 263.223 522.586 cv
263.395 522.785 263.52 523.02 263.598 523.285 cv
263.672 523.559 263.707 523.848 263.711 524.156 cv
cp
262.688 524.25 mo
262.684 524.023 262.66 523.816 262.621 523.629 cv
262.574 523.445 262.5 523.289 262.395 523.16 cv
262.289 523.031 262.148 522.93 261.973 522.859 cv
261.797 522.789 261.582 522.754 261.324 522.754 cv
261.18 522.754 261.035 522.77 260.891 522.793 cv
260.742 522.82 260.602 522.855 260.469 522.898 cv
260.336 522.945 260.207 522.996 260.082 523.059 cv
259.957 523.121 259.844 523.187 259.75 523.25 cv
259.746 523.758 259.777 524.18 259.844 524.52 cv
259.906 524.859 260 525.133 260.125 525.336 cv
260.246 525.543 260.402 525.687 260.586 525.773 cv
260.766 525.863 260.98 525.906 261.23 525.906 cv
261.48 525.906 261.695 525.859 261.879 525.766 cv
262.063 525.672 262.215 525.547 262.336 525.387 cv
262.457 525.23 262.547 525.055 262.602 524.855 cv
262.656 524.66 262.684 524.457 262.688 524.25 cv
cp
f
334.34 524.664 mo
334.34 524.992 334.281 525.285 334.164 525.539 cv
334.047 525.797 333.875 526.012 333.656 526.187 cv
333.434 526.367 333.164 526.5 332.84 526.586 cv
332.512 526.672 332.141 526.715 331.727 526.719 cv
331.336 526.715 330.984 526.676 330.676 526.598 cv
330.367 526.52 330.105 526.398 329.891 526.234 cv
329.676 526.074 329.512 525.879 329.398 525.641 cv
329.285 525.41 329.23 525.141 329.23 524.84 cv
329.23 524.605 329.27 524.387 329.348 524.184 cv
329.426 523.984 329.535 523.801 329.684 523.633 cv
329.828 523.469 330.012 523.312 330.227 523.164 cv
330.438 523.016 330.68 522.875 330.953 522.742 cv
330.719 522.625 330.512 522.5 330.332 522.359 cv
330.152 522.227 330 522.078 329.875 521.918 cv
329.75 521.762 329.652 521.594 329.59 521.41 cv
329.52 521.234 329.488 521.039 329.492 520.828 cv
329.488 520.566 329.535 520.316 329.637 520.082 cv
329.73 519.848 329.875 519.645 330.07 519.473 cv
330.258 519.301 330.504 519.168 330.809 519.066 cv
331.105 518.969 331.457 518.918 331.855 518.914 cv
332.238 518.918 332.566 518.965 332.848 519.055 cv
333.121 519.148 333.352 519.273 333.539 519.43 cv
333.719 519.59 333.855 519.773 333.941 519.988 cv
334.027 520.207 334.07 520.437 334.07 520.68 cv
334.07 520.879 334.035 521.07 333.973 521.254 cv
333.902 521.441 333.809 521.617 333.688 521.777 cv
333.559 521.945 333.406 522.098 333.227 522.238 cv
333.047 522.379 332.84 522.512 332.605 522.637 cv
332.883 522.777 333.129 522.918 333.348 523.059 cv
333.563 523.203 333.742 523.359 333.891 523.523 cv
334.031 523.691 334.145 523.867 334.223 524.051 cv
334.301 524.238 334.34 524.441 334.34 524.664 cv
cp
333.074 520.773 mo
333.074 520.609 333.043 520.461 332.988 520.328 cv
332.93 520.195 332.848 520.082 332.742 519.988 cv
332.629 519.895 332.492 519.824 332.332 519.777 cv
332.168 519.73 331.984 519.707 331.781 519.703 cv
331.355 519.707 331.035 519.801 330.82 519.988 cv
330.602 520.18 330.496 520.441 330.496 520.773 cv
330.496 520.926 330.52 521.07 330.574 521.199 cv
330.625 521.332 330.707 521.453 330.82 521.57 cv
330.93 521.687 331.07 521.805 331.242 521.914 cv
331.41 522.027 331.613 522.141 331.852 522.262 cv
332.242 522.059 332.547 521.836 332.758 521.59 cv
332.969 521.344 333.074 521.07 333.074 520.773 cv
cp
333.32 524.77 mo
333.32 524.59 333.285 524.43 333.219 524.281 cv
333.152 524.141 333.051 524.004 332.918 523.871 cv
332.781 523.746 332.613 523.621 332.414 523.5 cv
332.211 523.383 331.98 523.258 331.715 523.129 cv
331.465 523.254 331.246 523.375 331.066 523.492 cv
330.879 523.613 330.727 523.738 330.609 523.867 cv
330.484 524 330.395 524.137 330.34 524.277 cv
330.277 524.418 330.25 524.574 330.25 524.746 cv
330.25 525.125 330.379 525.418 330.641 525.625 cv
330.898 525.836 331.285 525.941 331.805 525.937 cv
332.301 525.941 332.68 525.836 332.938 525.625 cv
333.191 525.414 333.32 525.129 333.32 524.77 cv
cp
f
401.84 526.211 mo
401.836 526.285 401.832 526.348 401.824 526.398 cv
401.813 526.453 401.797 526.496 401.777 526.523 cv
401.754 526.559 401.73 526.582 401.707 526.59 cv
401.684 526.605 401.656 526.609 401.629 526.609 cv
397.668 526.609 li
397.641 526.609 397.617 526.605 397.594 526.59 cv
397.57 526.582 397.547 526.559 397.527 526.523 cv
397.504 526.496 397.488 526.453 397.477 526.398 cv
397.461 526.348 397.453 526.285 397.457 526.211 cv
397.453 526.141 397.461 526.082 397.477 526.031 cv
397.488 525.98 397.5 525.937 397.52 525.902 cv
397.535 525.871 397.559 525.848 397.582 525.828 cv
397.605 525.812 397.633 525.801 397.668 525.801 cv
399.254 525.801 li
399.254 520.035 li
397.785 520.906 li
397.711 520.953 397.652 520.977 397.609 520.98 cv
397.563 520.992 397.527 520.984 397.5 520.953 cv
397.469 520.93 397.449 520.887 397.441 520.828 cv
397.434 520.77 397.43 520.695 397.43 520.602 cv
397.43 520.539 397.43 520.48 397.438 520.434 cv
397.441 520.387 397.453 520.348 397.465 520.316 cv
397.473 520.285 397.488 520.258 397.512 520.234 cv
397.535 520.211 397.563 520.187 397.598 520.164 cv
399.348 519.047 li
399.359 519.035 399.379 519.023 399.406 519.016 cv
399.426 519.008 399.457 519 399.492 518.992 cv
399.523 518.984 399.563 518.98 399.613 518.98 cv
399.656 518.98 399.715 518.98 399.793 518.977 cv
399.883 518.98 399.961 518.984 400.027 518.988 cv
400.086 519 400.137 519.012 400.172 519.02 cv
400.203 519.035 400.227 519.051 400.242 519.07 cv
400.254 519.094 400.258 519.117 400.262 519.141 cv
400.262 525.801 li
401.629 525.801 li
401.656 525.801 401.688 525.812 401.719 525.828 cv
401.746 525.848 401.766 525.871 401.785 525.902 cv
401.801 525.937 401.816 525.98 401.824 526.031 cv
401.832 526.082 401.836 526.141 401.84 526.211 cv
cp
f
408.195 522.801 mo
408.191 523.383 408.145 523.914 408.059 524.395 cv
407.965 524.879 407.813 525.293 407.602 525.637 cv
407.383 525.98 407.105 526.25 406.766 526.437 cv
406.418 526.625 405.996 526.715 405.496 526.719 cv
405.02 526.715 404.617 526.633 404.293 526.465 cv
403.965 526.297 403.703 526.047 403.504 525.715 cv
403.301 525.387 403.156 524.98 403.078 524.496 cv
402.992 524.016 402.953 523.461 402.953 522.836 cv
402.953 522.258 403 521.73 403.094 521.246 cv
403.188 520.77 403.34 520.355 403.551 520.004 cv
403.762 519.66 404.039 519.391 404.383 519.199 cv
404.727 519.012 405.148 518.918 405.648 518.914 cv
406.125 518.918 406.527 519.004 406.855 519.172 cv
407.184 519.344 407.445 519.594 407.645 519.922 cv
407.844 520.254 407.984 520.66 408.07 521.141 cv
408.148 521.625 408.191 522.176 408.195 522.801 cv
cp
407.164 522.871 mo
407.16 522.496 407.148 522.156 407.125 521.852 cv
407.098 521.551 407.055 521.285 407.004 521.055 cv
406.949 520.828 406.883 520.633 406.797 520.461 cv
406.711 520.297 406.609 520.16 406.496 520.051 cv
406.375 519.949 406.242 519.871 406.094 519.816 cv
405.945 519.77 405.777 519.742 405.59 519.742 cv
405.258 519.742 404.988 519.82 404.781 519.977 cv
404.57 520.133 404.406 520.348 404.289 520.621 cv
404.172 520.895 404.09 521.215 404.047 521.582 cv
404.004 521.949 403.984 522.344 403.984 522.766 cv
403.984 523.336 404.012 523.82 404.07 524.211 cv
404.129 524.609 404.223 524.93 404.348 525.18 cv
404.473 525.43 404.633 525.613 404.836 525.727 cv
405.031 525.84 405.273 525.895 405.555 525.895 cv
405.773 525.895 405.965 525.859 406.133 525.789 cv
406.297 525.719 406.438 525.621 406.559 525.488 cv
406.676 525.359 406.777 525.199 406.855 525.016 cv
406.934 524.836 406.996 524.633 407.043 524.406 cv
407.09 524.184 407.121 523.945 407.137 523.684 cv
407.152 523.426 407.16 523.152 407.164 522.871 cv
cp
f
472.488 526.211 mo
472.484 526.285 472.48 526.348 472.473 526.398 cv
472.461 526.453 472.445 526.496 472.426 526.523 cv
472.402 526.559 472.379 526.582 472.355 526.59 cv
472.332 526.605 472.305 526.609 472.277 526.609 cv
468.316 526.609 li
468.289 526.609 468.266 526.605 468.242 526.59 cv
468.219 526.582 468.195 526.559 468.176 526.523 cv
468.152 526.496 468.137 526.453 468.125 526.398 cv
468.109 526.348 468.102 526.285 468.105 526.211 cv
468.102 526.141 468.109 526.082 468.125 526.031 cv
468.137 525.98 468.148 525.937 468.168 525.902 cv
468.184 525.871 468.207 525.848 468.23 525.828 cv
468.254 525.812 468.281 525.801 468.316 525.801 cv
469.902 525.801 li
469.902 520.035 li
468.434 520.906 li
468.359 520.953 468.301 520.977 468.258 520.98 cv
468.211 520.992 468.176 520.984 468.148 520.953 cv
468.117 520.93 468.098 520.887 468.09 520.828 cv
468.082 520.77 468.078 520.695 468.078 520.602 cv
468.078 520.539 468.078 520.48 468.086 520.434 cv
468.09 520.387 468.102 520.348 468.113 520.316 cv
468.121 520.285 468.137 520.258 468.16 520.234 cv
468.184 520.211 468.211 520.187 468.246 520.164 cv
469.996 519.047 li
470.008 519.035 470.027 519.023 470.055 519.016 cv
470.074 519.008 470.105 519 470.141 518.992 cv
470.172 518.984 470.211 518.98 470.262 518.98 cv
470.305 518.98 470.363 518.98 470.441 518.977 cv
470.531 518.98 470.609 518.984 470.676 518.988 cv
470.734 519 470.785 519.012 470.82 519.02 cv
470.852 519.035 470.875 519.051 470.891 519.07 cv
470.902 519.094 470.906 519.117 470.91 519.141 cv
470.91 525.801 li
472.277 525.801 li
472.305 525.801 472.336 525.812 472.367 525.828 cv
472.395 525.848 472.414 525.871 472.434 525.902 cv
472.449 525.937 472.465 525.98 472.473 526.031 cv
472.48 526.082 472.484 526.141 472.488 526.211 cv
cp
f
478.594 526.176 mo
478.594 526.246 478.586 526.309 478.578 526.363 cv
478.563 526.418 478.551 526.465 478.535 526.5 cv
478.52 526.539 478.496 526.566 478.465 526.582 cv
478.434 526.602 478.402 526.609 478.371 526.609 cv
474.18 526.609 li
474.125 526.609 474.078 526.605 474.039 526.59 cv
473.996 526.582 473.961 526.559 473.934 526.523 cv
473.902 526.496 473.879 526.449 473.867 526.387 cv
473.852 526.328 473.848 526.258 473.848 526.172 cv
473.848 526.098 473.848 526.027 473.855 525.965 cv
473.859 525.906 473.875 525.855 473.895 525.809 cv
473.914 525.766 473.938 525.723 473.969 525.676 cv
473.996 525.637 474.035 525.586 474.09 525.531 cv
475.605 523.973 li
475.953 523.613 476.23 523.293 476.445 523.008 cv
476.656 522.723 476.82 522.461 476.938 522.227 cv
477.047 521.992 477.125 521.781 477.164 521.59 cv
477.199 521.398 477.215 521.219 477.219 521.047 cv
477.215 520.883 477.188 520.723 477.133 520.57 cv
477.074 520.422 476.992 520.289 476.887 520.176 cv
476.777 520.066 476.645 519.977 476.484 519.906 cv
476.32 519.84 476.133 519.809 475.93 519.805 cv
475.68 519.809 475.461 519.84 475.266 519.906 cv
475.07 519.977 474.898 520.051 474.75 520.125 cv
474.602 520.207 474.477 520.277 474.383 520.34 cv
474.281 520.406 474.211 520.441 474.164 520.437 cv
474.133 520.441 474.105 520.434 474.086 520.414 cv
474.063 520.402 474.043 520.375 474.031 520.34 cv
474.016 520.309 474.008 520.262 474 520.199 cv
473.992 520.141 473.988 520.07 473.988 519.988 cv
473.988 519.93 473.988 519.879 473.992 519.836 cv
473.996 519.797 474.004 519.762 474.016 519.727 cv
474.023 519.699 474.035 519.668 474.055 519.637 cv
474.066 519.609 474.098 519.578 474.148 519.535 cv
474.191 519.496 474.273 519.437 474.391 519.367 cv
474.504 519.297 474.648 519.23 474.824 519.16 cv
474.996 519.094 475.188 519.035 475.398 518.984 cv
475.605 518.941 475.824 518.918 476.055 518.914 cv
476.422 518.918 476.742 518.969 477.02 519.07 cv
477.293 519.176 477.523 519.316 477.703 519.496 cv
477.883 519.676 478.02 519.887 478.113 520.125 cv
478.203 520.363 478.246 520.617 478.25 520.883 cv
478.246 521.133 478.227 521.375 478.184 521.609 cv
478.137 521.852 478.043 522.109 477.91 522.387 cv
477.77 522.668 477.57 522.98 477.309 523.32 cv
477.047 523.664 476.699 524.055 476.266 524.5 cv
475.066 525.754 li
478.367 525.754 li
478.395 525.754 478.426 525.766 478.457 525.781 cv
478.484 525.801 478.508 525.824 478.531 525.859 cv
478.547 525.898 478.563 525.945 478.578 525.992 cv
478.586 526.047 478.594 526.105 478.594 526.176 cv
cp
f
543.168 526.211 mo
543.164 526.285 543.16 526.348 543.152 526.398 cv
543.141 526.453 543.125 526.496 543.105 526.523 cv
543.082 526.559 543.059 526.582 543.035 526.59 cv
543.012 526.605 542.984 526.609 542.957 526.609 cv
538.996 526.609 li
538.969 526.609 538.945 526.605 538.922 526.59 cv
538.898 526.582 538.875 526.559 538.855 526.523 cv
538.832 526.496 538.816 526.453 538.805 526.398 cv
538.789 526.348 538.781 526.285 538.785 526.211 cv
538.781 526.141 538.789 526.082 538.805 526.031 cv
538.816 525.98 538.828 525.937 538.848 525.902 cv
538.863 525.871 538.887 525.848 538.91 525.828 cv
538.934 525.812 538.961 525.801 538.996 525.801 cv
540.582 525.801 li
540.582 520.035 li
539.113 520.906 li
539.039 520.953 538.98 520.977 538.938 520.98 cv
538.891 520.992 538.855 520.984 538.828 520.953 cv
538.797 520.93 538.777 520.887 538.77 520.828 cv
538.762 520.77 538.758 520.695 538.758 520.602 cv
538.758 520.539 538.758 520.48 538.766 520.434 cv
538.77 520.387 538.781 520.348 538.793 520.316 cv
538.801 520.285 538.816 520.258 538.84 520.234 cv
538.863 520.211 538.891 520.187 538.926 520.164 cv
540.676 519.047 li
540.688 519.035 540.707 519.023 540.734 519.016 cv
540.754 519.008 540.785 519 540.82 518.992 cv
540.852 518.984 540.891 518.98 540.941 518.98 cv
540.984 518.98 541.043 518.98 541.121 518.977 cv
541.211 518.98 541.289 518.984 541.355 518.988 cv
541.414 519 541.465 519.012 541.5 519.02 cv
541.531 519.035 541.555 519.051 541.57 519.07 cv
541.582 519.094 541.586 519.117 541.59 519.141 cv
541.59 525.801 li
542.957 525.801 li
542.984 525.801 543.016 525.812 543.047 525.828 cv
543.074 525.848 543.094 525.871 543.113 525.902 cv
543.129 525.937 543.145 525.98 543.152 526.031 cv
543.16 526.082 543.164 526.141 543.168 526.211 cv
cp
f
549.594 524.453 mo
549.59 524.586 549.57 524.687 549.535 524.758 cv
549.492 524.832 549.438 524.871 549.375 524.867 cv
548.516 524.867 li
548.516 526.461 li
548.512 526.496 548.504 526.523 548.492 526.543 cv
548.473 526.566 548.445 526.582 548.406 526.598 cv
548.367 526.613 548.313 526.625 548.25 526.633 cv
548.184 526.641 548.102 526.645 548.004 526.645 cv
547.902 526.645 547.824 526.641 547.762 526.633 cv
547.699 526.625 547.648 526.613 547.609 526.598 cv
547.57 526.582 547.543 526.566 547.527 526.543 cv
547.512 526.523 547.504 526.496 547.508 526.461 cv
547.508 524.867 li
544.406 524.867 li
544.359 524.871 544.324 524.863 544.293 524.852 cv
544.262 524.844 544.23 524.824 544.207 524.789 cv
544.176 524.762 544.16 524.715 544.152 524.652 cv
544.145 524.594 544.141 524.52 544.141 524.422 cv
544.141 524.352 544.141 524.285 544.145 524.227 cv
544.148 524.168 544.156 524.113 544.168 524.066 cv
544.18 524.02 544.195 523.973 544.215 523.926 cv
544.234 523.879 544.258 523.832 544.285 523.781 cv
546.988 519.172 li
547.008 519.145 547.035 519.117 547.074 519.09 cv
547.109 519.07 547.16 519.051 547.223 519.031 cv
547.281 519.02 547.352 519.008 547.441 519 cv
547.527 518.996 547.633 518.992 547.754 518.992 cv
547.883 518.992 547.996 519 548.094 519.008 cv
548.191 519.023 548.27 519.035 548.332 519.047 cv
548.387 519.066 548.434 519.086 548.469 519.109 cv
548.496 519.133 548.512 519.164 548.516 519.195 cv
548.516 524.039 li
549.375 524.039 li
549.438 524.043 549.492 524.078 549.531 524.141 cv
549.57 524.211 549.59 524.312 549.594 524.453 cv
cp
547.508 519.875 mo
547.5 519.875 li
545.063 524.039 li
547.508 524.039 li
cp
f
613.852 526.211 mo
613.848 526.285 613.844 526.348 613.836 526.398 cv
613.824 526.453 613.809 526.496 613.789 526.523 cv
613.766 526.559 613.742 526.582 613.719 526.59 cv
613.695 526.605 613.668 526.609 613.641 526.609 cv
609.68 526.609 li
609.652 526.609 609.629 526.605 609.605 526.59 cv
609.582 526.582 609.559 526.559 609.539 526.523 cv
609.516 526.496 609.5 526.453 609.488 526.398 cv
609.473 526.348 609.465 526.285 609.469 526.211 cv
609.465 526.141 609.473 526.082 609.488 526.031 cv
609.5 525.98 609.512 525.937 609.531 525.902 cv
609.547 525.871 609.57 525.848 609.594 525.828 cv
609.617 525.812 609.645 525.801 609.68 525.801 cv
611.266 525.801 li
611.266 520.035 li
609.797 520.906 li
609.723 520.953 609.664 520.977 609.621 520.98 cv
609.574 520.992 609.539 520.984 609.512 520.953 cv
609.48 520.93 609.461 520.887 609.453 520.828 cv
609.445 520.77 609.441 520.695 609.441 520.602 cv
609.441 520.539 609.441 520.48 609.449 520.434 cv
609.453 520.387 609.465 520.348 609.477 520.316 cv
609.484 520.285 609.5 520.258 609.523 520.234 cv
609.547 520.211 609.574 520.187 609.609 520.164 cv
611.359 519.047 li
611.371 519.035 611.391 519.023 611.418 519.016 cv
611.438 519.008 611.469 519 611.504 518.992 cv
611.535 518.984 611.574 518.98 611.625 518.98 cv
611.668 518.98 611.727 518.98 611.805 518.977 cv
611.895 518.98 611.973 518.984 612.039 518.988 cv
612.098 519 612.148 519.012 612.184 519.02 cv
612.215 519.035 612.238 519.051 612.254 519.07 cv
612.266 519.094 612.27 519.117 612.273 519.141 cv
612.273 525.801 li
613.641 525.801 li
613.668 525.801 613.699 525.812 613.73 525.828 cv
613.758 525.848 613.777 525.871 613.797 525.902 cv
613.813 525.937 613.828 525.98 613.836 526.031 cv
613.844 526.082 613.848 526.141 613.852 526.211 cv
cp
f
620.148 524.156 mo
620.145 524.488 620.094 524.809 619.996 525.121 cv
619.891 525.434 619.734 525.707 619.527 525.941 cv
619.313 526.176 619.047 526.367 618.723 526.508 cv
618.395 526.648 618.012 526.715 617.574 526.719 cv
617.258 526.715 616.977 526.68 616.738 526.602 cv
616.492 526.527 616.281 526.414 616.105 526.27 cv
615.922 526.129 615.773 525.953 615.656 525.738 cv
615.535 525.531 615.438 525.289 615.367 525.016 cv
615.289 524.746 615.238 524.453 615.211 524.129 cv
615.176 523.812 615.16 523.469 615.164 523.102 cv
615.16 522.777 615.18 522.449 615.219 522.117 cv
615.254 521.785 615.316 521.465 615.406 521.156 cv
615.492 520.848 615.613 520.559 615.77 520.285 cv
615.926 520.016 616.117 519.777 616.352 519.574 cv
616.582 519.375 616.863 519.215 617.188 519.098 cv
617.508 518.98 617.883 518.922 618.32 518.922 cv
618.461 518.922 618.609 518.934 618.758 518.949 cv
618.906 518.973 619.043 518.996 619.168 519.02 cv
619.293 519.051 619.398 519.082 619.484 519.117 cv
619.57 519.152 619.625 519.18 619.652 519.203 cv
619.68 519.227 619.699 519.25 619.715 519.273 cv
619.723 519.297 619.734 519.324 619.746 519.355 cv
619.75 519.387 619.758 519.422 619.766 519.453 cv
619.77 519.492 619.77 519.535 619.773 519.59 cv
619.77 519.66 619.77 519.723 619.77 519.773 cv
619.766 519.824 619.758 519.863 619.746 519.895 cv
619.73 519.926 619.711 519.949 619.691 519.965 cv
619.668 519.98 619.641 519.988 619.609 519.988 cv
619.563 519.988 619.504 519.977 619.43 519.949 cv
619.355 519.922 619.266 519.891 619.16 519.855 cv
619.055 519.824 618.926 519.793 618.777 519.766 cv
618.625 519.742 618.453 519.73 618.254 519.727 cv
617.891 519.73 617.578 519.805 617.316 519.949 cv
617.051 520.102 616.836 520.301 616.672 520.547 cv
616.508 520.801 616.383 521.09 616.305 521.418 cv
616.223 521.746 616.18 522.09 616.168 522.449 cv
616.27 522.391 616.383 522.332 616.512 522.273 cv
616.637 522.219 616.773 522.168 616.926 522.117 cv
617.074 522.074 617.234 522.035 617.402 522.004 cv
617.57 521.973 617.75 521.957 617.945 521.957 cv
618.352 521.957 618.699 522.016 618.98 522.125 cv
619.262 522.238 619.488 522.391 619.66 522.586 cv
619.832 522.785 619.957 523.02 620.035 523.285 cv
620.109 523.559 620.145 523.848 620.148 524.156 cv
cp
619.125 524.25 mo
619.121 524.023 619.098 523.816 619.059 523.629 cv
619.012 523.445 618.938 523.289 618.832 523.16 cv
618.727 523.031 618.586 522.93 618.41 522.859 cv
618.234 522.789 618.02 522.754 617.762 522.754 cv
617.617 522.754 617.473 522.77 617.328 522.793 cv
617.18 522.82 617.039 522.855 616.906 522.898 cv
616.773 522.945 616.645 522.996 616.52 523.059 cv
616.395 523.121 616.281 523.187 616.188 523.25 cv
616.184 523.758 616.215 524.18 616.281 524.52 cv
616.344 524.859 616.438 525.133 616.563 525.336 cv
616.684 525.543 616.84 525.687 617.023 525.773 cv
617.203 525.863 617.418 525.906 617.668 525.906 cv
617.918 525.906 618.133 525.859 618.316 525.766 cv
618.5 525.672 618.652 525.547 618.773 525.387 cv
618.895 525.23 618.984 525.055 619.039 524.855 cv
619.094 524.66 619.121 524.457 619.125 524.25 cv
cp
f
17.008 322.535 mo
17.051 322.539 17.086 322.547 17.117 322.559 cv
17.148 322.578 17.176 322.613 17.195 322.66 cv
17.215 322.715 17.227 322.785 17.242 322.879 cv
17.25 322.973 17.258 323.098 17.258 323.254 cv
17.258 323.391 17.25 323.504 17.242 323.586 cv
17.227 323.672 17.215 323.738 17.191 323.789 cv
17.172 323.844 17.137 323.883 17.094 323.91 cv
17.055 323.941 17.004 323.969 16.938 323.984 cv
14.563 324.914 li
14.293 325.027 14.047 325.141 13.816 325.254 cv
13.594 325.371 13.398 325.508 13.234 325.668 cv
13.074 325.832 12.945 326.023 12.852 326.238 cv
12.762 326.461 12.719 326.723 12.715 327.023 cv
12.715 327.922 li
17.008 327.922 li
17.051 327.926 17.086 327.937 17.117 327.957 cv
17.148 327.984 17.176 328.02 17.191 328.066 cv
17.211 328.117 17.223 328.184 17.238 328.27 cv
17.25 328.355 17.258 328.465 17.258 328.59 cv
17.258 328.723 17.25 328.828 17.238 328.914 cv
17.223 329 17.211 329.07 17.191 329.121 cv
17.176 329.176 17.148 329.211 17.117 329.23 cv
17.086 329.254 17.051 329.266 17.008 329.262 cv
7.672 329.262 li
7.469 329.266 7.328 329.211 7.246 329.102 cv
7.168 328.996 7.129 328.883 7.125 328.762 cv
7.125 326.621 li
7.129 326.371 7.133 326.156 7.145 325.984 cv
7.16 325.816 7.176 325.664 7.188 325.527 cv
7.258 325.141 7.363 324.797 7.508 324.496 cv
7.656 324.199 7.844 323.949 8.063 323.746 cv
8.289 323.543 8.543 323.391 8.832 323.289 cv
9.121 323.187 9.441 323.137 9.785 323.137 cv
10.125 323.137 10.426 323.184 10.691 323.273 cv
10.961 323.367 11.199 323.5 11.402 323.668 cv
11.613 323.84 11.789 324.043 11.938 324.281 cv
12.086 324.523 12.215 324.793 12.316 325.086 cv
12.395 324.922 12.484 324.77 12.594 324.633 cv
12.707 324.5 12.844 324.375 12.996 324.254 cv
13.156 324.141 13.336 324.027 13.535 323.922 cv
13.738 323.82 13.965 323.719 14.219 323.609 cv
16.438 322.707 li
16.625 322.637 16.758 322.59 16.832 322.566 cv
16.91 322.551 16.969 322.539 17.008 322.535 cv
cp
9.926 324.555 mo
9.535 324.555 9.199 324.645 8.926 324.82 cv
8.652 325 8.457 325.297 8.336 325.707 cv
8.301 325.84 8.273 325.984 8.258 326.148 cv
8.242 326.312 8.234 326.527 8.234 326.789 cv
8.234 327.922 li
11.633 327.922 li
11.633 326.613 li
11.633 326.262 11.59 325.957 11.504 325.695 cv
11.418 325.441 11.301 325.227 11.145 325.055 cv
10.996 324.887 10.813 324.762 10.602 324.676 cv
10.395 324.598 10.172 324.555 9.926 324.555 cv
cp
f
17.016 314.734 mo
17.063 314.738 17.098 314.746 17.121 314.762 cv
17.152 314.781 17.176 314.816 17.195 314.859 cv
17.215 314.906 17.227 314.965 17.242 315.039 cv
17.25 315.117 17.258 315.211 17.258 315.316 cv
17.258 315.441 17.25 315.539 17.242 315.609 cv
17.227 315.687 17.215 315.746 17.195 315.789 cv
17.176 315.836 17.152 315.867 17.121 315.879 cv
17.098 315.898 17.063 315.906 17.016 315.902 cv
16.09 315.902 li
16.535 316.305 16.855 316.699 17.055 317.086 cv
17.258 317.48 17.355 317.875 17.359 318.27 cv
17.355 318.742 17.281 319.137 17.125 319.453 cv
16.973 319.773 16.762 320.031 16.492 320.227 cv
16.227 320.43 15.914 320.57 15.555 320.652 cv
15.199 320.742 14.766 320.785 14.258 320.781 cv
10.004 320.781 li
9.965 320.785 9.93 320.777 9.898 320.754 cv
9.871 320.738 9.848 320.703 9.82 320.648 cv
9.801 320.602 9.785 320.531 9.773 320.445 cv
9.77 320.363 9.766 320.262 9.762 320.133 cv
9.766 320.012 9.77 319.906 9.773 319.82 cv
9.785 319.738 9.801 319.672 9.82 319.625 cv
9.848 319.578 9.871 319.543 9.898 319.52 cv
9.93 319.5 9.965 319.492 10.004 319.488 cv
14.086 319.488 li
14.5 319.492 14.828 319.461 15.074 319.398 cv
15.32 319.34 15.531 319.25 15.703 319.125 cv
15.883 319.008 16.016 318.852 16.109 318.66 cv
16.207 318.477 16.258 318.258 16.254 318.008 cv
16.258 317.687 16.141 317.367 15.91 317.043 cv
15.684 316.727 15.348 316.387 14.902 316.027 cv
10.004 316.027 li
9.965 316.027 9.93 316.02 9.898 316 cv
9.871 315.984 9.848 315.949 9.82 315.895 cv
9.801 315.844 9.785 315.777 9.773 315.695 cv
9.77 315.617 9.766 315.512 9.762 315.379 cv
9.766 315.258 9.77 315.152 9.773 315.066 cv
9.785 314.984 9.801 314.922 9.82 314.875 cv
9.848 314.832 9.871 314.797 9.898 314.77 cv
9.93 314.75 9.965 314.738 10.004 314.734 cv
cp
f
17.016 306.324 mo
17.063 306.324 17.098 306.336 17.121 306.355 cv
17.152 306.379 17.176 306.414 17.195 306.457 cv
17.215 306.508 17.227 306.57 17.242 306.652 cv
17.25 306.734 17.258 306.84 17.258 306.961 cv
17.258 307.094 17.25 307.199 17.242 307.281 cv
17.227 307.367 17.215 307.434 17.195 307.477 cv
17.176 307.527 17.152 307.559 17.121 307.578 cv
17.098 307.602 17.063 307.613 17.016 307.609 cv
12.91 307.609 li
12.512 307.613 12.191 307.645 11.945 307.703 cv
11.703 307.77 11.492 307.859 11.313 307.977 cv
11.137 308.094 11 308.25 10.906 308.437 cv
10.813 308.633 10.766 308.852 10.766 309.098 cv
10.766 309.422 10.883 309.746 11.109 310.066 cv
11.344 310.391 11.676 310.727 12.113 311.078 cv
17.016 311.078 li
17.063 311.082 17.098 311.094 17.121 311.109 cv
17.152 311.133 17.176 311.164 17.195 311.211 cv
17.215 311.258 17.227 311.324 17.242 311.402 cv
17.25 311.488 17.258 311.594 17.258 311.723 cv
17.258 311.852 17.25 311.957 17.242 312.035 cv
17.227 312.121 17.215 312.187 17.195 312.234 cv
17.176 312.289 17.152 312.32 17.121 312.336 cv
17.098 312.355 17.063 312.367 17.016 312.363 cv
10.004 312.363 li
9.965 312.367 9.93 312.359 9.898 312.34 cv
9.871 312.328 9.848 312.297 9.82 312.246 cv
9.801 312.203 9.785 312.141 9.773 312.066 cv
9.77 311.996 9.766 311.902 9.762 311.777 cv
9.766 311.668 9.77 311.57 9.773 311.492 cv
9.785 311.418 9.801 311.359 9.82 311.316 cv
9.848 311.277 9.871 311.25 9.898 311.23 cv
9.93 311.215 9.965 311.207 10.004 311.203 cv
10.93 311.203 li
10.488 310.812 10.168 310.418 9.961 310.023 cv
9.758 309.633 9.652 309.234 9.652 308.832 cv
9.652 308.363 9.734 307.973 9.891 307.652 cv
10.055 307.336 10.266 307.074 10.527 306.875 cv
10.793 306.68 11.102 306.539 11.457 306.453 cv
11.813 306.367 12.242 306.324 12.738 306.324 cv
cp
f
16.5 300.449 mo
16.656 300.449 16.773 300.461 16.859 300.48 cv
16.949 300.504 17.016 300.535 17.055 300.574 cv
17.098 300.617 17.137 300.68 17.172 300.762 cv
17.207 300.848 17.234 300.941 17.262 301.047 cv
17.281 301.156 17.301 301.27 17.32 301.387 cv
17.332 301.504 17.34 301.625 17.344 301.742 cv
17.34 302.109 17.293 302.422 17.199 302.68 cv
17.105 302.941 16.961 303.152 16.762 303.316 cv
16.57 303.484 16.324 303.605 16.023 303.68 cv
15.727 303.758 15.375 303.797 14.965 303.793 cv
10.867 303.793 li
10.867 304.773 li
10.871 304.852 10.828 304.914 10.742 304.961 cv
10.66 305.008 10.527 305.031 10.336 305.031 cv
10.242 305.031 10.16 305.027 10.09 305.012 cv
10.027 305.004 9.969 304.984 9.922 304.961 cv
9.879 304.941 9.848 304.914 9.828 304.879 cv
9.813 304.848 9.805 304.812 9.801 304.766 cv
9.801 303.793 li
8.133 303.793 li
8.102 303.797 8.066 303.785 8.031 303.766 cv
8.004 303.75 7.977 303.719 7.949 303.664 cv
7.93 303.617 7.914 303.551 7.898 303.465 cv
7.891 303.387 7.883 303.281 7.883 303.152 cv
7.883 303.023 7.891 302.918 7.898 302.836 cv
7.914 302.754 7.93 302.687 7.949 302.641 cv
7.977 302.594 8.004 302.562 8.031 302.539 cv
8.066 302.523 8.102 302.512 8.133 302.508 cv
9.801 302.508 li
9.801 300.707 li
9.805 300.668 9.813 300.633 9.828 300.598 cv
9.848 300.57 9.879 300.543 9.922 300.516 cv
9.969 300.496 10.027 300.48 10.09 300.465 cv
10.16 300.457 10.242 300.449 10.336 300.449 cv
10.527 300.449 10.66 300.473 10.742 300.52 cv
10.828 300.566 10.871 300.629 10.867 300.707 cv
10.867 302.508 li
14.781 302.508 li
15.266 302.512 15.629 302.441 15.875 302.293 cv
16.125 302.152 16.25 301.895 16.246 301.523 cv
16.25 301.41 16.238 301.305 16.211 301.207 cv
16.191 301.117 16.168 301.035 16.137 300.957 cv
16.113 300.887 16.086 300.824 16.063 300.77 cv
16.039 300.723 16.027 300.676 16.027 300.629 cv
16.027 300.605 16.035 300.578 16.047 300.555 cv
16.063 300.531 16.086 300.516 16.121 300.5 cv
16.16 300.492 16.211 300.48 16.27 300.465 cv
16.336 300.457 16.414 300.449 16.5 300.449 cv
cp
f
17.016 297.434 mo
17.063 297.437 17.098 297.449 17.121 297.465 cv
17.152 297.488 17.176 297.52 17.195 297.566 cv
17.215 297.613 17.227 297.68 17.242 297.758 cv
17.25 297.844 17.258 297.949 17.258 298.078 cv
17.258 298.207 17.25 298.312 17.242 298.391 cv
17.227 298.477 17.215 298.543 17.195 298.59 cv
17.176 298.645 17.152 298.676 17.121 298.691 cv
17.098 298.711 17.063 298.723 17.016 298.719 cv
10.004 298.719 li
9.969 298.723 9.938 298.711 9.902 298.691 cv
9.875 298.676 9.848 298.645 9.824 298.59 cv
9.805 298.543 9.789 298.477 9.777 298.391 cv
9.77 298.312 9.766 298.207 9.762 298.078 cv
9.766 297.949 9.77 297.844 9.777 297.758 cv
9.789 297.68 9.805 297.613 9.824 297.566 cv
9.848 297.52 9.875 297.488 9.902 297.465 cv
9.938 297.449 9.969 297.437 10.004 297.434 cv
cp
7.633 297.285 mo
7.938 297.285 8.145 297.344 8.25 297.457 cv
8.363 297.57 8.418 297.781 8.414 298.086 cv
8.418 298.391 8.363 298.598 8.254 298.707 cv
8.148 298.824 7.945 298.879 7.648 298.875 cv
7.348 298.879 7.145 298.82 7.035 298.703 cv
6.93 298.59 6.875 298.379 6.871 298.07 cv
6.875 297.77 6.93 297.566 7.031 297.453 cv
7.141 297.344 7.34 297.285 7.633 297.285 cv
cp
f
17.016 284.609 mo
17.063 284.613 17.098 284.621 17.121 284.641 cv
17.152 284.664 17.176 284.699 17.195 284.742 cv
17.215 284.793 17.227 284.859 17.242 284.937 cv
17.25 285.023 17.258 285.125 17.258 285.25 cv
17.258 285.383 17.25 285.492 17.242 285.57 cv
17.227 285.656 17.215 285.723 17.195 285.77 cv
17.176 285.824 17.152 285.859 17.121 285.875 cv
17.098 285.898 17.063 285.906 17.016 285.906 cv
12.754 285.906 li
12.461 285.906 12.191 285.934 11.945 285.984 cv
11.703 286.039 11.492 286.121 11.313 286.234 cv
11.137 286.348 11 286.492 10.906 286.668 cv
10.813 286.848 10.766 287.059 10.766 287.293 cv
10.766 287.59 10.883 287.887 11.109 288.184 cv
11.344 288.488 11.676 288.816 12.113 289.172 cv
17.016 289.172 li
17.063 289.176 17.098 289.187 17.121 289.203 cv
17.152 289.227 17.176 289.258 17.195 289.305 cv
17.215 289.355 17.227 289.422 17.242 289.504 cv
17.25 289.59 17.258 289.695 17.258 289.816 cv
17.258 289.937 17.25 290.039 17.242 290.125 cv
17.227 290.211 17.215 290.281 17.195 290.328 cv
17.176 290.383 17.152 290.414 17.121 290.43 cv
17.098 290.449 17.063 290.461 17.016 290.457 cv
12.754 290.457 li
12.461 290.461 12.191 290.488 11.945 290.543 cv
11.703 290.602 11.492 290.687 11.313 290.801 cv
11.137 290.914 11 291.059 10.906 291.23 cv
10.813 291.41 10.766 291.617 10.766 291.852 cv
10.766 292.152 10.883 292.449 11.109 292.75 cv
11.344 293.051 11.676 293.379 12.113 293.73 cv
17.016 293.73 li
17.063 293.734 17.098 293.746 17.121 293.762 cv
17.152 293.785 17.176 293.816 17.195 293.863 cv
17.215 293.91 17.227 293.977 17.242 294.055 cv
17.25 294.141 17.258 294.246 17.258 294.375 cv
17.258 294.504 17.25 294.609 17.242 294.687 cv
17.227 294.773 17.215 294.84 17.195 294.887 cv
17.176 294.941 17.152 294.973 17.121 294.988 cv
17.098 295.008 17.063 295.02 17.016 295.016 cv
10.004 295.016 li
9.965 295.02 9.93 295.012 9.898 294.992 cv
9.871 294.98 9.848 294.949 9.82 294.898 cv
9.801 294.855 9.785 294.793 9.773 294.719 cv
9.77 294.648 9.766 294.555 9.762 294.43 cv
9.766 294.32 9.77 294.223 9.773 294.145 cv
9.785 294.07 9.801 294.012 9.82 293.969 cv
9.848 293.93 9.871 293.902 9.898 293.883 cv
9.93 293.867 9.965 293.859 10.004 293.855 cv
10.93 293.855 li
10.488 293.465 10.168 293.082 9.961 292.707 cv
9.758 292.34 9.652 291.961 9.652 291.578 cv
9.652 291.289 9.688 291.031 9.754 290.797 cv
9.824 290.57 9.918 290.363 10.039 290.184 cv
10.16 290.008 10.305 289.859 10.473 289.73 cv
10.645 289.609 10.836 289.504 11.039 289.418 cv
10.789 289.187 10.574 288.965 10.395 288.754 cv
10.223 288.543 10.078 288.34 9.965 288.145 cv
9.859 287.949 9.781 287.762 9.727 287.578 cv
9.68 287.395 9.652 287.207 9.652 287.02 cv
9.652 286.566 9.734 286.187 9.891 285.883 cv
10.055 285.578 10.266 285.332 10.527 285.137 cv
10.793 284.949 11.102 284.812 11.457 284.73 cv
11.813 284.652 12.188 284.613 12.582 284.609 cv
cp
f
13.207 276.277 mo
13.41 276.281 13.551 276.332 13.637 276.43 cv
13.723 276.535 13.766 276.652 13.766 276.777 cv
13.766 281.395 li
14.156 281.398 14.508 281.359 14.82 281.277 cv
15.133 281.203 15.402 281.07 15.621 280.887 cv
15.848 280.707 16.02 280.473 16.137 280.176 cv
16.262 279.887 16.32 279.527 16.316 279.102 cv
16.32 278.77 16.293 278.473 16.234 278.211 cv
16.184 277.949 16.121 277.723 16.051 277.531 cv
15.984 277.344 15.926 277.187 15.867 277.062 cv
15.816 276.941 15.789 276.848 15.785 276.785 cv
15.789 276.75 15.797 276.719 15.813 276.687 cv
15.832 276.66 15.859 276.637 15.895 276.617 cv
15.934 276.605 15.984 276.594 16.047 276.582 cv
16.113 276.578 16.191 276.574 16.285 276.57 cv
16.355 276.574 16.414 276.578 16.461 276.578 cv
16.508 276.586 16.551 276.59 16.59 276.598 cv
16.629 276.605 16.664 276.621 16.695 276.637 cv
16.727 276.66 16.758 276.684 16.785 276.707 cv
16.816 276.738 16.863 276.82 16.926 276.961 cv
16.992 277.102 17.055 277.285 17.117 277.508 cv
17.18 277.734 17.234 277.992 17.285 278.285 cv
17.332 278.578 17.355 278.891 17.359 279.223 cv
17.355 279.801 17.277 280.309 17.117 280.738 cv
16.957 281.176 16.719 281.539 16.402 281.832 cv
16.086 282.133 15.691 282.355 15.211 282.504 cv
14.734 282.652 14.176 282.727 13.539 282.727 cv
12.941 282.727 12.402 282.652 11.918 282.496 cv
11.441 282.344 11.031 282.117 10.695 281.82 cv
10.359 281.527 10.102 281.172 9.922 280.758 cv
9.742 280.344 9.652 279.879 9.652 279.363 cv
9.652 278.812 9.742 278.344 9.918 277.957 cv
10.098 277.57 10.336 277.254 10.633 277 cv
10.934 276.754 11.285 276.57 11.684 276.453 cv
12.09 276.34 12.52 276.281 12.973 276.277 cv
cp
12.824 277.57 mo
12.148 277.555 11.617 277.707 11.234 278.023 cv
10.852 278.34 10.66 278.809 10.656 279.426 cv
10.66 279.75 10.719 280.031 10.836 280.27 cv
10.957 280.512 11.117 280.711 11.313 280.871 cv
11.512 281.035 11.742 281.16 12.004 281.246 cv
12.266 281.336 12.539 281.387 12.824 281.395 cv
cp
f
6.473 268.105 mo
7.52 268.602 8.59 268.969 9.688 269.211 cv
10.789 269.453 11.895 269.574 13.004 269.574 cv
14.121 269.574 15.23 269.453 16.324 269.203 cv
17.422 268.961 18.492 268.598 19.547 268.121 cv
19.605 268.098 19.66 268.086 19.707 268.078 cv
19.75 268.078 19.785 268.094 19.816 268.129 cv
19.844 268.168 19.863 268.223 19.879 268.297 cv
19.887 268.375 19.895 268.48 19.898 268.605 cv
19.895 268.703 19.891 268.781 19.891 268.848 cv
19.883 268.918 19.875 268.977 19.859 269.023 cv
19.844 269.074 19.824 269.117 19.805 269.145 cv
19.781 269.18 19.758 269.203 19.734 269.215 cv
19.203 269.496 18.668 269.742 18.125 269.953 cv
17.582 270.172 17.031 270.352 16.473 270.492 cv
15.91 270.641 15.344 270.75 14.77 270.82 cv
14.195 270.898 13.613 270.934 13.027 270.93 cv
12.441 270.934 11.863 270.895 11.289 270.809 cv
10.719 270.73 10.152 270.613 9.586 270.465 cv
9.023 270.316 8.469 270.137 7.922 269.926 cv
7.379 269.715 6.836 269.477 6.301 269.207 cv
6.281 269.203 6.266 269.187 6.246 269.164 cv
6.234 269.141 6.219 269.109 6.199 269.066 cv
6.188 269.027 6.176 268.969 6.164 268.895 cv
6.16 268.824 6.156 268.73 6.152 268.613 cv
6.156 268.496 6.164 268.402 6.176 268.324 cv
6.195 268.254 6.215 268.195 6.238 268.152 cv
6.266 268.113 6.301 268.09 6.34 268.082 cv
6.387 268.078 6.43 268.086 6.473 268.105 cv
cp
f
17.008 254.824 mo
17.051 254.824 17.086 254.836 17.117 254.855 cv
17.148 254.879 17.176 254.918 17.191 254.969 cv
17.211 255.023 17.223 255.09 17.238 255.172 cv
17.25 255.258 17.258 255.367 17.258 255.496 cv
17.258 255.625 17.25 255.73 17.238 255.816 cv
17.223 255.906 17.211 255.977 17.191 256.027 cv
17.176 256.078 17.148 256.113 17.117 256.133 cv
17.086 256.156 17.051 256.168 17.008 256.164 cv
8.227 256.164 li
8.227 256.18 li
17.047 259.734 li
17.086 259.75 17.117 259.773 17.141 259.801 cv
17.168 259.832 17.191 259.875 17.207 259.926 cv
17.227 259.984 17.238 260.047 17.246 260.121 cv
17.254 260.195 17.258 260.285 17.258 260.387 cv
17.258 260.5 17.25 260.594 17.242 260.668 cv
17.227 260.75 17.215 260.816 17.199 260.863 cv
17.184 260.918 17.164 260.957 17.133 260.984 cv
17.109 261.016 17.078 261.035 17.047 261.043 cv
8.227 264.441 li
8.227 264.449 li
17.008 264.449 li
17.051 264.453 17.086 264.461 17.117 264.48 cv
17.148 264.504 17.176 264.543 17.191 264.594 cv
17.211 264.648 17.223 264.719 17.238 264.801 cv
17.25 264.891 17.258 265 17.258 265.129 cv
17.258 265.262 17.25 265.367 17.238 265.453 cv
17.223 265.539 17.211 265.609 17.191 265.656 cv
17.176 265.711 17.148 265.746 17.117 265.762 cv
17.086 265.785 17.051 265.793 17.008 265.789 cv
7.734 265.789 li
7.52 265.793 7.363 265.734 7.266 265.617 cv
7.176 265.5 7.129 265.371 7.125 265.227 cv
7.125 264.402 li
7.129 264.238 7.145 264.09 7.172 263.961 cv
7.207 263.836 7.254 263.727 7.32 263.629 cv
7.391 263.535 7.477 263.453 7.578 263.391 cv
7.684 263.328 7.809 263.273 7.945 263.227 cv
15.246 260.34 li
15.246 260.301 li
7.969 257.301 li
7.816 257.246 7.684 257.184 7.57 257.113 cv
7.465 257.047 7.375 256.969 7.309 256.887 cv
7.246 256.805 7.199 256.715 7.168 256.613 cv
7.141 256.516 7.129 256.398 7.125 256.266 cv
7.125 255.402 li
7.129 255.324 7.141 255.246 7.16 255.176 cv
7.188 255.105 7.223 255.047 7.27 254.996 cv
7.32 254.945 7.383 254.902 7.457 254.871 cv
7.535 254.84 7.629 254.824 7.734 254.824 cv
cp
f
17.016 251.004 mo
17.063 251.008 17.098 251.02 17.121 251.035 cv
17.152 251.059 17.176 251.09 17.195 251.137 cv
17.215 251.184 17.227 251.25 17.242 251.328 cv
17.25 251.414 17.258 251.52 17.258 251.648 cv
17.258 251.777 17.25 251.883 17.242 251.961 cv
17.227 252.047 17.215 252.113 17.195 252.16 cv
17.176 252.215 17.152 252.246 17.121 252.262 cv
17.098 252.281 17.063 252.293 17.016 252.289 cv
10.004 252.289 li
9.969 252.293 9.938 252.281 9.902 252.262 cv
9.875 252.246 9.848 252.215 9.824 252.16 cv
9.805 252.113 9.789 252.047 9.777 251.961 cv
9.77 251.883 9.766 251.777 9.762 251.648 cv
9.766 251.52 9.77 251.414 9.777 251.328 cv
9.789 251.25 9.805 251.184 9.824 251.137 cv
9.848 251.09 9.875 251.059 9.902 251.035 cv
9.938 251.02 9.969 251.008 10.004 251.004 cv
cp
7.633 250.855 mo
7.938 250.855 8.145 250.914 8.25 251.027 cv
8.363 251.141 8.418 251.352 8.414 251.656 cv
8.418 251.961 8.363 252.168 8.254 252.277 cv
8.148 252.395 7.945 252.449 7.648 252.445 cv
7.348 252.449 7.145 252.391 7.035 252.273 cv
6.93 252.16 6.875 251.949 6.871 251.641 cv
6.875 251.34 6.93 251.137 7.031 251.023 cv
7.141 250.914 7.34 250.855 7.633 250.855 cv
cp
f
17.016 242.578 mo
17.063 242.578 17.098 242.59 17.121 242.609 cv
17.152 242.633 17.176 242.668 17.195 242.711 cv
17.215 242.762 17.227 242.824 17.242 242.906 cv
17.25 242.988 17.258 243.094 17.258 243.215 cv
17.258 243.348 17.25 243.453 17.242 243.535 cv
17.227 243.621 17.215 243.687 17.195 243.73 cv
17.176 243.781 17.152 243.812 17.121 243.832 cv
17.098 243.855 17.063 243.867 17.016 243.863 cv
12.91 243.863 li
12.512 243.867 12.191 243.898 11.945 243.957 cv
11.703 244.023 11.492 244.113 11.313 244.23 cv
11.137 244.348 11 244.504 10.906 244.691 cv
10.813 244.887 10.766 245.105 10.766 245.352 cv
10.766 245.676 10.883 246 11.109 246.32 cv
11.344 246.645 11.676 246.98 12.113 247.332 cv
17.016 247.332 li
17.063 247.336 17.098 247.348 17.121 247.363 cv
17.152 247.387 17.176 247.418 17.195 247.465 cv
17.215 247.512 17.227 247.578 17.242 247.656 cv
17.25 247.742 17.258 247.848 17.258 247.977 cv
17.258 248.105 17.25 248.211 17.242 248.289 cv
17.227 248.375 17.215 248.441 17.195 248.488 cv
17.176 248.543 17.152 248.574 17.121 248.59 cv
17.098 248.609 17.063 248.621 17.016 248.617 cv
10.004 248.617 li
9.965 248.621 9.93 248.613 9.898 248.594 cv
9.871 248.582 9.848 248.551 9.82 248.5 cv
9.801 248.457 9.785 248.395 9.773 248.32 cv
9.77 248.25 9.766 248.156 9.762 248.031 cv
9.766 247.922 9.77 247.824 9.773 247.746 cv
9.785 247.672 9.801 247.613 9.82 247.57 cv
9.848 247.531 9.871 247.504 9.898 247.484 cv
9.93 247.469 9.965 247.461 10.004 247.457 cv
10.93 247.457 li
10.488 247.066 10.168 246.672 9.961 246.277 cv
9.758 245.887 9.652 245.488 9.652 245.086 cv
9.652 244.617 9.734 244.227 9.891 243.906 cv
10.055 243.59 10.266 243.328 10.527 243.129 cv
10.793 242.934 11.102 242.793 11.457 242.707 cv
11.813 242.621 12.242 242.578 12.738 242.578 cv
cp
f
17.016 234.184 mo
17.063 234.187 17.098 234.195 17.121 234.211 cv
17.152 234.23 17.176 234.266 17.195 234.309 cv
17.215 234.355 17.227 234.414 17.242 234.488 cv
17.25 234.566 17.258 234.66 17.258 234.766 cv
17.258 234.891 17.25 234.988 17.242 235.059 cv
17.227 235.137 17.215 235.195 17.195 235.238 cv
17.176 235.285 17.152 235.316 17.121 235.328 cv
17.098 235.348 17.063 235.355 17.016 235.352 cv
16.09 235.352 li
16.535 235.754 16.855 236.148 17.055 236.535 cv
17.258 236.93 17.355 237.324 17.359 237.719 cv
17.355 238.191 17.281 238.586 17.125 238.902 cv
16.973 239.223 16.762 239.48 16.492 239.676 cv
16.227 239.879 15.914 240.02 15.555 240.102 cv
15.199 240.191 14.766 240.234 14.258 240.23 cv
10.004 240.23 li
9.965 240.234 9.93 240.227 9.898 240.203 cv
9.871 240.187 9.848 240.152 9.82 240.098 cv
9.801 240.051 9.785 239.98 9.773 239.895 cv
9.77 239.812 9.766 239.711 9.762 239.582 cv
9.766 239.461 9.77 239.355 9.773 239.27 cv
9.785 239.187 9.801 239.121 9.82 239.074 cv
9.848 239.027 9.871 238.992 9.898 238.969 cv
9.93 238.949 9.965 238.941 10.004 238.937 cv
14.086 238.937 li
14.5 238.941 14.828 238.91 15.074 238.848 cv
15.32 238.789 15.531 238.699 15.703 238.574 cv
15.883 238.457 16.016 238.301 16.109 238.109 cv
16.207 237.926 16.258 237.707 16.254 237.457 cv
16.258 237.137 16.141 236.816 15.91 236.492 cv
15.684 236.176 15.348 235.836 14.902 235.477 cv
10.004 235.477 li
9.965 235.477 9.93 235.469 9.898 235.449 cv
9.871 235.434 9.848 235.398 9.82 235.344 cv
9.801 235.293 9.785 235.227 9.773 235.145 cv
9.77 235.066 9.766 234.961 9.762 234.828 cv
9.766 234.707 9.77 234.602 9.773 234.516 cv
9.785 234.434 9.801 234.371 9.82 234.324 cv
9.848 234.281 9.871 234.246 9.898 234.219 cv
9.93 234.199 9.965 234.187 10.004 234.184 cv
cp
f
16.5 228.164 mo
16.656 228.164 16.773 228.176 16.859 228.195 cv
16.949 228.219 17.016 228.25 17.055 228.289 cv
17.098 228.332 17.137 228.395 17.172 228.477 cv
17.207 228.562 17.234 228.656 17.262 228.762 cv
17.281 228.871 17.301 228.984 17.32 229.102 cv
17.332 229.219 17.34 229.34 17.344 229.457 cv
17.34 229.824 17.293 230.137 17.199 230.395 cv
17.105 230.656 16.961 230.867 16.762 231.031 cv
16.57 231.199 16.324 231.32 16.023 231.395 cv
15.727 231.473 15.375 231.512 14.965 231.508 cv
10.867 231.508 li
10.867 232.488 li
10.871 232.566 10.828 232.629 10.742 232.676 cv
10.66 232.723 10.527 232.746 10.336 232.746 cv
10.242 232.746 10.16 232.742 10.09 232.727 cv
10.027 232.719 9.969 232.699 9.922 232.676 cv
9.879 232.656 9.848 232.629 9.828 232.594 cv
9.813 232.562 9.805 232.527 9.801 232.48 cv
9.801 231.508 li
8.133 231.508 li
8.102 231.512 8.066 231.5 8.031 231.48 cv
8.004 231.465 7.977 231.434 7.949 231.379 cv
7.93 231.332 7.914 231.266 7.898 231.18 cv
7.891 231.102 7.883 230.996 7.883 230.867 cv
7.883 230.738 7.891 230.633 7.898 230.551 cv
7.914 230.469 7.93 230.402 7.949 230.355 cv
7.977 230.309 8.004 230.277 8.031 230.254 cv
8.066 230.238 8.102 230.227 8.133 230.223 cv
9.801 230.223 li
9.801 228.422 li
9.805 228.383 9.813 228.348 9.828 228.312 cv
9.848 228.285 9.879 228.258 9.922 228.23 cv
9.969 228.211 10.027 228.195 10.09 228.18 cv
10.16 228.172 10.242 228.164 10.336 228.164 cv
10.527 228.164 10.66 228.187 10.742 228.234 cv
10.828 228.281 10.871 228.344 10.867 228.422 cv
10.867 230.223 li
14.781 230.223 li
15.266 230.227 15.629 230.156 15.875 230.008 cv
16.125 229.867 16.25 229.609 16.246 229.238 cv
16.25 229.125 16.238 229.02 16.211 228.922 cv
16.191 228.832 16.168 228.75 16.137 228.672 cv
16.113 228.602 16.086 228.539 16.063 228.484 cv
16.039 228.437 16.027 228.391 16.027 228.344 cv
16.027 228.32 16.035 228.293 16.047 228.27 cv
16.063 228.246 16.086 228.23 16.121 228.215 cv
16.16 228.207 16.211 228.195 16.27 228.18 cv
16.336 228.172 16.414 228.164 16.5 228.164 cv
cp
f
13.207 220.48 mo
13.41 220.484 13.551 220.535 13.637 220.633 cv
13.723 220.738 13.766 220.855 13.766 220.98 cv
13.766 225.598 li
14.156 225.602 14.508 225.562 14.82 225.48 cv
15.133 225.406 15.402 225.273 15.621 225.09 cv
15.848 224.91 16.02 224.676 16.137 224.379 cv
16.262 224.09 16.32 223.73 16.316 223.305 cv
16.32 222.973 16.293 222.676 16.234 222.414 cv
16.184 222.152 16.121 221.926 16.051 221.734 cv
15.984 221.547 15.926 221.391 15.867 221.266 cv
15.816 221.145 15.789 221.051 15.785 220.988 cv
15.789 220.953 15.797 220.922 15.813 220.891 cv
15.832 220.863 15.859 220.84 15.895 220.82 cv
15.934 220.809 15.984 220.797 16.047 220.785 cv
16.113 220.781 16.191 220.777 16.285 220.773 cv
16.355 220.777 16.414 220.781 16.461 220.781 cv
16.508 220.789 16.551 220.793 16.59 220.801 cv
16.629 220.809 16.664 220.824 16.695 220.84 cv
16.727 220.863 16.758 220.887 16.785 220.91 cv
16.816 220.941 16.863 221.023 16.926 221.164 cv
16.992 221.305 17.055 221.488 17.117 221.711 cv
17.18 221.937 17.234 222.195 17.285 222.488 cv
17.332 222.781 17.355 223.094 17.359 223.426 cv
17.355 224.004 17.277 224.512 17.117 224.941 cv
16.957 225.379 16.719 225.742 16.402 226.035 cv
16.086 226.336 15.691 226.559 15.211 226.707 cv
14.734 226.855 14.176 226.93 13.539 226.93 cv
12.941 226.93 12.402 226.855 11.918 226.699 cv
11.441 226.547 11.031 226.32 10.695 226.023 cv
10.359 225.73 10.102 225.375 9.922 224.961 cv
9.742 224.547 9.652 224.082 9.652 223.566 cv
9.652 223.016 9.742 222.547 9.918 222.16 cv
10.098 221.773 10.336 221.457 10.633 221.203 cv
10.934 220.957 11.285 220.773 11.684 220.656 cv
12.09 220.543 12.52 220.484 12.973 220.48 cv
cp
12.824 221.773 mo
12.148 221.758 11.617 221.91 11.234 222.227 cv
10.852 222.543 10.66 223.012 10.656 223.629 cv
10.66 223.953 10.719 224.234 10.836 224.473 cv
10.957 224.715 11.117 224.914 11.313 225.074 cv
11.512 225.238 11.742 225.363 12.004 225.449 cv
12.266 225.539 12.539 225.59 12.824 225.598 cv
cp
f
15.105 214.195 mo
15.469 214.199 15.789 214.266 16.066 214.395 cv
16.348 214.527 16.582 214.715 16.773 214.957 cv
16.969 215.203 17.113 215.496 17.211 215.832 cv
17.309 216.172 17.355 216.543 17.359 216.945 cv
17.355 217.199 17.336 217.437 17.301 217.66 cv
17.258 217.887 17.211 218.086 17.152 218.266 cv
17.094 218.445 17.031 218.598 16.965 218.723 cv
16.902 218.848 16.844 218.941 16.789 218.996 cv
16.738 219.055 16.668 219.094 16.57 219.117 cv
16.48 219.145 16.352 219.156 16.191 219.156 cv
16.094 219.156 16.012 219.152 15.941 219.141 cv
15.875 219.133 15.82 219.121 15.777 219.102 cv
15.738 219.09 15.707 219.066 15.688 219.039 cv
15.672 219.012 15.664 218.98 15.66 218.941 cv
15.664 218.887 15.699 218.801 15.766 218.687 cv
15.84 218.578 15.918 218.441 15.996 218.273 cv
16.082 218.113 16.156 217.922 16.227 217.695 cv
16.297 217.477 16.332 217.219 16.332 216.922 cv
16.332 216.707 16.309 216.508 16.262 216.328 cv
16.215 216.152 16.148 216 16.055 215.871 cv
15.969 215.742 15.852 215.641 15.707 215.57 cv
15.57 215.5 15.402 215.465 15.207 215.465 cv
15.012 215.465 14.848 215.516 14.711 215.617 cv
14.578 215.719 14.457 215.855 14.352 216.02 cv
14.25 216.187 14.16 216.371 14.074 216.578 cv
13.996 216.789 13.91 217.004 13.82 217.223 cv
13.734 217.441 13.633 217.656 13.52 217.867 cv
13.41 218.078 13.277 218.27 13.113 218.434 cv
12.957 218.605 12.762 218.738 12.535 218.836 cv
12.313 218.941 12.047 218.992 11.734 218.988 cv
11.461 218.992 11.195 218.937 10.941 218.828 cv
10.691 218.723 10.473 218.562 10.281 218.348 cv
10.094 218.137 9.941 217.871 9.824 217.551 cv
9.711 217.23 9.652 216.859 9.652 216.43 cv
9.652 216.246 9.668 216.059 9.699 215.871 cv
9.73 215.687 9.77 215.52 9.816 215.363 cv
9.863 215.215 9.914 215.086 9.969 214.977 cv
10.023 214.875 10.074 214.793 10.113 214.734 cv
10.16 214.684 10.195 214.648 10.223 214.625 cv
10.254 214.609 10.289 214.594 10.324 214.586 cv
10.367 214.578 10.414 214.57 10.469 214.562 cv
10.527 214.555 10.598 214.551 10.68 214.551 cv
10.77 214.551 10.848 214.555 10.91 214.562 cv
10.98 214.57 11.031 214.586 11.07 214.602 cv
11.113 214.625 11.145 214.645 11.16 214.668 cv
11.18 214.695 11.188 214.727 11.188 214.754 cv
11.188 214.805 11.16 214.871 11.102 214.957 cv
11.047 215.047 10.984 215.16 10.918 215.301 cv
10.855 215.441 10.797 215.609 10.734 215.797 cv
10.68 215.988 10.648 216.203 10.648 216.445 cv
10.648 216.668 10.676 216.859 10.723 217.023 cv
10.777 217.191 10.848 217.328 10.934 217.434 cv
11.027 217.539 11.133 217.621 11.258 217.672 cv
11.383 217.73 11.52 217.758 11.664 217.754 cv
11.867 217.758 12.035 217.707 12.172 217.602 cv
12.313 217.5 12.434 217.363 12.535 217.195 cv
12.641 217.031 12.734 216.84 12.816 216.625 cv
12.902 216.414 12.988 216.199 13.074 215.977 cv
13.164 215.758 13.266 215.539 13.371 215.32 cv
13.48 215.105 13.609 214.914 13.766 214.746 cv
13.922 214.582 14.109 214.449 14.328 214.348 cv
14.547 214.25 14.809 214.199 15.105 214.195 cv
cp
f
13.027 209.754 mo
13.613 209.754 14.195 209.793 14.77 209.863 cv
15.344 209.941 15.91 210.051 16.473 210.191 cv
17.031 210.34 17.582 210.516 18.125 210.727 cv
18.668 210.937 19.203 211.184 19.734 211.461 cv
19.758 211.48 19.781 211.504 19.805 211.531 cv
19.824 211.566 19.844 211.605 19.859 211.652 cv
19.875 211.703 19.883 211.762 19.891 211.828 cv
19.891 211.898 19.895 211.98 19.898 212.07 cv
19.895 212.207 19.887 212.312 19.879 212.387 cv
19.863 212.465 19.844 212.52 19.816 212.551 cv
19.785 212.586 19.75 212.602 19.707 212.598 cv
19.66 212.598 19.605 212.582 19.547 212.555 cv
18.496 212.078 17.426 211.719 16.328 211.473 cv
15.23 211.23 14.121 211.109 13.004 211.105 cv
11.895 211.109 10.789 211.23 9.688 211.473 cv
8.59 211.719 7.52 212.086 6.473 212.57 cv
6.43 212.594 6.387 212.602 6.34 212.594 cv
6.301 212.594 6.266 212.57 6.238 212.523 cv
6.215 212.484 6.195 212.426 6.176 212.352 cv
6.164 212.281 6.156 212.184 6.152 212.062 cv
6.156 211.953 6.16 211.863 6.164 211.789 cv
6.176 211.719 6.188 211.66 6.199 211.613 cv
6.219 211.57 6.234 211.539 6.246 211.516 cv
6.266 211.5 6.281 211.484 6.301 211.469 cv
7.367 210.937 8.465 210.516 9.586 210.211 cv
10.715 209.906 11.859 209.754 13.027 209.754 cv
cp
f
261.512 538.895 mo
261.508 539 261.492 539.09 261.457 539.16 cv
261.422 539.238 261.375 539.297 261.32 539.34 cv
261.262 539.391 261.199 539.426 261.133 539.441 cv
261.059 539.465 260.988 539.473 260.926 539.473 cv
260.48 539.473 li
260.34 539.473 260.219 539.461 260.113 539.43 cv
260.008 539.406 259.91 539.352 259.816 539.273 cv
259.723 539.199 259.629 539.098 259.535 538.965 cv
259.441 538.836 259.34 538.672 259.234 538.469 cv
256.16 532.73 li
255.996 532.437 255.832 532.129 255.672 531.801 cv
255.504 531.48 255.352 531.164 255.215 530.855 cv
255.199 530.855 li
255.207 531.23 255.215 531.613 255.223 532 cv
255.227 532.391 255.227 532.777 255.23 533.16 cv
255.23 539.246 li
255.227 539.285 255.215 539.32 255.195 539.352 cv
255.172 539.387 255.137 539.414 255.086 539.43 cv
255.031 539.449 254.961 539.461 254.879 539.477 cv
254.793 539.488 254.688 539.496 254.559 539.496 cv
254.422 539.496 254.313 539.488 254.23 539.477 cv
254.145 539.461 254.078 539.449 254.031 539.43 cv
253.98 539.414 253.945 539.387 253.922 539.352 cv
253.898 539.32 253.887 539.285 253.891 539.246 cv
253.891 529.941 li
253.887 529.734 253.945 529.586 254.066 529.496 cv
254.184 529.41 254.313 529.367 254.453 529.363 cv
255.113 529.363 li
255.266 529.367 255.398 529.379 255.504 529.402 cv
255.605 529.43 255.699 529.473 255.785 529.531 cv
255.867 529.594 255.945 529.676 256.027 529.781 cv
256.102 529.891 256.184 530.027 256.27 530.184 cv
258.637 534.609 li
258.781 534.883 258.922 535.148 259.059 535.402 cv
259.191 535.66 259.32 535.914 259.449 536.16 cv
259.57 536.414 259.695 536.66 259.82 536.898 cv
259.941 537.141 260.063 537.383 260.188 537.625 cv
260.195 537.625 li
260.184 537.219 260.176 536.789 260.176 536.344 cv
260.168 535.898 260.168 535.473 260.172 535.062 cv
260.172 529.59 li
260.168 529.555 260.18 529.52 260.203 529.488 cv
260.227 529.457 260.262 529.43 260.316 529.406 cv
260.363 529.383 260.434 529.367 260.52 529.355 cv
260.605 529.348 260.715 529.344 260.855 529.34 cv
260.973 529.344 261.078 529.348 261.168 529.355 cv
261.254 529.367 261.32 529.383 261.371 529.406 cv
261.418 529.43 261.453 529.457 261.477 529.488 cv
261.496 529.52 261.508 529.555 261.512 529.59 cv
cp
f
270.059 539.254 mo
270.055 539.301 270.047 539.336 270.031 539.359 cv
270.012 539.391 269.977 539.414 269.934 539.434 cv
269.887 539.453 269.828 539.465 269.754 539.48 cv
269.676 539.488 269.582 539.496 269.477 539.496 cv
269.352 539.496 269.254 539.488 269.184 539.48 cv
269.105 539.465 269.047 539.453 269.004 539.434 cv
268.957 539.414 268.926 539.391 268.914 539.359 cv
268.895 539.336 268.887 539.301 268.891 539.254 cv
268.891 538.328 li
268.488 538.773 268.094 539.094 267.707 539.293 cv
267.313 539.496 266.918 539.594 266.523 539.598 cv
266.051 539.594 265.656 539.52 265.34 539.363 cv
265.02 539.211 264.762 539 264.566 538.73 cv
264.363 538.465 264.223 538.152 264.141 537.793 cv
264.051 537.437 264.008 537.004 264.012 536.496 cv
264.012 532.242 li
264.008 532.203 264.016 532.168 264.039 532.137 cv
264.055 532.109 264.09 532.086 264.145 532.059 cv
264.191 532.039 264.262 532.023 264.348 532.012 cv
264.43 532.008 264.531 532.004 264.66 532 cv
264.781 532.004 264.887 532.008 264.973 532.012 cv
265.055 532.023 265.121 532.039 265.168 532.059 cv
265.215 532.086 265.25 532.109 265.273 532.137 cv
265.293 532.168 265.301 532.203 265.305 532.242 cv
265.305 536.324 li
265.301 536.738 265.332 537.066 265.395 537.312 cv
265.453 537.559 265.543 537.77 265.668 537.941 cv
265.785 538.121 265.941 538.254 266.133 538.348 cv
266.316 538.445 266.535 538.496 266.785 538.492 cv
267.105 538.496 267.426 538.379 267.75 538.148 cv
268.066 537.922 268.406 537.586 268.766 537.141 cv
268.766 532.242 li
268.766 532.203 268.773 532.168 268.793 532.137 cv
268.809 532.109 268.844 532.086 268.898 532.059 cv
268.949 532.039 269.016 532.023 269.098 532.012 cv
269.176 532.008 269.281 532.004 269.414 532 cv
269.535 532.004 269.641 532.008 269.727 532.012 cv
269.809 532.023 269.871 532.039 269.918 532.059 cv
269.961 532.086 269.996 532.109 270.023 532.137 cv
270.043 532.168 270.055 532.203 270.059 532.242 cv
cp
f
282.836 539.254 mo
282.832 539.301 282.824 539.336 282.805 539.359 cv
282.781 539.391 282.746 539.414 282.703 539.434 cv
282.652 539.453 282.586 539.465 282.508 539.48 cv
282.422 539.488 282.32 539.496 282.195 539.496 cv
282.063 539.496 281.953 539.488 281.875 539.48 cv
281.789 539.465 281.723 539.453 281.676 539.434 cv
281.621 539.414 281.586 539.391 281.57 539.359 cv
281.547 539.336 281.539 539.301 281.539 539.254 cv
281.539 534.992 li
281.539 534.699 281.512 534.43 281.461 534.184 cv
281.406 533.941 281.324 533.73 281.211 533.551 cv
281.098 533.375 280.953 533.238 280.777 533.145 cv
280.598 533.051 280.387 533.004 280.152 533.004 cv
279.855 533.004 279.559 533.121 279.262 533.348 cv
278.957 533.582 278.629 533.914 278.273 534.352 cv
278.273 539.254 li
278.27 539.301 278.258 539.336 278.242 539.359 cv
278.219 539.391 278.188 539.414 278.141 539.434 cv
278.09 539.453 278.023 539.465 277.941 539.48 cv
277.855 539.488 277.75 539.496 277.629 539.496 cv
277.508 539.496 277.406 539.488 277.32 539.48 cv
277.234 539.465 277.164 539.453 277.117 539.434 cv
277.063 539.414 277.031 539.391 277.016 539.359 cv
276.996 539.336 276.984 539.301 276.988 539.254 cv
276.988 534.992 li
276.984 534.699 276.957 534.43 276.902 534.184 cv
276.844 533.941 276.758 533.73 276.645 533.551 cv
276.531 533.375 276.387 533.238 276.215 533.145 cv
276.035 533.051 275.828 533.004 275.594 533.004 cv
275.293 533.004 274.996 533.121 274.695 533.348 cv
274.395 533.582 274.066 533.914 273.715 534.352 cv
273.715 539.254 li
273.711 539.301 273.699 539.336 273.684 539.359 cv
273.66 539.391 273.629 539.414 273.582 539.434 cv
273.535 539.453 273.469 539.465 273.391 539.48 cv
273.305 539.488 273.199 539.496 273.07 539.496 cv
272.941 539.496 272.836 539.488 272.758 539.48 cv
272.672 539.465 272.605 539.453 272.559 539.434 cv
272.504 539.414 272.473 539.391 272.457 539.359 cv
272.438 539.336 272.426 539.301 272.43 539.254 cv
272.43 532.242 li
272.426 532.203 272.434 532.168 272.453 532.137 cv
272.465 532.109 272.496 532.086 272.547 532.059 cv
272.59 532.039 272.652 532.023 272.727 532.012 cv
272.797 532.008 272.891 532.004 273.016 532 cv
273.125 532.004 273.223 532.008 273.301 532.012 cv
273.375 532.023 273.434 532.039 273.477 532.059 cv
273.516 532.086 273.543 532.109 273.563 532.137 cv
273.578 532.168 273.586 532.203 273.59 532.242 cv
273.59 533.168 li
273.98 532.727 274.363 532.406 274.738 532.199 cv
275.105 531.996 275.484 531.891 275.867 531.891 cv
276.156 531.891 276.414 531.926 276.648 531.992 cv
276.875 532.062 277.082 532.156 277.262 532.277 cv
277.438 532.398 277.586 532.543 277.715 532.711 cv
277.836 532.883 277.941 533.074 278.027 533.277 cv
278.258 533.027 278.48 532.812 278.691 532.633 cv
278.902 532.461 279.105 532.316 279.301 532.203 cv
279.496 532.098 279.684 532.02 279.867 531.965 cv
280.051 531.918 280.238 531.891 280.426 531.891 cv
280.879 531.891 281.258 531.973 281.563 532.129 cv
281.867 532.293 282.113 532.504 282.309 532.766 cv
282.496 533.031 282.633 533.34 282.715 533.695 cv
282.793 534.051 282.832 534.426 282.836 534.82 cv
cp
f
291.637 535.652 mo
291.633 536.262 291.566 536.812 291.438 537.297 cv
291.301 537.785 291.105 538.199 290.852 538.539 cv
290.594 538.883 290.277 539.145 289.906 539.324 cv
289.531 539.508 289.105 539.594 288.621 539.598 cv
288.395 539.594 288.188 539.574 288 539.531 cv
287.813 539.484 287.625 539.414 287.445 539.316 cv
287.258 539.219 287.078 539.094 286.898 538.941 cv
286.715 538.793 286.523 538.613 286.324 538.398 cv
286.324 539.254 li
286.324 539.301 286.313 539.336 286.293 539.363 cv
286.27 539.398 286.234 539.422 286.191 539.437 cv
286.141 539.453 286.082 539.465 286.016 539.48 cv
285.941 539.488 285.852 539.496 285.746 539.496 cv
285.637 539.496 285.551 539.488 285.48 539.48 cv
285.406 539.465 285.344 539.453 285.301 539.437 cv
285.25 539.422 285.219 539.398 285.207 539.363 cv
285.188 539.336 285.18 539.301 285.184 539.254 cv
285.184 528.844 li
285.18 528.805 285.191 528.77 285.211 528.734 cv
285.227 528.707 285.258 528.68 285.313 528.656 cv
285.359 528.637 285.426 528.621 285.512 528.609 cv
285.59 528.602 285.695 528.598 285.824 528.594 cv
285.953 528.598 286.059 528.602 286.145 528.609 cv
286.223 528.621 286.289 528.637 286.336 528.656 cv
286.383 528.68 286.414 528.707 286.438 528.734 cv
286.453 528.77 286.465 528.805 286.469 528.844 cv
286.469 533.043 li
286.676 532.832 286.879 532.652 287.074 532.508 cv
287.27 532.363 287.457 532.246 287.645 532.152 cv
287.828 532.066 288.016 532 288.207 531.953 cv
288.391 531.914 288.59 531.891 288.801 531.891 cv
289.305 531.891 289.738 531.992 290.105 532.195 cv
290.465 532.398 290.758 532.672 290.984 533.008 cv
291.207 533.352 291.375 533.75 291.48 534.207 cv
291.582 534.664 291.633 535.145 291.637 535.652 cv
cp
290.305 535.801 mo
290.301 535.445 290.273 535.098 290.223 534.758 cv
290.164 534.422 290.07 534.125 289.934 533.863 cv
289.797 533.605 289.617 533.395 289.395 533.234 cv
289.168 533.078 288.887 533 288.555 532.996 cv
288.387 533 288.223 533.023 288.063 533.066 cv
287.898 533.117 287.734 533.195 287.566 533.301 cv
287.398 533.414 287.223 533.555 287.047 533.723 cv
286.863 533.898 286.672 534.113 286.469 534.367 cv
286.469 537.164 li
286.824 537.598 287.164 537.93 287.488 538.152 cv
287.813 538.383 288.148 538.496 288.5 538.492 cv
288.82 538.496 289.098 538.418 289.332 538.258 cv
289.559 538.105 289.746 537.898 289.891 537.637 cv
290.035 537.383 290.141 537.094 290.207 536.773 cv
290.27 536.457 290.301 536.133 290.305 535.801 cv
cp
f
299.547 535.445 mo
299.543 535.648 299.492 535.789 299.395 535.875 cv
299.289 535.961 299.172 536.004 299.047 536.004 cv
294.43 536.004 li
294.426 536.395 294.465 536.746 294.547 537.059 cv
294.621 537.371 294.754 537.641 294.938 537.859 cv
295.117 538.086 295.352 538.258 295.648 538.375 cv
295.938 538.5 296.297 538.559 296.723 538.555 cv
297.055 538.559 297.352 538.531 297.613 538.473 cv
297.875 538.422 298.102 538.359 298.293 538.289 cv
298.48 538.223 298.637 538.164 298.762 538.105 cv
298.883 538.055 298.977 538.027 299.039 538.023 cv
299.074 538.027 299.105 538.035 299.137 538.051 cv
299.164 538.07 299.188 538.098 299.207 538.133 cv
299.219 538.172 299.23 538.223 299.242 538.285 cv
299.246 538.352 299.25 538.43 299.254 538.523 cv
299.25 538.594 299.246 538.652 299.246 538.699 cv
299.238 538.746 299.234 538.789 299.227 538.828 cv
299.219 538.867 299.203 538.902 299.188 538.934 cv
299.164 538.965 299.141 538.996 299.117 539.023 cv
299.086 539.055 299.004 539.102 298.863 539.164 cv
298.723 539.23 298.539 539.293 298.316 539.355 cv
298.09 539.418 297.832 539.473 297.539 539.523 cv
297.246 539.57 296.934 539.594 296.602 539.598 cv
296.023 539.594 295.516 539.516 295.086 539.355 cv
294.648 539.195 294.285 538.957 293.992 538.641 cv
293.691 538.324 293.469 537.93 293.32 537.449 cv
293.172 536.973 293.098 536.414 293.098 535.777 cv
293.098 535.18 293.172 534.641 293.328 534.156 cv
293.48 533.68 293.707 533.27 294.004 532.934 cv
294.297 532.598 294.652 532.34 295.066 532.16 cv
295.48 531.98 295.945 531.891 296.461 531.891 cv
297.012 531.891 297.48 531.98 297.867 532.156 cv
298.254 532.336 298.57 532.574 298.824 532.871 cv
299.07 533.172 299.254 533.523 299.371 533.922 cv
299.484 534.328 299.543 534.758 299.547 535.211 cv
cp
298.254 535.062 mo
298.27 534.387 298.117 533.855 297.801 533.473 cv
297.484 533.09 297.016 532.898 296.398 532.895 cv
296.074 532.898 295.793 532.957 295.555 533.074 cv
295.313 533.195 295.113 533.355 294.953 533.551 cv
294.789 533.75 294.664 533.98 294.578 534.242 cv
294.488 534.504 294.438 534.777 294.43 535.062 cv
cp
f
305.609 532.699 mo
305.605 532.816 305.605 532.914 305.602 532.988 cv
305.594 533.07 305.582 533.133 305.57 533.172 cv
305.551 533.219 305.531 533.25 305.512 533.273 cv
305.484 533.297 305.453 533.309 305.414 533.309 cv
305.371 533.309 305.32 533.297 305.262 533.273 cv
305.199 533.25 305.129 533.227 305.059 533.203 cv
304.98 533.18 304.898 533.16 304.805 533.137 cv
304.711 533.121 304.609 533.109 304.5 533.105 cv
304.367 533.109 304.238 533.137 304.117 533.184 cv
303.992 533.238 303.863 533.324 303.727 533.441 cv
303.586 533.566 303.441 533.723 303.293 533.918 cv
303.141 534.113 302.973 534.355 302.793 534.641 cv
302.793 539.254 li
302.789 539.301 302.777 539.336 302.762 539.359 cv
302.738 539.391 302.707 539.414 302.66 539.434 cv
302.613 539.453 302.547 539.465 302.469 539.48 cv
302.383 539.488 302.277 539.496 302.148 539.496 cv
302.02 539.496 301.914 539.488 301.836 539.48 cv
301.75 539.465 301.684 539.453 301.637 539.434 cv
301.582 539.414 301.551 539.391 301.535 539.359 cv
301.516 539.336 301.504 539.301 301.508 539.254 cv
301.508 532.242 li
301.504 532.203 301.512 532.168 301.531 532.137 cv
301.543 532.109 301.574 532.086 301.625 532.059 cv
301.668 532.039 301.73 532.023 301.805 532.012 cv
301.875 532.008 301.969 532.004 302.094 532 cv
302.203 532.004 302.301 532.008 302.379 532.012 cv
302.453 532.023 302.512 532.039 302.555 532.059 cv
302.594 532.086 302.621 532.109 302.641 532.137 cv
302.656 532.168 302.664 532.203 302.668 532.242 cv
302.668 533.262 li
302.855 532.98 303.039 532.754 303.211 532.578 cv
303.379 532.402 303.539 532.262 303.691 532.16 cv
303.84 532.059 303.988 531.988 304.137 531.949 cv
304.285 531.91 304.434 531.891 304.586 531.891 cv
304.652 531.891 304.73 531.895 304.816 531.902 cv
304.902 531.91 304.992 531.926 305.086 531.945 cv
305.18 531.969 305.262 531.992 305.34 532.016 cv
305.41 532.043 305.465 532.07 305.5 532.094 cv
305.527 532.125 305.547 532.148 305.563 532.168 cv
305.57 532.195 305.582 532.227 305.59 532.258 cv
305.598 532.297 305.602 532.348 305.605 532.418 cv
305.605 532.488 305.605 532.582 305.609 532.699 cv
cp
f
317.371 535.668 mo
317.367 536.246 317.293 536.773 317.145 537.25 cv
316.992 537.734 316.766 538.148 316.469 538.492 cv
316.168 538.844 315.793 539.113 315.348 539.305 cv
314.895 539.5 314.375 539.594 313.785 539.598 cv
313.207 539.594 312.703 539.512 312.277 539.34 cv
311.848 539.172 311.492 538.922 311.207 538.594 cv
310.918 538.266 310.703 537.871 310.566 537.402 cv
310.426 536.937 310.359 536.406 310.359 535.809 cv
310.359 535.242 310.43 534.715 310.578 534.234 cv
310.723 533.754 310.949 533.34 311.25 532.988 cv
311.547 532.641 311.918 532.371 312.367 532.18 cv
312.813 531.988 313.336 531.891 313.934 531.891 cv
314.512 531.891 315.012 531.977 315.441 532.148 cv
315.867 532.32 316.227 532.57 316.512 532.898 cv
316.797 533.227 317.012 533.625 317.156 534.09 cv
317.297 534.559 317.367 535.086 317.371 535.668 cv
cp
316.039 535.754 mo
316.035 535.379 316 535.02 315.934 534.68 cv
315.859 534.344 315.742 534.051 315.582 533.793 cv
315.418 533.543 315.199 533.34 314.922 533.187 cv
314.641 533.043 314.293 532.969 313.883 532.965 cv
313.496 532.969 313.168 533.035 312.895 533.168 cv
312.617 533.305 312.391 533.496 312.215 533.742 cv
312.035 533.988 311.902 534.281 311.82 534.617 cv
311.73 534.957 311.688 535.324 311.691 535.723 cv
311.688 536.109 311.723 536.473 311.797 536.809 cv
311.863 537.148 311.98 537.441 312.148 537.691 cv
312.313 537.945 312.535 538.148 312.813 538.293 cv
313.09 538.445 313.438 538.52 313.852 538.516 cv
314.227 538.52 314.555 538.449 314.836 538.312 cv
315.113 538.18 315.34 537.992 315.52 537.742 cv
315.695 537.5 315.824 537.207 315.91 536.871 cv
315.992 536.535 316.035 536.164 316.039 535.754 cv
cp
f
323.102 529.355 mo
323.098 529.457 323.094 529.535 323.086 529.594 cv
323.074 529.656 323.063 529.707 323.051 529.738 cv
323.035 529.777 323.02 529.801 323 529.812 cv
322.977 529.828 322.949 529.836 322.922 529.832 cv
322.883 529.836 322.836 529.824 322.785 529.797 cv
322.727 529.777 322.66 529.75 322.586 529.719 cv
322.504 529.691 322.414 529.664 322.309 529.641 cv
322.199 529.617 322.074 529.605 321.941 529.605 cv
321.746 529.605 321.582 529.637 321.449 529.699 cv
321.309 529.762 321.199 529.859 321.121 529.992 cv
321.035 530.125 320.977 530.297 320.941 530.508 cv
320.902 530.719 320.883 530.977 320.887 531.273 cv
320.887 532.039 li
322.453 532.039 li
322.492 532.043 322.527 532.051 322.559 532.066 cv
322.586 532.086 322.613 532.117 322.637 532.16 cv
322.66 532.207 322.676 532.266 322.691 532.328 cv
322.699 532.398 322.707 532.48 322.711 532.574 cv
322.707 532.766 322.684 532.898 322.641 532.98 cv
322.59 533.066 322.527 533.109 322.453 533.105 cv
320.887 533.105 li
320.887 539.254 li
320.883 539.301 320.875 539.336 320.855 539.359 cv
320.832 539.391 320.797 539.414 320.75 539.434 cv
320.699 539.453 320.633 539.465 320.551 539.48 cv
320.465 539.488 320.359 539.496 320.242 539.496 cv
320.113 539.496 320.012 539.488 319.93 539.48 cv
319.844 539.465 319.777 539.453 319.73 539.434 cv
319.68 539.414 319.645 539.391 319.625 539.359 cv
319.602 539.336 319.59 539.301 319.594 539.254 cv
319.594 533.105 li
318.605 533.105 li
318.52 533.109 318.457 533.066 318.418 532.98 cv
318.375 532.898 318.352 532.766 318.355 532.574 cv
318.352 532.48 318.359 532.398 318.371 532.328 cv
318.379 532.266 318.395 532.207 318.418 532.16 cv
318.438 532.117 318.461 532.086 318.496 532.066 cv
318.523 532.051 318.563 532.043 318.605 532.039 cv
319.594 532.039 li
319.594 531.312 li
319.59 530.828 319.637 530.41 319.73 530.055 cv
319.82 529.707 319.957 529.418 320.145 529.195 cv
320.328 528.973 320.563 528.809 320.852 528.699 cv
321.133 528.594 321.469 528.539 321.855 528.539 cv
322.031 528.539 322.207 528.559 322.383 528.59 cv
322.551 528.629 322.684 528.664 322.781 528.699 cv
322.871 528.742 322.934 528.777 322.969 528.805 cv
322.996 528.84 323.023 528.879 323.047 528.926 cv
323.066 528.977 323.078 529.039 323.09 529.105 cv
323.094 529.18 323.098 529.262 323.102 529.355 cv
cp
f
333.297 536.621 mo
333.293 537.094 333.207 537.516 333.035 537.883 cv
332.859 538.258 332.617 538.57 332.309 538.824 cv
332 539.082 331.637 539.273 331.219 539.402 cv
330.797 539.531 330.348 539.594 329.867 539.598 cv
329.527 539.594 329.211 539.566 328.926 539.512 cv
328.637 539.453 328.383 539.387 328.156 539.301 cv
327.93 539.223 327.738 539.137 327.586 539.043 cv
327.43 538.957 327.324 538.879 327.266 538.816 cv
327.207 538.754 327.164 538.676 327.137 538.582 cv
327.105 538.488 327.09 538.359 327.094 538.195 cv
327.09 538.082 327.094 537.988 327.109 537.91 cv
327.117 537.836 327.133 537.773 327.156 537.727 cv
327.172 537.68 327.199 537.648 327.234 537.629 cv
327.262 537.613 327.297 537.605 327.34 537.602 cv
327.41 537.605 327.512 537.648 327.648 537.734 cv
327.777 537.824 327.949 537.922 328.16 538.023 cv
328.367 538.133 328.617 538.23 328.91 538.316 cv
329.203 538.41 329.543 538.453 329.93 538.453 cv
330.219 538.453 330.484 538.414 330.727 538.336 cv
330.965 538.258 331.172 538.148 331.352 538.004 cv
331.523 537.863 331.66 537.687 331.754 537.477 cv
331.848 537.27 331.895 537.035 331.895 536.77 cv
331.895 536.488 331.828 536.242 331.699 536.035 cv
331.566 535.836 331.395 535.66 331.184 535.504 cv
330.969 535.355 330.727 535.215 330.453 535.082 cv
330.18 534.957 329.898 534.824 329.617 534.691 cv
329.328 534.559 329.051 534.414 328.781 534.25 cv
328.512 534.094 328.27 533.902 328.059 533.684 cv
327.84 533.465 327.668 533.211 327.539 532.914 cv
327.402 532.625 327.336 532.273 327.34 531.859 cv
327.336 531.441 327.414 531.066 327.57 530.734 cv
327.723 530.406 327.934 530.129 328.211 529.902 cv
328.48 529.684 328.805 529.512 329.184 529.395 cv
329.559 529.277 329.969 529.219 330.406 529.219 cv
330.625 529.219 330.848 529.238 331.078 529.277 cv
331.301 529.316 331.512 529.367 331.715 529.43 cv
331.91 529.496 332.09 529.57 332.25 529.648 cv
332.402 529.73 332.504 529.797 332.559 529.844 cv
332.605 529.898 332.641 529.937 332.656 529.961 cv
332.672 529.992 332.684 530.027 332.695 530.07 cv
332.703 530.117 332.711 530.172 332.719 530.23 cv
332.723 530.297 332.727 530.375 332.727 530.473 cv
332.727 530.566 332.723 530.652 332.715 530.723 cv
332.707 530.801 332.695 530.859 332.68 530.906 cv
332.664 530.953 332.641 530.988 332.613 531.012 cv
332.582 531.035 332.551 531.047 332.516 531.047 cv
332.457 531.047 332.367 531.012 332.246 530.941 cv
332.121 530.871 331.969 530.789 331.797 530.695 cv
331.617 530.605 331.41 530.523 331.172 530.445 cv
330.926 530.371 330.656 530.332 330.359 530.332 cv
330.078 530.332 329.832 530.371 329.625 530.445 cv
329.414 530.523 329.242 530.625 329.109 530.746 cv
328.973 530.871 328.871 531.016 328.805 531.187 cv
328.738 531.359 328.707 531.543 328.707 531.734 cv
328.707 532.02 328.77 532.262 328.898 532.461 cv
329.027 532.664 329.199 532.844 329.418 532.996 cv
329.629 533.156 329.875 533.297 330.152 533.426 cv
330.426 533.559 330.707 533.691 330.996 533.82 cv
331.281 533.953 331.563 534.098 331.836 534.254 cv
332.109 534.414 332.355 534.602 332.574 534.816 cv
332.789 535.035 332.961 535.289 333.098 535.582 cv
333.227 535.875 333.293 536.223 333.297 536.621 cv
cp
f
341.066 539.254 mo
341.063 539.301 341.055 539.336 341.039 539.359 cv
341.02 539.391 340.984 539.414 340.941 539.434 cv
340.895 539.453 340.836 539.465 340.762 539.48 cv
340.684 539.488 340.59 539.496 340.484 539.496 cv
340.359 539.496 340.262 539.488 340.191 539.48 cv
340.113 539.465 340.055 539.453 340.012 539.434 cv
339.965 539.414 339.934 539.391 339.922 539.359 cv
339.902 539.336 339.895 539.301 339.898 539.254 cv
339.898 538.328 li
339.496 538.773 339.102 539.094 338.715 539.293 cv
338.32 539.496 337.926 539.594 337.531 539.598 cv
337.059 539.594 336.664 539.52 336.348 539.363 cv
336.027 539.211 335.77 539 335.574 538.73 cv
335.371 538.465 335.23 538.152 335.148 537.793 cv
335.059 537.437 335.016 537.004 335.02 536.496 cv
335.02 532.242 li
335.016 532.203 335.023 532.168 335.047 532.137 cv
335.063 532.109 335.098 532.086 335.152 532.059 cv
335.199 532.039 335.27 532.023 335.355 532.012 cv
335.438 532.008 335.539 532.004 335.668 532 cv
335.789 532.004 335.895 532.008 335.98 532.012 cv
336.063 532.023 336.129 532.039 336.176 532.059 cv
336.223 532.086 336.258 532.109 336.281 532.137 cv
336.301 532.168 336.309 532.203 336.313 532.242 cv
336.313 536.324 li
336.309 536.738 336.34 537.066 336.402 537.312 cv
336.461 537.559 336.551 537.77 336.676 537.941 cv
336.793 538.121 336.949 538.254 337.141 538.348 cv
337.324 538.445 337.543 538.496 337.793 538.492 cv
338.113 538.496 338.434 538.379 338.758 538.148 cv
339.074 537.922 339.414 537.586 339.773 537.141 cv
339.773 532.242 li
339.773 532.203 339.781 532.168 339.801 532.137 cv
339.816 532.109 339.852 532.086 339.906 532.059 cv
339.957 532.039 340.023 532.023 340.105 532.012 cv
340.184 532.008 340.289 532.004 340.422 532 cv
340.543 532.004 340.648 532.008 340.734 532.012 cv
340.816 532.023 340.879 532.039 340.926 532.059 cv
340.969 532.086 341.004 532.109 341.031 532.137 cv
341.051 532.168 341.063 532.203 341.066 532.242 cv
cp
f
349.922 535.652 mo
349.918 536.262 349.852 536.812 349.723 537.297 cv
349.586 537.785 349.391 538.199 349.137 538.539 cv
348.879 538.883 348.563 539.145 348.191 539.324 cv
347.816 539.508 347.391 539.594 346.906 539.598 cv
346.68 539.594 346.473 539.574 346.285 539.531 cv
346.098 539.484 345.91 539.414 345.73 539.316 cv
345.543 539.219 345.363 539.094 345.184 538.941 cv
345 538.793 344.809 538.613 344.609 538.398 cv
344.609 539.254 li
344.609 539.301 344.598 539.336 344.578 539.363 cv
344.555 539.398 344.52 539.422 344.477 539.437 cv
344.426 539.453 344.367 539.465 344.301 539.48 cv
344.227 539.488 344.137 539.496 344.031 539.496 cv
343.922 539.496 343.836 539.488 343.766 539.48 cv
343.691 539.465 343.629 539.453 343.586 539.437 cv
343.535 539.422 343.504 539.398 343.492 539.363 cv
343.473 539.336 343.465 539.301 343.469 539.254 cv
343.469 528.844 li
343.465 528.805 343.477 528.77 343.496 528.734 cv
343.512 528.707 343.543 528.68 343.598 528.656 cv
343.645 528.637 343.711 528.621 343.797 528.609 cv
343.875 528.602 343.98 528.598 344.109 528.594 cv
344.238 528.598 344.344 528.602 344.43 528.609 cv
344.508 528.621 344.574 528.637 344.621 528.656 cv
344.668 528.68 344.699 528.707 344.723 528.734 cv
344.738 528.77 344.75 528.805 344.754 528.844 cv
344.754 533.043 li
344.961 532.832 345.164 532.652 345.359 532.508 cv
345.555 532.363 345.742 532.246 345.93 532.152 cv
346.113 532.066 346.301 532 346.492 531.953 cv
346.676 531.914 346.875 531.891 347.086 531.891 cv
347.59 531.891 348.023 531.992 348.391 532.195 cv
348.75 532.398 349.043 532.672 349.27 533.008 cv
349.492 533.352 349.66 533.75 349.766 534.207 cv
349.867 534.664 349.918 535.145 349.922 535.652 cv
cp
348.59 535.801 mo
348.586 535.445 348.559 535.098 348.508 534.758 cv
348.449 534.422 348.355 534.125 348.219 533.863 cv
348.082 533.605 347.902 533.395 347.68 533.234 cv
347.453 533.078 347.172 533 346.84 532.996 cv
346.672 533 346.508 533.023 346.348 533.066 cv
346.184 533.117 346.02 533.195 345.852 533.301 cv
345.684 533.414 345.508 533.555 345.332 533.723 cv
345.148 533.898 344.957 534.113 344.754 534.367 cv
344.754 537.164 li
345.109 537.598 345.449 537.93 345.773 538.152 cv
346.098 538.383 346.434 538.496 346.785 538.492 cv
347.105 538.496 347.383 538.418 347.617 538.258 cv
347.844 538.105 348.031 537.898 348.176 537.637 cv
348.32 537.383 348.426 537.094 348.492 536.773 cv
348.555 536.457 348.586 536.133 348.59 535.801 cv
cp
f
355.086 535.516 mo
355.086 535.719 355.063 535.855 355.016 535.934 cv
354.969 536.012 354.898 536.051 354.813 536.051 cv
351.555 536.051 li
351.461 536.051 351.395 536.012 351.348 535.93 cv
351.301 535.852 351.277 535.715 351.277 535.516 cv
351.277 535.32 351.301 535.18 351.348 535.102 cv
351.395 535.023 351.461 534.984 351.555 534.984 cv
354.813 534.984 li
354.852 534.984 354.891 534.992 354.926 535.008 cv
354.957 535.023 354.984 535.055 355.012 535.098 cv
355.031 535.145 355.051 535.199 355.066 535.266 cv
355.078 535.336 355.086 535.422 355.086 535.516 cv
cp
f
358.34 539.246 mo
358.336 539.289 358.328 539.324 358.309 539.355 cv
358.285 539.387 358.246 539.414 358.199 539.43 cv
358.145 539.449 358.078 539.461 357.992 539.477 cv
357.906 539.488 357.797 539.496 357.672 539.496 cv
357.543 539.496 357.438 539.488 357.352 539.477 cv
357.262 539.461 357.191 539.449 357.141 539.43 cv
357.086 539.414 357.051 539.387 357.031 539.355 cv
357.008 539.324 356.996 539.289 357 539.246 cv
357 529.566 li
356.996 529.527 357.008 529.492 357.035 529.457 cv
357.055 529.43 357.094 529.402 357.152 529.383 cv
357.203 529.367 357.273 529.352 357.363 529.336 cv
357.445 529.324 357.547 529.32 357.672 529.316 cv
357.797 529.32 357.906 529.324 357.992 529.336 cv
358.078 529.352 358.145 529.367 358.199 529.383 cv
358.246 529.402 358.285 529.43 358.309 529.457 cv
358.328 529.492 358.336 529.527 358.34 529.566 cv
cp
f
371.328 539.254 mo
371.324 539.301 371.316 539.336 371.297 539.359 cv
371.273 539.391 371.238 539.414 371.195 539.434 cv
371.145 539.453 371.078 539.465 371 539.48 cv
370.914 539.488 370.813 539.496 370.688 539.496 cv
370.555 539.496 370.445 539.488 370.367 539.48 cv
370.281 539.465 370.215 539.453 370.168 539.434 cv
370.113 539.414 370.078 539.391 370.063 539.359 cv
370.039 539.336 370.031 539.301 370.031 539.254 cv
370.031 534.992 li
370.031 534.699 370.004 534.43 369.953 534.184 cv
369.898 533.941 369.816 533.73 369.703 533.551 cv
369.59 533.375 369.445 533.238 369.27 533.145 cv
369.09 533.051 368.879 533.004 368.645 533.004 cv
368.348 533.004 368.051 533.121 367.754 533.348 cv
367.449 533.582 367.121 533.914 366.766 534.352 cv
366.766 539.254 li
366.762 539.301 366.75 539.336 366.734 539.359 cv
366.711 539.391 366.68 539.414 366.633 539.434 cv
366.582 539.453 366.516 539.465 366.434 539.48 cv
366.348 539.488 366.242 539.496 366.121 539.496 cv
366 539.496 365.898 539.488 365.813 539.48 cv
365.727 539.465 365.656 539.453 365.609 539.434 cv
365.555 539.414 365.523 539.391 365.508 539.359 cv
365.488 539.336 365.477 539.301 365.48 539.254 cv
365.48 534.992 li
365.477 534.699 365.449 534.43 365.395 534.184 cv
365.336 533.941 365.25 533.73 365.137 533.551 cv
365.023 533.375 364.879 533.238 364.707 533.145 cv
364.527 533.051 364.32 533.004 364.086 533.004 cv
363.785 533.004 363.488 533.121 363.188 533.348 cv
362.887 533.582 362.559 533.914 362.207 534.352 cv
362.207 539.254 li
362.203 539.301 362.191 539.336 362.176 539.359 cv
362.152 539.391 362.121 539.414 362.074 539.434 cv
362.027 539.453 361.961 539.465 361.883 539.48 cv
361.797 539.488 361.691 539.496 361.563 539.496 cv
361.434 539.496 361.328 539.488 361.25 539.48 cv
361.164 539.465 361.098 539.453 361.051 539.434 cv
360.996 539.414 360.965 539.391 360.949 539.359 cv
360.93 539.336 360.918 539.301 360.922 539.254 cv
360.922 532.242 li
360.918 532.203 360.926 532.168 360.945 532.137 cv
360.957 532.109 360.988 532.086 361.039 532.059 cv
361.082 532.039 361.145 532.023 361.219 532.012 cv
361.289 532.008 361.383 532.004 361.508 532 cv
361.617 532.004 361.715 532.008 361.793 532.012 cv
361.867 532.023 361.926 532.039 361.969 532.059 cv
362.008 532.086 362.035 532.109 362.055 532.137 cv
362.07 532.168 362.078 532.203 362.082 532.242 cv
362.082 533.168 li
362.473 532.727 362.855 532.406 363.23 532.199 cv
363.598 531.996 363.977 531.891 364.359 531.891 cv
364.648 531.891 364.906 531.926 365.141 531.992 cv
365.367 532.062 365.574 532.156 365.754 532.277 cv
365.93 532.398 366.078 532.543 366.207 532.711 cv
366.328 532.883 366.434 533.074 366.52 533.277 cv
366.75 533.027 366.973 532.812 367.184 532.633 cv
367.395 532.461 367.598 532.316 367.793 532.203 cv
367.988 532.098 368.176 532.02 368.359 531.965 cv
368.543 531.918 368.73 531.891 368.918 531.891 cv
369.371 531.891 369.75 531.973 370.055 532.129 cv
370.359 532.293 370.605 532.504 370.801 532.766 cv
370.988 533.031 371.125 533.34 371.207 533.695 cv
371.285 534.051 371.324 534.426 371.328 534.82 cv
cp
f
378.957 539.262 mo
378.953 539.324 378.934 539.371 378.895 539.402 cv
378.852 539.434 378.793 539.457 378.723 539.473 cv
378.645 539.488 378.539 539.496 378.402 539.496 cv
378.266 539.496 378.156 539.488 378.078 539.473 cv
377.992 539.457 377.934 539.434 377.902 539.402 cv
377.863 539.371 377.848 539.324 377.852 539.262 cv
377.852 538.562 li
377.543 538.891 377.199 539.145 376.824 539.324 cv
376.445 539.508 376.047 539.594 375.629 539.598 cv
375.254 539.594 374.922 539.547 374.625 539.453 cv
374.328 539.355 374.074 539.219 373.863 539.035 cv
373.652 538.855 373.488 538.633 373.371 538.367 cv
373.254 538.105 373.195 537.805 373.199 537.461 cv
373.195 537.07 373.273 536.727 373.438 536.434 cv
373.594 536.145 373.828 535.902 374.133 535.711 cv
374.434 535.52 374.801 535.375 375.238 535.277 cv
375.672 535.184 376.164 535.137 376.711 535.133 cv
377.68 535.133 li
377.68 534.586 li
377.676 534.316 377.648 534.078 377.594 533.871 cv
377.535 533.664 377.441 533.492 377.316 533.352 cv
377.184 533.215 377.02 533.109 376.82 533.039 cv
376.613 532.969 376.363 532.934 376.074 532.934 cv
375.754 532.934 375.469 532.973 375.219 533.047 cv
374.961 533.125 374.742 533.207 374.555 533.297 cv
374.367 533.391 374.207 533.477 374.082 533.547 cv
373.949 533.625 373.855 533.66 373.797 533.66 cv
373.754 533.66 373.719 533.652 373.688 533.629 cv
373.656 533.613 373.629 533.582 373.605 533.535 cv
373.582 533.496 373.563 533.441 373.555 533.375 cv
373.539 533.312 373.535 533.242 373.539 533.16 cv
373.535 533.035 373.543 532.93 373.566 532.852 cv
373.582 532.777 373.629 532.707 373.699 532.637 cv
373.77 532.57 373.891 532.492 374.063 532.402 cv
374.234 532.312 374.43 532.23 374.652 532.152 cv
374.875 532.082 375.121 532.02 375.387 531.965 cv
375.652 531.918 375.918 531.891 376.191 531.891 cv
376.691 531.891 377.121 531.949 377.473 532.062 cv
377.824 532.18 378.109 532.348 378.332 532.566 cv
378.547 532.789 378.707 533.062 378.809 533.387 cv
378.906 533.719 378.953 534.102 378.957 534.531 cv
cp
377.68 536.059 mo
376.578 536.059 li
376.223 536.062 375.918 536.094 375.66 536.148 cv
375.398 536.211 375.184 536.297 375.012 536.414 cv
374.84 536.531 374.715 536.672 374.637 536.836 cv
374.555 537 374.512 537.187 374.516 537.398 cv
374.512 537.766 374.629 538.059 374.859 538.27 cv
375.09 538.488 375.414 538.594 375.832 538.594 cv
376.168 538.594 376.48 538.508 376.77 538.336 cv
377.059 538.164 377.359 537.902 377.68 537.547 cv
cp
f
387.176 532.559 mo
387.172 532.742 387.148 532.875 387.102 532.953 cv
387.051 533.035 386.988 533.074 386.914 533.074 cv
385.906 533.074 li
386.086 533.262 386.215 533.469 386.289 533.695 cv
386.359 533.922 386.395 534.156 386.398 534.398 cv
386.395 534.805 386.328 535.164 386.203 535.477 cv
386.07 535.789 385.887 536.055 385.645 536.266 cv
385.402 536.484 385.113 536.648 384.785 536.762 cv
384.449 536.879 384.082 536.937 383.68 536.934 cv
383.391 536.937 383.117 536.898 382.863 536.82 cv
382.602 536.746 382.406 536.652 382.27 536.535 cv
382.176 536.633 382.098 536.738 382.039 536.855 cv
381.977 536.977 381.945 537.113 381.949 537.266 cv
381.945 537.449 382.031 537.602 382.203 537.719 cv
382.371 537.844 382.594 537.906 382.875 537.914 cv
384.707 537.992 li
385.055 538.004 385.371 538.051 385.664 538.137 cv
385.953 538.223 386.207 538.348 386.422 538.504 cv
386.633 538.664 386.801 538.855 386.922 539.086 cv
387.039 539.32 387.098 539.59 387.102 539.895 cv
387.098 540.215 387.031 540.52 386.898 540.812 cv
386.762 541.102 386.555 541.355 386.277 541.578 cv
385.996 541.797 385.641 541.973 385.211 542.102 cv
384.781 542.227 384.273 542.289 383.688 542.293 cv
383.117 542.289 382.633 542.242 382.238 542.148 cv
381.84 542.051 381.516 541.918 381.262 541.754 cv
381.008 541.586 380.824 541.391 380.711 541.16 cv
380.594 540.926 380.535 540.672 380.539 540.406 cv
380.535 540.234 380.555 540.07 380.602 539.91 cv
380.641 539.746 380.703 539.594 380.789 539.449 cv
380.871 539.305 380.98 539.168 381.109 539.031 cv
381.234 538.902 381.379 538.77 381.551 538.641 cv
381.293 538.512 381.105 538.348 380.984 538.148 cv
380.863 537.953 380.805 537.742 380.805 537.508 cv
380.805 537.195 380.867 536.91 380.996 536.66 cv
381.125 536.41 381.285 536.187 381.48 535.988 cv
381.316 535.797 381.191 535.582 381.098 535.34 cv
381.004 535.102 380.957 534.809 380.957 534.461 cv
380.957 534.066 381.023 533.707 381.16 533.387 cv
381.293 533.07 381.48 532.805 381.723 532.586 cv
381.961 532.371 382.246 532.203 382.582 532.082 cv
382.914 531.969 383.281 531.91 383.68 531.906 cv
383.891 531.91 384.09 531.922 384.273 531.941 cv
384.457 531.969 384.629 532 384.793 532.039 cv
386.914 532.039 li
387 532.043 387.066 532.086 387.109 532.168 cv
387.152 532.258 387.172 532.387 387.176 532.559 cv
cp
385.168 534.406 mo
385.164 533.934 385.031 533.562 384.773 533.289 cv
384.508 533.023 384.137 532.887 383.656 532.887 cv
383.402 532.887 383.184 532.93 383.004 533.012 cv
382.816 533.098 382.664 533.211 382.543 533.355 cv
382.422 533.504 382.332 533.672 382.273 533.859 cv
382.211 534.047 382.18 534.246 382.184 534.453 cv
382.18 534.918 382.313 535.281 382.574 535.547 cv
382.836 535.812 383.203 535.945 383.68 535.941 cv
383.93 535.945 384.148 535.906 384.34 535.82 cv
384.523 535.742 384.68 535.629 384.805 535.488 cv
384.926 535.348 385.016 535.184 385.078 534.992 cv
385.133 534.809 385.164 534.613 385.168 534.406 cv
cp
385.813 539.965 mo
385.809 539.66 385.684 539.43 385.441 539.266 cv
385.191 539.105 384.859 539.016 384.441 539.004 cv
382.625 538.941 li
382.457 539.074 382.32 539.199 382.219 539.312 cv
382.109 539.43 382.027 539.539 381.965 539.648 cv
381.902 539.754 381.859 539.859 381.836 539.965 cv
381.813 540.066 381.801 540.172 381.801 540.281 cv
381.801 540.617 381.969 540.871 382.313 541.051 cv
382.652 541.223 383.133 541.312 383.75 541.312 cv
384.137 541.312 384.461 541.273 384.727 541.199 cv
384.984 541.121 385.195 541.02 385.359 540.898 cv
385.516 540.77 385.633 540.629 385.707 540.469 cv
385.773 540.309 385.809 540.141 385.813 539.965 cv
cp
f
394.738 535.445 mo
394.734 535.648 394.684 535.789 394.586 535.875 cv
394.48 535.961 394.363 536.004 394.238 536.004 cv
389.621 536.004 li
389.617 536.395 389.656 536.746 389.738 537.059 cv
389.813 537.371 389.945 537.641 390.129 537.859 cv
390.309 538.086 390.543 538.258 390.84 538.375 cv
391.129 538.5 391.488 538.559 391.914 538.555 cv
392.246 538.559 392.543 538.531 392.805 538.473 cv
393.066 538.422 393.293 538.359 393.484 538.289 cv
393.672 538.223 393.828 538.164 393.953 538.105 cv
394.074 538.055 394.168 538.027 394.23 538.023 cv
394.266 538.027 394.297 538.035 394.328 538.051 cv
394.355 538.07 394.379 538.098 394.398 538.133 cv
394.41 538.172 394.422 538.223 394.434 538.285 cv
394.438 538.352 394.441 538.43 394.445 538.523 cv
394.441 538.594 394.438 538.652 394.438 538.699 cv
394.43 538.746 394.426 538.789 394.418 538.828 cv
394.41 538.867 394.395 538.902 394.379 538.934 cv
394.355 538.965 394.332 538.996 394.309 539.023 cv
394.277 539.055 394.195 539.102 394.055 539.164 cv
393.914 539.23 393.73 539.293 393.508 539.355 cv
393.281 539.418 393.023 539.473 392.73 539.523 cv
392.438 539.57 392.125 539.594 391.793 539.598 cv
391.215 539.594 390.707 539.516 390.277 539.355 cv
389.84 539.195 389.477 538.957 389.184 538.641 cv
388.883 538.324 388.66 537.93 388.512 537.449 cv
388.363 536.973 388.289 536.414 388.289 535.777 cv
388.289 535.18 388.363 534.641 388.52 534.156 cv
388.672 533.68 388.898 533.27 389.195 532.934 cv
389.488 532.598 389.844 532.34 390.258 532.16 cv
390.672 531.98 391.137 531.891 391.652 531.891 cv
392.203 531.891 392.672 531.98 393.059 532.156 cv
393.445 532.336 393.762 532.574 394.016 532.871 cv
394.262 533.172 394.445 533.523 394.563 533.922 cv
394.676 534.328 394.734 534.758 394.738 535.211 cv
cp
393.445 535.062 mo
393.461 534.387 393.309 533.855 392.992 533.473 cv
392.676 533.09 392.207 532.898 391.59 532.895 cv
391.266 532.898 390.984 532.957 390.746 533.074 cv
390.504 533.195 390.305 533.355 390.145 533.551 cv
389.98 533.75 389.855 533.98 389.77 534.242 cv
389.68 534.504 389.629 534.777 389.621 535.062 cv
cp
f
401.105 537.344 mo
401.102 537.707 401.035 538.027 400.906 538.305 cv
400.773 538.586 400.586 538.82 400.344 539.012 cv
400.098 539.207 399.805 539.352 399.469 539.449 cv
399.129 539.547 398.758 539.594 398.355 539.598 cv
398.102 539.594 397.863 539.574 397.641 539.539 cv
397.414 539.496 397.215 539.449 397.035 539.391 cv
396.855 539.332 396.703 539.27 396.578 539.203 cv
396.453 539.141 396.359 539.082 396.305 539.027 cv
396.246 538.977 396.207 538.906 396.184 538.809 cv
396.156 538.719 396.145 538.59 396.145 538.43 cv
396.145 538.332 396.148 538.25 396.16 538.18 cv
396.168 538.113 396.18 538.059 396.199 538.016 cv
396.211 537.977 396.234 537.945 396.262 537.926 cv
396.289 537.91 396.32 537.902 396.359 537.898 cv
396.414 537.902 396.5 537.937 396.613 538.004 cv
396.723 538.078 396.859 538.156 397.027 538.234 cv
397.188 538.32 397.379 538.395 397.605 538.465 cv
397.824 538.535 398.082 538.57 398.379 538.57 cv
398.594 538.57 398.793 538.547 398.973 538.5 cv
399.148 538.453 399.301 538.387 399.43 538.293 cv
399.559 538.207 399.66 538.09 399.73 537.945 cv
399.801 537.809 399.836 537.641 399.836 537.445 cv
399.836 537.25 399.785 537.086 399.684 536.949 cv
399.582 536.816 399.445 536.695 399.281 536.59 cv
399.113 536.488 398.93 536.398 398.723 536.312 cv
398.512 536.234 398.297 536.148 398.078 536.059 cv
397.859 535.973 397.645 535.871 397.434 535.758 cv
397.223 535.648 397.031 535.516 396.867 535.352 cv
396.695 535.195 396.563 535 396.465 534.773 cv
396.359 534.551 396.309 534.285 396.313 533.973 cv
396.309 533.699 396.363 533.434 396.473 533.18 cv
396.578 532.93 396.738 532.711 396.953 532.52 cv
397.164 532.332 397.43 532.18 397.75 532.062 cv
398.07 531.949 398.441 531.891 398.871 531.891 cv
399.055 531.891 399.242 531.906 399.43 531.937 cv
399.613 531.969 399.781 532.008 399.938 532.055 cv
400.086 532.102 400.215 532.152 400.324 532.207 cv
400.426 532.262 400.508 532.312 400.566 532.352 cv
400.617 532.398 400.652 532.434 400.676 532.461 cv
400.691 532.492 400.707 532.527 400.715 532.562 cv
400.723 532.605 400.73 532.652 400.738 532.707 cv
400.746 532.766 400.75 532.836 400.75 532.918 cv
400.75 533.008 400.746 533.086 400.738 533.148 cv
400.73 533.219 400.715 533.27 400.699 533.309 cv
400.676 533.352 400.656 533.383 400.633 533.398 cv
400.605 533.418 400.574 533.426 400.547 533.426 cv
400.496 533.426 400.43 533.398 400.344 533.34 cv
400.254 533.285 400.141 533.223 400 533.156 cv
399.859 533.094 399.691 533.035 399.504 532.973 cv
399.313 532.918 399.098 532.887 398.855 532.887 cv
398.633 532.887 398.441 532.914 398.277 532.961 cv
398.109 533.016 397.973 533.086 397.867 533.172 cv
397.762 533.266 397.68 533.371 397.629 533.496 cv
397.57 533.621 397.543 533.758 397.547 533.902 cv
397.543 534.105 397.594 534.273 397.699 534.41 cv
397.801 534.551 397.938 534.672 398.105 534.773 cv
398.27 534.879 398.461 534.973 398.676 535.055 cv
398.887 535.141 399.102 535.227 399.324 535.312 cv
399.543 535.402 399.762 535.504 399.98 535.609 cv
400.195 535.719 400.387 535.848 400.555 536.004 cv
400.719 536.16 400.852 536.348 400.953 536.566 cv
401.051 536.785 401.102 537.047 401.105 537.344 cv
cp
f
170.672 11.633 mo
170.672 12.473 170.566 13.223 170.359 13.883 cv
170.152 14.543 169.844 15.105 169.434 15.562 cv
169.02 16.027 168.512 16.379 167.906 16.617 cv
167.297 16.859 166.594 16.977 165.805 16.98 cv
165.016 16.977 164.332 16.875 163.746 16.672 cv
163.16 16.469 162.672 16.156 162.281 15.73 cv
161.891 15.312 161.598 14.777 161.406 14.125 cv
161.207 13.477 161.109 12.707 161.113 11.812 cv
161.109 11 161.215 10.266 161.426 9.60901 cv
161.633 8.961 161.941 8.40198 162.352 7.94098 cv
162.762 7.48401 163.27 7.13702 163.879 6.89099 cv
164.484 6.64801 165.188 6.52301 165.992 6.52301 cv
166.75 6.52301 167.426 6.625 168.016 6.828 cv
168.598 7.03101 169.086 7.34399 169.484 7.76202 cv
169.875 8.18701 170.172 8.71899 170.371 9.35901 cv
170.57 10.004 170.672 10.762 170.672 11.633 cv
cp
168.52 11.742 mo
168.516 11.219 168.473 10.734 168.395 10.297 cv
168.309 9.86298 168.168 9.492 167.969 9.17999 cv
167.766 8.87097 167.5 8.633 167.168 8.461 cv
166.832 8.297 166.414 8.211 165.922 8.20697 cv
165.414 8.211 164.992 8.30499 164.656 8.492 cv
164.313 8.68402 164.039 8.93701 163.836 9.25403 cv
163.625 9.57397 163.48 9.94501 163.395 10.367 cv
163.309 10.789 163.266 11.238 163.266 11.711 cv
163.266 12.266 163.305 12.762 163.391 13.199 cv
163.469 13.641 163.609 14.016 163.813 14.328 cv
164.008 14.641 164.273 14.879 164.609 15.043 cv
164.938 15.207 165.359 15.289 165.867 15.285 cv
166.367 15.289 166.785 15.195 167.129 15.008 cv
167.465 14.82 167.738 14.566 167.949 14.242 cv
168.152 13.922 168.301 13.547 168.391 13.113 cv
168.473 12.687 168.516 12.23 168.52 11.742 cv
cp
f
178.688 9.56598 mo
178.684 9.59399 178.684 9.625 178.684 9.65997 cv
178.68 9.69897 178.676 9.73798 178.668 9.78101 cv
178.66 9.828 178.648 9.87903 178.637 9.93402 cv
178.621 9.992 178.605 10.059 178.586 10.129 cv
176.496 16.426 li
176.465 16.516 176.43 16.59 176.391 16.641 cv
176.344 16.699 176.273 16.742 176.172 16.77 cv
176.07 16.801 175.93 16.816 175.758 16.832 cv
175.578 16.84 175.352 16.848 175.074 16.848 cv
174.797 16.848 174.57 16.84 174.398 16.828 cv
174.219 16.812 174.082 16.793 173.988 16.762 cv
173.887 16.734 173.816 16.691 173.773 16.633 cv
173.727 16.582 173.691 16.512 173.668 16.426 cv
171.578 10.129 li
171.547 10.027 171.52 9.93402 171.504 9.84802 cv
171.48 9.76599 171.473 9.70697 171.473 9.66803 cv
171.469 9.63702 171.465 9.60199 171.469 9.56598 cv
171.465 9.51599 171.48 9.46899 171.512 9.42999 cv
171.539 9.39099 171.59 9.35901 171.664 9.33197 cv
171.734 9.30902 171.836 9.289 171.965 9.27698 cv
172.09 9.27002 172.25 9.26599 172.445 9.26202 cv
172.656 9.26599 172.828 9.27301 172.961 9.28101 cv
173.09 9.297 173.191 9.31201 173.266 9.336 cv
173.34 9.35901 173.391 9.39502 173.426 9.43701 cv
173.453 9.48401 173.48 9.539 173.504 9.59802 cv
175.09 14.711 li
175.137 14.902 li
175.184 14.711 li
176.746 9.59802 li
176.762 9.539 176.785 9.48401 176.82 9.43701 cv
176.852 9.39502 176.906 9.35901 176.98 9.336 cv
177.051 9.31201 177.145 9.297 177.27 9.28101 cv
177.387 9.27301 177.547 9.26599 177.75 9.26202 cv
177.938 9.26599 178.098 9.27002 178.223 9.27698 cv
178.344 9.289 178.438 9.30902 178.508 9.33197 cv
178.574 9.35901 178.621 9.39099 178.648 9.42999 cv
178.672 9.46899 178.684 9.51599 178.688 9.56598 cv
cp
f
186.141 12.852 mo
186.137 13.094 186.086 13.273 185.98 13.383 cv
185.871 13.5 185.723 13.555 185.539 13.555 cv
181.301 13.555 li
181.297 13.852 181.332 14.121 181.406 14.363 cv
181.473 14.605 181.586 14.812 181.742 14.98 cv
181.895 15.148 182.094 15.277 182.336 15.363 cv
182.578 15.457 182.867 15.5 183.207 15.496 cv
183.547 15.5 183.848 15.477 184.113 15.422 cv
184.371 15.375 184.598 15.32 184.785 15.258 cv
184.973 15.203 185.129 15.148 185.258 15.094 cv
185.379 15.047 185.48 15.02 185.563 15.02 cv
185.605 15.02 185.645 15.031 185.68 15.047 cv
185.707 15.07 185.734 15.102 185.758 15.145 cv
185.777 15.195 185.789 15.262 185.801 15.344 cv
185.805 15.434 185.809 15.543 185.813 15.668 cv
185.809 15.785 185.809 15.883 185.805 15.961 cv
185.797 16.047 185.789 16.113 185.781 16.168 cv
185.77 16.227 185.754 16.277 185.734 16.312 cv
185.711 16.355 185.684 16.391 185.652 16.426 cv
185.617 16.465 185.523 16.516 185.375 16.574 cv
185.223 16.641 185.031 16.703 184.797 16.758 cv
184.563 16.82 184.293 16.867 183.996 16.914 cv
183.691 16.953 183.371 16.977 183.027 16.98 cv
182.406 16.977 181.863 16.902 181.398 16.746 cv
180.93 16.594 180.539 16.355 180.23 16.035 cv
179.918 15.719 179.688 15.32 179.535 14.836 cv
179.379 14.355 179.301 13.785 179.305 13.133 cv
179.301 12.516 179.383 11.961 179.547 11.461 cv
179.707 10.969 179.938 10.547 180.246 10.195 cv
180.551 9.85199 180.926 9.586 181.367 9.40198 cv
181.805 9.22302 182.301 9.133 182.855 9.12903 cv
183.438 9.133 183.934 9.21899 184.348 9.38702 cv
184.758 9.56201 185.098 9.80103 185.367 10.102 cv
185.629 10.41 185.824 10.77 185.953 11.184 cv
186.074 11.602 186.137 12.055 186.141 12.539 cv
cp
184.238 12.289 mo
184.25 11.738 184.141 11.309 183.906 10.992 cv
183.668 10.68 183.301 10.52 182.809 10.52 cv
182.555 10.52 182.336 10.566 182.156 10.66 cv
181.969 10.754 181.816 10.883 181.695 11.039 cv
181.57 11.199 181.477 11.383 181.414 11.598 cv
181.348 11.816 181.309 12.047 181.301 12.289 cv
cp
f
192.227 10.223 mo
192.223 10.414 192.219 10.566 192.211 10.684 cv
192.199 10.805 192.184 10.898 192.164 10.965 cv
192.141 11.031 192.113 11.078 192.082 11.102 cv
192.047 11.129 192.004 11.141 191.953 11.141 cv
191.91 11.141 191.863 11.133 191.813 11.113 cv
191.758 11.098 191.699 11.078 191.637 11.055 cv
191.57 11.035 191.5 11.016 191.422 10.996 cv
191.344 10.98 191.258 10.973 191.164 10.969 cv
191.055 10.973 190.945 10.992 190.836 11.035 cv
190.727 11.082 190.613 11.152 190.496 11.242 cv
190.379 11.34 190.254 11.465 190.129 11.617 cv
189.996 11.777 189.859 11.969 189.719 12.195 cv
189.719 16.535 li
189.715 16.59 189.699 16.633 189.672 16.672 cv
189.637 16.711 189.586 16.746 189.512 16.77 cv
189.434 16.797 189.332 16.812 189.211 16.828 cv
189.082 16.84 188.922 16.848 188.734 16.848 cv
188.539 16.848 188.383 16.84 188.262 16.828 cv
188.133 16.812 188.031 16.797 187.961 16.77 cv
187.883 16.746 187.832 16.711 187.801 16.672 cv
187.77 16.633 187.754 16.59 187.754 16.535 cv
187.754 9.57397 li
187.754 9.52698 187.766 9.47998 187.793 9.43701 cv
187.816 9.40198 187.863 9.37097 187.934 9.34003 cv
188 9.31598 188.086 9.297 188.195 9.28101 cv
188.297 9.27301 188.434 9.26599 188.598 9.26202 cv
188.762 9.26599 188.898 9.27301 189.008 9.28101 cv
189.117 9.297 189.199 9.31598 189.262 9.34003 cv
189.316 9.37097 189.359 9.40198 189.391 9.43701 cv
189.414 9.47998 189.43 9.52698 189.43 9.57397 cv
189.43 10.441 li
189.609 10.184 189.781 9.96899 189.945 9.797 cv
190.105 9.633 190.258 9.49597 190.406 9.39502 cv
190.551 9.297 190.695 9.22998 190.844 9.18701 cv
190.984 9.15198 191.133 9.133 191.281 9.12903 cv
191.348 9.133 191.418 9.13702 191.5 9.14099 cv
191.574 9.15198 191.656 9.164 191.742 9.17999 cv
191.824 9.19897 191.898 9.21899 191.961 9.242 cv
192.023 9.26599 192.066 9.29303 192.098 9.31598 cv
192.121 9.34802 192.145 9.375 192.16 9.40198 cv
192.172 9.43701 192.184 9.47998 192.195 9.53101 cv
192.203 9.59003 192.211 9.672 192.219 9.77698 cv
192.223 9.89099 192.223 10.039 192.227 10.223 cv
cp
f
198.957 16.559 mo
198.957 16.637 198.93 16.691 198.879 16.73 cv
198.824 16.773 198.742 16.801 198.633 16.82 cv
198.52 16.836 198.355 16.848 198.137 16.848 cv
197.902 16.848 197.73 16.836 197.629 16.82 cv
197.52 16.801 197.445 16.773 197.402 16.73 cv
197.355 16.691 197.332 16.637 197.336 16.559 cv
197.336 16.004 li
197.047 16.312 196.723 16.555 196.355 16.723 cv
195.988 16.895 195.578 16.977 195.133 16.98 cv
194.758 16.977 194.418 16.93 194.113 16.836 cv
193.801 16.742 193.535 16.602 193.313 16.406 cv
193.082 16.219 192.906 15.98 192.785 15.699 cv
192.656 15.418 192.594 15.094 192.598 14.719 cv
192.594 14.316 192.672 13.961 192.836 13.66 cv
192.992 13.363 193.23 13.117 193.543 12.918 cv
193.855 12.727 194.246 12.582 194.719 12.484 cv
195.184 12.395 195.727 12.348 196.352 12.344 cv
197.031 12.344 li
197.031 11.922 li
197.027 11.707 197.008 11.516 196.965 11.348 cv
196.918 11.187 196.844 11.051 196.746 10.941 cv
196.641 10.832 196.504 10.754 196.34 10.699 cv
196.168 10.652 195.961 10.625 195.711 10.621 cv
195.383 10.625 195.09 10.66 194.832 10.73 cv
194.574 10.805 194.344 10.887 194.148 10.973 cv
193.949 11.062 193.785 11.141 193.656 11.211 cv
193.52 11.285 193.414 11.324 193.332 11.32 cv
193.273 11.324 193.223 11.305 193.18 11.266 cv
193.133 11.23 193.094 11.18 193.07 11.109 cv
193.039 11.047 193.02 10.965 193.004 10.863 cv
192.988 10.77 192.98 10.66 192.98 10.535 cv
192.98 10.379 192.992 10.25 193.02 10.152 cv
193.043 10.062 193.094 9.97699 193.168 9.89801 cv
193.238 9.82397 193.363 9.742 193.551 9.64801 cv
193.73 9.55902 193.945 9.47302 194.188 9.39502 cv
194.43 9.31598 194.695 9.25403 194.988 9.203 cv
195.273 9.15601 195.57 9.133 195.883 9.12903 cv
196.426 9.133 196.895 9.18402 197.285 9.289 cv
197.672 9.39801 197.988 9.56201 198.238 9.78101 cv
198.484 10.004 198.668 10.289 198.785 10.637 cv
198.898 10.984 198.957 11.398 198.957 11.875 cv
cp
197.031 13.578 mo
196.281 13.578 li
195.961 13.578 195.691 13.602 195.469 13.648 cv
195.242 13.695 195.059 13.766 194.922 13.859 cv
194.777 13.953 194.676 14.066 194.613 14.199 cv
194.547 14.332 194.516 14.484 194.516 14.656 cv
194.516 14.945 194.605 15.176 194.793 15.34 cv
194.973 15.512 195.23 15.594 195.563 15.59 cv
195.836 15.594 196.09 15.523 196.324 15.379 cv
196.555 15.242 196.789 15.039 197.031 14.766 cv
cp
f
202.887 16.535 mo
202.883 16.59 202.867 16.633 202.84 16.672 cv
202.805 16.711 202.754 16.746 202.68 16.77 cv
202.602 16.797 202.5 16.812 202.379 16.828 cv
202.25 16.84 202.09 16.848 201.902 16.848 cv
201.707 16.848 201.551 16.84 201.43 16.828 cv
201.301 16.812 201.199 16.797 201.129 16.77 cv
201.051 16.746 201 16.711 200.969 16.672 cv
200.938 16.633 200.922 16.59 200.922 16.535 cv
200.922 6.27301 li
200.922 6.22302 200.938 6.17603 200.969 6.133 cv
201 6.09399 201.051 6.05902 201.129 6.02698 cv
201.199 6 201.301 5.97699 201.43 5.961 cv
201.551 5.94501 201.707 5.93701 201.902 5.93701 cv
202.09 5.93701 202.25 5.94501 202.379 5.961 cv
202.5 5.97699 202.602 6 202.68 6.02698 cv
202.754 6.05902 202.805 6.09399 202.84 6.133 cv
202.867 6.17603 202.883 6.22302 202.887 6.27301 cv
cp
f
206.852 16.535 mo
206.848 16.59 206.832 16.633 206.805 16.672 cv
206.77 16.711 206.719 16.746 206.645 16.77 cv
206.566 16.797 206.465 16.812 206.344 16.828 cv
206.215 16.84 206.055 16.848 205.867 16.848 cv
205.672 16.848 205.516 16.84 205.395 16.828 cv
205.266 16.812 205.164 16.797 205.094 16.77 cv
205.016 16.746 204.965 16.711 204.934 16.672 cv
204.902 16.633 204.887 16.59 204.887 16.535 cv
204.887 6.27301 li
204.887 6.22302 204.902 6.17603 204.934 6.133 cv
204.965 6.09399 205.016 6.05902 205.094 6.02698 cv
205.164 6 205.266 5.97699 205.395 5.961 cv
205.516 5.94501 205.672 5.93701 205.867 5.93701 cv
206.055 5.93701 206.215 5.94501 206.344 5.961 cv
206.465 5.97699 206.566 6 206.645 6.02698 cv
206.719 6.05902 206.77 6.09399 206.805 6.133 cv
206.832 6.17603 206.848 6.22302 206.852 6.27301 cv
cp
f
220.039 16.535 mo
220.035 16.598 220.023 16.645 220.008 16.68 cv
219.984 16.723 219.938 16.754 219.859 16.777 cv
219.781 16.801 219.664 16.816 219.516 16.832 cv
219.359 16.84 219.156 16.848 218.898 16.848 cv
218.68 16.848 218.504 16.84 218.375 16.832 cv
218.242 16.816 218.141 16.801 218.066 16.773 cv
217.988 16.746 217.934 16.711 217.906 16.664 cv
217.871 16.625 217.844 16.57 217.828 16.504 cv
216.926 14.25 li
216.813 14 216.707 13.773 216.605 13.57 cv
216.5 13.375 216.383 13.207 216.258 13.074 cv
216.125 12.941 215.98 12.844 215.816 12.773 cv
215.648 12.711 215.453 12.676 215.238 12.672 cv
214.598 12.672 li
214.598 16.52 li
214.598 16.574 214.578 16.621 214.547 16.66 cv
214.508 16.703 214.453 16.738 214.379 16.762 cv
214.297 16.789 214.191 16.809 214.066 16.824 cv
213.934 16.84 213.77 16.848 213.566 16.848 cv
213.371 16.848 213.207 16.84 213.074 16.824 cv
212.941 16.809 212.836 16.789 212.758 16.762 cv
212.68 16.738 212.625 16.703 212.594 16.66 cv
212.563 16.621 212.547 16.574 212.547 16.52 cv
212.547 7.34802 li
212.547 7.125 212.605 6.961 212.723 6.85498 cv
212.84 6.758 212.984 6.70697 213.156 6.703 cv
215.77 6.703 li
216.035 6.70697 216.254 6.711 216.426 6.71899 cv
216.598 6.72998 216.754 6.742 216.895 6.758 cv
217.297 6.81598 217.66 6.91803 217.988 7.05499 cv
218.313 7.19501 218.59 7.375 218.816 7.60199 cv
219.043 7.828 219.215 8.09802 219.336 8.40601 cv
219.453 8.71899 219.512 9.07397 219.516 9.47302 cv
219.512 9.81201 219.469 10.121 219.387 10.398 cv
219.297 10.68 219.172 10.93 219.008 11.145 cv
218.84 11.363 218.633 11.551 218.391 11.711 cv
218.141 11.875 217.863 12.004 217.555 12.102 cv
217.703 12.176 217.844 12.266 217.98 12.367 cv
218.109 12.473 218.234 12.598 218.355 12.746 cv
218.469 12.895 218.582 13.066 218.688 13.254 cv
218.789 13.449 218.891 13.664 218.992 13.898 cv
219.844 15.887 li
219.918 16.086 219.973 16.23 220 16.32 cv
220.023 16.414 220.035 16.488 220.039 16.535 cv
cp
217.391 9.68402 mo
217.387 9.35199 217.313 9.07001 217.164 8.84003 cv
217.016 8.61298 216.77 8.453 216.426 8.35498 cv
216.32 8.33197 216.199 8.30902 216.07 8.29303 cv
215.934 8.27698 215.75 8.27002 215.52 8.27002 cv
214.598 8.27002 li
214.598 11.133 li
215.645 11.133 li
215.934 11.137 216.188 11.102 216.41 11.031 cv
216.625 10.965 216.809 10.867 216.957 10.734 cv
217.102 10.609 217.211 10.457 217.281 10.277 cv
217.352 10.105 217.387 9.90601 217.391 9.68402 cv
cp
f
228.031 16.535 mo
228.027 16.59 228.016 16.633 227.992 16.672 cv
227.965 16.711 227.918 16.746 227.855 16.77 cv
227.789 16.797 227.703 16.812 227.598 16.828 cv
227.488 16.84 227.355 16.848 227.195 16.848 cv
227.023 16.848 226.883 16.84 226.777 16.828 cv
226.668 16.812 226.582 16.797 226.523 16.77 cv
226.457 16.746 226.414 16.711 226.391 16.672 cv
226.363 16.633 226.352 16.59 226.352 16.535 cv
226.352 15.73 li
225.969 16.148 225.578 16.461 225.18 16.668 cv
224.781 16.875 224.367 16.977 223.941 16.98 cv
223.461 16.977 223.059 16.902 222.734 16.746 cv
222.41 16.594 222.148 16.379 221.949 16.105 cv
221.746 15.836 221.602 15.523 221.52 15.168 cv
221.43 14.812 221.387 14.367 221.391 13.836 cv
221.391 9.57397 li
221.387 9.52698 221.402 9.47998 221.434 9.43701 cv
221.461 9.40198 221.512 9.37097 221.59 9.34003 cv
221.66 9.31598 221.762 9.297 221.895 9.28101 cv
222.02 9.27301 222.18 9.26599 222.367 9.26202 cv
222.555 9.26599 222.711 9.27301 222.84 9.28101 cv
222.961 9.297 223.063 9.31598 223.141 9.34003 cv
223.215 9.37097 223.266 9.40198 223.301 9.43701 cv
223.328 9.47998 223.344 9.52698 223.348 9.57397 cv
223.348 13.508 li
223.344 13.875 223.367 14.156 223.418 14.344 cv
223.461 14.539 223.535 14.703 223.633 14.84 cv
223.727 14.977 223.848 15.082 224 15.156 cv
224.145 15.234 224.316 15.273 224.52 15.27 cv
224.766 15.273 225.02 15.184 225.273 15 cv
225.523 14.82 225.793 14.555 226.082 14.203 cv
226.082 9.57397 li
226.082 9.52698 226.094 9.47998 226.125 9.43701 cv
226.148 9.40198 226.199 9.37097 226.277 9.34003 cv
226.348 9.31598 226.449 9.297 226.578 9.28101 cv
226.699 9.27301 226.859 9.26599 227.055 9.26202 cv
227.246 9.26599 227.402 9.27301 227.531 9.28101 cv
227.652 9.297 227.754 9.31598 227.828 9.34003 cv
227.898 9.37097 227.949 9.40198 227.984 9.43701 cv
228.012 9.47998 228.027 9.52698 228.031 9.57397 cv
cp
f
236.664 16.535 mo
236.66 16.59 236.645 16.633 236.617 16.672 cv
236.582 16.711 236.531 16.746 236.461 16.77 cv
236.387 16.797 236.285 16.812 236.16 16.828 cv
236.031 16.84 235.875 16.848 235.688 16.848 cv
235.492 16.848 235.332 16.84 235.207 16.828 cv
235.078 16.812 234.977 16.797 234.906 16.77 cv
234.832 16.746 234.781 16.711 234.754 16.672 cv
234.719 16.633 234.703 16.59 234.707 16.535 cv
234.707 12.562 li
234.703 12.227 234.68 11.961 234.633 11.766 cv
234.582 11.578 234.508 11.41 234.418 11.27 cv
234.32 11.133 234.199 11.027 234.055 10.953 cv
233.902 10.879 233.73 10.844 233.535 10.84 cv
233.281 10.844 233.027 10.934 232.777 11.113 cv
232.52 11.297 232.254 11.562 231.98 11.906 cv
231.98 16.535 li
231.977 16.59 231.961 16.633 231.934 16.672 cv
231.898 16.711 231.848 16.746 231.773 16.77 cv
231.695 16.797 231.594 16.812 231.473 16.828 cv
231.344 16.84 231.184 16.848 230.996 16.848 cv
230.801 16.848 230.645 16.84 230.523 16.828 cv
230.395 16.812 230.293 16.797 230.223 16.77 cv
230.145 16.746 230.094 16.711 230.063 16.672 cv
230.031 16.633 230.016 16.59 230.016 16.535 cv
230.016 9.57397 li
230.016 9.52698 230.027 9.47998 230.055 9.43701 cv
230.078 9.40198 230.125 9.37097 230.195 9.34003 cv
230.262 9.31598 230.348 9.297 230.457 9.28101 cv
230.559 9.27301 230.695 9.26599 230.859 9.26202 cv
231.023 9.26599 231.16 9.27301 231.27 9.28101 cv
231.379 9.297 231.461 9.31598 231.523 9.34003 cv
231.578 9.37097 231.621 9.40198 231.652 9.43701 cv
231.676 9.47998 231.691 9.52698 231.691 9.57397 cv
231.691 10.379 li
232.074 9.96503 232.465 9.65198 232.867 9.44098 cv
233.262 9.23401 233.676 9.133 234.113 9.12903 cv
234.582 9.133 234.98 9.211 235.309 9.36298 cv
235.629 9.52301 235.895 9.73401 236.098 10 cv
236.297 10.27 236.441 10.582 236.531 10.941 cv
236.617 11.301 236.66 11.734 236.664 12.234 cv
cp
f
242.496 15.848 mo
242.492 16.078 242.48 16.254 242.453 16.375 cv
242.422 16.5 242.383 16.586 242.34 16.633 cv
242.289 16.684 242.219 16.727 242.133 16.766 cv
242.039 16.805 241.934 16.836 241.813 16.867 cv
241.688 16.891 241.555 16.914 241.414 16.934 cv
241.27 16.945 241.125 16.953 240.98 16.957 cv
240.586 16.953 240.246 16.902 239.965 16.809 cv
239.676 16.707 239.441 16.559 239.254 16.352 cv
239.066 16.148 238.93 15.891 238.844 15.574 cv
238.754 15.266 238.707 14.895 238.711 14.469 cv
238.711 10.902 li
237.875 10.902 li
237.773 10.906 237.699 10.844 237.648 10.719 cv
237.594 10.598 237.566 10.395 237.57 10.105 cv
237.566 9.95697 237.574 9.828 237.59 9.72302 cv
237.602 9.62097 237.621 9.539 237.648 9.47699 cv
237.672 9.41803 237.703 9.375 237.746 9.34802 cv
237.781 9.32397 237.828 9.31201 237.883 9.30902 cv
238.711 9.30902 li
238.711 7.75403 li
238.707 7.703 238.723 7.65601 238.754 7.61298 cv
238.781 7.57397 238.832 7.539 238.91 7.508 cv
238.98 7.47998 239.082 7.461 239.211 7.44501 cv
239.336 7.43402 239.492 7.42603 239.684 7.42603 cv
239.871 7.42603 240.031 7.43402 240.164 7.44501 cv
240.289 7.461 240.391 7.47998 240.465 7.508 cv
240.535 7.539 240.586 7.57397 240.621 7.61298 cv
240.648 7.65601 240.664 7.703 240.668 7.75403 cv
240.668 9.30902 li
242.184 9.30902 li
242.234 9.31201 242.277 9.32397 242.32 9.34802 cv
242.355 9.375 242.391 9.41803 242.418 9.47699 cv
242.441 9.539 242.461 9.62097 242.477 9.72302 cv
242.488 9.828 242.492 9.95697 242.496 10.105 cv
242.492 10.395 242.469 10.598 242.418 10.719 cv
242.363 10.844 242.285 10.906 242.191 10.902 cv
240.668 10.902 li
240.668 14.172 li
240.664 14.555 240.727 14.84 240.848 15.027 cv
240.965 15.219 241.176 15.312 241.488 15.309 cv
241.59 15.312 241.684 15.305 241.77 15.281 cv
241.848 15.266 241.922 15.242 241.992 15.219 cv
242.055 15.195 242.109 15.176 242.156 15.156 cv
242.195 15.141 242.238 15.133 242.277 15.129 cv
242.309 15.133 242.336 15.141 242.367 15.156 cv
242.391 15.176 242.414 15.211 242.434 15.266 cv
242.445 15.32 242.461 15.395 242.477 15.488 cv
242.488 15.582 242.492 15.703 242.496 15.848 cv
cp
f
245.883 16.535 mo
245.879 16.59 245.863 16.633 245.836 16.672 cv
245.801 16.711 245.75 16.746 245.676 16.77 cv
245.598 16.797 245.496 16.812 245.375 16.828 cv
245.246 16.84 245.086 16.848 244.898 16.848 cv
244.703 16.848 244.547 16.84 244.426 16.828 cv
244.297 16.812 244.195 16.797 244.125 16.77 cv
244.047 16.746 243.996 16.711 243.965 16.672 cv
243.934 16.633 243.918 16.59 243.918 16.535 cv
243.918 9.59003 li
243.918 9.539 243.934 9.492 243.965 9.453 cv
243.996 9.414 244.047 9.383 244.125 9.35199 cv
244.195 9.328 244.297 9.30499 244.426 9.28497 cv
244.547 9.27301 244.703 9.26599 244.898 9.26202 cv
245.086 9.26599 245.246 9.27301 245.375 9.28497 cv
245.496 9.30499 245.598 9.328 245.676 9.35199 cv
245.75 9.383 245.801 9.414 245.836 9.453 cv
245.863 9.492 245.879 9.539 245.883 9.59003 cv
cp
246.031 7.21503 mo
246.027 7.61298 245.945 7.88702 245.789 8.03497 cv
245.625 8.18701 245.328 8.26599 244.891 8.26202 cv
244.449 8.26599 244.152 8.19098 244 8.04303 cv
243.844 7.89801 243.766 7.63702 243.77 7.25403 cv
243.766 6.86298 243.844 6.59003 244.008 6.43402 cv
244.164 6.28497 244.465 6.20697 244.906 6.203 cv
245.34 6.20697 245.637 6.28101 245.797 6.42603 cv
245.949 6.578 246.027 6.84003 246.031 7.21503 cv
cp
f
258.926 16.535 mo
258.926 16.59 258.91 16.633 258.879 16.672 cv
258.848 16.711 258.793 16.746 258.723 16.77 cv
258.645 16.797 258.547 16.812 258.426 16.828 cv
258.297 16.84 258.137 16.848 257.949 16.848 cv
257.746 16.848 257.586 16.84 257.465 16.828 cv
257.336 16.812 257.234 16.797 257.164 16.77 cv
257.086 16.746 257.035 16.711 257.008 16.672 cv
256.977 16.633 256.961 16.59 256.965 16.535 cv
256.965 12.406 li
256.961 12.172 256.941 11.961 256.898 11.766 cv
256.852 11.578 256.781 11.41 256.695 11.27 cv
256.602 11.133 256.488 11.027 256.355 10.953 cv
256.215 10.879 256.051 10.844 255.859 10.84 cv
255.621 10.844 255.383 10.934 255.148 11.113 cv
254.906 11.297 254.648 11.562 254.367 11.906 cv
254.367 16.535 li
254.367 16.59 254.352 16.633 254.32 16.672 cv
254.289 16.711 254.234 16.746 254.16 16.77 cv
254.082 16.797 253.98 16.812 253.859 16.828 cv
253.73 16.84 253.574 16.848 253.391 16.848 cv
253.195 16.848 253.039 16.84 252.914 16.828 cv
252.789 16.812 252.688 16.797 252.613 16.77 cv
252.539 16.746 252.488 16.711 252.457 16.672 cv
252.426 16.633 252.41 16.59 252.41 16.535 cv
252.41 12.406 li
252.41 12.172 252.387 11.961 252.344 11.766 cv
252.297 11.578 252.23 11.41 252.145 11.27 cv
252.055 11.133 251.941 11.027 251.801 10.953 cv
251.66 10.879 251.496 10.844 251.309 10.84 cv
251.066 10.844 250.824 10.934 250.59 11.113 cv
250.348 11.297 250.09 11.562 249.816 11.906 cv
249.816 16.535 li
249.813 16.59 249.797 16.633 249.77 16.672 cv
249.734 16.711 249.684 16.746 249.609 16.77 cv
249.531 16.797 249.43 16.812 249.309 16.828 cv
249.18 16.84 249.02 16.848 248.832 16.848 cv
248.637 16.848 248.48 16.84 248.359 16.828 cv
248.23 16.812 248.129 16.797 248.059 16.77 cv
247.98 16.746 247.93 16.711 247.898 16.672 cv
247.867 16.633 247.852 16.59 247.852 16.535 cv
247.852 9.57397 li
247.852 9.52698 247.863 9.47998 247.891 9.43701 cv
247.914 9.40198 247.961 9.37097 248.031 9.34003 cv
248.098 9.31598 248.184 9.297 248.293 9.28101 cv
248.395 9.27301 248.531 9.26599 248.695 9.26202 cv
248.859 9.26599 248.996 9.27301 249.105 9.28101 cv
249.215 9.297 249.297 9.31598 249.359 9.34003 cv
249.414 9.37097 249.457 9.40198 249.488 9.43701 cv
249.512 9.47998 249.527 9.52698 249.527 9.57397 cv
249.527 10.379 li
249.91 9.96503 250.293 9.65198 250.68 9.44098 cv
251.059 9.23401 251.457 9.133 251.879 9.12903 cv
252.16 9.133 252.418 9.15997 252.648 9.21899 cv
252.875 9.28101 253.078 9.367 253.262 9.47699 cv
253.438 9.59003 253.594 9.72699 253.727 9.87903 cv
253.855 10.039 253.965 10.211 254.055 10.402 cv
254.262 10.18 254.465 9.98798 254.668 9.82397 cv
254.863 9.664 255.063 9.53101 255.262 9.42999 cv
255.453 9.328 255.648 9.25403 255.848 9.203 cv
256.039 9.15601 256.238 9.133 256.445 9.12903 cv
256.902 9.133 257.293 9.211 257.613 9.36298 cv
257.93 9.52301 258.184 9.73401 258.383 10 cv
258.574 10.27 258.715 10.582 258.801 10.941 cv
258.883 11.301 258.926 11.68 258.926 12.078 cv
cp
f
267.277 12.852 mo
267.273 13.094 267.223 13.273 267.117 13.383 cv
267.008 13.5 266.859 13.555 266.676 13.555 cv
262.438 13.555 li
262.434 13.852 262.469 14.121 262.543 14.363 cv
262.609 14.605 262.723 14.812 262.879 14.98 cv
263.031 15.148 263.23 15.277 263.473 15.363 cv
263.715 15.457 264.004 15.5 264.344 15.496 cv
264.684 15.5 264.984 15.477 265.25 15.422 cv
265.508 15.375 265.734 15.32 265.922 15.258 cv
266.109 15.203 266.266 15.148 266.395 15.094 cv
266.516 15.047 266.617 15.02 266.699 15.02 cv
266.742 15.02 266.781 15.031 266.816 15.047 cv
266.844 15.07 266.871 15.102 266.895 15.145 cv
266.914 15.195 266.926 15.262 266.938 15.344 cv
266.941 15.434 266.945 15.543 266.949 15.668 cv
266.945 15.785 266.945 15.883 266.941 15.961 cv
266.934 16.047 266.926 16.113 266.918 16.168 cv
266.906 16.227 266.891 16.277 266.871 16.312 cv
266.848 16.355 266.82 16.391 266.789 16.426 cv
266.754 16.465 266.66 16.516 266.512 16.574 cv
266.359 16.641 266.168 16.703 265.934 16.758 cv
265.699 16.82 265.43 16.867 265.133 16.914 cv
264.828 16.953 264.508 16.977 264.164 16.98 cv
263.543 16.977 263 16.902 262.535 16.746 cv
262.066 16.594 261.676 16.355 261.367 16.035 cv
261.055 15.719 260.824 15.32 260.672 14.836 cv
260.516 14.355 260.438 13.785 260.441 13.133 cv
260.438 12.516 260.52 11.961 260.684 11.461 cv
260.844 10.969 261.074 10.547 261.383 10.195 cv
261.688 9.85199 262.063 9.586 262.504 9.40198 cv
262.941 9.22302 263.438 9.133 263.992 9.12903 cv
264.574 9.133 265.07 9.21899 265.484 9.38702 cv
265.895 9.56201 266.234 9.80103 266.504 10.102 cv
266.766 10.41 266.961 10.77 267.09 11.184 cv
267.211 11.602 267.273 12.055 267.277 12.539 cv
cp
265.375 12.289 mo
265.387 11.738 265.277 11.309 265.043 10.992 cv
264.805 10.68 264.438 10.52 263.945 10.52 cv
263.691 10.52 263.473 10.566 263.293 10.66 cv
263.105 10.754 262.953 10.883 262.832 11.039 cv
262.707 11.199 262.613 11.383 262.551 11.598 cv
262.484 11.816 262.445 12.047 262.438 12.289 cv
cp
f
273.785 14.57 mo
273.785 14.965 273.711 15.312 273.563 15.613 cv
273.414 15.918 273.203 16.172 272.938 16.371 cv
272.664 16.578 272.344 16.727 271.977 16.828 cv
271.602 16.926 271.203 16.977 270.773 16.98 cv
270.512 16.977 270.262 16.957 270.027 16.922 cv
269.789 16.879 269.578 16.832 269.395 16.773 cv
269.203 16.715 269.047 16.652 268.926 16.59 cv
268.797 16.527 268.707 16.469 268.652 16.414 cv
268.594 16.359 268.547 16.273 268.52 16.156 cv
268.484 16.039 268.469 15.867 268.473 15.637 cv
268.469 15.488 268.477 15.367 268.488 15.273 cv
268.496 15.184 268.512 15.109 268.535 15.055 cv
268.555 15 268.578 14.965 268.613 14.945 cv
268.641 14.93 268.68 14.922 268.73 14.918 cv
268.785 14.922 268.871 14.953 268.984 15.016 cv
269.094 15.082 269.234 15.152 269.402 15.23 cv
269.566 15.309 269.758 15.383 269.98 15.449 cv
270.199 15.52 270.449 15.555 270.734 15.551 cv
270.906 15.555 271.066 15.535 271.207 15.496 cv
271.344 15.461 271.461 15.41 271.566 15.34 cv
271.664 15.277 271.742 15.191 271.797 15.082 cv
271.848 14.98 271.875 14.859 271.875 14.727 cv
271.875 14.57 271.824 14.437 271.73 14.324 cv
271.629 14.215 271.504 14.117 271.348 14.031 cv
271.188 13.949 271.008 13.871 270.809 13.797 cv
270.605 13.727 270.398 13.645 270.191 13.555 cv
269.977 13.469 269.77 13.367 269.574 13.25 cv
269.371 13.137 269.195 12.996 269.039 12.828 cv
268.879 12.664 268.75 12.465 268.656 12.227 cv
268.559 11.996 268.512 11.715 268.512 11.383 cv
268.512 11.055 268.574 10.75 268.707 10.469 cv
268.832 10.191 269.02 9.953 269.27 9.75403 cv
269.512 9.55902 269.809 9.40601 270.16 9.29303 cv
270.508 9.18701 270.902 9.133 271.344 9.12903 cv
271.559 9.133 271.773 9.14801 271.98 9.17603 cv
272.184 9.211 272.367 9.25 272.539 9.29303 cv
272.703 9.34399 272.844 9.39502 272.961 9.44501 cv
273.07 9.50403 273.152 9.55103 273.207 9.586 cv
273.254 9.62903 273.289 9.66803 273.313 9.703 cv
273.328 9.74597 273.344 9.79303 273.359 9.84399 cv
273.367 9.90198 273.379 9.96899 273.387 10.047 cv
273.395 10.129 273.398 10.23 273.398 10.348 cv
273.398 10.492 273.395 10.605 273.387 10.691 cv
273.379 10.781 273.363 10.852 273.348 10.902 cv
273.324 10.953 273.301 10.988 273.273 11.004 cv
273.238 11.027 273.203 11.035 273.164 11.031 cv
273.117 11.035 273.043 11.008 272.945 10.953 cv
272.844 10.898 272.719 10.84 272.574 10.777 cv
272.422 10.715 272.25 10.656 272.059 10.602 cv
271.859 10.547 271.637 10.52 271.391 10.52 cv
271.211 10.52 271.059 10.539 270.93 10.574 cv
270.797 10.613 270.691 10.664 270.609 10.73 cv
270.523 10.801 270.461 10.883 270.422 10.969 cv
270.379 11.062 270.355 11.156 270.359 11.258 cv
270.355 11.422 270.406 11.559 270.508 11.664 cv
270.605 11.777 270.734 11.875 270.898 11.953 cv
271.055 12.039 271.238 12.117 271.449 12.187 cv
271.652 12.266 271.863 12.344 272.074 12.426 cv
272.285 12.516 272.492 12.617 272.699 12.727 cv
272.902 12.844 273.086 12.984 273.25 13.148 cv
273.41 13.32 273.539 13.52 273.637 13.746 cv
273.734 13.98 273.785 14.254 273.785 14.57 cv
cp
f
289.688 9.55902 mo
289.688 9.617 289.68 9.68701 289.664 9.77002 cv
289.648 9.85498 289.617 9.97699 289.578 10.129 cv
287.723 16.426 li
287.695 16.516 287.66 16.59 287.621 16.641 cv
287.574 16.699 287.512 16.742 287.43 16.77 cv
287.34 16.801 287.219 16.816 287.063 16.832 cv
286.902 16.84 286.695 16.848 286.441 16.848 cv
286.184 16.848 285.973 16.84 285.816 16.828 cv
285.652 16.812 285.527 16.793 285.438 16.762 cv
285.344 16.734 285.277 16.691 285.238 16.633 cv
285.195 16.582 285.164 16.512 285.145 16.426 cv
283.973 12.195 li
283.957 12.125 li
283.941 12.195 li
282.867 16.426 li
282.844 16.516 282.813 16.59 282.777 16.641 cv
282.734 16.699 282.668 16.742 282.578 16.77 cv
282.48 16.801 282.352 16.816 282.195 16.832 cv
282.031 16.84 281.824 16.848 281.57 16.848 cv
281.309 16.848 281.098 16.84 280.941 16.828 cv
280.777 16.812 280.652 16.793 280.566 16.762 cv
280.473 16.734 280.406 16.691 280.367 16.633 cv
280.32 16.582 280.289 16.512 280.273 16.426 cv
278.434 10.129 li
278.383 9.97998 278.355 9.86298 278.344 9.77301 cv
278.328 9.69098 278.32 9.617 278.324 9.55902 cv
278.32 9.508 278.336 9.46503 278.367 9.422 cv
278.395 9.38702 278.445 9.35498 278.523 9.328 cv
278.598 9.30902 278.699 9.289 278.828 9.27698 cv
278.953 9.27002 279.113 9.26599 279.309 9.26202 cv
279.516 9.26599 279.684 9.27002 279.813 9.27698 cv
279.941 9.289 280.043 9.30902 280.117 9.33197 cv
280.188 9.35901 280.238 9.39502 280.27 9.43701 cv
280.297 9.48401 280.32 9.539 280.336 9.59802 cv
281.719 14.711 li
281.734 14.805 li
281.75 14.711 li
283.047 9.59802 li
283.059 9.539 283.082 9.48401 283.121 9.43701 cv
283.152 9.39502 283.203 9.35901 283.273 9.33197 cv
283.336 9.30902 283.434 9.289 283.559 9.27698 cv
283.68 9.27002 283.836 9.26599 284.027 9.26202 cv
284.219 9.26599 284.375 9.27301 284.496 9.28101 cv
284.613 9.297 284.707 9.31201 284.781 9.336 cv
284.848 9.35901 284.898 9.39099 284.93 9.42999 cv
284.957 9.46899 284.977 9.51599 284.996 9.56598 cv
286.387 14.719 li
286.41 14.805 li
286.426 14.711 li
287.754 9.59802 li
287.762 9.539 287.781 9.48401 287.813 9.43701 cv
287.844 9.39502 287.895 9.35901 287.969 9.33197 cv
288.039 9.30902 288.137 9.289 288.266 9.27698 cv
288.387 9.27002 288.547 9.26599 288.742 9.26202 cv
288.934 9.26599 289.09 9.27002 289.215 9.27698 cv
289.332 9.289 289.43 9.30902 289.504 9.328 cv
289.57 9.35498 289.617 9.38702 289.648 9.422 cv
289.672 9.46503 289.688 9.508 289.688 9.55902 cv
cp
f
292.91 16.535 mo
292.906 16.59 292.891 16.633 292.863 16.672 cv
292.828 16.711 292.777 16.746 292.703 16.77 cv
292.625 16.797 292.523 16.812 292.402 16.828 cv
292.273 16.84 292.113 16.848 291.926 16.848 cv
291.73 16.848 291.574 16.84 291.453 16.828 cv
291.324 16.812 291.223 16.797 291.152 16.77 cv
291.074 16.746 291.023 16.711 290.992 16.672 cv
290.961 16.633 290.945 16.59 290.945 16.535 cv
290.945 9.59003 li
290.945 9.539 290.961 9.492 290.992 9.453 cv
291.023 9.414 291.074 9.383 291.152 9.35199 cv
291.223 9.328 291.324 9.30499 291.453 9.28497 cv
291.574 9.27301 291.73 9.26599 291.926 9.26202 cv
292.113 9.26599 292.273 9.27301 292.402 9.28497 cv
292.523 9.30499 292.625 9.328 292.703 9.35199 cv
292.777 9.383 292.828 9.414 292.863 9.453 cv
292.891 9.492 292.906 9.539 292.91 9.59003 cv
cp
293.059 7.21503 mo
293.055 7.61298 292.973 7.88702 292.816 8.03497 cv
292.652 8.18701 292.355 8.26599 291.918 8.26202 cv
291.477 8.26599 291.18 8.19098 291.027 8.04303 cv
290.871 7.89801 290.793 7.63702 290.797 7.25403 cv
290.793 6.86298 290.871 6.59003 291.035 6.43402 cv
291.191 6.28497 291.492 6.20697 291.934 6.203 cv
292.367 6.20697 292.664 6.28101 292.824 6.42603 cv
292.977 6.578 293.055 6.84003 293.059 7.21503 cv
cp
f
298.996 15.848 mo
298.992 16.078 298.98 16.254 298.953 16.375 cv
298.922 16.5 298.883 16.586 298.84 16.633 cv
298.789 16.684 298.719 16.727 298.633 16.766 cv
298.539 16.805 298.434 16.836 298.313 16.867 cv
298.188 16.891 298.055 16.914 297.914 16.934 cv
297.77 16.945 297.625 16.953 297.48 16.957 cv
297.086 16.953 296.746 16.902 296.465 16.809 cv
296.176 16.707 295.941 16.559 295.754 16.352 cv
295.566 16.148 295.43 15.891 295.344 15.574 cv
295.254 15.266 295.207 14.895 295.211 14.469 cv
295.211 10.902 li
294.375 10.902 li
294.273 10.906 294.199 10.844 294.148 10.719 cv
294.094 10.598 294.066 10.395 294.07 10.105 cv
294.066 9.95697 294.074 9.828 294.09 9.72302 cv
294.102 9.62097 294.121 9.539 294.148 9.47699 cv
294.172 9.41803 294.203 9.375 294.246 9.34802 cv
294.281 9.32397 294.328 9.31201 294.383 9.30902 cv
295.211 9.30902 li
295.211 7.75403 li
295.207 7.703 295.223 7.65601 295.254 7.61298 cv
295.281 7.57397 295.332 7.539 295.41 7.508 cv
295.48 7.47998 295.582 7.461 295.711 7.44501 cv
295.836 7.43402 295.992 7.42603 296.184 7.42603 cv
296.371 7.42603 296.531 7.43402 296.664 7.44501 cv
296.789 7.461 296.891 7.47998 296.965 7.508 cv
297.035 7.539 297.086 7.57397 297.121 7.61298 cv
297.148 7.65601 297.164 7.703 297.168 7.75403 cv
297.168 9.30902 li
298.684 9.30902 li
298.734 9.31201 298.777 9.32397 298.82 9.34802 cv
298.855 9.375 298.891 9.41803 298.918 9.47699 cv
298.941 9.539 298.961 9.62097 298.977 9.72302 cv
298.988 9.828 298.992 9.95697 298.996 10.105 cv
298.992 10.395 298.969 10.598 298.918 10.719 cv
298.863 10.844 298.785 10.906 298.691 10.902 cv
297.168 10.902 li
297.168 14.172 li
297.164 14.555 297.227 14.84 297.348 15.027 cv
297.465 15.219 297.676 15.312 297.988 15.309 cv
298.09 15.312 298.184 15.305 298.27 15.281 cv
298.348 15.266 298.422 15.242 298.492 15.219 cv
298.555 15.195 298.609 15.176 298.656 15.156 cv
298.695 15.141 298.738 15.133 298.777 15.129 cv
298.809 15.133 298.836 15.141 298.867 15.156 cv
298.891 15.176 298.914 15.211 298.934 15.266 cv
298.945 15.32 298.961 15.395 298.977 15.488 cv
298.988 15.582 298.992 15.703 298.996 15.848 cv
cp
f
307.07 16.535 mo
307.066 16.59 307.051 16.633 307.023 16.672 cv
306.988 16.711 306.938 16.746 306.867 16.77 cv
306.793 16.797 306.691 16.812 306.566 16.828 cv
306.438 16.84 306.281 16.848 306.094 16.848 cv
305.898 16.848 305.738 16.84 305.613 16.828 cv
305.484 16.812 305.383 16.797 305.313 16.77 cv
305.238 16.746 305.188 16.711 305.16 16.672 cv
305.125 16.633 305.109 16.59 305.113 16.535 cv
305.113 12.562 li
305.109 12.227 305.086 11.961 305.039 11.766 cv
304.988 11.578 304.914 11.41 304.824 11.27 cv
304.727 11.133 304.605 11.027 304.461 10.953 cv
304.309 10.879 304.137 10.844 303.941 10.84 cv
303.688 10.844 303.434 10.934 303.184 11.113 cv
302.926 11.297 302.66 11.562 302.387 11.906 cv
302.387 16.535 li
302.383 16.59 302.367 16.633 302.34 16.672 cv
302.305 16.711 302.254 16.746 302.18 16.77 cv
302.102 16.797 302 16.812 301.879 16.828 cv
301.75 16.84 301.59 16.848 301.402 16.848 cv
301.207 16.848 301.051 16.84 300.93 16.828 cv
300.801 16.812 300.699 16.797 300.629 16.77 cv
300.551 16.746 300.5 16.711 300.469 16.672 cv
300.438 16.633 300.422 16.59 300.422 16.535 cv
300.422 6.27301 li
300.422 6.22302 300.438 6.17603 300.469 6.133 cv
300.5 6.09399 300.551 6.05902 300.629 6.02698 cv
300.699 6 300.801 5.97699 300.93 5.961 cv
301.051 5.94501 301.207 5.93701 301.402 5.93701 cv
301.59 5.93701 301.75 5.94501 301.879 5.961 cv
302 5.97699 302.102 6 302.18 6.02698 cv
302.254 6.05902 302.305 6.09399 302.34 6.133 cv
302.367 6.17603 302.383 6.22302 302.387 6.27301 cv
302.387 10.121 li
302.723 9.789 303.07 9.54303 303.422 9.375 cv
303.773 9.21503 304.137 9.133 304.52 9.12903 cv
304.988 9.133 305.387 9.211 305.715 9.36298 cv
306.035 9.52301 306.301 9.73401 306.504 10.004 cv
306.703 10.277 306.848 10.594 306.938 10.953 cv
307.023 11.312 307.066 11.75 307.07 12.266 cv
cp
f
318.398 7.54303 mo
318.395 7.69897 318.387 7.83197 318.379 7.93701 cv
318.363 8.047 318.344 8.133 318.316 8.19098 cv
318.285 8.258 318.254 8.30499 318.219 8.33197 cv
318.18 8.367 318.137 8.383 318.094 8.37903 cv
314.793 8.37903 li
314.793 11.094 li
317.891 11.094 li
317.938 11.094 317.977 11.109 318.016 11.133 cv
318.047 11.164 318.082 11.207 318.113 11.266 cv
318.141 11.332 318.16 11.414 318.176 11.516 cv
318.188 11.621 318.195 11.754 318.195 11.906 cv
318.195 12.066 318.188 12.195 318.176 12.297 cv
318.16 12.402 318.141 12.488 318.113 12.555 cv
318.082 12.625 318.047 12.672 318.016 12.699 cv
317.977 12.73 317.938 12.746 317.891 12.742 cv
314.793 12.742 li
314.793 16.504 li
314.789 16.562 314.773 16.613 314.746 16.652 cv
314.711 16.699 314.656 16.734 314.578 16.758 cv
314.496 16.789 314.391 16.809 314.262 16.824 cv
314.129 16.84 313.961 16.848 313.762 16.848 cv
313.563 16.848 313.398 16.84 313.27 16.824 cv
313.133 16.809 313.027 16.789 312.953 16.758 cv
312.871 16.734 312.816 16.699 312.785 16.652 cv
312.75 16.613 312.734 16.562 312.734 16.504 cv
312.734 7.34802 li
312.734 7.125 312.793 6.961 312.91 6.85498 cv
313.027 6.758 313.172 6.70697 313.344 6.703 cv
318.094 6.703 li
318.137 6.70697 318.18 6.71899 318.219 6.74597 cv
318.254 6.77698 318.285 6.82397 318.316 6.88702 cv
318.344 6.953 318.363 7.04303 318.379 7.14801 cv
318.387 7.258 318.395 7.38702 318.398 7.54303 cv
cp
f
326.738 12.984 mo
326.734 13.582 326.656 14.121 326.504 14.609 cv
326.344 15.098 326.109 15.52 325.793 15.871 cv
325.473 16.227 325.074 16.5 324.598 16.691 cv
324.121 16.883 323.563 16.977 322.922 16.98 cv
322.301 16.977 321.762 16.895 321.305 16.723 cv
320.848 16.555 320.469 16.305 320.168 15.973 cv
319.863 15.648 319.637 15.246 319.496 14.766 cv
319.348 14.289 319.277 13.742 319.277 13.125 cv
319.277 12.535 319.355 11.992 319.516 11.5 cv
319.672 11.012 319.91 10.59 320.227 10.234 cv
320.543 9.88702 320.938 9.61298 321.418 9.41803 cv
321.891 9.22699 322.449 9.133 323.094 9.12903 cv
323.715 9.133 324.258 9.21503 324.715 9.383 cv
325.172 9.55499 325.551 9.80499 325.852 10.129 cv
326.148 10.461 326.371 10.863 326.52 11.34 cv
326.664 11.816 326.734 12.367 326.738 12.984 cv
cp
324.715 13.062 mo
324.715 12.719 324.688 12.402 324.633 12.113 cv
324.578 11.824 324.484 11.574 324.359 11.359 cv
324.227 11.148 324.055 10.984 323.84 10.863 cv
323.621 10.746 323.348 10.684 323.023 10.684 cv
322.727 10.684 322.473 10.738 322.258 10.844 cv
322.035 10.949 321.855 11.105 321.719 11.309 cv
321.574 11.52 321.469 11.766 321.402 12.051 cv
321.328 12.344 321.293 12.672 321.297 13.039 cv
321.293 13.383 321.32 13.699 321.383 13.988 cv
321.438 14.277 321.531 14.531 321.66 14.742 cv
321.785 14.957 321.957 15.121 322.18 15.234 cv
322.395 15.355 322.668 15.414 322.992 15.41 cv
323.289 15.414 323.547 15.359 323.766 15.25 cv
323.984 15.145 324.164 14.992 324.305 14.789 cv
324.445 14.59 324.547 14.344 324.613 14.051 cv
324.68 13.766 324.715 13.434 324.715 13.062 cv
cp
f
334.902 16.535 mo
334.898 16.59 334.887 16.633 334.863 16.672 cv
334.836 16.711 334.789 16.746 334.727 16.77 cv
334.66 16.797 334.574 16.812 334.469 16.828 cv
334.359 16.84 334.227 16.848 334.066 16.848 cv
333.895 16.848 333.754 16.84 333.648 16.828 cv
333.539 16.812 333.453 16.797 333.395 16.77 cv
333.328 16.746 333.285 16.711 333.262 16.672 cv
333.234 16.633 333.223 16.59 333.223 16.535 cv
333.223 15.73 li
332.84 16.148 332.449 16.461 332.051 16.668 cv
331.652 16.875 331.238 16.977 330.813 16.98 cv
330.332 16.977 329.93 16.902 329.605 16.746 cv
329.281 16.594 329.02 16.379 328.82 16.105 cv
328.617 15.836 328.473 15.523 328.391 15.168 cv
328.301 14.812 328.258 14.367 328.262 13.836 cv
328.262 9.57397 li
328.258 9.52698 328.273 9.47998 328.305 9.43701 cv
328.332 9.40198 328.383 9.37097 328.461 9.34003 cv
328.531 9.31598 328.633 9.297 328.766 9.28101 cv
328.891 9.27301 329.051 9.26599 329.238 9.26202 cv
329.426 9.26599 329.582 9.27301 329.711 9.28101 cv
329.832 9.297 329.934 9.31598 330.012 9.34003 cv
330.086 9.37097 330.137 9.40198 330.172 9.43701 cv
330.199 9.47998 330.215 9.52698 330.219 9.57397 cv
330.219 13.508 li
330.215 13.875 330.238 14.156 330.289 14.344 cv
330.332 14.539 330.406 14.703 330.504 14.84 cv
330.598 14.977 330.719 15.082 330.871 15.156 cv
331.016 15.234 331.188 15.273 331.391 15.27 cv
331.637 15.273 331.891 15.184 332.145 15 cv
332.395 14.82 332.664 14.555 332.953 14.203 cv
332.953 9.57397 li
332.953 9.52698 332.965 9.47998 332.996 9.43701 cv
333.02 9.40198 333.07 9.37097 333.148 9.34003 cv
333.219 9.31598 333.32 9.297 333.449 9.28101 cv
333.57 9.27301 333.73 9.26599 333.926 9.26202 cv
334.117 9.26599 334.273 9.27301 334.402 9.28101 cv
334.523 9.297 334.625 9.31598 334.699 9.34003 cv
334.77 9.37097 334.82 9.40198 334.855 9.43701 cv
334.883 9.47998 334.898 9.52698 334.902 9.57397 cv
cp
f
341.355 10.223 mo
341.352 10.414 341.348 10.566 341.34 10.684 cv
341.328 10.805 341.313 10.898 341.293 10.965 cv
341.27 11.031 341.242 11.078 341.211 11.102 cv
341.176 11.129 341.133 11.141 341.082 11.141 cv
341.039 11.141 340.992 11.133 340.941 11.113 cv
340.887 11.098 340.828 11.078 340.766 11.055 cv
340.699 11.035 340.629 11.016 340.551 10.996 cv
340.473 10.98 340.387 10.973 340.293 10.969 cv
340.184 10.973 340.074 10.992 339.965 11.035 cv
339.855 11.082 339.742 11.152 339.625 11.242 cv
339.508 11.34 339.383 11.465 339.258 11.617 cv
339.125 11.777 338.988 11.969 338.848 12.195 cv
338.848 16.535 li
338.844 16.59 338.828 16.633 338.801 16.672 cv
338.766 16.711 338.715 16.746 338.641 16.77 cv
338.563 16.797 338.461 16.812 338.34 16.828 cv
338.211 16.84 338.051 16.848 337.863 16.848 cv
337.668 16.848 337.512 16.84 337.391 16.828 cv
337.262 16.812 337.16 16.797 337.09 16.77 cv
337.012 16.746 336.961 16.711 336.93 16.672 cv
336.898 16.633 336.883 16.59 336.883 16.535 cv
336.883 9.57397 li
336.883 9.52698 336.895 9.47998 336.922 9.43701 cv
336.945 9.40198 336.992 9.37097 337.063 9.34003 cv
337.129 9.31598 337.215 9.297 337.324 9.28101 cv
337.426 9.27301 337.563 9.26599 337.727 9.26202 cv
337.891 9.26599 338.027 9.27301 338.137 9.28101 cv
338.246 9.297 338.328 9.31598 338.391 9.34003 cv
338.445 9.37097 338.488 9.40198 338.52 9.43701 cv
338.543 9.47998 338.559 9.52698 338.559 9.57397 cv
338.559 10.441 li
338.738 10.184 338.91 9.96899 339.074 9.797 cv
339.234 9.633 339.387 9.49597 339.535 9.39502 cv
339.68 9.297 339.824 9.22998 339.973 9.18701 cv
340.113 9.15198 340.262 9.133 340.41 9.12903 cv
340.477 9.133 340.547 9.13702 340.629 9.14099 cv
340.703 9.15198 340.785 9.164 340.871 9.17999 cv
340.953 9.19897 341.027 9.21899 341.09 9.242 cv
341.152 9.26599 341.195 9.29303 341.227 9.31598 cv
341.25 9.34802 341.273 9.375 341.289 9.40198 cv
341.301 9.43701 341.313 9.47998 341.324 9.53101 cv
341.332 9.59003 341.34 9.672 341.348 9.77698 cv
341.352 9.89099 341.352 10.039 341.355 10.223 cv
cp
f
353.039 7.54303 mo
353.035 7.69501 353.027 7.82397 353.02 7.92999 cv
353.004 8.039 352.984 8.125 352.961 8.18701 cv
352.93 8.25403 352.898 8.30499 352.863 8.33197 cv
352.82 8.367 352.777 8.383 352.734 8.37903 cv
350.207 8.37903 li
350.207 16.52 li
350.203 16.574 350.188 16.621 350.156 16.66 cv
350.121 16.703 350.066 16.738 349.988 16.762 cv
349.91 16.789 349.805 16.809 349.672 16.824 cv
349.539 16.84 349.371 16.848 349.176 16.848 cv
348.973 16.848 348.809 16.84 348.68 16.824 cv
348.543 16.809 348.438 16.789 348.363 16.762 cv
348.281 16.738 348.227 16.703 348.195 16.66 cv
348.16 16.621 348.141 16.574 348.145 16.52 cv
348.145 8.37903 li
345.617 8.37903 li
345.563 8.383 345.516 8.367 345.484 8.33197 cv
345.445 8.30499 345.414 8.25403 345.391 8.18701 cv
345.359 8.125 345.34 8.039 345.332 7.92999 cv
345.316 7.82397 345.313 7.69501 345.313 7.54303 cv
345.313 7.38702 345.316 7.258 345.332 7.14801 cv
345.34 7.04303 345.359 6.953 345.391 6.88702 cv
345.414 6.82397 345.445 6.77698 345.484 6.74597 cv
345.516 6.71899 345.563 6.70697 345.617 6.703 cv
352.734 6.703 li
352.777 6.70697 352.82 6.71899 352.863 6.74597 cv
352.898 6.77698 352.93 6.82397 352.961 6.88702 cv
352.984 6.953 353.004 7.04303 353.02 7.14801 cv
353.027 7.258 353.035 7.38702 353.039 7.54303 cv
cp
f
360.762 16.535 mo
360.758 16.59 360.742 16.633 360.715 16.672 cv
360.68 16.711 360.629 16.746 360.559 16.77 cv
360.484 16.797 360.383 16.812 360.258 16.828 cv
360.129 16.84 359.973 16.848 359.785 16.848 cv
359.59 16.848 359.43 16.84 359.305 16.828 cv
359.176 16.812 359.074 16.797 359.004 16.77 cv
358.93 16.746 358.879 16.711 358.852 16.672 cv
358.816 16.633 358.801 16.59 358.805 16.535 cv
358.805 12.562 li
358.801 12.227 358.777 11.961 358.73 11.766 cv
358.68 11.578 358.605 11.41 358.516 11.27 cv
358.418 11.133 358.297 11.027 358.152 10.953 cv
358 10.879 357.828 10.844 357.633 10.84 cv
357.379 10.844 357.125 10.934 356.875 11.113 cv
356.617 11.297 356.352 11.562 356.078 11.906 cv
356.078 16.535 li
356.074 16.59 356.059 16.633 356.031 16.672 cv
355.996 16.711 355.945 16.746 355.871 16.77 cv
355.793 16.797 355.691 16.812 355.57 16.828 cv
355.441 16.84 355.281 16.848 355.094 16.848 cv
354.898 16.848 354.742 16.84 354.621 16.828 cv
354.492 16.812 354.391 16.797 354.32 16.77 cv
354.242 16.746 354.191 16.711 354.16 16.672 cv
354.129 16.633 354.113 16.59 354.113 16.535 cv
354.113 6.27301 li
354.113 6.22302 354.129 6.17603 354.16 6.133 cv
354.191 6.09399 354.242 6.05902 354.32 6.02698 cv
354.391 6 354.492 5.97699 354.621 5.961 cv
354.742 5.94501 354.898 5.93701 355.094 5.93701 cv
355.281 5.93701 355.441 5.94501 355.57 5.961 cv
355.691 5.97699 355.793 6 355.871 6.02698 cv
355.945 6.05902 355.996 6.09399 356.031 6.133 cv
356.059 6.17603 356.074 6.22302 356.078 6.27301 cv
356.078 10.121 li
356.414 9.789 356.762 9.54303 357.113 9.375 cv
357.465 9.21503 357.828 9.133 358.211 9.12903 cv
358.68 9.133 359.078 9.211 359.406 9.36298 cv
359.727 9.52301 359.992 9.73401 360.195 10.004 cv
360.395 10.277 360.539 10.594 360.629 10.953 cv
360.715 11.312 360.758 11.75 360.762 12.266 cv
cp
f
367.121 10.223 mo
367.117 10.414 367.113 10.566 367.105 10.684 cv
367.094 10.805 367.078 10.898 367.059 10.965 cv
367.035 11.031 367.008 11.078 366.977 11.102 cv
366.941 11.129 366.898 11.141 366.848 11.141 cv
366.805 11.141 366.758 11.133 366.707 11.113 cv
366.652 11.098 366.594 11.078 366.531 11.055 cv
366.465 11.035 366.395 11.016 366.316 10.996 cv
366.238 10.98 366.152 10.973 366.059 10.969 cv
365.949 10.973 365.84 10.992 365.73 11.035 cv
365.621 11.082 365.508 11.152 365.391 11.242 cv
365.273 11.34 365.148 11.465 365.023 11.617 cv
364.891 11.777 364.754 11.969 364.613 12.195 cv
364.613 16.535 li
364.609 16.59 364.594 16.633 364.566 16.672 cv
364.531 16.711 364.48 16.746 364.406 16.77 cv
364.328 16.797 364.227 16.812 364.105 16.828 cv
363.977 16.84 363.816 16.848 363.629 16.848 cv
363.434 16.848 363.277 16.84 363.156 16.828 cv
363.027 16.812 362.926 16.797 362.855 16.77 cv
362.777 16.746 362.727 16.711 362.695 16.672 cv
362.664 16.633 362.648 16.59 362.648 16.535 cv
362.648 9.57397 li
362.648 9.52698 362.66 9.47998 362.688 9.43701 cv
362.711 9.40198 362.758 9.37097 362.828 9.34003 cv
362.895 9.31598 362.98 9.297 363.09 9.28101 cv
363.191 9.27301 363.328 9.26599 363.492 9.26202 cv
363.656 9.26599 363.793 9.27301 363.902 9.28101 cv
364.012 9.297 364.094 9.31598 364.156 9.34003 cv
364.211 9.37097 364.254 9.40198 364.285 9.43701 cv
364.309 9.47998 364.324 9.52698 364.324 9.57397 cv
364.324 10.441 li
364.504 10.184 364.676 9.96899 364.84 9.797 cv
365 9.633 365.152 9.49597 365.301 9.39502 cv
365.445 9.297 365.59 9.22998 365.738 9.18701 cv
365.879 9.15198 366.027 9.133 366.176 9.12903 cv
366.242 9.133 366.313 9.13702 366.395 9.14099 cv
366.469 9.15198 366.551 9.164 366.637 9.17999 cv
366.719 9.19897 366.793 9.21899 366.855 9.242 cv
366.918 9.26599 366.961 9.29303 366.992 9.31598 cv
367.016 9.34802 367.039 9.375 367.055 9.40198 cv
367.066 9.43701 367.078 9.47998 367.09 9.53101 cv
367.098 9.59003 367.105 9.672 367.113 9.77698 cv
367.117 9.89099 367.117 10.039 367.121 10.223 cv
cp
f
374.594 12.852 mo
374.59 13.094 374.539 13.273 374.434 13.383 cv
374.324 13.5 374.176 13.555 373.992 13.555 cv
369.754 13.555 li
369.75 13.852 369.785 14.121 369.859 14.363 cv
369.926 14.605 370.039 14.812 370.195 14.98 cv
370.348 15.148 370.547 15.277 370.789 15.363 cv
371.031 15.457 371.32 15.5 371.66 15.496 cv
372 15.5 372.301 15.477 372.566 15.422 cv
372.824 15.375 373.051 15.32 373.238 15.258 cv
373.426 15.203 373.582 15.148 373.711 15.094 cv
373.832 15.047 373.934 15.02 374.016 15.02 cv
374.059 15.02 374.098 15.031 374.133 15.047 cv
374.16 15.07 374.188 15.102 374.211 15.145 cv
374.23 15.195 374.242 15.262 374.254 15.344 cv
374.258 15.434 374.262 15.543 374.266 15.668 cv
374.262 15.785 374.262 15.883 374.258 15.961 cv
374.25 16.047 374.242 16.113 374.234 16.168 cv
374.223 16.227 374.207 16.277 374.188 16.312 cv
374.164 16.355 374.137 16.391 374.105 16.426 cv
374.07 16.465 373.977 16.516 373.828 16.574 cv
373.676 16.641 373.484 16.703 373.25 16.758 cv
373.016 16.82 372.746 16.867 372.449 16.914 cv
372.145 16.953 371.824 16.977 371.48 16.98 cv
370.859 16.977 370.316 16.902 369.852 16.746 cv
369.383 16.594 368.992 16.355 368.684 16.035 cv
368.371 15.719 368.141 15.32 367.988 14.836 cv
367.832 14.355 367.754 13.785 367.758 13.133 cv
367.754 12.516 367.836 11.961 368 11.461 cv
368.16 10.969 368.391 10.547 368.699 10.195 cv
369.004 9.85199 369.379 9.586 369.82 9.40198 cv
370.258 9.22302 370.754 9.133 371.309 9.12903 cv
371.891 9.133 372.387 9.21899 372.801 9.38702 cv
373.211 9.56201 373.551 9.80103 373.82 10.102 cv
374.082 10.41 374.277 10.77 374.406 11.184 cv
374.527 11.602 374.59 12.055 374.594 12.539 cv
cp
372.691 12.289 mo
372.703 11.738 372.594 11.309 372.359 10.992 cv
372.121 10.68 371.754 10.52 371.262 10.52 cv
371.008 10.52 370.789 10.566 370.609 10.66 cv
370.422 10.754 370.27 10.883 370.148 11.039 cv
370.023 11.199 369.93 11.383 369.867 11.598 cv
369.801 11.816 369.762 12.047 369.754 12.289 cv
cp
f
382.133 16.559 mo
382.133 16.637 382.105 16.691 382.055 16.73 cv
382 16.773 381.918 16.801 381.809 16.82 cv
381.695 16.836 381.531 16.848 381.313 16.848 cv
381.078 16.848 380.906 16.836 380.805 16.82 cv
380.695 16.801 380.621 16.773 380.578 16.73 cv
380.531 16.691 380.508 16.637 380.512 16.559 cv
380.512 16.004 li
380.223 16.312 379.898 16.555 379.531 16.723 cv
379.164 16.895 378.754 16.977 378.309 16.98 cv
377.934 16.977 377.594 16.93 377.289 16.836 cv
376.977 16.742 376.711 16.602 376.488 16.406 cv
376.258 16.219 376.082 15.98 375.961 15.699 cv
375.832 15.418 375.77 15.094 375.773 14.719 cv
375.77 14.316 375.848 13.961 376.012 13.66 cv
376.168 13.363 376.406 13.117 376.719 12.918 cv
377.031 12.727 377.422 12.582 377.895 12.484 cv
378.359 12.395 378.902 12.348 379.527 12.344 cv
380.207 12.344 li
380.207 11.922 li
380.203 11.707 380.184 11.516 380.141 11.348 cv
380.094 11.187 380.02 11.051 379.922 10.941 cv
379.816 10.832 379.68 10.754 379.516 10.699 cv
379.344 10.652 379.137 10.625 378.887 10.621 cv
378.559 10.625 378.266 10.66 378.008 10.73 cv
377.75 10.805 377.52 10.887 377.324 10.973 cv
377.125 11.062 376.961 11.141 376.832 11.211 cv
376.695 11.285 376.59 11.324 376.508 11.32 cv
376.449 11.324 376.398 11.305 376.355 11.266 cv
376.309 11.23 376.27 11.18 376.246 11.109 cv
376.215 11.047 376.195 10.965 376.18 10.863 cv
376.164 10.77 376.156 10.66 376.156 10.535 cv
376.156 10.379 376.168 10.25 376.195 10.152 cv
376.219 10.062 376.27 9.97699 376.344 9.89801 cv
376.414 9.82397 376.539 9.742 376.727 9.64801 cv
376.906 9.55902 377.121 9.47302 377.363 9.39502 cv
377.605 9.31598 377.871 9.25403 378.164 9.203 cv
378.449 9.15601 378.746 9.133 379.059 9.12903 cv
379.602 9.133 380.07 9.18402 380.461 9.289 cv
380.848 9.39801 381.164 9.56201 381.414 9.78101 cv
381.66 10.004 381.844 10.289 381.961 10.637 cv
382.074 10.984 382.133 11.398 382.133 11.875 cv
cp
380.207 13.578 mo
379.457 13.578 li
379.137 13.578 378.867 13.602 378.645 13.648 cv
378.418 13.695 378.234 13.766 378.098 13.859 cv
377.953 13.953 377.852 14.066 377.789 14.199 cv
377.723 14.332 377.691 14.484 377.691 14.656 cv
377.691 14.945 377.781 15.176 377.969 15.34 cv
378.148 15.512 378.406 15.594 378.738 15.59 cv
379.012 15.594 379.266 15.523 379.5 15.379 cv
379.73 15.242 379.965 15.039 380.207 14.766 cv
cp
f
390.699 16.535 mo
390.695 16.598 390.684 16.645 390.66 16.68 cv
390.633 16.723 390.586 16.754 390.527 16.777 cv
390.461 16.801 390.379 16.816 390.273 16.832 cv
390.164 16.84 390.031 16.848 389.879 16.848 cv
389.711 16.848 389.574 16.84 389.473 16.832 cv
389.363 16.816 389.281 16.801 389.219 16.777 cv
389.152 16.754 389.105 16.723 389.078 16.68 cv
389.047 16.645 389.031 16.598 389.035 16.535 cv
389.035 15.762 li
388.676 16.152 388.301 16.449 387.91 16.66 cv
387.516 16.871 387.078 16.977 386.602 16.98 cv
386.066 16.977 385.617 16.875 385.254 16.672 cv
384.887 16.469 384.59 16.191 384.359 15.84 cv
384.125 15.492 383.957 15.086 383.855 14.621 cv
383.75 14.156 383.699 13.668 383.699 13.148 cv
383.699 12.531 383.766 11.973 383.898 11.48 cv
384.031 10.988 384.223 10.566 384.48 10.215 cv
384.73 9.867 385.047 9.60199 385.43 9.40997 cv
385.805 9.22699 386.242 9.133 386.742 9.12903 cv
387.129 9.133 387.484 9.211 387.805 9.367 cv
388.121 9.52698 388.438 9.76202 388.75 10.066 cv
388.75 6.297 li
388.75 6.24597 388.762 6.19897 388.793 6.15601 cv
388.816 6.117 388.867 6.08197 388.945 6.05103 cv
389.016 6.02301 389.117 6 389.246 5.98401 cv
389.367 5.96899 389.527 5.961 389.723 5.961 cv
389.914 5.961 390.07 5.96899 390.199 5.98401 cv
390.32 6 390.422 6.02301 390.496 6.05103 cv
390.566 6.08197 390.617 6.117 390.652 6.15601 cv
390.68 6.19897 390.695 6.24597 390.699 6.297 cv
cp
388.75 11.883 mo
388.469 11.531 388.199 11.262 387.941 11.074 cv
387.684 10.891 387.414 10.797 387.133 10.793 cv
386.875 10.797 386.652 10.859 386.473 10.984 cv
386.285 11.113 386.137 11.281 386.027 11.492 cv
385.91 11.707 385.828 11.945 385.777 12.207 cv
385.719 12.473 385.691 12.742 385.695 13.016 cv
385.691 13.309 385.715 13.594 385.766 13.867 cv
385.809 14.145 385.887 14.391 385.996 14.605 cv
386.102 14.82 386.242 14.992 386.422 15.121 cv
386.598 15.254 386.82 15.32 387.094 15.316 cv
387.227 15.32 387.359 15.301 387.488 15.258 cv
387.613 15.223 387.742 15.156 387.879 15.066 cv
388.008 14.98 388.145 14.867 388.289 14.723 cv
388.426 14.582 388.582 14.406 388.75 14.195 cv
cp
f
397.582 14.57 mo
397.582 14.965 397.508 15.312 397.359 15.613 cv
397.211 15.918 397 16.172 396.734 16.371 cv
396.461 16.578 396.141 16.727 395.773 16.828 cv
395.398 16.926 395 16.977 394.57 16.98 cv
394.309 16.977 394.059 16.957 393.824 16.922 cv
393.586 16.879 393.375 16.832 393.191 16.773 cv
393 16.715 392.844 16.652 392.723 16.59 cv
392.594 16.527 392.504 16.469 392.449 16.414 cv
392.391 16.359 392.344 16.273 392.316 16.156 cv
392.281 16.039 392.266 15.867 392.27 15.637 cv
392.266 15.488 392.273 15.367 392.285 15.273 cv
392.293 15.184 392.309 15.109 392.332 15.055 cv
392.352 15 392.375 14.965 392.41 14.945 cv
392.438 14.93 392.477 14.922 392.527 14.918 cv
392.582 14.922 392.668 14.953 392.781 15.016 cv
392.891 15.082 393.031 15.152 393.199 15.23 cv
393.363 15.309 393.555 15.383 393.777 15.449 cv
393.996 15.52 394.246 15.555 394.531 15.551 cv
394.703 15.555 394.863 15.535 395.004 15.496 cv
395.141 15.461 395.258 15.41 395.363 15.34 cv
395.461 15.277 395.539 15.191 395.594 15.082 cv
395.645 14.98 395.672 14.859 395.672 14.727 cv
395.672 14.57 395.621 14.437 395.527 14.324 cv
395.426 14.215 395.301 14.117 395.145 14.031 cv
394.984 13.949 394.805 13.871 394.605 13.797 cv
394.402 13.727 394.195 13.645 393.988 13.555 cv
393.773 13.469 393.566 13.367 393.371 13.25 cv
393.168 13.137 392.992 12.996 392.836 12.828 cv
392.676 12.664 392.547 12.465 392.453 12.227 cv
392.355 11.996 392.309 11.715 392.309 11.383 cv
392.309 11.055 392.371 10.75 392.504 10.469 cv
392.629 10.191 392.816 9.953 393.066 9.75403 cv
393.309 9.55902 393.605 9.40601 393.957 9.29303 cv
394.305 9.18701 394.699 9.133 395.141 9.12903 cv
395.355 9.133 395.57 9.14801 395.777 9.17603 cv
395.98 9.211 396.164 9.25 396.336 9.29303 cv
396.5 9.34399 396.641 9.39502 396.758 9.44501 cv
396.867 9.50403 396.949 9.55103 397.004 9.586 cv
397.051 9.62903 397.086 9.66803 397.109 9.703 cv
397.125 9.74597 397.141 9.79303 397.156 9.84399 cv
397.164 9.90198 397.176 9.96899 397.184 10.047 cv
397.191 10.129 397.195 10.23 397.195 10.348 cv
397.195 10.492 397.191 10.605 397.184 10.691 cv
397.176 10.781 397.16 10.852 397.145 10.902 cv
397.121 10.953 397.098 10.988 397.07 11.004 cv
397.035 11.027 397 11.035 396.961 11.031 cv
396.914 11.035 396.84 11.008 396.742 10.953 cv
396.641 10.898 396.516 10.84 396.371 10.777 cv
396.219 10.715 396.047 10.656 395.855 10.602 cv
395.656 10.547 395.434 10.52 395.188 10.52 cv
395.008 10.52 394.855 10.539 394.727 10.574 cv
394.594 10.613 394.488 10.664 394.406 10.73 cv
394.32 10.801 394.258 10.883 394.219 10.969 cv
394.176 11.062 394.152 11.156 394.156 11.258 cv
394.152 11.422 394.203 11.559 394.305 11.664 cv
394.402 11.777 394.531 11.875 394.695 11.953 cv
394.852 12.039 395.035 12.117 395.246 12.187 cv
395.449 12.266 395.66 12.344 395.871 12.426 cv
396.082 12.516 396.289 12.617 396.496 12.727 cv
396.699 12.844 396.883 12.984 397.047 13.148 cv
397.207 13.32 397.336 13.52 397.434 13.746 cv
397.531 13.98 397.582 14.254 397.582 14.57 cv
cp
f
406.262 12.875 mo
406.258 13.18 406.23 13.391 406.176 13.508 cv
406.117 13.629 406.023 13.691 405.902 13.687 cv
402.656 13.687 li
402.523 13.691 402.43 13.629 402.375 13.504 cv
402.313 13.383 402.285 13.172 402.289 12.875 cv
402.285 12.586 402.313 12.383 402.375 12.258 cv
402.43 12.141 402.523 12.078 402.656 12.078 cv
405.902 12.078 li
405.961 12.078 406.016 12.094 406.063 12.117 cv
406.105 12.148 406.145 12.191 406.176 12.25 cv
406.207 12.316 406.227 12.398 406.242 12.5 cv
406.25 12.605 406.258 12.73 406.262 12.875 cv
cp
f
417 15.941 mo
416.996 16.102 416.988 16.234 416.98 16.336 cv
416.965 16.445 416.945 16.531 416.922 16.602 cv
416.891 16.672 416.859 16.723 416.824 16.754 cv
416.781 16.785 416.734 16.801 416.688 16.801 cv
412.063 16.801 li
411.891 16.801 411.746 16.75 411.629 16.648 cv
411.512 16.547 411.453 16.383 411.453 16.152 cv
411.453 6.98401 li
411.453 6.93701 411.469 6.89099 411.504 6.84399 cv
411.535 6.80499 411.59 6.77002 411.672 6.742 cv
411.746 6.71899 411.852 6.69897 411.988 6.67999 cv
412.117 6.66803 412.281 6.65997 412.48 6.65601 cv
412.68 6.65997 412.848 6.66803 412.98 6.67999 cv
413.109 6.69897 413.215 6.71899 413.293 6.742 cv
413.371 6.77002 413.426 6.80499 413.461 6.84399 cv
413.492 6.89099 413.508 6.93701 413.512 6.98401 cv
413.512 15.105 li
416.688 15.105 li
416.734 15.109 416.781 15.121 416.824 15.148 cv
416.859 15.18 416.891 15.227 416.922 15.289 cv
416.945 15.355 416.965 15.441 416.98 15.547 cv
416.988 15.656 416.996 15.789 417 15.941 cv
cp
f
425.133 12.984 mo
425.129 13.582 425.051 14.121 424.898 14.609 cv
424.738 15.098 424.504 15.52 424.188 15.871 cv
423.867 16.227 423.469 16.5 422.992 16.691 cv
422.516 16.883 421.957 16.977 421.316 16.98 cv
420.695 16.977 420.156 16.895 419.699 16.723 cv
419.242 16.555 418.863 16.305 418.563 15.973 cv
418.258 15.648 418.031 15.246 417.891 14.766 cv
417.742 14.289 417.672 13.742 417.672 13.125 cv
417.672 12.535 417.75 11.992 417.91 11.5 cv
418.066 11.012 418.305 10.59 418.621 10.234 cv
418.938 9.88702 419.332 9.61298 419.813 9.41803 cv
420.285 9.22699 420.844 9.133 421.488 9.12903 cv
422.109 9.133 422.652 9.21503 423.109 9.383 cv
423.566 9.55499 423.945 9.80499 424.246 10.129 cv
424.543 10.461 424.766 10.863 424.914 11.34 cv
425.059 11.816 425.129 12.367 425.133 12.984 cv
cp
423.109 13.062 mo
423.109 12.719 423.082 12.402 423.027 12.113 cv
422.973 11.824 422.879 11.574 422.754 11.359 cv
422.621 11.148 422.449 10.984 422.234 10.863 cv
422.016 10.746 421.742 10.684 421.418 10.684 cv
421.121 10.684 420.867 10.738 420.652 10.844 cv
420.43 10.949 420.25 11.105 420.113 11.309 cv
419.969 11.52 419.863 11.766 419.797 12.051 cv
419.723 12.344 419.688 12.672 419.691 13.039 cv
419.688 13.383 419.715 13.699 419.777 13.988 cv
419.832 14.277 419.926 14.531 420.055 14.742 cv
420.18 14.957 420.352 15.121 420.574 15.234 cv
420.789 15.355 421.063 15.414 421.387 15.41 cv
421.684 15.414 421.941 15.359 422.16 15.25 cv
422.379 15.145 422.559 14.992 422.699 14.789 cv
422.84 14.59 422.941 14.344 423.008 14.051 cv
423.074 13.766 423.109 13.434 423.109 13.062 cv
cp
f
431.961 15.426 mo
431.957 15.562 431.953 15.676 431.949 15.766 cv
431.938 15.859 431.926 15.937 431.918 15.996 cv
431.902 16.062 431.887 16.113 431.871 16.148 cv
431.848 16.191 431.809 16.238 431.75 16.297 cv
431.684 16.359 431.578 16.434 431.43 16.516 cv
431.281 16.605 431.109 16.684 430.918 16.746 cv
430.723 16.816 430.512 16.867 430.289 16.91 cv
430.059 16.949 429.828 16.969 429.59 16.973 cv
429.051 16.969 428.574 16.891 428.164 16.723 cv
427.75 16.559 427.402 16.312 427.125 15.984 cv
426.84 15.664 426.629 15.266 426.488 14.797 cv
426.344 14.328 426.273 13.793 426.273 13.187 cv
426.273 12.492 426.359 11.891 426.535 11.383 cv
426.707 10.879 426.949 10.457 427.262 10.121 cv
427.57 9.789 427.941 9.54303 428.371 9.37903 cv
428.797 9.21899 429.266 9.13702 429.777 9.13702 cv
429.984 9.13702 430.188 9.15601 430.391 9.19098 cv
430.59 9.22998 430.777 9.28101 430.953 9.34003 cv
431.125 9.40601 431.281 9.47699 431.418 9.55103 cv
431.555 9.633 431.652 9.69897 431.711 9.75403 cv
431.766 9.81201 431.805 9.85901 431.832 9.89801 cv
431.852 9.93701 431.871 9.98798 431.887 10.051 cv
431.898 10.113 431.906 10.191 431.918 10.281 cv
431.922 10.375 431.926 10.484 431.93 10.613 cv
431.926 10.914 431.902 11.125 431.852 11.246 cv
431.797 11.371 431.727 11.434 431.648 11.43 cv
431.559 11.434 431.469 11.398 431.371 11.32 cv
431.27 11.25 431.152 11.168 431.02 11.082 cv
430.883 10.996 430.719 10.918 430.535 10.84 cv
430.344 10.77 430.121 10.73 429.863 10.73 cv
429.352 10.73 428.961 10.93 428.691 11.32 cv
428.418 11.715 428.281 12.289 428.285 13.047 cv
428.281 13.426 428.316 13.758 428.387 14.039 cv
428.453 14.328 428.555 14.566 428.688 14.758 cv
428.82 14.949 428.984 15.094 429.188 15.187 cv
429.383 15.289 429.617 15.336 429.887 15.332 cv
430.156 15.336 430.391 15.297 430.586 15.211 cv
430.781 15.133 430.949 15.043 431.098 14.945 cv
431.238 14.848 431.359 14.758 431.461 14.676 cv
431.555 14.598 431.641 14.559 431.711 14.555 cv
431.758 14.559 431.797 14.57 431.828 14.594 cv
431.859 14.621 431.883 14.668 431.902 14.738 cv
431.918 14.809 431.934 14.898 431.945 15.008 cv
431.953 15.117 431.957 15.258 431.961 15.426 cv
cp
f
439.227 16.559 mo
439.227 16.637 439.199 16.691 439.148 16.73 cv
439.094 16.773 439.012 16.801 438.902 16.82 cv
438.789 16.836 438.625 16.848 438.406 16.848 cv
438.172 16.848 438 16.836 437.898 16.82 cv
437.789 16.801 437.715 16.773 437.672 16.73 cv
437.625 16.691 437.602 16.637 437.605 16.559 cv
437.605 16.004 li
437.316 16.312 436.992 16.555 436.625 16.723 cv
436.258 16.895 435.848 16.977 435.402 16.98 cv
435.027 16.977 434.688 16.93 434.383 16.836 cv
434.07 16.742 433.805 16.602 433.582 16.406 cv
433.352 16.219 433.176 15.98 433.055 15.699 cv
432.926 15.418 432.863 15.094 432.867 14.719 cv
432.863 14.316 432.941 13.961 433.105 13.66 cv
433.262 13.363 433.5 13.117 433.813 12.918 cv
434.125 12.727 434.516 12.582 434.988 12.484 cv
435.453 12.395 435.996 12.348 436.621 12.344 cv
437.301 12.344 li
437.301 11.922 li
437.297 11.707 437.277 11.516 437.234 11.348 cv
437.188 11.187 437.113 11.051 437.016 10.941 cv
436.91 10.832 436.773 10.754 436.609 10.699 cv
436.438 10.652 436.23 10.625 435.98 10.621 cv
435.652 10.625 435.359 10.66 435.102 10.73 cv
434.844 10.805 434.613 10.887 434.418 10.973 cv
434.219 11.062 434.055 11.141 433.926 11.211 cv
433.789 11.285 433.684 11.324 433.602 11.32 cv
433.543 11.324 433.492 11.305 433.449 11.266 cv
433.402 11.23 433.363 11.18 433.34 11.109 cv
433.309 11.047 433.289 10.965 433.273 10.863 cv
433.258 10.77 433.25 10.66 433.25 10.535 cv
433.25 10.379 433.262 10.25 433.289 10.152 cv
433.313 10.062 433.363 9.97699 433.438 9.89801 cv
433.508 9.82397 433.633 9.742 433.82 9.64801 cv
434 9.55902 434.215 9.47302 434.457 9.39502 cv
434.699 9.31598 434.965 9.25403 435.258 9.203 cv
435.543 9.15601 435.84 9.133 436.152 9.12903 cv
436.695 9.133 437.164 9.18402 437.555 9.289 cv
437.941 9.39801 438.258 9.56201 438.508 9.78101 cv
438.754 10.004 438.938 10.289 439.055 10.637 cv
439.168 10.984 439.227 11.398 439.227 11.875 cv
cp
437.301 13.578 mo
436.551 13.578 li
436.23 13.578 435.961 13.602 435.738 13.648 cv
435.512 13.695 435.328 13.766 435.191 13.859 cv
435.047 13.953 434.945 14.066 434.883 14.199 cv
434.816 14.332 434.785 14.484 434.785 14.656 cv
434.785 14.945 434.875 15.176 435.063 15.34 cv
435.242 15.512 435.5 15.594 435.832 15.59 cv
436.105 15.594 436.359 15.523 436.594 15.379 cv
436.824 15.242 437.059 15.039 437.301 14.766 cv
cp
f
443.156 16.535 mo
443.152 16.59 443.137 16.633 443.109 16.672 cv
443.074 16.711 443.023 16.746 442.949 16.77 cv
442.871 16.797 442.77 16.812 442.648 16.828 cv
442.52 16.84 442.359 16.848 442.172 16.848 cv
441.977 16.848 441.82 16.84 441.699 16.828 cv
441.57 16.812 441.469 16.797 441.398 16.77 cv
441.32 16.746 441.27 16.711 441.238 16.672 cv
441.207 16.633 441.191 16.59 441.191 16.535 cv
441.191 6.27301 li
441.191 6.22302 441.207 6.17603 441.238 6.133 cv
441.27 6.09399 441.32 6.05902 441.398 6.02698 cv
441.469 6 441.57 5.97699 441.699 5.961 cv
441.82 5.94501 441.977 5.93701 442.172 5.93701 cv
442.359 5.93701 442.52 5.94501 442.648 5.961 cv
442.77 5.97699 442.871 6 442.949 6.02698 cv
443.023 6.05902 443.074 6.09399 443.109 6.133 cv
443.137 6.17603 443.152 6.22302 443.156 6.27301 cv
cp
f
460.656 16.52 mo
460.652 16.574 460.637 16.621 460.613 16.66 cv
460.582 16.703 460.531 16.738 460.457 16.762 cv
460.379 16.789 460.277 16.809 460.156 16.824 cv
460.027 16.84 459.871 16.848 459.68 16.848 cv
459.492 16.848 459.336 16.84 459.211 16.824 cv
459.086 16.809 458.984 16.789 458.914 16.762 cv
458.836 16.738 458.785 16.703 458.758 16.66 cv
458.723 16.621 458.707 16.574 458.711 16.52 cv
458.711 8.30103 li
458.695 8.30103 li
455.77 16.512 li
455.746 16.582 455.711 16.637 455.668 16.68 cv
455.617 16.727 455.555 16.762 455.477 16.785 cv
455.395 16.812 455.293 16.828 455.168 16.836 cv
455.043 16.844 454.891 16.848 454.715 16.848 cv
454.535 16.848 454.383 16.84 454.262 16.828 cv
454.133 16.812 454.031 16.793 453.953 16.766 cv
453.871 16.738 453.809 16.703 453.762 16.66 cv
453.715 16.621 453.684 16.574 453.668 16.512 cv
450.844 8.30103 li
450.828 8.30103 li
450.828 16.52 li
450.824 16.574 450.813 16.621 450.785 16.66 cv
450.754 16.703 450.699 16.738 450.625 16.762 cv
450.543 16.789 450.441 16.809 450.324 16.824 cv
450.199 16.84 450.043 16.848 449.852 16.848 cv
449.664 16.848 449.508 16.84 449.387 16.824 cv
449.258 16.809 449.16 16.789 449.086 16.762 cv
449.008 16.738 448.953 16.703 448.93 16.66 cv
448.898 16.621 448.887 16.574 448.887 16.52 cv
448.887 7.52002 li
448.887 7.25403 448.957 7.05499 449.098 6.914 cv
449.238 6.77698 449.426 6.70697 449.66 6.703 cv
451 6.703 li
451.238 6.70697 451.445 6.72699 451.617 6.76202 cv
451.789 6.80499 451.938 6.867 452.063 6.95697 cv
452.188 7.047 452.289 7.16803 452.375 7.31201 cv
452.453 7.46503 452.527 7.64801 452.594 7.86298 cv
454.777 13.883 li
454.809 13.883 li
457.074 7.87903 li
457.137 7.664 457.211 7.47998 457.297 7.32397 cv
457.375 7.17603 457.469 7.05499 457.574 6.961 cv
457.68 6.87097 457.805 6.80499 457.953 6.76202 cv
458.094 6.72699 458.266 6.70697 458.461 6.703 cv
459.844 6.703 li
459.984 6.70697 460.105 6.72302 460.207 6.758 cv
460.309 6.797 460.391 6.85199 460.457 6.91803 cv
460.52 6.992 460.57 7.078 460.605 7.17603 cv
460.637 7.27698 460.652 7.39099 460.656 7.52002 cv
cp
f
469.715 12.984 mo
469.711 13.582 469.633 14.121 469.48 14.609 cv
469.32 15.098 469.086 15.52 468.77 15.871 cv
468.449 16.227 468.051 16.5 467.574 16.691 cv
467.098 16.883 466.539 16.977 465.898 16.98 cv
465.277 16.977 464.738 16.895 464.281 16.723 cv
463.824 16.555 463.445 16.305 463.145 15.973 cv
462.84 15.648 462.613 15.246 462.473 14.766 cv
462.324 14.289 462.254 13.742 462.254 13.125 cv
462.254 12.535 462.332 11.992 462.492 11.5 cv
462.648 11.012 462.887 10.59 463.203 10.234 cv
463.52 9.88702 463.914 9.61298 464.395 9.41803 cv
464.867 9.22699 465.426 9.133 466.07 9.12903 cv
466.691 9.133 467.234 9.21503 467.691 9.383 cv
468.148 9.55499 468.527 9.80499 468.828 10.129 cv
469.125 10.461 469.348 10.863 469.496 11.34 cv
469.641 11.816 469.711 12.367 469.715 12.984 cv
cp
467.691 13.062 mo
467.691 12.719 467.664 12.402 467.609 12.113 cv
467.555 11.824 467.461 11.574 467.336 11.359 cv
467.203 11.148 467.031 10.984 466.816 10.863 cv
466.598 10.746 466.324 10.684 466 10.684 cv
465.703 10.684 465.449 10.738 465.234 10.844 cv
465.012 10.949 464.832 11.105 464.695 11.309 cv
464.551 11.52 464.445 11.766 464.379 12.051 cv
464.305 12.344 464.27 12.672 464.273 13.039 cv
464.27 13.383 464.297 13.699 464.359 13.988 cv
464.414 14.277 464.508 14.531 464.637 14.742 cv
464.762 14.957 464.934 15.121 465.156 15.234 cv
465.371 15.355 465.645 15.414 465.969 15.41 cv
466.266 15.414 466.523 15.359 466.742 15.25 cv
466.961 15.145 467.141 14.992 467.281 14.789 cv
467.422 14.59 467.523 14.344 467.59 14.051 cv
467.656 13.766 467.691 13.434 467.691 13.062 cv
cp
f
477.875 16.535 mo
477.871 16.598 477.859 16.645 477.836 16.68 cv
477.809 16.723 477.762 16.754 477.703 16.777 cv
477.637 16.801 477.555 16.816 477.449 16.832 cv
477.34 16.84 477.207 16.848 477.055 16.848 cv
476.887 16.848 476.75 16.84 476.648 16.832 cv
476.539 16.816 476.457 16.801 476.395 16.777 cv
476.328 16.754 476.281 16.723 476.254 16.68 cv
476.223 16.645 476.207 16.598 476.211 16.535 cv
476.211 15.762 li
475.852 16.152 475.477 16.449 475.086 16.66 cv
474.691 16.871 474.254 16.977 473.777 16.98 cv
473.242 16.977 472.793 16.875 472.43 16.672 cv
472.063 16.469 471.766 16.191 471.535 15.84 cv
471.301 15.492 471.133 15.086 471.031 14.621 cv
470.926 14.156 470.875 13.668 470.875 13.148 cv
470.875 12.531 470.941 11.973 471.074 11.48 cv
471.207 10.988 471.398 10.566 471.656 10.215 cv
471.906 9.867 472.223 9.60199 472.605 9.40997 cv
472.98 9.22699 473.418 9.133 473.918 9.12903 cv
474.305 9.133 474.66 9.211 474.98 9.367 cv
475.297 9.52698 475.613 9.76202 475.926 10.066 cv
475.926 6.297 li
475.926 6.24597 475.938 6.19897 475.969 6.15601 cv
475.992 6.117 476.043 6.08197 476.121 6.05103 cv
476.191 6.02301 476.293 6 476.422 5.98401 cv
476.543 5.96899 476.703 5.961 476.898 5.961 cv
477.09 5.961 477.246 5.96899 477.375 5.98401 cv
477.496 6 477.598 6.02301 477.672 6.05103 cv
477.742 6.08197 477.793 6.117 477.828 6.15601 cv
477.855 6.19897 477.871 6.24597 477.875 6.297 cv
cp
475.926 11.883 mo
475.645 11.531 475.375 11.262 475.117 11.074 cv
474.859 10.891 474.59 10.797 474.309 10.793 cv
474.051 10.797 473.828 10.859 473.648 10.984 cv
473.461 11.113 473.313 11.281 473.203 11.492 cv
473.086 11.707 473.004 11.945 472.953 12.207 cv
472.895 12.473 472.867 12.742 472.871 13.016 cv
472.867 13.309 472.891 13.594 472.941 13.867 cv
472.984 14.145 473.063 14.391 473.172 14.605 cv
473.277 14.82 473.418 14.992 473.598 15.121 cv
473.773 15.254 473.996 15.32 474.27 15.316 cv
474.402 15.32 474.535 15.301 474.664 15.258 cv
474.789 15.223 474.918 15.156 475.055 15.066 cv
475.184 14.98 475.32 14.867 475.465 14.723 cv
475.602 14.582 475.758 14.406 475.926 14.195 cv
cp
f
486.289 12.852 mo
486.285 13.094 486.234 13.273 486.129 13.383 cv
486.02 13.5 485.871 13.555 485.688 13.555 cv
481.449 13.555 li
481.445 13.852 481.48 14.121 481.555 14.363 cv
481.621 14.605 481.734 14.812 481.891 14.98 cv
482.043 15.148 482.242 15.277 482.484 15.363 cv
482.727 15.457 483.016 15.5 483.355 15.496 cv
483.695 15.5 483.996 15.477 484.262 15.422 cv
484.52 15.375 484.746 15.32 484.934 15.258 cv
485.121 15.203 485.277 15.148 485.406 15.094 cv
485.527 15.047 485.629 15.02 485.711 15.02 cv
485.754 15.02 485.793 15.031 485.828 15.047 cv
485.855 15.07 485.883 15.102 485.906 15.145 cv
485.926 15.195 485.938 15.262 485.949 15.344 cv
485.953 15.434 485.957 15.543 485.961 15.668 cv
485.957 15.785 485.957 15.883 485.953 15.961 cv
485.945 16.047 485.938 16.113 485.93 16.168 cv
485.918 16.227 485.902 16.277 485.883 16.312 cv
485.859 16.355 485.832 16.391 485.801 16.426 cv
485.766 16.465 485.672 16.516 485.523 16.574 cv
485.371 16.641 485.18 16.703 484.945 16.758 cv
484.711 16.82 484.441 16.867 484.145 16.914 cv
483.84 16.953 483.52 16.977 483.176 16.98 cv
482.555 16.977 482.012 16.902 481.547 16.746 cv
481.078 16.594 480.688 16.355 480.379 16.035 cv
480.066 15.719 479.836 15.32 479.684 14.836 cv
479.527 14.355 479.449 13.785 479.453 13.133 cv
479.449 12.516 479.531 11.961 479.695 11.461 cv
479.855 10.969 480.086 10.547 480.395 10.195 cv
480.699 9.85199 481.074 9.586 481.516 9.40198 cv
481.953 9.22302 482.449 9.133 483.004 9.12903 cv
483.586 9.133 484.082 9.21899 484.496 9.38702 cv
484.906 9.56201 485.246 9.80103 485.516 10.102 cv
485.777 10.41 485.973 10.77 486.102 11.184 cv
486.223 11.602 486.285 12.055 486.289 12.539 cv
cp
484.387 12.289 mo
484.398 11.738 484.289 11.309 484.055 10.992 cv
483.816 10.68 483.449 10.52 482.957 10.52 cv
482.703 10.52 482.484 10.566 482.305 10.66 cv
482.117 10.754 481.965 10.883 481.844 11.039 cv
481.719 11.199 481.625 11.383 481.563 11.598 cv
481.496 11.816 481.457 12.047 481.449 12.289 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
