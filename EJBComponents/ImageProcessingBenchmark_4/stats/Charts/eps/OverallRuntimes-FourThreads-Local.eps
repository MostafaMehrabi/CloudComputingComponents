%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntimes-FourThreads-Local.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 13/12/2018, 11:39:45 a.m.
%%BoundingBox: 0 0 639 546
%%HiResBoundingBox: 0 0 638.5201 545.1601
%%CropBox: 0 0 638.5201 545.1601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -545.16 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 545.16 li
638.52 545.16 li
638.52 0 li
cp
clp
gsave
0 545.16 mo
639 545.16 li
639 -.839966 li
0 -.839966 li
cp
clp
0 6.10352e-5 mo
638.52 6.10352e-5 li
638.52 545.16 li
0 545.16 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
59.879 481.922 mo
625.441 481.922 li
59.879 464.281 mo
625.441 464.281 li
59.879 429.121 mo
625.441 429.121 li
59.879 411.602 mo
625.441 411.602 li
59.879 376.441 mo
625.441 376.441 li
59.879 358.801 mo
625.441 358.801 li
59.879 323.641 mo
625.441 323.641 li
59.879 306.121 mo
625.441 306.121 li
59.879 270.961 mo
625.441 270.961 li
59.879 253.32 mo
625.441 253.32 li
59.879 218.16 mo
625.441 218.16 li
59.879 200.641 mo
625.441 200.641 li
59.879 165.48 mo
625.441 165.48 li
59.879 147.84 mo
625.441 147.84 li
59.879 112.68 mo
625.441 112.68 li
59.879 95.16 mo
625.441 95.16 li
59.879 60 mo
625.441 60 li
59.879 42.359 mo
625.441 42.359 li
.140414 .108034 .108034 0 cmyk
@
59.879 446.762 mo
625.441 446.762 li
59.879 393.961 mo
625.441 393.961 li
59.879 341.281 mo
625.441 341.281 li
59.879 288.48 mo
625.441 288.48 li
59.879 235.801 mo
625.441 235.801 li
59.879 183 mo
625.441 183 li
59.879 130.32 mo
625.441 130.32 li
59.879 77.519 mo
625.441 77.519 li
59.879 24.84 mo
625.441 24.84 li
.246403 .201175 .450446 .000885023 cmyk
@
95.281 24.84 mo
95.281 499.441 li
165.961 24.84 mo
165.961 499.441 li
236.641 24.84 mo
236.641 499.441 li
307.32 24.84 mo
307.32 499.441 li
378 24.84 mo
378 499.441 li
448.68 24.84 mo
448.68 499.441 li
519.359 24.84 mo
519.359 499.441 li
590.16 24.84 mo
590.16 499.441 li
.131685 .102663 .236637 0 cmyk
@
59.879 24.84 mo
59.879 499.441 li
130.559 24.84 mo
130.559 499.441 li
201.238 24.84 mo
201.238 499.441 li
271.922 24.84 mo
271.922 499.441 li
342.719 24.84 mo
342.719 499.441 li
413.398 24.84 mo
413.398 499.441 li
484.078 24.84 mo
484.078 499.441 li
554.762 24.84 mo
554.762 499.441 li
625.441 24.84 mo
625.441 499.441 li
.246403 .201175 .450446 .000885023 cmyk
@
29.16 490.199 mo
46.922 490.199 li
46.922 507.238 li
29.16 507.238 li
cp
0 0 0 0 cmyk
ef
29.16 437.398 mo
46.922 437.398 li
46.922 454.441 li
29.16 454.441 li
cp
ef
29.16 384.719 mo
46.922 384.719 li
46.922 401.762 li
29.16 401.762 li
cp
ef
29.16 331.922 mo
46.922 331.922 li
46.922 348.961 li
29.16 348.961 li
cp
ef
29.16 279.238 mo
46.922 279.238 li
46.922 296.281 li
29.16 296.281 li
cp
ef
29.16 226.441 mo
46.922 226.441 li
46.922 243.601 li
29.16 243.601 li
cp
ef
29.16 173.762 mo
46.922 173.762 li
46.922 190.801 li
29.16 190.801 li
cp
ef
22.078 120.961 mo
46.922 120.961 li
46.922 138.121 li
22.078 138.121 li
cp
ef
22.078 68.281 mo
46.922 68.281 li
46.922 85.32 li
22.078 85.32 li
cp
ef
22.078 15.48 mo
46.922 15.48 li
46.922 32.64 li
22.078 32.64 li
cp
ef
.96 lw
59.879 499.441 mo
625.441 499.441 li
.367803 .29575 .300999 .00198367 cmyk
@
59.879 499.441 mo
59.879 503.879 li
130.559 499.441 mo
130.559 503.879 li
201.238 499.441 mo
201.238 503.879 li
271.922 499.441 mo
271.922 503.879 li
342.719 499.441 mo
342.719 503.879 li
413.398 499.441 mo
413.398 503.879 li
484.078 499.441 mo
484.078 503.879 li
554.762 499.441 mo
554.762 503.879 li
625.441 499.441 mo
625.441 503.879 li
@
gsave
59.879 24.84 mo
626.16 24.84 li
626.16 500.16 li
59.879 500.16 li
cp
clp
1 lc
59.879 483.602 mo
130.559 491.398 li
201.238 495.602 li
271.922 493.078 li
342.719 494.879 li
413.398 494.16 li
484.078 494.16 li
554.762 493.801 li
625.441 494.16 li
.719875 .440223 .0276493 0 cmyk
@
grestore
1 lw
64.852 488.699 mo
54.77 478.621 li
54.77 488.699 mo
64.852 478.621 li
.719875 .440223 .0276493 0 cmyk
@
135.648 496.379 mo
125.57 486.301 li
125.57 496.379 mo
135.648 486.301 li
@
206.328 500.578 mo
196.25 490.5 li
196.25 500.578 mo
206.328 490.5 li
@
277.012 498.18 mo
266.93 488.102 li
266.93 498.18 mo
277.012 488.102 li
@
347.691 499.98 mo
337.609 489.898 li
337.609 499.98 mo
347.691 489.898 li
@
418.371 499.262 mo
408.289 489.18 li
408.289 499.262 mo
418.371 489.18 li
@
489.051 499.262 mo
478.969 489.18 li
478.969 499.262 mo
489.051 489.18 li
@
559.73 498.898 mo
549.648 488.82 li
549.648 498.898 mo
559.73 488.82 li
@
630.531 499.262 mo
620.449 489.18 li
620.449 499.262 mo
630.531 489.18 li
@
gsave
59.879 24.84 mo
626.16 24.84 li
626.16 500.16 li
59.879 500.16 li
cp
clp
.96 lw
1 lc
59.879 457.922 mo
130.559 478.32 li
201.238 488.52 li
271.922 485.039 li
342.719 488.52 li
413.398 484.32 li
484.078 488.879 li
554.762 485.039 li
625.441 487.801 li
.466651 0 .889799 0 cmyk
@
grestore
64.852 463.019 mo
54.77 452.941 li
54.77 463.019 mo
64.852 452.941 li
.466651 0 .889799 0 cmyk
@
135.648 483.422 mo
125.57 473.34 li
125.57 483.422 mo
135.648 473.34 li
@
206.328 493.621 mo
196.25 483.539 li
196.25 493.621 mo
206.328 483.539 li
@
277.012 490.141 mo
266.93 480.059 li
266.93 490.141 mo
277.012 480.059 li
@
347.691 493.621 mo
337.609 483.539 li
337.609 493.621 mo
347.691 483.539 li
@
418.371 489.422 mo
408.289 479.34 li
408.289 489.422 mo
418.371 479.34 li
@
489.051 493.98 mo
478.969 483.898 li
478.969 493.98 mo
489.051 483.898 li
@
559.73 490.141 mo
549.648 480.059 li
549.648 490.141 mo
559.73 480.059 li
@
630.531 492.898 mo
620.449 482.82 li
620.449 492.898 mo
630.531 482.82 li
@
gsave
59.879 24.84 mo
626.16 24.84 li
626.16 500.16 li
59.879 500.16 li
cp
clp
.96 lw
1 lc
59.879 359.52 mo
130.559 428.039 li
201.238 462.602 li
271.922 444.602 li
342.719 457.922 li
413.398 455.52 li
484.078 454.441 li
554.762 458.641 li
625.441 455.16 li
0 .990631 1 .000396735 cmyk
@
grestore
64.852 364.621 mo
54.77 354.539 li
54.77 364.621 mo
64.852 354.539 li
0 .990631 1 .000396735 cmyk
@
135.648 433.141 mo
125.57 423.059 li
125.57 433.141 mo
135.648 423.059 li
@
206.328 467.578 mo
196.25 457.5 li
196.25 467.578 mo
206.328 457.5 li
@
277.012 449.699 mo
266.93 439.621 li
266.93 449.699 mo
277.012 439.621 li
@
347.691 463.019 mo
337.609 452.941 li
337.609 463.019 mo
347.691 452.941 li
@
418.371 460.5 mo
408.289 450.422 li
408.289 460.5 mo
418.371 450.422 li
@
489.051 459.539 mo
478.969 449.461 li
478.969 459.539 mo
489.051 449.461 li
@
559.73 463.738 mo
549.648 453.66 li
549.648 463.738 mo
559.73 453.66 li
@
630.531 460.141 mo
620.449 450.059 li
620.449 460.141 mo
630.531 450.059 li
@
gsave
59.879 24.84 mo
626.16 24.84 li
626.16 500.16 li
59.879 500.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.879 409.441 mo
130.559 453.359 li
201.238 475.559 li
271.922 463.922 li
342.719 475.559 li
413.398 471 li
484.078 476.281 li
554.762 462.238 li
625.441 473.762 li
@
grestore
64.852 414.539 mo
54.77 404.461 li
54.77 414.539 mo
64.852 404.461 li
@
135.648 458.461 mo
125.57 448.379 li
125.57 458.461 mo
135.648 448.379 li
@
206.328 480.539 mo
196.25 470.461 li
196.25 480.539 mo
206.328 470.461 li
@
277.012 469.019 mo
266.93 458.941 li
266.93 469.019 mo
277.012 458.941 li
@
347.691 480.539 mo
337.609 470.461 li
337.609 480.539 mo
347.691 470.461 li
@
418.371 475.98 mo
408.289 465.898 li
408.289 475.98 mo
418.371 465.898 li
@
489.051 481.262 mo
478.969 471.18 li
478.969 481.262 mo
489.051 471.18 li
@
559.73 467.219 mo
549.648 457.141 li
549.648 467.219 mo
559.73 457.141 li
@
630.531 478.859 mo
620.449 468.781 li
620.449 478.859 mo
630.531 468.781 li
@
gsave
59.879 24.84 mo
626.16 24.84 li
626.16 500.16 li
59.879 500.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.879 252.961 mo
130.559 374.281 li
201.238 435.121 li
271.922 411.238 li
342.719 418.199 li
413.398 401.762 li
484.078 409.441 li
554.762 412.922 li
625.441 408 li
.719875 .440223 .0276493 0 cmyk
@
grestore
64.371 257.578 mo
55.25 248.461 li
55.25 257.578 mo
64.371 248.461 li
.719875 .440223 .0276493 0 cmyk
@
135.172 378.898 mo
126.051 369.781 li
126.051 378.898 mo
135.172 369.781 li
@
205.852 439.621 mo
196.73 430.5 li
196.73 439.621 mo
205.852 430.5 li
@
276.531 415.738 mo
267.41 406.621 li
267.41 415.738 mo
276.531 406.621 li
@
347.211 422.82 mo
338.09 413.699 li
338.09 422.82 mo
347.211 413.699 li
@
417.891 406.262 mo
408.77 397.141 li
408.77 406.262 mo
417.891 397.141 li
@
488.57 414.059 mo
479.449 404.941 li
479.449 414.059 mo
488.57 404.941 li
@
559.25 417.539 mo
550.129 408.422 li
550.129 417.539 mo
559.25 408.422 li
@
630.051 412.621 mo
620.93 403.5 li
620.93 412.621 mo
630.051 403.5 li
@
gsave
59.879 24.84 mo
626.16 24.84 li
626.16 500.16 li
59.879 500.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.879 309.238 mo
130.559 402.48 li
201.238 449.879 li
271.922 430.922 li
342.719 436.922 li
413.398 423.84 li
484.078 432.602 li
554.762 437.879 li
625.441 435.121 li
.466651 0 .889799 0 cmyk
@
grestore
64.852 314.34 mo
54.77 304.262 li
54.77 314.34 mo
64.852 304.262 li
.466651 0 .889799 0 cmyk
@
135.648 407.461 mo
125.57 397.379 li
125.57 407.461 mo
135.648 397.379 li
@
206.328 454.98 mo
196.25 444.898 li
196.25 454.98 mo
206.328 444.898 li
@
277.012 435.898 mo
266.93 425.82 li
266.93 435.898 mo
277.012 425.82 li
@
347.691 441.898 mo
337.609 431.82 li
337.609 441.898 mo
347.691 431.82 li
@
418.371 428.941 mo
408.289 418.859 li
408.289 428.941 mo
418.371 418.859 li
@
489.051 437.699 mo
478.969 427.621 li
478.969 437.699 mo
489.051 427.621 li
@
559.73 442.98 mo
549.648 432.898 li
549.648 442.98 mo
559.73 432.898 li
@
630.531 440.102 mo
620.449 430.019 li
620.449 440.102 mo
630.531 430.019 li
@
29.211 490.199 mo
46.934 490.199 li
46.934 507.289 li
29.211 507.289 li
cp
0 0 0 0 cmyk
ef
35.859 499.16 mo
35.855 499.844 35.805 500.465 35.699 501.027 cv
35.59 501.59 35.41 502.074 35.164 502.477 cv
34.91 502.883 34.582 503.195 34.184 503.414 cv
33.777 503.637 33.285 503.746 32.699 503.746 cv
32.141 503.746 31.668 503.648 31.289 503.449 cv
30.906 503.254 30.602 502.961 30.367 502.574 cv
30.133 502.187 29.965 501.715 29.871 501.148 cv
29.77 500.586 29.723 499.937 29.723 499.203 cv
29.723 498.531 29.777 497.91 29.887 497.344 cv
29.996 496.781 30.172 496.297 30.422 495.891 cv
30.664 495.488 30.988 495.176 31.395 494.949 cv
31.793 494.73 32.289 494.617 32.879 494.617 cv
33.438 494.617 33.91 494.719 34.293 494.914 cv
34.676 495.117 34.98 495.41 35.215 495.793 cv
35.445 496.184 35.613 496.656 35.711 497.219 cv
35.809 497.781 35.855 498.43 35.859 499.16 cv
cp
34.652 499.242 mo
34.648 498.801 34.633 498.402 34.605 498.051 cv
34.57 497.699 34.523 497.391 34.465 497.121 cv
34.398 496.852 34.32 496.621 34.223 496.426 cv
34.125 496.234 34.008 496.074 33.871 495.945 cv
33.73 495.82 33.57 495.727 33.398 495.668 cv
33.219 495.613 33.023 495.586 32.809 495.582 cv
32.418 495.586 32.102 495.676 31.863 495.859 cv
31.617 496.043 31.426 496.297 31.289 496.613 cv
31.148 496.934 31.055 497.305 31.004 497.734 cv
30.953 498.164 30.93 498.629 30.93 499.121 cv
30.93 499.785 30.961 500.348 31.031 500.809 cv
31.098 501.277 31.207 501.656 31.359 501.945 cv
31.504 502.242 31.695 502.453 31.926 502.582 cv
32.156 502.719 32.438 502.785 32.77 502.781 cv
33.023 502.785 33.246 502.746 33.441 502.66 cv
33.633 502.582 33.801 502.461 33.941 502.305 cv
34.082 502.152 34.195 501.969 34.289 501.754 cv
34.375 501.539 34.449 501.301 34.508 501.039 cv
34.559 500.781 34.598 500.5 34.621 500.195 cv
34.641 499.891 34.648 499.574 34.652 499.242 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.855 502.871 mo
38.855 503.199 38.801 503.414 38.695 503.52 cv
38.586 503.625 38.391 503.676 38.109 503.68 cv
37.832 503.676 37.641 503.625 37.539 503.523 cv
37.43 503.418 37.379 503.207 37.383 502.891 cv
37.379 502.566 37.434 502.352 37.543 502.242 cv
37.648 502.137 37.844 502.082 38.129 502.082 cv
38.402 502.082 38.59 502.137 38.699 502.242 cv
38.801 502.348 38.855 502.559 38.855 502.871 cv
cp
f
46.516 499.16 mo
46.512 499.844 46.461 500.465 46.355 501.027 cv
46.246 501.59 46.066 502.074 45.82 502.477 cv
45.566 502.883 45.238 503.195 44.84 503.414 cv
44.434 503.637 43.941 503.746 43.355 503.746 cv
42.797 503.746 42.324 503.648 41.945 503.449 cv
41.563 503.254 41.258 502.961 41.023 502.574 cv
40.789 502.187 40.621 501.715 40.527 501.148 cv
40.426 500.586 40.379 499.937 40.379 499.203 cv
40.379 498.531 40.434 497.91 40.543 497.344 cv
40.652 496.781 40.828 496.297 41.078 495.891 cv
41.32 495.488 41.645 495.176 42.051 494.949 cv
42.449 494.73 42.945 494.617 43.535 494.617 cv
44.094 494.617 44.566 494.719 44.949 494.914 cv
45.332 495.117 45.637 495.41 45.871 495.793 cv
46.102 496.184 46.27 496.656 46.367 497.219 cv
46.465 497.781 46.512 498.43 46.516 499.16 cv
cp
45.309 499.242 mo
45.305 498.801 45.289 498.402 45.262 498.051 cv
45.227 497.699 45.18 497.391 45.121 497.121 cv
45.055 496.852 44.977 496.621 44.879 496.426 cv
44.781 496.234 44.664 496.074 44.527 495.945 cv
44.387 495.82 44.227 495.727 44.055 495.668 cv
43.875 495.613 43.68 495.586 43.465 495.582 cv
43.074 495.586 42.758 495.676 42.52 495.859 cv
42.273 496.043 42.082 496.297 41.945 496.613 cv
41.805 496.934 41.711 497.305 41.66 497.734 cv
41.609 498.164 41.586 498.629 41.586 499.121 cv
41.586 499.785 41.617 500.348 41.688 500.809 cv
41.754 501.277 41.863 501.656 42.016 501.945 cv
42.16 502.242 42.352 502.453 42.582 502.582 cv
42.813 502.719 43.094 502.785 43.426 502.781 cv
43.68 502.785 43.902 502.746 44.098 502.66 cv
44.289 502.582 44.457 502.461 44.598 502.305 cv
44.738 502.152 44.852 501.969 44.945 501.754 cv
45.031 501.539 45.105 501.301 45.164 501.039 cv
45.215 500.781 45.254 500.5 45.277 500.195 cv
45.297 499.891 45.305 499.574 45.309 499.242 cv
cp
f
29.211 437.461 mo
46.934 437.461 li
46.934 454.551 li
29.211 454.551 li
cp
0 0 0 0 cmyk
ef
35.586 450.395 mo
35.582 450.484 35.574 450.555 35.563 450.613 cv
35.547 450.676 35.527 450.727 35.508 450.758 cv
35.484 450.797 35.461 450.82 35.43 450.836 cv
35.398 450.852 35.367 450.859 35.34 450.859 cv
30.703 450.859 li
30.668 450.859 30.641 450.852 30.613 450.836 cv
30.586 450.82 30.559 450.797 30.535 450.758 cv
30.508 450.727 30.488 450.676 30.477 450.613 cv
30.461 450.555 30.453 450.484 30.457 450.395 cv
30.453 450.316 30.461 450.242 30.477 450.18 cv
30.488 450.121 30.504 450.074 30.527 450.035 cv
30.543 450 30.57 449.969 30.602 449.945 cv
30.633 449.926 30.664 449.918 30.703 449.914 cv
32.555 449.914 li
32.555 443.168 li
30.84 444.187 li
30.75 444.238 30.68 444.266 30.633 444.273 cv
30.578 444.281 30.535 444.273 30.504 444.242 cv
30.469 444.215 30.449 444.164 30.438 444.094 cv
30.426 444.027 30.418 443.941 30.422 443.832 cv
30.418 443.758 30.422 443.691 30.434 443.633 cv
30.438 443.582 30.449 443.535 30.465 443.496 cv
30.477 443.461 30.496 443.43 30.52 443.402 cv
30.543 443.375 30.574 443.348 30.621 443.32 cv
32.664 442.008 li
32.68 441.996 32.699 441.984 32.73 441.977 cv
32.754 441.969 32.789 441.961 32.836 441.949 cv
32.875 441.941 32.926 441.934 32.98 441.93 cv
33.035 441.93 33.102 441.93 33.188 441.926 cv
33.293 441.93 33.387 441.934 33.461 441.941 cv
33.531 441.949 33.586 441.965 33.633 441.98 cv
33.672 442 33.699 442.02 33.715 442.043 cv
33.723 442.07 33.73 442.094 33.734 442.117 cv
33.734 449.914 li
35.34 449.914 li
35.375 449.918 35.41 449.926 35.441 449.945 cv
35.473 449.969 35.496 450 35.52 450.035 cv
35.535 450.074 35.551 450.121 35.566 450.18 cv
35.574 450.242 35.582 450.316 35.586 450.395 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.855 450.113 mo
38.855 450.441 38.801 450.656 38.695 450.762 cv
38.586 450.867 38.391 450.918 38.109 450.922 cv
37.832 450.918 37.641 450.867 37.539 450.766 cv
37.43 450.66 37.379 450.449 37.383 450.133 cv
37.379 449.809 37.434 449.594 37.543 449.484 cv
37.648 449.379 37.844 449.324 38.129 449.324 cv
38.402 449.324 38.59 449.379 38.699 449.484 cv
38.801 449.59 38.855 449.801 38.855 450.113 cv
cp
f
46.18 448.008 mo
46.18 448.484 46.098 448.906 45.938 449.277 cv
45.777 449.648 45.551 449.961 45.262 450.215 cv
44.965 450.469 44.617 450.664 44.215 450.793 cv
43.809 450.926 43.359 450.988 42.867 450.988 cv
42.59 450.988 42.328 450.969 42.086 450.93 cv
41.836 450.891 41.617 450.844 41.43 450.789 cv
41.234 450.734 41.078 450.68 40.953 450.621 cv
40.828 450.57 40.75 450.527 40.719 450.492 cv
40.684 450.461 40.66 450.43 40.648 450.402 cv
40.633 450.375 40.617 450.344 40.609 450.301 cv
40.594 450.266 40.586 450.215 40.586 450.152 cv
40.578 450.094 40.578 450.023 40.578 449.941 cv
40.578 449.867 40.582 449.797 40.59 449.734 cv
40.598 449.672 40.609 449.621 40.629 449.582 cv
40.645 449.543 40.664 449.516 40.691 449.496 cv
40.715 449.48 40.746 449.473 40.777 449.469 cv
40.824 449.473 40.895 449.5 40.988 449.555 cv
41.082 449.613 41.211 449.676 41.375 449.742 cv
41.539 449.809 41.738 449.871 41.98 449.93 cv
42.215 449.988 42.5 450.016 42.836 450.016 cv
43.137 450.016 43.418 449.98 43.676 449.906 cv
43.93 449.836 44.152 449.723 44.34 449.566 cv
44.523 449.414 44.668 449.219 44.773 448.98 cv
44.879 448.746 44.93 448.457 44.934 448.117 cv
44.93 447.836 44.887 447.586 44.797 447.367 cv
44.707 447.148 44.57 446.969 44.387 446.824 cv
44.199 446.684 43.965 446.578 43.684 446.504 cv
43.398 446.434 43.059 446.395 42.672 446.395 cv
42.387 446.395 42.148 446.41 41.949 446.437 cv
41.746 446.469 41.559 446.484 41.387 446.48 cv
41.258 446.484 41.164 446.453 41.113 446.391 cv
41.055 446.332 41.027 446.219 41.031 446.047 cv
41.031 442.434 li
41.027 442.285 41.063 442.176 41.137 442.098 cv
41.203 442.027 41.305 441.988 41.441 441.988 cv
45.371 441.988 li
45.406 441.988 45.441 442 45.477 442.02 cv
45.508 442.043 45.535 442.074 45.563 442.113 cv
45.582 442.156 45.598 442.207 45.613 442.27 cv
45.621 442.336 45.629 442.414 45.633 442.496 cv
45.629 442.664 45.605 442.789 45.566 442.879 cv
45.52 442.973 45.461 443.02 45.383 443.016 cv
42.211 443.016 li
42.211 445.504 li
42.363 445.484 42.52 445.473 42.684 445.465 cv
42.84 445.461 43.027 445.457 43.242 445.457 cv
43.727 445.457 44.152 445.52 44.52 445.641 cv
44.883 445.762 45.188 445.934 45.438 446.152 cv
45.68 446.379 45.867 446.645 45.992 446.957 cv
46.117 447.273 46.18 447.625 46.18 448.008 cv
cp
f
29.211 384.73 mo
46.934 384.73 li
46.934 401.82 li
29.211 401.82 li
cp
0 0 0 0 cmyk
ef
35.496 395.574 mo
35.492 395.984 35.422 396.352 35.281 396.676 cv
35.137 397.004 34.934 397.285 34.672 397.516 cv
34.406 397.75 34.078 397.926 33.691 398.051 cv
33.301 398.176 32.863 398.238 32.379 398.238 cv
32.074 398.238 31.797 398.211 31.543 398.164 cv
31.281 398.117 31.051 398.066 30.855 397.996 cv
30.652 397.934 30.488 397.863 30.355 397.793 cv
30.223 397.723 30.137 397.672 30.105 397.637 cv
30.066 397.609 30.043 397.578 30.027 397.543 cv
30.008 397.512 29.988 397.473 29.977 397.426 cv
29.961 397.383 29.953 397.328 29.945 397.258 cv
29.938 397.195 29.934 397.113 29.938 397.012 cv
29.934 396.852 29.949 396.738 29.984 396.672 cv
30.016 396.609 30.063 396.574 30.125 396.574 cv
30.168 396.574 30.25 396.613 30.375 396.684 cv
30.496 396.762 30.656 396.84 30.852 396.922 cv
31.043 397.008 31.27 397.086 31.535 397.156 cv
31.793 397.23 32.086 397.266 32.406 397.266 cv
32.715 397.266 32.984 397.227 33.223 397.148 cv
33.453 397.07 33.652 396.961 33.813 396.82 cv
33.969 396.68 34.086 396.512 34.168 396.316 cv
34.246 396.121 34.285 395.91 34.289 395.684 cv
34.285 395.434 34.234 395.207 34.137 395.004 cv
34.031 394.805 33.883 394.633 33.691 394.484 cv
33.492 394.34 33.254 394.227 32.969 394.148 cv
32.684 394.07 32.359 394.031 31.996 394.031 cv
31.125 394.031 li
31.082 394.031 31.047 394.023 31.012 394.008 cv
30.977 393.992 30.945 393.965 30.922 393.926 cv
30.895 393.891 30.875 393.844 30.859 393.785 cv
30.844 393.727 30.836 393.648 30.836 393.551 cv
30.836 393.465 30.84 393.395 30.855 393.336 cv
30.863 393.281 30.883 393.234 30.914 393.199 cv
30.938 393.164 30.969 393.141 31 393.121 cv
31.031 393.109 31.066 393.102 31.109 393.098 cv
31.883 393.098 li
32.184 393.102 32.453 393.062 32.695 392.98 cv
32.93 392.906 33.133 392.793 33.305 392.645 cv
33.469 392.5 33.598 392.324 33.688 392.121 cv
33.777 391.918 33.824 391.691 33.824 391.437 cv
33.824 391.258 33.793 391.082 33.734 390.914 cv
33.672 390.75 33.582 390.605 33.465 390.48 cv
33.344 390.355 33.191 390.258 33.012 390.187 cv
32.824 390.117 32.613 390.082 32.371 390.082 cv
32.105 390.082 31.859 390.125 31.641 390.203 cv
31.414 390.285 31.219 390.371 31.047 390.461 cv
30.871 390.555 30.727 390.641 30.613 390.719 cv
30.5 390.801 30.418 390.84 30.375 390.836 cv
30.34 390.84 30.313 390.832 30.289 390.82 cv
30.262 390.809 30.242 390.785 30.227 390.75 cv
30.211 390.719 30.199 390.672 30.191 390.605 cv
30.184 390.547 30.18 390.465 30.184 390.363 cv
30.18 390.297 30.18 390.238 30.188 390.184 cv
30.188 390.133 30.199 390.086 30.215 390.043 cv
30.23 390.008 30.246 389.973 30.266 389.937 cv
30.281 389.91 30.313 389.871 30.355 389.824 cv
30.398 389.781 30.484 389.719 30.621 389.637 cv
30.75 389.555 30.914 389.477 31.109 389.395 cv
31.301 389.316 31.523 389.246 31.781 389.191 cv
32.031 389.137 32.305 389.109 32.602 389.109 cv
33.008 389.109 33.371 389.164 33.684 389.266 cv
33.996 389.375 34.254 389.523 34.465 389.711 cv
34.668 389.906 34.824 390.137 34.93 390.402 cv
35.031 390.672 35.082 390.965 35.086 391.289 cv
35.082 391.57 35.047 391.832 34.977 392.066 cv
34.902 392.309 34.793 392.52 34.652 392.703 cv
34.508 392.891 34.336 393.047 34.133 393.176 cv
33.926 393.309 33.688 393.402 33.418 393.449 cv
33.418 393.461 li
33.723 393.496 34.004 393.57 34.258 393.691 cv
34.512 393.812 34.73 393.965 34.914 394.148 cv
35.094 394.332 35.234 394.547 35.34 394.789 cv
35.441 395.035 35.492 395.297 35.496 395.574 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.855 397.363 mo
38.855 397.691 38.801 397.906 38.695 398.012 cv
38.586 398.117 38.391 398.168 38.109 398.172 cv
37.832 398.168 37.641 398.117 37.539 398.016 cv
37.43 397.91 37.379 397.699 37.383 397.383 cv
37.379 397.059 37.434 396.844 37.543 396.734 cv
37.648 396.629 37.844 396.574 38.129 396.574 cv
38.402 396.574 38.59 396.629 38.699 396.734 cv
38.801 396.84 38.855 397.051 38.855 397.363 cv
cp
f
46.516 393.652 mo
46.512 394.336 46.461 394.957 46.355 395.52 cv
46.246 396.082 46.066 396.566 45.82 396.969 cv
45.566 397.375 45.238 397.687 44.84 397.906 cv
44.434 398.129 43.941 398.238 43.355 398.238 cv
42.797 398.238 42.324 398.141 41.945 397.941 cv
41.563 397.746 41.258 397.453 41.023 397.066 cv
40.789 396.68 40.621 396.207 40.527 395.641 cv
40.426 395.078 40.379 394.43 40.379 393.695 cv
40.379 393.023 40.434 392.402 40.543 391.836 cv
40.652 391.273 40.828 390.789 41.078 390.383 cv
41.32 389.98 41.645 389.668 42.051 389.441 cv
42.449 389.223 42.945 389.109 43.535 389.109 cv
44.094 389.109 44.566 389.211 44.949 389.406 cv
45.332 389.609 45.637 389.902 45.871 390.285 cv
46.102 390.676 46.27 391.148 46.367 391.711 cv
46.465 392.273 46.512 392.922 46.516 393.652 cv
cp
45.309 393.734 mo
45.305 393.293 45.289 392.895 45.262 392.543 cv
45.227 392.191 45.18 391.883 45.121 391.613 cv
45.055 391.344 44.977 391.113 44.879 390.918 cv
44.781 390.727 44.664 390.566 44.527 390.437 cv
44.387 390.312 44.227 390.219 44.055 390.16 cv
43.875 390.105 43.68 390.078 43.465 390.074 cv
43.074 390.078 42.758 390.168 42.52 390.352 cv
42.273 390.535 42.082 390.789 41.945 391.105 cv
41.805 391.426 41.711 391.797 41.66 392.227 cv
41.609 392.656 41.586 393.121 41.586 393.613 cv
41.586 394.277 41.617 394.84 41.688 395.301 cv
41.754 395.77 41.863 396.148 42.016 396.437 cv
42.16 396.734 42.352 396.945 42.582 397.074 cv
42.813 397.211 43.094 397.277 43.426 397.273 cv
43.68 397.277 43.902 397.238 44.098 397.152 cv
44.289 397.074 44.457 396.953 44.598 396.797 cv
44.738 396.645 44.852 396.461 44.945 396.246 cv
45.031 396.031 45.105 395.793 45.164 395.531 cv
45.215 395.273 45.254 394.992 45.277 394.687 cv
45.297 394.383 45.305 394.066 45.309 393.734 cv
cp
f
29.211 331.988 mo
46.934 331.988 li
46.934 349.078 li
29.211 349.078 li
cp
0 0 0 0 cmyk
ef
35.941 342.855 mo
35.938 343.008 35.914 343.129 35.871 343.215 cv
35.824 343.305 35.762 343.348 35.68 343.344 cv
34.68 343.344 li
34.68 345.207 li
34.68 345.246 34.668 345.277 34.652 345.301 cv
34.629 345.328 34.598 345.348 34.555 345.367 cv
34.504 345.383 34.441 345.395 34.371 345.406 cv
34.293 345.414 34.199 345.418 34.082 345.422 cv
33.965 345.418 33.867 345.414 33.797 345.406 cv
33.719 345.395 33.66 345.383 33.617 345.367 cv
33.57 345.348 33.539 345.328 33.523 345.301 cv
33.504 345.277 33.496 345.246 33.5 345.207 cv
33.5 343.344 li
29.871 343.344 li
29.813 343.348 29.77 343.34 29.734 343.324 cv
29.699 343.312 29.664 343.285 29.637 343.246 cv
29.605 343.211 29.586 343.16 29.574 343.09 cv
29.563 343.023 29.559 342.934 29.559 342.82 cv
29.559 342.738 29.559 342.66 29.566 342.59 cv
29.566 342.52 29.578 342.457 29.594 342.402 cv
29.605 342.348 29.621 342.293 29.648 342.238 cv
29.668 342.184 29.695 342.129 29.73 342.066 cv
32.891 336.68 li
32.91 336.645 32.945 336.613 32.992 336.586 cv
33.035 336.559 33.09 336.535 33.164 336.516 cv
33.23 336.5 33.316 336.488 33.422 336.477 cv
33.523 336.473 33.645 336.469 33.785 336.465 cv
33.934 336.469 34.07 336.473 34.188 336.484 cv
34.301 336.496 34.391 336.512 34.465 336.527 cv
34.531 336.547 34.586 336.57 34.625 336.602 cv
34.66 336.633 34.68 336.668 34.68 336.707 cv
34.68 342.371 li
35.68 342.371 li
35.754 342.375 35.816 342.414 35.867 342.492 cv
35.914 342.574 35.938 342.695 35.941 342.855 cv
cp
33.5 337.504 mo
33.488 337.504 li
30.637 342.371 li
33.5 342.371 li
cp
.629114 .553033 .543389 .289647 cmyk
f
38.855 344.633 mo
38.855 344.961 38.801 345.176 38.695 345.281 cv
38.586 345.387 38.391 345.437 38.109 345.441 cv
37.832 345.437 37.641 345.387 37.539 345.285 cv
37.43 345.18 37.379 344.969 37.383 344.652 cv
37.379 344.328 37.434 344.113 37.543 344.004 cv
37.648 343.898 37.844 343.844 38.129 343.844 cv
38.402 343.844 38.59 343.898 38.699 344.004 cv
38.801 344.109 38.855 344.32 38.855 344.633 cv
cp
f
46.18 342.527 mo
46.18 343.004 46.098 343.426 45.938 343.797 cv
45.777 344.168 45.551 344.48 45.262 344.734 cv
44.965 344.988 44.617 345.184 44.215 345.312 cv
43.809 345.445 43.359 345.508 42.867 345.508 cv
42.59 345.508 42.328 345.488 42.086 345.449 cv
41.836 345.41 41.617 345.363 41.43 345.309 cv
41.234 345.254 41.078 345.199 40.953 345.141 cv
40.828 345.09 40.75 345.047 40.719 345.012 cv
40.684 344.98 40.66 344.949 40.648 344.922 cv
40.633 344.895 40.617 344.863 40.609 344.82 cv
40.594 344.785 40.586 344.734 40.586 344.672 cv
40.578 344.613 40.578 344.543 40.578 344.461 cv
40.578 344.387 40.582 344.316 40.59 344.254 cv
40.598 344.191 40.609 344.141 40.629 344.102 cv
40.645 344.062 40.664 344.035 40.691 344.016 cv
40.715 344 40.746 343.992 40.777 343.988 cv
40.824 343.992 40.895 344.02 40.988 344.074 cv
41.082 344.133 41.211 344.195 41.375 344.262 cv
41.539 344.328 41.738 344.391 41.98 344.449 cv
42.215 344.508 42.5 344.535 42.836 344.535 cv
43.137 344.535 43.418 344.5 43.676 344.426 cv
43.93 344.355 44.152 344.242 44.34 344.086 cv
44.523 343.934 44.668 343.738 44.773 343.5 cv
44.879 343.266 44.93 342.977 44.934 342.637 cv
44.93 342.355 44.887 342.105 44.797 341.887 cv
44.707 341.668 44.57 341.488 44.387 341.344 cv
44.199 341.203 43.965 341.098 43.684 341.023 cv
43.398 340.953 43.059 340.914 42.672 340.914 cv
42.387 340.914 42.148 340.93 41.949 340.957 cv
41.746 340.988 41.559 341.004 41.387 341 cv
41.258 341.004 41.164 340.973 41.113 340.91 cv
41.055 340.852 41.027 340.738 41.031 340.566 cv
41.031 336.953 li
41.027 336.805 41.063 336.695 41.137 336.617 cv
41.203 336.547 41.305 336.508 41.441 336.508 cv
45.371 336.508 li
45.406 336.508 45.441 336.52 45.477 336.539 cv
45.508 336.562 45.535 336.594 45.563 336.633 cv
45.582 336.676 45.598 336.727 45.613 336.789 cv
45.621 336.855 45.629 336.934 45.633 337.016 cv
45.629 337.184 45.605 337.309 45.566 337.398 cv
45.52 337.492 45.461 337.539 45.383 337.535 cv
42.211 337.535 li
42.211 340.023 li
42.363 340.004 42.52 339.992 42.684 339.984 cv
42.84 339.98 43.027 339.977 43.242 339.977 cv
43.727 339.977 44.152 340.039 44.52 340.16 cv
44.883 340.281 45.188 340.453 45.438 340.672 cv
45.68 340.898 45.867 341.164 45.992 341.477 cv
46.117 341.793 46.18 342.145 46.18 342.527 cv
cp
f
29.211 279.25 mo
46.934 279.25 li
46.934 296.34 li
29.211 296.34 li
cp
0 0 0 0 cmyk
ef
35.793 289.758 mo
35.793 290.148 35.73 290.527 35.613 290.887 cv
35.488 291.254 35.305 291.57 35.063 291.844 cv
34.813 292.121 34.5 292.344 34.125 292.508 cv
33.742 292.676 33.297 292.758 32.781 292.758 cv
32.41 292.758 32.082 292.715 31.801 292.621 cv
31.516 292.535 31.27 292.402 31.059 292.23 cv
30.848 292.062 30.672 291.855 30.535 291.609 cv
30.395 291.363 30.281 291.082 30.199 290.766 cv
30.113 290.453 30.055 290.109 30.02 289.73 cv
29.98 289.359 29.961 288.957 29.965 288.523 cv
29.961 288.145 29.98 287.762 30.023 287.371 cv
30.063 286.988 30.137 286.613 30.242 286.246 cv
30.348 285.887 30.492 285.547 30.672 285.23 cv
30.852 284.914 31.078 284.637 31.352 284.402 cv
31.625 284.168 31.949 283.98 32.328 283.84 cv
32.707 283.703 33.148 283.637 33.652 283.633 cv
33.82 283.637 33.992 283.645 34.164 283.664 cv
34.336 283.687 34.496 283.719 34.645 283.75 cv
34.793 283.789 34.914 283.824 35.016 283.863 cv
35.113 283.902 35.18 283.937 35.215 283.961 cv
35.242 283.988 35.266 284.016 35.285 284.043 cv
35.301 284.074 35.316 284.105 35.324 284.141 cv
35.332 284.176 35.336 284.215 35.344 284.258 cv
35.344 284.301 35.348 284.355 35.352 284.418 cv
35.348 284.504 35.348 284.574 35.348 284.629 cv
35.344 284.691 35.332 284.738 35.32 284.773 cv
35.301 284.812 35.281 284.84 35.258 284.855 cv
35.23 284.875 35.199 284.883 35.16 284.883 cv
35.109 284.883 35.039 284.867 34.953 284.836 cv
34.863 284.805 34.758 284.77 34.637 284.727 cv
34.512 284.691 34.363 284.656 34.188 284.621 cv
34.012 284.594 33.809 284.578 33.578 284.574 cv
33.148 284.578 32.781 284.664 32.477 284.836 cv
32.172 285.008 31.922 285.242 31.727 285.535 cv
31.531 285.828 31.387 286.168 31.297 286.551 cv
31.199 286.941 31.145 287.344 31.137 287.762 cv
31.254 287.695 31.391 287.629 31.539 287.559 cv
31.688 287.492 31.848 287.43 32.023 287.371 cv
32.199 287.32 32.387 287.273 32.582 287.238 cv
32.777 287.207 32.988 287.191 33.215 287.187 cv
33.691 287.191 34.094 287.258 34.426 287.383 cv
34.754 287.516 35.02 287.695 35.227 287.926 cv
35.426 288.156 35.57 288.426 35.66 288.738 cv
35.746 289.051 35.793 289.391 35.793 289.758 cv
cp
34.598 289.867 mo
34.598 289.605 34.57 289.363 34.52 289.145 cv
34.465 288.93 34.375 288.746 34.254 288.59 cv
34.129 288.441 33.965 288.324 33.762 288.242 cv
33.551 288.16 33.297 288.117 33 288.117 cv
32.828 288.117 32.66 288.133 32.492 288.164 cv
32.32 288.195 32.156 288.238 32 288.285 cv
31.84 288.34 31.691 288.402 31.551 288.473 cv
31.406 288.547 31.273 288.621 31.156 288.699 cv
31.152 289.293 31.191 289.789 31.27 290.184 cv
31.344 290.582 31.453 290.898 31.598 291.137 cv
31.742 291.379 31.922 291.551 32.137 291.652 cv
32.352 291.758 32.602 291.809 32.891 291.805 cv
33.18 291.809 33.434 291.754 33.648 291.641 cv
33.863 291.535 34.039 291.387 34.184 291.199 cv
34.324 291.016 34.43 290.809 34.496 290.578 cv
34.563 290.348 34.598 290.113 34.598 289.867 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.855 291.883 mo
38.855 292.211 38.801 292.426 38.695 292.531 cv
38.586 292.637 38.391 292.687 38.109 292.691 cv
37.832 292.687 37.641 292.637 37.539 292.535 cv
37.43 292.43 37.379 292.219 37.383 291.902 cv
37.379 291.578 37.434 291.363 37.543 291.254 cv
37.648 291.148 37.844 291.094 38.129 291.094 cv
38.402 291.094 38.59 291.148 38.699 291.254 cv
38.801 291.359 38.855 291.57 38.855 291.883 cv
cp
f
46.516 288.172 mo
46.512 288.855 46.461 289.477 46.355 290.039 cv
46.246 290.602 46.066 291.086 45.82 291.488 cv
45.566 291.895 45.238 292.207 44.84 292.426 cv
44.434 292.648 43.941 292.758 43.355 292.758 cv
42.797 292.758 42.324 292.66 41.945 292.461 cv
41.563 292.266 41.258 291.973 41.023 291.586 cv
40.789 291.199 40.621 290.727 40.527 290.16 cv
40.426 289.598 40.379 288.949 40.379 288.215 cv
40.379 287.543 40.434 286.922 40.543 286.355 cv
40.652 285.793 40.828 285.309 41.078 284.902 cv
41.32 284.5 41.645 284.187 42.051 283.961 cv
42.449 283.742 42.945 283.629 43.535 283.629 cv
44.094 283.629 44.566 283.73 44.949 283.926 cv
45.332 284.129 45.637 284.422 45.871 284.805 cv
46.102 285.195 46.27 285.668 46.367 286.23 cv
46.465 286.793 46.512 287.441 46.516 288.172 cv
cp
45.309 288.254 mo
45.305 287.812 45.289 287.414 45.262 287.062 cv
45.227 286.711 45.18 286.402 45.121 286.133 cv
45.055 285.863 44.977 285.633 44.879 285.437 cv
44.781 285.246 44.664 285.086 44.527 284.957 cv
44.387 284.832 44.227 284.738 44.055 284.68 cv
43.875 284.625 43.68 284.598 43.465 284.594 cv
43.074 284.598 42.758 284.687 42.52 284.871 cv
42.273 285.055 42.082 285.309 41.945 285.625 cv
41.805 285.945 41.711 286.316 41.66 286.746 cv
41.609 287.176 41.586 287.641 41.586 288.133 cv
41.586 288.797 41.617 289.359 41.688 289.82 cv
41.754 290.289 41.863 290.668 42.016 290.957 cv
42.16 291.254 42.352 291.465 42.582 291.594 cv
42.813 291.73 43.094 291.797 43.426 291.793 cv
43.68 291.797 43.902 291.758 44.098 291.672 cv
44.289 291.594 44.457 291.473 44.598 291.316 cv
44.738 291.164 44.852 290.98 44.945 290.766 cv
45.031 290.551 45.105 290.312 45.164 290.051 cv
45.215 289.793 45.254 289.512 45.277 289.207 cv
45.297 288.902 45.305 288.586 45.309 288.254 cv
cp
f
29.211 226.519 mo
46.934 226.519 li
46.934 243.609 li
29.211 243.609 li
cp
0 0 0 0 cmyk
ef
35.695 231.516 mo
35.691 231.602 35.688 231.676 35.684 231.738 cv
35.676 231.809 35.668 231.871 35.656 231.93 cv
35.645 231.996 35.629 232.055 35.609 232.109 cv
35.586 232.168 35.563 232.23 35.539 232.289 cv
32.344 239.652 li
32.316 239.711 32.289 239.754 32.258 239.785 cv
32.223 239.82 32.18 239.848 32.125 239.867 cv
32.07 239.887 32 239.898 31.922 239.91 cv
31.836 239.914 31.738 239.918 31.621 239.922 cv
31.465 239.918 31.344 239.91 31.258 239.898 cv
31.172 239.883 31.109 239.867 31.07 239.836 cv
31.031 239.809 31.012 239.77 31.02 239.727 cv
31.02 239.684 31.035 239.633 31.066 239.57 cv
34.426 232.043 li
30.168 232.043 li
30.082 232.047 30.016 232 29.973 231.906 cv
29.93 231.816 29.91 231.687 29.91 231.523 cv
29.91 231.437 29.914 231.363 29.926 231.297 cv
29.938 231.234 29.953 231.18 29.977 231.137 cv
29.996 231.094 30.023 231.062 30.059 231.039 cv
30.09 231.02 30.129 231.008 30.168 231.008 cv
35.34 231.008 li
35.398 231.008 35.453 231.016 35.504 231.031 cv
35.551 231.047 35.586 231.074 35.613 231.113 cv
35.637 231.152 35.656 231.207 35.672 231.27 cv
35.684 231.336 35.691 231.418 35.695 231.516 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.855 239.133 mo
38.855 239.461 38.801 239.676 38.695 239.781 cv
38.586 239.887 38.391 239.937 38.109 239.941 cv
37.832 239.937 37.641 239.887 37.539 239.785 cv
37.43 239.68 37.379 239.469 37.383 239.152 cv
37.379 238.828 37.434 238.613 37.543 238.504 cv
37.648 238.398 37.844 238.344 38.129 238.344 cv
38.402 238.344 38.59 238.398 38.699 238.504 cv
38.801 238.609 38.855 238.82 38.855 239.133 cv
cp
f
46.18 237.027 mo
46.18 237.504 46.098 237.926 45.938 238.297 cv
45.777 238.668 45.551 238.98 45.262 239.234 cv
44.965 239.488 44.617 239.684 44.215 239.812 cv
43.809 239.945 43.359 240.008 42.867 240.008 cv
42.59 240.008 42.328 239.988 42.086 239.949 cv
41.836 239.91 41.617 239.863 41.43 239.809 cv
41.234 239.754 41.078 239.699 40.953 239.641 cv
40.828 239.59 40.75 239.547 40.719 239.512 cv
40.684 239.48 40.66 239.449 40.648 239.422 cv
40.633 239.395 40.617 239.363 40.609 239.32 cv
40.594 239.285 40.586 239.234 40.586 239.172 cv
40.578 239.113 40.578 239.043 40.578 238.961 cv
40.578 238.887 40.582 238.816 40.59 238.754 cv
40.598 238.691 40.609 238.641 40.629 238.602 cv
40.645 238.562 40.664 238.535 40.691 238.516 cv
40.715 238.5 40.746 238.492 40.777 238.488 cv
40.824 238.492 40.895 238.52 40.988 238.574 cv
41.082 238.633 41.211 238.695 41.375 238.762 cv
41.539 238.828 41.738 238.891 41.98 238.949 cv
42.215 239.008 42.5 239.035 42.836 239.035 cv
43.137 239.035 43.418 239 43.676 238.926 cv
43.93 238.855 44.152 238.742 44.34 238.586 cv
44.523 238.434 44.668 238.238 44.773 238 cv
44.879 237.766 44.93 237.477 44.934 237.137 cv
44.93 236.855 44.887 236.605 44.797 236.387 cv
44.707 236.168 44.57 235.988 44.387 235.844 cv
44.199 235.703 43.965 235.598 43.684 235.523 cv
43.398 235.453 43.059 235.414 42.672 235.414 cv
42.387 235.414 42.148 235.43 41.949 235.457 cv
41.746 235.488 41.559 235.504 41.387 235.5 cv
41.258 235.504 41.164 235.473 41.113 235.41 cv
41.055 235.352 41.027 235.238 41.031 235.066 cv
41.031 231.453 li
41.027 231.305 41.063 231.195 41.137 231.117 cv
41.203 231.047 41.305 231.008 41.441 231.008 cv
45.371 231.008 li
45.406 231.008 45.441 231.02 45.477 231.039 cv
45.508 231.062 45.535 231.094 45.563 231.133 cv
45.582 231.176 45.598 231.227 45.613 231.289 cv
45.621 231.355 45.629 231.434 45.633 231.516 cv
45.629 231.684 45.605 231.809 45.566 231.898 cv
45.52 231.992 45.461 232.039 45.383 232.035 cv
42.211 232.035 li
42.211 234.523 li
42.363 234.504 42.52 234.492 42.684 234.484 cv
42.84 234.48 43.027 234.477 43.242 234.477 cv
43.727 234.477 44.152 234.539 44.52 234.66 cv
44.883 234.781 45.188 234.953 45.438 235.172 cv
45.68 235.398 45.867 235.664 45.992 235.977 cv
46.117 236.293 46.18 236.645 46.18 237.027 cv
cp
f
29.211 173.781 mo
46.934 173.781 li
46.934 190.871 li
29.211 190.871 li
cp
0 0 0 0 cmyk
ef
35.633 182.344 mo
35.629 182.73 35.605 183.117 35.563 183.508 cv
35.516 183.902 35.438 184.281 35.332 184.645 cv
35.219 185.008 35.074 185.348 34.891 185.664 cv
34.703 185.984 34.469 186.266 34.191 186.5 cv
33.906 186.742 33.57 186.926 33.188 187.059 cv
32.797 187.191 32.352 187.258 31.844 187.258 cv
31.645 187.258 31.453 187.242 31.27 187.219 cv
31.082 187.191 30.914 187.164 30.77 187.129 cv
30.617 187.094 30.492 187.055 30.395 187.012 cv
30.293 186.973 30.219 186.934 30.176 186.891 cv
30.129 186.852 30.098 186.797 30.078 186.723 cv
30.055 186.652 30.043 186.555 30.047 186.437 cv
30.043 186.336 30.047 186.258 30.055 186.199 cv
30.059 186.141 30.07 186.094 30.086 186.062 cv
30.102 186.031 30.121 186.012 30.145 185.996 cv
30.168 185.988 30.199 185.98 30.238 185.977 cv
30.285 185.98 30.355 185.996 30.449 186.027 cv
30.539 186.062 30.652 186.102 30.797 186.141 cv
30.934 186.184 31.098 186.223 31.285 186.254 cv
31.469 186.293 31.68 186.309 31.918 186.305 cv
32.359 186.309 32.738 186.223 33.059 186.051 cv
33.371 185.879 33.633 185.652 33.836 185.363 cv
34.039 185.078 34.188 184.742 34.289 184.359 cv
34.387 183.98 34.441 183.582 34.453 183.16 cv
34.207 183.305 33.918 183.43 33.582 183.535 cv
33.242 183.648 32.855 183.703 32.418 183.699 cv
31.926 183.703 31.512 183.637 31.176 183.5 cv
30.84 183.367 30.566 183.184 30.363 182.949 cv
30.156 182.719 30.012 182.441 29.926 182.117 cv
29.836 181.801 29.793 181.449 29.793 181.07 cv
29.793 180.68 29.848 180.309 29.965 179.949 cv
30.074 179.598 30.254 179.285 30.5 179.016 cv
30.738 178.746 31.047 178.531 31.426 178.371 cv
31.797 178.211 32.246 178.129 32.77 178.129 cv
33.137 178.129 33.461 178.176 33.75 178.27 cv
34.031 178.363 34.281 178.5 34.496 178.676 cv
34.703 178.852 34.883 179.062 35.031 179.312 cv
35.176 179.562 35.293 179.844 35.383 180.156 cv
35.469 180.473 35.531 180.816 35.574 181.184 cv
35.609 181.555 35.629 181.941 35.633 182.344 cv
cp
34.434 182.215 mo
34.434 181.633 34.395 181.141 34.316 180.738 cv
34.238 180.34 34.121 180.016 33.973 179.766 cv
33.82 179.52 33.637 179.34 33.418 179.23 cv
33.195 179.121 32.941 179.066 32.66 179.066 cv
32.355 179.066 32.102 179.121 31.895 179.23 cv
31.684 179.34 31.512 179.484 31.379 179.66 cv
31.242 179.844 31.141 180.047 31.078 180.273 cv
31.012 180.504 30.98 180.742 30.984 180.98 cv
30.98 181.254 31.012 181.5 31.07 181.719 cv
31.125 181.945 31.215 182.133 31.348 182.289 cv
31.473 182.445 31.641 182.566 31.848 182.652 cv
32.051 182.738 32.305 182.781 32.609 182.777 cv
32.949 182.781 33.281 182.73 33.605 182.625 cv
33.922 182.523 34.199 182.387 34.434 182.215 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.855 186.383 mo
38.855 186.711 38.801 186.926 38.695 187.031 cv
38.586 187.137 38.391 187.187 38.109 187.191 cv
37.832 187.187 37.641 187.137 37.539 187.035 cv
37.43 186.93 37.379 186.719 37.383 186.402 cv
37.379 186.078 37.434 185.863 37.543 185.754 cv
37.648 185.648 37.844 185.594 38.129 185.594 cv
38.402 185.594 38.59 185.648 38.699 185.754 cv
38.801 185.859 38.855 186.07 38.855 186.383 cv
cp
f
46.516 182.672 mo
46.512 183.355 46.461 183.977 46.355 184.539 cv
46.246 185.102 46.066 185.586 45.82 185.988 cv
45.566 186.395 45.238 186.707 44.84 186.926 cv
44.434 187.148 43.941 187.258 43.355 187.258 cv
42.797 187.258 42.324 187.16 41.945 186.961 cv
41.563 186.766 41.258 186.473 41.023 186.086 cv
40.789 185.699 40.621 185.227 40.527 184.66 cv
40.426 184.098 40.379 183.449 40.379 182.715 cv
40.379 182.043 40.434 181.422 40.543 180.855 cv
40.652 180.293 40.828 179.809 41.078 179.402 cv
41.32 179 41.645 178.687 42.051 178.461 cv
42.449 178.242 42.945 178.129 43.535 178.129 cv
44.094 178.129 44.566 178.23 44.949 178.426 cv
45.332 178.629 45.637 178.922 45.871 179.305 cv
46.102 179.695 46.27 180.168 46.367 180.73 cv
46.465 181.293 46.512 181.941 46.516 182.672 cv
cp
45.309 182.754 mo
45.305 182.312 45.289 181.914 45.262 181.562 cv
45.227 181.211 45.18 180.902 45.121 180.633 cv
45.055 180.363 44.977 180.133 44.879 179.937 cv
44.781 179.746 44.664 179.586 44.527 179.457 cv
44.387 179.332 44.227 179.238 44.055 179.18 cv
43.875 179.125 43.68 179.098 43.465 179.094 cv
43.074 179.098 42.758 179.187 42.52 179.371 cv
42.273 179.555 42.082 179.809 41.945 180.125 cv
41.805 180.445 41.711 180.816 41.66 181.246 cv
41.609 181.676 41.586 182.141 41.586 182.633 cv
41.586 183.297 41.617 183.859 41.688 184.32 cv
41.754 184.789 41.863 185.168 42.016 185.457 cv
42.16 185.754 42.352 185.965 42.582 186.094 cv
42.813 186.23 43.094 186.297 43.426 186.293 cv
43.68 186.297 43.902 186.258 44.098 186.172 cv
44.289 186.094 44.457 185.973 44.598 185.816 cv
44.738 185.664 44.852 185.48 44.945 185.266 cv
45.031 185.051 45.105 184.812 45.164 184.551 cv
45.215 184.293 45.254 184.012 45.277 183.707 cv
45.297 183.402 45.305 183.086 45.309 182.754 cv
cp
f
22.113 121.039 mo
46.933 121.039 li
46.933 138.129 li
22.113 138.129 li
cp
0 0 0 0 cmyk
ef
28.484 133.934 mo
28.48 134.023 28.473 134.094 28.461 134.152 cv
28.445 134.215 28.426 134.266 28.406 134.297 cv
28.383 134.336 28.359 134.359 28.328 134.375 cv
28.297 134.391 28.266 134.398 28.238 134.398 cv
23.602 134.398 li
23.566 134.398 23.539 134.391 23.512 134.375 cv
23.484 134.359 23.457 134.336 23.434 134.297 cv
23.406 134.266 23.387 134.215 23.375 134.152 cv
23.359 134.094 23.352 134.023 23.355 133.934 cv
23.352 133.855 23.359 133.781 23.375 133.719 cv
23.387 133.66 23.402 133.613 23.426 133.574 cv
23.441 133.539 23.469 133.508 23.5 133.484 cv
23.531 133.465 23.563 133.457 23.602 133.453 cv
25.453 133.453 li
25.453 126.707 li
23.738 127.727 li
23.648 127.777 23.578 127.805 23.531 127.812 cv
23.477 127.82 23.434 127.812 23.402 127.781 cv
23.367 127.754 23.348 127.703 23.336 127.633 cv
23.324 127.566 23.316 127.48 23.32 127.371 cv
23.316 127.297 23.32 127.23 23.332 127.172 cv
23.336 127.121 23.348 127.074 23.363 127.035 cv
23.375 127 23.395 126.969 23.418 126.941 cv
23.441 126.914 23.473 126.887 23.52 126.859 cv
25.563 125.547 li
25.578 125.535 25.598 125.523 25.629 125.516 cv
25.652 125.508 25.688 125.5 25.734 125.488 cv
25.773 125.48 25.824 125.473 25.879 125.469 cv
25.934 125.469 26 125.469 26.086 125.465 cv
26.191 125.469 26.285 125.473 26.359 125.48 cv
26.43 125.488 26.484 125.504 26.531 125.52 cv
26.57 125.539 26.598 125.559 26.613 125.582 cv
26.621 125.609 26.629 125.633 26.633 125.656 cv
26.633 133.453 li
28.238 133.453 li
28.273 133.457 28.309 133.465 28.34 133.484 cv
28.371 133.508 28.395 133.539 28.418 133.574 cv
28.434 133.613 28.449 133.66 28.465 133.719 cv
28.473 133.781 28.48 133.855 28.484 133.934 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
35.875 129.941 mo
35.871 130.625 35.82 131.246 35.715 131.809 cv
35.605 132.371 35.426 132.855 35.18 133.258 cv
34.926 133.664 34.598 133.977 34.199 134.195 cv
33.793 134.418 33.301 134.527 32.715 134.527 cv
32.156 134.527 31.684 134.43 31.305 134.23 cv
30.922 134.035 30.617 133.742 30.383 133.355 cv
30.148 132.969 29.98 132.496 29.887 131.93 cv
29.785 131.367 29.738 130.719 29.738 129.984 cv
29.738 129.312 29.793 128.691 29.902 128.125 cv
30.012 127.562 30.188 127.078 30.438 126.672 cv
30.68 126.27 31.004 125.957 31.41 125.73 cv
31.809 125.512 32.305 125.398 32.895 125.398 cv
33.453 125.398 33.926 125.5 34.309 125.695 cv
34.691 125.898 34.996 126.191 35.23 126.574 cv
35.461 126.965 35.629 127.437 35.727 128 cv
35.824 128.562 35.871 129.211 35.875 129.941 cv
cp
34.668 130.023 mo
34.664 129.582 34.648 129.184 34.621 128.832 cv
34.586 128.48 34.539 128.172 34.48 127.902 cv
34.414 127.633 34.336 127.402 34.238 127.207 cv
34.141 127.016 34.023 126.855 33.887 126.727 cv
33.746 126.602 33.586 126.508 33.414 126.449 cv
33.234 126.395 33.039 126.367 32.824 126.363 cv
32.434 126.367 32.117 126.457 31.879 126.641 cv
31.633 126.824 31.441 127.078 31.305 127.395 cv
31.164 127.715 31.07 128.086 31.02 128.516 cv
30.969 128.945 30.945 129.41 30.945 129.902 cv
30.945 130.566 30.977 131.129 31.047 131.59 cv
31.113 132.059 31.223 132.437 31.375 132.727 cv
31.52 133.023 31.711 133.234 31.941 133.363 cv
32.172 133.5 32.453 133.566 32.785 133.562 cv
33.039 133.566 33.262 133.527 33.457 133.441 cv
33.648 133.363 33.816 133.242 33.957 133.086 cv
34.098 132.934 34.211 132.75 34.305 132.535 cv
34.391 132.32 34.465 132.082 34.523 131.82 cv
34.574 131.562 34.613 131.281 34.637 130.977 cv
34.656 130.672 34.664 130.355 34.668 130.023 cv
cp
f
38.801 133.652 mo
38.801 133.98 38.746 134.195 38.641 134.301 cv
38.531 134.406 38.336 134.457 38.055 134.461 cv
37.777 134.457 37.586 134.406 37.484 134.305 cv
37.375 134.199 37.324 133.988 37.328 133.672 cv
37.324 133.348 37.379 133.133 37.488 133.023 cv
37.594 132.918 37.789 132.863 38.074 132.863 cv
38.348 132.863 38.535 132.918 38.645 133.023 cv
38.746 133.129 38.801 133.34 38.801 133.652 cv
cp
f
46.168 131.547 mo
46.168 132.023 46.086 132.445 45.926 132.816 cv
45.766 133.187 45.539 133.5 45.25 133.754 cv
44.953 134.008 44.605 134.203 44.203 134.332 cv
43.797 134.465 43.348 134.527 42.855 134.527 cv
42.578 134.527 42.316 134.508 42.074 134.469 cv
41.824 134.43 41.605 134.383 41.418 134.328 cv
41.223 134.273 41.066 134.219 40.941 134.16 cv
40.816 134.109 40.738 134.066 40.707 134.031 cv
40.672 134 40.648 133.969 40.637 133.941 cv
40.621 133.914 40.605 133.883 40.598 133.84 cv
40.582 133.805 40.574 133.754 40.574 133.691 cv
40.566 133.633 40.566 133.562 40.566 133.48 cv
40.566 133.406 40.57 133.336 40.578 133.273 cv
40.586 133.211 40.598 133.16 40.617 133.121 cv
40.633 133.082 40.652 133.055 40.68 133.035 cv
40.703 133.02 40.734 133.012 40.766 133.008 cv
40.813 133.012 40.883 133.039 40.977 133.094 cv
41.07 133.152 41.199 133.215 41.363 133.281 cv
41.527 133.348 41.727 133.41 41.969 133.469 cv
42.203 133.527 42.488 133.555 42.824 133.555 cv
43.125 133.555 43.406 133.52 43.664 133.445 cv
43.918 133.375 44.141 133.262 44.328 133.105 cv
44.512 132.953 44.656 132.758 44.762 132.52 cv
44.867 132.285 44.918 131.996 44.922 131.656 cv
44.918 131.375 44.875 131.125 44.785 130.906 cv
44.695 130.687 44.559 130.508 44.375 130.363 cv
44.188 130.223 43.953 130.117 43.672 130.043 cv
43.387 129.973 43.047 129.934 42.66 129.934 cv
42.375 129.934 42.137 129.949 41.938 129.977 cv
41.734 130.008 41.547 130.023 41.375 130.02 cv
41.246 130.023 41.152 129.992 41.102 129.93 cv
41.043 129.871 41.016 129.758 41.02 129.586 cv
41.02 125.973 li
41.016 125.824 41.051 125.715 41.125 125.637 cv
41.191 125.566 41.293 125.527 41.43 125.527 cv
45.359 125.527 li
45.395 125.527 45.43 125.539 45.465 125.559 cv
45.496 125.582 45.523 125.613 45.551 125.652 cv
45.57 125.695 45.586 125.746 45.602 125.809 cv
45.609 125.875 45.617 125.953 45.621 126.035 cv
45.617 126.203 45.594 126.328 45.555 126.418 cv
45.508 126.512 45.449 126.559 45.371 126.555 cv
42.199 126.555 li
42.199 129.043 li
42.352 129.023 42.508 129.012 42.672 129.004 cv
42.828 129 43.016 128.996 43.23 128.996 cv
43.715 128.996 44.141 129.059 44.508 129.18 cv
44.871 129.301 45.176 129.473 45.426 129.691 cv
45.668 129.918 45.855 130.184 45.98 130.496 cv
46.105 130.812 46.168 131.164 46.168 131.547 cv
cp
f
22.113 68.301 mo
46.933 68.301 li
46.933 85.391 li
22.113 85.391 li
cp
0 0 0 0 cmyk
ef
28.484 81.184 mo
28.48 81.273 28.473 81.344 28.461 81.402 cv
28.445 81.465 28.426 81.516 28.406 81.547 cv
28.383 81.586 28.359 81.609 28.328 81.625 cv
28.297 81.641 28.266 81.648 28.238 81.648 cv
23.602 81.648 li
23.566 81.648 23.539 81.641 23.512 81.625 cv
23.484 81.609 23.457 81.586 23.434 81.547 cv
23.406 81.516 23.387 81.465 23.375 81.402 cv
23.359 81.344 23.352 81.273 23.355 81.184 cv
23.352 81.105 23.359 81.031 23.375 80.969 cv
23.387 80.91 23.402 80.863 23.426 80.824 cv
23.441 80.789 23.469 80.758 23.5 80.734 cv
23.531 80.715 23.563 80.707 23.602 80.703 cv
25.453 80.703 li
25.453 73.957 li
23.738 74.977 li
23.648 75.027 23.578 75.055 23.531 75.062 cv
23.477 75.07 23.434 75.062 23.402 75.031 cv
23.367 75.004 23.348 74.953 23.336 74.883 cv
23.324 74.816 23.316 74.73 23.32 74.621 cv
23.316 74.547 23.32 74.48 23.332 74.422 cv
23.336 74.371 23.348 74.324 23.363 74.285 cv
23.375 74.25 23.395 74.219 23.418 74.191 cv
23.441 74.164 23.473 74.137 23.52 74.109 cv
25.563 72.797 li
25.578 72.785 25.598 72.773 25.629 72.766 cv
25.652 72.758 25.688 72.75 25.734 72.738 cv
25.773 72.73 25.824 72.723 25.879 72.719 cv
25.934 72.719 26 72.719 26.086 72.715 cv
26.191 72.719 26.285 72.723 26.359 72.73 cv
26.43 72.738 26.484 72.754 26.531 72.77 cv
26.57 72.789 26.598 72.809 26.613 72.832 cv
26.621 72.859 26.629 72.883 26.633 72.906 cv
26.633 80.703 li
28.238 80.703 li
28.273 80.707 28.309 80.715 28.34 80.734 cv
28.371 80.758 28.395 80.789 28.418 80.824 cv
28.434 80.863 28.449 80.91 28.465 80.969 cv
28.473 81.031 28.48 81.105 28.484 81.184 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
35.582 81.141 mo
35.578 81.227 35.574 81.301 35.563 81.363 cv
35.551 81.43 35.535 81.484 35.516 81.523 cv
35.492 81.57 35.465 81.602 35.434 81.617 cv
35.398 81.641 35.359 81.648 35.32 81.648 cv
30.418 81.648 li
30.355 81.648 30.297 81.641 30.25 81.625 cv
30.199 81.609 30.16 81.586 30.125 81.547 cv
30.09 81.516 30.063 81.461 30.051 81.391 cv
30.031 81.32 30.023 81.234 30.027 81.133 cv
30.023 81.043 30.027 80.965 30.035 80.895 cv
30.039 80.828 30.055 80.77 30.082 80.715 cv
30.105 80.664 30.137 80.609 30.172 80.555 cv
30.207 80.504 30.25 80.449 30.309 80.387 cv
32.082 78.562 li
32.492 78.145 32.82 77.77 33.07 77.434 cv
33.316 77.105 33.508 76.801 33.641 76.523 cv
33.773 76.25 33.859 76 33.906 75.773 cv
33.945 75.551 33.969 75.34 33.969 75.145 cv
33.969 74.949 33.934 74.766 33.867 74.586 cv
33.801 74.414 33.707 74.258 33.582 74.121 cv
33.457 73.992 33.301 73.887 33.113 73.805 cv
32.926 73.73 32.707 73.691 32.461 73.687 cv
32.172 73.691 31.914 73.73 31.688 73.805 cv
31.457 73.887 31.258 73.973 31.086 74.059 cv
30.914 74.152 30.77 74.234 30.652 74.312 cv
30.535 74.391 30.449 74.43 30.398 74.43 cv
30.363 74.43 30.332 74.422 30.309 74.402 cv
30.277 74.387 30.258 74.355 30.242 74.312 cv
30.227 74.273 30.211 74.219 30.203 74.148 cv
30.191 74.082 30.188 74 30.191 73.902 cv
30.188 73.836 30.191 73.777 30.199 73.727 cv
30.203 73.676 30.211 73.633 30.223 73.594 cv
30.23 73.559 30.246 73.523 30.266 73.492 cv
30.285 73.461 30.32 73.422 30.379 73.371 cv
30.43 73.324 30.523 73.258 30.66 73.176 cv
30.793 73.094 30.965 73.016 31.168 72.934 cv
31.371 72.855 31.594 72.785 31.84 72.73 cv
32.082 72.676 32.34 72.648 32.613 72.648 cv
33.039 72.648 33.414 72.711 33.738 72.832 cv
34.059 72.953 34.324 73.117 34.539 73.328 cv
34.75 73.539 34.91 73.785 35.016 74.059 cv
35.121 74.34 35.176 74.637 35.176 74.949 cv
35.176 75.238 35.148 75.52 35.098 75.797 cv
35.047 76.082 34.941 76.387 34.781 76.711 cv
34.617 77.039 34.383 77.402 34.078 77.801 cv
33.77 78.203 33.363 78.664 32.859 79.18 cv
31.453 80.648 li
35.313 80.648 li
35.344 80.652 35.379 80.664 35.418 80.68 cv
35.449 80.703 35.48 80.734 35.508 80.773 cv
35.531 80.816 35.551 80.867 35.563 80.926 cv
35.574 80.992 35.578 81.062 35.582 81.141 cv
cp
f
38.801 80.902 mo
38.801 81.23 38.746 81.445 38.641 81.551 cv
38.531 81.656 38.336 81.707 38.055 81.711 cv
37.777 81.707 37.586 81.656 37.484 81.555 cv
37.375 81.449 37.324 81.238 37.328 80.922 cv
37.324 80.598 37.379 80.383 37.488 80.273 cv
37.594 80.168 37.789 80.113 38.074 80.113 cv
38.348 80.113 38.535 80.168 38.645 80.273 cv
38.746 80.379 38.801 80.59 38.801 80.902 cv
cp
f
46.504 77.191 mo
46.5 77.875 46.449 78.496 46.344 79.059 cv
46.234 79.621 46.055 80.105 45.809 80.508 cv
45.555 80.914 45.227 81.227 44.828 81.445 cv
44.422 81.668 43.93 81.777 43.344 81.777 cv
42.785 81.777 42.313 81.68 41.934 81.48 cv
41.551 81.285 41.246 80.992 41.012 80.605 cv
40.777 80.219 40.609 79.746 40.516 79.18 cv
40.414 78.617 40.367 77.969 40.367 77.234 cv
40.367 76.562 40.422 75.941 40.531 75.375 cv
40.641 74.812 40.816 74.328 41.066 73.922 cv
41.309 73.52 41.633 73.207 42.039 72.98 cv
42.438 72.762 42.934 72.648 43.523 72.648 cv
44.082 72.648 44.555 72.75 44.938 72.945 cv
45.32 73.148 45.625 73.441 45.859 73.824 cv
46.09 74.215 46.258 74.687 46.355 75.25 cv
46.453 75.812 46.5 76.461 46.504 77.191 cv
cp
45.297 77.273 mo
45.293 76.832 45.277 76.434 45.25 76.082 cv
45.215 75.73 45.168 75.422 45.109 75.152 cv
45.043 74.883 44.965 74.652 44.867 74.457 cv
44.77 74.266 44.652 74.105 44.516 73.977 cv
44.375 73.852 44.215 73.758 44.043 73.699 cv
43.863 73.645 43.668 73.617 43.453 73.613 cv
43.063 73.617 42.746 73.707 42.508 73.891 cv
42.262 74.074 42.07 74.328 41.934 74.645 cv
41.793 74.965 41.699 75.336 41.648 75.766 cv
41.598 76.195 41.574 76.66 41.574 77.152 cv
41.574 77.816 41.605 78.379 41.676 78.84 cv
41.742 79.309 41.852 79.687 42.004 79.977 cv
42.148 80.273 42.34 80.484 42.57 80.613 cv
42.801 80.75 43.082 80.816 43.414 80.812 cv
43.668 80.816 43.891 80.777 44.086 80.691 cv
44.277 80.613 44.445 80.492 44.586 80.336 cv
44.727 80.184 44.84 80 44.934 79.785 cv
45.02 79.57 45.094 79.332 45.152 79.07 cv
45.203 78.812 45.242 78.531 45.266 78.227 cv
45.285 77.922 45.293 77.605 45.297 77.273 cv
cp
f
22.113 15.57 mo
46.933 15.57 li
46.933 32.66 li
22.113 32.66 li
cp
0 0 0 0 cmyk
ef
28.484 28.434 mo
28.48 28.523 28.473 28.594 28.461 28.652 cv
28.445 28.715 28.426 28.766 28.406 28.797 cv
28.383 28.836 28.359 28.859 28.328 28.875 cv
28.297 28.891 28.266 28.898 28.238 28.898 cv
23.602 28.898 li
23.566 28.898 23.539 28.891 23.512 28.875 cv
23.484 28.859 23.457 28.836 23.434 28.797 cv
23.406 28.766 23.387 28.715 23.375 28.652 cv
23.359 28.594 23.352 28.523 23.355 28.434 cv
23.352 28.355 23.359 28.281 23.375 28.219 cv
23.387 28.16 23.402 28.113 23.426 28.074 cv
23.441 28.039 23.469 28.008 23.5 27.984 cv
23.531 27.965 23.563 27.957 23.602 27.953 cv
25.453 27.953 li
25.453 21.207 li
23.738 22.227 li
23.648 22.277 23.578 22.305 23.531 22.312 cv
23.477 22.32 23.434 22.312 23.402 22.281 cv
23.367 22.254 23.348 22.203 23.336 22.133 cv
23.324 22.066 23.316 21.98 23.32 21.871 cv
23.316 21.797 23.32 21.73 23.332 21.672 cv
23.336 21.621 23.348 21.574 23.363 21.535 cv
23.375 21.5 23.395 21.469 23.418 21.441 cv
23.441 21.414 23.473 21.387 23.52 21.359 cv
25.563 20.047 li
25.578 20.035 25.598 20.023 25.629 20.016 cv
25.652 20.008 25.688 20 25.734 19.988 cv
25.773 19.98 25.824 19.973 25.879 19.969 cv
25.934 19.969 26 19.969 26.086 19.965 cv
26.191 19.969 26.285 19.973 26.359 19.98 cv
26.43 19.988 26.484 20.004 26.531 20.02 cv
26.57 20.039 26.598 20.059 26.613 20.082 cv
26.621 20.109 26.629 20.133 26.633 20.156 cv
26.633 27.953 li
28.238 27.953 li
28.273 27.957 28.309 27.965 28.34 27.984 cv
28.371 28.008 28.395 28.039 28.418 28.074 cv
28.434 28.113 28.449 28.16 28.465 28.219 cv
28.473 28.281 28.48 28.355 28.484 28.434 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
35.512 26.363 mo
35.508 26.773 35.438 27.141 35.297 27.465 cv
35.152 27.793 34.949 28.074 34.688 28.305 cv
34.422 28.539 34.094 28.715 33.707 28.84 cv
33.316 28.965 32.879 29.027 32.395 29.027 cv
32.09 29.027 31.813 29 31.559 28.953 cv
31.297 28.906 31.066 28.855 30.871 28.785 cv
30.668 28.723 30.504 28.652 30.371 28.582 cv
30.238 28.512 30.152 28.461 30.121 28.426 cv
30.082 28.398 30.059 28.367 30.043 28.332 cv
30.023 28.301 30.004 28.262 29.992 28.215 cv
29.977 28.172 29.969 28.117 29.961 28.047 cv
29.953 27.984 29.949 27.902 29.953 27.801 cv
29.949 27.641 29.965 27.527 30 27.461 cv
30.031 27.398 30.078 27.363 30.141 27.363 cv
30.184 27.363 30.266 27.402 30.391 27.473 cv
30.512 27.551 30.672 27.629 30.867 27.711 cv
31.059 27.797 31.285 27.875 31.551 27.945 cv
31.809 28.02 32.102 28.055 32.422 28.055 cv
32.73 28.055 33 28.016 33.238 27.937 cv
33.469 27.859 33.668 27.75 33.828 27.609 cv
33.984 27.469 34.102 27.301 34.184 27.105 cv
34.262 26.91 34.301 26.699 34.305 26.473 cv
34.301 26.223 34.25 25.996 34.152 25.793 cv
34.047 25.594 33.898 25.422 33.707 25.273 cv
33.508 25.129 33.27 25.016 32.984 24.937 cv
32.699 24.859 32.375 24.82 32.012 24.82 cv
31.141 24.82 li
31.098 24.82 31.063 24.812 31.027 24.797 cv
30.992 24.781 30.961 24.754 30.938 24.715 cv
30.91 24.68 30.891 24.633 30.875 24.574 cv
30.859 24.516 30.852 24.437 30.852 24.34 cv
30.852 24.254 30.855 24.184 30.871 24.125 cv
30.879 24.07 30.898 24.023 30.93 23.988 cv
30.953 23.953 30.984 23.93 31.016 23.91 cv
31.047 23.898 31.082 23.891 31.125 23.887 cv
31.898 23.887 li
32.199 23.891 32.469 23.852 32.711 23.77 cv
32.945 23.695 33.148 23.582 33.32 23.434 cv
33.484 23.289 33.613 23.113 33.703 22.91 cv
33.793 22.707 33.84 22.48 33.84 22.227 cv
33.84 22.047 33.809 21.871 33.75 21.703 cv
33.688 21.539 33.598 21.395 33.48 21.27 cv
33.359 21.145 33.207 21.047 33.027 20.977 cv
32.84 20.906 32.629 20.871 32.387 20.871 cv
32.121 20.871 31.875 20.914 31.656 20.992 cv
31.43 21.074 31.234 21.16 31.063 21.25 cv
30.887 21.344 30.742 21.43 30.629 21.508 cv
30.516 21.59 30.434 21.629 30.391 21.625 cv
30.355 21.629 30.328 21.621 30.305 21.609 cv
30.277 21.598 30.258 21.574 30.242 21.539 cv
30.227 21.508 30.215 21.461 30.207 21.395 cv
30.199 21.336 30.195 21.254 30.199 21.152 cv
30.195 21.086 30.195 21.027 30.203 20.973 cv
30.203 20.922 30.215 20.875 30.23 20.832 cv
30.246 20.797 30.262 20.762 30.281 20.727 cv
30.297 20.699 30.328 20.66 30.371 20.613 cv
30.414 20.57 30.5 20.508 30.637 20.426 cv
30.766 20.344 30.93 20.266 31.125 20.184 cv
31.316 20.105 31.539 20.035 31.797 19.98 cv
32.047 19.926 32.32 19.898 32.617 19.898 cv
33.023 19.898 33.387 19.953 33.699 20.055 cv
34.012 20.164 34.27 20.312 34.48 20.5 cv
34.684 20.695 34.84 20.926 34.945 21.191 cv
35.047 21.461 35.098 21.754 35.102 22.078 cv
35.098 22.359 35.063 22.621 34.992 22.855 cv
34.918 23.098 34.809 23.309 34.668 23.492 cv
34.523 23.68 34.352 23.836 34.148 23.965 cv
33.941 24.098 33.703 24.191 33.434 24.238 cv
33.434 24.25 li
33.738 24.285 34.02 24.359 34.273 24.48 cv
34.527 24.602 34.746 24.754 34.93 24.937 cv
35.109 25.121 35.25 25.336 35.355 25.578 cv
35.457 25.824 35.508 26.086 35.512 26.363 cv
cp
f
38.801 28.152 mo
38.801 28.48 38.746 28.695 38.641 28.801 cv
38.531 28.906 38.336 28.957 38.055 28.961 cv
37.777 28.957 37.586 28.906 37.484 28.805 cv
37.375 28.699 37.324 28.488 37.328 28.172 cv
37.324 27.848 37.379 27.633 37.488 27.523 cv
37.594 27.418 37.789 27.363 38.074 27.363 cv
38.348 27.363 38.535 27.418 38.645 27.523 cv
38.746 27.629 38.801 27.84 38.801 28.152 cv
cp
f
46.168 26.047 mo
46.168 26.523 46.086 26.945 45.926 27.316 cv
45.766 27.687 45.539 28 45.25 28.254 cv
44.953 28.508 44.605 28.703 44.203 28.832 cv
43.797 28.965 43.348 29.027 42.855 29.027 cv
42.578 29.027 42.316 29.008 42.074 28.969 cv
41.824 28.93 41.605 28.883 41.418 28.828 cv
41.223 28.773 41.066 28.719 40.941 28.66 cv
40.816 28.609 40.738 28.566 40.707 28.531 cv
40.672 28.5 40.648 28.469 40.637 28.441 cv
40.621 28.414 40.605 28.383 40.598 28.34 cv
40.582 28.305 40.574 28.254 40.574 28.191 cv
40.566 28.133 40.566 28.062 40.566 27.98 cv
40.566 27.906 40.57 27.836 40.578 27.773 cv
40.586 27.711 40.598 27.66 40.617 27.621 cv
40.633 27.582 40.652 27.555 40.68 27.535 cv
40.703 27.52 40.734 27.512 40.766 27.508 cv
40.813 27.512 40.883 27.539 40.977 27.594 cv
41.07 27.652 41.199 27.715 41.363 27.781 cv
41.527 27.848 41.727 27.91 41.969 27.969 cv
42.203 28.027 42.488 28.055 42.824 28.055 cv
43.125 28.055 43.406 28.02 43.664 27.945 cv
43.918 27.875 44.141 27.762 44.328 27.605 cv
44.512 27.453 44.656 27.258 44.762 27.02 cv
44.867 26.785 44.918 26.496 44.922 26.156 cv
44.918 25.875 44.875 25.625 44.785 25.406 cv
44.695 25.187 44.559 25.008 44.375 24.863 cv
44.188 24.723 43.953 24.617 43.672 24.543 cv
43.387 24.473 43.047 24.434 42.66 24.434 cv
42.375 24.434 42.137 24.449 41.938 24.477 cv
41.734 24.508 41.547 24.523 41.375 24.52 cv
41.246 24.523 41.152 24.492 41.102 24.43 cv
41.043 24.371 41.016 24.258 41.02 24.086 cv
41.02 20.473 li
41.016 20.324 41.051 20.215 41.125 20.137 cv
41.191 20.066 41.293 20.027 41.43 20.027 cv
45.359 20.027 li
45.395 20.027 45.43 20.039 45.465 20.059 cv
45.496 20.082 45.523 20.113 45.551 20.152 cv
45.57 20.195 45.586 20.246 45.602 20.309 cv
45.609 20.375 45.617 20.453 45.621 20.535 cv
45.617 20.703 45.594 20.828 45.555 20.918 cv
45.508 21.012 45.449 21.059 45.371 21.055 cv
42.199 21.055 li
42.199 23.543 li
42.352 23.523 42.508 23.512 42.672 23.504 cv
42.828 23.5 43.016 23.496 43.23 23.496 cv
43.715 23.496 44.141 23.559 44.508 23.68 cv
44.871 23.801 45.176 23.973 45.426 24.191 cv
45.668 24.418 45.855 24.684 45.98 24.996 cv
46.105 25.312 46.168 25.664 46.168 26.047 cv
cp
f
62.754 521.367 mo
62.75 521.457 62.742 521.527 62.73 521.586 cv
62.715 521.648 62.695 521.699 62.676 521.73 cv
62.652 521.77 62.629 521.793 62.598 521.809 cv
62.566 521.824 62.535 521.832 62.508 521.832 cv
57.871 521.832 li
57.836 521.832 57.809 521.824 57.781 521.809 cv
57.754 521.793 57.727 521.77 57.703 521.73 cv
57.676 521.699 57.656 521.648 57.645 521.586 cv
57.629 521.527 57.621 521.457 57.625 521.367 cv
57.621 521.289 57.629 521.215 57.645 521.152 cv
57.656 521.094 57.672 521.047 57.695 521.008 cv
57.711 520.973 57.738 520.941 57.77 520.918 cv
57.801 520.898 57.832 520.891 57.871 520.887 cv
59.723 520.887 li
59.723 514.141 li
58.008 515.16 li
57.918 515.211 57.848 515.238 57.801 515.246 cv
57.746 515.254 57.703 515.246 57.672 515.215 cv
57.637 515.187 57.617 515.137 57.605 515.066 cv
57.594 515 57.586 514.914 57.59 514.805 cv
57.586 514.73 57.59 514.664 57.602 514.605 cv
57.605 514.555 57.617 514.508 57.633 514.469 cv
57.645 514.434 57.664 514.402 57.688 514.375 cv
57.711 514.348 57.742 514.32 57.789 514.293 cv
59.832 512.98 li
59.848 512.969 59.867 512.957 59.898 512.949 cv
59.922 512.941 59.957 512.934 60.004 512.922 cv
60.043 512.914 60.094 512.906 60.148 512.902 cv
60.203 512.902 60.27 512.902 60.355 512.898 cv
60.461 512.902 60.555 512.906 60.629 512.914 cv
60.699 512.922 60.754 512.937 60.801 512.953 cv
60.84 512.973 60.867 512.992 60.883 513.016 cv
60.891 513.043 60.898 513.066 60.902 513.09 cv
60.902 520.887 li
62.508 520.887 li
62.543 520.891 62.578 520.898 62.609 520.918 cv
62.641 520.941 62.664 520.973 62.688 521.008 cv
62.703 521.047 62.719 521.094 62.734 521.152 cv
62.742 521.215 62.75 521.289 62.754 521.367 cv
cp
f
133.438 521.324 mo
133.434 521.41 133.43 521.484 133.418 521.547 cv
133.406 521.613 133.391 521.668 133.371 521.707 cv
133.348 521.754 133.32 521.785 133.289 521.801 cv
133.254 521.824 133.215 521.832 133.176 521.832 cv
128.273 521.832 li
128.211 521.832 128.152 521.824 128.105 521.809 cv
128.055 521.793 128.016 521.77 127.98 521.73 cv
127.945 521.699 127.918 521.645 127.906 521.574 cv
127.887 521.504 127.879 521.418 127.883 521.316 cv
127.879 521.227 127.883 521.148 127.891 521.078 cv
127.895 521.012 127.91 520.953 127.938 520.898 cv
127.961 520.848 127.992 520.793 128.027 520.738 cv
128.063 520.687 128.105 520.633 128.164 520.57 cv
129.938 518.746 li
130.348 518.328 130.676 517.953 130.926 517.617 cv
131.172 517.289 131.363 516.984 131.496 516.707 cv
131.629 516.434 131.715 516.184 131.762 515.957 cv
131.801 515.734 131.824 515.523 131.824 515.328 cv
131.824 515.133 131.789 514.949 131.723 514.77 cv
131.656 514.598 131.563 514.441 131.438 514.305 cv
131.313 514.176 131.156 514.07 130.969 513.988 cv
130.781 513.914 130.563 513.875 130.316 513.871 cv
130.027 513.875 129.77 513.914 129.543 513.988 cv
129.313 514.07 129.113 514.156 128.941 514.242 cv
128.77 514.336 128.625 514.418 128.508 514.496 cv
128.391 514.574 128.305 514.613 128.254 514.613 cv
128.219 514.613 128.188 514.605 128.164 514.586 cv
128.133 514.57 128.113 514.539 128.098 514.496 cv
128.082 514.457 128.066 514.402 128.059 514.332 cv
128.047 514.266 128.043 514.184 128.047 514.086 cv
128.043 514.02 128.047 513.961 128.055 513.91 cv
128.059 513.859 128.066 513.816 128.078 513.777 cv
128.086 513.742 128.102 513.707 128.121 513.676 cv
128.141 513.645 128.176 513.605 128.234 513.555 cv
128.285 513.508 128.379 513.441 128.516 513.359 cv
128.648 513.277 128.82 513.199 129.023 513.117 cv
129.227 513.039 129.449 512.969 129.695 512.914 cv
129.938 512.859 130.195 512.832 130.469 512.832 cv
130.895 512.832 131.27 512.895 131.594 513.016 cv
131.914 513.137 132.18 513.301 132.395 513.512 cv
132.605 513.723 132.766 513.969 132.871 514.242 cv
132.977 514.523 133.031 514.82 133.031 515.133 cv
133.031 515.422 133.004 515.703 132.953 515.98 cv
132.902 516.266 132.797 516.57 132.637 516.895 cv
132.473 517.223 132.238 517.586 131.934 517.984 cv
131.625 518.387 131.219 518.848 130.715 519.363 cv
129.309 520.832 li
133.168 520.832 li
133.199 520.836 133.234 520.848 133.273 520.863 cv
133.305 520.887 133.336 520.918 133.363 520.957 cv
133.387 521 133.406 521.051 133.418 521.109 cv
133.43 521.176 133.434 521.246 133.438 521.324 cv
cp
f
204.52 519.309 mo
204.516 519.461 204.492 519.582 204.449 519.668 cv
204.402 519.758 204.34 519.801 204.258 519.797 cv
203.258 519.797 li
203.258 521.66 li
203.258 521.699 203.246 521.73 203.23 521.754 cv
203.207 521.781 203.176 521.801 203.133 521.82 cv
203.082 521.836 203.02 521.848 202.949 521.859 cv
202.871 521.867 202.777 521.871 202.66 521.875 cv
202.543 521.871 202.445 521.867 202.375 521.859 cv
202.297 521.848 202.238 521.836 202.195 521.82 cv
202.148 521.801 202.117 521.781 202.102 521.754 cv
202.082 521.73 202.074 521.699 202.078 521.66 cv
202.078 519.797 li
198.449 519.797 li
198.391 519.801 198.348 519.793 198.313 519.777 cv
198.277 519.766 198.242 519.738 198.215 519.699 cv
198.184 519.664 198.164 519.613 198.152 519.543 cv
198.141 519.477 198.137 519.387 198.137 519.273 cv
198.137 519.191 198.137 519.113 198.145 519.043 cv
198.145 518.973 198.156 518.91 198.172 518.855 cv
198.184 518.801 198.199 518.746 198.227 518.691 cv
198.246 518.637 198.273 518.582 198.309 518.52 cv
201.469 513.133 li
201.488 513.098 201.523 513.066 201.57 513.039 cv
201.613 513.012 201.668 512.988 201.742 512.969 cv
201.809 512.953 201.895 512.941 202 512.93 cv
202.102 512.926 202.223 512.922 202.363 512.918 cv
202.512 512.922 202.648 512.926 202.766 512.937 cv
202.879 512.949 202.969 512.965 203.043 512.98 cv
203.109 513 203.164 513.023 203.203 513.055 cv
203.238 513.086 203.258 513.121 203.258 513.16 cv
203.258 518.824 li
204.258 518.824 li
204.332 518.828 204.395 518.867 204.445 518.945 cv
204.492 519.027 204.516 519.148 204.52 519.309 cv
cp
202.078 513.957 mo
202.066 513.957 li
199.215 518.824 li
202.078 518.824 li
cp
f
275.074 518.961 mo
275.074 519.352 275.012 519.73 274.895 520.09 cv
274.77 520.457 274.586 520.773 274.344 521.047 cv
274.094 521.324 273.781 521.547 273.406 521.711 cv
273.023 521.879 272.578 521.961 272.063 521.961 cv
271.691 521.961 271.363 521.918 271.082 521.824 cv
270.797 521.738 270.551 521.605 270.34 521.434 cv
270.129 521.266 269.953 521.059 269.816 520.812 cv
269.676 520.566 269.563 520.285 269.48 519.969 cv
269.395 519.656 269.336 519.312 269.301 518.934 cv
269.262 518.562 269.242 518.16 269.246 517.727 cv
269.242 517.348 269.262 516.965 269.305 516.574 cv
269.344 516.191 269.418 515.816 269.523 515.449 cv
269.629 515.09 269.773 514.75 269.953 514.434 cv
270.133 514.117 270.359 513.84 270.633 513.605 cv
270.906 513.371 271.23 513.184 271.609 513.043 cv
271.988 512.906 272.43 512.84 272.934 512.836 cv
273.102 512.84 273.273 512.848 273.445 512.867 cv
273.617 512.891 273.777 512.922 273.926 512.953 cv
274.074 512.992 274.195 513.027 274.297 513.066 cv
274.395 513.105 274.461 513.141 274.496 513.164 cv
274.523 513.191 274.547 513.219 274.566 513.246 cv
274.582 513.277 274.598 513.309 274.605 513.344 cv
274.613 513.379 274.617 513.418 274.625 513.461 cv
274.625 513.504 274.629 513.559 274.633 513.621 cv
274.629 513.707 274.629 513.777 274.629 513.832 cv
274.625 513.895 274.613 513.941 274.602 513.977 cv
274.582 514.016 274.563 514.043 274.539 514.059 cv
274.512 514.078 274.48 514.086 274.441 514.086 cv
274.391 514.086 274.32 514.07 274.234 514.039 cv
274.145 514.008 274.039 513.973 273.918 513.93 cv
273.793 513.895 273.645 513.859 273.469 513.824 cv
273.293 513.797 273.09 513.781 272.859 513.777 cv
272.43 513.781 272.063 513.867 271.758 514.039 cv
271.453 514.211 271.203 514.445 271.008 514.738 cv
270.813 515.031 270.668 515.371 270.578 515.754 cv
270.48 516.145 270.426 516.547 270.418 516.965 cv
270.535 516.898 270.672 516.832 270.82 516.762 cv
270.969 516.695 271.129 516.633 271.305 516.574 cv
271.48 516.523 271.668 516.477 271.863 516.441 cv
272.059 516.41 272.27 516.395 272.496 516.391 cv
272.973 516.395 273.375 516.461 273.707 516.586 cv
274.035 516.719 274.301 516.898 274.508 517.129 cv
274.707 517.359 274.852 517.629 274.941 517.941 cv
275.027 518.254 275.074 518.594 275.074 518.961 cv
cp
273.879 519.07 mo
273.879 518.809 273.852 518.566 273.801 518.348 cv
273.746 518.133 273.656 517.949 273.535 517.793 cv
273.41 517.645 273.246 517.527 273.043 517.445 cv
272.832 517.363 272.578 517.32 272.281 517.32 cv
272.109 517.32 271.941 517.336 271.773 517.367 cv
271.602 517.398 271.438 517.441 271.281 517.488 cv
271.121 517.543 270.973 517.605 270.832 517.676 cv
270.688 517.75 270.555 517.824 270.438 517.902 cv
270.434 518.496 270.473 518.992 270.551 519.387 cv
270.625 519.785 270.734 520.102 270.879 520.34 cv
271.023 520.582 271.203 520.754 271.418 520.855 cv
271.633 520.961 271.883 521.012 272.172 521.008 cv
272.461 521.012 272.715 520.957 272.93 520.844 cv
273.145 520.738 273.32 520.59 273.465 520.402 cv
273.605 520.219 273.711 520.012 273.777 519.781 cv
273.844 519.551 273.879 519.316 273.879 519.07 cv
cp
f
345.758 519.555 mo
345.758 519.941 345.688 520.285 345.551 520.582 cv
345.414 520.887 345.219 521.137 344.961 521.34 cv
344.703 521.547 344.383 521.703 344.004 521.805 cv
343.621 521.91 343.188 521.961 342.703 521.961 cv
342.242 521.961 341.832 521.914 341.473 521.82 cv
341.109 521.727 340.805 521.586 340.555 521.395 cv
340.305 521.211 340.113 520.98 339.98 520.703 cv
339.848 520.43 339.781 520.117 339.781 519.762 cv
339.781 519.488 339.824 519.23 339.918 518.996 cv
340.004 518.762 340.137 518.547 340.313 518.352 cv
340.48 518.156 340.691 517.973 340.945 517.797 cv
341.195 517.629 341.48 517.465 341.797 517.309 cv
341.523 517.168 341.281 517.02 341.07 516.859 cv
340.859 516.703 340.68 516.531 340.535 516.344 cv
340.387 516.16 340.277 515.965 340.203 515.754 cv
340.125 515.547 340.086 515.316 340.09 515.066 cv
340.086 514.758 340.141 514.465 340.258 514.191 cv
340.367 513.922 340.539 513.687 340.766 513.484 cv
340.992 513.285 341.277 513.125 341.629 513.008 cv
341.973 512.891 342.383 512.832 342.852 512.832 cv
343.297 512.832 343.684 512.887 344.012 512.992 cv
344.34 513.102 344.609 513.246 344.82 513.43 cv
345.031 513.617 345.188 513.836 345.293 514.086 cv
345.391 514.336 345.441 514.605 345.445 514.895 cv
345.441 515.129 345.402 515.355 345.332 515.566 cv
345.254 515.785 345.145 515.988 344.996 516.176 cv
344.848 516.371 344.668 516.551 344.457 516.715 cv
344.246 516.887 344.004 517.043 343.73 517.184 cv
344.051 517.348 344.336 517.512 344.594 517.68 cv
344.844 517.848 345.059 518.027 345.234 518.223 cv
345.402 518.418 345.531 518.625 345.625 518.84 cv
345.711 519.059 345.758 519.297 345.758 519.555 cv
cp
344.277 515.004 mo
344.273 514.816 344.242 514.641 344.176 514.484 cv
344.109 514.328 344.012 514.195 343.887 514.086 cv
343.758 513.977 343.598 513.895 343.41 513.836 cv
343.215 513.781 343 513.754 342.762 513.75 cv
342.266 513.754 341.891 513.863 341.641 514.086 cv
341.383 514.312 341.258 514.621 341.262 515.004 cv
341.258 515.184 341.289 515.348 341.352 515.5 cv
341.414 515.656 341.508 515.801 341.641 515.937 cv
341.766 516.074 341.93 516.207 342.133 516.336 cv
342.328 516.469 342.566 516.605 342.844 516.746 cv
343.305 516.512 343.66 516.25 343.906 515.957 cv
344.152 515.672 344.273 515.355 344.277 515.004 cv
cp
344.566 519.68 mo
344.563 519.473 344.523 519.281 344.449 519.109 cv
344.367 518.941 344.25 518.781 344.094 518.629 cv
343.938 518.48 343.738 518.336 343.504 518.195 cv
343.266 518.059 342.996 517.914 342.688 517.762 cv
342.398 517.906 342.145 518.047 341.93 518.187 cv
341.711 518.328 341.531 518.477 341.395 518.625 cv
341.254 518.781 341.148 518.937 341.078 519.102 cv
341.004 519.27 340.969 519.453 340.973 519.652 cv
340.969 520.098 341.121 520.441 341.43 520.68 cv
341.73 520.926 342.184 521.047 342.789 521.043 cv
343.371 521.047 343.816 520.926 344.117 520.676 cv
344.414 520.434 344.563 520.102 344.566 519.68 cv
cp
f
412.727 521.367 mo
412.723 521.457 412.715 521.527 412.703 521.586 cv
412.688 521.648 412.668 521.699 412.648 521.73 cv
412.625 521.77 412.602 521.793 412.57 521.809 cv
412.539 521.824 412.508 521.832 412.48 521.832 cv
407.844 521.832 li
407.809 521.832 407.781 521.824 407.754 521.809 cv
407.727 521.793 407.699 521.77 407.676 521.73 cv
407.648 521.699 407.629 521.648 407.617 521.586 cv
407.602 521.527 407.594 521.457 407.598 521.367 cv
407.594 521.289 407.602 521.215 407.617 521.152 cv
407.629 521.094 407.645 521.047 407.668 521.008 cv
407.684 520.973 407.711 520.941 407.742 520.918 cv
407.773 520.898 407.805 520.891 407.844 520.887 cv
409.695 520.887 li
409.695 514.141 li
407.98 515.16 li
407.891 515.211 407.82 515.238 407.773 515.246 cv
407.719 515.254 407.676 515.246 407.645 515.215 cv
407.609 515.187 407.59 515.137 407.578 515.066 cv
407.566 515 407.559 514.914 407.563 514.805 cv
407.559 514.73 407.563 514.664 407.574 514.605 cv
407.578 514.555 407.59 514.508 407.605 514.469 cv
407.617 514.434 407.637 514.402 407.66 514.375 cv
407.684 514.348 407.715 514.32 407.762 514.293 cv
409.805 512.98 li
409.82 512.969 409.84 512.957 409.871 512.949 cv
409.895 512.941 409.93 512.934 409.977 512.922 cv
410.016 512.914 410.066 512.906 410.121 512.902 cv
410.176 512.902 410.242 512.902 410.328 512.898 cv
410.434 512.902 410.527 512.906 410.602 512.914 cv
410.672 512.922 410.727 512.937 410.773 512.953 cv
410.813 512.973 410.84 512.992 410.855 513.016 cv
410.863 513.043 410.871 513.066 410.875 513.09 cv
410.875 520.887 li
412.48 520.887 li
412.516 520.891 412.551 520.898 412.582 520.918 cv
412.613 520.941 412.637 520.973 412.66 521.008 cv
412.676 521.047 412.691 521.094 412.707 521.152 cv
412.715 521.215 412.723 521.289 412.727 521.367 cv
cp
f
420.078 517.375 mo
420.074 518.059 420.023 518.68 419.918 519.242 cv
419.809 519.805 419.629 520.289 419.383 520.691 cv
419.129 521.098 418.801 521.41 418.402 521.629 cv
417.996 521.852 417.504 521.961 416.918 521.961 cv
416.359 521.961 415.887 521.863 415.508 521.664 cv
415.125 521.469 414.82 521.176 414.586 520.789 cv
414.352 520.402 414.184 519.93 414.09 519.363 cv
413.988 518.801 413.941 518.152 413.941 517.418 cv
413.941 516.746 413.996 516.125 414.105 515.559 cv
414.215 514.996 414.391 514.512 414.641 514.105 cv
414.883 513.703 415.207 513.391 415.613 513.164 cv
416.012 512.945 416.508 512.832 417.098 512.832 cv
417.656 512.832 418.129 512.934 418.512 513.129 cv
418.895 513.332 419.199 513.625 419.434 514.008 cv
419.664 514.398 419.832 514.871 419.93 515.434 cv
420.027 515.996 420.074 516.645 420.078 517.375 cv
cp
418.871 517.457 mo
418.867 517.016 418.852 516.617 418.824 516.266 cv
418.789 515.914 418.742 515.605 418.684 515.336 cv
418.617 515.066 418.539 514.836 418.441 514.641 cv
418.344 514.449 418.227 514.289 418.09 514.16 cv
417.949 514.035 417.789 513.941 417.617 513.883 cv
417.438 513.828 417.242 513.801 417.027 513.797 cv
416.637 513.801 416.32 513.891 416.082 514.074 cv
415.836 514.258 415.645 514.512 415.508 514.828 cv
415.367 515.148 415.273 515.52 415.223 515.949 cv
415.172 516.379 415.148 516.844 415.148 517.336 cv
415.148 518 415.18 518.562 415.25 519.023 cv
415.316 519.492 415.426 519.871 415.578 520.16 cv
415.723 520.457 415.914 520.668 416.145 520.797 cv
416.375 520.934 416.656 521 416.988 520.996 cv
417.242 521 417.465 520.961 417.66 520.875 cv
417.852 520.797 418.02 520.676 418.16 520.52 cv
418.301 520.367 418.414 520.184 418.508 519.969 cv
418.594 519.754 418.668 519.516 418.727 519.254 cv
418.777 518.996 418.816 518.715 418.84 518.41 cv
418.859 518.105 418.867 517.789 418.871 517.457 cv
cp
f
483.457 521.367 mo
483.453 521.457 483.445 521.527 483.434 521.586 cv
483.418 521.648 483.398 521.699 483.379 521.73 cv
483.355 521.77 483.332 521.793 483.301 521.809 cv
483.27 521.824 483.238 521.832 483.211 521.832 cv
478.574 521.832 li
478.539 521.832 478.512 521.824 478.484 521.809 cv
478.457 521.793 478.43 521.77 478.406 521.73 cv
478.379 521.699 478.359 521.648 478.348 521.586 cv
478.332 521.527 478.324 521.457 478.328 521.367 cv
478.324 521.289 478.332 521.215 478.348 521.152 cv
478.359 521.094 478.375 521.047 478.398 521.008 cv
478.414 520.973 478.441 520.941 478.473 520.918 cv
478.504 520.898 478.535 520.891 478.574 520.887 cv
480.426 520.887 li
480.426 514.141 li
478.711 515.16 li
478.621 515.211 478.551 515.238 478.504 515.246 cv
478.449 515.254 478.406 515.246 478.375 515.215 cv
478.34 515.187 478.32 515.137 478.309 515.066 cv
478.297 515 478.289 514.914 478.293 514.805 cv
478.289 514.73 478.293 514.664 478.305 514.605 cv
478.309 514.555 478.32 514.508 478.336 514.469 cv
478.348 514.434 478.367 514.402 478.391 514.375 cv
478.414 514.348 478.445 514.32 478.492 514.293 cv
480.535 512.98 li
480.551 512.969 480.57 512.957 480.602 512.949 cv
480.625 512.941 480.66 512.934 480.707 512.922 cv
480.746 512.914 480.797 512.906 480.852 512.902 cv
480.906 512.902 480.973 512.902 481.059 512.898 cv
481.164 512.902 481.258 512.906 481.332 512.914 cv
481.402 512.922 481.457 512.937 481.504 512.953 cv
481.543 512.973 481.57 512.992 481.586 513.016 cv
481.594 513.043 481.602 513.066 481.605 513.09 cv
481.605 520.887 li
483.211 520.887 li
483.246 520.891 483.281 520.898 483.313 520.918 cv
483.344 520.941 483.367 520.973 483.391 521.008 cv
483.406 521.047 483.422 521.094 483.438 521.152 cv
483.445 521.215 483.453 521.289 483.457 521.367 cv
cp
f
490.516 521.324 mo
490.512 521.41 490.508 521.484 490.496 521.547 cv
490.484 521.613 490.469 521.668 490.449 521.707 cv
490.426 521.754 490.398 521.785 490.367 521.801 cv
490.332 521.824 490.293 521.832 490.254 521.832 cv
485.352 521.832 li
485.289 521.832 485.23 521.824 485.184 521.809 cv
485.133 521.793 485.094 521.77 485.059 521.73 cv
485.023 521.699 484.996 521.645 484.984 521.574 cv
484.965 521.504 484.957 521.418 484.961 521.316 cv
484.957 521.227 484.961 521.148 484.969 521.078 cv
484.973 521.012 484.988 520.953 485.016 520.898 cv
485.039 520.848 485.07 520.793 485.105 520.738 cv
485.141 520.687 485.184 520.633 485.242 520.57 cv
487.016 518.746 li
487.426 518.328 487.754 517.953 488.004 517.617 cv
488.25 517.289 488.441 516.984 488.574 516.707 cv
488.707 516.434 488.793 516.184 488.84 515.957 cv
488.879 515.734 488.902 515.523 488.902 515.328 cv
488.902 515.133 488.867 514.949 488.801 514.77 cv
488.734 514.598 488.641 514.441 488.516 514.305 cv
488.391 514.176 488.234 514.07 488.047 513.988 cv
487.859 513.914 487.641 513.875 487.395 513.871 cv
487.105 513.875 486.848 513.914 486.621 513.988 cv
486.391 514.07 486.191 514.156 486.02 514.242 cv
485.848 514.336 485.703 514.418 485.586 514.496 cv
485.469 514.574 485.383 514.613 485.332 514.613 cv
485.297 514.613 485.266 514.605 485.242 514.586 cv
485.211 514.57 485.191 514.539 485.176 514.496 cv
485.16 514.457 485.145 514.402 485.137 514.332 cv
485.125 514.266 485.121 514.184 485.125 514.086 cv
485.121 514.02 485.125 513.961 485.133 513.91 cv
485.137 513.859 485.145 513.816 485.156 513.777 cv
485.164 513.742 485.18 513.707 485.199 513.676 cv
485.219 513.645 485.254 513.605 485.313 513.555 cv
485.363 513.508 485.457 513.441 485.594 513.359 cv
485.727 513.277 485.898 513.199 486.102 513.117 cv
486.305 513.039 486.527 512.969 486.773 512.914 cv
487.016 512.859 487.273 512.832 487.547 512.832 cv
487.973 512.832 488.348 512.895 488.672 513.016 cv
488.992 513.137 489.258 513.301 489.473 513.512 cv
489.684 513.723 489.844 513.969 489.949 514.242 cv
490.055 514.523 490.109 514.82 490.109 515.133 cv
490.109 515.422 490.082 515.703 490.031 515.98 cv
489.98 516.266 489.875 516.57 489.715 516.895 cv
489.551 517.223 489.316 517.586 489.012 517.984 cv
488.703 518.387 488.297 518.848 487.793 519.363 cv
486.387 520.832 li
490.246 520.832 li
490.277 520.836 490.313 520.848 490.352 520.863 cv
490.383 520.887 490.414 520.918 490.441 520.957 cv
490.465 521 490.484 521.051 490.496 521.109 cv
490.508 521.176 490.512 521.246 490.516 521.324 cv
cp
f
554.156 521.367 mo
554.152 521.457 554.145 521.527 554.133 521.586 cv
554.117 521.648 554.098 521.699 554.078 521.73 cv
554.055 521.77 554.031 521.793 554 521.809 cv
553.969 521.824 553.938 521.832 553.91 521.832 cv
549.273 521.832 li
549.238 521.832 549.211 521.824 549.184 521.809 cv
549.156 521.793 549.129 521.77 549.105 521.73 cv
549.078 521.699 549.059 521.648 549.047 521.586 cv
549.031 521.527 549.023 521.457 549.027 521.367 cv
549.023 521.289 549.031 521.215 549.047 521.152 cv
549.059 521.094 549.074 521.047 549.098 521.008 cv
549.113 520.973 549.141 520.941 549.172 520.918 cv
549.203 520.898 549.234 520.891 549.273 520.887 cv
551.125 520.887 li
551.125 514.141 li
549.41 515.16 li
549.32 515.211 549.25 515.238 549.203 515.246 cv
549.148 515.254 549.105 515.246 549.074 515.215 cv
549.039 515.187 549.02 515.137 549.008 515.066 cv
548.996 515 548.988 514.914 548.992 514.805 cv
548.988 514.73 548.992 514.664 549.004 514.605 cv
549.008 514.555 549.02 514.508 549.035 514.469 cv
549.047 514.434 549.066 514.402 549.09 514.375 cv
549.113 514.348 549.145 514.32 549.191 514.293 cv
551.234 512.98 li
551.25 512.969 551.27 512.957 551.301 512.949 cv
551.324 512.941 551.359 512.934 551.406 512.922 cv
551.445 512.914 551.496 512.906 551.551 512.902 cv
551.605 512.902 551.672 512.902 551.758 512.898 cv
551.863 512.902 551.957 512.906 552.031 512.914 cv
552.102 512.922 552.156 512.937 552.203 512.953 cv
552.242 512.973 552.27 512.992 552.285 513.016 cv
552.293 513.043 552.301 513.066 552.305 513.09 cv
552.305 520.887 li
553.91 520.887 li
553.945 520.891 553.98 520.898 554.012 520.918 cv
554.043 520.941 554.066 520.973 554.09 521.008 cv
554.105 521.047 554.121 521.094 554.137 521.152 cv
554.145 521.215 554.152 521.289 554.156 521.367 cv
cp
f
561.59 519.309 mo
561.586 519.461 561.563 519.582 561.52 519.668 cv
561.473 519.758 561.41 519.801 561.328 519.797 cv
560.328 519.797 li
560.328 521.66 li
560.328 521.699 560.316 521.73 560.301 521.754 cv
560.277 521.781 560.246 521.801 560.203 521.82 cv
560.152 521.836 560.09 521.848 560.02 521.859 cv
559.941 521.867 559.848 521.871 559.73 521.875 cv
559.613 521.871 559.516 521.867 559.445 521.859 cv
559.367 521.848 559.309 521.836 559.266 521.82 cv
559.219 521.801 559.188 521.781 559.172 521.754 cv
559.152 521.73 559.145 521.699 559.148 521.66 cv
559.148 519.797 li
555.52 519.797 li
555.461 519.801 555.418 519.793 555.383 519.777 cv
555.348 519.766 555.313 519.738 555.285 519.699 cv
555.254 519.664 555.234 519.613 555.223 519.543 cv
555.211 519.477 555.207 519.387 555.207 519.273 cv
555.207 519.191 555.207 519.113 555.215 519.043 cv
555.215 518.973 555.227 518.91 555.242 518.855 cv
555.254 518.801 555.27 518.746 555.297 518.691 cv
555.316 518.637 555.344 518.582 555.379 518.52 cv
558.539 513.133 li
558.559 513.098 558.594 513.066 558.641 513.039 cv
558.684 513.012 558.738 512.988 558.813 512.969 cv
558.879 512.953 558.965 512.941 559.07 512.93 cv
559.172 512.926 559.293 512.922 559.434 512.918 cv
559.582 512.922 559.719 512.926 559.836 512.937 cv
559.949 512.949 560.039 512.965 560.113 512.98 cv
560.18 513 560.234 513.023 560.273 513.055 cv
560.309 513.086 560.328 513.121 560.328 513.16 cv
560.328 518.824 li
561.328 518.824 li
561.402 518.828 561.465 518.867 561.516 518.945 cv
561.563 519.027 561.586 519.148 561.59 519.309 cv
cp
559.148 513.957 mo
559.137 513.957 li
556.285 518.824 li
559.148 518.824 li
cp
f
624.855 521.367 mo
624.852 521.457 624.844 521.527 624.832 521.586 cv
624.816 521.648 624.797 521.699 624.777 521.73 cv
624.754 521.77 624.73 521.793 624.699 521.809 cv
624.668 521.824 624.637 521.832 624.609 521.832 cv
619.973 521.832 li
619.938 521.832 619.91 521.824 619.883 521.809 cv
619.855 521.793 619.828 521.77 619.805 521.73 cv
619.777 521.699 619.758 521.648 619.746 521.586 cv
619.73 521.527 619.723 521.457 619.727 521.367 cv
619.723 521.289 619.73 521.215 619.746 521.152 cv
619.758 521.094 619.773 521.047 619.797 521.008 cv
619.813 520.973 619.84 520.941 619.871 520.918 cv
619.902 520.898 619.934 520.891 619.973 520.887 cv
621.824 520.887 li
621.824 514.141 li
620.109 515.16 li
620.02 515.211 619.949 515.238 619.902 515.246 cv
619.848 515.254 619.805 515.246 619.773 515.215 cv
619.738 515.187 619.719 515.137 619.707 515.066 cv
619.695 515 619.688 514.914 619.691 514.805 cv
619.688 514.73 619.691 514.664 619.703 514.605 cv
619.707 514.555 619.719 514.508 619.734 514.469 cv
619.746 514.434 619.766 514.402 619.789 514.375 cv
619.813 514.348 619.844 514.32 619.891 514.293 cv
621.934 512.98 li
621.949 512.969 621.969 512.957 622 512.949 cv
622.023 512.941 622.059 512.934 622.105 512.922 cv
622.145 512.914 622.195 512.906 622.25 512.902 cv
622.305 512.902 622.371 512.902 622.457 512.898 cv
622.563 512.902 622.656 512.906 622.73 512.914 cv
622.801 512.922 622.855 512.937 622.902 512.953 cv
622.941 512.973 622.969 512.992 622.984 513.016 cv
622.992 513.043 623 513.066 623.004 513.09 cv
623.004 520.887 li
624.609 520.887 li
624.645 520.891 624.68 520.898 624.711 520.918 cv
624.742 520.941 624.766 520.973 624.789 521.008 cv
624.805 521.047 624.82 521.094 624.836 521.152 cv
624.844 521.215 624.852 521.289 624.855 521.367 cv
cp
f
632.141 518.961 mo
632.141 519.352 632.078 519.73 631.961 520.09 cv
631.836 520.457 631.652 520.773 631.41 521.047 cv
631.16 521.324 630.848 521.547 630.473 521.711 cv
630.09 521.879 629.645 521.961 629.129 521.961 cv
628.758 521.961 628.43 521.918 628.148 521.824 cv
627.863 521.738 627.617 521.605 627.406 521.434 cv
627.195 521.266 627.02 521.059 626.883 520.812 cv
626.742 520.566 626.629 520.285 626.547 519.969 cv
626.461 519.656 626.402 519.312 626.367 518.934 cv
626.328 518.562 626.309 518.16 626.313 517.727 cv
626.309 517.348 626.328 516.965 626.371 516.574 cv
626.41 516.191 626.484 515.816 626.59 515.449 cv
626.695 515.09 626.84 514.75 627.02 514.434 cv
627.199 514.117 627.426 513.84 627.699 513.605 cv
627.973 513.371 628.297 513.184 628.676 513.043 cv
629.055 512.906 629.496 512.84 630 512.836 cv
630.168 512.84 630.34 512.848 630.512 512.867 cv
630.684 512.891 630.844 512.922 630.992 512.953 cv
631.141 512.992 631.262 513.027 631.363 513.066 cv
631.461 513.105 631.527 513.141 631.563 513.164 cv
631.59 513.191 631.613 513.219 631.633 513.246 cv
631.648 513.277 631.664 513.309 631.672 513.344 cv
631.68 513.379 631.684 513.418 631.691 513.461 cv
631.691 513.504 631.695 513.559 631.699 513.621 cv
631.695 513.707 631.695 513.777 631.695 513.832 cv
631.691 513.895 631.68 513.941 631.668 513.977 cv
631.648 514.016 631.629 514.043 631.605 514.059 cv
631.578 514.078 631.547 514.086 631.508 514.086 cv
631.457 514.086 631.387 514.07 631.301 514.039 cv
631.211 514.008 631.105 513.973 630.984 513.93 cv
630.859 513.895 630.711 513.859 630.535 513.824 cv
630.359 513.797 630.156 513.781 629.926 513.777 cv
629.496 513.781 629.129 513.867 628.824 514.039 cv
628.52 514.211 628.27 514.445 628.074 514.738 cv
627.879 515.031 627.734 515.371 627.645 515.754 cv
627.547 516.145 627.492 516.547 627.484 516.965 cv
627.602 516.898 627.738 516.832 627.887 516.762 cv
628.035 516.695 628.195 516.633 628.371 516.574 cv
628.547 516.523 628.734 516.477 628.93 516.441 cv
629.125 516.41 629.336 516.395 629.563 516.391 cv
630.039 516.395 630.441 516.461 630.773 516.586 cv
631.102 516.719 631.367 516.898 631.574 517.129 cv
631.773 517.359 631.918 517.629 632.008 517.941 cv
632.094 518.254 632.141 518.594 632.141 518.961 cv
cp
630.945 519.07 mo
630.945 518.809 630.918 518.566 630.867 518.348 cv
630.813 518.133 630.723 517.949 630.602 517.793 cv
630.477 517.645 630.313 517.527 630.109 517.445 cv
629.898 517.363 629.645 517.32 629.348 517.32 cv
629.176 517.32 629.008 517.336 628.84 517.367 cv
628.668 517.398 628.504 517.441 628.348 517.488 cv
628.188 517.543 628.039 517.605 627.898 517.676 cv
627.754 517.75 627.621 517.824 627.504 517.902 cv
627.5 518.496 627.539 518.992 627.617 519.387 cv
627.691 519.785 627.801 520.102 627.945 520.34 cv
628.09 520.582 628.27 520.754 628.484 520.855 cv
628.699 520.961 628.949 521.012 629.238 521.008 cv
629.527 521.012 629.781 520.957 629.996 520.844 cv
630.211 520.738 630.387 520.59 630.531 520.402 cv
630.672 520.219 630.777 520.012 630.844 519.781 cv
630.91 519.551 630.945 519.316 630.945 519.07 cv
cp
f
17.004 322.555 mo
17.047 322.559 17.082 322.566 17.113 322.578 cv
17.145 322.598 17.172 322.633 17.191 322.68 cv
17.211 322.734 17.223 322.805 17.238 322.898 cv
17.246 322.992 17.254 323.117 17.254 323.273 cv
17.254 323.41 17.246 323.523 17.238 323.605 cv
17.223 323.691 17.211 323.758 17.188 323.809 cv
17.168 323.863 17.133 323.902 17.09 323.93 cv
17.051 323.961 17 323.988 16.934 324.004 cv
14.559 324.934 li
14.289 325.047 14.043 325.16 13.813 325.273 cv
13.59 325.391 13.395 325.527 13.23 325.687 cv
13.07 325.852 12.941 326.043 12.848 326.258 cv
12.758 326.48 12.715 326.742 12.711 327.043 cv
12.711 327.941 li
17.004 327.941 li
17.047 327.945 17.082 327.957 17.113 327.977 cv
17.145 328.004 17.172 328.039 17.188 328.086 cv
17.207 328.137 17.219 328.203 17.234 328.289 cv
17.246 328.375 17.254 328.484 17.254 328.609 cv
17.254 328.742 17.246 328.848 17.234 328.934 cv
17.219 329.02 17.207 329.09 17.188 329.141 cv
17.172 329.195 17.145 329.23 17.113 329.25 cv
17.082 329.273 17.047 329.285 17.004 329.281 cv
7.668 329.281 li
7.465 329.285 7.324 329.23 7.242 329.121 cv
7.164 329.016 7.125 328.902 7.121 328.781 cv
7.121 326.641 li
7.125 326.391 7.129 326.176 7.141 326.004 cv
7.156 325.836 7.172 325.684 7.184 325.547 cv
7.254 325.16 7.359 324.816 7.504 324.516 cv
7.652 324.219 7.84 323.969 8.059 323.766 cv
8.285 323.562 8.539 323.41 8.828 323.309 cv
9.117 323.207 9.438 323.156 9.781 323.156 cv
10.121 323.156 10.422 323.203 10.688 323.293 cv
10.957 323.387 11.195 323.52 11.398 323.687 cv
11.609 323.859 11.785 324.062 11.934 324.301 cv
12.082 324.543 12.211 324.812 12.313 325.105 cv
12.391 324.941 12.48 324.789 12.59 324.652 cv
12.703 324.52 12.84 324.395 12.992 324.273 cv
13.152 324.16 13.332 324.047 13.531 323.941 cv
13.734 323.84 13.961 323.738 14.215 323.629 cv
16.434 322.727 li
16.621 322.656 16.754 322.609 16.828 322.586 cv
16.906 322.57 16.965 322.559 17.004 322.555 cv
cp
9.922 324.574 mo
9.531 324.574 9.195 324.664 8.922 324.84 cv
8.648 325.02 8.453 325.316 8.332 325.727 cv
8.297 325.859 8.27 326.004 8.254 326.168 cv
8.238 326.332 8.23 326.547 8.23 326.809 cv
8.23 327.941 li
11.629 327.941 li
11.629 326.633 li
11.629 326.281 11.586 325.977 11.5 325.715 cv
11.414 325.461 11.297 325.246 11.141 325.074 cv
10.992 324.906 10.809 324.781 10.598 324.695 cv
10.391 324.617 10.168 324.574 9.922 324.574 cv
cp
f
17.012 314.754 mo
17.059 314.758 17.094 314.766 17.117 314.781 cv
17.148 314.801 17.172 314.836 17.191 314.879 cv
17.211 314.926 17.223 314.984 17.238 315.059 cv
17.246 315.137 17.254 315.23 17.254 315.336 cv
17.254 315.461 17.246 315.559 17.238 315.629 cv
17.223 315.707 17.211 315.766 17.191 315.809 cv
17.172 315.855 17.148 315.887 17.117 315.898 cv
17.094 315.918 17.059 315.926 17.012 315.922 cv
16.086 315.922 li
16.531 316.324 16.852 316.719 17.051 317.105 cv
17.254 317.5 17.352 317.895 17.355 318.289 cv
17.352 318.762 17.277 319.156 17.121 319.473 cv
16.969 319.793 16.758 320.051 16.488 320.246 cv
16.223 320.449 15.91 320.59 15.551 320.672 cv
15.195 320.762 14.762 320.805 14.254 320.801 cv
10 320.801 li
9.961 320.805 9.926 320.797 9.895 320.773 cv
9.867 320.758 9.844 320.723 9.816 320.668 cv
9.797 320.621 9.781 320.551 9.77 320.465 cv
9.766 320.383 9.762 320.281 9.758 320.152 cv
9.762 320.031 9.766 319.926 9.77 319.84 cv
9.781 319.758 9.797 319.691 9.816 319.645 cv
9.844 319.598 9.867 319.562 9.895 319.539 cv
9.926 319.52 9.961 319.512 10 319.508 cv
14.082 319.508 li
14.496 319.512 14.824 319.48 15.07 319.418 cv
15.316 319.359 15.527 319.27 15.699 319.145 cv
15.879 319.027 16.012 318.871 16.105 318.68 cv
16.203 318.496 16.254 318.277 16.25 318.027 cv
16.254 317.707 16.137 317.387 15.906 317.062 cv
15.68 316.746 15.344 316.406 14.898 316.047 cv
10 316.047 li
9.961 316.047 9.926 316.039 9.895 316.02 cv
9.867 316.004 9.844 315.969 9.816 315.914 cv
9.797 315.863 9.781 315.797 9.77 315.715 cv
9.766 315.637 9.762 315.531 9.758 315.398 cv
9.762 315.277 9.766 315.172 9.77 315.086 cv
9.781 315.004 9.797 314.941 9.816 314.895 cv
9.844 314.852 9.867 314.816 9.895 314.789 cv
9.926 314.77 9.961 314.758 10 314.754 cv
cp
f
17.012 306.344 mo
17.059 306.344 17.094 306.355 17.117 306.375 cv
17.148 306.398 17.172 306.434 17.191 306.477 cv
17.211 306.527 17.223 306.59 17.238 306.672 cv
17.246 306.754 17.254 306.859 17.254 306.98 cv
17.254 307.113 17.246 307.219 17.238 307.301 cv
17.223 307.387 17.211 307.453 17.191 307.496 cv
17.172 307.547 17.148 307.578 17.117 307.598 cv
17.094 307.621 17.059 307.633 17.012 307.629 cv
12.906 307.629 li
12.508 307.633 12.188 307.664 11.941 307.723 cv
11.699 307.789 11.488 307.879 11.309 307.996 cv
11.133 308.113 10.996 308.27 10.902 308.457 cv
10.809 308.652 10.762 308.871 10.762 309.117 cv
10.762 309.441 10.879 309.766 11.105 310.086 cv
11.34 310.41 11.672 310.746 12.109 311.098 cv
17.012 311.098 li
17.059 311.102 17.094 311.113 17.117 311.129 cv
17.148 311.152 17.172 311.184 17.191 311.23 cv
17.211 311.277 17.223 311.344 17.238 311.422 cv
17.246 311.508 17.254 311.613 17.254 311.742 cv
17.254 311.871 17.246 311.977 17.238 312.055 cv
17.223 312.141 17.211 312.207 17.191 312.254 cv
17.172 312.309 17.148 312.34 17.117 312.355 cv
17.094 312.375 17.059 312.387 17.012 312.383 cv
10 312.383 li
9.961 312.387 9.926 312.379 9.895 312.359 cv
9.867 312.348 9.844 312.316 9.816 312.266 cv
9.797 312.223 9.781 312.16 9.77 312.086 cv
9.766 312.016 9.762 311.922 9.758 311.797 cv
9.762 311.687 9.766 311.59 9.77 311.512 cv
9.781 311.437 9.797 311.379 9.816 311.336 cv
9.844 311.297 9.867 311.27 9.895 311.25 cv
9.926 311.234 9.961 311.227 10 311.223 cv
10.926 311.223 li
10.484 310.832 10.164 310.437 9.957 310.043 cv
9.754 309.652 9.648 309.254 9.648 308.852 cv
9.648 308.383 9.73 307.992 9.887 307.672 cv
10.051 307.355 10.262 307.094 10.523 306.895 cv
10.789 306.699 11.098 306.559 11.453 306.473 cv
11.809 306.387 12.238 306.344 12.734 306.344 cv
cp
f
16.496 300.469 mo
16.652 300.469 16.77 300.48 16.855 300.5 cv
16.945 300.523 17.012 300.555 17.051 300.594 cv
17.094 300.637 17.133 300.699 17.168 300.781 cv
17.203 300.867 17.23 300.961 17.258 301.066 cv
17.277 301.176 17.297 301.289 17.316 301.406 cv
17.328 301.523 17.336 301.645 17.34 301.762 cv
17.336 302.129 17.289 302.441 17.195 302.699 cv
17.102 302.961 16.957 303.172 16.758 303.336 cv
16.566 303.504 16.32 303.625 16.02 303.699 cv
15.723 303.777 15.371 303.816 14.961 303.812 cv
10.863 303.812 li
10.863 304.793 li
10.867 304.871 10.824 304.934 10.738 304.98 cv
10.656 305.027 10.523 305.051 10.332 305.051 cv
10.238 305.051 10.156 305.047 10.086 305.031 cv
10.023 305.023 9.965 305.004 9.918 304.98 cv
9.875 304.961 9.844 304.934 9.824 304.898 cv
9.809 304.867 9.801 304.832 9.797 304.785 cv
9.797 303.812 li
8.129 303.812 li
8.098 303.816 8.063 303.805 8.027 303.785 cv
8 303.77 7.973 303.738 7.945 303.684 cv
7.926 303.637 7.91 303.57 7.895 303.484 cv
7.887 303.406 7.879 303.301 7.879 303.172 cv
7.879 303.043 7.887 302.937 7.895 302.855 cv
7.91 302.773 7.926 302.707 7.945 302.66 cv
7.973 302.613 8 302.582 8.027 302.559 cv
8.063 302.543 8.098 302.531 8.129 302.527 cv
9.797 302.527 li
9.797 300.727 li
9.801 300.687 9.809 300.652 9.824 300.617 cv
9.844 300.59 9.875 300.562 9.918 300.535 cv
9.965 300.516 10.023 300.5 10.086 300.484 cv
10.156 300.477 10.238 300.469 10.332 300.469 cv
10.523 300.469 10.656 300.492 10.738 300.539 cv
10.824 300.586 10.867 300.648 10.863 300.727 cv
10.863 302.527 li
14.777 302.527 li
15.262 302.531 15.625 302.461 15.871 302.312 cv
16.121 302.172 16.246 301.914 16.242 301.543 cv
16.246 301.43 16.234 301.324 16.207 301.227 cv
16.188 301.137 16.164 301.055 16.133 300.977 cv
16.109 300.906 16.082 300.844 16.059 300.789 cv
16.035 300.742 16.023 300.695 16.023 300.648 cv
16.023 300.625 16.031 300.598 16.043 300.574 cv
16.059 300.551 16.082 300.535 16.117 300.52 cv
16.156 300.512 16.207 300.5 16.266 300.484 cv
16.332 300.477 16.41 300.469 16.496 300.469 cv
cp
f
17.012 297.453 mo
17.059 297.457 17.094 297.469 17.117 297.484 cv
17.148 297.508 17.172 297.539 17.191 297.586 cv
17.211 297.633 17.223 297.699 17.238 297.777 cv
17.246 297.863 17.254 297.969 17.254 298.098 cv
17.254 298.227 17.246 298.332 17.238 298.41 cv
17.223 298.496 17.211 298.562 17.191 298.609 cv
17.172 298.664 17.148 298.695 17.117 298.711 cv
17.094 298.73 17.059 298.742 17.012 298.738 cv
10 298.738 li
9.965 298.742 9.934 298.73 9.898 298.711 cv
9.871 298.695 9.844 298.664 9.82 298.609 cv
9.801 298.562 9.785 298.496 9.773 298.41 cv
9.766 298.332 9.762 298.227 9.758 298.098 cv
9.762 297.969 9.766 297.863 9.773 297.777 cv
9.785 297.699 9.801 297.633 9.82 297.586 cv
9.844 297.539 9.871 297.508 9.898 297.484 cv
9.934 297.469 9.965 297.457 10 297.453 cv
cp
7.629 297.305 mo
7.934 297.305 8.141 297.363 8.246 297.477 cv
8.359 297.59 8.414 297.801 8.41 298.105 cv
8.414 298.41 8.359 298.617 8.25 298.727 cv
8.145 298.844 7.941 298.898 7.645 298.895 cv
7.344 298.898 7.141 298.84 7.031 298.723 cv
6.926 298.609 6.871 298.398 6.867 298.09 cv
6.871 297.789 6.926 297.586 7.027 297.473 cv
7.137 297.363 7.336 297.305 7.629 297.305 cv
cp
f
17.012 284.629 mo
17.059 284.633 17.094 284.641 17.117 284.66 cv
17.148 284.684 17.172 284.719 17.191 284.762 cv
17.211 284.812 17.223 284.879 17.238 284.957 cv
17.246 285.043 17.254 285.145 17.254 285.27 cv
17.254 285.402 17.246 285.512 17.238 285.59 cv
17.223 285.676 17.211 285.742 17.191 285.789 cv
17.172 285.844 17.148 285.879 17.117 285.895 cv
17.094 285.918 17.059 285.926 17.012 285.926 cv
12.75 285.926 li
12.457 285.926 12.188 285.953 11.941 286.004 cv
11.699 286.059 11.488 286.141 11.309 286.254 cv
11.133 286.367 10.996 286.512 10.902 286.687 cv
10.809 286.867 10.762 287.078 10.762 287.312 cv
10.762 287.609 10.879 287.906 11.105 288.203 cv
11.34 288.508 11.672 288.836 12.109 289.191 cv
17.012 289.191 li
17.059 289.195 17.094 289.207 17.117 289.223 cv
17.148 289.246 17.172 289.277 17.191 289.324 cv
17.211 289.375 17.223 289.441 17.238 289.523 cv
17.246 289.609 17.254 289.715 17.254 289.836 cv
17.254 289.957 17.246 290.059 17.238 290.145 cv
17.223 290.23 17.211 290.301 17.191 290.348 cv
17.172 290.402 17.148 290.434 17.117 290.449 cv
17.094 290.469 17.059 290.48 17.012 290.477 cv
12.75 290.477 li
12.457 290.48 12.188 290.508 11.941 290.562 cv
11.699 290.621 11.488 290.707 11.309 290.82 cv
11.133 290.934 10.996 291.078 10.902 291.25 cv
10.809 291.43 10.762 291.637 10.762 291.871 cv
10.762 292.172 10.879 292.469 11.105 292.77 cv
11.34 293.07 11.672 293.398 12.109 293.75 cv
17.012 293.75 li
17.059 293.754 17.094 293.766 17.117 293.781 cv
17.148 293.805 17.172 293.836 17.191 293.883 cv
17.211 293.93 17.223 293.996 17.238 294.074 cv
17.246 294.16 17.254 294.266 17.254 294.395 cv
17.254 294.523 17.246 294.629 17.238 294.707 cv
17.223 294.793 17.211 294.859 17.191 294.906 cv
17.172 294.961 17.148 294.992 17.117 295.008 cv
17.094 295.027 17.059 295.039 17.012 295.035 cv
10 295.035 li
9.961 295.039 9.926 295.031 9.895 295.012 cv
9.867 295 9.844 294.969 9.816 294.918 cv
9.797 294.875 9.781 294.812 9.77 294.738 cv
9.766 294.668 9.762 294.574 9.758 294.449 cv
9.762 294.34 9.766 294.242 9.77 294.164 cv
9.781 294.09 9.797 294.031 9.816 293.988 cv
9.844 293.949 9.867 293.922 9.895 293.902 cv
9.926 293.887 9.961 293.879 10 293.875 cv
10.926 293.875 li
10.484 293.484 10.164 293.102 9.957 292.727 cv
9.754 292.359 9.648 291.98 9.648 291.598 cv
9.648 291.309 9.684 291.051 9.75 290.816 cv
9.82 290.59 9.914 290.383 10.035 290.203 cv
10.156 290.027 10.301 289.879 10.469 289.75 cv
10.641 289.629 10.832 289.523 11.035 289.437 cv
10.785 289.207 10.57 288.984 10.391 288.773 cv
10.219 288.562 10.074 288.359 9.961 288.164 cv
9.855 287.969 9.777 287.781 9.723 287.598 cv
9.676 287.414 9.648 287.227 9.648 287.039 cv
9.648 286.586 9.73 286.207 9.887 285.902 cv
10.051 285.598 10.262 285.352 10.523 285.156 cv
10.789 284.969 11.098 284.832 11.453 284.75 cv
11.809 284.672 12.184 284.633 12.578 284.629 cv
cp
f
13.203 276.297 mo
13.406 276.301 13.547 276.352 13.633 276.449 cv
13.719 276.555 13.762 276.672 13.762 276.797 cv
13.762 281.414 li
14.152 281.418 14.504 281.379 14.816 281.297 cv
15.129 281.223 15.398 281.09 15.617 280.906 cv
15.844 280.727 16.016 280.492 16.133 280.195 cv
16.258 279.906 16.316 279.547 16.313 279.121 cv
16.316 278.789 16.289 278.492 16.23 278.23 cv
16.18 277.969 16.117 277.742 16.047 277.551 cv
15.98 277.363 15.922 277.207 15.863 277.082 cv
15.813 276.961 15.785 276.867 15.781 276.805 cv
15.785 276.77 15.793 276.738 15.809 276.707 cv
15.828 276.68 15.855 276.656 15.891 276.637 cv
15.93 276.625 15.98 276.613 16.043 276.602 cv
16.109 276.598 16.188 276.594 16.281 276.59 cv
16.352 276.594 16.41 276.598 16.457 276.598 cv
16.504 276.605 16.547 276.609 16.586 276.617 cv
16.625 276.625 16.66 276.641 16.691 276.656 cv
16.723 276.68 16.754 276.703 16.781 276.727 cv
16.813 276.758 16.859 276.84 16.922 276.98 cv
16.988 277.121 17.051 277.305 17.113 277.527 cv
17.176 277.754 17.23 278.012 17.281 278.305 cv
17.328 278.598 17.352 278.91 17.355 279.242 cv
17.352 279.82 17.273 280.328 17.113 280.758 cv
16.953 281.195 16.715 281.559 16.398 281.852 cv
16.082 282.152 15.688 282.375 15.207 282.523 cv
14.73 282.672 14.172 282.746 13.535 282.746 cv
12.938 282.746 12.398 282.672 11.914 282.516 cv
11.438 282.363 11.027 282.137 10.691 281.84 cv
10.355 281.547 10.098 281.191 9.918 280.777 cv
9.738 280.363 9.648 279.898 9.648 279.383 cv
9.648 278.832 9.738 278.363 9.914 277.977 cv
10.094 277.59 10.332 277.273 10.629 277.02 cv
10.93 276.773 11.281 276.59 11.68 276.473 cv
12.086 276.359 12.516 276.301 12.969 276.297 cv
cp
12.82 277.59 mo
12.145 277.574 11.613 277.727 11.23 278.043 cv
10.848 278.359 10.656 278.828 10.652 279.445 cv
10.656 279.77 10.715 280.051 10.832 280.289 cv
10.953 280.531 11.113 280.73 11.309 280.891 cv
11.508 281.055 11.738 281.18 12 281.266 cv
12.262 281.355 12.535 281.406 12.82 281.414 cv
cp
f
6.469 268.125 mo
7.516 268.621 8.586 268.988 9.684 269.23 cv
10.785 269.473 11.891 269.594 13 269.594 cv
14.117 269.594 15.227 269.473 16.32 269.223 cv
17.418 268.98 18.488 268.617 19.543 268.141 cv
19.602 268.117 19.656 268.105 19.703 268.098 cv
19.746 268.098 19.781 268.113 19.813 268.148 cv
19.84 268.187 19.859 268.242 19.875 268.316 cv
19.883 268.395 19.891 268.5 19.895 268.625 cv
19.891 268.723 19.887 268.801 19.887 268.867 cv
19.879 268.937 19.871 268.996 19.855 269.043 cv
19.84 269.094 19.82 269.137 19.801 269.164 cv
19.777 269.199 19.754 269.223 19.73 269.234 cv
19.199 269.516 18.664 269.762 18.121 269.973 cv
17.578 270.191 17.027 270.371 16.469 270.512 cv
15.906 270.66 15.34 270.77 14.766 270.84 cv
14.191 270.918 13.609 270.953 13.023 270.949 cv
12.438 270.953 11.859 270.914 11.285 270.828 cv
10.715 270.75 10.148 270.633 9.582 270.484 cv
9.02 270.336 8.465 270.156 7.918 269.945 cv
7.375 269.734 6.832 269.496 6.297 269.227 cv
6.277 269.223 6.262 269.207 6.242 269.184 cv
6.23 269.16 6.215 269.129 6.195 269.086 cv
6.184 269.047 6.172 268.988 6.16 268.914 cv
6.156 268.844 6.152 268.75 6.148 268.633 cv
6.152 268.516 6.16 268.422 6.172 268.344 cv
6.191 268.273 6.211 268.215 6.234 268.172 cv
6.262 268.133 6.297 268.109 6.336 268.102 cv
6.383 268.098 6.426 268.105 6.469 268.125 cv
cp
f
17.004 254.844 mo
17.047 254.844 17.082 254.855 17.113 254.875 cv
17.145 254.898 17.172 254.937 17.188 254.988 cv
17.207 255.043 17.219 255.109 17.234 255.191 cv
17.246 255.277 17.254 255.387 17.254 255.516 cv
17.254 255.645 17.246 255.75 17.234 255.836 cv
17.219 255.926 17.207 255.996 17.188 256.047 cv
17.172 256.098 17.145 256.133 17.113 256.152 cv
17.082 256.176 17.047 256.187 17.004 256.184 cv
8.223 256.184 li
8.223 256.199 li
17.043 259.754 li
17.082 259.77 17.113 259.793 17.137 259.82 cv
17.164 259.852 17.188 259.895 17.203 259.945 cv
17.223 260.004 17.234 260.066 17.242 260.141 cv
17.25 260.215 17.254 260.305 17.254 260.406 cv
17.254 260.52 17.246 260.613 17.238 260.687 cv
17.223 260.77 17.211 260.836 17.195 260.883 cv
17.18 260.937 17.16 260.977 17.129 261.004 cv
17.105 261.035 17.074 261.055 17.043 261.062 cv
8.223 264.461 li
8.223 264.469 li
17.004 264.469 li
17.047 264.473 17.082 264.48 17.113 264.5 cv
17.145 264.523 17.172 264.562 17.188 264.613 cv
17.207 264.668 17.219 264.738 17.234 264.82 cv
17.246 264.91 17.254 265.02 17.254 265.148 cv
17.254 265.281 17.246 265.387 17.234 265.473 cv
17.219 265.559 17.207 265.629 17.188 265.676 cv
17.172 265.73 17.145 265.766 17.113 265.781 cv
17.082 265.805 17.047 265.812 17.004 265.809 cv
7.73 265.809 li
7.516 265.812 7.359 265.754 7.262 265.637 cv
7.172 265.52 7.125 265.391 7.121 265.246 cv
7.121 264.422 li
7.125 264.258 7.141 264.109 7.168 263.98 cv
7.203 263.855 7.25 263.746 7.316 263.648 cv
7.387 263.555 7.473 263.473 7.574 263.41 cv
7.68 263.348 7.805 263.293 7.941 263.246 cv
15.242 260.359 li
15.242 260.32 li
7.965 257.32 li
7.813 257.266 7.68 257.203 7.566 257.133 cv
7.461 257.066 7.371 256.988 7.305 256.906 cv
7.242 256.824 7.195 256.734 7.164 256.633 cv
7.137 256.535 7.125 256.418 7.121 256.285 cv
7.121 255.422 li
7.125 255.344 7.137 255.266 7.156 255.195 cv
7.184 255.125 7.219 255.066 7.266 255.016 cv
7.316 254.965 7.379 254.922 7.453 254.891 cv
7.531 254.859 7.625 254.844 7.73 254.844 cv
cp
f
17.012 251.023 mo
17.059 251.027 17.094 251.039 17.117 251.055 cv
17.148 251.078 17.172 251.109 17.191 251.156 cv
17.211 251.203 17.223 251.27 17.238 251.348 cv
17.246 251.434 17.254 251.539 17.254 251.668 cv
17.254 251.797 17.246 251.902 17.238 251.98 cv
17.223 252.066 17.211 252.133 17.191 252.18 cv
17.172 252.234 17.148 252.266 17.117 252.281 cv
17.094 252.301 17.059 252.312 17.012 252.309 cv
10 252.309 li
9.965 252.312 9.934 252.301 9.898 252.281 cv
9.871 252.266 9.844 252.234 9.82 252.18 cv
9.801 252.133 9.785 252.066 9.773 251.98 cv
9.766 251.902 9.762 251.797 9.758 251.668 cv
9.762 251.539 9.766 251.434 9.773 251.348 cv
9.785 251.27 9.801 251.203 9.82 251.156 cv
9.844 251.109 9.871 251.078 9.898 251.055 cv
9.934 251.039 9.965 251.027 10 251.023 cv
cp
7.629 250.875 mo
7.934 250.875 8.141 250.934 8.246 251.047 cv
8.359 251.16 8.414 251.371 8.41 251.676 cv
8.414 251.98 8.359 252.187 8.25 252.297 cv
8.145 252.414 7.941 252.469 7.645 252.465 cv
7.344 252.469 7.141 252.41 7.031 252.293 cv
6.926 252.18 6.871 251.969 6.867 251.66 cv
6.871 251.359 6.926 251.156 7.027 251.043 cv
7.137 250.934 7.336 250.875 7.629 250.875 cv
cp
f
17.012 242.602 mo
17.059 242.602 17.094 242.613 17.117 242.633 cv
17.148 242.656 17.172 242.691 17.191 242.734 cv
17.211 242.785 17.223 242.848 17.238 242.93 cv
17.246 243.012 17.254 243.117 17.254 243.238 cv
17.254 243.371 17.246 243.477 17.238 243.559 cv
17.223 243.645 17.211 243.711 17.191 243.754 cv
17.172 243.805 17.148 243.836 17.117 243.855 cv
17.094 243.879 17.059 243.891 17.012 243.887 cv
12.906 243.887 li
12.508 243.891 12.188 243.922 11.941 243.98 cv
11.699 244.047 11.488 244.137 11.309 244.254 cv
11.133 244.371 10.996 244.527 10.902 244.715 cv
10.809 244.91 10.762 245.129 10.762 245.375 cv
10.762 245.699 10.879 246.023 11.105 246.344 cv
11.34 246.668 11.672 247.004 12.109 247.355 cv
17.012 247.355 li
17.059 247.359 17.094 247.371 17.117 247.387 cv
17.148 247.41 17.172 247.441 17.191 247.488 cv
17.211 247.535 17.223 247.602 17.238 247.68 cv
17.246 247.766 17.254 247.871 17.254 248 cv
17.254 248.129 17.246 248.234 17.238 248.312 cv
17.223 248.398 17.211 248.465 17.191 248.512 cv
17.172 248.566 17.148 248.598 17.117 248.613 cv
17.094 248.633 17.059 248.645 17.012 248.641 cv
10 248.641 li
9.961 248.645 9.926 248.637 9.895 248.617 cv
9.867 248.605 9.844 248.574 9.816 248.523 cv
9.797 248.48 9.781 248.418 9.77 248.344 cv
9.766 248.273 9.762 248.18 9.758 248.055 cv
9.762 247.945 9.766 247.848 9.77 247.77 cv
9.781 247.695 9.797 247.637 9.816 247.594 cv
9.844 247.555 9.867 247.527 9.895 247.508 cv
9.926 247.492 9.961 247.484 10 247.48 cv
10.926 247.48 li
10.484 247.09 10.164 246.695 9.957 246.301 cv
9.754 245.91 9.648 245.512 9.648 245.109 cv
9.648 244.641 9.73 244.25 9.887 243.93 cv
10.051 243.613 10.262 243.352 10.523 243.152 cv
10.789 242.957 11.098 242.816 11.453 242.73 cv
11.809 242.645 12.238 242.602 12.734 242.602 cv
cp
f
17.012 234.203 mo
17.059 234.207 17.094 234.215 17.117 234.23 cv
17.148 234.25 17.172 234.285 17.191 234.328 cv
17.211 234.375 17.223 234.434 17.238 234.508 cv
17.246 234.586 17.254 234.68 17.254 234.785 cv
17.254 234.91 17.246 235.008 17.238 235.078 cv
17.223 235.156 17.211 235.215 17.191 235.258 cv
17.172 235.305 17.148 235.336 17.117 235.348 cv
17.094 235.367 17.059 235.375 17.012 235.371 cv
16.086 235.371 li
16.531 235.773 16.852 236.168 17.051 236.555 cv
17.254 236.949 17.352 237.344 17.355 237.738 cv
17.352 238.211 17.277 238.605 17.121 238.922 cv
16.969 239.242 16.758 239.5 16.488 239.695 cv
16.223 239.898 15.91 240.039 15.551 240.121 cv
15.195 240.211 14.762 240.254 14.254 240.25 cv
10 240.25 li
9.961 240.254 9.926 240.246 9.895 240.223 cv
9.867 240.207 9.844 240.172 9.816 240.117 cv
9.797 240.07 9.781 240 9.77 239.914 cv
9.766 239.832 9.762 239.73 9.758 239.602 cv
9.762 239.48 9.766 239.375 9.77 239.289 cv
9.781 239.207 9.797 239.141 9.816 239.094 cv
9.844 239.047 9.867 239.012 9.895 238.988 cv
9.926 238.969 9.961 238.961 10 238.957 cv
14.082 238.957 li
14.496 238.961 14.824 238.93 15.07 238.867 cv
15.316 238.809 15.527 238.719 15.699 238.594 cv
15.879 238.477 16.012 238.32 16.105 238.129 cv
16.203 237.945 16.254 237.727 16.25 237.477 cv
16.254 237.156 16.137 236.836 15.906 236.512 cv
15.68 236.195 15.344 235.855 14.898 235.496 cv
10 235.496 li
9.961 235.496 9.926 235.488 9.895 235.469 cv
9.867 235.453 9.844 235.418 9.816 235.363 cv
9.797 235.312 9.781 235.246 9.77 235.164 cv
9.766 235.086 9.762 234.98 9.758 234.848 cv
9.762 234.727 9.766 234.621 9.77 234.535 cv
9.781 234.453 9.797 234.391 9.816 234.344 cv
9.844 234.301 9.867 234.266 9.895 234.238 cv
9.926 234.219 9.961 234.207 10 234.203 cv
cp
f
16.496 228.184 mo
16.652 228.184 16.77 228.195 16.855 228.215 cv
16.945 228.238 17.012 228.27 17.051 228.309 cv
17.094 228.352 17.133 228.414 17.168 228.496 cv
17.203 228.582 17.23 228.676 17.258 228.781 cv
17.277 228.891 17.297 229.004 17.316 229.121 cv
17.328 229.238 17.336 229.359 17.34 229.477 cv
17.336 229.844 17.289 230.156 17.195 230.414 cv
17.102 230.676 16.957 230.887 16.758 231.051 cv
16.566 231.219 16.32 231.34 16.02 231.414 cv
15.723 231.492 15.371 231.531 14.961 231.527 cv
10.863 231.527 li
10.863 232.508 li
10.867 232.586 10.824 232.648 10.738 232.695 cv
10.656 232.742 10.523 232.766 10.332 232.766 cv
10.238 232.766 10.156 232.762 10.086 232.746 cv
10.023 232.738 9.965 232.719 9.918 232.695 cv
9.875 232.676 9.844 232.648 9.824 232.613 cv
9.809 232.582 9.801 232.547 9.797 232.5 cv
9.797 231.527 li
8.129 231.527 li
8.098 231.531 8.063 231.52 8.027 231.5 cv
8 231.484 7.973 231.453 7.945 231.398 cv
7.926 231.352 7.91 231.285 7.895 231.199 cv
7.887 231.121 7.879 231.016 7.879 230.887 cv
7.879 230.758 7.887 230.652 7.895 230.57 cv
7.91 230.488 7.926 230.422 7.945 230.375 cv
7.973 230.328 8 230.297 8.027 230.273 cv
8.063 230.258 8.098 230.246 8.129 230.242 cv
9.797 230.242 li
9.797 228.441 li
9.801 228.402 9.809 228.367 9.824 228.332 cv
9.844 228.305 9.875 228.277 9.918 228.25 cv
9.965 228.23 10.023 228.215 10.086 228.199 cv
10.156 228.191 10.238 228.184 10.332 228.184 cv
10.523 228.184 10.656 228.207 10.738 228.254 cv
10.824 228.301 10.867 228.363 10.863 228.441 cv
10.863 230.242 li
14.777 230.242 li
15.262 230.246 15.625 230.176 15.871 230.027 cv
16.121 229.887 16.246 229.629 16.242 229.258 cv
16.246 229.145 16.234 229.039 16.207 228.941 cv
16.188 228.852 16.164 228.77 16.133 228.691 cv
16.109 228.621 16.082 228.559 16.059 228.504 cv
16.035 228.457 16.023 228.41 16.023 228.363 cv
16.023 228.34 16.031 228.312 16.043 228.289 cv
16.059 228.266 16.082 228.25 16.117 228.234 cv
16.156 228.227 16.207 228.215 16.266 228.199 cv
16.332 228.191 16.41 228.184 16.496 228.184 cv
cp
f
13.203 220.504 mo
13.406 220.508 13.547 220.559 13.633 220.656 cv
13.719 220.762 13.762 220.879 13.762 221.004 cv
13.762 225.621 li
14.152 225.625 14.504 225.586 14.816 225.504 cv
15.129 225.43 15.398 225.297 15.617 225.113 cv
15.844 224.934 16.016 224.699 16.133 224.402 cv
16.258 224.113 16.316 223.754 16.313 223.328 cv
16.316 222.996 16.289 222.699 16.23 222.437 cv
16.18 222.176 16.117 221.949 16.047 221.758 cv
15.98 221.57 15.922 221.414 15.863 221.289 cv
15.813 221.168 15.785 221.074 15.781 221.012 cv
15.785 220.977 15.793 220.945 15.809 220.914 cv
15.828 220.887 15.855 220.863 15.891 220.844 cv
15.93 220.832 15.98 220.82 16.043 220.809 cv
16.109 220.805 16.188 220.801 16.281 220.797 cv
16.352 220.801 16.41 220.805 16.457 220.805 cv
16.504 220.812 16.547 220.816 16.586 220.824 cv
16.625 220.832 16.66 220.848 16.691 220.863 cv
16.723 220.887 16.754 220.91 16.781 220.934 cv
16.813 220.965 16.859 221.047 16.922 221.187 cv
16.988 221.328 17.051 221.512 17.113 221.734 cv
17.176 221.961 17.23 222.219 17.281 222.512 cv
17.328 222.805 17.352 223.117 17.355 223.449 cv
17.352 224.027 17.273 224.535 17.113 224.965 cv
16.953 225.402 16.715 225.766 16.398 226.059 cv
16.082 226.359 15.688 226.582 15.207 226.73 cv
14.73 226.879 14.172 226.953 13.535 226.953 cv
12.938 226.953 12.398 226.879 11.914 226.723 cv
11.438 226.57 11.027 226.344 10.691 226.047 cv
10.355 225.754 10.098 225.398 9.918 224.984 cv
9.738 224.57 9.648 224.105 9.648 223.59 cv
9.648 223.039 9.738 222.57 9.914 222.184 cv
10.094 221.797 10.332 221.48 10.629 221.227 cv
10.93 220.98 11.281 220.797 11.68 220.68 cv
12.086 220.566 12.516 220.508 12.969 220.504 cv
cp
12.82 221.797 mo
12.145 221.781 11.613 221.934 11.23 222.25 cv
10.848 222.566 10.656 223.035 10.652 223.652 cv
10.656 223.977 10.715 224.258 10.832 224.496 cv
10.953 224.738 11.113 224.937 11.309 225.098 cv
11.508 225.262 11.738 225.387 12 225.473 cv
12.262 225.562 12.535 225.613 12.82 225.621 cv
cp
f
15.102 214.215 mo
15.465 214.219 15.785 214.285 16.063 214.414 cv
16.344 214.547 16.578 214.734 16.77 214.977 cv
16.965 215.223 17.109 215.516 17.207 215.852 cv
17.305 216.191 17.352 216.562 17.355 216.965 cv
17.352 217.219 17.332 217.457 17.297 217.68 cv
17.254 217.906 17.207 218.105 17.148 218.285 cv
17.09 218.465 17.027 218.617 16.961 218.742 cv
16.898 218.867 16.84 218.961 16.785 219.016 cv
16.734 219.074 16.664 219.113 16.566 219.137 cv
16.477 219.164 16.348 219.176 16.188 219.176 cv
16.09 219.176 16.008 219.172 15.938 219.16 cv
15.871 219.152 15.816 219.141 15.773 219.121 cv
15.734 219.109 15.703 219.086 15.684 219.059 cv
15.668 219.031 15.66 219 15.656 218.961 cv
15.66 218.906 15.695 218.82 15.762 218.707 cv
15.836 218.598 15.914 218.461 15.992 218.293 cv
16.078 218.133 16.152 217.941 16.223 217.715 cv
16.293 217.496 16.328 217.238 16.328 216.941 cv
16.328 216.727 16.305 216.527 16.258 216.348 cv
16.211 216.172 16.145 216.02 16.051 215.891 cv
15.965 215.762 15.848 215.66 15.703 215.59 cv
15.566 215.52 15.398 215.484 15.203 215.484 cv
15.008 215.484 14.844 215.535 14.707 215.637 cv
14.574 215.738 14.453 215.875 14.348 216.039 cv
14.246 216.207 14.156 216.391 14.07 216.598 cv
13.992 216.809 13.906 217.023 13.816 217.242 cv
13.73 217.461 13.629 217.676 13.516 217.887 cv
13.406 218.098 13.273 218.289 13.109 218.453 cv
12.953 218.625 12.758 218.758 12.531 218.855 cv
12.309 218.961 12.043 219.012 11.73 219.008 cv
11.457 219.012 11.191 218.957 10.938 218.848 cv
10.688 218.742 10.469 218.582 10.277 218.367 cv
10.09 218.156 9.938 217.891 9.82 217.57 cv
9.707 217.25 9.648 216.879 9.648 216.449 cv
9.648 216.266 9.664 216.078 9.695 215.891 cv
9.727 215.707 9.766 215.539 9.813 215.383 cv
9.859 215.234 9.91 215.105 9.965 214.996 cv
10.02 214.895 10.07 214.812 10.109 214.754 cv
10.156 214.703 10.191 214.668 10.219 214.645 cv
10.25 214.629 10.285 214.613 10.32 214.605 cv
10.363 214.598 10.41 214.59 10.465 214.582 cv
10.523 214.574 10.594 214.57 10.676 214.57 cv
10.766 214.57 10.844 214.574 10.906 214.582 cv
10.977 214.59 11.027 214.605 11.066 214.621 cv
11.109 214.645 11.141 214.664 11.156 214.687 cv
11.176 214.715 11.184 214.746 11.184 214.773 cv
11.184 214.824 11.156 214.891 11.098 214.977 cv
11.043 215.066 10.98 215.18 10.914 215.32 cv
10.852 215.461 10.793 215.629 10.73 215.816 cv
10.676 216.008 10.645 216.223 10.645 216.465 cv
10.645 216.687 10.672 216.879 10.719 217.043 cv
10.773 217.211 10.844 217.348 10.93 217.453 cv
11.023 217.559 11.129 217.641 11.254 217.691 cv
11.379 217.75 11.516 217.777 11.66 217.773 cv
11.863 217.777 12.031 217.727 12.168 217.621 cv
12.309 217.52 12.43 217.383 12.531 217.215 cv
12.637 217.051 12.73 216.859 12.813 216.645 cv
12.898 216.434 12.984 216.219 13.07 215.996 cv
13.16 215.777 13.262 215.559 13.367 215.34 cv
13.477 215.125 13.605 214.934 13.762 214.766 cv
13.918 214.602 14.105 214.469 14.324 214.367 cv
14.543 214.27 14.805 214.219 15.102 214.215 cv
cp
f
13.023 209.773 mo
13.609 209.773 14.191 209.812 14.766 209.883 cv
15.34 209.961 15.906 210.07 16.469 210.211 cv
17.027 210.359 17.578 210.535 18.121 210.746 cv
18.664 210.957 19.199 211.203 19.73 211.48 cv
19.754 211.5 19.777 211.523 19.801 211.551 cv
19.82 211.586 19.84 211.625 19.855 211.672 cv
19.871 211.723 19.879 211.781 19.887 211.848 cv
19.887 211.918 19.891 212 19.895 212.09 cv
19.891 212.227 19.883 212.332 19.875 212.406 cv
19.859 212.484 19.84 212.539 19.813 212.57 cv
19.781 212.605 19.746 212.621 19.703 212.617 cv
19.656 212.617 19.602 212.602 19.543 212.574 cv
18.492 212.098 17.422 211.738 16.324 211.492 cv
15.227 211.25 14.117 211.129 13 211.125 cv
11.891 211.129 10.785 211.25 9.684 211.492 cv
8.586 211.738 7.516 212.105 6.469 212.59 cv
6.426 212.613 6.383 212.621 6.336 212.613 cv
6.297 212.613 6.262 212.59 6.234 212.543 cv
6.211 212.504 6.191 212.445 6.172 212.371 cv
6.16 212.301 6.152 212.203 6.148 212.082 cv
6.152 211.973 6.156 211.883 6.16 211.809 cv
6.172 211.738 6.184 211.68 6.195 211.633 cv
6.215 211.59 6.23 211.559 6.242 211.535 cv
6.262 211.52 6.277 211.504 6.297 211.488 cv
7.363 210.957 8.461 210.535 9.582 210.23 cv
10.711 209.926 11.855 209.773 13.023 209.773 cv
cp
f
266.43 538.918 mo
266.426 539.023 266.41 539.113 266.375 539.184 cv
266.34 539.262 266.293 539.32 266.238 539.363 cv
266.18 539.414 266.117 539.449 266.051 539.465 cv
265.977 539.488 265.906 539.496 265.844 539.496 cv
265.398 539.496 li
265.258 539.496 265.137 539.484 265.031 539.453 cv
264.926 539.43 264.828 539.375 264.734 539.297 cv
264.641 539.223 264.547 539.121 264.453 538.988 cv
264.359 538.859 264.258 538.695 264.152 538.492 cv
261.078 532.754 li
260.914 532.461 260.75 532.152 260.59 531.824 cv
260.422 531.504 260.27 531.187 260.133 530.879 cv
260.117 530.879 li
260.125 531.254 260.133 531.637 260.141 532.023 cv
260.145 532.414 260.145 532.801 260.148 533.184 cv
260.148 539.27 li
260.145 539.309 260.133 539.344 260.113 539.375 cv
260.09 539.41 260.055 539.437 260.004 539.453 cv
259.949 539.473 259.879 539.484 259.797 539.5 cv
259.711 539.512 259.605 539.52 259.477 539.52 cv
259.34 539.52 259.23 539.512 259.148 539.5 cv
259.063 539.484 258.996 539.473 258.949 539.453 cv
258.898 539.437 258.863 539.41 258.84 539.375 cv
258.816 539.344 258.805 539.309 258.809 539.27 cv
258.809 529.965 li
258.805 529.758 258.863 529.609 258.984 529.52 cv
259.102 529.434 259.23 529.391 259.371 529.387 cv
260.031 529.387 li
260.184 529.391 260.316 529.402 260.422 529.426 cv
260.523 529.453 260.617 529.496 260.703 529.555 cv
260.785 529.617 260.863 529.699 260.945 529.805 cv
261.02 529.914 261.102 530.051 261.188 530.207 cv
263.555 534.633 li
263.699 534.906 263.84 535.172 263.977 535.426 cv
264.109 535.684 264.238 535.937 264.367 536.184 cv
264.488 536.437 264.613 536.684 264.738 536.922 cv
264.859 537.164 264.98 537.406 265.105 537.648 cv
265.113 537.648 li
265.102 537.242 265.094 536.812 265.094 536.367 cv
265.086 535.922 265.086 535.496 265.09 535.086 cv
265.09 529.613 li
265.086 529.578 265.098 529.543 265.121 529.512 cv
265.145 529.48 265.18 529.453 265.234 529.43 cv
265.281 529.406 265.352 529.391 265.438 529.379 cv
265.523 529.371 265.633 529.367 265.773 529.363 cv
265.891 529.367 265.996 529.371 266.086 529.379 cv
266.172 529.391 266.238 529.406 266.289 529.43 cv
266.336 529.453 266.371 529.48 266.395 529.512 cv
266.414 529.543 266.426 529.578 266.43 529.613 cv
cp
f
274.98 539.277 mo
274.977 539.324 274.969 539.359 274.953 539.383 cv
274.934 539.414 274.898 539.437 274.855 539.457 cv
274.809 539.477 274.75 539.488 274.676 539.504 cv
274.598 539.512 274.504 539.52 274.398 539.52 cv
274.273 539.52 274.176 539.512 274.105 539.504 cv
274.027 539.488 273.969 539.477 273.926 539.457 cv
273.879 539.437 273.848 539.414 273.836 539.383 cv
273.816 539.359 273.809 539.324 273.813 539.277 cv
273.813 538.352 li
273.41 538.797 273.016 539.117 272.629 539.316 cv
272.234 539.52 271.84 539.617 271.445 539.621 cv
270.973 539.617 270.578 539.543 270.262 539.387 cv
269.941 539.234 269.684 539.023 269.488 538.754 cv
269.285 538.488 269.145 538.176 269.063 537.816 cv
268.973 537.461 268.93 537.027 268.934 536.52 cv
268.934 532.266 li
268.93 532.227 268.938 532.191 268.961 532.16 cv
268.977 532.133 269.012 532.109 269.066 532.082 cv
269.113 532.062 269.184 532.047 269.27 532.035 cv
269.352 532.031 269.453 532.027 269.582 532.023 cv
269.703 532.027 269.809 532.031 269.895 532.035 cv
269.977 532.047 270.043 532.062 270.09 532.082 cv
270.137 532.109 270.172 532.133 270.195 532.16 cv
270.215 532.191 270.223 532.227 270.227 532.266 cv
270.227 536.348 li
270.223 536.762 270.254 537.09 270.316 537.336 cv
270.375 537.582 270.465 537.793 270.59 537.965 cv
270.707 538.145 270.863 538.277 271.055 538.371 cv
271.238 538.469 271.457 538.52 271.707 538.516 cv
272.027 538.52 272.348 538.402 272.672 538.172 cv
272.988 537.945 273.328 537.609 273.688 537.164 cv
273.688 532.266 li
273.688 532.227 273.695 532.191 273.715 532.16 cv
273.73 532.133 273.766 532.109 273.82 532.082 cv
273.871 532.062 273.938 532.047 274.02 532.035 cv
274.098 532.031 274.203 532.027 274.336 532.023 cv
274.457 532.027 274.563 532.031 274.648 532.035 cv
274.73 532.047 274.793 532.062 274.84 532.082 cv
274.883 532.109 274.918 532.133 274.945 532.16 cv
274.965 532.191 274.977 532.227 274.98 532.266 cv
cp
f
287.758 539.277 mo
287.754 539.324 287.746 539.359 287.727 539.383 cv
287.703 539.414 287.668 539.437 287.625 539.457 cv
287.574 539.477 287.508 539.488 287.43 539.504 cv
287.344 539.512 287.242 539.52 287.117 539.52 cv
286.984 539.52 286.875 539.512 286.797 539.504 cv
286.711 539.488 286.645 539.477 286.598 539.457 cv
286.543 539.437 286.508 539.414 286.492 539.383 cv
286.469 539.359 286.461 539.324 286.461 539.277 cv
286.461 535.016 li
286.461 534.723 286.434 534.453 286.383 534.207 cv
286.328 533.965 286.246 533.754 286.133 533.574 cv
286.02 533.398 285.875 533.262 285.699 533.168 cv
285.52 533.074 285.309 533.027 285.074 533.027 cv
284.777 533.027 284.48 533.145 284.184 533.371 cv
283.879 533.605 283.551 533.937 283.195 534.375 cv
283.195 539.277 li
283.191 539.324 283.18 539.359 283.164 539.383 cv
283.141 539.414 283.109 539.437 283.063 539.457 cv
283.012 539.477 282.945 539.488 282.863 539.504 cv
282.777 539.512 282.672 539.52 282.551 539.52 cv
282.43 539.52 282.328 539.512 282.242 539.504 cv
282.156 539.488 282.086 539.477 282.039 539.457 cv
281.984 539.437 281.953 539.414 281.938 539.383 cv
281.918 539.359 281.906 539.324 281.91 539.277 cv
281.91 535.016 li
281.906 534.723 281.879 534.453 281.824 534.207 cv
281.766 533.965 281.68 533.754 281.566 533.574 cv
281.453 533.398 281.309 533.262 281.137 533.168 cv
280.957 533.074 280.75 533.027 280.516 533.027 cv
280.215 533.027 279.918 533.145 279.617 533.371 cv
279.316 533.605 278.988 533.937 278.637 534.375 cv
278.637 539.277 li
278.633 539.324 278.621 539.359 278.605 539.383 cv
278.582 539.414 278.551 539.437 278.504 539.457 cv
278.457 539.477 278.391 539.488 278.313 539.504 cv
278.227 539.512 278.121 539.52 277.992 539.52 cv
277.863 539.52 277.758 539.512 277.68 539.504 cv
277.594 539.488 277.527 539.477 277.48 539.457 cv
277.426 539.437 277.395 539.414 277.379 539.383 cv
277.359 539.359 277.348 539.324 277.352 539.277 cv
277.352 532.266 li
277.348 532.227 277.355 532.191 277.375 532.16 cv
277.387 532.133 277.418 532.109 277.469 532.082 cv
277.512 532.062 277.574 532.047 277.648 532.035 cv
277.719 532.031 277.813 532.027 277.938 532.023 cv
278.047 532.027 278.145 532.031 278.223 532.035 cv
278.297 532.047 278.355 532.062 278.398 532.082 cv
278.438 532.109 278.465 532.133 278.484 532.16 cv
278.5 532.191 278.508 532.227 278.512 532.266 cv
278.512 533.191 li
278.902 532.75 279.285 532.43 279.66 532.223 cv
280.027 532.02 280.406 531.914 280.789 531.914 cv
281.078 531.914 281.336 531.949 281.57 532.016 cv
281.797 532.086 282.004 532.18 282.184 532.301 cv
282.359 532.422 282.508 532.566 282.637 532.734 cv
282.758 532.906 282.863 533.098 282.949 533.301 cv
283.18 533.051 283.402 532.836 283.613 532.656 cv
283.824 532.484 284.027 532.34 284.223 532.227 cv
284.418 532.121 284.605 532.043 284.789 531.988 cv
284.973 531.941 285.16 531.914 285.348 531.914 cv
285.801 531.914 286.18 531.996 286.484 532.152 cv
286.789 532.316 287.035 532.527 287.23 532.789 cv
287.418 533.055 287.555 533.363 287.637 533.719 cv
287.715 534.074 287.754 534.449 287.758 534.844 cv
cp
f
296.555 535.676 mo
296.551 536.285 296.484 536.836 296.355 537.32 cv
296.219 537.809 296.023 538.223 295.77 538.562 cv
295.512 538.906 295.195 539.168 294.824 539.348 cv
294.449 539.531 294.023 539.617 293.539 539.621 cv
293.313 539.617 293.105 539.598 292.918 539.555 cv
292.73 539.508 292.543 539.437 292.363 539.34 cv
292.176 539.242 291.996 539.117 291.816 538.965 cv
291.633 538.816 291.441 538.637 291.242 538.422 cv
291.242 539.277 li
291.242 539.324 291.23 539.359 291.211 539.387 cv
291.188 539.422 291.152 539.445 291.109 539.461 cv
291.059 539.477 291 539.488 290.934 539.504 cv
290.859 539.512 290.77 539.52 290.664 539.52 cv
290.555 539.52 290.469 539.512 290.398 539.504 cv
290.324 539.488 290.262 539.477 290.219 539.461 cv
290.168 539.445 290.137 539.422 290.125 539.387 cv
290.105 539.359 290.098 539.324 290.102 539.277 cv
290.102 528.867 li
290.098 528.828 290.109 528.793 290.129 528.758 cv
290.145 528.73 290.176 528.703 290.23 528.68 cv
290.277 528.66 290.344 528.645 290.43 528.633 cv
290.508 528.625 290.613 528.621 290.742 528.617 cv
290.871 528.621 290.977 528.625 291.063 528.633 cv
291.141 528.645 291.207 528.66 291.254 528.68 cv
291.301 528.703 291.332 528.73 291.355 528.758 cv
291.371 528.793 291.383 528.828 291.387 528.867 cv
291.387 533.066 li
291.594 532.855 291.797 532.676 291.992 532.531 cv
292.188 532.387 292.375 532.27 292.563 532.176 cv
292.746 532.09 292.934 532.023 293.125 531.977 cv
293.309 531.937 293.508 531.914 293.719 531.914 cv
294.223 531.914 294.656 532.016 295.023 532.219 cv
295.383 532.422 295.676 532.695 295.902 533.031 cv
296.125 533.375 296.293 533.773 296.398 534.23 cv
296.5 534.687 296.551 535.168 296.555 535.676 cv
cp
295.223 535.824 mo
295.219 535.469 295.191 535.121 295.141 534.781 cv
295.082 534.445 294.988 534.148 294.852 533.887 cv
294.715 533.629 294.535 533.418 294.313 533.258 cv
294.086 533.102 293.805 533.023 293.473 533.02 cv
293.305 533.023 293.141 533.047 292.98 533.09 cv
292.816 533.141 292.652 533.219 292.484 533.324 cv
292.316 533.437 292.141 533.578 291.965 533.746 cv
291.781 533.922 291.59 534.137 291.387 534.391 cv
291.387 537.187 li
291.742 537.621 292.082 537.953 292.406 538.176 cv
292.73 538.406 293.066 538.52 293.418 538.516 cv
293.738 538.52 294.016 538.441 294.25 538.281 cv
294.477 538.129 294.664 537.922 294.809 537.66 cv
294.953 537.406 295.059 537.117 295.125 536.797 cv
295.188 536.48 295.219 536.156 295.223 535.824 cv
cp
f
304.465 535.469 mo
304.461 535.672 304.41 535.812 304.313 535.898 cv
304.207 535.984 304.09 536.027 303.965 536.027 cv
299.348 536.027 li
299.344 536.418 299.383 536.77 299.465 537.082 cv
299.539 537.395 299.672 537.664 299.855 537.883 cv
300.035 538.109 300.27 538.281 300.566 538.398 cv
300.855 538.523 301.215 538.582 301.641 538.578 cv
301.973 538.582 302.27 538.555 302.531 538.496 cv
302.793 538.445 303.02 538.383 303.211 538.312 cv
303.398 538.246 303.555 538.187 303.68 538.129 cv
303.801 538.078 303.895 538.051 303.957 538.047 cv
303.992 538.051 304.023 538.059 304.055 538.074 cv
304.082 538.094 304.105 538.121 304.125 538.156 cv
304.137 538.195 304.148 538.246 304.16 538.309 cv
304.164 538.375 304.168 538.453 304.172 538.547 cv
304.168 538.617 304.164 538.676 304.164 538.723 cv
304.156 538.77 304.152 538.812 304.145 538.852 cv
304.137 538.891 304.121 538.926 304.105 538.957 cv
304.082 538.988 304.059 539.02 304.035 539.047 cv
304.004 539.078 303.922 539.125 303.781 539.187 cv
303.641 539.254 303.457 539.316 303.234 539.379 cv
303.008 539.441 302.75 539.496 302.457 539.547 cv
302.164 539.594 301.852 539.617 301.52 539.621 cv
300.941 539.617 300.434 539.539 300.004 539.379 cv
299.566 539.219 299.203 538.98 298.91 538.664 cv
298.609 538.348 298.387 537.953 298.238 537.473 cv
298.09 536.996 298.016 536.437 298.016 535.801 cv
298.016 535.203 298.09 534.664 298.246 534.18 cv
298.398 533.703 298.625 533.293 298.922 532.957 cv
299.215 532.621 299.57 532.363 299.984 532.184 cv
300.398 532.004 300.863 531.914 301.379 531.914 cv
301.93 531.914 302.398 532.004 302.785 532.18 cv
303.172 532.359 303.488 532.598 303.742 532.895 cv
303.988 533.195 304.172 533.547 304.289 533.945 cv
304.402 534.352 304.461 534.781 304.465 535.234 cv
cp
303.172 535.086 mo
303.188 534.41 303.035 533.879 302.719 533.496 cv
302.402 533.113 301.934 532.922 301.316 532.918 cv
300.992 532.922 300.711 532.98 300.473 533.098 cv
300.23 533.219 300.031 533.379 299.871 533.574 cv
299.707 533.773 299.582 534.004 299.496 534.266 cv
299.406 534.527 299.355 534.801 299.348 535.086 cv
cp
f
310.531 532.723 mo
310.527 532.84 310.527 532.937 310.523 533.012 cv
310.516 533.094 310.504 533.156 310.492 533.195 cv
310.473 533.242 310.453 533.273 310.434 533.297 cv
310.406 533.32 310.375 533.332 310.336 533.332 cv
310.293 533.332 310.242 533.32 310.184 533.297 cv
310.121 533.273 310.051 533.25 309.98 533.227 cv
309.902 533.203 309.82 533.184 309.727 533.16 cv
309.633 533.145 309.531 533.133 309.422 533.129 cv
309.289 533.133 309.16 533.16 309.039 533.207 cv
308.914 533.262 308.785 533.348 308.648 533.465 cv
308.508 533.59 308.363 533.746 308.215 533.941 cv
308.063 534.137 307.895 534.379 307.715 534.664 cv
307.715 539.277 li
307.711 539.324 307.699 539.359 307.684 539.383 cv
307.66 539.414 307.629 539.437 307.582 539.457 cv
307.535 539.477 307.469 539.488 307.391 539.504 cv
307.305 539.512 307.199 539.52 307.07 539.52 cv
306.941 539.52 306.836 539.512 306.758 539.504 cv
306.672 539.488 306.605 539.477 306.559 539.457 cv
306.504 539.437 306.473 539.414 306.457 539.383 cv
306.438 539.359 306.426 539.324 306.43 539.277 cv
306.43 532.266 li
306.426 532.227 306.434 532.191 306.453 532.16 cv
306.465 532.133 306.496 532.109 306.547 532.082 cv
306.59 532.062 306.652 532.047 306.727 532.035 cv
306.797 532.031 306.891 532.027 307.016 532.023 cv
307.125 532.027 307.223 532.031 307.301 532.035 cv
307.375 532.047 307.434 532.062 307.477 532.082 cv
307.516 532.109 307.543 532.133 307.563 532.16 cv
307.578 532.191 307.586 532.227 307.59 532.266 cv
307.59 533.285 li
307.777 533.004 307.961 532.777 308.133 532.602 cv
308.301 532.426 308.461 532.285 308.613 532.184 cv
308.762 532.082 308.91 532.012 309.059 531.973 cv
309.207 531.934 309.355 531.914 309.508 531.914 cv
309.574 531.914 309.652 531.918 309.738 531.926 cv
309.824 531.934 309.914 531.949 310.008 531.969 cv
310.102 531.992 310.184 532.016 310.262 532.039 cv
310.332 532.066 310.387 532.094 310.422 532.117 cv
310.449 532.148 310.469 532.172 310.484 532.191 cv
310.492 532.219 310.504 532.25 310.512 532.281 cv
310.52 532.32 310.523 532.371 310.527 532.441 cv
310.527 532.512 310.527 532.605 310.531 532.723 cv
cp
f
322.289 535.691 mo
322.285 536.27 322.211 536.797 322.063 537.273 cv
321.91 537.758 321.684 538.172 321.387 538.516 cv
321.086 538.867 320.711 539.137 320.266 539.328 cv
319.813 539.523 319.293 539.617 318.703 539.621 cv
318.125 539.617 317.621 539.535 317.195 539.363 cv
316.766 539.195 316.41 538.945 316.125 538.617 cv
315.836 538.289 315.621 537.895 315.484 537.426 cv
315.344 536.961 315.277 536.43 315.277 535.832 cv
315.277 535.266 315.348 534.738 315.496 534.258 cv
315.641 533.777 315.867 533.363 316.168 533.012 cv
316.465 532.664 316.836 532.395 317.285 532.203 cv
317.73 532.012 318.254 531.914 318.852 531.914 cv
319.43 531.914 319.93 532 320.359 532.172 cv
320.785 532.344 321.145 532.594 321.43 532.922 cv
321.715 533.25 321.93 533.648 322.074 534.113 cv
322.215 534.582 322.285 535.109 322.289 535.691 cv
cp
320.957 535.777 mo
320.953 535.402 320.918 535.043 320.852 534.703 cv
320.777 534.367 320.66 534.074 320.5 533.816 cv
320.336 533.566 320.117 533.363 319.84 533.211 cv
319.559 533.066 319.211 532.992 318.801 532.988 cv
318.414 532.992 318.086 533.059 317.813 533.191 cv
317.535 533.328 317.309 533.52 317.133 533.766 cv
316.953 534.012 316.82 534.305 316.738 534.641 cv
316.648 534.98 316.605 535.348 316.609 535.746 cv
316.605 536.133 316.641 536.496 316.715 536.832 cv
316.781 537.172 316.898 537.465 317.066 537.715 cv
317.23 537.969 317.453 538.172 317.73 538.316 cv
318.008 538.469 318.355 538.543 318.77 538.539 cv
319.145 538.543 319.473 538.473 319.754 538.336 cv
320.031 538.203 320.258 538.016 320.438 537.766 cv
320.613 537.523 320.742 537.23 320.828 536.895 cv
320.91 536.559 320.953 536.187 320.957 535.777 cv
cp
f
328.02 529.379 mo
328.016 529.48 328.012 529.559 328.004 529.617 cv
327.992 529.68 327.98 529.73 327.969 529.762 cv
327.953 529.801 327.938 529.824 327.918 529.836 cv
327.895 529.852 327.867 529.859 327.84 529.855 cv
327.801 529.859 327.754 529.848 327.703 529.82 cv
327.645 529.801 327.578 529.773 327.504 529.742 cv
327.422 529.715 327.332 529.687 327.227 529.664 cv
327.117 529.641 326.992 529.629 326.859 529.629 cv
326.664 529.629 326.5 529.66 326.367 529.723 cv
326.227 529.785 326.117 529.883 326.039 530.016 cv
325.953 530.148 325.895 530.32 325.859 530.531 cv
325.82 530.742 325.801 531 325.805 531.297 cv
325.805 532.062 li
327.371 532.062 li
327.41 532.066 327.445 532.074 327.477 532.09 cv
327.504 532.109 327.531 532.141 327.555 532.184 cv
327.578 532.23 327.594 532.289 327.609 532.352 cv
327.617 532.422 327.625 532.504 327.629 532.598 cv
327.625 532.789 327.602 532.922 327.559 533.004 cv
327.508 533.09 327.445 533.133 327.371 533.129 cv
325.805 533.129 li
325.805 539.277 li
325.801 539.324 325.793 539.359 325.773 539.383 cv
325.75 539.414 325.715 539.437 325.668 539.457 cv
325.617 539.477 325.551 539.488 325.469 539.504 cv
325.383 539.512 325.277 539.52 325.16 539.52 cv
325.031 539.52 324.93 539.512 324.848 539.504 cv
324.762 539.488 324.695 539.477 324.648 539.457 cv
324.598 539.437 324.563 539.414 324.543 539.383 cv
324.52 539.359 324.508 539.324 324.512 539.277 cv
324.512 533.129 li
323.523 533.129 li
323.438 533.133 323.375 533.09 323.336 533.004 cv
323.293 532.922 323.27 532.789 323.273 532.598 cv
323.27 532.504 323.277 532.422 323.289 532.352 cv
323.297 532.289 323.313 532.23 323.336 532.184 cv
323.355 532.141 323.379 532.109 323.414 532.09 cv
323.441 532.074 323.48 532.066 323.523 532.062 cv
324.512 532.062 li
324.512 531.336 li
324.508 530.852 324.555 530.434 324.648 530.078 cv
324.738 529.73 324.875 529.441 325.063 529.219 cv
325.246 528.996 325.48 528.832 325.77 528.723 cv
326.051 528.617 326.387 528.562 326.773 528.562 cv
326.949 528.562 327.125 528.582 327.301 528.613 cv
327.469 528.652 327.602 528.687 327.699 528.723 cv
327.789 528.766 327.852 528.801 327.887 528.828 cv
327.914 528.863 327.941 528.902 327.965 528.949 cv
327.984 529 327.996 529.062 328.008 529.129 cv
328.012 529.203 328.016 529.285 328.02 529.379 cv
cp
f
338.219 536.645 mo
338.215 537.117 338.129 537.539 337.957 537.906 cv
337.781 538.281 337.539 538.594 337.23 538.848 cv
336.922 539.105 336.559 539.297 336.141 539.426 cv
335.719 539.555 335.27 539.617 334.789 539.621 cv
334.449 539.617 334.133 539.59 333.848 539.535 cv
333.559 539.477 333.305 539.41 333.078 539.324 cv
332.852 539.246 332.66 539.16 332.508 539.066 cv
332.352 538.98 332.246 538.902 332.188 538.84 cv
332.129 538.777 332.086 538.699 332.059 538.605 cv
332.027 538.512 332.012 538.383 332.016 538.219 cv
332.012 538.105 332.016 538.012 332.031 537.934 cv
332.039 537.859 332.055 537.797 332.078 537.75 cv
332.094 537.703 332.121 537.672 332.156 537.652 cv
332.184 537.637 332.219 537.629 332.262 537.625 cv
332.332 537.629 332.434 537.672 332.57 537.758 cv
332.699 537.848 332.871 537.945 333.082 538.047 cv
333.289 538.156 333.539 538.254 333.832 538.34 cv
334.125 538.434 334.465 538.477 334.852 538.477 cv
335.141 538.477 335.406 538.437 335.648 538.359 cv
335.887 538.281 336.094 538.172 336.273 538.027 cv
336.445 537.887 336.582 537.711 336.676 537.5 cv
336.77 537.293 336.816 537.059 336.816 536.793 cv
336.816 536.512 336.75 536.266 336.621 536.059 cv
336.488 535.859 336.316 535.684 336.105 535.527 cv
335.891 535.379 335.648 535.238 335.375 535.105 cv
335.102 534.98 334.82 534.848 334.539 534.715 cv
334.25 534.582 333.973 534.437 333.703 534.273 cv
333.434 534.117 333.191 533.926 332.98 533.707 cv
332.762 533.488 332.59 533.234 332.461 532.937 cv
332.324 532.648 332.258 532.297 332.262 531.883 cv
332.258 531.465 332.336 531.09 332.492 530.758 cv
332.645 530.43 332.855 530.152 333.133 529.926 cv
333.402 529.707 333.727 529.535 334.105 529.418 cv
334.48 529.301 334.891 529.242 335.328 529.242 cv
335.547 529.242 335.77 529.262 336 529.301 cv
336.223 529.34 336.434 529.391 336.637 529.453 cv
336.832 529.52 337.012 529.594 337.172 529.672 cv
337.324 529.754 337.426 529.82 337.48 529.867 cv
337.527 529.922 337.563 529.961 337.578 529.984 cv
337.594 530.016 337.605 530.051 337.617 530.094 cv
337.625 530.141 337.633 530.195 337.641 530.254 cv
337.645 530.32 337.648 530.398 337.648 530.496 cv
337.648 530.59 337.645 530.676 337.637 530.746 cv
337.629 530.824 337.617 530.883 337.602 530.93 cv
337.586 530.977 337.563 531.012 337.535 531.035 cv
337.504 531.059 337.473 531.07 337.438 531.07 cv
337.379 531.07 337.289 531.035 337.168 530.965 cv
337.043 530.895 336.891 530.812 336.719 530.719 cv
336.539 530.629 336.332 530.547 336.094 530.469 cv
335.848 530.395 335.578 530.355 335.281 530.355 cv
335 530.355 334.754 530.395 334.547 530.469 cv
334.336 530.547 334.164 530.648 334.031 530.77 cv
333.895 530.895 333.793 531.039 333.727 531.211 cv
333.66 531.383 333.629 531.566 333.629 531.758 cv
333.629 532.043 333.691 532.285 333.82 532.484 cv
333.949 532.687 334.121 532.867 334.34 533.02 cv
334.551 533.18 334.797 533.32 335.074 533.449 cv
335.348 533.582 335.629 533.715 335.918 533.844 cv
336.203 533.977 336.484 534.121 336.758 534.277 cv
337.031 534.437 337.277 534.625 337.496 534.84 cv
337.711 535.059 337.883 535.312 338.02 535.605 cv
338.148 535.898 338.215 536.246 338.219 536.645 cv
cp
f
345.984 539.277 mo
345.98 539.324 345.973 539.359 345.957 539.383 cv
345.938 539.414 345.902 539.437 345.859 539.457 cv
345.813 539.477 345.754 539.488 345.68 539.504 cv
345.602 539.512 345.508 539.52 345.402 539.52 cv
345.277 539.52 345.18 539.512 345.109 539.504 cv
345.031 539.488 344.973 539.477 344.93 539.457 cv
344.883 539.437 344.852 539.414 344.84 539.383 cv
344.82 539.359 344.813 539.324 344.816 539.277 cv
344.816 538.352 li
344.414 538.797 344.02 539.117 343.633 539.316 cv
343.238 539.52 342.844 539.617 342.449 539.621 cv
341.977 539.617 341.582 539.543 341.266 539.387 cv
340.945 539.234 340.688 539.023 340.492 538.754 cv
340.289 538.488 340.148 538.176 340.066 537.816 cv
339.977 537.461 339.934 537.027 339.938 536.52 cv
339.938 532.266 li
339.934 532.227 339.941 532.191 339.965 532.16 cv
339.98 532.133 340.016 532.109 340.07 532.082 cv
340.117 532.062 340.188 532.047 340.273 532.035 cv
340.355 532.031 340.457 532.027 340.586 532.023 cv
340.707 532.027 340.813 532.031 340.898 532.035 cv
340.98 532.047 341.047 532.062 341.094 532.082 cv
341.141 532.109 341.176 532.133 341.199 532.16 cv
341.219 532.191 341.227 532.227 341.23 532.266 cv
341.23 536.348 li
341.227 536.762 341.258 537.09 341.32 537.336 cv
341.379 537.582 341.469 537.793 341.594 537.965 cv
341.711 538.145 341.867 538.277 342.059 538.371 cv
342.242 538.469 342.461 538.52 342.711 538.516 cv
343.031 538.52 343.352 538.402 343.676 538.172 cv
343.992 537.945 344.332 537.609 344.691 537.164 cv
344.691 532.266 li
344.691 532.227 344.699 532.191 344.719 532.16 cv
344.734 532.133 344.77 532.109 344.824 532.082 cv
344.875 532.062 344.941 532.047 345.023 532.035 cv
345.102 532.031 345.207 532.027 345.34 532.023 cv
345.461 532.027 345.566 532.031 345.652 532.035 cv
345.734 532.047 345.797 532.062 345.844 532.082 cv
345.887 532.109 345.922 532.133 345.949 532.16 cv
345.969 532.191 345.98 532.227 345.984 532.266 cv
cp
f
354.84 535.676 mo
354.836 536.285 354.77 536.836 354.641 537.32 cv
354.504 537.809 354.309 538.223 354.055 538.562 cv
353.797 538.906 353.48 539.168 353.109 539.348 cv
352.734 539.531 352.309 539.617 351.824 539.621 cv
351.598 539.617 351.391 539.598 351.203 539.555 cv
351.016 539.508 350.828 539.437 350.648 539.34 cv
350.461 539.242 350.281 539.117 350.102 538.965 cv
349.918 538.816 349.727 538.637 349.527 538.422 cv
349.527 539.277 li
349.527 539.324 349.516 539.359 349.496 539.387 cv
349.473 539.422 349.438 539.445 349.395 539.461 cv
349.344 539.477 349.285 539.488 349.219 539.504 cv
349.145 539.512 349.055 539.52 348.949 539.52 cv
348.84 539.52 348.754 539.512 348.684 539.504 cv
348.609 539.488 348.547 539.477 348.504 539.461 cv
348.453 539.445 348.422 539.422 348.41 539.387 cv
348.391 539.359 348.383 539.324 348.387 539.277 cv
348.387 528.867 li
348.383 528.828 348.395 528.793 348.414 528.758 cv
348.43 528.73 348.461 528.703 348.516 528.68 cv
348.563 528.66 348.629 528.645 348.715 528.633 cv
348.793 528.625 348.898 528.621 349.027 528.617 cv
349.156 528.621 349.262 528.625 349.348 528.633 cv
349.426 528.645 349.492 528.66 349.539 528.68 cv
349.586 528.703 349.617 528.73 349.641 528.758 cv
349.656 528.793 349.668 528.828 349.672 528.867 cv
349.672 533.066 li
349.879 532.855 350.082 532.676 350.277 532.531 cv
350.473 532.387 350.66 532.27 350.848 532.176 cv
351.031 532.09 351.219 532.023 351.41 531.977 cv
351.594 531.937 351.793 531.914 352.004 531.914 cv
352.508 531.914 352.941 532.016 353.309 532.219 cv
353.668 532.422 353.961 532.695 354.188 533.031 cv
354.41 533.375 354.578 533.773 354.684 534.23 cv
354.785 534.687 354.836 535.168 354.84 535.676 cv
cp
353.508 535.824 mo
353.504 535.469 353.477 535.121 353.426 534.781 cv
353.367 534.445 353.273 534.148 353.137 533.887 cv
353 533.629 352.82 533.418 352.598 533.258 cv
352.371 533.102 352.09 533.023 351.758 533.02 cv
351.59 533.023 351.426 533.047 351.266 533.09 cv
351.102 533.141 350.938 533.219 350.77 533.324 cv
350.602 533.437 350.426 533.578 350.25 533.746 cv
350.066 533.922 349.875 534.137 349.672 534.391 cv
349.672 537.187 li
350.027 537.621 350.367 537.953 350.691 538.176 cv
351.016 538.406 351.352 538.52 351.703 538.516 cv
352.023 538.52 352.301 538.441 352.535 538.281 cv
352.762 538.129 352.949 537.922 353.094 537.66 cv
353.238 537.406 353.344 537.117 353.41 536.797 cv
353.473 536.48 353.504 536.156 353.508 535.824 cv
cp
f
360.008 535.539 mo
360.008 535.742 359.984 535.879 359.938 535.957 cv
359.891 536.035 359.82 536.074 359.734 536.074 cv
356.477 536.074 li
356.383 536.074 356.316 536.035 356.27 535.953 cv
356.223 535.875 356.199 535.738 356.199 535.539 cv
356.199 535.344 356.223 535.203 356.27 535.125 cv
356.316 535.047 356.383 535.008 356.477 535.008 cv
359.734 535.008 li
359.773 535.008 359.813 535.016 359.848 535.031 cv
359.879 535.047 359.906 535.078 359.934 535.121 cv
359.953 535.168 359.973 535.223 359.988 535.289 cv
360 535.359 360.008 535.445 360.008 535.539 cv
cp
f
363.258 539.27 mo
363.254 539.312 363.246 539.348 363.227 539.379 cv
363.203 539.41 363.164 539.437 363.117 539.453 cv
363.063 539.473 362.996 539.484 362.91 539.5 cv
362.824 539.512 362.715 539.52 362.59 539.52 cv
362.461 539.52 362.355 539.512 362.27 539.5 cv
362.18 539.484 362.109 539.473 362.059 539.453 cv
362.004 539.437 361.969 539.41 361.949 539.379 cv
361.926 539.348 361.914 539.312 361.918 539.27 cv
361.918 529.59 li
361.914 529.551 361.926 529.516 361.953 529.48 cv
361.973 529.453 362.012 529.426 362.07 529.406 cv
362.121 529.391 362.191 529.375 362.281 529.359 cv
362.363 529.348 362.465 529.344 362.59 529.34 cv
362.715 529.344 362.824 529.348 362.91 529.359 cv
362.996 529.375 363.063 529.391 363.117 529.406 cv
363.164 529.426 363.203 529.453 363.227 529.48 cv
363.246 529.516 363.254 529.551 363.258 529.59 cv
cp
f
376.246 539.277 mo
376.242 539.324 376.234 539.359 376.215 539.383 cv
376.191 539.414 376.156 539.437 376.113 539.457 cv
376.063 539.477 375.996 539.488 375.918 539.504 cv
375.832 539.512 375.73 539.52 375.605 539.52 cv
375.473 539.52 375.363 539.512 375.285 539.504 cv
375.199 539.488 375.133 539.477 375.086 539.457 cv
375.031 539.437 374.996 539.414 374.98 539.383 cv
374.957 539.359 374.949 539.324 374.949 539.277 cv
374.949 535.016 li
374.949 534.723 374.922 534.453 374.871 534.207 cv
374.816 533.965 374.734 533.754 374.621 533.574 cv
374.508 533.398 374.363 533.262 374.188 533.168 cv
374.008 533.074 373.797 533.027 373.563 533.027 cv
373.266 533.027 372.969 533.145 372.672 533.371 cv
372.367 533.605 372.039 533.937 371.684 534.375 cv
371.684 539.277 li
371.68 539.324 371.668 539.359 371.652 539.383 cv
371.629 539.414 371.598 539.437 371.551 539.457 cv
371.5 539.477 371.434 539.488 371.352 539.504 cv
371.266 539.512 371.16 539.52 371.039 539.52 cv
370.918 539.52 370.816 539.512 370.73 539.504 cv
370.645 539.488 370.574 539.477 370.527 539.457 cv
370.473 539.437 370.441 539.414 370.426 539.383 cv
370.406 539.359 370.395 539.324 370.398 539.277 cv
370.398 535.016 li
370.395 534.723 370.367 534.453 370.313 534.207 cv
370.254 533.965 370.168 533.754 370.055 533.574 cv
369.941 533.398 369.797 533.262 369.625 533.168 cv
369.445 533.074 369.238 533.027 369.004 533.027 cv
368.703 533.027 368.406 533.145 368.105 533.371 cv
367.805 533.605 367.477 533.937 367.125 534.375 cv
367.125 539.277 li
367.121 539.324 367.109 539.359 367.094 539.383 cv
367.07 539.414 367.039 539.437 366.992 539.457 cv
366.945 539.477 366.879 539.488 366.801 539.504 cv
366.715 539.512 366.609 539.52 366.48 539.52 cv
366.352 539.52 366.246 539.512 366.168 539.504 cv
366.082 539.488 366.016 539.477 365.969 539.457 cv
365.914 539.437 365.883 539.414 365.867 539.383 cv
365.848 539.359 365.836 539.324 365.84 539.277 cv
365.84 532.266 li
365.836 532.227 365.844 532.191 365.863 532.16 cv
365.875 532.133 365.906 532.109 365.957 532.082 cv
366 532.062 366.063 532.047 366.137 532.035 cv
366.207 532.031 366.301 532.027 366.426 532.023 cv
366.535 532.027 366.633 532.031 366.711 532.035 cv
366.785 532.047 366.844 532.062 366.887 532.082 cv
366.926 532.109 366.953 532.133 366.973 532.16 cv
366.988 532.191 366.996 532.227 367 532.266 cv
367 533.191 li
367.391 532.75 367.773 532.43 368.148 532.223 cv
368.516 532.02 368.895 531.914 369.277 531.914 cv
369.566 531.914 369.824 531.949 370.059 532.016 cv
370.285 532.086 370.492 532.18 370.672 532.301 cv
370.848 532.422 370.996 532.566 371.125 532.734 cv
371.246 532.906 371.352 533.098 371.438 533.301 cv
371.668 533.051 371.891 532.836 372.102 532.656 cv
372.313 532.484 372.516 532.34 372.711 532.227 cv
372.906 532.121 373.094 532.043 373.277 531.988 cv
373.461 531.941 373.648 531.914 373.836 531.914 cv
374.289 531.914 374.668 531.996 374.973 532.152 cv
375.277 532.316 375.523 532.527 375.719 532.789 cv
375.906 533.055 376.043 533.363 376.125 533.719 cv
376.203 534.074 376.242 534.449 376.246 534.844 cv
cp
f
383.879 539.285 mo
383.875 539.348 383.855 539.395 383.816 539.426 cv
383.773 539.457 383.715 539.48 383.645 539.496 cv
383.566 539.512 383.461 539.52 383.324 539.52 cv
383.188 539.52 383.078 539.512 383 539.496 cv
382.914 539.48 382.855 539.457 382.824 539.426 cv
382.785 539.395 382.77 539.348 382.773 539.285 cv
382.773 538.586 li
382.465 538.914 382.121 539.168 381.746 539.348 cv
381.367 539.531 380.969 539.617 380.551 539.621 cv
380.176 539.617 379.844 539.57 379.547 539.477 cv
379.25 539.379 378.996 539.242 378.785 539.059 cv
378.574 538.879 378.41 538.656 378.293 538.391 cv
378.176 538.129 378.117 537.828 378.121 537.484 cv
378.117 537.094 378.195 536.75 378.359 536.457 cv
378.516 536.168 378.75 535.926 379.055 535.734 cv
379.355 535.543 379.723 535.398 380.16 535.301 cv
380.594 535.207 381.086 535.16 381.633 535.156 cv
382.602 535.156 li
382.602 534.609 li
382.598 534.34 382.57 534.102 382.516 533.895 cv
382.457 533.687 382.363 533.516 382.238 533.375 cv
382.105 533.238 381.941 533.133 381.742 533.062 cv
381.535 532.992 381.285 532.957 380.996 532.957 cv
380.676 532.957 380.391 532.996 380.141 533.07 cv
379.883 533.148 379.664 533.23 379.477 533.32 cv
379.289 533.414 379.129 533.5 379.004 533.57 cv
378.871 533.648 378.777 533.684 378.719 533.684 cv
378.676 533.684 378.641 533.676 378.609 533.652 cv
378.578 533.637 378.551 533.605 378.527 533.559 cv
378.504 533.52 378.484 533.465 378.477 533.398 cv
378.461 533.336 378.457 533.266 378.461 533.184 cv
378.457 533.059 378.465 532.953 378.488 532.875 cv
378.504 532.801 378.551 532.73 378.621 532.66 cv
378.691 532.594 378.813 532.516 378.984 532.426 cv
379.156 532.336 379.352 532.254 379.574 532.176 cv
379.797 532.105 380.043 532.043 380.309 531.988 cv
380.574 531.941 380.84 531.914 381.113 531.914 cv
381.613 531.914 382.043 531.973 382.395 532.086 cv
382.746 532.203 383.031 532.371 383.254 532.59 cv
383.469 532.812 383.629 533.086 383.73 533.41 cv
383.828 533.742 383.875 534.125 383.879 534.555 cv
cp
382.602 536.082 mo
381.5 536.082 li
381.145 536.086 380.84 536.117 380.582 536.172 cv
380.32 536.234 380.105 536.32 379.934 536.437 cv
379.762 536.555 379.637 536.695 379.559 536.859 cv
379.477 537.023 379.434 537.211 379.438 537.422 cv
379.434 537.789 379.551 538.082 379.781 538.293 cv
380.012 538.512 380.336 538.617 380.754 538.617 cv
381.09 538.617 381.402 538.531 381.691 538.359 cv
381.98 538.187 382.281 537.926 382.602 537.57 cv
cp
f
392.098 532.582 mo
392.094 532.766 392.07 532.898 392.023 532.977 cv
391.973 533.059 391.91 533.098 391.836 533.098 cv
390.828 533.098 li
391.008 533.285 391.137 533.492 391.211 533.719 cv
391.281 533.945 391.316 534.18 391.32 534.422 cv
391.316 534.828 391.25 535.187 391.125 535.5 cv
390.992 535.812 390.809 536.078 390.566 536.289 cv
390.324 536.508 390.035 536.672 389.707 536.785 cv
389.371 536.902 389.004 536.961 388.602 536.957 cv
388.313 536.961 388.039 536.922 387.785 536.844 cv
387.523 536.77 387.328 536.676 387.191 536.559 cv
387.098 536.656 387.02 536.762 386.961 536.879 cv
386.898 537 386.867 537.137 386.871 537.289 cv
386.867 537.473 386.953 537.625 387.125 537.742 cv
387.293 537.867 387.516 537.93 387.797 537.937 cv
389.629 538.016 li
389.977 538.027 390.293 538.074 390.586 538.16 cv
390.875 538.246 391.129 538.371 391.344 538.527 cv
391.555 538.687 391.723 538.879 391.844 539.109 cv
391.961 539.344 392.02 539.613 392.023 539.918 cv
392.02 540.238 391.953 540.543 391.82 540.836 cv
391.684 541.125 391.477 541.379 391.199 541.602 cv
390.918 541.82 390.563 541.996 390.133 542.125 cv
389.703 542.25 389.195 542.312 388.609 542.316 cv
388.039 542.312 387.555 542.266 387.16 542.172 cv
386.762 542.074 386.438 541.941 386.184 541.777 cv
385.93 541.609 385.746 541.414 385.633 541.184 cv
385.516 540.949 385.457 540.695 385.461 540.43 cv
385.457 540.258 385.477 540.094 385.523 539.934 cv
385.563 539.77 385.625 539.617 385.711 539.473 cv
385.793 539.328 385.902 539.191 386.031 539.055 cv
386.156 538.926 386.301 538.793 386.473 538.664 cv
386.215 538.535 386.027 538.371 385.906 538.172 cv
385.785 537.977 385.727 537.766 385.727 537.531 cv
385.727 537.219 385.789 536.934 385.918 536.684 cv
386.047 536.434 386.207 536.211 386.402 536.012 cv
386.238 535.82 386.113 535.605 386.02 535.363 cv
385.926 535.125 385.879 534.832 385.879 534.484 cv
385.879 534.09 385.945 533.73 386.082 533.41 cv
386.215 533.094 386.402 532.828 386.645 532.609 cv
386.883 532.395 387.168 532.227 387.504 532.105 cv
387.836 531.992 388.203 531.934 388.602 531.93 cv
388.813 531.934 389.012 531.945 389.195 531.965 cv
389.379 531.992 389.551 532.023 389.715 532.062 cv
391.836 532.062 li
391.922 532.066 391.988 532.109 392.031 532.191 cv
392.074 532.281 392.094 532.41 392.098 532.582 cv
cp
390.09 534.43 mo
390.086 533.957 389.953 533.586 389.695 533.312 cv
389.43 533.047 389.059 532.91 388.578 532.91 cv
388.324 532.91 388.105 532.953 387.926 533.035 cv
387.738 533.121 387.586 533.234 387.465 533.379 cv
387.344 533.527 387.254 533.695 387.195 533.883 cv
387.133 534.07 387.102 534.27 387.105 534.477 cv
387.102 534.941 387.234 535.305 387.496 535.57 cv
387.758 535.836 388.125 535.969 388.602 535.965 cv
388.852 535.969 389.07 535.93 389.262 535.844 cv
389.445 535.766 389.602 535.652 389.727 535.512 cv
389.848 535.371 389.938 535.207 390 535.016 cv
390.055 534.832 390.086 534.637 390.09 534.43 cv
cp
390.734 539.988 mo
390.73 539.684 390.605 539.453 390.363 539.289 cv
390.113 539.129 389.781 539.039 389.363 539.027 cv
387.547 538.965 li
387.379 539.098 387.242 539.223 387.141 539.336 cv
387.031 539.453 386.949 539.562 386.887 539.672 cv
386.824 539.777 386.781 539.883 386.758 539.988 cv
386.734 540.09 386.723 540.195 386.723 540.305 cv
386.723 540.641 386.891 540.895 387.234 541.074 cv
387.574 541.246 388.055 541.336 388.672 541.336 cv
389.059 541.336 389.383 541.297 389.648 541.223 cv
389.906 541.145 390.117 541.043 390.281 540.922 cv
390.438 540.793 390.555 540.652 390.629 540.492 cv
390.695 540.332 390.73 540.164 390.734 539.988 cv
cp
f
399.66 535.469 mo
399.656 535.672 399.605 535.812 399.508 535.898 cv
399.402 535.984 399.285 536.027 399.16 536.027 cv
394.543 536.027 li
394.539 536.418 394.578 536.77 394.66 537.082 cv
394.734 537.395 394.867 537.664 395.051 537.883 cv
395.23 538.109 395.465 538.281 395.762 538.398 cv
396.051 538.523 396.41 538.582 396.836 538.578 cv
397.168 538.582 397.465 538.555 397.727 538.496 cv
397.988 538.445 398.215 538.383 398.406 538.312 cv
398.594 538.246 398.75 538.187 398.875 538.129 cv
398.996 538.078 399.09 538.051 399.152 538.047 cv
399.188 538.051 399.219 538.059 399.25 538.074 cv
399.277 538.094 399.301 538.121 399.32 538.156 cv
399.332 538.195 399.344 538.246 399.355 538.309 cv
399.359 538.375 399.363 538.453 399.367 538.547 cv
399.363 538.617 399.359 538.676 399.359 538.723 cv
399.352 538.77 399.348 538.812 399.34 538.852 cv
399.332 538.891 399.316 538.926 399.301 538.957 cv
399.277 538.988 399.254 539.02 399.23 539.047 cv
399.199 539.078 399.117 539.125 398.977 539.187 cv
398.836 539.254 398.652 539.316 398.43 539.379 cv
398.203 539.441 397.945 539.496 397.652 539.547 cv
397.359 539.594 397.047 539.617 396.715 539.621 cv
396.137 539.617 395.629 539.539 395.199 539.379 cv
394.762 539.219 394.398 538.98 394.105 538.664 cv
393.805 538.348 393.582 537.953 393.434 537.473 cv
393.285 536.996 393.211 536.437 393.211 535.801 cv
393.211 535.203 393.285 534.664 393.441 534.18 cv
393.594 533.703 393.82 533.293 394.117 532.957 cv
394.41 532.621 394.766 532.363 395.18 532.184 cv
395.594 532.004 396.059 531.914 396.574 531.914 cv
397.125 531.914 397.594 532.004 397.98 532.18 cv
398.367 532.359 398.684 532.598 398.938 532.895 cv
399.184 533.195 399.367 533.547 399.484 533.945 cv
399.598 534.352 399.656 534.781 399.66 535.234 cv
cp
398.367 535.086 mo
398.383 534.41 398.23 533.879 397.914 533.496 cv
397.598 533.113 397.129 532.922 396.512 532.918 cv
396.188 532.922 395.906 532.98 395.668 533.098 cv
395.426 533.219 395.227 533.379 395.066 533.574 cv
394.902 533.773 394.777 534.004 394.691 534.266 cv
394.602 534.527 394.551 534.801 394.543 535.086 cv
cp
f
406.027 537.367 mo
406.023 537.73 405.957 538.051 405.828 538.328 cv
405.695 538.609 405.508 538.844 405.266 539.035 cv
405.02 539.23 404.727 539.375 404.391 539.473 cv
404.051 539.57 403.68 539.617 403.277 539.621 cv
403.023 539.617 402.785 539.598 402.563 539.562 cv
402.336 539.52 402.137 539.473 401.957 539.414 cv
401.777 539.355 401.625 539.293 401.5 539.227 cv
401.375 539.164 401.281 539.105 401.227 539.051 cv
401.168 539 401.129 538.93 401.105 538.832 cv
401.078 538.742 401.066 538.613 401.066 538.453 cv
401.066 538.355 401.07 538.273 401.082 538.203 cv
401.09 538.137 401.102 538.082 401.121 538.039 cv
401.133 538 401.156 537.969 401.184 537.949 cv
401.211 537.934 401.242 537.926 401.281 537.922 cv
401.336 537.926 401.422 537.961 401.535 538.027 cv
401.645 538.102 401.781 538.18 401.949 538.258 cv
402.109 538.344 402.301 538.418 402.527 538.488 cv
402.746 538.559 403.004 538.594 403.301 538.594 cv
403.516 538.594 403.715 538.57 403.895 538.523 cv
404.07 538.477 404.223 538.41 404.352 538.316 cv
404.48 538.23 404.582 538.113 404.652 537.969 cv
404.723 537.832 404.758 537.664 404.758 537.469 cv
404.758 537.273 404.707 537.109 404.605 536.973 cv
404.504 536.84 404.367 536.719 404.203 536.613 cv
404.035 536.512 403.852 536.422 403.645 536.336 cv
403.434 536.258 403.219 536.172 403 536.082 cv
402.781 535.996 402.566 535.895 402.355 535.781 cv
402.145 535.672 401.953 535.539 401.789 535.375 cv
401.617 535.219 401.484 535.023 401.387 534.797 cv
401.281 534.574 401.23 534.309 401.234 533.996 cv
401.23 533.723 401.285 533.457 401.395 533.203 cv
401.5 532.953 401.66 532.734 401.875 532.543 cv
402.086 532.355 402.352 532.203 402.672 532.086 cv
402.992 531.973 403.363 531.914 403.793 531.914 cv
403.977 531.914 404.164 531.93 404.352 531.961 cv
404.535 531.992 404.703 532.031 404.859 532.078 cv
405.008 532.125 405.137 532.176 405.246 532.23 cv
405.348 532.285 405.43 532.336 405.488 532.375 cv
405.539 532.422 405.574 532.457 405.598 532.484 cv
405.613 532.516 405.629 532.551 405.637 532.586 cv
405.645 532.629 405.652 532.676 405.66 532.73 cv
405.668 532.789 405.672 532.859 405.672 532.941 cv
405.672 533.031 405.668 533.109 405.66 533.172 cv
405.652 533.242 405.637 533.293 405.621 533.332 cv
405.598 533.375 405.578 533.406 405.555 533.422 cv
405.527 533.441 405.496 533.449 405.469 533.449 cv
405.418 533.449 405.352 533.422 405.266 533.363 cv
405.176 533.309 405.063 533.246 404.922 533.18 cv
404.781 533.117 404.613 533.059 404.426 532.996 cv
404.234 532.941 404.02 532.91 403.777 532.91 cv
403.555 532.91 403.363 532.937 403.199 532.984 cv
403.031 533.039 402.895 533.109 402.789 533.195 cv
402.684 533.289 402.602 533.395 402.551 533.52 cv
402.492 533.645 402.465 533.781 402.469 533.926 cv
402.465 534.129 402.516 534.297 402.621 534.434 cv
402.723 534.574 402.859 534.695 403.027 534.797 cv
403.191 534.902 403.383 534.996 403.598 535.078 cv
403.809 535.164 404.023 535.25 404.246 535.336 cv
404.465 535.426 404.684 535.527 404.902 535.633 cv
405.117 535.742 405.309 535.871 405.477 536.027 cv
405.641 536.184 405.773 536.371 405.875 536.59 cv
405.973 536.809 406.023 537.07 406.027 537.367 cv
cp
f
176.246 11.641 mo
176.242 12.48 176.141 13.23 175.934 13.887 cv
175.727 14.551 175.418 15.109 175.008 15.566 cv
174.598 16.027 174.09 16.379 173.484 16.617 cv
172.879 16.859 172.18 16.977 171.387 16.98 cv
170.598 16.977 169.91 16.875 169.328 16.672 cv
168.742 16.469 168.254 16.156 167.867 15.734 cv
167.477 15.312 167.188 14.777 166.992 14.129 cv
166.797 13.48 166.699 12.711 166.703 11.82 cv
166.699 11.008 166.801 10.277 167.012 9.62097 cv
167.215 8.97302 167.523 8.41803 167.938 7.95697 cv
168.344 7.50403 168.852 7.15198 169.461 6.90601 cv
170.063 6.664 170.766 6.54303 171.57 6.539 cv
172.332 6.54303 173.008 6.64502 173.594 6.84399 cv
174.176 7.047 174.664 7.35498 175.059 7.77698 cv
175.449 8.19897 175.746 8.72998 175.945 9.37097 cv
176.145 10.012 176.242 10.77 176.246 11.641 cv
cp
174.098 11.75 mo
174.094 11.223 174.051 10.742 173.973 10.309 cv
173.887 9.875 173.746 9.50403 173.547 9.19098 cv
173.344 8.883 173.078 8.64502 172.746 8.47699 cv
172.414 8.30902 172 8.22302 171.504 8.22302 cv
170.996 8.22302 170.574 8.32001 170.238 8.508 cv
169.902 8.69897 169.629 8.94897 169.422 9.26599 cv
169.211 9.586 169.063 9.95697 168.98 10.379 cv
168.891 10.801 168.848 11.25 168.852 11.719 cv
168.848 12.273 168.891 12.77 168.977 13.207 cv
169.059 13.648 169.199 14.023 169.398 14.332 cv
169.594 14.645 169.859 14.879 170.191 15.043 cv
170.523 15.207 170.941 15.289 171.449 15.289 cv
171.949 15.289 172.367 15.195 172.707 15.008 cv
173.043 14.82 173.316 14.566 173.527 14.246 cv
173.73 13.926 173.879 13.551 173.969 13.121 cv
174.051 12.691 174.094 12.234 174.098 11.75 cv
cp
f
184.246 9.578 mo
184.242 9.60498 184.242 9.63702 184.242 9.672 cv
184.238 9.711 184.234 9.75 184.227 9.79303 cv
184.219 9.836 184.207 9.88702 184.195 9.94098 cv
184.18 10 184.164 10.066 184.145 10.137 cv
182.059 16.426 li
182.031 16.516 181.996 16.59 181.953 16.641 cv
181.906 16.699 181.832 16.742 181.734 16.77 cv
181.629 16.801 181.492 16.816 181.32 16.832 cv
181.145 16.84 180.918 16.848 180.641 16.848 cv
180.363 16.848 180.137 16.84 179.965 16.828 cv
179.789 16.812 179.652 16.793 179.555 16.762 cv
179.453 16.734 179.383 16.691 179.34 16.633 cv
179.293 16.582 179.258 16.512 179.234 16.426 cv
177.148 10.137 li
177.117 10.035 177.09 9.94098 177.074 9.85901 cv
177.051 9.77698 177.043 9.71899 177.043 9.67999 cv
177.039 9.64801 177.035 9.61298 177.039 9.578 cv
177.035 9.52698 177.051 9.47998 177.082 9.44098 cv
177.109 9.40198 177.16 9.37097 177.234 9.34399 cv
177.305 9.32001 177.402 9.30103 177.531 9.289 cv
177.656 9.28101 177.816 9.27698 178.012 9.27301 cv
178.223 9.27698 178.395 9.28497 178.527 9.29303 cv
178.652 9.30902 178.758 9.32397 178.836 9.34802 cv
178.91 9.37097 178.961 9.40601 178.996 9.44897 cv
179.023 9.49597 179.051 9.55103 179.074 9.60901 cv
180.656 14.711 li
180.703 14.906 li
180.75 14.711 li
182.309 9.60901 li
182.32 9.55103 182.344 9.49597 182.379 9.44897 cv
182.41 9.40601 182.465 9.37097 182.539 9.34802 cv
182.609 9.32397 182.707 9.30902 182.832 9.29303 cv
182.953 9.28497 183.113 9.27698 183.313 9.27301 cv
183.504 9.27698 183.66 9.28101 183.781 9.289 cv
183.902 9.30103 183.996 9.32001 184.066 9.34399 cv
184.133 9.37097 184.18 9.40198 184.207 9.44098 cv
184.23 9.47998 184.242 9.52698 184.246 9.578 cv
cp
f
191.727 12.859 mo
191.723 13.098 191.672 13.273 191.566 13.387 cv
191.457 13.504 191.309 13.562 191.129 13.559 cv
186.895 13.559 li
186.891 13.859 186.926 14.129 187 14.367 cv
187.066 14.609 187.18 14.812 187.336 14.98 cv
187.488 15.152 187.684 15.281 187.926 15.367 cv
188.164 15.457 188.453 15.5 188.797 15.5 cv
189.137 15.5 189.438 15.477 189.699 15.426 cv
189.957 15.379 190.184 15.324 190.375 15.262 cv
190.563 15.203 190.719 15.148 190.848 15.098 cv
190.969 15.051 191.07 15.027 191.152 15.023 cv
191.195 15.027 191.234 15.035 191.27 15.051 cv
191.297 15.07 191.324 15.102 191.344 15.148 cv
191.363 15.195 191.375 15.262 191.387 15.348 cv
191.391 15.434 191.395 15.543 191.398 15.672 cv
191.395 15.789 191.395 15.887 191.391 15.965 cv
191.383 16.047 191.375 16.113 191.367 16.168 cv
191.355 16.227 191.34 16.277 191.32 16.312 cv
191.301 16.355 191.273 16.391 191.242 16.426 cv
191.207 16.465 191.113 16.516 190.965 16.574 cv
190.809 16.641 190.617 16.703 190.387 16.758 cv
190.148 16.82 189.879 16.867 189.582 16.914 cv
189.277 16.953 188.957 16.977 188.617 16.98 cv
187.996 16.977 187.453 16.902 186.992 16.746 cv
186.523 16.594 186.137 16.355 185.828 16.039 cv
185.512 15.723 185.277 15.324 185.129 14.84 cv
184.973 14.359 184.898 13.793 184.902 13.137 cv
184.898 12.523 184.977 11.965 185.141 11.469 cv
185.297 10.973 185.531 10.555 185.844 10.207 cv
186.148 9.86298 186.523 9.59802 186.961 9.414 cv
187.398 9.23401 187.891 9.14502 188.445 9.14099 cv
189.023 9.14502 189.523 9.22998 189.938 9.39801 cv
190.352 9.57397 190.688 9.81201 190.953 10.113 cv
191.215 10.418 191.41 10.777 191.539 11.191 cv
191.66 11.609 191.723 12.059 191.727 12.547 cv
cp
189.824 12.297 mo
189.836 11.746 189.727 11.312 189.492 11 cv
189.258 10.687 188.891 10.531 188.398 10.527 cv
188.148 10.531 187.934 10.578 187.75 10.668 cv
187.563 10.766 187.41 10.891 187.289 11.047 cv
187.164 11.207 187.07 11.395 187.008 11.609 cv
186.941 11.824 186.902 12.055 186.895 12.297 cv
cp
f
197.801 10.23 mo
197.801 10.422 197.793 10.574 197.785 10.691 cv
197.77 10.812 197.754 10.906 197.738 10.973 cv
197.715 11.043 197.688 11.09 197.656 11.113 cv
197.617 11.141 197.574 11.152 197.527 11.152 cv
197.48 11.152 197.434 11.145 197.387 11.125 cv
197.332 11.109 197.273 11.09 197.211 11.066 cv
197.141 11.047 197.07 11.027 196.996 11.008 cv
196.914 10.992 196.828 10.984 196.738 10.98 cv
196.625 10.984 196.516 11.004 196.41 11.047 cv
196.301 11.094 196.188 11.164 196.074 11.254 cv
195.953 11.348 195.832 11.473 195.707 11.625 cv
195.578 11.785 195.441 11.977 195.297 12.203 cv
195.297 16.535 li
195.293 16.59 195.277 16.633 195.25 16.672 cv
195.215 16.711 195.16 16.746 195.09 16.77 cv
195.012 16.797 194.914 16.812 194.789 16.828 cv
194.664 16.84 194.504 16.848 194.316 16.848 cv
194.121 16.848 193.965 16.84 193.84 16.828 cv
193.715 16.812 193.613 16.797 193.539 16.77 cv
193.461 16.746 193.406 16.711 193.379 16.672 cv
193.344 16.633 193.328 16.59 193.332 16.535 cv
193.332 9.586 li
193.328 9.539 193.344 9.492 193.371 9.44897 cv
193.395 9.414 193.441 9.383 193.512 9.35199 cv
193.578 9.328 193.664 9.30902 193.773 9.29303 cv
193.879 9.28497 194.012 9.27698 194.176 9.27301 cv
194.34 9.27698 194.477 9.28497 194.586 9.29303 cv
194.691 9.30902 194.777 9.328 194.84 9.35199 cv
194.898 9.383 194.941 9.414 194.969 9.44897 cv
194.992 9.492 195.004 9.539 195.008 9.586 cv
195.008 10.449 li
195.188 10.191 195.359 9.97998 195.523 9.80902 cv
195.68 9.64502 195.836 9.508 195.984 9.40601 cv
196.129 9.30902 196.273 9.242 196.418 9.19897 cv
196.563 9.164 196.707 9.14502 196.855 9.14099 cv
196.922 9.14502 196.996 9.14801 197.074 9.15198 cv
197.152 9.164 197.23 9.17603 197.316 9.19098 cv
197.395 9.211 197.469 9.22998 197.535 9.25403 cv
197.594 9.27698 197.641 9.30499 197.672 9.328 cv
197.699 9.35901 197.719 9.38702 197.734 9.414 cv
197.746 9.44897 197.758 9.492 197.77 9.54303 cv
197.777 9.60199 197.785 9.68402 197.793 9.789 cv
197.797 9.89801 197.801 10.047 197.801 10.23 cv
cp
f
204.555 16.559 mo
204.551 16.637 204.523 16.691 204.477 16.73 cv
204.422 16.773 204.34 16.801 204.23 16.82 cv
204.113 16.836 203.949 16.848 203.734 16.848 cv
203.496 16.848 203.324 16.836 203.223 16.82 cv
203.113 16.801 203.039 16.773 203 16.73 cv
202.953 16.691 202.934 16.637 202.934 16.559 cv
202.934 16.008 li
202.645 16.316 202.316 16.555 201.953 16.723 cv
201.586 16.895 201.18 16.977 200.734 16.98 cv
200.363 16.977 200.023 16.93 199.715 16.836 cv
199.406 16.742 199.141 16.602 198.914 16.406 cv
198.688 16.219 198.512 15.984 198.387 15.703 cv
198.262 15.426 198.199 15.098 198.203 14.719 cv
198.199 14.32 198.277 13.969 198.438 13.664 cv
198.594 13.367 198.832 13.121 199.148 12.926 cv
199.461 12.734 199.852 12.59 200.32 12.492 cv
200.789 12.402 201.332 12.355 201.949 12.352 cv
202.629 12.352 li
202.629 11.93 li
202.629 11.715 202.605 11.523 202.563 11.359 cv
202.516 11.199 202.441 11.062 202.344 10.949 cv
202.238 10.844 202.105 10.762 201.938 10.707 cv
201.766 10.656 201.555 10.633 201.313 10.629 cv
200.98 10.633 200.688 10.668 200.434 10.738 cv
200.172 10.812 199.945 10.895 199.75 10.98 cv
199.551 11.074 199.387 11.152 199.258 11.223 cv
199.121 11.297 199.012 11.336 198.934 11.332 cv
198.871 11.336 198.82 11.316 198.781 11.277 cv
198.734 11.242 198.699 11.191 198.672 11.121 cv
198.641 11.059 198.617 10.973 198.605 10.871 cv
198.586 10.773 198.578 10.664 198.582 10.543 cv
198.578 10.383 198.594 10.258 198.621 10.16 cv
198.645 10.07 198.691 9.98401 198.77 9.90601 cv
198.84 9.83197 198.969 9.75 199.152 9.65997 cv
199.332 9.57001 199.543 9.48401 199.789 9.40601 cv
200.031 9.328 200.301 9.26599 200.59 9.21503 cv
200.879 9.16803 201.176 9.14502 201.484 9.14099 cv
202.027 9.14502 202.492 9.19501 202.879 9.30103 cv
203.266 9.40997 203.586 9.57397 203.836 9.79303 cv
204.086 10.012 204.266 10.297 204.383 10.645 cv
204.492 10.996 204.551 11.41 204.555 11.883 cv
cp
202.629 13.582 mo
201.879 13.582 li
201.563 13.586 201.293 13.609 201.07 13.652 cv
200.844 13.703 200.66 13.773 200.523 13.863 cv
200.379 13.961 200.277 14.074 200.215 14.203 cv
200.148 14.34 200.113 14.488 200.117 14.656 cv
200.113 14.949 200.207 15.18 200.395 15.344 cv
200.578 15.512 200.836 15.594 201.164 15.594 cv
201.438 15.594 201.688 15.523 201.922 15.383 cv
202.148 15.242 202.387 15.039 202.629 14.766 cv
cp
f
208.477 16.535 mo
208.473 16.59 208.457 16.633 208.43 16.672 cv
208.395 16.711 208.34 16.746 208.27 16.77 cv
208.191 16.797 208.094 16.812 207.969 16.828 cv
207.844 16.84 207.684 16.848 207.496 16.848 cv
207.301 16.848 207.145 16.84 207.02 16.828 cv
206.895 16.812 206.793 16.797 206.719 16.77 cv
206.641 16.746 206.586 16.711 206.559 16.672 cv
206.523 16.633 206.508 16.59 206.512 16.535 cv
206.512 6.289 li
206.508 6.23798 206.523 6.19098 206.559 6.14801 cv
206.586 6.10901 206.641 6.07397 206.719 6.04303 cv
206.793 6.01599 206.895 5.99597 207.02 5.97699 cv
207.145 5.96503 207.301 5.95697 207.496 5.953 cv
207.684 5.95697 207.844 5.96503 207.969 5.97699 cv
208.094 5.99597 208.191 6.01599 208.27 6.04303 cv
208.34 6.07397 208.395 6.10901 208.43 6.14801 cv
208.457 6.19098 208.473 6.23798 208.477 6.289 cv
cp
f
212.453 16.535 mo
212.449 16.59 212.434 16.633 212.406 16.672 cv
212.371 16.711 212.316 16.746 212.246 16.77 cv
212.168 16.797 212.07 16.812 211.945 16.828 cv
211.82 16.84 211.66 16.848 211.473 16.848 cv
211.277 16.848 211.121 16.84 210.996 16.828 cv
210.871 16.812 210.77 16.797 210.695 16.77 cv
210.617 16.746 210.563 16.711 210.535 16.672 cv
210.5 16.633 210.484 16.59 210.488 16.535 cv
210.488 6.289 li
210.484 6.23798 210.5 6.19098 210.535 6.14801 cv
210.563 6.10901 210.617 6.07397 210.695 6.04303 cv
210.77 6.01599 210.871 5.99597 210.996 5.97699 cv
211.121 5.96503 211.277 5.95697 211.473 5.953 cv
211.66 5.95697 211.82 5.96503 211.945 5.97699 cv
212.07 5.99597 212.168 6.01599 212.246 6.04303 cv
212.316 6.07397 212.371 6.10901 212.406 6.14801 cv
212.434 6.19098 212.449 6.23798 212.453 6.289 cv
cp
f
225.617 16.535 mo
225.617 16.598 225.605 16.645 225.586 16.68 cv
225.566 16.723 225.52 16.754 225.441 16.777 cv
225.363 16.801 225.246 16.816 225.098 16.832 cv
224.941 16.84 224.738 16.848 224.48 16.848 cv
224.262 16.848 224.086 16.84 223.957 16.832 cv
223.828 16.816 223.727 16.801 223.652 16.773 cv
223.574 16.746 223.52 16.711 223.492 16.664 cv
223.457 16.625 223.434 16.57 223.414 16.504 cv
222.508 14.254 li
222.398 14 222.293 13.773 222.191 13.574 cv
222.082 13.379 221.969 13.215 221.844 13.082 cv
221.715 12.953 221.566 12.852 221.402 12.781 cv
221.234 12.715 221.043 12.684 220.828 12.68 cv
220.188 12.68 li
220.188 16.52 li
220.184 16.574 220.168 16.621 220.137 16.66 cv
220.102 16.703 220.047 16.738 219.969 16.762 cv
219.891 16.789 219.785 16.809 219.656 16.824 cv
219.523 16.84 219.359 16.848 219.16 16.848 cv
218.961 16.848 218.793 16.84 218.664 16.824 cv
218.527 16.809 218.422 16.789 218.348 16.762 cv
218.266 16.738 218.211 16.703 218.184 16.66 cv
218.148 16.621 218.133 16.574 218.137 16.52 cv
218.137 7.36298 li
218.133 7.13702 218.191 6.97302 218.313 6.867 cv
218.426 6.77002 218.57 6.71899 218.746 6.71503 cv
221.355 6.71503 li
221.617 6.71899 221.836 6.72302 222.012 6.72998 cv
222.18 6.742 222.336 6.75403 222.48 6.77002 cv
222.883 6.828 223.246 6.92999 223.57 7.06598 cv
223.895 7.211 224.172 7.39502 224.398 7.617 cv
224.625 7.84802 224.797 8.11298 224.918 8.422 cv
225.035 8.72998 225.094 9.086 225.098 9.48401 cv
225.094 9.82397 225.051 10.133 224.969 10.406 cv
224.879 10.687 224.754 10.934 224.59 11.152 cv
224.422 11.371 224.215 11.562 223.973 11.719 cv
223.727 11.883 223.449 12.012 223.141 12.109 cv
223.289 12.184 223.434 12.273 223.566 12.375 cv
223.699 12.484 223.82 12.609 223.938 12.754 cv
224.051 12.902 224.164 13.07 224.27 13.258 cv
224.371 13.449 224.473 13.664 224.574 13.902 cv
225.426 15.891 li
225.5 16.09 225.551 16.23 225.578 16.32 cv
225.602 16.414 225.617 16.488 225.617 16.535 cv
cp
222.977 9.69501 mo
222.973 9.36298 222.898 9.08197 222.75 8.85199 cv
222.598 8.625 222.352 8.46503 222.012 8.367 cv
221.906 8.34399 221.789 8.32001 221.656 8.30499 cv
221.523 8.289 221.34 8.28101 221.105 8.28101 cv
220.188 8.28101 li
220.188 11.145 li
221.23 11.145 li
221.52 11.148 221.777 11.113 221.996 11.039 cv
222.215 10.973 222.395 10.871 222.539 10.742 cv
222.684 10.617 222.793 10.465 222.867 10.285 cv
222.938 10.109 222.973 9.914 222.977 9.69501 cv
cp
f
233.602 16.535 mo
233.598 16.59 233.586 16.633 233.563 16.672 cv
233.535 16.711 233.488 16.746 233.426 16.77 cv
233.359 16.797 233.273 16.812 233.168 16.828 cv
233.063 16.84 232.93 16.848 232.77 16.848 cv
232.594 16.848 232.453 16.84 232.352 16.828 cv
232.242 16.812 232.16 16.797 232.098 16.77 cv
232.035 16.746 231.988 16.711 231.965 16.672 cv
231.934 16.633 231.922 16.59 231.926 16.535 cv
231.926 15.734 li
231.539 16.148 231.148 16.461 230.754 16.668 cv
230.352 16.875 229.941 16.977 229.52 16.98 cv
229.039 16.977 228.637 16.902 228.313 16.746 cv
227.988 16.594 227.727 16.379 227.527 16.109 cv
227.324 15.84 227.18 15.527 227.098 15.168 cv
227.008 14.812 226.965 14.371 226.969 13.84 cv
226.969 9.586 li
226.965 9.539 226.98 9.492 227.012 9.44897 cv
227.039 9.414 227.09 9.383 227.168 9.35199 cv
227.242 9.328 227.344 9.30902 227.473 9.29303 cv
227.598 9.28497 227.754 9.27698 227.945 9.27301 cv
228.133 9.27698 228.293 9.28497 228.418 9.29303 cv
228.543 9.30902 228.641 9.328 228.719 9.35199 cv
228.789 9.383 228.844 9.414 228.879 9.44897 cv
228.906 9.492 228.922 9.539 228.926 9.586 cv
228.926 13.512 li
228.922 13.879 228.945 14.156 228.996 14.348 cv
229.039 14.539 229.109 14.703 229.211 14.84 cv
229.305 14.98 229.43 15.086 229.578 15.16 cv
229.727 15.238 229.898 15.277 230.094 15.273 cv
230.344 15.277 230.594 15.187 230.848 15 cv
231.098 14.82 231.367 14.555 231.652 14.207 cv
231.652 9.586 li
231.652 9.539 231.664 9.492 231.695 9.44897 cv
231.719 9.414 231.773 9.383 231.852 9.35199 cv
231.926 9.328 232.023 9.30902 232.152 9.29303 cv
232.273 9.28497 232.434 9.27698 232.629 9.27301 cv
232.82 9.27698 232.977 9.28497 233.102 9.29303 cv
233.223 9.30902 233.324 9.328 233.398 9.35199 cv
233.469 9.383 233.52 9.414 233.555 9.44897 cv
233.582 9.492 233.598 9.539 233.602 9.586 cv
cp
f
242.219 16.535 mo
242.215 16.59 242.199 16.633 242.172 16.672 cv
242.137 16.711 242.086 16.746 242.016 16.77 cv
241.941 16.797 241.84 16.812 241.715 16.828 cv
241.586 16.84 241.43 16.848 241.246 16.848 cv
241.051 16.848 240.891 16.84 240.766 16.828 cv
240.637 16.812 240.535 16.797 240.465 16.77 cv
240.387 16.746 240.336 16.711 240.309 16.672 cv
240.273 16.633 240.258 16.59 240.262 16.535 cv
240.262 12.57 li
240.258 12.234 240.234 11.969 240.188 11.773 cv
240.137 11.582 240.063 11.418 239.973 11.281 cv
239.879 11.145 239.762 11.039 239.613 10.961 cv
239.465 10.887 239.289 10.848 239.094 10.848 cv
238.84 10.848 238.59 10.941 238.336 11.121 cv
238.082 11.305 237.816 11.566 237.543 11.914 cv
237.543 16.535 li
237.539 16.59 237.523 16.633 237.496 16.672 cv
237.461 16.711 237.406 16.746 237.336 16.77 cv
237.258 16.797 237.16 16.812 237.035 16.828 cv
236.91 16.84 236.75 16.848 236.563 16.848 cv
236.367 16.848 236.211 16.84 236.086 16.828 cv
235.961 16.812 235.859 16.797 235.785 16.77 cv
235.707 16.746 235.652 16.711 235.625 16.672 cv
235.59 16.633 235.574 16.59 235.578 16.535 cv
235.578 9.586 li
235.574 9.539 235.59 9.492 235.617 9.44897 cv
235.641 9.414 235.688 9.383 235.758 9.35199 cv
235.824 9.328 235.91 9.30902 236.02 9.29303 cv
236.125 9.28497 236.258 9.27698 236.422 9.27301 cv
236.586 9.27698 236.723 9.28497 236.832 9.29303 cv
236.938 9.30902 237.023 9.328 237.086 9.35199 cv
237.145 9.383 237.188 9.414 237.215 9.44897 cv
237.238 9.492 237.25 9.539 237.254 9.586 cv
237.254 10.387 li
237.637 9.97699 238.027 9.664 238.426 9.453 cv
238.82 9.24597 239.238 9.14502 239.672 9.14099 cv
240.141 9.14502 240.539 9.22302 240.867 9.375 cv
241.191 9.53497 241.453 9.74597 241.652 10.012 cv
241.852 10.281 241.996 10.594 242.086 10.949 cv
242.172 11.309 242.215 11.738 242.219 12.242 cv
cp
f
248.09 15.852 mo
248.09 16.078 248.074 16.254 248.047 16.375 cv
248.016 16.5 247.977 16.586 247.934 16.633 cv
247.883 16.684 247.816 16.727 247.727 16.766 cv
247.633 16.805 247.523 16.836 247.406 16.867 cv
247.281 16.891 247.148 16.914 247.008 16.934 cv
246.863 16.945 246.723 16.953 246.578 16.957 cv
246.188 16.953 245.848 16.902 245.563 16.809 cv
245.277 16.707 245.043 16.559 244.855 16.352 cv
244.668 16.148 244.527 15.891 244.441 15.578 cv
244.348 15.27 244.305 14.898 244.309 14.469 cv
244.309 10.91 li
243.477 10.91 li
243.375 10.914 243.301 10.852 243.25 10.727 cv
243.195 10.605 243.168 10.402 243.172 10.113 cv
243.168 9.96503 243.176 9.836 243.191 9.73401 cv
243.203 9.633 243.223 9.55103 243.25 9.48798 cv
243.273 9.42999 243.305 9.38702 243.348 9.35901 cv
243.383 9.336 243.43 9.32397 243.484 9.32001 cv
244.309 9.32001 li
244.309 7.77002 li
244.305 7.72302 244.32 7.67603 244.352 7.62903 cv
244.379 7.59003 244.43 7.55499 244.508 7.52301 cv
244.582 7.5 244.684 7.47699 244.813 7.461 cv
244.938 7.44897 245.094 7.44501 245.285 7.44098 cv
245.473 7.44501 245.633 7.44897 245.762 7.461 cv
245.887 7.47699 245.988 7.5 246.063 7.52301 cv
246.133 7.55499 246.184 7.59003 246.219 7.62903 cv
246.246 7.67603 246.262 7.72302 246.266 7.77002 cv
246.266 9.32001 li
247.777 9.32001 li
247.828 9.32397 247.875 9.336 247.914 9.35901 cv
247.953 9.38702 247.984 9.42999 248.012 9.48798 cv
248.035 9.55103 248.055 9.633 248.07 9.73401 cv
248.082 9.836 248.09 9.96503 248.09 10.113 cv
248.09 10.402 248.063 10.605 248.012 10.727 cv
247.957 10.852 247.883 10.914 247.785 10.91 cv
246.266 10.91 li
246.266 14.176 li
246.262 14.555 246.32 14.84 246.445 15.027 cv
246.563 15.219 246.777 15.312 247.082 15.312 cv
247.184 15.312 247.277 15.305 247.363 15.285 cv
247.445 15.27 247.52 15.25 247.586 15.223 cv
247.648 15.203 247.703 15.18 247.75 15.16 cv
247.793 15.145 247.832 15.137 247.871 15.133 cv
247.898 15.137 247.93 15.145 247.961 15.16 cv
247.988 15.18 248.008 15.219 248.027 15.27 cv
248.039 15.328 248.055 15.402 248.07 15.492 cv
248.082 15.59 248.09 15.707 248.09 15.852 cv
cp
f
251.477 16.535 mo
251.473 16.59 251.457 16.633 251.43 16.672 cv
251.395 16.711 251.34 16.746 251.27 16.77 cv
251.191 16.797 251.094 16.812 250.969 16.828 cv
250.844 16.84 250.684 16.848 250.496 16.848 cv
250.301 16.848 250.145 16.84 250.02 16.828 cv
249.895 16.812 249.793 16.797 249.719 16.77 cv
249.641 16.746 249.586 16.711 249.559 16.672 cv
249.523 16.633 249.508 16.59 249.512 16.535 cv
249.512 9.60199 li
249.508 9.55103 249.523 9.50403 249.559 9.46503 cv
249.586 9.42603 249.641 9.39502 249.719 9.36298 cv
249.793 9.34003 249.895 9.31598 250.02 9.297 cv
250.145 9.28497 250.301 9.27698 250.496 9.27301 cv
250.684 9.27698 250.844 9.28497 250.969 9.297 cv
251.094 9.31598 251.191 9.34003 251.27 9.36298 cv
251.34 9.39502 251.395 9.42603 251.43 9.46503 cv
251.457 9.50403 251.473 9.55103 251.477 9.60199 cv
cp
251.625 7.22998 mo
251.625 7.62903 251.543 7.90198 251.383 8.05103 cv
251.219 8.203 250.922 8.27698 250.488 8.27301 cv
250.043 8.27698 249.742 8.203 249.594 8.05902 cv
249.438 7.914 249.363 7.65198 249.363 7.27002 cv
249.363 6.875 249.441 6.60199 249.602 6.44897 cv
249.758 6.297 250.059 6.21899 250.504 6.21899 cv
250.938 6.21899 251.234 6.29303 251.391 6.44098 cv
251.547 6.59003 251.625 6.85498 251.625 7.22998 cv
cp
f
264.496 16.535 mo
264.492 16.59 264.477 16.633 264.449 16.672 cv
264.414 16.711 264.363 16.746 264.293 16.77 cv
264.219 16.797 264.117 16.812 263.996 16.828 cv
263.871 16.84 263.715 16.848 263.523 16.848 cv
263.324 16.848 263.164 16.84 263.039 16.828 cv
262.914 16.812 262.813 16.797 262.738 16.77 cv
262.66 16.746 262.609 16.711 262.582 16.672 cv
262.555 16.633 262.539 16.59 262.543 16.535 cv
262.543 12.414 li
262.539 12.184 262.52 11.969 262.477 11.773 cv
262.43 11.582 262.359 11.418 262.273 11.281 cv
262.18 11.145 262.066 11.039 261.93 10.961 cv
261.789 10.887 261.625 10.848 261.434 10.848 cv
261.199 10.848 260.961 10.941 260.723 11.121 cv
260.484 11.305 260.227 11.566 259.945 11.914 cv
259.945 16.535 li
259.945 16.59 259.93 16.633 259.898 16.672 cv
259.867 16.711 259.813 16.746 259.738 16.77 cv
259.66 16.797 259.559 16.812 259.438 16.828 cv
259.313 16.84 259.16 16.848 258.973 16.848 cv
258.777 16.848 258.617 16.84 258.496 16.828 cv
258.367 16.812 258.266 16.797 258.195 16.77 cv
258.117 16.746 258.066 16.711 258.035 16.672 cv
258.004 16.633 257.988 16.59 257.988 16.535 cv
257.988 12.414 li
257.988 12.184 257.965 11.969 257.922 11.773 cv
257.879 11.582 257.813 11.418 257.727 11.281 cv
257.633 11.145 257.52 11.039 257.383 10.961 cv
257.238 10.887 257.074 10.848 256.891 10.848 cv
256.648 10.848 256.41 10.941 256.172 11.121 cv
255.934 11.305 255.676 11.566 255.402 11.914 cv
255.402 16.535 li
255.398 16.59 255.383 16.633 255.355 16.672 cv
255.32 16.711 255.266 16.746 255.195 16.77 cv
255.117 16.797 255.02 16.812 254.895 16.828 cv
254.77 16.84 254.609 16.848 254.422 16.848 cv
254.227 16.848 254.07 16.84 253.945 16.828 cv
253.82 16.812 253.719 16.797 253.645 16.77 cv
253.566 16.746 253.512 16.711 253.484 16.672 cv
253.449 16.633 253.434 16.59 253.438 16.535 cv
253.438 9.586 li
253.434 9.539 253.449 9.492 253.477 9.44897 cv
253.5 9.414 253.547 9.383 253.617 9.35199 cv
253.684 9.328 253.77 9.30902 253.879 9.29303 cv
253.984 9.28497 254.117 9.27698 254.281 9.27301 cv
254.445 9.27698 254.582 9.28497 254.691 9.29303 cv
254.797 9.30902 254.883 9.328 254.945 9.35199 cv
255.004 9.383 255.047 9.414 255.074 9.44897 cv
255.098 9.492 255.109 9.539 255.113 9.586 cv
255.113 10.387 li
255.496 9.97699 255.879 9.664 256.262 9.453 cv
256.641 9.24597 257.043 9.14502 257.461 9.14099 cv
257.746 9.14502 258 9.172 258.23 9.22998 cv
258.457 9.29303 258.664 9.37903 258.844 9.48798 cv
259.023 9.60199 259.176 9.73798 259.305 9.89099 cv
259.434 10.047 259.543 10.219 259.633 10.41 cv
259.84 10.187 260.043 9.99597 260.246 9.836 cv
260.441 9.67603 260.641 9.54303 260.836 9.44098 cv
261.031 9.34003 261.227 9.26599 261.422 9.21503 cv
261.617 9.16803 261.816 9.14502 262.02 9.14099 cv
262.48 9.14502 262.867 9.22302 263.188 9.375 cv
263.5 9.53497 263.758 9.74597 263.953 10.012 cv
264.148 10.281 264.285 10.594 264.371 10.949 cv
264.449 11.309 264.492 11.687 264.496 12.086 cv
cp
f
272.832 12.859 mo
272.828 13.098 272.777 13.273 272.672 13.387 cv
272.563 13.504 272.414 13.562 272.234 13.559 cv
268 13.559 li
267.996 13.859 268.031 14.129 268.105 14.367 cv
268.172 14.609 268.285 14.812 268.441 14.98 cv
268.594 15.152 268.789 15.281 269.031 15.367 cv
269.27 15.457 269.559 15.5 269.902 15.5 cv
270.242 15.5 270.543 15.477 270.805 15.426 cv
271.063 15.379 271.289 15.324 271.48 15.262 cv
271.668 15.203 271.824 15.148 271.953 15.098 cv
272.074 15.051 272.176 15.027 272.258 15.023 cv
272.301 15.027 272.34 15.035 272.375 15.051 cv
272.402 15.07 272.43 15.102 272.449 15.148 cv
272.469 15.195 272.48 15.262 272.492 15.348 cv
272.496 15.434 272.5 15.543 272.504 15.672 cv
272.5 15.789 272.5 15.887 272.496 15.965 cv
272.488 16.047 272.48 16.113 272.473 16.168 cv
272.461 16.227 272.445 16.277 272.426 16.312 cv
272.406 16.355 272.379 16.391 272.348 16.426 cv
272.313 16.465 272.219 16.516 272.07 16.574 cv
271.914 16.641 271.723 16.703 271.492 16.758 cv
271.254 16.82 270.984 16.867 270.688 16.914 cv
270.383 16.953 270.063 16.977 269.723 16.98 cv
269.102 16.977 268.559 16.902 268.098 16.746 cv
267.629 16.594 267.242 16.355 266.934 16.039 cv
266.617 15.723 266.383 15.324 266.234 14.84 cv
266.078 14.359 266.004 13.793 266.008 13.137 cv
266.004 12.523 266.082 11.965 266.246 11.469 cv
266.402 10.973 266.637 10.555 266.949 10.207 cv
267.254 9.86298 267.629 9.59802 268.066 9.414 cv
268.504 9.23401 268.996 9.14502 269.551 9.14099 cv
270.129 9.14502 270.629 9.22998 271.043 9.39801 cv
271.457 9.57397 271.793 9.81201 272.059 10.113 cv
272.32 10.418 272.516 10.777 272.645 11.191 cv
272.766 11.609 272.828 12.059 272.832 12.547 cv
cp
270.93 12.297 mo
270.941 11.746 270.832 11.312 270.598 11 cv
270.363 10.687 269.996 10.531 269.504 10.527 cv
269.254 10.531 269.039 10.578 268.855 10.668 cv
268.668 10.766 268.516 10.891 268.395 11.047 cv
268.27 11.207 268.176 11.395 268.113 11.609 cv
268.047 11.824 268.008 12.055 268 12.297 cv
cp
f
279.332 14.57 mo
279.328 14.969 279.254 15.316 279.109 15.617 cv
278.961 15.918 278.754 16.172 278.484 16.371 cv
278.211 16.578 277.891 16.727 277.523 16.828 cv
277.156 16.926 276.754 16.977 276.324 16.98 cv
276.059 16.977 275.813 16.957 275.578 16.922 cv
275.344 16.879 275.133 16.832 274.945 16.773 cv
274.758 16.715 274.602 16.652 274.477 16.59 cv
274.352 16.527 274.258 16.469 274.203 16.414 cv
274.145 16.359 274.102 16.277 274.074 16.16 cv
274.039 16.047 274.023 15.871 274.027 15.641 cv
274.023 15.492 274.031 15.371 274.043 15.277 cv
274.051 15.187 274.066 15.117 274.09 15.059 cv
274.109 15.008 274.133 14.969 274.168 14.949 cv
274.195 14.934 274.234 14.926 274.281 14.922 cv
274.336 14.926 274.422 14.957 274.535 15.02 cv
274.645 15.086 274.781 15.16 274.953 15.234 cv
275.117 15.316 275.313 15.387 275.531 15.453 cv
275.75 15.523 276 15.559 276.285 15.555 cv
276.461 15.559 276.617 15.539 276.758 15.5 cv
276.891 15.465 277.012 15.414 277.117 15.344 cv
277.215 15.277 277.289 15.191 277.344 15.086 cv
277.391 14.984 277.418 14.863 277.422 14.727 cv
277.418 14.57 277.371 14.437 277.277 14.328 cv
277.184 14.219 277.055 14.121 276.898 14.035 cv
276.734 13.953 276.555 13.875 276.359 13.801 cv
276.156 13.73 275.953 13.652 275.742 13.559 cv
275.531 13.473 275.324 13.371 275.129 13.254 cv
274.926 13.145 274.746 13.004 274.59 12.836 cv
274.426 12.672 274.301 12.473 274.207 12.234 cv
274.113 12.004 274.066 11.723 274.066 11.391 cv
274.066 11.062 274.129 10.758 274.258 10.477 cv
274.387 10.203 274.574 9.96503 274.82 9.76599 cv
275.063 9.57001 275.359 9.41803 275.711 9.30499 cv
276.059 9.19897 276.453 9.14502 276.895 9.14099 cv
277.109 9.14502 277.32 9.15997 277.527 9.18701 cv
277.73 9.22302 277.918 9.26202 278.086 9.30499 cv
278.25 9.35498 278.391 9.40601 278.508 9.45697 cv
278.621 9.51599 278.703 9.56201 278.754 9.59802 cv
278.801 9.64099 278.836 9.67999 278.859 9.71503 cv
278.879 9.758 278.891 9.80499 278.902 9.85498 cv
278.91 9.90997 278.922 9.97699 278.93 10.055 cv
278.938 10.141 278.941 10.238 278.941 10.355 cv
278.941 10.496 278.938 10.613 278.93 10.699 cv
278.922 10.793 278.906 10.863 278.891 10.91 cv
278.871 10.965 278.848 11 278.82 11.016 cv
278.785 11.039 278.75 11.047 278.711 11.043 cv
278.66 11.047 278.586 11.02 278.492 10.961 cv
278.391 10.91 278.27 10.852 278.121 10.785 cv
277.973 10.727 277.801 10.668 277.605 10.609 cv
277.41 10.559 277.188 10.531 276.941 10.527 cv
276.762 10.531 276.609 10.551 276.48 10.582 cv
276.348 10.621 276.238 10.672 276.16 10.738 cv
276.074 10.809 276.012 10.887 275.973 10.977 cv
275.926 11.07 275.906 11.168 275.91 11.27 cv
275.906 11.43 275.957 11.566 276.059 11.672 cv
276.156 11.785 276.285 11.879 276.449 11.961 cv
276.609 12.047 276.793 12.125 277 12.195 cv
277.203 12.27 277.41 12.352 277.621 12.434 cv
277.828 12.523 278.035 12.621 278.246 12.734 cv
278.449 12.848 278.633 12.988 278.793 13.152 cv
278.953 13.32 279.082 13.52 279.184 13.75 cv
279.277 13.984 279.328 14.258 279.332 14.57 cv
cp
f
295.277 9.57001 mo
295.273 9.62903 295.266 9.69897 295.254 9.78101 cv
295.234 9.86298 295.207 9.98401 295.168 10.137 cv
293.313 16.426 li
293.285 16.516 293.25 16.59 293.211 16.641 cv
293.168 16.699 293.105 16.742 293.02 16.77 cv
292.934 16.801 292.809 16.816 292.652 16.832 cv
292.488 16.84 292.285 16.848 292.035 16.848 cv
291.777 16.848 291.566 16.84 291.41 16.828 cv
291.246 16.812 291.121 16.793 291.031 16.762 cv
290.938 16.734 290.871 16.691 290.832 16.633 cv
290.789 16.582 290.758 16.512 290.738 16.426 cv
289.57 12.203 li
289.555 12.133 li
289.539 12.203 li
288.465 16.426 li
288.441 16.516 288.41 16.59 288.375 16.641 cv
288.332 16.699 288.266 16.742 288.176 16.77 cv
288.078 16.801 287.953 16.816 287.793 16.832 cv
287.633 16.84 287.426 16.848 287.172 16.848 cv
286.91 16.848 286.699 16.84 286.543 16.828 cv
286.383 16.812 286.258 16.793 286.168 16.762 cv
286.074 16.734 286.008 16.691 285.969 16.633 cv
285.926 16.582 285.895 16.512 285.879 16.426 cv
284.039 10.137 li
283.988 9.98798 283.961 9.87097 283.949 9.78497 cv
283.934 9.703 283.926 9.62903 283.93 9.57001 cv
283.926 9.52002 283.941 9.47699 283.973 9.43402 cv
284 9.39801 284.051 9.367 284.129 9.34003 cv
284.203 9.32001 284.305 9.30103 284.43 9.289 cv
284.555 9.28101 284.715 9.27698 284.91 9.27301 cv
285.117 9.27698 285.285 9.28101 285.418 9.289 cv
285.547 9.30103 285.648 9.32001 285.723 9.34399 cv
285.793 9.37097 285.844 9.40601 285.875 9.44897 cv
285.902 9.49597 285.926 9.55103 285.941 9.60901 cv
287.32 14.711 li
287.336 14.805 li
287.352 14.711 li
288.645 9.60901 li
288.656 9.55103 288.684 9.49597 288.719 9.44897 cv
288.75 9.40601 288.801 9.37097 288.871 9.34399 cv
288.938 9.32001 289.031 9.30103 289.152 9.289 cv
289.273 9.28101 289.43 9.27698 289.625 9.27301 cv
289.816 9.27698 289.973 9.28497 290.094 9.29303 cv
290.211 9.30902 290.305 9.32397 290.379 9.34802 cv
290.445 9.37097 290.496 9.40198 290.527 9.44098 cv
290.555 9.47998 290.578 9.52698 290.594 9.578 cv
291.98 14.719 li
292.004 14.805 li
292.02 14.711 li
293.344 9.60901 li
293.352 9.55103 293.375 9.49597 293.406 9.44897 cv
293.438 9.40601 293.488 9.37097 293.563 9.34399 cv
293.633 9.32001 293.73 9.30103 293.855 9.289 cv
293.977 9.28101 294.137 9.27698 294.332 9.27301 cv
294.523 9.27698 294.68 9.28101 294.805 9.289 cv
294.926 9.30103 295.023 9.32001 295.094 9.34003 cv
295.164 9.367 295.211 9.39801 295.238 9.43402 cv
295.262 9.47699 295.273 9.52002 295.277 9.57001 cv
cp
f
298.492 16.535 mo
298.488 16.59 298.473 16.633 298.445 16.672 cv
298.41 16.711 298.355 16.746 298.285 16.77 cv
298.207 16.797 298.109 16.812 297.984 16.828 cv
297.859 16.84 297.699 16.848 297.512 16.848 cv
297.316 16.848 297.16 16.84 297.035 16.828 cv
296.91 16.812 296.809 16.797 296.734 16.77 cv
296.656 16.746 296.602 16.711 296.574 16.672 cv
296.539 16.633 296.523 16.59 296.527 16.535 cv
296.527 9.60199 li
296.523 9.55103 296.539 9.50403 296.574 9.46503 cv
296.602 9.42603 296.656 9.39502 296.734 9.36298 cv
296.809 9.34003 296.91 9.31598 297.035 9.297 cv
297.16 9.28497 297.316 9.27698 297.512 9.27301 cv
297.699 9.27698 297.859 9.28497 297.984 9.297 cv
298.109 9.31598 298.207 9.34003 298.285 9.36298 cv
298.355 9.39502 298.41 9.42603 298.445 9.46503 cv
298.473 9.50403 298.488 9.55103 298.492 9.60199 cv
cp
298.641 7.22998 mo
298.641 7.62903 298.559 7.90198 298.398 8.05103 cv
298.234 8.203 297.938 8.27698 297.504 8.27301 cv
297.059 8.27698 296.758 8.203 296.609 8.05902 cv
296.453 7.914 296.379 7.65198 296.379 7.27002 cv
296.379 6.875 296.457 6.60199 296.617 6.44897 cv
296.773 6.297 297.074 6.21899 297.52 6.21899 cv
297.953 6.21899 298.25 6.29303 298.406 6.44098 cv
298.563 6.59003 298.641 6.85498 298.641 7.22998 cv
cp
f
304.57 15.852 mo
304.57 16.078 304.555 16.254 304.527 16.375 cv
304.496 16.5 304.457 16.586 304.414 16.633 cv
304.363 16.684 304.297 16.727 304.207 16.766 cv
304.113 16.805 304.004 16.836 303.887 16.867 cv
303.762 16.891 303.629 16.914 303.488 16.934 cv
303.344 16.945 303.203 16.953 303.059 16.957 cv
302.668 16.953 302.328 16.902 302.043 16.809 cv
301.758 16.707 301.523 16.559 301.336 16.352 cv
301.148 16.148 301.008 15.891 300.922 15.578 cv
300.828 15.27 300.785 14.898 300.789 14.469 cv
300.789 10.91 li
299.957 10.91 li
299.855 10.914 299.781 10.852 299.73 10.727 cv
299.676 10.605 299.648 10.402 299.652 10.113 cv
299.648 9.96503 299.656 9.836 299.672 9.73401 cv
299.684 9.633 299.703 9.55103 299.73 9.48798 cv
299.754 9.42999 299.785 9.38702 299.828 9.35901 cv
299.863 9.336 299.91 9.32397 299.965 9.32001 cv
300.789 9.32001 li
300.789 7.77002 li
300.785 7.72302 300.801 7.67603 300.832 7.62903 cv
300.859 7.59003 300.91 7.55499 300.988 7.52301 cv
301.063 7.5 301.164 7.47699 301.293 7.461 cv
301.418 7.44897 301.574 7.44501 301.766 7.44098 cv
301.953 7.44501 302.113 7.44897 302.242 7.461 cv
302.367 7.47699 302.469 7.5 302.543 7.52301 cv
302.613 7.55499 302.664 7.59003 302.699 7.62903 cv
302.727 7.67603 302.742 7.72302 302.746 7.77002 cv
302.746 9.32001 li
304.258 9.32001 li
304.309 9.32397 304.355 9.336 304.395 9.35901 cv
304.434 9.38702 304.465 9.42999 304.492 9.48798 cv
304.516 9.55103 304.535 9.633 304.551 9.73401 cv
304.563 9.836 304.57 9.96503 304.57 10.113 cv
304.57 10.402 304.543 10.605 304.492 10.727 cv
304.438 10.852 304.363 10.914 304.266 10.91 cv
302.746 10.91 li
302.746 14.176 li
302.742 14.555 302.801 14.84 302.926 15.027 cv
303.043 15.219 303.258 15.312 303.563 15.312 cv
303.664 15.312 303.758 15.305 303.844 15.285 cv
303.926 15.27 304 15.25 304.066 15.223 cv
304.129 15.203 304.184 15.18 304.23 15.16 cv
304.273 15.145 304.313 15.137 304.352 15.133 cv
304.379 15.137 304.41 15.145 304.441 15.16 cv
304.469 15.18 304.488 15.219 304.508 15.27 cv
304.52 15.328 304.535 15.402 304.551 15.492 cv
304.563 15.59 304.57 15.707 304.57 15.852 cv
cp
f
312.633 16.535 mo
312.629 16.59 312.613 16.633 312.586 16.672 cv
312.551 16.711 312.5 16.746 312.43 16.77 cv
312.355 16.797 312.254 16.812 312.129 16.828 cv
312 16.84 311.844 16.848 311.66 16.848 cv
311.465 16.848 311.305 16.84 311.18 16.828 cv
311.051 16.812 310.949 16.797 310.879 16.77 cv
310.801 16.746 310.75 16.711 310.723 16.672 cv
310.688 16.633 310.672 16.59 310.676 16.535 cv
310.676 12.57 li
310.672 12.234 310.648 11.969 310.602 11.773 cv
310.551 11.582 310.477 11.418 310.387 11.281 cv
310.293 11.145 310.176 11.039 310.027 10.961 cv
309.879 10.887 309.703 10.848 309.508 10.848 cv
309.254 10.848 309.004 10.941 308.75 11.121 cv
308.496 11.305 308.23 11.566 307.957 11.914 cv
307.957 16.535 li
307.953 16.59 307.938 16.633 307.91 16.672 cv
307.875 16.711 307.82 16.746 307.75 16.77 cv
307.672 16.797 307.574 16.812 307.449 16.828 cv
307.324 16.84 307.164 16.848 306.977 16.848 cv
306.781 16.848 306.625 16.84 306.5 16.828 cv
306.375 16.812 306.273 16.797 306.199 16.77 cv
306.121 16.746 306.066 16.711 306.039 16.672 cv
306.004 16.633 305.988 16.59 305.992 16.535 cv
305.992 6.289 li
305.988 6.23798 306.004 6.19098 306.039 6.14801 cv
306.066 6.10901 306.121 6.07397 306.199 6.04303 cv
306.273 6.01599 306.375 5.99597 306.5 5.97699 cv
306.625 5.96503 306.781 5.95697 306.977 5.953 cv
307.164 5.95697 307.324 5.96503 307.449 5.97699 cv
307.574 5.99597 307.672 6.01599 307.75 6.04303 cv
307.82 6.07397 307.875 6.10901 307.91 6.14801 cv
307.938 6.19098 307.953 6.23798 307.957 6.289 cv
307.957 10.129 li
308.293 9.80103 308.637 9.55499 308.988 9.38702 cv
309.336 9.22699 309.703 9.14502 310.086 9.14099 cv
310.555 9.14502 310.953 9.22302 311.281 9.375 cv
311.605 9.53497 311.867 9.74597 312.066 10.016 cv
312.266 10.285 312.41 10.602 312.5 10.961 cv
312.586 11.324 312.629 11.762 312.633 12.273 cv
cp
f
323.996 7.55902 mo
323.992 7.71899 323.988 7.84802 323.977 7.953 cv
323.961 8.06201 323.938 8.14801 323.914 8.20697 cv
323.883 8.27002 323.852 8.31598 323.816 8.34399 cv
323.777 8.37903 323.734 8.39502 323.691 8.39099 cv
320.395 8.39099 li
320.395 11.105 li
323.488 11.105 li
323.531 11.105 323.574 11.121 323.613 11.145 cv
323.648 11.176 323.68 11.219 323.711 11.277 cv
323.738 11.34 323.758 11.422 323.773 11.523 cv
323.781 11.629 323.789 11.758 323.793 11.914 cv
323.789 12.07 323.781 12.203 323.773 12.305 cv
323.758 12.414 323.738 12.5 323.711 12.562 cv
323.68 12.633 323.648 12.68 323.613 12.707 cv
323.574 12.738 323.531 12.754 323.488 12.75 cv
320.395 12.75 li
320.395 16.504 li
320.391 16.562 320.375 16.613 320.348 16.652 cv
320.313 16.699 320.258 16.734 320.18 16.758 cv
320.098 16.789 319.992 16.809 319.863 16.824 cv
319.73 16.84 319.563 16.848 319.367 16.848 cv
319.164 16.848 319 16.84 318.871 16.824 cv
318.734 16.809 318.629 16.789 318.555 16.758 cv
318.473 16.734 318.418 16.699 318.387 16.652 cv
318.352 16.613 318.332 16.562 318.336 16.504 cv
318.336 7.36298 li
318.332 7.13702 318.391 6.97302 318.512 6.867 cv
318.625 6.77002 318.77 6.71899 318.945 6.71503 cv
323.691 6.71503 li
323.734 6.71899 323.777 6.72998 323.816 6.758 cv
323.852 6.789 323.883 6.836 323.914 6.89801 cv
323.938 6.96503 323.961 7.05499 323.977 7.15997 cv
323.988 7.27301 323.992 7.40601 323.996 7.55902 cv
cp
f
332.336 12.988 mo
332.332 13.586 332.254 14.129 332.102 14.613 cv
331.941 15.105 331.707 15.523 331.391 15.875 cv
331.074 16.227 330.676 16.5 330.199 16.691 cv
329.719 16.883 329.16 16.977 328.523 16.98 cv
327.902 16.977 327.363 16.895 326.91 16.723 cv
326.449 16.555 326.07 16.305 325.773 15.977 cv
325.469 15.652 325.246 15.25 325.102 14.77 cv
324.957 14.293 324.887 13.746 324.887 13.129 cv
324.887 12.539 324.965 12 325.121 11.508 cv
325.277 11.02 325.516 10.598 325.836 10.246 cv
326.152 9.89801 326.547 9.625 327.023 9.42999 cv
327.496 9.23798 328.055 9.14502 328.695 9.14099 cv
329.32 9.14502 329.859 9.22699 330.316 9.39502 cv
330.773 9.56598 331.152 9.81598 331.449 10.141 cv
331.746 10.469 331.969 10.871 332.117 11.348 cv
332.262 11.828 332.332 12.375 332.336 12.988 cv
cp
330.316 13.066 mo
330.313 12.73 330.285 12.414 330.234 12.121 cv
330.176 11.836 330.082 11.586 329.957 11.371 cv
329.824 11.16 329.652 10.992 329.441 10.871 cv
329.223 10.754 328.953 10.695 328.625 10.691 cv
328.336 10.695 328.082 10.75 327.863 10.852 cv
327.645 10.961 327.465 11.117 327.324 11.32 cv
327.184 11.527 327.078 11.773 327.008 12.059 cv
326.938 12.352 326.902 12.68 326.902 13.043 cv
326.902 13.391 326.93 13.707 326.988 13.992 cv
327.043 14.285 327.137 14.535 327.266 14.746 cv
327.391 14.961 327.563 15.125 327.785 15.238 cv
328 15.359 328.27 15.418 328.594 15.414 cv
328.887 15.418 329.145 15.363 329.367 15.254 cv
329.582 15.148 329.762 14.996 329.902 14.789 cv
330.043 14.59 330.145 14.344 330.215 14.055 cv
330.277 13.77 330.313 13.441 330.316 13.066 cv
cp
f
340.516 16.535 mo
340.512 16.59 340.5 16.633 340.477 16.672 cv
340.449 16.711 340.402 16.746 340.34 16.77 cv
340.273 16.797 340.188 16.812 340.082 16.828 cv
339.977 16.84 339.844 16.848 339.684 16.848 cv
339.508 16.848 339.367 16.84 339.266 16.828 cv
339.156 16.812 339.074 16.797 339.012 16.77 cv
338.949 16.746 338.902 16.711 338.879 16.672 cv
338.848 16.633 338.836 16.59 338.84 16.535 cv
338.84 15.734 li
338.453 16.148 338.063 16.461 337.668 16.668 cv
337.266 16.875 336.855 16.977 336.434 16.98 cv
335.953 16.977 335.551 16.902 335.227 16.746 cv
334.902 16.594 334.641 16.379 334.441 16.109 cv
334.238 15.84 334.094 15.527 334.012 15.168 cv
333.922 14.812 333.879 14.371 333.883 13.84 cv
333.883 9.586 li
333.879 9.539 333.895 9.492 333.926 9.44897 cv
333.953 9.414 334.004 9.383 334.082 9.35199 cv
334.156 9.328 334.258 9.30902 334.387 9.29303 cv
334.512 9.28497 334.668 9.27698 334.859 9.27301 cv
335.047 9.27698 335.207 9.28497 335.332 9.29303 cv
335.457 9.30902 335.555 9.328 335.633 9.35199 cv
335.703 9.383 335.758 9.414 335.793 9.44897 cv
335.82 9.492 335.836 9.539 335.84 9.586 cv
335.84 13.512 li
335.836 13.879 335.859 14.156 335.91 14.348 cv
335.953 14.539 336.023 14.703 336.125 14.84 cv
336.219 14.98 336.344 15.086 336.492 15.16 cv
336.641 15.238 336.813 15.277 337.008 15.273 cv
337.258 15.277 337.508 15.187 337.762 15 cv
338.012 14.82 338.281 14.555 338.566 14.207 cv
338.566 9.586 li
338.566 9.539 338.578 9.492 338.609 9.44897 cv
338.633 9.414 338.688 9.383 338.766 9.35199 cv
338.84 9.328 338.938 9.30902 339.066 9.29303 cv
339.188 9.28497 339.348 9.27698 339.543 9.27301 cv
339.734 9.27698 339.891 9.28497 340.016 9.29303 cv
340.137 9.30902 340.238 9.328 340.313 9.35199 cv
340.383 9.383 340.434 9.414 340.469 9.44897 cv
340.496 9.492 340.512 9.539 340.516 9.586 cv
cp
f
346.914 10.23 mo
346.914 10.422 346.906 10.574 346.898 10.691 cv
346.883 10.812 346.867 10.906 346.852 10.973 cv
346.828 11.043 346.801 11.09 346.77 11.113 cv
346.73 11.141 346.688 11.152 346.641 11.152 cv
346.594 11.152 346.547 11.145 346.5 11.125 cv
346.445 11.109 346.387 11.09 346.324 11.066 cv
346.254 11.047 346.184 11.027 346.109 11.008 cv
346.027 10.992 345.941 10.984 345.852 10.98 cv
345.738 10.984 345.629 11.004 345.523 11.047 cv
345.414 11.094 345.301 11.164 345.188 11.254 cv
345.066 11.348 344.945 11.473 344.82 11.625 cv
344.691 11.785 344.555 11.977 344.41 12.203 cv
344.41 16.535 li
344.406 16.59 344.391 16.633 344.363 16.672 cv
344.328 16.711 344.273 16.746 344.203 16.77 cv
344.125 16.797 344.027 16.812 343.902 16.828 cv
343.777 16.84 343.617 16.848 343.43 16.848 cv
343.234 16.848 343.078 16.84 342.953 16.828 cv
342.828 16.812 342.727 16.797 342.652 16.77 cv
342.574 16.746 342.52 16.711 342.492 16.672 cv
342.457 16.633 342.441 16.59 342.445 16.535 cv
342.445 9.586 li
342.441 9.539 342.457 9.492 342.484 9.44897 cv
342.508 9.414 342.555 9.383 342.625 9.35199 cv
342.691 9.328 342.777 9.30902 342.887 9.29303 cv
342.992 9.28497 343.125 9.27698 343.289 9.27301 cv
343.453 9.27698 343.59 9.28497 343.699 9.29303 cv
343.805 9.30902 343.891 9.328 343.953 9.35199 cv
344.012 9.383 344.055 9.414 344.082 9.44897 cv
344.105 9.492 344.117 9.539 344.121 9.586 cv
344.121 10.449 li
344.301 10.191 344.473 9.97998 344.637 9.80902 cv
344.793 9.64502 344.949 9.508 345.098 9.40601 cv
345.242 9.30902 345.387 9.242 345.531 9.19897 cv
345.676 9.164 345.82 9.14502 345.969 9.14099 cv
346.035 9.14502 346.109 9.14801 346.188 9.15198 cv
346.266 9.164 346.344 9.17603 346.43 9.19098 cv
346.508 9.211 346.582 9.22998 346.648 9.25403 cv
346.707 9.27698 346.754 9.30499 346.785 9.328 cv
346.813 9.35901 346.832 9.38702 346.848 9.414 cv
346.859 9.44897 346.871 9.492 346.883 9.54303 cv
346.891 9.60199 346.898 9.68402 346.906 9.789 cv
346.91 9.89801 346.914 10.047 346.914 10.23 cv
cp
f
358.609 7.55902 mo
358.605 7.71503 358.598 7.84399 358.59 7.94501 cv
358.574 8.05499 358.555 8.14099 358.531 8.203 cv
358.5 8.27002 358.469 8.31598 358.434 8.34399 cv
358.391 8.37903 358.348 8.39502 358.305 8.39099 cv
355.781 8.39099 li
355.781 16.52 li
355.781 16.574 355.762 16.621 355.73 16.66 cv
355.691 16.703 355.637 16.738 355.563 16.762 cv
355.48 16.789 355.375 16.809 355.246 16.824 cv
355.109 16.84 354.945 16.848 354.75 16.848 cv
354.555 16.848 354.391 16.84 354.258 16.824 cv
354.125 16.809 354.02 16.789 353.941 16.762 cv
353.863 16.738 353.805 16.703 353.773 16.66 cv
353.734 16.621 353.719 16.574 353.723 16.52 cv
353.723 8.39099 li
351.199 8.39099 li
351.145 8.39502 351.098 8.37903 351.066 8.34399 cv
351.027 8.31598 350.996 8.27002 350.973 8.203 cv
350.941 8.14099 350.922 8.05499 350.914 7.94501 cv
350.898 7.84399 350.895 7.71503 350.895 7.55902 cv
350.895 7.40601 350.898 7.27301 350.914 7.15997 cv
350.922 7.05499 350.941 6.96503 350.973 6.89801 cv
350.996 6.836 351.027 6.789 351.066 6.758 cv
351.098 6.72998 351.145 6.71899 351.199 6.71503 cv
358.305 6.71503 li
358.348 6.71899 358.391 6.72998 358.434 6.758 cv
358.469 6.789 358.5 6.836 358.531 6.89801 cv
358.555 6.96503 358.574 7.05499 358.59 7.15997 cv
358.598 7.27301 358.605 7.40601 358.609 7.55902 cv
cp
f
366.324 16.535 mo
366.32 16.59 366.305 16.633 366.277 16.672 cv
366.242 16.711 366.191 16.746 366.121 16.77 cv
366.047 16.797 365.945 16.812 365.82 16.828 cv
365.691 16.84 365.535 16.848 365.352 16.848 cv
365.156 16.848 364.996 16.84 364.871 16.828 cv
364.742 16.812 364.641 16.797 364.57 16.77 cv
364.492 16.746 364.441 16.711 364.414 16.672 cv
364.379 16.633 364.363 16.59 364.367 16.535 cv
364.367 12.57 li
364.363 12.234 364.34 11.969 364.293 11.773 cv
364.242 11.582 364.168 11.418 364.078 11.281 cv
363.984 11.145 363.867 11.039 363.719 10.961 cv
363.57 10.887 363.395 10.848 363.199 10.848 cv
362.945 10.848 362.695 10.941 362.441 11.121 cv
362.188 11.305 361.922 11.566 361.648 11.914 cv
361.648 16.535 li
361.645 16.59 361.629 16.633 361.602 16.672 cv
361.566 16.711 361.512 16.746 361.441 16.77 cv
361.363 16.797 361.266 16.812 361.141 16.828 cv
361.016 16.84 360.855 16.848 360.668 16.848 cv
360.473 16.848 360.316 16.84 360.191 16.828 cv
360.066 16.812 359.965 16.797 359.891 16.77 cv
359.813 16.746 359.758 16.711 359.73 16.672 cv
359.695 16.633 359.68 16.59 359.684 16.535 cv
359.684 6.289 li
359.68 6.23798 359.695 6.19098 359.73 6.14801 cv
359.758 6.10901 359.813 6.07397 359.891 6.04303 cv
359.965 6.01599 360.066 5.99597 360.191 5.97699 cv
360.316 5.96503 360.473 5.95697 360.668 5.953 cv
360.855 5.95697 361.016 5.96503 361.141 5.97699 cv
361.266 5.99597 361.363 6.01599 361.441 6.04303 cv
361.512 6.07397 361.566 6.10901 361.602 6.14801 cv
361.629 6.19098 361.645 6.23798 361.648 6.289 cv
361.648 10.129 li
361.984 9.80103 362.328 9.55499 362.68 9.38702 cv
363.027 9.22699 363.395 9.14502 363.777 9.14099 cv
364.246 9.14502 364.645 9.22302 364.973 9.375 cv
365.297 9.53497 365.559 9.74597 365.758 10.016 cv
365.957 10.285 366.102 10.602 366.191 10.961 cv
366.277 11.324 366.32 11.762 366.324 12.273 cv
cp
f
372.723 10.23 mo
372.723 10.422 372.715 10.574 372.707 10.691 cv
372.691 10.812 372.676 10.906 372.66 10.973 cv
372.637 11.043 372.609 11.09 372.578 11.113 cv
372.539 11.141 372.496 11.152 372.449 11.152 cv
372.402 11.152 372.355 11.145 372.309 11.125 cv
372.254 11.109 372.195 11.09 372.133 11.066 cv
372.063 11.047 371.992 11.027 371.918 11.008 cv
371.836 10.992 371.75 10.984 371.66 10.98 cv
371.547 10.984 371.438 11.004 371.332 11.047 cv
371.223 11.094 371.109 11.164 370.996 11.254 cv
370.875 11.348 370.754 11.473 370.629 11.625 cv
370.5 11.785 370.363 11.977 370.219 12.203 cv
370.219 16.535 li
370.215 16.59 370.199 16.633 370.172 16.672 cv
370.137 16.711 370.082 16.746 370.012 16.77 cv
369.934 16.797 369.836 16.812 369.711 16.828 cv
369.586 16.84 369.426 16.848 369.238 16.848 cv
369.043 16.848 368.887 16.84 368.762 16.828 cv
368.637 16.812 368.535 16.797 368.461 16.77 cv
368.383 16.746 368.328 16.711 368.301 16.672 cv
368.266 16.633 368.25 16.59 368.254 16.535 cv
368.254 9.586 li
368.25 9.539 368.266 9.492 368.293 9.44897 cv
368.316 9.414 368.363 9.383 368.434 9.35199 cv
368.5 9.328 368.586 9.30902 368.695 9.29303 cv
368.801 9.28497 368.934 9.27698 369.098 9.27301 cv
369.262 9.27698 369.398 9.28497 369.508 9.29303 cv
369.613 9.30902 369.699 9.328 369.762 9.35199 cv
369.82 9.383 369.863 9.414 369.891 9.44897 cv
369.914 9.492 369.926 9.539 369.93 9.586 cv
369.93 10.449 li
370.109 10.191 370.281 9.97998 370.445 9.80902 cv
370.602 9.64502 370.758 9.508 370.906 9.40601 cv
371.051 9.30902 371.195 9.242 371.34 9.19897 cv
371.484 9.164 371.629 9.14502 371.777 9.14099 cv
371.844 9.14502 371.918 9.14801 371.996 9.15198 cv
372.074 9.164 372.152 9.17603 372.238 9.19098 cv
372.316 9.211 372.391 9.22998 372.457 9.25403 cv
372.516 9.27698 372.563 9.30499 372.594 9.328 cv
372.621 9.35901 372.641 9.38702 372.656 9.414 cv
372.668 9.44897 372.68 9.492 372.691 9.54303 cv
372.699 9.60199 372.707 9.68402 372.715 9.789 cv
372.719 9.89801 372.723 10.047 372.723 10.23 cv
cp
f
380.164 12.859 mo
380.16 13.098 380.109 13.273 380.004 13.387 cv
379.895 13.504 379.746 13.562 379.566 13.559 cv
375.332 13.559 li
375.328 13.859 375.363 14.129 375.438 14.367 cv
375.504 14.609 375.617 14.812 375.773 14.98 cv
375.926 15.152 376.121 15.281 376.363 15.367 cv
376.602 15.457 376.891 15.5 377.234 15.5 cv
377.574 15.5 377.875 15.477 378.137 15.426 cv
378.395 15.379 378.621 15.324 378.813 15.262 cv
379 15.203 379.156 15.148 379.285 15.098 cv
379.406 15.051 379.508 15.027 379.59 15.023 cv
379.633 15.027 379.672 15.035 379.707 15.051 cv
379.734 15.07 379.762 15.102 379.781 15.148 cv
379.801 15.195 379.813 15.262 379.824 15.348 cv
379.828 15.434 379.832 15.543 379.836 15.672 cv
379.832 15.789 379.832 15.887 379.828 15.965 cv
379.82 16.047 379.813 16.113 379.805 16.168 cv
379.793 16.227 379.777 16.277 379.758 16.312 cv
379.738 16.355 379.711 16.391 379.68 16.426 cv
379.645 16.465 379.551 16.516 379.402 16.574 cv
379.246 16.641 379.055 16.703 378.824 16.758 cv
378.586 16.82 378.316 16.867 378.02 16.914 cv
377.715 16.953 377.395 16.977 377.055 16.98 cv
376.434 16.977 375.891 16.902 375.43 16.746 cv
374.961 16.594 374.574 16.355 374.266 16.039 cv
373.949 15.723 373.715 15.324 373.566 14.84 cv
373.41 14.359 373.336 13.793 373.34 13.137 cv
373.336 12.523 373.414 11.965 373.578 11.469 cv
373.734 10.973 373.969 10.555 374.281 10.207 cv
374.586 9.86298 374.961 9.59802 375.398 9.414 cv
375.836 9.23401 376.328 9.14502 376.883 9.14099 cv
377.461 9.14502 377.961 9.22998 378.375 9.39801 cv
378.789 9.57397 379.125 9.81201 379.391 10.113 cv
379.652 10.418 379.848 10.777 379.977 11.191 cv
380.098 11.609 380.16 12.059 380.164 12.547 cv
cp
378.262 12.297 mo
378.273 11.746 378.164 11.312 377.93 11 cv
377.695 10.687 377.328 10.531 376.836 10.527 cv
376.586 10.531 376.371 10.578 376.188 10.668 cv
376 10.766 375.848 10.891 375.727 11.047 cv
375.602 11.207 375.508 11.395 375.445 11.609 cv
375.379 11.824 375.34 12.055 375.332 12.297 cv
cp
f
387.695 16.559 mo
387.691 16.637 387.664 16.691 387.617 16.73 cv
387.563 16.773 387.48 16.801 387.371 16.82 cv
387.254 16.836 387.09 16.848 386.875 16.848 cv
386.637 16.848 386.465 16.836 386.363 16.82 cv
386.254 16.801 386.18 16.773 386.141 16.73 cv
386.094 16.691 386.074 16.637 386.074 16.559 cv
386.074 16.008 li
385.785 16.316 385.457 16.555 385.094 16.723 cv
384.727 16.895 384.32 16.977 383.875 16.98 cv
383.504 16.977 383.164 16.93 382.855 16.836 cv
382.547 16.742 382.281 16.602 382.055 16.406 cv
381.828 16.219 381.652 15.984 381.527 15.703 cv
381.402 15.426 381.34 15.098 381.344 14.719 cv
381.34 14.32 381.418 13.969 381.578 13.664 cv
381.734 13.367 381.973 13.121 382.289 12.926 cv
382.602 12.734 382.992 12.59 383.461 12.492 cv
383.93 12.402 384.473 12.355 385.09 12.352 cv
385.77 12.352 li
385.77 11.93 li
385.77 11.715 385.746 11.523 385.703 11.359 cv
385.656 11.199 385.582 11.062 385.484 10.949 cv
385.379 10.844 385.246 10.762 385.078 10.707 cv
384.906 10.656 384.695 10.633 384.453 10.629 cv
384.121 10.633 383.828 10.668 383.574 10.738 cv
383.313 10.812 383.086 10.895 382.891 10.98 cv
382.691 11.074 382.527 11.152 382.398 11.223 cv
382.262 11.297 382.152 11.336 382.074 11.332 cv
382.012 11.336 381.961 11.316 381.922 11.277 cv
381.875 11.242 381.84 11.191 381.813 11.121 cv
381.781 11.059 381.758 10.973 381.746 10.871 cv
381.727 10.773 381.719 10.664 381.723 10.543 cv
381.719 10.383 381.734 10.258 381.762 10.16 cv
381.785 10.07 381.832 9.98401 381.91 9.90601 cv
381.98 9.83197 382.109 9.75 382.293 9.65997 cv
382.473 9.57001 382.684 9.48401 382.93 9.40601 cv
383.172 9.328 383.441 9.26599 383.73 9.21503 cv
384.02 9.16803 384.316 9.14502 384.625 9.14099 cv
385.168 9.14502 385.633 9.19501 386.02 9.30103 cv
386.406 9.40997 386.727 9.57397 386.977 9.79303 cv
387.227 10.012 387.406 10.297 387.523 10.645 cv
387.633 10.996 387.691 11.41 387.695 11.883 cv
cp
385.77 13.582 mo
385.02 13.582 li
384.703 13.586 384.434 13.609 384.211 13.652 cv
383.984 13.703 383.801 13.773 383.664 13.863 cv
383.52 13.961 383.418 14.074 383.355 14.203 cv
383.289 14.34 383.254 14.488 383.258 14.656 cv
383.254 14.949 383.348 15.18 383.535 15.344 cv
383.719 15.512 383.977 15.594 384.305 15.594 cv
384.578 15.594 384.828 15.523 385.063 15.383 cv
385.289 15.242 385.527 15.039 385.77 14.766 cv
cp
f
396.281 16.535 mo
396.277 16.598 396.266 16.645 396.242 16.68 cv
396.215 16.723 396.168 16.754 396.109 16.777 cv
396.043 16.801 395.961 16.816 395.855 16.832 cv
395.75 16.84 395.617 16.848 395.465 16.848 cv
395.293 16.848 395.16 16.84 395.059 16.832 cv
394.953 16.816 394.867 16.801 394.805 16.777 cv
394.738 16.754 394.691 16.723 394.664 16.68 cv
394.633 16.645 394.617 16.598 394.621 16.535 cv
394.621 15.766 li
394.262 16.152 393.887 16.449 393.496 16.66 cv
393.098 16.871 392.664 16.977 392.191 16.98 cv
391.656 16.977 391.207 16.875 390.844 16.672 cv
390.477 16.469 390.18 16.195 389.949 15.844 cv
389.715 15.5 389.547 15.094 389.445 14.625 cv
389.344 14.164 389.293 13.672 389.293 13.152 cv
389.293 12.539 389.355 11.984 389.488 11.488 cv
389.617 10.996 389.813 10.574 390.07 10.227 cv
390.324 9.87903 390.641 9.61298 391.02 9.422 cv
391.398 9.23798 391.836 9.14502 392.332 9.14099 cv
392.719 9.14502 393.07 9.22302 393.391 9.37903 cv
393.703 9.539 394.02 9.77002 394.332 10.074 cv
394.332 6.31201 li
394.332 6.26202 394.344 6.21503 394.375 6.172 cv
394.398 6.133 394.453 6.09802 394.531 6.06598 cv
394.605 6.039 394.703 6.02002 394.832 6 cv
394.953 5.98798 395.113 5.97998 395.309 5.97699 cv
395.5 5.97998 395.656 5.98798 395.781 6 cv
395.902 6.02002 396.004 6.039 396.078 6.06598 cv
396.148 6.09802 396.199 6.133 396.234 6.172 cv
396.262 6.21503 396.277 6.26202 396.281 6.31201 cv
cp
394.332 11.891 mo
394.051 11.539 393.781 11.27 393.527 11.082 cv
393.266 10.895 392.996 10.801 392.719 10.801 cv
392.465 10.801 392.246 10.867 392.063 10.992 cv
391.875 11.125 391.727 11.293 391.617 11.504 cv
391.504 11.715 391.422 11.953 391.367 12.215 cv
391.313 12.48 391.285 12.75 391.285 13.02 cv
391.285 13.316 391.309 13.598 391.355 13.871 cv
391.402 14.148 391.477 14.395 391.586 14.609 cv
391.688 14.824 391.832 14.996 392.012 15.125 cv
392.188 15.258 392.41 15.324 392.68 15.32 cv
392.813 15.324 392.941 15.305 393.074 15.262 cv
393.199 15.227 393.332 15.164 393.465 15.07 cv
393.598 14.984 393.734 14.867 393.875 14.723 cv
394.016 14.582 394.168 14.406 394.332 14.199 cv
cp
f
403.105 14.57 mo
403.102 14.969 403.027 15.316 402.883 15.617 cv
402.734 15.918 402.527 16.172 402.258 16.371 cv
401.984 16.578 401.664 16.727 401.297 16.828 cv
400.93 16.926 400.527 16.977 400.098 16.98 cv
399.832 16.977 399.586 16.957 399.352 16.922 cv
399.117 16.879 398.906 16.832 398.719 16.773 cv
398.531 16.715 398.375 16.652 398.25 16.59 cv
398.125 16.527 398.031 16.469 397.977 16.414 cv
397.918 16.359 397.875 16.277 397.848 16.16 cv
397.813 16.047 397.797 15.871 397.801 15.641 cv
397.797 15.492 397.805 15.371 397.816 15.277 cv
397.824 15.187 397.84 15.117 397.863 15.059 cv
397.883 15.008 397.906 14.969 397.941 14.949 cv
397.969 14.934 398.008 14.926 398.055 14.922 cv
398.109 14.926 398.195 14.957 398.309 15.02 cv
398.418 15.086 398.555 15.16 398.727 15.234 cv
398.891 15.316 399.086 15.387 399.305 15.453 cv
399.523 15.523 399.773 15.559 400.059 15.555 cv
400.234 15.559 400.391 15.539 400.531 15.5 cv
400.664 15.465 400.785 15.414 400.891 15.344 cv
400.988 15.277 401.063 15.191 401.117 15.086 cv
401.164 14.984 401.191 14.863 401.195 14.727 cv
401.191 14.57 401.145 14.437 401.051 14.328 cv
400.957 14.219 400.828 14.121 400.672 14.035 cv
400.508 13.953 400.328 13.875 400.133 13.801 cv
399.93 13.73 399.727 13.652 399.516 13.559 cv
399.305 13.473 399.098 13.371 398.902 13.254 cv
398.699 13.145 398.52 13.004 398.363 12.836 cv
398.199 12.672 398.074 12.473 397.98 12.234 cv
397.887 12.004 397.84 11.723 397.84 11.391 cv
397.84 11.062 397.902 10.758 398.031 10.477 cv
398.16 10.203 398.348 9.96503 398.594 9.76599 cv
398.836 9.57001 399.133 9.41803 399.484 9.30499 cv
399.832 9.19897 400.227 9.14502 400.668 9.14099 cv
400.883 9.14502 401.094 9.15997 401.301 9.18701 cv
401.504 9.22302 401.691 9.26202 401.859 9.30499 cv
402.023 9.35498 402.164 9.40601 402.281 9.45697 cv
402.395 9.51599 402.477 9.56201 402.527 9.59802 cv
402.574 9.64099 402.609 9.67999 402.633 9.71503 cv
402.652 9.758 402.664 9.80499 402.676 9.85498 cv
402.684 9.90997 402.695 9.97699 402.703 10.055 cv
402.711 10.141 402.715 10.238 402.715 10.355 cv
402.715 10.496 402.711 10.613 402.703 10.699 cv
402.695 10.793 402.68 10.863 402.664 10.91 cv
402.645 10.965 402.621 11 402.594 11.016 cv
402.559 11.039 402.523 11.047 402.484 11.043 cv
402.434 11.047 402.359 11.02 402.266 10.961 cv
402.164 10.91 402.043 10.852 401.895 10.785 cv
401.746 10.727 401.574 10.668 401.379 10.609 cv
401.184 10.559 400.961 10.531 400.715 10.527 cv
400.535 10.531 400.383 10.551 400.254 10.582 cv
400.121 10.621 400.012 10.672 399.934 10.738 cv
399.848 10.809 399.785 10.887 399.746 10.977 cv
399.699 11.07 399.68 11.168 399.684 11.27 cv
399.68 11.43 399.73 11.566 399.832 11.672 cv
399.93 11.785 400.059 11.879 400.223 11.961 cv
400.383 12.047 400.566 12.125 400.773 12.195 cv
400.977 12.27 401.184 12.352 401.395 12.434 cv
401.602 12.523 401.809 12.621 402.02 12.734 cv
402.223 12.848 402.406 12.988 402.566 13.152 cv
402.727 13.32 402.855 13.52 402.957 13.75 cv
403.051 13.984 403.102 14.258 403.105 14.57 cv
cp
f
411.875 12.883 mo
411.871 13.184 411.844 13.395 411.789 13.512 cv
411.73 13.637 411.641 13.695 411.516 13.691 cv
408.273 13.691 li
408.145 13.695 408.051 13.633 407.996 13.508 cv
407.934 13.387 407.906 13.18 407.91 12.883 cv
407.906 12.594 407.934 12.387 407.996 12.266 cv
408.051 12.148 408.145 12.09 408.273 12.086 cv
411.516 12.086 li
411.578 12.09 411.629 12.102 411.676 12.125 cv
411.715 12.152 411.754 12.199 411.789 12.258 cv
411.816 12.324 411.84 12.406 411.855 12.508 cv
411.867 12.613 411.871 12.738 411.875 12.883 cv
cp
f
422.609 15.945 mo
422.605 16.102 422.602 16.234 422.59 16.336 cv
422.574 16.445 422.555 16.531 422.531 16.602 cv
422.504 16.672 422.469 16.723 422.434 16.754 cv
422.391 16.785 422.348 16.801 422.297 16.801 cv
417.676 16.801 li
417.5 16.801 417.355 16.75 417.242 16.648 cv
417.121 16.547 417.063 16.383 417.066 16.152 cv
417.066 6.99597 li
417.063 6.94897 417.082 6.90198 417.117 6.85498 cv
417.148 6.81598 417.203 6.78101 417.285 6.75403 cv
417.359 6.72998 417.465 6.711 417.602 6.69098 cv
417.73 6.67999 417.895 6.672 418.098 6.66803 cv
418.293 6.672 418.461 6.67999 418.594 6.69098 cv
418.723 6.711 418.824 6.72998 418.906 6.75403 cv
418.98 6.78101 419.039 6.81598 419.074 6.85498 cv
419.105 6.90198 419.121 6.94897 419.125 6.99597 cv
419.125 15.109 li
422.297 15.109 li
422.348 15.113 422.391 15.129 422.434 15.152 cv
422.469 15.184 422.504 15.23 422.531 15.293 cv
422.555 15.363 422.574 15.449 422.59 15.551 cv
422.602 15.66 422.605 15.789 422.609 15.945 cv
cp
f
430.734 12.988 mo
430.73 13.586 430.652 14.129 430.5 14.613 cv
430.34 15.105 430.105 15.523 429.789 15.875 cv
429.473 16.227 429.074 16.5 428.598 16.691 cv
428.117 16.883 427.559 16.977 426.922 16.98 cv
426.301 16.977 425.762 16.895 425.309 16.723 cv
424.848 16.555 424.469 16.305 424.172 15.977 cv
423.867 15.652 423.645 15.25 423.5 14.77 cv
423.355 14.293 423.285 13.746 423.285 13.129 cv
423.285 12.539 423.363 12 423.52 11.508 cv
423.676 11.02 423.914 10.598 424.234 10.246 cv
424.551 9.89801 424.945 9.625 425.422 9.42999 cv
425.895 9.23798 426.453 9.14502 427.094 9.14099 cv
427.719 9.14502 428.258 9.22699 428.715 9.39502 cv
429.172 9.56598 429.551 9.81598 429.848 10.141 cv
430.145 10.469 430.367 10.871 430.516 11.348 cv
430.66 11.828 430.73 12.375 430.734 12.988 cv
cp
428.715 13.066 mo
428.711 12.73 428.684 12.414 428.633 12.121 cv
428.574 11.836 428.48 11.586 428.355 11.371 cv
428.223 11.16 428.051 10.992 427.84 10.871 cv
427.621 10.754 427.352 10.695 427.023 10.691 cv
426.734 10.695 426.48 10.75 426.262 10.852 cv
426.043 10.961 425.863 11.117 425.723 11.32 cv
425.582 11.527 425.477 11.773 425.406 12.059 cv
425.336 12.352 425.301 12.68 425.301 13.043 cv
425.301 13.391 425.328 13.707 425.387 13.992 cv
425.441 14.285 425.535 14.535 425.664 14.746 cv
425.789 14.961 425.961 15.125 426.184 15.238 cv
426.398 15.359 426.668 15.418 426.992 15.414 cv
427.285 15.418 427.543 15.363 427.766 15.254 cv
427.98 15.148 428.16 14.996 428.301 14.789 cv
428.441 14.59 428.543 14.344 428.613 14.055 cv
428.676 13.77 428.711 13.441 428.715 13.066 cv
cp
f
437.551 15.43 mo
437.547 15.566 437.543 15.68 437.539 15.77 cv
437.527 15.863 437.52 15.941 437.508 16 cv
437.492 16.062 437.477 16.113 437.461 16.148 cv
437.441 16.191 437.398 16.238 437.34 16.297 cv
437.273 16.359 437.168 16.434 437.02 16.516 cv
436.867 16.605 436.695 16.684 436.504 16.746 cv
436.313 16.816 436.105 16.867 435.879 16.91 cv
435.652 16.949 435.418 16.969 435.184 16.973 cv
434.645 16.969 434.172 16.891 433.758 16.723 cv
433.344 16.559 432.996 16.312 432.719 15.988 cv
432.434 15.664 432.223 15.27 432.082 14.801 cv
431.941 14.336 431.871 13.797 431.871 13.191 cv
431.871 12.496 431.957 11.898 432.129 11.391 cv
432.301 10.887 432.543 10.465 432.859 10.133 cv
433.168 9.80103 433.535 9.55499 433.965 9.39099 cv
434.387 9.22998 434.855 9.14801 435.367 9.14801 cv
435.574 9.14801 435.777 9.16803 435.98 9.203 cv
436.176 9.242 436.363 9.29303 436.539 9.35199 cv
436.711 9.41803 436.867 9.48798 437.008 9.56201 cv
437.145 9.64502 437.242 9.711 437.301 9.76599 cv
437.355 9.82397 437.395 9.87097 437.422 9.90601 cv
437.441 9.94897 437.461 10 437.477 10.059 cv
437.488 10.125 437.5 10.203 437.508 10.289 cv
437.516 10.383 437.52 10.492 437.52 10.621 cv
437.52 10.926 437.492 11.137 437.441 11.258 cv
437.387 11.379 437.32 11.441 437.238 11.437 cv
437.148 11.441 437.055 11.406 436.957 11.332 cv
436.855 11.262 436.738 11.18 436.605 11.09 cv
436.473 11.004 436.313 10.922 436.125 10.848 cv
435.938 10.777 435.711 10.742 435.453 10.738 cv
434.941 10.742 434.555 10.937 434.285 11.328 cv
434.012 11.719 433.875 12.293 433.879 13.051 cv
433.875 13.426 433.91 13.758 433.98 14.043 cv
434.047 14.328 434.145 14.566 434.281 14.758 cv
434.41 14.953 434.578 15.098 434.781 15.191 cv
434.98 15.289 435.211 15.336 435.477 15.336 cv
435.742 15.336 435.977 15.297 436.176 15.215 cv
436.367 15.137 436.535 15.047 436.684 14.945 cv
436.824 14.848 436.949 14.758 437.051 14.676 cv
437.148 14.598 437.23 14.559 437.301 14.555 cv
437.344 14.559 437.383 14.57 437.418 14.594 cv
437.445 14.621 437.469 14.668 437.492 14.738 cv
437.508 14.809 437.523 14.898 437.535 15.008 cv
437.543 15.117 437.547 15.258 437.551 15.43 cv
cp
f
444.836 16.559 mo
444.832 16.637 444.805 16.691 444.758 16.73 cv
444.703 16.773 444.621 16.801 444.512 16.82 cv
444.395 16.836 444.23 16.848 444.016 16.848 cv
443.777 16.848 443.605 16.836 443.504 16.82 cv
443.395 16.801 443.32 16.773 443.281 16.73 cv
443.234 16.691 443.215 16.637 443.215 16.559 cv
443.215 16.008 li
442.926 16.316 442.598 16.555 442.234 16.723 cv
441.867 16.895 441.461 16.977 441.016 16.98 cv
440.645 16.977 440.305 16.93 439.996 16.836 cv
439.688 16.742 439.422 16.602 439.195 16.406 cv
438.969 16.219 438.793 15.984 438.668 15.703 cv
438.543 15.426 438.48 15.098 438.484 14.719 cv
438.48 14.32 438.559 13.969 438.719 13.664 cv
438.875 13.367 439.113 13.121 439.43 12.926 cv
439.742 12.734 440.133 12.59 440.602 12.492 cv
441.07 12.402 441.613 12.355 442.23 12.352 cv
442.91 12.352 li
442.91 11.93 li
442.91 11.715 442.887 11.523 442.844 11.359 cv
442.797 11.199 442.723 11.062 442.625 10.949 cv
442.52 10.844 442.387 10.762 442.219 10.707 cv
442.047 10.656 441.836 10.633 441.594 10.629 cv
441.262 10.633 440.969 10.668 440.715 10.738 cv
440.453 10.812 440.227 10.895 440.031 10.98 cv
439.832 11.074 439.668 11.152 439.539 11.223 cv
439.402 11.297 439.293 11.336 439.215 11.332 cv
439.152 11.336 439.102 11.316 439.063 11.277 cv
439.016 11.242 438.98 11.191 438.953 11.121 cv
438.922 11.059 438.898 10.973 438.887 10.871 cv
438.867 10.773 438.859 10.664 438.863 10.543 cv
438.859 10.383 438.875 10.258 438.902 10.16 cv
438.926 10.07 438.973 9.98401 439.051 9.90601 cv
439.121 9.83197 439.25 9.75 439.434 9.65997 cv
439.613 9.57001 439.824 9.48401 440.07 9.40601 cv
440.313 9.328 440.582 9.26599 440.871 9.21503 cv
441.16 9.16803 441.457 9.14502 441.766 9.14099 cv
442.309 9.14502 442.773 9.19501 443.16 9.30103 cv
443.547 9.40997 443.867 9.57397 444.117 9.79303 cv
444.367 10.012 444.547 10.297 444.664 10.645 cv
444.773 10.996 444.832 11.41 444.836 11.883 cv
cp
442.91 13.582 mo
442.16 13.582 li
441.844 13.586 441.574 13.609 441.352 13.652 cv
441.125 13.703 440.941 13.773 440.805 13.863 cv
440.66 13.961 440.559 14.074 440.496 14.203 cv
440.43 14.34 440.395 14.488 440.398 14.656 cv
440.395 14.949 440.488 15.18 440.676 15.344 cv
440.859 15.512 441.117 15.594 441.445 15.594 cv
441.719 15.594 441.969 15.523 442.203 15.383 cv
442.43 15.242 442.668 15.039 442.91 14.766 cv
cp
f
448.762 16.535 mo
448.758 16.59 448.742 16.633 448.715 16.672 cv
448.68 16.711 448.625 16.746 448.555 16.77 cv
448.477 16.797 448.379 16.812 448.254 16.828 cv
448.129 16.84 447.969 16.848 447.781 16.848 cv
447.586 16.848 447.43 16.84 447.305 16.828 cv
447.18 16.812 447.078 16.797 447.004 16.77 cv
446.926 16.746 446.871 16.711 446.844 16.672 cv
446.809 16.633 446.793 16.59 446.797 16.535 cv
446.797 6.289 li
446.793 6.23798 446.809 6.19098 446.844 6.14801 cv
446.871 6.10901 446.926 6.07397 447.004 6.04303 cv
447.078 6.01599 447.18 5.99597 447.305 5.97699 cv
447.43 5.96503 447.586 5.95697 447.781 5.953 cv
447.969 5.95697 448.129 5.96503 448.254 5.97699 cv
448.379 5.99597 448.477 6.01599 448.555 6.04303 cv
448.625 6.07397 448.68 6.10901 448.715 6.14801 cv
448.742 6.19098 448.758 6.23798 448.762 6.289 cv
cp
f
466.246 16.52 mo
466.242 16.574 466.23 16.621 466.203 16.66 cv
466.172 16.703 466.117 16.738 466.047 16.762 cv
465.969 16.789 465.871 16.809 465.746 16.824 cv
465.621 16.84 465.461 16.848 465.27 16.848 cv
465.082 16.848 464.926 16.84 464.805 16.824 cv
464.676 16.809 464.578 16.789 464.508 16.762 cv
464.434 16.738 464.383 16.703 464.352 16.66 cv
464.32 16.621 464.305 16.574 464.305 16.52 cv
464.305 8.31201 li
464.289 8.31201 li
461.367 16.512 li
461.344 16.582 461.309 16.637 461.266 16.68 cv
461.215 16.727 461.152 16.762 461.074 16.785 cv
460.992 16.812 460.891 16.828 460.766 16.836 cv
460.641 16.844 460.488 16.848 460.316 16.848 cv
460.137 16.848 459.988 16.84 459.863 16.828 cv
459.738 16.812 459.633 16.793 459.555 16.766 cv
459.469 16.738 459.406 16.703 459.363 16.66 cv
459.313 16.621 459.281 16.574 459.27 16.512 cv
456.449 8.31201 li
456.434 8.31201 li
456.434 16.52 li
456.43 16.574 456.414 16.621 456.391 16.66 cv
456.359 16.703 456.309 16.738 456.23 16.762 cv
456.152 16.789 456.051 16.809 455.93 16.824 cv
455.805 16.84 455.648 16.848 455.461 16.848 cv
455.27 16.848 455.113 16.84 454.992 16.824 cv
454.863 16.809 454.762 16.789 454.691 16.762 cv
454.613 16.738 454.563 16.703 454.535 16.66 cv
454.504 16.621 454.488 16.574 454.492 16.52 cv
454.492 7.53497 li
454.488 7.27301 454.559 7.07001 454.703 6.92603 cv
454.84 6.789 455.027 6.71899 455.266 6.71503 cv
456.605 6.71503 li
456.844 6.71899 457.047 6.73798 457.219 6.77301 cv
457.387 6.81598 457.535 6.87903 457.664 6.96899 cv
457.785 7.06201 457.891 7.18402 457.977 7.328 cv
458.059 7.47998 458.129 7.664 458.195 7.87903 cv
460.379 13.887 li
460.41 13.887 li
462.668 7.89502 li
462.734 7.67603 462.809 7.492 462.891 7.34003 cv
462.969 7.19098 463.063 7.07001 463.172 6.97302 cv
463.277 6.883 463.402 6.81598 463.547 6.77301 cv
463.691 6.73798 463.859 6.71899 464.055 6.71503 cv
465.434 6.71503 li
465.57 6.71899 465.691 6.73401 465.797 6.77002 cv
465.895 6.80902 465.977 6.86298 466.047 6.92999 cv
466.109 7.00403 466.16 7.09003 466.195 7.18701 cv
466.227 7.29303 466.242 7.40997 466.246 7.53497 cv
cp
f
475.355 12.988 mo
475.352 13.586 475.273 14.129 475.121 14.613 cv
474.961 15.105 474.727 15.523 474.41 15.875 cv
474.094 16.227 473.695 16.5 473.219 16.691 cv
472.738 16.883 472.18 16.977 471.543 16.98 cv
470.922 16.977 470.383 16.895 469.93 16.723 cv
469.469 16.555 469.09 16.305 468.793 15.977 cv
468.488 15.652 468.266 15.25 468.121 14.77 cv
467.977 14.293 467.906 13.746 467.906 13.129 cv
467.906 12.539 467.984 12 468.141 11.508 cv
468.297 11.02 468.535 10.598 468.855 10.246 cv
469.172 9.89801 469.566 9.625 470.043 9.42999 cv
470.516 9.23798 471.074 9.14502 471.715 9.14099 cv
472.34 9.14502 472.879 9.22699 473.336 9.39502 cv
473.793 9.56598 474.172 9.81598 474.469 10.141 cv
474.766 10.469 474.988 10.871 475.137 11.348 cv
475.281 11.828 475.352 12.375 475.355 12.988 cv
cp
473.336 13.066 mo
473.332 12.73 473.305 12.414 473.254 12.121 cv
473.195 11.836 473.102 11.586 472.977 11.371 cv
472.844 11.16 472.672 10.992 472.461 10.871 cv
472.242 10.754 471.973 10.695 471.645 10.691 cv
471.355 10.695 471.102 10.75 470.883 10.852 cv
470.664 10.961 470.484 11.117 470.344 11.32 cv
470.203 11.527 470.098 11.773 470.027 12.059 cv
469.957 12.352 469.922 12.68 469.922 13.043 cv
469.922 13.391 469.949 13.707 470.008 13.992 cv
470.063 14.285 470.156 14.535 470.285 14.746 cv
470.41 14.961 470.582 15.125 470.805 15.238 cv
471.02 15.359 471.289 15.418 471.613 15.414 cv
471.906 15.418 472.164 15.363 472.387 15.254 cv
472.602 15.148 472.781 14.996 472.922 14.789 cv
473.063 14.59 473.164 14.344 473.234 14.055 cv
473.297 13.77 473.332 13.441 473.336 13.066 cv
cp
f
483.508 16.535 mo
483.504 16.598 483.492 16.645 483.469 16.68 cv
483.441 16.723 483.395 16.754 483.336 16.777 cv
483.27 16.801 483.188 16.816 483.082 16.832 cv
482.977 16.84 482.844 16.848 482.691 16.848 cv
482.52 16.848 482.387 16.84 482.285 16.832 cv
482.18 16.816 482.094 16.801 482.031 16.777 cv
481.965 16.754 481.918 16.723 481.891 16.68 cv
481.859 16.645 481.844 16.598 481.848 16.535 cv
481.848 15.766 li
481.488 16.152 481.113 16.449 480.723 16.66 cv
480.324 16.871 479.891 16.977 479.418 16.98 cv
478.883 16.977 478.434 16.875 478.07 16.672 cv
477.703 16.469 477.406 16.195 477.176 15.844 cv
476.941 15.5 476.773 15.094 476.672 14.625 cv
476.57 14.164 476.52 13.672 476.52 13.152 cv
476.52 12.539 476.582 11.984 476.715 11.488 cv
476.844 10.996 477.039 10.574 477.297 10.227 cv
477.551 9.87903 477.867 9.61298 478.246 9.422 cv
478.625 9.23798 479.063 9.14502 479.559 9.14099 cv
479.945 9.14502 480.297 9.22302 480.617 9.37903 cv
480.93 9.539 481.246 9.77002 481.559 10.074 cv
481.559 6.31201 li
481.559 6.26202 481.57 6.21503 481.602 6.172 cv
481.625 6.133 481.68 6.09802 481.758 6.06598 cv
481.832 6.039 481.93 6.02002 482.059 6 cv
482.18 5.98798 482.34 5.97998 482.535 5.97699 cv
482.727 5.97998 482.883 5.98798 483.008 6 cv
483.129 6.02002 483.23 6.039 483.305 6.06598 cv
483.375 6.09802 483.426 6.133 483.461 6.172 cv
483.488 6.21503 483.504 6.26202 483.508 6.31201 cv
cp
481.559 11.891 mo
481.277 11.539 481.008 11.27 480.754 11.082 cv
480.492 10.895 480.223 10.801 479.945 10.801 cv
479.691 10.801 479.473 10.867 479.289 10.992 cv
479.102 11.125 478.953 11.293 478.844 11.504 cv
478.73 11.715 478.648 11.953 478.594 12.215 cv
478.539 12.48 478.512 12.75 478.512 13.02 cv
478.512 13.316 478.535 13.598 478.582 13.871 cv
478.629 14.148 478.703 14.395 478.813 14.609 cv
478.914 14.824 479.059 14.996 479.238 15.125 cv
479.414 15.258 479.637 15.324 479.906 15.32 cv
480.039 15.324 480.168 15.305 480.301 15.262 cv
480.426 15.227 480.559 15.164 480.691 15.07 cv
480.824 14.984 480.961 14.867 481.102 14.723 cv
481.242 14.582 481.395 14.406 481.559 14.199 cv
cp
f
491.906 12.859 mo
491.902 13.098 491.852 13.273 491.746 13.387 cv
491.637 13.504 491.488 13.562 491.309 13.559 cv
487.074 13.559 li
487.07 13.859 487.105 14.129 487.18 14.367 cv
487.246 14.609 487.359 14.812 487.516 14.98 cv
487.668 15.152 487.863 15.281 488.105 15.367 cv
488.344 15.457 488.633 15.5 488.977 15.5 cv
489.316 15.5 489.617 15.477 489.879 15.426 cv
490.137 15.379 490.363 15.324 490.555 15.262 cv
490.742 15.203 490.898 15.148 491.027 15.098 cv
491.148 15.051 491.25 15.027 491.332 15.023 cv
491.375 15.027 491.414 15.035 491.449 15.051 cv
491.477 15.07 491.504 15.102 491.523 15.148 cv
491.543 15.195 491.555 15.262 491.566 15.348 cv
491.57 15.434 491.574 15.543 491.578 15.672 cv
491.574 15.789 491.574 15.887 491.57 15.965 cv
491.563 16.047 491.555 16.113 491.547 16.168 cv
491.535 16.227 491.52 16.277 491.5 16.312 cv
491.48 16.355 491.453 16.391 491.422 16.426 cv
491.387 16.465 491.293 16.516 491.145 16.574 cv
490.988 16.641 490.797 16.703 490.566 16.758 cv
490.328 16.82 490.059 16.867 489.762 16.914 cv
489.457 16.953 489.137 16.977 488.797 16.98 cv
488.176 16.977 487.633 16.902 487.172 16.746 cv
486.703 16.594 486.316 16.355 486.008 16.039 cv
485.691 15.723 485.457 15.324 485.309 14.84 cv
485.152 14.359 485.078 13.793 485.082 13.137 cv
485.078 12.523 485.156 11.965 485.32 11.469 cv
485.477 10.973 485.711 10.555 486.023 10.207 cv
486.328 9.86298 486.703 9.59802 487.141 9.414 cv
487.578 9.23401 488.07 9.14502 488.625 9.14099 cv
489.203 9.14502 489.703 9.22998 490.117 9.39801 cv
490.531 9.57397 490.867 9.81201 491.133 10.113 cv
491.395 10.418 491.59 10.777 491.719 11.191 cv
491.84 11.609 491.902 12.059 491.906 12.547 cv
cp
490.004 12.297 mo
490.016 11.746 489.906 11.312 489.672 11 cv
489.438 10.687 489.07 10.531 488.578 10.527 cv
488.328 10.531 488.113 10.578 487.93 10.668 cv
487.742 10.766 487.59 10.891 487.469 11.047 cv
487.344 11.207 487.25 11.395 487.188 11.609 cv
487.121 11.824 487.082 12.055 487.074 12.297 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
