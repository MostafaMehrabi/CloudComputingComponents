%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntimes-FourThreads-Local.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 2:29:40 p.m.
%%BoundingBox: 0 0 636 550
%%HiResBoundingBox: 0 0 635.7601 549.7201
%%CropBox: 0 0 635.7601 549.7201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -549.72 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 549.72 li
635.76 549.72 li
635.76 0 li
cp
clp
gsave
0 549.72 mo
636 549.72 li
636 -.279968 li
0 -.279968 li
cp
clp
0 6.10352e-5 mo
635.762 6.10352e-5 li
635.762 549.719 li
0 549.719 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
63.961 487.078 mo
622.68 487.078 li
63.961 469.199 mo
622.68 469.199 li
63.961 433.68 mo
622.68 433.68 li
63.961 415.922 mo
622.68 415.922 li
63.961 380.398 mo
622.68 380.398 li
63.961 362.641 mo
622.68 362.641 li
63.961 327.121 mo
622.68 327.121 li
63.961 309.359 mo
622.68 309.359 li
63.961 273.84 mo
622.68 273.84 li
63.961 256.078 mo
622.68 256.078 li
63.961 220.441 mo
622.68 220.441 li
63.961 202.68 mo
622.68 202.68 li
63.961 167.16 mo
622.68 167.16 li
63.961 149.398 mo
622.68 149.398 li
63.961 113.879 mo
622.68 113.879 li
63.961 96.121 mo
622.68 96.121 li
63.961 60.602 mo
622.68 60.602 li
63.961 42.84 mo
622.68 42.84 li
.140414 .108034 .108034 0 cmyk
@
63.961 451.441 mo
622.68 451.441 li
63.961 398.16 mo
622.68 398.16 li
63.961 344.879 mo
622.68 344.879 li
63.961 291.602 mo
622.68 291.602 li
63.961 238.32 mo
622.68 238.32 li
63.961 184.922 mo
622.68 184.922 li
63.961 131.641 mo
622.68 131.641 li
63.961 78.359 mo
622.68 78.359 li
63.961 25.078 mo
622.68 25.078 li
.246403 .201175 .450446 .000885023 cmyk
@
98.879 25.078 mo
98.879 504.84 li
168.719 25.078 mo
168.719 504.84 li
238.559 25.078 mo
238.559 504.84 li
308.398 25.078 mo
308.398 504.84 li
378.238 25.078 mo
378.238 504.84 li
448.078 25.078 mo
448.078 504.84 li
517.922 25.078 mo
517.922 504.84 li
587.762 25.078 mo
587.762 504.84 li
.131685 .102663 .236637 0 cmyk
@
63.961 25.078 mo
63.961 504.84 li
133.801 25.078 mo
133.801 504.84 li
203.641 25.078 mo
203.641 504.84 li
273.48 25.078 mo
273.48 504.84 li
343.32 25.078 mo
343.32 504.84 li
413.16 25.078 mo
413.16 504.84 li
483 25.078 mo
483 504.84 li
552.84 25.078 mo
552.84 504.84 li
622.68 25.078 mo
622.68 504.84 li
.246403 .201175 .450446 .000885023 cmyk
@
33.238 495.48 mo
51 495.48 li
51 512.519 li
33.238 512.519 li
cp
0 0 0 0 cmyk
ef
33.238 442.199 mo
51 442.199 li
51 459.238 li
33.238 459.238 li
cp
ef
33.238 388.922 mo
51 388.922 li
51 405.961 li
33.238 405.961 li
cp
ef
33.238 335.519 mo
51 335.519 li
51 352.679 li
33.238 352.679 li
cp
ef
33.238 282.238 mo
51 282.238 li
51 299.281 li
33.238 299.281 li
cp
ef
33.238 228.961 mo
51 228.961 li
51 246 li
33.238 246 li
cp
ef
33.238 175.68 mo
51 175.68 li
51 192.719 li
33.238 192.719 li
cp
ef
26.16 122.281 mo
51 122.281 li
51 139.441 li
26.16 139.441 li
cp
ef
26.16 69 mo
51 69 li
51 86.16 li
26.16 86.16 li
cp
ef
26.16 15.7191 mo
51 15.7191 li
51 32.762 li
26.16 32.762 li
cp
ef
.96 lw
63.961 504.84 mo
622.68 504.84 li
.367803 .29575 .300999 .00198367 cmyk
@
63.961 504.84 mo
63.961 509.281 li
133.801 504.84 mo
133.801 509.281 li
203.641 504.84 mo
203.641 509.281 li
273.48 504.84 mo
273.48 509.281 li
343.32 504.84 mo
343.32 509.281 li
413.16 504.84 mo
413.16 509.281 li
483 504.84 mo
483 509.281 li
552.84 504.84 mo
552.84 509.281 li
622.68 504.84 mo
622.68 509.281 li
@
gsave
63.84 24.9611 mo
623.399 24.9611 li
623.399 505.441 li
63.84 505.441 li
cp
clp
1 lc
63.961 488.762 mo
133.801 496.559 li
203.641 500.879 li
273.48 498.359 li
343.32 500.16 li
413.16 499.441 li
483 499.441 li
552.84 499.078 li
622.68 499.441 li
.719875 .440223 .0276493 0 cmyk
@
grestore
1 lw
68.852 493.84 mo
58.77 483.762 li
58.77 493.84 mo
68.852 483.762 li
.719875 .440223 .0276493 0 cmyk
@
138.691 501.641 mo
128.609 491.559 li
128.609 501.641 mo
138.691 491.559 li
@
208.531 505.961 mo
198.449 495.879 li
198.449 505.961 mo
208.531 495.879 li
@
278.488 503.441 mo
268.41 493.359 li
268.41 503.441 mo
278.488 493.359 li
@
348.328 505.238 mo
338.25 495.16 li
338.25 505.238 mo
348.328 495.16 li
@
418.172 504.519 mo
408.09 494.441 li
408.09 504.519 mo
418.172 494.441 li
@
488.012 504.519 mo
477.93 494.441 li
477.93 504.519 mo
488.012 494.441 li
@
557.852 504.16 mo
547.77 494.078 li
547.77 504.16 mo
557.852 494.078 li
@
627.691 504.519 mo
617.609 494.441 li
617.609 504.519 mo
627.691 494.441 li
@
gsave
63.84 24.9611 mo
623.399 24.9611 li
623.399 505.441 li
63.84 505.441 li
cp
clp
.96 lw
1 lc
63.961 462.84 mo
133.801 483.48 li
203.641 493.801 li
273.48 490.199 li
343.32 493.801 li
413.16 489.48 li
483 494.16 li
552.84 490.199 li
622.68 493.078 li
.466651 0 .889799 0 cmyk
@
grestore
68.852 467.922 mo
58.77 457.84 li
58.77 467.922 mo
68.852 457.84 li
.466651 0 .889799 0 cmyk
@
138.691 488.441 mo
128.609 478.359 li
128.609 488.441 mo
138.691 478.359 li
@
208.531 498.762 mo
198.449 488.68 li
198.449 498.762 mo
208.531 488.68 li
@
278.488 495.281 mo
268.41 485.199 li
268.41 495.281 mo
278.488 485.199 li
@
348.328 498.762 mo
338.25 488.68 li
338.25 498.762 mo
348.328 488.68 li
@
418.172 494.559 mo
408.09 484.48 li
408.09 494.559 mo
418.172 484.48 li
@
488.012 499.121 mo
477.93 489.039 li
477.93 499.121 mo
488.012 489.039 li
@
557.852 495.281 mo
547.77 485.199 li
547.77 495.281 mo
557.852 485.199 li
@
627.691 498.039 mo
617.609 487.961 li
617.609 498.039 mo
627.691 487.961 li
@
gsave
63.84 24.9611 mo
623.399 24.9611 li
623.399 505.441 li
63.84 505.441 li
cp
clp
.96 lw
1 lc
63.961 363.359 mo
133.801 432.602 li
203.641 467.52 li
273.48 449.398 li
343.32 462.84 li
413.16 460.32 li
483 459.359 li
552.84 463.559 li
622.68 459.961 li
0 .990631 1 .000396735 cmyk
@
grestore
68.852 368.32 mo
58.77 358.238 li
58.77 368.32 mo
68.852 358.238 li
0 .990631 1 .000396735 cmyk
@
138.691 437.68 mo
128.609 427.602 li
128.609 437.68 mo
138.691 427.602 li
@
208.531 472.48 mo
198.449 462.398 li
198.449 472.48 mo
208.531 462.398 li
@
278.488 454.359 mo
268.41 444.281 li
268.41 454.359 mo
278.488 444.281 li
@
348.328 467.922 mo
338.25 457.84 li
338.25 467.922 mo
348.328 457.84 li
@
418.172 465.398 mo
408.09 455.32 li
408.09 465.398 mo
418.172 455.32 li
@
488.012 464.32 mo
477.93 454.238 li
477.93 464.32 mo
488.012 454.238 li
@
557.852 468.641 mo
547.77 458.559 li
547.77 468.641 mo
557.852 458.559 li
@
627.691 465.039 mo
617.609 454.961 li
617.609 465.039 mo
627.691 454.961 li
@
gsave
63.84 24.9611 mo
623.399 24.9611 li
623.399 505.441 li
63.84 505.441 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
63.961 413.762 mo
133.801 458.281 li
203.641 480.602 li
273.48 468.84 li
343.32 480.602 li
413.16 476.039 li
483 481.32 li
552.84 467.16 li
622.68 478.801 li
@
grestore
68.852 418.84 mo
58.77 408.762 li
58.77 418.84 mo
68.852 408.762 li
@
138.691 463.238 mo
128.609 453.16 li
128.609 463.238 mo
138.691 453.16 li
@
208.531 485.68 mo
198.449 475.602 li
198.449 485.68 mo
208.531 475.602 li
@
278.488 473.922 mo
268.41 463.84 li
268.41 473.922 mo
278.488 463.84 li
@
348.328 485.68 mo
338.25 475.602 li
338.25 485.68 mo
348.328 475.602 li
@
418.172 481 mo
408.09 470.922 li
408.09 481 mo
418.172 470.922 li
@
488.012 486.398 mo
477.93 476.32 li
477.93 486.398 mo
488.012 476.32 li
@
557.852 472.121 mo
547.77 462.039 li
547.77 472.121 mo
557.852 462.039 li
@
627.691 483.879 mo
617.609 473.801 li
617.609 483.879 mo
627.691 473.801 li
@
gsave
63.84 24.9611 mo
623.399 24.9611 li
623.399 505.441 li
63.84 505.441 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
63.961 255.719 mo
133.801 378.238 li
203.641 439.801 li
273.48 415.559 li
343.32 422.762 li
413.16 405.961 li
483 413.762 li
552.84 417.359 li
622.68 412.441 li
.719875 .440223 .0276493 0 cmyk
@
grestore
68.371 260.199 mo
59.25 251.078 li
59.25 260.199 mo
68.371 251.078 li
.719875 .440223 .0276493 0 cmyk
@
138.211 382.84 mo
129.09 373.719 li
129.09 382.84 mo
138.211 373.719 li
@
208.051 444.281 mo
198.93 435.16 li
198.93 444.281 mo
208.051 435.16 li
@
278.012 420.16 mo
268.891 411.039 li
268.891 420.16 mo
278.012 411.039 li
@
347.852 427.238 mo
338.73 418.121 li
338.73 427.238 mo
347.852 418.121 li
@
417.691 410.559 mo
408.57 401.441 li
408.57 410.559 mo
417.691 401.441 li
@
487.531 418.359 mo
478.41 409.238 li
478.41 418.359 mo
487.531 409.238 li
@
557.371 421.961 mo
548.25 412.84 li
548.25 421.961 mo
557.371 412.84 li
@
627.211 416.922 mo
618.09 407.801 li
618.09 416.922 mo
627.211 407.801 li
@
gsave
63.84 24.9611 mo
623.399 24.9611 li
623.399 505.441 li
63.84 505.441 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
63.961 312.48 mo
133.801 406.68 li
203.641 454.68 li
273.48 435.48 li
343.32 441.48 li
413.16 428.398 li
483 437.281 li
552.84 442.559 li
622.68 439.801 li
.466651 0 .889799 0 cmyk
@
grestore
68.852 317.559 mo
58.77 307.48 li
58.77 317.559 mo
68.852 307.48 li
.466651 0 .889799 0 cmyk
@
138.691 411.762 mo
128.609 401.68 li
128.609 411.762 mo
138.691 401.68 li
@
208.531 459.762 mo
198.449 449.68 li
198.449 459.762 mo
208.531 449.68 li
@
278.488 440.559 mo
268.41 430.48 li
268.41 440.559 mo
278.488 430.48 li
@
348.328 446.559 mo
338.25 436.48 li
338.25 446.559 mo
348.328 436.48 li
@
418.172 433.359 mo
408.09 423.281 li
408.09 433.359 mo
418.172 423.281 li
@
488.012 442.238 mo
477.93 432.16 li
477.93 442.238 mo
488.012 432.16 li
@
557.852 447.641 mo
547.77 437.559 li
547.77 447.641 mo
557.852 437.559 li
@
627.691 444.762 mo
617.609 434.68 li
617.609 444.762 mo
627.691 434.68 li
@
33.199 495.516 mo
50.926 495.516 li
50.926 512.606 li
33.199 512.606 li
cp
0 0 0 0 cmyk
ef
39.848 504.465 mo
39.844 505.148 39.793 505.77 39.688 506.332 cv
39.578 506.895 39.398 507.379 39.152 507.781 cv
38.898 508.187 38.57 508.5 38.172 508.719 cv
37.766 508.941 37.273 509.051 36.688 509.051 cv
36.129 509.051 35.656 508.953 35.277 508.754 cv
34.895 508.559 34.59 508.266 34.355 507.879 cv
34.121 507.492 33.953 507.02 33.859 506.453 cv
33.758 505.891 33.711 505.242 33.711 504.508 cv
33.711 503.836 33.766 503.215 33.875 502.648 cv
33.984 502.086 34.16 501.602 34.41 501.195 cv
34.652 500.793 34.977 500.48 35.383 500.254 cv
35.781 500.035 36.277 499.922 36.867 499.922 cv
37.426 499.922 37.898 500.023 38.281 500.219 cv
38.664 500.422 38.969 500.715 39.203 501.098 cv
39.434 501.488 39.602 501.961 39.699 502.523 cv
39.797 503.086 39.844 503.734 39.848 504.465 cv
cp
38.641 504.547 mo
38.637 504.105 38.621 503.707 38.594 503.355 cv
38.559 503.004 38.512 502.695 38.453 502.426 cv
38.387 502.156 38.309 501.926 38.211 501.73 cv
38.113 501.539 37.996 501.379 37.859 501.25 cv
37.719 501.125 37.559 501.031 37.387 500.973 cv
37.207 500.918 37.012 500.891 36.797 500.887 cv
36.406 500.891 36.09 500.98 35.852 501.164 cv
35.605 501.348 35.414 501.602 35.277 501.918 cv
35.137 502.238 35.043 502.609 34.992 503.039 cv
34.941 503.469 34.918 503.934 34.918 504.426 cv
34.918 505.09 34.949 505.652 35.02 506.113 cv
35.086 506.582 35.195 506.961 35.348 507.25 cv
35.492 507.547 35.684 507.758 35.914 507.887 cv
36.145 508.023 36.426 508.09 36.758 508.086 cv
37.012 508.09 37.234 508.051 37.43 507.965 cv
37.621 507.887 37.789 507.766 37.93 507.609 cv
38.07 507.457 38.184 507.273 38.277 507.059 cv
38.363 506.844 38.438 506.605 38.496 506.344 cv
38.547 506.086 38.586 505.805 38.609 505.5 cv
38.629 505.195 38.637 504.879 38.641 504.547 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
42.848 508.176 mo
42.848 508.504 42.793 508.719 42.688 508.824 cv
42.578 508.93 42.383 508.98 42.102 508.984 cv
41.824 508.98 41.633 508.93 41.531 508.828 cv
41.422 508.723 41.371 508.512 41.375 508.195 cv
41.371 507.871 41.426 507.656 41.535 507.547 cv
41.641 507.441 41.836 507.387 42.121 507.387 cv
42.395 507.387 42.582 507.441 42.691 507.547 cv
42.793 507.652 42.848 507.863 42.848 508.176 cv
cp
f
50.504 504.465 mo
50.5 505.148 50.449 505.77 50.344 506.332 cv
50.234 506.895 50.055 507.379 49.809 507.781 cv
49.555 508.187 49.227 508.5 48.828 508.719 cv
48.422 508.941 47.93 509.051 47.344 509.051 cv
46.785 509.051 46.313 508.953 45.934 508.754 cv
45.551 508.559 45.246 508.266 45.012 507.879 cv
44.777 507.492 44.609 507.02 44.516 506.453 cv
44.414 505.891 44.367 505.242 44.367 504.508 cv
44.367 503.836 44.422 503.215 44.531 502.648 cv
44.641 502.086 44.816 501.602 45.066 501.195 cv
45.309 500.793 45.633 500.48 46.039 500.254 cv
46.438 500.035 46.934 499.922 47.523 499.922 cv
48.082 499.922 48.555 500.023 48.938 500.219 cv
49.32 500.422 49.625 500.715 49.859 501.098 cv
50.09 501.488 50.258 501.961 50.355 502.523 cv
50.453 503.086 50.5 503.734 50.504 504.465 cv
cp
49.297 504.547 mo
49.293 504.105 49.277 503.707 49.25 503.355 cv
49.215 503.004 49.168 502.695 49.109 502.426 cv
49.043 502.156 48.965 501.926 48.867 501.73 cv
48.77 501.539 48.652 501.379 48.516 501.25 cv
48.375 501.125 48.215 501.031 48.043 500.973 cv
47.863 500.918 47.668 500.891 47.453 500.887 cv
47.063 500.891 46.746 500.98 46.508 501.164 cv
46.262 501.348 46.07 501.602 45.934 501.918 cv
45.793 502.238 45.699 502.609 45.648 503.039 cv
45.598 503.469 45.574 503.934 45.574 504.426 cv
45.574 505.09 45.605 505.652 45.676 506.113 cv
45.742 506.582 45.852 506.961 46.004 507.25 cv
46.148 507.547 46.34 507.758 46.57 507.887 cv
46.801 508.023 47.082 508.09 47.414 508.086 cv
47.668 508.09 47.891 508.051 48.086 507.965 cv
48.277 507.887 48.445 507.766 48.586 507.609 cv
48.727 507.457 48.84 507.273 48.934 507.059 cv
49.02 506.844 49.094 506.605 49.152 506.344 cv
49.203 506.086 49.242 505.805 49.266 505.5 cv
49.285 505.195 49.293 504.879 49.297 504.547 cv
cp
f
33.199 442.211 mo
50.926 442.211 li
50.926 459.301 li
33.199 459.301 li
cp
0 0 0 0 cmyk
ef
39.574 455.156 mo
39.57 455.246 39.563 455.316 39.551 455.375 cv
39.535 455.437 39.516 455.488 39.496 455.52 cv
39.473 455.559 39.449 455.582 39.418 455.598 cv
39.387 455.613 39.355 455.621 39.328 455.621 cv
34.691 455.621 li
34.656 455.621 34.629 455.613 34.602 455.598 cv
34.574 455.582 34.547 455.559 34.523 455.52 cv
34.496 455.488 34.477 455.437 34.465 455.375 cv
34.449 455.316 34.441 455.246 34.445 455.156 cv
34.441 455.078 34.449 455.004 34.465 454.941 cv
34.477 454.883 34.492 454.836 34.516 454.797 cv
34.531 454.762 34.559 454.73 34.59 454.707 cv
34.621 454.687 34.652 454.68 34.691 454.676 cv
36.543 454.676 li
36.543 447.93 li
34.828 448.949 li
34.738 449 34.668 449.027 34.621 449.035 cv
34.566 449.043 34.523 449.035 34.492 449.004 cv
34.457 448.977 34.438 448.926 34.426 448.855 cv
34.414 448.789 34.406 448.703 34.41 448.594 cv
34.406 448.52 34.41 448.453 34.422 448.395 cv
34.426 448.344 34.438 448.297 34.453 448.258 cv
34.465 448.223 34.484 448.191 34.508 448.164 cv
34.531 448.137 34.563 448.109 34.609 448.082 cv
36.652 446.77 li
36.668 446.758 36.688 446.746 36.719 446.738 cv
36.742 446.73 36.777 446.723 36.824 446.711 cv
36.863 446.703 36.914 446.695 36.969 446.691 cv
37.023 446.691 37.09 446.691 37.176 446.687 cv
37.281 446.691 37.375 446.695 37.449 446.703 cv
37.52 446.711 37.574 446.727 37.621 446.742 cv
37.66 446.762 37.688 446.781 37.703 446.805 cv
37.711 446.832 37.719 446.855 37.723 446.879 cv
37.723 454.676 li
39.328 454.676 li
39.363 454.68 39.398 454.687 39.43 454.707 cv
39.461 454.73 39.484 454.762 39.508 454.797 cv
39.523 454.836 39.539 454.883 39.555 454.941 cv
39.563 455.004 39.57 455.078 39.574 455.156 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
42.848 454.875 mo
42.848 455.203 42.793 455.418 42.688 455.523 cv
42.578 455.629 42.383 455.68 42.102 455.684 cv
41.824 455.68 41.633 455.629 41.531 455.527 cv
41.422 455.422 41.371 455.211 41.375 454.895 cv
41.371 454.57 41.426 454.355 41.535 454.246 cv
41.641 454.141 41.836 454.086 42.121 454.086 cv
42.395 454.086 42.582 454.141 42.691 454.246 cv
42.793 454.352 42.848 454.562 42.848 454.875 cv
cp
f
50.168 452.77 mo
50.168 453.246 50.086 453.668 49.926 454.039 cv
49.766 454.41 49.539 454.723 49.25 454.977 cv
48.953 455.23 48.605 455.426 48.203 455.555 cv
47.797 455.687 47.348 455.75 46.855 455.75 cv
46.578 455.75 46.316 455.73 46.074 455.691 cv
45.824 455.652 45.605 455.605 45.418 455.551 cv
45.223 455.496 45.066 455.441 44.941 455.383 cv
44.816 455.332 44.738 455.289 44.707 455.254 cv
44.672 455.223 44.648 455.191 44.637 455.164 cv
44.621 455.137 44.605 455.105 44.598 455.062 cv
44.582 455.027 44.574 454.977 44.574 454.914 cv
44.566 454.855 44.566 454.785 44.566 454.703 cv
44.566 454.629 44.57 454.559 44.578 454.496 cv
44.586 454.434 44.598 454.383 44.617 454.344 cv
44.633 454.305 44.652 454.277 44.68 454.258 cv
44.703 454.242 44.734 454.234 44.766 454.23 cv
44.813 454.234 44.883 454.262 44.977 454.316 cv
45.07 454.375 45.199 454.437 45.363 454.504 cv
45.527 454.57 45.727 454.633 45.969 454.691 cv
46.203 454.75 46.488 454.777 46.824 454.777 cv
47.125 454.777 47.406 454.742 47.664 454.668 cv
47.918 454.598 48.141 454.484 48.328 454.328 cv
48.512 454.176 48.656 453.98 48.762 453.742 cv
48.867 453.508 48.918 453.219 48.922 452.879 cv
48.918 452.598 48.875 452.348 48.785 452.129 cv
48.695 451.91 48.559 451.73 48.375 451.586 cv
48.188 451.445 47.953 451.34 47.672 451.266 cv
47.387 451.195 47.047 451.156 46.66 451.156 cv
46.375 451.156 46.137 451.172 45.938 451.199 cv
45.734 451.23 45.547 451.246 45.375 451.242 cv
45.246 451.246 45.152 451.215 45.102 451.152 cv
45.043 451.094 45.016 450.98 45.02 450.809 cv
45.02 447.195 li
45.016 447.047 45.051 446.937 45.125 446.859 cv
45.191 446.789 45.293 446.75 45.43 446.75 cv
49.359 446.75 li
49.395 446.75 49.43 446.762 49.465 446.781 cv
49.496 446.805 49.523 446.836 49.551 446.875 cv
49.57 446.918 49.586 446.969 49.602 447.031 cv
49.609 447.098 49.617 447.176 49.621 447.258 cv
49.617 447.426 49.594 447.551 49.555 447.641 cv
49.508 447.734 49.449 447.781 49.371 447.777 cv
46.199 447.777 li
46.199 450.266 li
46.352 450.246 46.508 450.234 46.672 450.227 cv
46.828 450.223 47.016 450.219 47.23 450.219 cv
47.715 450.219 48.141 450.281 48.508 450.402 cv
48.871 450.523 49.176 450.695 49.426 450.914 cv
49.668 451.141 49.855 451.406 49.98 451.719 cv
50.105 452.035 50.168 452.387 50.168 452.77 cv
cp
f
33.199 388.898 mo
50.926 388.898 li
50.926 405.988 li
33.199 405.988 li
cp
0 0 0 0 cmyk
ef
39.484 399.754 mo
39.48 400.164 39.41 400.531 39.27 400.855 cv
39.125 401.184 38.922 401.465 38.66 401.695 cv
38.395 401.93 38.066 402.105 37.68 402.23 cv
37.289 402.355 36.852 402.418 36.367 402.418 cv
36.063 402.418 35.785 402.391 35.531 402.344 cv
35.27 402.297 35.039 402.246 34.844 402.176 cv
34.641 402.113 34.477 402.043 34.344 401.973 cv
34.211 401.902 34.125 401.852 34.094 401.816 cv
34.055 401.789 34.031 401.758 34.016 401.723 cv
33.996 401.691 33.977 401.652 33.965 401.605 cv
33.949 401.562 33.941 401.508 33.934 401.437 cv
33.926 401.375 33.922 401.293 33.926 401.191 cv
33.922 401.031 33.938 400.918 33.973 400.852 cv
34.004 400.789 34.051 400.754 34.113 400.754 cv
34.156 400.754 34.238 400.793 34.363 400.863 cv
34.484 400.941 34.645 401.02 34.84 401.102 cv
35.031 401.187 35.258 401.266 35.523 401.336 cv
35.781 401.41 36.074 401.445 36.395 401.445 cv
36.703 401.445 36.973 401.406 37.211 401.328 cv
37.441 401.25 37.641 401.141 37.801 401 cv
37.957 400.859 38.074 400.691 38.156 400.496 cv
38.234 400.301 38.273 400.09 38.277 399.863 cv
38.273 399.613 38.223 399.387 38.125 399.184 cv
38.02 398.984 37.871 398.812 37.68 398.664 cv
37.48 398.52 37.242 398.406 36.957 398.328 cv
36.672 398.25 36.348 398.211 35.984 398.211 cv
35.113 398.211 li
35.07 398.211 35.035 398.203 35 398.187 cv
34.965 398.172 34.934 398.145 34.91 398.105 cv
34.883 398.07 34.863 398.023 34.848 397.965 cv
34.832 397.906 34.824 397.828 34.824 397.73 cv
34.824 397.645 34.828 397.574 34.844 397.516 cv
34.852 397.461 34.871 397.414 34.902 397.379 cv
34.926 397.344 34.957 397.32 34.988 397.301 cv
35.02 397.289 35.055 397.281 35.098 397.277 cv
35.871 397.277 li
36.172 397.281 36.441 397.242 36.684 397.16 cv
36.918 397.086 37.121 396.973 37.293 396.824 cv
37.457 396.68 37.586 396.504 37.676 396.301 cv
37.766 396.098 37.813 395.871 37.813 395.617 cv
37.813 395.437 37.781 395.262 37.723 395.094 cv
37.66 394.93 37.57 394.785 37.453 394.66 cv
37.332 394.535 37.18 394.437 37 394.367 cv
36.813 394.297 36.602 394.262 36.359 394.262 cv
36.094 394.262 35.848 394.305 35.629 394.383 cv
35.402 394.465 35.207 394.551 35.035 394.641 cv
34.859 394.734 34.715 394.82 34.602 394.898 cv
34.488 394.98 34.406 395.02 34.363 395.016 cv
34.328 395.02 34.301 395.012 34.277 395 cv
34.25 394.988 34.23 394.965 34.215 394.93 cv
34.199 394.898 34.188 394.852 34.18 394.785 cv
34.172 394.727 34.168 394.645 34.172 394.543 cv
34.168 394.477 34.168 394.418 34.176 394.363 cv
34.176 394.312 34.188 394.266 34.203 394.223 cv
34.219 394.187 34.234 394.152 34.254 394.117 cv
34.27 394.09 34.301 394.051 34.344 394.004 cv
34.387 393.961 34.473 393.898 34.609 393.816 cv
34.738 393.734 34.902 393.656 35.098 393.574 cv
35.289 393.496 35.512 393.426 35.77 393.371 cv
36.02 393.316 36.293 393.289 36.59 393.289 cv
36.996 393.289 37.359 393.344 37.672 393.445 cv
37.984 393.555 38.242 393.703 38.453 393.891 cv
38.656 394.086 38.813 394.316 38.918 394.582 cv
39.02 394.852 39.07 395.145 39.074 395.469 cv
39.07 395.75 39.035 396.012 38.965 396.246 cv
38.891 396.488 38.781 396.699 38.641 396.883 cv
38.496 397.07 38.324 397.227 38.121 397.355 cv
37.914 397.488 37.676 397.582 37.406 397.629 cv
37.406 397.641 li
37.711 397.676 37.992 397.75 38.246 397.871 cv
38.5 397.992 38.719 398.145 38.902 398.328 cv
39.082 398.512 39.223 398.727 39.328 398.969 cv
39.43 399.215 39.48 399.477 39.484 399.754 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
42.848 401.543 mo
42.848 401.871 42.793 402.086 42.688 402.191 cv
42.578 402.297 42.383 402.348 42.102 402.352 cv
41.824 402.348 41.633 402.297 41.531 402.195 cv
41.422 402.09 41.371 401.879 41.375 401.562 cv
41.371 401.238 41.426 401.023 41.535 400.914 cv
41.641 400.809 41.836 400.754 42.121 400.754 cv
42.395 400.754 42.582 400.809 42.691 400.914 cv
42.793 401.02 42.848 401.23 42.848 401.543 cv
cp
f
50.504 397.832 mo
50.5 398.516 50.449 399.137 50.344 399.699 cv
50.234 400.262 50.055 400.746 49.809 401.148 cv
49.555 401.555 49.227 401.867 48.828 402.086 cv
48.422 402.309 47.93 402.418 47.344 402.418 cv
46.785 402.418 46.313 402.32 45.934 402.121 cv
45.551 401.926 45.246 401.633 45.012 401.246 cv
44.777 400.859 44.609 400.387 44.516 399.82 cv
44.414 399.258 44.367 398.609 44.367 397.875 cv
44.367 397.203 44.422 396.582 44.531 396.016 cv
44.641 395.453 44.816 394.969 45.066 394.562 cv
45.309 394.16 45.633 393.848 46.039 393.621 cv
46.438 393.402 46.934 393.289 47.523 393.289 cv
48.082 393.289 48.555 393.391 48.938 393.586 cv
49.32 393.789 49.625 394.082 49.859 394.465 cv
50.09 394.855 50.258 395.328 50.355 395.891 cv
50.453 396.453 50.5 397.102 50.504 397.832 cv
cp
49.297 397.914 mo
49.293 397.473 49.277 397.074 49.25 396.723 cv
49.215 396.371 49.168 396.062 49.109 395.793 cv
49.043 395.523 48.965 395.293 48.867 395.098 cv
48.77 394.906 48.652 394.746 48.516 394.617 cv
48.375 394.492 48.215 394.398 48.043 394.34 cv
47.863 394.285 47.668 394.258 47.453 394.254 cv
47.063 394.258 46.746 394.348 46.508 394.531 cv
46.262 394.715 46.07 394.969 45.934 395.285 cv
45.793 395.605 45.699 395.977 45.648 396.406 cv
45.598 396.836 45.574 397.301 45.574 397.793 cv
45.574 398.457 45.605 399.02 45.676 399.48 cv
45.742 399.949 45.852 400.328 46.004 400.617 cv
46.148 400.914 46.34 401.125 46.57 401.254 cv
46.801 401.391 47.082 401.457 47.414 401.453 cv
47.668 401.457 47.891 401.418 48.086 401.332 cv
48.277 401.254 48.445 401.133 48.586 400.977 cv
48.727 400.824 48.84 400.641 48.934 400.426 cv
49.02 400.211 49.094 399.973 49.152 399.711 cv
49.203 399.453 49.242 399.172 49.266 398.867 cv
49.285 398.562 49.293 398.246 49.297 397.914 cv
cp
f
33.199 335.602 mo
50.926 335.602 li
50.926 352.692 li
33.199 352.692 li
cp
0 0 0 0 cmyk
ef
39.93 346.457 mo
39.926 346.609 39.902 346.73 39.859 346.816 cv
39.813 346.906 39.75 346.949 39.668 346.945 cv
38.668 346.945 li
38.668 348.809 li
38.668 348.848 38.656 348.879 38.641 348.902 cv
38.617 348.93 38.586 348.949 38.543 348.969 cv
38.492 348.984 38.43 348.996 38.359 349.008 cv
38.281 349.016 38.188 349.02 38.07 349.023 cv
37.953 349.02 37.855 349.016 37.785 349.008 cv
37.707 348.996 37.648 348.984 37.605 348.969 cv
37.559 348.949 37.527 348.93 37.512 348.902 cv
37.492 348.879 37.484 348.848 37.488 348.809 cv
37.488 346.945 li
33.859 346.945 li
33.801 346.949 33.758 346.941 33.723 346.926 cv
33.688 346.914 33.652 346.887 33.625 346.848 cv
33.594 346.812 33.574 346.762 33.563 346.691 cv
33.551 346.625 33.547 346.535 33.547 346.422 cv
33.547 346.34 33.547 346.262 33.555 346.191 cv
33.555 346.121 33.566 346.059 33.582 346.004 cv
33.594 345.949 33.609 345.895 33.637 345.84 cv
33.656 345.785 33.684 345.73 33.719 345.668 cv
36.879 340.281 li
36.898 340.246 36.934 340.215 36.98 340.187 cv
37.023 340.16 37.078 340.137 37.152 340.117 cv
37.219 340.102 37.305 340.09 37.41 340.078 cv
37.512 340.074 37.633 340.07 37.773 340.066 cv
37.922 340.07 38.059 340.074 38.176 340.086 cv
38.289 340.098 38.379 340.113 38.453 340.129 cv
38.52 340.148 38.574 340.172 38.613 340.203 cv
38.648 340.234 38.668 340.27 38.668 340.309 cv
38.668 345.973 li
39.668 345.973 li
39.742 345.977 39.805 346.016 39.855 346.094 cv
39.902 346.176 39.926 346.297 39.93 346.457 cv
cp
37.488 341.105 mo
37.477 341.105 li
34.625 345.973 li
37.488 345.973 li
cp
.629114 .553033 .543389 .289647 cmyk
f
42.848 348.234 mo
42.848 348.562 42.793 348.777 42.688 348.883 cv
42.578 348.988 42.383 349.039 42.102 349.043 cv
41.824 349.039 41.633 348.988 41.531 348.887 cv
41.422 348.781 41.371 348.57 41.375 348.254 cv
41.371 347.93 41.426 347.715 41.535 347.605 cv
41.641 347.5 41.836 347.445 42.121 347.445 cv
42.395 347.445 42.582 347.5 42.691 347.605 cv
42.793 347.711 42.848 347.922 42.848 348.234 cv
cp
f
50.168 346.129 mo
50.168 346.605 50.086 347.027 49.926 347.398 cv
49.766 347.77 49.539 348.082 49.25 348.336 cv
48.953 348.59 48.605 348.785 48.203 348.914 cv
47.797 349.047 47.348 349.109 46.855 349.109 cv
46.578 349.109 46.316 349.09 46.074 349.051 cv
45.824 349.012 45.605 348.965 45.418 348.91 cv
45.223 348.855 45.066 348.801 44.941 348.742 cv
44.816 348.691 44.738 348.648 44.707 348.613 cv
44.672 348.582 44.648 348.551 44.637 348.523 cv
44.621 348.496 44.605 348.465 44.598 348.422 cv
44.582 348.387 44.574 348.336 44.574 348.273 cv
44.566 348.215 44.566 348.145 44.566 348.062 cv
44.566 347.988 44.57 347.918 44.578 347.855 cv
44.586 347.793 44.598 347.742 44.617 347.703 cv
44.633 347.664 44.652 347.637 44.68 347.617 cv
44.703 347.602 44.734 347.594 44.766 347.59 cv
44.813 347.594 44.883 347.621 44.977 347.676 cv
45.07 347.734 45.199 347.797 45.363 347.863 cv
45.527 347.93 45.727 347.992 45.969 348.051 cv
46.203 348.109 46.488 348.137 46.824 348.137 cv
47.125 348.137 47.406 348.102 47.664 348.027 cv
47.918 347.957 48.141 347.844 48.328 347.687 cv
48.512 347.535 48.656 347.34 48.762 347.102 cv
48.867 346.867 48.918 346.578 48.922 346.238 cv
48.918 345.957 48.875 345.707 48.785 345.488 cv
48.695 345.27 48.559 345.09 48.375 344.945 cv
48.188 344.805 47.953 344.699 47.672 344.625 cv
47.387 344.555 47.047 344.516 46.66 344.516 cv
46.375 344.516 46.137 344.531 45.938 344.559 cv
45.734 344.59 45.547 344.605 45.375 344.602 cv
45.246 344.605 45.152 344.574 45.102 344.512 cv
45.043 344.453 45.016 344.34 45.02 344.168 cv
45.02 340.555 li
45.016 340.406 45.051 340.297 45.125 340.219 cv
45.191 340.148 45.293 340.109 45.43 340.109 cv
49.359 340.109 li
49.395 340.109 49.43 340.121 49.465 340.141 cv
49.496 340.164 49.523 340.195 49.551 340.234 cv
49.57 340.277 49.586 340.328 49.602 340.391 cv
49.609 340.457 49.617 340.535 49.621 340.617 cv
49.617 340.785 49.594 340.91 49.555 341 cv
49.508 341.094 49.449 341.141 49.371 341.137 cv
46.199 341.137 li
46.199 343.625 li
46.352 343.605 46.508 343.594 46.672 343.586 cv
46.828 343.582 47.016 343.578 47.23 343.578 cv
47.715 343.578 48.141 343.641 48.508 343.762 cv
48.871 343.883 49.176 344.055 49.426 344.273 cv
49.668 344.5 49.855 344.766 49.98 345.078 cv
50.105 345.395 50.168 345.746 50.168 346.129 cv
cp
f
33.199 282.289 mo
50.926 282.289 li
50.926 299.379 li
33.199 299.379 li
cp
0 0 0 0 cmyk
ef
39.781 292.789 mo
39.781 293.18 39.719 293.559 39.602 293.918 cv
39.477 294.285 39.293 294.602 39.051 294.875 cv
38.801 295.152 38.488 295.375 38.113 295.539 cv
37.73 295.707 37.285 295.789 36.77 295.789 cv
36.398 295.789 36.07 295.746 35.789 295.652 cv
35.504 295.566 35.258 295.434 35.047 295.262 cv
34.836 295.094 34.66 294.887 34.523 294.641 cv
34.383 294.395 34.27 294.113 34.188 293.797 cv
34.102 293.484 34.043 293.141 34.008 292.762 cv
33.969 292.391 33.949 291.988 33.953 291.555 cv
33.949 291.176 33.969 290.793 34.012 290.402 cv
34.051 290.02 34.125 289.645 34.23 289.277 cv
34.336 288.918 34.48 288.578 34.66 288.262 cv
34.84 287.945 35.066 287.668 35.34 287.434 cv
35.613 287.199 35.938 287.012 36.316 286.871 cv
36.695 286.734 37.137 286.668 37.641 286.664 cv
37.809 286.668 37.98 286.676 38.152 286.695 cv
38.324 286.719 38.484 286.75 38.633 286.781 cv
38.781 286.82 38.902 286.855 39.004 286.895 cv
39.102 286.934 39.168 286.969 39.203 286.992 cv
39.23 287.02 39.254 287.047 39.273 287.074 cv
39.289 287.105 39.305 287.137 39.313 287.172 cv
39.32 287.207 39.324 287.246 39.332 287.289 cv
39.332 287.332 39.336 287.387 39.34 287.449 cv
39.336 287.535 39.336 287.605 39.336 287.66 cv
39.332 287.723 39.32 287.77 39.309 287.805 cv
39.289 287.844 39.27 287.871 39.246 287.887 cv
39.219 287.906 39.188 287.914 39.148 287.914 cv
39.098 287.914 39.027 287.898 38.941 287.867 cv
38.852 287.836 38.746 287.801 38.625 287.758 cv
38.5 287.723 38.352 287.687 38.176 287.652 cv
38 287.625 37.797 287.609 37.566 287.605 cv
37.137 287.609 36.77 287.695 36.465 287.867 cv
36.16 288.039 35.91 288.273 35.715 288.566 cv
35.52 288.859 35.375 289.199 35.285 289.582 cv
35.188 289.973 35.133 290.375 35.125 290.793 cv
35.242 290.727 35.379 290.66 35.527 290.59 cv
35.676 290.523 35.836 290.461 36.012 290.402 cv
36.188 290.352 36.375 290.305 36.57 290.27 cv
36.766 290.238 36.977 290.223 37.203 290.219 cv
37.68 290.223 38.082 290.289 38.414 290.414 cv
38.742 290.547 39.008 290.727 39.215 290.957 cv
39.414 291.187 39.559 291.457 39.648 291.77 cv
39.734 292.082 39.781 292.422 39.781 292.789 cv
cp
38.586 292.898 mo
38.586 292.637 38.559 292.395 38.508 292.176 cv
38.453 291.961 38.363 291.777 38.242 291.621 cv
38.117 291.473 37.953 291.355 37.75 291.273 cv
37.539 291.191 37.285 291.148 36.988 291.148 cv
36.816 291.148 36.648 291.164 36.48 291.195 cv
36.309 291.227 36.145 291.27 35.988 291.316 cv
35.828 291.371 35.68 291.434 35.539 291.504 cv
35.395 291.578 35.262 291.652 35.145 291.73 cv
35.141 292.324 35.18 292.82 35.258 293.215 cv
35.332 293.613 35.441 293.93 35.586 294.168 cv
35.73 294.41 35.91 294.582 36.125 294.684 cv
36.34 294.789 36.59 294.84 36.879 294.836 cv
37.168 294.84 37.422 294.785 37.637 294.672 cv
37.852 294.566 38.027 294.418 38.172 294.23 cv
38.313 294.047 38.418 293.84 38.484 293.609 cv
38.551 293.379 38.586 293.145 38.586 292.898 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
42.848 294.914 mo
42.848 295.242 42.793 295.457 42.688 295.562 cv
42.578 295.668 42.383 295.719 42.102 295.723 cv
41.824 295.719 41.633 295.668 41.531 295.566 cv
41.422 295.461 41.371 295.25 41.375 294.934 cv
41.371 294.609 41.426 294.395 41.535 294.285 cv
41.641 294.18 41.836 294.125 42.121 294.125 cv
42.395 294.125 42.582 294.18 42.691 294.285 cv
42.793 294.391 42.848 294.602 42.848 294.914 cv
cp
f
50.504 291.203 mo
50.5 291.887 50.449 292.508 50.344 293.07 cv
50.234 293.633 50.055 294.117 49.809 294.52 cv
49.555 294.926 49.227 295.238 48.828 295.457 cv
48.422 295.68 47.93 295.789 47.344 295.789 cv
46.785 295.789 46.313 295.691 45.934 295.492 cv
45.551 295.297 45.246 295.004 45.012 294.617 cv
44.777 294.23 44.609 293.758 44.516 293.191 cv
44.414 292.629 44.367 291.98 44.367 291.246 cv
44.367 290.574 44.422 289.953 44.531 289.387 cv
44.641 288.824 44.816 288.34 45.066 287.934 cv
45.309 287.531 45.633 287.219 46.039 286.992 cv
46.438 286.773 46.934 286.66 47.523 286.66 cv
48.082 286.66 48.555 286.762 48.938 286.957 cv
49.32 287.16 49.625 287.453 49.859 287.836 cv
50.09 288.227 50.258 288.699 50.355 289.262 cv
50.453 289.824 50.5 290.473 50.504 291.203 cv
cp
49.297 291.285 mo
49.293 290.844 49.277 290.445 49.25 290.094 cv
49.215 289.742 49.168 289.434 49.109 289.164 cv
49.043 288.895 48.965 288.664 48.867 288.469 cv
48.77 288.277 48.652 288.117 48.516 287.988 cv
48.375 287.863 48.215 287.77 48.043 287.711 cv
47.863 287.656 47.668 287.629 47.453 287.625 cv
47.063 287.629 46.746 287.719 46.508 287.902 cv
46.262 288.086 46.07 288.34 45.934 288.656 cv
45.793 288.977 45.699 289.348 45.648 289.777 cv
45.598 290.207 45.574 290.672 45.574 291.164 cv
45.574 291.828 45.605 292.391 45.676 292.852 cv
45.742 293.32 45.852 293.699 46.004 293.988 cv
46.148 294.285 46.34 294.496 46.57 294.625 cv
46.801 294.762 47.082 294.828 47.414 294.824 cv
47.668 294.828 47.891 294.789 48.086 294.703 cv
48.277 294.625 48.445 294.504 48.586 294.348 cv
48.727 294.195 48.84 294.012 48.934 293.797 cv
49.02 293.582 49.094 293.344 49.152 293.082 cv
49.203 292.824 49.242 292.543 49.266 292.238 cv
49.285 291.934 49.293 291.617 49.297 291.285 cv
cp
f
33.199 228.98 mo
50.926 228.98 li
50.926 246.07 li
33.199 246.07 li
cp
0 0 0 0 cmyk
ef
39.684 233.988 mo
39.68 234.074 39.676 234.148 39.672 234.211 cv
39.664 234.281 39.656 234.344 39.645 234.402 cv
39.633 234.469 39.617 234.527 39.598 234.582 cv
39.574 234.641 39.551 234.703 39.527 234.762 cv
36.332 242.125 li
36.305 242.184 36.277 242.227 36.246 242.258 cv
36.211 242.293 36.168 242.32 36.113 242.34 cv
36.059 242.359 35.988 242.371 35.91 242.383 cv
35.824 242.387 35.727 242.391 35.609 242.395 cv
35.453 242.391 35.332 242.383 35.246 242.371 cv
35.16 242.355 35.098 242.34 35.059 242.309 cv
35.02 242.281 35 242.242 35.008 242.199 cv
35.008 242.156 35.023 242.105 35.055 242.043 cv
38.414 234.516 li
34.156 234.516 li
34.07 234.52 34.004 234.473 33.961 234.379 cv
33.918 234.289 33.898 234.16 33.898 233.996 cv
33.898 233.91 33.902 233.836 33.914 233.77 cv
33.926 233.707 33.941 233.652 33.965 233.609 cv
33.984 233.566 34.012 233.535 34.047 233.512 cv
34.078 233.492 34.117 233.48 34.156 233.48 cv
39.328 233.48 li
39.387 233.48 39.441 233.488 39.492 233.504 cv
39.539 233.52 39.574 233.547 39.602 233.586 cv
39.625 233.625 39.645 233.68 39.66 233.742 cv
39.672 233.809 39.68 233.891 39.684 233.988 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
42.848 241.605 mo
42.848 241.934 42.793 242.148 42.688 242.254 cv
42.578 242.359 42.383 242.41 42.102 242.414 cv
41.824 242.41 41.633 242.359 41.531 242.258 cv
41.422 242.152 41.371 241.941 41.375 241.625 cv
41.371 241.301 41.426 241.086 41.535 240.977 cv
41.641 240.871 41.836 240.816 42.121 240.816 cv
42.395 240.816 42.582 240.871 42.691 240.977 cv
42.793 241.082 42.848 241.293 42.848 241.605 cv
cp
f
50.168 239.5 mo
50.168 239.977 50.086 240.398 49.926 240.77 cv
49.766 241.141 49.539 241.453 49.25 241.707 cv
48.953 241.961 48.605 242.156 48.203 242.285 cv
47.797 242.418 47.348 242.48 46.855 242.48 cv
46.578 242.48 46.316 242.461 46.074 242.422 cv
45.824 242.383 45.605 242.336 45.418 242.281 cv
45.223 242.227 45.066 242.172 44.941 242.113 cv
44.816 242.062 44.738 242.02 44.707 241.984 cv
44.672 241.953 44.648 241.922 44.637 241.895 cv
44.621 241.867 44.605 241.836 44.598 241.793 cv
44.582 241.758 44.574 241.707 44.574 241.645 cv
44.566 241.586 44.566 241.516 44.566 241.434 cv
44.566 241.359 44.57 241.289 44.578 241.227 cv
44.586 241.164 44.598 241.113 44.617 241.074 cv
44.633 241.035 44.652 241.008 44.68 240.988 cv
44.703 240.973 44.734 240.965 44.766 240.961 cv
44.813 240.965 44.883 240.992 44.977 241.047 cv
45.07 241.105 45.199 241.168 45.363 241.234 cv
45.527 241.301 45.727 241.363 45.969 241.422 cv
46.203 241.48 46.488 241.508 46.824 241.508 cv
47.125 241.508 47.406 241.473 47.664 241.398 cv
47.918 241.328 48.141 241.215 48.328 241.059 cv
48.512 240.906 48.656 240.711 48.762 240.473 cv
48.867 240.238 48.918 239.949 48.922 239.609 cv
48.918 239.328 48.875 239.078 48.785 238.859 cv
48.695 238.641 48.559 238.461 48.375 238.316 cv
48.188 238.176 47.953 238.07 47.672 237.996 cv
47.387 237.926 47.047 237.887 46.66 237.887 cv
46.375 237.887 46.137 237.902 45.938 237.93 cv
45.734 237.961 45.547 237.977 45.375 237.973 cv
45.246 237.977 45.152 237.945 45.102 237.883 cv
45.043 237.824 45.016 237.711 45.02 237.539 cv
45.02 233.926 li
45.016 233.777 45.051 233.668 45.125 233.59 cv
45.191 233.52 45.293 233.48 45.43 233.48 cv
49.359 233.48 li
49.395 233.48 49.43 233.492 49.465 233.512 cv
49.496 233.535 49.523 233.566 49.551 233.605 cv
49.57 233.648 49.586 233.699 49.602 233.762 cv
49.609 233.828 49.617 233.906 49.621 233.988 cv
49.617 234.156 49.594 234.281 49.555 234.371 cv
49.508 234.465 49.449 234.512 49.371 234.508 cv
46.199 234.508 li
46.199 236.996 li
46.352 236.977 46.508 236.965 46.672 236.957 cv
46.828 236.953 47.016 236.949 47.23 236.949 cv
47.715 236.949 48.141 237.012 48.508 237.133 cv
48.871 237.254 49.176 237.426 49.426 237.645 cv
49.668 237.871 49.855 238.137 49.98 238.449 cv
50.105 238.766 50.168 239.117 50.168 239.5 cv
cp
f
33.199 175.68 mo
50.926 175.68 li
50.926 192.77 li
33.199 192.77 li
cp
0 0 0 0 cmyk
ef
39.633 184.258 mo
39.629 184.645 39.605 185.035 39.563 185.426 cv
39.516 185.82 39.438 186.199 39.328 186.562 cv
39.215 186.926 39.066 187.266 38.887 187.586 cv
38.699 187.906 38.469 188.187 38.188 188.422 cv
37.906 188.664 37.57 188.848 37.184 188.98 cv
36.797 189.113 36.348 189.18 35.836 189.18 cv
35.637 189.18 35.445 189.164 35.262 189.141 cv
35.074 189.113 34.906 189.086 34.762 189.051 cv
34.609 189.016 34.484 188.977 34.387 188.934 cv
34.281 188.895 34.207 188.855 34.164 188.812 cv
34.117 188.773 34.086 188.719 34.066 188.645 cv
34.043 188.574 34.031 188.477 34.035 188.355 cv
34.031 188.258 34.035 188.18 34.043 188.117 cv
34.047 188.062 34.059 188.016 34.074 187.98 cv
34.09 187.949 34.109 187.926 34.133 187.914 cv
34.156 187.906 34.188 187.902 34.227 187.898 cv
34.277 187.902 34.348 187.918 34.441 187.949 cv
34.531 187.984 34.645 188.023 34.785 188.062 cv
34.922 188.105 35.086 188.145 35.277 188.176 cv
35.461 188.215 35.672 188.23 35.91 188.227 cv
36.352 188.23 36.734 188.145 37.055 187.969 cv
37.371 187.801 37.629 187.57 37.832 187.281 cv
38.031 186.992 38.184 186.66 38.285 186.277 cv
38.383 185.902 38.438 185.5 38.453 185.074 cv
38.203 185.219 37.914 185.344 37.578 185.453 cv
37.238 185.562 36.848 185.617 36.41 185.617 cv
35.914 185.617 35.5 185.551 35.164 185.414 cv
34.828 185.281 34.559 185.098 34.355 184.863 cv
34.152 184.633 34.004 184.355 33.914 184.031 cv
33.824 183.715 33.781 183.363 33.781 182.98 cv
33.781 182.59 33.836 182.219 33.953 181.859 cv
34.063 181.508 34.242 181.195 34.488 180.922 cv
34.727 180.656 35.035 180.441 35.414 180.277 cv
35.789 180.121 36.238 180.039 36.762 180.035 cv
37.133 180.039 37.461 180.086 37.746 180.176 cv
38.031 180.273 38.281 180.41 38.492 180.582 cv
38.703 180.762 38.879 180.973 39.027 181.219 cv
39.172 181.473 39.293 181.754 39.383 182.066 cv
39.469 182.383 39.531 182.727 39.574 183.094 cv
39.609 183.465 39.629 183.852 39.633 184.258 cv
cp
38.43 184.129 mo
38.426 183.543 38.387 183.051 38.313 182.648 cv
38.234 182.25 38.121 181.926 37.973 181.676 cv
37.816 181.43 37.633 181.25 37.414 181.141 cv
37.195 181.031 36.941 180.977 36.652 180.977 cv
36.355 180.977 36.102 181.031 35.891 181.137 cv
35.68 181.246 35.504 181.391 35.371 181.57 cv
35.23 181.754 35.133 181.957 35.07 182.184 cv
35.008 182.414 34.977 182.652 34.977 182.891 cv
34.977 183.164 35.004 183.41 35.063 183.633 cv
35.117 183.859 35.211 184.051 35.34 184.203 cv
35.465 184.363 35.629 184.484 35.84 184.566 cv
36.043 184.652 36.301 184.691 36.605 184.691 cv
36.949 184.691 37.281 184.641 37.602 184.539 cv
37.922 184.437 38.195 184.301 38.43 184.129 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
42.805 188.301 mo
42.801 188.629 42.746 188.848 42.645 188.953 cv
42.535 189.059 42.34 189.109 42.059 189.113 cv
41.777 189.109 41.586 189.059 41.484 188.957 cv
41.375 188.852 41.324 188.641 41.328 188.324 cv
41.324 188 41.379 187.785 41.488 187.676 cv
41.598 187.57 41.793 187.516 42.078 187.512 cv
42.352 187.516 42.543 187.57 42.648 187.672 cv
42.75 187.781 42.801 187.988 42.805 188.301 cv
cp
f
50.52 184.586 mo
50.516 185.27 50.461 185.895 50.355 186.457 cv
50.246 187.023 50.07 187.508 49.82 187.91 cv
49.57 188.316 49.242 188.629 48.844 188.848 cv
48.438 189.07 47.941 189.18 47.355 189.18 cv
46.793 189.18 46.324 189.082 45.941 188.883 cv
45.559 188.684 45.25 188.391 45.016 188.004 cv
44.781 187.617 44.613 187.141 44.52 186.574 cv
44.418 186.012 44.371 185.363 44.375 184.629 cv
44.371 183.953 44.426 183.332 44.539 182.766 cv
44.645 182.199 44.824 181.715 45.074 181.309 cv
45.32 180.906 45.645 180.59 46.047 180.367 cv
46.449 180.148 46.941 180.039 47.531 180.035 cv
48.09 180.039 48.563 180.141 48.949 180.336 cv
49.328 180.539 49.637 180.832 49.871 181.215 cv
50.102 181.605 50.27 182.078 50.371 182.641 cv
50.469 183.207 50.516 183.855 50.52 184.586 cv
cp
49.313 184.668 mo
49.309 184.227 49.293 183.832 49.262 183.477 cv
49.227 183.125 49.18 182.812 49.121 182.543 cv
49.055 182.273 48.973 182.039 48.879 181.844 cv
48.777 181.648 48.66 181.488 48.527 181.363 cv
48.387 181.238 48.23 181.148 48.055 181.09 cv
47.879 181.035 47.684 181.008 47.465 181.004 cv
47.074 181.008 46.758 181.098 46.516 181.277 cv
46.273 181.461 46.082 181.711 45.941 182.031 cv
45.801 182.352 45.703 182.73 45.656 183.16 cv
45.602 183.594 45.578 184.055 45.582 184.547 cv
45.578 185.215 45.613 185.781 45.684 186.242 cv
45.754 186.711 45.863 187.09 46.012 187.379 cv
46.16 187.676 46.348 187.887 46.582 188.016 cv
46.809 188.152 47.09 188.219 47.422 188.215 cv
47.676 188.219 47.902 188.176 48.098 188.09 cv
48.293 188.008 48.457 187.891 48.598 187.734 cv
48.734 187.582 48.852 187.398 48.945 187.184 cv
49.035 186.969 49.109 186.73 49.168 186.469 cv
49.219 186.211 49.258 185.93 49.281 185.621 cv
49.301 185.32 49.309 185 49.313 184.668 cv
cp
f
26.109 122.371 mo
50.929 122.371 li
50.929 139.461 li
26.109 139.461 li
cp
0 0 0 0 cmyk
ef
32.465 135.254 mo
32.461 135.344 32.453 135.414 32.441 135.473 cv
32.426 135.535 32.406 135.586 32.387 135.617 cv
32.363 135.656 32.34 135.68 32.309 135.695 cv
32.277 135.711 32.246 135.719 32.219 135.719 cv
27.582 135.719 li
27.547 135.719 27.52 135.711 27.492 135.695 cv
27.465 135.68 27.438 135.656 27.414 135.617 cv
27.387 135.586 27.367 135.535 27.355 135.473 cv
27.34 135.414 27.332 135.344 27.336 135.254 cv
27.332 135.176 27.34 135.102 27.355 135.039 cv
27.367 134.98 27.383 134.934 27.406 134.895 cv
27.422 134.859 27.449 134.828 27.48 134.805 cv
27.512 134.785 27.543 134.777 27.582 134.773 cv
29.434 134.773 li
29.434 128.027 li
27.719 129.047 li
27.629 129.098 27.559 129.125 27.512 129.133 cv
27.457 129.141 27.414 129.133 27.383 129.102 cv
27.348 129.074 27.328 129.023 27.316 128.953 cv
27.305 128.887 27.297 128.801 27.301 128.691 cv
27.297 128.617 27.301 128.551 27.313 128.492 cv
27.316 128.441 27.328 128.395 27.344 128.355 cv
27.355 128.32 27.375 128.289 27.398 128.262 cv
27.422 128.234 27.453 128.207 27.5 128.18 cv
29.543 126.867 li
29.559 126.855 29.578 126.844 29.609 126.836 cv
29.633 126.828 29.668 126.82 29.715 126.809 cv
29.754 126.801 29.805 126.793 29.859 126.789 cv
29.914 126.789 29.98 126.789 30.066 126.785 cv
30.172 126.789 30.266 126.793 30.34 126.801 cv
30.41 126.809 30.465 126.824 30.512 126.84 cv
30.551 126.859 30.578 126.879 30.594 126.902 cv
30.602 126.93 30.609 126.953 30.613 126.977 cv
30.613 134.773 li
32.219 134.773 li
32.254 134.777 32.289 134.785 32.32 134.805 cv
32.352 134.828 32.375 134.859 32.398 134.895 cv
32.414 134.934 32.43 134.98 32.445 135.039 cv
32.453 135.102 32.461 135.176 32.465 135.254 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
39.855 131.262 mo
39.852 131.945 39.801 132.566 39.695 133.129 cv
39.586 133.691 39.406 134.176 39.16 134.578 cv
38.906 134.984 38.578 135.297 38.18 135.516 cv
37.773 135.738 37.281 135.848 36.695 135.848 cv
36.137 135.848 35.664 135.75 35.285 135.551 cv
34.902 135.355 34.598 135.062 34.363 134.676 cv
34.129 134.289 33.961 133.816 33.867 133.25 cv
33.766 132.687 33.719 132.039 33.719 131.305 cv
33.719 130.633 33.773 130.012 33.883 129.445 cv
33.992 128.883 34.168 128.398 34.418 127.992 cv
34.66 127.59 34.984 127.277 35.391 127.051 cv
35.789 126.832 36.285 126.719 36.875 126.719 cv
37.434 126.719 37.906 126.82 38.289 127.016 cv
38.672 127.219 38.977 127.512 39.211 127.895 cv
39.441 128.285 39.609 128.758 39.707 129.32 cv
39.805 129.883 39.852 130.531 39.855 131.262 cv
cp
38.648 131.344 mo
38.645 130.902 38.629 130.504 38.602 130.152 cv
38.566 129.801 38.52 129.492 38.461 129.223 cv
38.395 128.953 38.316 128.723 38.219 128.527 cv
38.121 128.336 38.004 128.176 37.867 128.047 cv
37.727 127.922 37.566 127.828 37.395 127.77 cv
37.215 127.715 37.02 127.687 36.805 127.684 cv
36.414 127.687 36.098 127.777 35.859 127.961 cv
35.613 128.145 35.422 128.398 35.285 128.715 cv
35.145 129.035 35.051 129.406 35 129.836 cv
34.949 130.266 34.926 130.73 34.926 131.223 cv
34.926 131.887 34.957 132.449 35.027 132.91 cv
35.094 133.379 35.203 133.758 35.355 134.047 cv
35.5 134.344 35.691 134.555 35.922 134.684 cv
36.152 134.82 36.434 134.887 36.766 134.883 cv
37.02 134.887 37.242 134.848 37.438 134.762 cv
37.629 134.684 37.797 134.562 37.938 134.406 cv
38.078 134.254 38.191 134.07 38.285 133.855 cv
38.371 133.641 38.445 133.402 38.504 133.141 cv
38.555 132.883 38.594 132.602 38.617 132.297 cv
38.637 131.992 38.645 131.676 38.648 131.344 cv
cp
f
42.785 134.973 mo
42.785 135.301 42.73 135.516 42.625 135.621 cv
42.516 135.727 42.32 135.777 42.039 135.781 cv
41.762 135.777 41.57 135.727 41.469 135.625 cv
41.359 135.52 41.309 135.309 41.313 134.992 cv
41.309 134.668 41.363 134.453 41.473 134.344 cv
41.578 134.238 41.773 134.184 42.059 134.184 cv
42.332 134.184 42.52 134.238 42.629 134.344 cv
42.73 134.449 42.785 134.66 42.785 134.973 cv
cp
f
50.148 132.867 mo
50.148 133.344 50.066 133.766 49.906 134.137 cv
49.746 134.508 49.52 134.82 49.23 135.074 cv
48.934 135.328 48.586 135.523 48.184 135.652 cv
47.777 135.785 47.328 135.848 46.836 135.848 cv
46.559 135.848 46.297 135.828 46.055 135.789 cv
45.805 135.75 45.586 135.703 45.398 135.648 cv
45.203 135.594 45.047 135.539 44.922 135.48 cv
44.797 135.43 44.719 135.387 44.688 135.352 cv
44.652 135.32 44.629 135.289 44.617 135.262 cv
44.602 135.234 44.586 135.203 44.578 135.16 cv
44.563 135.125 44.555 135.074 44.555 135.012 cv
44.547 134.953 44.547 134.883 44.547 134.801 cv
44.547 134.727 44.551 134.656 44.559 134.594 cv
44.566 134.531 44.578 134.48 44.598 134.441 cv
44.613 134.402 44.633 134.375 44.66 134.355 cv
44.684 134.34 44.715 134.332 44.746 134.328 cv
44.793 134.332 44.863 134.359 44.957 134.414 cv
45.051 134.473 45.18 134.535 45.344 134.602 cv
45.508 134.668 45.707 134.73 45.949 134.789 cv
46.184 134.848 46.469 134.875 46.805 134.875 cv
47.105 134.875 47.387 134.84 47.645 134.766 cv
47.898 134.695 48.121 134.582 48.309 134.426 cv
48.492 134.273 48.637 134.078 48.742 133.84 cv
48.848 133.605 48.898 133.316 48.902 132.977 cv
48.898 132.695 48.855 132.445 48.766 132.227 cv
48.676 132.008 48.539 131.828 48.355 131.684 cv
48.168 131.543 47.934 131.437 47.652 131.363 cv
47.367 131.293 47.027 131.254 46.641 131.254 cv
46.355 131.254 46.117 131.27 45.918 131.297 cv
45.715 131.328 45.527 131.344 45.355 131.34 cv
45.227 131.344 45.133 131.312 45.082 131.25 cv
45.023 131.191 44.996 131.078 45 130.906 cv
45 127.293 li
44.996 127.145 45.031 127.035 45.105 126.957 cv
45.172 126.887 45.273 126.848 45.41 126.848 cv
49.34 126.848 li
49.375 126.848 49.41 126.859 49.445 126.879 cv
49.477 126.902 49.504 126.934 49.531 126.973 cv
49.551 127.016 49.566 127.066 49.582 127.129 cv
49.59 127.195 49.598 127.273 49.602 127.355 cv
49.598 127.523 49.574 127.648 49.535 127.738 cv
49.488 127.832 49.43 127.879 49.352 127.875 cv
46.18 127.875 li
46.18 130.363 li
46.332 130.344 46.488 130.332 46.652 130.324 cv
46.809 130.32 46.996 130.316 47.211 130.316 cv
47.695 130.316 48.121 130.379 48.488 130.5 cv
48.852 130.621 49.156 130.793 49.406 131.012 cv
49.648 131.238 49.836 131.504 49.961 131.816 cv
50.086 132.133 50.148 132.484 50.148 132.867 cv
cp
f
26.109 69.07 mo
50.929 69.07 li
50.929 86.16 li
26.109 86.16 li
cp
0 0 0 0 cmyk
ef
32.477 81.953 mo
32.473 82.043 32.465 82.117 32.453 82.176 cv
32.438 82.238 32.418 82.289 32.398 82.32 cv
32.375 82.359 32.352 82.383 32.32 82.398 cv
32.289 82.414 32.258 82.422 32.227 82.422 cv
27.586 82.422 li
27.555 82.422 27.523 82.414 27.496 82.398 cv
27.469 82.383 27.441 82.359 27.418 82.32 cv
27.387 82.289 27.367 82.238 27.359 82.176 cv
27.344 82.117 27.34 82.043 27.34 81.953 cv
27.34 81.875 27.344 81.805 27.359 81.742 cv
27.367 81.684 27.387 81.637 27.41 81.594 cv
27.43 81.559 27.453 81.527 27.484 81.504 cv
27.512 81.484 27.547 81.473 27.586 81.473 cv
29.441 81.473 li
29.441 74.719 li
27.723 75.738 li
27.633 75.789 27.563 75.816 27.512 75.824 cv
27.457 75.832 27.418 75.824 27.387 75.793 cv
27.355 75.766 27.332 75.715 27.32 75.645 cv
27.309 75.578 27.305 75.492 27.305 75.383 cv
27.305 75.309 27.305 75.242 27.313 75.184 cv
27.316 75.133 27.328 75.086 27.344 75.047 cv
27.355 75.012 27.375 74.98 27.402 74.953 cv
27.426 74.926 27.461 74.898 27.504 74.867 cv
29.551 73.555 li
29.566 73.547 29.59 73.535 29.617 73.523 cv
29.645 73.516 29.68 73.508 29.723 73.496 cv
29.762 73.488 29.809 73.48 29.867 73.477 cv
29.918 73.477 29.988 73.477 30.07 73.473 cv
30.18 73.477 30.27 73.48 30.348 73.488 cv
30.418 73.5 30.477 73.512 30.516 73.527 cv
30.555 73.543 30.582 73.566 30.598 73.59 cv
30.613 73.617 30.621 73.641 30.621 73.668 cv
30.621 81.473 li
32.227 81.473 li
32.262 81.473 32.293 81.484 32.328 81.504 cv
32.359 81.527 32.387 81.559 32.41 81.594 cv
32.426 81.637 32.441 81.684 32.457 81.742 cv
32.465 81.805 32.473 81.875 32.477 81.953 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
39.527 81.914 mo
39.523 82 39.52 82.074 39.512 82.137 cv
39.5 82.203 39.484 82.258 39.465 82.297 cv
39.441 82.344 39.41 82.375 39.379 82.391 cv
39.34 82.414 39.305 82.422 39.27 82.422 cv
34.359 82.422 li
34.293 82.422 34.234 82.414 34.188 82.398 cv
34.137 82.383 34.098 82.359 34.066 82.32 cv
34.031 82.289 34.004 82.234 33.988 82.164 cv
33.969 82.094 33.961 82.008 33.965 81.906 cv
33.961 81.816 33.965 81.738 33.977 81.668 cv
33.98 81.602 33.996 81.539 34.023 81.484 cv
34.043 81.434 34.074 81.383 34.109 81.328 cv
34.145 81.277 34.191 81.223 34.25 81.16 cv
36.027 79.332 li
36.434 78.914 36.762 78.535 37.012 78.199 cv
37.254 77.867 37.445 77.562 37.586 77.285 cv
37.719 77.016 37.809 76.766 37.852 76.539 cv
37.891 76.312 37.91 76.102 37.914 75.906 cv
37.91 75.711 37.879 75.527 37.813 75.348 cv
37.746 75.176 37.648 75.02 37.527 74.883 cv
37.398 74.754 37.242 74.648 37.055 74.566 cv
36.863 74.492 36.648 74.453 36.406 74.449 cv
36.117 74.453 35.855 74.492 35.629 74.566 cv
35.395 74.648 35.195 74.734 35.027 74.82 cv
34.852 74.914 34.707 74.996 34.594 75.074 cv
34.477 75.152 34.391 75.191 34.336 75.191 cv
34.301 75.191 34.273 75.184 34.25 75.164 cv
34.223 75.148 34.199 75.117 34.184 75.074 cv
34.164 75.035 34.152 74.98 34.145 74.91 cv
34.137 74.84 34.133 74.758 34.133 74.66 cv
34.133 74.594 34.133 74.535 34.137 74.484 cv
34.141 74.434 34.148 74.391 34.16 74.352 cv
34.172 74.32 34.188 74.285 34.207 74.25 cv
34.223 74.223 34.258 74.184 34.316 74.133 cv
34.367 74.086 34.465 74.02 34.602 73.934 cv
34.734 73.852 34.902 73.77 35.109 73.691 cv
35.309 73.613 35.531 73.547 35.781 73.488 cv
36.023 73.437 36.281 73.41 36.555 73.406 cv
36.98 73.41 37.359 73.473 37.684 73.59 cv
38.004 73.715 38.27 73.879 38.488 74.086 cv
38.699 74.301 38.859 74.547 38.965 74.82 cv
39.07 75.102 39.125 75.398 39.125 75.711 cv
39.125 76 39.098 76.281 39.047 76.562 cv
38.996 76.844 38.891 77.148 38.727 77.477 cv
38.563 77.805 38.328 78.168 38.023 78.566 cv
37.719 78.969 37.309 79.43 36.801 79.949 cv
35.395 81.418 li
39.262 81.418 li
39.293 81.422 39.328 81.43 39.367 81.449 cv
39.398 81.473 39.43 81.504 39.457 81.543 cv
39.48 81.586 39.5 81.641 39.512 81.699 cv
39.52 81.762 39.523 81.832 39.527 81.914 cv
cp
f
42.77 81.672 mo
42.766 82 42.711 82.219 42.609 82.324 cv
42.5 82.43 42.305 82.48 42.023 82.484 cv
41.742 82.48 41.551 82.43 41.449 82.328 cv
41.34 82.223 41.289 82.012 41.293 81.695 cv
41.289 81.371 41.344 81.156 41.453 81.047 cv
41.563 80.941 41.758 80.887 42.043 80.883 cv
42.316 80.887 42.508 80.941 42.613 81.043 cv
42.715 81.152 42.766 81.359 42.77 81.672 cv
cp
f
50.484 77.957 mo
50.48 78.641 50.426 79.266 50.32 79.828 cv
50.211 80.395 50.035 80.879 49.785 81.281 cv
49.535 81.687 49.207 82 48.809 82.219 cv
48.402 82.441 47.906 82.551 47.32 82.551 cv
46.758 82.551 46.289 82.453 45.906 82.254 cv
45.523 82.055 45.215 81.762 44.98 81.375 cv
44.746 80.988 44.578 80.512 44.484 79.945 cv
44.383 79.383 44.336 78.734 44.34 78 cv
44.336 77.324 44.391 76.703 44.504 76.137 cv
44.609 75.57 44.789 75.086 45.039 74.68 cv
45.285 74.277 45.609 73.961 46.012 73.738 cv
46.414 73.52 46.906 73.41 47.496 73.406 cv
48.055 73.41 48.527 73.512 48.914 73.707 cv
49.293 73.91 49.602 74.203 49.836 74.586 cv
50.066 74.977 50.234 75.449 50.336 76.012 cv
50.434 76.578 50.48 77.227 50.484 77.957 cv
cp
49.277 78.039 mo
49.273 77.598 49.258 77.203 49.227 76.848 cv
49.191 76.496 49.145 76.184 49.086 75.914 cv
49.02 75.645 48.938 75.41 48.844 75.215 cv
48.742 75.02 48.625 74.859 48.492 74.734 cv
48.352 74.609 48.195 74.52 48.02 74.461 cv
47.844 74.406 47.648 74.379 47.43 74.375 cv
47.039 74.379 46.723 74.469 46.48 74.648 cv
46.238 74.832 46.047 75.082 45.906 75.402 cv
45.766 75.723 45.668 76.102 45.621 76.531 cv
45.566 76.965 45.543 77.426 45.547 77.918 cv
45.543 78.586 45.578 79.152 45.648 79.613 cv
45.719 80.082 45.828 80.461 45.977 80.75 cv
46.125 81.047 46.313 81.258 46.547 81.387 cv
46.773 81.523 47.055 81.59 47.387 81.586 cv
47.641 81.59 47.867 81.547 48.063 81.461 cv
48.258 81.379 48.422 81.262 48.563 81.105 cv
48.699 80.953 48.816 80.77 48.91 80.555 cv
49 80.34 49.074 80.102 49.133 79.84 cv
49.184 79.582 49.223 79.301 49.246 78.992 cv
49.266 78.691 49.273 78.371 49.277 78.039 cv
cp
f
26.109 15.762 mo
50.929 15.762 li
50.929 32.8521 li
26.109 32.8521 li
cp
0 0 0 0 cmyk
ef
32.465 28.625 mo
32.461 28.715 32.453 28.785 32.441 28.844 cv
32.426 28.906 32.406 28.957 32.387 28.988 cv
32.363 29.027 32.34 29.051 32.309 29.066 cv
32.277 29.082 32.246 29.09 32.219 29.09 cv
27.582 29.09 li
27.547 29.09 27.52 29.082 27.492 29.066 cv
27.465 29.051 27.438 29.027 27.414 28.988 cv
27.387 28.957 27.367 28.906 27.355 28.844 cv
27.34 28.785 27.332 28.715 27.336 28.625 cv
27.332 28.547 27.34 28.473 27.355 28.41 cv
27.367 28.352 27.383 28.305 27.406 28.266 cv
27.422 28.23 27.449 28.199 27.48 28.176 cv
27.512 28.156 27.543 28.148 27.582 28.145 cv
29.434 28.145 li
29.434 21.398 li
27.719 22.418 li
27.629 22.469 27.559 22.496 27.512 22.504 cv
27.457 22.512 27.414 22.504 27.383 22.473 cv
27.348 22.445 27.328 22.395 27.316 22.324 cv
27.305 22.258 27.297 22.172 27.301 22.062 cv
27.297 21.988 27.301 21.922 27.313 21.863 cv
27.316 21.812 27.328 21.766 27.344 21.727 cv
27.355 21.691 27.375 21.66 27.398 21.633 cv
27.422 21.605 27.453 21.578 27.5 21.551 cv
29.543 20.238 li
29.559 20.227 29.578 20.215 29.609 20.207 cv
29.633 20.199 29.668 20.191 29.715 20.18 cv
29.754 20.172 29.805 20.164 29.859 20.16 cv
29.914 20.16 29.98 20.16 30.066 20.156 cv
30.172 20.16 30.266 20.164 30.34 20.172 cv
30.41 20.18 30.465 20.195 30.512 20.211 cv
30.551 20.23 30.578 20.25 30.594 20.273 cv
30.602 20.301 30.609 20.324 30.613 20.348 cv
30.613 28.145 li
32.219 28.145 li
32.254 28.148 32.289 28.156 32.32 28.176 cv
32.352 28.199 32.375 28.23 32.398 28.266 cv
32.414 28.305 32.43 28.352 32.445 28.41 cv
32.453 28.473 32.461 28.547 32.465 28.625 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
39.492 26.555 mo
39.488 26.965 39.418 27.332 39.277 27.656 cv
39.133 27.984 38.93 28.266 38.668 28.496 cv
38.402 28.73 38.074 28.906 37.688 29.031 cv
37.297 29.156 36.859 29.219 36.375 29.219 cv
36.07 29.219 35.793 29.191 35.539 29.145 cv
35.277 29.098 35.047 29.047 34.852 28.977 cv
34.648 28.914 34.484 28.844 34.352 28.773 cv
34.219 28.703 34.133 28.652 34.102 28.617 cv
34.063 28.59 34.039 28.559 34.023 28.523 cv
34.004 28.492 33.984 28.453 33.973 28.406 cv
33.957 28.363 33.949 28.309 33.941 28.238 cv
33.934 28.176 33.93 28.094 33.934 27.992 cv
33.93 27.832 33.945 27.719 33.98 27.652 cv
34.012 27.59 34.059 27.555 34.121 27.555 cv
34.164 27.555 34.246 27.594 34.371 27.664 cv
34.492 27.742 34.652 27.82 34.848 27.902 cv
35.039 27.988 35.266 28.066 35.531 28.137 cv
35.789 28.211 36.082 28.246 36.402 28.246 cv
36.711 28.246 36.98 28.207 37.219 28.129 cv
37.449 28.051 37.648 27.941 37.809 27.801 cv
37.965 27.66 38.082 27.492 38.164 27.297 cv
38.242 27.102 38.281 26.891 38.285 26.664 cv
38.281 26.414 38.23 26.187 38.133 25.984 cv
38.027 25.785 37.879 25.613 37.688 25.465 cv
37.488 25.32 37.25 25.207 36.965 25.129 cv
36.68 25.051 36.355 25.012 35.992 25.012 cv
35.121 25.012 li
35.078 25.012 35.043 25.004 35.008 24.988 cv
34.973 24.973 34.941 24.945 34.918 24.906 cv
34.891 24.871 34.871 24.824 34.855 24.766 cv
34.84 24.707 34.832 24.629 34.832 24.531 cv
34.832 24.445 34.836 24.375 34.852 24.316 cv
34.859 24.262 34.879 24.215 34.91 24.18 cv
34.934 24.145 34.965 24.121 34.996 24.102 cv
35.027 24.09 35.063 24.082 35.105 24.078 cv
35.879 24.078 li
36.18 24.082 36.449 24.043 36.691 23.961 cv
36.926 23.887 37.129 23.773 37.301 23.625 cv
37.465 23.48 37.594 23.305 37.684 23.102 cv
37.773 22.898 37.82 22.672 37.82 22.418 cv
37.82 22.238 37.789 22.062 37.73 21.895 cv
37.668 21.73 37.578 21.586 37.461 21.461 cv
37.34 21.336 37.188 21.238 37.008 21.168 cv
36.82 21.098 36.609 21.062 36.367 21.062 cv
36.102 21.062 35.855 21.105 35.637 21.184 cv
35.41 21.266 35.215 21.352 35.043 21.441 cv
34.867 21.535 34.723 21.621 34.609 21.699 cv
34.496 21.781 34.414 21.82 34.371 21.816 cv
34.336 21.82 34.309 21.812 34.285 21.801 cv
34.258 21.789 34.238 21.766 34.223 21.73 cv
34.207 21.699 34.195 21.652 34.188 21.586 cv
34.18 21.527 34.176 21.445 34.18 21.344 cv
34.176 21.277 34.176 21.219 34.184 21.164 cv
34.184 21.113 34.195 21.066 34.211 21.023 cv
34.227 20.988 34.242 20.953 34.262 20.918 cv
34.277 20.891 34.309 20.852 34.352 20.805 cv
34.395 20.762 34.48 20.699 34.617 20.617 cv
34.746 20.535 34.91 20.457 35.105 20.375 cv
35.297 20.297 35.52 20.227 35.777 20.172 cv
36.027 20.117 36.301 20.09 36.598 20.09 cv
37.004 20.09 37.367 20.145 37.68 20.246 cv
37.992 20.355 38.25 20.504 38.461 20.691 cv
38.664 20.887 38.82 21.117 38.926 21.383 cv
39.027 21.652 39.078 21.945 39.082 22.27 cv
39.078 22.551 39.043 22.812 38.973 23.047 cv
38.898 23.289 38.789 23.5 38.648 23.684 cv
38.504 23.871 38.332 24.027 38.129 24.156 cv
37.922 24.289 37.684 24.383 37.414 24.43 cv
37.414 24.441 li
37.719 24.477 38 24.551 38.254 24.672 cv
38.508 24.793 38.727 24.945 38.91 25.129 cv
39.09 25.312 39.23 25.527 39.336 25.77 cv
39.438 26.016 39.488 26.277 39.492 26.555 cv
cp
f
42.785 28.344 mo
42.785 28.672 42.73 28.887 42.625 28.992 cv
42.516 29.098 42.32 29.148 42.039 29.152 cv
41.762 29.148 41.57 29.098 41.469 28.996 cv
41.359 28.891 41.309 28.68 41.313 28.363 cv
41.309 28.039 41.363 27.824 41.473 27.715 cv
41.578 27.609 41.773 27.555 42.059 27.555 cv
42.332 27.555 42.52 27.609 42.629 27.715 cv
42.73 27.82 42.785 28.031 42.785 28.344 cv
cp
f
50.148 26.238 mo
50.148 26.715 50.066 27.137 49.906 27.508 cv
49.746 27.879 49.52 28.191 49.23 28.445 cv
48.934 28.699 48.586 28.895 48.184 29.023 cv
47.777 29.156 47.328 29.219 46.836 29.219 cv
46.559 29.219 46.297 29.199 46.055 29.16 cv
45.805 29.121 45.586 29.074 45.398 29.02 cv
45.203 28.965 45.047 28.91 44.922 28.852 cv
44.797 28.801 44.719 28.758 44.688 28.723 cv
44.652 28.691 44.629 28.66 44.617 28.633 cv
44.602 28.605 44.586 28.574 44.578 28.531 cv
44.563 28.496 44.555 28.445 44.555 28.383 cv
44.547 28.324 44.547 28.254 44.547 28.172 cv
44.547 28.098 44.551 28.027 44.559 27.965 cv
44.566 27.902 44.578 27.852 44.598 27.812 cv
44.613 27.773 44.633 27.746 44.66 27.727 cv
44.684 27.711 44.715 27.703 44.746 27.699 cv
44.793 27.703 44.863 27.73 44.957 27.785 cv
45.051 27.844 45.18 27.906 45.344 27.973 cv
45.508 28.039 45.707 28.102 45.949 28.16 cv
46.184 28.219 46.469 28.246 46.805 28.246 cv
47.105 28.246 47.387 28.211 47.645 28.137 cv
47.898 28.066 48.121 27.953 48.309 27.797 cv
48.492 27.645 48.637 27.449 48.742 27.211 cv
48.848 26.977 48.898 26.687 48.902 26.348 cv
48.898 26.066 48.855 25.816 48.766 25.598 cv
48.676 25.379 48.539 25.199 48.355 25.055 cv
48.168 24.914 47.934 24.809 47.652 24.734 cv
47.367 24.664 47.027 24.625 46.641 24.625 cv
46.355 24.625 46.117 24.641 45.918 24.668 cv
45.715 24.699 45.527 24.715 45.355 24.711 cv
45.227 24.715 45.133 24.684 45.082 24.621 cv
45.023 24.562 44.996 24.449 45 24.277 cv
45 20.664 li
44.996 20.516 45.031 20.406 45.105 20.328 cv
45.172 20.258 45.273 20.219 45.41 20.219 cv
49.34 20.219 li
49.375 20.219 49.41 20.23 49.445 20.25 cv
49.477 20.273 49.504 20.305 49.531 20.344 cv
49.551 20.387 49.566 20.437 49.582 20.5 cv
49.59 20.566 49.598 20.645 49.602 20.727 cv
49.598 20.895 49.574 21.02 49.535 21.109 cv
49.488 21.203 49.43 21.25 49.352 21.246 cv
46.18 21.246 li
46.18 23.734 li
46.332 23.715 46.488 23.703 46.652 23.695 cv
46.809 23.691 46.996 23.687 47.211 23.687 cv
47.695 23.687 48.121 23.75 48.488 23.871 cv
48.852 23.992 49.156 24.164 49.406 24.383 cv
49.648 24.609 49.836 24.875 49.961 25.187 cv
50.086 25.504 50.148 25.855 50.148 26.238 cv
cp
f
66.734 526.672 mo
66.73 526.762 66.723 526.832 66.711 526.891 cv
66.695 526.953 66.676 527.004 66.656 527.035 cv
66.633 527.074 66.609 527.098 66.578 527.113 cv
66.547 527.129 66.516 527.137 66.488 527.137 cv
61.852 527.137 li
61.816 527.137 61.789 527.129 61.762 527.113 cv
61.734 527.098 61.707 527.074 61.684 527.035 cv
61.656 527.004 61.637 526.953 61.625 526.891 cv
61.609 526.832 61.602 526.762 61.605 526.672 cv
61.602 526.594 61.609 526.52 61.625 526.457 cv
61.637 526.398 61.652 526.352 61.676 526.312 cv
61.691 526.277 61.719 526.246 61.75 526.223 cv
61.781 526.203 61.813 526.195 61.852 526.191 cv
63.703 526.191 li
63.703 519.445 li
61.988 520.465 li
61.898 520.516 61.828 520.543 61.781 520.551 cv
61.727 520.559 61.684 520.551 61.652 520.52 cv
61.617 520.492 61.598 520.441 61.586 520.371 cv
61.574 520.305 61.566 520.219 61.57 520.109 cv
61.566 520.035 61.57 519.969 61.582 519.91 cv
61.586 519.859 61.598 519.812 61.613 519.773 cv
61.625 519.738 61.645 519.707 61.668 519.68 cv
61.691 519.652 61.723 519.625 61.77 519.598 cv
63.813 518.285 li
63.828 518.273 63.848 518.262 63.879 518.254 cv
63.902 518.246 63.938 518.238 63.984 518.227 cv
64.023 518.219 64.074 518.211 64.129 518.207 cv
64.184 518.207 64.25 518.207 64.336 518.203 cv
64.441 518.207 64.535 518.211 64.609 518.219 cv
64.68 518.227 64.734 518.242 64.781 518.258 cv
64.82 518.277 64.848 518.297 64.863 518.32 cv
64.871 518.348 64.879 518.371 64.883 518.395 cv
64.883 526.191 li
66.488 526.191 li
66.523 526.195 66.559 526.203 66.59 526.223 cv
66.621 526.246 66.645 526.277 66.668 526.312 cv
66.684 526.352 66.699 526.398 66.715 526.457 cv
66.723 526.52 66.73 526.594 66.734 526.672 cv
cp
f
136.586 526.629 mo
136.582 526.715 136.578 526.789 136.566 526.852 cv
136.555 526.918 136.539 526.973 136.52 527.012 cv
136.496 527.059 136.469 527.09 136.438 527.105 cv
136.402 527.129 136.363 527.137 136.324 527.137 cv
131.422 527.137 li
131.359 527.137 131.301 527.129 131.254 527.113 cv
131.203 527.098 131.164 527.074 131.129 527.035 cv
131.094 527.004 131.066 526.949 131.055 526.879 cv
131.035 526.809 131.027 526.723 131.031 526.621 cv
131.027 526.531 131.031 526.453 131.039 526.383 cv
131.043 526.316 131.059 526.258 131.086 526.203 cv
131.109 526.152 131.141 526.098 131.176 526.043 cv
131.211 525.992 131.254 525.937 131.313 525.875 cv
133.086 524.051 li
133.496 523.633 133.824 523.258 134.074 522.922 cv
134.32 522.594 134.512 522.289 134.645 522.012 cv
134.777 521.738 134.863 521.488 134.91 521.262 cv
134.949 521.039 134.973 520.828 134.973 520.633 cv
134.973 520.437 134.938 520.254 134.871 520.074 cv
134.805 519.902 134.711 519.746 134.586 519.609 cv
134.461 519.48 134.305 519.375 134.117 519.293 cv
133.93 519.219 133.711 519.18 133.465 519.176 cv
133.176 519.18 132.918 519.219 132.691 519.293 cv
132.461 519.375 132.262 519.461 132.09 519.547 cv
131.918 519.641 131.773 519.723 131.656 519.801 cv
131.539 519.879 131.453 519.918 131.402 519.918 cv
131.367 519.918 131.336 519.91 131.313 519.891 cv
131.281 519.875 131.262 519.844 131.246 519.801 cv
131.23 519.762 131.215 519.707 131.207 519.637 cv
131.195 519.57 131.191 519.488 131.195 519.391 cv
131.191 519.324 131.195 519.266 131.203 519.215 cv
131.207 519.164 131.215 519.121 131.227 519.082 cv
131.234 519.047 131.25 519.012 131.27 518.98 cv
131.289 518.949 131.324 518.91 131.383 518.859 cv
131.434 518.812 131.527 518.746 131.664 518.664 cv
131.797 518.582 131.969 518.504 132.172 518.422 cv
132.375 518.344 132.598 518.273 132.844 518.219 cv
133.086 518.164 133.344 518.137 133.617 518.137 cv
134.043 518.137 134.418 518.199 134.742 518.32 cv
135.063 518.441 135.328 518.605 135.543 518.816 cv
135.754 519.027 135.914 519.273 136.02 519.547 cv
136.125 519.828 136.18 520.125 136.18 520.437 cv
136.18 520.727 136.152 521.008 136.102 521.285 cv
136.051 521.57 135.945 521.875 135.785 522.199 cv
135.621 522.527 135.387 522.891 135.082 523.289 cv
134.773 523.691 134.367 524.152 133.863 524.668 cv
132.457 526.137 li
136.316 526.137 li
136.348 526.141 136.383 526.152 136.422 526.168 cv
136.453 526.191 136.484 526.223 136.512 526.262 cv
136.535 526.305 136.555 526.355 136.566 526.414 cv
136.578 526.48 136.582 526.551 136.586 526.629 cv
cp
f
206.801 524.613 mo
206.797 524.766 206.773 524.887 206.73 524.973 cv
206.684 525.062 206.621 525.105 206.539 525.102 cv
205.539 525.102 li
205.539 526.965 li
205.539 527.004 205.527 527.035 205.512 527.059 cv
205.488 527.086 205.457 527.105 205.414 527.125 cv
205.363 527.141 205.301 527.152 205.23 527.164 cv
205.152 527.172 205.059 527.176 204.941 527.18 cv
204.824 527.176 204.727 527.172 204.656 527.164 cv
204.578 527.152 204.52 527.141 204.477 527.125 cv
204.43 527.105 204.398 527.086 204.383 527.059 cv
204.363 527.035 204.355 527.004 204.359 526.965 cv
204.359 525.102 li
200.73 525.102 li
200.672 525.105 200.629 525.098 200.594 525.082 cv
200.559 525.07 200.523 525.043 200.496 525.004 cv
200.465 524.969 200.445 524.918 200.434 524.848 cv
200.422 524.781 200.418 524.691 200.418 524.578 cv
200.418 524.496 200.418 524.418 200.426 524.348 cv
200.426 524.277 200.438 524.215 200.453 524.16 cv
200.465 524.105 200.48 524.051 200.508 523.996 cv
200.527 523.941 200.555 523.887 200.59 523.824 cv
203.75 518.437 li
203.77 518.402 203.805 518.371 203.852 518.344 cv
203.895 518.316 203.949 518.293 204.023 518.273 cv
204.09 518.258 204.176 518.246 204.281 518.234 cv
204.383 518.23 204.504 518.227 204.645 518.223 cv
204.793 518.227 204.93 518.23 205.047 518.242 cv
205.16 518.254 205.25 518.27 205.324 518.285 cv
205.391 518.305 205.445 518.328 205.484 518.359 cv
205.52 518.391 205.539 518.426 205.539 518.465 cv
205.539 524.129 li
206.539 524.129 li
206.613 524.133 206.676 524.172 206.727 524.25 cv
206.773 524.332 206.797 524.453 206.801 524.613 cv
cp
204.359 519.262 mo
204.348 519.262 li
201.496 524.129 li
204.359 524.129 li
cp
f
276.512 524.266 mo
276.512 524.656 276.449 525.035 276.332 525.395 cv
276.207 525.762 276.023 526.078 275.781 526.352 cv
275.531 526.629 275.219 526.852 274.844 527.016 cv
274.461 527.184 274.016 527.266 273.5 527.266 cv
273.129 527.266 272.801 527.223 272.52 527.129 cv
272.234 527.043 271.988 526.91 271.777 526.738 cv
271.566 526.57 271.391 526.363 271.254 526.117 cv
271.113 525.871 271 525.59 270.918 525.273 cv
270.832 524.961 270.773 524.617 270.738 524.238 cv
270.699 523.867 270.68 523.465 270.684 523.031 cv
270.68 522.652 270.699 522.27 270.742 521.879 cv
270.781 521.496 270.855 521.121 270.961 520.754 cv
271.066 520.395 271.211 520.055 271.391 519.738 cv
271.57 519.422 271.797 519.145 272.07 518.91 cv
272.344 518.676 272.668 518.488 273.047 518.348 cv
273.426 518.211 273.867 518.145 274.371 518.141 cv
274.539 518.145 274.711 518.152 274.883 518.172 cv
275.055 518.195 275.215 518.227 275.363 518.258 cv
275.512 518.297 275.633 518.332 275.734 518.371 cv
275.832 518.41 275.898 518.445 275.934 518.469 cv
275.961 518.496 275.984 518.523 276.004 518.551 cv
276.02 518.582 276.035 518.613 276.043 518.648 cv
276.051 518.684 276.055 518.723 276.063 518.766 cv
276.063 518.809 276.066 518.863 276.07 518.926 cv
276.066 519.012 276.066 519.082 276.066 519.137 cv
276.063 519.199 276.051 519.246 276.039 519.281 cv
276.02 519.32 276 519.348 275.977 519.363 cv
275.949 519.383 275.918 519.391 275.879 519.391 cv
275.828 519.391 275.758 519.375 275.672 519.344 cv
275.582 519.312 275.477 519.277 275.355 519.234 cv
275.23 519.199 275.082 519.164 274.906 519.129 cv
274.73 519.102 274.527 519.086 274.297 519.082 cv
273.867 519.086 273.5 519.172 273.195 519.344 cv
272.891 519.516 272.641 519.75 272.445 520.043 cv
272.25 520.336 272.105 520.676 272.016 521.059 cv
271.918 521.449 271.863 521.852 271.855 522.27 cv
271.973 522.203 272.109 522.137 272.258 522.066 cv
272.406 522 272.566 521.937 272.742 521.879 cv
272.918 521.828 273.105 521.781 273.301 521.746 cv
273.496 521.715 273.707 521.699 273.934 521.695 cv
274.41 521.699 274.813 521.766 275.145 521.891 cv
275.473 522.023 275.738 522.203 275.945 522.434 cv
276.145 522.664 276.289 522.934 276.379 523.246 cv
276.465 523.559 276.512 523.898 276.512 524.266 cv
cp
275.316 524.375 mo
275.316 524.113 275.289 523.871 275.238 523.652 cv
275.184 523.437 275.094 523.254 274.973 523.098 cv
274.848 522.949 274.684 522.832 274.48 522.75 cv
274.27 522.668 274.016 522.625 273.719 522.625 cv
273.547 522.625 273.379 522.641 273.211 522.672 cv
273.039 522.703 272.875 522.746 272.719 522.793 cv
272.559 522.848 272.41 522.91 272.27 522.98 cv
272.125 523.055 271.992 523.129 271.875 523.207 cv
271.871 523.801 271.91 524.297 271.988 524.691 cv
272.063 525.09 272.172 525.406 272.316 525.645 cv
272.461 525.887 272.641 526.059 272.855 526.16 cv
273.07 526.266 273.32 526.316 273.609 526.312 cv
273.898 526.316 274.152 526.262 274.367 526.148 cv
274.582 526.043 274.758 525.895 274.902 525.707 cv
275.043 525.523 275.148 525.316 275.215 525.086 cv
275.281 524.855 275.316 524.621 275.316 524.375 cv
cp
f
346.328 524.859 mo
346.328 525.246 346.258 525.59 346.121 525.887 cv
345.984 526.191 345.789 526.441 345.531 526.645 cv
345.273 526.852 344.953 527.008 344.574 527.109 cv
344.191 527.215 343.758 527.266 343.273 527.266 cv
342.813 527.266 342.402 527.219 342.043 527.125 cv
341.68 527.031 341.375 526.891 341.125 526.699 cv
340.875 526.516 340.684 526.285 340.551 526.008 cv
340.418 525.734 340.352 525.422 340.352 525.066 cv
340.352 524.793 340.395 524.535 340.488 524.301 cv
340.574 524.066 340.707 523.852 340.883 523.656 cv
341.051 523.461 341.262 523.277 341.516 523.102 cv
341.766 522.934 342.051 522.77 342.367 522.613 cv
342.094 522.473 341.852 522.324 341.641 522.164 cv
341.43 522.008 341.25 521.836 341.105 521.648 cv
340.957 521.465 340.848 521.27 340.773 521.059 cv
340.695 520.852 340.656 520.621 340.66 520.371 cv
340.656 520.062 340.711 519.77 340.828 519.496 cv
340.938 519.227 341.109 518.992 341.336 518.789 cv
341.563 518.59 341.848 518.43 342.199 518.312 cv
342.543 518.195 342.953 518.137 343.422 518.137 cv
343.867 518.137 344.254 518.191 344.582 518.297 cv
344.91 518.406 345.18 518.551 345.391 518.734 cv
345.602 518.922 345.758 519.141 345.863 519.391 cv
345.961 519.641 346.012 519.91 346.016 520.199 cv
346.012 520.434 345.973 520.66 345.902 520.871 cv
345.824 521.09 345.715 521.293 345.566 521.48 cv
345.418 521.676 345.238 521.855 345.027 522.02 cv
344.816 522.191 344.574 522.348 344.301 522.488 cv
344.621 522.652 344.906 522.816 345.164 522.984 cv
345.414 523.152 345.629 523.332 345.805 523.527 cv
345.973 523.723 346.102 523.93 346.195 524.145 cv
346.281 524.363 346.328 524.602 346.328 524.859 cv
cp
344.848 520.309 mo
344.844 520.121 344.813 519.945 344.746 519.789 cv
344.68 519.633 344.582 519.5 344.457 519.391 cv
344.328 519.281 344.168 519.199 343.98 519.141 cv
343.785 519.086 343.57 519.059 343.332 519.055 cv
342.836 519.059 342.461 519.168 342.211 519.391 cv
341.953 519.617 341.828 519.926 341.832 520.309 cv
341.828 520.488 341.859 520.652 341.922 520.805 cv
341.984 520.961 342.078 521.105 342.211 521.242 cv
342.336 521.379 342.5 521.512 342.703 521.641 cv
342.898 521.773 343.137 521.91 343.414 522.051 cv
343.875 521.816 344.23 521.555 344.477 521.262 cv
344.723 520.977 344.844 520.66 344.848 520.309 cv
cp
345.137 524.984 mo
345.133 524.777 345.094 524.586 345.02 524.414 cv
344.938 524.246 344.82 524.086 344.664 523.934 cv
344.508 523.785 344.309 523.641 344.074 523.5 cv
343.836 523.363 343.566 523.219 343.258 523.066 cv
342.969 523.211 342.715 523.352 342.5 523.492 cv
342.281 523.633 342.102 523.781 341.965 523.93 cv
341.824 524.086 341.719 524.242 341.648 524.406 cv
341.574 524.574 341.539 524.758 341.543 524.957 cv
341.539 525.402 341.691 525.746 342 525.984 cv
342.301 526.23 342.754 526.352 343.359 526.348 cv
343.941 526.352 344.387 526.23 344.688 525.98 cv
344.984 525.738 345.133 525.406 345.137 524.984 cv
cp
f
412.457 526.672 mo
412.453 526.762 412.445 526.832 412.434 526.891 cv
412.418 526.953 412.398 527.004 412.379 527.035 cv
412.355 527.074 412.332 527.098 412.301 527.113 cv
412.27 527.129 412.238 527.137 412.211 527.137 cv
407.574 527.137 li
407.539 527.137 407.512 527.129 407.484 527.113 cv
407.457 527.098 407.43 527.074 407.406 527.035 cv
407.379 527.004 407.359 526.953 407.348 526.891 cv
407.332 526.832 407.324 526.762 407.328 526.672 cv
407.324 526.594 407.332 526.52 407.348 526.457 cv
407.359 526.398 407.375 526.352 407.398 526.312 cv
407.414 526.277 407.441 526.246 407.473 526.223 cv
407.504 526.203 407.535 526.195 407.574 526.191 cv
409.426 526.191 li
409.426 519.445 li
407.711 520.465 li
407.621 520.516 407.551 520.543 407.504 520.551 cv
407.449 520.559 407.406 520.551 407.375 520.52 cv
407.34 520.492 407.32 520.441 407.309 520.371 cv
407.297 520.305 407.289 520.219 407.293 520.109 cv
407.289 520.035 407.293 519.969 407.305 519.91 cv
407.309 519.859 407.32 519.812 407.336 519.773 cv
407.348 519.738 407.367 519.707 407.391 519.68 cv
407.414 519.652 407.445 519.625 407.492 519.598 cv
409.535 518.285 li
409.551 518.273 409.57 518.262 409.602 518.254 cv
409.625 518.246 409.66 518.238 409.707 518.227 cv
409.746 518.219 409.797 518.211 409.852 518.207 cv
409.906 518.207 409.973 518.207 410.059 518.203 cv
410.164 518.207 410.258 518.211 410.332 518.219 cv
410.402 518.227 410.457 518.242 410.504 518.258 cv
410.543 518.277 410.57 518.297 410.586 518.32 cv
410.594 518.348 410.602 518.371 410.605 518.395 cv
410.605 526.191 li
412.211 526.191 li
412.246 526.195 412.281 526.203 412.313 526.223 cv
412.344 526.246 412.367 526.277 412.391 526.312 cv
412.406 526.352 412.422 526.398 412.438 526.457 cv
412.445 526.52 412.453 526.594 412.457 526.672 cv
cp
f
419.809 522.68 mo
419.805 523.363 419.754 523.984 419.648 524.547 cv
419.539 525.109 419.359 525.594 419.113 525.996 cv
418.859 526.402 418.531 526.715 418.133 526.934 cv
417.727 527.156 417.234 527.266 416.648 527.266 cv
416.09 527.266 415.617 527.168 415.238 526.969 cv
414.855 526.773 414.551 526.48 414.316 526.094 cv
414.082 525.707 413.914 525.234 413.82 524.668 cv
413.719 524.105 413.672 523.457 413.672 522.723 cv
413.672 522.051 413.727 521.43 413.836 520.863 cv
413.945 520.301 414.121 519.816 414.371 519.41 cv
414.613 519.008 414.938 518.695 415.344 518.469 cv
415.742 518.25 416.238 518.137 416.828 518.137 cv
417.387 518.137 417.859 518.238 418.242 518.434 cv
418.625 518.637 418.93 518.93 419.164 519.312 cv
419.395 519.703 419.563 520.176 419.66 520.738 cv
419.758 521.301 419.805 521.949 419.809 522.68 cv
cp
418.602 522.762 mo
418.598 522.32 418.582 521.922 418.555 521.57 cv
418.52 521.219 418.473 520.91 418.414 520.641 cv
418.348 520.371 418.27 520.141 418.172 519.945 cv
418.074 519.754 417.957 519.594 417.82 519.465 cv
417.68 519.34 417.52 519.246 417.348 519.187 cv
417.168 519.133 416.973 519.105 416.758 519.102 cv
416.367 519.105 416.051 519.195 415.813 519.379 cv
415.566 519.562 415.375 519.816 415.238 520.133 cv
415.098 520.453 415.004 520.824 414.953 521.254 cv
414.902 521.684 414.879 522.148 414.879 522.641 cv
414.879 523.305 414.91 523.867 414.98 524.328 cv
415.047 524.797 415.156 525.176 415.309 525.465 cv
415.453 525.762 415.645 525.973 415.875 526.102 cv
416.105 526.238 416.387 526.305 416.719 526.301 cv
416.973 526.305 417.195 526.266 417.391 526.18 cv
417.582 526.102 417.75 525.98 417.891 525.824 cv
418.031 525.672 418.145 525.488 418.238 525.273 cv
418.324 525.059 418.398 524.82 418.457 524.559 cv
418.508 524.301 418.547 524.02 418.57 523.715 cv
418.59 523.41 418.598 523.094 418.602 522.762 cv
cp
f
482.324 526.672 mo
482.32 526.762 482.313 526.832 482.301 526.891 cv
482.285 526.953 482.266 527.004 482.246 527.035 cv
482.223 527.074 482.199 527.098 482.168 527.113 cv
482.137 527.129 482.105 527.137 482.078 527.137 cv
477.441 527.137 li
477.406 527.137 477.379 527.129 477.352 527.113 cv
477.324 527.098 477.297 527.074 477.273 527.035 cv
477.246 527.004 477.227 526.953 477.215 526.891 cv
477.199 526.832 477.191 526.762 477.195 526.672 cv
477.191 526.594 477.199 526.52 477.215 526.457 cv
477.227 526.398 477.242 526.352 477.266 526.312 cv
477.281 526.277 477.309 526.246 477.34 526.223 cv
477.371 526.203 477.402 526.195 477.441 526.191 cv
479.293 526.191 li
479.293 519.445 li
477.578 520.465 li
477.488 520.516 477.418 520.543 477.371 520.551 cv
477.316 520.559 477.273 520.551 477.242 520.52 cv
477.207 520.492 477.188 520.441 477.176 520.371 cv
477.164 520.305 477.156 520.219 477.16 520.109 cv
477.156 520.035 477.16 519.969 477.172 519.91 cv
477.176 519.859 477.188 519.812 477.203 519.773 cv
477.215 519.738 477.234 519.707 477.258 519.68 cv
477.281 519.652 477.313 519.625 477.359 519.598 cv
479.402 518.285 li
479.418 518.273 479.438 518.262 479.469 518.254 cv
479.492 518.246 479.527 518.238 479.574 518.227 cv
479.613 518.219 479.664 518.211 479.719 518.207 cv
479.773 518.207 479.84 518.207 479.926 518.203 cv
480.031 518.207 480.125 518.211 480.199 518.219 cv
480.27 518.227 480.324 518.242 480.371 518.258 cv
480.41 518.277 480.438 518.297 480.453 518.32 cv
480.461 518.348 480.469 518.371 480.473 518.395 cv
480.473 526.191 li
482.078 526.191 li
482.113 526.195 482.148 526.203 482.18 526.223 cv
482.211 526.246 482.234 526.277 482.258 526.312 cv
482.273 526.352 482.289 526.398 482.305 526.457 cv
482.313 526.52 482.32 526.594 482.324 526.672 cv
cp
f
489.387 526.629 mo
489.383 526.715 489.379 526.789 489.367 526.852 cv
489.355 526.918 489.34 526.973 489.32 527.012 cv
489.297 527.059 489.27 527.09 489.238 527.105 cv
489.203 527.129 489.164 527.137 489.125 527.137 cv
484.223 527.137 li
484.16 527.137 484.102 527.129 484.055 527.113 cv
484.004 527.098 483.965 527.074 483.93 527.035 cv
483.895 527.004 483.867 526.949 483.855 526.879 cv
483.836 526.809 483.828 526.723 483.832 526.621 cv
483.828 526.531 483.832 526.453 483.84 526.383 cv
483.844 526.316 483.859 526.258 483.887 526.203 cv
483.91 526.152 483.941 526.098 483.977 526.043 cv
484.012 525.992 484.055 525.937 484.113 525.875 cv
485.887 524.051 li
486.297 523.633 486.625 523.258 486.875 522.922 cv
487.121 522.594 487.313 522.289 487.445 522.012 cv
487.578 521.738 487.664 521.488 487.711 521.262 cv
487.75 521.039 487.773 520.828 487.773 520.633 cv
487.773 520.437 487.738 520.254 487.672 520.074 cv
487.605 519.902 487.512 519.746 487.387 519.609 cv
487.262 519.48 487.105 519.375 486.918 519.293 cv
486.73 519.219 486.512 519.18 486.266 519.176 cv
485.977 519.18 485.719 519.219 485.492 519.293 cv
485.262 519.375 485.063 519.461 484.891 519.547 cv
484.719 519.641 484.574 519.723 484.457 519.801 cv
484.34 519.879 484.254 519.918 484.203 519.918 cv
484.168 519.918 484.137 519.91 484.113 519.891 cv
484.082 519.875 484.063 519.844 484.047 519.801 cv
484.031 519.762 484.016 519.707 484.008 519.637 cv
483.996 519.57 483.992 519.488 483.996 519.391 cv
483.992 519.324 483.996 519.266 484.004 519.215 cv
484.008 519.164 484.016 519.121 484.027 519.082 cv
484.035 519.047 484.051 519.012 484.07 518.98 cv
484.09 518.949 484.125 518.91 484.184 518.859 cv
484.234 518.812 484.328 518.746 484.465 518.664 cv
484.598 518.582 484.77 518.504 484.973 518.422 cv
485.176 518.344 485.398 518.273 485.645 518.219 cv
485.887 518.164 486.145 518.137 486.418 518.137 cv
486.844 518.137 487.219 518.199 487.543 518.32 cv
487.863 518.441 488.129 518.605 488.344 518.816 cv
488.555 519.027 488.715 519.273 488.82 519.547 cv
488.926 519.828 488.98 520.125 488.98 520.437 cv
488.98 520.727 488.953 521.008 488.902 521.285 cv
488.852 521.57 488.746 521.875 488.586 522.199 cv
488.422 522.527 488.188 522.891 487.883 523.289 cv
487.574 523.691 487.168 524.152 486.664 524.668 cv
485.258 526.137 li
489.117 526.137 li
489.148 526.141 489.184 526.152 489.223 526.168 cv
489.254 526.191 489.285 526.223 489.313 526.262 cv
489.336 526.305 489.355 526.355 489.367 526.414 cv
489.379 526.48 489.383 526.551 489.387 526.629 cv
cp
f
552.164 526.672 mo
552.16 526.762 552.152 526.832 552.141 526.891 cv
552.125 526.953 552.105 527.004 552.086 527.035 cv
552.063 527.074 552.039 527.098 552.008 527.113 cv
551.977 527.129 551.945 527.137 551.918 527.137 cv
547.281 527.137 li
547.246 527.137 547.219 527.129 547.191 527.113 cv
547.164 527.098 547.137 527.074 547.113 527.035 cv
547.086 527.004 547.066 526.953 547.055 526.891 cv
547.039 526.832 547.031 526.762 547.035 526.672 cv
547.031 526.594 547.039 526.52 547.055 526.457 cv
547.066 526.398 547.082 526.352 547.105 526.312 cv
547.121 526.277 547.148 526.246 547.18 526.223 cv
547.211 526.203 547.242 526.195 547.281 526.191 cv
549.133 526.191 li
549.133 519.445 li
547.418 520.465 li
547.328 520.516 547.258 520.543 547.211 520.551 cv
547.156 520.559 547.113 520.551 547.082 520.52 cv
547.047 520.492 547.027 520.441 547.016 520.371 cv
547.004 520.305 546.996 520.219 547 520.109 cv
546.996 520.035 547 519.969 547.012 519.91 cv
547.016 519.859 547.027 519.812 547.043 519.773 cv
547.055 519.738 547.074 519.707 547.098 519.68 cv
547.121 519.652 547.152 519.625 547.199 519.598 cv
549.242 518.285 li
549.258 518.273 549.277 518.262 549.309 518.254 cv
549.332 518.246 549.367 518.238 549.414 518.227 cv
549.453 518.219 549.504 518.211 549.559 518.207 cv
549.613 518.207 549.68 518.207 549.766 518.203 cv
549.871 518.207 549.965 518.211 550.039 518.219 cv
550.109 518.227 550.164 518.242 550.211 518.258 cv
550.25 518.277 550.277 518.297 550.293 518.32 cv
550.301 518.348 550.309 518.371 550.313 518.395 cv
550.313 526.191 li
551.918 526.191 li
551.953 526.195 551.988 526.203 552.02 526.223 cv
552.051 526.246 552.074 526.277 552.098 526.312 cv
552.113 526.352 552.129 526.398 552.145 526.457 cv
552.152 526.52 552.16 526.594 552.164 526.672 cv
cp
f
559.602 524.613 mo
559.598 524.766 559.574 524.887 559.531 524.973 cv
559.484 525.062 559.422 525.105 559.34 525.102 cv
558.34 525.102 li
558.34 526.965 li
558.34 527.004 558.328 527.035 558.313 527.059 cv
558.289 527.086 558.258 527.105 558.215 527.125 cv
558.164 527.141 558.102 527.152 558.031 527.164 cv
557.953 527.172 557.859 527.176 557.742 527.18 cv
557.625 527.176 557.527 527.172 557.457 527.164 cv
557.379 527.152 557.32 527.141 557.277 527.125 cv
557.23 527.105 557.199 527.086 557.184 527.059 cv
557.164 527.035 557.156 527.004 557.16 526.965 cv
557.16 525.102 li
553.531 525.102 li
553.473 525.105 553.43 525.098 553.395 525.082 cv
553.359 525.07 553.324 525.043 553.297 525.004 cv
553.266 524.969 553.246 524.918 553.234 524.848 cv
553.223 524.781 553.219 524.691 553.219 524.578 cv
553.219 524.496 553.219 524.418 553.227 524.348 cv
553.227 524.277 553.238 524.215 553.254 524.16 cv
553.266 524.105 553.281 524.051 553.309 523.996 cv
553.328 523.941 553.355 523.887 553.391 523.824 cv
556.551 518.437 li
556.57 518.402 556.605 518.371 556.652 518.344 cv
556.695 518.316 556.75 518.293 556.824 518.273 cv
556.891 518.258 556.977 518.246 557.082 518.234 cv
557.184 518.23 557.305 518.227 557.445 518.223 cv
557.594 518.227 557.73 518.23 557.848 518.242 cv
557.961 518.254 558.051 518.27 558.125 518.285 cv
558.191 518.305 558.246 518.328 558.285 518.359 cv
558.32 518.391 558.34 518.426 558.34 518.465 cv
558.34 524.129 li
559.34 524.129 li
559.414 524.133 559.477 524.172 559.527 524.25 cv
559.574 524.332 559.598 524.453 559.602 524.613 cv
cp
557.16 519.262 mo
557.148 519.262 li
554.297 524.129 li
557.16 524.129 li
cp
f
622.027 526.672 mo
622.023 526.762 622.016 526.832 622.004 526.891 cv
621.988 526.953 621.969 527.004 621.949 527.035 cv
621.926 527.074 621.902 527.098 621.871 527.113 cv
621.84 527.129 621.809 527.137 621.781 527.137 cv
617.145 527.137 li
617.109 527.137 617.082 527.129 617.055 527.113 cv
617.027 527.098 617 527.074 616.977 527.035 cv
616.949 527.004 616.93 526.953 616.918 526.891 cv
616.902 526.832 616.895 526.762 616.898 526.672 cv
616.895 526.594 616.902 526.52 616.918 526.457 cv
616.93 526.398 616.945 526.352 616.969 526.312 cv
616.984 526.277 617.012 526.246 617.043 526.223 cv
617.074 526.203 617.105 526.195 617.145 526.191 cv
618.996 526.191 li
618.996 519.445 li
617.281 520.465 li
617.191 520.516 617.121 520.543 617.074 520.551 cv
617.02 520.559 616.977 520.551 616.945 520.52 cv
616.91 520.492 616.891 520.441 616.879 520.371 cv
616.867 520.305 616.859 520.219 616.863 520.109 cv
616.859 520.035 616.863 519.969 616.875 519.91 cv
616.879 519.859 616.891 519.812 616.906 519.773 cv
616.918 519.738 616.938 519.707 616.961 519.68 cv
616.984 519.652 617.016 519.625 617.063 519.598 cv
619.105 518.285 li
619.121 518.273 619.141 518.262 619.172 518.254 cv
619.195 518.246 619.23 518.238 619.277 518.227 cv
619.316 518.219 619.367 518.211 619.422 518.207 cv
619.477 518.207 619.543 518.207 619.629 518.203 cv
619.734 518.207 619.828 518.211 619.902 518.219 cv
619.973 518.227 620.027 518.242 620.074 518.258 cv
620.113 518.277 620.141 518.297 620.156 518.32 cv
620.164 518.348 620.172 518.371 620.176 518.395 cv
620.176 526.191 li
621.781 526.191 li
621.816 526.195 621.852 526.203 621.883 526.223 cv
621.914 526.246 621.938 526.277 621.961 526.312 cv
621.977 526.352 621.992 526.398 622.008 526.457 cv
622.016 526.52 622.023 526.594 622.027 526.672 cv
cp
f
629.313 524.266 mo
629.313 524.656 629.25 525.035 629.133 525.395 cv
629.008 525.762 628.824 526.078 628.582 526.352 cv
628.332 526.629 628.02 526.852 627.645 527.016 cv
627.262 527.184 626.816 527.266 626.301 527.266 cv
625.93 527.266 625.602 527.223 625.32 527.129 cv
625.035 527.043 624.789 526.91 624.578 526.738 cv
624.367 526.57 624.191 526.363 624.055 526.117 cv
623.914 525.871 623.801 525.59 623.719 525.273 cv
623.633 524.961 623.574 524.617 623.539 524.238 cv
623.5 523.867 623.48 523.465 623.484 523.031 cv
623.48 522.652 623.5 522.27 623.543 521.879 cv
623.582 521.496 623.656 521.121 623.762 520.754 cv
623.867 520.395 624.012 520.055 624.191 519.738 cv
624.371 519.422 624.598 519.145 624.871 518.91 cv
625.145 518.676 625.469 518.488 625.848 518.348 cv
626.227 518.211 626.668 518.145 627.172 518.141 cv
627.34 518.145 627.512 518.152 627.684 518.172 cv
627.855 518.195 628.016 518.227 628.164 518.258 cv
628.313 518.297 628.434 518.332 628.535 518.371 cv
628.633 518.41 628.699 518.445 628.734 518.469 cv
628.762 518.496 628.785 518.523 628.805 518.551 cv
628.82 518.582 628.836 518.613 628.844 518.648 cv
628.852 518.684 628.855 518.723 628.863 518.766 cv
628.863 518.809 628.867 518.863 628.871 518.926 cv
628.867 519.012 628.867 519.082 628.867 519.137 cv
628.863 519.199 628.852 519.246 628.84 519.281 cv
628.82 519.32 628.801 519.348 628.777 519.363 cv
628.75 519.383 628.719 519.391 628.68 519.391 cv
628.629 519.391 628.559 519.375 628.473 519.344 cv
628.383 519.312 628.277 519.277 628.156 519.234 cv
628.031 519.199 627.883 519.164 627.707 519.129 cv
627.531 519.102 627.328 519.086 627.098 519.082 cv
626.668 519.086 626.301 519.172 625.996 519.344 cv
625.691 519.516 625.441 519.75 625.246 520.043 cv
625.051 520.336 624.906 520.676 624.816 521.059 cv
624.719 521.449 624.664 521.852 624.656 522.27 cv
624.773 522.203 624.91 522.137 625.059 522.066 cv
625.207 522 625.367 521.937 625.543 521.879 cv
625.719 521.828 625.906 521.781 626.102 521.746 cv
626.297 521.715 626.508 521.699 626.734 521.695 cv
627.211 521.699 627.613 521.766 627.945 521.891 cv
628.273 522.023 628.539 522.203 628.746 522.434 cv
628.945 522.664 629.09 522.934 629.18 523.246 cv
629.266 523.559 629.313 523.898 629.313 524.266 cv
cp
628.117 524.375 mo
628.117 524.113 628.09 523.871 628.039 523.652 cv
627.984 523.437 627.895 523.254 627.773 523.098 cv
627.648 522.949 627.484 522.832 627.281 522.75 cv
627.07 522.668 626.816 522.625 626.52 522.625 cv
626.348 522.625 626.18 522.641 626.012 522.672 cv
625.84 522.703 625.676 522.746 625.52 522.793 cv
625.359 522.848 625.211 522.91 625.07 522.98 cv
624.926 523.055 624.793 523.129 624.676 523.207 cv
624.672 523.801 624.711 524.297 624.789 524.691 cv
624.863 525.09 624.973 525.406 625.117 525.645 cv
625.262 525.887 625.441 526.059 625.656 526.16 cv
625.871 526.266 626.121 526.316 626.41 526.312 cv
626.699 526.316 626.953 526.262 627.168 526.148 cv
627.383 526.043 627.559 525.895 627.703 525.707 cv
627.844 525.523 627.949 525.316 628.016 525.086 cv
628.082 524.855 628.117 524.621 628.117 524.375 cv
cp
f
16.934 296.355 mo
16.977 296.359 17.012 296.367 17.043 296.379 cv
17.074 296.398 17.102 296.434 17.121 296.48 cv
17.141 296.535 17.152 296.605 17.168 296.699 cv
17.176 296.793 17.184 296.918 17.184 297.074 cv
17.184 297.211 17.176 297.324 17.168 297.406 cv
17.152 297.492 17.141 297.559 17.117 297.609 cv
17.098 297.664 17.063 297.703 17.02 297.73 cv
16.98 297.762 16.93 297.789 16.863 297.805 cv
14.488 298.734 li
14.219 298.848 13.973 298.961 13.742 299.074 cv
13.52 299.191 13.324 299.328 13.16 299.488 cv
13 299.652 12.871 299.844 12.777 300.059 cv
12.688 300.281 12.645 300.543 12.641 300.844 cv
12.641 301.742 li
16.934 301.742 li
16.977 301.746 17.012 301.758 17.043 301.777 cv
17.074 301.805 17.102 301.84 17.117 301.887 cv
17.137 301.937 17.148 302.004 17.164 302.09 cv
17.176 302.176 17.184 302.285 17.184 302.41 cv
17.184 302.543 17.176 302.648 17.164 302.734 cv
17.148 302.82 17.137 302.891 17.117 302.941 cv
17.102 302.996 17.074 303.031 17.043 303.051 cv
17.012 303.074 16.977 303.086 16.934 303.082 cv
7.598 303.082 li
7.395 303.086 7.254 303.031 7.172 302.922 cv
7.094 302.816 7.055 302.703 7.051 302.582 cv
7.051 300.441 li
7.055 300.191 7.059 299.977 7.07 299.805 cv
7.086 299.637 7.102 299.484 7.113 299.348 cv
7.184 298.961 7.289 298.617 7.434 298.316 cv
7.582 298.02 7.77 297.77 7.988 297.566 cv
8.215 297.363 8.469 297.211 8.758 297.109 cv
9.047 297.008 9.367 296.957 9.711 296.957 cv
10.051 296.957 10.352 297.004 10.617 297.094 cv
10.887 297.187 11.125 297.32 11.328 297.488 cv
11.539 297.66 11.715 297.863 11.863 298.102 cv
12.012 298.344 12.141 298.613 12.242 298.906 cv
12.32 298.742 12.41 298.59 12.52 298.453 cv
12.633 298.32 12.77 298.195 12.922 298.074 cv
13.082 297.961 13.262 297.848 13.461 297.742 cv
13.664 297.641 13.891 297.539 14.145 297.43 cv
16.363 296.527 li
16.551 296.457 16.684 296.41 16.758 296.387 cv
16.836 296.371 16.895 296.359 16.934 296.355 cv
cp
9.852 298.375 mo
9.461 298.375 9.125 298.465 8.852 298.641 cv
8.578 298.82 8.383 299.117 8.262 299.527 cv
8.227 299.66 8.199 299.805 8.184 299.969 cv
8.168 300.133 8.16 300.348 8.16 300.609 cv
8.16 301.742 li
11.559 301.742 li
11.559 300.434 li
11.559 300.082 11.516 299.777 11.43 299.516 cv
11.344 299.262 11.227 299.047 11.07 298.875 cv
10.922 298.707 10.738 298.582 10.527 298.496 cv
10.32 298.418 10.098 298.375 9.852 298.375 cv
cp
f
16.941 288.555 mo
16.988 288.559 17.023 288.566 17.047 288.582 cv
17.078 288.602 17.102 288.637 17.121 288.68 cv
17.141 288.727 17.152 288.785 17.168 288.859 cv
17.176 288.937 17.184 289.031 17.184 289.137 cv
17.184 289.262 17.176 289.359 17.168 289.43 cv
17.152 289.508 17.141 289.566 17.121 289.609 cv
17.102 289.656 17.078 289.687 17.047 289.699 cv
17.023 289.719 16.988 289.727 16.941 289.723 cv
16.016 289.723 li
16.461 290.125 16.781 290.52 16.98 290.906 cv
17.184 291.301 17.281 291.695 17.285 292.09 cv
17.281 292.562 17.207 292.957 17.051 293.273 cv
16.898 293.594 16.688 293.852 16.418 294.047 cv
16.152 294.25 15.84 294.391 15.48 294.473 cv
15.125 294.562 14.691 294.605 14.184 294.602 cv
9.93 294.602 li
9.891 294.605 9.855 294.598 9.824 294.574 cv
9.797 294.559 9.773 294.523 9.746 294.469 cv
9.727 294.422 9.711 294.352 9.699 294.266 cv
9.695 294.184 9.691 294.082 9.688 293.953 cv
9.691 293.832 9.695 293.727 9.699 293.641 cv
9.711 293.559 9.727 293.492 9.746 293.445 cv
9.773 293.398 9.797 293.363 9.824 293.34 cv
9.855 293.32 9.891 293.312 9.93 293.309 cv
14.012 293.309 li
14.426 293.312 14.754 293.281 15 293.219 cv
15.246 293.16 15.457 293.07 15.629 292.945 cv
15.809 292.828 15.941 292.672 16.035 292.48 cv
16.133 292.297 16.184 292.078 16.18 291.828 cv
16.184 291.508 16.066 291.187 15.836 290.863 cv
15.609 290.547 15.273 290.207 14.828 289.848 cv
9.93 289.848 li
9.891 289.848 9.855 289.84 9.824 289.82 cv
9.797 289.805 9.773 289.77 9.746 289.715 cv
9.727 289.664 9.711 289.598 9.699 289.516 cv
9.695 289.437 9.691 289.332 9.688 289.199 cv
9.691 289.078 9.695 288.973 9.699 288.887 cv
9.711 288.805 9.727 288.742 9.746 288.695 cv
9.773 288.652 9.797 288.617 9.824 288.59 cv
9.855 288.57 9.891 288.559 9.93 288.555 cv
cp
f
16.941 280.145 mo
16.988 280.145 17.023 280.156 17.047 280.176 cv
17.078 280.199 17.102 280.234 17.121 280.277 cv
17.141 280.328 17.152 280.391 17.168 280.473 cv
17.176 280.555 17.184 280.66 17.184 280.781 cv
17.184 280.914 17.176 281.02 17.168 281.102 cv
17.152 281.187 17.141 281.254 17.121 281.297 cv
17.102 281.348 17.078 281.379 17.047 281.398 cv
17.023 281.422 16.988 281.434 16.941 281.43 cv
12.836 281.43 li
12.438 281.434 12.117 281.465 11.871 281.523 cv
11.629 281.59 11.418 281.68 11.238 281.797 cv
11.063 281.914 10.926 282.07 10.832 282.258 cv
10.738 282.453 10.691 282.672 10.691 282.918 cv
10.691 283.242 10.809 283.566 11.035 283.887 cv
11.27 284.211 11.602 284.547 12.039 284.898 cv
16.941 284.898 li
16.988 284.902 17.023 284.914 17.047 284.93 cv
17.078 284.953 17.102 284.984 17.121 285.031 cv
17.141 285.078 17.152 285.145 17.168 285.223 cv
17.176 285.309 17.184 285.414 17.184 285.543 cv
17.184 285.672 17.176 285.777 17.168 285.855 cv
17.152 285.941 17.141 286.008 17.121 286.055 cv
17.102 286.109 17.078 286.141 17.047 286.156 cv
17.023 286.176 16.988 286.187 16.941 286.184 cv
9.93 286.184 li
9.891 286.187 9.855 286.18 9.824 286.16 cv
9.797 286.148 9.773 286.117 9.746 286.066 cv
9.727 286.023 9.711 285.961 9.699 285.887 cv
9.695 285.816 9.691 285.723 9.688 285.598 cv
9.691 285.488 9.695 285.391 9.699 285.312 cv
9.711 285.238 9.727 285.18 9.746 285.137 cv
9.773 285.098 9.797 285.07 9.824 285.051 cv
9.855 285.035 9.891 285.027 9.93 285.023 cv
10.855 285.023 li
10.414 284.633 10.094 284.238 9.887 283.844 cv
9.684 283.453 9.578 283.055 9.578 282.652 cv
9.578 282.184 9.66 281.793 9.816 281.473 cv
9.98 281.156 10.191 280.895 10.453 280.695 cv
10.719 280.5 11.027 280.359 11.383 280.273 cv
11.738 280.187 12.168 280.145 12.664 280.145 cv
cp
f
16.426 274.219 mo
16.582 274.219 16.699 274.23 16.785 274.25 cv
16.875 274.273 16.941 274.305 16.98 274.344 cv
17.023 274.387 17.063 274.449 17.098 274.531 cv
17.133 274.617 17.16 274.711 17.188 274.816 cv
17.207 274.926 17.227 275.039 17.246 275.156 cv
17.258 275.273 17.266 275.395 17.27 275.512 cv
17.266 275.879 17.219 276.191 17.125 276.449 cv
17.031 276.711 16.887 276.922 16.688 277.086 cv
16.496 277.254 16.25 277.375 15.949 277.449 cv
15.652 277.527 15.301 277.566 14.891 277.562 cv
10.793 277.562 li
10.793 278.543 li
10.797 278.621 10.754 278.684 10.668 278.73 cv
10.586 278.777 10.453 278.801 10.262 278.801 cv
10.168 278.801 10.086 278.797 10.016 278.781 cv
9.953 278.773 9.895 278.754 9.848 278.73 cv
9.805 278.711 9.773 278.684 9.754 278.648 cv
9.738 278.617 9.73 278.582 9.727 278.535 cv
9.727 277.562 li
8.059 277.562 li
8.027 277.566 7.992 277.555 7.957 277.535 cv
7.93 277.52 7.902 277.488 7.875 277.434 cv
7.855 277.387 7.84 277.32 7.824 277.234 cv
7.816 277.156 7.809 277.051 7.809 276.922 cv
7.809 276.793 7.816 276.687 7.824 276.605 cv
7.84 276.523 7.855 276.457 7.875 276.41 cv
7.902 276.363 7.93 276.332 7.957 276.309 cv
7.992 276.293 8.027 276.281 8.059 276.277 cv
9.727 276.277 li
9.727 274.477 li
9.73 274.437 9.738 274.402 9.754 274.367 cv
9.773 274.34 9.805 274.312 9.848 274.285 cv
9.895 274.266 9.953 274.25 10.016 274.234 cv
10.086 274.227 10.168 274.219 10.262 274.219 cv
10.453 274.219 10.586 274.242 10.668 274.289 cv
10.754 274.336 10.797 274.398 10.793 274.477 cv
10.793 276.277 li
14.707 276.277 li
15.191 276.281 15.555 276.211 15.801 276.062 cv
16.051 275.922 16.176 275.664 16.172 275.293 cv
16.176 275.18 16.164 275.074 16.137 274.977 cv
16.117 274.887 16.094 274.805 16.063 274.727 cv
16.039 274.656 16.012 274.594 15.988 274.539 cv
15.965 274.492 15.953 274.445 15.953 274.398 cv
15.953 274.375 15.961 274.348 15.973 274.324 cv
15.988 274.301 16.012 274.285 16.047 274.27 cv
16.086 274.262 16.137 274.25 16.195 274.234 cv
16.262 274.227 16.34 274.219 16.426 274.219 cv
cp
f
16.941 271.203 mo
16.988 271.207 17.023 271.219 17.047 271.234 cv
17.078 271.258 17.102 271.289 17.121 271.336 cv
17.141 271.383 17.152 271.449 17.168 271.527 cv
17.176 271.613 17.184 271.719 17.184 271.848 cv
17.184 271.977 17.176 272.082 17.168 272.16 cv
17.152 272.246 17.141 272.312 17.121 272.359 cv
17.102 272.414 17.078 272.445 17.047 272.461 cv
17.023 272.48 16.988 272.492 16.941 272.488 cv
9.93 272.488 li
9.895 272.492 9.863 272.48 9.828 272.461 cv
9.801 272.445 9.773 272.414 9.75 272.359 cv
9.73 272.312 9.715 272.246 9.703 272.16 cv
9.695 272.082 9.691 271.977 9.688 271.848 cv
9.691 271.719 9.695 271.613 9.703 271.527 cv
9.715 271.449 9.73 271.383 9.75 271.336 cv
9.773 271.289 9.801 271.258 9.828 271.234 cv
9.863 271.219 9.895 271.207 9.93 271.203 cv
cp
7.559 271.055 mo
7.863 271.055 8.07 271.113 8.176 271.227 cv
8.289 271.34 8.344 271.551 8.34 271.855 cv
8.344 272.16 8.289 272.367 8.18 272.477 cv
8.074 272.594 7.871 272.648 7.574 272.645 cv
7.273 272.648 7.07 272.59 6.961 272.473 cv
6.855 272.359 6.801 272.148 6.797 271.84 cv
6.801 271.539 6.855 271.336 6.957 271.223 cv
7.066 271.113 7.266 271.055 7.559 271.055 cv
cp
f
16.941 258.379 mo
16.988 258.383 17.023 258.391 17.047 258.41 cv
17.078 258.434 17.102 258.469 17.121 258.512 cv
17.141 258.562 17.152 258.629 17.168 258.707 cv
17.176 258.793 17.184 258.895 17.184 259.02 cv
17.184 259.152 17.176 259.262 17.168 259.34 cv
17.152 259.426 17.141 259.492 17.121 259.539 cv
17.102 259.594 17.078 259.629 17.047 259.645 cv
17.023 259.668 16.988 259.676 16.941 259.676 cv
12.68 259.676 li
12.387 259.676 12.117 259.703 11.871 259.754 cv
11.629 259.809 11.418 259.891 11.238 260.004 cv
11.063 260.117 10.926 260.262 10.832 260.437 cv
10.738 260.617 10.691 260.828 10.691 261.062 cv
10.691 261.359 10.809 261.656 11.035 261.953 cv
11.27 262.258 11.602 262.586 12.039 262.941 cv
16.941 262.941 li
16.988 262.945 17.023 262.957 17.047 262.973 cv
17.078 262.996 17.102 263.027 17.121 263.074 cv
17.141 263.125 17.152 263.191 17.168 263.273 cv
17.176 263.359 17.184 263.465 17.184 263.586 cv
17.184 263.707 17.176 263.809 17.168 263.895 cv
17.152 263.98 17.141 264.051 17.121 264.098 cv
17.102 264.152 17.078 264.184 17.047 264.199 cv
17.023 264.219 16.988 264.23 16.941 264.227 cv
12.68 264.227 li
12.387 264.23 12.117 264.258 11.871 264.312 cv
11.629 264.371 11.418 264.457 11.238 264.57 cv
11.063 264.684 10.926 264.828 10.832 265 cv
10.738 265.18 10.691 265.387 10.691 265.621 cv
10.691 265.922 10.809 266.219 11.035 266.52 cv
11.27 266.82 11.602 267.148 12.039 267.5 cv
16.941 267.5 li
16.988 267.504 17.023 267.516 17.047 267.531 cv
17.078 267.555 17.102 267.586 17.121 267.633 cv
17.141 267.68 17.152 267.746 17.168 267.824 cv
17.176 267.91 17.184 268.016 17.184 268.145 cv
17.184 268.273 17.176 268.379 17.168 268.457 cv
17.152 268.543 17.141 268.609 17.121 268.656 cv
17.102 268.711 17.078 268.742 17.047 268.758 cv
17.023 268.777 16.988 268.789 16.941 268.785 cv
9.93 268.785 li
9.891 268.789 9.855 268.781 9.824 268.762 cv
9.797 268.75 9.773 268.719 9.746 268.668 cv
9.727 268.625 9.711 268.562 9.699 268.488 cv
9.695 268.418 9.691 268.324 9.688 268.199 cv
9.691 268.09 9.695 267.992 9.699 267.914 cv
9.711 267.84 9.727 267.781 9.746 267.738 cv
9.773 267.699 9.797 267.672 9.824 267.652 cv
9.855 267.637 9.891 267.629 9.93 267.625 cv
10.855 267.625 li
10.414 267.234 10.094 266.852 9.887 266.477 cv
9.684 266.109 9.578 265.73 9.578 265.348 cv
9.578 265.059 9.613 264.801 9.68 264.566 cv
9.75 264.34 9.844 264.133 9.965 263.953 cv
10.086 263.777 10.23 263.629 10.398 263.5 cv
10.57 263.379 10.762 263.273 10.965 263.187 cv
10.715 262.957 10.5 262.734 10.32 262.523 cv
10.148 262.312 10.004 262.109 9.891 261.914 cv
9.785 261.719 9.707 261.531 9.652 261.348 cv
9.605 261.164 9.578 260.977 9.578 260.789 cv
9.578 260.336 9.66 259.957 9.816 259.652 cv
9.98 259.348 10.191 259.102 10.453 258.906 cv
10.719 258.719 11.027 258.582 11.383 258.5 cv
11.738 258.422 12.113 258.383 12.508 258.379 cv
cp
f
13.133 250.051 mo
13.336 250.055 13.477 250.105 13.563 250.203 cv
13.648 250.309 13.691 250.426 13.691 250.551 cv
13.691 255.168 li
14.082 255.172 14.434 255.133 14.746 255.051 cv
15.059 254.977 15.328 254.844 15.547 254.66 cv
15.773 254.48 15.945 254.246 16.063 253.949 cv
16.188 253.66 16.246 253.301 16.242 252.875 cv
16.246 252.543 16.219 252.246 16.16 251.984 cv
16.109 251.723 16.047 251.496 15.977 251.305 cv
15.91 251.117 15.852 250.961 15.793 250.836 cv
15.742 250.715 15.715 250.621 15.711 250.559 cv
15.715 250.523 15.723 250.492 15.738 250.461 cv
15.758 250.434 15.785 250.41 15.82 250.391 cv
15.859 250.379 15.91 250.367 15.973 250.355 cv
16.039 250.352 16.117 250.348 16.211 250.344 cv
16.281 250.348 16.34 250.352 16.387 250.352 cv
16.434 250.359 16.477 250.363 16.516 250.371 cv
16.555 250.379 16.59 250.395 16.621 250.41 cv
16.652 250.434 16.684 250.457 16.711 250.48 cv
16.742 250.512 16.789 250.594 16.852 250.734 cv
16.918 250.875 16.98 251.059 17.043 251.281 cv
17.105 251.508 17.16 251.766 17.211 252.059 cv
17.258 252.352 17.281 252.664 17.285 252.996 cv
17.281 253.574 17.203 254.082 17.043 254.512 cv
16.883 254.949 16.645 255.312 16.328 255.605 cv
16.012 255.906 15.617 256.129 15.137 256.277 cv
14.66 256.426 14.102 256.5 13.465 256.5 cv
12.867 256.5 12.328 256.426 11.844 256.27 cv
11.367 256.117 10.957 255.891 10.621 255.594 cv
10.285 255.301 10.027 254.945 9.848 254.531 cv
9.668 254.117 9.578 253.652 9.578 253.137 cv
9.578 252.586 9.668 252.117 9.844 251.73 cv
10.023 251.344 10.262 251.027 10.559 250.773 cv
10.859 250.527 11.211 250.344 11.609 250.227 cv
12.016 250.113 12.445 250.055 12.898 250.051 cv
cp
12.75 251.344 mo
12.074 251.328 11.543 251.48 11.16 251.797 cv
10.777 252.113 10.586 252.582 10.582 253.199 cv
10.586 253.523 10.645 253.805 10.762 254.043 cv
10.883 254.285 11.043 254.484 11.238 254.645 cv
11.438 254.809 11.668 254.934 11.93 255.02 cv
12.191 255.109 12.465 255.16 12.75 255.168 cv
cp
f
6.398 241.812 mo
7.445 242.309 8.516 242.676 9.613 242.918 cv
10.715 243.16 11.82 243.281 12.93 243.281 cv
14.047 243.281 15.156 243.16 16.25 242.91 cv
17.348 242.668 18.418 242.305 19.473 241.828 cv
19.531 241.805 19.586 241.793 19.633 241.785 cv
19.676 241.785 19.711 241.801 19.742 241.836 cv
19.77 241.875 19.789 241.93 19.805 242.004 cv
19.813 242.082 19.82 242.187 19.824 242.312 cv
19.82 242.41 19.816 242.488 19.816 242.555 cv
19.809 242.625 19.801 242.684 19.785 242.73 cv
19.77 242.781 19.75 242.824 19.73 242.852 cv
19.707 242.887 19.684 242.91 19.66 242.922 cv
19.129 243.203 18.594 243.449 18.051 243.66 cv
17.508 243.879 16.957 244.059 16.398 244.199 cv
15.836 244.348 15.27 244.457 14.695 244.527 cv
14.121 244.605 13.539 244.641 12.953 244.637 cv
12.367 244.641 11.789 244.602 11.215 244.516 cv
10.645 244.437 10.078 244.32 9.512 244.172 cv
8.949 244.023 8.395 243.844 7.848 243.633 cv
7.305 243.422 6.762 243.184 6.227 242.914 cv
6.207 242.91 6.191 242.895 6.172 242.871 cv
6.16 242.848 6.145 242.816 6.125 242.773 cv
6.113 242.734 6.102 242.676 6.09 242.602 cv
6.086 242.531 6.082 242.437 6.078 242.32 cv
6.082 242.203 6.09 242.109 6.102 242.031 cv
6.121 241.961 6.141 241.902 6.164 241.859 cv
6.191 241.82 6.227 241.797 6.266 241.789 cv
6.313 241.785 6.355 241.793 6.398 241.812 cv
cp
f
16.934 228.609 mo
16.977 228.609 17.012 228.621 17.043 228.641 cv
17.074 228.664 17.102 228.703 17.117 228.754 cv
17.137 228.809 17.148 228.875 17.164 228.957 cv
17.176 229.043 17.184 229.152 17.184 229.281 cv
17.184 229.41 17.176 229.516 17.164 229.602 cv
17.148 229.691 17.137 229.762 17.117 229.812 cv
17.102 229.863 17.074 229.898 17.043 229.918 cv
17.012 229.941 16.977 229.953 16.934 229.949 cv
8.152 229.949 li
8.152 229.965 li
16.973 233.52 li
17.012 233.535 17.043 233.559 17.066 233.586 cv
17.094 233.617 17.117 233.66 17.133 233.711 cv
17.152 233.77 17.164 233.832 17.172 233.906 cv
17.18 233.98 17.184 234.07 17.184 234.172 cv
17.184 234.285 17.176 234.379 17.168 234.453 cv
17.152 234.535 17.141 234.602 17.125 234.648 cv
17.109 234.703 17.09 234.742 17.059 234.77 cv
17.035 234.801 17.004 234.82 16.973 234.828 cv
8.152 238.227 li
8.152 238.234 li
16.934 238.234 li
16.977 238.238 17.012 238.246 17.043 238.266 cv
17.074 238.289 17.102 238.328 17.117 238.379 cv
17.137 238.434 17.148 238.504 17.164 238.586 cv
17.176 238.676 17.184 238.785 17.184 238.914 cv
17.184 239.047 17.176 239.152 17.164 239.238 cv
17.148 239.324 17.137 239.395 17.117 239.441 cv
17.102 239.496 17.074 239.531 17.043 239.547 cv
17.012 239.57 16.977 239.578 16.934 239.574 cv
7.66 239.574 li
7.445 239.578 7.289 239.52 7.191 239.402 cv
7.102 239.285 7.055 239.156 7.051 239.012 cv
7.051 238.187 li
7.055 238.023 7.07 237.875 7.098 237.746 cv
7.133 237.621 7.18 237.512 7.246 237.414 cv
7.316 237.32 7.402 237.238 7.504 237.176 cv
7.609 237.113 7.734 237.059 7.871 237.012 cv
15.172 234.125 li
15.172 234.086 li
7.895 231.086 li
7.742 231.031 7.609 230.969 7.496 230.898 cv
7.391 230.832 7.301 230.754 7.234 230.672 cv
7.172 230.59 7.125 230.5 7.094 230.398 cv
7.066 230.301 7.055 230.184 7.051 230.051 cv
7.051 229.187 li
7.055 229.109 7.066 229.031 7.086 228.961 cv
7.113 228.891 7.148 228.832 7.195 228.781 cv
7.246 228.73 7.309 228.687 7.383 228.656 cv
7.461 228.625 7.555 228.609 7.66 228.609 cv
cp
f
16.941 224.746 mo
16.988 224.75 17.023 224.762 17.047 224.777 cv
17.078 224.801 17.102 224.832 17.121 224.879 cv
17.141 224.926 17.152 224.992 17.168 225.07 cv
17.176 225.156 17.184 225.262 17.184 225.391 cv
17.184 225.52 17.176 225.625 17.168 225.703 cv
17.152 225.789 17.141 225.855 17.121 225.902 cv
17.102 225.957 17.078 225.988 17.047 226.004 cv
17.023 226.023 16.988 226.035 16.941 226.031 cv
9.93 226.031 li
9.895 226.035 9.863 226.023 9.828 226.004 cv
9.801 225.988 9.773 225.957 9.75 225.902 cv
9.73 225.855 9.715 225.789 9.703 225.703 cv
9.695 225.625 9.691 225.52 9.688 225.391 cv
9.691 225.262 9.695 225.156 9.703 225.07 cv
9.715 224.992 9.73 224.926 9.75 224.879 cv
9.773 224.832 9.801 224.801 9.828 224.777 cv
9.863 224.762 9.895 224.75 9.93 224.746 cv
cp
7.559 224.598 mo
7.863 224.598 8.07 224.656 8.176 224.77 cv
8.289 224.883 8.344 225.094 8.34 225.398 cv
8.344 225.703 8.289 225.91 8.18 226.02 cv
8.074 226.137 7.871 226.191 7.574 226.187 cv
7.273 226.191 7.07 226.133 6.961 226.016 cv
6.855 225.902 6.801 225.691 6.797 225.383 cv
6.801 225.082 6.855 224.879 6.957 224.766 cv
7.066 224.656 7.266 224.598 7.559 224.598 cv
cp
f
16.941 216.289 mo
16.988 216.289 17.023 216.301 17.047 216.32 cv
17.078 216.344 17.102 216.379 17.121 216.422 cv
17.141 216.473 17.152 216.535 17.168 216.617 cv
17.176 216.699 17.184 216.805 17.184 216.926 cv
17.184 217.059 17.176 217.164 17.168 217.246 cv
17.152 217.332 17.141 217.398 17.121 217.441 cv
17.102 217.492 17.078 217.523 17.047 217.543 cv
17.023 217.566 16.988 217.578 16.941 217.574 cv
12.836 217.574 li
12.438 217.578 12.117 217.609 11.871 217.668 cv
11.629 217.734 11.418 217.824 11.238 217.941 cv
11.063 218.059 10.926 218.215 10.832 218.402 cv
10.738 218.598 10.691 218.816 10.691 219.062 cv
10.691 219.387 10.809 219.711 11.035 220.031 cv
11.27 220.355 11.602 220.691 12.039 221.043 cv
16.941 221.043 li
16.988 221.047 17.023 221.059 17.047 221.074 cv
17.078 221.098 17.102 221.129 17.121 221.176 cv
17.141 221.223 17.152 221.289 17.168 221.367 cv
17.176 221.453 17.184 221.559 17.184 221.687 cv
17.184 221.816 17.176 221.922 17.168 222 cv
17.152 222.086 17.141 222.152 17.121 222.199 cv
17.102 222.254 17.078 222.285 17.047 222.301 cv
17.023 222.32 16.988 222.332 16.941 222.328 cv
9.93 222.328 li
9.891 222.332 9.855 222.324 9.824 222.305 cv
9.797 222.293 9.773 222.262 9.746 222.211 cv
9.727 222.168 9.711 222.105 9.699 222.031 cv
9.695 221.961 9.691 221.867 9.688 221.742 cv
9.691 221.633 9.695 221.535 9.699 221.457 cv
9.711 221.383 9.727 221.324 9.746 221.281 cv
9.773 221.242 9.797 221.215 9.824 221.195 cv
9.855 221.18 9.891 221.172 9.93 221.168 cv
10.855 221.168 li
10.414 220.777 10.094 220.383 9.887 219.988 cv
9.684 219.598 9.578 219.199 9.578 218.797 cv
9.578 218.328 9.66 217.937 9.816 217.617 cv
9.98 217.301 10.191 217.039 10.453 216.84 cv
10.719 216.645 11.027 216.504 11.383 216.418 cv
11.738 216.332 12.168 216.289 12.664 216.289 cv
cp
f
16.941 207.941 mo
16.988 207.945 17.023 207.953 17.047 207.969 cv
17.078 207.988 17.102 208.023 17.121 208.066 cv
17.141 208.113 17.152 208.172 17.168 208.246 cv
17.176 208.324 17.184 208.418 17.184 208.523 cv
17.184 208.648 17.176 208.746 17.168 208.816 cv
17.152 208.895 17.141 208.953 17.121 208.996 cv
17.102 209.043 17.078 209.074 17.047 209.086 cv
17.023 209.105 16.988 209.113 16.941 209.109 cv
16.016 209.109 li
16.461 209.512 16.781 209.906 16.98 210.293 cv
17.184 210.687 17.281 211.082 17.285 211.477 cv
17.281 211.949 17.207 212.344 17.051 212.66 cv
16.898 212.98 16.688 213.238 16.418 213.434 cv
16.152 213.637 15.84 213.777 15.48 213.859 cv
15.125 213.949 14.691 213.992 14.184 213.988 cv
9.93 213.988 li
9.891 213.992 9.855 213.984 9.824 213.961 cv
9.797 213.945 9.773 213.91 9.746 213.855 cv
9.727 213.809 9.711 213.738 9.699 213.652 cv
9.695 213.57 9.691 213.469 9.688 213.34 cv
9.691 213.219 9.695 213.113 9.699 213.027 cv
9.711 212.945 9.727 212.879 9.746 212.832 cv
9.773 212.785 9.797 212.75 9.824 212.727 cv
9.855 212.707 9.891 212.699 9.93 212.695 cv
14.012 212.695 li
14.426 212.699 14.754 212.668 15 212.605 cv
15.246 212.547 15.457 212.457 15.629 212.332 cv
15.809 212.215 15.941 212.059 16.035 211.867 cv
16.133 211.684 16.184 211.465 16.18 211.215 cv
16.184 210.895 16.066 210.574 15.836 210.25 cv
15.609 209.934 15.273 209.594 14.828 209.234 cv
9.93 209.234 li
9.891 209.234 9.855 209.227 9.824 209.207 cv
9.797 209.191 9.773 209.156 9.746 209.102 cv
9.727 209.051 9.711 208.984 9.699 208.902 cv
9.695 208.824 9.691 208.719 9.688 208.586 cv
9.691 208.465 9.695 208.359 9.699 208.273 cv
9.711 208.191 9.727 208.129 9.746 208.082 cv
9.773 208.039 9.797 208.004 9.824 207.977 cv
9.855 207.957 9.891 207.945 9.93 207.941 cv
cp
f
16.426 201.84 mo
16.582 201.84 16.699 201.852 16.785 201.871 cv
16.875 201.895 16.941 201.926 16.98 201.965 cv
17.023 202.008 17.063 202.07 17.098 202.152 cv
17.133 202.238 17.16 202.332 17.188 202.437 cv
17.207 202.547 17.227 202.66 17.246 202.777 cv
17.258 202.895 17.266 203.016 17.27 203.133 cv
17.266 203.5 17.219 203.812 17.125 204.07 cv
17.031 204.332 16.887 204.543 16.688 204.707 cv
16.496 204.875 16.25 204.996 15.949 205.07 cv
15.652 205.148 15.301 205.187 14.891 205.184 cv
10.793 205.184 li
10.793 206.164 li
10.797 206.242 10.754 206.305 10.668 206.352 cv
10.586 206.398 10.453 206.422 10.262 206.422 cv
10.168 206.422 10.086 206.418 10.016 206.402 cv
9.953 206.395 9.895 206.375 9.848 206.352 cv
9.805 206.332 9.773 206.305 9.754 206.27 cv
9.738 206.238 9.73 206.203 9.727 206.156 cv
9.727 205.184 li
8.059 205.184 li
8.027 205.187 7.992 205.176 7.957 205.156 cv
7.93 205.141 7.902 205.109 7.875 205.055 cv
7.855 205.008 7.84 204.941 7.824 204.855 cv
7.816 204.777 7.809 204.672 7.809 204.543 cv
7.809 204.414 7.816 204.309 7.824 204.227 cv
7.84 204.145 7.855 204.078 7.875 204.031 cv
7.902 203.984 7.93 203.953 7.957 203.93 cv
7.992 203.914 8.027 203.902 8.059 203.898 cv
9.727 203.898 li
9.727 202.098 li
9.73 202.059 9.738 202.023 9.754 201.988 cv
9.773 201.961 9.805 201.934 9.848 201.906 cv
9.895 201.887 9.953 201.871 10.016 201.855 cv
10.086 201.848 10.168 201.84 10.262 201.84 cv
10.453 201.84 10.586 201.863 10.668 201.91 cv
10.754 201.957 10.797 202.02 10.793 202.098 cv
10.793 203.898 li
14.707 203.898 li
15.191 203.902 15.555 203.832 15.801 203.684 cv
16.051 203.543 16.176 203.285 16.172 202.914 cv
16.176 202.801 16.164 202.695 16.137 202.598 cv
16.117 202.508 16.094 202.426 16.063 202.348 cv
16.039 202.277 16.012 202.215 15.988 202.16 cv
15.965 202.113 15.953 202.066 15.953 202.02 cv
15.953 201.996 15.961 201.969 15.973 201.945 cv
15.988 201.922 16.012 201.906 16.047 201.891 cv
16.086 201.883 16.137 201.871 16.195 201.855 cv
16.262 201.848 16.34 201.84 16.426 201.84 cv
cp
f
13.133 194.223 mo
13.336 194.227 13.477 194.277 13.563 194.375 cv
13.648 194.48 13.691 194.598 13.691 194.723 cv
13.691 199.34 li
14.082 199.344 14.434 199.305 14.746 199.223 cv
15.059 199.148 15.328 199.016 15.547 198.832 cv
15.773 198.652 15.945 198.418 16.063 198.121 cv
16.188 197.832 16.246 197.473 16.242 197.047 cv
16.246 196.715 16.219 196.418 16.16 196.156 cv
16.109 195.895 16.047 195.668 15.977 195.477 cv
15.91 195.289 15.852 195.133 15.793 195.008 cv
15.742 194.887 15.715 194.793 15.711 194.73 cv
15.715 194.695 15.723 194.664 15.738 194.633 cv
15.758 194.605 15.785 194.582 15.82 194.562 cv
15.859 194.551 15.91 194.539 15.973 194.527 cv
16.039 194.523 16.117 194.52 16.211 194.516 cv
16.281 194.52 16.34 194.523 16.387 194.523 cv
16.434 194.531 16.477 194.535 16.516 194.543 cv
16.555 194.551 16.59 194.566 16.621 194.582 cv
16.652 194.605 16.684 194.629 16.711 194.652 cv
16.742 194.684 16.789 194.766 16.852 194.906 cv
16.918 195.047 16.98 195.23 17.043 195.453 cv
17.105 195.68 17.16 195.937 17.211 196.23 cv
17.258 196.523 17.281 196.836 17.285 197.168 cv
17.281 197.746 17.203 198.254 17.043 198.684 cv
16.883 199.121 16.645 199.484 16.328 199.777 cv
16.012 200.078 15.617 200.301 15.137 200.449 cv
14.66 200.598 14.102 200.672 13.465 200.672 cv
12.867 200.672 12.328 200.598 11.844 200.441 cv
11.367 200.289 10.957 200.062 10.621 199.766 cv
10.285 199.473 10.027 199.117 9.848 198.703 cv
9.668 198.289 9.578 197.824 9.578 197.309 cv
9.578 196.758 9.668 196.289 9.844 195.902 cv
10.023 195.516 10.262 195.199 10.559 194.945 cv
10.859 194.699 11.211 194.516 11.609 194.398 cv
12.016 194.285 12.445 194.227 12.898 194.223 cv
cp
12.75 195.516 mo
12.074 195.5 11.543 195.652 11.16 195.969 cv
10.777 196.285 10.586 196.754 10.582 197.371 cv
10.586 197.695 10.645 197.977 10.762 198.215 cv
10.883 198.457 11.043 198.656 11.238 198.816 cv
11.438 198.98 11.668 199.105 11.93 199.191 cv
12.191 199.281 12.465 199.332 12.75 199.34 cv
cp
f
15.031 187.855 mo
15.395 187.859 15.715 187.926 15.992 188.055 cv
16.273 188.187 16.508 188.375 16.699 188.617 cv
16.895 188.863 17.039 189.156 17.137 189.492 cv
17.234 189.832 17.281 190.203 17.285 190.605 cv
17.281 190.859 17.262 191.098 17.227 191.32 cv
17.184 191.547 17.137 191.746 17.078 191.926 cv
17.02 192.105 16.957 192.258 16.891 192.383 cv
16.828 192.508 16.77 192.602 16.715 192.656 cv
16.664 192.715 16.594 192.754 16.496 192.777 cv
16.406 192.805 16.277 192.816 16.117 192.816 cv
16.02 192.816 15.938 192.812 15.867 192.801 cv
15.801 192.793 15.746 192.781 15.703 192.762 cv
15.664 192.75 15.633 192.727 15.613 192.699 cv
15.598 192.672 15.59 192.641 15.586 192.602 cv
15.59 192.547 15.625 192.461 15.691 192.348 cv
15.766 192.238 15.844 192.102 15.922 191.934 cv
16.008 191.773 16.082 191.582 16.152 191.355 cv
16.223 191.137 16.258 190.879 16.258 190.582 cv
16.258 190.367 16.234 190.168 16.188 189.988 cv
16.141 189.812 16.074 189.66 15.98 189.531 cv
15.895 189.402 15.777 189.301 15.633 189.23 cv
15.496 189.16 15.328 189.125 15.133 189.125 cv
14.938 189.125 14.773 189.176 14.637 189.277 cv
14.504 189.379 14.383 189.516 14.277 189.68 cv
14.176 189.848 14.086 190.031 14 190.238 cv
13.922 190.449 13.836 190.664 13.746 190.883 cv
13.66 191.102 13.559 191.316 13.445 191.527 cv
13.336 191.738 13.203 191.93 13.039 192.094 cv
12.883 192.266 12.688 192.398 12.461 192.496 cv
12.238 192.602 11.973 192.652 11.66 192.648 cv
11.387 192.652 11.121 192.598 10.867 192.488 cv
10.617 192.383 10.398 192.223 10.207 192.008 cv
10.02 191.797 9.867 191.531 9.75 191.211 cv
9.637 190.891 9.578 190.52 9.578 190.09 cv
9.578 189.906 9.594 189.719 9.625 189.531 cv
9.656 189.348 9.695 189.18 9.742 189.023 cv
9.789 188.875 9.84 188.746 9.895 188.637 cv
9.949 188.535 10 188.453 10.039 188.395 cv
10.086 188.344 10.121 188.309 10.148 188.285 cv
10.18 188.27 10.215 188.254 10.25 188.246 cv
10.293 188.238 10.34 188.23 10.395 188.223 cv
10.453 188.215 10.523 188.211 10.605 188.211 cv
10.695 188.211 10.773 188.215 10.836 188.223 cv
10.906 188.23 10.957 188.246 10.996 188.262 cv
11.039 188.285 11.07 188.305 11.086 188.328 cv
11.105 188.355 11.113 188.387 11.113 188.414 cv
11.113 188.465 11.086 188.531 11.027 188.617 cv
10.973 188.707 10.91 188.82 10.844 188.961 cv
10.781 189.102 10.723 189.27 10.66 189.457 cv
10.605 189.648 10.574 189.863 10.574 190.105 cv
10.574 190.328 10.602 190.52 10.648 190.684 cv
10.703 190.852 10.773 190.988 10.859 191.094 cv
10.953 191.199 11.059 191.281 11.184 191.332 cv
11.309 191.391 11.445 191.418 11.59 191.414 cv
11.793 191.418 11.961 191.367 12.098 191.262 cv
12.238 191.16 12.359 191.023 12.461 190.855 cv
12.566 190.691 12.66 190.5 12.742 190.285 cv
12.828 190.074 12.914 189.859 13 189.637 cv
13.09 189.418 13.191 189.199 13.297 188.98 cv
13.406 188.766 13.535 188.574 13.691 188.406 cv
13.848 188.242 14.035 188.109 14.254 188.008 cv
14.473 187.91 14.734 187.859 15.031 187.855 cv
cp
f
12.953 183.414 mo
13.539 183.414 14.121 183.453 14.695 183.523 cv
15.27 183.602 15.836 183.711 16.398 183.852 cv
16.957 184 17.508 184.176 18.051 184.387 cv
18.594 184.598 19.129 184.844 19.66 185.121 cv
19.684 185.141 19.707 185.164 19.73 185.191 cv
19.75 185.227 19.77 185.266 19.785 185.312 cv
19.801 185.363 19.809 185.422 19.816 185.488 cv
19.816 185.559 19.82 185.641 19.824 185.73 cv
19.82 185.867 19.813 185.973 19.805 186.047 cv
19.789 186.125 19.77 186.18 19.742 186.211 cv
19.711 186.246 19.676 186.262 19.633 186.258 cv
19.586 186.258 19.531 186.242 19.473 186.215 cv
18.422 185.738 17.352 185.379 16.254 185.133 cv
15.156 184.891 14.047 184.77 12.93 184.766 cv
11.82 184.77 10.715 184.891 9.613 185.133 cv
8.516 185.379 7.445 185.746 6.398 186.23 cv
6.355 186.254 6.313 186.262 6.266 186.254 cv
6.227 186.254 6.191 186.23 6.164 186.184 cv
6.141 186.145 6.121 186.086 6.102 186.012 cv
6.09 185.941 6.082 185.844 6.078 185.723 cv
6.082 185.613 6.086 185.523 6.09 185.449 cv
6.102 185.379 6.113 185.32 6.125 185.273 cv
6.145 185.23 6.16 185.199 6.172 185.176 cv
6.191 185.16 6.207 185.145 6.227 185.129 cv
7.293 184.598 8.391 184.176 9.512 183.871 cv
10.641 183.566 11.785 183.414 12.953 183.414 cv
cp
f
265.16 543.355 mo
265.156 543.461 265.141 543.551 265.105 543.621 cv
265.07 543.699 265.023 543.758 264.969 543.801 cv
264.91 543.852 264.848 543.887 264.781 543.902 cv
264.707 543.926 264.637 543.934 264.574 543.934 cv
264.129 543.934 li
263.988 543.934 263.867 543.922 263.762 543.891 cv
263.656 543.867 263.559 543.812 263.465 543.734 cv
263.371 543.66 263.277 543.559 263.184 543.426 cv
263.09 543.297 262.988 543.133 262.883 542.93 cv
259.809 537.191 li
259.645 536.898 259.48 536.59 259.32 536.262 cv
259.152 535.941 259 535.625 258.863 535.316 cv
258.848 535.316 li
258.855 535.691 258.863 536.074 258.871 536.461 cv
258.875 536.852 258.875 537.238 258.879 537.621 cv
258.879 543.707 li
258.875 543.746 258.863 543.781 258.844 543.812 cv
258.82 543.848 258.785 543.875 258.734 543.891 cv
258.68 543.91 258.609 543.922 258.527 543.937 cv
258.441 543.949 258.336 543.957 258.207 543.957 cv
258.07 543.957 257.961 543.949 257.879 543.937 cv
257.793 543.922 257.727 543.91 257.68 543.891 cv
257.629 543.875 257.594 543.848 257.57 543.812 cv
257.547 543.781 257.535 543.746 257.539 543.707 cv
257.539 534.402 li
257.535 534.195 257.594 534.047 257.715 533.957 cv
257.832 533.871 257.961 533.828 258.102 533.824 cv
258.762 533.824 li
258.914 533.828 259.047 533.84 259.152 533.863 cv
259.254 533.891 259.348 533.934 259.434 533.992 cv
259.516 534.055 259.594 534.137 259.676 534.242 cv
259.75 534.352 259.832 534.488 259.918 534.645 cv
262.285 539.07 li
262.43 539.344 262.57 539.609 262.707 539.863 cv
262.84 540.121 262.969 540.375 263.098 540.621 cv
263.219 540.875 263.344 541.121 263.469 541.359 cv
263.59 541.602 263.711 541.844 263.836 542.086 cv
263.844 542.086 li
263.832 541.68 263.824 541.25 263.824 540.805 cv
263.816 540.359 263.816 539.934 263.82 539.523 cv
263.82 534.051 li
263.816 534.016 263.828 533.98 263.852 533.949 cv
263.875 533.918 263.91 533.891 263.965 533.867 cv
264.012 533.844 264.082 533.828 264.168 533.816 cv
264.254 533.809 264.363 533.805 264.504 533.801 cv
264.621 533.805 264.727 533.809 264.816 533.816 cv
264.902 533.828 264.969 533.844 265.02 533.867 cv
265.066 533.891 265.102 533.918 265.125 533.949 cv
265.145 533.98 265.156 534.016 265.16 534.051 cv
cp
f
273.711 543.715 mo
273.707 543.762 273.699 543.797 273.684 543.82 cv
273.664 543.852 273.629 543.875 273.586 543.895 cv
273.539 543.914 273.48 543.926 273.406 543.941 cv
273.328 543.949 273.234 543.957 273.129 543.957 cv
273.004 543.957 272.906 543.949 272.836 543.941 cv
272.758 543.926 272.699 543.914 272.656 543.895 cv
272.609 543.875 272.578 543.852 272.566 543.82 cv
272.547 543.797 272.539 543.762 272.543 543.715 cv
272.543 542.789 li
272.141 543.234 271.746 543.555 271.359 543.754 cv
270.965 543.957 270.57 544.055 270.176 544.059 cv
269.703 544.055 269.309 543.98 268.992 543.824 cv
268.672 543.672 268.414 543.461 268.219 543.191 cv
268.016 542.926 267.875 542.613 267.793 542.254 cv
267.703 541.898 267.66 541.465 267.664 540.957 cv
267.664 536.703 li
267.66 536.664 267.668 536.629 267.691 536.598 cv
267.707 536.57 267.742 536.547 267.797 536.52 cv
267.844 536.5 267.914 536.484 268 536.473 cv
268.082 536.469 268.184 536.465 268.313 536.461 cv
268.434 536.465 268.539 536.469 268.625 536.473 cv
268.707 536.484 268.773 536.5 268.82 536.52 cv
268.867 536.547 268.902 536.57 268.926 536.598 cv
268.945 536.629 268.953 536.664 268.957 536.703 cv
268.957 540.785 li
268.953 541.199 268.984 541.527 269.047 541.773 cv
269.105 542.02 269.195 542.23 269.32 542.402 cv
269.438 542.582 269.594 542.715 269.785 542.809 cv
269.969 542.906 270.188 542.957 270.438 542.953 cv
270.758 542.957 271.078 542.84 271.402 542.609 cv
271.719 542.383 272.059 542.047 272.418 541.602 cv
272.418 536.703 li
272.418 536.664 272.426 536.629 272.445 536.598 cv
272.461 536.57 272.496 536.547 272.551 536.52 cv
272.602 536.5 272.668 536.484 272.75 536.473 cv
272.828 536.469 272.934 536.465 273.066 536.461 cv
273.188 536.465 273.293 536.469 273.379 536.473 cv
273.461 536.484 273.523 536.5 273.57 536.52 cv
273.613 536.547 273.648 536.57 273.676 536.598 cv
273.695 536.629 273.707 536.664 273.711 536.703 cv
cp
f
286.488 543.715 mo
286.484 543.762 286.477 543.797 286.457 543.82 cv
286.434 543.852 286.398 543.875 286.355 543.895 cv
286.305 543.914 286.238 543.926 286.16 543.941 cv
286.074 543.949 285.973 543.957 285.848 543.957 cv
285.715 543.957 285.605 543.949 285.527 543.941 cv
285.441 543.926 285.375 543.914 285.328 543.895 cv
285.273 543.875 285.238 543.852 285.223 543.82 cv
285.199 543.797 285.191 543.762 285.191 543.715 cv
285.191 539.453 li
285.191 539.16 285.164 538.891 285.113 538.645 cv
285.059 538.402 284.977 538.191 284.863 538.012 cv
284.75 537.836 284.605 537.699 284.43 537.605 cv
284.25 537.512 284.039 537.465 283.805 537.465 cv
283.508 537.465 283.211 537.582 282.914 537.809 cv
282.609 538.043 282.281 538.375 281.926 538.812 cv
281.926 543.715 li
281.922 543.762 281.91 543.797 281.895 543.82 cv
281.871 543.852 281.84 543.875 281.793 543.895 cv
281.742 543.914 281.676 543.926 281.594 543.941 cv
281.508 543.949 281.402 543.957 281.281 543.957 cv
281.16 543.957 281.059 543.949 280.973 543.941 cv
280.887 543.926 280.816 543.914 280.77 543.895 cv
280.715 543.875 280.684 543.852 280.668 543.82 cv
280.648 543.797 280.637 543.762 280.641 543.715 cv
280.641 539.453 li
280.637 539.16 280.609 538.891 280.555 538.645 cv
280.496 538.402 280.41 538.191 280.297 538.012 cv
280.184 537.836 280.039 537.699 279.867 537.605 cv
279.688 537.512 279.48 537.465 279.246 537.465 cv
278.945 537.465 278.648 537.582 278.348 537.809 cv
278.047 538.043 277.719 538.375 277.367 538.812 cv
277.367 543.715 li
277.363 543.762 277.352 543.797 277.336 543.82 cv
277.313 543.852 277.281 543.875 277.234 543.895 cv
277.188 543.914 277.121 543.926 277.043 543.941 cv
276.957 543.949 276.852 543.957 276.723 543.957 cv
276.594 543.957 276.488 543.949 276.41 543.941 cv
276.324 543.926 276.258 543.914 276.211 543.895 cv
276.156 543.875 276.125 543.852 276.109 543.82 cv
276.09 543.797 276.078 543.762 276.082 543.715 cv
276.082 536.703 li
276.078 536.664 276.086 536.629 276.105 536.598 cv
276.117 536.57 276.148 536.547 276.199 536.52 cv
276.242 536.5 276.305 536.484 276.379 536.473 cv
276.449 536.469 276.543 536.465 276.668 536.461 cv
276.777 536.465 276.875 536.469 276.953 536.473 cv
277.027 536.484 277.086 536.5 277.129 536.52 cv
277.168 536.547 277.195 536.57 277.215 536.598 cv
277.23 536.629 277.238 536.664 277.242 536.703 cv
277.242 537.629 li
277.633 537.187 278.016 536.867 278.391 536.66 cv
278.758 536.457 279.137 536.352 279.52 536.352 cv
279.809 536.352 280.066 536.387 280.301 536.453 cv
280.527 536.523 280.734 536.617 280.914 536.738 cv
281.09 536.859 281.238 537.004 281.367 537.172 cv
281.488 537.344 281.594 537.535 281.68 537.738 cv
281.91 537.488 282.133 537.273 282.344 537.094 cv
282.555 536.922 282.758 536.777 282.953 536.664 cv
283.148 536.559 283.336 536.48 283.52 536.426 cv
283.703 536.379 283.891 536.352 284.078 536.352 cv
284.531 536.352 284.91 536.434 285.215 536.59 cv
285.52 536.754 285.766 536.965 285.961 537.227 cv
286.148 537.492 286.285 537.801 286.367 538.156 cv
286.445 538.512 286.484 538.887 286.488 539.281 cv
cp
f
295.285 540.113 mo
295.281 540.723 295.215 541.273 295.086 541.758 cv
294.949 542.246 294.754 542.66 294.5 543 cv
294.242 543.344 293.926 543.605 293.555 543.785 cv
293.18 543.969 292.754 544.055 292.27 544.059 cv
292.043 544.055 291.836 544.035 291.648 543.992 cv
291.461 543.945 291.273 543.875 291.094 543.777 cv
290.906 543.68 290.727 543.555 290.547 543.402 cv
290.363 543.254 290.172 543.074 289.973 542.859 cv
289.973 543.715 li
289.973 543.762 289.961 543.797 289.941 543.824 cv
289.918 543.859 289.883 543.883 289.84 543.898 cv
289.789 543.914 289.73 543.926 289.664 543.941 cv
289.59 543.949 289.5 543.957 289.395 543.957 cv
289.285 543.957 289.199 543.949 289.129 543.941 cv
289.055 543.926 288.992 543.914 288.949 543.898 cv
288.898 543.883 288.867 543.859 288.855 543.824 cv
288.836 543.797 288.828 543.762 288.832 543.715 cv
288.832 533.305 li
288.828 533.266 288.84 533.23 288.859 533.195 cv
288.875 533.168 288.906 533.141 288.961 533.117 cv
289.008 533.098 289.074 533.082 289.16 533.07 cv
289.238 533.062 289.344 533.059 289.473 533.055 cv
289.602 533.059 289.707 533.062 289.793 533.07 cv
289.871 533.082 289.938 533.098 289.984 533.117 cv
290.031 533.141 290.063 533.168 290.086 533.195 cv
290.102 533.23 290.113 533.266 290.117 533.305 cv
290.117 537.504 li
290.324 537.293 290.527 537.113 290.723 536.969 cv
290.918 536.824 291.105 536.707 291.293 536.613 cv
291.477 536.527 291.664 536.461 291.855 536.414 cv
292.039 536.375 292.238 536.352 292.449 536.352 cv
292.953 536.352 293.387 536.453 293.754 536.656 cv
294.113 536.859 294.406 537.133 294.633 537.469 cv
294.855 537.812 295.023 538.211 295.129 538.668 cv
295.23 539.125 295.281 539.605 295.285 540.113 cv
cp
293.953 540.262 mo
293.949 539.906 293.922 539.559 293.871 539.219 cv
293.813 538.883 293.719 538.586 293.582 538.324 cv
293.445 538.066 293.266 537.855 293.043 537.695 cv
292.816 537.539 292.535 537.461 292.203 537.457 cv
292.035 537.461 291.871 537.484 291.711 537.527 cv
291.547 537.578 291.383 537.656 291.215 537.762 cv
291.047 537.875 290.871 538.016 290.695 538.184 cv
290.512 538.359 290.32 538.574 290.117 538.828 cv
290.117 541.625 li
290.473 542.059 290.813 542.391 291.137 542.613 cv
291.461 542.844 291.797 542.957 292.148 542.953 cv
292.469 542.957 292.746 542.879 292.98 542.719 cv
293.207 542.566 293.395 542.359 293.539 542.098 cv
293.684 541.844 293.789 541.555 293.855 541.234 cv
293.918 540.918 293.949 540.594 293.953 540.262 cv
cp
f
303.195 539.906 mo
303.191 540.109 303.141 540.25 303.043 540.336 cv
302.938 540.422 302.82 540.465 302.695 540.465 cv
298.078 540.465 li
298.074 540.855 298.113 541.207 298.195 541.52 cv
298.27 541.832 298.402 542.102 298.586 542.32 cv
298.766 542.547 299 542.719 299.297 542.836 cv
299.586 542.961 299.945 543.02 300.371 543.016 cv
300.703 543.02 301 542.992 301.262 542.934 cv
301.523 542.883 301.75 542.82 301.941 542.75 cv
302.129 542.684 302.285 542.625 302.41 542.566 cv
302.531 542.516 302.625 542.488 302.688 542.484 cv
302.723 542.488 302.754 542.496 302.785 542.512 cv
302.813 542.531 302.836 542.559 302.855 542.594 cv
302.867 542.633 302.879 542.684 302.891 542.746 cv
302.895 542.812 302.898 542.891 302.902 542.984 cv
302.898 543.055 302.895 543.113 302.895 543.16 cv
302.887 543.207 302.883 543.25 302.875 543.289 cv
302.867 543.328 302.852 543.363 302.836 543.395 cv
302.813 543.426 302.789 543.457 302.766 543.484 cv
302.734 543.516 302.652 543.562 302.512 543.625 cv
302.371 543.691 302.188 543.754 301.965 543.816 cv
301.738 543.879 301.48 543.934 301.188 543.984 cv
300.895 544.031 300.582 544.055 300.25 544.059 cv
299.672 544.055 299.164 543.977 298.734 543.816 cv
298.297 543.656 297.934 543.418 297.641 543.102 cv
297.34 542.785 297.117 542.391 296.969 541.91 cv
296.82 541.434 296.746 540.875 296.746 540.238 cv
296.746 539.641 296.82 539.102 296.977 538.617 cv
297.129 538.141 297.355 537.73 297.652 537.395 cv
297.945 537.059 298.301 536.801 298.715 536.621 cv
299.129 536.441 299.594 536.352 300.109 536.352 cv
300.66 536.352 301.129 536.441 301.516 536.617 cv
301.902 536.797 302.219 537.035 302.473 537.332 cv
302.719 537.633 302.902 537.984 303.02 538.383 cv
303.133 538.789 303.191 539.219 303.195 539.672 cv
cp
301.902 539.523 mo
301.918 538.848 301.766 538.316 301.449 537.934 cv
301.133 537.551 300.664 537.359 300.047 537.355 cv
299.723 537.359 299.441 537.418 299.203 537.535 cv
298.961 537.656 298.762 537.816 298.602 538.012 cv
298.438 538.211 298.313 538.441 298.227 538.703 cv
298.137 538.965 298.086 539.238 298.078 539.523 cv
cp
f
309.262 537.16 mo
309.258 537.277 309.258 537.375 309.254 537.449 cv
309.246 537.531 309.234 537.594 309.223 537.633 cv
309.203 537.68 309.184 537.711 309.164 537.734 cv
309.137 537.758 309.105 537.77 309.066 537.77 cv
309.023 537.77 308.973 537.758 308.914 537.734 cv
308.852 537.711 308.781 537.687 308.711 537.664 cv
308.633 537.641 308.551 537.621 308.457 537.598 cv
308.363 537.582 308.262 537.57 308.152 537.566 cv
308.02 537.57 307.891 537.598 307.77 537.645 cv
307.645 537.699 307.516 537.785 307.379 537.902 cv
307.238 538.027 307.094 538.184 306.945 538.379 cv
306.793 538.574 306.625 538.816 306.445 539.102 cv
306.445 543.715 li
306.441 543.762 306.43 543.797 306.414 543.82 cv
306.391 543.852 306.359 543.875 306.313 543.895 cv
306.266 543.914 306.199 543.926 306.121 543.941 cv
306.035 543.949 305.93 543.957 305.801 543.957 cv
305.672 543.957 305.566 543.949 305.488 543.941 cv
305.402 543.926 305.336 543.914 305.289 543.895 cv
305.234 543.875 305.203 543.852 305.188 543.82 cv
305.168 543.797 305.156 543.762 305.16 543.715 cv
305.16 536.703 li
305.156 536.664 305.164 536.629 305.184 536.598 cv
305.195 536.57 305.227 536.547 305.277 536.52 cv
305.32 536.5 305.383 536.484 305.457 536.473 cv
305.527 536.469 305.621 536.465 305.746 536.461 cv
305.855 536.465 305.953 536.469 306.031 536.473 cv
306.105 536.484 306.164 536.5 306.207 536.52 cv
306.246 536.547 306.273 536.57 306.293 536.598 cv
306.309 536.629 306.316 536.664 306.32 536.703 cv
306.32 537.723 li
306.508 537.441 306.691 537.215 306.863 537.039 cv
307.031 536.863 307.191 536.723 307.344 536.621 cv
307.492 536.52 307.641 536.449 307.789 536.41 cv
307.938 536.371 308.086 536.352 308.238 536.352 cv
308.305 536.352 308.383 536.355 308.469 536.363 cv
308.555 536.371 308.645 536.387 308.738 536.406 cv
308.832 536.43 308.914 536.453 308.992 536.477 cv
309.063 536.504 309.117 536.531 309.152 536.555 cv
309.18 536.586 309.199 536.609 309.215 536.629 cv
309.223 536.656 309.234 536.687 309.242 536.719 cv
309.25 536.758 309.254 536.809 309.258 536.879 cv
309.258 536.949 309.258 537.043 309.262 537.16 cv
cp
f
321.02 540.129 mo
321.016 540.707 320.941 541.234 320.793 541.711 cv
320.641 542.195 320.414 542.609 320.117 542.953 cv
319.816 543.305 319.441 543.574 318.996 543.766 cv
318.543 543.961 318.023 544.055 317.434 544.059 cv
316.855 544.055 316.352 543.973 315.926 543.801 cv
315.496 543.633 315.141 543.383 314.855 543.055 cv
314.566 542.727 314.352 542.332 314.215 541.863 cv
314.074 541.398 314.008 540.867 314.008 540.27 cv
314.008 539.703 314.078 539.176 314.227 538.695 cv
314.371 538.215 314.598 537.801 314.898 537.449 cv
315.195 537.102 315.566 536.832 316.016 536.641 cv
316.461 536.449 316.984 536.352 317.582 536.352 cv
318.16 536.352 318.66 536.437 319.09 536.609 cv
319.516 536.781 319.875 537.031 320.16 537.359 cv
320.445 537.687 320.66 538.086 320.805 538.551 cv
320.945 539.02 321.016 539.547 321.02 540.129 cv
cp
319.688 540.215 mo
319.684 539.84 319.648 539.48 319.582 539.141 cv
319.508 538.805 319.391 538.512 319.23 538.254 cv
319.066 538.004 318.848 537.801 318.57 537.648 cv
318.289 537.504 317.941 537.43 317.531 537.426 cv
317.145 537.43 316.816 537.496 316.543 537.629 cv
316.266 537.766 316.039 537.957 315.863 538.203 cv
315.684 538.449 315.551 538.742 315.469 539.078 cv
315.379 539.418 315.336 539.785 315.34 540.184 cv
315.336 540.57 315.371 540.934 315.445 541.27 cv
315.512 541.609 315.629 541.902 315.797 542.152 cv
315.961 542.406 316.184 542.609 316.461 542.754 cv
316.738 542.906 317.086 542.98 317.5 542.977 cv
317.875 542.98 318.203 542.91 318.484 542.773 cv
318.762 542.641 318.988 542.453 319.168 542.203 cv
319.344 541.961 319.473 541.668 319.559 541.332 cv
319.641 540.996 319.684 540.625 319.688 540.215 cv
cp
f
326.75 533.816 mo
326.746 533.918 326.742 533.996 326.734 534.055 cv
326.723 534.117 326.711 534.168 326.699 534.199 cv
326.684 534.238 326.668 534.262 326.648 534.273 cv
326.625 534.289 326.598 534.297 326.57 534.293 cv
326.531 534.297 326.484 534.285 326.434 534.258 cv
326.375 534.238 326.309 534.211 326.234 534.18 cv
326.152 534.152 326.063 534.125 325.957 534.102 cv
325.848 534.078 325.723 534.066 325.59 534.066 cv
325.395 534.066 325.23 534.098 325.098 534.16 cv
324.957 534.223 324.848 534.32 324.77 534.453 cv
324.684 534.586 324.625 534.758 324.59 534.969 cv
324.551 535.18 324.531 535.437 324.535 535.734 cv
324.535 536.5 li
326.102 536.5 li
326.141 536.504 326.176 536.512 326.207 536.527 cv
326.234 536.547 326.262 536.578 326.285 536.621 cv
326.309 536.668 326.324 536.727 326.34 536.789 cv
326.348 536.859 326.355 536.941 326.359 537.035 cv
326.355 537.227 326.332 537.359 326.289 537.441 cv
326.238 537.527 326.176 537.57 326.102 537.566 cv
324.535 537.566 li
324.535 543.715 li
324.531 543.762 324.523 543.797 324.504 543.82 cv
324.48 543.852 324.445 543.875 324.398 543.895 cv
324.348 543.914 324.281 543.926 324.199 543.941 cv
324.113 543.949 324.008 543.957 323.891 543.957 cv
323.762 543.957 323.66 543.949 323.578 543.941 cv
323.492 543.926 323.426 543.914 323.379 543.895 cv
323.328 543.875 323.293 543.852 323.273 543.82 cv
323.25 543.797 323.238 543.762 323.242 543.715 cv
323.242 537.566 li
322.254 537.566 li
322.168 537.57 322.105 537.527 322.066 537.441 cv
322.023 537.359 322 537.227 322.004 537.035 cv
322 536.941 322.008 536.859 322.02 536.789 cv
322.027 536.727 322.043 536.668 322.066 536.621 cv
322.086 536.578 322.109 536.547 322.145 536.527 cv
322.172 536.512 322.211 536.504 322.254 536.5 cv
323.242 536.5 li
323.242 535.773 li
323.238 535.289 323.285 534.871 323.379 534.516 cv
323.469 534.168 323.605 533.879 323.793 533.656 cv
323.977 533.434 324.211 533.27 324.5 533.16 cv
324.781 533.055 325.117 533 325.504 533 cv
325.68 533 325.855 533.02 326.031 533.051 cv
326.199 533.09 326.332 533.125 326.43 533.16 cv
326.52 533.203 326.582 533.238 326.617 533.266 cv
326.645 533.301 326.672 533.34 326.695 533.387 cv
326.715 533.437 326.727 533.5 326.738 533.566 cv
326.742 533.641 326.746 533.723 326.75 533.816 cv
cp
f
336.949 541.082 mo
336.945 541.555 336.859 541.977 336.688 542.344 cv
336.512 542.719 336.27 543.031 335.961 543.285 cv
335.652 543.543 335.289 543.734 334.871 543.863 cv
334.449 543.992 334 544.055 333.52 544.059 cv
333.18 544.055 332.863 544.027 332.578 543.973 cv
332.289 543.914 332.035 543.848 331.809 543.762 cv
331.582 543.684 331.391 543.598 331.238 543.504 cv
331.082 543.418 330.977 543.34 330.918 543.277 cv
330.859 543.215 330.816 543.137 330.789 543.043 cv
330.758 542.949 330.742 542.82 330.746 542.656 cv
330.742 542.543 330.746 542.449 330.762 542.371 cv
330.77 542.297 330.785 542.234 330.809 542.187 cv
330.824 542.141 330.852 542.109 330.887 542.09 cv
330.914 542.074 330.949 542.066 330.992 542.062 cv
331.063 542.066 331.164 542.109 331.301 542.195 cv
331.43 542.285 331.602 542.383 331.813 542.484 cv
332.02 542.594 332.27 542.691 332.563 542.777 cv
332.855 542.871 333.195 542.914 333.582 542.914 cv
333.871 542.914 334.137 542.875 334.379 542.797 cv
334.617 542.719 334.824 542.609 335.004 542.465 cv
335.176 542.324 335.313 542.148 335.406 541.937 cv
335.5 541.73 335.547 541.496 335.547 541.23 cv
335.547 540.949 335.48 540.703 335.352 540.496 cv
335.219 540.297 335.047 540.121 334.836 539.965 cv
334.621 539.816 334.379 539.676 334.105 539.543 cv
333.832 539.418 333.551 539.285 333.27 539.152 cv
332.98 539.02 332.703 538.875 332.434 538.711 cv
332.164 538.555 331.922 538.363 331.711 538.145 cv
331.492 537.926 331.32 537.672 331.191 537.375 cv
331.055 537.086 330.988 536.734 330.992 536.32 cv
330.988 535.902 331.066 535.527 331.223 535.195 cv
331.375 534.867 331.586 534.59 331.863 534.363 cv
332.133 534.145 332.457 533.973 332.836 533.855 cv
333.211 533.738 333.621 533.68 334.059 533.68 cv
334.277 533.68 334.5 533.699 334.73 533.738 cv
334.953 533.777 335.164 533.828 335.367 533.891 cv
335.563 533.957 335.742 534.031 335.902 534.109 cv
336.055 534.191 336.156 534.258 336.211 534.305 cv
336.258 534.359 336.293 534.398 336.309 534.422 cv
336.324 534.453 336.336 534.488 336.348 534.531 cv
336.355 534.578 336.363 534.633 336.371 534.691 cv
336.375 534.758 336.379 534.836 336.379 534.934 cv
336.379 535.027 336.375 535.113 336.367 535.184 cv
336.359 535.262 336.348 535.32 336.332 535.367 cv
336.316 535.414 336.293 535.449 336.266 535.473 cv
336.234 535.496 336.203 535.508 336.168 535.508 cv
336.109 535.508 336.02 535.473 335.898 535.402 cv
335.773 535.332 335.621 535.25 335.449 535.156 cv
335.27 535.066 335.063 534.984 334.824 534.906 cv
334.578 534.832 334.309 534.793 334.012 534.793 cv
333.73 534.793 333.484 534.832 333.277 534.906 cv
333.066 534.984 332.895 535.086 332.762 535.207 cv
332.625 535.332 332.523 535.477 332.457 535.648 cv
332.391 535.82 332.359 536.004 332.359 536.195 cv
332.359 536.48 332.422 536.723 332.551 536.922 cv
332.68 537.125 332.852 537.305 333.07 537.457 cv
333.281 537.617 333.527 537.758 333.805 537.887 cv
334.078 538.02 334.359 538.152 334.648 538.281 cv
334.934 538.414 335.215 538.559 335.488 538.715 cv
335.762 538.875 336.008 539.062 336.227 539.277 cv
336.441 539.496 336.613 539.75 336.75 540.043 cv
336.879 540.336 336.945 540.684 336.949 541.082 cv
cp
f
344.715 543.715 mo
344.711 543.762 344.703 543.797 344.688 543.82 cv
344.668 543.852 344.633 543.875 344.59 543.895 cv
344.543 543.914 344.484 543.926 344.41 543.941 cv
344.332 543.949 344.238 543.957 344.133 543.957 cv
344.008 543.957 343.91 543.949 343.84 543.941 cv
343.762 543.926 343.703 543.914 343.66 543.895 cv
343.613 543.875 343.582 543.852 343.57 543.82 cv
343.551 543.797 343.543 543.762 343.547 543.715 cv
343.547 542.789 li
343.145 543.234 342.75 543.555 342.363 543.754 cv
341.969 543.957 341.574 544.055 341.18 544.059 cv
340.707 544.055 340.313 543.98 339.996 543.824 cv
339.676 543.672 339.418 543.461 339.223 543.191 cv
339.02 542.926 338.879 542.613 338.797 542.254 cv
338.707 541.898 338.664 541.465 338.668 540.957 cv
338.668 536.703 li
338.664 536.664 338.672 536.629 338.695 536.598 cv
338.711 536.57 338.746 536.547 338.801 536.52 cv
338.848 536.5 338.918 536.484 339.004 536.473 cv
339.086 536.469 339.188 536.465 339.316 536.461 cv
339.438 536.465 339.543 536.469 339.629 536.473 cv
339.711 536.484 339.777 536.5 339.824 536.52 cv
339.871 536.547 339.906 536.57 339.93 536.598 cv
339.949 536.629 339.957 536.664 339.961 536.703 cv
339.961 540.785 li
339.957 541.199 339.988 541.527 340.051 541.773 cv
340.109 542.02 340.199 542.23 340.324 542.402 cv
340.441 542.582 340.598 542.715 340.789 542.809 cv
340.973 542.906 341.191 542.957 341.441 542.953 cv
341.762 542.957 342.082 542.84 342.406 542.609 cv
342.723 542.383 343.063 542.047 343.422 541.602 cv
343.422 536.703 li
343.422 536.664 343.43 536.629 343.449 536.598 cv
343.465 536.57 343.5 536.547 343.555 536.52 cv
343.605 536.5 343.672 536.484 343.754 536.473 cv
343.832 536.469 343.938 536.465 344.07 536.461 cv
344.191 536.465 344.297 536.469 344.383 536.473 cv
344.465 536.484 344.527 536.5 344.574 536.52 cv
344.617 536.547 344.652 536.57 344.68 536.598 cv
344.699 536.629 344.711 536.664 344.715 536.703 cv
cp
f
353.57 540.113 mo
353.566 540.723 353.5 541.273 353.371 541.758 cv
353.234 542.246 353.039 542.66 352.785 543 cv
352.527 543.344 352.211 543.605 351.84 543.785 cv
351.465 543.969 351.039 544.055 350.555 544.059 cv
350.328 544.055 350.121 544.035 349.934 543.992 cv
349.746 543.945 349.559 543.875 349.379 543.777 cv
349.191 543.68 349.012 543.555 348.832 543.402 cv
348.648 543.254 348.457 543.074 348.258 542.859 cv
348.258 543.715 li
348.258 543.762 348.246 543.797 348.227 543.824 cv
348.203 543.859 348.168 543.883 348.125 543.898 cv
348.074 543.914 348.016 543.926 347.949 543.941 cv
347.875 543.949 347.785 543.957 347.68 543.957 cv
347.57 543.957 347.484 543.949 347.414 543.941 cv
347.34 543.926 347.277 543.914 347.234 543.898 cv
347.184 543.883 347.152 543.859 347.141 543.824 cv
347.121 543.797 347.113 543.762 347.117 543.715 cv
347.117 533.305 li
347.113 533.266 347.125 533.23 347.145 533.195 cv
347.16 533.168 347.191 533.141 347.246 533.117 cv
347.293 533.098 347.359 533.082 347.445 533.07 cv
347.523 533.062 347.629 533.059 347.758 533.055 cv
347.887 533.059 347.992 533.062 348.078 533.07 cv
348.156 533.082 348.223 533.098 348.27 533.117 cv
348.316 533.141 348.348 533.168 348.371 533.195 cv
348.387 533.23 348.398 533.266 348.402 533.305 cv
348.402 537.504 li
348.609 537.293 348.813 537.113 349.008 536.969 cv
349.203 536.824 349.391 536.707 349.578 536.613 cv
349.762 536.527 349.949 536.461 350.141 536.414 cv
350.324 536.375 350.523 536.352 350.734 536.352 cv
351.238 536.352 351.672 536.453 352.039 536.656 cv
352.398 536.859 352.691 537.133 352.918 537.469 cv
353.141 537.812 353.309 538.211 353.414 538.668 cv
353.516 539.125 353.566 539.605 353.57 540.113 cv
cp
352.238 540.262 mo
352.234 539.906 352.207 539.559 352.156 539.219 cv
352.098 538.883 352.004 538.586 351.867 538.324 cv
351.73 538.066 351.551 537.855 351.328 537.695 cv
351.102 537.539 350.82 537.461 350.488 537.457 cv
350.32 537.461 350.156 537.484 349.996 537.527 cv
349.832 537.578 349.668 537.656 349.5 537.762 cv
349.332 537.875 349.156 538.016 348.98 538.184 cv
348.797 538.359 348.605 538.574 348.402 538.828 cv
348.402 541.625 li
348.758 542.059 349.098 542.391 349.422 542.613 cv
349.746 542.844 350.082 542.957 350.434 542.953 cv
350.754 542.957 351.031 542.879 351.266 542.719 cv
351.492 542.566 351.68 542.359 351.824 542.098 cv
351.969 541.844 352.074 541.555 352.141 541.234 cv
352.203 540.918 352.234 540.594 352.238 540.262 cv
cp
f
358.727 539.977 mo
358.727 540.18 358.703 540.316 358.656 540.395 cv
358.609 540.473 358.539 540.512 358.453 540.512 cv
355.195 540.512 li
355.102 540.512 355.035 540.473 354.988 540.391 cv
354.941 540.312 354.918 540.176 354.918 539.977 cv
354.918 539.781 354.941 539.641 354.988 539.562 cv
355.035 539.484 355.102 539.445 355.195 539.445 cv
358.453 539.445 li
358.492 539.445 358.531 539.453 358.566 539.469 cv
358.598 539.484 358.625 539.516 358.652 539.559 cv
358.672 539.605 358.691 539.66 358.707 539.727 cv
358.719 539.797 358.727 539.883 358.727 539.977 cv
cp
f
361.98 543.707 mo
361.977 543.75 361.969 543.785 361.949 543.816 cv
361.926 543.848 361.887 543.875 361.84 543.891 cv
361.785 543.91 361.719 543.922 361.633 543.937 cv
361.547 543.949 361.438 543.957 361.313 543.957 cv
361.184 543.957 361.078 543.949 360.992 543.937 cv
360.902 543.922 360.832 543.91 360.781 543.891 cv
360.727 543.875 360.691 543.848 360.672 543.816 cv
360.648 543.785 360.637 543.75 360.641 543.707 cv
360.641 534.027 li
360.637 533.988 360.648 533.953 360.676 533.918 cv
360.695 533.891 360.734 533.863 360.793 533.844 cv
360.844 533.828 360.914 533.812 361.004 533.797 cv
361.086 533.785 361.188 533.781 361.313 533.777 cv
361.438 533.781 361.547 533.785 361.633 533.797 cv
361.719 533.812 361.785 533.828 361.84 533.844 cv
361.887 533.863 361.926 533.891 361.949 533.918 cv
361.969 533.953 361.977 533.988 361.98 534.027 cv
cp
f
374.969 543.715 mo
374.965 543.762 374.957 543.797 374.938 543.82 cv
374.914 543.852 374.879 543.875 374.836 543.895 cv
374.785 543.914 374.719 543.926 374.641 543.941 cv
374.555 543.949 374.453 543.957 374.328 543.957 cv
374.195 543.957 374.086 543.949 374.008 543.941 cv
373.922 543.926 373.855 543.914 373.809 543.895 cv
373.754 543.875 373.719 543.852 373.703 543.82 cv
373.68 543.797 373.672 543.762 373.672 543.715 cv
373.672 539.453 li
373.672 539.16 373.645 538.891 373.594 538.645 cv
373.539 538.402 373.457 538.191 373.344 538.012 cv
373.23 537.836 373.086 537.699 372.91 537.605 cv
372.73 537.512 372.52 537.465 372.285 537.465 cv
371.988 537.465 371.691 537.582 371.395 537.809 cv
371.09 538.043 370.762 538.375 370.406 538.812 cv
370.406 543.715 li
370.402 543.762 370.391 543.797 370.375 543.82 cv
370.352 543.852 370.32 543.875 370.273 543.895 cv
370.223 543.914 370.156 543.926 370.074 543.941 cv
369.988 543.949 369.883 543.957 369.762 543.957 cv
369.641 543.957 369.539 543.949 369.453 543.941 cv
369.367 543.926 369.297 543.914 369.25 543.895 cv
369.195 543.875 369.164 543.852 369.148 543.82 cv
369.129 543.797 369.117 543.762 369.121 543.715 cv
369.121 539.453 li
369.117 539.16 369.09 538.891 369.035 538.645 cv
368.977 538.402 368.891 538.191 368.777 538.012 cv
368.664 537.836 368.52 537.699 368.348 537.605 cv
368.168 537.512 367.961 537.465 367.727 537.465 cv
367.426 537.465 367.129 537.582 366.828 537.809 cv
366.527 538.043 366.199 538.375 365.848 538.812 cv
365.848 543.715 li
365.844 543.762 365.832 543.797 365.816 543.82 cv
365.793 543.852 365.762 543.875 365.715 543.895 cv
365.668 543.914 365.602 543.926 365.523 543.941 cv
365.438 543.949 365.332 543.957 365.203 543.957 cv
365.074 543.957 364.969 543.949 364.891 543.941 cv
364.805 543.926 364.738 543.914 364.691 543.895 cv
364.637 543.875 364.605 543.852 364.59 543.82 cv
364.57 543.797 364.559 543.762 364.563 543.715 cv
364.563 536.703 li
364.559 536.664 364.566 536.629 364.586 536.598 cv
364.598 536.57 364.629 536.547 364.68 536.52 cv
364.723 536.5 364.785 536.484 364.859 536.473 cv
364.93 536.469 365.023 536.465 365.148 536.461 cv
365.258 536.465 365.355 536.469 365.434 536.473 cv
365.508 536.484 365.566 536.5 365.609 536.52 cv
365.648 536.547 365.676 536.57 365.695 536.598 cv
365.711 536.629 365.719 536.664 365.723 536.703 cv
365.723 537.629 li
366.113 537.187 366.496 536.867 366.871 536.66 cv
367.238 536.457 367.617 536.352 368 536.352 cv
368.289 536.352 368.547 536.387 368.781 536.453 cv
369.008 536.523 369.215 536.617 369.395 536.738 cv
369.57 536.859 369.719 537.004 369.848 537.172 cv
369.969 537.344 370.074 537.535 370.16 537.738 cv
370.391 537.488 370.613 537.273 370.824 537.094 cv
371.035 536.922 371.238 536.777 371.434 536.664 cv
371.629 536.559 371.816 536.48 372 536.426 cv
372.184 536.379 372.371 536.352 372.559 536.352 cv
373.012 536.352 373.391 536.434 373.695 536.59 cv
374 536.754 374.246 536.965 374.441 537.227 cv
374.629 537.492 374.766 537.801 374.848 538.156 cv
374.926 538.512 374.965 538.887 374.969 539.281 cv
cp
f
382.598 543.723 mo
382.594 543.785 382.574 543.832 382.535 543.863 cv
382.492 543.895 382.434 543.918 382.363 543.934 cv
382.285 543.949 382.18 543.957 382.043 543.957 cv
381.906 543.957 381.797 543.949 381.719 543.934 cv
381.633 543.918 381.574 543.895 381.543 543.863 cv
381.504 543.832 381.488 543.785 381.492 543.723 cv
381.492 543.023 li
381.184 543.352 380.84 543.605 380.465 543.785 cv
380.086 543.969 379.688 544.055 379.27 544.059 cv
378.895 544.055 378.563 544.008 378.266 543.914 cv
377.969 543.816 377.715 543.68 377.504 543.496 cv
377.293 543.316 377.129 543.094 377.012 542.828 cv
376.895 542.566 376.836 542.266 376.84 541.922 cv
376.836 541.531 376.914 541.187 377.078 540.895 cv
377.234 540.605 377.469 540.363 377.773 540.172 cv
378.074 539.98 378.441 539.836 378.879 539.738 cv
379.313 539.645 379.805 539.598 380.352 539.594 cv
381.32 539.594 li
381.32 539.047 li
381.316 538.777 381.289 538.539 381.234 538.332 cv
381.176 538.125 381.082 537.953 380.957 537.812 cv
380.824 537.676 380.66 537.57 380.461 537.5 cv
380.254 537.43 380.004 537.395 379.715 537.395 cv
379.395 537.395 379.109 537.434 378.859 537.508 cv
378.602 537.586 378.383 537.668 378.195 537.758 cv
378.008 537.852 377.848 537.937 377.723 538.008 cv
377.59 538.086 377.496 538.121 377.438 538.121 cv
377.395 538.121 377.359 538.113 377.328 538.09 cv
377.297 538.074 377.27 538.043 377.246 537.996 cv
377.223 537.957 377.203 537.902 377.195 537.836 cv
377.18 537.773 377.176 537.703 377.18 537.621 cv
377.176 537.496 377.184 537.391 377.207 537.312 cv
377.223 537.238 377.27 537.168 377.34 537.098 cv
377.41 537.031 377.531 536.953 377.703 536.863 cv
377.875 536.773 378.07 536.691 378.293 536.613 cv
378.516 536.543 378.762 536.48 379.027 536.426 cv
379.293 536.379 379.559 536.352 379.832 536.352 cv
380.332 536.352 380.762 536.41 381.113 536.523 cv
381.465 536.641 381.75 536.809 381.973 537.027 cv
382.188 537.25 382.348 537.523 382.449 537.848 cv
382.547 538.18 382.594 538.562 382.598 538.992 cv
cp
381.32 540.52 mo
380.219 540.52 li
379.863 540.523 379.559 540.555 379.301 540.609 cv
379.039 540.672 378.824 540.758 378.652 540.875 cv
378.48 540.992 378.355 541.133 378.277 541.297 cv
378.195 541.461 378.152 541.648 378.156 541.859 cv
378.152 542.227 378.27 542.52 378.5 542.73 cv
378.73 542.949 379.055 543.055 379.473 543.055 cv
379.809 543.055 380.121 542.969 380.41 542.797 cv
380.699 542.625 381 542.363 381.32 542.008 cv
cp
f
390.816 537.02 mo
390.813 537.203 390.789 537.336 390.742 537.414 cv
390.691 537.496 390.629 537.535 390.555 537.535 cv
389.547 537.535 li
389.727 537.723 389.855 537.93 389.93 538.156 cv
390 538.383 390.035 538.617 390.039 538.859 cv
390.035 539.266 389.969 539.625 389.844 539.937 cv
389.711 540.25 389.527 540.516 389.285 540.727 cv
389.043 540.945 388.754 541.109 388.426 541.223 cv
388.09 541.34 387.723 541.398 387.32 541.395 cv
387.031 541.398 386.758 541.359 386.504 541.281 cv
386.242 541.207 386.047 541.113 385.91 540.996 cv
385.816 541.094 385.738 541.199 385.68 541.316 cv
385.617 541.437 385.586 541.574 385.59 541.727 cv
385.586 541.91 385.672 542.062 385.844 542.18 cv
386.012 542.305 386.234 542.367 386.516 542.375 cv
388.348 542.453 li
388.695 542.465 389.012 542.512 389.305 542.598 cv
389.594 542.684 389.848 542.809 390.063 542.965 cv
390.273 543.125 390.441 543.316 390.563 543.547 cv
390.68 543.781 390.738 544.051 390.742 544.355 cv
390.738 544.676 390.672 544.98 390.539 545.273 cv
390.402 545.562 390.195 545.816 389.918 546.039 cv
389.637 546.258 389.281 546.434 388.852 546.562 cv
388.422 546.687 387.914 546.75 387.328 546.754 cv
386.758 546.75 386.273 546.703 385.879 546.609 cv
385.48 546.512 385.156 546.379 384.902 546.215 cv
384.648 546.047 384.465 545.852 384.352 545.621 cv
384.234 545.387 384.176 545.133 384.18 544.867 cv
384.176 544.695 384.195 544.531 384.242 544.371 cv
384.281 544.207 384.344 544.055 384.43 543.91 cv
384.512 543.766 384.621 543.629 384.75 543.492 cv
384.875 543.363 385.02 543.23 385.191 543.102 cv
384.934 542.973 384.746 542.809 384.625 542.609 cv
384.504 542.414 384.445 542.203 384.445 541.969 cv
384.445 541.656 384.508 541.371 384.637 541.121 cv
384.766 540.871 384.926 540.648 385.121 540.449 cv
384.957 540.258 384.832 540.043 384.738 539.801 cv
384.645 539.562 384.598 539.27 384.598 538.922 cv
384.598 538.527 384.664 538.168 384.801 537.848 cv
384.934 537.531 385.121 537.266 385.363 537.047 cv
385.602 536.832 385.887 536.664 386.223 536.543 cv
386.555 536.43 386.922 536.371 387.32 536.367 cv
387.531 536.371 387.73 536.383 387.914 536.402 cv
388.098 536.43 388.27 536.461 388.434 536.5 cv
390.555 536.5 li
390.641 536.504 390.707 536.547 390.75 536.629 cv
390.793 536.719 390.813 536.848 390.816 537.02 cv
cp
388.809 538.867 mo
388.805 538.395 388.672 538.023 388.414 537.75 cv
388.148 537.484 387.777 537.348 387.297 537.348 cv
387.043 537.348 386.824 537.391 386.645 537.473 cv
386.457 537.559 386.305 537.672 386.184 537.816 cv
386.063 537.965 385.973 538.133 385.914 538.32 cv
385.852 538.508 385.82 538.707 385.824 538.914 cv
385.82 539.379 385.953 539.742 386.215 540.008 cv
386.477 540.273 386.844 540.406 387.32 540.402 cv
387.57 540.406 387.789 540.367 387.98 540.281 cv
388.164 540.203 388.32 540.09 388.445 539.949 cv
388.566 539.809 388.656 539.645 388.719 539.453 cv
388.773 539.27 388.805 539.074 388.809 538.867 cv
cp
389.453 544.426 mo
389.449 544.121 389.324 543.891 389.082 543.727 cv
388.832 543.566 388.5 543.477 388.082 543.465 cv
386.266 543.402 li
386.098 543.535 385.961 543.66 385.859 543.773 cv
385.75 543.891 385.668 544 385.605 544.109 cv
385.543 544.215 385.5 544.32 385.477 544.426 cv
385.453 544.527 385.441 544.633 385.441 544.742 cv
385.441 545.078 385.609 545.332 385.953 545.512 cv
386.293 545.684 386.773 545.773 387.391 545.773 cv
387.777 545.773 388.102 545.734 388.367 545.66 cv
388.625 545.582 388.836 545.48 389 545.359 cv
389.156 545.23 389.273 545.09 389.348 544.93 cv
389.414 544.77 389.449 544.602 389.453 544.426 cv
cp
f
398.379 539.906 mo
398.375 540.109 398.324 540.25 398.227 540.336 cv
398.121 540.422 398.004 540.465 397.879 540.465 cv
393.262 540.465 li
393.258 540.855 393.297 541.207 393.379 541.52 cv
393.453 541.832 393.586 542.102 393.77 542.32 cv
393.949 542.547 394.184 542.719 394.48 542.836 cv
394.77 542.961 395.129 543.02 395.555 543.016 cv
395.887 543.02 396.184 542.992 396.445 542.934 cv
396.707 542.883 396.934 542.82 397.125 542.75 cv
397.313 542.684 397.469 542.625 397.594 542.566 cv
397.715 542.516 397.809 542.488 397.871 542.484 cv
397.906 542.488 397.938 542.496 397.969 542.512 cv
397.996 542.531 398.02 542.559 398.039 542.594 cv
398.051 542.633 398.063 542.684 398.074 542.746 cv
398.078 542.812 398.082 542.891 398.086 542.984 cv
398.082 543.055 398.078 543.113 398.078 543.16 cv
398.07 543.207 398.066 543.25 398.059 543.289 cv
398.051 543.328 398.035 543.363 398.02 543.395 cv
397.996 543.426 397.973 543.457 397.949 543.484 cv
397.918 543.516 397.836 543.562 397.695 543.625 cv
397.555 543.691 397.371 543.754 397.148 543.816 cv
396.922 543.879 396.664 543.934 396.371 543.984 cv
396.078 544.031 395.766 544.055 395.434 544.059 cv
394.855 544.055 394.348 543.977 393.918 543.816 cv
393.48 543.656 393.117 543.418 392.824 543.102 cv
392.523 542.785 392.301 542.391 392.152 541.91 cv
392.004 541.434 391.93 540.875 391.93 540.238 cv
391.93 539.641 392.004 539.102 392.16 538.617 cv
392.313 538.141 392.539 537.73 392.836 537.395 cv
393.129 537.059 393.484 536.801 393.898 536.621 cv
394.313 536.441 394.777 536.352 395.293 536.352 cv
395.844 536.352 396.313 536.441 396.699 536.617 cv
397.086 536.797 397.402 537.035 397.656 537.332 cv
397.902 537.633 398.086 537.984 398.203 538.383 cv
398.316 538.789 398.375 539.219 398.379 539.672 cv
cp
397.086 539.523 mo
397.102 538.848 396.949 538.316 396.633 537.934 cv
396.316 537.551 395.848 537.359 395.23 537.355 cv
394.906 537.359 394.625 537.418 394.387 537.535 cv
394.145 537.656 393.945 537.816 393.785 538.012 cv
393.621 538.211 393.496 538.441 393.41 538.703 cv
393.32 538.965 393.27 539.238 393.262 539.523 cv
cp
f
404.746 541.805 mo
404.742 542.168 404.676 542.488 404.547 542.766 cv
404.414 543.047 404.227 543.281 403.984 543.473 cv
403.738 543.668 403.445 543.812 403.109 543.91 cv
402.77 544.008 402.398 544.055 401.996 544.059 cv
401.742 544.055 401.504 544.035 401.281 544 cv
401.055 543.957 400.855 543.91 400.676 543.852 cv
400.496 543.793 400.344 543.73 400.219 543.664 cv
400.094 543.602 400 543.543 399.945 543.488 cv
399.887 543.437 399.848 543.367 399.824 543.27 cv
399.797 543.18 399.785 543.051 399.785 542.891 cv
399.785 542.793 399.789 542.711 399.801 542.641 cv
399.809 542.574 399.82 542.52 399.84 542.477 cv
399.852 542.437 399.875 542.406 399.902 542.387 cv
399.93 542.371 399.961 542.363 400 542.359 cv
400.055 542.363 400.141 542.398 400.254 542.465 cv
400.363 542.539 400.5 542.617 400.668 542.695 cv
400.828 542.781 401.02 542.855 401.246 542.926 cv
401.465 542.996 401.723 543.031 402.02 543.031 cv
402.234 543.031 402.434 543.008 402.613 542.961 cv
402.789 542.914 402.941 542.848 403.07 542.754 cv
403.199 542.668 403.301 542.551 403.371 542.406 cv
403.441 542.27 403.477 542.102 403.477 541.906 cv
403.477 541.711 403.426 541.547 403.324 541.41 cv
403.223 541.277 403.086 541.156 402.922 541.051 cv
402.754 540.949 402.57 540.859 402.363 540.773 cv
402.152 540.695 401.938 540.609 401.719 540.52 cv
401.5 540.434 401.285 540.332 401.074 540.219 cv
400.863 540.109 400.672 539.977 400.508 539.812 cv
400.336 539.656 400.203 539.461 400.105 539.234 cv
400 539.012 399.949 538.746 399.953 538.434 cv
399.949 538.16 400.004 537.895 400.113 537.641 cv
400.219 537.391 400.379 537.172 400.594 536.98 cv
400.805 536.793 401.07 536.641 401.391 536.523 cv
401.711 536.41 402.082 536.352 402.512 536.352 cv
402.695 536.352 402.883 536.367 403.07 536.398 cv
403.254 536.43 403.422 536.469 403.578 536.516 cv
403.727 536.562 403.855 536.613 403.965 536.668 cv
404.066 536.723 404.148 536.773 404.207 536.812 cv
404.258 536.859 404.293 536.895 404.316 536.922 cv
404.332 536.953 404.348 536.988 404.355 537.023 cv
404.363 537.066 404.371 537.113 404.379 537.168 cv
404.387 537.227 404.391 537.297 404.391 537.379 cv
404.391 537.469 404.387 537.547 404.379 537.609 cv
404.371 537.68 404.355 537.73 404.34 537.77 cv
404.316 537.812 404.297 537.844 404.273 537.859 cv
404.246 537.879 404.215 537.887 404.188 537.887 cv
404.137 537.887 404.07 537.859 403.984 537.801 cv
403.895 537.746 403.781 537.684 403.641 537.617 cv
403.5 537.555 403.332 537.496 403.145 537.434 cv
402.953 537.379 402.738 537.348 402.496 537.348 cv
402.273 537.348 402.082 537.375 401.918 537.422 cv
401.75 537.477 401.613 537.547 401.508 537.633 cv
401.402 537.727 401.32 537.832 401.27 537.957 cv
401.211 538.082 401.184 538.219 401.188 538.363 cv
401.184 538.566 401.234 538.734 401.34 538.871 cv
401.441 539.012 401.578 539.133 401.746 539.234 cv
401.91 539.34 402.102 539.434 402.316 539.516 cv
402.527 539.602 402.742 539.687 402.965 539.773 cv
403.184 539.863 403.402 539.965 403.621 540.07 cv
403.836 540.18 404.027 540.309 404.195 540.465 cv
404.359 540.621 404.492 540.809 404.594 541.027 cv
404.691 541.246 404.742 541.508 404.746 541.805 cv
cp
f
172.938 11.621 mo
172.934 12.461 172.832 13.211 172.625 13.867 cv
172.418 14.531 172.109 15.09 171.699 15.547 cv
171.289 16.008 170.781 16.359 170.176 16.598 cv
169.57 16.84 168.871 16.957 168.078 16.961 cv
167.289 16.957 166.602 16.855 166.02 16.652 cv
165.434 16.449 164.945 16.137 164.559 15.715 cv
164.168 15.293 163.879 14.758 163.684 14.109 cv
163.488 13.461 163.391 12.691 163.395 11.801 cv
163.391 10.988 163.492 10.258 163.703 9.60199 cv
163.906 8.953 164.215 8.39801 164.629 7.93701 cv
165.035 7.48401 165.543 7.133 166.152 6.88702 cv
166.754 6.64502 167.457 6.52301 168.262 6.52002 cv
169.023 6.52301 169.699 6.625 170.285 6.82397 cv
170.867 7.02698 171.355 7.336 171.75 7.758 cv
172.141 8.17999 172.438 8.711 172.637 9.35199 cv
172.836 9.992 172.934 10.75 172.938 11.621 cv
cp
170.789 11.73 mo
170.785 11.203 170.742 10.723 170.664 10.289 cv
170.578 9.85498 170.438 9.48401 170.238 9.172 cv
170.035 8.86298 169.77 8.625 169.438 8.45697 cv
169.105 8.289 168.691 8.203 168.195 8.203 cv
167.688 8.203 167.266 8.30103 166.93 8.48798 cv
166.594 8.67999 166.32 8.92999 166.113 9.24597 cv
165.902 9.56598 165.754 9.93701 165.672 10.359 cv
165.582 10.781 165.539 11.23 165.543 11.699 cv
165.539 12.254 165.582 12.75 165.668 13.187 cv
165.75 13.629 165.891 14.004 166.09 14.312 cv
166.285 14.625 166.551 14.859 166.883 15.023 cv
167.215 15.187 167.633 15.27 168.141 15.27 cv
168.641 15.27 169.059 15.176 169.398 14.988 cv
169.734 14.801 170.008 14.547 170.219 14.227 cv
170.422 13.906 170.57 13.531 170.66 13.102 cv
170.742 12.672 170.785 12.215 170.789 11.73 cv
cp
f
180.938 9.55902 mo
180.934 9.586 180.934 9.617 180.934 9.65198 cv
180.93 9.69098 180.926 9.72998 180.918 9.77301 cv
180.91 9.81598 180.898 9.867 180.887 9.922 cv
180.871 9.97998 180.855 10.047 180.836 10.117 cv
178.75 16.406 li
178.723 16.496 178.688 16.57 178.645 16.621 cv
178.598 16.68 178.523 16.723 178.426 16.75 cv
178.32 16.781 178.184 16.797 178.012 16.812 cv
177.836 16.82 177.609 16.828 177.332 16.828 cv
177.055 16.828 176.828 16.82 176.656 16.809 cv
176.48 16.793 176.344 16.773 176.246 16.742 cv
176.145 16.715 176.074 16.672 176.031 16.613 cv
175.984 16.562 175.949 16.492 175.926 16.406 cv
173.84 10.117 li
173.809 10.016 173.781 9.922 173.766 9.84003 cv
173.742 9.758 173.734 9.69897 173.734 9.65997 cv
173.73 9.62903 173.727 9.59399 173.73 9.55902 cv
173.727 9.508 173.742 9.461 173.773 9.422 cv
173.801 9.383 173.852 9.35199 173.926 9.32397 cv
173.996 9.30103 174.094 9.28101 174.223 9.27002 cv
174.348 9.26202 174.508 9.258 174.703 9.25403 cv
174.914 9.258 175.086 9.26599 175.219 9.27301 cv
175.344 9.289 175.449 9.30499 175.527 9.328 cv
175.602 9.35199 175.652 9.38702 175.688 9.42999 cv
175.715 9.47699 175.742 9.53101 175.766 9.59003 cv
177.348 14.691 li
177.395 14.887 li
177.441 14.691 li
179 9.59003 li
179.012 9.53101 179.035 9.47699 179.07 9.42999 cv
179.102 9.38702 179.156 9.35199 179.23 9.328 cv
179.301 9.30499 179.398 9.289 179.523 9.27301 cv
179.645 9.26599 179.805 9.258 180.004 9.25403 cv
180.195 9.258 180.352 9.26202 180.473 9.27002 cv
180.594 9.28101 180.688 9.30103 180.758 9.32397 cv
180.824 9.35199 180.871 9.383 180.898 9.422 cv
180.922 9.461 180.934 9.508 180.938 9.55902 cv
cp
f
188.414 12.84 mo
188.41 13.078 188.359 13.254 188.254 13.367 cv
188.145 13.484 187.996 13.543 187.816 13.539 cv
183.582 13.539 li
183.578 13.84 183.613 14.109 183.688 14.348 cv
183.754 14.59 183.867 14.793 184.023 14.961 cv
184.176 15.133 184.371 15.262 184.613 15.348 cv
184.852 15.437 185.141 15.48 185.484 15.48 cv
185.824 15.48 186.125 15.457 186.387 15.406 cv
186.645 15.359 186.871 15.305 187.063 15.242 cv
187.25 15.184 187.406 15.129 187.535 15.078 cv
187.656 15.031 187.758 15.008 187.84 15.004 cv
187.883 15.008 187.922 15.016 187.957 15.031 cv
187.984 15.051 188.012 15.082 188.031 15.129 cv
188.051 15.176 188.063 15.242 188.074 15.328 cv
188.078 15.414 188.082 15.523 188.086 15.652 cv
188.082 15.77 188.082 15.867 188.078 15.945 cv
188.07 16.027 188.063 16.094 188.055 16.148 cv
188.043 16.207 188.027 16.258 188.008 16.293 cv
187.988 16.336 187.961 16.371 187.93 16.406 cv
187.895 16.445 187.801 16.496 187.652 16.555 cv
187.496 16.621 187.305 16.684 187.074 16.738 cv
186.836 16.801 186.566 16.848 186.27 16.895 cv
185.965 16.934 185.645 16.957 185.305 16.961 cv
184.684 16.957 184.141 16.883 183.68 16.727 cv
183.211 16.574 182.824 16.336 182.516 16.02 cv
182.199 15.703 181.965 15.305 181.816 14.82 cv
181.66 14.34 181.586 13.773 181.59 13.117 cv
181.586 12.504 181.664 11.945 181.828 11.449 cv
181.984 10.953 182.219 10.535 182.531 10.187 cv
182.836 9.84399 183.211 9.578 183.648 9.39502 cv
184.086 9.21503 184.578 9.125 185.133 9.12097 cv
185.711 9.125 186.211 9.211 186.625 9.37903 cv
187.039 9.55499 187.375 9.79303 187.641 10.094 cv
187.902 10.398 188.098 10.758 188.227 11.172 cv
188.348 11.59 188.41 12.039 188.414 12.527 cv
cp
186.512 12.277 mo
186.523 11.727 186.414 11.293 186.18 10.98 cv
185.945 10.668 185.578 10.512 185.086 10.508 cv
184.836 10.512 184.621 10.559 184.438 10.648 cv
184.25 10.746 184.098 10.871 183.977 11.027 cv
183.852 11.187 183.758 11.375 183.695 11.59 cv
183.629 11.805 183.59 12.035 183.582 12.277 cv
cp
f
194.488 10.211 mo
194.488 10.402 194.48 10.555 194.473 10.672 cv
194.457 10.793 194.441 10.887 194.426 10.953 cv
194.402 11.023 194.375 11.07 194.344 11.094 cv
194.305 11.121 194.262 11.133 194.215 11.133 cv
194.168 11.133 194.121 11.125 194.074 11.105 cv
194.02 11.09 193.961 11.07 193.898 11.047 cv
193.828 11.027 193.758 11.008 193.684 10.988 cv
193.602 10.973 193.516 10.965 193.426 10.961 cv
193.313 10.965 193.203 10.984 193.098 11.027 cv
192.988 11.074 192.875 11.145 192.762 11.234 cv
192.641 11.328 192.52 11.453 192.395 11.605 cv
192.266 11.766 192.129 11.957 191.984 12.184 cv
191.984 16.516 li
191.98 16.57 191.965 16.613 191.938 16.652 cv
191.902 16.691 191.848 16.727 191.777 16.75 cv
191.699 16.777 191.602 16.793 191.477 16.809 cv
191.352 16.82 191.191 16.828 191.004 16.828 cv
190.809 16.828 190.652 16.82 190.527 16.809 cv
190.402 16.793 190.301 16.777 190.227 16.75 cv
190.148 16.727 190.094 16.691 190.066 16.652 cv
190.031 16.613 190.016 16.57 190.02 16.516 cv
190.02 9.56598 li
190.016 9.52002 190.031 9.47302 190.059 9.42999 cv
190.082 9.39502 190.129 9.36298 190.199 9.33197 cv
190.266 9.30902 190.352 9.289 190.461 9.27301 cv
190.566 9.26599 190.699 9.258 190.863 9.25403 cv
191.027 9.258 191.164 9.26599 191.273 9.27301 cv
191.379 9.289 191.465 9.30902 191.527 9.33197 cv
191.586 9.36298 191.629 9.39502 191.656 9.42999 cv
191.68 9.47302 191.691 9.52002 191.695 9.56598 cv
191.695 10.43 li
191.875 10.172 192.047 9.961 192.211 9.789 cv
192.367 9.625 192.523 9.48798 192.672 9.38702 cv
192.816 9.289 192.961 9.22302 193.105 9.17999 cv
193.25 9.14502 193.395 9.125 193.543 9.12097 cv
193.609 9.125 193.684 9.12903 193.762 9.133 cv
193.84 9.14502 193.918 9.15601 194.004 9.172 cv
194.082 9.19098 194.156 9.211 194.223 9.23401 cv
194.281 9.258 194.328 9.28497 194.359 9.30902 cv
194.387 9.34003 194.406 9.367 194.422 9.39502 cv
194.434 9.42999 194.445 9.47302 194.457 9.52301 cv
194.465 9.58197 194.473 9.664 194.48 9.77002 cv
194.484 9.87903 194.488 10.027 194.488 10.211 cv
cp
f
201.246 16.539 mo
201.242 16.617 201.215 16.672 201.168 16.711 cv
201.113 16.754 201.031 16.781 200.922 16.801 cv
200.805 16.816 200.641 16.828 200.426 16.828 cv
200.188 16.828 200.016 16.816 199.914 16.801 cv
199.805 16.781 199.73 16.754 199.691 16.711 cv
199.645 16.672 199.625 16.617 199.625 16.539 cv
199.625 15.988 li
199.336 16.297 199.008 16.535 198.645 16.703 cv
198.277 16.875 197.871 16.957 197.426 16.961 cv
197.055 16.957 196.715 16.91 196.406 16.816 cv
196.098 16.723 195.832 16.582 195.605 16.387 cv
195.379 16.199 195.203 15.965 195.078 15.684 cv
194.953 15.406 194.891 15.078 194.895 14.699 cv
194.891 14.301 194.969 13.949 195.129 13.645 cv
195.285 13.348 195.523 13.102 195.84 12.906 cv
196.152 12.715 196.543 12.57 197.012 12.473 cv
197.48 12.383 198.023 12.336 198.641 12.332 cv
199.32 12.332 li
199.32 11.91 li
199.32 11.695 199.297 11.504 199.254 11.34 cv
199.207 11.18 199.133 11.043 199.035 10.93 cv
198.93 10.824 198.797 10.742 198.629 10.687 cv
198.457 10.637 198.246 10.613 198.004 10.609 cv
197.672 10.613 197.379 10.648 197.125 10.719 cv
196.863 10.793 196.637 10.875 196.441 10.961 cv
196.242 11.055 196.078 11.133 195.949 11.203 cv
195.813 11.277 195.703 11.316 195.625 11.312 cv
195.563 11.316 195.512 11.297 195.473 11.258 cv
195.426 11.223 195.391 11.172 195.363 11.102 cv
195.332 11.039 195.309 10.953 195.297 10.852 cv
195.277 10.754 195.27 10.645 195.273 10.523 cv
195.27 10.363 195.285 10.238 195.313 10.141 cv
195.336 10.051 195.383 9.96503 195.461 9.88702 cv
195.531 9.81201 195.66 9.72998 195.844 9.64099 cv
196.023 9.55103 196.234 9.46503 196.48 9.38702 cv
196.723 9.30902 196.992 9.24597 197.281 9.19501 cv
197.57 9.14801 197.867 9.125 198.176 9.12097 cv
198.719 9.125 199.184 9.17603 199.57 9.28101 cv
199.957 9.39099 200.277 9.55499 200.527 9.77301 cv
200.777 9.992 200.957 10.277 201.074 10.625 cv
201.184 10.977 201.242 11.391 201.246 11.863 cv
cp
199.32 13.562 mo
198.57 13.562 li
198.254 13.566 197.984 13.59 197.762 13.633 cv
197.535 13.684 197.352 13.754 197.215 13.844 cv
197.07 13.941 196.969 14.055 196.906 14.184 cv
196.84 14.32 196.805 14.469 196.809 14.637 cv
196.805 14.93 196.898 15.16 197.086 15.324 cv
197.27 15.492 197.527 15.574 197.855 15.574 cv
198.129 15.574 198.379 15.504 198.613 15.363 cv
198.84 15.223 199.078 15.02 199.32 14.746 cv
cp
f
205.168 16.516 mo
205.164 16.57 205.148 16.613 205.121 16.652 cv
205.086 16.691 205.031 16.727 204.961 16.75 cv
204.883 16.777 204.785 16.793 204.66 16.809 cv
204.535 16.82 204.375 16.828 204.188 16.828 cv
203.992 16.828 203.836 16.82 203.711 16.809 cv
203.586 16.793 203.484 16.777 203.41 16.75 cv
203.332 16.727 203.277 16.691 203.25 16.652 cv
203.215 16.613 203.199 16.57 203.203 16.516 cv
203.203 6.27002 li
203.199 6.21899 203.215 6.172 203.25 6.12903 cv
203.277 6.09003 203.332 6.05499 203.41 6.02301 cv
203.484 5.99597 203.586 5.97699 203.711 5.95697 cv
203.836 5.94501 203.992 5.93701 204.188 5.93402 cv
204.375 5.93701 204.535 5.94501 204.66 5.95697 cv
204.785 5.97699 204.883 5.99597 204.961 6.02301 cv
205.031 6.05499 205.086 6.09003 205.121 6.12903 cv
205.148 6.172 205.164 6.21899 205.168 6.27002 cv
cp
f
209.141 16.516 mo
209.137 16.57 209.121 16.613 209.094 16.652 cv
209.059 16.691 209.004 16.727 208.934 16.75 cv
208.855 16.777 208.758 16.793 208.633 16.809 cv
208.508 16.82 208.348 16.828 208.16 16.828 cv
207.965 16.828 207.809 16.82 207.684 16.809 cv
207.559 16.793 207.457 16.777 207.383 16.75 cv
207.305 16.727 207.25 16.691 207.223 16.652 cv
207.188 16.613 207.172 16.57 207.176 16.516 cv
207.176 6.27002 li
207.172 6.21899 207.188 6.172 207.223 6.12903 cv
207.25 6.09003 207.305 6.05499 207.383 6.02301 cv
207.457 5.99597 207.559 5.97699 207.684 5.95697 cv
207.809 5.94501 207.965 5.93701 208.16 5.93402 cv
208.348 5.93701 208.508 5.94501 208.633 5.95697 cv
208.758 5.97699 208.855 5.99597 208.934 6.02301 cv
209.004 6.05499 209.059 6.09003 209.094 6.12903 cv
209.121 6.172 209.137 6.21899 209.141 6.27002 cv
cp
f
222.309 16.516 mo
222.309 16.578 222.297 16.625 222.277 16.66 cv
222.258 16.703 222.211 16.734 222.133 16.758 cv
222.055 16.781 221.938 16.797 221.789 16.812 cv
221.633 16.82 221.43 16.828 221.172 16.828 cv
220.953 16.828 220.777 16.82 220.648 16.812 cv
220.52 16.797 220.418 16.781 220.344 16.754 cv
220.266 16.727 220.211 16.691 220.184 16.645 cv
220.148 16.605 220.125 16.551 220.105 16.484 cv
219.199 14.234 li
219.09 13.98 218.984 13.754 218.883 13.555 cv
218.773 13.359 218.66 13.195 218.535 13.062 cv
218.406 12.934 218.258 12.832 218.094 12.762 cv
217.926 12.695 217.734 12.664 217.52 12.66 cv
216.879 12.66 li
216.879 16.5 li
216.875 16.555 216.859 16.602 216.828 16.641 cv
216.793 16.684 216.738 16.719 216.66 16.742 cv
216.582 16.77 216.477 16.789 216.348 16.805 cv
216.215 16.82 216.051 16.828 215.852 16.828 cv
215.652 16.828 215.484 16.82 215.355 16.805 cv
215.219 16.789 215.113 16.77 215.039 16.742 cv
214.957 16.719 214.902 16.684 214.875 16.641 cv
214.84 16.602 214.824 16.555 214.828 16.5 cv
214.828 7.34399 li
214.824 7.117 214.883 6.953 215.004 6.84802 cv
215.117 6.75 215.262 6.69897 215.438 6.69501 cv
218.047 6.69501 li
218.309 6.69897 218.527 6.703 218.703 6.711 cv
218.871 6.72302 219.027 6.73401 219.172 6.75 cv
219.574 6.80902 219.938 6.90997 220.262 7.047 cv
220.586 7.19098 220.863 7.375 221.09 7.59802 cv
221.316 7.828 221.488 8.09399 221.609 8.40198 cv
221.727 8.711 221.785 9.06598 221.789 9.46503 cv
221.785 9.80499 221.742 10.113 221.66 10.387 cv
221.57 10.668 221.445 10.914 221.281 11.133 cv
221.113 11.352 220.906 11.543 220.664 11.699 cv
220.418 11.863 220.141 11.992 219.832 12.09 cv
219.98 12.164 220.125 12.254 220.258 12.355 cv
220.391 12.465 220.512 12.59 220.629 12.734 cv
220.742 12.883 220.855 13.051 220.961 13.238 cv
221.063 13.43 221.164 13.645 221.266 13.883 cv
222.117 15.871 li
222.191 16.07 222.242 16.211 222.27 16.301 cv
222.293 16.395 222.309 16.469 222.309 16.516 cv
cp
219.668 9.67603 mo
219.664 9.34399 219.59 9.06201 219.441 8.83197 cv
219.289 8.60498 219.043 8.44501 218.703 8.34802 cv
218.598 8.32397 218.48 8.30103 218.348 8.28497 cv
218.215 8.27002 218.031 8.26202 217.797 8.26202 cv
216.879 8.26202 li
216.879 11.125 li
217.922 11.125 li
218.211 11.129 218.469 11.094 218.688 11.02 cv
218.906 10.953 219.086 10.852 219.23 10.723 cv
219.375 10.598 219.484 10.445 219.559 10.266 cv
219.629 10.09 219.664 9.89502 219.668 9.67603 cv
cp
f
230.289 16.516 mo
230.285 16.57 230.273 16.613 230.25 16.652 cv
230.223 16.691 230.176 16.727 230.113 16.75 cv
230.047 16.777 229.961 16.793 229.855 16.809 cv
229.75 16.82 229.617 16.828 229.457 16.828 cv
229.281 16.828 229.141 16.82 229.039 16.809 cv
228.93 16.793 228.848 16.777 228.785 16.75 cv
228.723 16.727 228.676 16.691 228.652 16.652 cv
228.621 16.613 228.609 16.57 228.613 16.516 cv
228.613 15.715 li
228.227 16.129 227.836 16.441 227.441 16.648 cv
227.039 16.855 226.629 16.957 226.207 16.961 cv
225.727 16.957 225.324 16.883 225 16.727 cv
224.676 16.574 224.414 16.359 224.215 16.09 cv
224.012 15.82 223.867 15.508 223.785 15.148 cv
223.695 14.793 223.652 14.352 223.656 13.82 cv
223.656 9.56598 li
223.652 9.52002 223.668 9.47302 223.699 9.42999 cv
223.727 9.39502 223.777 9.36298 223.855 9.33197 cv
223.93 9.30902 224.031 9.289 224.16 9.27301 cv
224.285 9.26599 224.441 9.258 224.633 9.25403 cv
224.82 9.258 224.98 9.26599 225.105 9.27301 cv
225.23 9.289 225.328 9.30902 225.406 9.33197 cv
225.477 9.36298 225.531 9.39502 225.566 9.42999 cv
225.594 9.47302 225.609 9.52002 225.613 9.56598 cv
225.613 13.492 li
225.609 13.859 225.633 14.137 225.684 14.328 cv
225.727 14.52 225.797 14.684 225.898 14.82 cv
225.992 14.961 226.117 15.066 226.266 15.141 cv
226.414 15.219 226.586 15.258 226.781 15.254 cv
227.031 15.258 227.281 15.168 227.535 14.98 cv
227.785 14.801 228.055 14.535 228.34 14.187 cv
228.34 9.56598 li
228.34 9.52002 228.352 9.47302 228.383 9.42999 cv
228.406 9.39502 228.461 9.36298 228.539 9.33197 cv
228.613 9.30902 228.711 9.289 228.84 9.27301 cv
228.961 9.26599 229.121 9.258 229.316 9.25403 cv
229.508 9.258 229.664 9.26599 229.789 9.27301 cv
229.91 9.289 230.012 9.30902 230.086 9.33197 cv
230.156 9.36298 230.207 9.39502 230.242 9.42999 cv
230.27 9.47302 230.285 9.52002 230.289 9.56598 cv
cp
f
238.906 16.516 mo
238.902 16.57 238.887 16.613 238.859 16.652 cv
238.824 16.691 238.773 16.727 238.703 16.75 cv
238.629 16.777 238.527 16.793 238.402 16.809 cv
238.273 16.82 238.117 16.828 237.934 16.828 cv
237.738 16.828 237.578 16.82 237.453 16.809 cv
237.324 16.793 237.223 16.777 237.152 16.75 cv
237.074 16.727 237.023 16.691 236.996 16.652 cv
236.961 16.613 236.945 16.57 236.949 16.516 cv
236.949 12.551 li
236.945 12.215 236.922 11.949 236.875 11.754 cv
236.824 11.562 236.75 11.398 236.66 11.262 cv
236.566 11.125 236.449 11.02 236.301 10.941 cv
236.152 10.867 235.977 10.828 235.781 10.828 cv
235.527 10.828 235.277 10.922 235.023 11.102 cv
234.77 11.285 234.504 11.547 234.23 11.895 cv
234.23 16.516 li
234.227 16.57 234.211 16.613 234.184 16.652 cv
234.148 16.691 234.094 16.727 234.023 16.75 cv
233.945 16.777 233.848 16.793 233.723 16.809 cv
233.598 16.82 233.438 16.828 233.25 16.828 cv
233.055 16.828 232.898 16.82 232.773 16.809 cv
232.648 16.793 232.547 16.777 232.473 16.75 cv
232.395 16.727 232.34 16.691 232.313 16.652 cv
232.277 16.613 232.262 16.57 232.266 16.516 cv
232.266 9.56598 li
232.262 9.52002 232.277 9.47302 232.305 9.42999 cv
232.328 9.39502 232.375 9.36298 232.445 9.33197 cv
232.512 9.30902 232.598 9.289 232.707 9.27301 cv
232.813 9.26599 232.945 9.258 233.109 9.25403 cv
233.273 9.258 233.41 9.26599 233.52 9.27301 cv
233.625 9.289 233.711 9.30902 233.773 9.33197 cv
233.832 9.36298 233.875 9.39502 233.902 9.42999 cv
233.926 9.47302 233.938 9.52002 233.941 9.56598 cv
233.941 10.367 li
234.324 9.95697 234.715 9.64502 235.113 9.43402 cv
235.508 9.22699 235.926 9.125 236.359 9.12097 cv
236.828 9.125 237.227 9.203 237.555 9.35498 cv
237.879 9.51599 238.141 9.72699 238.34 9.992 cv
238.539 10.262 238.684 10.574 238.773 10.93 cv
238.859 11.289 238.902 11.719 238.906 12.223 cv
cp
f
244.777 15.832 mo
244.777 16.059 244.762 16.234 244.734 16.355 cv
244.703 16.48 244.664 16.566 244.621 16.613 cv
244.57 16.664 244.504 16.707 244.414 16.746 cv
244.32 16.785 244.211 16.816 244.094 16.848 cv
243.969 16.871 243.836 16.895 243.695 16.914 cv
243.551 16.926 243.41 16.934 243.266 16.937 cv
242.875 16.934 242.535 16.883 242.25 16.789 cv
241.965 16.687 241.73 16.539 241.543 16.332 cv
241.355 16.129 241.215 15.871 241.129 15.559 cv
241.035 15.25 240.992 14.879 240.996 14.449 cv
240.996 10.891 li
240.164 10.891 li
240.063 10.895 239.988 10.832 239.938 10.707 cv
239.883 10.586 239.855 10.383 239.859 10.094 cv
239.855 9.94501 239.863 9.81598 239.879 9.71503 cv
239.891 9.61298 239.91 9.53101 239.938 9.46899 cv
239.961 9.40997 239.992 9.367 240.035 9.34003 cv
240.07 9.31598 240.117 9.30499 240.172 9.30103 cv
240.996 9.30103 li
240.996 7.75 li
240.992 7.703 241.008 7.65601 241.039 7.60901 cv
241.066 7.57001 241.117 7.53497 241.195 7.50403 cv
241.27 7.47998 241.371 7.45697 241.5 7.44098 cv
241.625 7.42999 241.781 7.42603 241.973 7.422 cv
242.16 7.42603 242.32 7.42999 242.449 7.44098 cv
242.574 7.45697 242.676 7.47998 242.75 7.50403 cv
242.82 7.53497 242.871 7.57001 242.906 7.60901 cv
242.934 7.65601 242.949 7.703 242.953 7.75 cv
242.953 9.30103 li
244.465 9.30103 li
244.516 9.30499 244.563 9.31598 244.602 9.34003 cv
244.641 9.367 244.672 9.40997 244.699 9.46899 cv
244.723 9.53101 244.742 9.61298 244.758 9.71503 cv
244.77 9.81598 244.777 9.94501 244.777 10.094 cv
244.777 10.383 244.75 10.586 244.699 10.707 cv
244.645 10.832 244.57 10.895 244.473 10.891 cv
242.953 10.891 li
242.953 14.156 li
242.949 14.535 243.008 14.82 243.133 15.008 cv
243.25 15.199 243.465 15.293 243.77 15.293 cv
243.871 15.293 243.965 15.285 244.051 15.266 cv
244.133 15.25 244.207 15.23 244.273 15.203 cv
244.336 15.184 244.391 15.16 244.438 15.141 cv
244.48 15.125 244.52 15.117 244.559 15.113 cv
244.586 15.117 244.617 15.125 244.648 15.141 cv
244.676 15.16 244.695 15.199 244.715 15.25 cv
244.727 15.309 244.742 15.383 244.758 15.473 cv
244.77 15.57 244.777 15.687 244.777 15.832 cv
cp
f
248.164 16.516 mo
248.16 16.57 248.145 16.613 248.117 16.652 cv
248.082 16.691 248.027 16.727 247.957 16.75 cv
247.879 16.777 247.781 16.793 247.656 16.809 cv
247.531 16.82 247.371 16.828 247.184 16.828 cv
246.988 16.828 246.832 16.82 246.707 16.809 cv
246.582 16.793 246.48 16.777 246.406 16.75 cv
246.328 16.727 246.273 16.691 246.246 16.652 cv
246.211 16.613 246.195 16.57 246.199 16.516 cv
246.199 9.58197 li
246.195 9.53101 246.211 9.48401 246.246 9.44501 cv
246.273 9.40601 246.328 9.375 246.406 9.34399 cv
246.48 9.32001 246.582 9.297 246.707 9.27698 cv
246.832 9.26599 246.988 9.258 247.184 9.25403 cv
247.371 9.258 247.531 9.26599 247.656 9.27698 cv
247.781 9.297 247.879 9.32001 247.957 9.34399 cv
248.027 9.375 248.082 9.40601 248.117 9.44501 cv
248.145 9.48401 248.16 9.53101 248.164 9.58197 cv
cp
248.313 7.211 mo
248.313 7.60901 248.23 7.883 248.07 8.03101 cv
247.906 8.18402 247.609 8.258 247.176 8.25403 cv
246.73 8.258 246.43 8.18402 246.281 8.039 cv
246.125 7.89502 246.051 7.633 246.051 7.25 cv
246.051 6.85498 246.129 6.58197 246.289 6.42999 cv
246.445 6.27698 246.746 6.19897 247.191 6.19897 cv
247.625 6.19897 247.922 6.27301 248.078 6.422 cv
248.234 6.57001 248.313 6.836 248.313 7.211 cv
cp
f
261.184 16.516 mo
261.18 16.57 261.164 16.613 261.137 16.652 cv
261.102 16.691 261.051 16.727 260.98 16.75 cv
260.906 16.777 260.805 16.793 260.684 16.809 cv
260.559 16.82 260.402 16.828 260.211 16.828 cv
260.012 16.828 259.852 16.82 259.727 16.809 cv
259.602 16.793 259.5 16.777 259.426 16.75 cv
259.348 16.727 259.297 16.691 259.27 16.652 cv
259.242 16.613 259.227 16.57 259.23 16.516 cv
259.23 12.395 li
259.227 12.164 259.207 11.949 259.164 11.754 cv
259.117 11.562 259.047 11.398 258.961 11.262 cv
258.867 11.125 258.754 11.02 258.617 10.941 cv
258.477 10.867 258.313 10.828 258.121 10.828 cv
257.887 10.828 257.648 10.922 257.41 11.102 cv
257.172 11.285 256.914 11.547 256.633 11.895 cv
256.633 16.516 li
256.633 16.57 256.617 16.613 256.586 16.652 cv
256.555 16.691 256.5 16.727 256.426 16.75 cv
256.348 16.777 256.246 16.793 256.125 16.809 cv
256 16.82 255.848 16.828 255.66 16.828 cv
255.465 16.828 255.305 16.82 255.184 16.809 cv
255.055 16.793 254.953 16.777 254.883 16.75 cv
254.805 16.727 254.754 16.691 254.723 16.652 cv
254.691 16.613 254.676 16.57 254.676 16.516 cv
254.676 12.395 li
254.676 12.164 254.652 11.949 254.609 11.754 cv
254.566 11.562 254.5 11.398 254.414 11.262 cv
254.32 11.125 254.207 11.02 254.07 10.941 cv
253.926 10.867 253.762 10.828 253.578 10.828 cv
253.336 10.828 253.098 10.922 252.859 11.102 cv
252.621 11.285 252.363 11.547 252.09 11.895 cv
252.09 16.516 li
252.086 16.57 252.07 16.613 252.043 16.652 cv
252.008 16.691 251.953 16.727 251.883 16.75 cv
251.805 16.777 251.707 16.793 251.582 16.809 cv
251.457 16.82 251.297 16.828 251.109 16.828 cv
250.914 16.828 250.758 16.82 250.633 16.809 cv
250.508 16.793 250.406 16.777 250.332 16.75 cv
250.254 16.727 250.199 16.691 250.172 16.652 cv
250.137 16.613 250.121 16.57 250.125 16.516 cv
250.125 9.56598 li
250.121 9.52002 250.137 9.47302 250.164 9.42999 cv
250.188 9.39502 250.234 9.36298 250.305 9.33197 cv
250.371 9.30902 250.457 9.289 250.566 9.27301 cv
250.672 9.26599 250.805 9.258 250.969 9.25403 cv
251.133 9.258 251.27 9.26599 251.379 9.27301 cv
251.484 9.289 251.57 9.30902 251.633 9.33197 cv
251.691 9.36298 251.734 9.39502 251.762 9.42999 cv
251.785 9.47302 251.797 9.52002 251.801 9.56598 cv
251.801 10.367 li
252.184 9.95697 252.566 9.64502 252.949 9.43402 cv
253.328 9.22699 253.73 9.125 254.148 9.12097 cv
254.434 9.125 254.688 9.15198 254.918 9.211 cv
255.145 9.27301 255.352 9.35901 255.531 9.46899 cv
255.711 9.58197 255.863 9.71899 255.992 9.87097 cv
256.121 10.027 256.23 10.199 256.32 10.391 cv
256.527 10.168 256.73 9.97699 256.934 9.81598 cv
257.129 9.65601 257.328 9.52301 257.523 9.422 cv
257.719 9.32001 257.914 9.24597 258.109 9.19501 cv
258.305 9.14801 258.504 9.125 258.707 9.12097 cv
259.168 9.125 259.555 9.203 259.875 9.35498 cv
260.188 9.51599 260.445 9.72699 260.641 9.992 cv
260.836 10.262 260.973 10.574 261.059 10.93 cv
261.137 11.289 261.18 11.668 261.184 12.066 cv
cp
f
269.523 12.84 mo
269.52 13.078 269.469 13.254 269.363 13.367 cv
269.254 13.484 269.105 13.543 268.926 13.539 cv
264.691 13.539 li
264.688 13.84 264.723 14.109 264.797 14.348 cv
264.863 14.59 264.977 14.793 265.133 14.961 cv
265.285 15.133 265.48 15.262 265.723 15.348 cv
265.961 15.437 266.25 15.48 266.594 15.48 cv
266.934 15.48 267.234 15.457 267.496 15.406 cv
267.754 15.359 267.98 15.305 268.172 15.242 cv
268.359 15.184 268.516 15.129 268.645 15.078 cv
268.766 15.031 268.867 15.008 268.949 15.004 cv
268.992 15.008 269.031 15.016 269.066 15.031 cv
269.094 15.051 269.121 15.082 269.141 15.129 cv
269.16 15.176 269.172 15.242 269.184 15.328 cv
269.188 15.414 269.191 15.523 269.195 15.652 cv
269.191 15.77 269.191 15.867 269.188 15.945 cv
269.18 16.027 269.172 16.094 269.164 16.148 cv
269.152 16.207 269.137 16.258 269.117 16.293 cv
269.098 16.336 269.07 16.371 269.039 16.406 cv
269.004 16.445 268.91 16.496 268.762 16.555 cv
268.605 16.621 268.414 16.684 268.184 16.738 cv
267.945 16.801 267.676 16.848 267.379 16.895 cv
267.074 16.934 266.754 16.957 266.414 16.961 cv
265.793 16.957 265.25 16.883 264.789 16.727 cv
264.32 16.574 263.934 16.336 263.625 16.02 cv
263.309 15.703 263.074 15.305 262.926 14.82 cv
262.77 14.34 262.695 13.773 262.699 13.117 cv
262.695 12.504 262.773 11.945 262.938 11.449 cv
263.094 10.953 263.328 10.535 263.641 10.187 cv
263.945 9.84399 264.32 9.578 264.758 9.39502 cv
265.195 9.21503 265.688 9.125 266.242 9.12097 cv
266.82 9.125 267.32 9.211 267.734 9.37903 cv
268.148 9.55499 268.484 9.79303 268.75 10.094 cv
269.012 10.398 269.207 10.758 269.336 11.172 cv
269.457 11.59 269.52 12.039 269.523 12.527 cv
cp
267.621 12.277 mo
267.633 11.727 267.523 11.293 267.289 10.98 cv
267.055 10.668 266.688 10.512 266.195 10.508 cv
265.945 10.512 265.73 10.559 265.547 10.648 cv
265.359 10.746 265.207 10.871 265.086 11.027 cv
264.961 11.187 264.867 11.375 264.805 11.59 cv
264.738 11.805 264.699 12.035 264.691 12.277 cv
cp
f
276.023 14.551 mo
276.02 14.949 275.945 15.297 275.801 15.598 cv
275.652 15.898 275.445 16.152 275.176 16.352 cv
274.902 16.559 274.582 16.707 274.215 16.809 cv
273.848 16.906 273.445 16.957 273.016 16.961 cv
272.75 16.957 272.504 16.937 272.27 16.902 cv
272.035 16.859 271.824 16.812 271.637 16.754 cv
271.449 16.695 271.293 16.633 271.168 16.57 cv
271.043 16.508 270.949 16.449 270.895 16.395 cv
270.836 16.34 270.793 16.258 270.766 16.141 cv
270.73 16.027 270.715 15.852 270.719 15.621 cv
270.715 15.473 270.723 15.352 270.734 15.258 cv
270.742 15.168 270.758 15.098 270.781 15.039 cv
270.801 14.988 270.824 14.949 270.859 14.93 cv
270.887 14.914 270.926 14.906 270.973 14.902 cv
271.027 14.906 271.113 14.937 271.227 15 cv
271.336 15.066 271.473 15.141 271.645 15.215 cv
271.809 15.297 272.004 15.367 272.223 15.434 cv
272.441 15.504 272.691 15.539 272.977 15.535 cv
273.152 15.539 273.309 15.52 273.449 15.48 cv
273.582 15.445 273.703 15.395 273.809 15.324 cv
273.906 15.258 273.98 15.172 274.035 15.066 cv
274.082 14.965 274.109 14.844 274.113 14.707 cv
274.109 14.551 274.063 14.418 273.969 14.309 cv
273.875 14.199 273.746 14.102 273.59 14.016 cv
273.426 13.934 273.246 13.855 273.051 13.781 cv
272.848 13.711 272.645 13.633 272.434 13.539 cv
272.223 13.453 272.016 13.352 271.82 13.234 cv
271.617 13.125 271.438 12.984 271.281 12.816 cv
271.117 12.652 270.992 12.453 270.898 12.215 cv
270.805 11.984 270.758 11.703 270.758 11.371 cv
270.758 11.043 270.82 10.738 270.949 10.457 cv
271.078 10.184 271.266 9.94501 271.512 9.74597 cv
271.754 9.55103 272.051 9.39801 272.402 9.28497 cv
272.75 9.17999 273.145 9.125 273.586 9.12097 cv
273.801 9.125 274.012 9.14099 274.219 9.16803 cv
274.422 9.203 274.609 9.242 274.777 9.28497 cv
274.941 9.336 275.082 9.38702 275.199 9.43701 cv
275.313 9.49597 275.395 9.54303 275.445 9.578 cv
275.492 9.62097 275.527 9.65997 275.551 9.69501 cv
275.57 9.73798 275.582 9.78497 275.594 9.836 cv
275.602 9.89099 275.613 9.95697 275.621 10.035 cv
275.629 10.121 275.633 10.219 275.633 10.336 cv
275.633 10.477 275.629 10.594 275.621 10.68 cv
275.613 10.773 275.598 10.844 275.582 10.891 cv
275.563 10.945 275.539 10.98 275.512 10.996 cv
275.477 11.02 275.441 11.027 275.402 11.023 cv
275.352 11.027 275.277 11 275.184 10.941 cv
275.082 10.891 274.961 10.832 274.813 10.766 cv
274.664 10.707 274.492 10.648 274.297 10.59 cv
274.102 10.539 273.879 10.512 273.633 10.508 cv
273.453 10.512 273.301 10.531 273.172 10.562 cv
273.039 10.602 272.93 10.652 272.852 10.719 cv
272.766 10.789 272.703 10.867 272.664 10.957 cv
272.617 11.051 272.598 11.148 272.602 11.25 cv
272.598 11.41 272.648 11.547 272.75 11.652 cv
272.848 11.766 272.977 11.859 273.141 11.941 cv
273.301 12.027 273.484 12.105 273.691 12.176 cv
273.895 12.25 274.102 12.332 274.313 12.414 cv
274.52 12.504 274.727 12.602 274.938 12.715 cv
275.141 12.828 275.324 12.969 275.484 13.133 cv
275.645 13.301 275.773 13.5 275.875 13.73 cv
275.969 13.965 276.02 14.238 276.023 14.551 cv
cp
f
291.969 9.55103 mo
291.965 9.60901 291.957 9.67999 291.945 9.76202 cv
291.926 9.84399 291.898 9.96503 291.859 10.117 cv
290.004 16.406 li
289.977 16.496 289.941 16.57 289.902 16.621 cv
289.859 16.68 289.797 16.723 289.711 16.75 cv
289.625 16.781 289.5 16.797 289.344 16.812 cv
289.18 16.82 288.977 16.828 288.727 16.828 cv
288.469 16.828 288.258 16.82 288.102 16.809 cv
287.938 16.793 287.813 16.773 287.723 16.742 cv
287.629 16.715 287.563 16.672 287.523 16.613 cv
287.48 16.562 287.449 16.492 287.43 16.406 cv
286.262 12.184 li
286.246 12.113 li
286.23 12.184 li
285.156 16.406 li
285.133 16.496 285.102 16.57 285.066 16.621 cv
285.023 16.68 284.957 16.723 284.867 16.75 cv
284.77 16.781 284.645 16.797 284.484 16.812 cv
284.324 16.82 284.117 16.828 283.863 16.828 cv
283.602 16.828 283.391 16.82 283.234 16.809 cv
283.074 16.793 282.949 16.773 282.859 16.742 cv
282.766 16.715 282.699 16.672 282.66 16.613 cv
282.617 16.562 282.586 16.492 282.57 16.406 cv
280.73 10.117 li
280.68 9.96899 280.652 9.85199 280.641 9.76599 cv
280.625 9.68402 280.617 9.60901 280.621 9.55103 cv
280.617 9.5 280.633 9.45697 280.664 9.414 cv
280.691 9.37903 280.742 9.34802 280.82 9.32001 cv
280.895 9.30103 280.996 9.28101 281.121 9.27002 cv
281.246 9.26202 281.406 9.258 281.602 9.25403 cv
281.809 9.258 281.977 9.26202 282.109 9.27002 cv
282.238 9.28101 282.34 9.30103 282.414 9.32397 cv
282.484 9.35199 282.535 9.38702 282.566 9.42999 cv
282.594 9.47699 282.617 9.53101 282.633 9.59003 cv
284.012 14.691 li
284.027 14.785 li
284.043 14.691 li
285.336 9.59003 li
285.348 9.53101 285.375 9.47699 285.41 9.42999 cv
285.441 9.38702 285.492 9.35199 285.563 9.32397 cv
285.629 9.30103 285.723 9.28101 285.844 9.27002 cv
285.965 9.26202 286.121 9.258 286.316 9.25403 cv
286.508 9.258 286.664 9.26599 286.785 9.27301 cv
286.902 9.289 286.996 9.30499 287.07 9.328 cv
287.137 9.35199 287.188 9.383 287.219 9.422 cv
287.246 9.461 287.27 9.508 287.285 9.55902 cv
288.672 14.699 li
288.695 14.785 li
288.711 14.691 li
290.035 9.59003 li
290.043 9.53101 290.066 9.47699 290.098 9.42999 cv
290.129 9.38702 290.18 9.35199 290.254 9.32397 cv
290.324 9.30103 290.422 9.28101 290.547 9.27002 cv
290.668 9.26202 290.828 9.258 291.023 9.25403 cv
291.215 9.258 291.371 9.26202 291.496 9.27002 cv
291.617 9.28101 291.715 9.30103 291.785 9.32001 cv
291.855 9.34802 291.902 9.37903 291.93 9.414 cv
291.953 9.45697 291.965 9.5 291.969 9.55103 cv
cp
f
295.184 16.516 mo
295.18 16.57 295.164 16.613 295.137 16.652 cv
295.102 16.691 295.047 16.727 294.977 16.75 cv
294.898 16.777 294.801 16.793 294.676 16.809 cv
294.551 16.82 294.391 16.828 294.203 16.828 cv
294.008 16.828 293.852 16.82 293.727 16.809 cv
293.602 16.793 293.5 16.777 293.426 16.75 cv
293.348 16.727 293.293 16.691 293.266 16.652 cv
293.23 16.613 293.215 16.57 293.219 16.516 cv
293.219 9.58197 li
293.215 9.53101 293.23 9.48401 293.266 9.44501 cv
293.293 9.40601 293.348 9.375 293.426 9.34399 cv
293.5 9.32001 293.602 9.297 293.727 9.27698 cv
293.852 9.26599 294.008 9.258 294.203 9.25403 cv
294.391 9.258 294.551 9.26599 294.676 9.27698 cv
294.801 9.297 294.898 9.32001 294.977 9.34399 cv
295.047 9.375 295.102 9.40601 295.137 9.44501 cv
295.164 9.48401 295.18 9.53101 295.184 9.58197 cv
cp
295.332 7.211 mo
295.332 7.60901 295.25 7.883 295.09 8.03101 cv
294.926 8.18402 294.629 8.258 294.195 8.25403 cv
293.75 8.258 293.449 8.18402 293.301 8.039 cv
293.145 7.89502 293.07 7.633 293.07 7.25 cv
293.07 6.85498 293.148 6.58197 293.309 6.42999 cv
293.465 6.27698 293.766 6.19897 294.211 6.19897 cv
294.645 6.19897 294.941 6.27301 295.098 6.422 cv
295.254 6.57001 295.332 6.836 295.332 7.211 cv
cp
f
301.262 15.832 mo
301.262 16.059 301.246 16.234 301.219 16.355 cv
301.188 16.48 301.148 16.566 301.105 16.613 cv
301.055 16.664 300.988 16.707 300.898 16.746 cv
300.805 16.785 300.695 16.816 300.578 16.848 cv
300.453 16.871 300.32 16.895 300.18 16.914 cv
300.035 16.926 299.895 16.934 299.75 16.937 cv
299.359 16.934 299.02 16.883 298.734 16.789 cv
298.449 16.687 298.215 16.539 298.027 16.332 cv
297.84 16.129 297.699 15.871 297.613 15.559 cv
297.52 15.25 297.477 14.879 297.48 14.449 cv
297.48 10.891 li
296.648 10.891 li
296.547 10.895 296.473 10.832 296.422 10.707 cv
296.367 10.586 296.34 10.383 296.344 10.094 cv
296.34 9.94501 296.348 9.81598 296.363 9.71503 cv
296.375 9.61298 296.395 9.53101 296.422 9.46899 cv
296.445 9.40997 296.477 9.367 296.52 9.34003 cv
296.555 9.31598 296.602 9.30499 296.656 9.30103 cv
297.48 9.30103 li
297.48 7.75 li
297.477 7.703 297.492 7.65601 297.523 7.60901 cv
297.551 7.57001 297.602 7.53497 297.68 7.50403 cv
297.754 7.47998 297.855 7.45697 297.984 7.44098 cv
298.109 7.42999 298.266 7.42603 298.457 7.422 cv
298.645 7.42603 298.805 7.42999 298.934 7.44098 cv
299.059 7.45697 299.16 7.47998 299.234 7.50403 cv
299.305 7.53497 299.355 7.57001 299.391 7.60901 cv
299.418 7.65601 299.434 7.703 299.438 7.75 cv
299.438 9.30103 li
300.949 9.30103 li
301 9.30499 301.047 9.31598 301.086 9.34003 cv
301.125 9.367 301.156 9.40997 301.184 9.46899 cv
301.207 9.53101 301.227 9.61298 301.242 9.71503 cv
301.254 9.81598 301.262 9.94501 301.262 10.094 cv
301.262 10.383 301.234 10.586 301.184 10.707 cv
301.129 10.832 301.055 10.895 300.957 10.891 cv
299.438 10.891 li
299.438 14.156 li
299.434 14.535 299.492 14.82 299.617 15.008 cv
299.734 15.199 299.949 15.293 300.254 15.293 cv
300.355 15.293 300.449 15.285 300.535 15.266 cv
300.617 15.25 300.691 15.23 300.758 15.203 cv
300.82 15.184 300.875 15.16 300.922 15.141 cv
300.965 15.125 301.004 15.117 301.043 15.113 cv
301.07 15.117 301.102 15.125 301.133 15.141 cv
301.16 15.16 301.18 15.199 301.199 15.25 cv
301.211 15.309 301.227 15.383 301.242 15.473 cv
301.254 15.57 301.262 15.687 301.262 15.832 cv
cp
f
309.324 16.516 mo
309.32 16.57 309.305 16.613 309.277 16.652 cv
309.242 16.691 309.191 16.727 309.121 16.75 cv
309.047 16.777 308.945 16.793 308.82 16.809 cv
308.691 16.82 308.535 16.828 308.352 16.828 cv
308.156 16.828 307.996 16.82 307.871 16.809 cv
307.742 16.793 307.641 16.777 307.57 16.75 cv
307.492 16.727 307.441 16.691 307.414 16.652 cv
307.379 16.613 307.363 16.57 307.367 16.516 cv
307.367 12.551 li
307.363 12.215 307.34 11.949 307.293 11.754 cv
307.242 11.562 307.168 11.398 307.078 11.262 cv
306.984 11.125 306.867 11.02 306.719 10.941 cv
306.57 10.867 306.395 10.828 306.199 10.828 cv
305.945 10.828 305.695 10.922 305.441 11.102 cv
305.188 11.285 304.922 11.547 304.648 11.895 cv
304.648 16.516 li
304.645 16.57 304.629 16.613 304.602 16.652 cv
304.566 16.691 304.512 16.727 304.441 16.75 cv
304.363 16.777 304.266 16.793 304.141 16.809 cv
304.016 16.82 303.855 16.828 303.668 16.828 cv
303.473 16.828 303.316 16.82 303.191 16.809 cv
303.066 16.793 302.965 16.777 302.891 16.75 cv
302.813 16.727 302.758 16.691 302.73 16.652 cv
302.695 16.613 302.68 16.57 302.684 16.516 cv
302.684 6.27002 li
302.68 6.21899 302.695 6.172 302.73 6.12903 cv
302.758 6.09003 302.813 6.05499 302.891 6.02301 cv
302.965 5.99597 303.066 5.97699 303.191 5.95697 cv
303.316 5.94501 303.473 5.93701 303.668 5.93402 cv
303.855 5.93701 304.016 5.94501 304.141 5.95697 cv
304.266 5.97699 304.363 5.99597 304.441 6.02301 cv
304.512 6.05499 304.566 6.09003 304.602 6.12903 cv
304.629 6.172 304.645 6.21899 304.648 6.27002 cv
304.648 10.109 li
304.984 9.78101 305.328 9.53497 305.68 9.367 cv
306.027 9.20697 306.395 9.125 306.777 9.12097 cv
307.246 9.125 307.645 9.203 307.973 9.35498 cv
308.297 9.51599 308.559 9.72699 308.758 9.99597 cv
308.957 10.266 309.102 10.582 309.191 10.941 cv
309.277 11.305 309.32 11.742 309.324 12.254 cv
cp
f
320.684 7.539 mo
320.68 7.69897 320.676 7.828 320.664 7.93402 cv
320.648 8.04303 320.625 8.12903 320.602 8.18701 cv
320.57 8.25 320.539 8.297 320.504 8.32397 cv
320.465 8.35901 320.422 8.375 320.379 8.37097 cv
317.082 8.37097 li
317.082 11.086 li
320.176 11.086 li
320.219 11.086 320.262 11.102 320.301 11.125 cv
320.336 11.156 320.367 11.199 320.398 11.258 cv
320.426 11.32 320.445 11.402 320.461 11.504 cv
320.469 11.609 320.477 11.738 320.48 11.895 cv
320.477 12.051 320.469 12.184 320.461 12.285 cv
320.445 12.395 320.426 12.48 320.398 12.543 cv
320.367 12.613 320.336 12.66 320.301 12.687 cv
320.262 12.719 320.219 12.734 320.176 12.73 cv
317.082 12.73 li
317.082 16.484 li
317.078 16.543 317.063 16.594 317.035 16.633 cv
317 16.68 316.945 16.715 316.867 16.738 cv
316.785 16.77 316.68 16.789 316.551 16.805 cv
316.418 16.82 316.25 16.828 316.055 16.828 cv
315.852 16.828 315.688 16.82 315.559 16.805 cv
315.422 16.789 315.316 16.77 315.242 16.738 cv
315.16 16.715 315.105 16.68 315.074 16.633 cv
315.039 16.594 315.02 16.543 315.023 16.484 cv
315.023 7.34399 li
315.02 7.117 315.078 6.953 315.199 6.84802 cv
315.313 6.75 315.457 6.69897 315.633 6.69501 cv
320.379 6.69501 li
320.422 6.69897 320.465 6.711 320.504 6.73798 cv
320.539 6.77002 320.57 6.81598 320.602 6.87903 cv
320.625 6.94501 320.648 7.03497 320.664 7.14099 cv
320.676 7.25403 320.68 7.38702 320.684 7.539 cv
cp
f
329.023 12.969 mo
329.02 13.566 328.941 14.109 328.789 14.594 cv
328.629 15.086 328.395 15.504 328.078 15.855 cv
327.762 16.207 327.363 16.48 326.887 16.672 cv
326.406 16.863 325.848 16.957 325.211 16.961 cv
324.59 16.957 324.051 16.875 323.598 16.703 cv
323.137 16.535 322.758 16.285 322.461 15.957 cv
322.156 15.633 321.934 15.23 321.789 14.75 cv
321.645 14.273 321.574 13.727 321.574 13.109 cv
321.574 12.52 321.652 11.98 321.809 11.488 cv
321.965 11 322.203 10.578 322.523 10.227 cv
322.84 9.87903 323.234 9.60498 323.711 9.40997 cv
324.184 9.21899 324.742 9.125 325.383 9.12097 cv
326.008 9.125 326.547 9.20697 327.004 9.375 cv
327.461 9.547 327.84 9.797 328.137 10.121 cv
328.434 10.449 328.656 10.852 328.805 11.328 cv
328.949 11.809 329.02 12.355 329.023 12.969 cv
cp
327.004 13.047 mo
327 12.711 326.973 12.395 326.922 12.102 cv
326.863 11.816 326.77 11.566 326.645 11.352 cv
326.512 11.141 326.34 10.973 326.129 10.852 cv
325.91 10.734 325.641 10.676 325.313 10.672 cv
325.023 10.676 324.77 10.73 324.551 10.832 cv
324.332 10.941 324.152 11.098 324.012 11.301 cv
323.871 11.508 323.766 11.754 323.695 12.039 cv
323.625 12.332 323.59 12.66 323.59 13.023 cv
323.59 13.371 323.617 13.687 323.676 13.973 cv
323.73 14.266 323.824 14.516 323.953 14.727 cv
324.078 14.941 324.25 15.105 324.473 15.219 cv
324.688 15.34 324.957 15.398 325.281 15.395 cv
325.574 15.398 325.832 15.344 326.055 15.234 cv
326.27 15.129 326.449 14.977 326.59 14.77 cv
326.73 14.57 326.832 14.324 326.902 14.035 cv
326.965 13.75 327 13.422 327.004 13.047 cv
cp
f
337.207 16.516 mo
337.203 16.57 337.191 16.613 337.168 16.652 cv
337.141 16.691 337.094 16.727 337.031 16.75 cv
336.965 16.777 336.879 16.793 336.773 16.809 cv
336.668 16.82 336.535 16.828 336.375 16.828 cv
336.199 16.828 336.059 16.82 335.957 16.809 cv
335.848 16.793 335.766 16.777 335.703 16.75 cv
335.641 16.727 335.594 16.691 335.57 16.652 cv
335.539 16.613 335.527 16.57 335.531 16.516 cv
335.531 15.715 li
335.145 16.129 334.754 16.441 334.359 16.648 cv
333.957 16.855 333.547 16.957 333.125 16.961 cv
332.645 16.957 332.242 16.883 331.918 16.727 cv
331.594 16.574 331.332 16.359 331.133 16.09 cv
330.93 15.82 330.785 15.508 330.703 15.148 cv
330.613 14.793 330.57 14.352 330.574 13.82 cv
330.574 9.56598 li
330.57 9.52002 330.586 9.47302 330.617 9.42999 cv
330.645 9.39502 330.695 9.36298 330.773 9.33197 cv
330.848 9.30902 330.949 9.289 331.078 9.27301 cv
331.203 9.26599 331.359 9.258 331.551 9.25403 cv
331.738 9.258 331.898 9.26599 332.023 9.27301 cv
332.148 9.289 332.246 9.30902 332.324 9.33197 cv
332.395 9.36298 332.449 9.39502 332.484 9.42999 cv
332.512 9.47302 332.527 9.52002 332.531 9.56598 cv
332.531 13.492 li
332.527 13.859 332.551 14.137 332.602 14.328 cv
332.645 14.52 332.715 14.684 332.816 14.82 cv
332.91 14.961 333.035 15.066 333.184 15.141 cv
333.332 15.219 333.504 15.258 333.699 15.254 cv
333.949 15.258 334.199 15.168 334.453 14.98 cv
334.703 14.801 334.973 14.535 335.258 14.187 cv
335.258 9.56598 li
335.258 9.52002 335.27 9.47302 335.301 9.42999 cv
335.324 9.39502 335.379 9.36298 335.457 9.33197 cv
335.531 9.30902 335.629 9.289 335.758 9.27301 cv
335.879 9.26599 336.039 9.258 336.234 9.25403 cv
336.426 9.258 336.582 9.26599 336.707 9.27301 cv
336.828 9.289 336.93 9.30902 337.004 9.33197 cv
337.074 9.36298 337.125 9.39502 337.16 9.42999 cv
337.188 9.47302 337.203 9.52002 337.207 9.56598 cv
cp
f
343.605 10.211 mo
343.605 10.402 343.598 10.555 343.59 10.672 cv
343.574 10.793 343.559 10.887 343.543 10.953 cv
343.52 11.023 343.492 11.07 343.461 11.094 cv
343.422 11.121 343.379 11.133 343.332 11.133 cv
343.285 11.133 343.238 11.125 343.191 11.105 cv
343.137 11.09 343.078 11.07 343.016 11.047 cv
342.945 11.027 342.875 11.008 342.801 10.988 cv
342.719 10.973 342.633 10.965 342.543 10.961 cv
342.43 10.965 342.32 10.984 342.215 11.027 cv
342.105 11.074 341.992 11.145 341.879 11.234 cv
341.758 11.328 341.637 11.453 341.512 11.605 cv
341.383 11.766 341.246 11.957 341.102 12.184 cv
341.102 16.516 li
341.098 16.57 341.082 16.613 341.055 16.652 cv
341.02 16.691 340.965 16.727 340.895 16.75 cv
340.816 16.777 340.719 16.793 340.594 16.809 cv
340.469 16.82 340.309 16.828 340.121 16.828 cv
339.926 16.828 339.77 16.82 339.645 16.809 cv
339.52 16.793 339.418 16.777 339.344 16.75 cv
339.266 16.727 339.211 16.691 339.184 16.652 cv
339.148 16.613 339.133 16.57 339.137 16.516 cv
339.137 9.56598 li
339.133 9.52002 339.148 9.47302 339.176 9.42999 cv
339.199 9.39502 339.246 9.36298 339.316 9.33197 cv
339.383 9.30902 339.469 9.289 339.578 9.27301 cv
339.684 9.26599 339.816 9.258 339.98 9.25403 cv
340.145 9.258 340.281 9.26599 340.391 9.27301 cv
340.496 9.289 340.582 9.30902 340.645 9.33197 cv
340.703 9.36298 340.746 9.39502 340.773 9.42999 cv
340.797 9.47302 340.809 9.52002 340.813 9.56598 cv
340.813 10.43 li
340.992 10.172 341.164 9.961 341.328 9.789 cv
341.484 9.625 341.641 9.48798 341.789 9.38702 cv
341.934 9.289 342.078 9.22302 342.223 9.17999 cv
342.367 9.14502 342.512 9.125 342.66 9.12097 cv
342.727 9.125 342.801 9.12903 342.879 9.133 cv
342.957 9.14502 343.035 9.15601 343.121 9.172 cv
343.199 9.19098 343.273 9.211 343.34 9.23401 cv
343.398 9.258 343.445 9.28497 343.477 9.30902 cv
343.504 9.34003 343.523 9.367 343.539 9.39502 cv
343.551 9.42999 343.563 9.47302 343.574 9.52301 cv
343.582 9.58197 343.59 9.664 343.598 9.77002 cv
343.602 9.87903 343.605 10.027 343.605 10.211 cv
cp
f
355.301 7.539 mo
355.297 7.69501 355.289 7.82397 355.281 7.92603 cv
355.266 8.03497 355.246 8.12097 355.223 8.18402 cv
355.191 8.25 355.16 8.297 355.125 8.32397 cv
355.082 8.35901 355.039 8.375 354.996 8.37097 cv
352.473 8.37097 li
352.473 16.5 li
352.473 16.555 352.453 16.602 352.422 16.641 cv
352.383 16.684 352.328 16.719 352.254 16.742 cv
352.172 16.77 352.066 16.789 351.938 16.805 cv
351.801 16.82 351.637 16.828 351.441 16.828 cv
351.246 16.828 351.082 16.82 350.949 16.805 cv
350.816 16.789 350.711 16.77 350.633 16.742 cv
350.555 16.719 350.496 16.684 350.465 16.641 cv
350.426 16.602 350.41 16.555 350.414 16.5 cv
350.414 8.37097 li
347.891 8.37097 li
347.836 8.375 347.789 8.35901 347.758 8.32397 cv
347.719 8.297 347.688 8.25 347.664 8.18402 cv
347.633 8.12097 347.613 8.03497 347.605 7.92603 cv
347.59 7.82397 347.586 7.69501 347.586 7.539 cv
347.586 7.38702 347.59 7.25403 347.605 7.14099 cv
347.613 7.03497 347.633 6.94501 347.664 6.87903 cv
347.688 6.81598 347.719 6.77002 347.758 6.73798 cv
347.789 6.711 347.836 6.69897 347.891 6.69501 cv
354.996 6.69501 li
355.039 6.69897 355.082 6.711 355.125 6.73798 cv
355.16 6.77002 355.191 6.81598 355.223 6.87903 cv
355.246 6.94501 355.266 7.03497 355.281 7.14099 cv
355.289 7.25403 355.297 7.38702 355.301 7.539 cv
cp
f
363.012 16.516 mo
363.008 16.57 362.992 16.613 362.965 16.652 cv
362.93 16.691 362.879 16.727 362.809 16.75 cv
362.734 16.777 362.633 16.793 362.508 16.809 cv
362.379 16.82 362.223 16.828 362.039 16.828 cv
361.844 16.828 361.684 16.82 361.559 16.809 cv
361.43 16.793 361.328 16.777 361.258 16.75 cv
361.18 16.727 361.129 16.691 361.102 16.652 cv
361.066 16.613 361.051 16.57 361.055 16.516 cv
361.055 12.551 li
361.051 12.215 361.027 11.949 360.98 11.754 cv
360.93 11.562 360.855 11.398 360.766 11.262 cv
360.672 11.125 360.555 11.02 360.406 10.941 cv
360.258 10.867 360.082 10.828 359.887 10.828 cv
359.633 10.828 359.383 10.922 359.129 11.102 cv
358.875 11.285 358.609 11.547 358.336 11.895 cv
358.336 16.516 li
358.332 16.57 358.316 16.613 358.289 16.652 cv
358.254 16.691 358.199 16.727 358.129 16.75 cv
358.051 16.777 357.953 16.793 357.828 16.809 cv
357.703 16.82 357.543 16.828 357.355 16.828 cv
357.16 16.828 357.004 16.82 356.879 16.809 cv
356.754 16.793 356.652 16.777 356.578 16.75 cv
356.5 16.727 356.445 16.691 356.418 16.652 cv
356.383 16.613 356.367 16.57 356.371 16.516 cv
356.371 6.27002 li
356.367 6.21899 356.383 6.172 356.418 6.12903 cv
356.445 6.09003 356.5 6.05499 356.578 6.02301 cv
356.652 5.99597 356.754 5.97699 356.879 5.95697 cv
357.004 5.94501 357.16 5.93701 357.355 5.93402 cv
357.543 5.93701 357.703 5.94501 357.828 5.95697 cv
357.953 5.97699 358.051 5.99597 358.129 6.02301 cv
358.199 6.05499 358.254 6.09003 358.289 6.12903 cv
358.316 6.172 358.332 6.21899 358.336 6.27002 cv
358.336 10.109 li
358.672 9.78101 359.016 9.53497 359.367 9.367 cv
359.715 9.20697 360.082 9.125 360.465 9.12097 cv
360.934 9.125 361.332 9.203 361.66 9.35498 cv
361.984 9.51599 362.246 9.72699 362.445 9.99597 cv
362.645 10.266 362.789 10.582 362.879 10.941 cv
362.965 11.305 363.008 11.742 363.012 12.254 cv
cp
f
369.41 10.211 mo
369.41 10.402 369.402 10.555 369.395 10.672 cv
369.379 10.793 369.363 10.887 369.348 10.953 cv
369.324 11.023 369.297 11.07 369.266 11.094 cv
369.227 11.121 369.184 11.133 369.137 11.133 cv
369.09 11.133 369.043 11.125 368.996 11.105 cv
368.941 11.09 368.883 11.07 368.82 11.047 cv
368.75 11.027 368.68 11.008 368.605 10.988 cv
368.523 10.973 368.438 10.965 368.348 10.961 cv
368.234 10.965 368.125 10.984 368.02 11.027 cv
367.91 11.074 367.797 11.145 367.684 11.234 cv
367.563 11.328 367.441 11.453 367.316 11.605 cv
367.188 11.766 367.051 11.957 366.906 12.184 cv
366.906 16.516 li
366.902 16.57 366.887 16.613 366.859 16.652 cv
366.824 16.691 366.77 16.727 366.699 16.75 cv
366.621 16.777 366.523 16.793 366.398 16.809 cv
366.273 16.82 366.113 16.828 365.926 16.828 cv
365.73 16.828 365.574 16.82 365.449 16.809 cv
365.324 16.793 365.223 16.777 365.148 16.75 cv
365.07 16.727 365.016 16.691 364.988 16.652 cv
364.953 16.613 364.938 16.57 364.941 16.516 cv
364.941 9.56598 li
364.938 9.52002 364.953 9.47302 364.98 9.42999 cv
365.004 9.39502 365.051 9.36298 365.121 9.33197 cv
365.188 9.30902 365.273 9.289 365.383 9.27301 cv
365.488 9.26599 365.621 9.258 365.785 9.25403 cv
365.949 9.258 366.086 9.26599 366.195 9.27301 cv
366.301 9.289 366.387 9.30902 366.449 9.33197 cv
366.508 9.36298 366.551 9.39502 366.578 9.42999 cv
366.602 9.47302 366.613 9.52002 366.617 9.56598 cv
366.617 10.43 li
366.797 10.172 366.969 9.961 367.133 9.789 cv
367.289 9.625 367.445 9.48798 367.594 9.38702 cv
367.738 9.289 367.883 9.22302 368.027 9.17999 cv
368.172 9.14502 368.316 9.125 368.465 9.12097 cv
368.531 9.125 368.605 9.12903 368.684 9.133 cv
368.762 9.14502 368.84 9.15601 368.926 9.172 cv
369.004 9.19098 369.078 9.211 369.145 9.23401 cv
369.203 9.258 369.25 9.28497 369.281 9.30902 cv
369.309 9.34003 369.328 9.367 369.344 9.39502 cv
369.355 9.42999 369.367 9.47302 369.379 9.52301 cv
369.387 9.58197 369.395 9.664 369.402 9.77002 cv
369.406 9.87903 369.41 10.027 369.41 10.211 cv
cp
f
376.855 12.84 mo
376.852 13.078 376.801 13.254 376.695 13.367 cv
376.586 13.484 376.438 13.543 376.258 13.539 cv
372.023 13.539 li
372.02 13.84 372.055 14.109 372.129 14.348 cv
372.195 14.59 372.309 14.793 372.465 14.961 cv
372.617 15.133 372.813 15.262 373.055 15.348 cv
373.293 15.437 373.582 15.48 373.926 15.48 cv
374.266 15.48 374.566 15.457 374.828 15.406 cv
375.086 15.359 375.313 15.305 375.504 15.242 cv
375.691 15.184 375.848 15.129 375.977 15.078 cv
376.098 15.031 376.199 15.008 376.281 15.004 cv
376.324 15.008 376.363 15.016 376.398 15.031 cv
376.426 15.051 376.453 15.082 376.473 15.129 cv
376.492 15.176 376.504 15.242 376.516 15.328 cv
376.52 15.414 376.523 15.523 376.527 15.652 cv
376.523 15.77 376.523 15.867 376.52 15.945 cv
376.512 16.027 376.504 16.094 376.496 16.148 cv
376.484 16.207 376.469 16.258 376.449 16.293 cv
376.43 16.336 376.402 16.371 376.371 16.406 cv
376.336 16.445 376.242 16.496 376.094 16.555 cv
375.938 16.621 375.746 16.684 375.516 16.738 cv
375.277 16.801 375.008 16.848 374.711 16.895 cv
374.406 16.934 374.086 16.957 373.746 16.961 cv
373.125 16.957 372.582 16.883 372.121 16.727 cv
371.652 16.574 371.266 16.336 370.957 16.02 cv
370.641 15.703 370.406 15.305 370.258 14.82 cv
370.102 14.34 370.027 13.773 370.031 13.117 cv
370.027 12.504 370.105 11.945 370.27 11.449 cv
370.426 10.953 370.66 10.535 370.973 10.187 cv
371.277 9.84399 371.652 9.578 372.09 9.39502 cv
372.527 9.21503 373.02 9.125 373.574 9.12097 cv
374.152 9.125 374.652 9.211 375.066 9.37903 cv
375.48 9.55499 375.816 9.79303 376.082 10.094 cv
376.344 10.398 376.539 10.758 376.668 11.172 cv
376.789 11.59 376.852 12.039 376.855 12.527 cv
cp
374.953 12.277 mo
374.965 11.727 374.855 11.293 374.621 10.98 cv
374.387 10.668 374.02 10.512 373.527 10.508 cv
373.277 10.512 373.063 10.559 372.879 10.648 cv
372.691 10.746 372.539 10.871 372.418 11.027 cv
372.293 11.187 372.199 11.375 372.137 11.59 cv
372.07 11.805 372.031 12.035 372.023 12.277 cv
cp
f
384.387 16.539 mo
384.383 16.617 384.355 16.672 384.309 16.711 cv
384.254 16.754 384.172 16.781 384.063 16.801 cv
383.945 16.816 383.781 16.828 383.566 16.828 cv
383.328 16.828 383.156 16.816 383.055 16.801 cv
382.945 16.781 382.871 16.754 382.832 16.711 cv
382.785 16.672 382.766 16.617 382.766 16.539 cv
382.766 15.988 li
382.477 16.297 382.148 16.535 381.785 16.703 cv
381.418 16.875 381.012 16.957 380.566 16.961 cv
380.195 16.957 379.855 16.91 379.547 16.816 cv
379.238 16.723 378.973 16.582 378.746 16.387 cv
378.52 16.199 378.344 15.965 378.219 15.684 cv
378.094 15.406 378.031 15.078 378.035 14.699 cv
378.031 14.301 378.109 13.949 378.27 13.645 cv
378.426 13.348 378.664 13.102 378.98 12.906 cv
379.293 12.715 379.684 12.57 380.152 12.473 cv
380.621 12.383 381.164 12.336 381.781 12.332 cv
382.461 12.332 li
382.461 11.91 li
382.461 11.695 382.438 11.504 382.395 11.34 cv
382.348 11.18 382.273 11.043 382.176 10.93 cv
382.07 10.824 381.938 10.742 381.77 10.687 cv
381.598 10.637 381.387 10.613 381.145 10.609 cv
380.813 10.613 380.52 10.648 380.266 10.719 cv
380.004 10.793 379.777 10.875 379.582 10.961 cv
379.383 11.055 379.219 11.133 379.09 11.203 cv
378.953 11.277 378.844 11.316 378.766 11.312 cv
378.703 11.316 378.652 11.297 378.613 11.258 cv
378.566 11.223 378.531 11.172 378.504 11.102 cv
378.473 11.039 378.449 10.953 378.438 10.852 cv
378.418 10.754 378.41 10.645 378.414 10.523 cv
378.41 10.363 378.426 10.238 378.453 10.141 cv
378.477 10.051 378.523 9.96503 378.602 9.88702 cv
378.672 9.81201 378.801 9.72998 378.984 9.64099 cv
379.164 9.55103 379.375 9.46503 379.621 9.38702 cv
379.863 9.30902 380.133 9.24597 380.422 9.19501 cv
380.711 9.14801 381.008 9.125 381.316 9.12097 cv
381.859 9.125 382.324 9.17603 382.711 9.28101 cv
383.098 9.39099 383.418 9.55499 383.668 9.77301 cv
383.918 9.992 384.098 10.277 384.215 10.625 cv
384.324 10.977 384.383 11.391 384.387 11.863 cv
cp
382.461 13.562 mo
381.711 13.562 li
381.395 13.566 381.125 13.59 380.902 13.633 cv
380.676 13.684 380.492 13.754 380.355 13.844 cv
380.211 13.941 380.109 14.055 380.047 14.184 cv
379.98 14.32 379.945 14.469 379.949 14.637 cv
379.945 14.93 380.039 15.16 380.227 15.324 cv
380.41 15.492 380.668 15.574 380.996 15.574 cv
381.27 15.574 381.52 15.504 381.754 15.363 cv
381.98 15.223 382.219 15.02 382.461 14.746 cv
cp
f
392.969 16.516 mo
392.965 16.578 392.953 16.625 392.93 16.66 cv
392.902 16.703 392.855 16.734 392.797 16.758 cv
392.73 16.781 392.648 16.797 392.543 16.812 cv
392.438 16.82 392.305 16.828 392.152 16.828 cv
391.98 16.828 391.848 16.82 391.746 16.812 cv
391.641 16.797 391.555 16.781 391.492 16.758 cv
391.426 16.734 391.379 16.703 391.352 16.66 cv
391.32 16.625 391.305 16.578 391.309 16.516 cv
391.309 15.746 li
390.949 16.133 390.574 16.43 390.184 16.641 cv
389.785 16.852 389.352 16.957 388.879 16.961 cv
388.344 16.957 387.895 16.855 387.531 16.652 cv
387.164 16.449 386.867 16.176 386.637 15.824 cv
386.402 15.48 386.234 15.074 386.133 14.605 cv
386.031 14.145 385.98 13.652 385.98 13.133 cv
385.98 12.52 386.043 11.965 386.176 11.469 cv
386.305 10.977 386.5 10.555 386.758 10.207 cv
387.012 9.85901 387.328 9.59399 387.707 9.40198 cv
388.086 9.21899 388.523 9.125 389.02 9.12097 cv
389.406 9.125 389.758 9.203 390.078 9.35901 cv
390.391 9.52002 390.707 9.75 391.02 10.055 cv
391.02 6.29303 li
391.02 6.242 391.031 6.19501 391.063 6.15198 cv
391.086 6.11298 391.141 6.078 391.219 6.047 cv
391.293 6.02002 391.391 6 391.52 5.97998 cv
391.641 5.96899 391.801 5.961 391.996 5.95697 cv
392.188 5.961 392.344 5.96899 392.469 5.97998 cv
392.59 6 392.691 6.02002 392.766 6.047 cv
392.836 6.078 392.887 6.11298 392.922 6.15198 cv
392.949 6.19501 392.965 6.242 392.969 6.29303 cv
cp
391.02 11.871 mo
390.738 11.52 390.469 11.25 390.215 11.062 cv
389.953 10.875 389.684 10.781 389.406 10.781 cv
389.152 10.781 388.934 10.848 388.75 10.973 cv
388.563 11.105 388.414 11.273 388.305 11.484 cv
388.191 11.695 388.109 11.934 388.055 12.195 cv
388 12.461 387.973 12.73 387.973 13 cv
387.973 13.297 387.996 13.578 388.043 13.852 cv
388.09 14.129 388.164 14.375 388.273 14.59 cv
388.375 14.805 388.52 14.977 388.699 15.105 cv
388.875 15.238 389.098 15.305 389.367 15.301 cv
389.5 15.305 389.629 15.285 389.762 15.242 cv
389.887 15.207 390.02 15.145 390.152 15.051 cv
390.285 14.965 390.422 14.848 390.563 14.703 cv
390.703 14.562 390.855 14.387 391.02 14.18 cv
cp
f
399.793 14.551 mo
399.789 14.949 399.715 15.297 399.57 15.598 cv
399.422 15.898 399.215 16.152 398.945 16.352 cv
398.672 16.559 398.352 16.707 397.984 16.809 cv
397.617 16.906 397.215 16.957 396.785 16.961 cv
396.52 16.957 396.273 16.937 396.039 16.902 cv
395.805 16.859 395.594 16.812 395.406 16.754 cv
395.219 16.695 395.063 16.633 394.938 16.57 cv
394.813 16.508 394.719 16.449 394.664 16.395 cv
394.605 16.34 394.563 16.258 394.535 16.141 cv
394.5 16.027 394.484 15.852 394.488 15.621 cv
394.484 15.473 394.492 15.352 394.504 15.258 cv
394.512 15.168 394.527 15.098 394.551 15.039 cv
394.57 14.988 394.594 14.949 394.629 14.93 cv
394.656 14.914 394.695 14.906 394.742 14.902 cv
394.797 14.906 394.883 14.937 394.996 15 cv
395.105 15.066 395.242 15.141 395.414 15.215 cv
395.578 15.297 395.773 15.367 395.992 15.434 cv
396.211 15.504 396.461 15.539 396.746 15.535 cv
396.922 15.539 397.078 15.52 397.219 15.48 cv
397.352 15.445 397.473 15.395 397.578 15.324 cv
397.676 15.258 397.75 15.172 397.805 15.066 cv
397.852 14.965 397.879 14.844 397.883 14.707 cv
397.879 14.551 397.832 14.418 397.738 14.309 cv
397.645 14.199 397.516 14.102 397.359 14.016 cv
397.195 13.934 397.016 13.855 396.82 13.781 cv
396.617 13.711 396.414 13.633 396.203 13.539 cv
395.992 13.453 395.785 13.352 395.59 13.234 cv
395.387 13.125 395.207 12.984 395.051 12.816 cv
394.887 12.652 394.762 12.453 394.668 12.215 cv
394.574 11.984 394.527 11.703 394.527 11.371 cv
394.527 11.043 394.59 10.738 394.719 10.457 cv
394.848 10.184 395.035 9.94501 395.281 9.74597 cv
395.523 9.55103 395.82 9.39801 396.172 9.28497 cv
396.52 9.17999 396.914 9.125 397.355 9.12097 cv
397.57 9.125 397.781 9.14099 397.988 9.16803 cv
398.191 9.203 398.379 9.242 398.547 9.28497 cv
398.711 9.336 398.852 9.38702 398.969 9.43701 cv
399.082 9.49597 399.164 9.54303 399.215 9.578 cv
399.262 9.62097 399.297 9.65997 399.32 9.69501 cv
399.34 9.73798 399.352 9.78497 399.363 9.836 cv
399.371 9.89099 399.383 9.95697 399.391 10.035 cv
399.398 10.121 399.402 10.219 399.402 10.336 cv
399.402 10.477 399.398 10.594 399.391 10.68 cv
399.383 10.773 399.367 10.844 399.352 10.891 cv
399.332 10.945 399.309 10.98 399.281 10.996 cv
399.246 11.02 399.211 11.027 399.172 11.023 cv
399.121 11.027 399.047 11 398.953 10.941 cv
398.852 10.891 398.73 10.832 398.582 10.766 cv
398.434 10.707 398.262 10.648 398.066 10.59 cv
397.871 10.539 397.648 10.512 397.402 10.508 cv
397.223 10.512 397.07 10.531 396.941 10.562 cv
396.809 10.602 396.699 10.652 396.621 10.719 cv
396.535 10.789 396.473 10.867 396.434 10.957 cv
396.387 11.051 396.367 11.148 396.371 11.25 cv
396.367 11.41 396.418 11.547 396.52 11.652 cv
396.617 11.766 396.746 11.859 396.91 11.941 cv
397.07 12.027 397.254 12.105 397.461 12.176 cv
397.664 12.25 397.871 12.332 398.082 12.414 cv
398.289 12.504 398.496 12.602 398.707 12.715 cv
398.91 12.828 399.094 12.969 399.254 13.133 cv
399.414 13.301 399.543 13.5 399.645 13.73 cv
399.738 13.965 399.789 14.238 399.793 14.551 cv
cp
f
408.535 12.863 mo
408.531 13.164 408.504 13.375 408.449 13.492 cv
408.391 13.617 408.301 13.676 408.176 13.672 cv
404.934 13.672 li
404.805 13.676 404.711 13.613 404.656 13.488 cv
404.594 13.367 404.566 13.16 404.57 12.863 cv
404.566 12.574 404.594 12.367 404.656 12.246 cv
404.711 12.129 404.805 12.07 404.934 12.066 cv
408.176 12.066 li
408.238 12.07 408.289 12.082 408.336 12.105 cv
408.375 12.133 408.414 12.18 408.449 12.238 cv
408.477 12.305 408.5 12.387 408.516 12.488 cv
408.527 12.594 408.531 12.719 408.535 12.863 cv
cp
f
419.27 15.926 mo
419.266 16.082 419.262 16.215 419.25 16.316 cv
419.234 16.426 419.215 16.512 419.191 16.582 cv
419.164 16.652 419.129 16.703 419.094 16.734 cv
419.051 16.766 419.008 16.781 418.957 16.781 cv
414.336 16.781 li
414.16 16.781 414.016 16.73 413.902 16.629 cv
413.781 16.527 413.723 16.363 413.727 16.133 cv
413.727 6.97699 li
413.723 6.92999 413.742 6.883 413.777 6.836 cv
413.809 6.797 413.863 6.76202 413.945 6.73401 cv
414.02 6.711 414.125 6.69098 414.262 6.672 cv
414.391 6.65997 414.555 6.65198 414.758 6.64801 cv
414.953 6.65198 415.121 6.65997 415.254 6.672 cv
415.383 6.69098 415.484 6.711 415.566 6.73401 cv
415.641 6.76202 415.699 6.797 415.734 6.836 cv
415.766 6.883 415.781 6.92999 415.785 6.97699 cv
415.785 15.09 li
418.957 15.09 li
419.008 15.094 419.051 15.109 419.094 15.133 cv
419.129 15.164 419.164 15.211 419.191 15.273 cv
419.215 15.344 419.234 15.43 419.25 15.531 cv
419.262 15.641 419.266 15.77 419.27 15.926 cv
cp
f
427.395 12.969 mo
427.391 13.566 427.313 14.109 427.16 14.594 cv
427 15.086 426.766 15.504 426.449 15.855 cv
426.133 16.207 425.734 16.48 425.258 16.672 cv
424.777 16.863 424.219 16.957 423.582 16.961 cv
422.961 16.957 422.422 16.875 421.969 16.703 cv
421.508 16.535 421.129 16.285 420.832 15.957 cv
420.527 15.633 420.305 15.23 420.16 14.75 cv
420.016 14.273 419.945 13.727 419.945 13.109 cv
419.945 12.52 420.023 11.98 420.18 11.488 cv
420.336 11 420.574 10.578 420.895 10.227 cv
421.211 9.87903 421.605 9.60498 422.082 9.40997 cv
422.555 9.21899 423.113 9.125 423.754 9.12097 cv
424.379 9.125 424.918 9.20697 425.375 9.375 cv
425.832 9.547 426.211 9.797 426.508 10.121 cv
426.805 10.449 427.027 10.852 427.176 11.328 cv
427.32 11.809 427.391 12.355 427.395 12.969 cv
cp
425.375 13.047 mo
425.371 12.711 425.344 12.395 425.293 12.102 cv
425.234 11.816 425.141 11.566 425.016 11.352 cv
424.883 11.141 424.711 10.973 424.5 10.852 cv
424.281 10.734 424.012 10.676 423.684 10.672 cv
423.395 10.676 423.141 10.73 422.922 10.832 cv
422.703 10.941 422.523 11.098 422.383 11.301 cv
422.242 11.508 422.137 11.754 422.066 12.039 cv
421.996 12.332 421.961 12.66 421.961 13.023 cv
421.961 13.371 421.988 13.687 422.047 13.973 cv
422.102 14.266 422.195 14.516 422.324 14.727 cv
422.449 14.941 422.621 15.105 422.844 15.219 cv
423.059 15.34 423.328 15.398 423.652 15.395 cv
423.945 15.398 424.203 15.344 424.426 15.234 cv
424.641 15.129 424.82 14.977 424.961 14.77 cv
425.102 14.57 425.203 14.324 425.273 14.035 cv
425.336 13.75 425.371 13.422 425.375 13.047 cv
cp
f
434.211 15.41 mo
434.207 15.547 434.203 15.66 434.199 15.75 cv
434.188 15.844 434.18 15.922 434.168 15.98 cv
434.152 16.043 434.137 16.094 434.121 16.129 cv
434.102 16.172 434.059 16.219 434 16.277 cv
433.934 16.34 433.828 16.414 433.68 16.496 cv
433.527 16.586 433.355 16.664 433.164 16.727 cv
432.973 16.797 432.766 16.848 432.539 16.891 cv
432.313 16.93 432.078 16.949 431.844 16.953 cv
431.305 16.949 430.832 16.871 430.418 16.703 cv
430.004 16.539 429.656 16.293 429.379 15.969 cv
429.094 15.645 428.883 15.25 428.742 14.781 cv
428.602 14.316 428.531 13.777 428.531 13.172 cv
428.531 12.477 428.617 11.879 428.789 11.371 cv
428.961 10.867 429.203 10.445 429.52 10.113 cv
429.828 9.78101 430.195 9.53497 430.625 9.37097 cv
431.047 9.211 431.516 9.12903 432.027 9.12903 cv
432.234 9.12903 432.438 9.14801 432.641 9.18402 cv
432.836 9.22302 433.023 9.27301 433.199 9.33197 cv
433.371 9.39801 433.527 9.46899 433.668 9.54303 cv
433.805 9.625 433.902 9.69098 433.961 9.74597 cv
434.016 9.80499 434.055 9.85199 434.082 9.88702 cv
434.102 9.92999 434.121 9.97998 434.137 10.039 cv
434.148 10.105 434.16 10.184 434.168 10.27 cv
434.176 10.363 434.18 10.473 434.18 10.602 cv
434.18 10.906 434.152 11.117 434.102 11.238 cv
434.047 11.359 433.98 11.422 433.898 11.418 cv
433.809 11.422 433.715 11.387 433.617 11.312 cv
433.516 11.242 433.398 11.16 433.266 11.07 cv
433.133 10.984 432.973 10.902 432.785 10.828 cv
432.598 10.758 432.371 10.723 432.113 10.719 cv
431.602 10.723 431.215 10.918 430.945 11.309 cv
430.672 11.699 430.535 12.273 430.539 13.031 cv
430.535 13.406 430.57 13.738 430.641 14.023 cv
430.707 14.309 430.805 14.547 430.941 14.738 cv
431.07 14.934 431.238 15.078 431.441 15.172 cv
431.641 15.27 431.871 15.316 432.137 15.316 cv
432.402 15.316 432.637 15.277 432.836 15.195 cv
433.027 15.117 433.195 15.027 433.344 14.926 cv
433.484 14.828 433.609 14.738 433.711 14.656 cv
433.809 14.578 433.891 14.539 433.961 14.535 cv
434.004 14.539 434.043 14.551 434.078 14.574 cv
434.105 14.602 434.129 14.648 434.152 14.719 cv
434.168 14.789 434.184 14.879 434.195 14.988 cv
434.203 15.098 434.207 15.238 434.211 15.41 cv
cp
f
441.496 16.539 mo
441.492 16.617 441.465 16.672 441.418 16.711 cv
441.363 16.754 441.281 16.781 441.172 16.801 cv
441.055 16.816 440.891 16.828 440.676 16.828 cv
440.438 16.828 440.266 16.816 440.164 16.801 cv
440.055 16.781 439.98 16.754 439.941 16.711 cv
439.895 16.672 439.875 16.617 439.875 16.539 cv
439.875 15.988 li
439.586 16.297 439.258 16.535 438.895 16.703 cv
438.527 16.875 438.121 16.957 437.676 16.961 cv
437.305 16.957 436.965 16.91 436.656 16.816 cv
436.348 16.723 436.082 16.582 435.855 16.387 cv
435.629 16.199 435.453 15.965 435.328 15.684 cv
435.203 15.406 435.141 15.078 435.145 14.699 cv
435.141 14.301 435.219 13.949 435.379 13.645 cv
435.535 13.348 435.773 13.102 436.09 12.906 cv
436.402 12.715 436.793 12.57 437.262 12.473 cv
437.73 12.383 438.273 12.336 438.891 12.332 cv
439.57 12.332 li
439.57 11.91 li
439.57 11.695 439.547 11.504 439.504 11.34 cv
439.457 11.18 439.383 11.043 439.285 10.93 cv
439.18 10.824 439.047 10.742 438.879 10.687 cv
438.707 10.637 438.496 10.613 438.254 10.609 cv
437.922 10.613 437.629 10.648 437.375 10.719 cv
437.113 10.793 436.887 10.875 436.691 10.961 cv
436.492 11.055 436.328 11.133 436.199 11.203 cv
436.063 11.277 435.953 11.316 435.875 11.312 cv
435.813 11.316 435.762 11.297 435.723 11.258 cv
435.676 11.223 435.641 11.172 435.613 11.102 cv
435.582 11.039 435.559 10.953 435.547 10.852 cv
435.527 10.754 435.52 10.645 435.523 10.523 cv
435.52 10.363 435.535 10.238 435.563 10.141 cv
435.586 10.051 435.633 9.96503 435.711 9.88702 cv
435.781 9.81201 435.91 9.72998 436.094 9.64099 cv
436.273 9.55103 436.484 9.46503 436.73 9.38702 cv
436.973 9.30902 437.242 9.24597 437.531 9.19501 cv
437.82 9.14801 438.117 9.125 438.426 9.12097 cv
438.969 9.125 439.434 9.17603 439.82 9.28101 cv
440.207 9.39099 440.527 9.55499 440.777 9.77301 cv
441.027 9.992 441.207 10.277 441.324 10.625 cv
441.434 10.977 441.492 11.391 441.496 11.863 cv
cp
439.57 13.562 mo
438.82 13.562 li
438.504 13.566 438.234 13.59 438.012 13.633 cv
437.785 13.684 437.602 13.754 437.465 13.844 cv
437.32 13.941 437.219 14.055 437.156 14.184 cv
437.09 14.32 437.055 14.469 437.059 14.637 cv
437.055 14.93 437.148 15.16 437.336 15.324 cv
437.52 15.492 437.777 15.574 438.105 15.574 cv
438.379 15.574 438.629 15.504 438.863 15.363 cv
439.09 15.223 439.328 15.02 439.57 14.746 cv
cp
f
445.422 16.516 mo
445.418 16.57 445.402 16.613 445.375 16.652 cv
445.34 16.691 445.285 16.727 445.215 16.75 cv
445.137 16.777 445.039 16.793 444.914 16.809 cv
444.789 16.82 444.629 16.828 444.441 16.828 cv
444.246 16.828 444.09 16.82 443.965 16.809 cv
443.84 16.793 443.738 16.777 443.664 16.75 cv
443.586 16.727 443.531 16.691 443.504 16.652 cv
443.469 16.613 443.453 16.57 443.457 16.516 cv
443.457 6.27002 li
443.453 6.21899 443.469 6.172 443.504 6.12903 cv
443.531 6.09003 443.586 6.05499 443.664 6.02301 cv
443.738 5.99597 443.84 5.97699 443.965 5.95697 cv
444.09 5.94501 444.246 5.93701 444.441 5.93402 cv
444.629 5.93701 444.789 5.94501 444.914 5.95697 cv
445.039 5.97699 445.137 5.99597 445.215 6.02301 cv
445.285 6.05499 445.34 6.09003 445.375 6.12903 cv
445.402 6.172 445.418 6.21899 445.422 6.27002 cv
cp
f
462.906 16.5 mo
462.902 16.555 462.891 16.602 462.863 16.641 cv
462.832 16.684 462.777 16.719 462.707 16.742 cv
462.629 16.77 462.531 16.789 462.406 16.805 cv
462.281 16.82 462.121 16.828 461.93 16.828 cv
461.742 16.828 461.586 16.82 461.465 16.805 cv
461.336 16.789 461.238 16.77 461.168 16.742 cv
461.094 16.719 461.043 16.684 461.012 16.641 cv
460.98 16.602 460.965 16.555 460.965 16.5 cv
460.965 8.29303 li
460.949 8.29303 li
458.027 16.492 li
458.004 16.562 457.969 16.617 457.926 16.66 cv
457.875 16.707 457.813 16.742 457.734 16.766 cv
457.652 16.793 457.551 16.809 457.426 16.816 cv
457.301 16.824 457.148 16.828 456.977 16.828 cv
456.797 16.828 456.648 16.82 456.523 16.809 cv
456.398 16.793 456.293 16.773 456.215 16.746 cv
456.129 16.719 456.066 16.684 456.023 16.641 cv
455.973 16.602 455.941 16.555 455.93 16.492 cv
453.109 8.29303 li
453.094 8.29303 li
453.094 16.5 li
453.09 16.555 453.074 16.602 453.051 16.641 cv
453.02 16.684 452.969 16.719 452.891 16.742 cv
452.813 16.77 452.711 16.789 452.59 16.805 cv
452.465 16.82 452.309 16.828 452.121 16.828 cv
451.93 16.828 451.773 16.82 451.652 16.805 cv
451.523 16.789 451.422 16.77 451.352 16.742 cv
451.273 16.719 451.223 16.684 451.195 16.641 cv
451.164 16.602 451.148 16.555 451.152 16.5 cv
451.152 7.51599 li
451.148 7.25403 451.219 7.05103 451.363 6.90601 cv
451.5 6.77002 451.688 6.69897 451.926 6.69501 cv
453.266 6.69501 li
453.504 6.69897 453.707 6.71899 453.879 6.75403 cv
454.047 6.797 454.195 6.85901 454.324 6.94897 cv
454.445 7.04303 454.551 7.164 454.637 7.30902 cv
454.719 7.461 454.789 7.64502 454.855 7.85901 cv
457.039 13.867 li
457.07 13.867 li
459.328 7.875 li
459.395 7.65601 459.469 7.47302 459.551 7.32001 cv
459.629 7.172 459.723 7.05103 459.832 6.953 cv
459.938 6.86298 460.063 6.797 460.207 6.75403 cv
460.352 6.71899 460.52 6.69897 460.715 6.69501 cv
462.094 6.69501 li
462.23 6.69897 462.352 6.71503 462.457 6.75 cv
462.555 6.789 462.637 6.84399 462.707 6.90997 cv
462.77 6.98401 462.82 7.07001 462.855 7.16803 cv
462.887 7.27301 462.902 7.39099 462.906 7.51599 cv
cp
f
472.016 12.969 mo
472.012 13.566 471.934 14.109 471.781 14.594 cv
471.621 15.086 471.387 15.504 471.07 15.855 cv
470.754 16.207 470.355 16.48 469.879 16.672 cv
469.398 16.863 468.84 16.957 468.203 16.961 cv
467.582 16.957 467.043 16.875 466.59 16.703 cv
466.129 16.535 465.75 16.285 465.453 15.957 cv
465.148 15.633 464.926 15.23 464.781 14.75 cv
464.637 14.273 464.566 13.727 464.566 13.109 cv
464.566 12.52 464.645 11.98 464.801 11.488 cv
464.957 11 465.195 10.578 465.516 10.227 cv
465.832 9.87903 466.227 9.60498 466.703 9.40997 cv
467.176 9.21899 467.734 9.125 468.375 9.12097 cv
469 9.125 469.539 9.20697 469.996 9.375 cv
470.453 9.547 470.832 9.797 471.129 10.121 cv
471.426 10.449 471.648 10.852 471.797 11.328 cv
471.941 11.809 472.012 12.355 472.016 12.969 cv
cp
469.996 13.047 mo
469.992 12.711 469.965 12.395 469.914 12.102 cv
469.855 11.816 469.762 11.566 469.637 11.352 cv
469.504 11.141 469.332 10.973 469.121 10.852 cv
468.902 10.734 468.633 10.676 468.305 10.672 cv
468.016 10.676 467.762 10.73 467.543 10.832 cv
467.324 10.941 467.145 11.098 467.004 11.301 cv
466.863 11.508 466.758 11.754 466.688 12.039 cv
466.617 12.332 466.582 12.66 466.582 13.023 cv
466.582 13.371 466.609 13.687 466.668 13.973 cv
466.723 14.266 466.816 14.516 466.945 14.727 cv
467.07 14.941 467.242 15.105 467.465 15.219 cv
467.68 15.34 467.949 15.398 468.273 15.395 cv
468.566 15.398 468.824 15.344 469.047 15.234 cv
469.262 15.129 469.441 14.977 469.582 14.77 cv
469.723 14.57 469.824 14.324 469.895 14.035 cv
469.957 13.75 469.992 13.422 469.996 13.047 cv
cp
f
480.164 16.516 mo
480.16 16.578 480.148 16.625 480.125 16.66 cv
480.098 16.703 480.051 16.734 479.992 16.758 cv
479.926 16.781 479.844 16.797 479.738 16.812 cv
479.633 16.82 479.5 16.828 479.348 16.828 cv
479.176 16.828 479.043 16.82 478.941 16.812 cv
478.836 16.797 478.75 16.781 478.688 16.758 cv
478.621 16.734 478.574 16.703 478.547 16.66 cv
478.516 16.625 478.5 16.578 478.504 16.516 cv
478.504 15.746 li
478.145 16.133 477.77 16.43 477.379 16.641 cv
476.98 16.852 476.547 16.957 476.074 16.961 cv
475.539 16.957 475.09 16.855 474.727 16.652 cv
474.359 16.449 474.063 16.176 473.832 15.824 cv
473.598 15.48 473.43 15.074 473.328 14.605 cv
473.227 14.145 473.176 13.652 473.176 13.133 cv
473.176 12.52 473.238 11.965 473.371 11.469 cv
473.5 10.977 473.695 10.555 473.953 10.207 cv
474.207 9.85901 474.523 9.59399 474.902 9.40198 cv
475.281 9.21899 475.719 9.125 476.215 9.12097 cv
476.602 9.125 476.953 9.203 477.273 9.35901 cv
477.586 9.52002 477.902 9.75 478.215 10.055 cv
478.215 6.29303 li
478.215 6.242 478.227 6.19501 478.258 6.15198 cv
478.281 6.11298 478.336 6.078 478.414 6.047 cv
478.488 6.02002 478.586 6 478.715 5.97998 cv
478.836 5.96899 478.996 5.961 479.191 5.95697 cv
479.383 5.961 479.539 5.96899 479.664 5.97998 cv
479.785 6 479.887 6.02002 479.961 6.047 cv
480.031 6.078 480.082 6.11298 480.117 6.15198 cv
480.145 6.19501 480.16 6.242 480.164 6.29303 cv
cp
478.215 11.871 mo
477.934 11.52 477.664 11.25 477.41 11.062 cv
477.148 10.875 476.879 10.781 476.602 10.781 cv
476.348 10.781 476.129 10.848 475.945 10.973 cv
475.758 11.105 475.609 11.273 475.5 11.484 cv
475.387 11.695 475.305 11.934 475.25 12.195 cv
475.195 12.461 475.168 12.73 475.168 13 cv
475.168 13.297 475.191 13.578 475.238 13.852 cv
475.285 14.129 475.359 14.375 475.469 14.59 cv
475.57 14.805 475.715 14.977 475.895 15.105 cv
476.07 15.238 476.293 15.305 476.563 15.301 cv
476.695 15.305 476.824 15.285 476.957 15.242 cv
477.082 15.207 477.215 15.145 477.348 15.051 cv
477.48 14.965 477.617 14.848 477.758 14.703 cv
477.898 14.562 478.051 14.387 478.215 14.18 cv
cp
f
488.566 12.84 mo
488.563 13.078 488.512 13.254 488.406 13.367 cv
488.297 13.484 488.148 13.543 487.969 13.539 cv
483.734 13.539 li
483.73 13.84 483.766 14.109 483.84 14.348 cv
483.906 14.59 484.02 14.793 484.176 14.961 cv
484.328 15.133 484.523 15.262 484.766 15.348 cv
485.004 15.437 485.293 15.48 485.637 15.48 cv
485.977 15.48 486.277 15.457 486.539 15.406 cv
486.797 15.359 487.023 15.305 487.215 15.242 cv
487.402 15.184 487.559 15.129 487.688 15.078 cv
487.809 15.031 487.91 15.008 487.992 15.004 cv
488.035 15.008 488.074 15.016 488.109 15.031 cv
488.137 15.051 488.164 15.082 488.184 15.129 cv
488.203 15.176 488.215 15.242 488.227 15.328 cv
488.23 15.414 488.234 15.523 488.238 15.652 cv
488.234 15.77 488.234 15.867 488.23 15.945 cv
488.223 16.027 488.215 16.094 488.207 16.148 cv
488.195 16.207 488.18 16.258 488.16 16.293 cv
488.141 16.336 488.113 16.371 488.082 16.406 cv
488.047 16.445 487.953 16.496 487.805 16.555 cv
487.648 16.621 487.457 16.684 487.227 16.738 cv
486.988 16.801 486.719 16.848 486.422 16.895 cv
486.117 16.934 485.797 16.957 485.457 16.961 cv
484.836 16.957 484.293 16.883 483.832 16.727 cv
483.363 16.574 482.977 16.336 482.668 16.02 cv
482.352 15.703 482.117 15.305 481.969 14.82 cv
481.813 14.34 481.738 13.773 481.742 13.117 cv
481.738 12.504 481.816 11.945 481.98 11.449 cv
482.137 10.953 482.371 10.535 482.684 10.187 cv
482.988 9.84399 483.363 9.578 483.801 9.39502 cv
484.238 9.21503 484.73 9.125 485.285 9.12097 cv
485.863 9.125 486.363 9.211 486.777 9.37903 cv
487.191 9.55499 487.527 9.79303 487.793 10.094 cv
488.055 10.398 488.25 10.758 488.379 11.172 cv
488.5 11.59 488.563 12.039 488.566 12.527 cv
cp
486.664 12.277 mo
486.676 11.727 486.566 11.293 486.332 10.98 cv
486.098 10.668 485.73 10.512 485.238 10.508 cv
484.988 10.512 484.773 10.559 484.59 10.648 cv
484.402 10.746 484.25 10.871 484.129 11.027 cv
484.004 11.187 483.91 11.375 483.848 11.59 cv
483.781 11.805 483.742 12.035 483.734 12.277 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
