%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SpeedupEightThread-Remote.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 2:32:54 p.m.
%%BoundingBox: 0 0 612 545
%%HiResBoundingBox: 0 0 612 544.9201
%%CropBox: 0 0 612 544.9201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -544.92 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 544.92 li
612 544.92 li
612 0 li
cp
clp
gsave
0 544.92 mo
612 544.92 li
612 -.0799561 li
0 -.0799561 li
cp
clp
0 6.10352e-5 mo
612 6.10352e-5 li
612 544.922 li
0 544.922 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
35.398 482.519 mo
598.922 482.519 li
35.398 450.961 mo
598.922 450.961 li
35.398 419.281 mo
598.922 419.281 li
35.398 387.719 mo
598.922 387.719 li
35.398 356.16 mo
598.922 356.16 li
35.398 324.48 mo
598.922 324.48 li
35.398 292.922 mo
598.922 292.922 li
35.398 261.359 mo
598.922 261.359 li
35.398 229.801 mo
598.922 229.801 li
35.398 198.121 mo
598.922 198.121 li
35.398 166.559 mo
598.922 166.559 li
35.398 135 mo
598.922 135 li
35.398 103.32 mo
598.922 103.32 li
35.398 71.7621 mo
598.922 71.7621 li
35.398 40.199 mo
598.922 40.199 li
.140414 .108034 .108034 0 cmyk
@
35.398 466.68 mo
598.922 466.68 li
35.398 435.121 mo
598.922 435.121 li
35.398 403.559 mo
598.922 403.559 li
35.398 371.879 mo
598.922 371.879 li
35.398 340.32 mo
598.922 340.32 li
35.398 308.762 mo
598.922 308.762 li
35.398 277.199 mo
598.922 277.199 li
35.398 245.519 mo
598.922 245.519 li
35.398 213.961 mo
598.922 213.961 li
35.398 182.398 mo
598.922 182.398 li
35.398 150.719 mo
598.922 150.719 li
35.398 119.16 mo
598.922 119.16 li
35.398 87.6021 mo
598.922 87.6021 li
35.398 55.9221 mo
598.922 55.9221 li
35.398 24.3591 mo
598.922 24.3591 li
.328344 .284215 .278569 .000915541 cmyk
@
70.559 24.3591 mo
70.559 498.359 li
141 24.3591 mo
141 498.359 li
211.441 24.3591 mo
211.441 498.359 li
281.879 24.3591 mo
281.879 498.359 li
352.32 24.3591 mo
352.32 498.359 li
422.762 24.3591 mo
422.762 498.359 li
493.199 24.3591 mo
493.199 498.359 li
563.641 24.3591 mo
563.641 498.359 li
.178592 .148898 .143923 0 cmyk
@
35.398 24.3591 mo
35.398 498.359 li
105.84 24.3591 mo
105.84 498.359 li
176.281 24.3591 mo
176.281 498.359 li
246.719 24.3591 mo
246.719 498.359 li
317.16 24.3591 mo
317.16 498.359 li
387.602 24.3591 mo
387.602 498.359 li
458.039 24.3591 mo
458.039 498.359 li
528.48 24.3591 mo
528.48 498.359 li
598.922 24.3591 mo
598.922 498.359 li
.328344 .284215 .278569 .000915541 cmyk
@
15.238 489 mo
22.32 489 li
22.32 506.039 li
15.238 506.039 li
cp
0 0 0 0 cmyk
ef
15.238 457.441 mo
22.32 457.441 li
22.32 474.48 li
15.238 474.48 li
cp
ef
15.238 425.762 mo
22.32 425.762 li
22.32 442.922 li
15.238 442.922 li
cp
ef
15.238 394.199 mo
22.32 394.199 li
22.32 411.359 li
15.238 411.359 li
cp
ef
15.238 362.641 mo
22.32 362.641 li
22.32 379.68 li
15.238 379.68 li
cp
ef
15.238 330.961 mo
22.32 330.961 li
22.32 348.121 li
15.238 348.121 li
cp
ef
15.238 299.398 mo
22.32 299.398 li
22.32 316.558 li
15.238 316.558 li
cp
ef
15.238 267.84 mo
22.32 267.84 li
22.32 284.879 li
15.238 284.879 li
cp
ef
15.238 236.281 mo
22.32 236.281 li
22.32 253.32 li
15.238 253.32 li
cp
ef
8.16 204.602 mo
22.32 204.602 li
22.32 221.762 li
8.16 221.762 li
cp
ef
8.16 173.039 mo
22.32 173.039 li
22.32 190.078 li
8.16 190.078 li
cp
ef
8.16 141.48 mo
22.32 141.48 li
22.32 158.519 li
8.16 158.519 li
cp
ef
8.16 109.801 mo
22.32 109.801 li
22.32 126.961 li
8.16 126.961 li
cp
ef
8.16 78.238 mo
22.32 78.238 li
22.32 95.281 li
8.16 95.281 li
cp
ef
8.16 46.6801 mo
22.32 46.6801 li
22.32 63.7191 li
8.16 63.7191 li
cp
ef
8.16 15.0001 mo
22.32 15.0001 li
22.32 32.16 li
8.16 32.16 li
cp
ef
.96 lw
35.398 498.359 mo
598.922 498.359 li
.367803 .29575 .300999 .00198367 cmyk
@
35.398 498.359 mo
35.398 502.801 li
105.84 498.359 mo
105.84 502.801 li
176.281 498.359 mo
176.281 502.801 li
246.719 498.359 mo
246.719 502.801 li
317.16 498.359 mo
317.16 502.801 li
387.602 498.359 mo
387.602 502.801 li
458.039 498.359 mo
458.039 502.801 li
528.48 498.359 mo
528.48 502.801 li
598.922 498.359 mo
598.922 502.801 li
@
gsave
35.281 24.3591 mo
599.519 24.3591 li
599.519 498.961 li
35.281 498.961 li
cp
clp
1 lc
35.398 498.359 mo
105.84 473.039 li
176.281 438.238 li
246.719 394.559 li
317.16 387.719 li
387.602 428.398 li
458.039 352.199 li
528.48 352.199 li
598.922 340.32 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
30.18 493.16 mo
40.141 493.16 li
40.141 503.121 li
30.18 503.121 li
cp
.62768 .285466 0 0 cmyk
@
100.621 467.961 mo
110.578 467.961 li
110.578 477.922 li
100.621 477.922 li
cp
@
171.059 433.039 mo
181.02 433.039 li
181.02 443 li
171.059 443 li
cp
@
241.5 389.359 mo
251.461 389.359 li
251.461 399.32 li
241.5 399.32 li
cp
@
311.941 382.641 mo
321.898 382.641 li
321.898 392.602 li
311.941 392.602 li
cp
@
382.379 423.199 mo
392.34 423.199 li
392.34 433.16 li
382.379 433.16 li
cp
@
452.82 347 mo
462.781 347 li
462.781 356.961 li
452.82 356.961 li
cp
@
523.262 347 mo
533.219 347 li
533.219 356.961 li
523.262 356.961 li
cp
@
593.699 335.238 mo
603.66 335.238 li
603.66 345.199 li
593.699 345.199 li
cp
@
gsave
35.281 24.3591 mo
599.519 24.3591 li
599.519 498.961 li
35.281 498.961 li
cp
clp
.96 lw
1 lc
35.398 498.359 mo
105.84 464.16 li
176.281 438.238 li
246.719 425.281 li
317.16 344.281 li
387.602 401.879 li
458.039 389.762 li
528.48 368.52 li
598.922 304.922 li
.466651 0 .889799 0 cmyk
@
grestore
30.18 493.16 mo
40.141 493.16 li
40.141 503.121 li
30.18 503.121 li
cp
.466651 0 .889799 0 cmyk
@
100.621 459.078 mo
110.578 459.078 li
110.578 469.039 li
100.621 469.039 li
cp
@
171.059 433.16 mo
181.02 433.16 li
181.02 443.121 li
171.059 443.121 li
cp
@
241.5 420.199 mo
251.461 420.199 li
251.461 430.16 li
241.5 430.16 li
cp
@
311.941 339.199 mo
321.898 339.199 li
321.898 349.16 li
311.941 349.16 li
cp
@
382.379 396.801 mo
392.34 396.801 li
392.34 406.762 li
382.379 406.762 li
cp
@
452.82 384.68 mo
462.781 384.68 li
462.781 394.641 li
452.82 394.641 li
cp
@
523.262 363.32 mo
533.219 363.32 li
533.219 373.281 li
523.262 373.281 li
cp
@
593.699 299.719 mo
603.66 299.719 li
603.66 309.68 li
593.699 309.68 li
cp
@
gsave
35.281 24.3591 mo
599.519 24.3591 li
599.519 498.961 li
35.281 498.961 li
cp
clp
.96 lw
1 lc
35.398 498.359 mo
105.84 472.32 li
176.281 439.199 li
246.719 413.281 li
317.16 356.281 li
387.602 396.121 li
458.039 390 li
528.48 384.121 li
598.922 349.922 li
0 .990631 1 .000396735 cmyk
@
grestore
30.18 493.16 mo
40.141 493.16 li
40.141 503.121 li
30.18 503.121 li
cp
0 .990631 1 .000396735 cmyk
@
100.621 467.121 mo
110.578 467.121 li
110.578 477.078 li
100.621 477.078 li
cp
@
171.059 434.121 mo
181.02 434.121 li
181.02 444.078 li
171.059 444.078 li
cp
@
241.5 408.199 mo
251.461 408.199 li
251.461 418.16 li
241.5 418.16 li
cp
@
311.941 351.078 mo
321.898 351.078 li
321.898 361.039 li
311.941 361.039 li
cp
@
382.379 390.922 mo
392.34 390.922 li
392.34 400.879 li
382.379 400.879 li
cp
@
452.82 384.801 mo
462.781 384.801 li
462.781 394.762 li
452.82 394.762 li
cp
@
523.262 379.039 mo
533.219 379.039 li
533.219 389 li
523.262 389 li
cp
@
593.699 344.719 mo
603.66 344.719 li
603.66 354.68 li
593.699 354.68 li
cp
@
gsave
35.281 24.3591 mo
599.519 24.3591 li
599.519 498.961 li
35.281 498.961 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.398 498.359 mo
105.84 461.16 li
176.281 435.359 li
246.719 417.84 li
317.16 405 li
387.602 343.922 li
458.039 350.039 li
528.48 332.762 li
598.922 337.32 li
@
grestore
30.18 493.16 mo
40.141 493.16 li
40.141 503.121 li
30.18 503.121 li
cp
@
100.621 455.961 mo
110.578 455.961 li
110.578 465.922 li
100.621 465.922 li
cp
@
171.059 430.16 mo
181.02 430.16 li
181.02 440.121 li
171.059 440.121 li
cp
@
241.5 412.641 mo
251.461 412.641 li
251.461 422.602 li
241.5 422.602 li
cp
@
311.941 399.801 mo
321.898 399.801 li
321.898 409.762 li
311.941 409.762 li
cp
@
382.379 338.84 mo
392.34 338.84 li
392.34 348.801 li
382.379 348.801 li
cp
@
452.82 344.961 mo
462.781 344.961 li
462.781 354.922 li
452.82 354.922 li
cp
@
523.262 327.559 mo
533.219 327.559 li
533.219 337.52 li
523.262 337.52 li
cp
@
593.699 332.238 mo
603.66 332.238 li
603.66 342.199 li
593.699 342.199 li
cp
@
gsave
35.281 24.3591 mo
599.519 24.3591 li
599.519 498.961 li
35.281 498.961 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.398 498.359 mo
105.84 464.16 li
176.281 446.52 li
246.719 427.922 li
317.16 402.238 li
387.602 410.641 li
458.039 394.441 li
528.48 396.602 li
598.922 383.641 li
.62768 .285466 0 0 cmyk
@
grestore
30.18 493.16 mo
40.141 493.16 li
40.141 503.121 li
30.18 503.121 li
cp
.62768 .285466 0 0 cmyk
@
100.621 459.078 mo
110.578 459.078 li
110.578 469.039 li
100.621 469.039 li
cp
@
171.059 441.32 mo
181.02 441.32 li
181.02 451.281 li
171.059 451.281 li
cp
@
241.5 422.84 mo
251.461 422.84 li
251.461 432.801 li
241.5 432.801 li
cp
@
311.941 397.16 mo
321.898 397.16 li
321.898 407.121 li
311.941 407.121 li
cp
@
382.379 405.441 mo
392.34 405.441 li
392.34 415.398 li
382.379 415.398 li
cp
@
452.82 389.359 mo
462.781 389.359 li
462.781 399.32 li
452.82 399.32 li
cp
@
523.262 391.519 mo
533.219 391.519 li
533.219 401.48 li
523.262 401.48 li
cp
@
593.699 378.559 mo
603.66 378.559 li
603.66 388.52 li
593.699 388.52 li
cp
@
gsave
35.281 24.3591 mo
599.519 24.3591 li
599.519 498.961 li
35.281 498.961 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.398 498.359 mo
105.84 473.762 li
176.281 454.32 li
246.719 412.32 li
317.16 425.762 li
387.602 404.039 li
458.039 324.602 li
528.48 399 li
598.922 309 li
.466651 0 .889799 0 cmyk
@
grestore
30.66 493.641 mo
39.66 493.641 li
39.66 502.641 li
30.66 502.641 li
cp
.466651 0 .889799 0 cmyk
@
101.102 469.039 mo
110.102 469.039 li
110.102 478.039 li
101.102 478.039 li
cp
@
171.539 449.719 mo
180.539 449.719 li
180.539 458.719 li
171.539 458.719 li
cp
@
241.98 407.602 mo
250.98 407.602 li
250.98 416.602 li
241.98 416.602 li
cp
@
312.422 421.16 mo
321.422 421.16 li
321.422 430.16 li
312.422 430.16 li
cp
@
382.859 399.441 mo
391.859 399.441 li
391.859 408.441 li
382.859 408.441 li
cp
@
453.301 320 mo
462.301 320 li
462.301 329 li
453.301 329 li
cp
@
523.738 394.281 mo
532.738 394.281 li
532.738 403.281 li
523.738 403.281 li
cp
@
594.18 304.281 mo
603.18 304.281 li
603.18 313.281 li
594.18 313.281 li
cp
@
15.219 488.965 mo
22.313 488.965 li
22.313 506.055 li
15.219 506.055 li
cp
0 0 0 0 cmyk
ef
21.594 501.902 mo
21.59 501.992 21.582 502.062 21.57 502.121 cv
21.555 502.184 21.535 502.234 21.516 502.266 cv
21.492 502.305 21.469 502.328 21.438 502.344 cv
21.406 502.359 21.375 502.367 21.348 502.367 cv
16.711 502.367 li
16.676 502.367 16.648 502.359 16.621 502.344 cv
16.594 502.328 16.566 502.305 16.543 502.266 cv
16.516 502.234 16.496 502.184 16.484 502.121 cv
16.469 502.062 16.461 501.992 16.465 501.902 cv
16.461 501.824 16.469 501.75 16.484 501.687 cv
16.496 501.629 16.512 501.582 16.535 501.543 cv
16.551 501.508 16.578 501.477 16.609 501.453 cv
16.641 501.434 16.672 501.426 16.711 501.422 cv
18.563 501.422 li
18.563 494.676 li
16.848 495.695 li
16.758 495.746 16.688 495.773 16.641 495.781 cv
16.586 495.789 16.543 495.781 16.512 495.75 cv
16.477 495.723 16.457 495.672 16.445 495.602 cv
16.434 495.535 16.426 495.449 16.43 495.34 cv
16.426 495.266 16.43 495.199 16.441 495.141 cv
16.445 495.09 16.457 495.043 16.473 495.004 cv
16.484 494.969 16.504 494.937 16.527 494.91 cv
16.551 494.883 16.582 494.855 16.629 494.828 cv
18.672 493.516 li
18.688 493.504 18.707 493.492 18.738 493.484 cv
18.762 493.477 18.797 493.469 18.844 493.457 cv
18.883 493.449 18.934 493.441 18.988 493.437 cv
19.043 493.437 19.109 493.437 19.195 493.434 cv
19.301 493.437 19.395 493.441 19.469 493.449 cv
19.539 493.457 19.594 493.473 19.641 493.488 cv
19.68 493.508 19.707 493.527 19.723 493.551 cv
19.73 493.578 19.738 493.602 19.742 493.625 cv
19.742 501.422 li
21.348 501.422 li
21.383 501.426 21.418 501.434 21.449 501.453 cv
21.48 501.477 21.504 501.508 21.527 501.543 cv
21.543 501.582 21.559 501.629 21.574 501.687 cv
21.582 501.75 21.59 501.824 21.594 501.902 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.219 457.367 mo
22.313 457.367 li
22.313 474.457 li
15.219 474.457 li
cp
0 0 0 0 cmyk
ef
21.574 470.273 mo
21.57 470.359 21.566 470.434 21.555 470.496 cv
21.543 470.562 21.527 470.617 21.508 470.656 cv
21.484 470.703 21.457 470.734 21.426 470.75 cv
21.391 470.773 21.352 470.781 21.313 470.781 cv
16.41 470.781 li
16.348 470.781 16.289 470.773 16.242 470.758 cv
16.191 470.742 16.152 470.719 16.117 470.68 cv
16.082 470.648 16.055 470.594 16.043 470.523 cv
16.023 470.453 16.016 470.367 16.02 470.266 cv
16.016 470.176 16.02 470.098 16.027 470.027 cv
16.031 469.961 16.047 469.902 16.074 469.848 cv
16.098 469.797 16.129 469.742 16.164 469.687 cv
16.199 469.637 16.242 469.582 16.301 469.52 cv
18.074 467.695 li
18.484 467.277 18.813 466.902 19.063 466.566 cv
19.309 466.238 19.5 465.934 19.633 465.656 cv
19.766 465.383 19.852 465.133 19.898 464.906 cv
19.938 464.684 19.961 464.473 19.961 464.277 cv
19.961 464.082 19.926 463.898 19.859 463.719 cv
19.793 463.547 19.699 463.391 19.574 463.254 cv
19.449 463.125 19.293 463.02 19.105 462.937 cv
18.918 462.863 18.699 462.824 18.453 462.82 cv
18.164 462.824 17.906 462.863 17.68 462.937 cv
17.449 463.02 17.25 463.105 17.078 463.191 cv
16.906 463.285 16.762 463.367 16.645 463.445 cv
16.527 463.523 16.441 463.562 16.391 463.562 cv
16.355 463.562 16.324 463.555 16.301 463.535 cv
16.27 463.52 16.25 463.488 16.234 463.445 cv
16.219 463.406 16.203 463.352 16.195 463.281 cv
16.184 463.215 16.18 463.133 16.184 463.035 cv
16.18 462.969 16.184 462.91 16.191 462.859 cv
16.195 462.809 16.203 462.766 16.215 462.727 cv
16.223 462.691 16.238 462.656 16.258 462.625 cv
16.277 462.594 16.313 462.555 16.371 462.504 cv
16.422 462.457 16.516 462.391 16.652 462.309 cv
16.785 462.227 16.957 462.148 17.16 462.066 cv
17.363 461.988 17.586 461.918 17.832 461.863 cv
18.074 461.809 18.332 461.781 18.605 461.781 cv
19.031 461.781 19.406 461.844 19.73 461.965 cv
20.051 462.086 20.316 462.25 20.531 462.461 cv
20.742 462.672 20.902 462.918 21.008 463.191 cv
21.113 463.473 21.168 463.77 21.168 464.082 cv
21.168 464.371 21.141 464.652 21.09 464.93 cv
21.039 465.215 20.934 465.52 20.773 465.844 cv
20.609 466.172 20.375 466.535 20.07 466.934 cv
19.762 467.336 19.355 467.797 18.852 468.312 cv
17.445 469.781 li
21.305 469.781 li
21.336 469.785 21.371 469.797 21.41 469.812 cv
21.441 469.836 21.473 469.867 21.5 469.906 cv
21.523 469.949 21.543 470 21.555 470.059 cv
21.566 470.125 21.57 470.195 21.574 470.273 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.219 425.769 mo
22.313 425.769 li
22.313 442.859 li
15.219 442.859 li
cp
0 0 0 0 cmyk
ef
21.504 436.645 mo
21.5 437.055 21.43 437.422 21.289 437.746 cv
21.145 438.074 20.941 438.355 20.68 438.586 cv
20.414 438.82 20.086 438.996 19.699 439.121 cv
19.309 439.246 18.871 439.309 18.387 439.309 cv
18.082 439.309 17.805 439.281 17.551 439.234 cv
17.289 439.187 17.059 439.137 16.863 439.066 cv
16.66 439.004 16.496 438.934 16.363 438.863 cv
16.23 438.793 16.145 438.742 16.113 438.707 cv
16.074 438.68 16.051 438.648 16.035 438.613 cv
16.016 438.582 15.996 438.543 15.984 438.496 cv
15.969 438.453 15.961 438.398 15.953 438.328 cv
15.945 438.266 15.941 438.184 15.945 438.082 cv
15.941 437.922 15.957 437.809 15.992 437.742 cv
16.023 437.68 16.07 437.645 16.133 437.645 cv
16.176 437.645 16.258 437.684 16.383 437.754 cv
16.504 437.832 16.664 437.91 16.859 437.992 cv
17.051 438.078 17.277 438.156 17.543 438.227 cv
17.801 438.301 18.094 438.336 18.414 438.336 cv
18.723 438.336 18.992 438.297 19.23 438.219 cv
19.461 438.141 19.66 438.031 19.82 437.891 cv
19.977 437.75 20.094 437.582 20.176 437.387 cv
20.254 437.191 20.293 436.98 20.297 436.754 cv
20.293 436.504 20.242 436.277 20.145 436.074 cv
20.039 435.875 19.891 435.703 19.699 435.555 cv
19.5 435.41 19.262 435.297 18.977 435.219 cv
18.691 435.141 18.367 435.102 18.004 435.102 cv
17.133 435.102 li
17.09 435.102 17.055 435.094 17.02 435.078 cv
16.984 435.062 16.953 435.035 16.93 434.996 cv
16.902 434.961 16.883 434.914 16.867 434.855 cv
16.852 434.797 16.844 434.719 16.844 434.621 cv
16.844 434.535 16.848 434.465 16.863 434.406 cv
16.871 434.352 16.891 434.305 16.922 434.27 cv
16.945 434.234 16.977 434.211 17.008 434.191 cv
17.039 434.18 17.074 434.172 17.117 434.168 cv
17.891 434.168 li
18.191 434.172 18.461 434.133 18.703 434.051 cv
18.938 433.977 19.141 433.863 19.313 433.715 cv
19.477 433.57 19.605 433.395 19.695 433.191 cv
19.785 432.988 19.832 432.762 19.832 432.508 cv
19.832 432.328 19.801 432.152 19.742 431.984 cv
19.68 431.82 19.59 431.676 19.473 431.551 cv
19.352 431.426 19.199 431.328 19.02 431.258 cv
18.832 431.187 18.621 431.152 18.379 431.152 cv
18.113 431.152 17.867 431.195 17.648 431.273 cv
17.422 431.355 17.227 431.441 17.055 431.531 cv
16.879 431.625 16.734 431.711 16.621 431.789 cv
16.508 431.871 16.426 431.91 16.383 431.906 cv
16.348 431.91 16.32 431.902 16.297 431.891 cv
16.27 431.879 16.25 431.855 16.234 431.82 cv
16.219 431.789 16.207 431.742 16.199 431.676 cv
16.191 431.617 16.188 431.535 16.191 431.434 cv
16.188 431.367 16.188 431.309 16.195 431.254 cv
16.195 431.203 16.207 431.156 16.223 431.113 cv
16.238 431.078 16.254 431.043 16.273 431.008 cv
16.289 430.98 16.32 430.941 16.363 430.895 cv
16.406 430.852 16.492 430.789 16.629 430.707 cv
16.758 430.625 16.922 430.547 17.117 430.465 cv
17.309 430.387 17.531 430.316 17.789 430.262 cv
18.039 430.207 18.313 430.18 18.609 430.18 cv
19.016 430.18 19.379 430.234 19.691 430.336 cv
20.004 430.445 20.262 430.594 20.473 430.781 cv
20.676 430.977 20.832 431.207 20.938 431.473 cv
21.039 431.742 21.09 432.035 21.094 432.359 cv
21.09 432.641 21.055 432.902 20.984 433.137 cv
20.91 433.379 20.801 433.59 20.66 433.773 cv
20.516 433.961 20.344 434.117 20.141 434.246 cv
19.934 434.379 19.695 434.473 19.426 434.52 cv
19.426 434.531 li
19.73 434.566 20.012 434.641 20.266 434.762 cv
20.52 434.883 20.738 435.035 20.922 435.219 cv
21.102 435.402 21.242 435.617 21.348 435.859 cv
21.449 436.105 21.5 436.367 21.504 436.645 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.219 394.172 mo
22.313 394.172 li
22.313 411.262 li
15.219 411.262 li
cp
0 0 0 0 cmyk
ef
21.949 405.047 mo
21.945 405.199 21.922 405.32 21.879 405.406 cv
21.832 405.496 21.77 405.539 21.688 405.535 cv
20.688 405.535 li
20.688 407.398 li
20.688 407.437 20.676 407.469 20.66 407.492 cv
20.637 407.52 20.605 407.539 20.563 407.559 cv
20.512 407.574 20.449 407.586 20.379 407.598 cv
20.301 407.605 20.207 407.609 20.09 407.613 cv
19.973 407.609 19.875 407.605 19.805 407.598 cv
19.727 407.586 19.668 407.574 19.625 407.559 cv
19.578 407.539 19.547 407.52 19.531 407.492 cv
19.512 407.469 19.504 407.437 19.508 407.398 cv
19.508 405.535 li
15.879 405.535 li
15.82 405.539 15.777 405.531 15.742 405.516 cv
15.707 405.504 15.672 405.477 15.645 405.437 cv
15.613 405.402 15.594 405.352 15.582 405.281 cv
15.57 405.215 15.566 405.125 15.566 405.012 cv
15.566 404.93 15.566 404.852 15.574 404.781 cv
15.574 404.711 15.586 404.648 15.602 404.594 cv
15.613 404.539 15.629 404.484 15.656 404.43 cv
15.676 404.375 15.703 404.32 15.738 404.258 cv
18.898 398.871 li
18.918 398.836 18.953 398.805 19 398.777 cv
19.043 398.75 19.098 398.727 19.172 398.707 cv
19.238 398.691 19.324 398.68 19.43 398.668 cv
19.531 398.664 19.652 398.66 19.793 398.656 cv
19.941 398.66 20.078 398.664 20.195 398.676 cv
20.309 398.687 20.398 398.703 20.473 398.719 cv
20.539 398.738 20.594 398.762 20.633 398.793 cv
20.668 398.824 20.688 398.859 20.688 398.898 cv
20.688 404.562 li
21.688 404.562 li
21.762 404.566 21.824 404.605 21.875 404.684 cv
21.922 404.766 21.945 404.887 21.949 405.047 cv
cp
19.508 399.695 mo
19.496 399.695 li
16.645 404.562 li
19.508 404.562 li
cp
.629114 .553033 .543389 .289647 cmyk
f
15.219 362.578 mo
22.313 362.578 li
22.313 379.672 li
15.219 379.672 li
cp
0 0 0 0 cmyk
ef
21.531 373.109 mo
21.531 373.586 21.449 374.008 21.289 374.379 cv
21.129 374.75 20.902 375.062 20.613 375.316 cv
20.316 375.57 19.969 375.766 19.566 375.895 cv
19.16 376.027 18.711 376.09 18.219 376.09 cv
17.941 376.09 17.68 376.07 17.438 376.031 cv
17.188 375.992 16.969 375.945 16.781 375.891 cv
16.586 375.836 16.43 375.781 16.305 375.723 cv
16.18 375.672 16.102 375.629 16.07 375.594 cv
16.035 375.562 16.012 375.531 16 375.504 cv
15.984 375.477 15.969 375.445 15.961 375.402 cv
15.945 375.367 15.938 375.316 15.938 375.254 cv
15.93 375.195 15.93 375.125 15.93 375.043 cv
15.93 374.969 15.934 374.898 15.941 374.836 cv
15.949 374.773 15.961 374.723 15.98 374.684 cv
15.996 374.645 16.016 374.617 16.043 374.598 cv
16.066 374.582 16.098 374.574 16.129 374.57 cv
16.176 374.574 16.246 374.602 16.34 374.656 cv
16.434 374.715 16.563 374.777 16.727 374.844 cv
16.891 374.91 17.09 374.973 17.332 375.031 cv
17.566 375.09 17.852 375.117 18.188 375.117 cv
18.488 375.117 18.77 375.082 19.027 375.008 cv
19.281 374.937 19.504 374.824 19.691 374.668 cv
19.875 374.516 20.02 374.32 20.125 374.082 cv
20.23 373.848 20.281 373.559 20.285 373.219 cv
20.281 372.937 20.238 372.687 20.148 372.469 cv
20.059 372.25 19.922 372.07 19.738 371.926 cv
19.551 371.785 19.316 371.68 19.035 371.605 cv
18.75 371.535 18.41 371.496 18.023 371.496 cv
17.738 371.496 17.5 371.512 17.301 371.539 cv
17.098 371.57 16.91 371.586 16.738 371.582 cv
16.609 371.586 16.516 371.555 16.465 371.492 cv
16.406 371.434 16.379 371.32 16.383 371.148 cv
16.383 367.535 li
16.379 367.387 16.414 367.277 16.488 367.199 cv
16.555 367.129 16.656 367.09 16.793 367.09 cv
20.723 367.09 li
20.758 367.09 20.793 367.102 20.828 367.121 cv
20.859 367.145 20.887 367.176 20.914 367.215 cv
20.934 367.258 20.949 367.309 20.965 367.371 cv
20.973 367.437 20.98 367.516 20.984 367.598 cv
20.98 367.766 20.957 367.891 20.918 367.98 cv
20.871 368.074 20.813 368.121 20.734 368.117 cv
17.563 368.117 li
17.563 370.605 li
17.715 370.586 17.871 370.574 18.035 370.566 cv
18.191 370.562 18.379 370.559 18.594 370.559 cv
19.078 370.559 19.504 370.621 19.871 370.742 cv
20.234 370.863 20.539 371.035 20.789 371.254 cv
21.031 371.48 21.219 371.746 21.344 372.059 cv
21.469 372.375 21.531 372.727 21.531 373.109 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.219 330.98 mo
22.313 330.98 li
22.313 348.07 li
15.219 348.07 li
cp
0 0 0 0 cmyk
ef
21.809 341.5 mo
21.805 341.895 21.746 342.27 21.629 342.633 cv
21.508 342.996 21.324 343.316 21.082 343.594 cv
20.832 343.871 20.52 344.094 20.141 344.258 cv
19.758 344.426 19.309 344.508 18.797 344.508 cv
18.422 344.508 18.094 344.465 17.813 344.371 cv
17.523 344.285 17.277 344.152 17.07 343.98 cv
16.859 343.812 16.684 343.605 16.547 343.355 cv
16.402 343.109 16.289 342.828 16.207 342.512 cv
16.121 342.199 16.063 341.855 16.027 341.477 cv
15.988 341.102 15.969 340.695 15.973 340.266 cv
15.969 339.887 15.992 339.504 16.035 339.113 cv
16.074 338.727 16.145 338.352 16.254 337.984 cv
16.355 337.625 16.5 337.285 16.684 336.965 cv
16.863 336.652 17.09 336.375 17.363 336.137 cv
17.633 335.902 17.961 335.715 18.344 335.578 cv
18.723 335.441 19.164 335.375 19.668 335.371 cv
19.836 335.375 20.008 335.383 20.184 335.402 cv
20.355 335.422 20.516 335.449 20.664 335.484 cv
20.809 335.52 20.93 335.559 21.031 335.598 cv
21.129 335.641 21.195 335.672 21.23 335.695 cv
21.262 335.723 21.285 335.754 21.305 335.781 cv
21.316 335.812 21.328 335.844 21.34 335.875 cv
21.348 335.914 21.355 335.953 21.363 335.992 cv
21.363 336.039 21.367 336.09 21.371 336.152 cv
21.367 336.238 21.367 336.312 21.367 336.367 cv
21.363 336.43 21.352 336.477 21.34 336.508 cv
21.32 336.547 21.301 336.574 21.277 336.59 cv
21.25 336.613 21.219 336.621 21.18 336.617 cv
21.125 336.621 21.055 336.605 20.973 336.57 cv
20.883 336.543 20.777 336.508 20.656 336.465 cv
20.531 336.43 20.383 336.395 20.207 336.359 cv
20.027 336.328 19.82 336.312 19.594 336.309 cv
19.164 336.312 18.797 336.398 18.492 336.57 cv
18.184 336.746 17.934 336.98 17.742 337.273 cv
17.543 337.566 17.398 337.906 17.309 338.293 cv
17.211 338.68 17.16 339.082 17.148 339.504 cv
17.266 339.434 17.398 339.367 17.547 339.297 cv
17.695 339.234 17.855 339.172 18.035 339.113 cv
18.207 339.062 18.395 339.02 18.594 338.98 cv
18.789 338.949 19 338.93 19.227 338.926 cv
19.707 338.93 20.113 338.996 20.441 339.121 cv
20.77 339.254 21.035 339.434 21.242 339.664 cv
21.445 339.898 21.59 340.172 21.68 340.484 cv
21.762 340.801 21.805 341.141 21.809 341.5 cv
cp
20.617 341.613 mo
20.617 341.348 20.59 341.109 20.535 340.891 cv
20.48 340.676 20.391 340.488 20.27 340.336 cv
20.145 340.187 19.98 340.07 19.777 339.984 cv
19.57 339.902 19.316 339.863 19.016 339.859 cv
18.844 339.863 18.676 339.879 18.508 339.906 cv
18.336 339.937 18.172 339.977 18.016 340.031 cv
17.855 340.086 17.703 340.148 17.563 340.215 cv
17.418 340.289 17.285 340.367 17.168 340.445 cv
17.164 341.039 17.203 341.531 17.281 341.926 cv
17.355 342.328 17.465 342.648 17.609 342.887 cv
17.754 343.129 17.934 343.301 18.148 343.402 cv
18.363 343.508 18.617 343.559 18.906 343.555 cv
19.195 343.559 19.449 343.504 19.668 343.391 cv
19.883 343.285 20.059 343.137 20.203 342.949 cv
20.344 342.762 20.449 342.555 20.516 342.324 cv
20.582 342.094 20.617 341.855 20.617 341.613 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.219 299.379 mo
22.313 299.379 li
22.313 316.469 li
15.219 316.469 li
cp
0 0 0 0 cmyk
ef
21.703 304.406 mo
21.699 304.492 21.695 304.566 21.691 304.629 cv
21.684 304.699 21.676 304.762 21.664 304.82 cv
21.652 304.887 21.637 304.945 21.617 305 cv
21.594 305.059 21.57 305.121 21.547 305.18 cv
18.352 312.543 li
18.324 312.602 18.297 312.645 18.266 312.676 cv
18.23 312.711 18.188 312.738 18.133 312.758 cv
18.078 312.777 18.008 312.789 17.93 312.801 cv
17.844 312.805 17.746 312.809 17.629 312.812 cv
17.473 312.809 17.352 312.801 17.266 312.789 cv
17.18 312.773 17.117 312.758 17.078 312.727 cv
17.039 312.699 17.02 312.66 17.027 312.617 cv
17.027 312.574 17.043 312.523 17.074 312.461 cv
20.434 304.934 li
16.176 304.934 li
16.09 304.937 16.023 304.891 15.98 304.797 cv
15.938 304.707 15.918 304.578 15.918 304.414 cv
15.918 304.328 15.922 304.254 15.934 304.187 cv
15.945 304.125 15.961 304.07 15.984 304.027 cv
16.004 303.984 16.031 303.953 16.066 303.93 cv
16.098 303.91 16.137 303.898 16.176 303.898 cv
21.348 303.898 li
21.406 303.898 21.461 303.906 21.512 303.922 cv
21.559 303.937 21.594 303.965 21.621 304.004 cv
21.645 304.043 21.664 304.098 21.68 304.16 cv
21.691 304.227 21.699 304.309 21.703 304.406 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.219 267.789 mo
22.313 267.789 li
22.313 284.879 li
15.219 284.879 li
cp
0 0 0 0 cmyk
ef
21.777 278.883 mo
21.777 279.27 21.707 279.613 21.57 279.91 cv
21.434 280.215 21.238 280.465 20.98 280.668 cv
20.723 280.875 20.402 281.031 20.023 281.133 cv
19.641 281.238 19.207 281.289 18.723 281.289 cv
18.262 281.289 17.852 281.242 17.492 281.148 cv
17.129 281.055 16.824 280.914 16.574 280.723 cv
16.324 280.539 16.133 280.309 16 280.031 cv
15.867 279.758 15.801 279.445 15.801 279.09 cv
15.801 278.816 15.844 278.559 15.938 278.324 cv
16.023 278.09 16.156 277.875 16.332 277.68 cv
16.5 277.484 16.711 277.301 16.965 277.125 cv
17.215 276.957 17.5 276.793 17.816 276.637 cv
17.543 276.496 17.301 276.348 17.09 276.187 cv
16.879 276.031 16.699 275.859 16.555 275.672 cv
16.406 275.488 16.297 275.293 16.223 275.082 cv
16.145 274.875 16.105 274.645 16.109 274.395 cv
16.105 274.086 16.16 273.793 16.277 273.52 cv
16.387 273.25 16.559 273.016 16.785 272.812 cv
17.012 272.613 17.297 272.453 17.648 272.336 cv
17.992 272.219 18.402 272.16 18.871 272.16 cv
19.316 272.16 19.703 272.215 20.031 272.32 cv
20.359 272.43 20.629 272.574 20.84 272.758 cv
21.051 272.945 21.207 273.164 21.313 273.414 cv
21.41 273.664 21.461 273.934 21.465 274.223 cv
21.461 274.457 21.422 274.684 21.352 274.895 cv
21.273 275.113 21.164 275.316 21.016 275.504 cv
20.867 275.699 20.688 275.879 20.477 276.043 cv
20.266 276.215 20.023 276.371 19.75 276.512 cv
20.07 276.676 20.355 276.84 20.613 277.008 cv
20.863 277.176 21.078 277.355 21.254 277.551 cv
21.422 277.746 21.551 277.953 21.645 278.168 cv
21.73 278.387 21.777 278.625 21.777 278.883 cv
cp
20.297 274.332 mo
20.293 274.145 20.262 273.969 20.195 273.812 cv
20.129 273.656 20.031 273.523 19.906 273.414 cv
19.777 273.305 19.617 273.223 19.43 273.164 cv
19.234 273.109 19.02 273.082 18.781 273.078 cv
18.285 273.082 17.91 273.191 17.66 273.414 cv
17.402 273.641 17.277 273.949 17.281 274.332 cv
17.277 274.512 17.309 274.676 17.371 274.828 cv
17.434 274.984 17.527 275.129 17.66 275.266 cv
17.785 275.402 17.949 275.535 18.152 275.664 cv
18.348 275.797 18.586 275.934 18.863 276.074 cv
19.324 275.84 19.68 275.578 19.926 275.285 cv
20.172 275 20.293 274.684 20.297 274.332 cv
cp
20.586 279.008 mo
20.582 278.801 20.543 278.609 20.469 278.437 cv
20.387 278.27 20.27 278.109 20.113 277.957 cv
19.957 277.809 19.758 277.664 19.523 277.523 cv
19.285 277.387 19.016 277.242 18.707 277.09 cv
18.418 277.234 18.164 277.375 17.949 277.516 cv
17.73 277.656 17.551 277.805 17.414 277.953 cv
17.273 278.109 17.168 278.266 17.098 278.43 cv
17.023 278.598 16.988 278.781 16.992 278.98 cv
16.988 279.426 17.141 279.77 17.449 280.008 cv
17.75 280.254 18.203 280.375 18.809 280.371 cv
19.391 280.375 19.836 280.254 20.137 280.004 cv
20.434 279.762 20.582 279.43 20.586 279.008 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.219 236.191 mo
22.313 236.191 li
22.313 253.281 li
15.219 253.281 li
cp
0 0 0 0 cmyk
ef
21.641 244.766 mo
21.637 245.152 21.613 245.539 21.57 245.93 cv
21.523 246.324 21.445 246.703 21.34 247.066 cv
21.227 247.43 21.082 247.77 20.898 248.086 cv
20.711 248.406 20.477 248.687 20.199 248.922 cv
19.914 249.164 19.578 249.348 19.195 249.48 cv
18.805 249.613 18.359 249.68 17.852 249.68 cv
17.652 249.68 17.461 249.664 17.277 249.641 cv
17.09 249.613 16.922 249.586 16.777 249.551 cv
16.625 249.516 16.5 249.477 16.402 249.434 cv
16.301 249.395 16.227 249.355 16.184 249.312 cv
16.137 249.273 16.105 249.219 16.086 249.145 cv
16.063 249.074 16.051 248.977 16.055 248.859 cv
16.051 248.758 16.055 248.68 16.063 248.621 cv
16.066 248.562 16.078 248.516 16.094 248.484 cv
16.109 248.453 16.129 248.434 16.152 248.418 cv
16.176 248.41 16.207 248.402 16.246 248.398 cv
16.293 248.402 16.363 248.418 16.457 248.449 cv
16.547 248.484 16.66 248.523 16.805 248.562 cv
16.941 248.605 17.105 248.645 17.293 248.676 cv
17.477 248.715 17.688 248.73 17.926 248.727 cv
18.367 248.73 18.746 248.645 19.066 248.473 cv
19.379 248.301 19.641 248.074 19.844 247.785 cv
20.047 247.5 20.195 247.164 20.297 246.781 cv
20.395 246.402 20.449 246.004 20.461 245.582 cv
20.215 245.727 19.926 245.852 19.59 245.957 cv
19.25 246.07 18.863 246.125 18.426 246.121 cv
17.934 246.125 17.52 246.059 17.184 245.922 cv
16.848 245.789 16.574 245.605 16.371 245.371 cv
16.164 245.141 16.02 244.863 15.934 244.539 cv
15.844 244.223 15.801 243.871 15.801 243.492 cv
15.801 243.102 15.855 242.73 15.973 242.371 cv
16.082 242.02 16.262 241.707 16.508 241.437 cv
16.746 241.168 17.055 240.953 17.434 240.793 cv
17.805 240.633 18.254 240.551 18.777 240.551 cv
19.145 240.551 19.469 240.598 19.758 240.691 cv
20.039 240.785 20.289 240.922 20.504 241.098 cv
20.711 241.273 20.891 241.484 21.039 241.734 cv
21.184 241.984 21.301 242.266 21.391 242.578 cv
21.477 242.895 21.539 243.238 21.582 243.605 cv
21.617 243.977 21.637 244.363 21.641 244.766 cv
cp
20.441 244.637 mo
20.441 244.055 20.402 243.562 20.324 243.16 cv
20.246 242.762 20.129 242.437 19.98 242.187 cv
19.828 241.941 19.645 241.762 19.426 241.652 cv
19.203 241.543 18.949 241.488 18.668 241.488 cv
18.363 241.488 18.109 241.543 17.902 241.652 cv
17.691 241.762 17.52 241.906 17.387 242.082 cv
17.25 242.266 17.148 242.469 17.086 242.695 cv
17.02 242.926 16.988 243.164 16.992 243.402 cv
16.988 243.676 17.02 243.922 17.078 244.141 cv
17.133 244.367 17.223 244.555 17.355 244.711 cv
17.48 244.867 17.648 244.988 17.855 245.074 cv
18.059 245.16 18.313 245.203 18.617 245.199 cv
18.957 245.203 19.289 245.152 19.613 245.047 cv
19.93 244.945 20.207 244.809 20.441 244.637 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
8.121 204.59 mo
22.312 204.59 li
22.312 221.68 li
8.121 221.68 li
cp
0 0 0 0 cmyk
ef
14.492 217.477 mo
14.488 217.566 14.48 217.637 14.469 217.695 cv
14.453 217.758 14.434 217.809 14.414 217.84 cv
14.391 217.879 14.367 217.902 14.336 217.918 cv
14.305 217.934 14.273 217.941 14.246 217.941 cv
9.609 217.941 li
9.574 217.941 9.547 217.934 9.52 217.918 cv
9.492 217.902 9.465 217.879 9.441 217.84 cv
9.414 217.809 9.395 217.758 9.383 217.695 cv
9.367 217.637 9.359 217.566 9.363 217.477 cv
9.359 217.398 9.367 217.324 9.383 217.262 cv
9.395 217.203 9.41 217.156 9.434 217.117 cv
9.449 217.082 9.477 217.051 9.508 217.027 cv
9.539 217.008 9.57 217 9.609 216.996 cv
11.461 216.996 li
11.461 210.25 li
9.746 211.27 li
9.656 211.32 9.586 211.348 9.539 211.355 cv
9.484 211.363 9.441 211.355 9.41 211.324 cv
9.375 211.297 9.355 211.246 9.344 211.176 cv
9.332 211.109 9.324 211.023 9.328 210.914 cv
9.324 210.84 9.328 210.773 9.34 210.715 cv
9.344 210.664 9.355 210.617 9.371 210.578 cv
9.383 210.543 9.402 210.512 9.426 210.484 cv
9.449 210.457 9.48 210.43 9.527 210.402 cv
11.57 209.09 li
11.586 209.078 11.605 209.066 11.637 209.059 cv
11.66 209.051 11.695 209.043 11.742 209.031 cv
11.781 209.023 11.832 209.016 11.887 209.012 cv
11.941 209.012 12.008 209.012 12.094 209.008 cv
12.199 209.012 12.293 209.016 12.367 209.023 cv
12.438 209.031 12.492 209.047 12.539 209.062 cv
12.578 209.082 12.605 209.102 12.621 209.125 cv
12.629 209.152 12.637 209.176 12.641 209.199 cv
12.641 216.996 li
14.246 216.996 li
14.281 217 14.316 217.008 14.348 217.027 cv
14.379 217.051 14.402 217.082 14.426 217.117 cv
14.441 217.156 14.457 217.203 14.473 217.262 cv
14.48 217.324 14.488 217.398 14.492 217.477 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.844 213.484 mo
21.84 214.168 21.789 214.789 21.684 215.352 cv
21.574 215.914 21.395 216.398 21.148 216.801 cv
20.895 217.207 20.566 217.52 20.168 217.738 cv
19.762 217.961 19.27 218.07 18.684 218.07 cv
18.125 218.07 17.652 217.973 17.273 217.773 cv
16.891 217.578 16.586 217.285 16.352 216.898 cv
16.117 216.512 15.949 216.039 15.855 215.473 cv
15.754 214.91 15.707 214.262 15.707 213.527 cv
15.707 212.855 15.762 212.234 15.871 211.668 cv
15.98 211.105 16.156 210.621 16.406 210.215 cv
16.648 209.812 16.973 209.5 17.379 209.273 cv
17.777 209.055 18.273 208.941 18.863 208.941 cv
19.422 208.941 19.895 209.043 20.277 209.238 cv
20.66 209.441 20.965 209.734 21.199 210.117 cv
21.43 210.508 21.598 210.98 21.695 211.543 cv
21.793 212.105 21.84 212.754 21.844 213.484 cv
cp
20.637 213.566 mo
20.633 213.125 20.617 212.727 20.59 212.375 cv
20.555 212.023 20.508 211.715 20.449 211.445 cv
20.383 211.176 20.305 210.945 20.207 210.75 cv
20.109 210.559 19.992 210.398 19.855 210.27 cv
19.715 210.145 19.555 210.051 19.383 209.992 cv
19.203 209.937 19.008 209.91 18.793 209.906 cv
18.402 209.91 18.086 210 17.848 210.184 cv
17.602 210.367 17.41 210.621 17.273 210.937 cv
17.133 211.258 17.039 211.629 16.988 212.059 cv
16.938 212.488 16.914 212.953 16.914 213.445 cv
16.914 214.109 16.945 214.672 17.016 215.133 cv
17.082 215.602 17.191 215.98 17.344 216.27 cv
17.488 216.566 17.68 216.777 17.91 216.906 cv
18.141 217.043 18.422 217.109 18.754 217.105 cv
19.008 217.109 19.23 217.07 19.426 216.984 cv
19.617 216.906 19.785 216.785 19.926 216.629 cv
20.066 216.477 20.18 216.293 20.273 216.078 cv
20.359 215.863 20.434 215.625 20.492 215.363 cv
20.543 215.105 20.582 214.824 20.605 214.52 cv
20.625 214.215 20.633 213.898 20.637 213.566 cv
cp
f
8.121 172.988 mo
22.312 172.988 li
22.312 190.078 li
8.121 190.078 li
cp
0 0 0 0 cmyk
ef
14.492 185.895 mo
14.488 185.984 14.48 186.055 14.469 186.113 cv
14.453 186.176 14.434 186.227 14.414 186.258 cv
14.391 186.297 14.367 186.32 14.336 186.336 cv
14.305 186.352 14.273 186.359 14.246 186.359 cv
9.609 186.359 li
9.574 186.359 9.547 186.352 9.52 186.336 cv
9.492 186.32 9.465 186.297 9.441 186.258 cv
9.414 186.227 9.395 186.176 9.383 186.113 cv
9.367 186.055 9.359 185.984 9.363 185.895 cv
9.359 185.816 9.367 185.742 9.383 185.68 cv
9.395 185.621 9.41 185.574 9.434 185.535 cv
9.449 185.5 9.477 185.469 9.508 185.445 cv
9.539 185.426 9.57 185.418 9.609 185.414 cv
11.461 185.414 li
11.461 178.668 li
9.746 179.687 li
9.656 179.738 9.586 179.766 9.539 179.773 cv
9.484 179.781 9.441 179.773 9.41 179.742 cv
9.375 179.715 9.355 179.664 9.344 179.594 cv
9.332 179.527 9.324 179.441 9.328 179.332 cv
9.324 179.258 9.328 179.191 9.34 179.133 cv
9.344 179.082 9.355 179.035 9.371 178.996 cv
9.383 178.961 9.402 178.93 9.426 178.902 cv
9.449 178.875 9.48 178.848 9.527 178.82 cv
11.57 177.508 li
11.586 177.496 11.605 177.484 11.637 177.477 cv
11.66 177.469 11.695 177.461 11.742 177.449 cv
11.781 177.441 11.832 177.434 11.887 177.43 cv
11.941 177.43 12.008 177.43 12.094 177.426 cv
12.199 177.43 12.293 177.434 12.367 177.441 cv
12.438 177.449 12.492 177.465 12.539 177.48 cv
12.578 177.5 12.605 177.52 12.621 177.543 cv
12.629 177.57 12.637 177.594 12.641 177.617 cv
12.641 185.414 li
14.246 185.414 li
14.281 185.418 14.316 185.426 14.348 185.445 cv
14.379 185.469 14.402 185.5 14.426 185.535 cv
14.441 185.574 14.457 185.621 14.473 185.68 cv
14.48 185.742 14.488 185.816 14.492 185.895 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.57 185.895 mo
21.566 185.984 21.559 186.055 21.547 186.113 cv
21.531 186.176 21.512 186.227 21.492 186.258 cv
21.469 186.297 21.445 186.32 21.414 186.336 cv
21.383 186.352 21.352 186.359 21.324 186.359 cv
16.688 186.359 li
16.652 186.359 16.625 186.352 16.598 186.336 cv
16.57 186.32 16.543 186.297 16.52 186.258 cv
16.492 186.227 16.473 186.176 16.461 186.113 cv
16.445 186.055 16.438 185.984 16.441 185.895 cv
16.438 185.816 16.445 185.742 16.461 185.68 cv
16.473 185.621 16.488 185.574 16.512 185.535 cv
16.527 185.5 16.555 185.469 16.586 185.445 cv
16.617 185.426 16.648 185.418 16.688 185.414 cv
18.539 185.414 li
18.539 178.668 li
16.824 179.687 li
16.734 179.738 16.664 179.766 16.617 179.773 cv
16.563 179.781 16.52 179.773 16.488 179.742 cv
16.453 179.715 16.434 179.664 16.422 179.594 cv
16.41 179.527 16.402 179.441 16.406 179.332 cv
16.402 179.258 16.406 179.191 16.418 179.133 cv
16.422 179.082 16.434 179.035 16.449 178.996 cv
16.461 178.961 16.48 178.93 16.504 178.902 cv
16.527 178.875 16.559 178.848 16.605 178.82 cv
18.648 177.508 li
18.664 177.496 18.684 177.484 18.715 177.477 cv
18.738 177.469 18.773 177.461 18.82 177.449 cv
18.859 177.441 18.91 177.434 18.965 177.43 cv
19.02 177.43 19.086 177.43 19.172 177.426 cv
19.277 177.43 19.371 177.434 19.445 177.441 cv
19.516 177.449 19.57 177.465 19.617 177.48 cv
19.656 177.5 19.684 177.52 19.699 177.543 cv
19.707 177.57 19.715 177.594 19.719 177.617 cv
19.719 185.414 li
21.324 185.414 li
21.359 185.418 21.395 185.426 21.426 185.445 cv
21.457 185.469 21.48 185.5 21.504 185.535 cv
21.52 185.574 21.535 185.621 21.551 185.68 cv
21.559 185.742 21.566 185.816 21.57 185.895 cv
cp
f
8.121 141.398 mo
22.312 141.398 li
22.312 158.488 li
8.121 158.488 li
cp
0 0 0 0 cmyk
ef
14.492 154.285 mo
14.488 154.375 14.48 154.445 14.469 154.504 cv
14.453 154.566 14.434 154.617 14.414 154.648 cv
14.391 154.687 14.367 154.711 14.336 154.727 cv
14.305 154.742 14.273 154.75 14.246 154.75 cv
9.609 154.75 li
9.574 154.75 9.547 154.742 9.52 154.727 cv
9.492 154.711 9.465 154.687 9.441 154.648 cv
9.414 154.617 9.395 154.566 9.383 154.504 cv
9.367 154.445 9.359 154.375 9.363 154.285 cv
9.359 154.207 9.367 154.133 9.383 154.07 cv
9.395 154.012 9.41 153.965 9.434 153.926 cv
9.449 153.891 9.477 153.859 9.508 153.836 cv
9.539 153.816 9.57 153.809 9.609 153.805 cv
11.461 153.805 li
11.461 147.059 li
9.746 148.078 li
9.656 148.129 9.586 148.156 9.539 148.164 cv
9.484 148.172 9.441 148.164 9.41 148.133 cv
9.375 148.105 9.355 148.055 9.344 147.984 cv
9.332 147.918 9.324 147.832 9.328 147.723 cv
9.324 147.648 9.328 147.582 9.34 147.523 cv
9.344 147.473 9.355 147.426 9.371 147.387 cv
9.383 147.352 9.402 147.32 9.426 147.293 cv
9.449 147.266 9.48 147.238 9.527 147.211 cv
11.57 145.898 li
11.586 145.887 11.605 145.875 11.637 145.867 cv
11.66 145.859 11.695 145.852 11.742 145.84 cv
11.781 145.832 11.832 145.824 11.887 145.82 cv
11.941 145.82 12.008 145.82 12.094 145.816 cv
12.199 145.82 12.293 145.824 12.367 145.832 cv
12.438 145.84 12.492 145.855 12.539 145.871 cv
12.578 145.891 12.605 145.91 12.621 145.934 cv
12.629 145.961 12.637 145.984 12.641 146.008 cv
12.641 153.805 li
14.246 153.805 li
14.281 153.809 14.316 153.816 14.348 153.836 cv
14.379 153.859 14.402 153.891 14.426 153.926 cv
14.441 153.965 14.457 154.012 14.473 154.07 cv
14.48 154.133 14.488 154.207 14.492 154.285 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.551 154.242 mo
21.547 154.328 21.543 154.402 21.531 154.465 cv
21.52 154.531 21.504 154.586 21.484 154.625 cv
21.461 154.672 21.434 154.703 21.402 154.719 cv
21.367 154.742 21.328 154.75 21.289 154.75 cv
16.387 154.75 li
16.324 154.75 16.266 154.742 16.219 154.727 cv
16.168 154.711 16.129 154.687 16.094 154.648 cv
16.059 154.617 16.031 154.562 16.02 154.492 cv
16 154.422 15.992 154.336 15.996 154.234 cv
15.992 154.145 15.996 154.066 16.004 153.996 cv
16.008 153.93 16.023 153.871 16.051 153.816 cv
16.074 153.766 16.105 153.711 16.141 153.656 cv
16.176 153.605 16.219 153.551 16.277 153.488 cv
18.051 151.664 li
18.461 151.246 18.789 150.871 19.039 150.535 cv
19.285 150.207 19.477 149.902 19.609 149.625 cv
19.742 149.352 19.828 149.102 19.875 148.875 cv
19.914 148.652 19.938 148.441 19.938 148.246 cv
19.938 148.051 19.902 147.867 19.836 147.687 cv
19.77 147.516 19.676 147.359 19.551 147.223 cv
19.426 147.094 19.27 146.988 19.082 146.906 cv
18.895 146.832 18.676 146.793 18.43 146.789 cv
18.141 146.793 17.883 146.832 17.656 146.906 cv
17.426 146.988 17.227 147.074 17.055 147.16 cv
16.883 147.254 16.738 147.336 16.621 147.414 cv
16.504 147.492 16.418 147.531 16.367 147.531 cv
16.332 147.531 16.301 147.523 16.277 147.504 cv
16.246 147.488 16.227 147.457 16.211 147.414 cv
16.195 147.375 16.18 147.32 16.172 147.25 cv
16.16 147.184 16.156 147.102 16.16 147.004 cv
16.156 146.937 16.16 146.879 16.168 146.828 cv
16.172 146.777 16.18 146.734 16.191 146.695 cv
16.199 146.66 16.215 146.625 16.234 146.594 cv
16.254 146.562 16.289 146.523 16.348 146.473 cv
16.398 146.426 16.492 146.359 16.629 146.277 cv
16.762 146.195 16.934 146.117 17.137 146.035 cv
17.34 145.957 17.563 145.887 17.809 145.832 cv
18.051 145.777 18.309 145.75 18.582 145.75 cv
19.008 145.75 19.383 145.812 19.707 145.934 cv
20.027 146.055 20.293 146.219 20.508 146.43 cv
20.719 146.641 20.879 146.887 20.984 147.16 cv
21.09 147.441 21.145 147.738 21.145 148.051 cv
21.145 148.34 21.117 148.621 21.066 148.898 cv
21.016 149.184 20.91 149.488 20.75 149.812 cv
20.586 150.141 20.352 150.504 20.047 150.902 cv
19.738 151.305 19.332 151.766 18.828 152.281 cv
17.422 153.75 li
21.281 153.75 li
21.313 153.754 21.348 153.766 21.387 153.781 cv
21.418 153.805 21.449 153.836 21.477 153.875 cv
21.5 153.918 21.52 153.969 21.531 154.027 cv
21.543 154.094 21.547 154.164 21.551 154.242 cv
cp
f
8.121 109.801 mo
22.312 109.801 li
22.312 126.891 li
8.121 126.891 li
cp
0 0 0 0 cmyk
ef
14.492 122.676 mo
14.488 122.766 14.48 122.836 14.469 122.895 cv
14.453 122.957 14.434 123.008 14.414 123.039 cv
14.391 123.078 14.367 123.102 14.336 123.117 cv
14.305 123.133 14.273 123.141 14.246 123.141 cv
9.609 123.141 li
9.574 123.141 9.547 123.133 9.52 123.117 cv
9.492 123.102 9.465 123.078 9.441 123.039 cv
9.414 123.008 9.395 122.957 9.383 122.895 cv
9.367 122.836 9.359 122.766 9.363 122.676 cv
9.359 122.598 9.367 122.523 9.383 122.461 cv
9.395 122.402 9.41 122.355 9.434 122.316 cv
9.449 122.281 9.477 122.25 9.508 122.227 cv
9.539 122.207 9.57 122.199 9.609 122.195 cv
11.461 122.195 li
11.461 115.449 li
9.746 116.469 li
9.656 116.52 9.586 116.547 9.539 116.555 cv
9.484 116.562 9.441 116.555 9.41 116.523 cv
9.375 116.496 9.355 116.445 9.344 116.375 cv
9.332 116.309 9.324 116.223 9.328 116.113 cv
9.324 116.039 9.328 115.973 9.34 115.914 cv
9.344 115.863 9.355 115.816 9.371 115.777 cv
9.383 115.742 9.402 115.711 9.426 115.684 cv
9.449 115.656 9.48 115.629 9.527 115.602 cv
11.57 114.289 li
11.586 114.277 11.605 114.266 11.637 114.258 cv
11.66 114.25 11.695 114.242 11.742 114.23 cv
11.781 114.223 11.832 114.215 11.887 114.211 cv
11.941 114.211 12.008 114.211 12.094 114.207 cv
12.199 114.211 12.293 114.215 12.367 114.223 cv
12.438 114.23 12.492 114.246 12.539 114.262 cv
12.578 114.281 12.605 114.301 12.621 114.324 cv
12.629 114.352 12.637 114.375 12.641 114.398 cv
12.641 122.195 li
14.246 122.195 li
14.281 122.199 14.316 122.207 14.348 122.227 cv
14.379 122.25 14.402 122.281 14.426 122.316 cv
14.441 122.355 14.457 122.402 14.473 122.461 cv
14.48 122.523 14.488 122.598 14.492 122.676 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.48 120.605 mo
21.477 121.016 21.406 121.383 21.266 121.707 cv
21.121 122.035 20.918 122.316 20.656 122.547 cv
20.391 122.781 20.063 122.957 19.676 123.082 cv
19.285 123.207 18.848 123.27 18.363 123.27 cv
18.059 123.27 17.781 123.242 17.527 123.195 cv
17.266 123.148 17.035 123.098 16.84 123.027 cv
16.637 122.965 16.473 122.895 16.34 122.824 cv
16.207 122.754 16.121 122.703 16.09 122.668 cv
16.051 122.641 16.027 122.609 16.012 122.574 cv
15.992 122.543 15.973 122.504 15.961 122.457 cv
15.945 122.414 15.938 122.359 15.93 122.289 cv
15.922 122.227 15.918 122.145 15.922 122.043 cv
15.918 121.883 15.934 121.77 15.969 121.703 cv
16 121.641 16.047 121.605 16.109 121.605 cv
16.152 121.605 16.234 121.645 16.359 121.715 cv
16.48 121.793 16.641 121.871 16.836 121.953 cv
17.027 122.039 17.254 122.117 17.52 122.187 cv
17.777 122.262 18.07 122.297 18.391 122.297 cv
18.699 122.297 18.969 122.258 19.207 122.18 cv
19.438 122.102 19.637 121.992 19.797 121.852 cv
19.953 121.711 20.07 121.543 20.152 121.348 cv
20.23 121.152 20.27 120.941 20.273 120.715 cv
20.27 120.465 20.219 120.238 20.121 120.035 cv
20.016 119.836 19.867 119.664 19.676 119.516 cv
19.477 119.371 19.238 119.258 18.953 119.18 cv
18.668 119.102 18.344 119.062 17.98 119.062 cv
17.109 119.062 li
17.066 119.062 17.031 119.055 16.996 119.039 cv
16.961 119.023 16.93 118.996 16.906 118.957 cv
16.879 118.922 16.859 118.875 16.844 118.816 cv
16.828 118.758 16.82 118.68 16.82 118.582 cv
16.82 118.496 16.824 118.426 16.84 118.367 cv
16.848 118.312 16.867 118.266 16.898 118.23 cv
16.922 118.195 16.953 118.172 16.984 118.152 cv
17.016 118.141 17.051 118.133 17.094 118.129 cv
17.867 118.129 li
18.168 118.133 18.438 118.094 18.68 118.012 cv
18.914 117.937 19.117 117.824 19.289 117.676 cv
19.453 117.531 19.582 117.355 19.672 117.152 cv
19.762 116.949 19.809 116.723 19.809 116.469 cv
19.809 116.289 19.777 116.113 19.719 115.945 cv
19.656 115.781 19.566 115.637 19.449 115.512 cv
19.328 115.387 19.176 115.289 18.996 115.219 cv
18.809 115.148 18.598 115.113 18.355 115.113 cv
18.09 115.113 17.844 115.156 17.625 115.234 cv
17.398 115.316 17.203 115.402 17.031 115.492 cv
16.855 115.586 16.711 115.672 16.598 115.75 cv
16.484 115.832 16.402 115.871 16.359 115.867 cv
16.324 115.871 16.297 115.863 16.273 115.852 cv
16.246 115.84 16.227 115.816 16.211 115.781 cv
16.195 115.75 16.184 115.703 16.176 115.637 cv
16.168 115.578 16.164 115.496 16.168 115.395 cv
16.164 115.328 16.164 115.27 16.172 115.215 cv
16.172 115.164 16.184 115.117 16.199 115.074 cv
16.215 115.039 16.23 115.004 16.25 114.969 cv
16.266 114.941 16.297 114.902 16.34 114.855 cv
16.383 114.812 16.469 114.75 16.605 114.668 cv
16.734 114.586 16.898 114.508 17.094 114.426 cv
17.285 114.348 17.508 114.277 17.766 114.223 cv
18.016 114.168 18.289 114.141 18.586 114.141 cv
18.992 114.141 19.355 114.195 19.668 114.297 cv
19.98 114.406 20.238 114.555 20.449 114.742 cv
20.652 114.937 20.809 115.168 20.914 115.434 cv
21.016 115.703 21.066 115.996 21.07 116.32 cv
21.066 116.602 21.031 116.863 20.961 117.098 cv
20.887 117.34 20.777 117.551 20.637 117.734 cv
20.492 117.922 20.32 118.078 20.117 118.207 cv
19.91 118.34 19.672 118.434 19.402 118.48 cv
19.402 118.492 li
19.707 118.527 19.988 118.602 20.242 118.723 cv
20.496 118.844 20.715 118.996 20.898 119.18 cv
21.078 119.363 21.219 119.578 21.324 119.82 cv
21.426 120.066 21.477 120.328 21.48 120.605 cv
cp
f
8.121 78.199 mo
22.312 78.199 li
22.312 95.289 li
8.121 95.289 li
cp
0 0 0 0 cmyk
ef
14.492 91.074 mo
14.488 91.164 14.48 91.234 14.469 91.293 cv
14.453 91.355 14.434 91.406 14.414 91.437 cv
14.391 91.477 14.367 91.5 14.336 91.516 cv
14.305 91.531 14.273 91.539 14.246 91.539 cv
9.609 91.539 li
9.574 91.539 9.547 91.531 9.52 91.516 cv
9.492 91.5 9.465 91.477 9.441 91.437 cv
9.414 91.406 9.395 91.355 9.383 91.293 cv
9.367 91.234 9.359 91.164 9.363 91.074 cv
9.359 90.996 9.367 90.922 9.383 90.859 cv
9.395 90.801 9.41 90.754 9.434 90.715 cv
9.449 90.68 9.477 90.648 9.508 90.625 cv
9.539 90.605 9.57 90.598 9.609 90.594 cv
11.461 90.594 li
11.461 83.848 li
9.746 84.867 li
9.656 84.918 9.586 84.945 9.539 84.953 cv
9.484 84.961 9.441 84.953 9.41 84.922 cv
9.375 84.895 9.355 84.844 9.344 84.773 cv
9.332 84.707 9.324 84.621 9.328 84.512 cv
9.324 84.437 9.328 84.371 9.34 84.312 cv
9.344 84.262 9.355 84.215 9.371 84.176 cv
9.383 84.141 9.402 84.109 9.426 84.082 cv
9.449 84.055 9.48 84.027 9.527 84 cv
11.57 82.687 li
11.586 82.676 11.605 82.664 11.637 82.656 cv
11.66 82.648 11.695 82.641 11.742 82.629 cv
11.781 82.621 11.832 82.613 11.887 82.609 cv
11.941 82.609 12.008 82.609 12.094 82.605 cv
12.199 82.609 12.293 82.613 12.367 82.621 cv
12.438 82.629 12.492 82.645 12.539 82.66 cv
12.578 82.68 12.605 82.699 12.621 82.723 cv
12.629 82.75 12.637 82.773 12.641 82.797 cv
12.641 90.594 li
14.246 90.594 li
14.281 90.598 14.316 90.605 14.348 90.625 cv
14.379 90.648 14.402 90.68 14.426 90.715 cv
14.441 90.754 14.457 90.801 14.473 90.859 cv
14.48 90.922 14.488 90.996 14.492 91.074 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.926 89.016 mo
21.922 89.168 21.898 89.289 21.855 89.375 cv
21.809 89.465 21.746 89.508 21.664 89.504 cv
20.664 89.504 li
20.664 91.367 li
20.664 91.406 20.652 91.437 20.637 91.461 cv
20.613 91.488 20.582 91.508 20.539 91.527 cv
20.488 91.543 20.426 91.555 20.355 91.566 cv
20.277 91.574 20.184 91.578 20.066 91.582 cv
19.949 91.578 19.852 91.574 19.781 91.566 cv
19.703 91.555 19.645 91.543 19.602 91.527 cv
19.555 91.508 19.523 91.488 19.508 91.461 cv
19.488 91.437 19.48 91.406 19.484 91.367 cv
19.484 89.504 li
15.855 89.504 li
15.797 89.508 15.754 89.5 15.719 89.484 cv
15.684 89.473 15.648 89.445 15.621 89.406 cv
15.59 89.371 15.57 89.32 15.559 89.25 cv
15.547 89.184 15.543 89.094 15.543 88.98 cv
15.543 88.898 15.543 88.82 15.551 88.75 cv
15.551 88.68 15.563 88.617 15.578 88.562 cv
15.59 88.508 15.605 88.453 15.633 88.398 cv
15.652 88.344 15.68 88.289 15.715 88.227 cv
18.875 82.84 li
18.895 82.805 18.93 82.773 18.977 82.746 cv
19.02 82.719 19.074 82.695 19.148 82.676 cv
19.215 82.66 19.301 82.648 19.406 82.637 cv
19.508 82.633 19.629 82.629 19.77 82.625 cv
19.918 82.629 20.055 82.633 20.172 82.645 cv
20.285 82.656 20.375 82.672 20.449 82.687 cv
20.516 82.707 20.57 82.73 20.609 82.762 cv
20.645 82.793 20.664 82.828 20.664 82.867 cv
20.664 88.531 li
21.664 88.531 li
21.738 88.535 21.801 88.574 21.852 88.652 cv
21.898 88.734 21.922 88.855 21.926 89.016 cv
cp
19.484 83.664 mo
19.473 83.664 li
16.621 88.531 li
19.484 88.531 li
cp
f
8.121 46.609 mo
22.312 46.609 li
22.312 63.699 li
8.121 63.699 li
cp
0 0 0 0 cmyk
ef
14.504 59.48 mo
14.5 59.57 14.492 59.645 14.48 59.703 cv
14.465 59.766 14.445 59.816 14.426 59.848 cv
14.402 59.887 14.379 59.91 14.348 59.926 cv
14.316 59.941 14.285 59.949 14.254 59.949 cv
9.613 59.949 li
9.582 59.949 9.551 59.941 9.523 59.926 cv
9.496 59.91 9.469 59.887 9.445 59.848 cv
9.414 59.816 9.395 59.766 9.387 59.703 cv
9.371 59.645 9.367 59.57 9.367 59.48 cv
9.367 59.402 9.371 59.332 9.387 59.27 cv
9.395 59.211 9.414 59.164 9.438 59.121 cv
9.457 59.086 9.48 59.055 9.512 59.031 cv
9.539 59.012 9.574 59 9.613 59 cv
11.469 59 li
11.469 52.246 li
9.75 53.266 li
9.66 53.316 9.59 53.344 9.539 53.352 cv
9.484 53.359 9.445 53.352 9.414 53.32 cv
9.383 53.293 9.359 53.242 9.348 53.172 cv
9.336 53.105 9.332 53.02 9.332 52.91 cv
9.332 52.836 9.332 52.77 9.34 52.711 cv
9.344 52.66 9.355 52.613 9.371 52.574 cv
9.383 52.539 9.402 52.508 9.43 52.48 cv
9.453 52.453 9.488 52.426 9.531 52.395 cv
11.578 51.082 li
11.594 51.074 11.617 51.062 11.645 51.051 cv
11.672 51.043 11.707 51.035 11.75 51.023 cv
11.789 51.016 11.836 51.008 11.895 51.004 cv
11.945 51.004 12.016 51.004 12.098 51 cv
12.207 51.004 12.297 51.008 12.375 51.016 cv
12.445 51.027 12.504 51.039 12.543 51.055 cv
12.582 51.07 12.609 51.094 12.625 51.117 cv
12.641 51.145 12.648 51.168 12.648 51.195 cv
12.648 59 li
14.254 59 li
14.289 59 14.32 59.012 14.355 59.031 cv
14.387 59.055 14.414 59.086 14.438 59.121 cv
14.453 59.164 14.469 59.211 14.484 59.27 cv
14.492 59.332 14.5 59.402 14.504 59.48 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.52 57.094 mo
21.52 57.574 21.438 57.996 21.277 58.363 cv
21.117 58.734 20.891 59.047 20.598 59.301 cv
20.305 59.555 19.957 59.746 19.551 59.879 cv
19.145 60.012 18.695 60.078 18.203 60.078 cv
17.926 60.078 17.664 60.059 17.418 60.02 cv
17.168 59.98 16.945 59.934 16.758 59.879 cv
16.563 59.824 16.406 59.77 16.285 59.711 cv
16.16 59.656 16.082 59.613 16.047 59.578 cv
16.012 59.551 15.988 59.52 15.977 59.492 cv
15.961 59.465 15.945 59.434 15.938 59.391 cv
15.922 59.355 15.914 59.305 15.914 59.242 cv
15.906 59.184 15.906 59.113 15.91 59.027 cv
15.906 58.957 15.91 58.887 15.918 58.82 cv
15.926 58.762 15.938 58.711 15.957 58.668 cv
15.973 58.633 15.992 58.605 16.02 58.582 cv
16.043 58.566 16.074 58.555 16.109 58.555 cv
16.152 58.555 16.223 58.586 16.32 58.641 cv
16.414 58.703 16.543 58.766 16.707 58.828 cv
16.867 58.898 17.07 58.961 17.313 59.016 cv
17.551 59.078 17.836 59.105 18.168 59.105 cv
18.473 59.105 18.754 59.07 19.012 58.996 cv
19.27 58.926 19.488 58.812 19.676 58.652 cv
19.855 58.5 20 58.305 20.109 58.066 cv
20.211 57.832 20.266 57.543 20.27 57.203 cv
20.266 56.922 20.219 56.672 20.133 56.453 cv
20.039 56.238 19.902 56.059 19.723 55.91 cv
19.535 55.77 19.301 55.66 19.02 55.586 cv
18.73 55.52 18.395 55.484 18.004 55.48 cv
17.723 55.484 17.48 55.5 17.281 55.523 cv
17.078 55.555 16.891 55.566 16.719 55.562 cv
16.59 55.566 16.5 55.535 16.445 55.473 cv
16.391 55.414 16.363 55.301 16.363 55.129 cv
16.363 51.508 li
16.363 51.359 16.398 51.246 16.469 51.172 cv
16.539 51.102 16.641 51.066 16.773 51.062 cv
20.707 51.062 li
20.738 51.066 20.773 51.078 20.813 51.094 cv
20.844 51.117 20.875 51.148 20.898 51.187 cv
20.922 51.234 20.938 51.285 20.949 51.348 cv
20.961 51.41 20.969 51.484 20.969 51.57 cv
20.969 51.738 20.945 51.867 20.902 51.957 cv
20.859 52.051 20.797 52.098 20.719 52.094 cv
17.543 52.094 li
17.543 54.586 li
17.691 54.566 17.852 54.551 18.016 54.547 cv
18.176 54.543 18.359 54.543 18.574 54.539 cv
19.059 54.543 19.488 54.602 19.855 54.723 cv
20.223 54.844 20.527 55.016 20.773 55.234 cv
21.016 55.457 21.199 55.727 21.328 56.043 cv
21.453 56.359 21.52 56.711 21.52 57.094 cv
cp
f
8.121 15.012 mo
22.312 15.012 li
22.312 32.1021 li
8.121 32.1021 li
cp
0 0 0 0 cmyk
ef
14.492 27.875 mo
14.488 27.965 14.48 28.035 14.469 28.094 cv
14.453 28.156 14.434 28.207 14.414 28.238 cv
14.391 28.277 14.367 28.301 14.336 28.316 cv
14.305 28.332 14.273 28.34 14.246 28.34 cv
9.609 28.34 li
9.574 28.34 9.547 28.332 9.52 28.316 cv
9.492 28.301 9.465 28.277 9.441 28.238 cv
9.414 28.207 9.395 28.156 9.383 28.094 cv
9.367 28.035 9.359 27.965 9.363 27.875 cv
9.359 27.797 9.367 27.723 9.383 27.66 cv
9.395 27.602 9.41 27.555 9.434 27.516 cv
9.449 27.48 9.477 27.449 9.508 27.426 cv
9.539 27.406 9.57 27.398 9.609 27.395 cv
11.461 27.395 li
11.461 20.648 li
9.746 21.668 li
9.656 21.719 9.586 21.746 9.539 21.754 cv
9.484 21.762 9.441 21.754 9.41 21.723 cv
9.375 21.695 9.355 21.645 9.344 21.574 cv
9.332 21.508 9.324 21.422 9.328 21.312 cv
9.324 21.238 9.328 21.172 9.34 21.113 cv
9.344 21.062 9.355 21.016 9.371 20.977 cv
9.383 20.941 9.402 20.91 9.426 20.883 cv
9.449 20.855 9.48 20.828 9.527 20.801 cv
11.57 19.488 li
11.586 19.477 11.605 19.465 11.637 19.457 cv
11.66 19.449 11.695 19.441 11.742 19.43 cv
11.781 19.422 11.832 19.414 11.887 19.41 cv
11.941 19.41 12.008 19.41 12.094 19.406 cv
12.199 19.41 12.293 19.414 12.367 19.422 cv
12.438 19.43 12.492 19.445 12.539 19.461 cv
12.578 19.48 12.605 19.5 12.621 19.523 cv
12.629 19.551 12.637 19.574 12.641 19.598 cv
12.641 27.395 li
14.246 27.395 li
14.281 27.398 14.316 27.406 14.348 27.426 cv
14.379 27.449 14.402 27.48 14.426 27.516 cv
14.441 27.555 14.457 27.602 14.473 27.66 cv
14.48 27.723 14.488 27.797 14.492 27.875 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.777 25.469 mo
21.777 25.859 21.715 26.238 21.598 26.598 cv
21.473 26.965 21.289 27.281 21.047 27.555 cv
20.797 27.832 20.484 28.055 20.109 28.219 cv
19.727 28.387 19.281 28.469 18.766 28.469 cv
18.395 28.469 18.066 28.426 17.785 28.332 cv
17.5 28.246 17.254 28.113 17.043 27.941 cv
16.832 27.773 16.656 27.566 16.52 27.32 cv
16.379 27.074 16.266 26.793 16.184 26.477 cv
16.098 26.164 16.039 25.82 16.004 25.441 cv
15.965 25.07 15.945 24.668 15.949 24.234 cv
15.945 23.855 15.965 23.473 16.008 23.082 cv
16.047 22.699 16.121 22.324 16.227 21.957 cv
16.332 21.598 16.477 21.258 16.656 20.941 cv
16.836 20.625 17.063 20.348 17.336 20.113 cv
17.609 19.879 17.934 19.691 18.313 19.551 cv
18.691 19.414 19.133 19.348 19.637 19.344 cv
19.805 19.348 19.977 19.355 20.148 19.375 cv
20.32 19.398 20.48 19.43 20.629 19.461 cv
20.777 19.5 20.898 19.535 21 19.574 cv
21.098 19.613 21.164 19.648 21.199 19.672 cv
21.227 19.699 21.25 19.727 21.27 19.754 cv
21.285 19.785 21.301 19.816 21.309 19.852 cv
21.316 19.887 21.32 19.926 21.328 19.969 cv
21.328 20.012 21.332 20.066 21.336 20.129 cv
21.332 20.215 21.332 20.285 21.332 20.34 cv
21.328 20.402 21.316 20.449 21.305 20.484 cv
21.285 20.523 21.266 20.551 21.242 20.566 cv
21.215 20.586 21.184 20.594 21.145 20.594 cv
21.094 20.594 21.023 20.578 20.938 20.547 cv
20.848 20.516 20.742 20.48 20.621 20.437 cv
20.496 20.402 20.348 20.367 20.172 20.332 cv
19.996 20.305 19.793 20.289 19.563 20.285 cv
19.133 20.289 18.766 20.375 18.461 20.547 cv
18.156 20.719 17.906 20.953 17.711 21.246 cv
17.516 21.539 17.371 21.879 17.281 22.262 cv
17.184 22.652 17.129 23.055 17.121 23.473 cv
17.238 23.406 17.375 23.34 17.523 23.27 cv
17.672 23.203 17.832 23.141 18.008 23.082 cv
18.184 23.031 18.371 22.984 18.566 22.949 cv
18.762 22.918 18.973 22.902 19.199 22.898 cv
19.676 22.902 20.078 22.969 20.41 23.094 cv
20.738 23.227 21.004 23.406 21.211 23.637 cv
21.41 23.867 21.555 24.137 21.645 24.449 cv
21.73 24.762 21.777 25.102 21.777 25.469 cv
cp
20.582 25.578 mo
20.582 25.316 20.555 25.074 20.504 24.855 cv
20.449 24.641 20.359 24.457 20.238 24.301 cv
20.113 24.152 19.949 24.035 19.746 23.953 cv
19.535 23.871 19.281 23.828 18.984 23.828 cv
18.813 23.828 18.645 23.844 18.477 23.875 cv
18.305 23.906 18.141 23.949 17.984 23.996 cv
17.824 24.051 17.676 24.113 17.535 24.184 cv
17.391 24.258 17.258 24.332 17.141 24.41 cv
17.137 25.004 17.176 25.5 17.254 25.895 cv
17.328 26.293 17.438 26.609 17.582 26.848 cv
17.727 27.09 17.906 27.262 18.121 27.363 cv
18.336 27.469 18.586 27.52 18.875 27.516 cv
19.164 27.52 19.418 27.465 19.633 27.352 cv
19.848 27.246 20.023 27.098 20.168 26.91 cv
20.309 26.727 20.414 26.52 20.48 26.289 cv
20.547 26.059 20.582 25.824 20.582 25.578 cv
cp
f
38.137 520.121 mo
38.133 520.211 38.125 520.281 38.113 520.34 cv
38.098 520.402 38.078 520.453 38.059 520.484 cv
38.035 520.523 38.012 520.547 37.98 520.562 cv
37.949 520.578 37.918 520.586 37.891 520.586 cv
33.254 520.586 li
33.219 520.586 33.191 520.578 33.164 520.562 cv
33.137 520.547 33.109 520.523 33.086 520.484 cv
33.059 520.453 33.039 520.402 33.027 520.34 cv
33.012 520.281 33.004 520.211 33.008 520.121 cv
33.004 520.043 33.012 519.969 33.027 519.906 cv
33.039 519.848 33.055 519.801 33.078 519.762 cv
33.094 519.727 33.121 519.695 33.152 519.672 cv
33.184 519.652 33.215 519.645 33.254 519.641 cv
35.105 519.641 li
35.105 512.895 li
33.391 513.914 li
33.301 513.965 33.23 513.992 33.184 514 cv
33.129 514.008 33.086 514 33.055 513.969 cv
33.02 513.941 33 513.891 32.988 513.82 cv
32.977 513.754 32.969 513.668 32.973 513.559 cv
32.969 513.484 32.973 513.418 32.984 513.359 cv
32.988 513.309 33 513.262 33.016 513.223 cv
33.027 513.187 33.047 513.156 33.07 513.129 cv
33.094 513.102 33.125 513.074 33.172 513.047 cv
35.215 511.734 li
35.23 511.723 35.25 511.711 35.281 511.703 cv
35.305 511.695 35.34 511.687 35.387 511.676 cv
35.426 511.668 35.477 511.66 35.531 511.656 cv
35.586 511.656 35.652 511.656 35.738 511.652 cv
35.844 511.656 35.938 511.66 36.012 511.668 cv
36.082 511.676 36.137 511.691 36.184 511.707 cv
36.223 511.727 36.25 511.746 36.266 511.77 cv
36.273 511.797 36.281 511.82 36.285 511.844 cv
36.285 519.641 li
37.891 519.641 li
37.926 519.645 37.961 519.652 37.992 519.672 cv
38.023 519.695 38.047 519.727 38.07 519.762 cv
38.086 519.801 38.102 519.848 38.117 519.906 cv
38.125 519.969 38.133 520.043 38.137 520.121 cv
cp
f
108.555 520.078 mo
108.551 520.164 108.547 520.238 108.535 520.301 cv
108.523 520.367 108.508 520.422 108.488 520.461 cv
108.465 520.508 108.438 520.539 108.406 520.555 cv
108.371 520.578 108.332 520.586 108.293 520.586 cv
103.391 520.586 li
103.328 520.586 103.27 520.578 103.223 520.562 cv
103.172 520.547 103.133 520.523 103.098 520.484 cv
103.063 520.453 103.035 520.398 103.023 520.328 cv
103.004 520.258 102.996 520.172 103 520.07 cv
102.996 519.98 103 519.902 103.008 519.832 cv
103.012 519.766 103.027 519.707 103.055 519.652 cv
103.078 519.602 103.109 519.547 103.145 519.492 cv
103.18 519.441 103.223 519.387 103.281 519.324 cv
105.055 517.5 li
105.465 517.082 105.793 516.707 106.043 516.371 cv
106.289 516.043 106.48 515.738 106.613 515.461 cv
106.746 515.187 106.832 514.937 106.879 514.711 cv
106.918 514.488 106.941 514.277 106.941 514.082 cv
106.941 513.887 106.906 513.703 106.84 513.523 cv
106.773 513.352 106.68 513.195 106.555 513.059 cv
106.43 512.93 106.273 512.824 106.086 512.742 cv
105.898 512.668 105.68 512.629 105.434 512.625 cv
105.145 512.629 104.887 512.668 104.66 512.742 cv
104.43 512.824 104.23 512.91 104.059 512.996 cv
103.887 513.09 103.742 513.172 103.625 513.25 cv
103.508 513.328 103.422 513.367 103.371 513.367 cv
103.336 513.367 103.305 513.359 103.281 513.34 cv
103.25 513.324 103.23 513.293 103.215 513.25 cv
103.199 513.211 103.184 513.156 103.176 513.086 cv
103.164 513.02 103.16 512.937 103.164 512.84 cv
103.16 512.773 103.164 512.715 103.172 512.664 cv
103.176 512.613 103.184 512.57 103.195 512.531 cv
103.203 512.496 103.219 512.461 103.238 512.43 cv
103.258 512.398 103.293 512.359 103.352 512.309 cv
103.402 512.262 103.496 512.195 103.633 512.113 cv
103.766 512.031 103.938 511.953 104.141 511.871 cv
104.344 511.793 104.566 511.723 104.813 511.668 cv
105.055 511.613 105.313 511.586 105.586 511.586 cv
106.012 511.586 106.387 511.648 106.711 511.77 cv
107.031 511.891 107.297 512.055 107.512 512.266 cv
107.723 512.477 107.883 512.723 107.988 512.996 cv
108.094 513.277 108.148 513.574 108.148 513.887 cv
108.148 514.176 108.121 514.457 108.07 514.734 cv
108.02 515.02 107.914 515.324 107.754 515.648 cv
107.59 515.977 107.355 516.34 107.051 516.738 cv
106.742 517.141 106.336 517.602 105.832 518.117 cv
104.426 519.586 li
108.285 519.586 li
108.316 519.59 108.352 519.602 108.391 519.617 cv
108.422 519.641 108.453 519.672 108.48 519.711 cv
108.504 519.754 108.523 519.805 108.535 519.863 cv
108.547 519.93 108.551 520 108.555 520.078 cv
cp
f
179.391 518.062 mo
179.387 518.215 179.363 518.336 179.32 518.422 cv
179.273 518.512 179.211 518.555 179.129 518.551 cv
178.129 518.551 li
178.129 520.414 li
178.129 520.453 178.117 520.484 178.102 520.508 cv
178.078 520.535 178.047 520.555 178.004 520.574 cv
177.953 520.59 177.891 520.602 177.82 520.613 cv
177.742 520.621 177.648 520.625 177.531 520.629 cv
177.414 520.625 177.316 520.621 177.246 520.613 cv
177.168 520.602 177.109 520.59 177.066 520.574 cv
177.02 520.555 176.988 520.535 176.973 520.508 cv
176.953 520.484 176.945 520.453 176.949 520.414 cv
176.949 518.551 li
173.32 518.551 li
173.262 518.555 173.219 518.547 173.184 518.531 cv
173.148 518.52 173.113 518.492 173.086 518.453 cv
173.055 518.418 173.035 518.367 173.023 518.297 cv
173.012 518.23 173.008 518.141 173.008 518.027 cv
173.008 517.945 173.008 517.867 173.016 517.797 cv
173.016 517.727 173.027 517.664 173.043 517.609 cv
173.055 517.555 173.07 517.5 173.098 517.445 cv
173.117 517.391 173.145 517.336 173.18 517.273 cv
176.34 511.887 li
176.359 511.852 176.395 511.82 176.441 511.793 cv
176.484 511.766 176.539 511.742 176.613 511.723 cv
176.68 511.707 176.766 511.695 176.871 511.684 cv
176.973 511.68 177.094 511.676 177.234 511.672 cv
177.383 511.676 177.52 511.68 177.637 511.691 cv
177.75 511.703 177.84 511.719 177.914 511.734 cv
177.98 511.754 178.035 511.777 178.074 511.809 cv
178.109 511.84 178.129 511.875 178.129 511.914 cv
178.129 517.578 li
179.129 517.578 li
179.203 517.582 179.266 517.621 179.316 517.699 cv
179.363 517.781 179.387 517.902 179.391 518.062 cv
cp
176.949 512.711 mo
176.938 512.711 li
174.086 517.578 li
176.949 517.578 li
cp
f
249.684 517.715 mo
249.684 518.105 249.621 518.484 249.504 518.844 cv
249.379 519.211 249.195 519.527 248.953 519.801 cv
248.703 520.078 248.391 520.301 248.016 520.465 cv
247.633 520.633 247.188 520.715 246.672 520.715 cv
246.301 520.715 245.973 520.672 245.691 520.578 cv
245.406 520.492 245.16 520.359 244.949 520.187 cv
244.738 520.02 244.563 519.812 244.426 519.566 cv
244.285 519.32 244.172 519.039 244.09 518.723 cv
244.004 518.41 243.945 518.066 243.91 517.687 cv
243.871 517.316 243.852 516.914 243.855 516.48 cv
243.852 516.102 243.871 515.719 243.914 515.328 cv
243.953 514.945 244.027 514.57 244.133 514.203 cv
244.238 513.844 244.383 513.504 244.563 513.187 cv
244.742 512.871 244.969 512.594 245.242 512.359 cv
245.516 512.125 245.84 511.937 246.219 511.797 cv
246.598 511.66 247.039 511.594 247.543 511.59 cv
247.711 511.594 247.883 511.602 248.055 511.621 cv
248.227 511.645 248.387 511.676 248.535 511.707 cv
248.684 511.746 248.805 511.781 248.906 511.82 cv
249.004 511.859 249.07 511.895 249.105 511.918 cv
249.133 511.945 249.156 511.973 249.176 512 cv
249.191 512.031 249.207 512.062 249.215 512.098 cv
249.223 512.133 249.227 512.172 249.234 512.215 cv
249.234 512.258 249.238 512.312 249.242 512.375 cv
249.238 512.461 249.238 512.531 249.238 512.586 cv
249.234 512.648 249.223 512.695 249.211 512.73 cv
249.191 512.77 249.172 512.797 249.148 512.812 cv
249.121 512.832 249.09 512.84 249.051 512.84 cv
249 512.84 248.93 512.824 248.844 512.793 cv
248.754 512.762 248.648 512.727 248.527 512.684 cv
248.402 512.648 248.254 512.613 248.078 512.578 cv
247.902 512.551 247.699 512.535 247.469 512.531 cv
247.039 512.535 246.672 512.621 246.367 512.793 cv
246.063 512.965 245.813 513.199 245.617 513.492 cv
245.422 513.785 245.277 514.125 245.188 514.508 cv
245.09 514.898 245.035 515.301 245.027 515.719 cv
245.145 515.652 245.281 515.586 245.43 515.516 cv
245.578 515.449 245.738 515.387 245.914 515.328 cv
246.09 515.277 246.277 515.23 246.473 515.195 cv
246.668 515.164 246.879 515.148 247.105 515.145 cv
247.582 515.148 247.984 515.215 248.316 515.34 cv
248.645 515.473 248.91 515.652 249.117 515.883 cv
249.316 516.113 249.461 516.383 249.551 516.695 cv
249.637 517.008 249.684 517.348 249.684 517.715 cv
cp
248.488 517.824 mo
248.488 517.562 248.461 517.32 248.41 517.102 cv
248.355 516.887 248.266 516.703 248.145 516.547 cv
248.02 516.398 247.855 516.281 247.652 516.199 cv
247.441 516.117 247.188 516.074 246.891 516.074 cv
246.719 516.074 246.551 516.09 246.383 516.121 cv
246.211 516.152 246.047 516.195 245.891 516.242 cv
245.73 516.297 245.582 516.359 245.441 516.43 cv
245.297 516.504 245.164 516.578 245.047 516.656 cv
245.043 517.25 245.082 517.746 245.16 518.141 cv
245.234 518.539 245.344 518.855 245.488 519.094 cv
245.633 519.336 245.813 519.508 246.027 519.609 cv
246.242 519.715 246.492 519.766 246.781 519.762 cv
247.07 519.766 247.324 519.711 247.539 519.598 cv
247.754 519.492 247.93 519.344 248.074 519.156 cv
248.215 518.973 248.32 518.766 248.387 518.535 cv
248.453 518.305 248.488 518.07 248.488 517.824 cv
cp
f
320.117 518.309 mo
320.117 518.695 320.047 519.039 319.91 519.336 cv
319.773 519.641 319.578 519.891 319.32 520.094 cv
319.063 520.301 318.742 520.457 318.363 520.559 cv
317.98 520.664 317.547 520.715 317.063 520.715 cv
316.602 520.715 316.191 520.668 315.832 520.574 cv
315.469 520.48 315.164 520.34 314.914 520.148 cv
314.664 519.965 314.473 519.734 314.34 519.457 cv
314.207 519.184 314.141 518.871 314.141 518.516 cv
314.141 518.242 314.184 517.984 314.277 517.75 cv
314.363 517.516 314.496 517.301 314.672 517.105 cv
314.84 516.91 315.051 516.727 315.305 516.551 cv
315.555 516.383 315.84 516.219 316.156 516.062 cv
315.883 515.922 315.641 515.773 315.43 515.613 cv
315.219 515.457 315.039 515.285 314.895 515.098 cv
314.746 514.914 314.637 514.719 314.563 514.508 cv
314.484 514.301 314.445 514.07 314.449 513.82 cv
314.445 513.512 314.5 513.219 314.617 512.945 cv
314.727 512.676 314.898 512.441 315.125 512.238 cv
315.352 512.039 315.637 511.879 315.988 511.762 cv
316.332 511.645 316.742 511.586 317.211 511.586 cv
317.656 511.586 318.043 511.641 318.371 511.746 cv
318.699 511.855 318.969 512 319.18 512.184 cv
319.391 512.371 319.547 512.59 319.652 512.84 cv
319.75 513.09 319.801 513.359 319.805 513.648 cv
319.801 513.883 319.762 514.109 319.691 514.32 cv
319.613 514.539 319.504 514.742 319.355 514.93 cv
319.207 515.125 319.027 515.305 318.816 515.469 cv
318.605 515.641 318.363 515.797 318.09 515.937 cv
318.41 516.102 318.695 516.266 318.953 516.434 cv
319.203 516.602 319.418 516.781 319.594 516.977 cv
319.762 517.172 319.891 517.379 319.984 517.594 cv
320.07 517.812 320.117 518.051 320.117 518.309 cv
cp
318.637 513.758 mo
318.633 513.57 318.602 513.395 318.535 513.238 cv
318.469 513.082 318.371 512.949 318.246 512.84 cv
318.117 512.73 317.957 512.648 317.77 512.59 cv
317.574 512.535 317.359 512.508 317.121 512.504 cv
316.625 512.508 316.25 512.617 316 512.84 cv
315.742 513.066 315.617 513.375 315.621 513.758 cv
315.617 513.937 315.648 514.102 315.711 514.254 cv
315.773 514.41 315.867 514.555 316 514.691 cv
316.125 514.828 316.289 514.961 316.492 515.09 cv
316.688 515.223 316.926 515.359 317.203 515.5 cv
317.664 515.266 318.02 515.004 318.266 514.711 cv
318.512 514.426 318.633 514.109 318.637 513.758 cv
cp
318.926 518.434 mo
318.922 518.227 318.883 518.035 318.809 517.863 cv
318.727 517.695 318.609 517.535 318.453 517.383 cv
318.297 517.234 318.098 517.09 317.863 516.949 cv
317.625 516.812 317.355 516.668 317.047 516.516 cv
316.758 516.66 316.504 516.801 316.289 516.941 cv
316.07 517.082 315.891 517.23 315.754 517.379 cv
315.613 517.535 315.508 517.691 315.438 517.855 cv
315.363 518.023 315.328 518.207 315.332 518.406 cv
315.328 518.852 315.48 519.195 315.789 519.434 cv
316.09 519.68 316.543 519.801 317.148 519.797 cv
317.73 519.801 318.176 519.68 318.477 519.43 cv
318.773 519.187 318.922 518.855 318.926 518.434 cv
cp
f
386.824 520.121 mo
386.82 520.211 386.813 520.281 386.801 520.34 cv
386.785 520.402 386.766 520.453 386.746 520.484 cv
386.723 520.523 386.699 520.547 386.668 520.562 cv
386.637 520.578 386.605 520.586 386.578 520.586 cv
381.941 520.586 li
381.906 520.586 381.879 520.578 381.852 520.562 cv
381.824 520.547 381.797 520.523 381.773 520.484 cv
381.746 520.453 381.727 520.402 381.715 520.34 cv
381.699 520.281 381.691 520.211 381.695 520.121 cv
381.691 520.043 381.699 519.969 381.715 519.906 cv
381.727 519.848 381.742 519.801 381.766 519.762 cv
381.781 519.727 381.809 519.695 381.84 519.672 cv
381.871 519.652 381.902 519.645 381.941 519.641 cv
383.793 519.641 li
383.793 512.895 li
382.078 513.914 li
381.988 513.965 381.918 513.992 381.871 514 cv
381.816 514.008 381.773 514 381.742 513.969 cv
381.707 513.941 381.688 513.891 381.676 513.82 cv
381.664 513.754 381.656 513.668 381.66 513.559 cv
381.656 513.484 381.66 513.418 381.672 513.359 cv
381.676 513.309 381.688 513.262 381.703 513.223 cv
381.715 513.187 381.734 513.156 381.758 513.129 cv
381.781 513.102 381.813 513.074 381.859 513.047 cv
383.902 511.734 li
383.918 511.723 383.938 511.711 383.969 511.703 cv
383.992 511.695 384.027 511.687 384.074 511.676 cv
384.113 511.668 384.164 511.66 384.219 511.656 cv
384.273 511.656 384.34 511.656 384.426 511.652 cv
384.531 511.656 384.625 511.66 384.699 511.668 cv
384.77 511.676 384.824 511.691 384.871 511.707 cv
384.91 511.727 384.938 511.746 384.953 511.77 cv
384.961 511.797 384.969 511.82 384.973 511.844 cv
384.973 519.641 li
386.578 519.641 li
386.613 519.645 386.648 519.652 386.68 519.672 cv
386.711 519.695 386.734 519.727 386.758 519.762 cv
386.773 519.801 386.789 519.848 386.805 519.906 cv
386.813 519.969 386.82 520.043 386.824 520.121 cv
cp
f
394.18 516.129 mo
394.176 516.812 394.125 517.434 394.02 517.996 cv
393.91 518.559 393.73 519.043 393.484 519.445 cv
393.23 519.852 392.902 520.164 392.504 520.383 cv
392.098 520.605 391.605 520.715 391.02 520.715 cv
390.461 520.715 389.988 520.617 389.609 520.418 cv
389.227 520.223 388.922 519.93 388.688 519.543 cv
388.453 519.156 388.285 518.684 388.191 518.117 cv
388.09 517.555 388.043 516.906 388.043 516.172 cv
388.043 515.5 388.098 514.879 388.207 514.312 cv
388.316 513.75 388.492 513.266 388.742 512.859 cv
388.984 512.457 389.309 512.145 389.715 511.918 cv
390.113 511.699 390.609 511.586 391.199 511.586 cv
391.758 511.586 392.23 511.687 392.613 511.883 cv
392.996 512.086 393.301 512.379 393.535 512.762 cv
393.766 513.152 393.934 513.625 394.031 514.187 cv
394.129 514.75 394.176 515.398 394.18 516.129 cv
cp
392.973 516.211 mo
392.969 515.77 392.953 515.371 392.926 515.02 cv
392.891 514.668 392.844 514.359 392.785 514.09 cv
392.719 513.82 392.641 513.59 392.543 513.395 cv
392.445 513.203 392.328 513.043 392.191 512.914 cv
392.051 512.789 391.891 512.695 391.719 512.637 cv
391.539 512.582 391.344 512.555 391.129 512.551 cv
390.738 512.555 390.422 512.645 390.184 512.828 cv
389.938 513.012 389.746 513.266 389.609 513.582 cv
389.469 513.902 389.375 514.273 389.324 514.703 cv
389.273 515.133 389.25 515.598 389.25 516.09 cv
389.25 516.754 389.281 517.316 389.352 517.777 cv
389.418 518.246 389.527 518.625 389.68 518.914 cv
389.824 519.211 390.016 519.422 390.246 519.551 cv
390.477 519.687 390.758 519.754 391.09 519.75 cv
391.344 519.754 391.566 519.715 391.762 519.629 cv
391.953 519.551 392.121 519.43 392.262 519.273 cv
392.402 519.121 392.516 518.937 392.609 518.723 cv
392.695 518.508 392.77 518.27 392.828 518.008 cv
392.879 517.75 392.918 517.469 392.941 517.164 cv
392.961 516.859 392.969 516.543 392.973 516.211 cv
cp
f
457.297 520.121 mo
457.293 520.211 457.285 520.281 457.273 520.34 cv
457.258 520.402 457.238 520.453 457.219 520.484 cv
457.195 520.523 457.172 520.547 457.141 520.562 cv
457.109 520.578 457.078 520.586 457.051 520.586 cv
452.414 520.586 li
452.379 520.586 452.352 520.578 452.324 520.562 cv
452.297 520.547 452.27 520.523 452.246 520.484 cv
452.219 520.453 452.199 520.402 452.188 520.34 cv
452.172 520.281 452.164 520.211 452.168 520.121 cv
452.164 520.043 452.172 519.969 452.188 519.906 cv
452.199 519.848 452.215 519.801 452.238 519.762 cv
452.254 519.727 452.281 519.695 452.313 519.672 cv
452.344 519.652 452.375 519.645 452.414 519.641 cv
454.266 519.641 li
454.266 512.895 li
452.551 513.914 li
452.461 513.965 452.391 513.992 452.344 514 cv
452.289 514.008 452.246 514 452.215 513.969 cv
452.18 513.941 452.16 513.891 452.148 513.82 cv
452.137 513.754 452.129 513.668 452.133 513.559 cv
452.129 513.484 452.133 513.418 452.145 513.359 cv
452.148 513.309 452.16 513.262 452.176 513.223 cv
452.188 513.187 452.207 513.156 452.23 513.129 cv
452.254 513.102 452.285 513.074 452.332 513.047 cv
454.375 511.734 li
454.391 511.723 454.41 511.711 454.441 511.703 cv
454.465 511.695 454.5 511.687 454.547 511.676 cv
454.586 511.668 454.637 511.66 454.691 511.656 cv
454.746 511.656 454.813 511.656 454.898 511.652 cv
455.004 511.656 455.098 511.66 455.172 511.668 cv
455.242 511.676 455.297 511.691 455.344 511.707 cv
455.383 511.727 455.41 511.746 455.426 511.77 cv
455.434 511.797 455.441 511.82 455.445 511.844 cv
455.445 519.641 li
457.051 519.641 li
457.086 519.645 457.121 519.652 457.152 519.672 cv
457.184 519.695 457.207 519.727 457.23 519.762 cv
457.246 519.801 457.262 519.848 457.277 519.906 cv
457.285 519.969 457.293 520.043 457.297 520.121 cv
cp
f
464.355 520.078 mo
464.352 520.164 464.348 520.238 464.336 520.301 cv
464.324 520.367 464.309 520.422 464.289 520.461 cv
464.266 520.508 464.238 520.539 464.207 520.555 cv
464.172 520.578 464.133 520.586 464.094 520.586 cv
459.191 520.586 li
459.129 520.586 459.07 520.578 459.023 520.562 cv
458.973 520.547 458.934 520.523 458.898 520.484 cv
458.863 520.453 458.836 520.398 458.824 520.328 cv
458.805 520.258 458.797 520.172 458.801 520.07 cv
458.797 519.98 458.801 519.902 458.809 519.832 cv
458.813 519.766 458.828 519.707 458.855 519.652 cv
458.879 519.602 458.91 519.547 458.945 519.492 cv
458.98 519.441 459.023 519.387 459.082 519.324 cv
460.855 517.5 li
461.266 517.082 461.594 516.707 461.844 516.371 cv
462.09 516.043 462.281 515.738 462.414 515.461 cv
462.547 515.187 462.633 514.937 462.68 514.711 cv
462.719 514.488 462.742 514.277 462.742 514.082 cv
462.742 513.887 462.707 513.703 462.641 513.523 cv
462.574 513.352 462.48 513.195 462.355 513.059 cv
462.23 512.93 462.074 512.824 461.887 512.742 cv
461.699 512.668 461.48 512.629 461.234 512.625 cv
460.945 512.629 460.688 512.668 460.461 512.742 cv
460.23 512.824 460.031 512.91 459.859 512.996 cv
459.688 513.09 459.543 513.172 459.426 513.25 cv
459.309 513.328 459.223 513.367 459.172 513.367 cv
459.137 513.367 459.105 513.359 459.082 513.34 cv
459.051 513.324 459.031 513.293 459.016 513.25 cv
459 513.211 458.984 513.156 458.977 513.086 cv
458.965 513.02 458.961 512.937 458.965 512.84 cv
458.961 512.773 458.965 512.715 458.973 512.664 cv
458.977 512.613 458.984 512.57 458.996 512.531 cv
459.004 512.496 459.02 512.461 459.039 512.43 cv
459.059 512.398 459.094 512.359 459.152 512.309 cv
459.203 512.262 459.297 512.195 459.434 512.113 cv
459.566 512.031 459.738 511.953 459.941 511.871 cv
460.145 511.793 460.367 511.723 460.613 511.668 cv
460.855 511.613 461.113 511.586 461.387 511.586 cv
461.813 511.586 462.188 511.648 462.512 511.77 cv
462.832 511.891 463.098 512.055 463.313 512.266 cv
463.523 512.477 463.684 512.723 463.789 512.996 cv
463.895 513.277 463.949 513.574 463.949 513.887 cv
463.949 514.176 463.922 514.457 463.871 514.734 cv
463.82 515.02 463.715 515.324 463.555 515.648 cv
463.391 515.977 463.156 516.34 462.852 516.738 cv
462.543 517.141 462.137 517.602 461.633 518.117 cv
460.227 519.586 li
464.086 519.586 li
464.117 519.59 464.152 519.602 464.191 519.617 cv
464.223 519.641 464.254 519.672 464.281 519.711 cv
464.305 519.754 464.324 519.805 464.336 519.863 cv
464.348 519.93 464.352 520 464.355 520.078 cv
cp
f
527.734 520.121 mo
527.73 520.211 527.723 520.281 527.711 520.34 cv
527.695 520.402 527.676 520.453 527.656 520.484 cv
527.633 520.523 527.609 520.547 527.578 520.562 cv
527.547 520.578 527.516 520.586 527.488 520.586 cv
522.852 520.586 li
522.816 520.586 522.789 520.578 522.762 520.562 cv
522.734 520.547 522.707 520.523 522.684 520.484 cv
522.656 520.453 522.637 520.402 522.625 520.34 cv
522.609 520.281 522.602 520.211 522.605 520.121 cv
522.602 520.043 522.609 519.969 522.625 519.906 cv
522.637 519.848 522.652 519.801 522.676 519.762 cv
522.691 519.727 522.719 519.695 522.75 519.672 cv
522.781 519.652 522.813 519.645 522.852 519.641 cv
524.703 519.641 li
524.703 512.895 li
522.988 513.914 li
522.898 513.965 522.828 513.992 522.781 514 cv
522.727 514.008 522.684 514 522.652 513.969 cv
522.617 513.941 522.598 513.891 522.586 513.82 cv
522.574 513.754 522.566 513.668 522.57 513.559 cv
522.566 513.484 522.57 513.418 522.582 513.359 cv
522.586 513.309 522.598 513.262 522.613 513.223 cv
522.625 513.187 522.645 513.156 522.668 513.129 cv
522.691 513.102 522.723 513.074 522.77 513.047 cv
524.813 511.734 li
524.828 511.723 524.848 511.711 524.879 511.703 cv
524.902 511.695 524.938 511.687 524.984 511.676 cv
525.023 511.668 525.074 511.66 525.129 511.656 cv
525.184 511.656 525.25 511.656 525.336 511.652 cv
525.441 511.656 525.535 511.66 525.609 511.668 cv
525.68 511.676 525.734 511.691 525.781 511.707 cv
525.82 511.727 525.848 511.746 525.863 511.77 cv
525.871 511.797 525.879 511.82 525.883 511.844 cv
525.883 519.641 li
527.488 519.641 li
527.523 519.645 527.559 519.652 527.59 519.672 cv
527.621 519.695 527.645 519.727 527.668 519.762 cv
527.684 519.801 527.699 519.848 527.715 519.906 cv
527.723 519.969 527.73 520.043 527.734 520.121 cv
cp
f
535.172 518.062 mo
535.168 518.215 535.145 518.336 535.102 518.422 cv
535.055 518.512 534.992 518.555 534.91 518.551 cv
533.91 518.551 li
533.91 520.414 li
533.91 520.453 533.898 520.484 533.883 520.508 cv
533.859 520.535 533.828 520.555 533.785 520.574 cv
533.734 520.59 533.672 520.602 533.602 520.613 cv
533.523 520.621 533.43 520.625 533.313 520.629 cv
533.195 520.625 533.098 520.621 533.027 520.613 cv
532.949 520.602 532.891 520.59 532.848 520.574 cv
532.801 520.555 532.77 520.535 532.754 520.508 cv
532.734 520.484 532.727 520.453 532.73 520.414 cv
532.73 518.551 li
529.102 518.551 li
529.043 518.555 529 518.547 528.965 518.531 cv
528.93 518.52 528.895 518.492 528.867 518.453 cv
528.836 518.418 528.816 518.367 528.805 518.297 cv
528.793 518.23 528.789 518.141 528.789 518.027 cv
528.789 517.945 528.789 517.867 528.797 517.797 cv
528.797 517.727 528.809 517.664 528.824 517.609 cv
528.836 517.555 528.852 517.5 528.879 517.445 cv
528.898 517.391 528.926 517.336 528.961 517.273 cv
532.121 511.887 li
532.141 511.852 532.176 511.82 532.223 511.793 cv
532.266 511.766 532.32 511.742 532.395 511.723 cv
532.461 511.707 532.547 511.695 532.652 511.684 cv
532.754 511.68 532.875 511.676 533.016 511.672 cv
533.164 511.676 533.301 511.68 533.418 511.691 cv
533.531 511.703 533.621 511.719 533.695 511.734 cv
533.762 511.754 533.816 511.777 533.855 511.809 cv
533.891 511.84 533.91 511.875 533.91 511.914 cv
533.91 517.578 li
534.91 517.578 li
534.984 517.582 535.047 517.621 535.098 517.699 cv
535.145 517.781 535.168 517.902 535.172 518.062 cv
cp
532.73 512.711 mo
532.719 512.711 li
529.867 517.578 li
532.73 517.578 li
cp
f
598.195 520.121 mo
598.191 520.211 598.184 520.281 598.172 520.34 cv
598.156 520.402 598.137 520.453 598.117 520.484 cv
598.094 520.523 598.07 520.547 598.039 520.562 cv
598.008 520.578 597.977 520.586 597.949 520.586 cv
593.313 520.586 li
593.277 520.586 593.25 520.578 593.223 520.562 cv
593.195 520.547 593.168 520.523 593.145 520.484 cv
593.117 520.453 593.098 520.402 593.086 520.34 cv
593.07 520.281 593.063 520.211 593.066 520.121 cv
593.063 520.043 593.07 519.969 593.086 519.906 cv
593.098 519.848 593.113 519.801 593.137 519.762 cv
593.152 519.727 593.18 519.695 593.211 519.672 cv
593.242 519.652 593.273 519.645 593.313 519.641 cv
595.164 519.641 li
595.164 512.895 li
593.449 513.914 li
593.359 513.965 593.289 513.992 593.242 514 cv
593.188 514.008 593.145 514 593.113 513.969 cv
593.078 513.941 593.059 513.891 593.047 513.82 cv
593.035 513.754 593.027 513.668 593.031 513.559 cv
593.027 513.484 593.031 513.418 593.043 513.359 cv
593.047 513.309 593.059 513.262 593.074 513.223 cv
593.086 513.187 593.105 513.156 593.129 513.129 cv
593.152 513.102 593.184 513.074 593.23 513.047 cv
595.273 511.734 li
595.289 511.723 595.309 511.711 595.34 511.703 cv
595.363 511.695 595.398 511.687 595.445 511.676 cv
595.484 511.668 595.535 511.66 595.59 511.656 cv
595.645 511.656 595.711 511.656 595.797 511.652 cv
595.902 511.656 595.996 511.66 596.07 511.668 cv
596.141 511.676 596.195 511.691 596.242 511.707 cv
596.281 511.727 596.309 511.746 596.324 511.77 cv
596.332 511.797 596.34 511.82 596.344 511.844 cv
596.344 519.641 li
597.949 519.641 li
597.984 519.645 598.02 519.652 598.051 519.672 cv
598.082 519.695 598.105 519.727 598.129 519.762 cv
598.145 519.801 598.16 519.848 598.176 519.906 cv
598.184 519.969 598.191 520.043 598.195 520.121 cv
cp
f
605.484 517.715 mo
605.484 518.105 605.422 518.484 605.305 518.844 cv
605.18 519.211 604.996 519.527 604.754 519.801 cv
604.504 520.078 604.191 520.301 603.816 520.465 cv
603.434 520.633 602.988 520.715 602.473 520.715 cv
602.102 520.715 601.773 520.672 601.492 520.578 cv
601.207 520.492 600.961 520.359 600.75 520.187 cv
600.539 520.02 600.363 519.812 600.227 519.566 cv
600.086 519.32 599.973 519.039 599.891 518.723 cv
599.805 518.41 599.746 518.066 599.711 517.687 cv
599.672 517.316 599.652 516.914 599.656 516.48 cv
599.652 516.102 599.672 515.719 599.715 515.328 cv
599.754 514.945 599.828 514.57 599.934 514.203 cv
600.039 513.844 600.184 513.504 600.363 513.187 cv
600.543 512.871 600.77 512.594 601.043 512.359 cv
601.316 512.125 601.641 511.937 602.02 511.797 cv
602.398 511.66 602.84 511.594 603.344 511.59 cv
603.512 511.594 603.684 511.602 603.855 511.621 cv
604.027 511.645 604.188 511.676 604.336 511.707 cv
604.484 511.746 604.605 511.781 604.707 511.82 cv
604.805 511.859 604.871 511.895 604.906 511.918 cv
604.934 511.945 604.957 511.973 604.977 512 cv
604.992 512.031 605.008 512.062 605.016 512.098 cv
605.023 512.133 605.027 512.172 605.035 512.215 cv
605.035 512.258 605.039 512.312 605.043 512.375 cv
605.039 512.461 605.039 512.531 605.039 512.586 cv
605.035 512.648 605.023 512.695 605.012 512.73 cv
604.992 512.77 604.973 512.797 604.949 512.812 cv
604.922 512.832 604.891 512.84 604.852 512.84 cv
604.801 512.84 604.73 512.824 604.645 512.793 cv
604.555 512.762 604.449 512.727 604.328 512.684 cv
604.203 512.648 604.055 512.613 603.879 512.578 cv
603.703 512.551 603.5 512.535 603.27 512.531 cv
602.84 512.535 602.473 512.621 602.168 512.793 cv
601.863 512.965 601.613 513.199 601.418 513.492 cv
601.223 513.785 601.078 514.125 600.988 514.508 cv
600.891 514.898 600.836 515.301 600.828 515.719 cv
600.945 515.652 601.082 515.586 601.23 515.516 cv
601.379 515.449 601.539 515.387 601.715 515.328 cv
601.891 515.277 602.078 515.23 602.273 515.195 cv
602.469 515.164 602.68 515.148 602.906 515.145 cv
603.383 515.148 603.785 515.215 604.117 515.34 cv
604.445 515.473 604.711 515.652 604.918 515.883 cv
605.117 516.113 605.262 516.383 605.352 516.695 cv
605.438 517.008 605.484 517.348 605.484 517.715 cv
cp
604.289 517.824 mo
604.289 517.562 604.262 517.32 604.211 517.102 cv
604.156 516.887 604.066 516.703 603.945 516.547 cv
603.82 516.398 603.656 516.281 603.453 516.199 cv
603.242 516.117 602.988 516.074 602.691 516.074 cv
602.52 516.074 602.352 516.09 602.184 516.121 cv
602.012 516.152 601.848 516.195 601.691 516.242 cv
601.531 516.297 601.383 516.359 601.242 516.43 cv
601.098 516.504 600.965 516.578 600.848 516.656 cv
600.844 517.25 600.883 517.746 600.961 518.141 cv
601.035 518.539 601.145 518.855 601.289 519.094 cv
601.434 519.336 601.613 519.508 601.828 519.609 cv
602.043 519.715 602.293 519.766 602.582 519.762 cv
602.871 519.766 603.125 519.711 603.34 519.598 cv
603.555 519.492 603.73 519.344 603.875 519.156 cv
604.016 518.973 604.121 518.766 604.188 518.535 cv
604.254 518.305 604.289 518.07 604.289 517.824 cv
cp
f
268.918 538.676 mo
268.918 538.781 268.898 538.871 268.863 538.941 cv
268.828 539.02 268.781 539.078 268.727 539.121 cv
268.664 539.172 268.602 539.207 268.535 539.223 cv
268.465 539.246 268.395 539.254 268.328 539.254 cv
267.883 539.254 li
267.738 539.254 267.617 539.242 267.516 539.211 cv
267.41 539.187 267.313 539.133 267.219 539.055 cv
267.125 538.98 267.027 538.879 266.934 538.746 cv
266.836 538.617 266.738 538.449 266.637 538.246 cv
263.555 532.504 li
263.391 532.207 263.227 531.898 263.066 531.57 cv
262.898 531.25 262.746 530.934 262.609 530.621 cv
262.594 530.621 li
262.602 531 262.609 531.383 262.617 531.77 cv
262.621 532.164 262.625 532.551 262.625 532.934 cv
262.625 539.027 li
262.625 539.066 262.613 539.102 262.59 539.133 cv
262.566 539.168 262.527 539.195 262.48 539.211 cv
262.426 539.23 262.359 539.242 262.273 539.258 cv
262.188 539.27 262.078 539.277 261.949 539.277 cv
261.816 539.277 261.707 539.27 261.625 539.258 cv
261.535 539.242 261.469 539.23 261.422 539.211 cv
261.371 539.195 261.336 539.168 261.316 539.133 cv
261.293 539.102 261.281 539.066 261.285 539.027 cv
261.285 529.707 li
261.281 529.504 261.34 529.355 261.461 529.266 cv
261.574 529.18 261.703 529.137 261.848 529.133 cv
262.508 529.133 li
262.664 529.137 262.793 529.148 262.898 529.172 cv
263 529.199 263.094 529.242 263.18 529.301 cv
263.262 529.363 263.344 529.445 263.422 529.551 cv
263.5 529.656 263.582 529.789 263.668 529.949 cv
266.035 534.383 li
266.18 534.656 266.32 534.918 266.457 535.176 cv
266.594 535.434 266.723 535.687 266.852 535.937 cv
266.973 536.187 267.098 536.434 267.223 536.676 cv
267.344 536.918 267.465 537.16 267.59 537.402 cv
267.598 537.402 li
267.586 536.996 267.578 536.57 267.578 536.121 cv
267.57 535.68 267.57 535.25 267.574 534.836 cv
267.574 529.359 li
267.57 529.324 267.582 529.289 267.605 529.258 cv
267.629 529.227 267.664 529.199 267.719 529.176 cv
267.766 529.152 267.836 529.137 267.922 529.125 cv
268.008 529.117 268.117 529.113 268.258 529.109 cv
268.375 529.113 268.48 529.117 268.57 529.125 cv
268.656 529.137 268.727 529.152 268.777 529.176 cv
268.824 529.199 268.859 529.227 268.883 529.258 cv
268.906 529.289 268.918 529.324 268.918 529.359 cv
cp
f
277.477 539.035 mo
277.473 539.082 277.465 539.117 277.449 539.141 cv
277.43 539.172 277.395 539.195 277.352 539.215 cv
277.301 539.234 277.242 539.246 277.168 539.262 cv
277.09 539.27 276.996 539.277 276.891 539.277 cv
276.77 539.277 276.672 539.27 276.598 539.262 cv
276.52 539.246 276.461 539.234 276.418 539.215 cv
276.371 539.195 276.34 539.172 276.328 539.141 cv
276.309 539.117 276.301 539.082 276.305 539.035 cv
276.305 538.105 li
275.902 538.551 275.508 538.875 275.121 539.074 cv
274.727 539.277 274.332 539.375 273.934 539.379 cv
273.465 539.375 273.07 539.301 272.75 539.145 cv
272.43 538.992 272.168 538.781 271.973 538.508 cv
271.773 538.242 271.633 537.93 271.551 537.574 cv
271.461 537.219 271.418 536.785 271.422 536.273 cv
271.422 532.012 li
271.418 531.973 271.43 531.937 271.449 531.906 cv
271.465 531.879 271.5 531.855 271.555 531.828 cv
271.605 531.809 271.672 531.793 271.758 531.781 cv
271.84 531.777 271.945 531.773 272.07 531.77 cv
272.191 531.773 272.293 531.777 272.379 531.781 cv
272.461 531.793 272.527 531.809 272.578 531.828 cv
272.625 531.855 272.66 531.879 272.684 531.906 cv
272.703 531.937 272.715 531.973 272.715 532.012 cv
272.715 536.102 li
272.715 536.516 272.742 536.848 272.805 537.09 cv
272.859 537.34 272.953 537.547 273.078 537.719 cv
273.199 537.895 273.352 538.031 273.543 538.125 cv
273.727 538.223 273.945 538.27 274.199 538.27 cv
274.52 538.27 274.844 538.156 275.164 537.926 cv
275.484 537.699 275.82 537.363 276.18 536.922 cv
276.18 532.012 li
276.176 531.973 276.188 531.937 276.207 531.906 cv
276.223 531.879 276.258 531.855 276.313 531.828 cv
276.363 531.809 276.43 531.793 276.512 531.781 cv
276.59 531.777 276.695 531.773 276.828 531.77 cv
276.953 531.773 277.055 531.777 277.141 531.781 cv
277.219 531.793 277.285 531.809 277.336 531.828 cv
277.379 531.855 277.414 531.879 277.441 531.906 cv
277.461 531.937 277.473 531.973 277.477 532.012 cv
cp
f
290.27 539.035 mo
290.27 539.082 290.258 539.117 290.238 539.141 cv
290.215 539.172 290.18 539.195 290.137 539.215 cv
290.086 539.234 290.023 539.246 289.941 539.262 cv
289.855 539.27 289.75 539.277 289.629 539.277 cv
289.496 539.277 289.391 539.27 289.309 539.262 cv
289.223 539.246 289.156 539.234 289.109 539.215 cv
289.059 539.195 289.023 539.172 289.004 539.141 cv
288.98 539.117 288.969 539.082 288.973 539.035 cv
288.973 534.766 li
288.969 534.469 288.941 534.199 288.895 533.953 cv
288.84 533.711 288.758 533.5 288.645 533.324 cv
288.527 533.148 288.383 533.016 288.207 532.918 cv
288.031 532.828 287.824 532.781 287.586 532.777 cv
287.289 532.781 286.988 532.895 286.691 533.121 cv
286.387 533.352 286.059 533.687 285.703 534.125 cv
285.703 539.035 li
285.699 539.082 285.688 539.117 285.672 539.141 cv
285.648 539.172 285.613 539.195 285.566 539.215 cv
285.512 539.234 285.445 539.246 285.367 539.262 cv
285.281 539.27 285.18 539.277 285.055 539.277 cv
284.934 539.277 284.828 539.27 284.746 539.262 cv
284.656 539.246 284.59 539.234 284.543 539.215 cv
284.492 539.195 284.461 539.172 284.445 539.141 cv
284.426 539.117 284.414 539.082 284.418 539.035 cv
284.418 534.766 li
284.414 534.469 284.387 534.199 284.332 533.953 cv
284.273 533.711 284.188 533.5 284.074 533.324 cv
283.957 533.148 283.813 533.016 283.641 532.918 cv
283.465 532.828 283.258 532.781 283.02 532.777 cv
282.719 532.781 282.418 532.895 282.121 533.121 cv
281.816 533.352 281.488 533.687 281.137 534.125 cv
281.137 539.035 li
281.133 539.082 281.125 539.117 281.105 539.141 cv
281.082 539.172 281.047 539.195 281.004 539.215 cv
280.953 539.234 280.887 539.246 280.809 539.262 cv
280.723 539.27 280.617 539.277 280.492 539.277 cv
280.363 539.277 280.262 539.27 280.18 539.262 cv
280.094 539.246 280.027 539.234 279.98 539.215 cv
279.93 539.195 279.895 539.172 279.879 539.141 cv
279.859 539.117 279.852 539.082 279.852 539.035 cv
279.852 532.012 li
279.852 531.973 279.859 531.937 279.875 531.906 cv
279.891 531.879 279.922 531.855 279.969 531.828 cv
280.016 531.809 280.074 531.793 280.148 531.781 cv
280.219 531.777 280.316 531.773 280.438 531.77 cv
280.551 531.773 280.645 531.777 280.719 531.781 cv
280.793 531.793 280.852 531.809 280.895 531.828 cv
280.934 531.855 280.961 531.879 280.984 531.906 cv
281 531.937 281.012 531.973 281.012 532.012 cv
281.012 532.941 li
281.406 532.504 281.789 532.18 282.164 531.969 cv
282.535 531.766 282.91 531.66 283.293 531.66 cv
283.582 531.66 283.844 531.695 284.078 531.762 cv
284.305 531.832 284.508 531.926 284.688 532.047 cv
284.859 532.172 285.012 532.32 285.141 532.484 cv
285.262 532.656 285.367 532.844 285.453 533.051 cv
285.688 532.797 285.91 532.582 286.121 532.402 cv
286.332 532.23 286.535 532.086 286.73 531.973 cv
286.926 531.867 287.113 531.789 287.301 531.734 cv
287.48 531.687 287.668 531.66 287.859 531.66 cv
288.309 531.66 288.688 531.742 288.996 531.898 cv
289.301 532.062 289.551 532.273 289.742 532.535 cv
289.93 532.805 290.063 533.117 290.148 533.469 cv
290.227 533.828 290.27 534.203 290.27 534.594 cv
cp
f
299.035 535.43 mo
299.031 536.043 298.965 536.59 298.836 537.074 cv
298.699 537.559 298.504 537.973 298.25 538.316 cv
297.988 538.66 297.672 538.926 297.301 539.105 cv
296.926 539.289 296.496 539.375 296.016 539.379 cv
295.789 539.375 295.582 539.355 295.395 539.312 cv
295.199 539.266 295.016 539.195 294.836 539.098 cv
294.652 539 294.469 538.875 294.289 538.723 cv
294.105 538.574 293.914 538.391 293.711 538.176 cv
293.711 539.035 li
293.711 539.082 293.699 539.117 293.68 539.145 cv
293.656 539.18 293.621 539.203 293.578 539.219 cv
293.527 539.234 293.469 539.246 293.402 539.262 cv
293.332 539.27 293.246 539.277 293.137 539.277 cv
293.031 539.277 292.941 539.27 292.871 539.262 cv
292.797 539.246 292.738 539.234 292.691 539.219 cv
292.645 539.203 292.613 539.18 292.598 539.145 cv
292.582 539.117 292.574 539.082 292.574 539.035 cv
292.574 528.609 li
292.574 528.57 292.582 528.535 292.602 528.5 cv
292.617 528.473 292.652 528.445 292.703 528.422 cv
292.75 528.402 292.816 528.387 292.902 528.375 cv
292.984 528.367 293.086 528.363 293.215 528.359 cv
293.34 528.363 293.445 528.367 293.531 528.375 cv
293.609 528.387 293.676 528.402 293.727 528.422 cv
293.77 528.445 293.805 528.473 293.828 528.5 cv
293.848 528.535 293.855 528.57 293.859 528.609 cv
293.859 532.816 li
294.063 532.605 294.266 532.426 294.465 532.277 cv
294.656 532.133 294.848 532.016 295.039 531.922 cv
295.223 531.836 295.41 531.77 295.602 531.723 cv
295.785 531.684 295.984 531.66 296.195 531.66 cv
296.703 531.66 297.137 531.762 297.5 531.965 cv
297.859 532.168 298.152 532.441 298.383 532.781 cv
298.605 533.125 298.773 533.523 298.879 533.98 cv
298.98 534.437 299.031 534.922 299.035 535.43 cv
cp
297.699 535.578 mo
297.695 535.223 297.668 534.871 297.617 534.531 cv
297.559 534.195 297.465 533.898 297.332 533.637 cv
297.195 533.379 297.012 533.168 296.789 533.008 cv
296.563 532.852 296.285 532.773 295.949 532.77 cv
295.781 532.773 295.613 532.797 295.453 532.84 cv
295.289 532.891 295.125 532.969 294.957 533.074 cv
294.789 533.187 294.617 533.328 294.438 533.496 cv
294.258 533.668 294.063 533.883 293.859 534.141 cv
293.859 536.945 li
294.211 537.375 294.551 537.703 294.879 537.93 cv
295.199 538.156 295.539 538.27 295.895 538.27 cv
296.219 538.27 296.496 538.191 296.727 538.035 cv
296.957 537.879 297.145 537.676 297.289 537.418 cv
297.43 537.164 297.535 536.875 297.602 536.551 cv
297.664 536.234 297.695 535.91 297.699 535.578 cv
cp
f
306.961 535.219 mo
306.957 535.426 306.906 535.57 306.809 535.652 cv
306.703 535.742 306.586 535.785 306.461 535.781 cv
301.832 535.781 li
301.828 536.176 301.867 536.527 301.949 536.836 cv
302.027 537.148 302.16 537.414 302.344 537.637 cv
302.523 537.863 302.762 538.035 303.055 538.152 cv
303.348 538.273 303.707 538.336 304.133 538.332 cv
304.465 538.336 304.762 538.309 305.023 538.25 cv
305.285 538.199 305.512 538.137 305.703 538.066 cv
305.895 538 306.051 537.937 306.176 537.883 cv
306.297 537.828 306.391 537.801 306.453 537.801 cv
306.488 537.801 306.52 537.812 306.551 537.828 cv
306.578 537.852 306.602 537.879 306.617 537.91 cv
306.633 537.949 306.645 538 306.652 538.062 cv
306.66 538.133 306.664 538.211 306.664 538.301 cv
306.664 538.371 306.66 538.43 306.656 538.477 cv
306.648 538.527 306.641 538.57 306.637 538.609 cv
306.625 538.648 306.613 538.684 306.598 538.715 cv
306.578 538.746 306.555 538.777 306.527 538.805 cv
306.496 538.836 306.41 538.883 306.273 538.945 cv
306.129 539.012 305.949 539.074 305.727 539.137 cv
305.504 539.199 305.246 539.254 304.953 539.305 cv
304.656 539.352 304.34 539.375 304.012 539.379 cv
303.43 539.375 302.926 539.297 302.492 539.137 cv
302.055 538.977 301.688 538.738 301.395 538.418 cv
301.098 538.102 300.875 537.703 300.727 537.227 cv
300.574 536.75 300.5 536.195 300.5 535.555 cv
300.5 534.953 300.578 534.41 300.734 533.93 cv
300.891 533.449 301.113 533.039 301.406 532.703 cv
301.699 532.367 302.055 532.109 302.473 531.93 cv
302.887 531.75 303.352 531.66 303.871 531.66 cv
304.418 531.66 304.887 531.75 305.277 531.926 cv
305.66 532.105 305.98 532.344 306.234 532.641 cv
306.48 532.941 306.664 533.293 306.785 533.695 cv
306.898 534.098 306.957 534.527 306.961 534.984 cv
cp
305.664 534.836 mo
305.676 534.16 305.527 533.633 305.211 533.246 cv
304.895 532.863 304.426 532.668 303.805 532.668 cv
303.484 532.668 303.203 532.73 302.961 532.848 cv
302.719 532.973 302.516 533.129 302.359 533.324 cv
302.195 533.52 302.07 533.75 301.98 534.012 cv
301.891 534.277 301.84 534.551 301.832 534.836 cv
cp
f
313.031 532.473 mo
313.027 532.59 313.023 532.684 313.023 532.762 cv
313.016 532.84 313.008 532.902 312.992 532.945 cv
312.977 532.992 312.957 533.027 312.934 533.047 cv
312.91 533.074 312.875 533.086 312.836 533.082 cv
312.789 533.086 312.738 533.074 312.684 533.047 cv
312.621 533.027 312.555 533.004 312.48 532.977 cv
312.402 532.957 312.316 532.934 312.227 532.91 cv
312.129 532.891 312.027 532.879 311.922 532.879 cv
311.789 532.879 311.664 532.906 311.539 532.957 cv
311.414 533.012 311.281 533.098 311.145 533.215 cv
311.004 533.336 310.859 533.492 310.711 533.687 cv
310.559 533.887 310.391 534.129 310.211 534.414 cv
310.211 539.035 li
310.207 539.082 310.199 539.117 310.18 539.141 cv
310.156 539.172 310.121 539.195 310.078 539.215 cv
310.027 539.234 309.961 539.246 309.883 539.262 cv
309.797 539.27 309.691 539.277 309.566 539.277 cv
309.438 539.277 309.336 539.27 309.254 539.262 cv
309.168 539.246 309.102 539.234 309.055 539.215 cv
309.004 539.195 308.969 539.172 308.953 539.141 cv
308.934 539.117 308.926 539.082 308.926 539.035 cv
308.926 532.012 li
308.926 531.973 308.934 531.937 308.949 531.906 cv
308.965 531.879 308.996 531.855 309.043 531.828 cv
309.09 531.809 309.148 531.793 309.223 531.781 cv
309.293 531.777 309.391 531.773 309.512 531.77 cv
309.625 531.773 309.719 531.777 309.793 531.781 cv
309.867 531.793 309.926 531.809 309.969 531.828 cv
310.008 531.855 310.035 531.879 310.059 531.906 cv
310.074 531.937 310.086 531.973 310.086 532.012 cv
310.086 533.035 li
310.277 532.758 310.457 532.527 310.629 532.348 cv
310.797 532.172 310.957 532.031 311.109 531.93 cv
311.258 531.828 311.406 531.758 311.559 531.719 cv
311.703 531.68 311.855 531.66 312.008 531.66 cv
312.074 531.66 312.148 531.664 312.238 531.672 cv
312.32 531.68 312.41 531.695 312.508 531.715 cv
312.598 531.738 312.684 531.762 312.762 531.785 cv
312.836 531.812 312.891 531.84 312.922 531.863 cv
312.953 531.895 312.973 531.918 312.984 531.937 cv
312.992 531.965 313 531.996 313.012 532.027 cv
313.016 532.066 313.023 532.117 313.027 532.187 cv
313.027 532.258 313.027 532.355 313.031 532.473 cv
cp
f
324.762 535.445 mo
324.758 536.02 324.684 536.547 324.535 537.027 cv
324.383 537.508 324.156 537.922 323.859 538.27 cv
323.559 538.621 323.184 538.895 322.734 539.086 cv
322.285 539.281 321.766 539.375 321.172 539.379 cv
320.594 539.375 320.09 539.293 319.66 539.121 cv
319.23 538.953 318.871 538.703 318.586 538.371 cv
318.301 538.047 318.09 537.648 317.949 537.18 cv
317.809 536.711 317.738 536.18 317.738 535.586 cv
317.738 535.016 317.813 534.492 317.961 534.008 cv
318.109 533.531 318.332 533.113 318.629 532.762 cv
318.926 532.414 319.297 532.145 319.75 531.949 cv
320.195 531.758 320.719 531.66 321.32 531.66 cv
321.895 531.66 322.398 531.746 322.828 531.918 cv
323.254 532.09 323.613 532.34 323.902 532.668 cv
324.188 532.996 324.402 533.395 324.547 533.863 cv
324.688 534.332 324.758 534.859 324.762 535.445 cv
cp
323.426 535.531 mo
323.422 535.156 323.387 534.797 323.32 534.453 cv
323.246 534.117 323.129 533.82 322.969 533.566 cv
322.805 533.312 322.586 533.109 322.309 532.961 cv
322.027 532.812 321.68 532.738 321.27 532.738 cv
320.883 532.738 320.555 532.809 320.281 532.941 cv
320.004 533.082 319.773 533.273 319.598 533.516 cv
319.418 533.766 319.285 534.055 319.199 534.391 cv
319.109 534.73 319.066 535.102 319.07 535.5 cv
319.066 535.887 319.102 536.25 319.176 536.586 cv
319.246 536.93 319.367 537.223 319.531 537.473 cv
319.695 537.723 319.918 537.922 320.199 538.07 cv
320.477 538.219 320.82 538.293 321.238 538.293 cv
321.613 538.293 321.941 538.227 322.223 538.09 cv
322.496 537.957 322.727 537.77 322.906 537.523 cv
323.086 537.281 323.215 536.988 323.301 536.648 cv
323.379 536.312 323.422 535.941 323.426 535.531 cv
cp
f
330.5 529.125 mo
330.496 529.227 330.492 529.305 330.484 529.363 cv
330.473 529.426 330.461 529.477 330.449 529.508 cv
330.434 529.547 330.414 529.57 330.398 529.578 cv
330.375 529.594 330.352 529.598 330.32 529.598 cv
330.281 529.598 330.234 529.586 330.184 529.562 cv
330.125 529.539 330.059 529.516 329.984 529.488 cv
329.902 529.461 329.809 529.434 329.707 529.41 cv
329.598 529.387 329.477 529.375 329.336 529.375 cv
329.141 529.375 328.977 529.406 328.844 529.469 cv
328.707 529.531 328.598 529.629 328.516 529.758 cv
328.43 529.895 328.367 530.066 328.336 530.273 cv
328.297 530.488 328.281 530.746 328.281 531.043 cv
328.281 531.809 li
329.852 531.809 li
329.891 531.812 329.926 531.82 329.957 531.836 cv
329.984 531.855 330.008 531.887 330.035 531.93 cv
330.055 531.977 330.074 532.035 330.09 532.098 cv
330.102 532.168 330.109 532.25 330.109 532.348 cv
330.109 532.539 330.086 532.676 330.039 532.754 cv
329.992 532.84 329.93 532.879 329.852 532.879 cv
328.281 532.879 li
328.281 539.035 li
328.281 539.082 328.27 539.117 328.25 539.141 cv
328.227 539.172 328.191 539.195 328.145 539.215 cv
328.094 539.234 328.027 539.246 327.945 539.262 cv
327.859 539.27 327.754 539.277 327.633 539.277 cv
327.504 539.277 327.402 539.27 327.32 539.262 cv
327.238 539.246 327.172 539.234 327.125 539.215 cv
327.074 539.195 327.039 539.172 327.02 539.141 cv
326.996 539.117 326.984 539.082 326.988 539.035 cv
326.988 532.879 li
325.996 532.879 li
325.91 532.879 325.848 532.84 325.809 532.754 cv
325.766 532.676 325.742 532.539 325.746 532.348 cv
325.742 532.25 325.75 532.168 325.762 532.098 cv
325.77 532.035 325.785 531.977 325.809 531.93 cv
325.828 531.887 325.852 531.855 325.887 531.836 cv
325.914 531.82 325.953 531.812 325.996 531.809 cv
326.988 531.809 li
326.988 531.082 li
326.984 530.594 327.031 530.176 327.125 529.824 cv
327.215 529.477 327.352 529.187 327.539 528.961 cv
327.723 528.738 327.961 528.574 328.246 528.465 cv
328.527 528.363 328.859 528.309 329.25 528.305 cv
329.43 528.309 329.609 528.324 329.781 528.355 cv
329.953 528.391 330.086 528.43 330.18 528.465 cv
330.273 528.508 330.336 528.543 330.367 528.57 cv
330.398 528.605 330.422 528.645 330.445 528.691 cv
330.461 528.742 330.477 528.801 330.488 528.871 cv
330.492 528.941 330.496 529.027 330.5 529.125 cv
cp
f
340.711 536.398 mo
340.707 536.875 340.621 537.297 340.449 537.664 cv
340.273 538.035 340.031 538.348 339.723 538.602 cv
339.414 538.863 339.051 539.055 338.633 539.184 cv
338.211 539.312 337.758 539.375 337.277 539.379 cv
336.938 539.375 336.625 539.348 336.336 539.293 cv
336.047 539.234 335.789 539.168 335.563 539.082 cv
335.336 539.004 335.145 538.918 334.996 538.824 cv
334.84 538.738 334.734 538.66 334.676 538.598 cv
334.613 538.535 334.57 538.457 334.543 538.359 cv
334.512 538.266 334.496 538.137 334.5 537.973 cv
334.496 537.859 334.5 537.766 334.516 537.687 cv
334.523 537.617 334.539 537.555 334.563 537.504 cv
334.578 537.461 334.605 537.43 334.641 537.406 cv
334.668 537.391 334.703 537.379 334.75 537.379 cv
334.82 537.379 334.926 537.426 335.059 537.512 cv
335.191 537.605 335.359 537.699 335.57 537.801 cv
335.773 537.906 336.023 538.004 336.32 538.094 cv
336.609 538.187 336.949 538.234 337.34 538.23 cv
337.629 538.234 337.898 538.195 338.141 538.113 cv
338.383 538.039 338.59 537.93 338.766 537.781 cv
338.938 537.641 339.07 537.465 339.168 537.258 cv
339.258 537.051 339.305 536.812 339.309 536.547 cv
339.305 536.262 339.242 536.02 339.113 535.812 cv
338.98 535.613 338.809 535.434 338.598 535.277 cv
338.383 535.125 338.137 534.984 337.867 534.855 cv
337.59 534.73 337.313 534.602 337.027 534.465 cv
336.738 534.336 336.457 534.187 336.191 534.023 cv
335.918 533.863 335.68 533.676 335.469 533.457 cv
335.254 533.242 335.078 532.984 334.949 532.687 cv
334.813 532.395 334.746 532.043 334.75 531.629 cv
334.746 531.211 334.824 530.832 334.98 530.5 cv
335.133 530.172 335.344 529.898 335.617 529.672 cv
335.887 529.453 336.215 529.281 336.594 529.16 cv
336.969 529.047 337.375 528.988 337.816 528.984 cv
338.039 528.988 338.266 529.008 338.492 529.043 cv
338.719 529.086 338.93 529.137 339.133 529.199 cv
339.328 529.266 339.508 529.34 339.664 529.418 cv
339.82 529.5 339.922 529.562 339.973 529.609 cv
340.02 529.66 340.051 529.699 340.07 529.727 cv
340.082 529.758 340.098 529.797 340.109 529.836 cv
340.117 529.883 340.125 529.934 340.133 529.996 cv
340.137 530.059 340.137 530.141 340.141 530.238 cv
340.137 530.336 340.133 530.418 340.129 530.488 cv
340.117 530.562 340.105 530.625 340.094 530.672 cv
340.074 530.723 340.055 530.758 340.027 530.781 cv
339.996 530.805 339.961 530.816 339.93 530.816 cv
339.867 530.816 339.777 530.781 339.66 530.707 cv
339.535 530.637 339.387 530.555 339.215 530.461 cv
339.035 530.371 338.828 530.289 338.586 530.211 cv
338.344 530.141 338.07 530.102 337.77 530.098 cv
337.484 530.102 337.238 530.141 337.035 530.211 cv
336.824 530.289 336.652 530.387 336.52 530.512 cv
336.379 530.637 336.277 530.785 336.215 530.957 cv
336.145 531.129 336.113 531.312 336.113 531.504 cv
336.113 531.789 336.176 532.031 336.309 532.23 cv
336.434 532.437 336.609 532.617 336.828 532.77 cv
337.043 532.93 337.289 533.074 337.566 533.199 cv
337.84 533.332 338.121 533.461 338.41 533.59 cv
338.695 533.727 338.977 533.871 339.254 534.027 cv
339.527 534.187 339.77 534.375 339.988 534.59 cv
340.199 534.809 340.375 535.066 340.512 535.355 cv
340.641 535.652 340.707 536 340.711 536.398 cv
cp
f
348.492 539.035 mo
348.488 539.082 348.48 539.117 348.465 539.141 cv
348.445 539.172 348.41 539.195 348.367 539.215 cv
348.316 539.234 348.258 539.246 348.184 539.262 cv
348.105 539.27 348.012 539.277 347.906 539.277 cv
347.785 539.277 347.688 539.27 347.613 539.262 cv
347.535 539.246 347.477 539.234 347.434 539.215 cv
347.387 539.195 347.355 539.172 347.344 539.141 cv
347.324 539.117 347.316 539.082 347.32 539.035 cv
347.32 538.105 li
346.918 538.551 346.523 538.875 346.137 539.074 cv
345.742 539.277 345.348 539.375 344.949 539.379 cv
344.48 539.375 344.086 539.301 343.766 539.145 cv
343.445 538.992 343.184 538.781 342.988 538.508 cv
342.789 538.242 342.648 537.93 342.566 537.574 cv
342.477 537.219 342.434 536.785 342.438 536.273 cv
342.438 532.012 li
342.434 531.973 342.445 531.937 342.465 531.906 cv
342.48 531.879 342.516 531.855 342.57 531.828 cv
342.621 531.809 342.688 531.793 342.773 531.781 cv
342.855 531.777 342.961 531.773 343.086 531.77 cv
343.207 531.773 343.309 531.777 343.395 531.781 cv
343.477 531.793 343.543 531.809 343.594 531.828 cv
343.641 531.855 343.676 531.879 343.699 531.906 cv
343.719 531.937 343.73 531.973 343.73 532.012 cv
343.73 536.102 li
343.73 536.516 343.758 536.848 343.82 537.09 cv
343.875 537.34 343.969 537.547 344.094 537.719 cv
344.215 537.895 344.367 538.031 344.559 538.125 cv
344.742 538.223 344.961 538.27 345.215 538.27 cv
345.535 538.27 345.859 538.156 346.18 537.926 cv
346.5 537.699 346.836 537.363 347.195 536.922 cv
347.195 532.012 li
347.191 531.973 347.203 531.937 347.223 531.906 cv
347.238 531.879 347.273 531.855 347.328 531.828 cv
347.379 531.809 347.445 531.793 347.527 531.781 cv
347.605 531.777 347.711 531.773 347.844 531.77 cv
347.969 531.773 348.07 531.777 348.156 531.781 cv
348.234 531.793 348.301 531.809 348.352 531.828 cv
348.395 531.855 348.43 531.879 348.457 531.906 cv
348.477 531.937 348.488 531.973 348.492 532.012 cv
cp
f
357.332 535.43 mo
357.328 536.043 357.262 536.59 357.133 537.074 cv
356.996 537.559 356.801 537.973 356.547 538.316 cv
356.285 538.66 355.969 538.926 355.598 539.105 cv
355.223 539.289 354.793 539.375 354.313 539.379 cv
354.086 539.375 353.879 539.355 353.691 539.312 cv
353.496 539.266 353.313 539.195 353.133 539.098 cv
352.949 539 352.766 538.875 352.586 538.723 cv
352.402 538.574 352.211 538.391 352.008 538.176 cv
352.008 539.035 li
352.008 539.082 351.996 539.117 351.977 539.145 cv
351.953 539.18 351.918 539.203 351.875 539.219 cv
351.824 539.234 351.766 539.246 351.699 539.262 cv
351.629 539.27 351.543 539.277 351.434 539.277 cv
351.328 539.277 351.238 539.27 351.168 539.262 cv
351.094 539.246 351.035 539.234 350.988 539.219 cv
350.941 539.203 350.91 539.18 350.895 539.145 cv
350.879 539.117 350.871 539.082 350.871 539.035 cv
350.871 528.609 li
350.871 528.57 350.879 528.535 350.898 528.5 cv
350.914 528.473 350.949 528.445 351 528.422 cv
351.047 528.402 351.113 528.387 351.199 528.375 cv
351.281 528.367 351.383 528.363 351.512 528.359 cv
351.637 528.363 351.742 528.367 351.828 528.375 cv
351.906 528.387 351.973 528.402 352.023 528.422 cv
352.066 528.445 352.102 528.473 352.125 528.5 cv
352.145 528.535 352.152 528.57 352.156 528.609 cv
352.156 532.816 li
352.359 532.605 352.563 532.426 352.762 532.277 cv
352.953 532.133 353.145 532.016 353.336 531.922 cv
353.52 531.836 353.707 531.77 353.898 531.723 cv
354.082 531.684 354.281 531.66 354.492 531.66 cv
355 531.66 355.434 531.762 355.797 531.965 cv
356.156 532.168 356.449 532.441 356.68 532.781 cv
356.902 533.125 357.07 533.523 357.176 533.98 cv
357.277 534.437 357.328 534.922 357.332 535.43 cv
cp
355.996 535.578 mo
355.992 535.223 355.965 534.871 355.914 534.531 cv
355.855 534.195 355.762 533.898 355.629 533.637 cv
355.492 533.379 355.309 533.168 355.086 533.008 cv
354.859 532.852 354.582 532.773 354.246 532.77 cv
354.078 532.773 353.91 532.797 353.75 532.84 cv
353.586 532.891 353.422 532.969 353.254 533.074 cv
353.086 533.187 352.914 533.328 352.734 533.496 cv
352.555 533.668 352.359 533.883 352.156 534.141 cv
352.156 536.945 li
352.508 537.375 352.848 537.703 353.176 537.93 cv
353.496 538.156 353.836 538.27 354.191 538.27 cv
354.516 538.27 354.793 538.191 355.023 538.035 cv
355.254 537.879 355.441 537.676 355.586 537.418 cv
355.727 537.164 355.832 536.875 355.898 536.551 cv
355.961 536.234 355.992 535.91 355.996 535.578 cv
cp
f
362.484 535.289 mo
362.48 535.496 362.457 535.637 362.414 535.711 cv
362.363 535.793 362.297 535.832 362.211 535.828 cv
358.949 535.828 li
358.855 535.832 358.785 535.793 358.738 535.707 cv
358.691 535.629 358.668 535.488 358.668 535.289 cv
358.668 535.094 358.691 534.957 358.738 534.875 cv
358.785 534.801 358.855 534.762 358.949 534.758 cv
362.211 534.758 li
362.25 534.762 362.289 534.77 362.324 534.781 cv
362.355 534.801 362.383 534.828 362.41 534.871 cv
362.43 534.918 362.449 534.977 362.465 535.039 cv
362.477 535.109 362.48 535.191 362.484 535.289 cv
cp
f
365.734 539.027 mo
365.734 539.07 365.723 539.105 365.703 539.137 cv
365.68 539.168 365.645 539.195 365.594 539.211 cv
365.539 539.23 365.469 539.242 365.387 539.258 cv
365.297 539.27 365.188 539.277 365.063 539.277 cv
364.938 539.277 364.832 539.27 364.746 539.258 cv
364.652 539.242 364.582 539.23 364.535 539.211 cv
364.48 539.195 364.445 539.168 364.426 539.137 cv
364.402 539.105 364.391 539.07 364.395 539.027 cv
364.395 529.336 li
364.391 529.297 364.402 529.262 364.43 529.227 cv
364.449 529.199 364.488 529.172 364.547 529.152 cv
364.598 529.137 364.668 529.121 364.758 529.105 cv
364.84 529.094 364.941 529.09 365.063 529.086 cv
365.188 529.09 365.297 529.094 365.387 529.105 cv
365.469 529.121 365.539 529.137 365.594 529.152 cv
365.645 529.172 365.68 529.199 365.703 529.227 cv
365.723 529.262 365.734 529.297 365.734 529.336 cv
cp
f
378.723 539.035 mo
378.723 539.082 378.711 539.117 378.691 539.141 cv
378.668 539.172 378.633 539.195 378.59 539.215 cv
378.539 539.234 378.477 539.246 378.395 539.262 cv
378.309 539.27 378.203 539.277 378.082 539.277 cv
377.949 539.277 377.844 539.27 377.762 539.262 cv
377.676 539.246 377.609 539.234 377.563 539.215 cv
377.512 539.195 377.477 539.172 377.457 539.141 cv
377.434 539.117 377.422 539.082 377.426 539.035 cv
377.426 534.766 li
377.422 534.469 377.395 534.199 377.348 533.953 cv
377.293 533.711 377.211 533.5 377.098 533.324 cv
376.98 533.148 376.836 533.016 376.66 532.918 cv
376.484 532.828 376.277 532.781 376.039 532.777 cv
375.742 532.781 375.441 532.895 375.145 533.121 cv
374.84 533.352 374.512 533.687 374.156 534.125 cv
374.156 539.035 li
374.152 539.082 374.141 539.117 374.125 539.141 cv
374.102 539.172 374.066 539.195 374.02 539.215 cv
373.965 539.234 373.898 539.246 373.82 539.262 cv
373.734 539.27 373.633 539.277 373.508 539.277 cv
373.387 539.277 373.281 539.27 373.199 539.262 cv
373.109 539.246 373.043 539.234 372.996 539.215 cv
372.945 539.195 372.914 539.172 372.898 539.141 cv
372.879 539.117 372.867 539.082 372.871 539.035 cv
372.871 534.766 li
372.867 534.469 372.84 534.199 372.785 533.953 cv
372.727 533.711 372.641 533.5 372.527 533.324 cv
372.41 533.148 372.266 533.016 372.094 532.918 cv
371.918 532.828 371.711 532.781 371.473 532.777 cv
371.172 532.781 370.871 532.895 370.574 533.121 cv
370.27 533.352 369.941 533.687 369.59 534.125 cv
369.59 539.035 li
369.586 539.082 369.578 539.117 369.559 539.141 cv
369.535 539.172 369.5 539.195 369.457 539.215 cv
369.406 539.234 369.34 539.246 369.262 539.262 cv
369.176 539.27 369.07 539.277 368.945 539.277 cv
368.816 539.277 368.715 539.27 368.633 539.262 cv
368.547 539.246 368.48 539.234 368.434 539.215 cv
368.383 539.195 368.348 539.172 368.332 539.141 cv
368.313 539.117 368.305 539.082 368.305 539.035 cv
368.305 532.012 li
368.305 531.973 368.313 531.937 368.328 531.906 cv
368.344 531.879 368.375 531.855 368.422 531.828 cv
368.469 531.809 368.527 531.793 368.602 531.781 cv
368.672 531.777 368.77 531.773 368.891 531.77 cv
369.004 531.773 369.098 531.777 369.172 531.781 cv
369.246 531.793 369.305 531.809 369.348 531.828 cv
369.387 531.855 369.414 531.879 369.438 531.906 cv
369.453 531.937 369.465 531.973 369.465 532.012 cv
369.465 532.941 li
369.859 532.504 370.242 532.18 370.617 531.969 cv
370.988 531.766 371.363 531.66 371.746 531.66 cv
372.035 531.66 372.297 531.695 372.531 531.762 cv
372.758 531.832 372.961 531.926 373.141 532.047 cv
373.313 532.172 373.465 532.32 373.594 532.484 cv
373.715 532.656 373.82 532.844 373.906 533.051 cv
374.141 532.797 374.363 532.582 374.574 532.402 cv
374.785 532.23 374.988 532.086 375.184 531.973 cv
375.379 531.867 375.566 531.789 375.754 531.734 cv
375.934 531.687 376.121 531.66 376.313 531.66 cv
376.762 531.66 377.141 531.742 377.449 531.898 cv
377.754 532.062 378.004 532.273 378.195 532.535 cv
378.383 532.805 378.516 533.117 378.602 533.469 cv
378.68 533.828 378.723 534.203 378.723 534.594 cv
cp
f
386.316 539.043 mo
386.313 539.105 386.293 539.152 386.254 539.184 cv
386.211 539.215 386.152 539.238 386.082 539.254 cv
386.008 539.27 385.902 539.277 385.762 539.277 cv
385.629 539.277 385.52 539.27 385.441 539.254 cv
385.355 539.238 385.297 539.215 385.266 539.184 cv
385.227 539.152 385.211 539.105 385.211 539.043 cv
385.211 538.34 li
384.902 538.668 384.559 538.926 384.184 539.105 cv
383.805 539.289 383.406 539.375 382.984 539.379 cv
382.613 539.375 382.277 539.328 381.98 539.234 cv
381.68 539.137 381.426 539 381.219 538.816 cv
381.004 538.637 380.84 538.414 380.727 538.145 cv
380.605 537.883 380.547 537.582 380.551 537.242 cv
380.547 536.852 380.629 536.508 380.793 536.211 cv
380.953 535.922 381.184 535.68 381.484 535.484 cv
381.785 535.297 382.152 535.152 382.594 535.051 cv
383.027 534.957 383.52 534.906 384.07 534.906 cv
385.039 534.906 li
385.039 534.359 li
385.035 534.094 385.008 533.855 384.953 533.645 cv
384.895 533.441 384.801 533.266 384.676 533.125 cv
384.547 532.988 384.383 532.887 384.18 532.812 cv
383.977 532.746 383.727 532.711 383.43 532.707 cv
383.109 532.711 382.824 532.746 382.574 532.82 cv
382.32 532.898 382.098 532.984 381.91 533.07 cv
381.719 533.164 381.563 533.246 381.438 533.32 cv
381.309 533.395 381.211 533.43 381.152 533.43 cv
381.105 533.43 381.07 533.422 381.043 533.402 cv
381.008 533.383 380.98 533.352 380.961 533.309 cv
380.934 533.27 380.918 533.215 380.91 533.148 cv
380.898 533.086 380.891 533.016 380.895 532.934 cv
380.891 532.805 380.902 532.703 380.922 532.625 cv
380.938 532.555 380.98 532.48 381.055 532.41 cv
381.121 532.344 381.242 532.266 381.418 532.172 cv
381.586 532.082 381.781 532 382.008 531.922 cv
382.227 531.852 382.473 531.789 382.742 531.734 cv
383.004 531.687 383.273 531.66 383.547 531.66 cv
384.051 531.66 384.48 531.719 384.836 531.832 cv
385.188 531.949 385.473 532.117 385.691 532.336 cv
385.91 532.559 386.066 532.832 386.168 533.16 cv
386.262 533.488 386.313 533.871 386.316 534.305 cv
cp
385.039 535.836 mo
383.938 535.836 li
383.582 535.84 383.273 535.867 383.016 535.926 cv
382.75 535.988 382.535 536.078 382.367 536.191 cv
382.191 536.312 382.066 536.453 381.988 536.613 cv
381.906 536.781 381.863 536.969 381.867 537.18 cv
381.863 537.543 381.98 537.832 382.215 538.047 cv
382.445 538.266 382.77 538.375 383.188 538.371 cv
383.523 538.375 383.836 538.289 384.129 538.113 cv
384.414 537.945 384.719 537.684 385.039 537.324 cv
cp
f
394.551 532.332 mo
394.547 532.52 394.523 532.648 394.477 532.727 cv
394.426 532.809 394.363 532.852 394.285 532.848 cv
393.281 532.848 li
393.457 533.039 393.582 533.246 393.66 533.469 cv
393.73 533.695 393.77 533.93 393.77 534.172 cv
393.77 534.582 393.703 534.941 393.574 535.25 cv
393.441 535.566 393.254 535.828 393.016 536.043 cv
392.773 536.262 392.488 536.43 392.156 536.539 cv
391.82 536.656 391.449 536.711 391.047 536.711 cv
390.758 536.711 390.488 536.676 390.23 536.598 cv
389.973 536.527 389.773 536.43 389.633 536.312 cv
389.539 536.406 389.461 536.516 389.402 536.633 cv
389.344 536.758 389.316 536.895 389.316 537.047 cv
389.316 537.23 389.398 537.379 389.566 537.496 cv
389.734 537.617 389.961 537.684 390.242 537.691 cv
392.078 537.77 li
392.422 537.785 392.742 537.832 393.035 537.914 cv
393.324 538.004 393.578 538.125 393.793 538.281 cv
394.004 538.441 394.168 538.637 394.293 538.867 cv
394.41 539.102 394.473 539.371 394.473 539.676 cv
394.473 539.996 394.402 540.301 394.27 540.598 cv
394.129 540.887 393.922 541.145 393.648 541.363 cv
393.367 541.582 393.016 541.754 392.586 541.887 cv
392.152 542.012 391.641 542.078 391.055 542.078 cv
390.484 542.078 390 542.027 389.605 541.934 cv
389.207 541.832 388.883 541.703 388.629 541.539 cv
388.371 541.371 388.188 541.172 388.074 540.941 cv
387.957 540.711 387.898 540.461 387.902 540.191 cv
387.898 540.02 387.918 539.852 387.965 539.691 cv
388.004 539.527 388.07 539.375 388.156 539.23 cv
388.242 539.086 388.348 538.949 388.477 538.812 cv
388.602 538.684 388.75 538.551 388.918 538.418 cv
388.66 538.289 388.469 538.125 388.352 537.926 cv
388.227 537.73 388.168 537.516 388.168 537.285 cv
388.168 536.973 388.23 536.691 388.363 536.437 cv
388.488 536.191 388.652 535.969 388.848 535.766 cv
388.684 535.578 388.555 535.359 388.465 535.113 cv
388.367 534.875 388.32 534.582 388.324 534.234 cv
388.32 533.836 388.387 533.477 388.527 533.16 cv
388.66 532.844 388.848 532.578 389.086 532.355 cv
389.324 532.141 389.613 531.973 389.949 531.852 cv
390.285 531.738 390.648 531.68 391.047 531.676 cv
391.258 531.68 391.457 531.691 391.645 531.711 cv
391.824 531.738 392 531.77 392.164 531.809 cv
394.285 531.809 li
394.371 531.812 394.438 531.855 394.484 531.937 cv
394.527 532.027 394.547 532.16 394.551 532.332 cv
cp
392.539 534.18 mo
392.539 533.703 392.406 533.332 392.145 533.062 cv
391.879 532.797 391.504 532.664 391.023 532.66 cv
390.77 532.664 390.555 532.703 390.371 532.785 cv
390.184 532.871 390.027 532.988 389.91 533.129 cv
389.785 533.277 389.695 533.445 389.637 533.633 cv
389.574 533.824 389.543 534.02 389.547 534.227 cv
389.543 534.691 389.676 535.059 389.941 535.32 cv
390.203 535.59 390.57 535.723 391.047 535.719 cv
391.297 535.723 391.52 535.68 391.711 535.598 cv
391.895 535.52 392.051 535.41 392.176 535.262 cv
392.297 535.121 392.387 534.953 392.449 534.766 cv
392.508 534.578 392.539 534.383 392.539 534.18 cv
cp
393.188 539.746 mo
393.184 539.441 393.059 539.211 392.816 539.047 cv
392.566 538.887 392.234 538.797 391.813 538.785 cv
389.992 538.723 li
389.82 538.855 389.684 538.98 389.582 539.094 cv
389.473 539.211 389.391 539.32 389.332 539.43 cv
389.266 539.535 389.223 539.641 389.203 539.746 cv
389.176 539.848 389.164 539.953 389.168 540.066 cv
389.164 540.402 389.336 540.66 389.68 540.836 cv
390.023 541.008 390.5 541.094 391.117 541.098 cv
391.504 541.094 391.832 541.055 392.098 540.984 cv
392.359 540.906 392.57 540.809 392.734 540.684 cv
392.891 540.559 393.008 540.414 393.082 540.254 cv
393.148 540.09 393.184 539.922 393.188 539.746 cv
cp
f
402.141 535.219 mo
402.137 535.426 402.086 535.57 401.988 535.652 cv
401.883 535.742 401.766 535.785 401.641 535.781 cv
397.012 535.781 li
397.008 536.176 397.047 536.527 397.129 536.836 cv
397.207 537.148 397.34 537.414 397.523 537.637 cv
397.703 537.863 397.941 538.035 398.234 538.152 cv
398.527 538.273 398.887 538.336 399.313 538.332 cv
399.645 538.336 399.941 538.309 400.203 538.25 cv
400.465 538.199 400.691 538.137 400.883 538.066 cv
401.074 538 401.23 537.937 401.355 537.883 cv
401.477 537.828 401.57 537.801 401.633 537.801 cv
401.668 537.801 401.699 537.812 401.73 537.828 cv
401.758 537.852 401.781 537.879 401.797 537.91 cv
401.813 537.949 401.824 538 401.832 538.062 cv
401.84 538.133 401.844 538.211 401.844 538.301 cv
401.844 538.371 401.84 538.43 401.836 538.477 cv
401.828 538.527 401.82 538.57 401.816 538.609 cv
401.805 538.648 401.793 538.684 401.777 538.715 cv
401.758 538.746 401.734 538.777 401.707 538.805 cv
401.676 538.836 401.59 538.883 401.453 538.945 cv
401.309 539.012 401.129 539.074 400.906 539.137 cv
400.684 539.199 400.426 539.254 400.133 539.305 cv
399.836 539.352 399.52 539.375 399.191 539.379 cv
398.609 539.375 398.105 539.297 397.672 539.137 cv
397.234 538.977 396.867 538.738 396.574 538.418 cv
396.277 538.102 396.055 537.703 395.906 537.227 cv
395.754 536.75 395.68 536.195 395.68 535.555 cv
395.68 534.953 395.758 534.41 395.914 533.93 cv
396.07 533.449 396.293 533.039 396.586 532.703 cv
396.879 532.367 397.234 532.109 397.652 531.93 cv
398.066 531.75 398.531 531.66 399.051 531.66 cv
399.598 531.66 400.066 531.75 400.457 531.926 cv
400.84 532.105 401.16 532.344 401.414 532.641 cv
401.66 532.941 401.844 533.293 401.965 533.695 cv
402.078 534.098 402.137 534.527 402.141 534.984 cv
cp
400.844 534.836 mo
400.855 534.16 400.707 533.633 400.391 533.246 cv
400.074 532.863 399.605 532.668 398.984 532.668 cv
398.664 532.668 398.383 532.73 398.141 532.848 cv
397.898 532.973 397.695 533.129 397.539 533.324 cv
397.375 533.52 397.25 533.75 397.16 534.012 cv
397.07 534.277 397.02 534.551 397.012 534.836 cv
cp
f
408.52 537.125 mo
408.516 537.484 408.449 537.801 408.32 538.082 cv
408.184 538.363 407.996 538.602 407.754 538.793 cv
407.508 538.988 407.215 539.133 406.879 539.23 cv
406.539 539.328 406.168 539.375 405.762 539.379 cv
405.512 539.375 405.273 539.355 405.047 539.32 cv
404.82 539.277 404.617 539.23 404.441 539.172 cv
404.258 539.113 404.105 539.051 403.984 538.984 cv
403.855 538.922 403.766 538.863 403.711 538.809 cv
403.652 538.758 403.609 538.687 403.586 538.59 cv
403.559 538.5 403.547 538.371 403.547 538.207 cv
403.547 538.109 403.551 538.027 403.563 537.957 cv
403.57 537.895 403.582 537.84 403.602 537.793 cv
403.613 537.754 403.637 537.723 403.668 537.703 cv
403.695 537.687 403.727 537.68 403.766 537.676 cv
403.82 537.68 403.906 537.715 404.02 537.781 cv
404.129 537.855 404.266 537.93 404.434 538.012 cv
404.594 538.098 404.789 538.176 405.012 538.242 cv
405.234 538.316 405.492 538.352 405.785 538.348 cv
406.004 538.352 406.199 538.328 406.379 538.277 cv
406.551 538.234 406.707 538.164 406.84 538.07 cv
406.969 537.98 407.066 537.867 407.141 537.723 cv
407.207 537.586 407.242 537.418 407.246 537.227 cv
407.242 537.031 407.191 536.867 407.094 536.727 cv
406.988 536.594 406.855 536.473 406.691 536.367 cv
406.523 536.266 406.336 536.172 406.129 536.09 cv
405.918 536.012 405.703 535.93 405.484 535.836 cv
405.262 535.75 405.047 535.648 404.836 535.535 cv
404.625 535.426 404.438 535.289 404.273 535.125 cv
404.105 534.965 403.969 534.773 403.871 534.547 cv
403.766 534.328 403.715 534.059 403.719 533.742 cv
403.715 533.473 403.77 533.211 403.879 532.953 cv
403.984 532.703 404.145 532.48 404.359 532.289 cv
404.57 532.102 404.836 531.949 405.156 531.832 cv
405.473 531.719 405.848 531.66 406.277 531.66 cv
406.465 531.66 406.652 531.676 406.84 531.707 cv
407.027 531.738 407.195 531.777 407.348 531.824 cv
407.496 531.871 407.625 531.922 407.734 531.977 cv
407.84 532.031 407.922 532.082 407.977 532.121 cv
408.031 532.168 408.066 532.203 408.086 532.23 cv
408.102 532.266 408.113 532.301 408.125 532.336 cv
408.129 532.379 408.137 532.426 408.148 532.48 cv
408.152 532.539 408.156 532.609 408.16 532.691 cv
408.156 532.781 408.152 532.859 408.148 532.922 cv
408.137 532.988 408.125 533.043 408.109 533.082 cv
408.09 533.129 408.066 533.156 408.043 533.172 cv
408.012 533.191 407.984 533.203 407.957 533.199 cv
407.906 533.203 407.84 533.172 407.754 533.113 cv
407.664 533.059 407.547 533 407.41 532.93 cv
407.266 532.867 407.102 532.805 406.914 532.746 cv
406.723 532.691 406.504 532.664 406.262 532.66 cv
406.039 532.664 405.848 532.687 405.684 532.734 cv
405.516 532.785 405.379 532.855 405.273 532.945 cv
405.164 533.039 405.082 533.148 405.031 533.27 cv
404.973 533.395 404.945 533.527 404.949 533.672 cv
404.945 533.879 405 534.051 405.105 534.184 cv
405.207 534.324 405.34 534.445 405.512 534.547 cv
405.676 534.656 405.867 534.75 406.082 534.828 cv
406.293 534.914 406.512 535 406.734 535.086 cv
406.953 535.18 407.172 535.277 407.391 535.383 cv
407.605 535.496 407.797 535.629 407.965 535.781 cv
408.129 535.941 408.262 536.129 408.367 536.344 cv
408.465 536.566 408.516 536.828 408.52 537.125 cv
cp
f
154.668 12.238 mo
154.664 13.078 154.563 13.828 154.355 14.484 cv
154.148 15.148 153.84 15.707 153.43 16.164 cv
153.02 16.625 152.512 16.977 151.906 17.215 cv
151.301 17.457 150.602 17.574 149.809 17.578 cv
149.02 17.574 148.332 17.473 147.75 17.27 cv
147.164 17.066 146.676 16.754 146.289 16.332 cv
145.898 15.91 145.609 15.375 145.414 14.727 cv
145.219 14.078 145.121 13.309 145.125 12.418 cv
145.121 11.605 145.223 10.875 145.434 10.219 cv
145.637 9.57001 145.945 9.01599 146.359 8.55499 cv
146.766 8.10199 147.273 7.75 147.883 7.50403 cv
148.484 7.26202 149.188 7.14099 149.992 7.13702 cv
150.754 7.14099 151.43 7.242 152.016 7.44098 cv
152.598 7.64502 153.086 7.953 153.48 8.375 cv
153.871 8.797 154.168 9.328 154.367 9.96899 cv
154.566 10.609 154.664 11.367 154.668 12.238 cv
cp
152.52 12.348 mo
152.516 11.82 152.473 11.34 152.395 10.906 cv
152.309 10.473 152.168 10.102 151.969 9.789 cv
151.766 9.47998 151.5 9.242 151.168 9.07397 cv
150.836 8.90601 150.422 8.82001 149.926 8.82001 cv
149.418 8.82001 148.996 8.91803 148.66 9.10498 cv
148.324 9.297 148.051 9.547 147.844 9.86298 cv
147.633 10.184 147.484 10.555 147.402 10.977 cv
147.313 11.398 147.27 11.848 147.273 12.316 cv
147.27 12.871 147.313 13.367 147.398 13.805 cv
147.48 14.246 147.621 14.621 147.82 14.93 cv
148.016 15.242 148.281 15.477 148.613 15.641 cv
148.945 15.805 149.363 15.887 149.871 15.887 cv
150.371 15.887 150.789 15.793 151.129 15.605 cv
151.465 15.418 151.738 15.164 151.949 14.844 cv
152.152 14.523 152.301 14.148 152.391 13.719 cv
152.473 13.289 152.516 12.832 152.52 12.348 cv
cp
f
162.668 10.176 mo
162.664 10.203 162.664 10.234 162.664 10.27 cv
162.66 10.309 162.656 10.348 162.648 10.391 cv
162.641 10.434 162.629 10.484 162.617 10.539 cv
162.602 10.598 162.586 10.664 162.566 10.734 cv
160.48 17.023 li
160.453 17.113 160.418 17.187 160.375 17.238 cv
160.328 17.297 160.254 17.34 160.156 17.367 cv
160.051 17.398 159.914 17.414 159.742 17.43 cv
159.566 17.437 159.34 17.445 159.063 17.445 cv
158.785 17.445 158.559 17.437 158.387 17.426 cv
158.211 17.41 158.074 17.391 157.977 17.359 cv
157.875 17.332 157.805 17.289 157.762 17.23 cv
157.715 17.18 157.68 17.109 157.656 17.023 cv
155.57 10.734 li
155.539 10.633 155.512 10.539 155.496 10.457 cv
155.473 10.375 155.465 10.316 155.465 10.277 cv
155.461 10.246 155.457 10.211 155.461 10.176 cv
155.457 10.125 155.473 10.078 155.504 10.039 cv
155.531 10 155.582 9.96899 155.656 9.94098 cv
155.727 9.91803 155.824 9.89801 155.953 9.88702 cv
156.078 9.87903 156.238 9.875 156.434 9.87097 cv
156.645 9.875 156.816 9.883 156.949 9.89099 cv
157.074 9.90601 157.18 9.922 157.258 9.94501 cv
157.332 9.96899 157.383 10.004 157.418 10.047 cv
157.445 10.094 157.473 10.148 157.496 10.207 cv
159.078 15.309 li
159.125 15.504 li
159.172 15.309 li
160.73 10.207 li
160.742 10.148 160.766 10.094 160.801 10.047 cv
160.832 10.004 160.887 9.96899 160.961 9.94501 cv
161.031 9.922 161.129 9.90601 161.254 9.89099 cv
161.375 9.883 161.535 9.875 161.734 9.87097 cv
161.926 9.875 162.082 9.87903 162.203 9.88702 cv
162.324 9.89801 162.418 9.91803 162.488 9.94098 cv
162.555 9.96899 162.602 10 162.629 10.039 cv
162.652 10.078 162.664 10.125 162.668 10.176 cv
cp
f
170.145 13.457 mo
170.141 13.695 170.09 13.871 169.984 13.984 cv
169.875 14.102 169.727 14.16 169.547 14.156 cv
165.313 14.156 li
165.309 14.457 165.344 14.727 165.418 14.965 cv
165.484 15.207 165.598 15.41 165.754 15.578 cv
165.906 15.75 166.102 15.879 166.344 15.965 cv
166.582 16.055 166.871 16.098 167.215 16.098 cv
167.555 16.098 167.855 16.074 168.117 16.023 cv
168.375 15.977 168.602 15.922 168.793 15.859 cv
168.98 15.801 169.137 15.746 169.266 15.695 cv
169.387 15.648 169.488 15.625 169.57 15.621 cv
169.613 15.625 169.652 15.633 169.688 15.648 cv
169.715 15.668 169.742 15.699 169.762 15.746 cv
169.781 15.793 169.793 15.859 169.805 15.945 cv
169.809 16.031 169.813 16.141 169.816 16.27 cv
169.813 16.387 169.813 16.484 169.809 16.562 cv
169.801 16.645 169.793 16.711 169.785 16.766 cv
169.773 16.824 169.758 16.875 169.738 16.91 cv
169.719 16.953 169.691 16.988 169.66 17.023 cv
169.625 17.062 169.531 17.113 169.383 17.172 cv
169.227 17.238 169.035 17.301 168.805 17.355 cv
168.566 17.418 168.297 17.465 168 17.512 cv
167.695 17.551 167.375 17.574 167.035 17.578 cv
166.414 17.574 165.871 17.5 165.41 17.344 cv
164.941 17.191 164.555 16.953 164.246 16.637 cv
163.93 16.32 163.695 15.922 163.547 15.437 cv
163.391 14.957 163.316 14.391 163.32 13.734 cv
163.316 13.121 163.395 12.562 163.559 12.066 cv
163.715 11.57 163.949 11.152 164.262 10.805 cv
164.566 10.461 164.941 10.195 165.379 10.012 cv
165.816 9.83197 166.309 9.742 166.863 9.73798 cv
167.441 9.742 167.941 9.828 168.355 9.99597 cv
168.77 10.172 169.105 10.41 169.371 10.711 cv
169.633 11.016 169.828 11.375 169.957 11.789 cv
170.078 12.207 170.141 12.656 170.145 13.145 cv
cp
168.242 12.895 mo
168.254 12.344 168.145 11.91 167.91 11.598 cv
167.676 11.285 167.309 11.129 166.816 11.125 cv
166.566 11.129 166.352 11.176 166.168 11.266 cv
165.98 11.363 165.828 11.488 165.707 11.645 cv
165.582 11.805 165.488 11.992 165.426 12.207 cv
165.359 12.422 165.32 12.652 165.313 12.895 cv
cp
f
176.219 10.828 mo
176.219 11.02 176.211 11.172 176.203 11.289 cv
176.188 11.41 176.172 11.504 176.156 11.57 cv
176.133 11.641 176.105 11.687 176.074 11.711 cv
176.035 11.738 175.992 11.75 175.945 11.75 cv
175.898 11.75 175.852 11.742 175.805 11.723 cv
175.75 11.707 175.691 11.687 175.629 11.664 cv
175.559 11.645 175.488 11.625 175.414 11.605 cv
175.332 11.59 175.246 11.582 175.156 11.578 cv
175.043 11.582 174.934 11.602 174.828 11.645 cv
174.719 11.691 174.605 11.762 174.492 11.852 cv
174.371 11.945 174.25 12.07 174.125 12.223 cv
173.996 12.383 173.859 12.574 173.715 12.801 cv
173.715 17.133 li
173.711 17.187 173.695 17.23 173.668 17.27 cv
173.633 17.309 173.578 17.344 173.508 17.367 cv
173.43 17.395 173.332 17.41 173.207 17.426 cv
173.082 17.437 172.922 17.445 172.734 17.445 cv
172.539 17.445 172.383 17.437 172.258 17.426 cv
172.133 17.41 172.031 17.395 171.957 17.367 cv
171.879 17.344 171.824 17.309 171.797 17.27 cv
171.762 17.23 171.746 17.187 171.75 17.133 cv
171.75 10.184 li
171.746 10.137 171.762 10.09 171.789 10.047 cv
171.813 10.012 171.859 9.97998 171.93 9.94897 cv
171.996 9.92603 172.082 9.90601 172.191 9.89099 cv
172.297 9.883 172.43 9.875 172.594 9.87097 cv
172.758 9.875 172.895 9.883 173.004 9.89099 cv
173.109 9.90601 173.195 9.92603 173.258 9.94897 cv
173.316 9.97998 173.359 10.012 173.387 10.047 cv
173.41 10.09 173.422 10.137 173.426 10.184 cv
173.426 11.047 li
173.605 10.789 173.777 10.578 173.941 10.406 cv
174.098 10.242 174.254 10.105 174.402 10.004 cv
174.547 9.90601 174.691 9.84003 174.836 9.797 cv
174.98 9.76202 175.125 9.742 175.273 9.73798 cv
175.34 9.742 175.414 9.74597 175.492 9.75 cv
175.57 9.76202 175.648 9.77301 175.734 9.789 cv
175.813 9.80902 175.887 9.828 175.953 9.85199 cv
176.012 9.875 176.059 9.90198 176.09 9.92603 cv
176.117 9.95697 176.137 9.98401 176.152 10.012 cv
176.164 10.047 176.176 10.09 176.188 10.141 cv
176.195 10.199 176.203 10.281 176.211 10.387 cv
176.215 10.496 176.219 10.645 176.219 10.828 cv
cp
f
182.977 17.156 mo
182.973 17.234 182.945 17.289 182.898 17.328 cv
182.844 17.371 182.762 17.398 182.652 17.418 cv
182.535 17.434 182.371 17.445 182.156 17.445 cv
181.918 17.445 181.746 17.434 181.645 17.418 cv
181.535 17.398 181.461 17.371 181.422 17.328 cv
181.375 17.289 181.355 17.234 181.355 17.156 cv
181.355 16.605 li
181.066 16.914 180.738 17.152 180.375 17.32 cv
180.008 17.492 179.602 17.574 179.156 17.578 cv
178.785 17.574 178.445 17.527 178.137 17.434 cv
177.828 17.34 177.563 17.199 177.336 17.004 cv
177.109 16.816 176.934 16.582 176.809 16.301 cv
176.684 16.023 176.621 15.695 176.625 15.316 cv
176.621 14.918 176.699 14.566 176.859 14.262 cv
177.016 13.965 177.254 13.719 177.57 13.523 cv
177.883 13.332 178.273 13.187 178.742 13.09 cv
179.211 13 179.754 12.953 180.371 12.949 cv
181.051 12.949 li
181.051 12.527 li
181.051 12.312 181.027 12.121 180.984 11.957 cv
180.938 11.797 180.863 11.66 180.766 11.547 cv
180.66 11.441 180.527 11.359 180.359 11.305 cv
180.188 11.254 179.977 11.23 179.734 11.227 cv
179.402 11.23 179.109 11.266 178.855 11.336 cv
178.594 11.41 178.367 11.492 178.172 11.578 cv
177.973 11.672 177.809 11.75 177.68 11.82 cv
177.543 11.895 177.434 11.934 177.355 11.93 cv
177.293 11.934 177.242 11.914 177.203 11.875 cv
177.156 11.84 177.121 11.789 177.094 11.719 cv
177.063 11.656 177.039 11.57 177.027 11.469 cv
177.008 11.371 177 11.262 177.004 11.141 cv
177 10.98 177.016 10.855 177.043 10.758 cv
177.066 10.668 177.113 10.582 177.191 10.504 cv
177.262 10.43 177.391 10.348 177.574 10.258 cv
177.754 10.168 177.965 10.082 178.211 10.004 cv
178.453 9.92603 178.723 9.86298 179.012 9.81201 cv
179.301 9.76599 179.598 9.742 179.906 9.73798 cv
180.449 9.742 180.914 9.79303 181.301 9.89801 cv
181.688 10.008 182.008 10.172 182.258 10.391 cv
182.508 10.609 182.688 10.895 182.805 11.242 cv
182.914 11.594 182.973 12.008 182.977 12.48 cv
cp
181.051 14.18 mo
180.301 14.18 li
179.984 14.184 179.715 14.207 179.492 14.25 cv
179.266 14.301 179.082 14.371 178.945 14.461 cv
178.801 14.559 178.699 14.672 178.637 14.801 cv
178.57 14.937 178.535 15.086 178.539 15.254 cv
178.535 15.547 178.629 15.777 178.816 15.941 cv
179 16.109 179.258 16.191 179.586 16.191 cv
179.859 16.191 180.109 16.121 180.344 15.98 cv
180.57 15.84 180.809 15.637 181.051 15.363 cv
cp
f
186.898 17.133 mo
186.895 17.187 186.879 17.23 186.852 17.27 cv
186.816 17.309 186.762 17.344 186.691 17.367 cv
186.613 17.395 186.516 17.41 186.391 17.426 cv
186.266 17.437 186.105 17.445 185.918 17.445 cv
185.723 17.445 185.566 17.437 185.441 17.426 cv
185.316 17.41 185.215 17.395 185.141 17.367 cv
185.063 17.344 185.008 17.309 184.98 17.27 cv
184.945 17.23 184.93 17.187 184.934 17.133 cv
184.934 6.88702 li
184.93 6.836 184.945 6.789 184.98 6.74597 cv
185.008 6.70697 185.063 6.672 185.141 6.64099 cv
185.215 6.61298 185.316 6.59399 185.441 6.57397 cv
185.566 6.56201 185.723 6.55499 185.918 6.55103 cv
186.105 6.55499 186.266 6.56201 186.391 6.57397 cv
186.516 6.59399 186.613 6.61298 186.691 6.64099 cv
186.762 6.672 186.816 6.70697 186.852 6.74597 cv
186.879 6.789 186.895 6.836 186.898 6.88702 cv
cp
f
190.871 17.133 mo
190.867 17.187 190.852 17.23 190.824 17.27 cv
190.789 17.309 190.734 17.344 190.664 17.367 cv
190.586 17.395 190.488 17.41 190.363 17.426 cv
190.238 17.437 190.078 17.445 189.891 17.445 cv
189.695 17.445 189.539 17.437 189.414 17.426 cv
189.289 17.41 189.188 17.395 189.113 17.367 cv
189.035 17.344 188.98 17.309 188.953 17.27 cv
188.918 17.23 188.902 17.187 188.906 17.133 cv
188.906 6.88702 li
188.902 6.836 188.918 6.789 188.953 6.74597 cv
188.98 6.70697 189.035 6.672 189.113 6.64099 cv
189.188 6.61298 189.289 6.59399 189.414 6.57397 cv
189.539 6.56201 189.695 6.55499 189.891 6.55103 cv
190.078 6.55499 190.238 6.56201 190.363 6.57397 cv
190.488 6.59399 190.586 6.61298 190.664 6.64099 cv
190.734 6.672 190.789 6.70697 190.824 6.74597 cv
190.852 6.789 190.867 6.836 190.871 6.88702 cv
cp
f
202.535 14.375 mo
202.531 14.906 202.434 15.371 202.238 15.77 cv
202.039 16.172 201.773 16.508 201.438 16.773 cv
201.098 17.043 200.699 17.242 200.25 17.375 cv
199.797 17.508 199.316 17.574 198.805 17.578 cv
198.453 17.574 198.129 17.547 197.832 17.492 cv
197.531 17.434 197.27 17.367 197.043 17.285 cv
196.813 17.207 196.621 17.121 196.469 17.031 cv
196.316 16.945 196.207 16.867 196.141 16.797 cv
196.07 16.73 196.02 16.633 195.996 16.508 cv
195.965 16.383 195.953 16.199 195.953 15.957 cv
195.953 15.797 195.957 15.664 195.969 15.551 cv
195.977 15.445 195.992 15.355 196.02 15.285 cv
196.039 15.219 196.07 15.172 196.113 15.141 cv
196.148 15.117 196.195 15.102 196.246 15.098 cv
196.316 15.102 196.418 15.145 196.555 15.227 cv
196.684 15.316 196.855 15.41 197.066 15.512 cv
197.273 15.617 197.52 15.715 197.809 15.797 cv
198.094 15.887 198.43 15.93 198.813 15.926 cv
199.063 15.93 199.285 15.898 199.48 15.836 cv
199.676 15.777 199.844 15.691 199.984 15.582 cv
200.121 15.473 200.227 15.34 200.301 15.18 cv
200.371 15.02 200.406 14.84 200.41 14.641 cv
200.406 14.414 200.344 14.219 200.223 14.051 cv
200.094 13.891 199.93 13.746 199.734 13.617 cv
199.531 13.492 199.305 13.371 199.051 13.258 cv
198.797 13.148 198.535 13.031 198.266 12.902 cv
197.992 12.781 197.73 12.637 197.477 12.477 cv
197.223 12.32 196.996 12.133 196.797 11.91 cv
196.594 11.691 196.43 11.43 196.309 11.125 cv
196.184 10.824 196.121 10.465 196.125 10.043 cv
196.121 9.56201 196.211 9.13702 196.391 8.77002 cv
196.566 8.40601 196.809 8.10199 197.117 7.85498 cv
197.418 7.617 197.777 7.43701 198.191 7.31598 cv
198.605 7.19897 199.043 7.14099 199.504 7.13702 cv
199.742 7.14099 199.98 7.15601 200.223 7.19098 cv
200.461 7.22998 200.684 7.28101 200.891 7.34003 cv
201.098 7.40198 201.281 7.47302 201.445 7.547 cv
201.602 7.62903 201.711 7.69098 201.766 7.742 cv
201.816 7.797 201.852 7.84399 201.871 7.875 cv
201.887 7.914 201.902 7.961 201.918 8.02002 cv
201.93 8.08197 201.938 8.15601 201.945 8.24597 cv
201.949 8.34003 201.953 8.453 201.953 8.586 cv
201.953 8.73798 201.949 8.867 201.941 8.96899 cv
201.934 9.07397 201.918 9.15997 201.902 9.22302 cv
201.879 9.29303 201.855 9.34003 201.824 9.37097 cv
201.789 9.40198 201.742 9.41803 201.688 9.41803 cv
201.629 9.41803 201.539 9.383 201.414 9.30902 cv
201.289 9.23798 201.133 9.15997 200.953 9.07001 cv
200.77 8.98798 200.563 8.90997 200.324 8.84003 cv
200.082 8.77301 199.816 8.73798 199.535 8.73401 cv
199.309 8.73798 199.117 8.76599 198.953 8.81598 cv
198.785 8.87097 198.645 8.94501 198.535 9.039 cv
198.422 9.13702 198.34 9.25403 198.285 9.38702 cv
198.23 9.52698 198.203 9.66803 198.203 9.81598 cv
198.203 10.043 198.262 10.238 198.387 10.398 cv
198.504 10.562 198.668 10.707 198.879 10.832 cv
199.082 10.961 199.316 11.082 199.574 11.191 cv
199.832 11.309 200.098 11.426 200.371 11.547 cv
200.641 11.676 200.902 11.816 201.164 11.973 cv
201.422 12.129 201.656 12.32 201.859 12.539 cv
202.063 12.766 202.223 13.023 202.348 13.32 cv
202.469 13.617 202.531 13.969 202.535 14.375 cv
cp
f
210.988 13.555 mo
210.988 14.176 210.922 14.734 210.789 15.23 cv
210.656 15.727 210.461 16.148 210.207 16.496 cv
209.953 16.844 209.637 17.113 209.258 17.297 cv
208.875 17.484 208.441 17.574 207.957 17.578 cv
207.75 17.574 207.563 17.555 207.398 17.52 cv
207.227 17.477 207.063 17.418 206.906 17.34 cv
206.746 17.262 206.59 17.164 206.438 17.039 cv
206.277 16.922 206.117 16.781 205.953 16.617 cv
205.953 19.891 li
205.949 19.937 205.934 19.984 205.906 20.031 cv
205.871 20.07 205.816 20.105 205.746 20.137 cv
205.668 20.16 205.57 20.184 205.445 20.203 cv
205.32 20.215 205.16 20.223 204.973 20.227 cv
204.777 20.223 204.621 20.215 204.496 20.203 cv
204.371 20.184 204.27 20.16 204.195 20.137 cv
204.117 20.105 204.063 20.07 204.035 20.031 cv
204 19.984 203.984 19.937 203.988 19.891 cv
203.988 10.184 li
203.984 10.137 204 10.09 204.027 10.047 cv
204.051 10.012 204.094 9.97998 204.164 9.94897 cv
204.227 9.92603 204.313 9.90601 204.422 9.89099 cv
204.523 9.883 204.66 9.875 204.824 9.87097 cv
204.98 9.875 205.109 9.883 205.215 9.89099 cv
205.32 9.90601 205.406 9.92603 205.473 9.94897 cv
205.535 9.97998 205.582 10.012 205.609 10.047 cv
205.633 10.09 205.645 10.137 205.648 10.184 cv
205.648 11 li
205.848 10.793 206.047 10.613 206.246 10.453 cv
206.438 10.297 206.637 10.164 206.84 10.055 cv
207.043 9.953 207.25 9.87097 207.469 9.81598 cv
207.68 9.76599 207.91 9.742 208.16 9.73798 cv
208.664 9.742 209.098 9.84003 209.461 10.039 cv
209.816 10.242 210.109 10.52 210.336 10.863 cv
210.559 11.215 210.723 11.617 210.832 12.078 cv
210.934 12.539 210.988 13.031 210.988 13.555 cv
cp
208.945 13.695 mo
208.941 13.402 208.922 13.121 208.879 12.844 cv
208.832 12.574 208.754 12.332 208.652 12.117 cv
208.543 11.906 208.402 11.734 208.23 11.605 cv
208.055 11.48 207.84 11.418 207.582 11.414 cv
207.449 11.418 207.32 11.437 207.195 11.473 cv
207.066 11.516 206.938 11.578 206.805 11.664 cv
206.672 11.754 206.535 11.867 206.398 12.008 cv
206.254 12.148 206.105 12.324 205.953 12.527 cv
205.953 14.82 li
206.227 15.168 206.488 15.437 206.738 15.625 cv
206.984 15.816 207.246 15.91 207.52 15.91 cv
207.773 15.91 207.988 15.848 208.172 15.715 cv
208.348 15.59 208.496 15.418 208.609 15.207 cv
208.723 14.996 208.805 14.758 208.863 14.492 cv
208.914 14.227 208.941 13.961 208.945 13.695 cv
cp
f
218.98 13.457 mo
218.977 13.695 218.926 13.871 218.82 13.984 cv
218.711 14.102 218.563 14.16 218.383 14.156 cv
214.148 14.156 li
214.145 14.457 214.18 14.727 214.254 14.965 cv
214.32 15.207 214.434 15.41 214.59 15.578 cv
214.742 15.75 214.938 15.879 215.18 15.965 cv
215.418 16.055 215.707 16.098 216.051 16.098 cv
216.391 16.098 216.691 16.074 216.953 16.023 cv
217.211 15.977 217.438 15.922 217.629 15.859 cv
217.816 15.801 217.973 15.746 218.102 15.695 cv
218.223 15.648 218.324 15.625 218.406 15.621 cv
218.449 15.625 218.488 15.633 218.523 15.648 cv
218.551 15.668 218.578 15.699 218.598 15.746 cv
218.617 15.793 218.629 15.859 218.641 15.945 cv
218.645 16.031 218.648 16.141 218.652 16.27 cv
218.648 16.387 218.648 16.484 218.645 16.562 cv
218.637 16.645 218.629 16.711 218.621 16.766 cv
218.609 16.824 218.594 16.875 218.574 16.91 cv
218.555 16.953 218.527 16.988 218.496 17.023 cv
218.461 17.062 218.367 17.113 218.219 17.172 cv
218.063 17.238 217.871 17.301 217.641 17.355 cv
217.402 17.418 217.133 17.465 216.836 17.512 cv
216.531 17.551 216.211 17.574 215.871 17.578 cv
215.25 17.574 214.707 17.5 214.246 17.344 cv
213.777 17.191 213.391 16.953 213.082 16.637 cv
212.766 16.32 212.531 15.922 212.383 15.437 cv
212.227 14.957 212.152 14.391 212.156 13.734 cv
212.152 13.121 212.23 12.562 212.395 12.066 cv
212.551 11.57 212.785 11.152 213.098 10.805 cv
213.402 10.461 213.777 10.195 214.215 10.012 cv
214.652 9.83197 215.145 9.742 215.699 9.73798 cv
216.277 9.742 216.777 9.828 217.191 9.99597 cv
217.605 10.172 217.941 10.41 218.207 10.711 cv
218.469 11.016 218.664 11.375 218.793 11.789 cv
218.914 12.207 218.977 12.656 218.98 13.145 cv
cp
217.078 12.895 mo
217.09 12.344 216.98 11.91 216.746 11.598 cv
216.512 11.285 216.145 11.129 215.652 11.125 cv
215.402 11.129 215.188 11.176 215.004 11.266 cv
214.816 11.363 214.664 11.488 214.543 11.645 cv
214.418 11.805 214.324 11.992 214.262 12.207 cv
214.195 12.422 214.156 12.652 214.148 12.895 cv
cp
f
227.012 13.457 mo
227.008 13.695 226.957 13.871 226.852 13.984 cv
226.742 14.102 226.594 14.16 226.414 14.156 cv
222.18 14.156 li
222.176 14.457 222.211 14.727 222.285 14.965 cv
222.352 15.207 222.465 15.41 222.621 15.578 cv
222.773 15.75 222.969 15.879 223.211 15.965 cv
223.449 16.055 223.738 16.098 224.082 16.098 cv
224.422 16.098 224.723 16.074 224.984 16.023 cv
225.242 15.977 225.469 15.922 225.66 15.859 cv
225.848 15.801 226.004 15.746 226.133 15.695 cv
226.254 15.648 226.355 15.625 226.438 15.621 cv
226.48 15.625 226.52 15.633 226.555 15.648 cv
226.582 15.668 226.609 15.699 226.629 15.746 cv
226.648 15.793 226.66 15.859 226.672 15.945 cv
226.676 16.031 226.68 16.141 226.684 16.27 cv
226.68 16.387 226.68 16.484 226.676 16.562 cv
226.668 16.645 226.66 16.711 226.652 16.766 cv
226.641 16.824 226.625 16.875 226.605 16.91 cv
226.586 16.953 226.559 16.988 226.527 17.023 cv
226.492 17.062 226.398 17.113 226.25 17.172 cv
226.094 17.238 225.902 17.301 225.672 17.355 cv
225.434 17.418 225.164 17.465 224.867 17.512 cv
224.563 17.551 224.242 17.574 223.902 17.578 cv
223.281 17.574 222.738 17.5 222.277 17.344 cv
221.809 17.191 221.422 16.953 221.113 16.637 cv
220.797 16.32 220.563 15.922 220.414 15.437 cv
220.258 14.957 220.184 14.391 220.188 13.734 cv
220.184 13.121 220.262 12.562 220.426 12.066 cv
220.582 11.57 220.816 11.152 221.129 10.805 cv
221.434 10.461 221.809 10.195 222.246 10.012 cv
222.684 9.83197 223.176 9.742 223.73 9.73798 cv
224.309 9.742 224.809 9.828 225.223 9.99597 cv
225.637 10.172 225.973 10.41 226.238 10.711 cv
226.5 11.016 226.695 11.375 226.824 11.789 cv
226.945 12.207 227.008 12.656 227.012 13.145 cv
cp
225.109 12.895 mo
225.121 12.344 225.012 11.91 224.777 11.598 cv
224.543 11.285 224.176 11.129 223.684 11.125 cv
223.434 11.129 223.219 11.176 223.035 11.266 cv
222.848 11.363 222.695 11.488 222.574 11.645 cv
222.449 11.805 222.355 11.992 222.293 12.207 cv
222.227 12.422 222.188 12.652 222.18 12.895 cv
cp
f
235.211 17.133 mo
235.207 17.195 235.195 17.242 235.172 17.277 cv
235.145 17.32 235.098 17.352 235.039 17.375 cv
234.973 17.398 234.891 17.414 234.785 17.43 cv
234.68 17.437 234.547 17.445 234.395 17.445 cv
234.223 17.445 234.09 17.437 233.988 17.43 cv
233.883 17.414 233.797 17.398 233.734 17.375 cv
233.668 17.352 233.621 17.32 233.594 17.277 cv
233.563 17.242 233.547 17.195 233.551 17.133 cv
233.551 16.363 li
233.191 16.75 232.816 17.047 232.426 17.258 cv
232.027 17.469 231.594 17.574 231.121 17.578 cv
230.586 17.574 230.137 17.473 229.773 17.27 cv
229.406 17.066 229.109 16.793 228.879 16.441 cv
228.645 16.098 228.477 15.691 228.375 15.223 cv
228.273 14.762 228.223 14.27 228.223 13.75 cv
228.223 13.137 228.285 12.582 228.418 12.086 cv
228.547 11.594 228.742 11.172 229 10.824 cv
229.254 10.477 229.57 10.211 229.949 10.02 cv
230.328 9.836 230.766 9.742 231.262 9.73798 cv
231.648 9.742 232 9.82001 232.32 9.97699 cv
232.633 10.137 232.949 10.367 233.262 10.672 cv
233.262 6.90997 li
233.262 6.85901 233.273 6.81201 233.305 6.77002 cv
233.328 6.72998 233.383 6.69501 233.461 6.664 cv
233.535 6.63702 233.633 6.617 233.762 6.59802 cv
233.883 6.586 234.043 6.578 234.238 6.57397 cv
234.43 6.578 234.586 6.586 234.711 6.59802 cv
234.832 6.617 234.934 6.63702 235.008 6.664 cv
235.078 6.69501 235.129 6.72998 235.164 6.77002 cv
235.191 6.81201 235.207 6.85901 235.211 6.90997 cv
cp
233.262 12.488 mo
232.98 12.137 232.711 11.867 232.457 11.68 cv
232.195 11.492 231.926 11.398 231.648 11.398 cv
231.395 11.398 231.176 11.465 230.992 11.59 cv
230.805 11.723 230.656 11.891 230.547 12.102 cv
230.434 12.312 230.352 12.551 230.297 12.812 cv
230.242 13.078 230.215 13.348 230.215 13.617 cv
230.215 13.914 230.238 14.195 230.285 14.469 cv
230.332 14.746 230.406 14.992 230.516 15.207 cv
230.617 15.422 230.762 15.594 230.941 15.723 cv
231.117 15.855 231.34 15.922 231.609 15.918 cv
231.742 15.922 231.871 15.902 232.004 15.859 cv
232.129 15.824 232.262 15.762 232.395 15.668 cv
232.527 15.582 232.664 15.465 232.805 15.32 cv
232.945 15.18 233.098 15.004 233.262 14.797 cv
cp
f
243.781 17.133 mo
243.777 17.187 243.766 17.23 243.742 17.27 cv
243.715 17.309 243.668 17.344 243.605 17.367 cv
243.539 17.395 243.453 17.41 243.348 17.426 cv
243.242 17.437 243.109 17.445 242.949 17.445 cv
242.773 17.445 242.633 17.437 242.531 17.426 cv
242.422 17.41 242.34 17.395 242.277 17.367 cv
242.215 17.344 242.168 17.309 242.145 17.27 cv
242.113 17.23 242.102 17.187 242.105 17.133 cv
242.105 16.332 li
241.719 16.746 241.328 17.059 240.934 17.266 cv
240.531 17.473 240.121 17.574 239.699 17.578 cv
239.219 17.574 238.816 17.5 238.492 17.344 cv
238.168 17.191 237.906 16.977 237.707 16.707 cv
237.504 16.437 237.359 16.125 237.277 15.766 cv
237.188 15.41 237.145 14.969 237.148 14.437 cv
237.148 10.184 li
237.145 10.137 237.16 10.09 237.191 10.047 cv
237.219 10.012 237.27 9.97998 237.348 9.94897 cv
237.422 9.92603 237.523 9.90601 237.652 9.89099 cv
237.777 9.883 237.934 9.875 238.125 9.87097 cv
238.313 9.875 238.473 9.883 238.598 9.89099 cv
238.723 9.90601 238.82 9.92603 238.898 9.94897 cv
238.969 9.97998 239.023 10.012 239.059 10.047 cv
239.086 10.09 239.102 10.137 239.105 10.184 cv
239.105 14.109 li
239.102 14.477 239.125 14.754 239.176 14.945 cv
239.219 15.137 239.289 15.301 239.391 15.437 cv
239.484 15.578 239.609 15.684 239.758 15.758 cv
239.906 15.836 240.078 15.875 240.273 15.871 cv
240.523 15.875 240.773 15.785 241.027 15.598 cv
241.277 15.418 241.547 15.152 241.832 14.805 cv
241.832 10.184 li
241.832 10.137 241.844 10.09 241.875 10.047 cv
241.898 10.012 241.953 9.97998 242.031 9.94897 cv
242.105 9.92603 242.203 9.90601 242.332 9.89099 cv
242.453 9.883 242.613 9.875 242.809 9.87097 cv
243 9.875 243.156 9.883 243.281 9.89099 cv
243.402 9.90601 243.504 9.92603 243.578 9.94897 cv
243.648 9.97998 243.699 10.012 243.734 10.047 cv
243.762 10.09 243.777 10.137 243.781 10.184 cv
cp
f
252.66 13.555 mo
252.66 14.176 252.594 14.734 252.461 15.23 cv
252.328 15.727 252.133 16.148 251.879 16.496 cv
251.625 16.844 251.309 17.113 250.93 17.297 cv
250.547 17.484 250.113 17.574 249.629 17.578 cv
249.422 17.574 249.234 17.555 249.07 17.52 cv
248.898 17.477 248.734 17.418 248.578 17.34 cv
248.418 17.262 248.262 17.164 248.109 17.039 cv
247.949 16.922 247.789 16.781 247.625 16.617 cv
247.625 19.891 li
247.621 19.937 247.605 19.984 247.578 20.031 cv
247.543 20.07 247.488 20.105 247.418 20.137 cv
247.34 20.16 247.242 20.184 247.117 20.203 cv
246.992 20.215 246.832 20.223 246.645 20.227 cv
246.449 20.223 246.293 20.215 246.168 20.203 cv
246.043 20.184 245.941 20.16 245.867 20.137 cv
245.789 20.105 245.734 20.07 245.707 20.031 cv
245.672 19.984 245.656 19.937 245.66 19.891 cv
245.66 10.184 li
245.656 10.137 245.672 10.09 245.699 10.047 cv
245.723 10.012 245.766 9.97998 245.836 9.94897 cv
245.898 9.92603 245.984 9.90601 246.094 9.89099 cv
246.195 9.883 246.332 9.875 246.496 9.87097 cv
246.652 9.875 246.781 9.883 246.887 9.89099 cv
246.992 9.90601 247.078 9.92603 247.145 9.94897 cv
247.207 9.97998 247.254 10.012 247.281 10.047 cv
247.305 10.09 247.316 10.137 247.32 10.184 cv
247.32 11 li
247.52 10.793 247.719 10.613 247.918 10.453 cv
248.109 10.297 248.309 10.164 248.512 10.055 cv
248.715 9.953 248.922 9.87097 249.141 9.81598 cv
249.352 9.76599 249.582 9.742 249.832 9.73798 cv
250.336 9.742 250.77 9.84003 251.133 10.039 cv
251.488 10.242 251.781 10.52 252.008 10.863 cv
252.23 11.215 252.395 11.617 252.504 12.078 cv
252.605 12.539 252.66 13.031 252.66 13.555 cv
cp
250.617 13.695 mo
250.613 13.402 250.594 13.121 250.551 12.844 cv
250.504 12.574 250.426 12.332 250.324 12.117 cv
250.215 11.906 250.074 11.734 249.902 11.605 cv
249.727 11.48 249.512 11.418 249.254 11.414 cv
249.121 11.418 248.992 11.437 248.867 11.473 cv
248.738 11.516 248.609 11.578 248.477 11.664 cv
248.344 11.754 248.207 11.867 248.07 12.008 cv
247.926 12.148 247.777 12.324 247.625 12.527 cv
247.625 14.82 li
247.898 15.168 248.16 15.437 248.41 15.625 cv
248.656 15.816 248.918 15.91 249.191 15.91 cv
249.445 15.91 249.66 15.848 249.844 15.715 cv
250.02 15.59 250.168 15.418 250.281 15.207 cv
250.395 14.996 250.477 14.758 250.535 14.492 cv
250.586 14.227 250.613 13.961 250.617 13.695 cv
cp
f
258.949 15.168 mo
258.945 15.566 258.871 15.914 258.727 16.215 cv
258.578 16.516 258.371 16.77 258.102 16.969 cv
257.828 17.176 257.508 17.324 257.141 17.426 cv
256.773 17.523 256.371 17.574 255.941 17.578 cv
255.676 17.574 255.43 17.555 255.195 17.52 cv
254.961 17.477 254.75 17.43 254.563 17.371 cv
254.375 17.312 254.219 17.25 254.094 17.187 cv
253.969 17.125 253.875 17.066 253.82 17.012 cv
253.762 16.957 253.719 16.875 253.691 16.758 cv
253.656 16.645 253.641 16.469 253.645 16.238 cv
253.641 16.09 253.648 15.969 253.66 15.875 cv
253.668 15.785 253.684 15.715 253.707 15.656 cv
253.727 15.605 253.75 15.566 253.785 15.547 cv
253.813 15.531 253.852 15.523 253.898 15.52 cv
253.953 15.523 254.039 15.555 254.152 15.617 cv
254.262 15.684 254.398 15.758 254.57 15.832 cv
254.734 15.914 254.93 15.984 255.148 16.051 cv
255.367 16.121 255.617 16.156 255.902 16.152 cv
256.078 16.156 256.234 16.137 256.375 16.098 cv
256.508 16.062 256.629 16.012 256.734 15.941 cv
256.832 15.875 256.906 15.789 256.961 15.684 cv
257.008 15.582 257.035 15.461 257.039 15.324 cv
257.035 15.168 256.988 15.035 256.895 14.926 cv
256.801 14.816 256.672 14.719 256.516 14.633 cv
256.352 14.551 256.172 14.473 255.977 14.398 cv
255.773 14.328 255.57 14.25 255.359 14.156 cv
255.148 14.07 254.941 13.969 254.746 13.852 cv
254.543 13.742 254.363 13.602 254.207 13.434 cv
254.043 13.27 253.918 13.07 253.824 12.832 cv
253.73 12.602 253.684 12.32 253.684 11.988 cv
253.684 11.66 253.746 11.355 253.875 11.074 cv
254.004 10.801 254.191 10.562 254.438 10.363 cv
254.68 10.168 254.977 10.016 255.328 9.90198 cv
255.676 9.797 256.07 9.742 256.512 9.73798 cv
256.727 9.742 256.938 9.758 257.145 9.78497 cv
257.348 9.82001 257.535 9.85901 257.703 9.90198 cv
257.867 9.953 258.008 10.004 258.125 10.055 cv
258.238 10.113 258.32 10.16 258.371 10.195 cv
258.418 10.238 258.453 10.277 258.477 10.312 cv
258.496 10.355 258.508 10.402 258.52 10.453 cv
258.527 10.508 258.539 10.574 258.547 10.652 cv
258.555 10.738 258.559 10.836 258.559 10.953 cv
258.559 11.094 258.555 11.211 258.547 11.297 cv
258.539 11.391 258.523 11.461 258.508 11.508 cv
258.488 11.562 258.465 11.598 258.438 11.613 cv
258.402 11.637 258.367 11.645 258.328 11.641 cv
258.277 11.645 258.203 11.617 258.109 11.559 cv
258.008 11.508 257.887 11.449 257.738 11.383 cv
257.59 11.324 257.418 11.266 257.223 11.207 cv
257.027 11.156 256.805 11.129 256.559 11.125 cv
256.379 11.129 256.227 11.148 256.098 11.18 cv
255.965 11.219 255.855 11.27 255.777 11.336 cv
255.691 11.406 255.629 11.484 255.59 11.574 cv
255.543 11.668 255.523 11.766 255.527 11.867 cv
255.523 12.027 255.574 12.164 255.676 12.27 cv
255.773 12.383 255.902 12.477 256.066 12.559 cv
256.227 12.645 256.41 12.723 256.617 12.793 cv
256.82 12.867 257.027 12.949 257.238 13.031 cv
257.445 13.121 257.652 13.219 257.863 13.332 cv
258.066 13.445 258.25 13.586 258.41 13.75 cv
258.57 13.918 258.699 14.117 258.801 14.348 cv
258.895 14.582 258.945 14.855 258.949 15.168 cv
cp
f
275.008 10.168 mo
275.004 10.227 274.996 10.297 274.984 10.379 cv
274.965 10.461 274.938 10.582 274.898 10.734 cv
273.043 17.023 li
273.016 17.113 272.98 17.187 272.941 17.238 cv
272.898 17.297 272.836 17.34 272.75 17.367 cv
272.664 17.398 272.539 17.414 272.383 17.43 cv
272.219 17.437 272.016 17.445 271.766 17.445 cv
271.508 17.445 271.297 17.437 271.141 17.426 cv
270.977 17.41 270.852 17.391 270.762 17.359 cv
270.668 17.332 270.602 17.289 270.563 17.23 cv
270.52 17.18 270.488 17.109 270.469 17.023 cv
269.301 12.801 li
269.285 12.73 li
269.27 12.801 li
268.195 17.023 li
268.172 17.113 268.141 17.187 268.105 17.238 cv
268.063 17.297 267.996 17.34 267.906 17.367 cv
267.809 17.398 267.684 17.414 267.523 17.43 cv
267.363 17.437 267.156 17.445 266.902 17.445 cv
266.641 17.445 266.43 17.437 266.273 17.426 cv
266.113 17.41 265.988 17.391 265.898 17.359 cv
265.805 17.332 265.738 17.289 265.699 17.23 cv
265.656 17.18 265.625 17.109 265.609 17.023 cv
263.77 10.734 li
263.719 10.586 263.691 10.469 263.68 10.383 cv
263.664 10.301 263.656 10.227 263.66 10.168 cv
263.656 10.117 263.672 10.074 263.703 10.031 cv
263.73 9.99597 263.781 9.96503 263.859 9.93701 cv
263.934 9.91803 264.035 9.89801 264.16 9.88702 cv
264.285 9.87903 264.445 9.875 264.641 9.87097 cv
264.848 9.875 265.016 9.87903 265.148 9.88702 cv
265.277 9.89801 265.379 9.91803 265.453 9.94098 cv
265.523 9.96899 265.574 10.004 265.605 10.047 cv
265.633 10.094 265.656 10.148 265.672 10.207 cv
267.051 15.309 li
267.066 15.402 li
267.082 15.309 li
268.375 10.207 li
268.387 10.148 268.414 10.094 268.449 10.047 cv
268.48 10.004 268.531 9.96899 268.602 9.94098 cv
268.668 9.91803 268.762 9.89801 268.883 9.88702 cv
269.004 9.87903 269.16 9.875 269.355 9.87097 cv
269.547 9.875 269.703 9.883 269.824 9.89099 cv
269.941 9.90601 270.035 9.922 270.109 9.94501 cv
270.176 9.96899 270.227 10 270.258 10.039 cv
270.285 10.078 270.309 10.125 270.324 10.176 cv
271.711 15.316 li
271.734 15.402 li
271.75 15.309 li
273.074 10.207 li
273.082 10.148 273.105 10.094 273.137 10.047 cv
273.168 10.004 273.219 9.96899 273.293 9.94098 cv
273.363 9.91803 273.461 9.89801 273.586 9.88702 cv
273.707 9.87903 273.867 9.875 274.063 9.87097 cv
274.254 9.875 274.41 9.87903 274.535 9.88702 cv
274.656 9.89801 274.754 9.91803 274.824 9.93701 cv
274.895 9.96503 274.941 9.99597 274.969 10.031 cv
274.992 10.074 275.004 10.117 275.008 10.168 cv
cp
f
278.223 17.133 mo
278.219 17.187 278.203 17.23 278.176 17.27 cv
278.141 17.309 278.086 17.344 278.016 17.367 cv
277.938 17.395 277.84 17.41 277.715 17.426 cv
277.59 17.437 277.43 17.445 277.242 17.445 cv
277.047 17.445 276.891 17.437 276.766 17.426 cv
276.641 17.41 276.539 17.395 276.465 17.367 cv
276.387 17.344 276.332 17.309 276.305 17.27 cv
276.27 17.23 276.254 17.187 276.258 17.133 cv
276.258 10.199 li
276.254 10.148 276.27 10.102 276.305 10.062 cv
276.332 10.023 276.387 9.992 276.465 9.961 cv
276.539 9.93701 276.641 9.914 276.766 9.89502 cv
276.891 9.883 277.047 9.875 277.242 9.87097 cv
277.43 9.875 277.59 9.883 277.715 9.89502 cv
277.84 9.914 277.938 9.93701 278.016 9.961 cv
278.086 9.992 278.141 10.023 278.176 10.062 cv
278.203 10.102 278.219 10.148 278.223 10.199 cv
cp
278.371 7.828 mo
278.371 8.22699 278.289 8.5 278.129 8.64801 cv
277.965 8.80103 277.668 8.875 277.234 8.87097 cv
276.789 8.875 276.488 8.80103 276.34 8.65601 cv
276.184 8.51202 276.109 8.25 276.109 7.867 cv
276.109 7.47302 276.188 7.19897 276.348 7.047 cv
276.504 6.89502 276.805 6.81598 277.25 6.81598 cv
277.684 6.81598 277.98 6.89099 278.137 7.039 cv
278.293 7.18701 278.371 7.453 278.371 7.828 cv
cp
f
284.301 16.449 mo
284.301 16.676 284.285 16.852 284.258 16.973 cv
284.227 17.098 284.188 17.184 284.145 17.23 cv
284.094 17.281 284.027 17.324 283.938 17.363 cv
283.844 17.402 283.734 17.434 283.617 17.465 cv
283.492 17.488 283.359 17.512 283.219 17.531 cv
283.074 17.543 282.934 17.551 282.789 17.555 cv
282.398 17.551 282.059 17.5 281.773 17.406 cv
281.488 17.305 281.254 17.156 281.066 16.949 cv
280.879 16.746 280.738 16.488 280.652 16.176 cv
280.559 15.867 280.516 15.496 280.52 15.066 cv
280.52 11.508 li
279.688 11.508 li
279.586 11.512 279.512 11.449 279.461 11.324 cv
279.406 11.203 279.379 11 279.383 10.711 cv
279.379 10.562 279.387 10.434 279.402 10.332 cv
279.414 10.23 279.434 10.148 279.461 10.086 cv
279.484 10.027 279.516 9.98401 279.559 9.95697 cv
279.594 9.93402 279.641 9.922 279.695 9.91803 cv
280.52 9.91803 li
280.52 8.367 li
280.516 8.32001 280.531 8.27301 280.563 8.22699 cv
280.59 8.18701 280.641 8.15198 280.719 8.12097 cv
280.793 8.09802 280.895 8.07397 281.023 8.05902 cv
281.148 8.047 281.305 8.04303 281.496 8.039 cv
281.684 8.04303 281.844 8.047 281.973 8.05902 cv
282.098 8.07397 282.199 8.09802 282.273 8.12097 cv
282.344 8.15198 282.395 8.18701 282.43 8.22699 cv
282.457 8.27301 282.473 8.32001 282.477 8.367 cv
282.477 9.91803 li
283.988 9.91803 li
284.039 9.922 284.086 9.93402 284.125 9.95697 cv
284.164 9.98401 284.195 10.027 284.223 10.086 cv
284.246 10.148 284.266 10.23 284.281 10.332 cv
284.293 10.434 284.301 10.562 284.301 10.711 cv
284.301 11 284.273 11.203 284.223 11.324 cv
284.168 11.449 284.094 11.512 283.996 11.508 cv
282.477 11.508 li
282.477 14.773 li
282.473 15.152 282.531 15.437 282.656 15.625 cv
282.773 15.816 282.988 15.91 283.293 15.91 cv
283.395 15.91 283.488 15.902 283.574 15.883 cv
283.656 15.867 283.73 15.848 283.797 15.82 cv
283.859 15.801 283.914 15.777 283.961 15.758 cv
284.004 15.742 284.043 15.734 284.082 15.73 cv
284.109 15.734 284.141 15.742 284.172 15.758 cv
284.199 15.777 284.219 15.816 284.238 15.867 cv
284.25 15.926 284.266 16 284.281 16.09 cv
284.293 16.187 284.301 16.305 284.301 16.449 cv
cp
f
292.363 17.133 mo
292.359 17.187 292.344 17.23 292.316 17.27 cv
292.281 17.309 292.23 17.344 292.16 17.367 cv
292.086 17.395 291.984 17.41 291.859 17.426 cv
291.73 17.437 291.574 17.445 291.391 17.445 cv
291.195 17.445 291.035 17.437 290.91 17.426 cv
290.781 17.41 290.68 17.395 290.609 17.367 cv
290.531 17.344 290.48 17.309 290.453 17.27 cv
290.418 17.23 290.402 17.187 290.406 17.133 cv
290.406 13.168 li
290.402 12.832 290.379 12.566 290.332 12.371 cv
290.281 12.18 290.207 12.016 290.117 11.879 cv
290.023 11.742 289.906 11.637 289.758 11.559 cv
289.609 11.484 289.434 11.445 289.238 11.445 cv
288.984 11.445 288.734 11.539 288.48 11.719 cv
288.227 11.902 287.961 12.164 287.688 12.512 cv
287.688 17.133 li
287.684 17.187 287.668 17.23 287.641 17.27 cv
287.605 17.309 287.551 17.344 287.48 17.367 cv
287.402 17.395 287.305 17.41 287.18 17.426 cv
287.055 17.437 286.895 17.445 286.707 17.445 cv
286.512 17.445 286.355 17.437 286.23 17.426 cv
286.105 17.41 286.004 17.395 285.93 17.367 cv
285.852 17.344 285.797 17.309 285.77 17.27 cv
285.734 17.23 285.719 17.187 285.723 17.133 cv
285.723 6.88702 li
285.719 6.836 285.734 6.789 285.77 6.74597 cv
285.797 6.70697 285.852 6.672 285.93 6.64099 cv
286.004 6.61298 286.105 6.59399 286.23 6.57397 cv
286.355 6.56201 286.512 6.55499 286.707 6.55103 cv
286.895 6.55499 287.055 6.56201 287.18 6.57397 cv
287.305 6.59399 287.402 6.61298 287.48 6.64099 cv
287.551 6.672 287.605 6.70697 287.641 6.74597 cv
287.668 6.789 287.684 6.836 287.688 6.88702 cv
287.688 10.727 li
288.023 10.398 288.367 10.152 288.719 9.98401 cv
289.066 9.82397 289.434 9.742 289.816 9.73798 cv
290.285 9.742 290.684 9.82001 291.012 9.97302 cv
291.336 10.133 291.598 10.344 291.797 10.613 cv
291.996 10.883 292.141 11.199 292.23 11.559 cv
292.316 11.922 292.359 12.359 292.363 12.871 cv
cp
f
304.039 16.598 mo
304.035 16.75 304.031 16.875 304.02 16.973 cv
304.004 17.078 303.984 17.16 303.961 17.219 cv
303.938 17.285 303.906 17.332 303.867 17.355 cv
303.828 17.387 303.785 17.398 303.738 17.398 cv
298.672 17.398 li
298.496 17.398 298.352 17.348 298.238 17.246 cv
298.117 17.145 298.059 16.98 298.063 16.75 cv
298.063 7.961 li
298.059 7.73401 298.117 7.57001 298.238 7.46503 cv
298.352 7.367 298.496 7.31598 298.672 7.31201 cv
303.707 7.31201 li
303.75 7.31598 303.793 7.328 303.832 7.35199 cv
303.867 7.37903 303.898 7.42603 303.926 7.48798 cv
303.949 7.55902 303.965 7.64099 303.98 7.73798 cv
303.988 7.84399 303.996 7.97302 304 8.125 cv
303.996 8.27301 303.988 8.39801 303.98 8.49597 cv
303.965 8.60199 303.949 8.68402 303.926 8.742 cv
303.898 8.80499 303.867 8.84802 303.832 8.875 cv
303.793 8.90601 303.75 8.922 303.707 8.91803 cv
300.105 8.91803 li
300.105 11.383 li
303.152 11.383 li
303.199 11.387 303.242 11.402 303.281 11.426 cv
303.32 11.457 303.352 11.5 303.379 11.559 cv
303.402 11.621 303.422 11.703 303.438 11.801 cv
303.449 11.902 303.457 12.023 303.457 12.168 cv
303.457 12.32 303.449 12.445 303.438 12.543 cv
303.422 12.645 303.402 12.723 303.379 12.781 cv
303.352 12.844 303.32 12.887 303.281 12.91 cv
303.242 12.937 303.199 12.953 303.152 12.949 cv
300.105 12.949 li
300.105 15.793 li
303.738 15.793 li
303.785 15.793 303.828 15.809 303.867 15.836 cv
303.906 15.867 303.938 15.914 303.961 15.973 cv
303.984 16.039 304.004 16.121 304.02 16.219 cv
304.031 16.324 304.035 16.449 304.039 16.598 cv
cp
f
307.699 17.133 mo
307.695 17.187 307.68 17.23 307.652 17.27 cv
307.617 17.309 307.563 17.344 307.492 17.367 cv
307.414 17.395 307.316 17.41 307.191 17.426 cv
307.066 17.437 306.906 17.445 306.719 17.445 cv
306.523 17.445 306.367 17.437 306.242 17.426 cv
306.117 17.41 306.016 17.395 305.941 17.367 cv
305.863 17.344 305.809 17.309 305.781 17.27 cv
305.746 17.23 305.73 17.187 305.734 17.133 cv
305.734 10.199 li
305.73 10.148 305.746 10.102 305.781 10.062 cv
305.809 10.023 305.863 9.992 305.941 9.961 cv
306.016 9.93701 306.117 9.914 306.242 9.89502 cv
306.367 9.883 306.523 9.875 306.719 9.87097 cv
306.906 9.875 307.066 9.883 307.191 9.89502 cv
307.316 9.914 307.414 9.93701 307.492 9.961 cv
307.563 9.992 307.617 10.023 307.652 10.062 cv
307.68 10.102 307.695 10.148 307.699 10.199 cv
cp
307.848 7.828 mo
307.848 8.22699 307.766 8.5 307.605 8.64801 cv
307.441 8.80103 307.145 8.875 306.711 8.87097 cv
306.266 8.875 305.965 8.80103 305.816 8.65601 cv
305.66 8.51202 305.586 8.25 305.586 7.867 cv
305.586 7.47302 305.664 7.19897 305.824 7.047 cv
305.98 6.89502 306.281 6.81598 306.727 6.81598 cv
307.16 6.81598 307.457 6.89099 307.613 7.039 cv
307.77 7.18701 307.848 7.453 307.848 7.828 cv
cp
f
315.926 10.664 mo
315.922 10.918 315.895 11.102 315.84 11.219 cv
315.781 11.34 315.711 11.398 315.633 11.398 cv
314.813 11.398 li
314.926 11.523 315.008 11.668 315.059 11.824 cv
315.105 11.984 315.129 12.148 315.133 12.316 cv
315.129 12.727 315.063 13.086 314.93 13.398 cv
314.793 13.715 314.598 13.98 314.348 14.191 cv
314.094 14.41 313.793 14.574 313.438 14.684 cv
313.078 14.801 312.68 14.855 312.25 14.852 cv
312.023 14.855 311.813 14.828 311.609 14.77 cv
311.406 14.719 311.25 14.656 311.141 14.578 cv
311.078 14.648 311.02 14.727 310.973 14.82 cv
310.922 14.914 310.898 15.02 310.902 15.129 cv
310.898 15.285 310.965 15.406 311.098 15.5 cv
311.227 15.598 311.414 15.652 311.656 15.66 cv
313.348 15.723 li
313.742 15.738 314.094 15.797 314.402 15.891 cv
314.711 15.992 314.973 16.125 315.184 16.297 cv
315.395 16.473 315.555 16.684 315.664 16.926 cv
315.773 17.172 315.828 17.445 315.832 17.758 cv
315.828 18.094 315.754 18.418 315.605 18.727 cv
315.457 19.027 315.23 19.289 314.93 19.516 cv
314.625 19.734 314.246 19.914 313.793 20.047 cv
313.336 20.176 312.805 20.238 312.203 20.242 cv
311.605 20.238 311.102 20.191 310.684 20.102 cv
310.266 20.004 309.922 19.875 309.656 19.711 cv
309.387 19.543 309.191 19.344 309.074 19.117 cv
308.949 18.883 308.891 18.629 308.891 18.355 cv
308.891 18.184 308.91 18.023 308.957 17.867 cv
308.996 17.711 309.063 17.559 309.152 17.418 cv
309.234 17.273 309.34 17.141 309.465 17.008 cv
309.59 16.879 309.73 16.754 309.895 16.633 cv
309.668 16.52 309.496 16.359 309.375 16.148 cv
309.254 15.945 309.195 15.719 309.195 15.473 cv
309.195 15.172 309.262 14.895 309.402 14.637 cv
309.539 14.387 309.723 14.156 309.949 13.953 cv
309.766 13.773 309.621 13.559 309.512 13.301 cv
309.402 13.051 309.348 12.73 309.352 12.348 cv
309.348 11.945 309.418 11.586 309.563 11.262 cv
309.703 10.945 309.902 10.676 310.16 10.453 cv
310.414 10.234 310.719 10.062 311.07 9.94501 cv
311.422 9.828 311.813 9.77002 312.242 9.77002 cv
312.461 9.77002 312.668 9.78497 312.867 9.80902 cv
313.066 9.84003 313.254 9.875 313.426 9.91803 cv
315.633 9.91803 li
315.715 9.922 315.785 9.97998 315.844 10.09 cv
315.895 10.207 315.922 10.398 315.926 10.664 cv
cp
313.41 12.309 mo
313.406 11.937 313.305 11.648 313.098 11.437 cv
312.887 11.234 312.594 11.129 312.219 11.125 cv
312.023 11.129 311.852 11.16 311.711 11.223 cv
311.563 11.289 311.441 11.379 311.348 11.488 cv
311.246 11.602 311.176 11.73 311.133 11.879 cv
311.082 12.027 311.059 12.184 311.063 12.34 cv
311.059 12.699 311.164 12.977 311.375 13.18 cv
311.582 13.387 311.871 13.492 312.242 13.488 cv
312.438 13.492 312.605 13.461 312.754 13.395 cv
312.895 13.336 313.016 13.25 313.117 13.137 cv
313.211 13.031 313.285 12.902 313.336 12.758 cv
313.383 12.617 313.406 12.469 313.41 12.309 cv
cp
313.871 17.859 mo
313.871 17.621 313.777 17.445 313.59 17.32 cv
313.402 17.199 313.145 17.129 312.816 17.117 cv
311.422 17.078 li
311.285 17.18 311.176 17.273 311.098 17.363 cv
311.016 17.453 310.953 17.539 310.906 17.625 cv
310.855 17.707 310.82 17.789 310.809 17.867 cv
310.789 17.945 310.781 18.023 310.785 18.109 cv
310.781 18.363 310.914 18.562 311.176 18.699 cv
311.438 18.832 311.809 18.898 312.289 18.902 cv
312.582 18.898 312.828 18.867 313.035 18.812 cv
313.234 18.75 313.398 18.672 313.527 18.574 cv
313.648 18.473 313.738 18.363 313.793 18.242 cv
313.844 18.121 313.871 17.992 313.871 17.859 cv
cp
f
323.867 17.133 mo
323.863 17.187 323.848 17.23 323.82 17.27 cv
323.785 17.309 323.734 17.344 323.664 17.367 cv
323.59 17.395 323.488 17.41 323.363 17.426 cv
323.234 17.437 323.078 17.445 322.895 17.445 cv
322.699 17.445 322.539 17.437 322.414 17.426 cv
322.285 17.41 322.184 17.395 322.113 17.367 cv
322.035 17.344 321.984 17.309 321.957 17.27 cv
321.922 17.23 321.906 17.187 321.91 17.133 cv
321.91 13.168 li
321.906 12.832 321.883 12.566 321.836 12.371 cv
321.785 12.18 321.711 12.016 321.621 11.879 cv
321.527 11.742 321.41 11.637 321.262 11.559 cv
321.113 11.484 320.938 11.445 320.742 11.445 cv
320.488 11.445 320.238 11.539 319.984 11.719 cv
319.73 11.902 319.465 12.164 319.191 12.512 cv
319.191 17.133 li
319.188 17.187 319.172 17.23 319.145 17.27 cv
319.109 17.309 319.055 17.344 318.984 17.367 cv
318.906 17.395 318.809 17.41 318.684 17.426 cv
318.559 17.437 318.398 17.445 318.211 17.445 cv
318.016 17.445 317.859 17.437 317.734 17.426 cv
317.609 17.41 317.508 17.395 317.434 17.367 cv
317.355 17.344 317.301 17.309 317.273 17.27 cv
317.238 17.23 317.223 17.187 317.227 17.133 cv
317.227 6.88702 li
317.223 6.836 317.238 6.789 317.273 6.74597 cv
317.301 6.70697 317.355 6.672 317.434 6.64099 cv
317.508 6.61298 317.609 6.59399 317.734 6.57397 cv
317.859 6.56201 318.016 6.55499 318.211 6.55103 cv
318.398 6.55499 318.559 6.56201 318.684 6.57397 cv
318.809 6.59399 318.906 6.61298 318.984 6.64099 cv
319.055 6.672 319.109 6.70697 319.145 6.74597 cv
319.172 6.789 319.188 6.836 319.191 6.88702 cv
319.191 10.727 li
319.527 10.398 319.871 10.152 320.223 9.98401 cv
320.57 9.82397 320.938 9.742 321.32 9.73798 cv
321.789 9.742 322.188 9.82001 322.516 9.97302 cv
322.84 10.133 323.102 10.344 323.301 10.613 cv
323.5 10.883 323.645 11.199 323.734 11.559 cv
323.82 11.922 323.863 12.359 323.867 12.871 cv
cp
f
329.785 16.449 mo
329.785 16.676 329.77 16.852 329.742 16.973 cv
329.711 17.098 329.672 17.184 329.629 17.23 cv
329.578 17.281 329.512 17.324 329.422 17.363 cv
329.328 17.402 329.219 17.434 329.102 17.465 cv
328.977 17.488 328.844 17.512 328.703 17.531 cv
328.559 17.543 328.418 17.551 328.273 17.555 cv
327.883 17.551 327.543 17.5 327.258 17.406 cv
326.973 17.305 326.738 17.156 326.551 16.949 cv
326.363 16.746 326.223 16.488 326.137 16.176 cv
326.043 15.867 326 15.496 326.004 15.066 cv
326.004 11.508 li
325.172 11.508 li
325.07 11.512 324.996 11.449 324.945 11.324 cv
324.891 11.203 324.863 11 324.867 10.711 cv
324.863 10.562 324.871 10.434 324.887 10.332 cv
324.898 10.23 324.918 10.148 324.945 10.086 cv
324.969 10.027 325 9.98401 325.043 9.95697 cv
325.078 9.93402 325.125 9.922 325.18 9.91803 cv
326.004 9.91803 li
326.004 8.367 li
326 8.32001 326.016 8.27301 326.047 8.22699 cv
326.074 8.18701 326.125 8.15198 326.203 8.12097 cv
326.277 8.09802 326.379 8.07397 326.508 8.05902 cv
326.633 8.047 326.789 8.04303 326.98 8.039 cv
327.168 8.04303 327.328 8.047 327.457 8.05902 cv
327.582 8.07397 327.684 8.09802 327.758 8.12097 cv
327.828 8.15198 327.879 8.18701 327.914 8.22699 cv
327.941 8.27301 327.957 8.32001 327.961 8.367 cv
327.961 9.91803 li
329.473 9.91803 li
329.523 9.922 329.57 9.93402 329.609 9.95697 cv
329.648 9.98401 329.68 10.027 329.707 10.086 cv
329.73 10.148 329.75 10.23 329.766 10.332 cv
329.777 10.434 329.785 10.562 329.785 10.711 cv
329.785 11 329.758 11.203 329.707 11.324 cv
329.652 11.449 329.578 11.512 329.48 11.508 cv
327.961 11.508 li
327.961 14.773 li
327.957 15.152 328.016 15.437 328.141 15.625 cv
328.258 15.816 328.473 15.91 328.777 15.91 cv
328.879 15.91 328.973 15.902 329.059 15.883 cv
329.141 15.867 329.215 15.848 329.281 15.82 cv
329.344 15.801 329.398 15.777 329.445 15.758 cv
329.488 15.742 329.527 15.734 329.566 15.73 cv
329.594 15.734 329.625 15.742 329.656 15.758 cv
329.684 15.777 329.703 15.816 329.723 15.867 cv
329.734 15.926 329.75 16 329.766 16.09 cv
329.777 16.187 329.785 16.305 329.785 16.449 cv
cp
f
341.723 8.15601 mo
341.719 8.31201 341.711 8.44098 341.703 8.54303 cv
341.688 8.65198 341.668 8.73798 341.645 8.80103 cv
341.613 8.867 341.582 8.914 341.547 8.94098 cv
341.504 8.97699 341.461 8.992 341.418 8.98798 cv
338.895 8.98798 li
338.895 17.117 li
338.895 17.172 338.875 17.219 338.844 17.258 cv
338.805 17.301 338.75 17.336 338.676 17.359 cv
338.594 17.387 338.488 17.406 338.359 17.422 cv
338.223 17.437 338.059 17.445 337.863 17.445 cv
337.668 17.445 337.504 17.437 337.371 17.422 cv
337.238 17.406 337.133 17.387 337.055 17.359 cv
336.977 17.336 336.918 17.301 336.887 17.258 cv
336.848 17.219 336.832 17.172 336.836 17.117 cv
336.836 8.98798 li
334.313 8.98798 li
334.258 8.992 334.211 8.97699 334.18 8.94098 cv
334.141 8.914 334.109 8.867 334.086 8.80103 cv
334.055 8.73798 334.035 8.65198 334.027 8.54303 cv
334.012 8.44098 334.008 8.31201 334.008 8.15601 cv
334.008 8.00403 334.012 7.87097 334.027 7.758 cv
334.035 7.65198 334.055 7.56201 334.086 7.49597 cv
334.109 7.43402 334.141 7.38702 334.18 7.35498 cv
334.211 7.328 334.258 7.31598 334.313 7.31201 cv
341.418 7.31201 li
341.461 7.31598 341.504 7.328 341.547 7.35498 cv
341.582 7.38702 341.613 7.43402 341.645 7.49597 cv
341.668 7.56201 341.688 7.65198 341.703 7.758 cv
341.711 7.87097 341.719 8.00403 341.723 8.15601 cv
cp
f
349.434 17.133 mo
349.43 17.187 349.414 17.23 349.387 17.27 cv
349.352 17.309 349.301 17.344 349.23 17.367 cv
349.156 17.395 349.055 17.41 348.93 17.426 cv
348.801 17.437 348.645 17.445 348.461 17.445 cv
348.266 17.445 348.105 17.437 347.98 17.426 cv
347.852 17.41 347.75 17.395 347.68 17.367 cv
347.602 17.344 347.551 17.309 347.523 17.27 cv
347.488 17.23 347.473 17.187 347.477 17.133 cv
347.477 13.168 li
347.473 12.832 347.449 12.566 347.402 12.371 cv
347.352 12.18 347.277 12.016 347.188 11.879 cv
347.094 11.742 346.977 11.637 346.828 11.559 cv
346.68 11.484 346.504 11.445 346.309 11.445 cv
346.055 11.445 345.805 11.539 345.551 11.719 cv
345.297 11.902 345.031 12.164 344.758 12.512 cv
344.758 17.133 li
344.754 17.187 344.738 17.23 344.711 17.27 cv
344.676 17.309 344.621 17.344 344.551 17.367 cv
344.473 17.395 344.375 17.41 344.25 17.426 cv
344.125 17.437 343.965 17.445 343.777 17.445 cv
343.582 17.445 343.426 17.437 343.301 17.426 cv
343.176 17.41 343.074 17.395 343 17.367 cv
342.922 17.344 342.867 17.309 342.84 17.27 cv
342.805 17.23 342.789 17.187 342.793 17.133 cv
342.793 6.88702 li
342.789 6.836 342.805 6.789 342.84 6.74597 cv
342.867 6.70697 342.922 6.672 343 6.64099 cv
343.074 6.61298 343.176 6.59399 343.301 6.57397 cv
343.426 6.56201 343.582 6.55499 343.777 6.55103 cv
343.965 6.55499 344.125 6.56201 344.25 6.57397 cv
344.375 6.59399 344.473 6.61298 344.551 6.64099 cv
344.621 6.672 344.676 6.70697 344.711 6.74597 cv
344.738 6.789 344.754 6.836 344.758 6.88702 cv
344.758 10.727 li
345.094 10.398 345.438 10.152 345.789 9.98401 cv
346.137 9.82397 346.504 9.742 346.887 9.73798 cv
347.355 9.742 347.754 9.82001 348.082 9.97302 cv
348.406 10.133 348.668 10.344 348.867 10.613 cv
349.066 10.883 349.211 11.199 349.301 11.559 cv
349.387 11.922 349.43 12.359 349.434 12.871 cv
cp
f
355.832 10.828 mo
355.832 11.02 355.824 11.172 355.816 11.289 cv
355.801 11.41 355.785 11.504 355.77 11.57 cv
355.746 11.641 355.719 11.687 355.688 11.711 cv
355.648 11.738 355.605 11.75 355.559 11.75 cv
355.512 11.75 355.465 11.742 355.418 11.723 cv
355.363 11.707 355.305 11.687 355.242 11.664 cv
355.172 11.645 355.102 11.625 355.027 11.605 cv
354.945 11.59 354.859 11.582 354.77 11.578 cv
354.656 11.582 354.547 11.602 354.441 11.645 cv
354.332 11.691 354.219 11.762 354.105 11.852 cv
353.984 11.945 353.863 12.07 353.738 12.223 cv
353.609 12.383 353.473 12.574 353.328 12.801 cv
353.328 17.133 li
353.324 17.187 353.309 17.23 353.281 17.27 cv
353.246 17.309 353.191 17.344 353.121 17.367 cv
353.043 17.395 352.945 17.41 352.82 17.426 cv
352.695 17.437 352.535 17.445 352.348 17.445 cv
352.152 17.445 351.996 17.437 351.871 17.426 cv
351.746 17.41 351.645 17.395 351.57 17.367 cv
351.492 17.344 351.438 17.309 351.41 17.27 cv
351.375 17.23 351.359 17.187 351.363 17.133 cv
351.363 10.184 li
351.359 10.137 351.375 10.09 351.402 10.047 cv
351.426 10.012 351.473 9.97998 351.543 9.94897 cv
351.609 9.92603 351.695 9.90601 351.805 9.89099 cv
351.91 9.883 352.043 9.875 352.207 9.87097 cv
352.371 9.875 352.508 9.883 352.617 9.89099 cv
352.723 9.90601 352.809 9.92603 352.871 9.94897 cv
352.93 9.97998 352.973 10.012 353 10.047 cv
353.023 10.09 353.035 10.137 353.039 10.184 cv
353.039 11.047 li
353.219 10.789 353.391 10.578 353.555 10.406 cv
353.711 10.242 353.867 10.105 354.016 10.004 cv
354.16 9.90601 354.305 9.84003 354.449 9.797 cv
354.594 9.76202 354.738 9.742 354.887 9.73798 cv
354.953 9.742 355.027 9.74597 355.105 9.75 cv
355.184 9.76202 355.262 9.77301 355.348 9.789 cv
355.426 9.80902 355.5 9.828 355.566 9.85199 cv
355.625 9.875 355.672 9.90198 355.703 9.92603 cv
355.73 9.95697 355.75 9.98401 355.766 10.012 cv
355.777 10.047 355.789 10.09 355.801 10.141 cv
355.809 10.199 355.816 10.281 355.824 10.387 cv
355.828 10.496 355.832 10.645 355.832 10.828 cv
cp
f
363.277 13.457 mo
363.273 13.695 363.223 13.871 363.117 13.984 cv
363.008 14.102 362.859 14.16 362.68 14.156 cv
358.445 14.156 li
358.441 14.457 358.477 14.727 358.551 14.965 cv
358.617 15.207 358.73 15.41 358.887 15.578 cv
359.039 15.75 359.234 15.879 359.477 15.965 cv
359.715 16.055 360.004 16.098 360.348 16.098 cv
360.688 16.098 360.988 16.074 361.25 16.023 cv
361.508 15.977 361.734 15.922 361.926 15.859 cv
362.113 15.801 362.27 15.746 362.398 15.695 cv
362.52 15.648 362.621 15.625 362.703 15.621 cv
362.746 15.625 362.785 15.633 362.82 15.648 cv
362.848 15.668 362.875 15.699 362.895 15.746 cv
362.914 15.793 362.926 15.859 362.938 15.945 cv
362.941 16.031 362.945 16.141 362.949 16.27 cv
362.945 16.387 362.945 16.484 362.941 16.562 cv
362.934 16.645 362.926 16.711 362.918 16.766 cv
362.906 16.824 362.891 16.875 362.871 16.91 cv
362.852 16.953 362.824 16.988 362.793 17.023 cv
362.758 17.062 362.664 17.113 362.516 17.172 cv
362.359 17.238 362.168 17.301 361.938 17.355 cv
361.699 17.418 361.43 17.465 361.133 17.512 cv
360.828 17.551 360.508 17.574 360.168 17.578 cv
359.547 17.574 359.004 17.5 358.543 17.344 cv
358.074 17.191 357.688 16.953 357.379 16.637 cv
357.063 16.32 356.828 15.922 356.68 15.437 cv
356.523 14.957 356.449 14.391 356.453 13.734 cv
356.449 13.121 356.527 12.562 356.691 12.066 cv
356.848 11.57 357.082 11.152 357.395 10.805 cv
357.699 10.461 358.074 10.195 358.512 10.012 cv
358.949 9.83197 359.441 9.742 359.996 9.73798 cv
360.574 9.742 361.074 9.828 361.488 9.99597 cv
361.902 10.172 362.238 10.41 362.504 10.711 cv
362.766 11.016 362.961 11.375 363.09 11.789 cv
363.211 12.207 363.273 12.656 363.277 13.145 cv
cp
361.375 12.895 mo
361.387 12.344 361.277 11.91 361.043 11.598 cv
360.809 11.285 360.441 11.129 359.949 11.125 cv
359.699 11.129 359.484 11.176 359.301 11.266 cv
359.113 11.363 358.961 11.488 358.84 11.645 cv
358.715 11.805 358.621 11.992 358.559 12.207 cv
358.492 12.422 358.453 12.652 358.445 12.895 cv
cp
f
370.809 17.156 mo
370.805 17.234 370.777 17.289 370.73 17.328 cv
370.676 17.371 370.594 17.398 370.484 17.418 cv
370.367 17.434 370.203 17.445 369.988 17.445 cv
369.75 17.445 369.578 17.434 369.477 17.418 cv
369.367 17.398 369.293 17.371 369.254 17.328 cv
369.207 17.289 369.188 17.234 369.188 17.156 cv
369.188 16.605 li
368.898 16.914 368.57 17.152 368.207 17.32 cv
367.84 17.492 367.434 17.574 366.988 17.578 cv
366.617 17.574 366.277 17.527 365.969 17.434 cv
365.66 17.34 365.395 17.199 365.168 17.004 cv
364.941 16.816 364.766 16.582 364.641 16.301 cv
364.516 16.023 364.453 15.695 364.457 15.316 cv
364.453 14.918 364.531 14.566 364.691 14.262 cv
364.848 13.965 365.086 13.719 365.402 13.523 cv
365.715 13.332 366.105 13.187 366.574 13.09 cv
367.043 13 367.586 12.953 368.203 12.949 cv
368.883 12.949 li
368.883 12.527 li
368.883 12.312 368.859 12.121 368.816 11.957 cv
368.77 11.797 368.695 11.66 368.598 11.547 cv
368.492 11.441 368.359 11.359 368.191 11.305 cv
368.02 11.254 367.809 11.23 367.566 11.227 cv
367.234 11.23 366.941 11.266 366.688 11.336 cv
366.426 11.41 366.199 11.492 366.004 11.578 cv
365.805 11.672 365.641 11.75 365.512 11.82 cv
365.375 11.895 365.266 11.934 365.188 11.93 cv
365.125 11.934 365.074 11.914 365.035 11.875 cv
364.988 11.84 364.953 11.789 364.926 11.719 cv
364.895 11.656 364.871 11.57 364.859 11.469 cv
364.84 11.371 364.832 11.262 364.836 11.141 cv
364.832 10.98 364.848 10.855 364.875 10.758 cv
364.898 10.668 364.945 10.582 365.023 10.504 cv
365.094 10.43 365.223 10.348 365.406 10.258 cv
365.586 10.168 365.797 10.082 366.043 10.004 cv
366.285 9.92603 366.555 9.86298 366.844 9.81201 cv
367.133 9.76599 367.43 9.742 367.738 9.73798 cv
368.281 9.742 368.746 9.79303 369.133 9.89801 cv
369.52 10.008 369.84 10.172 370.09 10.391 cv
370.34 10.609 370.52 10.895 370.637 11.242 cv
370.746 11.594 370.805 12.008 370.809 12.48 cv
cp
368.883 14.18 mo
368.133 14.18 li
367.816 14.184 367.547 14.207 367.324 14.25 cv
367.098 14.301 366.914 14.371 366.777 14.461 cv
366.633 14.559 366.531 14.672 366.469 14.801 cv
366.402 14.937 366.367 15.086 366.371 15.254 cv
366.367 15.547 366.461 15.777 366.648 15.941 cv
366.832 16.109 367.09 16.191 367.418 16.191 cv
367.691 16.191 367.941 16.121 368.176 15.98 cv
368.402 15.84 368.641 15.637 368.883 15.363 cv
cp
f
379.391 17.133 mo
379.387 17.195 379.375 17.242 379.352 17.277 cv
379.324 17.32 379.277 17.352 379.219 17.375 cv
379.152 17.398 379.07 17.414 378.965 17.43 cv
378.859 17.437 378.727 17.445 378.574 17.445 cv
378.402 17.445 378.27 17.437 378.168 17.43 cv
378.063 17.414 377.977 17.398 377.914 17.375 cv
377.848 17.352 377.801 17.32 377.773 17.277 cv
377.742 17.242 377.727 17.195 377.73 17.133 cv
377.73 16.363 li
377.371 16.75 376.996 17.047 376.605 17.258 cv
376.207 17.469 375.773 17.574 375.301 17.578 cv
374.766 17.574 374.316 17.473 373.953 17.27 cv
373.586 17.066 373.289 16.793 373.059 16.441 cv
372.824 16.098 372.656 15.691 372.555 15.223 cv
372.453 14.762 372.402 14.27 372.402 13.75 cv
372.402 13.137 372.465 12.582 372.598 12.086 cv
372.727 11.594 372.922 11.172 373.18 10.824 cv
373.434 10.477 373.75 10.211 374.129 10.02 cv
374.508 9.836 374.945 9.742 375.441 9.73798 cv
375.828 9.742 376.18 9.82001 376.5 9.97699 cv
376.813 10.137 377.129 10.367 377.441 10.672 cv
377.441 6.90997 li
377.441 6.85901 377.453 6.81201 377.484 6.77002 cv
377.508 6.72998 377.563 6.69501 377.641 6.664 cv
377.715 6.63702 377.813 6.617 377.941 6.59802 cv
378.063 6.586 378.223 6.578 378.418 6.57397 cv
378.609 6.578 378.766 6.586 378.891 6.59802 cv
379.012 6.617 379.113 6.63702 379.188 6.664 cv
379.258 6.69501 379.309 6.72998 379.344 6.77002 cv
379.371 6.81201 379.387 6.85901 379.391 6.90997 cv
cp
377.441 12.488 mo
377.16 12.137 376.891 11.867 376.637 11.68 cv
376.375 11.492 376.105 11.398 375.828 11.398 cv
375.574 11.398 375.355 11.465 375.172 11.59 cv
374.984 11.723 374.836 11.891 374.727 12.102 cv
374.613 12.312 374.531 12.551 374.477 12.812 cv
374.422 13.078 374.395 13.348 374.395 13.617 cv
374.395 13.914 374.418 14.195 374.465 14.469 cv
374.512 14.746 374.586 14.992 374.695 15.207 cv
374.797 15.422 374.941 15.594 375.121 15.723 cv
375.297 15.855 375.52 15.922 375.789 15.918 cv
375.922 15.922 376.051 15.902 376.184 15.859 cv
376.309 15.824 376.441 15.762 376.574 15.668 cv
376.707 15.582 376.844 15.465 376.984 15.32 cv
377.125 15.18 377.277 15.004 377.441 14.797 cv
cp
f
386.215 15.168 mo
386.211 15.566 386.137 15.914 385.992 16.215 cv
385.844 16.516 385.637 16.77 385.367 16.969 cv
385.094 17.176 384.773 17.324 384.406 17.426 cv
384.039 17.523 383.637 17.574 383.207 17.578 cv
382.941 17.574 382.695 17.555 382.461 17.52 cv
382.227 17.477 382.016 17.43 381.828 17.371 cv
381.641 17.312 381.484 17.25 381.359 17.187 cv
381.234 17.125 381.141 17.066 381.086 17.012 cv
381.027 16.957 380.984 16.875 380.957 16.758 cv
380.922 16.645 380.906 16.469 380.91 16.238 cv
380.906 16.09 380.914 15.969 380.926 15.875 cv
380.934 15.785 380.949 15.715 380.973 15.656 cv
380.992 15.605 381.016 15.566 381.051 15.547 cv
381.078 15.531 381.117 15.523 381.164 15.52 cv
381.219 15.523 381.305 15.555 381.418 15.617 cv
381.527 15.684 381.664 15.758 381.836 15.832 cv
382 15.914 382.195 15.984 382.414 16.051 cv
382.633 16.121 382.883 16.156 383.168 16.152 cv
383.344 16.156 383.5 16.137 383.641 16.098 cv
383.773 16.062 383.895 16.012 384 15.941 cv
384.098 15.875 384.172 15.789 384.227 15.684 cv
384.273 15.582 384.301 15.461 384.305 15.324 cv
384.301 15.168 384.254 15.035 384.16 14.926 cv
384.066 14.816 383.938 14.719 383.781 14.633 cv
383.617 14.551 383.438 14.473 383.242 14.398 cv
383.039 14.328 382.836 14.25 382.625 14.156 cv
382.414 14.07 382.207 13.969 382.012 13.852 cv
381.809 13.742 381.629 13.602 381.473 13.434 cv
381.309 13.27 381.184 13.07 381.09 12.832 cv
380.996 12.602 380.949 12.32 380.949 11.988 cv
380.949 11.66 381.012 11.355 381.141 11.074 cv
381.27 10.801 381.457 10.562 381.703 10.363 cv
381.945 10.168 382.242 10.016 382.594 9.90198 cv
382.941 9.797 383.336 9.742 383.777 9.73798 cv
383.992 9.742 384.203 9.758 384.41 9.78497 cv
384.613 9.82001 384.801 9.85901 384.969 9.90198 cv
385.133 9.953 385.273 10.004 385.391 10.055 cv
385.504 10.113 385.586 10.16 385.637 10.195 cv
385.684 10.238 385.719 10.277 385.742 10.312 cv
385.762 10.355 385.773 10.402 385.785 10.453 cv
385.793 10.508 385.805 10.574 385.813 10.652 cv
385.82 10.738 385.824 10.836 385.824 10.953 cv
385.824 11.094 385.82 11.211 385.813 11.297 cv
385.805 11.391 385.789 11.461 385.773 11.508 cv
385.754 11.562 385.73 11.598 385.703 11.613 cv
385.668 11.637 385.633 11.645 385.594 11.641 cv
385.543 11.645 385.469 11.617 385.375 11.559 cv
385.273 11.508 385.152 11.449 385.004 11.383 cv
384.855 11.324 384.684 11.266 384.488 11.207 cv
384.293 11.156 384.07 11.129 383.824 11.125 cv
383.645 11.129 383.492 11.148 383.363 11.18 cv
383.23 11.219 383.121 11.27 383.043 11.336 cv
382.957 11.406 382.895 11.484 382.855 11.574 cv
382.809 11.668 382.789 11.766 382.793 11.867 cv
382.789 12.027 382.84 12.164 382.941 12.27 cv
383.039 12.383 383.168 12.477 383.332 12.559 cv
383.492 12.645 383.676 12.723 383.883 12.793 cv
384.086 12.867 384.293 12.949 384.504 13.031 cv
384.711 13.121 384.918 13.219 385.129 13.332 cv
385.332 13.445 385.516 13.586 385.676 13.75 cv
385.836 13.918 385.965 14.117 386.066 14.348 cv
386.16 14.582 386.211 14.855 386.215 15.168 cv
cp
f
394.957 13.48 mo
394.953 13.781 394.926 13.992 394.871 14.109 cv
394.813 14.234 394.723 14.293 394.598 14.289 cv
391.355 14.289 li
391.227 14.293 391.133 14.23 391.078 14.105 cv
391.016 13.984 390.988 13.777 390.992 13.48 cv
390.988 13.191 391.016 12.984 391.078 12.863 cv
391.133 12.746 391.227 12.687 391.355 12.684 cv
394.598 12.684 li
394.66 12.687 394.711 12.699 394.758 12.723 cv
394.797 12.75 394.836 12.797 394.871 12.855 cv
394.898 12.922 394.922 13.004 394.938 13.105 cv
394.949 13.211 394.953 13.336 394.957 13.48 cv
cp
f
407.629 17.133 mo
407.629 17.195 407.617 17.242 407.598 17.277 cv
407.578 17.32 407.531 17.352 407.453 17.375 cv
407.375 17.398 407.258 17.414 407.109 17.43 cv
406.953 17.437 406.75 17.445 406.492 17.445 cv
406.273 17.445 406.098 17.437 405.969 17.43 cv
405.84 17.414 405.738 17.398 405.664 17.371 cv
405.586 17.344 405.531 17.309 405.504 17.262 cv
405.469 17.223 405.445 17.168 405.426 17.102 cv
404.52 14.852 li
404.41 14.598 404.305 14.371 404.203 14.172 cv
404.094 13.977 403.98 13.812 403.855 13.68 cv
403.727 13.551 403.578 13.449 403.414 13.379 cv
403.246 13.312 403.055 13.281 402.84 13.277 cv
402.199 13.277 li
402.199 17.117 li
402.195 17.172 402.18 17.219 402.148 17.258 cv
402.113 17.301 402.059 17.336 401.98 17.359 cv
401.902 17.387 401.797 17.406 401.668 17.422 cv
401.535 17.437 401.371 17.445 401.172 17.445 cv
400.973 17.445 400.805 17.437 400.676 17.422 cv
400.539 17.406 400.434 17.387 400.359 17.359 cv
400.277 17.336 400.223 17.301 400.195 17.258 cv
400.16 17.219 400.145 17.172 400.148 17.117 cv
400.148 7.961 li
400.145 7.73401 400.203 7.57001 400.324 7.46503 cv
400.438 7.367 400.582 7.31598 400.758 7.31201 cv
403.367 7.31201 li
403.629 7.31598 403.848 7.32001 404.023 7.328 cv
404.191 7.34003 404.348 7.35199 404.492 7.367 cv
404.895 7.42603 405.258 7.52698 405.582 7.664 cv
405.906 7.80902 406.184 7.992 406.41 8.21503 cv
406.637 8.44501 406.809 8.711 406.93 9.02002 cv
407.047 9.328 407.105 9.68402 407.109 10.082 cv
407.105 10.422 407.063 10.73 406.98 11.004 cv
406.891 11.285 406.766 11.531 406.602 11.75 cv
406.434 11.969 406.227 12.16 405.984 12.316 cv
405.738 12.48 405.461 12.609 405.152 12.707 cv
405.301 12.781 405.445 12.871 405.578 12.973 cv
405.711 13.082 405.832 13.207 405.949 13.352 cv
406.063 13.5 406.176 13.668 406.281 13.855 cv
406.383 14.047 406.484 14.262 406.586 14.5 cv
407.438 16.488 li
407.512 16.687 407.563 16.828 407.59 16.918 cv
407.613 17.012 407.629 17.086 407.629 17.133 cv
cp
404.988 10.293 mo
404.984 9.961 404.91 9.67999 404.762 9.44897 cv
404.609 9.22302 404.363 9.06201 404.023 8.96503 cv
403.918 8.94098 403.801 8.91803 403.668 8.90198 cv
403.535 8.88702 403.352 8.87903 403.117 8.87903 cv
402.199 8.87903 li
402.199 11.742 li
403.242 11.742 li
403.531 11.746 403.789 11.711 404.008 11.637 cv
404.227 11.57 404.406 11.469 404.551 11.34 cv
404.695 11.215 404.805 11.062 404.879 10.883 cv
404.949 10.707 404.984 10.512 404.988 10.293 cv
cp
f
415.215 13.457 mo
415.211 13.695 415.16 13.871 415.055 13.984 cv
414.945 14.102 414.797 14.16 414.617 14.156 cv
410.383 14.156 li
410.379 14.457 410.414 14.727 410.488 14.965 cv
410.555 15.207 410.668 15.41 410.824 15.578 cv
410.977 15.75 411.172 15.879 411.414 15.965 cv
411.652 16.055 411.941 16.098 412.285 16.098 cv
412.625 16.098 412.926 16.074 413.188 16.023 cv
413.445 15.977 413.672 15.922 413.863 15.859 cv
414.051 15.801 414.207 15.746 414.336 15.695 cv
414.457 15.648 414.559 15.625 414.641 15.621 cv
414.684 15.625 414.723 15.633 414.758 15.648 cv
414.785 15.668 414.813 15.699 414.832 15.746 cv
414.852 15.793 414.863 15.859 414.875 15.945 cv
414.879 16.031 414.883 16.141 414.887 16.27 cv
414.883 16.387 414.883 16.484 414.879 16.562 cv
414.871 16.645 414.863 16.711 414.855 16.766 cv
414.844 16.824 414.828 16.875 414.809 16.91 cv
414.789 16.953 414.762 16.988 414.73 17.023 cv
414.695 17.062 414.602 17.113 414.453 17.172 cv
414.297 17.238 414.105 17.301 413.875 17.355 cv
413.637 17.418 413.367 17.465 413.07 17.512 cv
412.766 17.551 412.445 17.574 412.105 17.578 cv
411.484 17.574 410.941 17.5 410.48 17.344 cv
410.012 17.191 409.625 16.953 409.316 16.637 cv
409 16.32 408.766 15.922 408.617 15.437 cv
408.461 14.957 408.387 14.391 408.391 13.734 cv
408.387 13.121 408.465 12.562 408.629 12.066 cv
408.785 11.57 409.02 11.152 409.332 10.805 cv
409.637 10.461 410.012 10.195 410.449 10.012 cv
410.887 9.83197 411.379 9.742 411.934 9.73798 cv
412.512 9.742 413.012 9.828 413.426 9.99597 cv
413.84 10.172 414.176 10.41 414.441 10.711 cv
414.703 11.016 414.898 11.375 415.027 11.789 cv
415.148 12.207 415.211 12.656 415.215 13.145 cv
cp
413.313 12.895 mo
413.324 12.344 413.215 11.91 412.98 11.598 cv
412.746 11.285 412.379 11.129 411.887 11.125 cv
411.637 11.129 411.422 11.176 411.238 11.266 cv
411.051 11.363 410.898 11.488 410.777 11.645 cv
410.652 11.805 410.559 11.992 410.496 12.207 cv
410.43 12.422 410.391 12.652 410.383 12.895 cv
cp
f
427.879 17.133 mo
427.875 17.187 427.859 17.23 427.832 17.27 cv
427.797 17.309 427.746 17.344 427.676 17.367 cv
427.602 17.395 427.5 17.41 427.379 17.426 cv
427.254 17.437 427.098 17.445 426.906 17.445 cv
426.707 17.445 426.547 17.437 426.422 17.426 cv
426.297 17.41 426.195 17.395 426.121 17.367 cv
426.043 17.344 425.992 17.309 425.965 17.27 cv
425.938 17.23 425.922 17.187 425.926 17.133 cv
425.926 13.012 li
425.922 12.781 425.902 12.566 425.859 12.371 cv
425.813 12.18 425.742 12.016 425.656 11.879 cv
425.563 11.742 425.449 11.637 425.313 11.559 cv
425.172 11.484 425.008 11.445 424.816 11.445 cv
424.582 11.445 424.344 11.539 424.105 11.719 cv
423.867 11.902 423.609 12.164 423.328 12.512 cv
423.328 17.133 li
423.328 17.187 423.313 17.23 423.281 17.27 cv
423.25 17.309 423.195 17.344 423.121 17.367 cv
423.043 17.395 422.941 17.41 422.82 17.426 cv
422.695 17.437 422.543 17.445 422.355 17.445 cv
422.16 17.445 422 17.437 421.879 17.426 cv
421.75 17.41 421.648 17.395 421.578 17.367 cv
421.5 17.344 421.449 17.309 421.418 17.27 cv
421.387 17.23 421.371 17.187 421.371 17.133 cv
421.371 13.012 li
421.371 12.781 421.348 12.566 421.305 12.371 cv
421.262 12.18 421.195 12.016 421.109 11.879 cv
421.016 11.742 420.902 11.637 420.766 11.559 cv
420.621 11.484 420.457 11.445 420.273 11.445 cv
420.031 11.445 419.793 11.539 419.555 11.719 cv
419.316 11.902 419.059 12.164 418.785 12.512 cv
418.785 17.133 li
418.781 17.187 418.766 17.23 418.738 17.27 cv
418.703 17.309 418.648 17.344 418.578 17.367 cv
418.5 17.395 418.402 17.41 418.277 17.426 cv
418.152 17.437 417.992 17.445 417.805 17.445 cv
417.609 17.445 417.453 17.437 417.328 17.426 cv
417.203 17.41 417.102 17.395 417.027 17.367 cv
416.949 17.344 416.895 17.309 416.867 17.27 cv
416.832 17.23 416.816 17.187 416.82 17.133 cv
416.82 10.184 li
416.816 10.137 416.832 10.09 416.859 10.047 cv
416.883 10.012 416.93 9.97998 417 9.94897 cv
417.066 9.92603 417.152 9.90601 417.262 9.89099 cv
417.367 9.883 417.5 9.875 417.664 9.87097 cv
417.828 9.875 417.965 9.883 418.074 9.89099 cv
418.18 9.90601 418.266 9.92603 418.328 9.94897 cv
418.387 9.97998 418.43 10.012 418.457 10.047 cv
418.48 10.09 418.492 10.137 418.496 10.184 cv
418.496 10.984 li
418.879 10.574 419.262 10.262 419.645 10.051 cv
420.023 9.84399 420.426 9.742 420.844 9.73798 cv
421.129 9.742 421.383 9.77002 421.613 9.828 cv
421.84 9.89099 422.047 9.97699 422.227 10.086 cv
422.406 10.199 422.559 10.336 422.688 10.488 cv
422.816 10.645 422.926 10.816 423.016 11.008 cv
423.223 10.785 423.426 10.594 423.629 10.434 cv
423.824 10.273 424.023 10.141 424.219 10.039 cv
424.414 9.93701 424.609 9.86298 424.805 9.81201 cv
425 9.76599 425.199 9.742 425.402 9.73798 cv
425.863 9.742 426.25 9.82001 426.57 9.97302 cv
426.883 10.133 427.141 10.344 427.336 10.609 cv
427.531 10.879 427.668 11.191 427.754 11.547 cv
427.832 11.906 427.875 12.285 427.879 12.684 cv
cp
f
436.828 13.586 mo
436.824 14.184 436.746 14.727 436.594 15.211 cv
436.434 15.703 436.199 16.121 435.883 16.473 cv
435.566 16.824 435.168 17.098 434.691 17.289 cv
434.211 17.48 433.652 17.574 433.016 17.578 cv
432.395 17.574 431.855 17.492 431.402 17.32 cv
430.941 17.152 430.563 16.902 430.266 16.574 cv
429.961 16.25 429.738 15.848 429.594 15.367 cv
429.449 14.891 429.379 14.344 429.379 13.727 cv
429.379 13.137 429.457 12.598 429.613 12.105 cv
429.77 11.617 430.008 11.195 430.328 10.844 cv
430.645 10.496 431.039 10.223 431.516 10.027 cv
431.988 9.836 432.547 9.742 433.188 9.73798 cv
433.813 9.742 434.352 9.82397 434.809 9.992 cv
435.266 10.164 435.645 10.414 435.941 10.738 cv
436.238 11.066 436.461 11.469 436.609 11.945 cv
436.754 12.426 436.824 12.973 436.828 13.586 cv
cp
434.809 13.664 mo
434.805 13.328 434.777 13.012 434.727 12.719 cv
434.668 12.434 434.574 12.184 434.449 11.969 cv
434.316 11.758 434.145 11.59 433.934 11.469 cv
433.715 11.352 433.445 11.293 433.117 11.289 cv
432.828 11.293 432.574 11.348 432.355 11.449 cv
432.137 11.559 431.957 11.715 431.816 11.918 cv
431.676 12.125 431.57 12.371 431.5 12.656 cv
431.43 12.949 431.395 13.277 431.395 13.641 cv
431.395 13.988 431.422 14.305 431.48 14.59 cv
431.535 14.883 431.629 15.133 431.758 15.344 cv
431.883 15.559 432.055 15.723 432.277 15.836 cv
432.492 15.957 432.762 16.016 433.086 16.012 cv
433.379 16.016 433.637 15.961 433.859 15.852 cv
434.074 15.746 434.254 15.594 434.395 15.387 cv
434.535 15.187 434.637 14.941 434.707 14.652 cv
434.77 14.367 434.805 14.039 434.809 13.664 cv
cp
f
442.531 16.449 mo
442.531 16.676 442.516 16.852 442.488 16.973 cv
442.457 17.098 442.418 17.184 442.375 17.23 cv
442.324 17.281 442.258 17.324 442.168 17.363 cv
442.074 17.402 441.965 17.434 441.848 17.465 cv
441.723 17.488 441.59 17.512 441.449 17.531 cv
441.305 17.543 441.164 17.551 441.02 17.555 cv
440.629 17.551 440.289 17.5 440.004 17.406 cv
439.719 17.305 439.484 17.156 439.297 16.949 cv
439.109 16.746 438.969 16.488 438.883 16.176 cv
438.789 15.867 438.746 15.496 438.75 15.066 cv
438.75 11.508 li
437.918 11.508 li
437.816 11.512 437.742 11.449 437.691 11.324 cv
437.637 11.203 437.609 11 437.613 10.711 cv
437.609 10.562 437.617 10.434 437.633 10.332 cv
437.645 10.23 437.664 10.148 437.691 10.086 cv
437.715 10.027 437.746 9.98401 437.789 9.95697 cv
437.824 9.93402 437.871 9.922 437.926 9.91803 cv
438.75 9.91803 li
438.75 8.367 li
438.746 8.32001 438.762 8.27301 438.793 8.22699 cv
438.82 8.18701 438.871 8.15198 438.949 8.12097 cv
439.023 8.09802 439.125 8.07397 439.254 8.05902 cv
439.379 8.047 439.535 8.04303 439.727 8.039 cv
439.914 8.04303 440.074 8.047 440.203 8.05902 cv
440.328 8.07397 440.43 8.09802 440.504 8.12097 cv
440.574 8.15198 440.625 8.18701 440.66 8.22699 cv
440.688 8.27301 440.703 8.32001 440.707 8.367 cv
440.707 9.91803 li
442.219 9.91803 li
442.27 9.922 442.316 9.93402 442.355 9.95697 cv
442.395 9.98401 442.426 10.027 442.453 10.086 cv
442.477 10.148 442.496 10.23 442.512 10.332 cv
442.523 10.434 442.531 10.562 442.531 10.711 cv
442.531 11 442.504 11.203 442.453 11.324 cv
442.398 11.449 442.324 11.512 442.227 11.508 cv
440.707 11.508 li
440.707 14.773 li
440.703 15.152 440.762 15.437 440.887 15.625 cv
441.004 15.816 441.219 15.91 441.523 15.91 cv
441.625 15.91 441.719 15.902 441.805 15.883 cv
441.887 15.867 441.961 15.848 442.027 15.82 cv
442.09 15.801 442.145 15.777 442.191 15.758 cv
442.234 15.742 442.273 15.734 442.313 15.73 cv
442.34 15.734 442.371 15.742 442.402 15.758 cv
442.43 15.777 442.449 15.816 442.469 15.867 cv
442.48 15.926 442.496 16 442.512 16.09 cv
442.523 16.187 442.531 16.305 442.531 16.449 cv
cp
f
450.117 13.457 mo
450.113 13.695 450.063 13.871 449.957 13.984 cv
449.848 14.102 449.699 14.16 449.52 14.156 cv
445.285 14.156 li
445.281 14.457 445.316 14.727 445.391 14.965 cv
445.457 15.207 445.57 15.41 445.727 15.578 cv
445.879 15.75 446.074 15.879 446.316 15.965 cv
446.555 16.055 446.844 16.098 447.188 16.098 cv
447.527 16.098 447.828 16.074 448.09 16.023 cv
448.348 15.977 448.574 15.922 448.766 15.859 cv
448.953 15.801 449.109 15.746 449.238 15.695 cv
449.359 15.648 449.461 15.625 449.543 15.621 cv
449.586 15.625 449.625 15.633 449.66 15.648 cv
449.688 15.668 449.715 15.699 449.734 15.746 cv
449.754 15.793 449.766 15.859 449.777 15.945 cv
449.781 16.031 449.785 16.141 449.789 16.27 cv
449.785 16.387 449.785 16.484 449.781 16.562 cv
449.773 16.645 449.766 16.711 449.758 16.766 cv
449.746 16.824 449.73 16.875 449.711 16.91 cv
449.691 16.953 449.664 16.988 449.633 17.023 cv
449.598 17.062 449.504 17.113 449.355 17.172 cv
449.199 17.238 449.008 17.301 448.777 17.355 cv
448.539 17.418 448.27 17.465 447.973 17.512 cv
447.668 17.551 447.348 17.574 447.008 17.578 cv
446.387 17.574 445.844 17.5 445.383 17.344 cv
444.914 17.191 444.527 16.953 444.219 16.637 cv
443.902 16.32 443.668 15.922 443.52 15.437 cv
443.363 14.957 443.289 14.391 443.293 13.734 cv
443.289 13.121 443.367 12.562 443.531 12.066 cv
443.688 11.57 443.922 11.152 444.234 10.805 cv
444.539 10.461 444.914 10.195 445.352 10.012 cv
445.789 9.83197 446.281 9.742 446.836 9.73798 cv
447.414 9.742 447.914 9.828 448.328 9.99597 cv
448.742 10.172 449.078 10.41 449.344 10.711 cv
449.605 11.016 449.801 11.375 449.93 11.789 cv
450.051 12.207 450.113 12.656 450.117 13.145 cv
cp
448.215 12.895 mo
448.227 12.344 448.117 11.91 447.883 11.598 cv
447.648 11.285 447.281 11.129 446.789 11.125 cv
446.539 11.129 446.324 11.176 446.141 11.266 cv
445.953 11.363 445.801 11.488 445.68 11.645 cv
445.555 11.805 445.461 11.992 445.398 12.207 cv
445.332 12.422 445.293 12.652 445.285 12.895 cv
cp
f
467.316 17.117 mo
467.313 17.172 467.301 17.219 467.273 17.258 cv
467.242 17.301 467.188 17.336 467.117 17.359 cv
467.039 17.387 466.941 17.406 466.816 17.422 cv
466.691 17.437 466.531 17.445 466.34 17.445 cv
466.152 17.445 465.996 17.437 465.875 17.422 cv
465.746 17.406 465.648 17.387 465.578 17.359 cv
465.504 17.336 465.453 17.301 465.422 17.258 cv
465.391 17.219 465.375 17.172 465.375 17.117 cv
465.375 8.90997 li
465.359 8.90997 li
462.438 17.109 li
462.414 17.18 462.379 17.234 462.336 17.277 cv
462.285 17.324 462.223 17.359 462.145 17.383 cv
462.063 17.41 461.961 17.426 461.836 17.434 cv
461.711 17.441 461.559 17.445 461.387 17.445 cv
461.207 17.445 461.059 17.437 460.934 17.426 cv
460.809 17.41 460.703 17.391 460.625 17.363 cv
460.539 17.336 460.477 17.301 460.434 17.258 cv
460.383 17.219 460.352 17.172 460.34 17.109 cv
457.52 8.90997 li
457.504 8.90997 li
457.504 17.117 li
457.5 17.172 457.484 17.219 457.461 17.258 cv
457.43 17.301 457.379 17.336 457.301 17.359 cv
457.223 17.387 457.121 17.406 457 17.422 cv
456.875 17.437 456.719 17.445 456.531 17.445 cv
456.34 17.445 456.184 17.437 456.063 17.422 cv
455.934 17.406 455.832 17.387 455.762 17.359 cv
455.684 17.336 455.633 17.301 455.605 17.258 cv
455.574 17.219 455.559 17.172 455.563 17.117 cv
455.563 8.133 li
455.559 7.87097 455.629 7.66803 455.773 7.52301 cv
455.91 7.38702 456.098 7.31598 456.336 7.31201 cv
457.676 7.31201 li
457.914 7.31598 458.117 7.336 458.289 7.37097 cv
458.457 7.414 458.605 7.47699 458.734 7.56598 cv
458.855 7.65997 458.961 7.78101 459.047 7.92603 cv
459.129 8.078 459.199 8.26202 459.266 8.47699 cv
461.449 14.484 li
461.48 14.484 li
463.738 8.492 li
463.805 8.27301 463.879 8.09003 463.961 7.93701 cv
464.039 7.789 464.133 7.66803 464.242 7.57001 cv
464.348 7.47998 464.473 7.414 464.617 7.37097 cv
464.762 7.336 464.93 7.31598 465.125 7.31201 cv
466.504 7.31201 li
466.641 7.31598 466.762 7.33197 466.867 7.367 cv
466.965 7.40601 467.047 7.461 467.117 7.52698 cv
467.18 7.60199 467.23 7.68701 467.266 7.78497 cv
467.297 7.89099 467.313 8.008 467.316 8.133 cv
cp
f
476.426 13.586 mo
476.422 14.184 476.344 14.727 476.191 15.211 cv
476.031 15.703 475.797 16.121 475.48 16.473 cv
475.164 16.824 474.766 17.098 474.289 17.289 cv
473.809 17.48 473.25 17.574 472.613 17.578 cv
471.992 17.574 471.453 17.492 471 17.32 cv
470.539 17.152 470.16 16.902 469.863 16.574 cv
469.559 16.25 469.336 15.848 469.191 15.367 cv
469.047 14.891 468.977 14.344 468.977 13.727 cv
468.977 13.137 469.055 12.598 469.211 12.105 cv
469.367 11.617 469.605 11.195 469.926 10.844 cv
470.242 10.496 470.637 10.223 471.113 10.027 cv
471.586 9.836 472.145 9.742 472.785 9.73798 cv
473.41 9.742 473.949 9.82397 474.406 9.992 cv
474.863 10.164 475.242 10.414 475.539 10.738 cv
475.836 11.066 476.059 11.469 476.207 11.945 cv
476.352 12.426 476.422 12.973 476.426 13.586 cv
cp
474.406 13.664 mo
474.402 13.328 474.375 13.012 474.324 12.719 cv
474.266 12.434 474.172 12.184 474.047 11.969 cv
473.914 11.758 473.742 11.59 473.531 11.469 cv
473.313 11.352 473.043 11.293 472.715 11.289 cv
472.426 11.293 472.172 11.348 471.953 11.449 cv
471.734 11.559 471.555 11.715 471.414 11.918 cv
471.273 12.125 471.168 12.371 471.098 12.656 cv
471.027 12.949 470.992 13.277 470.992 13.641 cv
470.992 13.988 471.02 14.305 471.078 14.59 cv
471.133 14.883 471.227 15.133 471.355 15.344 cv
471.48 15.559 471.652 15.723 471.875 15.836 cv
472.09 15.957 472.359 16.016 472.684 16.012 cv
472.977 16.016 473.234 15.961 473.457 15.852 cv
473.672 15.746 473.852 15.594 473.992 15.387 cv
474.133 15.187 474.234 14.941 474.305 14.652 cv
474.367 14.367 474.402 14.039 474.406 13.664 cv
cp
f
484.574 17.133 mo
484.57 17.195 484.559 17.242 484.535 17.277 cv
484.508 17.32 484.461 17.352 484.402 17.375 cv
484.336 17.398 484.254 17.414 484.148 17.43 cv
484.043 17.437 483.91 17.445 483.758 17.445 cv
483.586 17.445 483.453 17.437 483.352 17.43 cv
483.246 17.414 483.16 17.398 483.098 17.375 cv
483.031 17.352 482.984 17.32 482.957 17.277 cv
482.926 17.242 482.91 17.195 482.914 17.133 cv
482.914 16.363 li
482.555 16.75 482.18 17.047 481.789 17.258 cv
481.391 17.469 480.957 17.574 480.484 17.578 cv
479.949 17.574 479.5 17.473 479.137 17.27 cv
478.77 17.066 478.473 16.793 478.242 16.441 cv
478.008 16.098 477.84 15.691 477.738 15.223 cv
477.637 14.762 477.586 14.27 477.586 13.75 cv
477.586 13.137 477.648 12.582 477.781 12.086 cv
477.91 11.594 478.105 11.172 478.363 10.824 cv
478.617 10.477 478.934 10.211 479.313 10.02 cv
479.691 9.836 480.129 9.742 480.625 9.73798 cv
481.012 9.742 481.363 9.82001 481.684 9.97699 cv
481.996 10.137 482.313 10.367 482.625 10.672 cv
482.625 6.90997 li
482.625 6.85901 482.637 6.81201 482.668 6.77002 cv
482.691 6.72998 482.746 6.69501 482.824 6.664 cv
482.898 6.63702 482.996 6.617 483.125 6.59802 cv
483.246 6.586 483.406 6.578 483.602 6.57397 cv
483.793 6.578 483.949 6.586 484.074 6.59802 cv
484.195 6.617 484.297 6.63702 484.371 6.664 cv
484.441 6.69501 484.492 6.72998 484.527 6.77002 cv
484.555 6.81201 484.57 6.85901 484.574 6.90997 cv
cp
482.625 12.488 mo
482.344 12.137 482.074 11.867 481.82 11.68 cv
481.559 11.492 481.289 11.398 481.012 11.398 cv
480.758 11.398 480.539 11.465 480.355 11.59 cv
480.168 11.723 480.02 11.891 479.91 12.102 cv
479.797 12.312 479.715 12.551 479.66 12.812 cv
479.605 13.078 479.578 13.348 479.578 13.617 cv
479.578 13.914 479.602 14.195 479.648 14.469 cv
479.695 14.746 479.77 14.992 479.879 15.207 cv
479.98 15.422 480.125 15.594 480.305 15.723 cv
480.48 15.855 480.703 15.922 480.973 15.918 cv
481.105 15.922 481.234 15.902 481.367 15.859 cv
481.492 15.824 481.625 15.762 481.758 15.668 cv
481.891 15.582 482.027 15.465 482.168 15.32 cv
482.309 15.18 482.461 15.004 482.625 14.797 cv
cp
f
492.973 13.457 mo
492.969 13.695 492.918 13.871 492.813 13.984 cv
492.703 14.102 492.555 14.16 492.375 14.156 cv
488.141 14.156 li
488.137 14.457 488.172 14.727 488.246 14.965 cv
488.313 15.207 488.426 15.41 488.582 15.578 cv
488.734 15.75 488.93 15.879 489.172 15.965 cv
489.41 16.055 489.699 16.098 490.043 16.098 cv
490.383 16.098 490.684 16.074 490.945 16.023 cv
491.203 15.977 491.43 15.922 491.621 15.859 cv
491.809 15.801 491.965 15.746 492.094 15.695 cv
492.215 15.648 492.316 15.625 492.398 15.621 cv
492.441 15.625 492.48 15.633 492.516 15.648 cv
492.543 15.668 492.57 15.699 492.59 15.746 cv
492.609 15.793 492.621 15.859 492.633 15.945 cv
492.637 16.031 492.641 16.141 492.645 16.27 cv
492.641 16.387 492.641 16.484 492.637 16.562 cv
492.629 16.645 492.621 16.711 492.613 16.766 cv
492.602 16.824 492.586 16.875 492.566 16.91 cv
492.547 16.953 492.52 16.988 492.488 17.023 cv
492.453 17.062 492.359 17.113 492.211 17.172 cv
492.055 17.238 491.863 17.301 491.633 17.355 cv
491.395 17.418 491.125 17.465 490.828 17.512 cv
490.523 17.551 490.203 17.574 489.863 17.578 cv
489.242 17.574 488.699 17.5 488.238 17.344 cv
487.77 17.191 487.383 16.953 487.074 16.637 cv
486.758 16.32 486.523 15.922 486.375 15.437 cv
486.219 14.957 486.145 14.391 486.148 13.734 cv
486.145 13.121 486.223 12.562 486.387 12.066 cv
486.543 11.57 486.777 11.152 487.09 10.805 cv
487.395 10.461 487.77 10.195 488.207 10.012 cv
488.645 9.83197 489.137 9.742 489.691 9.73798 cv
490.27 9.742 490.77 9.828 491.184 9.99597 cv
491.598 10.172 491.934 10.41 492.199 10.711 cv
492.461 11.016 492.656 11.375 492.785 11.789 cv
492.906 12.207 492.969 12.656 492.973 13.145 cv
cp
491.07 12.895 mo
491.082 12.344 490.973 11.91 490.738 11.598 cv
490.504 11.285 490.137 11.129 489.645 11.125 cv
489.395 11.129 489.18 11.176 488.996 11.266 cv
488.809 11.363 488.656 11.488 488.535 11.645 cv
488.41 11.805 488.316 11.992 488.254 12.207 cv
488.188 12.422 488.148 12.652 488.141 12.895 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
