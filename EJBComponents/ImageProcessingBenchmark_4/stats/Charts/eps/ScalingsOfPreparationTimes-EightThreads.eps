%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingsOfPreparationTimes-EightThreads.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 3:34:08 p.m.
%%BoundingBox: 0 0 632 541
%%HiResBoundingBox: 0 0 631.8000 540.4800
%%CropBox: 0 0 631.8000 540.4800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -540.48 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540.48 li
631.8 540.48 li
631.8 0 li
cp
clp
gsave
0 540.48 mo
632 540.48 li
632 -.52002 li
0 -.52002 li
cp
clp
0 0 mo
631.801 0 li
631.801 540.48 li
0 540.48 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
37.199 463.441 mo
616.441 463.441 li
37.199 432.359 mo
616.441 432.359 li
37.199 401.281 mo
616.441 401.281 li
37.199 370.078 mo
616.441 370.078 li
37.199 339 mo
616.441 339 li
37.199 307.801 mo
616.441 307.801 li
37.199 276.719 mo
616.441 276.719 li
37.199 245.641 mo
616.441 245.641 li
37.199 214.441 mo
616.441 214.441 li
37.199 183.359 mo
616.441 183.359 li
37.199 152.281 mo
616.441 152.281 li
37.199 121.078 mo
616.441 121.078 li
37.199 90 mo
616.441 90 li
37.199 58.801 mo
616.441 58.801 li
37.199 27.719 mo
616.441 27.719 li
.328344 .284215 .278569 .000915541 cmyk
@
73.32 27.719 mo
73.32 494.641 li
145.801 27.719 mo
145.801 494.641 li
218.16 27.719 mo
218.16 494.641 li
290.52 27.719 mo
290.52 494.641 li
363 27.719 mo
363 494.641 li
435.359 27.719 mo
435.359 494.641 li
507.84 27.719 mo
507.84 494.641 li
580.199 27.719 mo
580.199 494.641 li
.178592 .148898 .143923 0 cmyk
@
37.199 27.719 mo
37.199 494.641 li
109.559 27.719 mo
109.559 494.641 li
181.922 27.719 mo
181.922 494.641 li
254.398 27.719 mo
254.398 494.641 li
326.762 27.719 mo
326.762 494.641 li
399.121 27.719 mo
399.121 494.641 li
471.602 27.719 mo
471.602 494.641 li
543.961 27.719 mo
543.961 494.641 li
616.441 27.719 mo
616.441 494.641 li
.328344 .284215 .278569 .000915541 cmyk
@
17.039 485.281 mo
24.121 485.281 li
24.121 502.32 li
17.039 502.32 li
cp
0 0 0 0 cmyk
ef
17.039 454.199 mo
24.121 454.199 li
24.121 471.238 li
17.039 471.238 li
cp
ef
17.039 423 mo
24.121 423 li
24.121 440.16 li
17.039 440.16 li
cp
ef
17.039 391.922 mo
24.121 391.922 li
24.121 408.961 li
17.039 408.961 li
cp
ef
17.039 360.84 mo
24.121 360.84 li
24.121 377.879 li
17.039 377.879 li
cp
ef
17.039 329.641 mo
24.121 329.641 li
24.121 346.801 li
17.039 346.801 li
cp
ef
17.039 298.559 mo
24.121 298.559 li
24.121 315.602 li
17.039 315.602 li
cp
ef
17.039 267.359 mo
24.121 267.359 li
24.121 284.519 li
17.039 284.519 li
cp
ef
17.039 236.281 mo
24.121 236.281 li
24.121 253.32 li
17.039 253.32 li
cp
ef
9.961 205.199 mo
24.121 205.199 li
24.121 222.238 li
9.961 222.238 li
cp
ef
9.961 174 mo
24.121 174 li
24.121 191.16 li
9.961 191.16 li
cp
ef
9.961 142.922 mo
24.121 142.922 li
24.121 159.961 li
9.961 159.961 li
cp
ef
9.961 111.84 mo
24.121 111.84 li
24.121 128.879 li
9.961 128.879 li
cp
ef
9.961 80.641 mo
24.121 80.641 li
24.121 97.801 li
9.961 97.801 li
cp
ef
9.961 49.559 mo
24.121 49.559 li
24.121 66.602 li
9.961 66.602 li
cp
ef
9.961 18.359 mo
24.121 18.359 li
24.121 35.519 li
9.961 35.519 li
cp
ef
.96 lw
37.199 494.641 mo
616.441 494.641 li
.367803 .29575 .300999 .00198367 cmyk
@
37.199 494.641 mo
37.199 499.078 li
109.559 494.641 mo
109.559 499.078 li
181.922 494.641 mo
181.922 499.078 li
254.398 494.641 mo
254.398 499.078 li
326.762 494.641 mo
326.762 499.078 li
399.121 494.641 mo
399.121 499.078 li
471.602 494.641 mo
471.602 499.078 li
543.961 494.641 mo
543.961 499.078 li
616.441 494.641 mo
616.441 499.078 li
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
1 lc
37.199 494.641 mo
109.559 464.52 li
181.922 407.398 li
254.398 377.52 li
326.762 341.762 li
399.121 287.16 li
471.602 228.961 li
543.961 170.879 li
616.441 108.359 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
42.148 499.59 mo
32.07 489.512 li
32.07 499.59 mo
42.148 489.512 li
.62768 .285466 0 0 cmyk
@
114.629 469.469 mo
104.551 459.391 li
104.551 469.469 mo
114.629 459.391 li
@
186.988 412.352 mo
176.91 402.27 li
176.91 412.352 mo
186.988 402.27 li
@
259.352 382.59 mo
249.27 372.512 li
249.27 382.59 mo
259.352 372.512 li
@
331.828 346.711 mo
321.75 336.629 li
321.75 346.711 mo
331.828 336.629 li
@
404.191 292.109 mo
394.109 282.031 li
394.109 292.109 mo
404.191 282.031 li
@
476.551 233.91 mo
466.469 223.828 li
466.469 233.91 mo
476.551 223.828 li
@
549.031 175.949 mo
538.949 165.871 li
538.949 175.949 mo
549.031 165.871 li
@
621.391 113.43 mo
611.309 103.352 li
611.309 113.43 mo
621.391 103.352 li
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
37.199 494.641 mo
109.559 464.398 li
181.922 404.16 li
254.398 400.922 li
326.762 403.078 li
399.121 366.719 li
471.602 345.359 li
543.961 328.922 li
616.441 328.199 li
@
grestore
32.07 489.512 mo
42.031 489.512 li
42.031 499.469 li
32.07 499.469 li
cp
@
104.551 459.27 mo
114.512 459.27 li
114.512 469.231 li
104.551 469.231 li
cp
@
176.91 399.148 mo
186.871 399.148 li
186.871 409.109 li
176.91 409.109 li
cp
@
249.27 395.789 mo
259.231 395.789 li
259.231 405.75 li
249.27 405.75 li
cp
@
321.75 398.07 mo
331.711 398.07 li
331.711 408.031 li
321.75 408.031 li
cp
@
394.109 361.711 mo
404.07 361.711 li
404.07 371.672 li
394.109 371.672 li
cp
@
466.469 340.23 mo
476.43 340.23 li
476.43 350.191 li
466.469 350.191 li
cp
@
538.949 323.91 mo
548.91 323.91 li
548.91 333.871 li
538.949 333.871 li
cp
@
611.309 323.191 mo
621.27 323.191 li
621.27 333.148 li
611.309 333.148 li
cp
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
37.199 494.641 mo
109.559 464.52 li
181.922 405.719 li
254.398 347.16 li
326.762 287.52 li
399.121 284.039 li
471.602 144.121 li
543.961 167.762 li
616.441 91.32 li
.466651 0 .889799 0 cmyk
@
grestore
42.148 499.59 mo
32.07 489.512 li
32.07 499.59 mo
42.148 489.512 li
.466651 0 .889799 0 cmyk
@
114.629 469.469 mo
104.551 459.391 li
104.551 469.469 mo
114.629 459.391 li
@
186.988 410.789 mo
176.91 400.711 li
176.91 410.789 mo
186.988 400.711 li
@
259.352 352.109 mo
249.27 342.031 li
249.27 352.109 mo
259.352 342.031 li
@
331.828 292.59 mo
321.75 282.512 li
321.75 292.59 mo
331.828 282.512 li
@
404.191 288.988 mo
394.109 278.91 li
394.109 288.988 mo
404.191 278.91 li
@
476.551 149.191 mo
466.469 139.109 li
466.469 149.191 mo
476.551 139.109 li
@
549.031 172.711 mo
538.949 162.629 li
538.949 172.711 mo
549.031 162.629 li
@
621.391 96.27 mo
611.309 86.191 li
611.309 96.27 mo
621.391 86.191 li
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
37.199 494.641 mo
109.559 464.398 li
181.922 404.879 li
254.398 376.078 li
326.762 403.32 li
399.121 368.039 li
471.602 307.32 li
543.961 330.84 li
616.441 327.48 li
@
grestore
32.07 489.512 mo
42.031 489.512 li
42.031 499.469 li
32.07 499.469 li
cp
@
104.551 459.27 mo
114.512 459.27 li
114.512 469.231 li
104.551 469.231 li
cp
@
176.91 399.75 mo
186.871 399.75 li
186.871 409.711 li
176.91 409.711 li
cp
@
249.27 371.07 mo
259.231 371.07 li
259.231 381.031 li
249.27 381.031 li
cp
@
321.75 398.309 mo
331.711 398.309 li
331.711 408.27 li
321.75 408.27 li
cp
@
394.109 362.91 mo
404.07 362.91 li
404.07 372.871 li
394.109 372.871 li
cp
@
466.469 302.309 mo
476.43 302.309 li
476.43 312.27 li
466.469 312.27 li
cp
@
538.949 325.711 mo
548.91 325.711 li
548.91 335.672 li
538.949 335.672 li
cp
@
611.309 322.352 mo
621.27 322.352 li
621.27 332.309 li
611.309 332.309 li
cp
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
37.199 494.641 mo
109.559 464.281 li
181.922 405.238 li
254.398 345.238 li
326.762 285.121 li
399.121 212.281 li
471.602 140.16 li
543.961 117.48 li
616.441 87.238 li
0 .990631 1 .000396735 cmyk
@
grestore
42.148 499.59 mo
32.07 489.512 li
32.07 499.59 mo
42.148 489.512 li
0 .990631 1 .000396735 cmyk
@
114.629 469.352 mo
104.551 459.27 li
104.551 469.352 mo
114.629 459.27 li
@
186.988 410.191 mo
176.91 400.109 li
176.91 410.191 mo
186.988 400.109 li
@
259.352 350.191 mo
249.27 340.109 li
249.27 350.191 mo
259.352 340.109 li
@
331.828 290.07 mo
321.75 279.988 li
321.75 290.07 mo
331.828 279.988 li
@
404.191 217.352 mo
394.109 207.27 li
394.109 217.352 mo
404.191 207.27 li
@
476.551 145.109 mo
466.469 135.031 li
466.469 145.109 mo
476.551 135.031 li
@
549.031 122.551 mo
538.949 112.469 li
538.949 122.551 mo
549.031 112.469 li
@
621.391 92.191 mo
611.309 82.109 li
611.309 92.191 mo
621.391 82.109 li
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
37.199 494.641 mo
109.559 464.398 li
181.922 403.801 li
254.398 403.559 li
326.762 403.441 li
399.121 354.238 li
471.602 309.719 li
543.961 306 li
616.441 278.398 li
@
grestore
32.07 489.512 mo
42.031 489.512 li
42.031 499.469 li
32.07 499.469 li
cp
@
104.551 459.27 mo
114.512 459.27 li
114.512 469.231 li
104.551 469.231 li
cp
@
176.91 398.789 mo
186.871 398.789 li
186.871 408.75 li
176.91 408.75 li
cp
@
249.27 398.43 mo
259.231 398.43 li
259.231 408.391 li
249.27 408.391 li
cp
@
321.75 398.43 mo
331.711 398.43 li
331.711 408.391 li
321.75 408.391 li
cp
@
394.109 349.109 mo
404.07 349.109 li
404.07 359.07 li
394.109 359.07 li
cp
@
466.469 304.59 mo
476.43 304.59 li
476.43 314.551 li
466.469 314.551 li
cp
@
538.949 300.988 mo
548.91 300.988 li
548.91 310.949 li
538.949 310.949 li
cp
@
611.309 273.391 mo
621.27 273.391 li
621.27 283.352 li
611.309 283.352 li
cp
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
37.199 494.641 mo
109.559 464.398 li
181.922 405.48 li
254.398 345.961 li
326.762 285.602 li
399.121 213.961 li
471.602 141.48 li
543.961 164.879 li
616.441 88.559 li
.62768 .285466 0 0 cmyk
@
grestore
42.148 499.59 mo
32.07 489.512 li
32.07 499.59 mo
42.148 489.512 li
.62768 .285466 0 0 cmyk
@
114.629 469.352 mo
104.551 459.27 li
104.551 469.352 mo
114.629 459.27 li
@
186.988 410.43 mo
176.91 400.352 li
176.91 410.43 mo
186.988 400.352 li
@
259.352 351.031 mo
249.27 340.949 li
249.27 351.031 mo
259.352 340.949 li
@
331.828 290.672 mo
321.75 280.59 li
321.75 290.672 mo
331.828 280.59 li
@
404.191 219.031 mo
394.109 208.949 li
394.109 219.031 mo
404.191 208.949 li
@
476.551 146.551 mo
466.469 136.469 li
466.469 146.551 mo
476.551 136.469 li
@
549.031 169.949 mo
538.949 159.871 li
538.949 169.949 mo
549.031 159.871 li
@
621.391 93.629 mo
611.309 83.551 li
611.309 93.629 mo
621.391 83.551 li
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
37.199 494.641 mo
109.559 464.16 li
181.922 404.039 li
254.398 402.359 li
326.762 394.199 li
399.121 353.762 li
471.602 310.078 li
543.961 286.801 li
616.441 273.121 li
@
grestore
32.07 489.512 mo
42.031 489.512 li
42.031 499.469 li
32.07 499.469 li
cp
@
104.551 459.148 mo
114.512 459.148 li
114.512 469.109 li
104.551 469.109 li
cp
@
176.91 398.91 mo
186.871 398.91 li
186.871 408.871 li
176.91 408.871 li
cp
@
249.27 397.23 mo
259.231 397.23 li
259.231 407.191 li
249.27 407.191 li
cp
@
321.75 389.07 mo
331.711 389.07 li
331.711 399.031 li
321.75 399.031 li
cp
@
394.109 348.75 mo
404.07 348.75 li
404.07 358.711 li
394.109 358.711 li
cp
@
466.469 305.07 mo
476.43 305.07 li
476.43 315.031 li
466.469 315.031 li
cp
@
538.949 281.789 mo
548.91 281.789 li
548.91 291.75 li
538.949 291.75 li
cp
@
611.309 267.988 mo
621.27 267.988 li
621.27 277.949 li
611.309 277.949 li
cp
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
37.199 494.641 mo
109.559 464.16 li
181.922 404.879 li
254.398 374.281 li
326.762 283.801 li
399.121 212.16 li
471.602 223.078 li
543.961 114.961 li
616.441 87.48 li
.466651 0 .889799 0 cmyk
@
grestore
42.148 499.59 mo
32.07 489.512 li
32.07 499.59 mo
42.148 489.512 li
.466651 0 .889799 0 cmyk
@
114.629 469.109 mo
104.551 459.031 li
104.551 469.109 mo
114.629 459.031 li
@
186.988 409.828 mo
176.91 399.75 li
176.91 409.828 mo
186.988 399.75 li
@
259.352 379.352 mo
249.27 369.27 li
249.27 379.352 mo
259.352 369.27 li
@
331.828 288.75 mo
321.75 278.672 li
321.75 288.75 mo
331.828 278.672 li
@
404.191 217.23 mo
394.109 207.148 li
394.109 217.23 mo
404.191 207.148 li
@
476.551 228.031 mo
466.469 217.949 li
466.469 228.031 mo
476.551 217.949 li
@
549.031 120.031 mo
538.949 109.949 li
538.949 120.031 mo
549.031 109.949 li
@
621.391 92.551 mo
611.309 82.469 li
611.309 92.551 mo
621.391 82.469 li
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
37.199 494.641 mo
109.559 464.281 li
181.922 403.441 li
254.398 400.441 li
326.762 403.68 li
399.121 336.121 li
471.602 306 li
543.961 278.879 li
616.441 247.559 li
@
grestore
32.07 489.512 mo
42.031 489.512 li
42.031 499.469 li
32.07 499.469 li
cp
@
104.551 459.27 mo
114.512 459.27 li
114.512 469.231 li
104.551 469.231 li
cp
@
176.91 398.43 mo
186.871 398.43 li
186.871 408.391 li
176.91 408.391 li
cp
@
249.27 395.309 mo
259.231 395.309 li
259.231 405.27 li
249.27 405.27 li
cp
@
321.75 398.551 mo
331.711 398.551 li
331.711 408.512 li
321.75 408.512 li
cp
@
394.109 330.988 mo
404.07 330.988 li
404.07 340.949 li
394.109 340.949 li
cp
@
466.469 300.871 mo
476.43 300.871 li
476.43 310.828 li
466.469 310.828 li
cp
@
538.949 273.75 mo
548.91 273.75 li
548.91 283.711 li
538.949 283.711 li
cp
@
611.309 242.551 mo
621.27 242.551 li
621.27 252.512 li
611.309 252.512 li
cp
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
37.199 494.641 mo
109.559 464.281 li
181.922 405.238 li
254.398 374.879 li
326.762 284.762 li
399.121 213.719 li
471.602 140.52 li
543.961 117.121 li
616.441 87.961 li
0 .990631 1 .000396735 cmyk
@
grestore
42.148 499.59 mo
32.07 489.512 li
32.07 499.59 mo
42.148 489.512 li
0 .990631 1 .000396735 cmyk
@
114.629 469.352 mo
104.551 459.27 li
104.551 469.352 mo
114.629 459.27 li
@
186.988 410.191 mo
176.91 400.109 li
176.91 410.191 mo
186.988 400.109 li
@
259.352 379.949 mo
249.27 369.871 li
249.27 379.949 mo
259.352 369.871 li
@
331.828 289.711 mo
321.75 279.629 li
321.75 289.711 mo
331.828 279.629 li
@
404.191 218.789 mo
394.109 208.711 li
394.109 218.789 mo
404.191 208.711 li
@
476.551 145.469 mo
466.469 135.391 li
466.469 145.469 mo
476.551 135.391 li
@
549.031 122.07 mo
538.949 111.988 li
538.949 122.07 mo
549.031 111.988 li
@
621.391 93.031 mo
611.309 82.949 li
611.309 93.031 mo
621.391 82.949 li
@
gsave
37.078 27.719 mo
617.039 27.719 li
617.039 495.239 li
37.078 495.239 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
37.199 494.641 mo
109.559 463.32 li
181.922 401.52 li
254.398 401.52 li
326.762 398.879 li
399.121 351.961 li
471.602 301.922 li
543.961 273.84 li
616.441 245.762 li
@
grestore
32.07 489.512 mo
42.031 489.512 li
42.031 499.469 li
32.07 499.469 li
cp
@
104.551 458.309 mo
114.512 458.309 li
114.512 468.27 li
104.551 468.27 li
cp
@
176.91 396.512 mo
186.871 396.512 li
186.871 406.469 li
176.91 406.469 li
cp
@
249.27 396.391 mo
259.231 396.391 li
259.231 406.352 li
249.27 406.352 li
cp
@
321.75 393.75 mo
331.711 393.75 li
331.711 403.711 li
321.75 403.711 li
cp
@
394.109 346.949 mo
404.07 346.949 li
404.07 356.91 li
394.109 356.91 li
cp
@
466.469 296.789 mo
476.43 296.789 li
476.43 306.75 li
466.469 306.75 li
cp
@
538.949 268.828 mo
548.91 268.828 li
548.91 278.789 li
538.949 278.789 li
cp
@
611.309 240.629 mo
621.27 240.629 li
621.27 250.59 li
611.309 250.59 li
cp
@
17.105 485.313 mo
24.203 485.313 li
24.203 502.403 li
17.105 502.403 li
cp
0 0 0 0 cmyk
ef
23.469 498.254 mo
23.465 498.344 23.457 498.414 23.445 498.473 cv
23.43 498.535 23.41 498.586 23.391 498.617 cv
23.367 498.656 23.344 498.68 23.313 498.695 cv
23.281 498.711 23.25 498.719 23.223 498.719 cv
18.586 498.719 li
18.551 498.719 18.523 498.711 18.496 498.695 cv
18.469 498.68 18.441 498.656 18.418 498.617 cv
18.391 498.586 18.371 498.535 18.359 498.473 cv
18.344 498.414 18.336 498.344 18.34 498.254 cv
18.336 498.176 18.344 498.102 18.359 498.039 cv
18.371 497.98 18.387 497.934 18.41 497.895 cv
18.426 497.859 18.453 497.828 18.484 497.805 cv
18.516 497.785 18.547 497.777 18.586 497.773 cv
20.438 497.773 li
20.438 491.027 li
18.723 492.047 li
18.633 492.098 18.563 492.125 18.516 492.133 cv
18.461 492.141 18.418 492.133 18.387 492.102 cv
18.352 492.074 18.332 492.023 18.32 491.953 cv
18.309 491.887 18.301 491.801 18.305 491.691 cv
18.301 491.617 18.305 491.551 18.316 491.492 cv
18.32 491.441 18.332 491.395 18.348 491.355 cv
18.359 491.32 18.379 491.289 18.402 491.262 cv
18.426 491.234 18.457 491.207 18.504 491.18 cv
20.547 489.867 li
20.563 489.855 20.582 489.844 20.613 489.836 cv
20.637 489.828 20.672 489.82 20.719 489.809 cv
20.758 489.801 20.809 489.793 20.863 489.789 cv
20.918 489.789 20.984 489.789 21.07 489.785 cv
21.176 489.789 21.27 489.793 21.344 489.801 cv
21.414 489.809 21.469 489.824 21.516 489.84 cv
21.555 489.859 21.582 489.879 21.598 489.902 cv
21.605 489.93 21.613 489.953 21.617 489.977 cv
21.617 497.773 li
23.223 497.773 li
23.258 497.777 23.293 497.785 23.324 497.805 cv
23.355 497.828 23.379 497.859 23.402 497.895 cv
23.418 497.934 23.434 497.98 23.449 498.039 cv
23.457 498.102 23.465 498.176 23.469 498.254 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.105 454.191 mo
24.203 454.191 li
24.203 471.281 li
17.105 471.281 li
cp
0 0 0 0 cmyk
ef
23.449 467.082 mo
23.445 467.168 23.441 467.242 23.43 467.305 cv
23.418 467.371 23.402 467.426 23.383 467.465 cv
23.359 467.512 23.332 467.543 23.301 467.559 cv
23.266 467.582 23.227 467.59 23.188 467.59 cv
18.285 467.59 li
18.223 467.59 18.164 467.582 18.117 467.566 cv
18.066 467.551 18.027 467.527 17.992 467.488 cv
17.957 467.457 17.93 467.402 17.918 467.332 cv
17.898 467.262 17.891 467.176 17.895 467.074 cv
17.891 466.984 17.895 466.906 17.902 466.836 cv
17.906 466.77 17.922 466.711 17.949 466.656 cv
17.973 466.605 18.004 466.551 18.039 466.496 cv
18.074 466.445 18.117 466.391 18.176 466.328 cv
19.949 464.504 li
20.359 464.086 20.688 463.711 20.938 463.375 cv
21.184 463.047 21.375 462.742 21.508 462.465 cv
21.641 462.191 21.727 461.941 21.773 461.715 cv
21.813 461.492 21.836 461.281 21.836 461.086 cv
21.836 460.891 21.801 460.707 21.734 460.527 cv
21.668 460.355 21.574 460.199 21.449 460.062 cv
21.324 459.934 21.168 459.828 20.98 459.746 cv
20.793 459.672 20.574 459.633 20.328 459.629 cv
20.039 459.633 19.781 459.672 19.555 459.746 cv
19.324 459.828 19.125 459.914 18.953 460 cv
18.781 460.094 18.637 460.176 18.52 460.254 cv
18.402 460.332 18.316 460.371 18.266 460.371 cv
18.23 460.371 18.199 460.363 18.176 460.344 cv
18.145 460.328 18.125 460.297 18.109 460.254 cv
18.094 460.215 18.078 460.16 18.07 460.09 cv
18.059 460.023 18.055 459.941 18.059 459.844 cv
18.055 459.777 18.059 459.719 18.066 459.668 cv
18.07 459.617 18.078 459.574 18.09 459.535 cv
18.098 459.5 18.113 459.465 18.133 459.434 cv
18.152 459.402 18.188 459.363 18.246 459.312 cv
18.297 459.266 18.391 459.199 18.527 459.117 cv
18.66 459.035 18.832 458.957 19.035 458.875 cv
19.238 458.797 19.461 458.727 19.707 458.672 cv
19.949 458.617 20.207 458.59 20.48 458.59 cv
20.906 458.59 21.281 458.652 21.605 458.773 cv
21.926 458.895 22.191 459.059 22.406 459.27 cv
22.617 459.48 22.777 459.727 22.883 460 cv
22.988 460.281 23.043 460.578 23.043 460.891 cv
23.043 461.18 23.016 461.461 22.965 461.738 cv
22.914 462.023 22.809 462.328 22.648 462.652 cv
22.484 462.98 22.25 463.344 21.945 463.742 cv
21.637 464.145 21.23 464.605 20.727 465.121 cv
19.32 466.59 li
23.18 466.59 li
23.211 466.594 23.246 466.605 23.285 466.621 cv
23.316 466.645 23.348 466.676 23.375 466.715 cv
23.398 466.758 23.418 466.809 23.43 466.867 cv
23.441 466.934 23.445 467.004 23.449 467.082 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.105 423.059 mo
24.203 423.059 li
24.203 440.149 li
17.105 440.149 li
cp
0 0 0 0 cmyk
ef
23.379 433.926 mo
23.375 434.336 23.305 434.703 23.164 435.027 cv
23.02 435.355 22.816 435.637 22.555 435.867 cv
22.289 436.102 21.961 436.277 21.574 436.402 cv
21.184 436.527 20.746 436.59 20.262 436.59 cv
19.957 436.59 19.68 436.562 19.426 436.516 cv
19.164 436.469 18.934 436.418 18.738 436.348 cv
18.535 436.285 18.371 436.215 18.238 436.145 cv
18.105 436.074 18.02 436.023 17.988 435.988 cv
17.949 435.961 17.926 435.93 17.91 435.895 cv
17.891 435.863 17.871 435.824 17.859 435.777 cv
17.844 435.734 17.836 435.68 17.828 435.609 cv
17.82 435.547 17.816 435.465 17.82 435.363 cv
17.816 435.203 17.832 435.09 17.867 435.023 cv
17.898 434.961 17.945 434.926 18.008 434.926 cv
18.051 434.926 18.133 434.965 18.258 435.035 cv
18.379 435.113 18.539 435.191 18.734 435.273 cv
18.926 435.359 19.152 435.437 19.418 435.508 cv
19.676 435.582 19.969 435.617 20.289 435.617 cv
20.598 435.617 20.867 435.578 21.105 435.5 cv
21.336 435.422 21.535 435.312 21.695 435.172 cv
21.852 435.031 21.969 434.863 22.051 434.668 cv
22.129 434.473 22.168 434.262 22.172 434.035 cv
22.168 433.785 22.117 433.559 22.02 433.355 cv
21.914 433.156 21.766 432.984 21.574 432.836 cv
21.375 432.691 21.137 432.578 20.852 432.5 cv
20.566 432.422 20.242 432.383 19.879 432.383 cv
19.008 432.383 li
18.965 432.383 18.93 432.375 18.895 432.359 cv
18.859 432.344 18.828 432.316 18.805 432.277 cv
18.777 432.242 18.758 432.195 18.742 432.137 cv
18.727 432.078 18.719 432 18.719 431.902 cv
18.719 431.816 18.723 431.746 18.738 431.687 cv
18.746 431.633 18.766 431.586 18.797 431.551 cv
18.82 431.516 18.852 431.492 18.883 431.473 cv
18.914 431.461 18.949 431.453 18.992 431.449 cv
19.766 431.449 li
20.066 431.453 20.336 431.414 20.578 431.332 cv
20.813 431.258 21.016 431.145 21.188 430.996 cv
21.352 430.852 21.48 430.676 21.57 430.473 cv
21.66 430.27 21.707 430.043 21.707 429.789 cv
21.707 429.609 21.676 429.434 21.617 429.266 cv
21.555 429.102 21.465 428.957 21.348 428.832 cv
21.227 428.707 21.074 428.609 20.895 428.539 cv
20.707 428.469 20.496 428.434 20.254 428.434 cv
19.988 428.434 19.742 428.477 19.523 428.555 cv
19.297 428.637 19.102 428.723 18.93 428.812 cv
18.754 428.906 18.609 428.992 18.496 429.07 cv
18.383 429.152 18.301 429.191 18.258 429.187 cv
18.223 429.191 18.195 429.184 18.172 429.172 cv
18.145 429.16 18.125 429.137 18.109 429.102 cv
18.094 429.07 18.082 429.023 18.074 428.957 cv
18.066 428.898 18.063 428.816 18.066 428.715 cv
18.063 428.648 18.063 428.59 18.07 428.535 cv
18.07 428.484 18.082 428.437 18.098 428.395 cv
18.113 428.359 18.129 428.324 18.148 428.289 cv
18.164 428.262 18.195 428.223 18.238 428.176 cv
18.281 428.133 18.367 428.07 18.504 427.988 cv
18.633 427.906 18.797 427.828 18.992 427.746 cv
19.184 427.668 19.406 427.598 19.664 427.543 cv
19.914 427.488 20.188 427.461 20.484 427.461 cv
20.891 427.461 21.254 427.516 21.566 427.617 cv
21.879 427.727 22.137 427.875 22.348 428.062 cv
22.551 428.258 22.707 428.488 22.813 428.754 cv
22.914 429.023 22.965 429.316 22.969 429.641 cv
22.965 429.922 22.93 430.184 22.859 430.418 cv
22.785 430.66 22.676 430.871 22.535 431.055 cv
22.391 431.242 22.219 431.398 22.016 431.527 cv
21.809 431.66 21.57 431.754 21.301 431.801 cv
21.301 431.812 li
21.605 431.848 21.887 431.922 22.141 432.043 cv
22.395 432.164 22.613 432.316 22.797 432.5 cv
22.977 432.684 23.117 432.898 23.223 433.141 cv
23.324 433.387 23.375 433.648 23.379 433.926 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.105 391.941 mo
24.203 391.941 li
24.203 409.031 li
17.105 409.031 li
cp
0 0 0 0 cmyk
ef
23.824 402.816 mo
23.82 402.969 23.797 403.09 23.754 403.176 cv
23.707 403.266 23.645 403.309 23.563 403.305 cv
22.563 403.305 li
22.563 405.168 li
22.563 405.207 22.551 405.238 22.535 405.262 cv
22.512 405.289 22.48 405.309 22.438 405.328 cv
22.387 405.344 22.324 405.355 22.254 405.367 cv
22.176 405.375 22.082 405.379 21.965 405.383 cv
21.848 405.379 21.75 405.375 21.68 405.367 cv
21.602 405.355 21.543 405.344 21.5 405.328 cv
21.453 405.309 21.422 405.289 21.406 405.262 cv
21.387 405.238 21.379 405.207 21.383 405.168 cv
21.383 403.305 li
17.754 403.305 li
17.695 403.309 17.652 403.301 17.617 403.285 cv
17.582 403.273 17.547 403.246 17.52 403.207 cv
17.488 403.172 17.469 403.121 17.457 403.051 cv
17.445 402.984 17.441 402.895 17.441 402.781 cv
17.441 402.699 17.441 402.621 17.449 402.551 cv
17.449 402.48 17.461 402.418 17.477 402.363 cv
17.488 402.309 17.504 402.254 17.531 402.199 cv
17.551 402.145 17.578 402.09 17.613 402.027 cv
20.773 396.641 li
20.793 396.605 20.828 396.574 20.875 396.547 cv
20.918 396.52 20.973 396.496 21.047 396.477 cv
21.113 396.461 21.199 396.449 21.305 396.437 cv
21.406 396.434 21.527 396.43 21.668 396.426 cv
21.816 396.43 21.953 396.434 22.07 396.445 cv
22.184 396.457 22.273 396.473 22.348 396.488 cv
22.414 396.508 22.469 396.531 22.508 396.562 cv
22.543 396.594 22.563 396.629 22.563 396.668 cv
22.563 402.332 li
23.563 402.332 li
23.637 402.336 23.699 402.375 23.75 402.453 cv
23.797 402.535 23.82 402.656 23.824 402.816 cv
cp
21.383 397.465 mo
21.371 397.465 li
18.52 402.332 li
21.383 402.332 li
cp
.629114 .553033 .543389 .289647 cmyk
f
17.105 360.809 mo
24.203 360.809 li
24.203 377.899 li
17.105 377.899 li
cp
0 0 0 0 cmyk
ef
23.406 371.359 mo
23.406 371.836 23.324 372.258 23.164 372.629 cv
23.004 373 22.777 373.312 22.488 373.566 cv
22.191 373.82 21.844 374.016 21.441 374.145 cv
21.035 374.277 20.586 374.34 20.094 374.34 cv
19.816 374.34 19.555 374.32 19.313 374.281 cv
19.063 374.242 18.844 374.195 18.656 374.141 cv
18.461 374.086 18.305 374.031 18.18 373.973 cv
18.055 373.922 17.977 373.879 17.945 373.844 cv
17.91 373.812 17.887 373.781 17.875 373.754 cv
17.859 373.727 17.844 373.695 17.836 373.652 cv
17.82 373.617 17.813 373.566 17.813 373.504 cv
17.805 373.445 17.805 373.375 17.805 373.293 cv
17.805 373.219 17.809 373.148 17.816 373.086 cv
17.824 373.023 17.836 372.973 17.855 372.934 cv
17.871 372.895 17.891 372.867 17.918 372.848 cv
17.941 372.832 17.973 372.824 18.004 372.82 cv
18.051 372.824 18.121 372.852 18.215 372.906 cv
18.309 372.965 18.438 373.027 18.602 373.094 cv
18.766 373.16 18.965 373.223 19.207 373.281 cv
19.441 373.34 19.727 373.367 20.063 373.367 cv
20.363 373.367 20.645 373.332 20.902 373.258 cv
21.156 373.187 21.379 373.074 21.566 372.918 cv
21.75 372.766 21.895 372.57 22 372.332 cv
22.105 372.098 22.156 371.809 22.16 371.469 cv
22.156 371.187 22.113 370.937 22.023 370.719 cv
21.934 370.5 21.797 370.32 21.613 370.176 cv
21.426 370.035 21.191 369.93 20.91 369.855 cv
20.625 369.785 20.285 369.746 19.898 369.746 cv
19.613 369.746 19.375 369.762 19.176 369.789 cv
18.973 369.82 18.785 369.836 18.613 369.832 cv
18.484 369.836 18.391 369.805 18.34 369.742 cv
18.281 369.684 18.254 369.57 18.258 369.398 cv
18.258 365.785 li
18.254 365.637 18.289 365.527 18.363 365.449 cv
18.43 365.379 18.531 365.34 18.668 365.34 cv
22.598 365.34 li
22.633 365.34 22.668 365.352 22.703 365.371 cv
22.734 365.395 22.762 365.426 22.789 365.465 cv
22.809 365.508 22.824 365.559 22.84 365.621 cv
22.848 365.687 22.855 365.766 22.859 365.848 cv
22.855 366.016 22.832 366.141 22.793 366.23 cv
22.746 366.324 22.688 366.371 22.609 366.367 cv
19.438 366.367 li
19.438 368.855 li
19.59 368.836 19.746 368.824 19.91 368.816 cv
20.066 368.812 20.254 368.809 20.469 368.809 cv
20.953 368.809 21.379 368.871 21.746 368.992 cv
22.109 369.113 22.414 369.285 22.664 369.504 cv
22.906 369.73 23.094 369.996 23.219 370.309 cv
23.344 370.625 23.406 370.977 23.406 371.359 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.105 329.691 mo
24.203 329.691 li
24.203 346.781 li
17.105 346.781 li
cp
0 0 0 0 cmyk
ef
23.676 340.207 mo
23.676 340.598 23.613 340.977 23.496 341.336 cv
23.371 341.703 23.188 342.02 22.945 342.293 cv
22.695 342.57 22.383 342.793 22.008 342.957 cv
21.625 343.125 21.18 343.207 20.664 343.207 cv
20.293 343.207 19.965 343.164 19.684 343.07 cv
19.398 342.984 19.152 342.852 18.941 342.68 cv
18.73 342.512 18.555 342.305 18.418 342.059 cv
18.277 341.812 18.164 341.531 18.082 341.215 cv
17.996 340.902 17.938 340.559 17.902 340.18 cv
17.863 339.809 17.844 339.406 17.848 338.973 cv
17.844 338.594 17.863 338.211 17.906 337.82 cv
17.945 337.437 18.02 337.062 18.125 336.695 cv
18.23 336.336 18.375 335.996 18.555 335.68 cv
18.734 335.363 18.961 335.086 19.234 334.852 cv
19.508 334.617 19.832 334.43 20.211 334.289 cv
20.59 334.152 21.031 334.086 21.535 334.082 cv
21.703 334.086 21.875 334.094 22.047 334.113 cv
22.219 334.137 22.379 334.168 22.527 334.199 cv
22.676 334.238 22.797 334.273 22.898 334.312 cv
22.996 334.352 23.063 334.387 23.098 334.41 cv
23.125 334.437 23.148 334.465 23.168 334.492 cv
23.184 334.523 23.199 334.555 23.207 334.59 cv
23.215 334.625 23.219 334.664 23.227 334.707 cv
23.227 334.75 23.23 334.805 23.234 334.867 cv
23.23 334.953 23.23 335.023 23.23 335.078 cv
23.227 335.141 23.215 335.187 23.203 335.223 cv
23.184 335.262 23.164 335.289 23.141 335.305 cv
23.113 335.324 23.082 335.332 23.043 335.332 cv
22.992 335.332 22.922 335.316 22.836 335.285 cv
22.746 335.254 22.641 335.219 22.52 335.176 cv
22.395 335.141 22.246 335.105 22.07 335.07 cv
21.895 335.043 21.691 335.027 21.461 335.023 cv
21.031 335.027 20.664 335.113 20.359 335.285 cv
20.055 335.457 19.805 335.691 19.609 335.984 cv
19.414 336.277 19.27 336.617 19.18 337 cv
19.082 337.391 19.027 337.793 19.02 338.211 cv
19.137 338.145 19.273 338.078 19.422 338.008 cv
19.57 337.941 19.73 337.879 19.906 337.82 cv
20.082 337.77 20.27 337.723 20.465 337.687 cv
20.66 337.656 20.871 337.641 21.098 337.637 cv
21.574 337.641 21.977 337.707 22.309 337.832 cv
22.637 337.965 22.902 338.145 23.109 338.375 cv
23.309 338.605 23.453 338.875 23.543 339.187 cv
23.629 339.5 23.676 339.84 23.676 340.207 cv
cp
22.48 340.316 mo
22.48 340.055 22.453 339.812 22.402 339.594 cv
22.348 339.379 22.258 339.195 22.137 339.039 cv
22.012 338.891 21.848 338.773 21.645 338.691 cv
21.434 338.609 21.18 338.566 20.883 338.566 cv
20.711 338.566 20.543 338.582 20.375 338.613 cv
20.203 338.645 20.039 338.687 19.883 338.734 cv
19.723 338.789 19.574 338.852 19.434 338.922 cv
19.289 338.996 19.156 339.07 19.039 339.148 cv
19.035 339.742 19.074 340.238 19.152 340.633 cv
19.227 341.031 19.336 341.348 19.48 341.586 cv
19.625 341.828 19.805 342 20.02 342.102 cv
20.234 342.207 20.484 342.258 20.773 342.254 cv
21.063 342.258 21.316 342.203 21.531 342.09 cv
21.746 341.984 21.922 341.836 22.066 341.648 cv
22.207 341.465 22.313 341.258 22.379 341.027 cv
22.445 340.797 22.48 340.562 22.48 340.316 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.105 298.559 mo
24.203 298.559 li
24.203 315.649 li
17.105 315.649 li
cp
0 0 0 0 cmyk
ef
23.578 303.586 mo
23.574 303.672 23.57 303.746 23.566 303.809 cv
23.559 303.879 23.551 303.941 23.539 304 cv
23.527 304.066 23.512 304.125 23.492 304.18 cv
23.469 304.238 23.445 304.301 23.422 304.359 cv
20.227 311.723 li
20.199 311.781 20.172 311.824 20.141 311.855 cv
20.105 311.891 20.063 311.918 20.008 311.937 cv
19.953 311.957 19.883 311.969 19.805 311.98 cv
19.719 311.984 19.621 311.988 19.504 311.992 cv
19.348 311.988 19.227 311.98 19.141 311.969 cv
19.055 311.953 18.992 311.937 18.953 311.906 cv
18.914 311.879 18.895 311.84 18.902 311.797 cv
18.902 311.754 18.918 311.703 18.949 311.641 cv
22.309 304.113 li
18.051 304.113 li
17.965 304.117 17.898 304.07 17.855 303.977 cv
17.813 303.887 17.793 303.758 17.793 303.594 cv
17.793 303.508 17.797 303.434 17.809 303.367 cv
17.82 303.305 17.836 303.25 17.859 303.207 cv
17.879 303.164 17.906 303.133 17.941 303.109 cv
17.973 303.09 18.012 303.078 18.051 303.078 cv
23.223 303.078 li
23.281 303.078 23.336 303.086 23.387 303.102 cv
23.434 303.117 23.469 303.145 23.496 303.184 cv
23.52 303.223 23.539 303.277 23.555 303.34 cv
23.566 303.406 23.574 303.488 23.578 303.586 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.105 267.441 mo
24.203 267.441 li
24.203 284.531 li
17.105 284.531 li
cp
0 0 0 0 cmyk
ef
23.652 278.543 mo
23.652 278.93 23.582 279.273 23.445 279.57 cv
23.309 279.875 23.113 280.125 22.855 280.328 cv
22.598 280.535 22.277 280.691 21.898 280.793 cv
21.516 280.898 21.082 280.949 20.598 280.949 cv
20.137 280.949 19.727 280.902 19.367 280.809 cv
19.004 280.715 18.699 280.574 18.449 280.383 cv
18.199 280.199 18.008 279.969 17.875 279.691 cv
17.742 279.418 17.676 279.105 17.676 278.75 cv
17.676 278.477 17.719 278.219 17.813 277.984 cv
17.898 277.75 18.031 277.535 18.207 277.34 cv
18.375 277.145 18.586 276.961 18.84 276.785 cv
19.09 276.617 19.375 276.453 19.691 276.297 cv
19.418 276.156 19.176 276.008 18.965 275.848 cv
18.754 275.691 18.574 275.52 18.43 275.332 cv
18.281 275.148 18.172 274.953 18.098 274.742 cv
18.02 274.535 17.98 274.305 17.984 274.055 cv
17.98 273.746 18.035 273.453 18.152 273.18 cv
18.262 272.91 18.434 272.676 18.66 272.473 cv
18.887 272.273 19.172 272.113 19.523 271.996 cv
19.867 271.879 20.277 271.82 20.746 271.82 cv
21.191 271.82 21.578 271.875 21.906 271.98 cv
22.234 272.09 22.504 272.234 22.715 272.418 cv
22.926 272.605 23.082 272.824 23.188 273.074 cv
23.285 273.324 23.336 273.594 23.34 273.883 cv
23.336 274.117 23.297 274.344 23.227 274.555 cv
23.148 274.773 23.039 274.977 22.891 275.164 cv
22.742 275.359 22.563 275.539 22.352 275.703 cv
22.141 275.875 21.898 276.031 21.625 276.172 cv
21.945 276.336 22.23 276.5 22.488 276.668 cv
22.738 276.836 22.953 277.016 23.129 277.211 cv
23.297 277.406 23.426 277.613 23.52 277.828 cv
23.605 278.047 23.652 278.285 23.652 278.543 cv
cp
22.172 273.992 mo
22.168 273.805 22.137 273.629 22.07 273.473 cv
22.004 273.316 21.906 273.184 21.781 273.074 cv
21.652 272.965 21.492 272.883 21.305 272.824 cv
21.109 272.77 20.895 272.742 20.656 272.738 cv
20.16 272.742 19.785 272.852 19.535 273.074 cv
19.277 273.301 19.152 273.609 19.156 273.992 cv
19.152 274.172 19.184 274.336 19.246 274.488 cv
19.309 274.645 19.402 274.789 19.535 274.926 cv
19.66 275.062 19.824 275.195 20.027 275.324 cv
20.223 275.457 20.461 275.594 20.738 275.734 cv
21.199 275.5 21.555 275.238 21.801 274.945 cv
22.047 274.66 22.168 274.344 22.172 273.992 cv
cp
22.461 278.668 mo
22.457 278.461 22.418 278.27 22.344 278.098 cv
22.262 277.93 22.145 277.77 21.988 277.617 cv
21.832 277.469 21.633 277.324 21.398 277.184 cv
21.16 277.047 20.891 276.902 20.582 276.75 cv
20.293 276.895 20.039 277.035 19.824 277.176 cv
19.605 277.316 19.426 277.465 19.289 277.613 cv
19.148 277.77 19.043 277.926 18.973 278.09 cv
18.898 278.258 18.863 278.441 18.867 278.641 cv
18.863 279.086 19.016 279.43 19.324 279.668 cv
19.625 279.914 20.078 280.035 20.684 280.031 cv
21.266 280.035 21.711 279.914 22.012 279.664 cv
22.309 279.422 22.457 279.09 22.461 278.668 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.105 236.32 mo
24.203 236.32 li
24.203 253.41 li
17.105 253.41 li
cp
0 0 0 0 cmyk
ef
23.516 244.887 mo
23.512 245.273 23.488 245.66 23.445 246.051 cv
23.398 246.445 23.32 246.824 23.215 247.187 cv
23.102 247.551 22.957 247.891 22.773 248.207 cv
22.586 248.527 22.352 248.809 22.074 249.043 cv
21.789 249.285 21.453 249.469 21.07 249.602 cv
20.68 249.734 20.234 249.801 19.727 249.801 cv
19.527 249.801 19.336 249.785 19.152 249.762 cv
18.965 249.734 18.797 249.707 18.652 249.672 cv
18.5 249.637 18.375 249.598 18.277 249.555 cv
18.176 249.516 18.102 249.477 18.059 249.434 cv
18.012 249.395 17.98 249.34 17.961 249.266 cv
17.938 249.195 17.926 249.098 17.93 248.98 cv
17.926 248.879 17.93 248.801 17.938 248.742 cv
17.941 248.684 17.953 248.637 17.969 248.605 cv
17.984 248.574 18.004 248.555 18.027 248.539 cv
18.051 248.531 18.082 248.523 18.121 248.52 cv
18.168 248.523 18.238 248.539 18.332 248.57 cv
18.422 248.605 18.535 248.645 18.68 248.684 cv
18.816 248.727 18.98 248.766 19.168 248.797 cv
19.352 248.836 19.563 248.852 19.801 248.848 cv
20.242 248.852 20.621 248.766 20.941 248.594 cv
21.254 248.422 21.516 248.195 21.719 247.906 cv
21.922 247.621 22.07 247.285 22.172 246.902 cv
22.27 246.523 22.324 246.125 22.336 245.703 cv
22.09 245.848 21.801 245.973 21.465 246.078 cv
21.125 246.191 20.738 246.246 20.301 246.242 cv
19.809 246.246 19.395 246.18 19.059 246.043 cv
18.723 245.91 18.449 245.727 18.246 245.492 cv
18.039 245.262 17.895 244.984 17.809 244.66 cv
17.719 244.344 17.676 243.992 17.676 243.613 cv
17.676 243.223 17.73 242.852 17.848 242.492 cv
17.957 242.141 18.137 241.828 18.383 241.559 cv
18.621 241.289 18.93 241.074 19.309 240.914 cv
19.68 240.754 20.129 240.672 20.652 240.672 cv
21.02 240.672 21.344 240.719 21.633 240.812 cv
21.914 240.906 22.164 241.043 22.379 241.219 cv
22.586 241.395 22.766 241.605 22.914 241.855 cv
23.059 242.105 23.176 242.387 23.266 242.699 cv
23.352 243.016 23.414 243.359 23.457 243.727 cv
23.492 244.098 23.512 244.484 23.516 244.887 cv
cp
22.316 244.758 mo
22.316 244.176 22.277 243.684 22.199 243.281 cv
22.121 242.883 22.004 242.559 21.855 242.309 cv
21.703 242.062 21.52 241.883 21.301 241.773 cv
21.078 241.664 20.824 241.609 20.543 241.609 cv
20.238 241.609 19.984 241.664 19.777 241.773 cv
19.566 241.883 19.395 242.027 19.262 242.203 cv
19.125 242.387 19.023 242.59 18.961 242.816 cv
18.895 243.047 18.863 243.285 18.867 243.523 cv
18.863 243.797 18.895 244.043 18.953 244.262 cv
19.008 244.488 19.098 244.676 19.23 244.832 cv
19.355 244.988 19.523 245.109 19.73 245.195 cv
19.934 245.281 20.188 245.324 20.492 245.32 cv
20.832 245.324 21.164 245.273 21.488 245.168 cv
21.805 245.066 22.082 244.93 22.316 244.758 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
10.012 205.191 mo
24.203 205.191 li
24.203 222.281 li
10.012 222.281 li
cp
0 0 0 0 cmyk
ef
16.387 218.074 mo
16.383 218.164 16.375 218.234 16.363 218.293 cv
16.348 218.355 16.328 218.406 16.309 218.437 cv
16.285 218.477 16.262 218.5 16.23 218.516 cv
16.199 218.531 16.168 218.539 16.141 218.539 cv
11.504 218.539 li
11.469 218.539 11.441 218.531 11.414 218.516 cv
11.387 218.5 11.359 218.477 11.336 218.437 cv
11.309 218.406 11.289 218.355 11.277 218.293 cv
11.262 218.234 11.254 218.164 11.258 218.074 cv
11.254 217.996 11.262 217.922 11.277 217.859 cv
11.289 217.801 11.305 217.754 11.328 217.715 cv
11.344 217.68 11.371 217.648 11.402 217.625 cv
11.434 217.605 11.465 217.598 11.504 217.594 cv
13.355 217.594 li
13.355 210.848 li
11.641 211.867 li
11.551 211.918 11.48 211.945 11.434 211.953 cv
11.379 211.961 11.336 211.953 11.305 211.922 cv
11.27 211.895 11.25 211.844 11.238 211.773 cv
11.227 211.707 11.219 211.621 11.223 211.512 cv
11.219 211.437 11.223 211.371 11.234 211.312 cv
11.238 211.262 11.25 211.215 11.266 211.176 cv
11.277 211.141 11.297 211.109 11.32 211.082 cv
11.344 211.055 11.375 211.027 11.422 211 cv
13.465 209.687 li
13.48 209.676 13.5 209.664 13.531 209.656 cv
13.555 209.648 13.59 209.641 13.637 209.629 cv
13.676 209.621 13.727 209.613 13.781 209.609 cv
13.836 209.609 13.902 209.609 13.988 209.605 cv
14.094 209.609 14.188 209.613 14.262 209.621 cv
14.332 209.629 14.387 209.645 14.434 209.66 cv
14.473 209.68 14.5 209.699 14.516 209.723 cv
14.523 209.75 14.531 209.773 14.535 209.797 cv
14.535 217.594 li
16.141 217.594 li
16.176 217.598 16.211 217.605 16.242 217.625 cv
16.273 217.648 16.297 217.68 16.32 217.715 cv
16.336 217.754 16.352 217.801 16.367 217.859 cv
16.375 217.922 16.383 217.996 16.387 218.074 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.742 214.082 mo
23.738 214.766 23.688 215.387 23.582 215.949 cv
23.473 216.512 23.293 216.996 23.047 217.398 cv
22.793 217.805 22.465 218.117 22.066 218.336 cv
21.66 218.559 21.168 218.668 20.582 218.668 cv
20.023 218.668 19.551 218.57 19.172 218.371 cv
18.789 218.176 18.484 217.883 18.25 217.496 cv
18.016 217.109 17.848 216.637 17.754 216.07 cv
17.652 215.508 17.605 214.859 17.605 214.125 cv
17.605 213.453 17.66 212.832 17.77 212.266 cv
17.879 211.703 18.055 211.219 18.305 210.812 cv
18.547 210.41 18.871 210.098 19.277 209.871 cv
19.676 209.652 20.172 209.539 20.762 209.539 cv
21.32 209.539 21.793 209.641 22.176 209.836 cv
22.559 210.039 22.863 210.332 23.098 210.715 cv
23.328 211.105 23.496 211.578 23.594 212.141 cv
23.691 212.703 23.738 213.352 23.742 214.082 cv
cp
22.535 214.164 mo
22.531 213.723 22.516 213.324 22.488 212.973 cv
22.453 212.621 22.406 212.312 22.348 212.043 cv
22.281 211.773 22.203 211.543 22.105 211.348 cv
22.008 211.156 21.891 210.996 21.754 210.867 cv
21.613 210.742 21.453 210.648 21.281 210.59 cv
21.102 210.535 20.906 210.508 20.691 210.504 cv
20.301 210.508 19.984 210.598 19.746 210.781 cv
19.5 210.965 19.309 211.219 19.172 211.535 cv
19.031 211.855 18.938 212.227 18.887 212.656 cv
18.836 213.086 18.813 213.551 18.813 214.043 cv
18.813 214.707 18.844 215.27 18.914 215.73 cv
18.98 216.199 19.09 216.578 19.242 216.867 cv
19.387 217.164 19.578 217.375 19.809 217.504 cv
20.039 217.641 20.32 217.707 20.652 217.703 cv
20.906 217.707 21.129 217.668 21.324 217.582 cv
21.516 217.504 21.684 217.383 21.824 217.227 cv
21.965 217.074 22.078 216.891 22.172 216.676 cv
22.258 216.461 22.332 216.223 22.391 215.961 cv
22.441 215.703 22.48 215.422 22.504 215.117 cv
22.523 214.812 22.531 214.496 22.535 214.164 cv
cp
f
10.012 174.07 mo
24.203 174.07 li
24.203 191.16 li
10.012 191.16 li
cp
0 0 0 0 cmyk
ef
16.387 186.957 mo
16.383 187.047 16.375 187.117 16.363 187.176 cv
16.348 187.238 16.328 187.289 16.309 187.32 cv
16.285 187.359 16.262 187.383 16.23 187.398 cv
16.199 187.414 16.168 187.422 16.141 187.422 cv
11.504 187.422 li
11.469 187.422 11.441 187.414 11.414 187.398 cv
11.387 187.383 11.359 187.359 11.336 187.32 cv
11.309 187.289 11.289 187.238 11.277 187.176 cv
11.262 187.117 11.254 187.047 11.258 186.957 cv
11.254 186.879 11.262 186.805 11.277 186.742 cv
11.289 186.684 11.305 186.637 11.328 186.598 cv
11.344 186.562 11.371 186.531 11.402 186.508 cv
11.434 186.488 11.465 186.48 11.504 186.477 cv
13.355 186.477 li
13.355 179.73 li
11.641 180.75 li
11.551 180.801 11.48 180.828 11.434 180.836 cv
11.379 180.844 11.336 180.836 11.305 180.805 cv
11.27 180.777 11.25 180.727 11.238 180.656 cv
11.227 180.59 11.219 180.504 11.223 180.395 cv
11.219 180.32 11.223 180.254 11.234 180.195 cv
11.238 180.145 11.25 180.098 11.266 180.059 cv
11.277 180.023 11.297 179.992 11.32 179.965 cv
11.344 179.937 11.375 179.91 11.422 179.883 cv
13.465 178.57 li
13.48 178.559 13.5 178.547 13.531 178.539 cv
13.555 178.531 13.59 178.523 13.637 178.512 cv
13.676 178.504 13.727 178.496 13.781 178.492 cv
13.836 178.492 13.902 178.492 13.988 178.488 cv
14.094 178.492 14.188 178.496 14.262 178.504 cv
14.332 178.512 14.387 178.527 14.434 178.543 cv
14.473 178.562 14.5 178.582 14.516 178.605 cv
14.523 178.633 14.531 178.656 14.535 178.68 cv
14.535 186.477 li
16.141 186.477 li
16.176 186.48 16.211 186.488 16.242 186.508 cv
16.273 186.531 16.297 186.562 16.32 186.598 cv
16.336 186.637 16.352 186.684 16.367 186.742 cv
16.375 186.805 16.383 186.879 16.387 186.957 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.469 186.957 mo
23.465 187.047 23.457 187.117 23.445 187.176 cv
23.43 187.238 23.41 187.289 23.391 187.32 cv
23.367 187.359 23.344 187.383 23.313 187.398 cv
23.281 187.414 23.25 187.422 23.223 187.422 cv
18.586 187.422 li
18.551 187.422 18.523 187.414 18.496 187.398 cv
18.469 187.383 18.441 187.359 18.418 187.32 cv
18.391 187.289 18.371 187.238 18.359 187.176 cv
18.344 187.117 18.336 187.047 18.34 186.957 cv
18.336 186.879 18.344 186.805 18.359 186.742 cv
18.371 186.684 18.387 186.637 18.41 186.598 cv
18.426 186.562 18.453 186.531 18.484 186.508 cv
18.516 186.488 18.547 186.48 18.586 186.477 cv
20.438 186.477 li
20.438 179.73 li
18.723 180.75 li
18.633 180.801 18.563 180.828 18.516 180.836 cv
18.461 180.844 18.418 180.836 18.387 180.805 cv
18.352 180.777 18.332 180.727 18.32 180.656 cv
18.309 180.59 18.301 180.504 18.305 180.395 cv
18.301 180.32 18.305 180.254 18.316 180.195 cv
18.32 180.145 18.332 180.098 18.348 180.059 cv
18.359 180.023 18.379 179.992 18.402 179.965 cv
18.426 179.937 18.457 179.91 18.504 179.883 cv
20.547 178.57 li
20.563 178.559 20.582 178.547 20.613 178.539 cv
20.637 178.531 20.672 178.523 20.719 178.512 cv
20.758 178.504 20.809 178.496 20.863 178.492 cv
20.918 178.492 20.984 178.492 21.07 178.488 cv
21.176 178.492 21.27 178.496 21.344 178.504 cv
21.414 178.512 21.469 178.527 21.516 178.543 cv
21.555 178.562 21.582 178.582 21.598 178.605 cv
21.605 178.633 21.613 178.656 21.617 178.68 cv
21.617 186.477 li
23.223 186.477 li
23.258 186.48 23.293 186.488 23.324 186.508 cv
23.355 186.531 23.379 186.562 23.402 186.598 cv
23.418 186.637 23.434 186.684 23.449 186.742 cv
23.457 186.805 23.465 186.879 23.469 186.957 cv
cp
f
10.012 142.941 mo
24.203 142.941 li
24.203 160.031 li
10.012 160.031 li
cp
0 0 0 0 cmyk
ef
16.387 155.824 mo
16.383 155.914 16.375 155.984 16.363 156.043 cv
16.348 156.105 16.328 156.156 16.309 156.187 cv
16.285 156.227 16.262 156.25 16.23 156.266 cv
16.199 156.281 16.168 156.289 16.141 156.289 cv
11.504 156.289 li
11.469 156.289 11.441 156.281 11.414 156.266 cv
11.387 156.25 11.359 156.227 11.336 156.187 cv
11.309 156.156 11.289 156.105 11.277 156.043 cv
11.262 155.984 11.254 155.914 11.258 155.824 cv
11.254 155.746 11.262 155.672 11.277 155.609 cv
11.289 155.551 11.305 155.504 11.328 155.465 cv
11.344 155.43 11.371 155.398 11.402 155.375 cv
11.434 155.355 11.465 155.348 11.504 155.344 cv
13.355 155.344 li
13.355 148.598 li
11.641 149.617 li
11.551 149.668 11.48 149.695 11.434 149.703 cv
11.379 149.711 11.336 149.703 11.305 149.672 cv
11.27 149.645 11.25 149.594 11.238 149.523 cv
11.227 149.457 11.219 149.371 11.223 149.262 cv
11.219 149.187 11.223 149.121 11.234 149.062 cv
11.238 149.012 11.25 148.965 11.266 148.926 cv
11.277 148.891 11.297 148.859 11.32 148.832 cv
11.344 148.805 11.375 148.777 11.422 148.75 cv
13.465 147.437 li
13.48 147.426 13.5 147.414 13.531 147.406 cv
13.555 147.398 13.59 147.391 13.637 147.379 cv
13.676 147.371 13.727 147.363 13.781 147.359 cv
13.836 147.359 13.902 147.359 13.988 147.355 cv
14.094 147.359 14.188 147.363 14.262 147.371 cv
14.332 147.379 14.387 147.395 14.434 147.41 cv
14.473 147.43 14.5 147.449 14.516 147.473 cv
14.523 147.5 14.531 147.523 14.535 147.547 cv
14.535 155.344 li
16.141 155.344 li
16.176 155.348 16.211 155.355 16.242 155.375 cv
16.273 155.398 16.297 155.43 16.32 155.465 cv
16.336 155.504 16.352 155.551 16.367 155.609 cv
16.375 155.672 16.383 155.746 16.387 155.824 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.449 155.781 mo
23.445 155.867 23.441 155.941 23.43 156.004 cv
23.418 156.07 23.402 156.125 23.383 156.164 cv
23.359 156.211 23.332 156.242 23.301 156.258 cv
23.266 156.281 23.227 156.289 23.188 156.289 cv
18.285 156.289 li
18.223 156.289 18.164 156.281 18.117 156.266 cv
18.066 156.25 18.027 156.227 17.992 156.187 cv
17.957 156.156 17.93 156.102 17.918 156.031 cv
17.898 155.961 17.891 155.875 17.895 155.773 cv
17.891 155.684 17.895 155.605 17.902 155.535 cv
17.906 155.469 17.922 155.41 17.949 155.355 cv
17.973 155.305 18.004 155.25 18.039 155.195 cv
18.074 155.145 18.117 155.09 18.176 155.027 cv
19.949 153.203 li
20.359 152.785 20.688 152.41 20.938 152.074 cv
21.184 151.746 21.375 151.441 21.508 151.164 cv
21.641 150.891 21.727 150.641 21.773 150.414 cv
21.813 150.191 21.836 149.98 21.836 149.785 cv
21.836 149.59 21.801 149.406 21.734 149.227 cv
21.668 149.055 21.574 148.898 21.449 148.762 cv
21.324 148.633 21.168 148.527 20.98 148.445 cv
20.793 148.371 20.574 148.332 20.328 148.328 cv
20.039 148.332 19.781 148.371 19.555 148.445 cv
19.324 148.527 19.125 148.613 18.953 148.699 cv
18.781 148.793 18.637 148.875 18.52 148.953 cv
18.402 149.031 18.316 149.07 18.266 149.07 cv
18.23 149.07 18.199 149.062 18.176 149.043 cv
18.145 149.027 18.125 148.996 18.109 148.953 cv
18.094 148.914 18.078 148.859 18.07 148.789 cv
18.059 148.723 18.055 148.641 18.059 148.543 cv
18.055 148.477 18.059 148.418 18.066 148.367 cv
18.07 148.316 18.078 148.273 18.09 148.234 cv
18.098 148.199 18.113 148.164 18.133 148.133 cv
18.152 148.102 18.188 148.062 18.246 148.012 cv
18.297 147.965 18.391 147.898 18.527 147.816 cv
18.66 147.734 18.832 147.656 19.035 147.574 cv
19.238 147.496 19.461 147.426 19.707 147.371 cv
19.949 147.316 20.207 147.289 20.48 147.289 cv
20.906 147.289 21.281 147.352 21.605 147.473 cv
21.926 147.594 22.191 147.758 22.406 147.969 cv
22.617 148.18 22.777 148.426 22.883 148.699 cv
22.988 148.98 23.043 149.277 23.043 149.59 cv
23.043 149.879 23.016 150.16 22.965 150.437 cv
22.914 150.723 22.809 151.027 22.648 151.352 cv
22.484 151.68 22.25 152.043 21.945 152.441 cv
21.637 152.844 21.23 153.305 20.727 153.82 cv
19.32 155.289 li
23.18 155.289 li
23.211 155.293 23.246 155.305 23.285 155.32 cv
23.316 155.344 23.348 155.375 23.375 155.414 cv
23.398 155.457 23.418 155.508 23.43 155.566 cv
23.441 155.633 23.445 155.703 23.449 155.781 cv
cp
f
10.012 111.82 mo
24.203 111.82 li
24.203 128.91 li
10.012 128.91 li
cp
0 0 0 0 cmyk
ef
16.387 124.695 mo
16.383 124.785 16.375 124.855 16.363 124.914 cv
16.348 124.977 16.328 125.027 16.309 125.059 cv
16.285 125.098 16.262 125.121 16.23 125.137 cv
16.199 125.152 16.168 125.16 16.141 125.16 cv
11.504 125.16 li
11.469 125.16 11.441 125.152 11.414 125.137 cv
11.387 125.121 11.359 125.098 11.336 125.059 cv
11.309 125.027 11.289 124.977 11.277 124.914 cv
11.262 124.855 11.254 124.785 11.258 124.695 cv
11.254 124.617 11.262 124.543 11.277 124.48 cv
11.289 124.422 11.305 124.375 11.328 124.336 cv
11.344 124.301 11.371 124.27 11.402 124.246 cv
11.434 124.227 11.465 124.219 11.504 124.215 cv
13.355 124.215 li
13.355 117.469 li
11.641 118.488 li
11.551 118.539 11.48 118.566 11.434 118.574 cv
11.379 118.582 11.336 118.574 11.305 118.543 cv
11.27 118.516 11.25 118.465 11.238 118.395 cv
11.227 118.328 11.219 118.242 11.223 118.133 cv
11.219 118.059 11.223 117.992 11.234 117.934 cv
11.238 117.883 11.25 117.836 11.266 117.797 cv
11.277 117.762 11.297 117.73 11.32 117.703 cv
11.344 117.676 11.375 117.648 11.422 117.621 cv
13.465 116.309 li
13.48 116.297 13.5 116.285 13.531 116.277 cv
13.555 116.27 13.59 116.262 13.637 116.25 cv
13.676 116.242 13.727 116.234 13.781 116.23 cv
13.836 116.23 13.902 116.23 13.988 116.227 cv
14.094 116.23 14.188 116.234 14.262 116.242 cv
14.332 116.25 14.387 116.266 14.434 116.281 cv
14.473 116.301 14.5 116.32 14.516 116.344 cv
14.523 116.371 14.531 116.395 14.535 116.418 cv
14.535 124.215 li
16.141 124.215 li
16.176 124.219 16.211 124.227 16.242 124.246 cv
16.273 124.27 16.297 124.301 16.32 124.336 cv
16.336 124.375 16.352 124.422 16.367 124.48 cv
16.375 124.543 16.383 124.617 16.387 124.695 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.379 122.625 mo
23.375 123.035 23.305 123.402 23.164 123.727 cv
23.02 124.055 22.816 124.336 22.555 124.566 cv
22.289 124.801 21.961 124.977 21.574 125.102 cv
21.184 125.227 20.746 125.289 20.262 125.289 cv
19.957 125.289 19.68 125.262 19.426 125.215 cv
19.164 125.168 18.934 125.117 18.738 125.047 cv
18.535 124.984 18.371 124.914 18.238 124.844 cv
18.105 124.773 18.02 124.723 17.988 124.687 cv
17.949 124.66 17.926 124.629 17.91 124.594 cv
17.891 124.562 17.871 124.523 17.859 124.477 cv
17.844 124.434 17.836 124.379 17.828 124.309 cv
17.82 124.246 17.816 124.164 17.82 124.062 cv
17.816 123.902 17.832 123.789 17.867 123.723 cv
17.898 123.66 17.945 123.625 18.008 123.625 cv
18.051 123.625 18.133 123.664 18.258 123.734 cv
18.379 123.812 18.539 123.891 18.734 123.973 cv
18.926 124.059 19.152 124.137 19.418 124.207 cv
19.676 124.281 19.969 124.316 20.289 124.316 cv
20.598 124.316 20.867 124.277 21.105 124.199 cv
21.336 124.121 21.535 124.012 21.695 123.871 cv
21.852 123.73 21.969 123.562 22.051 123.367 cv
22.129 123.172 22.168 122.961 22.172 122.734 cv
22.168 122.484 22.117 122.258 22.02 122.055 cv
21.914 121.855 21.766 121.684 21.574 121.535 cv
21.375 121.391 21.137 121.277 20.852 121.199 cv
20.566 121.121 20.242 121.082 19.879 121.082 cv
19.008 121.082 li
18.965 121.082 18.93 121.074 18.895 121.059 cv
18.859 121.043 18.828 121.016 18.805 120.977 cv
18.777 120.941 18.758 120.895 18.742 120.836 cv
18.727 120.777 18.719 120.699 18.719 120.602 cv
18.719 120.516 18.723 120.445 18.738 120.387 cv
18.746 120.332 18.766 120.285 18.797 120.25 cv
18.82 120.215 18.852 120.191 18.883 120.172 cv
18.914 120.16 18.949 120.152 18.992 120.148 cv
19.766 120.148 li
20.066 120.152 20.336 120.113 20.578 120.031 cv
20.813 119.957 21.016 119.844 21.188 119.695 cv
21.352 119.551 21.48 119.375 21.57 119.172 cv
21.66 118.969 21.707 118.742 21.707 118.488 cv
21.707 118.309 21.676 118.133 21.617 117.965 cv
21.555 117.801 21.465 117.656 21.348 117.531 cv
21.227 117.406 21.074 117.309 20.895 117.238 cv
20.707 117.168 20.496 117.133 20.254 117.133 cv
19.988 117.133 19.742 117.176 19.523 117.254 cv
19.297 117.336 19.102 117.422 18.93 117.512 cv
18.754 117.605 18.609 117.691 18.496 117.77 cv
18.383 117.852 18.301 117.891 18.258 117.887 cv
18.223 117.891 18.195 117.883 18.172 117.871 cv
18.145 117.859 18.125 117.836 18.109 117.801 cv
18.094 117.77 18.082 117.723 18.074 117.656 cv
18.066 117.598 18.063 117.516 18.066 117.414 cv
18.063 117.348 18.063 117.289 18.07 117.234 cv
18.07 117.184 18.082 117.137 18.098 117.094 cv
18.113 117.059 18.129 117.023 18.148 116.988 cv
18.164 116.961 18.195 116.922 18.238 116.875 cv
18.281 116.832 18.367 116.77 18.504 116.687 cv
18.633 116.605 18.797 116.527 18.992 116.445 cv
19.184 116.367 19.406 116.297 19.664 116.242 cv
19.914 116.187 20.188 116.16 20.484 116.16 cv
20.891 116.16 21.254 116.215 21.566 116.316 cv
21.879 116.426 22.137 116.574 22.348 116.762 cv
22.551 116.957 22.707 117.187 22.813 117.453 cv
22.914 117.723 22.965 118.016 22.969 118.34 cv
22.965 118.621 22.93 118.883 22.859 119.117 cv
22.785 119.359 22.676 119.57 22.535 119.754 cv
22.391 119.941 22.219 120.098 22.016 120.227 cv
21.809 120.359 21.57 120.453 21.301 120.5 cv
21.301 120.512 li
21.605 120.547 21.887 120.621 22.141 120.742 cv
22.395 120.863 22.613 121.016 22.797 121.199 cv
22.977 121.383 23.117 121.598 23.223 121.84 cv
23.324 122.086 23.375 122.348 23.379 122.625 cv
cp
f
10.012 80.691 mo
24.203 80.691 li
24.203 97.781 li
10.012 97.781 li
cp
0 0 0 0 cmyk
ef
16.387 93.566 mo
16.383 93.656 16.375 93.727 16.363 93.785 cv
16.348 93.848 16.328 93.898 16.309 93.93 cv
16.285 93.969 16.262 93.992 16.23 94.008 cv
16.199 94.023 16.168 94.031 16.141 94.031 cv
11.504 94.031 li
11.469 94.031 11.441 94.023 11.414 94.008 cv
11.387 93.992 11.359 93.969 11.336 93.93 cv
11.309 93.898 11.289 93.848 11.277 93.785 cv
11.262 93.727 11.254 93.656 11.258 93.566 cv
11.254 93.488 11.262 93.414 11.277 93.352 cv
11.289 93.293 11.305 93.246 11.328 93.207 cv
11.344 93.172 11.371 93.141 11.402 93.117 cv
11.434 93.098 11.465 93.09 11.504 93.086 cv
13.355 93.086 li
13.355 86.34 li
11.641 87.359 li
11.551 87.41 11.48 87.437 11.434 87.445 cv
11.379 87.453 11.336 87.445 11.305 87.414 cv
11.27 87.387 11.25 87.336 11.238 87.266 cv
11.227 87.199 11.219 87.113 11.223 87.004 cv
11.219 86.93 11.223 86.863 11.234 86.805 cv
11.238 86.754 11.25 86.707 11.266 86.668 cv
11.277 86.633 11.297 86.602 11.32 86.574 cv
11.344 86.547 11.375 86.52 11.422 86.492 cv
13.465 85.18 li
13.48 85.168 13.5 85.156 13.531 85.148 cv
13.555 85.141 13.59 85.133 13.637 85.121 cv
13.676 85.113 13.727 85.105 13.781 85.102 cv
13.836 85.102 13.902 85.102 13.988 85.098 cv
14.094 85.102 14.188 85.105 14.262 85.113 cv
14.332 85.121 14.387 85.137 14.434 85.152 cv
14.473 85.172 14.5 85.191 14.516 85.215 cv
14.523 85.242 14.531 85.266 14.535 85.289 cv
14.535 93.086 li
16.141 93.086 li
16.176 93.09 16.211 93.098 16.242 93.117 cv
16.273 93.141 16.297 93.172 16.32 93.207 cv
16.336 93.246 16.352 93.293 16.367 93.352 cv
16.375 93.414 16.383 93.488 16.387 93.566 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.824 91.508 mo
23.82 91.66 23.797 91.781 23.754 91.867 cv
23.707 91.957 23.645 92 23.563 91.996 cv
22.563 91.996 li
22.563 93.859 li
22.563 93.898 22.551 93.93 22.535 93.953 cv
22.512 93.98 22.48 94 22.438 94.02 cv
22.387 94.035 22.324 94.047 22.254 94.059 cv
22.176 94.066 22.082 94.07 21.965 94.074 cv
21.848 94.07 21.75 94.066 21.68 94.059 cv
21.602 94.047 21.543 94.035 21.5 94.02 cv
21.453 94 21.422 93.98 21.406 93.953 cv
21.387 93.93 21.379 93.898 21.383 93.859 cv
21.383 91.996 li
17.754 91.996 li
17.695 92 17.652 91.992 17.617 91.977 cv
17.582 91.965 17.547 91.937 17.52 91.898 cv
17.488 91.863 17.469 91.812 17.457 91.742 cv
17.445 91.676 17.441 91.586 17.441 91.473 cv
17.441 91.391 17.441 91.312 17.449 91.242 cv
17.449 91.172 17.461 91.109 17.477 91.055 cv
17.488 91 17.504 90.945 17.531 90.891 cv
17.551 90.836 17.578 90.781 17.613 90.719 cv
20.773 85.332 li
20.793 85.297 20.828 85.266 20.875 85.238 cv
20.918 85.211 20.973 85.187 21.047 85.168 cv
21.113 85.152 21.199 85.141 21.305 85.129 cv
21.406 85.125 21.527 85.121 21.668 85.117 cv
21.816 85.121 21.953 85.125 22.07 85.137 cv
22.184 85.148 22.273 85.164 22.348 85.18 cv
22.414 85.199 22.469 85.223 22.508 85.254 cv
22.543 85.285 22.563 85.32 22.563 85.359 cv
22.563 91.023 li
23.563 91.023 li
23.637 91.027 23.699 91.066 23.75 91.145 cv
23.797 91.227 23.82 91.348 23.824 91.508 cv
cp
21.383 86.156 mo
21.371 86.156 li
18.52 91.023 li
21.383 91.023 li
cp
f
10.012 49.57 mo
24.203 49.57 li
24.203 66.66 li
10.012 66.66 li
cp
0 0 0 0 cmyk
ef
16.387 62.434 mo
16.383 62.523 16.375 62.594 16.363 62.652 cv
16.348 62.715 16.328 62.766 16.309 62.797 cv
16.285 62.836 16.262 62.859 16.23 62.875 cv
16.199 62.891 16.168 62.898 16.141 62.898 cv
11.504 62.898 li
11.469 62.898 11.441 62.891 11.414 62.875 cv
11.387 62.859 11.359 62.836 11.336 62.797 cv
11.309 62.766 11.289 62.715 11.277 62.652 cv
11.262 62.594 11.254 62.523 11.258 62.434 cv
11.254 62.355 11.262 62.281 11.277 62.219 cv
11.289 62.16 11.305 62.113 11.328 62.074 cv
11.344 62.039 11.371 62.008 11.402 61.984 cv
11.434 61.965 11.465 61.957 11.504 61.953 cv
13.355 61.953 li
13.355 55.207 li
11.641 56.227 li
11.551 56.277 11.48 56.305 11.434 56.312 cv
11.379 56.32 11.336 56.312 11.305 56.281 cv
11.27 56.254 11.25 56.203 11.238 56.133 cv
11.227 56.066 11.219 55.98 11.223 55.871 cv
11.219 55.797 11.223 55.73 11.234 55.672 cv
11.238 55.621 11.25 55.574 11.266 55.535 cv
11.277 55.5 11.297 55.469 11.32 55.441 cv
11.344 55.414 11.375 55.387 11.422 55.359 cv
13.465 54.047 li
13.48 54.035 13.5 54.023 13.531 54.016 cv
13.555 54.008 13.59 54 13.637 53.988 cv
13.676 53.98 13.727 53.973 13.781 53.969 cv
13.836 53.969 13.902 53.969 13.988 53.965 cv
14.094 53.969 14.188 53.973 14.262 53.98 cv
14.332 53.988 14.387 54.004 14.434 54.02 cv
14.473 54.039 14.5 54.059 14.516 54.082 cv
14.523 54.109 14.531 54.133 14.535 54.156 cv
14.535 61.953 li
16.141 61.953 li
16.176 61.957 16.211 61.965 16.242 61.984 cv
16.273 62.008 16.297 62.039 16.32 62.074 cv
16.336 62.113 16.352 62.16 16.367 62.219 cv
16.375 62.281 16.383 62.355 16.387 62.434 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.406 60.047 mo
23.406 60.523 23.324 60.945 23.164 61.316 cv
23.004 61.687 22.777 62 22.488 62.254 cv
22.191 62.508 21.844 62.703 21.441 62.832 cv
21.035 62.965 20.586 63.027 20.094 63.027 cv
19.816 63.027 19.555 63.008 19.313 62.969 cv
19.063 62.93 18.844 62.883 18.656 62.828 cv
18.461 62.773 18.305 62.719 18.18 62.66 cv
18.055 62.609 17.977 62.566 17.945 62.531 cv
17.91 62.5 17.887 62.469 17.875 62.441 cv
17.859 62.414 17.844 62.383 17.836 62.34 cv
17.82 62.305 17.813 62.254 17.813 62.191 cv
17.805 62.133 17.805 62.062 17.805 61.98 cv
17.805 61.906 17.809 61.836 17.816 61.773 cv
17.824 61.711 17.836 61.66 17.855 61.621 cv
17.871 61.582 17.891 61.555 17.918 61.535 cv
17.941 61.52 17.973 61.512 18.004 61.508 cv
18.051 61.512 18.121 61.539 18.215 61.594 cv
18.309 61.652 18.438 61.715 18.602 61.781 cv
18.766 61.848 18.965 61.91 19.207 61.969 cv
19.441 62.027 19.727 62.055 20.063 62.055 cv
20.363 62.055 20.645 62.02 20.902 61.945 cv
21.156 61.875 21.379 61.762 21.566 61.605 cv
21.75 61.453 21.895 61.258 22 61.02 cv
22.105 60.785 22.156 60.496 22.16 60.156 cv
22.156 59.875 22.113 59.625 22.023 59.406 cv
21.934 59.187 21.797 59.008 21.613 58.863 cv
21.426 58.723 21.191 58.617 20.91 58.543 cv
20.625 58.473 20.285 58.434 19.898 58.434 cv
19.613 58.434 19.375 58.449 19.176 58.477 cv
18.973 58.508 18.785 58.523 18.613 58.52 cv
18.484 58.523 18.391 58.492 18.34 58.43 cv
18.281 58.371 18.254 58.258 18.258 58.086 cv
18.258 54.473 li
18.254 54.324 18.289 54.215 18.363 54.137 cv
18.43 54.066 18.531 54.027 18.668 54.027 cv
22.598 54.027 li
22.633 54.027 22.668 54.039 22.703 54.059 cv
22.734 54.082 22.762 54.113 22.789 54.152 cv
22.809 54.195 22.824 54.246 22.84 54.309 cv
22.848 54.375 22.855 54.453 22.859 54.535 cv
22.855 54.703 22.832 54.828 22.793 54.918 cv
22.746 55.012 22.688 55.059 22.609 55.055 cv
19.438 55.055 li
19.438 57.543 li
19.59 57.523 19.746 57.512 19.91 57.504 cv
20.066 57.5 20.254 57.496 20.469 57.496 cv
20.953 57.496 21.379 57.559 21.746 57.68 cv
22.109 57.801 22.414 57.973 22.664 58.191 cv
22.906 58.418 23.094 58.684 23.219 58.996 cv
23.344 59.312 23.406 59.664 23.406 60.047 cv
cp
f
10.012 18.441 mo
24.203 18.441 li
24.203 35.531 li
10.012 35.531 li
cp
0 0 0 0 cmyk
ef
16.387 31.316 mo
16.383 31.406 16.375 31.477 16.363 31.535 cv
16.348 31.598 16.328 31.648 16.309 31.68 cv
16.285 31.719 16.262 31.742 16.23 31.758 cv
16.199 31.773 16.168 31.781 16.141 31.781 cv
11.504 31.781 li
11.469 31.781 11.441 31.773 11.414 31.758 cv
11.387 31.742 11.359 31.719 11.336 31.68 cv
11.309 31.648 11.289 31.598 11.277 31.535 cv
11.262 31.477 11.254 31.406 11.258 31.316 cv
11.254 31.238 11.262 31.164 11.277 31.102 cv
11.289 31.043 11.305 30.996 11.328 30.957 cv
11.344 30.922 11.371 30.891 11.402 30.867 cv
11.434 30.848 11.465 30.84 11.504 30.836 cv
13.355 30.836 li
13.355 24.09 li
11.641 25.109 li
11.551 25.16 11.48 25.187 11.434 25.195 cv
11.379 25.203 11.336 25.195 11.305 25.164 cv
11.27 25.137 11.25 25.086 11.238 25.016 cv
11.227 24.949 11.219 24.863 11.223 24.754 cv
11.219 24.68 11.223 24.613 11.234 24.555 cv
11.238 24.504 11.25 24.457 11.266 24.418 cv
11.277 24.383 11.297 24.352 11.32 24.324 cv
11.344 24.297 11.375 24.27 11.422 24.242 cv
13.465 22.93 li
13.48 22.918 13.5 22.906 13.531 22.898 cv
13.555 22.891 13.59 22.883 13.637 22.871 cv
13.676 22.863 13.727 22.855 13.781 22.852 cv
13.836 22.852 13.902 22.852 13.988 22.848 cv
14.094 22.852 14.188 22.855 14.262 22.863 cv
14.332 22.871 14.387 22.887 14.434 22.902 cv
14.473 22.922 14.5 22.941 14.516 22.965 cv
14.523 22.992 14.531 23.016 14.535 23.039 cv
14.535 30.836 li
16.141 30.836 li
16.176 30.84 16.211 30.848 16.242 30.867 cv
16.273 30.891 16.297 30.922 16.32 30.957 cv
16.336 30.996 16.352 31.043 16.367 31.102 cv
16.375 31.164 16.383 31.238 16.387 31.316 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
23.676 28.91 mo
23.676 29.301 23.613 29.68 23.496 30.039 cv
23.371 30.406 23.188 30.723 22.945 30.996 cv
22.695 31.273 22.383 31.496 22.008 31.66 cv
21.625 31.828 21.18 31.91 20.664 31.91 cv
20.293 31.91 19.965 31.867 19.684 31.773 cv
19.398 31.687 19.152 31.555 18.941 31.383 cv
18.73 31.215 18.555 31.008 18.418 30.762 cv
18.277 30.516 18.164 30.234 18.082 29.918 cv
17.996 29.605 17.938 29.262 17.902 28.883 cv
17.863 28.512 17.844 28.109 17.848 27.676 cv
17.844 27.297 17.863 26.914 17.906 26.523 cv
17.945 26.141 18.02 25.766 18.125 25.398 cv
18.23 25.039 18.375 24.699 18.555 24.383 cv
18.734 24.066 18.961 23.789 19.234 23.555 cv
19.508 23.32 19.832 23.133 20.211 22.992 cv
20.59 22.855 21.031 22.789 21.535 22.785 cv
21.703 22.789 21.875 22.797 22.047 22.816 cv
22.219 22.84 22.379 22.871 22.527 22.902 cv
22.676 22.941 22.797 22.977 22.898 23.016 cv
22.996 23.055 23.063 23.09 23.098 23.113 cv
23.125 23.141 23.148 23.168 23.168 23.195 cv
23.184 23.227 23.199 23.258 23.207 23.293 cv
23.215 23.328 23.219 23.367 23.227 23.41 cv
23.227 23.453 23.23 23.508 23.234 23.57 cv
23.23 23.656 23.23 23.727 23.23 23.781 cv
23.227 23.844 23.215 23.891 23.203 23.926 cv
23.184 23.965 23.164 23.992 23.141 24.008 cv
23.113 24.027 23.082 24.035 23.043 24.035 cv
22.992 24.035 22.922 24.02 22.836 23.988 cv
22.746 23.957 22.641 23.922 22.52 23.879 cv
22.395 23.844 22.246 23.809 22.07 23.773 cv
21.895 23.746 21.691 23.73 21.461 23.727 cv
21.031 23.73 20.664 23.816 20.359 23.988 cv
20.055 24.16 19.805 24.395 19.609 24.687 cv
19.414 24.98 19.27 25.32 19.18 25.703 cv
19.082 26.094 19.027 26.496 19.02 26.914 cv
19.137 26.848 19.273 26.781 19.422 26.711 cv
19.57 26.645 19.73 26.582 19.906 26.523 cv
20.082 26.473 20.27 26.426 20.465 26.391 cv
20.66 26.359 20.871 26.344 21.098 26.34 cv
21.574 26.344 21.977 26.41 22.309 26.535 cv
22.637 26.668 22.902 26.848 23.109 27.078 cv
23.309 27.309 23.453 27.578 23.543 27.891 cv
23.629 28.203 23.676 28.543 23.676 28.91 cv
cp
22.48 29.02 mo
22.48 28.758 22.453 28.516 22.402 28.297 cv
22.348 28.082 22.258 27.898 22.137 27.742 cv
22.012 27.594 21.848 27.477 21.645 27.395 cv
21.434 27.312 21.18 27.27 20.883 27.27 cv
20.711 27.27 20.543 27.285 20.375 27.316 cv
20.203 27.348 20.039 27.391 19.883 27.437 cv
19.723 27.492 19.574 27.555 19.434 27.625 cv
19.289 27.699 19.156 27.773 19.039 27.852 cv
19.035 28.445 19.074 28.941 19.152 29.336 cv
19.227 29.734 19.336 30.051 19.48 30.289 cv
19.625 30.531 19.805 30.703 20.02 30.805 cv
20.234 30.91 20.484 30.961 20.773 30.957 cv
21.063 30.961 21.316 30.906 21.531 30.793 cv
21.746 30.687 21.922 30.539 22.066 30.352 cv
22.207 30.168 22.313 29.961 22.379 29.73 cv
22.445 29.5 22.48 29.266 22.48 29.02 cv
cp
f
40.004 516.473 mo
40 516.562 39.992 516.633 39.98 516.691 cv
39.965 516.754 39.945 516.805 39.926 516.836 cv
39.902 516.875 39.879 516.898 39.848 516.914 cv
39.816 516.93 39.785 516.937 39.758 516.937 cv
35.121 516.937 li
35.086 516.937 35.059 516.93 35.031 516.914 cv
35.004 516.898 34.977 516.875 34.953 516.836 cv
34.926 516.805 34.906 516.754 34.895 516.691 cv
34.879 516.633 34.871 516.562 34.875 516.473 cv
34.871 516.395 34.879 516.32 34.895 516.258 cv
34.906 516.199 34.922 516.152 34.945 516.113 cv
34.961 516.078 34.988 516.047 35.02 516.023 cv
35.051 516.004 35.082 515.996 35.121 515.992 cv
36.973 515.992 li
36.973 509.246 li
35.258 510.266 li
35.168 510.316 35.098 510.344 35.051 510.352 cv
34.996 510.359 34.953 510.352 34.922 510.32 cv
34.887 510.293 34.867 510.242 34.855 510.172 cv
34.844 510.105 34.836 510.02 34.84 509.91 cv
34.836 509.836 34.84 509.77 34.852 509.711 cv
34.855 509.66 34.867 509.613 34.883 509.574 cv
34.895 509.539 34.914 509.508 34.938 509.48 cv
34.961 509.453 34.992 509.426 35.039 509.398 cv
37.082 508.086 li
37.098 508.074 37.117 508.062 37.148 508.055 cv
37.172 508.047 37.207 508.039 37.254 508.027 cv
37.293 508.02 37.344 508.012 37.398 508.008 cv
37.453 508.008 37.52 508.008 37.605 508.004 cv
37.711 508.008 37.805 508.012 37.879 508.02 cv
37.949 508.027 38.004 508.043 38.051 508.059 cv
38.09 508.078 38.117 508.098 38.133 508.121 cv
38.141 508.148 38.148 508.172 38.152 508.195 cv
38.152 515.992 li
39.758 515.992 li
39.793 515.996 39.828 516.004 39.859 516.023 cv
39.891 516.047 39.914 516.078 39.938 516.113 cv
39.953 516.152 39.969 516.199 39.984 516.258 cv
39.992 516.32 40 516.395 40.004 516.473 cv
cp
f
112.414 516.43 mo
112.41 516.516 112.406 516.59 112.395 516.652 cv
112.383 516.719 112.367 516.773 112.348 516.812 cv
112.324 516.859 112.297 516.891 112.266 516.906 cv
112.23 516.93 112.191 516.937 112.152 516.937 cv
107.25 516.937 li
107.188 516.937 107.129 516.93 107.082 516.914 cv
107.031 516.898 106.992 516.875 106.957 516.836 cv
106.922 516.805 106.895 516.75 106.883 516.68 cv
106.863 516.609 106.855 516.523 106.859 516.422 cv
106.855 516.332 106.859 516.254 106.867 516.184 cv
106.871 516.117 106.887 516.059 106.914 516.004 cv
106.938 515.953 106.969 515.898 107.004 515.844 cv
107.039 515.793 107.082 515.738 107.141 515.676 cv
108.914 513.852 li
109.324 513.434 109.652 513.059 109.902 512.723 cv
110.148 512.395 110.34 512.09 110.473 511.812 cv
110.605 511.539 110.691 511.289 110.738 511.062 cv
110.777 510.84 110.801 510.629 110.801 510.434 cv
110.801 510.238 110.766 510.055 110.699 509.875 cv
110.633 509.703 110.539 509.547 110.414 509.41 cv
110.289 509.281 110.133 509.176 109.945 509.094 cv
109.758 509.02 109.539 508.98 109.293 508.977 cv
109.004 508.98 108.746 509.02 108.52 509.094 cv
108.289 509.176 108.09 509.262 107.918 509.348 cv
107.746 509.441 107.602 509.523 107.484 509.602 cv
107.367 509.68 107.281 509.719 107.23 509.719 cv
107.195 509.719 107.164 509.711 107.141 509.691 cv
107.109 509.676 107.09 509.645 107.074 509.602 cv
107.059 509.562 107.043 509.508 107.035 509.437 cv
107.023 509.371 107.02 509.289 107.023 509.191 cv
107.02 509.125 107.023 509.066 107.031 509.016 cv
107.035 508.965 107.043 508.922 107.055 508.883 cv
107.063 508.848 107.078 508.812 107.098 508.781 cv
107.117 508.75 107.152 508.711 107.211 508.66 cv
107.262 508.613 107.355 508.547 107.492 508.465 cv
107.625 508.383 107.797 508.305 108 508.223 cv
108.203 508.145 108.426 508.074 108.672 508.02 cv
108.914 507.965 109.172 507.937 109.445 507.937 cv
109.871 507.937 110.246 508 110.57 508.121 cv
110.891 508.242 111.156 508.406 111.371 508.617 cv
111.582 508.828 111.742 509.074 111.848 509.348 cv
111.953 509.629 112.008 509.926 112.008 510.238 cv
112.008 510.527 111.98 510.809 111.93 511.086 cv
111.879 511.371 111.773 511.676 111.613 512 cv
111.449 512.328 111.215 512.691 110.91 513.09 cv
110.602 513.492 110.195 513.953 109.691 514.469 cv
108.285 515.937 li
112.145 515.937 li
112.176 515.941 112.211 515.953 112.25 515.969 cv
112.281 515.992 112.313 516.023 112.34 516.062 cv
112.363 516.105 112.383 516.156 112.395 516.215 cv
112.406 516.281 112.41 516.352 112.414 516.43 cv
cp
f
185.199 514.414 mo
185.195 514.566 185.172 514.687 185.129 514.773 cv
185.082 514.863 185.02 514.906 184.938 514.902 cv
183.938 514.902 li
183.938 516.766 li
183.938 516.805 183.926 516.836 183.91 516.859 cv
183.887 516.887 183.855 516.906 183.813 516.926 cv
183.762 516.941 183.699 516.953 183.629 516.965 cv
183.551 516.973 183.457 516.977 183.34 516.98 cv
183.223 516.977 183.125 516.973 183.055 516.965 cv
182.977 516.953 182.918 516.941 182.875 516.926 cv
182.828 516.906 182.797 516.887 182.781 516.859 cv
182.762 516.836 182.754 516.805 182.758 516.766 cv
182.758 514.902 li
179.129 514.902 li
179.07 514.906 179.027 514.898 178.992 514.883 cv
178.957 514.871 178.922 514.844 178.895 514.805 cv
178.863 514.77 178.844 514.719 178.832 514.648 cv
178.82 514.582 178.816 514.492 178.816 514.379 cv
178.816 514.297 178.816 514.219 178.824 514.148 cv
178.824 514.078 178.836 514.016 178.852 513.961 cv
178.863 513.906 178.879 513.852 178.906 513.797 cv
178.926 513.742 178.953 513.687 178.988 513.625 cv
182.148 508.238 li
182.168 508.203 182.203 508.172 182.25 508.145 cv
182.293 508.117 182.348 508.094 182.422 508.074 cv
182.488 508.059 182.574 508.047 182.68 508.035 cv
182.781 508.031 182.902 508.027 183.043 508.023 cv
183.191 508.027 183.328 508.031 183.445 508.043 cv
183.559 508.055 183.648 508.07 183.723 508.086 cv
183.789 508.105 183.844 508.129 183.883 508.16 cv
183.918 508.191 183.938 508.227 183.938 508.266 cv
183.938 513.93 li
184.938 513.93 li
185.012 513.934 185.074 513.973 185.125 514.051 cv
185.172 514.133 185.195 514.254 185.199 514.414 cv
cp
182.758 509.062 mo
182.746 509.062 li
179.895 513.93 li
182.758 513.93 li
cp
f
257.461 514.066 mo
257.461 514.457 257.398 514.836 257.281 515.195 cv
257.156 515.562 256.973 515.879 256.73 516.152 cv
256.48 516.43 256.168 516.652 255.793 516.816 cv
255.41 516.984 254.965 517.066 254.449 517.066 cv
254.078 517.066 253.75 517.023 253.469 516.93 cv
253.184 516.844 252.938 516.711 252.727 516.539 cv
252.516 516.371 252.34 516.164 252.203 515.918 cv
252.063 515.672 251.949 515.391 251.867 515.074 cv
251.781 514.762 251.723 514.418 251.688 514.039 cv
251.648 513.668 251.629 513.266 251.633 512.832 cv
251.629 512.453 251.648 512.07 251.691 511.68 cv
251.73 511.297 251.805 510.922 251.91 510.555 cv
252.016 510.195 252.16 509.855 252.34 509.539 cv
252.52 509.223 252.746 508.945 253.02 508.711 cv
253.293 508.477 253.617 508.289 253.996 508.148 cv
254.375 508.012 254.816 507.945 255.32 507.941 cv
255.488 507.945 255.66 507.953 255.832 507.973 cv
256.004 507.996 256.164 508.027 256.313 508.059 cv
256.461 508.098 256.582 508.133 256.684 508.172 cv
256.781 508.211 256.848 508.246 256.883 508.27 cv
256.91 508.297 256.934 508.324 256.953 508.352 cv
256.969 508.383 256.984 508.414 256.992 508.449 cv
257 508.484 257.004 508.523 257.012 508.566 cv
257.012 508.609 257.016 508.664 257.02 508.727 cv
257.016 508.812 257.016 508.883 257.016 508.937 cv
257.012 509 257 509.047 256.988 509.082 cv
256.969 509.121 256.949 509.148 256.926 509.164 cv
256.898 509.184 256.867 509.191 256.828 509.191 cv
256.777 509.191 256.707 509.176 256.621 509.145 cv
256.531 509.113 256.426 509.078 256.305 509.035 cv
256.18 509 256.031 508.965 255.855 508.93 cv
255.68 508.902 255.477 508.887 255.246 508.883 cv
254.816 508.887 254.449 508.973 254.145 509.145 cv
253.84 509.316 253.59 509.551 253.395 509.844 cv
253.199 510.137 253.055 510.477 252.965 510.859 cv
252.867 511.25 252.813 511.652 252.805 512.07 cv
252.922 512.004 253.059 511.937 253.207 511.867 cv
253.355 511.801 253.516 511.738 253.691 511.68 cv
253.867 511.629 254.055 511.582 254.25 511.547 cv
254.445 511.516 254.656 511.5 254.883 511.496 cv
255.359 511.5 255.762 511.566 256.094 511.691 cv
256.422 511.824 256.688 512.004 256.895 512.234 cv
257.094 512.465 257.238 512.734 257.328 513.047 cv
257.414 513.359 257.461 513.699 257.461 514.066 cv
cp
256.266 514.176 mo
256.266 513.914 256.238 513.672 256.188 513.453 cv
256.133 513.238 256.043 513.055 255.922 512.898 cv
255.797 512.75 255.633 512.633 255.43 512.551 cv
255.219 512.469 254.965 512.426 254.668 512.426 cv
254.496 512.426 254.328 512.441 254.16 512.473 cv
253.988 512.504 253.824 512.547 253.668 512.594 cv
253.508 512.648 253.359 512.711 253.219 512.781 cv
253.074 512.855 252.941 512.93 252.824 513.008 cv
252.82 513.602 252.859 514.098 252.938 514.492 cv
253.012 514.891 253.121 515.207 253.266 515.445 cv
253.41 515.687 253.59 515.859 253.805 515.961 cv
254.02 516.066 254.27 516.117 254.559 516.113 cv
254.848 516.117 255.102 516.062 255.316 515.949 cv
255.531 515.844 255.707 515.695 255.852 515.508 cv
255.992 515.324 256.098 515.117 256.164 514.887 cv
256.23 514.656 256.266 514.422 256.266 514.176 cv
cp
f
329.84 514.66 mo
329.84 515.047 329.77 515.391 329.633 515.687 cv
329.496 515.992 329.301 516.242 329.043 516.445 cv
328.785 516.652 328.465 516.809 328.086 516.91 cv
327.703 517.016 327.27 517.066 326.785 517.066 cv
326.324 517.066 325.914 517.02 325.555 516.926 cv
325.191 516.832 324.887 516.691 324.637 516.5 cv
324.387 516.316 324.195 516.086 324.063 515.809 cv
323.93 515.535 323.863 515.223 323.863 514.867 cv
323.863 514.594 323.906 514.336 324 514.102 cv
324.086 513.867 324.219 513.652 324.395 513.457 cv
324.563 513.262 324.773 513.078 325.027 512.902 cv
325.277 512.734 325.563 512.57 325.879 512.414 cv
325.605 512.273 325.363 512.125 325.152 511.965 cv
324.941 511.809 324.762 511.637 324.617 511.449 cv
324.469 511.266 324.359 511.07 324.285 510.859 cv
324.207 510.652 324.168 510.422 324.172 510.172 cv
324.168 509.863 324.223 509.57 324.34 509.297 cv
324.449 509.027 324.621 508.793 324.848 508.59 cv
325.074 508.391 325.359 508.23 325.711 508.113 cv
326.055 507.996 326.465 507.937 326.934 507.937 cv
327.379 507.937 327.766 507.992 328.094 508.098 cv
328.422 508.207 328.691 508.352 328.902 508.535 cv
329.113 508.723 329.27 508.941 329.375 509.191 cv
329.473 509.441 329.523 509.711 329.527 510 cv
329.523 510.234 329.484 510.461 329.414 510.672 cv
329.336 510.891 329.227 511.094 329.078 511.281 cv
328.93 511.477 328.75 511.656 328.539 511.82 cv
328.328 511.992 328.086 512.148 327.813 512.289 cv
328.133 512.453 328.418 512.617 328.676 512.785 cv
328.926 512.953 329.141 513.133 329.316 513.328 cv
329.484 513.523 329.613 513.73 329.707 513.945 cv
329.793 514.164 329.84 514.402 329.84 514.66 cv
cp
328.359 510.109 mo
328.355 509.922 328.324 509.746 328.258 509.59 cv
328.191 509.434 328.094 509.301 327.969 509.191 cv
327.84 509.082 327.68 509 327.492 508.941 cv
327.297 508.887 327.082 508.859 326.844 508.855 cv
326.348 508.859 325.973 508.969 325.723 509.191 cv
325.465 509.418 325.34 509.727 325.344 510.109 cv
325.34 510.289 325.371 510.453 325.434 510.605 cv
325.496 510.762 325.59 510.906 325.723 511.043 cv
325.848 511.18 326.012 511.312 326.215 511.441 cv
326.41 511.574 326.648 511.711 326.926 511.852 cv
327.387 511.617 327.742 511.355 327.988 511.062 cv
328.234 510.777 328.355 510.461 328.359 510.109 cv
cp
328.648 514.785 mo
328.645 514.578 328.605 514.387 328.531 514.215 cv
328.449 514.047 328.332 513.887 328.176 513.734 cv
328.02 513.586 327.82 513.441 327.586 513.301 cv
327.348 513.164 327.078 513.02 326.77 512.867 cv
326.48 513.012 326.227 513.152 326.012 513.293 cv
325.793 513.434 325.613 513.582 325.477 513.73 cv
325.336 513.887 325.23 514.043 325.16 514.207 cv
325.086 514.375 325.051 514.559 325.055 514.758 cv
325.051 515.203 325.203 515.547 325.512 515.785 cv
325.813 516.031 326.266 516.152 326.871 516.148 cv
327.453 516.152 327.898 516.031 328.199 515.781 cv
328.496 515.539 328.645 515.207 328.648 514.785 cv
cp
f
398.516 516.473 mo
398.512 516.562 398.504 516.633 398.492 516.691 cv
398.477 516.754 398.457 516.805 398.438 516.836 cv
398.414 516.875 398.391 516.898 398.359 516.914 cv
398.328 516.93 398.297 516.937 398.27 516.937 cv
393.633 516.937 li
393.598 516.937 393.57 516.93 393.543 516.914 cv
393.516 516.898 393.488 516.875 393.465 516.836 cv
393.438 516.805 393.418 516.754 393.406 516.691 cv
393.391 516.633 393.383 516.562 393.387 516.473 cv
393.383 516.395 393.391 516.32 393.406 516.258 cv
393.418 516.199 393.434 516.152 393.457 516.113 cv
393.473 516.078 393.5 516.047 393.531 516.023 cv
393.563 516.004 393.594 515.996 393.633 515.992 cv
395.484 515.992 li
395.484 509.246 li
393.77 510.266 li
393.68 510.316 393.609 510.344 393.563 510.352 cv
393.508 510.359 393.465 510.352 393.434 510.32 cv
393.398 510.293 393.379 510.242 393.367 510.172 cv
393.355 510.105 393.348 510.02 393.352 509.91 cv
393.348 509.836 393.352 509.77 393.363 509.711 cv
393.367 509.66 393.379 509.613 393.395 509.574 cv
393.406 509.539 393.426 509.508 393.449 509.48 cv
393.473 509.453 393.504 509.426 393.551 509.398 cv
395.594 508.086 li
395.609 508.074 395.629 508.062 395.66 508.055 cv
395.684 508.047 395.719 508.039 395.766 508.027 cv
395.805 508.02 395.855 508.012 395.91 508.008 cv
395.965 508.008 396.031 508.008 396.117 508.004 cv
396.223 508.008 396.316 508.012 396.391 508.02 cv
396.461 508.027 396.516 508.043 396.563 508.059 cv
396.602 508.078 396.629 508.098 396.645 508.121 cv
396.652 508.148 396.66 508.172 396.664 508.195 cv
396.664 515.992 li
398.27 515.992 li
398.305 515.996 398.34 516.004 398.371 516.023 cv
398.402 516.047 398.426 516.078 398.449 516.113 cv
398.465 516.152 398.48 516.199 398.496 516.258 cv
398.504 516.32 398.512 516.395 398.516 516.473 cv
cp
f
405.867 512.48 mo
405.863 513.164 405.813 513.785 405.707 514.348 cv
405.598 514.91 405.418 515.395 405.172 515.797 cv
404.918 516.203 404.59 516.516 404.191 516.734 cv
403.785 516.957 403.293 517.066 402.707 517.066 cv
402.148 517.066 401.676 516.969 401.297 516.77 cv
400.914 516.574 400.609 516.281 400.375 515.895 cv
400.141 515.508 399.973 515.035 399.879 514.469 cv
399.777 513.906 399.73 513.258 399.73 512.523 cv
399.73 511.852 399.785 511.23 399.895 510.664 cv
400.004 510.102 400.18 509.617 400.43 509.211 cv
400.672 508.809 400.996 508.496 401.402 508.27 cv
401.801 508.051 402.297 507.937 402.887 507.937 cv
403.445 507.937 403.918 508.039 404.301 508.234 cv
404.684 508.437 404.988 508.73 405.223 509.113 cv
405.453 509.504 405.621 509.977 405.719 510.539 cv
405.816 511.102 405.863 511.75 405.867 512.48 cv
cp
404.66 512.562 mo
404.656 512.121 404.641 511.723 404.613 511.371 cv
404.578 511.02 404.531 510.711 404.473 510.441 cv
404.406 510.172 404.328 509.941 404.23 509.746 cv
404.133 509.555 404.016 509.395 403.879 509.266 cv
403.738 509.141 403.578 509.047 403.406 508.988 cv
403.227 508.934 403.031 508.906 402.816 508.902 cv
402.426 508.906 402.109 508.996 401.871 509.18 cv
401.625 509.363 401.434 509.617 401.297 509.934 cv
401.156 510.254 401.063 510.625 401.012 511.055 cv
400.961 511.484 400.938 511.949 400.938 512.441 cv
400.938 513.105 400.969 513.668 401.039 514.129 cv
401.105 514.598 401.215 514.977 401.367 515.266 cv
401.512 515.562 401.703 515.773 401.934 515.902 cv
402.164 516.039 402.445 516.105 402.777 516.102 cv
403.031 516.105 403.254 516.066 403.449 515.98 cv
403.641 515.902 403.809 515.781 403.949 515.625 cv
404.09 515.473 404.203 515.289 404.297 515.074 cv
404.383 514.859 404.457 514.621 404.516 514.359 cv
404.566 514.102 404.605 513.82 404.629 513.516 cv
404.648 513.211 404.656 512.895 404.66 512.562 cv
cp
f
470.945 516.473 mo
470.941 516.562 470.934 516.633 470.922 516.691 cv
470.906 516.754 470.887 516.805 470.867 516.836 cv
470.844 516.875 470.82 516.898 470.789 516.914 cv
470.758 516.93 470.727 516.937 470.699 516.937 cv
466.063 516.937 li
466.027 516.937 466 516.93 465.973 516.914 cv
465.945 516.898 465.918 516.875 465.895 516.836 cv
465.867 516.805 465.848 516.754 465.836 516.691 cv
465.82 516.633 465.813 516.562 465.816 516.473 cv
465.813 516.395 465.82 516.32 465.836 516.258 cv
465.848 516.199 465.863 516.152 465.887 516.113 cv
465.902 516.078 465.93 516.047 465.961 516.023 cv
465.992 516.004 466.023 515.996 466.063 515.992 cv
467.914 515.992 li
467.914 509.246 li
466.199 510.266 li
466.109 510.316 466.039 510.344 465.992 510.352 cv
465.938 510.359 465.895 510.352 465.863 510.32 cv
465.828 510.293 465.809 510.242 465.797 510.172 cv
465.785 510.105 465.777 510.02 465.781 509.91 cv
465.777 509.836 465.781 509.77 465.793 509.711 cv
465.797 509.66 465.809 509.613 465.824 509.574 cv
465.836 509.539 465.855 509.508 465.879 509.48 cv
465.902 509.453 465.934 509.426 465.98 509.398 cv
468.023 508.086 li
468.039 508.074 468.059 508.062 468.09 508.055 cv
468.113 508.047 468.148 508.039 468.195 508.027 cv
468.234 508.02 468.285 508.012 468.34 508.008 cv
468.395 508.008 468.461 508.008 468.547 508.004 cv
468.652 508.008 468.746 508.012 468.82 508.02 cv
468.891 508.027 468.945 508.043 468.992 508.059 cv
469.031 508.078 469.059 508.098 469.074 508.121 cv
469.082 508.148 469.09 508.172 469.094 508.195 cv
469.094 515.992 li
470.699 515.992 li
470.734 515.996 470.77 516.004 470.801 516.023 cv
470.832 516.047 470.855 516.078 470.879 516.113 cv
470.895 516.152 470.91 516.199 470.926 516.258 cv
470.934 516.32 470.941 516.395 470.945 516.473 cv
cp
f
478.008 516.43 mo
478.004 516.516 478 516.59 477.988 516.652 cv
477.977 516.719 477.961 516.773 477.941 516.812 cv
477.918 516.859 477.891 516.891 477.859 516.906 cv
477.824 516.93 477.785 516.937 477.746 516.937 cv
472.844 516.937 li
472.781 516.937 472.723 516.93 472.676 516.914 cv
472.625 516.898 472.586 516.875 472.551 516.836 cv
472.516 516.805 472.488 516.75 472.477 516.68 cv
472.457 516.609 472.449 516.523 472.453 516.422 cv
472.449 516.332 472.453 516.254 472.461 516.184 cv
472.465 516.117 472.48 516.059 472.508 516.004 cv
472.531 515.953 472.563 515.898 472.598 515.844 cv
472.633 515.793 472.676 515.738 472.734 515.676 cv
474.508 513.852 li
474.918 513.434 475.246 513.059 475.496 512.723 cv
475.742 512.395 475.934 512.09 476.066 511.812 cv
476.199 511.539 476.285 511.289 476.332 511.062 cv
476.371 510.84 476.395 510.629 476.395 510.434 cv
476.395 510.238 476.359 510.055 476.293 509.875 cv
476.227 509.703 476.133 509.547 476.008 509.41 cv
475.883 509.281 475.727 509.176 475.539 509.094 cv
475.352 509.02 475.133 508.98 474.887 508.977 cv
474.598 508.98 474.34 509.02 474.113 509.094 cv
473.883 509.176 473.684 509.262 473.512 509.348 cv
473.34 509.441 473.195 509.523 473.078 509.602 cv
472.961 509.68 472.875 509.719 472.824 509.719 cv
472.789 509.719 472.758 509.711 472.734 509.691 cv
472.703 509.676 472.684 509.645 472.668 509.602 cv
472.652 509.562 472.637 509.508 472.629 509.437 cv
472.617 509.371 472.613 509.289 472.617 509.191 cv
472.613 509.125 472.617 509.066 472.625 509.016 cv
472.629 508.965 472.637 508.922 472.648 508.883 cv
472.656 508.848 472.672 508.812 472.691 508.781 cv
472.711 508.75 472.746 508.711 472.805 508.66 cv
472.855 508.613 472.949 508.547 473.086 508.465 cv
473.219 508.383 473.391 508.305 473.594 508.223 cv
473.797 508.145 474.02 508.074 474.266 508.02 cv
474.508 507.965 474.766 507.937 475.039 507.937 cv
475.465 507.937 475.84 508 476.164 508.121 cv
476.484 508.242 476.75 508.406 476.965 508.617 cv
477.176 508.828 477.336 509.074 477.441 509.348 cv
477.547 509.629 477.602 509.926 477.602 510.238 cv
477.602 510.527 477.574 510.809 477.523 511.086 cv
477.473 511.371 477.367 511.676 477.207 512 cv
477.043 512.328 476.809 512.691 476.504 513.09 cv
476.195 513.492 475.789 513.953 475.285 514.469 cv
473.879 515.937 li
477.738 515.937 li
477.77 515.941 477.805 515.953 477.844 515.969 cv
477.875 515.992 477.906 516.023 477.934 516.062 cv
477.957 516.105 477.977 516.156 477.988 516.215 cv
478 516.281 478.004 516.352 478.008 516.43 cv
cp
f
543.355 516.473 mo
543.352 516.562 543.344 516.633 543.332 516.691 cv
543.316 516.754 543.297 516.805 543.277 516.836 cv
543.254 516.875 543.23 516.898 543.199 516.914 cv
543.168 516.93 543.137 516.937 543.109 516.937 cv
538.473 516.937 li
538.438 516.937 538.41 516.93 538.383 516.914 cv
538.355 516.898 538.328 516.875 538.305 516.836 cv
538.277 516.805 538.258 516.754 538.246 516.691 cv
538.23 516.633 538.223 516.562 538.227 516.473 cv
538.223 516.395 538.23 516.32 538.246 516.258 cv
538.258 516.199 538.273 516.152 538.297 516.113 cv
538.313 516.078 538.34 516.047 538.371 516.023 cv
538.402 516.004 538.434 515.996 538.473 515.992 cv
540.324 515.992 li
540.324 509.246 li
538.609 510.266 li
538.52 510.316 538.449 510.344 538.402 510.352 cv
538.348 510.359 538.305 510.352 538.273 510.32 cv
538.238 510.293 538.219 510.242 538.207 510.172 cv
538.195 510.105 538.188 510.02 538.191 509.91 cv
538.188 509.836 538.191 509.77 538.203 509.711 cv
538.207 509.66 538.219 509.613 538.234 509.574 cv
538.246 509.539 538.266 509.508 538.289 509.48 cv
538.313 509.453 538.344 509.426 538.391 509.398 cv
540.434 508.086 li
540.449 508.074 540.469 508.062 540.5 508.055 cv
540.523 508.047 540.559 508.039 540.605 508.027 cv
540.645 508.02 540.695 508.012 540.75 508.008 cv
540.805 508.008 540.871 508.008 540.957 508.004 cv
541.063 508.008 541.156 508.012 541.23 508.02 cv
541.301 508.027 541.355 508.043 541.402 508.059 cv
541.441 508.078 541.469 508.098 541.484 508.121 cv
541.492 508.148 541.5 508.172 541.504 508.195 cv
541.504 515.992 li
543.109 515.992 li
543.145 515.996 543.18 516.004 543.211 516.023 cv
543.242 516.047 543.266 516.078 543.289 516.113 cv
543.305 516.152 543.32 516.199 543.336 516.258 cv
543.344 516.32 543.352 516.395 543.355 516.473 cv
cp
f
550.789 514.414 mo
550.785 514.566 550.762 514.687 550.719 514.773 cv
550.672 514.863 550.609 514.906 550.527 514.902 cv
549.527 514.902 li
549.527 516.766 li
549.527 516.805 549.516 516.836 549.5 516.859 cv
549.477 516.887 549.445 516.906 549.402 516.926 cv
549.352 516.941 549.289 516.953 549.219 516.965 cv
549.141 516.973 549.047 516.977 548.93 516.98 cv
548.813 516.977 548.715 516.973 548.645 516.965 cv
548.566 516.953 548.508 516.941 548.465 516.926 cv
548.418 516.906 548.387 516.887 548.371 516.859 cv
548.352 516.836 548.344 516.805 548.348 516.766 cv
548.348 514.902 li
544.719 514.902 li
544.66 514.906 544.617 514.898 544.582 514.883 cv
544.547 514.871 544.512 514.844 544.484 514.805 cv
544.453 514.77 544.434 514.719 544.422 514.648 cv
544.41 514.582 544.406 514.492 544.406 514.379 cv
544.406 514.297 544.406 514.219 544.414 514.148 cv
544.414 514.078 544.426 514.016 544.441 513.961 cv
544.453 513.906 544.469 513.852 544.496 513.797 cv
544.516 513.742 544.543 513.687 544.578 513.625 cv
547.738 508.238 li
547.758 508.203 547.793 508.172 547.84 508.145 cv
547.883 508.117 547.938 508.094 548.012 508.074 cv
548.078 508.059 548.164 508.047 548.27 508.035 cv
548.371 508.031 548.492 508.027 548.633 508.023 cv
548.781 508.027 548.918 508.031 549.035 508.043 cv
549.148 508.055 549.238 508.07 549.313 508.086 cv
549.379 508.105 549.434 508.129 549.473 508.16 cv
549.508 508.191 549.527 508.227 549.527 508.266 cv
549.527 513.93 li
550.527 513.93 li
550.602 513.934 550.664 513.973 550.715 514.051 cv
550.762 514.133 550.785 514.254 550.789 514.414 cv
cp
548.348 509.062 mo
548.336 509.062 li
545.484 513.93 li
548.348 513.93 li
cp
f
615.766 516.473 mo
615.762 516.562 615.754 516.633 615.742 516.691 cv
615.727 516.754 615.707 516.805 615.688 516.836 cv
615.664 516.875 615.641 516.898 615.609 516.914 cv
615.578 516.93 615.547 516.937 615.52 516.937 cv
610.883 516.937 li
610.848 516.937 610.82 516.93 610.793 516.914 cv
610.766 516.898 610.738 516.875 610.715 516.836 cv
610.688 516.805 610.668 516.754 610.656 516.691 cv
610.641 516.633 610.633 516.562 610.637 516.473 cv
610.633 516.395 610.641 516.32 610.656 516.258 cv
610.668 516.199 610.684 516.152 610.707 516.113 cv
610.723 516.078 610.75 516.047 610.781 516.023 cv
610.813 516.004 610.844 515.996 610.883 515.992 cv
612.734 515.992 li
612.734 509.246 li
611.02 510.266 li
610.93 510.316 610.859 510.344 610.813 510.352 cv
610.758 510.359 610.715 510.352 610.684 510.32 cv
610.648 510.293 610.629 510.242 610.617 510.172 cv
610.605 510.105 610.598 510.02 610.602 509.91 cv
610.598 509.836 610.602 509.77 610.613 509.711 cv
610.617 509.66 610.629 509.613 610.645 509.574 cv
610.656 509.539 610.676 509.508 610.699 509.48 cv
610.723 509.453 610.754 509.426 610.801 509.398 cv
612.844 508.086 li
612.859 508.074 612.879 508.062 612.91 508.055 cv
612.934 508.047 612.969 508.039 613.016 508.027 cv
613.055 508.02 613.105 508.012 613.16 508.008 cv
613.215 508.008 613.281 508.008 613.367 508.004 cv
613.473 508.008 613.566 508.012 613.641 508.02 cv
613.711 508.027 613.766 508.043 613.813 508.059 cv
613.852 508.078 613.879 508.098 613.895 508.121 cv
613.902 508.148 613.91 508.172 613.914 508.195 cv
613.914 515.992 li
615.52 515.992 li
615.555 515.996 615.59 516.004 615.621 516.023 cv
615.652 516.047 615.676 516.078 615.699 516.113 cv
615.715 516.152 615.73 516.199 615.746 516.258 cv
615.754 516.32 615.762 516.395 615.766 516.473 cv
cp
f
623.051 514.066 mo
623.051 514.457 622.988 514.836 622.871 515.195 cv
622.746 515.562 622.563 515.879 622.32 516.152 cv
622.07 516.43 621.758 516.652 621.383 516.816 cv
621 516.984 620.555 517.066 620.039 517.066 cv
619.668 517.066 619.34 517.023 619.059 516.93 cv
618.773 516.844 618.527 516.711 618.316 516.539 cv
618.105 516.371 617.93 516.164 617.793 515.918 cv
617.652 515.672 617.539 515.391 617.457 515.074 cv
617.371 514.762 617.313 514.418 617.277 514.039 cv
617.238 513.668 617.219 513.266 617.223 512.832 cv
617.219 512.453 617.238 512.07 617.281 511.68 cv
617.32 511.297 617.395 510.922 617.5 510.555 cv
617.605 510.195 617.75 509.855 617.93 509.539 cv
618.109 509.223 618.336 508.945 618.609 508.711 cv
618.883 508.477 619.207 508.289 619.586 508.148 cv
619.965 508.012 620.406 507.945 620.91 507.941 cv
621.078 507.945 621.25 507.953 621.422 507.973 cv
621.594 507.996 621.754 508.027 621.902 508.059 cv
622.051 508.098 622.172 508.133 622.273 508.172 cv
622.371 508.211 622.438 508.246 622.473 508.27 cv
622.5 508.297 622.523 508.324 622.543 508.352 cv
622.559 508.383 622.574 508.414 622.582 508.449 cv
622.59 508.484 622.594 508.523 622.602 508.566 cv
622.602 508.609 622.605 508.664 622.609 508.727 cv
622.605 508.812 622.605 508.883 622.605 508.937 cv
622.602 509 622.59 509.047 622.578 509.082 cv
622.559 509.121 622.539 509.148 622.516 509.164 cv
622.488 509.184 622.457 509.191 622.418 509.191 cv
622.367 509.191 622.297 509.176 622.211 509.145 cv
622.121 509.113 622.016 509.078 621.895 509.035 cv
621.77 509 621.621 508.965 621.445 508.93 cv
621.27 508.902 621.066 508.887 620.836 508.883 cv
620.406 508.887 620.039 508.973 619.734 509.145 cv
619.43 509.316 619.18 509.551 618.984 509.844 cv
618.789 510.137 618.645 510.477 618.555 510.859 cv
618.457 511.25 618.402 511.652 618.395 512.07 cv
618.512 512.004 618.648 511.937 618.797 511.867 cv
618.945 511.801 619.105 511.738 619.281 511.68 cv
619.457 511.629 619.645 511.582 619.84 511.547 cv
620.035 511.516 620.246 511.5 620.473 511.496 cv
620.949 511.5 621.352 511.566 621.684 511.691 cv
622.012 511.824 622.277 512.004 622.484 512.234 cv
622.684 512.465 622.828 512.734 622.918 513.047 cv
623.004 513.359 623.051 513.699 623.051 514.066 cv
cp
621.855 514.176 mo
621.855 513.914 621.828 513.672 621.777 513.453 cv
621.723 513.238 621.633 513.055 621.512 512.898 cv
621.387 512.75 621.223 512.633 621.02 512.551 cv
620.809 512.469 620.555 512.426 620.258 512.426 cv
620.086 512.426 619.918 512.441 619.75 512.473 cv
619.578 512.504 619.414 512.547 619.258 512.594 cv
619.098 512.648 618.949 512.711 618.809 512.781 cv
618.664 512.855 618.531 512.93 618.414 513.008 cv
618.41 513.602 618.449 514.098 618.527 514.492 cv
618.602 514.891 618.711 515.207 618.855 515.445 cv
619 515.687 619.18 515.859 619.395 515.961 cv
619.609 516.066 619.859 516.117 620.148 516.113 cv
620.438 516.117 620.691 516.062 620.906 515.949 cv
621.121 515.844 621.297 515.695 621.441 515.508 cv
621.582 515.324 621.688 515.117 621.754 514.887 cv
621.82 514.656 621.855 514.422 621.855 514.176 cv
cp
f
286.109 534.285 mo
286.105 534.391 286.09 534.48 286.055 534.551 cv
286.02 534.629 285.973 534.687 285.918 534.73 cv
285.859 534.781 285.797 534.816 285.73 534.832 cv
285.656 534.855 285.586 534.863 285.523 534.863 cv
285.078 534.863 li
284.938 534.863 284.816 534.852 284.711 534.82 cv
284.605 534.797 284.508 534.742 284.414 534.664 cv
284.32 534.59 284.227 534.488 284.133 534.355 cv
284.039 534.227 283.938 534.062 283.832 533.859 cv
280.758 528.121 li
280.594 527.828 280.43 527.52 280.27 527.191 cv
280.102 526.871 279.949 526.555 279.813 526.246 cv
279.797 526.246 li
279.805 526.621 279.813 527.004 279.82 527.391 cv
279.824 527.781 279.824 528.168 279.828 528.551 cv
279.828 534.637 li
279.824 534.676 279.813 534.711 279.793 534.742 cv
279.77 534.777 279.734 534.805 279.684 534.82 cv
279.629 534.84 279.559 534.852 279.477 534.867 cv
279.391 534.879 279.285 534.887 279.156 534.887 cv
279.02 534.887 278.91 534.879 278.828 534.867 cv
278.742 534.852 278.676 534.84 278.629 534.82 cv
278.578 534.805 278.543 534.777 278.52 534.742 cv
278.496 534.711 278.484 534.676 278.488 534.637 cv
278.488 525.332 li
278.484 525.125 278.543 524.977 278.664 524.887 cv
278.781 524.801 278.91 524.758 279.051 524.754 cv
279.711 524.754 li
279.863 524.758 279.996 524.77 280.102 524.793 cv
280.203 524.82 280.297 524.863 280.383 524.922 cv
280.465 524.984 280.543 525.066 280.625 525.172 cv
280.699 525.281 280.781 525.418 280.867 525.574 cv
283.234 530 li
283.379 530.273 283.52 530.539 283.656 530.793 cv
283.789 531.051 283.918 531.305 284.047 531.551 cv
284.168 531.805 284.293 532.051 284.418 532.289 cv
284.539 532.531 284.66 532.773 284.785 533.016 cv
284.793 533.016 li
284.781 532.609 284.773 532.18 284.773 531.734 cv
284.766 531.289 284.766 530.863 284.77 530.453 cv
284.77 524.98 li
284.766 524.945 284.777 524.91 284.801 524.879 cv
284.824 524.848 284.859 524.82 284.914 524.797 cv
284.961 524.773 285.031 524.758 285.117 524.746 cv
285.203 524.738 285.313 524.734 285.453 524.73 cv
285.57 524.734 285.676 524.738 285.766 524.746 cv
285.852 524.758 285.918 524.773 285.969 524.797 cv
286.016 524.82 286.051 524.848 286.074 524.879 cv
286.094 524.91 286.105 524.945 286.109 524.98 cv
cp
f
294.66 534.645 mo
294.656 534.691 294.648 534.727 294.633 534.75 cv
294.613 534.781 294.578 534.805 294.535 534.824 cv
294.488 534.844 294.43 534.855 294.355 534.871 cv
294.277 534.879 294.184 534.887 294.078 534.887 cv
293.953 534.887 293.855 534.879 293.785 534.871 cv
293.707 534.855 293.648 534.844 293.605 534.824 cv
293.559 534.805 293.527 534.781 293.516 534.75 cv
293.496 534.727 293.488 534.691 293.492 534.645 cv
293.492 533.719 li
293.09 534.164 292.695 534.484 292.309 534.684 cv
291.914 534.887 291.52 534.984 291.125 534.988 cv
290.652 534.984 290.258 534.91 289.941 534.754 cv
289.621 534.602 289.363 534.391 289.168 534.121 cv
288.965 533.855 288.824 533.543 288.742 533.184 cv
288.652 532.828 288.609 532.395 288.613 531.887 cv
288.613 527.633 li
288.609 527.594 288.617 527.559 288.641 527.527 cv
288.656 527.5 288.691 527.477 288.746 527.449 cv
288.793 527.43 288.863 527.414 288.949 527.402 cv
289.031 527.398 289.133 527.395 289.262 527.391 cv
289.383 527.395 289.488 527.398 289.574 527.402 cv
289.656 527.414 289.723 527.43 289.77 527.449 cv
289.816 527.477 289.852 527.5 289.875 527.527 cv
289.895 527.559 289.902 527.594 289.906 527.633 cv
289.906 531.715 li
289.902 532.129 289.934 532.457 289.996 532.703 cv
290.055 532.949 290.145 533.16 290.27 533.332 cv
290.387 533.512 290.543 533.645 290.734 533.738 cv
290.918 533.836 291.137 533.887 291.387 533.883 cv
291.707 533.887 292.027 533.77 292.352 533.539 cv
292.668 533.312 293.008 532.977 293.367 532.531 cv
293.367 527.633 li
293.367 527.594 293.375 527.559 293.395 527.527 cv
293.41 527.5 293.445 527.477 293.5 527.449 cv
293.551 527.43 293.617 527.414 293.699 527.402 cv
293.777 527.398 293.883 527.395 294.016 527.391 cv
294.137 527.395 294.242 527.398 294.328 527.402 cv
294.41 527.414 294.473 527.43 294.52 527.449 cv
294.563 527.477 294.598 527.5 294.625 527.527 cv
294.645 527.559 294.656 527.594 294.66 527.633 cv
cp
f
307.438 534.645 mo
307.434 534.691 307.426 534.727 307.406 534.75 cv
307.383 534.781 307.348 534.805 307.305 534.824 cv
307.254 534.844 307.188 534.855 307.109 534.871 cv
307.023 534.879 306.922 534.887 306.797 534.887 cv
306.664 534.887 306.555 534.879 306.477 534.871 cv
306.391 534.855 306.324 534.844 306.277 534.824 cv
306.223 534.805 306.188 534.781 306.172 534.75 cv
306.148 534.727 306.141 534.691 306.141 534.645 cv
306.141 530.383 li
306.141 530.09 306.113 529.82 306.063 529.574 cv
306.008 529.332 305.926 529.121 305.813 528.941 cv
305.699 528.766 305.555 528.629 305.379 528.535 cv
305.199 528.441 304.988 528.395 304.754 528.395 cv
304.457 528.395 304.16 528.512 303.863 528.738 cv
303.559 528.973 303.23 529.305 302.875 529.742 cv
302.875 534.645 li
302.871 534.691 302.859 534.727 302.844 534.75 cv
302.82 534.781 302.789 534.805 302.742 534.824 cv
302.691 534.844 302.625 534.855 302.543 534.871 cv
302.457 534.879 302.352 534.887 302.23 534.887 cv
302.109 534.887 302.008 534.879 301.922 534.871 cv
301.836 534.855 301.766 534.844 301.719 534.824 cv
301.664 534.805 301.633 534.781 301.617 534.75 cv
301.598 534.727 301.586 534.691 301.59 534.645 cv
301.59 530.383 li
301.586 530.09 301.559 529.82 301.504 529.574 cv
301.445 529.332 301.359 529.121 301.246 528.941 cv
301.133 528.766 300.988 528.629 300.816 528.535 cv
300.637 528.441 300.43 528.395 300.195 528.395 cv
299.895 528.395 299.598 528.512 299.297 528.738 cv
298.996 528.973 298.668 529.305 298.316 529.742 cv
298.316 534.645 li
298.313 534.691 298.301 534.727 298.285 534.75 cv
298.262 534.781 298.23 534.805 298.184 534.824 cv
298.137 534.844 298.07 534.855 297.992 534.871 cv
297.906 534.879 297.801 534.887 297.672 534.887 cv
297.543 534.887 297.438 534.879 297.359 534.871 cv
297.273 534.855 297.207 534.844 297.16 534.824 cv
297.105 534.805 297.074 534.781 297.059 534.75 cv
297.039 534.727 297.027 534.691 297.031 534.645 cv
297.031 527.633 li
297.027 527.594 297.035 527.559 297.055 527.527 cv
297.066 527.5 297.098 527.477 297.148 527.449 cv
297.191 527.43 297.254 527.414 297.328 527.402 cv
297.398 527.398 297.492 527.395 297.617 527.391 cv
297.727 527.395 297.824 527.398 297.902 527.402 cv
297.977 527.414 298.035 527.43 298.078 527.449 cv
298.117 527.477 298.145 527.5 298.164 527.527 cv
298.18 527.559 298.188 527.594 298.191 527.633 cv
298.191 528.559 li
298.582 528.117 298.965 527.797 299.34 527.59 cv
299.707 527.387 300.086 527.281 300.469 527.281 cv
300.758 527.281 301.016 527.316 301.25 527.383 cv
301.477 527.453 301.684 527.547 301.863 527.668 cv
302.039 527.789 302.188 527.934 302.316 528.102 cv
302.438 528.273 302.543 528.465 302.629 528.668 cv
302.859 528.418 303.082 528.203 303.293 528.023 cv
303.504 527.852 303.707 527.707 303.902 527.594 cv
304.098 527.488 304.285 527.41 304.469 527.355 cv
304.652 527.309 304.84 527.281 305.027 527.281 cv
305.48 527.281 305.859 527.363 306.164 527.52 cv
306.469 527.684 306.715 527.895 306.91 528.156 cv
307.098 528.422 307.234 528.73 307.316 529.086 cv
307.395 529.441 307.434 529.816 307.438 530.211 cv
cp
f
316.234 531.043 mo
316.23 531.652 316.164 532.203 316.035 532.687 cv
315.898 533.176 315.703 533.59 315.449 533.93 cv
315.191 534.273 314.875 534.535 314.504 534.715 cv
314.129 534.898 313.703 534.984 313.219 534.988 cv
312.992 534.984 312.785 534.965 312.598 534.922 cv
312.41 534.875 312.223 534.805 312.043 534.707 cv
311.855 534.609 311.676 534.484 311.496 534.332 cv
311.313 534.184 311.121 534.004 310.922 533.789 cv
310.922 534.645 li
310.922 534.691 310.91 534.727 310.891 534.754 cv
310.867 534.789 310.832 534.812 310.789 534.828 cv
310.738 534.844 310.68 534.855 310.613 534.871 cv
310.539 534.879 310.449 534.887 310.344 534.887 cv
310.234 534.887 310.148 534.879 310.078 534.871 cv
310.004 534.855 309.941 534.844 309.898 534.828 cv
309.848 534.812 309.816 534.789 309.805 534.754 cv
309.785 534.727 309.777 534.691 309.781 534.645 cv
309.781 524.234 li
309.777 524.195 309.789 524.16 309.809 524.125 cv
309.824 524.098 309.855 524.07 309.91 524.047 cv
309.957 524.027 310.023 524.012 310.109 524 cv
310.188 523.992 310.293 523.988 310.422 523.984 cv
310.551 523.988 310.656 523.992 310.742 524 cv
310.82 524.012 310.887 524.027 310.934 524.047 cv
310.98 524.07 311.012 524.098 311.035 524.125 cv
311.051 524.16 311.063 524.195 311.066 524.234 cv
311.066 528.434 li
311.273 528.223 311.477 528.043 311.672 527.898 cv
311.867 527.754 312.055 527.637 312.242 527.543 cv
312.426 527.457 312.613 527.391 312.805 527.344 cv
312.988 527.305 313.188 527.281 313.398 527.281 cv
313.902 527.281 314.336 527.383 314.703 527.586 cv
315.063 527.789 315.355 528.062 315.582 528.398 cv
315.805 528.742 315.973 529.141 316.078 529.598 cv
316.18 530.055 316.23 530.535 316.234 531.043 cv
cp
314.902 531.191 mo
314.898 530.836 314.871 530.488 314.82 530.148 cv
314.762 529.812 314.668 529.516 314.531 529.254 cv
314.395 528.996 314.215 528.785 313.992 528.625 cv
313.766 528.469 313.484 528.391 313.152 528.387 cv
312.984 528.391 312.82 528.414 312.66 528.457 cv
312.496 528.508 312.332 528.586 312.164 528.691 cv
311.996 528.805 311.82 528.945 311.645 529.113 cv
311.461 529.289 311.27 529.504 311.066 529.758 cv
311.066 532.555 li
311.422 532.988 311.762 533.32 312.086 533.543 cv
312.41 533.773 312.746 533.887 313.098 533.883 cv
313.418 533.887 313.695 533.809 313.93 533.648 cv
314.156 533.496 314.344 533.289 314.488 533.027 cv
314.633 532.773 314.738 532.484 314.805 532.164 cv
314.867 531.848 314.898 531.523 314.902 531.191 cv
cp
f
324.145 530.836 mo
324.141 531.039 324.09 531.18 323.992 531.266 cv
323.887 531.352 323.77 531.395 323.645 531.395 cv
319.027 531.395 li
319.023 531.785 319.063 532.137 319.145 532.449 cv
319.219 532.762 319.352 533.031 319.535 533.25 cv
319.715 533.477 319.949 533.648 320.246 533.766 cv
320.535 533.891 320.895 533.949 321.32 533.945 cv
321.652 533.949 321.949 533.922 322.211 533.863 cv
322.473 533.812 322.699 533.75 322.891 533.68 cv
323.078 533.613 323.234 533.555 323.359 533.496 cv
323.48 533.445 323.574 533.418 323.637 533.414 cv
323.672 533.418 323.703 533.426 323.734 533.441 cv
323.762 533.461 323.785 533.488 323.805 533.523 cv
323.816 533.562 323.828 533.613 323.84 533.676 cv
323.844 533.742 323.848 533.82 323.852 533.914 cv
323.848 533.984 323.844 534.043 323.844 534.09 cv
323.836 534.137 323.832 534.18 323.824 534.219 cv
323.816 534.258 323.801 534.293 323.785 534.324 cv
323.762 534.355 323.738 534.387 323.715 534.414 cv
323.684 534.445 323.602 534.492 323.461 534.555 cv
323.32 534.621 323.137 534.684 322.914 534.746 cv
322.688 534.809 322.43 534.863 322.137 534.914 cv
321.844 534.961 321.531 534.984 321.199 534.988 cv
320.621 534.984 320.113 534.906 319.684 534.746 cv
319.246 534.586 318.883 534.348 318.59 534.031 cv
318.289 533.715 318.066 533.32 317.918 532.84 cv
317.77 532.363 317.695 531.805 317.695 531.168 cv
317.695 530.57 317.77 530.031 317.926 529.547 cv
318.078 529.07 318.305 528.66 318.602 528.324 cv
318.895 527.988 319.25 527.73 319.664 527.551 cv
320.078 527.371 320.543 527.281 321.059 527.281 cv
321.609 527.281 322.078 527.371 322.465 527.547 cv
322.852 527.727 323.168 527.965 323.422 528.262 cv
323.668 528.562 323.852 528.914 323.969 529.312 cv
324.082 529.719 324.141 530.148 324.145 530.602 cv
cp
322.852 530.453 mo
322.867 529.777 322.715 529.246 322.398 528.863 cv
322.082 528.48 321.613 528.289 320.996 528.285 cv
320.672 528.289 320.391 528.348 320.152 528.465 cv
319.91 528.586 319.711 528.746 319.551 528.941 cv
319.387 529.141 319.262 529.371 319.176 529.633 cv
319.086 529.895 319.035 530.168 319.027 530.453 cv
cp
f
330.211 528.09 mo
330.207 528.207 330.207 528.305 330.203 528.379 cv
330.195 528.461 330.184 528.523 330.172 528.562 cv
330.152 528.609 330.133 528.641 330.113 528.664 cv
330.086 528.687 330.055 528.699 330.016 528.699 cv
329.973 528.699 329.922 528.687 329.863 528.664 cv
329.801 528.641 329.73 528.617 329.66 528.594 cv
329.582 528.57 329.5 528.551 329.406 528.527 cv
329.313 528.512 329.211 528.5 329.102 528.496 cv
328.969 528.5 328.84 528.527 328.719 528.574 cv
328.594 528.629 328.465 528.715 328.328 528.832 cv
328.188 528.957 328.043 529.113 327.895 529.309 cv
327.742 529.504 327.574 529.746 327.395 530.031 cv
327.395 534.645 li
327.391 534.691 327.379 534.727 327.363 534.75 cv
327.34 534.781 327.309 534.805 327.262 534.824 cv
327.215 534.844 327.148 534.855 327.07 534.871 cv
326.984 534.879 326.879 534.887 326.75 534.887 cv
326.621 534.887 326.516 534.879 326.438 534.871 cv
326.352 534.855 326.285 534.844 326.238 534.824 cv
326.184 534.805 326.152 534.781 326.137 534.75 cv
326.117 534.727 326.105 534.691 326.109 534.645 cv
326.109 527.633 li
326.105 527.594 326.113 527.559 326.133 527.527 cv
326.145 527.5 326.176 527.477 326.227 527.449 cv
326.27 527.43 326.332 527.414 326.406 527.402 cv
326.477 527.398 326.57 527.395 326.695 527.391 cv
326.805 527.395 326.902 527.398 326.98 527.402 cv
327.055 527.414 327.113 527.43 327.156 527.449 cv
327.195 527.477 327.223 527.5 327.242 527.527 cv
327.258 527.559 327.266 527.594 327.27 527.633 cv
327.27 528.652 li
327.457 528.371 327.641 528.145 327.813 527.969 cv
327.98 527.793 328.141 527.652 328.293 527.551 cv
328.441 527.449 328.59 527.379 328.738 527.34 cv
328.887 527.301 329.035 527.281 329.188 527.281 cv
329.254 527.281 329.332 527.285 329.418 527.293 cv
329.504 527.301 329.594 527.316 329.688 527.336 cv
329.781 527.359 329.863 527.383 329.941 527.406 cv
330.012 527.434 330.066 527.461 330.102 527.484 cv
330.129 527.516 330.148 527.539 330.164 527.559 cv
330.172 527.586 330.184 527.617 330.191 527.648 cv
330.199 527.687 330.203 527.738 330.207 527.809 cv
330.207 527.879 330.207 527.973 330.211 528.09 cv
cp
f
341.984 531.059 mo
341.98 531.637 341.906 532.164 341.758 532.641 cv
341.605 533.125 341.379 533.539 341.082 533.883 cv
340.781 534.234 340.406 534.504 339.961 534.695 cv
339.508 534.891 338.988 534.984 338.398 534.988 cv
337.82 534.984 337.316 534.902 336.891 534.73 cv
336.461 534.562 336.105 534.312 335.82 533.984 cv
335.531 533.656 335.316 533.262 335.18 532.793 cv
335.039 532.328 334.973 531.797 334.973 531.199 cv
334.973 530.633 335.043 530.105 335.191 529.625 cv
335.336 529.145 335.563 528.73 335.863 528.379 cv
336.16 528.031 336.531 527.762 336.98 527.57 cv
337.426 527.379 337.949 527.281 338.547 527.281 cv
339.125 527.281 339.625 527.367 340.055 527.539 cv
340.48 527.711 340.84 527.961 341.125 528.289 cv
341.41 528.617 341.625 529.016 341.77 529.48 cv
341.91 529.949 341.98 530.477 341.984 531.059 cv
cp
340.652 531.145 mo
340.648 530.77 340.613 530.41 340.547 530.07 cv
340.473 529.734 340.355 529.441 340.195 529.184 cv
340.031 528.934 339.813 528.73 339.535 528.578 cv
339.254 528.434 338.906 528.359 338.496 528.355 cv
338.109 528.359 337.781 528.426 337.508 528.559 cv
337.23 528.695 337.004 528.887 336.828 529.133 cv
336.648 529.379 336.516 529.672 336.434 530.008 cv
336.344 530.348 336.301 530.715 336.305 531.113 cv
336.301 531.5 336.336 531.863 336.41 532.199 cv
336.477 532.539 336.594 532.832 336.762 533.082 cv
336.926 533.336 337.148 533.539 337.426 533.684 cv
337.703 533.836 338.051 533.91 338.465 533.906 cv
338.84 533.91 339.168 533.84 339.449 533.703 cv
339.727 533.57 339.953 533.383 340.133 533.133 cv
340.309 532.891 340.438 532.598 340.523 532.262 cv
340.605 531.926 340.648 531.555 340.652 531.145 cv
cp
f
347.719 524.746 mo
347.715 524.848 347.711 524.926 347.703 524.984 cv
347.691 525.047 347.68 525.098 347.668 525.129 cv
347.652 525.168 347.637 525.191 347.617 525.203 cv
347.594 525.219 347.566 525.227 347.539 525.223 cv
347.5 525.227 347.453 525.215 347.402 525.187 cv
347.344 525.168 347.277 525.141 347.203 525.109 cv
347.121 525.082 347.031 525.055 346.926 525.031 cv
346.816 525.008 346.691 524.996 346.559 524.996 cv
346.363 524.996 346.199 525.027 346.066 525.09 cv
345.926 525.152 345.816 525.25 345.738 525.383 cv
345.652 525.516 345.594 525.687 345.559 525.898 cv
345.52 526.109 345.5 526.367 345.504 526.664 cv
345.504 527.43 li
347.07 527.43 li
347.109 527.434 347.145 527.441 347.176 527.457 cv
347.203 527.477 347.23 527.508 347.254 527.551 cv
347.277 527.598 347.293 527.656 347.309 527.719 cv
347.316 527.789 347.324 527.871 347.328 527.965 cv
347.324 528.156 347.301 528.289 347.258 528.371 cv
347.207 528.457 347.145 528.5 347.07 528.496 cv
345.504 528.496 li
345.504 534.645 li
345.5 534.691 345.492 534.727 345.473 534.75 cv
345.449 534.781 345.414 534.805 345.367 534.824 cv
345.316 534.844 345.25 534.855 345.168 534.871 cv
345.082 534.879 344.977 534.887 344.859 534.887 cv
344.73 534.887 344.629 534.879 344.547 534.871 cv
344.461 534.855 344.395 534.844 344.348 534.824 cv
344.297 534.805 344.262 534.781 344.242 534.75 cv
344.219 534.727 344.207 534.691 344.211 534.645 cv
344.211 528.496 li
343.223 528.496 li
343.137 528.5 343.074 528.457 343.035 528.371 cv
342.992 528.289 342.969 528.156 342.973 527.965 cv
342.969 527.871 342.977 527.789 342.988 527.719 cv
342.996 527.656 343.012 527.598 343.035 527.551 cv
343.055 527.508 343.078 527.477 343.113 527.457 cv
343.141 527.441 343.18 527.434 343.223 527.43 cv
344.211 527.43 li
344.211 526.703 li
344.207 526.219 344.254 525.801 344.348 525.445 cv
344.438 525.098 344.574 524.809 344.762 524.586 cv
344.945 524.363 345.18 524.199 345.469 524.09 cv
345.75 523.984 346.086 523.93 346.473 523.93 cv
346.648 523.93 346.824 523.949 347 523.98 cv
347.168 524.02 347.301 524.055 347.398 524.09 cv
347.488 524.133 347.551 524.168 347.586 524.195 cv
347.613 524.23 347.641 524.27 347.664 524.316 cv
347.684 524.367 347.695 524.43 347.707 524.496 cv
347.711 524.57 347.715 524.652 347.719 524.746 cv
cp
f
357.914 532.012 mo
357.91 532.484 357.824 532.906 357.652 533.273 cv
357.477 533.648 357.234 533.961 356.926 534.215 cv
356.617 534.473 356.254 534.664 355.836 534.793 cv
355.414 534.922 354.965 534.984 354.484 534.988 cv
354.145 534.984 353.828 534.957 353.543 534.902 cv
353.254 534.844 353 534.777 352.773 534.691 cv
352.547 534.613 352.355 534.527 352.203 534.434 cv
352.047 534.348 351.941 534.27 351.883 534.207 cv
351.824 534.145 351.781 534.066 351.754 533.973 cv
351.723 533.879 351.707 533.75 351.711 533.586 cv
351.707 533.473 351.711 533.379 351.727 533.301 cv
351.734 533.227 351.75 533.164 351.773 533.117 cv
351.789 533.07 351.816 533.039 351.852 533.02 cv
351.879 533.004 351.914 532.996 351.957 532.992 cv
352.027 532.996 352.129 533.039 352.266 533.125 cv
352.395 533.215 352.566 533.312 352.777 533.414 cv
352.984 533.523 353.234 533.621 353.527 533.707 cv
353.82 533.801 354.16 533.844 354.547 533.844 cv
354.836 533.844 355.102 533.805 355.344 533.727 cv
355.582 533.648 355.789 533.539 355.969 533.395 cv
356.141 533.254 356.277 533.078 356.371 532.867 cv
356.465 532.66 356.512 532.426 356.512 532.16 cv
356.512 531.879 356.445 531.633 356.316 531.426 cv
356.184 531.227 356.012 531.051 355.801 530.895 cv
355.586 530.746 355.344 530.605 355.07 530.473 cv
354.797 530.348 354.516 530.215 354.234 530.082 cv
353.945 529.949 353.668 529.805 353.398 529.641 cv
353.129 529.484 352.887 529.293 352.676 529.074 cv
352.457 528.855 352.285 528.602 352.156 528.305 cv
352.02 528.016 351.953 527.664 351.957 527.25 cv
351.953 526.832 352.031 526.457 352.188 526.125 cv
352.34 525.797 352.551 525.52 352.828 525.293 cv
353.098 525.074 353.422 524.902 353.801 524.785 cv
354.176 524.668 354.586 524.609 355.023 524.609 cv
355.242 524.609 355.465 524.629 355.695 524.668 cv
355.918 524.707 356.129 524.758 356.332 524.82 cv
356.527 524.887 356.707 524.961 356.867 525.039 cv
357.02 525.121 357.121 525.187 357.176 525.234 cv
357.223 525.289 357.258 525.328 357.273 525.352 cv
357.289 525.383 357.301 525.418 357.313 525.461 cv
357.32 525.508 357.328 525.562 357.336 525.621 cv
357.34 525.687 357.344 525.766 357.344 525.863 cv
357.344 525.957 357.34 526.043 357.332 526.113 cv
357.324 526.191 357.313 526.25 357.297 526.297 cv
357.281 526.344 357.258 526.379 357.23 526.402 cv
357.199 526.426 357.168 526.437 357.133 526.437 cv
357.074 526.437 356.984 526.402 356.863 526.332 cv
356.738 526.262 356.586 526.18 356.414 526.086 cv
356.234 525.996 356.027 525.914 355.789 525.836 cv
355.543 525.762 355.273 525.723 354.977 525.723 cv
354.695 525.723 354.449 525.762 354.242 525.836 cv
354.031 525.914 353.859 526.016 353.727 526.137 cv
353.59 526.262 353.488 526.406 353.422 526.578 cv
353.355 526.75 353.324 526.934 353.324 527.125 cv
353.324 527.41 353.387 527.652 353.516 527.852 cv
353.645 528.055 353.816 528.234 354.035 528.387 cv
354.246 528.547 354.492 528.687 354.77 528.816 cv
355.043 528.949 355.324 529.082 355.613 529.211 cv
355.898 529.344 356.18 529.488 356.453 529.645 cv
356.727 529.805 356.973 529.992 357.191 530.207 cv
357.406 530.426 357.578 530.68 357.715 530.973 cv
357.844 531.266 357.91 531.613 357.914 532.012 cv
cp
f
365.68 534.645 mo
365.676 534.691 365.668 534.727 365.652 534.75 cv
365.633 534.781 365.598 534.805 365.555 534.824 cv
365.508 534.844 365.449 534.855 365.375 534.871 cv
365.297 534.879 365.203 534.887 365.098 534.887 cv
364.973 534.887 364.875 534.879 364.805 534.871 cv
364.727 534.855 364.668 534.844 364.625 534.824 cv
364.578 534.805 364.547 534.781 364.535 534.75 cv
364.516 534.727 364.508 534.691 364.512 534.645 cv
364.512 533.719 li
364.109 534.164 363.715 534.484 363.328 534.684 cv
362.934 534.887 362.539 534.984 362.145 534.988 cv
361.672 534.984 361.277 534.91 360.961 534.754 cv
360.641 534.602 360.383 534.391 360.188 534.121 cv
359.984 533.855 359.844 533.543 359.762 533.184 cv
359.672 532.828 359.629 532.395 359.633 531.887 cv
359.633 527.633 li
359.629 527.594 359.637 527.559 359.66 527.527 cv
359.676 527.5 359.711 527.477 359.766 527.449 cv
359.813 527.43 359.883 527.414 359.969 527.402 cv
360.051 527.398 360.152 527.395 360.281 527.391 cv
360.402 527.395 360.508 527.398 360.594 527.402 cv
360.676 527.414 360.742 527.43 360.789 527.449 cv
360.836 527.477 360.871 527.5 360.895 527.527 cv
360.914 527.559 360.922 527.594 360.926 527.633 cv
360.926 531.715 li
360.922 532.129 360.953 532.457 361.016 532.703 cv
361.074 532.949 361.164 533.16 361.289 533.332 cv
361.406 533.512 361.563 533.645 361.754 533.738 cv
361.938 533.836 362.156 533.887 362.406 533.883 cv
362.727 533.887 363.047 533.77 363.371 533.539 cv
363.688 533.312 364.027 532.977 364.387 532.531 cv
364.387 527.633 li
364.387 527.594 364.395 527.559 364.414 527.527 cv
364.43 527.5 364.465 527.477 364.52 527.449 cv
364.57 527.43 364.637 527.414 364.719 527.402 cv
364.797 527.398 364.902 527.395 365.035 527.391 cv
365.156 527.395 365.262 527.398 365.348 527.402 cv
365.43 527.414 365.492 527.43 365.539 527.449 cv
365.582 527.477 365.617 527.5 365.645 527.527 cv
365.664 527.559 365.676 527.594 365.68 527.633 cv
cp
f
374.539 531.043 mo
374.535 531.652 374.469 532.203 374.34 532.687 cv
374.203 533.176 374.008 533.59 373.754 533.93 cv
373.496 534.273 373.18 534.535 372.809 534.715 cv
372.434 534.898 372.008 534.984 371.523 534.988 cv
371.297 534.984 371.09 534.965 370.902 534.922 cv
370.715 534.875 370.527 534.805 370.348 534.707 cv
370.16 534.609 369.98 534.484 369.801 534.332 cv
369.617 534.184 369.426 534.004 369.227 533.789 cv
369.227 534.645 li
369.227 534.691 369.215 534.727 369.195 534.754 cv
369.172 534.789 369.137 534.812 369.094 534.828 cv
369.043 534.844 368.984 534.855 368.918 534.871 cv
368.844 534.879 368.754 534.887 368.648 534.887 cv
368.539 534.887 368.453 534.879 368.383 534.871 cv
368.309 534.855 368.246 534.844 368.203 534.828 cv
368.152 534.812 368.121 534.789 368.109 534.754 cv
368.09 534.727 368.082 534.691 368.086 534.645 cv
368.086 524.234 li
368.082 524.195 368.094 524.16 368.113 524.125 cv
368.129 524.098 368.16 524.07 368.215 524.047 cv
368.262 524.027 368.328 524.012 368.414 524 cv
368.492 523.992 368.598 523.988 368.727 523.984 cv
368.855 523.988 368.961 523.992 369.047 524 cv
369.125 524.012 369.191 524.027 369.238 524.047 cv
369.285 524.07 369.316 524.098 369.34 524.125 cv
369.355 524.16 369.367 524.195 369.371 524.234 cv
369.371 528.434 li
369.578 528.223 369.781 528.043 369.977 527.898 cv
370.172 527.754 370.359 527.637 370.547 527.543 cv
370.73 527.457 370.918 527.391 371.109 527.344 cv
371.293 527.305 371.492 527.281 371.703 527.281 cv
372.207 527.281 372.641 527.383 373.008 527.586 cv
373.367 527.789 373.66 528.062 373.887 528.398 cv
374.109 528.742 374.277 529.141 374.383 529.598 cv
374.484 530.055 374.535 530.535 374.539 531.043 cv
cp
373.207 531.191 mo
373.203 530.836 373.176 530.488 373.125 530.148 cv
373.066 529.812 372.973 529.516 372.836 529.254 cv
372.699 528.996 372.52 528.785 372.297 528.625 cv
372.07 528.469 371.789 528.391 371.457 528.387 cv
371.289 528.391 371.125 528.414 370.965 528.457 cv
370.801 528.508 370.637 528.586 370.469 528.691 cv
370.301 528.805 370.125 528.945 369.949 529.113 cv
369.766 529.289 369.574 529.504 369.371 529.758 cv
369.371 532.555 li
369.727 532.988 370.066 533.32 370.391 533.543 cv
370.715 533.773 371.051 533.887 371.402 533.883 cv
371.723 533.887 372 533.809 372.234 533.648 cv
372.461 533.496 372.648 533.289 372.793 533.027 cv
372.938 532.773 373.043 532.484 373.109 532.164 cv
373.172 531.848 373.203 531.523 373.207 531.191 cv
cp
f
379.688 530.906 mo
379.688 531.109 379.664 531.246 379.617 531.324 cv
379.57 531.402 379.5 531.441 379.414 531.441 cv
376.156 531.441 li
376.063 531.441 375.996 531.402 375.949 531.32 cv
375.902 531.242 375.879 531.105 375.879 530.906 cv
375.879 530.711 375.902 530.57 375.949 530.492 cv
375.996 530.414 376.063 530.375 376.156 530.375 cv
379.414 530.375 li
379.453 530.375 379.492 530.383 379.527 530.398 cv
379.559 530.414 379.586 530.445 379.613 530.488 cv
379.633 530.535 379.652 530.59 379.668 530.656 cv
379.68 530.727 379.688 530.812 379.688 530.906 cv
cp
f
382.941 534.637 mo
382.938 534.68 382.93 534.715 382.91 534.746 cv
382.887 534.777 382.848 534.805 382.801 534.82 cv
382.746 534.84 382.68 534.852 382.594 534.867 cv
382.508 534.879 382.398 534.887 382.273 534.887 cv
382.145 534.887 382.039 534.879 381.953 534.867 cv
381.863 534.852 381.793 534.84 381.742 534.82 cv
381.688 534.805 381.652 534.777 381.633 534.746 cv
381.609 534.715 381.598 534.68 381.602 534.637 cv
381.602 524.957 li
381.598 524.918 381.609 524.883 381.637 524.848 cv
381.656 524.82 381.695 524.793 381.754 524.773 cv
381.805 524.758 381.875 524.742 381.965 524.727 cv
382.047 524.715 382.148 524.711 382.273 524.707 cv
382.398 524.711 382.508 524.715 382.594 524.727 cv
382.68 524.742 382.746 524.758 382.801 524.773 cv
382.848 524.793 382.887 524.82 382.91 524.848 cv
382.93 524.883 382.938 524.918 382.941 524.957 cv
cp
f
395.926 534.645 mo
395.922 534.691 395.914 534.727 395.895 534.75 cv
395.871 534.781 395.836 534.805 395.793 534.824 cv
395.742 534.844 395.676 534.855 395.598 534.871 cv
395.512 534.879 395.41 534.887 395.285 534.887 cv
395.152 534.887 395.043 534.879 394.965 534.871 cv
394.879 534.855 394.813 534.844 394.766 534.824 cv
394.711 534.805 394.676 534.781 394.66 534.75 cv
394.637 534.727 394.629 534.691 394.629 534.645 cv
394.629 530.383 li
394.629 530.09 394.602 529.82 394.551 529.574 cv
394.496 529.332 394.414 529.121 394.301 528.941 cv
394.188 528.766 394.043 528.629 393.867 528.535 cv
393.688 528.441 393.477 528.395 393.242 528.395 cv
392.945 528.395 392.648 528.512 392.352 528.738 cv
392.047 528.973 391.719 529.305 391.363 529.742 cv
391.363 534.645 li
391.359 534.691 391.348 534.727 391.332 534.75 cv
391.309 534.781 391.277 534.805 391.23 534.824 cv
391.18 534.844 391.113 534.855 391.031 534.871 cv
390.945 534.879 390.84 534.887 390.719 534.887 cv
390.598 534.887 390.496 534.879 390.41 534.871 cv
390.324 534.855 390.254 534.844 390.207 534.824 cv
390.152 534.805 390.121 534.781 390.105 534.75 cv
390.086 534.727 390.074 534.691 390.078 534.645 cv
390.078 530.383 li
390.074 530.09 390.047 529.82 389.992 529.574 cv
389.934 529.332 389.848 529.121 389.734 528.941 cv
389.621 528.766 389.477 528.629 389.305 528.535 cv
389.125 528.441 388.918 528.395 388.684 528.395 cv
388.383 528.395 388.086 528.512 387.785 528.738 cv
387.484 528.973 387.156 529.305 386.805 529.742 cv
386.805 534.645 li
386.801 534.691 386.789 534.727 386.773 534.75 cv
386.75 534.781 386.719 534.805 386.672 534.824 cv
386.625 534.844 386.559 534.855 386.48 534.871 cv
386.395 534.879 386.289 534.887 386.16 534.887 cv
386.031 534.887 385.926 534.879 385.848 534.871 cv
385.762 534.855 385.695 534.844 385.648 534.824 cv
385.594 534.805 385.563 534.781 385.547 534.75 cv
385.527 534.727 385.516 534.691 385.52 534.645 cv
385.52 527.633 li
385.516 527.594 385.523 527.559 385.543 527.527 cv
385.555 527.5 385.586 527.477 385.637 527.449 cv
385.68 527.43 385.742 527.414 385.816 527.402 cv
385.887 527.398 385.98 527.395 386.105 527.391 cv
386.215 527.395 386.313 527.398 386.391 527.402 cv
386.465 527.414 386.523 527.43 386.566 527.449 cv
386.605 527.477 386.633 527.5 386.652 527.527 cv
386.668 527.559 386.676 527.594 386.68 527.633 cv
386.68 528.559 li
387.07 528.117 387.453 527.797 387.828 527.59 cv
388.195 527.387 388.574 527.281 388.957 527.281 cv
389.246 527.281 389.504 527.316 389.738 527.383 cv
389.965 527.453 390.172 527.547 390.352 527.668 cv
390.527 527.789 390.676 527.934 390.805 528.102 cv
390.926 528.273 391.031 528.465 391.117 528.668 cv
391.348 528.418 391.57 528.203 391.781 528.023 cv
391.992 527.852 392.195 527.707 392.391 527.594 cv
392.586 527.488 392.773 527.41 392.957 527.355 cv
393.141 527.309 393.328 527.281 393.516 527.281 cv
393.969 527.281 394.348 527.363 394.652 527.52 cv
394.957 527.684 395.203 527.895 395.398 528.156 cv
395.586 528.422 395.723 528.73 395.805 529.086 cv
395.883 529.441 395.922 529.816 395.926 530.211 cv
cp
f
403.559 534.652 mo
403.555 534.715 403.535 534.762 403.496 534.793 cv
403.453 534.824 403.395 534.848 403.324 534.863 cv
403.246 534.879 403.141 534.887 403.004 534.887 cv
402.867 534.887 402.758 534.879 402.68 534.863 cv
402.594 534.848 402.535 534.824 402.504 534.793 cv
402.465 534.762 402.449 534.715 402.453 534.652 cv
402.453 533.953 li
402.145 534.281 401.801 534.535 401.426 534.715 cv
401.047 534.898 400.648 534.984 400.23 534.988 cv
399.855 534.984 399.523 534.937 399.227 534.844 cv
398.93 534.746 398.676 534.609 398.465 534.426 cv
398.254 534.246 398.09 534.023 397.973 533.758 cv
397.855 533.496 397.797 533.195 397.801 532.852 cv
397.797 532.461 397.875 532.117 398.039 531.824 cv
398.195 531.535 398.43 531.293 398.734 531.102 cv
399.035 530.91 399.402 530.766 399.84 530.668 cv
400.273 530.574 400.766 530.527 401.313 530.523 cv
402.281 530.523 li
402.281 529.977 li
402.277 529.707 402.25 529.469 402.195 529.262 cv
402.137 529.055 402.043 528.883 401.918 528.742 cv
401.785 528.605 401.621 528.5 401.422 528.43 cv
401.215 528.359 400.965 528.324 400.676 528.324 cv
400.355 528.324 400.07 528.363 399.82 528.437 cv
399.563 528.516 399.344 528.598 399.156 528.687 cv
398.969 528.781 398.809 528.867 398.684 528.937 cv
398.551 529.016 398.457 529.051 398.398 529.051 cv
398.355 529.051 398.32 529.043 398.289 529.02 cv
398.258 529.004 398.23 528.973 398.207 528.926 cv
398.184 528.887 398.164 528.832 398.156 528.766 cv
398.141 528.703 398.137 528.633 398.141 528.551 cv
398.137 528.426 398.145 528.32 398.168 528.242 cv
398.184 528.168 398.23 528.098 398.301 528.027 cv
398.371 527.961 398.492 527.883 398.664 527.793 cv
398.836 527.703 399.031 527.621 399.254 527.543 cv
399.477 527.473 399.723 527.41 399.988 527.355 cv
400.254 527.309 400.52 527.281 400.793 527.281 cv
401.293 527.281 401.723 527.34 402.074 527.453 cv
402.426 527.57 402.711 527.738 402.934 527.957 cv
403.148 528.18 403.309 528.453 403.41 528.777 cv
403.508 529.109 403.555 529.492 403.559 529.922 cv
cp
402.281 531.449 mo
401.18 531.449 li
400.824 531.453 400.52 531.484 400.262 531.539 cv
400 531.602 399.785 531.687 399.613 531.805 cv
399.441 531.922 399.316 532.062 399.238 532.227 cv
399.156 532.391 399.113 532.578 399.117 532.789 cv
399.113 533.156 399.23 533.449 399.461 533.66 cv
399.691 533.879 400.016 533.984 400.434 533.984 cv
400.77 533.984 401.082 533.898 401.371 533.727 cv
401.66 533.555 401.961 533.293 402.281 532.937 cv
cp
f
411.777 527.949 mo
411.773 528.133 411.75 528.266 411.703 528.344 cv
411.652 528.426 411.59 528.465 411.516 528.465 cv
410.508 528.465 li
410.688 528.652 410.816 528.859 410.891 529.086 cv
410.961 529.312 410.996 529.547 411 529.789 cv
410.996 530.195 410.93 530.555 410.805 530.867 cv
410.672 531.18 410.488 531.445 410.246 531.656 cv
410.004 531.875 409.715 532.039 409.387 532.152 cv
409.051 532.27 408.684 532.328 408.281 532.324 cv
407.992 532.328 407.719 532.289 407.465 532.211 cv
407.203 532.137 407.008 532.043 406.871 531.926 cv
406.777 532.023 406.699 532.129 406.641 532.246 cv
406.578 532.367 406.547 532.504 406.551 532.656 cv
406.547 532.84 406.633 532.992 406.805 533.109 cv
406.973 533.234 407.195 533.297 407.477 533.305 cv
409.309 533.383 li
409.656 533.395 409.973 533.441 410.266 533.527 cv
410.555 533.613 410.809 533.738 411.023 533.895 cv
411.234 534.055 411.402 534.246 411.523 534.477 cv
411.641 534.711 411.699 534.98 411.703 535.285 cv
411.699 535.605 411.633 535.91 411.5 536.203 cv
411.363 536.492 411.156 536.746 410.879 536.969 cv
410.598 537.187 410.242 537.363 409.813 537.492 cv
409.383 537.617 408.875 537.68 408.289 537.684 cv
407.719 537.68 407.234 537.633 406.84 537.539 cv
406.441 537.441 406.117 537.309 405.863 537.145 cv
405.609 536.977 405.426 536.781 405.313 536.551 cv
405.195 536.316 405.137 536.062 405.141 535.797 cv
405.137 535.625 405.156 535.461 405.203 535.301 cv
405.242 535.137 405.305 534.984 405.391 534.84 cv
405.473 534.695 405.582 534.559 405.711 534.422 cv
405.836 534.293 405.98 534.16 406.152 534.031 cv
405.895 533.902 405.707 533.738 405.586 533.539 cv
405.465 533.344 405.406 533.133 405.406 532.898 cv
405.406 532.586 405.469 532.301 405.598 532.051 cv
405.727 531.801 405.887 531.578 406.082 531.379 cv
405.918 531.187 405.793 530.973 405.699 530.73 cv
405.605 530.492 405.559 530.199 405.559 529.852 cv
405.559 529.457 405.625 529.098 405.762 528.777 cv
405.895 528.461 406.082 528.195 406.324 527.977 cv
406.563 527.762 406.848 527.594 407.184 527.473 cv
407.516 527.359 407.883 527.301 408.281 527.297 cv
408.492 527.301 408.691 527.312 408.875 527.332 cv
409.059 527.359 409.23 527.391 409.395 527.43 cv
411.516 527.43 li
411.602 527.434 411.668 527.477 411.711 527.559 cv
411.754 527.648 411.773 527.777 411.777 527.949 cv
cp
409.77 529.797 mo
409.766 529.324 409.633 528.953 409.375 528.68 cv
409.109 528.414 408.738 528.277 408.258 528.277 cv
408.004 528.277 407.785 528.32 407.605 528.402 cv
407.418 528.488 407.266 528.602 407.145 528.746 cv
407.023 528.895 406.934 529.062 406.875 529.25 cv
406.813 529.437 406.781 529.637 406.785 529.844 cv
406.781 530.309 406.914 530.672 407.176 530.937 cv
407.438 531.203 407.805 531.336 408.281 531.332 cv
408.531 531.336 408.75 531.297 408.941 531.211 cv
409.125 531.133 409.281 531.02 409.406 530.879 cv
409.527 530.738 409.617 530.574 409.68 530.383 cv
409.734 530.199 409.766 530.004 409.77 529.797 cv
cp
410.414 535.355 mo
410.41 535.051 410.285 534.82 410.043 534.656 cv
409.793 534.496 409.461 534.406 409.043 534.395 cv
407.227 534.332 li
407.059 534.465 406.922 534.59 406.82 534.703 cv
406.711 534.82 406.629 534.93 406.566 535.039 cv
406.504 535.145 406.461 535.25 406.438 535.355 cv
406.414 535.457 406.402 535.562 406.402 535.672 cv
406.402 536.008 406.57 536.262 406.914 536.441 cv
407.254 536.613 407.734 536.703 408.352 536.703 cv
408.738 536.703 409.063 536.664 409.328 536.59 cv
409.586 536.512 409.797 536.41 409.961 536.289 cv
410.117 536.16 410.234 536.02 410.309 535.859 cv
410.375 535.699 410.41 535.531 410.414 535.355 cv
cp
f
419.371 530.836 mo
419.367 531.039 419.316 531.18 419.219 531.266 cv
419.113 531.352 418.996 531.395 418.871 531.395 cv
414.254 531.395 li
414.25 531.785 414.289 532.137 414.371 532.449 cv
414.445 532.762 414.578 533.031 414.762 533.25 cv
414.941 533.477 415.176 533.648 415.473 533.766 cv
415.762 533.891 416.121 533.949 416.547 533.945 cv
416.879 533.949 417.176 533.922 417.438 533.863 cv
417.699 533.812 417.926 533.75 418.117 533.68 cv
418.305 533.613 418.461 533.555 418.586 533.496 cv
418.707 533.445 418.801 533.418 418.863 533.414 cv
418.898 533.418 418.93 533.426 418.961 533.441 cv
418.988 533.461 419.012 533.488 419.031 533.523 cv
419.043 533.562 419.055 533.613 419.066 533.676 cv
419.07 533.742 419.074 533.82 419.078 533.914 cv
419.074 533.984 419.07 534.043 419.07 534.09 cv
419.063 534.137 419.059 534.18 419.051 534.219 cv
419.043 534.258 419.027 534.293 419.012 534.324 cv
418.988 534.355 418.965 534.387 418.941 534.414 cv
418.91 534.445 418.828 534.492 418.688 534.555 cv
418.547 534.621 418.363 534.684 418.141 534.746 cv
417.914 534.809 417.656 534.863 417.363 534.914 cv
417.07 534.961 416.758 534.984 416.426 534.988 cv
415.848 534.984 415.34 534.906 414.91 534.746 cv
414.473 534.586 414.109 534.348 413.816 534.031 cv
413.516 533.715 413.293 533.32 413.145 532.84 cv
412.996 532.363 412.922 531.805 412.922 531.168 cv
412.922 530.57 412.996 530.031 413.152 529.547 cv
413.305 529.07 413.531 528.66 413.828 528.324 cv
414.121 527.988 414.477 527.73 414.891 527.551 cv
415.305 527.371 415.77 527.281 416.285 527.281 cv
416.836 527.281 417.305 527.371 417.691 527.547 cv
418.078 527.727 418.395 527.965 418.648 528.262 cv
418.895 528.562 419.078 528.914 419.195 529.312 cv
419.309 529.719 419.367 530.148 419.371 530.602 cv
cp
418.078 530.453 mo
418.094 529.777 417.941 529.246 417.625 528.863 cv
417.309 528.48 416.84 528.289 416.223 528.285 cv
415.898 528.289 415.617 528.348 415.379 528.465 cv
415.137 528.586 414.938 528.746 414.777 528.941 cv
414.613 529.141 414.488 529.371 414.402 529.633 cv
414.313 529.895 414.262 530.168 414.254 530.453 cv
cp
f
425.738 532.734 mo
425.734 533.098 425.668 533.418 425.539 533.695 cv
425.406 533.977 425.219 534.211 424.977 534.402 cv
424.73 534.598 424.438 534.742 424.102 534.84 cv
423.762 534.937 423.391 534.984 422.988 534.988 cv
422.734 534.984 422.496 534.965 422.273 534.93 cv
422.047 534.887 421.848 534.84 421.668 534.781 cv
421.488 534.723 421.336 534.66 421.211 534.594 cv
421.086 534.531 420.992 534.473 420.938 534.418 cv
420.879 534.367 420.84 534.297 420.816 534.199 cv
420.789 534.109 420.777 533.98 420.777 533.82 cv
420.777 533.723 420.781 533.641 420.793 533.57 cv
420.801 533.504 420.813 533.449 420.832 533.406 cv
420.844 533.367 420.867 533.336 420.895 533.316 cv
420.922 533.301 420.953 533.293 420.992 533.289 cv
421.047 533.293 421.133 533.328 421.246 533.395 cv
421.355 533.469 421.492 533.547 421.66 533.625 cv
421.82 533.711 422.012 533.785 422.238 533.855 cv
422.457 533.926 422.715 533.961 423.012 533.961 cv
423.227 533.961 423.426 533.937 423.605 533.891 cv
423.781 533.844 423.934 533.777 424.063 533.684 cv
424.191 533.598 424.293 533.48 424.363 533.336 cv
424.434 533.199 424.469 533.031 424.469 532.836 cv
424.469 532.641 424.418 532.477 424.316 532.34 cv
424.215 532.207 424.078 532.086 423.914 531.98 cv
423.746 531.879 423.563 531.789 423.355 531.703 cv
423.145 531.625 422.93 531.539 422.711 531.449 cv
422.492 531.363 422.277 531.262 422.066 531.148 cv
421.855 531.039 421.664 530.906 421.5 530.742 cv
421.328 530.586 421.195 530.391 421.098 530.164 cv
420.992 529.941 420.941 529.676 420.945 529.363 cv
420.941 529.09 420.996 528.824 421.105 528.57 cv
421.211 528.32 421.371 528.102 421.586 527.91 cv
421.797 527.723 422.063 527.57 422.383 527.453 cv
422.703 527.34 423.074 527.281 423.504 527.281 cv
423.688 527.281 423.875 527.297 424.063 527.328 cv
424.246 527.359 424.414 527.398 424.57 527.445 cv
424.719 527.492 424.848 527.543 424.957 527.598 cv
425.059 527.652 425.141 527.703 425.199 527.742 cv
425.25 527.789 425.285 527.824 425.309 527.852 cv
425.324 527.883 425.34 527.918 425.348 527.953 cv
425.355 527.996 425.363 528.043 425.371 528.098 cv
425.379 528.156 425.383 528.227 425.383 528.309 cv
425.383 528.398 425.379 528.477 425.371 528.539 cv
425.363 528.609 425.348 528.66 425.332 528.699 cv
425.309 528.742 425.289 528.773 425.266 528.789 cv
425.238 528.809 425.207 528.816 425.18 528.816 cv
425.129 528.816 425.063 528.789 424.977 528.73 cv
424.887 528.676 424.773 528.613 424.633 528.547 cv
424.492 528.484 424.324 528.426 424.137 528.363 cv
423.945 528.309 423.73 528.277 423.488 528.277 cv
423.266 528.277 423.074 528.305 422.91 528.352 cv
422.742 528.406 422.605 528.477 422.5 528.562 cv
422.395 528.656 422.313 528.762 422.262 528.887 cv
422.203 529.012 422.176 529.148 422.18 529.293 cv
422.176 529.496 422.227 529.664 422.332 529.801 cv
422.434 529.941 422.57 530.062 422.738 530.164 cv
422.902 530.27 423.094 530.363 423.309 530.445 cv
423.52 530.531 423.734 530.617 423.957 530.703 cv
424.176 530.793 424.395 530.895 424.613 531 cv
424.828 531.109 425.02 531.238 425.188 531.395 cv
425.352 531.551 425.484 531.738 425.586 531.957 cv
425.684 532.176 425.734 532.437 425.738 532.734 cv
cp
f
140.086 13.758 mo
140.082 14.289 139.984 14.754 139.789 15.152 cv
139.59 15.555 139.324 15.891 138.988 16.156 cv
138.648 16.426 138.25 16.625 137.801 16.758 cv
137.348 16.891 136.867 16.957 136.355 16.961 cv
136.004 16.957 135.68 16.93 135.383 16.875 cv
135.082 16.816 134.82 16.75 134.594 16.668 cv
134.363 16.59 134.172 16.504 134.02 16.414 cv
133.867 16.328 133.758 16.25 133.691 16.18 cv
133.621 16.113 133.57 16.016 133.547 15.891 cv
133.516 15.766 133.504 15.582 133.504 15.34 cv
133.504 15.18 133.508 15.047 133.52 14.934 cv
133.527 14.828 133.543 14.738 133.57 14.668 cv
133.59 14.602 133.621 14.555 133.664 14.523 cv
133.699 14.5 133.746 14.484 133.797 14.48 cv
133.867 14.484 133.969 14.527 134.105 14.609 cv
134.234 14.699 134.406 14.793 134.617 14.895 cv
134.824 15 135.07 15.098 135.359 15.18 cv
135.645 15.27 135.98 15.312 136.363 15.309 cv
136.613 15.312 136.836 15.281 137.031 15.219 cv
137.227 15.16 137.395 15.074 137.535 14.965 cv
137.672 14.855 137.777 14.723 137.852 14.562 cv
137.922 14.402 137.957 14.223 137.961 14.023 cv
137.957 13.797 137.895 13.602 137.773 13.434 cv
137.645 13.273 137.48 13.129 137.285 13 cv
137.082 12.875 136.855 12.754 136.602 12.641 cv
136.348 12.531 136.086 12.414 135.816 12.285 cv
135.543 12.164 135.281 12.02 135.027 11.859 cv
134.773 11.703 134.547 11.516 134.348 11.293 cv
134.145 11.074 133.98 10.812 133.859 10.508 cv
133.734 10.207 133.672 9.84802 133.676 9.42603 cv
133.672 8.94501 133.762 8.52002 133.941 8.15198 cv
134.117 7.789 134.359 7.48401 134.668 7.23798 cv
134.969 7 135.328 6.82001 135.742 6.69897 cv
136.156 6.58197 136.594 6.52301 137.055 6.52002 cv
137.293 6.52301 137.531 6.539 137.773 6.57397 cv
138.012 6.61298 138.234 6.664 138.441 6.72302 cv
138.648 6.78497 138.832 6.85498 138.996 6.92999 cv
139.152 7.01202 139.262 7.07397 139.316 7.125 cv
139.367 7.17999 139.402 7.22699 139.422 7.258 cv
139.438 7.297 139.453 7.34399 139.469 7.40198 cv
139.48 7.46503 139.488 7.539 139.496 7.62903 cv
139.5 7.72302 139.504 7.836 139.504 7.96899 cv
139.504 8.12097 139.5 8.25 139.492 8.35199 cv
139.484 8.45697 139.469 8.54303 139.453 8.60498 cv
139.43 8.67603 139.406 8.72302 139.375 8.75403 cv
139.34 8.78497 139.293 8.80103 139.238 8.80103 cv
139.18 8.80103 139.09 8.76599 138.965 8.69098 cv
138.84 8.62097 138.684 8.54303 138.504 8.453 cv
138.32 8.37097 138.113 8.29303 137.875 8.22302 cv
137.633 8.15601 137.367 8.12097 137.086 8.117 cv
136.859 8.12097 136.668 8.14801 136.504 8.19897 cv
136.336 8.25403 136.195 8.328 136.086 8.422 cv
135.973 8.52002 135.891 8.63702 135.836 8.77002 cv
135.781 8.90997 135.754 9.05103 135.754 9.19897 cv
135.754 9.42603 135.813 9.62097 135.938 9.78101 cv
136.055 9.94501 136.219 10.09 136.43 10.215 cv
136.633 10.344 136.867 10.465 137.125 10.574 cv
137.383 10.691 137.648 10.809 137.922 10.93 cv
138.191 11.059 138.453 11.199 138.715 11.355 cv
138.973 11.512 139.207 11.703 139.41 11.922 cv
139.613 12.148 139.773 12.406 139.898 12.703 cv
140.02 13 140.082 13.352 140.086 13.758 cv
cp
f
146.801 15.41 mo
146.797 15.547 146.793 15.66 146.789 15.75 cv
146.777 15.844 146.77 15.922 146.758 15.98 cv
146.742 16.043 146.727 16.094 146.711 16.129 cv
146.691 16.172 146.648 16.219 146.59 16.277 cv
146.523 16.34 146.418 16.414 146.27 16.496 cv
146.117 16.586 145.945 16.664 145.754 16.727 cv
145.563 16.797 145.355 16.848 145.129 16.891 cv
144.902 16.93 144.668 16.949 144.434 16.953 cv
143.895 16.949 143.422 16.871 143.008 16.703 cv
142.594 16.539 142.246 16.293 141.969 15.969 cv
141.684 15.645 141.473 15.25 141.332 14.781 cv
141.191 14.316 141.121 13.777 141.121 13.172 cv
141.121 12.477 141.207 11.879 141.379 11.371 cv
141.551 10.867 141.793 10.445 142.109 10.113 cv
142.418 9.78101 142.785 9.53497 143.215 9.37097 cv
143.637 9.211 144.105 9.12903 144.617 9.12903 cv
144.824 9.12903 145.027 9.14801 145.23 9.18402 cv
145.426 9.22302 145.613 9.27301 145.789 9.33197 cv
145.961 9.39801 146.117 9.46899 146.258 9.54303 cv
146.395 9.625 146.492 9.69098 146.551 9.74597 cv
146.605 9.80499 146.645 9.85199 146.672 9.88702 cv
146.691 9.92999 146.711 9.97998 146.727 10.039 cv
146.738 10.105 146.75 10.184 146.758 10.27 cv
146.766 10.363 146.77 10.473 146.77 10.602 cv
146.77 10.906 146.742 11.117 146.691 11.238 cv
146.637 11.359 146.57 11.422 146.488 11.418 cv
146.398 11.422 146.305 11.387 146.207 11.312 cv
146.105 11.242 145.988 11.16 145.855 11.07 cv
145.723 10.984 145.563 10.902 145.375 10.828 cv
145.188 10.758 144.961 10.723 144.703 10.719 cv
144.191 10.723 143.805 10.918 143.535 11.309 cv
143.262 11.699 143.125 12.273 143.129 13.031 cv
143.125 13.406 143.16 13.738 143.23 14.023 cv
143.297 14.309 143.395 14.547 143.531 14.738 cv
143.66 14.934 143.828 15.078 144.031 15.172 cv
144.23 15.27 144.461 15.316 144.727 15.316 cv
144.992 15.316 145.227 15.277 145.426 15.195 cv
145.617 15.117 145.785 15.027 145.934 14.926 cv
146.074 14.828 146.199 14.738 146.301 14.656 cv
146.398 14.578 146.48 14.539 146.551 14.535 cv
146.594 14.539 146.633 14.551 146.668 14.574 cv
146.695 14.602 146.719 14.648 146.742 14.719 cv
146.758 14.789 146.773 14.879 146.785 14.988 cv
146.793 15.098 146.797 15.238 146.801 15.41 cv
cp
f
154.074 16.539 mo
154.07 16.617 154.043 16.672 153.996 16.711 cv
153.941 16.754 153.859 16.781 153.75 16.801 cv
153.633 16.816 153.469 16.828 153.254 16.828 cv
153.016 16.828 152.844 16.816 152.742 16.801 cv
152.633 16.781 152.559 16.754 152.52 16.711 cv
152.473 16.672 152.453 16.617 152.453 16.539 cv
152.453 15.988 li
152.164 16.297 151.836 16.535 151.473 16.703 cv
151.105 16.875 150.699 16.957 150.254 16.961 cv
149.883 16.957 149.543 16.91 149.234 16.816 cv
148.926 16.723 148.66 16.582 148.434 16.387 cv
148.207 16.199 148.031 15.965 147.906 15.684 cv
147.781 15.406 147.719 15.078 147.723 14.699 cv
147.719 14.301 147.797 13.949 147.957 13.645 cv
148.113 13.348 148.352 13.102 148.668 12.906 cv
148.98 12.715 149.371 12.57 149.84 12.473 cv
150.309 12.383 150.852 12.336 151.469 12.332 cv
152.148 12.332 li
152.148 11.91 li
152.148 11.695 152.125 11.504 152.082 11.34 cv
152.035 11.18 151.961 11.043 151.863 10.93 cv
151.758 10.824 151.625 10.742 151.457 10.687 cv
151.285 10.637 151.074 10.613 150.832 10.609 cv
150.5 10.613 150.207 10.648 149.953 10.719 cv
149.691 10.793 149.465 10.875 149.27 10.961 cv
149.07 11.055 148.906 11.133 148.777 11.203 cv
148.641 11.277 148.531 11.316 148.453 11.312 cv
148.391 11.316 148.34 11.297 148.301 11.258 cv
148.254 11.223 148.219 11.172 148.191 11.102 cv
148.16 11.039 148.137 10.953 148.125 10.852 cv
148.105 10.754 148.098 10.645 148.102 10.523 cv
148.098 10.363 148.113 10.238 148.141 10.141 cv
148.164 10.051 148.211 9.96503 148.289 9.88702 cv
148.359 9.81201 148.488 9.72998 148.672 9.64099 cv
148.852 9.55103 149.063 9.46503 149.309 9.38702 cv
149.551 9.30902 149.82 9.24597 150.109 9.19501 cv
150.398 9.14801 150.695 9.125 151.004 9.12097 cv
151.547 9.125 152.012 9.17603 152.398 9.28101 cv
152.785 9.39099 153.105 9.55499 153.355 9.77301 cv
153.605 9.992 153.785 10.277 153.902 10.625 cv
154.012 10.977 154.07 11.391 154.074 11.863 cv
cp
152.148 13.562 mo
151.398 13.562 li
151.082 13.566 150.813 13.59 150.59 13.633 cv
150.363 13.684 150.18 13.754 150.043 13.844 cv
149.898 13.941 149.797 14.055 149.734 14.184 cv
149.668 14.32 149.633 14.469 149.637 14.637 cv
149.633 14.93 149.727 15.16 149.914 15.324 cv
150.098 15.492 150.355 15.574 150.684 15.574 cv
150.957 15.574 151.207 15.504 151.441 15.363 cv
151.668 15.223 151.906 15.02 152.148 14.746 cv
cp
f
157.996 16.516 mo
157.992 16.57 157.977 16.613 157.949 16.652 cv
157.914 16.691 157.859 16.727 157.789 16.75 cv
157.711 16.777 157.613 16.793 157.488 16.809 cv
157.363 16.82 157.203 16.828 157.016 16.828 cv
156.82 16.828 156.664 16.82 156.539 16.809 cv
156.414 16.793 156.313 16.777 156.238 16.75 cv
156.16 16.727 156.105 16.691 156.078 16.652 cv
156.043 16.613 156.027 16.57 156.031 16.516 cv
156.031 6.27002 li
156.027 6.21899 156.043 6.172 156.078 6.12903 cv
156.105 6.09003 156.16 6.05499 156.238 6.02301 cv
156.313 5.99597 156.414 5.97699 156.539 5.95697 cv
156.664 5.94501 156.82 5.93701 157.016 5.93402 cv
157.203 5.93701 157.363 5.94501 157.488 5.95697 cv
157.613 5.97699 157.711 5.99597 157.789 6.02301 cv
157.859 6.05499 157.914 6.09003 157.949 6.12903 cv
157.977 6.172 157.992 6.21899 157.996 6.27002 cv
cp
f
161.969 16.516 mo
161.965 16.57 161.949 16.613 161.922 16.652 cv
161.887 16.691 161.832 16.727 161.762 16.75 cv
161.684 16.777 161.586 16.793 161.461 16.809 cv
161.336 16.82 161.176 16.828 160.988 16.828 cv
160.793 16.828 160.637 16.82 160.512 16.809 cv
160.387 16.793 160.285 16.777 160.211 16.75 cv
160.133 16.727 160.078 16.691 160.051 16.652 cv
160.016 16.613 160 16.57 160.004 16.516 cv
160.004 9.58197 li
160 9.53101 160.016 9.48401 160.051 9.44501 cv
160.078 9.40601 160.133 9.375 160.211 9.34399 cv
160.285 9.32001 160.387 9.297 160.512 9.27698 cv
160.637 9.26599 160.793 9.258 160.988 9.25403 cv
161.176 9.258 161.336 9.26599 161.461 9.27698 cv
161.586 9.297 161.684 9.32001 161.762 9.34399 cv
161.832 9.375 161.887 9.40601 161.922 9.44501 cv
161.949 9.48401 161.965 9.53101 161.969 9.58197 cv
cp
162.117 7.211 mo
162.117 7.60901 162.035 7.883 161.875 8.03101 cv
161.711 8.18402 161.414 8.258 160.98 8.25403 cv
160.535 8.258 160.234 8.18402 160.086 8.039 cv
159.93 7.89502 159.855 7.633 159.855 7.25 cv
159.855 6.85498 159.934 6.58197 160.094 6.42999 cv
160.25 6.27698 160.551 6.19897 160.996 6.19897 cv
161.43 6.19897 161.727 6.27301 161.883 6.422 cv
162.039 6.57001 162.117 6.836 162.117 7.211 cv
cp
f
170.57 16.516 mo
170.566 16.57 170.551 16.613 170.523 16.652 cv
170.488 16.691 170.438 16.727 170.367 16.75 cv
170.293 16.777 170.191 16.793 170.066 16.809 cv
169.938 16.82 169.781 16.828 169.598 16.828 cv
169.402 16.828 169.242 16.82 169.117 16.809 cv
168.988 16.793 168.887 16.777 168.816 16.75 cv
168.738 16.727 168.688 16.691 168.66 16.652 cv
168.625 16.613 168.609 16.57 168.613 16.516 cv
168.613 12.551 li
168.609 12.215 168.586 11.949 168.539 11.754 cv
168.488 11.562 168.414 11.398 168.324 11.262 cv
168.23 11.125 168.113 11.02 167.965 10.941 cv
167.816 10.867 167.641 10.828 167.445 10.828 cv
167.191 10.828 166.941 10.922 166.688 11.102 cv
166.434 11.285 166.168 11.547 165.895 11.895 cv
165.895 16.516 li
165.891 16.57 165.875 16.613 165.848 16.652 cv
165.813 16.691 165.758 16.727 165.688 16.75 cv
165.609 16.777 165.512 16.793 165.387 16.809 cv
165.262 16.82 165.102 16.828 164.914 16.828 cv
164.719 16.828 164.563 16.82 164.438 16.809 cv
164.313 16.793 164.211 16.777 164.137 16.75 cv
164.059 16.727 164.004 16.691 163.977 16.652 cv
163.941 16.613 163.926 16.57 163.93 16.516 cv
163.93 9.56598 li
163.926 9.52002 163.941 9.47302 163.969 9.42999 cv
163.992 9.39502 164.039 9.36298 164.109 9.33197 cv
164.176 9.30902 164.262 9.289 164.371 9.27301 cv
164.477 9.26599 164.609 9.258 164.773 9.25403 cv
164.938 9.258 165.074 9.26599 165.184 9.27301 cv
165.289 9.289 165.375 9.30902 165.438 9.33197 cv
165.496 9.36298 165.539 9.39502 165.566 9.42999 cv
165.59 9.47302 165.602 9.52002 165.605 9.56598 cv
165.605 10.367 li
165.988 9.95697 166.379 9.64502 166.777 9.43402 cv
167.172 9.22699 167.59 9.125 168.023 9.12097 cv
168.492 9.125 168.891 9.203 169.219 9.35498 cv
169.543 9.51599 169.805 9.72699 170.004 9.992 cv
170.203 10.262 170.348 10.574 170.438 10.93 cv
170.523 11.289 170.566 11.719 170.57 12.223 cv
cp
f
178.766 10.047 mo
178.762 10.301 178.734 10.484 178.68 10.602 cv
178.621 10.723 178.551 10.781 178.473 10.781 cv
177.652 10.781 li
177.766 10.906 177.848 11.051 177.898 11.207 cv
177.945 11.367 177.969 11.531 177.973 11.699 cv
177.969 12.109 177.902 12.469 177.77 12.781 cv
177.633 13.098 177.438 13.363 177.188 13.574 cv
176.934 13.793 176.633 13.957 176.277 14.066 cv
175.918 14.184 175.52 14.238 175.09 14.234 cv
174.863 14.238 174.652 14.211 174.449 14.152 cv
174.246 14.102 174.09 14.039 173.98 13.961 cv
173.918 14.031 173.859 14.109 173.813 14.203 cv
173.762 14.297 173.738 14.402 173.742 14.512 cv
173.738 14.668 173.805 14.789 173.938 14.883 cv
174.066 14.98 174.254 15.035 174.496 15.043 cv
176.188 15.105 li
176.582 15.121 176.934 15.18 177.242 15.273 cv
177.551 15.375 177.813 15.508 178.023 15.68 cv
178.234 15.855 178.395 16.066 178.504 16.309 cv
178.613 16.555 178.668 16.828 178.672 17.141 cv
178.668 17.477 178.594 17.801 178.445 18.109 cv
178.297 18.41 178.07 18.672 177.77 18.898 cv
177.465 19.117 177.086 19.297 176.633 19.43 cv
176.176 19.559 175.645 19.621 175.043 19.625 cv
174.445 19.621 173.941 19.574 173.523 19.484 cv
173.105 19.387 172.762 19.258 172.496 19.094 cv
172.227 18.926 172.031 18.727 171.914 18.5 cv
171.789 18.266 171.73 18.012 171.73 17.738 cv
171.73 17.566 171.75 17.406 171.797 17.25 cv
171.836 17.094 171.902 16.941 171.992 16.801 cv
172.074 16.656 172.18 16.523 172.305 16.391 cv
172.43 16.262 172.57 16.137 172.734 16.016 cv
172.508 15.902 172.336 15.742 172.215 15.531 cv
172.094 15.328 172.035 15.102 172.035 14.855 cv
172.035 14.555 172.102 14.277 172.242 14.02 cv
172.379 13.77 172.563 13.539 172.789 13.336 cv
172.605 13.156 172.461 12.941 172.352 12.684 cv
172.242 12.434 172.188 12.113 172.191 11.73 cv
172.188 11.328 172.258 10.969 172.402 10.645 cv
172.543 10.328 172.742 10.059 173 9.836 cv
173.254 9.617 173.559 9.44501 173.91 9.328 cv
174.262 9.211 174.652 9.15198 175.082 9.15198 cv
175.301 9.15198 175.508 9.16803 175.707 9.19098 cv
175.906 9.22302 176.094 9.258 176.266 9.30103 cv
178.473 9.30103 li
178.555 9.30499 178.625 9.36298 178.684 9.47302 cv
178.734 9.59003 178.762 9.78101 178.766 10.047 cv
cp
176.25 11.691 mo
176.246 11.32 176.145 11.031 175.938 10.82 cv
175.727 10.617 175.434 10.512 175.059 10.508 cv
174.863 10.512 174.691 10.543 174.551 10.605 cv
174.402 10.672 174.281 10.762 174.188 10.871 cv
174.086 10.984 174.016 11.113 173.973 11.262 cv
173.922 11.41 173.898 11.566 173.902 11.723 cv
173.898 12.082 174.004 12.359 174.215 12.562 cv
174.422 12.77 174.711 12.875 175.082 12.871 cv
175.277 12.875 175.445 12.844 175.594 12.777 cv
175.734 12.719 175.855 12.633 175.957 12.52 cv
176.051 12.414 176.125 12.285 176.176 12.141 cv
176.223 12 176.246 11.852 176.25 11.691 cv
cp
176.711 17.242 mo
176.711 17.004 176.617 16.828 176.43 16.703 cv
176.242 16.582 175.984 16.512 175.656 16.5 cv
174.262 16.461 li
174.125 16.562 174.016 16.656 173.938 16.746 cv
173.855 16.836 173.793 16.922 173.746 17.008 cv
173.695 17.09 173.66 17.172 173.648 17.25 cv
173.629 17.328 173.621 17.406 173.625 17.492 cv
173.621 17.746 173.754 17.945 174.016 18.082 cv
174.277 18.215 174.648 18.281 175.129 18.285 cv
175.422 18.281 175.668 18.25 175.875 18.195 cv
176.074 18.133 176.238 18.055 176.367 17.957 cv
176.488 17.855 176.578 17.746 176.633 17.625 cv
176.684 17.504 176.711 17.375 176.711 17.242 cv
cp
f
184.961 14.551 mo
184.957 14.949 184.883 15.297 184.738 15.598 cv
184.59 15.898 184.383 16.152 184.113 16.352 cv
183.84 16.559 183.52 16.707 183.152 16.809 cv
182.785 16.906 182.383 16.957 181.953 16.961 cv
181.688 16.957 181.441 16.937 181.207 16.902 cv
180.973 16.859 180.762 16.812 180.574 16.754 cv
180.387 16.695 180.23 16.633 180.105 16.57 cv
179.98 16.508 179.887 16.449 179.832 16.395 cv
179.773 16.34 179.73 16.258 179.703 16.141 cv
179.668 16.027 179.652 15.852 179.656 15.621 cv
179.652 15.473 179.66 15.352 179.672 15.258 cv
179.68 15.168 179.695 15.098 179.719 15.039 cv
179.738 14.988 179.762 14.949 179.797 14.93 cv
179.824 14.914 179.863 14.906 179.91 14.902 cv
179.965 14.906 180.051 14.937 180.164 15 cv
180.273 15.066 180.41 15.141 180.582 15.215 cv
180.746 15.297 180.941 15.367 181.16 15.434 cv
181.379 15.504 181.629 15.539 181.914 15.535 cv
182.09 15.539 182.246 15.52 182.387 15.48 cv
182.52 15.445 182.641 15.395 182.746 15.324 cv
182.844 15.258 182.918 15.172 182.973 15.066 cv
183.02 14.965 183.047 14.844 183.051 14.707 cv
183.047 14.551 183 14.418 182.906 14.309 cv
182.813 14.199 182.684 14.102 182.527 14.016 cv
182.363 13.934 182.184 13.855 181.988 13.781 cv
181.785 13.711 181.582 13.633 181.371 13.539 cv
181.16 13.453 180.953 13.352 180.758 13.234 cv
180.555 13.125 180.375 12.984 180.219 12.816 cv
180.055 12.652 179.93 12.453 179.836 12.215 cv
179.742 11.984 179.695 11.703 179.695 11.371 cv
179.695 11.043 179.758 10.738 179.887 10.457 cv
180.016 10.184 180.203 9.94501 180.449 9.74597 cv
180.691 9.55103 180.988 9.39801 181.34 9.28497 cv
181.688 9.17999 182.082 9.125 182.523 9.12097 cv
182.738 9.125 182.949 9.14099 183.156 9.16803 cv
183.359 9.203 183.547 9.242 183.715 9.28497 cv
183.879 9.336 184.02 9.38702 184.137 9.43701 cv
184.25 9.49597 184.332 9.54303 184.383 9.578 cv
184.43 9.62097 184.465 9.65997 184.488 9.69501 cv
184.508 9.73798 184.52 9.78497 184.531 9.836 cv
184.539 9.89099 184.551 9.95697 184.559 10.035 cv
184.566 10.121 184.57 10.219 184.57 10.336 cv
184.57 10.477 184.566 10.594 184.559 10.68 cv
184.551 10.773 184.535 10.844 184.52 10.891 cv
184.5 10.945 184.477 10.98 184.449 10.996 cv
184.414 11.02 184.379 11.027 184.34 11.023 cv
184.289 11.027 184.215 11 184.121 10.941 cv
184.02 10.891 183.898 10.832 183.75 10.766 cv
183.602 10.707 183.43 10.648 183.234 10.59 cv
183.039 10.539 182.816 10.512 182.57 10.508 cv
182.391 10.512 182.238 10.531 182.109 10.562 cv
181.977 10.602 181.867 10.652 181.789 10.719 cv
181.703 10.789 181.641 10.867 181.602 10.957 cv
181.555 11.051 181.535 11.148 181.539 11.25 cv
181.535 11.41 181.586 11.547 181.688 11.652 cv
181.785 11.766 181.914 11.859 182.078 11.941 cv
182.238 12.027 182.422 12.105 182.629 12.176 cv
182.832 12.25 183.039 12.332 183.25 12.414 cv
183.457 12.504 183.664 12.602 183.875 12.715 cv
184.078 12.828 184.262 12.969 184.422 13.133 cv
184.582 13.301 184.711 13.5 184.813 13.73 cv
184.906 13.965 184.957 14.238 184.961 14.551 cv
cp
f
197.074 12.969 mo
197.07 13.566 196.992 14.109 196.84 14.594 cv
196.68 15.086 196.445 15.504 196.129 15.855 cv
195.813 16.207 195.414 16.48 194.938 16.672 cv
194.457 16.863 193.898 16.957 193.262 16.961 cv
192.641 16.957 192.102 16.875 191.648 16.703 cv
191.188 16.535 190.809 16.285 190.512 15.957 cv
190.207 15.633 189.984 15.23 189.84 14.75 cv
189.695 14.273 189.625 13.727 189.625 13.109 cv
189.625 12.52 189.703 11.98 189.859 11.488 cv
190.016 11 190.254 10.578 190.574 10.227 cv
190.891 9.87903 191.285 9.60498 191.762 9.40997 cv
192.234 9.21899 192.793 9.125 193.434 9.12097 cv
194.059 9.125 194.598 9.20697 195.055 9.375 cv
195.512 9.547 195.891 9.797 196.188 10.121 cv
196.484 10.449 196.707 10.852 196.855 11.328 cv
197 11.809 197.07 12.355 197.074 12.969 cv
cp
195.055 13.047 mo
195.051 12.711 195.023 12.395 194.973 12.102 cv
194.914 11.816 194.82 11.566 194.695 11.352 cv
194.563 11.141 194.391 10.973 194.18 10.852 cv
193.961 10.734 193.691 10.676 193.363 10.672 cv
193.074 10.676 192.82 10.73 192.602 10.832 cv
192.383 10.941 192.203 11.098 192.063 11.301 cv
191.922 11.508 191.816 11.754 191.746 12.039 cv
191.676 12.332 191.641 12.66 191.641 13.023 cv
191.641 13.371 191.668 13.687 191.727 13.973 cv
191.781 14.266 191.875 14.516 192.004 14.727 cv
192.129 14.941 192.301 15.105 192.523 15.219 cv
192.738 15.34 193.008 15.398 193.332 15.395 cv
193.625 15.398 193.883 15.344 194.105 15.234 cv
194.32 15.129 194.5 14.977 194.641 14.77 cv
194.781 14.57 194.883 14.324 194.953 14.035 cv
195.016 13.75 195.051 13.422 195.055 13.047 cv
cp
f
202.824 6.914 mo
202.82 7.06598 202.816 7.18701 202.809 7.27698 cv
202.797 7.37097 202.781 7.44098 202.762 7.48798 cv
202.738 7.539 202.715 7.57397 202.691 7.59003 cv
202.664 7.60901 202.637 7.617 202.605 7.617 cv
202.566 7.617 202.523 7.60901 202.484 7.59003 cv
202.438 7.57397 202.383 7.55499 202.32 7.53101 cv
202.25 7.51202 202.176 7.492 202.09 7.47302 cv
202 7.45697 201.895 7.44897 201.777 7.44501 cv
201.633 7.44897 201.512 7.46899 201.414 7.51202 cv
201.313 7.55902 201.23 7.62903 201.164 7.72302 cv
201.094 7.82001 201.043 7.94501 201.016 8.09802 cv
200.98 8.25 200.965 8.43701 200.969 8.65997 cv
200.969 9.30103 li
202.238 9.30103 li
202.281 9.30499 202.324 9.31598 202.367 9.34003 cv
202.402 9.367 202.438 9.40997 202.465 9.46899 cv
202.488 9.53101 202.508 9.61298 202.523 9.71503 cv
202.535 9.81598 202.539 9.94501 202.543 10.094 cv
202.539 10.383 202.516 10.586 202.465 10.707 cv
202.41 10.832 202.332 10.895 202.238 10.891 cv
200.969 10.891 li
200.969 16.516 li
200.965 16.57 200.949 16.613 200.922 16.652 cv
200.887 16.691 200.836 16.727 200.766 16.75 cv
200.691 16.777 200.59 16.793 200.461 16.809 cv
200.328 16.82 200.168 16.828 199.984 16.828 cv
199.797 16.828 199.641 16.82 199.516 16.809 cv
199.387 16.793 199.285 16.777 199.211 16.75 cv
199.133 16.727 199.082 16.691 199.055 16.652 cv
199.023 16.613 199.008 16.57 199.012 16.516 cv
199.012 10.891 li
198.141 10.891 li
198.039 10.895 197.965 10.832 197.918 10.707 cv
197.867 10.586 197.84 10.383 197.844 10.094 cv
197.84 9.94501 197.848 9.81598 197.863 9.71503 cv
197.875 9.61298 197.895 9.53101 197.918 9.46899 cv
197.941 9.40997 197.973 9.367 198.012 9.34003 cv
198.051 9.31598 198.094 9.30499 198.148 9.30103 cv
199.012 9.30103 li
199.012 8.71503 li
199.008 8.24597 199.055 7.83197 199.152 7.47302 cv
199.242 7.117 199.391 6.82001 199.594 6.586 cv
199.793 6.35199 200.047 6.17603 200.355 6.05103 cv
200.664 5.93402 201.027 5.87097 201.453 5.87097 cv
201.648 5.87097 201.84 5.89099 202.027 5.922 cv
202.207 5.961 202.352 5.99597 202.457 6.03101 cv
202.559 6.07397 202.629 6.10901 202.668 6.14099 cv
202.703 6.17603 202.734 6.22699 202.758 6.289 cv
202.781 6.35498 202.797 6.43701 202.809 6.539 cv
202.816 6.64099 202.82 6.76599 202.824 6.914 cv
cp
f
211.395 15.832 mo
211.395 16.059 211.379 16.234 211.352 16.355 cv
211.32 16.48 211.281 16.566 211.238 16.613 cv
211.188 16.664 211.121 16.707 211.031 16.746 cv
210.938 16.785 210.828 16.816 210.711 16.848 cv
210.586 16.871 210.453 16.895 210.313 16.914 cv
210.168 16.926 210.027 16.934 209.883 16.937 cv
209.492 16.934 209.152 16.883 208.867 16.789 cv
208.582 16.687 208.348 16.539 208.16 16.332 cv
207.973 16.129 207.832 15.871 207.746 15.559 cv
207.652 15.25 207.609 14.879 207.613 14.449 cv
207.613 10.891 li
206.781 10.891 li
206.68 10.895 206.605 10.832 206.555 10.707 cv
206.5 10.586 206.473 10.383 206.477 10.094 cv
206.473 9.94501 206.48 9.81598 206.496 9.71503 cv
206.508 9.61298 206.527 9.53101 206.555 9.46899 cv
206.578 9.40997 206.609 9.367 206.652 9.34003 cv
206.688 9.31598 206.734 9.30499 206.789 9.30103 cv
207.613 9.30103 li
207.613 7.75 li
207.609 7.703 207.625 7.65601 207.656 7.60901 cv
207.684 7.57001 207.734 7.53497 207.813 7.50403 cv
207.887 7.47998 207.988 7.45697 208.117 7.44098 cv
208.242 7.42999 208.398 7.42603 208.59 7.422 cv
208.777 7.42603 208.938 7.42999 209.066 7.44098 cv
209.191 7.45697 209.293 7.47998 209.367 7.50403 cv
209.438 7.53497 209.488 7.57001 209.523 7.60901 cv
209.551 7.65601 209.566 7.703 209.57 7.75 cv
209.57 9.30103 li
211.082 9.30103 li
211.133 9.30499 211.18 9.31598 211.219 9.34003 cv
211.258 9.367 211.289 9.40997 211.316 9.46899 cv
211.34 9.53101 211.359 9.61298 211.375 9.71503 cv
211.387 9.81598 211.395 9.94501 211.395 10.094 cv
211.395 10.383 211.367 10.586 211.316 10.707 cv
211.262 10.832 211.188 10.895 211.09 10.891 cv
209.57 10.891 li
209.57 14.156 li
209.566 14.535 209.625 14.82 209.75 15.008 cv
209.867 15.199 210.082 15.293 210.387 15.293 cv
210.488 15.293 210.582 15.285 210.668 15.266 cv
210.75 15.25 210.824 15.23 210.891 15.203 cv
210.953 15.184 211.008 15.16 211.055 15.141 cv
211.098 15.125 211.137 15.117 211.176 15.113 cv
211.203 15.117 211.234 15.125 211.266 15.141 cv
211.293 15.16 211.313 15.199 211.332 15.25 cv
211.344 15.309 211.359 15.383 211.375 15.473 cv
211.387 15.57 211.395 15.687 211.395 15.832 cv
cp
f
219.457 16.516 mo
219.453 16.57 219.438 16.613 219.41 16.652 cv
219.375 16.691 219.324 16.727 219.254 16.75 cv
219.18 16.777 219.078 16.793 218.953 16.809 cv
218.824 16.82 218.668 16.828 218.484 16.828 cv
218.289 16.828 218.129 16.82 218.004 16.809 cv
217.875 16.793 217.773 16.777 217.703 16.75 cv
217.625 16.727 217.574 16.691 217.547 16.652 cv
217.512 16.613 217.496 16.57 217.5 16.516 cv
217.5 12.551 li
217.496 12.215 217.473 11.949 217.426 11.754 cv
217.375 11.562 217.301 11.398 217.211 11.262 cv
217.117 11.125 217 11.02 216.852 10.941 cv
216.703 10.867 216.527 10.828 216.332 10.828 cv
216.078 10.828 215.828 10.922 215.574 11.102 cv
215.32 11.285 215.055 11.547 214.781 11.895 cv
214.781 16.516 li
214.777 16.57 214.762 16.613 214.734 16.652 cv
214.699 16.691 214.645 16.727 214.574 16.75 cv
214.496 16.777 214.398 16.793 214.273 16.809 cv
214.148 16.82 213.988 16.828 213.801 16.828 cv
213.605 16.828 213.449 16.82 213.324 16.809 cv
213.199 16.793 213.098 16.777 213.023 16.75 cv
212.945 16.727 212.891 16.691 212.863 16.652 cv
212.828 16.613 212.813 16.57 212.816 16.516 cv
212.816 6.27002 li
212.813 6.21899 212.828 6.172 212.863 6.12903 cv
212.891 6.09003 212.945 6.05499 213.023 6.02301 cv
213.098 5.99597 213.199 5.97699 213.324 5.95697 cv
213.449 5.94501 213.605 5.93701 213.801 5.93402 cv
213.988 5.93701 214.148 5.94501 214.273 5.95697 cv
214.398 5.97699 214.496 5.99597 214.574 6.02301 cv
214.645 6.05499 214.699 6.09003 214.734 6.12903 cv
214.762 6.172 214.777 6.21899 214.781 6.27002 cv
214.781 10.109 li
215.117 9.78101 215.461 9.53497 215.813 9.367 cv
216.16 9.20697 216.527 9.125 216.91 9.12097 cv
217.379 9.125 217.777 9.203 218.105 9.35498 cv
218.43 9.51599 218.691 9.72699 218.891 9.99597 cv
219.09 10.266 219.234 10.582 219.324 10.941 cv
219.41 11.305 219.453 11.742 219.457 12.254 cv
cp
f
227.746 12.84 mo
227.742 13.078 227.691 13.254 227.586 13.367 cv
227.477 13.484 227.328 13.543 227.148 13.539 cv
222.914 13.539 li
222.91 13.84 222.945 14.109 223.02 14.348 cv
223.086 14.59 223.199 14.793 223.355 14.961 cv
223.508 15.133 223.703 15.262 223.945 15.348 cv
224.184 15.437 224.473 15.48 224.816 15.48 cv
225.156 15.48 225.457 15.457 225.719 15.406 cv
225.977 15.359 226.203 15.305 226.395 15.242 cv
226.582 15.184 226.738 15.129 226.867 15.078 cv
226.988 15.031 227.09 15.008 227.172 15.004 cv
227.215 15.008 227.254 15.016 227.289 15.031 cv
227.316 15.051 227.344 15.082 227.363 15.129 cv
227.383 15.176 227.395 15.242 227.406 15.328 cv
227.41 15.414 227.414 15.523 227.418 15.652 cv
227.414 15.77 227.414 15.867 227.41 15.945 cv
227.402 16.027 227.395 16.094 227.387 16.148 cv
227.375 16.207 227.359 16.258 227.34 16.293 cv
227.32 16.336 227.293 16.371 227.262 16.406 cv
227.227 16.445 227.133 16.496 226.984 16.555 cv
226.828 16.621 226.637 16.684 226.406 16.738 cv
226.168 16.801 225.898 16.848 225.602 16.895 cv
225.297 16.934 224.977 16.957 224.637 16.961 cv
224.016 16.957 223.473 16.883 223.012 16.727 cv
222.543 16.574 222.156 16.336 221.848 16.02 cv
221.531 15.703 221.297 15.305 221.148 14.82 cv
220.992 14.34 220.918 13.773 220.922 13.117 cv
220.918 12.504 220.996 11.945 221.16 11.449 cv
221.316 10.953 221.551 10.535 221.863 10.187 cv
222.168 9.84399 222.543 9.578 222.98 9.39502 cv
223.418 9.21503 223.91 9.125 224.465 9.12097 cv
225.043 9.125 225.543 9.211 225.957 9.37903 cv
226.371 9.55499 226.707 9.79303 226.973 10.094 cv
227.234 10.398 227.43 10.758 227.559 11.172 cv
227.68 11.59 227.742 12.039 227.746 12.527 cv
cp
225.844 12.277 mo
225.855 11.727 225.746 11.293 225.512 10.98 cv
225.277 10.668 224.91 10.512 224.418 10.508 cv
224.168 10.512 223.953 10.559 223.77 10.648 cv
223.582 10.746 223.43 10.871 223.309 11.027 cv
223.184 11.187 223.09 11.375 223.027 11.59 cv
222.961 11.805 222.922 12.035 222.914 12.277 cv
cp
f
240.094 9.76202 mo
240.094 10.328 240.004 10.832 239.828 11.266 cv
239.648 11.703 239.391 12.07 239.055 12.367 cv
238.715 12.672 238.301 12.898 237.813 13.051 cv
237.32 13.207 236.742 13.285 236.078 13.281 cv
235.238 13.281 li
235.238 16.5 li
235.234 16.555 235.219 16.602 235.188 16.641 cv
235.152 16.684 235.098 16.719 235.02 16.742 cv
234.941 16.77 234.836 16.789 234.707 16.805 cv
234.574 16.82 234.41 16.828 234.211 16.828 cv
234.012 16.828 233.844 16.82 233.715 16.805 cv
233.578 16.789 233.473 16.77 233.398 16.742 cv
233.316 16.719 233.262 16.684 233.234 16.641 cv
233.199 16.602 233.184 16.555 233.188 16.5 cv
233.188 7.42999 li
233.184 7.18701 233.25 7.00403 233.379 6.87903 cv
233.504 6.758 233.672 6.69897 233.883 6.69501 cv
236.258 6.69501 li
236.492 6.69897 236.723 6.70697 236.941 6.72302 cv
237.156 6.742 237.414 6.78101 237.715 6.84003 cv
238.016 6.90198 238.32 7.01202 238.633 7.172 cv
238.941 7.336 239.203 7.54303 239.422 7.78497 cv
239.637 8.03497 239.805 8.32397 239.922 8.65198 cv
240.035 8.98401 240.094 9.35199 240.094 9.76202 cv
cp
237.949 9.90601 mo
237.949 9.55902 237.887 9.26599 237.762 9.03497 cv
237.637 8.80902 237.48 8.64099 237.301 8.52698 cv
237.117 8.422 236.93 8.35199 236.73 8.32001 cv
236.527 8.29303 236.32 8.28101 236.109 8.27698 cv
235.238 8.27698 li
235.238 11.699 li
236.156 11.699 li
236.484 11.703 236.758 11.656 236.98 11.566 cv
237.199 11.48 237.379 11.359 237.52 11.199 cv
237.656 11.043 237.762 10.852 237.84 10.629 cv
237.91 10.41 237.949 10.172 237.949 9.90601 cv
cp
f
246.031 10.211 mo
246.031 10.402 246.023 10.555 246.016 10.672 cv
246 10.793 245.984 10.887 245.969 10.953 cv
245.945 11.023 245.918 11.07 245.887 11.094 cv
245.848 11.121 245.805 11.133 245.758 11.133 cv
245.711 11.133 245.664 11.125 245.617 11.105 cv
245.563 11.09 245.504 11.07 245.441 11.047 cv
245.371 11.027 245.301 11.008 245.227 10.988 cv
245.145 10.973 245.059 10.965 244.969 10.961 cv
244.855 10.965 244.746 10.984 244.641 11.027 cv
244.531 11.074 244.418 11.145 244.305 11.234 cv
244.184 11.328 244.063 11.453 243.938 11.605 cv
243.809 11.766 243.672 11.957 243.527 12.184 cv
243.527 16.516 li
243.523 16.57 243.508 16.613 243.48 16.652 cv
243.445 16.691 243.391 16.727 243.32 16.75 cv
243.242 16.777 243.145 16.793 243.02 16.809 cv
242.895 16.82 242.734 16.828 242.547 16.828 cv
242.352 16.828 242.195 16.82 242.07 16.809 cv
241.945 16.793 241.844 16.777 241.77 16.75 cv
241.691 16.727 241.637 16.691 241.609 16.652 cv
241.574 16.613 241.559 16.57 241.563 16.516 cv
241.563 9.56598 li
241.559 9.52002 241.574 9.47302 241.602 9.42999 cv
241.625 9.39502 241.672 9.36298 241.742 9.33197 cv
241.809 9.30902 241.895 9.289 242.004 9.27301 cv
242.109 9.26599 242.242 9.258 242.406 9.25403 cv
242.57 9.258 242.707 9.26599 242.816 9.27301 cv
242.922 9.289 243.008 9.30902 243.07 9.33197 cv
243.129 9.36298 243.172 9.39502 243.199 9.42999 cv
243.223 9.47302 243.234 9.52002 243.238 9.56598 cv
243.238 10.43 li
243.418 10.172 243.59 9.961 243.754 9.789 cv
243.91 9.625 244.066 9.48798 244.215 9.38702 cv
244.359 9.289 244.504 9.22302 244.648 9.17999 cv
244.793 9.14502 244.938 9.125 245.086 9.12097 cv
245.152 9.125 245.227 9.12903 245.305 9.133 cv
245.383 9.14502 245.461 9.15601 245.547 9.172 cv
245.625 9.19098 245.699 9.211 245.766 9.23401 cv
245.824 9.258 245.871 9.28497 245.902 9.30902 cv
245.93 9.34003 245.949 9.367 245.965 9.39502 cv
245.977 9.42999 245.988 9.47302 246 9.52301 cv
246.008 9.58197 246.016 9.664 246.023 9.77002 cv
246.027 9.87903 246.031 10.027 246.031 10.211 cv
cp
f
253.535 12.84 mo
253.531 13.078 253.48 13.254 253.375 13.367 cv
253.266 13.484 253.117 13.543 252.938 13.539 cv
248.703 13.539 li
248.699 13.84 248.734 14.109 248.809 14.348 cv
248.875 14.59 248.988 14.793 249.145 14.961 cv
249.297 15.133 249.492 15.262 249.734 15.348 cv
249.973 15.437 250.262 15.48 250.605 15.48 cv
250.945 15.48 251.246 15.457 251.508 15.406 cv
251.766 15.359 251.992 15.305 252.184 15.242 cv
252.371 15.184 252.527 15.129 252.656 15.078 cv
252.777 15.031 252.879 15.008 252.961 15.004 cv
253.004 15.008 253.043 15.016 253.078 15.031 cv
253.105 15.051 253.133 15.082 253.152 15.129 cv
253.172 15.176 253.184 15.242 253.195 15.328 cv
253.199 15.414 253.203 15.523 253.207 15.652 cv
253.203 15.77 253.203 15.867 253.199 15.945 cv
253.191 16.027 253.184 16.094 253.176 16.148 cv
253.164 16.207 253.148 16.258 253.129 16.293 cv
253.109 16.336 253.082 16.371 253.051 16.406 cv
253.016 16.445 252.922 16.496 252.773 16.555 cv
252.617 16.621 252.426 16.684 252.195 16.738 cv
251.957 16.801 251.688 16.848 251.391 16.895 cv
251.086 16.934 250.766 16.957 250.426 16.961 cv
249.805 16.957 249.262 16.883 248.801 16.727 cv
248.332 16.574 247.945 16.336 247.637 16.02 cv
247.32 15.703 247.086 15.305 246.938 14.82 cv
246.781 14.34 246.707 13.773 246.711 13.117 cv
246.707 12.504 246.785 11.945 246.949 11.449 cv
247.105 10.953 247.34 10.535 247.652 10.187 cv
247.957 9.84399 248.332 9.578 248.77 9.39502 cv
249.207 9.21503 249.699 9.125 250.254 9.12097 cv
250.832 9.125 251.332 9.211 251.746 9.37903 cv
252.16 9.55499 252.496 9.79303 252.762 10.094 cv
253.023 10.398 253.219 10.758 253.348 11.172 cv
253.469 11.59 253.531 12.039 253.535 12.527 cv
cp
251.633 12.277 mo
251.645 11.727 251.535 11.293 251.301 10.98 cv
251.066 10.668 250.699 10.512 250.207 10.508 cv
249.957 10.512 249.742 10.559 249.559 10.648 cv
249.371 10.746 249.219 10.871 249.098 11.027 cv
248.973 11.187 248.879 11.375 248.816 11.59 cv
248.75 11.805 248.711 12.035 248.703 12.277 cv
cp
f
262.145 12.937 mo
262.145 13.559 262.078 14.117 261.945 14.613 cv
261.813 15.109 261.617 15.531 261.363 15.879 cv
261.109 16.227 260.793 16.496 260.414 16.68 cv
260.031 16.867 259.598 16.957 259.113 16.961 cv
258.906 16.957 258.719 16.937 258.555 16.902 cv
258.383 16.859 258.219 16.801 258.063 16.723 cv
257.902 16.645 257.746 16.547 257.594 16.422 cv
257.434 16.305 257.273 16.164 257.109 16 cv
257.109 19.273 li
257.105 19.32 257.09 19.367 257.063 19.414 cv
257.027 19.453 256.973 19.488 256.902 19.52 cv
256.824 19.543 256.727 19.566 256.602 19.586 cv
256.477 19.598 256.316 19.605 256.129 19.609 cv
255.934 19.605 255.777 19.598 255.652 19.586 cv
255.527 19.566 255.426 19.543 255.352 19.52 cv
255.273 19.488 255.219 19.453 255.191 19.414 cv
255.156 19.367 255.141 19.32 255.145 19.273 cv
255.145 9.56598 li
255.141 9.52002 255.156 9.47302 255.184 9.42999 cv
255.207 9.39502 255.25 9.36298 255.32 9.33197 cv
255.383 9.30902 255.469 9.289 255.578 9.27301 cv
255.68 9.26599 255.816 9.258 255.98 9.25403 cv
256.137 9.258 256.266 9.26599 256.371 9.27301 cv
256.477 9.289 256.563 9.30902 256.629 9.33197 cv
256.691 9.36298 256.738 9.39502 256.766 9.42999 cv
256.789 9.47302 256.801 9.52002 256.805 9.56598 cv
256.805 10.383 li
257.004 10.176 257.203 9.99597 257.402 9.836 cv
257.594 9.67999 257.793 9.547 257.996 9.43701 cv
258.199 9.336 258.406 9.25403 258.625 9.19897 cv
258.836 9.14801 259.066 9.125 259.316 9.12097 cv
259.82 9.125 260.254 9.22302 260.617 9.422 cv
260.973 9.625 261.266 9.90198 261.492 10.246 cv
261.715 10.598 261.879 11 261.988 11.461 cv
262.09 11.922 262.145 12.414 262.145 12.937 cv
cp
260.102 13.078 mo
260.098 12.785 260.078 12.504 260.035 12.227 cv
259.988 11.957 259.91 11.715 259.809 11.5 cv
259.699 11.289 259.559 11.117 259.387 10.988 cv
259.211 10.863 258.996 10.801 258.738 10.797 cv
258.605 10.801 258.477 10.82 258.352 10.855 cv
258.223 10.898 258.094 10.961 257.961 11.047 cv
257.828 11.137 257.691 11.25 257.555 11.391 cv
257.41 11.531 257.262 11.707 257.109 11.91 cv
257.109 14.203 li
257.383 14.551 257.645 14.82 257.895 15.008 cv
258.141 15.199 258.402 15.293 258.676 15.293 cv
258.93 15.293 259.145 15.23 259.328 15.098 cv
259.504 14.973 259.652 14.801 259.766 14.59 cv
259.879 14.379 259.961 14.141 260.02 13.875 cv
260.07 13.609 260.098 13.344 260.102 13.078 cv
cp
f
269.641 16.539 mo
269.637 16.617 269.609 16.672 269.563 16.711 cv
269.508 16.754 269.426 16.781 269.316 16.801 cv
269.199 16.816 269.035 16.828 268.82 16.828 cv
268.582 16.828 268.41 16.816 268.309 16.801 cv
268.199 16.781 268.125 16.754 268.086 16.711 cv
268.039 16.672 268.02 16.617 268.02 16.539 cv
268.02 15.988 li
267.73 16.297 267.402 16.535 267.039 16.703 cv
266.672 16.875 266.266 16.957 265.82 16.961 cv
265.449 16.957 265.109 16.91 264.801 16.816 cv
264.492 16.723 264.227 16.582 264 16.387 cv
263.773 16.199 263.598 15.965 263.473 15.684 cv
263.348 15.406 263.285 15.078 263.289 14.699 cv
263.285 14.301 263.363 13.949 263.523 13.645 cv
263.68 13.348 263.918 13.102 264.234 12.906 cv
264.547 12.715 264.938 12.57 265.406 12.473 cv
265.875 12.383 266.418 12.336 267.035 12.332 cv
267.715 12.332 li
267.715 11.91 li
267.715 11.695 267.691 11.504 267.648 11.34 cv
267.602 11.18 267.527 11.043 267.43 10.93 cv
267.324 10.824 267.191 10.742 267.023 10.687 cv
266.852 10.637 266.641 10.613 266.398 10.609 cv
266.066 10.613 265.773 10.648 265.52 10.719 cv
265.258 10.793 265.031 10.875 264.836 10.961 cv
264.637 11.055 264.473 11.133 264.344 11.203 cv
264.207 11.277 264.098 11.316 264.02 11.312 cv
263.957 11.316 263.906 11.297 263.867 11.258 cv
263.82 11.223 263.785 11.172 263.758 11.102 cv
263.727 11.039 263.703 10.953 263.691 10.852 cv
263.672 10.754 263.664 10.645 263.668 10.523 cv
263.664 10.363 263.68 10.238 263.707 10.141 cv
263.73 10.051 263.777 9.96503 263.855 9.88702 cv
263.926 9.81201 264.055 9.72998 264.238 9.64099 cv
264.418 9.55103 264.629 9.46503 264.875 9.38702 cv
265.117 9.30902 265.387 9.24597 265.676 9.19501 cv
265.965 9.14801 266.262 9.125 266.57 9.12097 cv
267.113 9.125 267.578 9.17603 267.965 9.28101 cv
268.352 9.39099 268.672 9.55499 268.922 9.77301 cv
269.172 9.992 269.352 10.277 269.469 10.625 cv
269.578 10.977 269.637 11.391 269.641 11.863 cv
cp
267.715 13.562 mo
266.965 13.562 li
266.648 13.566 266.379 13.59 266.156 13.633 cv
265.93 13.684 265.746 13.754 265.609 13.844 cv
265.465 13.941 265.363 14.055 265.301 14.184 cv
265.234 14.32 265.199 14.469 265.203 14.637 cv
265.199 14.93 265.293 15.16 265.48 15.324 cv
265.664 15.492 265.922 15.574 266.25 15.574 cv
266.523 15.574 266.773 15.504 267.008 15.363 cv
267.234 15.223 267.473 15.02 267.715 14.746 cv
cp
f
276.066 10.211 mo
276.066 10.402 276.059 10.555 276.051 10.672 cv
276.035 10.793 276.02 10.887 276.004 10.953 cv
275.98 11.023 275.953 11.07 275.922 11.094 cv
275.883 11.121 275.84 11.133 275.793 11.133 cv
275.746 11.133 275.699 11.125 275.652 11.105 cv
275.598 11.09 275.539 11.07 275.477 11.047 cv
275.406 11.027 275.336 11.008 275.262 10.988 cv
275.18 10.973 275.094 10.965 275.004 10.961 cv
274.891 10.965 274.781 10.984 274.676 11.027 cv
274.566 11.074 274.453 11.145 274.34 11.234 cv
274.219 11.328 274.098 11.453 273.973 11.605 cv
273.844 11.766 273.707 11.957 273.563 12.184 cv
273.563 16.516 li
273.559 16.57 273.543 16.613 273.516 16.652 cv
273.48 16.691 273.426 16.727 273.355 16.75 cv
273.277 16.777 273.18 16.793 273.055 16.809 cv
272.93 16.82 272.77 16.828 272.582 16.828 cv
272.387 16.828 272.23 16.82 272.105 16.809 cv
271.98 16.793 271.879 16.777 271.805 16.75 cv
271.727 16.727 271.672 16.691 271.645 16.652 cv
271.609 16.613 271.594 16.57 271.598 16.516 cv
271.598 9.56598 li
271.594 9.52002 271.609 9.47302 271.637 9.42999 cv
271.66 9.39502 271.707 9.36298 271.777 9.33197 cv
271.844 9.30902 271.93 9.289 272.039 9.27301 cv
272.145 9.26599 272.277 9.258 272.441 9.25403 cv
272.605 9.258 272.742 9.26599 272.852 9.27301 cv
272.957 9.289 273.043 9.30902 273.105 9.33197 cv
273.164 9.36298 273.207 9.39502 273.234 9.42999 cv
273.258 9.47302 273.27 9.52002 273.273 9.56598 cv
273.273 10.43 li
273.453 10.172 273.625 9.961 273.789 9.789 cv
273.945 9.625 274.102 9.48798 274.25 9.38702 cv
274.395 9.289 274.539 9.22302 274.684 9.17999 cv
274.828 9.14502 274.973 9.125 275.121 9.12097 cv
275.188 9.125 275.262 9.12903 275.34 9.133 cv
275.418 9.14502 275.496 9.15601 275.582 9.172 cv
275.66 9.19098 275.734 9.211 275.801 9.23401 cv
275.859 9.258 275.906 9.28497 275.938 9.30902 cv
275.965 9.34003 275.984 9.367 276 9.39502 cv
276.012 9.42999 276.023 9.47302 276.035 9.52301 cv
276.043 9.58197 276.051 9.664 276.059 9.77002 cv
276.063 9.87903 276.066 10.027 276.066 10.211 cv
cp
f
282.805 16.539 mo
282.801 16.617 282.773 16.672 282.727 16.711 cv
282.672 16.754 282.59 16.781 282.48 16.801 cv
282.363 16.816 282.199 16.828 281.984 16.828 cv
281.746 16.828 281.574 16.816 281.473 16.801 cv
281.363 16.781 281.289 16.754 281.25 16.711 cv
281.203 16.672 281.184 16.617 281.184 16.539 cv
281.184 15.988 li
280.895 16.297 280.566 16.535 280.203 16.703 cv
279.836 16.875 279.43 16.957 278.984 16.961 cv
278.613 16.957 278.273 16.91 277.965 16.816 cv
277.656 16.723 277.391 16.582 277.164 16.387 cv
276.938 16.199 276.762 15.965 276.637 15.684 cv
276.512 15.406 276.449 15.078 276.453 14.699 cv
276.449 14.301 276.527 13.949 276.688 13.645 cv
276.844 13.348 277.082 13.102 277.398 12.906 cv
277.711 12.715 278.102 12.57 278.57 12.473 cv
279.039 12.383 279.582 12.336 280.199 12.332 cv
280.879 12.332 li
280.879 11.91 li
280.879 11.695 280.855 11.504 280.813 11.34 cv
280.766 11.18 280.691 11.043 280.594 10.93 cv
280.488 10.824 280.355 10.742 280.188 10.687 cv
280.016 10.637 279.805 10.613 279.563 10.609 cv
279.23 10.613 278.938 10.648 278.684 10.719 cv
278.422 10.793 278.195 10.875 278 10.961 cv
277.801 11.055 277.637 11.133 277.508 11.203 cv
277.371 11.277 277.262 11.316 277.184 11.312 cv
277.121 11.316 277.07 11.297 277.031 11.258 cv
276.984 11.223 276.949 11.172 276.922 11.102 cv
276.891 11.039 276.867 10.953 276.855 10.852 cv
276.836 10.754 276.828 10.645 276.832 10.523 cv
276.828 10.363 276.844 10.238 276.871 10.141 cv
276.895 10.051 276.941 9.96503 277.02 9.88702 cv
277.09 9.81201 277.219 9.72998 277.402 9.64099 cv
277.582 9.55103 277.793 9.46503 278.039 9.38702 cv
278.281 9.30902 278.551 9.24597 278.84 9.19501 cv
279.129 9.14801 279.426 9.125 279.734 9.12097 cv
280.277 9.125 280.742 9.17603 281.129 9.28101 cv
281.516 9.39099 281.836 9.55499 282.086 9.77301 cv
282.336 9.992 282.516 10.277 282.633 10.625 cv
282.742 10.977 282.801 11.391 282.805 11.863 cv
cp
280.879 13.562 mo
280.129 13.562 li
279.813 13.566 279.543 13.59 279.32 13.633 cv
279.094 13.684 278.91 13.754 278.773 13.844 cv
278.629 13.941 278.527 14.055 278.465 14.184 cv
278.398 14.32 278.363 14.469 278.367 14.637 cv
278.363 14.93 278.457 15.16 278.645 15.324 cv
278.828 15.492 279.086 15.574 279.414 15.574 cv
279.688 15.574 279.938 15.504 280.172 15.363 cv
280.398 15.223 280.637 15.02 280.879 14.746 cv
cp
f
288.801 15.832 mo
288.801 16.059 288.785 16.234 288.758 16.355 cv
288.727 16.48 288.688 16.566 288.645 16.613 cv
288.594 16.664 288.527 16.707 288.438 16.746 cv
288.344 16.785 288.234 16.816 288.117 16.848 cv
287.992 16.871 287.859 16.895 287.719 16.914 cv
287.574 16.926 287.434 16.934 287.289 16.937 cv
286.898 16.934 286.559 16.883 286.273 16.789 cv
285.988 16.687 285.754 16.539 285.566 16.332 cv
285.379 16.129 285.238 15.871 285.152 15.559 cv
285.059 15.25 285.016 14.879 285.02 14.449 cv
285.02 10.891 li
284.188 10.891 li
284.086 10.895 284.012 10.832 283.961 10.707 cv
283.906 10.586 283.879 10.383 283.883 10.094 cv
283.879 9.94501 283.887 9.81598 283.902 9.71503 cv
283.914 9.61298 283.934 9.53101 283.961 9.46899 cv
283.984 9.40997 284.016 9.367 284.059 9.34003 cv
284.094 9.31598 284.141 9.30499 284.195 9.30103 cv
285.02 9.30103 li
285.02 7.75 li
285.016 7.703 285.031 7.65601 285.063 7.60901 cv
285.09 7.57001 285.141 7.53497 285.219 7.50403 cv
285.293 7.47998 285.395 7.45697 285.523 7.44098 cv
285.648 7.42999 285.805 7.42603 285.996 7.422 cv
286.184 7.42603 286.344 7.42999 286.473 7.44098 cv
286.598 7.45697 286.699 7.47998 286.773 7.50403 cv
286.844 7.53497 286.895 7.57001 286.93 7.60901 cv
286.957 7.65601 286.973 7.703 286.977 7.75 cv
286.977 9.30103 li
288.488 9.30103 li
288.539 9.30499 288.586 9.31598 288.625 9.34003 cv
288.664 9.367 288.695 9.40997 288.723 9.46899 cv
288.746 9.53101 288.766 9.61298 288.781 9.71503 cv
288.793 9.81598 288.801 9.94501 288.801 10.094 cv
288.801 10.383 288.773 10.586 288.723 10.707 cv
288.668 10.832 288.594 10.895 288.496 10.891 cv
286.977 10.891 li
286.977 14.156 li
286.973 14.535 287.031 14.82 287.156 15.008 cv
287.273 15.199 287.488 15.293 287.793 15.293 cv
287.895 15.293 287.988 15.285 288.074 15.266 cv
288.156 15.25 288.23 15.23 288.297 15.203 cv
288.359 15.184 288.414 15.16 288.461 15.141 cv
288.504 15.125 288.543 15.117 288.582 15.113 cv
288.609 15.117 288.641 15.125 288.672 15.141 cv
288.699 15.16 288.719 15.199 288.738 15.25 cv
288.75 15.309 288.766 15.383 288.781 15.473 cv
288.793 15.57 288.801 15.687 288.801 15.832 cv
cp
f
292.188 16.516 mo
292.184 16.57 292.168 16.613 292.141 16.652 cv
292.105 16.691 292.051 16.727 291.98 16.75 cv
291.902 16.777 291.805 16.793 291.68 16.809 cv
291.555 16.82 291.395 16.828 291.207 16.828 cv
291.012 16.828 290.855 16.82 290.73 16.809 cv
290.605 16.793 290.504 16.777 290.43 16.75 cv
290.352 16.727 290.297 16.691 290.27 16.652 cv
290.234 16.613 290.219 16.57 290.223 16.516 cv
290.223 9.58197 li
290.219 9.53101 290.234 9.48401 290.27 9.44501 cv
290.297 9.40601 290.352 9.375 290.43 9.34399 cv
290.504 9.32001 290.605 9.297 290.73 9.27698 cv
290.855 9.26599 291.012 9.258 291.207 9.25403 cv
291.395 9.258 291.555 9.26599 291.68 9.27698 cv
291.805 9.297 291.902 9.32001 291.98 9.34399 cv
292.051 9.375 292.105 9.40601 292.141 9.44501 cv
292.168 9.48401 292.184 9.53101 292.188 9.58197 cv
cp
292.336 7.211 mo
292.336 7.60901 292.254 7.883 292.094 8.03101 cv
291.93 8.18402 291.633 8.258 291.199 8.25403 cv
290.754 8.258 290.453 8.18402 290.305 8.039 cv
290.148 7.89502 290.074 7.633 290.074 7.25 cv
290.074 6.85498 290.152 6.58197 290.313 6.42999 cv
290.469 6.27698 290.77 6.19897 291.215 6.19897 cv
291.648 6.19897 291.945 6.27301 292.102 6.422 cv
292.258 6.57001 292.336 6.836 292.336 7.211 cv
cp
f
301.18 12.969 mo
301.176 13.566 301.098 14.109 300.945 14.594 cv
300.785 15.086 300.551 15.504 300.234 15.855 cv
299.918 16.207 299.52 16.48 299.043 16.672 cv
298.563 16.863 298.004 16.957 297.367 16.961 cv
296.746 16.957 296.207 16.875 295.754 16.703 cv
295.293 16.535 294.914 16.285 294.617 15.957 cv
294.313 15.633 294.09 15.23 293.945 14.75 cv
293.801 14.273 293.73 13.727 293.73 13.109 cv
293.73 12.52 293.809 11.98 293.965 11.488 cv
294.121 11 294.359 10.578 294.68 10.227 cv
294.996 9.87903 295.391 9.60498 295.867 9.40997 cv
296.34 9.21899 296.898 9.125 297.539 9.12097 cv
298.164 9.125 298.703 9.20697 299.16 9.375 cv
299.617 9.547 299.996 9.797 300.293 10.121 cv
300.59 10.449 300.813 10.852 300.961 11.328 cv
301.105 11.809 301.176 12.355 301.18 12.969 cv
cp
299.16 13.047 mo
299.156 12.711 299.129 12.395 299.078 12.102 cv
299.02 11.816 298.926 11.566 298.801 11.352 cv
298.668 11.141 298.496 10.973 298.285 10.852 cv
298.066 10.734 297.797 10.676 297.469 10.672 cv
297.18 10.676 296.926 10.73 296.707 10.832 cv
296.488 10.941 296.309 11.098 296.168 11.301 cv
296.027 11.508 295.922 11.754 295.852 12.039 cv
295.781 12.332 295.746 12.66 295.746 13.023 cv
295.746 13.371 295.773 13.687 295.832 13.973 cv
295.887 14.266 295.98 14.516 296.109 14.727 cv
296.234 14.941 296.406 15.105 296.629 15.219 cv
296.844 15.34 297.113 15.398 297.438 15.395 cv
297.73 15.398 297.988 15.344 298.211 15.234 cv
298.426 15.129 298.605 14.977 298.746 14.77 cv
298.887 14.57 298.988 14.324 299.059 14.035 cv
299.121 13.75 299.156 13.422 299.16 13.047 cv
cp
f
309.426 16.516 mo
309.422 16.57 309.406 16.613 309.379 16.652 cv
309.344 16.691 309.293 16.727 309.223 16.75 cv
309.148 16.777 309.047 16.793 308.922 16.809 cv
308.793 16.82 308.637 16.828 308.453 16.828 cv
308.258 16.828 308.098 16.82 307.973 16.809 cv
307.844 16.793 307.742 16.777 307.672 16.75 cv
307.594 16.727 307.543 16.691 307.516 16.652 cv
307.48 16.613 307.465 16.57 307.469 16.516 cv
307.469 12.551 li
307.465 12.215 307.441 11.949 307.395 11.754 cv
307.344 11.562 307.27 11.398 307.18 11.262 cv
307.086 11.125 306.969 11.02 306.82 10.941 cv
306.672 10.867 306.496 10.828 306.301 10.828 cv
306.047 10.828 305.797 10.922 305.543 11.102 cv
305.289 11.285 305.023 11.547 304.75 11.895 cv
304.75 16.516 li
304.746 16.57 304.73 16.613 304.703 16.652 cv
304.668 16.691 304.613 16.727 304.543 16.75 cv
304.465 16.777 304.367 16.793 304.242 16.809 cv
304.117 16.82 303.957 16.828 303.77 16.828 cv
303.574 16.828 303.418 16.82 303.293 16.809 cv
303.168 16.793 303.066 16.777 302.992 16.75 cv
302.914 16.727 302.859 16.691 302.832 16.652 cv
302.797 16.613 302.781 16.57 302.785 16.516 cv
302.785 9.56598 li
302.781 9.52002 302.797 9.47302 302.824 9.42999 cv
302.848 9.39502 302.895 9.36298 302.965 9.33197 cv
303.031 9.30902 303.117 9.289 303.227 9.27301 cv
303.332 9.26599 303.465 9.258 303.629 9.25403 cv
303.793 9.258 303.93 9.26599 304.039 9.27301 cv
304.145 9.289 304.23 9.30902 304.293 9.33197 cv
304.352 9.36298 304.395 9.39502 304.422 9.42999 cv
304.445 9.47302 304.457 9.52002 304.461 9.56598 cv
304.461 10.367 li
304.844 9.95697 305.234 9.64502 305.633 9.43402 cv
306.027 9.22699 306.445 9.125 306.879 9.12097 cv
307.348 9.125 307.746 9.203 308.074 9.35498 cv
308.398 9.51599 308.66 9.72699 308.859 9.992 cv
309.059 10.262 309.203 10.574 309.293 10.93 cv
309.379 11.289 309.422 11.719 309.426 12.223 cv
cp
f
321.836 7.539 mo
321.832 7.69501 321.824 7.82397 321.816 7.92603 cv
321.801 8.03497 321.781 8.12097 321.758 8.18402 cv
321.727 8.25 321.695 8.297 321.66 8.32397 cv
321.617 8.35901 321.574 8.375 321.531 8.37097 cv
319.008 8.37097 li
319.008 16.5 li
319.008 16.555 318.988 16.602 318.957 16.641 cv
318.918 16.684 318.863 16.719 318.789 16.742 cv
318.707 16.77 318.602 16.789 318.473 16.805 cv
318.336 16.82 318.172 16.828 317.977 16.828 cv
317.781 16.828 317.617 16.82 317.484 16.805 cv
317.352 16.789 317.246 16.77 317.168 16.742 cv
317.09 16.719 317.031 16.684 317 16.641 cv
316.961 16.602 316.945 16.555 316.949 16.5 cv
316.949 8.37097 li
314.426 8.37097 li
314.371 8.375 314.324 8.35901 314.293 8.32397 cv
314.254 8.297 314.223 8.25 314.199 8.18402 cv
314.168 8.12097 314.148 8.03497 314.141 7.92603 cv
314.125 7.82397 314.121 7.69501 314.121 7.539 cv
314.121 7.38702 314.125 7.25403 314.141 7.14099 cv
314.148 7.03497 314.168 6.94501 314.199 6.87903 cv
314.223 6.81598 314.254 6.77002 314.293 6.73798 cv
314.324 6.711 314.371 6.69897 314.426 6.69501 cv
321.531 6.69501 li
321.574 6.69897 321.617 6.711 321.66 6.73798 cv
321.695 6.77002 321.727 6.81598 321.758 6.87903 cv
321.781 6.94501 321.801 7.03497 321.816 7.14099 cv
321.824 7.25403 321.832 7.38702 321.836 7.539 cv
cp
f
324.875 16.516 mo
324.871 16.57 324.855 16.613 324.828 16.652 cv
324.793 16.691 324.738 16.727 324.668 16.75 cv
324.59 16.777 324.492 16.793 324.367 16.809 cv
324.242 16.82 324.082 16.828 323.895 16.828 cv
323.699 16.828 323.543 16.82 323.418 16.809 cv
323.293 16.793 323.191 16.777 323.117 16.75 cv
323.039 16.727 322.984 16.691 322.957 16.652 cv
322.922 16.613 322.906 16.57 322.91 16.516 cv
322.91 9.58197 li
322.906 9.53101 322.922 9.48401 322.957 9.44501 cv
322.984 9.40601 323.039 9.375 323.117 9.34399 cv
323.191 9.32001 323.293 9.297 323.418 9.27698 cv
323.543 9.26599 323.699 9.258 323.895 9.25403 cv
324.082 9.258 324.242 9.26599 324.367 9.27698 cv
324.492 9.297 324.59 9.32001 324.668 9.34399 cv
324.738 9.375 324.793 9.40601 324.828 9.44501 cv
324.855 9.48401 324.871 9.53101 324.875 9.58197 cv
cp
325.023 7.211 mo
325.023 7.60901 324.941 7.883 324.781 8.03101 cv
324.617 8.18402 324.32 8.258 323.887 8.25403 cv
323.441 8.258 323.141 8.18402 322.992 8.039 cv
322.836 7.89502 322.762 7.633 322.762 7.25 cv
322.762 6.85498 322.84 6.58197 323 6.42999 cv
323.156 6.27698 323.457 6.19897 323.902 6.19897 cv
324.336 6.19897 324.633 6.27301 324.789 6.422 cv
324.945 6.57001 325.023 6.836 325.023 7.211 cv
cp
f
337.926 16.516 mo
337.922 16.57 337.906 16.613 337.879 16.652 cv
337.844 16.691 337.793 16.727 337.723 16.75 cv
337.648 16.777 337.547 16.793 337.426 16.809 cv
337.301 16.82 337.145 16.828 336.953 16.828 cv
336.754 16.828 336.594 16.82 336.469 16.809 cv
336.344 16.793 336.242 16.777 336.168 16.75 cv
336.09 16.727 336.039 16.691 336.012 16.652 cv
335.984 16.613 335.969 16.57 335.973 16.516 cv
335.973 12.395 li
335.969 12.164 335.949 11.949 335.906 11.754 cv
335.859 11.562 335.789 11.398 335.703 11.262 cv
335.609 11.125 335.496 11.02 335.359 10.941 cv
335.219 10.867 335.055 10.828 334.863 10.828 cv
334.629 10.828 334.391 10.922 334.152 11.102 cv
333.914 11.285 333.656 11.547 333.375 11.895 cv
333.375 16.516 li
333.375 16.57 333.359 16.613 333.328 16.652 cv
333.297 16.691 333.242 16.727 333.168 16.75 cv
333.09 16.777 332.988 16.793 332.867 16.809 cv
332.742 16.82 332.59 16.828 332.402 16.828 cv
332.207 16.828 332.047 16.82 331.926 16.809 cv
331.797 16.793 331.695 16.777 331.625 16.75 cv
331.547 16.727 331.496 16.691 331.465 16.652 cv
331.434 16.613 331.418 16.57 331.418 16.516 cv
331.418 12.395 li
331.418 12.164 331.395 11.949 331.352 11.754 cv
331.309 11.562 331.242 11.398 331.156 11.262 cv
331.063 11.125 330.949 11.02 330.813 10.941 cv
330.668 10.867 330.504 10.828 330.32 10.828 cv
330.078 10.828 329.84 10.922 329.602 11.102 cv
329.363 11.285 329.105 11.547 328.832 11.895 cv
328.832 16.516 li
328.828 16.57 328.813 16.613 328.785 16.652 cv
328.75 16.691 328.695 16.727 328.625 16.75 cv
328.547 16.777 328.449 16.793 328.324 16.809 cv
328.199 16.82 328.039 16.828 327.852 16.828 cv
327.656 16.828 327.5 16.82 327.375 16.809 cv
327.25 16.793 327.148 16.777 327.074 16.75 cv
326.996 16.727 326.941 16.691 326.914 16.652 cv
326.879 16.613 326.863 16.57 326.867 16.516 cv
326.867 9.56598 li
326.863 9.52002 326.879 9.47302 326.906 9.42999 cv
326.93 9.39502 326.977 9.36298 327.047 9.33197 cv
327.113 9.30902 327.199 9.289 327.309 9.27301 cv
327.414 9.26599 327.547 9.258 327.711 9.25403 cv
327.875 9.258 328.012 9.26599 328.121 9.27301 cv
328.227 9.289 328.313 9.30902 328.375 9.33197 cv
328.434 9.36298 328.477 9.39502 328.504 9.42999 cv
328.527 9.47302 328.539 9.52002 328.543 9.56598 cv
328.543 10.367 li
328.926 9.95697 329.309 9.64502 329.691 9.43402 cv
330.07 9.22699 330.473 9.125 330.891 9.12097 cv
331.176 9.125 331.43 9.15198 331.66 9.211 cv
331.887 9.27301 332.094 9.35901 332.273 9.46899 cv
332.453 9.58197 332.605 9.71899 332.734 9.87097 cv
332.863 10.027 332.973 10.199 333.063 10.391 cv
333.27 10.168 333.473 9.97699 333.676 9.81598 cv
333.871 9.65601 334.07 9.52301 334.266 9.422 cv
334.461 9.32001 334.656 9.24597 334.852 9.19501 cv
335.047 9.14801 335.246 9.125 335.449 9.12097 cv
335.91 9.125 336.297 9.203 336.617 9.35498 cv
336.93 9.51599 337.188 9.72699 337.383 9.992 cv
337.578 10.262 337.715 10.574 337.801 10.93 cv
337.879 11.289 337.922 11.668 337.926 12.066 cv
cp
f
346.266 12.84 mo
346.262 13.078 346.211 13.254 346.105 13.367 cv
345.996 13.484 345.848 13.543 345.668 13.539 cv
341.434 13.539 li
341.43 13.84 341.465 14.109 341.539 14.348 cv
341.605 14.59 341.719 14.793 341.875 14.961 cv
342.027 15.133 342.223 15.262 342.465 15.348 cv
342.703 15.437 342.992 15.48 343.336 15.48 cv
343.676 15.48 343.977 15.457 344.238 15.406 cv
344.496 15.359 344.723 15.305 344.914 15.242 cv
345.102 15.184 345.258 15.129 345.387 15.078 cv
345.508 15.031 345.609 15.008 345.691 15.004 cv
345.734 15.008 345.773 15.016 345.809 15.031 cv
345.836 15.051 345.863 15.082 345.883 15.129 cv
345.902 15.176 345.914 15.242 345.926 15.328 cv
345.93 15.414 345.934 15.523 345.938 15.652 cv
345.934 15.77 345.934 15.867 345.93 15.945 cv
345.922 16.027 345.914 16.094 345.906 16.148 cv
345.895 16.207 345.879 16.258 345.859 16.293 cv
345.84 16.336 345.813 16.371 345.781 16.406 cv
345.746 16.445 345.652 16.496 345.504 16.555 cv
345.348 16.621 345.156 16.684 344.926 16.738 cv
344.688 16.801 344.418 16.848 344.121 16.895 cv
343.816 16.934 343.496 16.957 343.156 16.961 cv
342.535 16.957 341.992 16.883 341.531 16.727 cv
341.063 16.574 340.676 16.336 340.367 16.02 cv
340.051 15.703 339.816 15.305 339.668 14.82 cv
339.512 14.34 339.438 13.773 339.441 13.117 cv
339.438 12.504 339.516 11.945 339.68 11.449 cv
339.836 10.953 340.07 10.535 340.383 10.187 cv
340.688 9.84399 341.063 9.578 341.5 9.39502 cv
341.938 9.21503 342.43 9.125 342.984 9.12097 cv
343.563 9.125 344.063 9.211 344.477 9.37903 cv
344.891 9.55499 345.227 9.79303 345.492 10.094 cv
345.754 10.398 345.949 10.758 346.078 11.172 cv
346.199 11.59 346.262 12.039 346.266 12.527 cv
cp
344.363 12.277 mo
344.375 11.727 344.266 11.293 344.031 10.98 cv
343.797 10.668 343.43 10.512 342.938 10.508 cv
342.688 10.512 342.473 10.559 342.289 10.648 cv
342.102 10.746 341.949 10.871 341.828 11.027 cv
341.703 11.187 341.609 11.375 341.547 11.59 cv
341.48 11.805 341.441 12.035 341.434 12.277 cv
cp
f
352.766 14.551 mo
352.762 14.949 352.688 15.297 352.543 15.598 cv
352.395 15.898 352.188 16.152 351.918 16.352 cv
351.645 16.559 351.324 16.707 350.957 16.809 cv
350.59 16.906 350.188 16.957 349.758 16.961 cv
349.492 16.957 349.246 16.937 349.012 16.902 cv
348.777 16.859 348.566 16.812 348.379 16.754 cv
348.191 16.695 348.035 16.633 347.91 16.57 cv
347.785 16.508 347.691 16.449 347.637 16.395 cv
347.578 16.34 347.535 16.258 347.508 16.141 cv
347.473 16.027 347.457 15.852 347.461 15.621 cv
347.457 15.473 347.465 15.352 347.477 15.258 cv
347.484 15.168 347.5 15.098 347.523 15.039 cv
347.543 14.988 347.566 14.949 347.602 14.93 cv
347.629 14.914 347.668 14.906 347.715 14.902 cv
347.77 14.906 347.855 14.937 347.969 15 cv
348.078 15.066 348.215 15.141 348.387 15.215 cv
348.551 15.297 348.746 15.367 348.965 15.434 cv
349.184 15.504 349.434 15.539 349.719 15.535 cv
349.895 15.539 350.051 15.52 350.191 15.48 cv
350.324 15.445 350.445 15.395 350.551 15.324 cv
350.648 15.258 350.723 15.172 350.777 15.066 cv
350.824 14.965 350.852 14.844 350.855 14.707 cv
350.852 14.551 350.805 14.418 350.711 14.309 cv
350.617 14.199 350.488 14.102 350.332 14.016 cv
350.168 13.934 349.988 13.855 349.793 13.781 cv
349.59 13.711 349.387 13.633 349.176 13.539 cv
348.965 13.453 348.758 13.352 348.563 13.234 cv
348.359 13.125 348.18 12.984 348.023 12.816 cv
347.859 12.652 347.734 12.453 347.641 12.215 cv
347.547 11.984 347.5 11.703 347.5 11.371 cv
347.5 11.043 347.563 10.738 347.691 10.457 cv
347.82 10.184 348.008 9.94501 348.254 9.74597 cv
348.496 9.55103 348.793 9.39801 349.145 9.28497 cv
349.492 9.17999 349.887 9.125 350.328 9.12097 cv
350.543 9.125 350.754 9.14099 350.961 9.16803 cv
351.164 9.203 351.352 9.242 351.52 9.28497 cv
351.684 9.336 351.824 9.38702 351.941 9.43701 cv
352.055 9.49597 352.137 9.54303 352.188 9.578 cv
352.234 9.62097 352.27 9.65997 352.293 9.69501 cv
352.313 9.73798 352.324 9.78497 352.336 9.836 cv
352.344 9.89099 352.355 9.95697 352.363 10.035 cv
352.371 10.121 352.375 10.219 352.375 10.336 cv
352.375 10.477 352.371 10.594 352.363 10.68 cv
352.355 10.773 352.34 10.844 352.324 10.891 cv
352.305 10.945 352.281 10.98 352.254 10.996 cv
352.219 11.02 352.184 11.027 352.145 11.023 cv
352.094 11.027 352.02 11 351.926 10.941 cv
351.824 10.891 351.703 10.832 351.555 10.766 cv
351.406 10.707 351.234 10.648 351.039 10.59 cv
350.844 10.539 350.621 10.512 350.375 10.508 cv
350.195 10.512 350.043 10.531 349.914 10.562 cv
349.781 10.602 349.672 10.652 349.594 10.719 cv
349.508 10.789 349.445 10.867 349.406 10.957 cv
349.359 11.051 349.34 11.148 349.344 11.25 cv
349.34 11.41 349.391 11.547 349.492 11.652 cv
349.59 11.766 349.719 11.859 349.883 11.941 cv
350.043 12.027 350.227 12.105 350.434 12.176 cv
350.637 12.25 350.844 12.332 351.055 12.414 cv
351.262 12.504 351.469 12.602 351.68 12.715 cv
351.883 12.828 352.066 12.969 352.227 13.133 cv
352.387 13.301 352.516 13.5 352.617 13.73 cv
352.711 13.965 352.762 14.238 352.766 14.551 cv
cp
f
364.957 12.969 mo
364.953 13.566 364.875 14.109 364.723 14.594 cv
364.563 15.086 364.328 15.504 364.012 15.855 cv
363.695 16.207 363.297 16.48 362.82 16.672 cv
362.34 16.863 361.781 16.957 361.145 16.961 cv
360.523 16.957 359.984 16.875 359.531 16.703 cv
359.07 16.535 358.691 16.285 358.395 15.957 cv
358.09 15.633 357.867 15.23 357.723 14.75 cv
357.578 14.273 357.508 13.727 357.508 13.109 cv
357.508 12.52 357.586 11.98 357.742 11.488 cv
357.898 11 358.137 10.578 358.457 10.227 cv
358.773 9.87903 359.168 9.60498 359.645 9.40997 cv
360.117 9.21899 360.676 9.125 361.316 9.12097 cv
361.941 9.125 362.48 9.20697 362.938 9.375 cv
363.395 9.547 363.773 9.797 364.07 10.121 cv
364.367 10.449 364.59 10.852 364.738 11.328 cv
364.883 11.809 364.953 12.355 364.957 12.969 cv
cp
362.938 13.047 mo
362.934 12.711 362.906 12.395 362.855 12.102 cv
362.797 11.816 362.703 11.566 362.578 11.352 cv
362.445 11.141 362.273 10.973 362.063 10.852 cv
361.844 10.734 361.574 10.676 361.246 10.672 cv
360.957 10.676 360.703 10.73 360.484 10.832 cv
360.266 10.941 360.086 11.098 359.945 11.301 cv
359.805 11.508 359.699 11.754 359.629 12.039 cv
359.559 12.332 359.523 12.66 359.523 13.023 cv
359.523 13.371 359.551 13.687 359.609 13.973 cv
359.664 14.266 359.758 14.516 359.887 14.727 cv
360.012 14.941 360.184 15.105 360.406 15.219 cv
360.621 15.34 360.891 15.398 361.215 15.395 cv
361.508 15.398 361.766 15.344 361.988 15.234 cv
362.203 15.129 362.383 14.977 362.523 14.77 cv
362.664 14.57 362.766 14.324 362.836 14.035 cv
362.898 13.75 362.934 13.422 362.938 13.047 cv
cp
f
370.738 6.914 mo
370.734 7.06598 370.73 7.18701 370.723 7.27698 cv
370.711 7.37097 370.695 7.44098 370.676 7.48798 cv
370.652 7.539 370.629 7.57397 370.605 7.59003 cv
370.578 7.60901 370.551 7.617 370.52 7.617 cv
370.48 7.617 370.438 7.60901 370.398 7.59003 cv
370.352 7.57397 370.297 7.55499 370.234 7.53101 cv
370.164 7.51202 370.09 7.492 370.004 7.47302 cv
369.914 7.45697 369.809 7.44897 369.691 7.44501 cv
369.547 7.44897 369.426 7.46899 369.328 7.51202 cv
369.227 7.55902 369.145 7.62903 369.078 7.72302 cv
369.008 7.82001 368.957 7.94501 368.93 8.09802 cv
368.895 8.25 368.879 8.43701 368.883 8.65997 cv
368.883 9.30103 li
370.152 9.30103 li
370.195 9.30499 370.238 9.31598 370.281 9.34003 cv
370.316 9.367 370.352 9.40997 370.379 9.46899 cv
370.402 9.53101 370.422 9.61298 370.438 9.71503 cv
370.449 9.81598 370.453 9.94501 370.457 10.094 cv
370.453 10.383 370.43 10.586 370.379 10.707 cv
370.324 10.832 370.246 10.895 370.152 10.891 cv
368.883 10.891 li
368.883 16.516 li
368.879 16.57 368.863 16.613 368.836 16.652 cv
368.801 16.691 368.75 16.727 368.68 16.75 cv
368.605 16.777 368.504 16.793 368.375 16.809 cv
368.242 16.82 368.082 16.828 367.898 16.828 cv
367.711 16.828 367.555 16.82 367.43 16.809 cv
367.301 16.793 367.199 16.777 367.125 16.75 cv
367.047 16.727 366.996 16.691 366.969 16.652 cv
366.938 16.613 366.922 16.57 366.926 16.516 cv
366.926 10.891 li
366.055 10.891 li
365.953 10.895 365.879 10.832 365.832 10.707 cv
365.781 10.586 365.754 10.383 365.758 10.094 cv
365.754 9.94501 365.762 9.81598 365.777 9.71503 cv
365.789 9.61298 365.809 9.53101 365.832 9.46899 cv
365.855 9.40997 365.887 9.367 365.926 9.34003 cv
365.965 9.31598 366.008 9.30499 366.063 9.30103 cv
366.926 9.30103 li
366.926 8.71503 li
366.922 8.24597 366.969 7.83197 367.066 7.47302 cv
367.156 7.117 367.305 6.82001 367.508 6.586 cv
367.707 6.35199 367.961 6.17603 368.27 6.05103 cv
368.578 5.93402 368.941 5.87097 369.367 5.87097 cv
369.563 5.87097 369.754 5.89099 369.941 5.922 cv
370.121 5.961 370.266 5.99597 370.371 6.03101 cv
370.473 6.07397 370.543 6.10901 370.582 6.14099 cv
370.617 6.17603 370.648 6.22699 370.672 6.289 cv
370.695 6.35498 370.711 6.43701 370.723 6.539 cv
370.73 6.64099 370.734 6.76599 370.738 6.914 cv
cp
f
381.289 13.758 mo
381.285 14.289 381.188 14.754 380.992 15.152 cv
380.793 15.555 380.527 15.891 380.191 16.156 cv
379.852 16.426 379.453 16.625 379.004 16.758 cv
378.551 16.891 378.07 16.957 377.559 16.961 cv
377.207 16.957 376.883 16.93 376.586 16.875 cv
376.285 16.816 376.023 16.75 375.797 16.668 cv
375.566 16.59 375.375 16.504 375.223 16.414 cv
375.07 16.328 374.961 16.25 374.895 16.18 cv
374.824 16.113 374.773 16.016 374.75 15.891 cv
374.719 15.766 374.707 15.582 374.707 15.34 cv
374.707 15.18 374.711 15.047 374.723 14.934 cv
374.73 14.828 374.746 14.738 374.773 14.668 cv
374.793 14.602 374.824 14.555 374.867 14.523 cv
374.902 14.5 374.949 14.484 375 14.48 cv
375.07 14.484 375.172 14.527 375.309 14.609 cv
375.438 14.699 375.609 14.793 375.82 14.895 cv
376.027 15 376.273 15.098 376.563 15.18 cv
376.848 15.27 377.184 15.312 377.566 15.309 cv
377.816 15.312 378.039 15.281 378.234 15.219 cv
378.43 15.16 378.598 15.074 378.738 14.965 cv
378.875 14.855 378.98 14.723 379.055 14.562 cv
379.125 14.402 379.16 14.223 379.164 14.023 cv
379.16 13.797 379.098 13.602 378.977 13.434 cv
378.848 13.273 378.684 13.129 378.488 13 cv
378.285 12.875 378.059 12.754 377.805 12.641 cv
377.551 12.531 377.289 12.414 377.02 12.285 cv
376.746 12.164 376.484 12.02 376.23 11.859 cv
375.977 11.703 375.75 11.516 375.551 11.293 cv
375.348 11.074 375.184 10.812 375.063 10.508 cv
374.938 10.207 374.875 9.84802 374.879 9.42603 cv
374.875 8.94501 374.965 8.52002 375.145 8.15198 cv
375.32 7.789 375.563 7.48401 375.871 7.23798 cv
376.172 7 376.531 6.82001 376.945 6.69897 cv
377.359 6.58197 377.797 6.52301 378.258 6.52002 cv
378.496 6.52301 378.734 6.539 378.977 6.57397 cv
379.215 6.61298 379.438 6.664 379.645 6.72302 cv
379.852 6.78497 380.035 6.85498 380.199 6.92999 cv
380.355 7.01202 380.465 7.07397 380.52 7.125 cv
380.57 7.17999 380.605 7.22699 380.625 7.258 cv
380.641 7.297 380.656 7.34399 380.672 7.40198 cv
380.684 7.46503 380.691 7.539 380.699 7.62903 cv
380.703 7.72302 380.707 7.836 380.707 7.96899 cv
380.707 8.12097 380.703 8.25 380.695 8.35199 cv
380.688 8.45697 380.672 8.54303 380.656 8.60498 cv
380.633 8.67603 380.609 8.72302 380.578 8.75403 cv
380.543 8.78497 380.496 8.80103 380.441 8.80103 cv
380.383 8.80103 380.293 8.76599 380.168 8.69098 cv
380.043 8.62097 379.887 8.54303 379.707 8.453 cv
379.523 8.37097 379.316 8.29303 379.078 8.22302 cv
378.836 8.15601 378.57 8.12097 378.289 8.117 cv
378.063 8.12097 377.871 8.14801 377.707 8.19897 cv
377.539 8.25403 377.398 8.328 377.289 8.422 cv
377.176 8.52002 377.094 8.63702 377.039 8.77002 cv
376.984 8.90997 376.957 9.05103 376.957 9.19897 cv
376.957 9.42603 377.016 9.62097 377.141 9.78101 cv
377.258 9.94501 377.422 10.09 377.633 10.215 cv
377.836 10.344 378.07 10.465 378.328 10.574 cv
378.586 10.691 378.852 10.809 379.125 10.93 cv
379.395 11.059 379.656 11.199 379.918 11.355 cv
380.176 11.512 380.41 11.703 380.613 11.922 cv
380.816 12.148 380.977 12.406 381.102 12.703 cv
381.223 13 381.285 13.352 381.289 13.758 cv
cp
f
389.336 16.516 mo
389.332 16.57 389.32 16.613 389.297 16.652 cv
389.27 16.691 389.223 16.727 389.16 16.75 cv
389.094 16.777 389.008 16.793 388.902 16.809 cv
388.797 16.82 388.664 16.828 388.504 16.828 cv
388.328 16.828 388.188 16.82 388.086 16.809 cv
387.977 16.793 387.895 16.777 387.832 16.75 cv
387.77 16.727 387.723 16.691 387.699 16.652 cv
387.668 16.613 387.656 16.57 387.66 16.516 cv
387.66 15.715 li
387.273 16.129 386.883 16.441 386.488 16.648 cv
386.086 16.855 385.676 16.957 385.254 16.961 cv
384.773 16.957 384.371 16.883 384.047 16.727 cv
383.723 16.574 383.461 16.359 383.262 16.09 cv
383.059 15.82 382.914 15.508 382.832 15.148 cv
382.742 14.793 382.699 14.352 382.703 13.82 cv
382.703 9.56598 li
382.699 9.52002 382.715 9.47302 382.746 9.42999 cv
382.773 9.39502 382.824 9.36298 382.902 9.33197 cv
382.977 9.30902 383.078 9.289 383.207 9.27301 cv
383.332 9.26599 383.488 9.258 383.68 9.25403 cv
383.867 9.258 384.027 9.26599 384.152 9.27301 cv
384.277 9.289 384.375 9.30902 384.453 9.33197 cv
384.523 9.36298 384.578 9.39502 384.613 9.42999 cv
384.641 9.47302 384.656 9.52002 384.66 9.56598 cv
384.66 13.492 li
384.656 13.859 384.68 14.137 384.73 14.328 cv
384.773 14.52 384.844 14.684 384.945 14.82 cv
385.039 14.961 385.164 15.066 385.313 15.141 cv
385.461 15.219 385.633 15.258 385.828 15.254 cv
386.078 15.258 386.328 15.168 386.582 14.98 cv
386.832 14.801 387.102 14.535 387.387 14.187 cv
387.387 9.56598 li
387.387 9.52002 387.398 9.47302 387.43 9.42999 cv
387.453 9.39502 387.508 9.36298 387.586 9.33197 cv
387.66 9.30902 387.758 9.289 387.887 9.27301 cv
388.008 9.26599 388.168 9.258 388.363 9.25403 cv
388.555 9.258 388.711 9.26599 388.836 9.27301 cv
388.957 9.289 389.059 9.30902 389.133 9.33197 cv
389.203 9.36298 389.254 9.39502 389.289 9.42999 cv
389.316 9.47302 389.332 9.52002 389.336 9.56598 cv
cp
f
398.266 12.945 mo
398.266 13.566 398.195 14.125 398.063 14.617 cv
397.922 15.113 397.727 15.531 397.477 15.879 cv
397.219 16.227 396.906 16.496 396.539 16.68 cv
396.164 16.867 395.742 16.957 395.273 16.961 cv
395.035 16.957 394.816 16.934 394.617 16.895 cv
394.41 16.848 394.219 16.781 394.035 16.68 cv
393.852 16.586 393.668 16.461 393.492 16.305 cv
393.309 16.156 393.125 15.973 392.941 15.762 cv
392.941 16.516 li
392.938 16.578 392.926 16.625 392.898 16.66 cv
392.867 16.703 392.82 16.734 392.758 16.758 cv
392.691 16.781 392.602 16.797 392.496 16.812 cv
392.387 16.82 392.258 16.828 392.102 16.828 cv
391.938 16.828 391.801 16.82 391.699 16.812 cv
391.59 16.797 391.504 16.781 391.441 16.758 cv
391.371 16.734 391.328 16.703 391.305 16.66 cv
391.277 16.625 391.262 16.578 391.266 16.516 cv
391.266 6.27002 li
391.262 6.21899 391.277 6.172 391.313 6.12903 cv
391.34 6.09003 391.395 6.05499 391.473 6.02301 cv
391.547 5.99597 391.648 5.97699 391.773 5.95697 cv
391.898 5.94501 392.055 5.93701 392.25 5.93402 cv
392.438 5.93701 392.598 5.94501 392.723 5.95697 cv
392.848 5.97699 392.945 5.99597 393.023 6.02301 cv
393.094 6.05499 393.148 6.09003 393.184 6.12903 cv
393.211 6.172 393.227 6.21899 393.23 6.27002 cv
393.23 10.109 li
393.406 9.93402 393.582 9.78497 393.762 9.65997 cv
393.934 9.539 394.109 9.43402 394.289 9.35199 cv
394.461 9.27301 394.645 9.21503 394.836 9.17603 cv
395.02 9.14099 395.219 9.125 395.43 9.12097 cv
395.941 9.125 396.375 9.22699 396.738 9.42999 cv
397.094 9.63702 397.387 9.914 397.613 10.262 cv
397.836 10.609 398 11.016 398.109 11.48 cv
398.211 11.945 398.266 12.434 398.266 12.945 cv
cp
396.23 13.086 mo
396.227 12.793 396.203 12.508 396.164 12.23 cv
396.117 11.957 396.043 11.715 395.934 11.5 cv
395.824 11.289 395.68 11.117 395.508 10.988 cv
395.332 10.863 395.113 10.801 394.852 10.797 cv
394.719 10.801 394.594 10.816 394.469 10.852 cv
394.344 10.891 394.215 10.953 394.082 11.039 cv
393.949 11.129 393.813 11.246 393.676 11.383 cv
393.531 11.523 393.383 11.695 393.23 11.902 cv
393.23 14.211 li
393.504 14.566 393.766 14.836 394.02 15.016 cv
394.27 15.203 394.535 15.293 394.813 15.293 cv
395.066 15.293 395.281 15.23 395.461 15.098 cv
395.633 14.973 395.781 14.805 395.898 14.594 cv
396.016 14.391 396.098 14.152 396.152 13.883 cv
396.199 13.621 396.227 13.355 396.23 13.086 cv
cp
f
403.375 12.863 mo
403.371 13.164 403.344 13.375 403.289 13.492 cv
403.23 13.617 403.141 13.676 403.016 13.672 cv
399.773 13.672 li
399.645 13.676 399.551 13.613 399.496 13.488 cv
399.434 13.367 399.406 13.16 399.41 12.863 cv
399.406 12.574 399.434 12.367 399.496 12.246 cv
399.551 12.129 399.645 12.07 399.773 12.066 cv
403.016 12.066 li
403.078 12.07 403.129 12.082 403.176 12.105 cv
403.215 12.133 403.254 12.18 403.289 12.238 cv
403.316 12.305 403.34 12.387 403.355 12.488 cv
403.367 12.594 403.371 12.719 403.375 12.863 cv
cp
f
407.027 16.5 mo
407.023 16.555 407.008 16.602 406.977 16.641 cv
406.941 16.684 406.883 16.719 406.809 16.742 cv
406.727 16.77 406.625 16.789 406.496 16.805 cv
406.363 16.82 406.195 16.828 406 16.828 cv
405.797 16.828 405.633 16.82 405.504 16.805 cv
405.367 16.789 405.262 16.77 405.188 16.742 cv
405.105 16.719 405.051 16.684 405.02 16.641 cv
404.984 16.602 404.965 16.555 404.969 16.5 cv
404.969 6.97699 li
404.965 6.92999 404.984 6.883 405.02 6.836 cv
405.051 6.797 405.105 6.76202 405.191 6.73401 cv
405.27 6.711 405.375 6.69098 405.508 6.672 cv
405.633 6.65997 405.797 6.65198 406 6.64801 cv
406.195 6.65198 406.363 6.65997 406.496 6.672 cv
406.625 6.69098 406.727 6.711 406.809 6.73401 cv
406.883 6.76202 406.941 6.797 406.977 6.836 cv
407.008 6.883 407.023 6.92999 407.027 6.97699 cv
cp
f
420.105 16.516 mo
420.102 16.57 420.086 16.613 420.059 16.652 cv
420.023 16.691 419.973 16.727 419.902 16.75 cv
419.828 16.777 419.727 16.793 419.605 16.809 cv
419.48 16.82 419.324 16.828 419.133 16.828 cv
418.934 16.828 418.773 16.82 418.648 16.809 cv
418.523 16.793 418.422 16.777 418.348 16.75 cv
418.27 16.727 418.219 16.691 418.191 16.652 cv
418.164 16.613 418.148 16.57 418.152 16.516 cv
418.152 12.395 li
418.148 12.164 418.129 11.949 418.086 11.754 cv
418.039 11.562 417.969 11.398 417.883 11.262 cv
417.789 11.125 417.676 11.02 417.539 10.941 cv
417.398 10.867 417.234 10.828 417.043 10.828 cv
416.809 10.828 416.57 10.922 416.332 11.102 cv
416.094 11.285 415.836 11.547 415.555 11.895 cv
415.555 16.516 li
415.555 16.57 415.539 16.613 415.508 16.652 cv
415.477 16.691 415.422 16.727 415.348 16.75 cv
415.27 16.777 415.168 16.793 415.047 16.809 cv
414.922 16.82 414.77 16.828 414.582 16.828 cv
414.387 16.828 414.227 16.82 414.105 16.809 cv
413.977 16.793 413.875 16.777 413.805 16.75 cv
413.727 16.727 413.676 16.691 413.645 16.652 cv
413.613 16.613 413.598 16.57 413.598 16.516 cv
413.598 12.395 li
413.598 12.164 413.574 11.949 413.531 11.754 cv
413.488 11.562 413.422 11.398 413.336 11.262 cv
413.242 11.125 413.129 11.02 412.992 10.941 cv
412.848 10.867 412.684 10.828 412.5 10.828 cv
412.258 10.828 412.02 10.922 411.781 11.102 cv
411.543 11.285 411.285 11.547 411.012 11.895 cv
411.012 16.516 li
411.008 16.57 410.992 16.613 410.965 16.652 cv
410.93 16.691 410.875 16.727 410.805 16.75 cv
410.727 16.777 410.629 16.793 410.504 16.809 cv
410.379 16.82 410.219 16.828 410.031 16.828 cv
409.836 16.828 409.68 16.82 409.555 16.809 cv
409.43 16.793 409.328 16.777 409.254 16.75 cv
409.176 16.727 409.121 16.691 409.094 16.652 cv
409.059 16.613 409.043 16.57 409.047 16.516 cv
409.047 9.56598 li
409.043 9.52002 409.059 9.47302 409.086 9.42999 cv
409.109 9.39502 409.156 9.36298 409.227 9.33197 cv
409.293 9.30902 409.379 9.289 409.488 9.27301 cv
409.594 9.26599 409.727 9.258 409.891 9.25403 cv
410.055 9.258 410.191 9.26599 410.301 9.27301 cv
410.406 9.289 410.492 9.30902 410.555 9.33197 cv
410.613 9.36298 410.656 9.39502 410.684 9.42999 cv
410.707 9.47302 410.719 9.52002 410.723 9.56598 cv
410.723 10.367 li
411.105 9.95697 411.488 9.64502 411.871 9.43402 cv
412.25 9.22699 412.652 9.125 413.07 9.12097 cv
413.355 9.125 413.609 9.15198 413.84 9.211 cv
414.066 9.27301 414.273 9.35901 414.453 9.46899 cv
414.633 9.58197 414.785 9.71899 414.914 9.87097 cv
415.043 10.027 415.152 10.199 415.242 10.391 cv
415.449 10.168 415.652 9.97699 415.855 9.81598 cv
416.051 9.65601 416.25 9.52301 416.445 9.422 cv
416.641 9.32001 416.836 9.24597 417.031 9.19501 cv
417.227 9.14801 417.426 9.125 417.629 9.12097 cv
418.09 9.125 418.477 9.203 418.797 9.35498 cv
419.109 9.51599 419.367 9.72699 419.563 9.992 cv
419.758 10.262 419.895 10.574 419.98 10.93 cv
420.059 11.289 420.102 11.668 420.105 12.066 cv
cp
f
427.949 16.539 mo
427.945 16.617 427.918 16.672 427.871 16.711 cv
427.816 16.754 427.734 16.781 427.625 16.801 cv
427.508 16.816 427.344 16.828 427.129 16.828 cv
426.891 16.828 426.719 16.816 426.617 16.801 cv
426.508 16.781 426.434 16.754 426.395 16.711 cv
426.348 16.672 426.328 16.617 426.328 16.539 cv
426.328 15.988 li
426.039 16.297 425.711 16.535 425.348 16.703 cv
424.98 16.875 424.574 16.957 424.129 16.961 cv
423.758 16.957 423.418 16.91 423.109 16.816 cv
422.801 16.723 422.535 16.582 422.309 16.387 cv
422.082 16.199 421.906 15.965 421.781 15.684 cv
421.656 15.406 421.594 15.078 421.598 14.699 cv
421.594 14.301 421.672 13.949 421.832 13.645 cv
421.988 13.348 422.227 13.102 422.543 12.906 cv
422.855 12.715 423.246 12.57 423.715 12.473 cv
424.184 12.383 424.727 12.336 425.344 12.332 cv
426.023 12.332 li
426.023 11.91 li
426.023 11.695 426 11.504 425.957 11.34 cv
425.91 11.18 425.836 11.043 425.738 10.93 cv
425.633 10.824 425.5 10.742 425.332 10.687 cv
425.16 10.637 424.949 10.613 424.707 10.609 cv
424.375 10.613 424.082 10.648 423.828 10.719 cv
423.566 10.793 423.34 10.875 423.145 10.961 cv
422.945 11.055 422.781 11.133 422.652 11.203 cv
422.516 11.277 422.406 11.316 422.328 11.312 cv
422.266 11.316 422.215 11.297 422.176 11.258 cv
422.129 11.223 422.094 11.172 422.066 11.102 cv
422.035 11.039 422.012 10.953 422 10.852 cv
421.98 10.754 421.973 10.645 421.977 10.523 cv
421.973 10.363 421.988 10.238 422.016 10.141 cv
422.039 10.051 422.086 9.96503 422.164 9.88702 cv
422.234 9.81201 422.363 9.72998 422.547 9.64099 cv
422.727 9.55103 422.938 9.46503 423.184 9.38702 cv
423.426 9.30902 423.695 9.24597 423.984 9.19501 cv
424.273 9.14801 424.57 9.125 424.879 9.12097 cv
425.422 9.125 425.887 9.17603 426.273 9.28101 cv
426.66 9.39099 426.98 9.55499 427.23 9.77301 cv
427.48 9.992 427.66 10.277 427.777 10.625 cv
427.887 10.977 427.945 11.391 427.949 11.863 cv
cp
426.023 13.562 mo
425.273 13.562 li
424.957 13.566 424.688 13.59 424.465 13.633 cv
424.238 13.684 424.055 13.754 423.918 13.844 cv
423.773 13.941 423.672 14.055 423.609 14.184 cv
423.543 14.32 423.508 14.469 423.512 14.637 cv
423.508 14.93 423.602 15.16 423.789 15.324 cv
423.973 15.492 424.23 15.574 424.559 15.574 cv
424.832 15.574 425.082 15.504 425.316 15.363 cv
425.543 15.223 425.781 15.02 426.023 14.746 cv
cp
f
436.172 10.047 mo
436.168 10.301 436.141 10.484 436.086 10.602 cv
436.027 10.723 435.957 10.781 435.879 10.781 cv
435.059 10.781 li
435.172 10.906 435.254 11.051 435.305 11.207 cv
435.352 11.367 435.375 11.531 435.379 11.699 cv
435.375 12.109 435.309 12.469 435.176 12.781 cv
435.039 13.098 434.844 13.363 434.594 13.574 cv
434.34 13.793 434.039 13.957 433.684 14.066 cv
433.324 14.184 432.926 14.238 432.496 14.234 cv
432.27 14.238 432.059 14.211 431.855 14.152 cv
431.652 14.102 431.496 14.039 431.387 13.961 cv
431.324 14.031 431.266 14.109 431.219 14.203 cv
431.168 14.297 431.145 14.402 431.148 14.512 cv
431.145 14.668 431.211 14.789 431.344 14.883 cv
431.473 14.98 431.66 15.035 431.902 15.043 cv
433.594 15.105 li
433.988 15.121 434.34 15.18 434.648 15.273 cv
434.957 15.375 435.219 15.508 435.43 15.68 cv
435.641 15.855 435.801 16.066 435.91 16.309 cv
436.02 16.555 436.074 16.828 436.078 17.141 cv
436.074 17.477 436 17.801 435.852 18.109 cv
435.703 18.41 435.477 18.672 435.176 18.898 cv
434.871 19.117 434.492 19.297 434.039 19.43 cv
433.582 19.559 433.051 19.621 432.449 19.625 cv
431.852 19.621 431.348 19.574 430.93 19.484 cv
430.512 19.387 430.168 19.258 429.902 19.094 cv
429.633 18.926 429.438 18.727 429.32 18.5 cv
429.195 18.266 429.137 18.012 429.137 17.738 cv
429.137 17.566 429.156 17.406 429.203 17.25 cv
429.242 17.094 429.309 16.941 429.398 16.801 cv
429.48 16.656 429.586 16.523 429.711 16.391 cv
429.836 16.262 429.977 16.137 430.141 16.016 cv
429.914 15.902 429.742 15.742 429.621 15.531 cv
429.5 15.328 429.441 15.102 429.441 14.855 cv
429.441 14.555 429.508 14.277 429.648 14.02 cv
429.785 13.77 429.969 13.539 430.195 13.336 cv
430.012 13.156 429.867 12.941 429.758 12.684 cv
429.648 12.434 429.594 12.113 429.598 11.73 cv
429.594 11.328 429.664 10.969 429.809 10.645 cv
429.949 10.328 430.148 10.059 430.406 9.836 cv
430.66 9.617 430.965 9.44501 431.316 9.328 cv
431.668 9.211 432.059 9.15198 432.488 9.15198 cv
432.707 9.15198 432.914 9.16803 433.113 9.19098 cv
433.313 9.22302 433.5 9.258 433.672 9.30103 cv
435.879 9.30103 li
435.961 9.30499 436.031 9.36298 436.09 9.47302 cv
436.141 9.59003 436.168 9.78101 436.172 10.047 cv
cp
433.656 11.691 mo
433.652 11.32 433.551 11.031 433.344 10.82 cv
433.133 10.617 432.84 10.512 432.465 10.508 cv
432.27 10.512 432.098 10.543 431.957 10.605 cv
431.809 10.672 431.688 10.762 431.594 10.871 cv
431.492 10.984 431.422 11.113 431.379 11.262 cv
431.328 11.41 431.305 11.566 431.309 11.723 cv
431.305 12.082 431.41 12.359 431.621 12.562 cv
431.828 12.77 432.117 12.875 432.488 12.871 cv
432.684 12.875 432.852 12.844 433 12.777 cv
433.141 12.719 433.262 12.633 433.363 12.52 cv
433.457 12.414 433.531 12.285 433.582 12.141 cv
433.629 12 433.652 11.852 433.656 11.691 cv
cp
434.117 17.242 mo
434.117 17.004 434.023 16.828 433.836 16.703 cv
433.648 16.582 433.391 16.512 433.063 16.5 cv
431.668 16.461 li
431.531 16.562 431.422 16.656 431.344 16.746 cv
431.262 16.836 431.199 16.922 431.152 17.008 cv
431.102 17.09 431.066 17.172 431.055 17.25 cv
431.035 17.328 431.027 17.406 431.031 17.492 cv
431.027 17.746 431.16 17.945 431.422 18.082 cv
431.684 18.215 432.055 18.281 432.535 18.285 cv
432.828 18.281 433.074 18.25 433.281 18.195 cv
433.48 18.133 433.645 18.055 433.773 17.957 cv
433.895 17.855 433.984 17.746 434.039 17.625 cv
434.09 17.504 434.117 17.375 434.117 17.242 cv
cp
f
443.781 12.84 mo
443.777 13.078 443.727 13.254 443.621 13.367 cv
443.512 13.484 443.363 13.543 443.184 13.539 cv
438.949 13.539 li
438.945 13.84 438.98 14.109 439.055 14.348 cv
439.121 14.59 439.234 14.793 439.391 14.961 cv
439.543 15.133 439.738 15.262 439.98 15.348 cv
440.219 15.437 440.508 15.48 440.852 15.48 cv
441.191 15.48 441.492 15.457 441.754 15.406 cv
442.012 15.359 442.238 15.305 442.43 15.242 cv
442.617 15.184 442.773 15.129 442.902 15.078 cv
443.023 15.031 443.125 15.008 443.207 15.004 cv
443.25 15.008 443.289 15.016 443.324 15.031 cv
443.352 15.051 443.379 15.082 443.398 15.129 cv
443.418 15.176 443.43 15.242 443.441 15.328 cv
443.445 15.414 443.449 15.523 443.453 15.652 cv
443.449 15.77 443.449 15.867 443.445 15.945 cv
443.438 16.027 443.43 16.094 443.422 16.148 cv
443.41 16.207 443.395 16.258 443.375 16.293 cv
443.355 16.336 443.328 16.371 443.297 16.406 cv
443.262 16.445 443.168 16.496 443.02 16.555 cv
442.863 16.621 442.672 16.684 442.441 16.738 cv
442.203 16.801 441.934 16.848 441.637 16.895 cv
441.332 16.934 441.012 16.957 440.672 16.961 cv
440.051 16.957 439.508 16.883 439.047 16.727 cv
438.578 16.574 438.191 16.336 437.883 16.02 cv
437.566 15.703 437.332 15.305 437.184 14.82 cv
437.027 14.34 436.953 13.773 436.957 13.117 cv
436.953 12.504 437.031 11.945 437.195 11.449 cv
437.352 10.953 437.586 10.535 437.898 10.187 cv
438.203 9.84399 438.578 9.578 439.016 9.39502 cv
439.453 9.21503 439.945 9.125 440.5 9.12097 cv
441.078 9.125 441.578 9.211 441.992 9.37903 cv
442.406 9.55499 442.742 9.79303 443.008 10.094 cv
443.27 10.398 443.465 10.758 443.594 11.172 cv
443.715 11.59 443.777 12.039 443.781 12.527 cv
cp
441.879 12.277 mo
441.891 11.727 441.781 11.293 441.547 10.98 cv
441.313 10.668 440.945 10.512 440.453 10.508 cv
440.203 10.512 439.988 10.559 439.805 10.648 cv
439.617 10.746 439.465 10.871 439.344 11.027 cv
439.219 11.187 439.125 11.375 439.063 11.59 cv
438.996 11.805 438.957 12.035 438.949 12.277 cv
cp
f
450.285 14.551 mo
450.281 14.949 450.207 15.297 450.063 15.598 cv
449.914 15.898 449.707 16.152 449.438 16.352 cv
449.164 16.559 448.844 16.707 448.477 16.809 cv
448.109 16.906 447.707 16.957 447.277 16.961 cv
447.012 16.957 446.766 16.937 446.531 16.902 cv
446.297 16.859 446.086 16.812 445.898 16.754 cv
445.711 16.695 445.555 16.633 445.43 16.57 cv
445.305 16.508 445.211 16.449 445.156 16.395 cv
445.098 16.34 445.055 16.258 445.027 16.141 cv
444.992 16.027 444.977 15.852 444.98 15.621 cv
444.977 15.473 444.984 15.352 444.996 15.258 cv
445.004 15.168 445.02 15.098 445.043 15.039 cv
445.063 14.988 445.086 14.949 445.121 14.93 cv
445.148 14.914 445.188 14.906 445.234 14.902 cv
445.289 14.906 445.375 14.937 445.488 15 cv
445.598 15.066 445.734 15.141 445.906 15.215 cv
446.07 15.297 446.266 15.367 446.484 15.434 cv
446.703 15.504 446.953 15.539 447.238 15.535 cv
447.414 15.539 447.57 15.52 447.711 15.48 cv
447.844 15.445 447.965 15.395 448.07 15.324 cv
448.168 15.258 448.242 15.172 448.297 15.066 cv
448.344 14.965 448.371 14.844 448.375 14.707 cv
448.371 14.551 448.324 14.418 448.23 14.309 cv
448.137 14.199 448.008 14.102 447.852 14.016 cv
447.688 13.934 447.508 13.855 447.313 13.781 cv
447.109 13.711 446.906 13.633 446.695 13.539 cv
446.484 13.453 446.277 13.352 446.082 13.234 cv
445.879 13.125 445.699 12.984 445.543 12.816 cv
445.379 12.652 445.254 12.453 445.16 12.215 cv
445.066 11.984 445.02 11.703 445.02 11.371 cv
445.02 11.043 445.082 10.738 445.211 10.457 cv
445.34 10.184 445.527 9.94501 445.773 9.74597 cv
446.016 9.55103 446.313 9.39801 446.664 9.28497 cv
447.012 9.17999 447.406 9.125 447.848 9.12097 cv
448.063 9.125 448.273 9.14099 448.48 9.16803 cv
448.684 9.203 448.871 9.242 449.039 9.28497 cv
449.203 9.336 449.344 9.38702 449.461 9.43701 cv
449.574 9.49597 449.656 9.54303 449.707 9.578 cv
449.754 9.62097 449.789 9.65997 449.813 9.69501 cv
449.832 9.73798 449.844 9.78497 449.855 9.836 cv
449.863 9.89099 449.875 9.95697 449.883 10.035 cv
449.891 10.121 449.895 10.219 449.895 10.336 cv
449.895 10.477 449.891 10.594 449.883 10.68 cv
449.875 10.773 449.859 10.844 449.844 10.891 cv
449.824 10.945 449.801 10.98 449.773 10.996 cv
449.738 11.02 449.703 11.027 449.664 11.023 cv
449.613 11.027 449.539 11 449.445 10.941 cv
449.344 10.891 449.223 10.832 449.074 10.766 cv
448.926 10.707 448.754 10.648 448.559 10.59 cv
448.363 10.539 448.141 10.512 447.895 10.508 cv
447.715 10.512 447.563 10.531 447.434 10.562 cv
447.301 10.602 447.191 10.652 447.113 10.719 cv
447.027 10.789 446.965 10.867 446.926 10.957 cv
446.879 11.051 446.859 11.148 446.863 11.25 cv
446.859 11.41 446.91 11.547 447.012 11.652 cv
447.109 11.766 447.238 11.859 447.402 11.941 cv
447.563 12.027 447.746 12.105 447.953 12.176 cv
448.156 12.25 448.363 12.332 448.574 12.414 cv
448.781 12.504 448.988 12.602 449.199 12.715 cv
449.402 12.828 449.586 12.969 449.746 13.133 cv
449.906 13.301 450.035 13.5 450.137 13.73 cv
450.23 13.965 450.281 14.238 450.285 14.551 cv
cp
f
459.055 12.863 mo
459.051 13.164 459.023 13.375 458.969 13.492 cv
458.91 13.617 458.82 13.676 458.695 13.672 cv
455.453 13.672 li
455.324 13.676 455.23 13.613 455.176 13.488 cv
455.113 13.367 455.086 13.16 455.09 12.863 cv
455.086 12.574 455.113 12.367 455.176 12.246 cv
455.23 12.129 455.324 12.07 455.453 12.066 cv
458.695 12.066 li
458.758 12.07 458.809 12.082 458.855 12.105 cv
458.895 12.133 458.934 12.18 458.969 12.238 cv
458.996 12.305 459.02 12.387 459.035 12.488 cv
459.047 12.594 459.051 12.719 459.055 12.863 cv
cp
f
470.785 14.078 mo
470.785 14.539 470.703 14.945 470.547 15.301 cv
470.383 15.664 470.148 15.969 469.844 16.211 cv
469.531 16.461 469.148 16.645 468.695 16.77 cv
468.234 16.895 467.707 16.957 467.113 16.961 cv
466.539 16.957 466.039 16.898 465.609 16.789 cv
465.176 16.672 464.816 16.508 464.527 16.289 cv
464.234 16.07 464.016 15.797 463.871 15.469 cv
463.727 15.145 463.652 14.773 463.656 14.352 cv
463.652 14.066 463.695 13.797 463.785 13.543 cv
463.867 13.293 463.996 13.059 464.164 12.844 cv
464.332 12.629 464.543 12.426 464.797 12.234 cv
465.047 12.047 465.336 11.867 465.664 11.691 cv
465.398 11.547 465.16 11.391 464.949 11.223 cv
464.734 11.055 464.551 10.871 464.402 10.668 cv
464.25 10.473 464.137 10.254 464.059 10.012 cv
463.98 9.77698 463.941 9.51599 463.945 9.22998 cv
463.941 8.828 464.012 8.461 464.156 8.12903 cv
464.297 7.80103 464.512 7.51599 464.797 7.27002 cv
465.078 7.03101 465.43 6.84399 465.859 6.71503 cv
466.281 6.586 466.777 6.52301 467.34 6.52002 cv
467.895 6.52301 468.371 6.58197 468.77 6.69897 cv
469.168 6.82001 469.492 6.98798 469.75 7.203 cv
470 7.42603 470.188 7.68701 470.313 7.98798 cv
470.43 8.29303 470.492 8.62903 470.496 8.99597 cv
470.492 9.242 470.453 9.47998 470.375 9.711 cv
470.293 9.94098 470.18 10.16 470.035 10.367 cv
469.891 10.578 469.711 10.773 469.5 10.957 cv
469.285 11.145 469.043 11.312 468.773 11.457 cv
469.09 11.625 469.375 11.801 469.625 11.988 cv
469.875 12.176 470.082 12.379 470.254 12.594 cv
470.422 12.809 470.555 13.039 470.648 13.281 cv
470.738 13.531 470.785 13.797 470.785 14.078 cv
cp
468.527 9.18402 mo
468.523 9.00403 468.496 8.84003 468.449 8.69098 cv
468.395 8.547 468.313 8.42603 468.203 8.32397 cv
468.086 8.22699 467.949 8.14801 467.789 8.09399 cv
467.621 8.04303 467.426 8.01599 467.207 8.01599 cv
466.77 8.01599 466.445 8.117 466.234 8.31598 cv
466.016 8.51599 465.91 8.79303 465.914 9.14502 cv
465.91 9.31598 465.938 9.46899 465.996 9.60498 cv
466.047 9.74597 466.133 9.87903 466.25 10 cv
466.363 10.129 466.512 10.25 466.695 10.367 cv
466.875 10.488 467.09 10.617 467.34 10.75 cv
467.719 10.531 468.012 10.293 468.219 10.035 cv
468.422 9.78497 468.523 9.5 468.527 9.18402 cv
cp
468.758 14.219 mo
468.758 14.031 468.723 13.855 468.66 13.691 cv
468.594 13.535 468.496 13.383 468.359 13.242 cv
468.219 13.102 468.043 12.969 467.84 12.84 cv
467.629 12.711 467.387 12.578 467.113 12.441 cv
466.871 12.574 466.664 12.703 466.484 12.832 cv
466.301 12.961 466.148 13.098 466.031 13.238 cv
465.91 13.383 465.82 13.535 465.762 13.691 cv
465.699 13.855 465.668 14.023 465.672 14.203 cv
465.668 14.609 465.801 14.918 466.066 15.129 cv
466.328 15.344 466.719 15.453 467.238 15.449 cv
467.746 15.453 468.125 15.344 468.379 15.121 cv
468.629 14.906 468.758 14.605 468.758 14.219 cv
cp
f
482.734 7.539 mo
482.73 7.69501 482.723 7.82397 482.715 7.92603 cv
482.699 8.03497 482.68 8.12097 482.656 8.18402 cv
482.625 8.25 482.594 8.297 482.559 8.32397 cv
482.516 8.35901 482.473 8.375 482.43 8.37097 cv
479.906 8.37097 li
479.906 16.5 li
479.906 16.555 479.887 16.602 479.855 16.641 cv
479.816 16.684 479.762 16.719 479.688 16.742 cv
479.605 16.77 479.5 16.789 479.371 16.805 cv
479.234 16.82 479.07 16.828 478.875 16.828 cv
478.68 16.828 478.516 16.82 478.383 16.805 cv
478.25 16.789 478.145 16.77 478.066 16.742 cv
477.988 16.719 477.93 16.684 477.898 16.641 cv
477.859 16.602 477.844 16.555 477.848 16.5 cv
477.848 8.37097 li
475.324 8.37097 li
475.27 8.375 475.223 8.35901 475.191 8.32397 cv
475.152 8.297 475.121 8.25 475.098 8.18402 cv
475.066 8.12097 475.047 8.03497 475.039 7.92603 cv
475.023 7.82397 475.02 7.69501 475.02 7.539 cv
475.02 7.38702 475.023 7.25403 475.039 7.14099 cv
475.047 7.03497 475.066 6.94501 475.098 6.87903 cv
475.121 6.81598 475.152 6.77002 475.191 6.73798 cv
475.223 6.711 475.27 6.69897 475.324 6.69501 cv
482.43 6.69501 li
482.473 6.69897 482.516 6.711 482.559 6.73798 cv
482.594 6.77002 482.625 6.81598 482.656 6.87903 cv
482.68 6.94501 482.699 7.03497 482.715 7.14099 cv
482.723 7.25403 482.73 7.38702 482.734 7.539 cv
cp
f
490.449 16.516 mo
490.445 16.57 490.43 16.613 490.402 16.652 cv
490.367 16.691 490.316 16.727 490.246 16.75 cv
490.172 16.777 490.07 16.793 489.945 16.809 cv
489.816 16.82 489.66 16.828 489.477 16.828 cv
489.281 16.828 489.121 16.82 488.996 16.809 cv
488.867 16.793 488.766 16.777 488.695 16.75 cv
488.617 16.727 488.566 16.691 488.539 16.652 cv
488.504 16.613 488.488 16.57 488.492 16.516 cv
488.492 12.551 li
488.488 12.215 488.465 11.949 488.418 11.754 cv
488.367 11.562 488.293 11.398 488.203 11.262 cv
488.109 11.125 487.992 11.02 487.844 10.941 cv
487.695 10.867 487.52 10.828 487.324 10.828 cv
487.07 10.828 486.82 10.922 486.566 11.102 cv
486.313 11.285 486.047 11.547 485.773 11.895 cv
485.773 16.516 li
485.77 16.57 485.754 16.613 485.727 16.652 cv
485.691 16.691 485.637 16.727 485.566 16.75 cv
485.488 16.777 485.391 16.793 485.266 16.809 cv
485.141 16.82 484.98 16.828 484.793 16.828 cv
484.598 16.828 484.441 16.82 484.316 16.809 cv
484.191 16.793 484.09 16.777 484.016 16.75 cv
483.938 16.727 483.883 16.691 483.855 16.652 cv
483.82 16.613 483.805 16.57 483.809 16.516 cv
483.809 6.27002 li
483.805 6.21899 483.82 6.172 483.855 6.12903 cv
483.883 6.09003 483.938 6.05499 484.016 6.02301 cv
484.09 5.99597 484.191 5.97699 484.316 5.95697 cv
484.441 5.94501 484.598 5.93701 484.793 5.93402 cv
484.98 5.93701 485.141 5.94501 485.266 5.95697 cv
485.391 5.97699 485.488 5.99597 485.566 6.02301 cv
485.637 6.05499 485.691 6.09003 485.727 6.12903 cv
485.754 6.172 485.77 6.21899 485.773 6.27002 cv
485.773 10.109 li
486.109 9.78101 486.453 9.53497 486.805 9.367 cv
487.152 9.20697 487.52 9.125 487.902 9.12097 cv
488.371 9.125 488.77 9.203 489.098 9.35498 cv
489.422 9.51599 489.684 9.72699 489.883 9.99597 cv
490.082 10.266 490.227 10.582 490.316 10.941 cv
490.402 11.305 490.445 11.742 490.449 12.254 cv
cp
f
496.848 10.211 mo
496.848 10.402 496.84 10.555 496.832 10.672 cv
496.816 10.793 496.801 10.887 496.785 10.953 cv
496.762 11.023 496.734 11.07 496.703 11.094 cv
496.664 11.121 496.621 11.133 496.574 11.133 cv
496.527 11.133 496.48 11.125 496.434 11.105 cv
496.379 11.09 496.32 11.07 496.258 11.047 cv
496.188 11.027 496.117 11.008 496.043 10.988 cv
495.961 10.973 495.875 10.965 495.785 10.961 cv
495.672 10.965 495.563 10.984 495.457 11.027 cv
495.348 11.074 495.234 11.145 495.121 11.234 cv
495 11.328 494.879 11.453 494.754 11.605 cv
494.625 11.766 494.488 11.957 494.344 12.184 cv
494.344 16.516 li
494.34 16.57 494.324 16.613 494.297 16.652 cv
494.262 16.691 494.207 16.727 494.137 16.75 cv
494.059 16.777 493.961 16.793 493.836 16.809 cv
493.711 16.82 493.551 16.828 493.363 16.828 cv
493.168 16.828 493.012 16.82 492.887 16.809 cv
492.762 16.793 492.66 16.777 492.586 16.75 cv
492.508 16.727 492.453 16.691 492.426 16.652 cv
492.391 16.613 492.375 16.57 492.379 16.516 cv
492.379 9.56598 li
492.375 9.52002 492.391 9.47302 492.418 9.42999 cv
492.441 9.39502 492.488 9.36298 492.559 9.33197 cv
492.625 9.30902 492.711 9.289 492.82 9.27301 cv
492.926 9.26599 493.059 9.258 493.223 9.25403 cv
493.387 9.258 493.523 9.26599 493.633 9.27301 cv
493.738 9.289 493.824 9.30902 493.887 9.33197 cv
493.945 9.36298 493.988 9.39502 494.016 9.42999 cv
494.039 9.47302 494.051 9.52002 494.055 9.56598 cv
494.055 10.43 li
494.234 10.172 494.406 9.961 494.57 9.789 cv
494.727 9.625 494.883 9.48798 495.031 9.38702 cv
495.176 9.289 495.32 9.22302 495.465 9.17999 cv
495.609 9.14502 495.754 9.125 495.902 9.12097 cv
495.969 9.125 496.043 9.12903 496.121 9.133 cv
496.199 9.14502 496.277 9.15601 496.363 9.172 cv
496.441 9.19098 496.516 9.211 496.582 9.23401 cv
496.641 9.258 496.688 9.28497 496.719 9.30902 cv
496.746 9.34003 496.766 9.367 496.781 9.39502 cv
496.793 9.42999 496.805 9.47302 496.816 9.52301 cv
496.824 9.58197 496.832 9.664 496.84 9.77002 cv
496.844 9.87903 496.848 10.027 496.848 10.211 cv
cp
f
504.289 12.84 mo
504.285 13.078 504.234 13.254 504.129 13.367 cv
504.02 13.484 503.871 13.543 503.691 13.539 cv
499.457 13.539 li
499.453 13.84 499.488 14.109 499.563 14.348 cv
499.629 14.59 499.742 14.793 499.898 14.961 cv
500.051 15.133 500.246 15.262 500.488 15.348 cv
500.727 15.437 501.016 15.48 501.359 15.48 cv
501.699 15.48 502 15.457 502.262 15.406 cv
502.52 15.359 502.746 15.305 502.938 15.242 cv
503.125 15.184 503.281 15.129 503.41 15.078 cv
503.531 15.031 503.633 15.008 503.715 15.004 cv
503.758 15.008 503.797 15.016 503.832 15.031 cv
503.859 15.051 503.887 15.082 503.906 15.129 cv
503.926 15.176 503.938 15.242 503.949 15.328 cv
503.953 15.414 503.957 15.523 503.961 15.652 cv
503.957 15.77 503.957 15.867 503.953 15.945 cv
503.945 16.027 503.938 16.094 503.93 16.148 cv
503.918 16.207 503.902 16.258 503.883 16.293 cv
503.863 16.336 503.836 16.371 503.805 16.406 cv
503.77 16.445 503.676 16.496 503.527 16.555 cv
503.371 16.621 503.18 16.684 502.949 16.738 cv
502.711 16.801 502.441 16.848 502.145 16.895 cv
501.84 16.934 501.52 16.957 501.18 16.961 cv
500.559 16.957 500.016 16.883 499.555 16.727 cv
499.086 16.574 498.699 16.336 498.391 16.02 cv
498.074 15.703 497.84 15.305 497.691 14.82 cv
497.535 14.34 497.461 13.773 497.465 13.117 cv
497.461 12.504 497.539 11.945 497.703 11.449 cv
497.859 10.953 498.094 10.535 498.406 10.187 cv
498.711 9.84399 499.086 9.578 499.523 9.39502 cv
499.961 9.21503 500.453 9.125 501.008 9.12097 cv
501.586 9.125 502.086 9.211 502.5 9.37903 cv
502.914 9.55499 503.25 9.79303 503.516 10.094 cv
503.777 10.398 503.973 10.758 504.102 11.172 cv
504.223 11.59 504.285 12.039 504.289 12.527 cv
cp
502.387 12.277 mo
502.398 11.727 502.289 11.293 502.055 10.98 cv
501.82 10.668 501.453 10.512 500.961 10.508 cv
500.711 10.512 500.496 10.559 500.313 10.648 cv
500.125 10.746 499.973 10.871 499.852 11.027 cv
499.727 11.187 499.633 11.375 499.57 11.59 cv
499.504 11.805 499.465 12.035 499.457 12.277 cv
cp
f
511.82 16.539 mo
511.816 16.617 511.789 16.672 511.742 16.711 cv
511.688 16.754 511.605 16.781 511.496 16.801 cv
511.379 16.816 511.215 16.828 511 16.828 cv
510.762 16.828 510.59 16.816 510.488 16.801 cv
510.379 16.781 510.305 16.754 510.266 16.711 cv
510.219 16.672 510.199 16.617 510.199 16.539 cv
510.199 15.988 li
509.91 16.297 509.582 16.535 509.219 16.703 cv
508.852 16.875 508.445 16.957 508 16.961 cv
507.629 16.957 507.289 16.91 506.98 16.816 cv
506.672 16.723 506.406 16.582 506.18 16.387 cv
505.953 16.199 505.777 15.965 505.652 15.684 cv
505.527 15.406 505.465 15.078 505.469 14.699 cv
505.465 14.301 505.543 13.949 505.703 13.645 cv
505.859 13.348 506.098 13.102 506.414 12.906 cv
506.727 12.715 507.117 12.57 507.586 12.473 cv
508.055 12.383 508.598 12.336 509.215 12.332 cv
509.895 12.332 li
509.895 11.91 li
509.895 11.695 509.871 11.504 509.828 11.34 cv
509.781 11.18 509.707 11.043 509.609 10.93 cv
509.504 10.824 509.371 10.742 509.203 10.687 cv
509.031 10.637 508.82 10.613 508.578 10.609 cv
508.246 10.613 507.953 10.648 507.699 10.719 cv
507.438 10.793 507.211 10.875 507.016 10.961 cv
506.816 11.055 506.652 11.133 506.523 11.203 cv
506.387 11.277 506.277 11.316 506.199 11.312 cv
506.137 11.316 506.086 11.297 506.047 11.258 cv
506 11.223 505.965 11.172 505.938 11.102 cv
505.906 11.039 505.883 10.953 505.871 10.852 cv
505.852 10.754 505.844 10.645 505.848 10.523 cv
505.844 10.363 505.859 10.238 505.887 10.141 cv
505.91 10.051 505.957 9.96503 506.035 9.88702 cv
506.105 9.81201 506.234 9.72998 506.418 9.64099 cv
506.598 9.55103 506.809 9.46503 507.055 9.38702 cv
507.297 9.30902 507.566 9.24597 507.855 9.19501 cv
508.145 9.14801 508.441 9.125 508.75 9.12097 cv
509.293 9.125 509.758 9.17603 510.145 9.28101 cv
510.531 9.39099 510.852 9.55499 511.102 9.77301 cv
511.352 9.992 511.531 10.277 511.648 10.625 cv
511.758 10.977 511.816 11.391 511.82 11.863 cv
cp
509.895 13.562 mo
509.145 13.562 li
508.828 13.566 508.559 13.59 508.336 13.633 cv
508.109 13.684 507.926 13.754 507.789 13.844 cv
507.645 13.941 507.543 14.055 507.48 14.184 cv
507.414 14.32 507.379 14.469 507.383 14.637 cv
507.379 14.93 507.473 15.16 507.66 15.324 cv
507.844 15.492 508.102 15.574 508.43 15.574 cv
508.703 15.574 508.953 15.504 509.188 15.363 cv
509.414 15.223 509.652 15.02 509.895 14.746 cv
cp
f
520.406 16.516 mo
520.402 16.578 520.391 16.625 520.367 16.66 cv
520.34 16.703 520.293 16.734 520.234 16.758 cv
520.168 16.781 520.086 16.797 519.98 16.812 cv
519.875 16.82 519.742 16.828 519.59 16.828 cv
519.418 16.828 519.285 16.82 519.184 16.812 cv
519.078 16.797 518.992 16.781 518.93 16.758 cv
518.863 16.734 518.816 16.703 518.789 16.66 cv
518.758 16.625 518.742 16.578 518.746 16.516 cv
518.746 15.746 li
518.387 16.133 518.012 16.43 517.621 16.641 cv
517.223 16.852 516.789 16.957 516.316 16.961 cv
515.781 16.957 515.332 16.855 514.969 16.652 cv
514.602 16.449 514.305 16.176 514.074 15.824 cv
513.84 15.48 513.672 15.074 513.57 14.605 cv
513.469 14.145 513.418 13.652 513.418 13.133 cv
513.418 12.52 513.48 11.965 513.613 11.469 cv
513.742 10.977 513.938 10.555 514.195 10.207 cv
514.449 9.85901 514.766 9.59399 515.145 9.40198 cv
515.523 9.21899 515.961 9.125 516.457 9.12097 cv
516.844 9.125 517.195 9.203 517.516 9.35901 cv
517.828 9.52002 518.145 9.75 518.457 10.055 cv
518.457 6.29303 li
518.457 6.242 518.469 6.19501 518.5 6.15198 cv
518.523 6.11298 518.578 6.078 518.656 6.047 cv
518.73 6.02002 518.828 6 518.957 5.97998 cv
519.078 5.96899 519.238 5.961 519.434 5.95697 cv
519.625 5.961 519.781 5.96899 519.906 5.97998 cv
520.027 6 520.129 6.02002 520.203 6.047 cv
520.273 6.078 520.324 6.11298 520.359 6.15198 cv
520.387 6.19501 520.402 6.242 520.406 6.29303 cv
cp
518.457 11.871 mo
518.176 11.52 517.906 11.25 517.652 11.062 cv
517.391 10.875 517.121 10.781 516.844 10.781 cv
516.59 10.781 516.371 10.848 516.188 10.973 cv
516 11.105 515.852 11.273 515.742 11.484 cv
515.629 11.695 515.547 11.934 515.492 12.195 cv
515.438 12.461 515.41 12.73 515.41 13 cv
515.41 13.297 515.434 13.578 515.48 13.852 cv
515.527 14.129 515.602 14.375 515.711 14.59 cv
515.813 14.805 515.957 14.977 516.137 15.105 cv
516.313 15.238 516.535 15.305 516.805 15.301 cv
516.938 15.305 517.066 15.285 517.199 15.242 cv
517.324 15.207 517.457 15.145 517.59 15.051 cv
517.723 14.965 517.859 14.848 518 14.703 cv
518.141 14.562 518.293 14.387 518.457 14.18 cv
cp
f
527.23 14.551 mo
527.227 14.949 527.152 15.297 527.008 15.598 cv
526.859 15.898 526.652 16.152 526.383 16.352 cv
526.109 16.559 525.789 16.707 525.422 16.809 cv
525.055 16.906 524.652 16.957 524.223 16.961 cv
523.957 16.957 523.711 16.937 523.477 16.902 cv
523.242 16.859 523.031 16.812 522.844 16.754 cv
522.656 16.695 522.5 16.633 522.375 16.57 cv
522.25 16.508 522.156 16.449 522.102 16.395 cv
522.043 16.34 522 16.258 521.973 16.141 cv
521.938 16.027 521.922 15.852 521.926 15.621 cv
521.922 15.473 521.93 15.352 521.941 15.258 cv
521.949 15.168 521.965 15.098 521.988 15.039 cv
522.008 14.988 522.031 14.949 522.066 14.93 cv
522.094 14.914 522.133 14.906 522.18 14.902 cv
522.234 14.906 522.32 14.937 522.434 15 cv
522.543 15.066 522.68 15.141 522.852 15.215 cv
523.016 15.297 523.211 15.367 523.43 15.434 cv
523.648 15.504 523.898 15.539 524.184 15.535 cv
524.359 15.539 524.516 15.52 524.656 15.48 cv
524.789 15.445 524.91 15.395 525.016 15.324 cv
525.113 15.258 525.188 15.172 525.242 15.066 cv
525.289 14.965 525.316 14.844 525.32 14.707 cv
525.316 14.551 525.27 14.418 525.176 14.309 cv
525.082 14.199 524.953 14.102 524.797 14.016 cv
524.633 13.934 524.453 13.855 524.258 13.781 cv
524.055 13.711 523.852 13.633 523.641 13.539 cv
523.43 13.453 523.223 13.352 523.027 13.234 cv
522.824 13.125 522.645 12.984 522.488 12.816 cv
522.324 12.652 522.199 12.453 522.105 12.215 cv
522.012 11.984 521.965 11.703 521.965 11.371 cv
521.965 11.043 522.027 10.738 522.156 10.457 cv
522.285 10.184 522.473 9.94501 522.719 9.74597 cv
522.961 9.55103 523.258 9.39801 523.609 9.28497 cv
523.957 9.17999 524.352 9.125 524.793 9.12097 cv
525.008 9.125 525.219 9.14099 525.426 9.16803 cv
525.629 9.203 525.816 9.242 525.984 9.28497 cv
526.148 9.336 526.289 9.38702 526.406 9.43701 cv
526.52 9.49597 526.602 9.54303 526.652 9.578 cv
526.699 9.62097 526.734 9.65997 526.758 9.69501 cv
526.777 9.73798 526.789 9.78497 526.801 9.836 cv
526.809 9.89099 526.82 9.95697 526.828 10.035 cv
526.836 10.121 526.84 10.219 526.84 10.336 cv
526.84 10.477 526.836 10.594 526.828 10.68 cv
526.82 10.773 526.805 10.844 526.789 10.891 cv
526.77 10.945 526.746 10.98 526.719 10.996 cv
526.684 11.02 526.648 11.027 526.609 11.023 cv
526.559 11.027 526.484 11 526.391 10.941 cv
526.289 10.891 526.168 10.832 526.02 10.766 cv
525.871 10.707 525.699 10.648 525.504 10.59 cv
525.309 10.539 525.086 10.512 524.84 10.508 cv
524.66 10.512 524.508 10.531 524.379 10.562 cv
524.246 10.602 524.137 10.652 524.059 10.719 cv
523.973 10.789 523.91 10.867 523.871 10.957 cv
523.824 11.051 523.805 11.148 523.809 11.25 cv
523.805 11.41 523.855 11.547 523.957 11.652 cv
524.055 11.766 524.184 11.859 524.348 11.941 cv
524.508 12.027 524.691 12.105 524.898 12.176 cv
525.102 12.25 525.309 12.332 525.52 12.414 cv
525.727 12.504 525.934 12.602 526.145 12.715 cv
526.348 12.828 526.531 12.969 526.691 13.133 cv
526.852 13.301 526.98 13.5 527.082 13.73 cv
527.176 13.965 527.227 14.238 527.23 14.551 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
