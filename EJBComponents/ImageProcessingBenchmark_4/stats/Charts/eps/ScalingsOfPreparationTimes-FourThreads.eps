%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingsOfPreparationTimes-FourThreads.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 3:33:34 p.m.
%%BoundingBox: 0 0 624 551
%%HiResBoundingBox: 0 0 623.2800 550.2001
%%CropBox: 0 0 623.2800 550.2001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -550.2 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 550.2 li
623.28 550.2 li
623.28 0 li
cp
clp
gsave
0 550.2 mo
624 550.2 li
624 -.799988 li
0 -.799988 li
cp
clp
0 0 mo
623.281 0 li
623.281 550.199 li
0 550.199 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
34.32 472.801 mo
608.039 472.801 li
34.32 441 mo
608.039 441 li
34.32 409.199 mo
608.039 409.199 li
34.32 377.281 mo
608.039 377.281 li
34.32 345.48 mo
608.039 345.48 li
34.32 313.68 mo
608.039 313.68 li
34.32 281.762 mo
608.039 281.762 li
34.32 249.961 mo
608.039 249.961 li
34.32 218.16 mo
608.039 218.16 li
34.32 186.238 mo
608.039 186.238 li
34.32 154.441 mo
608.039 154.441 li
34.32 122.641 mo
608.039 122.641 li
34.32 90.719 mo
608.039 90.719 li
34.32 58.922 mo
608.039 58.922 li
34.32 27.121 mo
608.039 27.121 li
.326574 .281529 .277562 0 cmyk
@
70.078 27.121 mo
70.078 504.719 li
141.84 27.121 mo
141.84 504.719 li
213.602 27.121 mo
213.602 504.719 li
285.238 27.121 mo
285.238 504.719 li
357 27.121 mo
357 504.719 li
428.762 27.121 mo
428.762 504.719 li
500.398 27.121 mo
500.398 504.719 li
572.16 27.121 mo
572.16 504.719 li
.175235 .144778 .143648 0 cmyk
@
34.32 27.121 mo
34.32 504.719 li
105.961 27.121 mo
105.961 504.719 li
177.719 27.121 mo
177.719 504.719 li
249.359 27.121 mo
249.359 504.719 li
321.121 27.121 mo
321.121 504.719 li
392.879 27.121 mo
392.879 504.719 li
464.52 27.121 mo
464.52 504.719 li
536.281 27.121 mo
536.281 504.719 li
608.039 27.121 mo
608.039 504.719 li
.326574 .281529 .277562 0 cmyk
@
14.16 495.359 mo
21.238 495.359 li
21.238 512.398 li
14.16 512.398 li
cp
0 0 0 0 cmyk
ef
14.16 463.559 mo
21.238 463.559 li
21.238 480.602 li
14.16 480.602 li
cp
ef
14.16 431.641 mo
21.238 431.641 li
21.238 448.801 li
14.16 448.801 li
cp
ef
14.16 399.84 mo
21.238 399.84 li
21.238 416.879 li
14.16 416.879 li
cp
ef
14.16 368.039 mo
21.238 368.039 li
21.238 385.078 li
14.16 385.078 li
cp
ef
14.16 336.121 mo
21.238 336.121 li
21.238 353.281 li
14.16 353.281 li
cp
ef
14.16 304.32 mo
21.238 304.32 li
21.238 321.359 li
14.16 321.359 li
cp
ef
14.16 272.52 mo
21.238 272.52 li
21.238 289.559 li
14.16 289.559 li
cp
ef
14.16 240.602 mo
21.238 240.602 li
21.238 257.762 li
14.16 257.762 li
cp
ef
7.078 208.801 mo
21.238 208.801 li
21.238 225.84 li
7.078 225.84 li
cp
ef
7.078 177 mo
21.238 177 li
21.238 194.039 li
7.078 194.039 li
cp
ef
7.078 145.078 mo
21.238 145.078 li
21.238 162.238 li
7.078 162.238 li
cp
ef
7.078 113.281 mo
21.238 113.281 li
21.238 130.441 li
7.078 130.441 li
cp
ef
7.078 81.48 mo
21.238 81.48 li
21.238 98.519 li
7.078 98.519 li
cp
ef
7.078 49.68 mo
21.238 49.68 li
21.238 66.719 li
7.078 66.719 li
cp
ef
7.078 17.762 mo
21.238 17.762 li
21.238 34.922 li
7.078 34.922 li
cp
ef
.96 lw
34.32 504.719 mo
608.039 504.719 li
.369879 .299321 .304356 .000976577 cmyk
@
34.32 504.719 mo
34.32 509.16 li
105.961 504.719 mo
105.961 509.16 li
177.719 504.719 mo
177.719 509.16 li
249.359 504.719 mo
249.359 509.16 li
321.121 504.719 mo
321.121 509.16 li
392.879 504.719 mo
392.879 509.16 li
464.52 504.719 mo
464.52 509.16 li
536.281 504.719 mo
536.281 509.16 li
608.039 504.719 mo
608.039 509.16 li
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
1 lc
34.32 504.719 mo
105.961 473.879 li
177.719 415.441 li
249.359 384.961 li
321.121 348.238 li
392.879 292.441 li
464.52 232.922 li
536.281 173.641 li
608.039 109.68 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
39.18 509.609 mo
29.102 499.531 li
29.102 509.609 mo
39.18 499.531 li
.62829 .284672 0 0 cmyk
@
110.941 478.77 mo
100.859 468.691 li
100.859 478.77 mo
110.941 468.691 li
@
182.578 420.449 mo
172.5 410.371 li
172.5 420.449 mo
182.578 410.371 li
@
254.34 389.852 mo
244.262 379.77 li
244.262 389.852 mo
254.34 379.77 li
@
326.102 353.25 mo
316.02 343.172 li
316.02 353.25 mo
326.102 343.172 li
@
397.738 297.328 mo
387.66 287.25 li
387.66 297.328 mo
397.738 287.25 li
@
469.5 237.809 mo
459.422 227.73 li
459.422 237.809 mo
469.5 227.73 li
@
541.141 178.531 mo
531.059 168.449 li
531.059 178.531 mo
541.141 168.449 li
@
612.898 114.57 mo
602.82 104.488 li
602.82 114.57 mo
612.898 104.488 li
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
34.32 504.719 mo
105.961 473.52 li
177.719 413.52 li
249.359 381.359 li
321.121 344.879 li
392.879 286.199 li
464.52 226.559 li
536.281 166.32 li
608.039 105.84 li
@
grestore
29.102 499.531 mo
39.059 499.531 li
39.059 509.488 li
29.102 509.488 li
cp
@
100.859 468.449 mo
110.82 468.449 li
110.82 478.41 li
100.859 478.41 li
cp
@
172.5 408.328 mo
182.461 408.328 li
182.461 418.289 li
172.5 418.289 li
cp
@
244.262 376.172 mo
254.219 376.172 li
254.219 386.129 li
244.262 386.129 li
cp
@
316.02 339.691 mo
325.981 339.691 li
325.981 349.648 li
316.02 349.648 li
cp
@
387.66 281.012 mo
397.621 281.012 li
397.621 290.969 li
387.66 290.969 li
cp
@
459.422 221.488 mo
469.379 221.488 li
469.379 231.449 li
459.422 231.449 li
cp
@
531.059 161.129 mo
541.02 161.129 li
541.02 171.09 li
531.059 171.09 li
cp
@
602.82 100.648 mo
612.781 100.648 li
612.781 110.609 li
602.82 110.609 li
cp
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
34.32 504.719 mo
105.961 473.879 li
177.719 413.762 li
249.359 353.762 li
321.121 292.922 li
392.879 289.199 li
464.52 146.16 li
536.281 170.281 li
608.039 92.16 li
.467353 0 .87747 0 cmyk
@
grestore
39.18 509.609 mo
29.102 499.531 li
29.102 509.609 mo
39.18 499.531 li
.467353 0 .87747 0 cmyk
@
110.941 478.77 mo
100.859 468.691 li
100.859 478.77 mo
110.941 468.691 li
@
182.578 418.77 mo
172.5 408.691 li
172.5 418.77 mo
182.578 408.691 li
@
254.34 358.77 mo
244.262 348.691 li
244.262 358.77 mo
254.34 348.691 li
@
326.102 297.809 mo
316.02 287.73 li
316.02 297.809 mo
326.102 287.73 li
@
397.738 294.211 mo
387.66 284.129 li
387.66 294.211 mo
397.738 284.129 li
@
469.5 151.172 mo
459.422 141.09 li
459.422 151.172 mo
469.5 141.09 li
@
541.141 175.289 mo
531.059 165.211 li
531.059 175.289 mo
541.141 165.211 li
@
612.898 97.051 mo
602.82 86.969 li
602.82 97.051 mo
612.898 86.969 li
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
34.32 504.719 mo
105.961 473.641 li
177.719 412.199 li
249.359 351.121 li
321.121 288.719 li
392.879 306.719 li
464.52 139.922 li
536.281 135.719 li
608.039 85.922 li
@
grestore
29.102 499.531 mo
39.059 499.531 li
39.059 509.488 li
29.102 509.488 li
cp
@
100.859 468.57 mo
110.82 468.57 li
110.82 478.531 li
100.859 478.531 li
cp
@
172.5 407.012 mo
182.461 407.012 li
182.461 416.969 li
172.5 416.969 li
cp
@
244.262 346.051 mo
254.219 346.051 li
254.219 356.012 li
244.262 356.012 li
cp
@
316.02 283.648 mo
325.981 283.648 li
325.981 293.609 li
316.02 293.609 li
cp
@
387.66 301.648 mo
397.621 301.648 li
397.621 311.609 li
387.66 311.609 li
cp
@
459.422 134.852 mo
469.379 134.852 li
469.379 144.809 li
459.422 144.809 li
cp
@
531.059 130.531 mo
541.02 130.531 li
541.02 140.488 li
531.059 140.488 li
cp
@
602.82 80.852 mo
612.781 80.852 li
612.781 90.809 li
602.82 90.809 li
cp
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
34.32 504.719 mo
105.961 473.762 li
177.719 413.281 li
249.359 351.84 li
321.121 290.398 li
392.879 215.879 li
464.52 142.078 li
536.281 118.922 li
608.039 87.961 li
0 .993988 1 0 cmyk
@
grestore
39.18 509.609 mo
29.102 499.531 li
29.102 509.609 mo
39.18 499.531 li
0 .993988 1 0 cmyk
@
110.941 478.648 mo
100.859 468.57 li
100.859 478.648 mo
110.941 468.57 li
@
182.578 418.172 mo
172.5 408.09 li
172.5 418.172 mo
182.578 408.09 li
@
254.34 356.852 mo
244.262 346.77 li
244.262 356.852 mo
254.34 346.77 li
@
326.102 295.289 mo
316.02 285.211 li
316.02 295.289 mo
326.102 285.211 li
@
397.738 220.891 mo
387.66 210.809 li
387.66 220.891 mo
397.738 210.809 li
@
469.5 147.09 mo
459.422 137.012 li
459.422 147.09 mo
469.5 137.012 li
@
541.141 123.93 mo
531.059 113.852 li
531.059 123.93 mo
541.141 113.852 li
@
612.898 92.852 mo
602.82 82.77 li
602.82 92.852 mo
612.898 82.77 li
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
34.32 504.719 mo
105.961 473.762 li
177.719 411.48 li
249.359 349.078 li
321.121 287.398 li
392.879 211.922 li
464.52 137.398 li
536.281 176.398 li
608.039 82.922 li
@
grestore
29.102 499.531 mo
39.059 499.531 li
39.059 509.488 li
29.102 509.488 li
cp
@
100.859 468.57 mo
110.82 468.57 li
110.82 478.531 li
100.859 478.531 li
cp
@
172.5 406.289 mo
182.461 406.289 li
182.461 416.25 li
172.5 416.25 li
cp
@
244.262 344.012 mo
254.219 344.012 li
254.219 353.969 li
244.262 353.969 li
cp
@
316.02 282.328 mo
325.981 282.328 li
325.981 292.289 li
316.02 292.289 li
cp
@
387.66 206.73 mo
397.621 206.73 li
397.621 216.691 li
387.66 216.691 li
cp
@
459.422 132.328 mo
469.379 132.328 li
469.379 142.289 li
459.422 142.289 li
cp
@
531.059 171.211 mo
541.02 171.211 li
541.02 181.172 li
531.059 181.172 li
cp
@
602.82 77.73 mo
612.781 77.73 li
612.781 87.691 li
602.82 87.691 li
cp
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
34.32 504.719 mo
105.961 473.762 li
177.719 413.52 li
249.359 352.68 li
321.121 290.879 li
392.879 217.559 li
464.52 143.52 li
536.281 167.398 li
608.039 89.281 li
.62829 .284672 0 0 cmyk
@
grestore
39.18 509.609 mo
29.102 499.531 li
29.102 509.609 mo
39.18 499.531 li
.62829 .284672 0 0 cmyk
@
110.941 478.648 mo
100.859 468.57 li
100.859 478.648 mo
110.941 468.57 li
@
182.578 418.41 mo
172.5 408.328 li
172.5 418.41 mo
182.578 408.328 li
@
254.34 357.57 mo
244.262 347.488 li
244.262 357.57 mo
254.34 347.488 li
@
326.102 295.891 mo
316.02 285.809 li
316.02 295.891 mo
326.102 285.809 li
@
397.738 222.57 mo
387.66 212.488 li
387.66 222.57 mo
397.738 212.488 li
@
469.5 148.41 mo
459.422 138.328 li
459.422 148.41 mo
469.5 138.328 li
@
541.141 172.41 mo
531.059 162.328 li
531.059 172.41 mo
541.141 162.328 li
@
612.898 94.289 mo
602.82 84.211 li
602.82 94.289 mo
612.898 84.211 li
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
34.32 504.719 mo
105.961 473.398 li
177.719 410.762 li
249.359 348.719 li
321.121 285.719 li
392.879 211.922 li
464.52 135.961 li
536.281 160.922 li
608.039 81.961 li
@
grestore
29.102 499.531 mo
39.059 499.531 li
39.059 509.488 li
29.102 509.488 li
cp
@
100.859 468.211 mo
110.82 468.211 li
110.82 478.172 li
100.859 478.172 li
cp
@
172.5 405.57 mo
182.461 405.57 li
182.461 415.531 li
172.5 415.531 li
cp
@
244.262 343.531 mo
254.219 343.531 li
254.219 353.488 li
244.262 353.488 li
cp
@
316.02 280.531 mo
325.981 280.531 li
325.981 290.488 li
316.02 290.488 li
cp
@
387.66 206.852 mo
397.621 206.852 li
397.621 216.809 li
387.66 216.809 li
cp
@
459.422 130.891 mo
469.379 130.891 li
469.379 140.852 li
459.422 140.852 li
cp
@
531.059 155.73 mo
541.02 155.73 li
541.02 165.691 li
531.059 165.691 li
cp
@
602.82 76.77 mo
612.781 76.77 li
612.781 86.731 li
602.82 86.731 li
cp
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
34.32 504.719 mo
105.961 473.52 li
177.719 412.922 li
249.359 381.602 li
321.121 288.961 li
392.879 215.762 li
464.52 226.922 li
536.281 116.398 li
608.039 88.199 li
.467353 0 .87747 0 cmyk
@
grestore
39.18 509.609 mo
29.102 499.531 li
29.102 509.609 mo
39.18 499.531 li
.467353 0 .87747 0 cmyk
@
110.941 478.41 mo
100.859 468.328 li
100.859 478.41 mo
110.941 468.328 li
@
182.578 417.809 mo
172.5 407.73 li
172.5 417.809 mo
182.578 407.73 li
@
254.34 386.488 mo
244.262 376.41 li
244.262 386.488 mo
254.34 376.41 li
@
326.102 293.969 mo
316.02 283.891 li
316.02 293.969 mo
326.102 283.891 li
@
397.738 220.77 mo
387.66 210.691 li
387.66 220.77 mo
397.738 210.691 li
@
469.5 231.809 mo
459.422 221.73 li
459.422 231.809 mo
469.5 221.73 li
@
541.141 121.289 mo
531.059 111.211 li
531.059 121.289 mo
541.141 111.211 li
@
612.898 93.211 mo
602.82 83.129 li
602.82 93.211 mo
612.898 83.129 li
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
34.32 504.719 mo
105.961 473.762 li
177.719 411.602 li
249.359 379.801 li
321.121 286.68 li
392.879 211.801 li
464.52 136.078 li
536.281 187.801 li
608.039 82.559 li
@
grestore
29.102 499.531 mo
39.059 499.531 li
39.059 509.488 li
29.102 509.488 li
cp
@
100.859 468.691 mo
110.82 468.691 li
110.82 478.648 li
100.859 478.648 li
cp
@
172.5 406.41 mo
182.461 406.41 li
182.461 416.371 li
172.5 416.371 li
cp
@
244.262 374.73 mo
254.219 374.73 li
254.219 384.691 li
244.262 384.691 li
cp
@
316.02 281.609 mo
325.981 281.609 li
325.981 291.57 li
316.02 291.57 li
cp
@
387.66 206.609 mo
397.621 206.609 li
397.621 216.57 li
387.66 216.57 li
cp
@
459.422 131.012 mo
469.379 131.012 li
469.379 140.969 li
459.422 140.969 li
cp
@
531.059 182.73 mo
541.02 182.73 li
541.02 192.691 li
531.059 192.691 li
cp
@
602.82 77.488 mo
612.781 77.488 li
612.781 87.449 li
602.82 87.449 li
cp
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
34.32 504.719 mo
105.961 473.762 li
177.719 413.281 li
249.359 382.199 li
321.121 289.922 li
392.879 217.441 li
464.52 142.441 li
536.281 118.559 li
608.039 88.801 li
0 .993988 1 0 cmyk
@
grestore
39.18 509.609 mo
29.102 499.531 li
29.102 509.609 mo
39.18 499.531 li
0 .993988 1 0 cmyk
@
110.941 478.648 mo
100.859 468.57 li
100.859 478.648 mo
110.941 468.57 li
@
182.578 418.172 mo
172.5 408.09 li
172.5 418.172 mo
182.578 408.09 li
@
254.34 387.211 mo
244.262 377.129 li
244.262 387.211 mo
254.34 377.129 li
@
326.102 294.93 mo
316.02 284.852 li
316.02 294.93 mo
326.102 284.852 li
@
397.738 222.328 mo
387.66 212.25 li
387.66 222.328 mo
397.738 212.25 li
@
469.5 147.328 mo
459.422 137.25 li
459.422 147.328 mo
469.5 137.25 li
@
541.141 123.449 mo
531.059 113.371 li
531.059 123.449 mo
541.141 113.371 li
@
612.898 93.691 mo
602.82 83.609 li
602.82 93.691 mo
612.898 83.609 li
@
gsave
34.199 27 mo
608.64 27 li
608.64 505.32 li
34.199 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
34.32 504.719 mo
105.961 473.398 li
177.719 410.879 li
249.359 348.48 li
321.121 285.602 li
392.879 255.961 li
464.52 134.879 li
536.281 111.238 li
608.039 80.039 li
@
grestore
29.102 499.531 mo
39.059 499.531 li
39.059 509.488 li
29.102 509.488 li
cp
@
100.859 468.328 mo
110.82 468.328 li
110.82 478.289 li
100.859 478.289 li
cp
@
172.5 405.809 mo
182.461 405.809 li
182.461 415.77 li
172.5 415.77 li
cp
@
244.262 343.41 mo
254.219 343.41 li
254.219 353.371 li
244.262 353.371 li
cp
@
316.02 280.531 mo
325.981 280.531 li
325.981 290.488 li
316.02 290.488 li
cp
@
387.66 250.891 mo
397.621 250.891 li
397.621 260.852 li
387.66 260.852 li
cp
@
459.422 129.691 mo
469.379 129.691 li
469.379 139.648 li
459.422 139.648 li
cp
@
531.059 106.051 mo
541.02 106.051 li
541.02 116.012 li
531.059 116.012 li
cp
@
602.82 74.852 mo
612.781 74.852 li
612.781 84.809 li
602.82 84.809 li
cp
@
14.121 495.316 mo
21.215 495.316 li
21.215 512.406 li
14.121 512.406 li
cp
0 0 0 0 cmyk
ef
20.496 508.262 mo
20.492 508.352 20.484 508.422 20.473 508.48 cv
20.457 508.543 20.438 508.594 20.418 508.625 cv
20.395 508.664 20.371 508.687 20.34 508.703 cv
20.309 508.719 20.277 508.727 20.25 508.727 cv
15.613 508.727 li
15.578 508.727 15.551 508.719 15.523 508.703 cv
15.496 508.687 15.469 508.664 15.445 508.625 cv
15.418 508.594 15.398 508.543 15.387 508.48 cv
15.371 508.422 15.363 508.352 15.367 508.262 cv
15.363 508.184 15.371 508.109 15.387 508.047 cv
15.398 507.988 15.414 507.941 15.438 507.902 cv
15.453 507.867 15.48 507.836 15.512 507.812 cv
15.543 507.793 15.574 507.785 15.613 507.781 cv
17.465 507.781 li
17.465 501.035 li
15.75 502.055 li
15.66 502.105 15.59 502.133 15.543 502.141 cv
15.488 502.148 15.445 502.141 15.414 502.109 cv
15.379 502.082 15.359 502.031 15.348 501.961 cv
15.336 501.895 15.328 501.809 15.332 501.699 cv
15.328 501.625 15.332 501.559 15.344 501.5 cv
15.348 501.449 15.359 501.402 15.375 501.363 cv
15.387 501.328 15.406 501.297 15.43 501.27 cv
15.453 501.242 15.484 501.215 15.531 501.187 cv
17.574 499.875 li
17.59 499.863 17.609 499.852 17.641 499.844 cv
17.664 499.836 17.699 499.828 17.746 499.816 cv
17.785 499.809 17.836 499.801 17.891 499.797 cv
17.945 499.797 18.012 499.797 18.098 499.793 cv
18.203 499.797 18.297 499.801 18.371 499.809 cv
18.441 499.816 18.496 499.832 18.543 499.848 cv
18.582 499.867 18.609 499.887 18.625 499.91 cv
18.633 499.937 18.641 499.961 18.645 499.984 cv
18.645 507.781 li
20.25 507.781 li
20.285 507.785 20.32 507.793 20.352 507.812 cv
20.383 507.836 20.406 507.867 20.43 507.902 cv
20.445 507.941 20.461 507.988 20.477 508.047 cv
20.484 508.109 20.492 508.184 20.496 508.262 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
14.121 463.48 mo
21.215 463.48 li
21.215 480.57 li
14.121 480.57 li
cp
0 0 0 0 cmyk
ef
20.477 476.371 mo
20.473 476.457 20.469 476.531 20.457 476.594 cv
20.445 476.66 20.43 476.715 20.41 476.754 cv
20.387 476.801 20.359 476.832 20.328 476.848 cv
20.293 476.871 20.254 476.879 20.215 476.879 cv
15.313 476.879 li
15.25 476.879 15.191 476.871 15.145 476.855 cv
15.094 476.84 15.055 476.816 15.02 476.777 cv
14.984 476.746 14.957 476.691 14.945 476.621 cv
14.926 476.551 14.918 476.465 14.922 476.363 cv
14.918 476.273 14.922 476.195 14.93 476.125 cv
14.934 476.059 14.949 476 14.977 475.945 cv
15 475.895 15.031 475.84 15.066 475.785 cv
15.102 475.734 15.145 475.68 15.203 475.617 cv
16.977 473.793 li
17.387 473.375 17.715 473 17.965 472.664 cv
18.211 472.336 18.402 472.031 18.535 471.754 cv
18.668 471.48 18.754 471.23 18.801 471.004 cv
18.84 470.781 18.863 470.57 18.863 470.375 cv
18.863 470.18 18.828 469.996 18.762 469.816 cv
18.695 469.645 18.602 469.488 18.477 469.352 cv
18.352 469.223 18.195 469.117 18.008 469.035 cv
17.82 468.961 17.602 468.922 17.355 468.918 cv
17.066 468.922 16.809 468.961 16.582 469.035 cv
16.352 469.117 16.152 469.203 15.98 469.289 cv
15.809 469.383 15.664 469.465 15.547 469.543 cv
15.43 469.621 15.344 469.66 15.293 469.66 cv
15.258 469.66 15.227 469.652 15.203 469.633 cv
15.172 469.617 15.152 469.586 15.137 469.543 cv
15.121 469.504 15.105 469.449 15.098 469.379 cv
15.086 469.312 15.082 469.23 15.086 469.133 cv
15.082 469.066 15.086 469.008 15.094 468.957 cv
15.098 468.906 15.105 468.863 15.117 468.824 cv
15.125 468.789 15.141 468.754 15.16 468.723 cv
15.18 468.691 15.215 468.652 15.273 468.602 cv
15.324 468.555 15.418 468.488 15.555 468.406 cv
15.688 468.324 15.859 468.246 16.063 468.164 cv
16.266 468.086 16.488 468.016 16.734 467.961 cv
16.977 467.906 17.234 467.879 17.508 467.879 cv
17.934 467.879 18.309 467.941 18.633 468.062 cv
18.953 468.184 19.219 468.348 19.434 468.559 cv
19.645 468.77 19.805 469.016 19.91 469.289 cv
20.016 469.57 20.07 469.867 20.07 470.18 cv
20.07 470.469 20.043 470.75 19.992 471.027 cv
19.941 471.312 19.836 471.617 19.676 471.941 cv
19.512 472.27 19.277 472.633 18.973 473.031 cv
18.664 473.434 18.258 473.895 17.754 474.41 cv
16.348 475.879 li
20.207 475.879 li
20.238 475.883 20.273 475.895 20.313 475.91 cv
20.344 475.934 20.375 475.965 20.402 476.004 cv
20.426 476.047 20.445 476.098 20.457 476.156 cv
20.469 476.223 20.473 476.293 20.477 476.371 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
14.121 431.641 mo
21.215 431.641 li
21.215 448.731 li
14.121 448.731 li
cp
0 0 0 0 cmyk
ef
20.418 442.52 mo
20.414 442.93 20.344 443.297 20.203 443.621 cv
20.059 443.949 19.855 444.227 19.594 444.461 cv
19.324 444.695 18.996 444.875 18.609 445 cv
18.219 445.125 17.781 445.187 17.293 445.187 cv
16.996 445.187 16.715 445.16 16.457 445.113 cv
16.195 445.066 15.965 445.016 15.766 444.945 cv
15.563 444.883 15.398 444.812 15.266 444.742 cv
15.133 444.672 15.047 444.621 15.016 444.586 cv
14.977 444.555 14.953 444.523 14.938 444.488 cv
14.918 444.461 14.898 444.422 14.887 444.375 cv
14.871 444.332 14.863 444.277 14.855 444.207 cv
14.848 444.145 14.844 444.062 14.848 443.961 cv
14.844 443.797 14.859 443.68 14.895 443.617 cv
14.926 443.555 14.973 443.523 15.039 443.52 cv
15.078 443.523 15.164 443.559 15.289 443.629 cv
15.414 443.703 15.57 443.785 15.766 443.867 cv
15.957 443.957 16.188 444.035 16.449 444.105 cv
16.707 444.18 16.996 444.215 17.32 444.215 cv
17.629 444.215 17.902 444.176 18.137 444.098 cv
18.371 444.02 18.566 443.91 18.727 443.77 cv
18.887 443.629 19.008 443.461 19.086 443.266 cv
19.164 443.07 19.203 442.859 19.207 442.629 cv
19.203 442.379 19.152 442.152 19.055 441.949 cv
18.949 441.75 18.801 441.574 18.609 441.426 cv
18.41 441.281 18.168 441.172 17.887 441.09 cv
17.598 441.016 17.273 440.977 16.91 440.973 cv
16.039 440.973 li
16 440.977 15.961 440.969 15.926 440.949 cv
15.891 440.937 15.859 440.91 15.836 440.871 cv
15.805 440.836 15.785 440.789 15.77 440.727 cv
15.754 440.672 15.746 440.594 15.746 440.492 cv
15.746 440.41 15.75 440.336 15.766 440.277 cv
15.777 440.223 15.797 440.18 15.824 440.141 cv
15.848 440.109 15.879 440.082 15.91 440.062 cv
15.941 440.051 15.977 440.043 16.023 440.039 cv
16.797 440.039 li
17.094 440.043 17.367 440.004 17.609 439.922 cv
17.852 439.848 18.055 439.734 18.223 439.586 cv
18.387 439.441 18.516 439.27 18.605 439.062 cv
18.695 438.859 18.738 438.629 18.742 438.375 cv
18.738 438.195 18.711 438.02 18.652 437.852 cv
18.59 437.687 18.5 437.543 18.383 437.418 cv
18.266 437.293 18.113 437.195 17.926 437.125 cv
17.738 437.055 17.523 437.02 17.285 437.016 cv
17.016 437.02 16.773 437.059 16.555 437.137 cv
16.332 437.219 16.133 437.305 15.961 437.395 cv
15.785 437.488 15.641 437.574 15.527 437.652 cv
15.41 437.734 15.332 437.777 15.289 437.773 cv
15.254 437.777 15.223 437.77 15.199 437.758 cv
15.172 437.746 15.152 437.723 15.141 437.687 cv
15.121 437.656 15.109 437.609 15.105 437.543 cv
15.094 437.484 15.09 437.402 15.094 437.297 cv
15.09 437.23 15.094 437.172 15.102 437.117 cv
15.105 437.07 15.113 437.023 15.129 436.98 cv
15.141 436.945 15.156 436.91 15.176 436.875 cv
15.191 436.844 15.223 436.805 15.27 436.762 cv
15.313 436.719 15.402 436.656 15.535 436.57 cv
15.668 436.488 15.828 436.406 16.023 436.328 cv
16.215 436.25 16.441 436.184 16.695 436.125 cv
16.949 436.074 17.223 436.047 17.52 436.043 cv
17.93 436.047 18.289 436.102 18.602 436.203 cv
18.91 436.312 19.172 436.461 19.383 436.648 cv
19.59 436.844 19.746 437.07 19.848 437.336 cv
19.949 437.605 20 437.902 20.004 438.227 cv
20 438.508 19.965 438.77 19.895 439.008 cv
19.82 439.25 19.711 439.461 19.57 439.645 cv
19.426 439.832 19.254 439.992 19.051 440.117 cv
18.844 440.25 18.605 440.34 18.336 440.391 cv
18.336 440.402 li
18.641 440.437 18.918 440.516 19.176 440.633 cv
19.426 440.758 19.645 440.91 19.832 441.09 cv
20.012 441.277 20.156 441.488 20.262 441.73 cv
20.363 441.977 20.414 442.242 20.418 442.52 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
14.121 399.801 mo
21.215 399.801 li
21.215 416.891 li
14.121 416.891 li
cp
0 0 0 0 cmyk
ef
20.852 410.687 mo
20.848 410.84 20.824 410.961 20.781 411.047 cv
20.734 411.137 20.672 411.18 20.59 411.176 cv
19.59 411.176 li
19.59 413.039 li
19.59 413.078 19.578 413.109 19.563 413.133 cv
19.539 413.16 19.508 413.18 19.465 413.199 cv
19.414 413.215 19.352 413.227 19.281 413.238 cv
19.203 413.246 19.109 413.25 18.992 413.254 cv
18.875 413.25 18.777 413.246 18.707 413.238 cv
18.629 413.227 18.57 413.215 18.527 413.199 cv
18.48 413.18 18.449 413.16 18.434 413.133 cv
18.414 413.109 18.406 413.078 18.41 413.039 cv
18.41 411.176 li
14.781 411.176 li
14.723 411.18 14.68 411.172 14.645 411.156 cv
14.609 411.145 14.574 411.117 14.547 411.078 cv
14.516 411.043 14.496 410.992 14.484 410.922 cv
14.473 410.855 14.469 410.766 14.469 410.652 cv
14.469 410.57 14.469 410.492 14.477 410.422 cv
14.477 410.352 14.488 410.289 14.504 410.234 cv
14.516 410.18 14.531 410.125 14.559 410.07 cv
14.578 410.016 14.605 409.961 14.641 409.898 cv
17.801 404.512 li
17.82 404.477 17.855 404.445 17.902 404.418 cv
17.945 404.391 18 404.367 18.074 404.348 cv
18.141 404.332 18.227 404.32 18.332 404.309 cv
18.434 404.305 18.555 404.301 18.695 404.297 cv
18.844 404.301 18.98 404.305 19.098 404.316 cv
19.211 404.328 19.301 404.344 19.375 404.359 cv
19.441 404.379 19.496 404.402 19.535 404.434 cv
19.57 404.465 19.59 404.5 19.59 404.539 cv
19.59 410.203 li
20.59 410.203 li
20.664 410.207 20.727 410.246 20.777 410.324 cv
20.824 410.406 20.848 410.527 20.852 410.687 cv
cp
18.41 405.336 mo
18.398 405.336 li
15.547 410.203 li
18.41 410.203 li
cp
.629236 .549432 .540154 .282963 cmyk
f
14.121 367.969 mo
21.215 367.969 li
21.215 385.059 li
14.121 385.059 li
cp
0 0 0 0 cmyk
ef
20.434 378.508 mo
20.434 378.984 20.352 379.406 20.191 379.777 cv
20.031 380.148 19.805 380.461 19.516 380.715 cv
19.219 380.969 18.871 381.164 18.469 381.293 cv
18.063 381.426 17.613 381.488 17.121 381.488 cv
16.844 381.488 16.582 381.469 16.34 381.43 cv
16.09 381.391 15.871 381.344 15.684 381.289 cv
15.488 381.234 15.332 381.18 15.207 381.121 cv
15.082 381.07 15.004 381.027 14.973 380.992 cv
14.938 380.961 14.914 380.93 14.902 380.902 cv
14.887 380.875 14.871 380.844 14.863 380.801 cv
14.848 380.766 14.84 380.715 14.84 380.652 cv
14.832 380.594 14.832 380.523 14.832 380.441 cv
14.832 380.367 14.836 380.297 14.844 380.234 cv
14.852 380.172 14.863 380.121 14.883 380.082 cv
14.898 380.043 14.918 380.016 14.945 379.996 cv
14.969 379.98 15 379.973 15.031 379.969 cv
15.078 379.973 15.148 380 15.242 380.055 cv
15.336 380.113 15.465 380.176 15.629 380.242 cv
15.793 380.309 15.992 380.371 16.234 380.43 cv
16.469 380.488 16.754 380.516 17.09 380.516 cv
17.391 380.516 17.672 380.48 17.93 380.406 cv
18.184 380.336 18.406 380.223 18.594 380.066 cv
18.777 379.914 18.922 379.719 19.027 379.48 cv
19.133 379.246 19.184 378.957 19.188 378.617 cv
19.184 378.336 19.141 378.086 19.051 377.867 cv
18.961 377.648 18.824 377.469 18.641 377.324 cv
18.453 377.184 18.219 377.078 17.938 377.004 cv
17.652 376.934 17.313 376.895 16.926 376.895 cv
16.641 376.895 16.402 376.91 16.203 376.937 cv
16 376.969 15.813 376.984 15.641 376.98 cv
15.512 376.984 15.418 376.953 15.367 376.891 cv
15.309 376.832 15.281 376.719 15.285 376.547 cv
15.285 372.934 li
15.281 372.785 15.316 372.676 15.391 372.598 cv
15.457 372.527 15.559 372.488 15.695 372.488 cv
19.625 372.488 li
19.66 372.488 19.695 372.5 19.73 372.52 cv
19.762 372.543 19.789 372.574 19.816 372.613 cv
19.836 372.656 19.852 372.707 19.867 372.77 cv
19.875 372.836 19.883 372.914 19.887 372.996 cv
19.883 373.164 19.859 373.289 19.82 373.379 cv
19.773 373.473 19.715 373.52 19.637 373.516 cv
16.465 373.516 li
16.465 376.004 li
16.617 375.984 16.773 375.973 16.938 375.965 cv
17.094 375.961 17.281 375.957 17.496 375.957 cv
17.98 375.957 18.406 376.02 18.773 376.141 cv
19.137 376.262 19.441 376.434 19.691 376.652 cv
19.934 376.879 20.121 377.145 20.246 377.457 cv
20.371 377.773 20.434 378.125 20.434 378.508 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
14.121 336.129 mo
21.215 336.129 li
21.215 353.219 li
14.121 353.219 li
cp
0 0 0 0 cmyk
ef
20.703 346.641 mo
20.703 347.031 20.641 347.41 20.523 347.77 cv
20.398 348.137 20.215 348.453 19.973 348.727 cv
19.723 349.004 19.41 349.227 19.035 349.391 cv
18.652 349.559 18.207 349.641 17.691 349.641 cv
17.32 349.641 16.992 349.598 16.711 349.504 cv
16.426 349.418 16.18 349.285 15.969 349.113 cv
15.758 348.945 15.582 348.738 15.445 348.492 cv
15.305 348.246 15.191 347.965 15.109 347.648 cv
15.023 347.336 14.965 346.992 14.93 346.613 cv
14.891 346.242 14.871 345.84 14.875 345.406 cv
14.871 345.027 14.891 344.645 14.934 344.254 cv
14.973 343.871 15.047 343.496 15.152 343.129 cv
15.258 342.77 15.402 342.43 15.582 342.113 cv
15.762 341.797 15.988 341.52 16.262 341.285 cv
16.535 341.051 16.859 340.863 17.238 340.723 cv
17.617 340.586 18.059 340.52 18.563 340.516 cv
18.73 340.52 18.902 340.527 19.074 340.547 cv
19.246 340.57 19.406 340.602 19.555 340.633 cv
19.703 340.672 19.824 340.707 19.926 340.746 cv
20.023 340.785 20.09 340.82 20.125 340.844 cv
20.152 340.871 20.176 340.898 20.195 340.926 cv
20.211 340.957 20.227 340.988 20.234 341.023 cv
20.242 341.059 20.246 341.098 20.254 341.141 cv
20.254 341.184 20.258 341.238 20.262 341.301 cv
20.258 341.387 20.258 341.457 20.258 341.512 cv
20.254 341.574 20.242 341.621 20.23 341.656 cv
20.211 341.695 20.191 341.723 20.168 341.738 cv
20.141 341.758 20.109 341.766 20.07 341.766 cv
20.02 341.766 19.949 341.75 19.863 341.719 cv
19.773 341.687 19.668 341.652 19.547 341.609 cv
19.422 341.574 19.273 341.539 19.098 341.504 cv
18.922 341.477 18.719 341.461 18.488 341.457 cv
18.059 341.461 17.691 341.547 17.387 341.719 cv
17.082 341.891 16.832 342.125 16.637 342.418 cv
16.441 342.711 16.297 343.051 16.207 343.434 cv
16.109 343.824 16.055 344.227 16.047 344.645 cv
16.164 344.578 16.301 344.512 16.449 344.441 cv
16.598 344.375 16.758 344.312 16.934 344.254 cv
17.109 344.203 17.297 344.156 17.492 344.121 cv
17.688 344.09 17.898 344.074 18.125 344.07 cv
18.602 344.074 19.004 344.141 19.336 344.266 cv
19.664 344.398 19.93 344.578 20.137 344.809 cv
20.336 345.039 20.48 345.309 20.57 345.621 cv
20.656 345.934 20.703 346.273 20.703 346.641 cv
cp
19.508 346.75 mo
19.508 346.488 19.48 346.246 19.43 346.027 cv
19.375 345.812 19.285 345.629 19.164 345.473 cv
19.039 345.324 18.875 345.207 18.672 345.125 cv
18.461 345.043 18.207 345 17.91 345 cv
17.738 345 17.57 345.016 17.402 345.047 cv
17.23 345.078 17.066 345.121 16.91 345.168 cv
16.75 345.223 16.602 345.285 16.461 345.355 cv
16.316 345.43 16.184 345.504 16.066 345.582 cv
16.063 346.176 16.102 346.672 16.18 347.066 cv
16.254 347.465 16.363 347.781 16.508 348.02 cv
16.652 348.262 16.832 348.434 17.047 348.535 cv
17.262 348.641 17.512 348.691 17.801 348.687 cv
18.09 348.691 18.344 348.637 18.559 348.523 cv
18.773 348.418 18.949 348.27 19.094 348.082 cv
19.234 347.898 19.34 347.691 19.406 347.461 cv
19.473 347.23 19.508 346.996 19.508 346.75 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
14.121 304.289 mo
21.215 304.289 li
21.215 321.379 li
14.121 321.379 li
cp
0 0 0 0 cmyk
ef
20.605 309.297 mo
20.602 309.383 20.598 309.457 20.594 309.52 cv
20.586 309.59 20.578 309.652 20.566 309.711 cv
20.555 309.777 20.539 309.836 20.52 309.891 cv
20.496 309.949 20.473 310.012 20.449 310.07 cv
17.254 317.434 li
17.227 317.492 17.199 317.535 17.168 317.566 cv
17.133 317.602 17.09 317.629 17.035 317.648 cv
16.98 317.668 16.91 317.68 16.832 317.691 cv
16.746 317.695 16.648 317.699 16.531 317.703 cv
16.375 317.699 16.254 317.691 16.168 317.68 cv
16.082 317.664 16.02 317.648 15.98 317.617 cv
15.941 317.59 15.922 317.551 15.93 317.508 cv
15.93 317.465 15.945 317.414 15.977 317.352 cv
19.336 309.824 li
15.078 309.824 li
14.992 309.828 14.926 309.781 14.883 309.687 cv
14.84 309.598 14.82 309.469 14.82 309.305 cv
14.82 309.219 14.824 309.145 14.836 309.078 cv
14.848 309.016 14.863 308.961 14.887 308.918 cv
14.906 308.875 14.934 308.844 14.969 308.82 cv
15 308.801 15.039 308.789 15.078 308.789 cv
20.25 308.789 li
20.309 308.789 20.363 308.797 20.414 308.812 cv
20.461 308.828 20.496 308.855 20.523 308.895 cv
20.547 308.934 20.566 308.988 20.582 309.051 cv
20.594 309.117 20.602 309.199 20.605 309.297 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
14.121 272.449 mo
21.215 272.449 li
21.215 289.539 li
14.121 289.539 li
cp
0 0 0 0 cmyk
ef
20.691 283.559 mo
20.691 283.949 20.621 284.289 20.484 284.586 cv
20.348 284.887 20.148 285.141 19.891 285.348 cv
19.629 285.555 19.313 285.711 18.934 285.812 cv
18.551 285.918 18.113 285.969 17.629 285.969 cv
17.168 285.969 16.758 285.922 16.398 285.828 cv
16.035 285.734 15.73 285.594 15.48 285.402 cv
15.227 285.215 15.035 284.984 14.902 284.707 cv
14.77 284.434 14.703 284.117 14.703 283.766 cv
14.703 283.488 14.746 283.234 14.84 283 cv
14.926 282.77 15.059 282.555 15.234 282.352 cv
15.402 282.156 15.613 281.969 15.871 281.797 cv
16.121 281.625 16.406 281.465 16.723 281.309 cv
16.445 281.168 16.203 281.016 15.996 280.859 cv
15.781 280.703 15.602 280.531 15.457 280.344 cv
15.309 280.16 15.199 279.965 15.125 279.75 cv
15.047 279.543 15.008 279.312 15.012 279.062 cv
15.008 278.754 15.063 278.461 15.18 278.187 cv
15.289 277.914 15.461 277.68 15.688 277.477 cv
15.914 277.277 16.199 277.117 16.551 277 cv
16.898 276.887 17.309 276.828 17.781 276.824 cv
18.227 276.828 18.613 276.883 18.941 276.984 cv
19.266 277.094 19.539 277.238 19.754 277.426 cv
19.965 277.613 20.121 277.832 20.223 278.082 cv
20.324 278.332 20.375 278.602 20.375 278.891 cv
20.375 279.125 20.336 279.352 20.262 279.566 cv
20.184 279.781 20.074 279.984 19.93 280.176 cv
19.781 280.367 19.602 280.547 19.391 280.715 cv
19.176 280.883 18.93 281.039 18.66 281.184 cv
18.98 281.348 19.27 281.512 19.527 281.68 cv
19.777 281.852 19.992 282.035 20.168 282.227 cv
20.336 282.422 20.465 282.629 20.559 282.844 cv
20.645 283.062 20.691 283.301 20.691 283.559 cv
cp
19.207 279 mo
19.203 278.812 19.168 278.637 19.105 278.48 cv
19.035 278.324 18.941 278.191 18.816 278.082 cv
18.688 277.973 18.527 277.891 18.34 277.828 cv
18.148 277.773 17.934 277.742 17.691 277.742 cv
17.195 277.742 16.82 277.855 16.566 278.082 cv
16.313 278.309 16.184 278.617 16.188 279 cv
16.184 279.184 16.215 279.348 16.277 279.5 cv
16.336 279.652 16.434 279.797 16.566 279.934 cv
16.699 280.074 16.863 280.211 17.063 280.336 cv
17.262 280.469 17.5 280.605 17.773 280.746 cv
18.234 280.512 18.586 280.246 18.836 279.957 cv
19.078 279.668 19.203 279.352 19.207 279 cv
cp
19.496 283.684 mo
19.496 283.473 19.457 283.281 19.379 283.109 cv
19.301 282.937 19.18 282.777 19.023 282.629 cv
18.863 282.48 18.668 282.34 18.434 282.199 cv
18.195 282.062 17.922 281.914 17.617 281.762 cv
17.324 281.902 17.07 282.047 16.855 282.187 cv
16.637 282.332 16.461 282.477 16.32 282.625 cv
16.18 282.777 16.074 282.937 16.004 283.105 cv
15.934 283.273 15.898 283.457 15.898 283.656 cv
15.898 284.102 16.051 284.445 16.355 284.687 cv
16.66 284.934 17.113 285.055 17.719 285.051 cv
18.301 285.055 18.742 284.934 19.047 284.684 cv
19.344 284.441 19.496 284.105 19.496 283.684 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
14.121 240.621 mo
21.215 240.621 li
21.215 257.711 li
14.121 257.711 li
cp
0 0 0 0 cmyk
ef
20.543 249.203 mo
20.539 249.59 20.516 249.977 20.473 250.367 cv
20.426 250.762 20.348 251.141 20.242 251.504 cv
20.129 251.867 19.984 252.207 19.801 252.523 cv
19.613 252.844 19.379 253.125 19.102 253.359 cv
18.816 253.602 18.48 253.785 18.098 253.918 cv
17.707 254.051 17.262 254.117 16.754 254.117 cv
16.555 254.117 16.363 254.102 16.18 254.078 cv
15.992 254.051 15.824 254.023 15.68 253.988 cv
15.527 253.953 15.402 253.914 15.305 253.871 cv
15.203 253.832 15.129 253.793 15.086 253.75 cv
15.039 253.711 15.008 253.656 14.988 253.582 cv
14.965 253.512 14.953 253.414 14.957 253.297 cv
14.953 253.195 14.957 253.117 14.965 253.059 cv
14.969 253 14.98 252.953 14.996 252.922 cv
15.012 252.891 15.031 252.871 15.055 252.855 cv
15.078 252.848 15.109 252.84 15.148 252.836 cv
15.195 252.84 15.266 252.855 15.359 252.887 cv
15.449 252.922 15.563 252.961 15.707 253 cv
15.844 253.043 16.008 253.082 16.195 253.113 cv
16.379 253.152 16.59 253.168 16.828 253.164 cv
17.27 253.168 17.648 253.082 17.969 252.91 cv
18.281 252.738 18.543 252.512 18.746 252.223 cv
18.949 251.937 19.098 251.602 19.199 251.219 cv
19.297 250.84 19.352 250.441 19.363 250.02 cv
19.117 250.164 18.828 250.289 18.492 250.395 cv
18.152 250.508 17.766 250.562 17.328 250.559 cv
16.836 250.562 16.422 250.496 16.086 250.359 cv
15.75 250.227 15.477 250.043 15.273 249.809 cv
15.066 249.578 14.922 249.301 14.836 248.977 cv
14.746 248.66 14.703 248.309 14.703 247.93 cv
14.703 247.539 14.758 247.168 14.875 246.809 cv
14.984 246.457 15.164 246.145 15.41 245.875 cv
15.648 245.605 15.957 245.391 16.336 245.23 cv
16.707 245.07 17.156 244.988 17.68 244.988 cv
18.047 244.988 18.371 245.035 18.66 245.129 cv
18.941 245.223 19.191 245.359 19.406 245.535 cv
19.613 245.711 19.793 245.922 19.941 246.172 cv
20.086 246.422 20.203 246.703 20.293 247.016 cv
20.379 247.332 20.441 247.676 20.484 248.043 cv
20.52 248.414 20.539 248.801 20.543 249.203 cv
cp
19.344 249.074 mo
19.344 248.492 19.305 248 19.227 247.598 cv
19.148 247.199 19.031 246.875 18.883 246.625 cv
18.73 246.379 18.547 246.199 18.328 246.09 cv
18.105 245.98 17.852 245.926 17.57 245.926 cv
17.266 245.926 17.012 245.98 16.805 246.09 cv
16.594 246.199 16.422 246.344 16.289 246.52 cv
16.152 246.703 16.051 246.906 15.988 247.133 cv
15.922 247.363 15.891 247.602 15.895 247.84 cv
15.891 248.113 15.922 248.359 15.98 248.578 cv
16.035 248.805 16.125 248.992 16.258 249.148 cv
16.383 249.305 16.551 249.426 16.758 249.512 cv
16.961 249.598 17.215 249.641 17.52 249.637 cv
17.859 249.641 18.191 249.59 18.516 249.484 cv
18.832 249.383 19.109 249.246 19.344 249.074 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
7.031 208.781 mo
21.219 208.781 li
21.219 225.871 li
7.031 225.871 li
cp
0 0 0 0 cmyk
ef
13.414 221.676 mo
13.41 221.766 13.402 221.836 13.391 221.895 cv
13.375 221.957 13.355 222.008 13.336 222.039 cv
13.313 222.078 13.289 222.102 13.258 222.117 cv
13.227 222.133 13.195 222.141 13.168 222.141 cv
8.531 222.141 li
8.496 222.141 8.469 222.133 8.441 222.117 cv
8.414 222.102 8.387 222.078 8.363 222.039 cv
8.336 222.008 8.316 221.957 8.305 221.895 cv
8.289 221.836 8.281 221.766 8.285 221.676 cv
8.281 221.598 8.289 221.523 8.305 221.461 cv
8.316 221.402 8.332 221.355 8.355 221.316 cv
8.371 221.281 8.398 221.25 8.43 221.227 cv
8.461 221.207 8.492 221.199 8.531 221.195 cv
10.383 221.195 li
10.383 214.449 li
8.668 215.469 li
8.578 215.52 8.508 215.547 8.461 215.555 cv
8.406 215.562 8.363 215.555 8.332 215.523 cv
8.297 215.496 8.277 215.445 8.266 215.375 cv
8.254 215.309 8.246 215.223 8.25 215.113 cv
8.246 215.039 8.25 214.973 8.262 214.914 cv
8.266 214.863 8.277 214.816 8.293 214.777 cv
8.305 214.742 8.324 214.711 8.348 214.684 cv
8.371 214.656 8.402 214.629 8.449 214.602 cv
10.492 213.289 li
10.508 213.277 10.527 213.266 10.559 213.258 cv
10.582 213.25 10.617 213.242 10.664 213.23 cv
10.703 213.223 10.754 213.215 10.809 213.211 cv
10.863 213.211 10.93 213.211 11.016 213.207 cv
11.121 213.211 11.215 213.215 11.289 213.223 cv
11.359 213.23 11.414 213.246 11.461 213.262 cv
11.5 213.281 11.527 213.301 11.543 213.324 cv
11.551 213.352 11.559 213.375 11.563 213.398 cv
11.563 221.195 li
13.168 221.195 li
13.203 221.199 13.238 221.207 13.27 221.227 cv
13.301 221.25 13.324 221.281 13.348 221.316 cv
13.363 221.355 13.379 221.402 13.395 221.461 cv
13.402 221.523 13.41 221.598 13.414 221.676 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
20.77 217.684 mo
20.766 218.367 20.715 218.988 20.609 219.551 cv
20.5 220.113 20.32 220.598 20.074 221 cv
19.82 221.406 19.492 221.719 19.094 221.937 cv
18.688 222.16 18.195 222.27 17.609 222.27 cv
17.051 222.27 16.578 222.172 16.199 221.973 cv
15.816 221.777 15.512 221.484 15.277 221.098 cv
15.043 220.711 14.875 220.238 14.781 219.672 cv
14.68 219.109 14.633 218.461 14.633 217.727 cv
14.633 217.055 14.688 216.434 14.797 215.867 cv
14.906 215.305 15.082 214.82 15.332 214.414 cv
15.574 214.012 15.898 213.699 16.305 213.473 cv
16.703 213.254 17.199 213.141 17.789 213.141 cv
18.348 213.141 18.82 213.242 19.203 213.437 cv
19.586 213.641 19.891 213.934 20.125 214.316 cv
20.355 214.707 20.523 215.18 20.621 215.742 cv
20.719 216.305 20.766 216.953 20.77 217.684 cv
cp
19.563 217.766 mo
19.559 217.324 19.543 216.926 19.516 216.574 cv
19.48 216.223 19.434 215.914 19.375 215.645 cv
19.309 215.375 19.23 215.145 19.133 214.949 cv
19.035 214.758 18.918 214.598 18.781 214.469 cv
18.641 214.344 18.48 214.25 18.309 214.191 cv
18.129 214.137 17.934 214.109 17.719 214.105 cv
17.328 214.109 17.012 214.199 16.773 214.383 cv
16.527 214.566 16.336 214.82 16.199 215.137 cv
16.059 215.457 15.965 215.828 15.914 216.258 cv
15.863 216.687 15.84 217.152 15.84 217.645 cv
15.84 218.309 15.871 218.871 15.941 219.332 cv
16.008 219.801 16.117 220.18 16.27 220.469 cv
16.414 220.766 16.605 220.977 16.836 221.105 cv
17.066 221.242 17.348 221.309 17.68 221.305 cv
17.934 221.309 18.156 221.27 18.352 221.184 cv
18.543 221.105 18.711 220.984 18.852 220.828 cv
18.992 220.676 19.105 220.492 19.199 220.277 cv
19.285 220.062 19.359 219.824 19.418 219.562 cv
19.469 219.305 19.508 219.023 19.531 218.719 cv
19.551 218.414 19.559 218.098 19.563 217.766 cv
cp
f
7.031 176.941 mo
21.219 176.941 li
21.219 194.031 li
7.031 194.031 li
cp
0 0 0 0 cmyk
ef
13.414 189.836 mo
13.41 189.926 13.402 189.996 13.391 190.055 cv
13.375 190.117 13.355 190.168 13.336 190.199 cv
13.313 190.238 13.289 190.262 13.258 190.277 cv
13.227 190.293 13.195 190.301 13.168 190.301 cv
8.531 190.301 li
8.496 190.301 8.469 190.293 8.441 190.277 cv
8.414 190.262 8.387 190.238 8.363 190.199 cv
8.336 190.168 8.316 190.117 8.305 190.055 cv
8.289 189.996 8.281 189.926 8.285 189.836 cv
8.281 189.758 8.289 189.684 8.305 189.621 cv
8.316 189.562 8.332 189.516 8.355 189.477 cv
8.371 189.441 8.398 189.41 8.43 189.387 cv
8.461 189.367 8.492 189.359 8.531 189.355 cv
10.383 189.355 li
10.383 182.609 li
8.668 183.629 li
8.578 183.68 8.508 183.707 8.461 183.715 cv
8.406 183.723 8.363 183.715 8.332 183.684 cv
8.297 183.656 8.277 183.605 8.266 183.535 cv
8.254 183.469 8.246 183.383 8.25 183.273 cv
8.246 183.199 8.25 183.133 8.262 183.074 cv
8.266 183.023 8.277 182.977 8.293 182.937 cv
8.305 182.902 8.324 182.871 8.348 182.844 cv
8.371 182.816 8.402 182.789 8.449 182.762 cv
10.492 181.449 li
10.508 181.437 10.527 181.426 10.559 181.418 cv
10.582 181.41 10.617 181.402 10.664 181.391 cv
10.703 181.383 10.754 181.375 10.809 181.371 cv
10.863 181.371 10.93 181.371 11.016 181.367 cv
11.121 181.371 11.215 181.375 11.289 181.383 cv
11.359 181.391 11.414 181.406 11.461 181.422 cv
11.5 181.441 11.527 181.461 11.543 181.484 cv
11.551 181.512 11.559 181.535 11.563 181.559 cv
11.563 189.355 li
13.168 189.355 li
13.203 189.359 13.238 189.367 13.27 189.387 cv
13.301 189.41 13.324 189.441 13.348 189.477 cv
13.363 189.516 13.379 189.562 13.395 189.621 cv
13.402 189.684 13.41 189.758 13.414 189.836 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
20.496 189.836 mo
20.492 189.926 20.484 189.996 20.473 190.055 cv
20.457 190.117 20.438 190.168 20.418 190.199 cv
20.395 190.238 20.371 190.262 20.34 190.277 cv
20.309 190.293 20.277 190.301 20.25 190.301 cv
15.613 190.301 li
15.578 190.301 15.551 190.293 15.523 190.277 cv
15.496 190.262 15.469 190.238 15.445 190.199 cv
15.418 190.168 15.398 190.117 15.387 190.055 cv
15.371 189.996 15.363 189.926 15.367 189.836 cv
15.363 189.758 15.371 189.684 15.387 189.621 cv
15.398 189.562 15.414 189.516 15.438 189.477 cv
15.453 189.441 15.48 189.41 15.512 189.387 cv
15.543 189.367 15.574 189.359 15.613 189.355 cv
17.465 189.355 li
17.465 182.609 li
15.75 183.629 li
15.66 183.68 15.59 183.707 15.543 183.715 cv
15.488 183.723 15.445 183.715 15.414 183.684 cv
15.379 183.656 15.359 183.605 15.348 183.535 cv
15.336 183.469 15.328 183.383 15.332 183.273 cv
15.328 183.199 15.332 183.133 15.344 183.074 cv
15.348 183.023 15.359 182.977 15.375 182.937 cv
15.387 182.902 15.406 182.871 15.43 182.844 cv
15.453 182.816 15.484 182.789 15.531 182.762 cv
17.574 181.449 li
17.59 181.437 17.609 181.426 17.641 181.418 cv
17.664 181.41 17.699 181.402 17.746 181.391 cv
17.785 181.383 17.836 181.375 17.891 181.371 cv
17.945 181.371 18.012 181.371 18.098 181.367 cv
18.203 181.371 18.297 181.375 18.371 181.383 cv
18.441 181.391 18.496 181.406 18.543 181.422 cv
18.582 181.441 18.609 181.461 18.625 181.484 cv
18.633 181.512 18.641 181.535 18.645 181.559 cv
18.645 189.355 li
20.25 189.355 li
20.285 189.359 20.32 189.367 20.352 189.387 cv
20.383 189.41 20.406 189.441 20.43 189.477 cv
20.445 189.516 20.461 189.562 20.477 189.621 cv
20.484 189.684 20.492 189.758 20.496 189.836 cv
cp
f
7.031 145.102 mo
21.219 145.102 li
21.219 162.192 li
7.031 162.192 li
cp
0 0 0 0 cmyk
ef
13.414 157.984 mo
13.41 158.074 13.402 158.145 13.391 158.203 cv
13.375 158.266 13.355 158.316 13.336 158.348 cv
13.313 158.387 13.289 158.41 13.258 158.426 cv
13.227 158.441 13.195 158.449 13.168 158.449 cv
8.531 158.449 li
8.496 158.449 8.469 158.441 8.441 158.426 cv
8.414 158.41 8.387 158.387 8.363 158.348 cv
8.336 158.316 8.316 158.266 8.305 158.203 cv
8.289 158.145 8.281 158.074 8.285 157.984 cv
8.281 157.906 8.289 157.832 8.305 157.77 cv
8.316 157.711 8.332 157.664 8.355 157.625 cv
8.371 157.59 8.398 157.559 8.43 157.535 cv
8.461 157.516 8.492 157.508 8.531 157.504 cv
10.383 157.504 li
10.383 150.758 li
8.668 151.777 li
8.578 151.828 8.508 151.855 8.461 151.863 cv
8.406 151.871 8.363 151.863 8.332 151.832 cv
8.297 151.805 8.277 151.754 8.266 151.684 cv
8.254 151.617 8.246 151.531 8.25 151.422 cv
8.246 151.348 8.25 151.281 8.262 151.223 cv
8.266 151.172 8.277 151.125 8.293 151.086 cv
8.305 151.051 8.324 151.02 8.348 150.992 cv
8.371 150.965 8.402 150.937 8.449 150.91 cv
10.492 149.598 li
10.508 149.586 10.527 149.574 10.559 149.566 cv
10.582 149.559 10.617 149.551 10.664 149.539 cv
10.703 149.531 10.754 149.523 10.809 149.52 cv
10.863 149.52 10.93 149.52 11.016 149.516 cv
11.121 149.52 11.215 149.523 11.289 149.531 cv
11.359 149.539 11.414 149.555 11.461 149.57 cv
11.5 149.59 11.527 149.609 11.543 149.633 cv
11.551 149.66 11.559 149.684 11.563 149.707 cv
11.563 157.504 li
13.168 157.504 li
13.203 157.508 13.238 157.516 13.27 157.535 cv
13.301 157.559 13.324 157.59 13.348 157.625 cv
13.363 157.664 13.379 157.711 13.395 157.77 cv
13.402 157.832 13.41 157.906 13.414 157.984 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
20.477 157.941 mo
20.473 158.027 20.469 158.102 20.457 158.164 cv
20.445 158.23 20.43 158.285 20.41 158.324 cv
20.387 158.371 20.359 158.402 20.328 158.418 cv
20.293 158.441 20.254 158.449 20.215 158.449 cv
15.313 158.449 li
15.25 158.449 15.191 158.441 15.145 158.426 cv
15.094 158.41 15.055 158.387 15.02 158.348 cv
14.984 158.316 14.957 158.262 14.945 158.191 cv
14.926 158.121 14.918 158.035 14.922 157.934 cv
14.918 157.844 14.922 157.766 14.93 157.695 cv
14.934 157.629 14.949 157.57 14.977 157.516 cv
15 157.465 15.031 157.41 15.066 157.355 cv
15.102 157.305 15.145 157.25 15.203 157.187 cv
16.977 155.363 li
17.387 154.945 17.715 154.57 17.965 154.234 cv
18.211 153.906 18.402 153.602 18.535 153.324 cv
18.668 153.051 18.754 152.801 18.801 152.574 cv
18.84 152.352 18.863 152.141 18.863 151.945 cv
18.863 151.75 18.828 151.566 18.762 151.387 cv
18.695 151.215 18.602 151.059 18.477 150.922 cv
18.352 150.793 18.195 150.687 18.008 150.605 cv
17.82 150.531 17.602 150.492 17.355 150.488 cv
17.066 150.492 16.809 150.531 16.582 150.605 cv
16.352 150.687 16.152 150.773 15.98 150.859 cv
15.809 150.953 15.664 151.035 15.547 151.113 cv
15.43 151.191 15.344 151.23 15.293 151.23 cv
15.258 151.23 15.227 151.223 15.203 151.203 cv
15.172 151.187 15.152 151.156 15.137 151.113 cv
15.121 151.074 15.105 151.02 15.098 150.949 cv
15.086 150.883 15.082 150.801 15.086 150.703 cv
15.082 150.637 15.086 150.578 15.094 150.527 cv
15.098 150.477 15.105 150.434 15.117 150.395 cv
15.125 150.359 15.141 150.324 15.16 150.293 cv
15.18 150.262 15.215 150.223 15.273 150.172 cv
15.324 150.125 15.418 150.059 15.555 149.977 cv
15.688 149.895 15.859 149.816 16.063 149.734 cv
16.266 149.656 16.488 149.586 16.734 149.531 cv
16.977 149.477 17.234 149.449 17.508 149.449 cv
17.934 149.449 18.309 149.512 18.633 149.633 cv
18.953 149.754 19.219 149.918 19.434 150.129 cv
19.645 150.34 19.805 150.586 19.91 150.859 cv
20.016 151.141 20.07 151.437 20.07 151.75 cv
20.07 152.039 20.043 152.32 19.992 152.598 cv
19.941 152.883 19.836 153.187 19.676 153.512 cv
19.512 153.84 19.277 154.203 18.973 154.602 cv
18.664 155.004 18.258 155.465 17.754 155.98 cv
16.348 157.449 li
20.207 157.449 li
20.238 157.453 20.273 157.465 20.313 157.48 cv
20.344 157.504 20.375 157.535 20.402 157.574 cv
20.426 157.617 20.445 157.668 20.457 157.727 cv
20.469 157.793 20.473 157.863 20.477 157.941 cv
cp
f
7.031 113.27 mo
21.219 113.27 li
21.219 130.36 li
7.031 130.36 li
cp
0 0 0 0 cmyk
ef
13.426 126.152 mo
13.422 126.242 13.414 126.316 13.402 126.375 cv
13.387 126.437 13.367 126.488 13.348 126.52 cv
13.324 126.559 13.301 126.582 13.27 126.598 cv
13.238 126.613 13.207 126.621 13.176 126.621 cv
8.535 126.621 li
8.504 126.621 8.473 126.613 8.445 126.598 cv
8.418 126.582 8.391 126.559 8.367 126.52 cv
8.336 126.488 8.316 126.437 8.309 126.375 cv
8.293 126.316 8.289 126.242 8.289 126.152 cv
8.289 126.074 8.293 126.004 8.309 125.941 cv
8.316 125.883 8.336 125.836 8.359 125.793 cv
8.379 125.758 8.402 125.727 8.434 125.703 cv
8.461 125.684 8.496 125.672 8.535 125.672 cv
10.391 125.672 li
10.391 118.918 li
8.672 119.937 li
8.582 119.988 8.512 120.016 8.461 120.023 cv
8.406 120.031 8.367 120.023 8.336 119.992 cv
8.305 119.965 8.281 119.914 8.27 119.844 cv
8.258 119.777 8.254 119.691 8.254 119.582 cv
8.254 119.508 8.254 119.441 8.262 119.383 cv
8.266 119.332 8.277 119.285 8.293 119.246 cv
8.305 119.211 8.324 119.18 8.352 119.152 cv
8.375 119.125 8.41 119.098 8.453 119.066 cv
10.5 117.754 li
10.516 117.746 10.539 117.734 10.566 117.723 cv
10.594 117.715 10.629 117.707 10.672 117.695 cv
10.711 117.687 10.758 117.68 10.816 117.676 cv
10.867 117.676 10.938 117.676 11.02 117.672 cv
11.129 117.676 11.219 117.68 11.297 117.687 cv
11.367 117.699 11.426 117.711 11.465 117.727 cv
11.504 117.742 11.531 117.766 11.547 117.789 cv
11.563 117.816 11.57 117.84 11.57 117.867 cv
11.57 125.672 li
13.176 125.672 li
13.211 125.672 13.242 125.684 13.277 125.703 cv
13.309 125.727 13.336 125.758 13.359 125.793 cv
13.375 125.836 13.391 125.883 13.406 125.941 cv
13.414 126.004 13.422 126.074 13.426 126.152 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
20.418 124.082 mo
20.414 124.492 20.344 124.859 20.203 125.184 cv
20.059 125.512 19.855 125.789 19.594 126.023 cv
19.324 126.258 18.996 126.437 18.609 126.562 cv
18.219 126.687 17.781 126.75 17.293 126.75 cv
16.996 126.75 16.715 126.723 16.457 126.676 cv
16.195 126.629 15.965 126.578 15.766 126.508 cv
15.563 126.445 15.398 126.375 15.266 126.305 cv
15.133 126.234 15.047 126.184 15.016 126.148 cv
14.977 126.117 14.953 126.086 14.938 126.051 cv
14.918 126.023 14.898 125.984 14.887 125.937 cv
14.871 125.895 14.863 125.84 14.855 125.77 cv
14.848 125.707 14.844 125.625 14.848 125.523 cv
14.844 125.359 14.859 125.242 14.895 125.18 cv
14.926 125.117 14.973 125.086 15.039 125.082 cv
15.078 125.086 15.164 125.121 15.289 125.191 cv
15.414 125.266 15.57 125.348 15.766 125.43 cv
15.957 125.52 16.188 125.598 16.449 125.668 cv
16.707 125.742 16.996 125.777 17.32 125.777 cv
17.629 125.777 17.902 125.738 18.137 125.66 cv
18.371 125.582 18.566 125.473 18.727 125.332 cv
18.887 125.191 19.008 125.023 19.086 124.828 cv
19.164 124.633 19.203 124.422 19.207 124.191 cv
19.203 123.941 19.152 123.715 19.055 123.512 cv
18.949 123.312 18.801 123.137 18.609 122.988 cv
18.41 122.844 18.168 122.734 17.887 122.652 cv
17.598 122.578 17.273 122.539 16.91 122.535 cv
16.039 122.535 li
16 122.539 15.961 122.531 15.926 122.512 cv
15.891 122.5 15.859 122.473 15.836 122.434 cv
15.805 122.398 15.785 122.352 15.77 122.289 cv
15.754 122.234 15.746 122.156 15.746 122.055 cv
15.746 121.973 15.75 121.898 15.766 121.84 cv
15.777 121.785 15.797 121.742 15.824 121.703 cv
15.848 121.672 15.879 121.645 15.91 121.625 cv
15.941 121.613 15.977 121.605 16.023 121.602 cv
16.797 121.602 li
17.094 121.605 17.367 121.566 17.609 121.484 cv
17.852 121.41 18.055 121.297 18.223 121.148 cv
18.387 121.004 18.516 120.832 18.605 120.625 cv
18.695 120.422 18.738 120.191 18.742 119.937 cv
18.738 119.758 18.711 119.582 18.652 119.414 cv
18.59 119.25 18.5 119.105 18.383 118.98 cv
18.266 118.855 18.113 118.758 17.926 118.687 cv
17.738 118.617 17.523 118.582 17.285 118.578 cv
17.016 118.582 16.773 118.621 16.555 118.699 cv
16.332 118.781 16.133 118.867 15.961 118.957 cv
15.785 119.051 15.641 119.137 15.527 119.215 cv
15.41 119.297 15.332 119.34 15.289 119.336 cv
15.254 119.34 15.223 119.332 15.199 119.32 cv
15.172 119.309 15.152 119.285 15.141 119.25 cv
15.121 119.219 15.109 119.172 15.105 119.105 cv
15.094 119.047 15.09 118.965 15.094 118.859 cv
15.09 118.793 15.094 118.734 15.102 118.68 cv
15.105 118.633 15.113 118.586 15.129 118.543 cv
15.141 118.508 15.156 118.473 15.176 118.437 cv
15.191 118.406 15.223 118.367 15.27 118.324 cv
15.313 118.281 15.402 118.219 15.535 118.133 cv
15.668 118.051 15.828 117.969 16.023 117.891 cv
16.215 117.812 16.441 117.746 16.695 117.687 cv
16.949 117.637 17.223 117.609 17.52 117.605 cv
17.93 117.609 18.289 117.664 18.602 117.766 cv
18.91 117.875 19.172 118.023 19.383 118.211 cv
19.59 118.406 19.746 118.633 19.848 118.898 cv
19.949 119.168 20 119.465 20.004 119.789 cv
20 120.07 19.965 120.332 19.895 120.57 cv
19.82 120.812 19.711 121.023 19.57 121.207 cv
19.426 121.395 19.254 121.555 19.051 121.68 cv
18.844 121.812 18.605 121.902 18.336 121.953 cv
18.336 121.965 li
18.641 122 18.918 122.078 19.176 122.195 cv
19.426 122.32 19.645 122.473 19.832 122.652 cv
20.012 122.84 20.156 123.051 20.262 123.293 cv
20.363 123.539 20.414 123.805 20.418 124.082 cv
cp
f
7.031 81.43 mo
21.219 81.43 li
21.219 98.52 li
7.031 98.52 li
cp
0 0 0 0 cmyk
ef
13.414 94.316 mo
13.41 94.406 13.402 94.477 13.391 94.535 cv
13.375 94.598 13.355 94.648 13.336 94.68 cv
13.313 94.719 13.289 94.742 13.258 94.758 cv
13.227 94.773 13.195 94.781 13.168 94.781 cv
8.531 94.781 li
8.496 94.781 8.469 94.773 8.441 94.758 cv
8.414 94.742 8.387 94.719 8.363 94.68 cv
8.336 94.648 8.316 94.598 8.305 94.535 cv
8.289 94.477 8.281 94.406 8.285 94.316 cv
8.281 94.238 8.289 94.164 8.305 94.102 cv
8.316 94.043 8.332 93.996 8.355 93.957 cv
8.371 93.922 8.398 93.891 8.43 93.867 cv
8.461 93.848 8.492 93.84 8.531 93.836 cv
10.383 93.836 li
10.383 87.09 li
8.668 88.109 li
8.578 88.16 8.508 88.187 8.461 88.195 cv
8.406 88.203 8.363 88.195 8.332 88.164 cv
8.297 88.137 8.277 88.086 8.266 88.016 cv
8.254 87.949 8.246 87.863 8.25 87.754 cv
8.246 87.68 8.25 87.613 8.262 87.555 cv
8.266 87.504 8.277 87.457 8.293 87.418 cv
8.305 87.383 8.324 87.352 8.348 87.324 cv
8.371 87.297 8.402 87.27 8.449 87.242 cv
10.492 85.93 li
10.508 85.918 10.527 85.906 10.559 85.898 cv
10.582 85.891 10.617 85.883 10.664 85.871 cv
10.703 85.863 10.754 85.855 10.809 85.852 cv
10.863 85.852 10.93 85.852 11.016 85.848 cv
11.121 85.852 11.215 85.855 11.289 85.863 cv
11.359 85.871 11.414 85.887 11.461 85.902 cv
11.5 85.922 11.527 85.941 11.543 85.965 cv
11.551 85.992 11.559 86.016 11.563 86.039 cv
11.563 93.836 li
13.168 93.836 li
13.203 93.84 13.238 93.848 13.27 93.867 cv
13.301 93.891 13.324 93.922 13.348 93.957 cv
13.363 93.996 13.379 94.043 13.395 94.102 cv
13.402 94.164 13.41 94.238 13.414 94.316 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
20.852 92.258 mo
20.848 92.41 20.824 92.531 20.781 92.617 cv
20.734 92.707 20.672 92.75 20.59 92.746 cv
19.59 92.746 li
19.59 94.609 li
19.59 94.648 19.578 94.68 19.563 94.703 cv
19.539 94.73 19.508 94.75 19.465 94.77 cv
19.414 94.785 19.352 94.797 19.281 94.809 cv
19.203 94.816 19.109 94.82 18.992 94.824 cv
18.875 94.82 18.777 94.816 18.707 94.809 cv
18.629 94.797 18.57 94.785 18.527 94.77 cv
18.48 94.75 18.449 94.73 18.434 94.703 cv
18.414 94.68 18.406 94.648 18.41 94.609 cv
18.41 92.746 li
14.781 92.746 li
14.723 92.75 14.68 92.742 14.645 92.727 cv
14.609 92.715 14.574 92.687 14.547 92.648 cv
14.516 92.613 14.496 92.562 14.484 92.492 cv
14.473 92.426 14.469 92.336 14.469 92.223 cv
14.469 92.141 14.469 92.062 14.477 91.992 cv
14.477 91.922 14.488 91.859 14.504 91.805 cv
14.516 91.75 14.531 91.695 14.559 91.641 cv
14.578 91.586 14.605 91.531 14.641 91.469 cv
17.801 86.082 li
17.82 86.047 17.855 86.016 17.902 85.988 cv
17.945 85.961 18 85.937 18.074 85.918 cv
18.141 85.902 18.227 85.891 18.332 85.879 cv
18.434 85.875 18.555 85.871 18.695 85.867 cv
18.844 85.871 18.98 85.875 19.098 85.887 cv
19.211 85.898 19.301 85.914 19.375 85.93 cv
19.441 85.949 19.496 85.973 19.535 86.004 cv
19.57 86.035 19.59 86.07 19.59 86.109 cv
19.59 91.773 li
20.59 91.773 li
20.664 91.777 20.727 91.816 20.777 91.895 cv
20.824 91.977 20.848 92.098 20.852 92.258 cv
cp
18.41 86.906 mo
18.398 86.906 li
15.547 91.773 li
18.41 91.773 li
cp
f
7.031 49.59 mo
21.219 49.59 li
21.219 66.68 li
7.031 66.68 li
cp
0 0 0 0 cmyk
ef
13.414 62.465 mo
13.41 62.555 13.402 62.625 13.391 62.684 cv
13.375 62.746 13.355 62.797 13.336 62.828 cv
13.313 62.867 13.289 62.891 13.258 62.906 cv
13.227 62.922 13.195 62.93 13.168 62.93 cv
8.531 62.93 li
8.496 62.93 8.469 62.922 8.441 62.906 cv
8.414 62.891 8.387 62.867 8.363 62.828 cv
8.336 62.797 8.316 62.746 8.305 62.684 cv
8.289 62.625 8.281 62.555 8.285 62.465 cv
8.281 62.387 8.289 62.312 8.305 62.25 cv
8.316 62.191 8.332 62.145 8.355 62.105 cv
8.371 62.07 8.398 62.039 8.43 62.016 cv
8.461 61.996 8.492 61.988 8.531 61.984 cv
10.383 61.984 li
10.383 55.238 li
8.668 56.258 li
8.578 56.309 8.508 56.336 8.461 56.344 cv
8.406 56.352 8.363 56.344 8.332 56.312 cv
8.297 56.285 8.277 56.234 8.266 56.164 cv
8.254 56.098 8.246 56.012 8.25 55.902 cv
8.246 55.828 8.25 55.762 8.262 55.703 cv
8.266 55.652 8.277 55.605 8.293 55.566 cv
8.305 55.531 8.324 55.5 8.348 55.473 cv
8.371 55.445 8.402 55.418 8.449 55.391 cv
10.492 54.078 li
10.508 54.066 10.527 54.055 10.559 54.047 cv
10.582 54.039 10.617 54.031 10.664 54.02 cv
10.703 54.012 10.754 54.004 10.809 54 cv
10.863 54 10.93 54 11.016 53.996 cv
11.121 54 11.215 54.004 11.289 54.012 cv
11.359 54.02 11.414 54.035 11.461 54.051 cv
11.5 54.07 11.527 54.09 11.543 54.113 cv
11.551 54.141 11.559 54.164 11.563 54.187 cv
11.563 61.984 li
13.168 61.984 li
13.203 61.988 13.238 61.996 13.27 62.016 cv
13.301 62.039 13.324 62.07 13.348 62.105 cv
13.363 62.145 13.379 62.191 13.395 62.25 cv
13.402 62.312 13.41 62.387 13.414 62.465 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
20.434 60.078 mo
20.434 60.555 20.352 60.977 20.191 61.348 cv
20.031 61.719 19.805 62.031 19.516 62.285 cv
19.219 62.539 18.871 62.734 18.469 62.863 cv
18.063 62.996 17.613 63.059 17.121 63.059 cv
16.844 63.059 16.582 63.039 16.34 63 cv
16.09 62.961 15.871 62.914 15.684 62.859 cv
15.488 62.805 15.332 62.75 15.207 62.691 cv
15.082 62.641 15.004 62.598 14.973 62.562 cv
14.938 62.531 14.914 62.5 14.902 62.473 cv
14.887 62.445 14.871 62.414 14.863 62.371 cv
14.848 62.336 14.84 62.285 14.84 62.223 cv
14.832 62.164 14.832 62.094 14.832 62.012 cv
14.832 61.937 14.836 61.867 14.844 61.805 cv
14.852 61.742 14.863 61.691 14.883 61.652 cv
14.898 61.613 14.918 61.586 14.945 61.566 cv
14.969 61.551 15 61.543 15.031 61.539 cv
15.078 61.543 15.148 61.57 15.242 61.625 cv
15.336 61.684 15.465 61.746 15.629 61.812 cv
15.793 61.879 15.992 61.941 16.234 62 cv
16.469 62.059 16.754 62.086 17.09 62.086 cv
17.391 62.086 17.672 62.051 17.93 61.977 cv
18.184 61.906 18.406 61.793 18.594 61.637 cv
18.777 61.484 18.922 61.289 19.027 61.051 cv
19.133 60.816 19.184 60.527 19.188 60.187 cv
19.184 59.906 19.141 59.656 19.051 59.437 cv
18.961 59.219 18.824 59.039 18.641 58.895 cv
18.453 58.754 18.219 58.648 17.938 58.574 cv
17.652 58.504 17.313 58.465 16.926 58.465 cv
16.641 58.465 16.402 58.48 16.203 58.508 cv
16 58.539 15.813 58.555 15.641 58.551 cv
15.512 58.555 15.418 58.523 15.367 58.461 cv
15.309 58.402 15.281 58.289 15.285 58.117 cv
15.285 54.504 li
15.281 54.355 15.316 54.246 15.391 54.168 cv
15.457 54.098 15.559 54.059 15.695 54.059 cv
19.625 54.059 li
19.66 54.059 19.695 54.07 19.73 54.09 cv
19.762 54.113 19.789 54.145 19.816 54.184 cv
19.836 54.227 19.852 54.277 19.867 54.34 cv
19.875 54.406 19.883 54.484 19.887 54.566 cv
19.883 54.734 19.859 54.859 19.82 54.949 cv
19.773 55.043 19.715 55.09 19.637 55.086 cv
16.465 55.086 li
16.465 57.574 li
16.617 57.555 16.773 57.543 16.938 57.535 cv
17.094 57.531 17.281 57.527 17.496 57.527 cv
17.98 57.527 18.406 57.59 18.773 57.711 cv
19.137 57.832 19.441 58.004 19.691 58.223 cv
19.934 58.449 20.121 58.715 20.246 59.027 cv
20.371 59.344 20.434 59.695 20.434 60.078 cv
cp
f
7.031 17.75 mo
21.219 17.75 li
21.219 34.84 li
7.031 34.84 li
cp
0 0 0 0 cmyk
ef
13.414 30.613 mo
13.41 30.703 13.402 30.773 13.391 30.832 cv
13.375 30.895 13.355 30.945 13.336 30.977 cv
13.313 31.016 13.289 31.039 13.258 31.055 cv
13.227 31.07 13.195 31.078 13.168 31.078 cv
8.531 31.078 li
8.496 31.078 8.469 31.07 8.441 31.055 cv
8.414 31.039 8.387 31.016 8.363 30.977 cv
8.336 30.945 8.316 30.895 8.305 30.832 cv
8.289 30.773 8.281 30.703 8.285 30.613 cv
8.281 30.535 8.289 30.461 8.305 30.398 cv
8.316 30.34 8.332 30.293 8.355 30.254 cv
8.371 30.219 8.398 30.187 8.43 30.164 cv
8.461 30.145 8.492 30.137 8.531 30.133 cv
10.383 30.133 li
10.383 23.387 li
8.668 24.406 li
8.578 24.457 8.508 24.484 8.461 24.492 cv
8.406 24.5 8.363 24.492 8.332 24.461 cv
8.297 24.434 8.277 24.383 8.266 24.312 cv
8.254 24.246 8.246 24.16 8.25 24.051 cv
8.246 23.977 8.25 23.91 8.262 23.852 cv
8.266 23.801 8.277 23.754 8.293 23.715 cv
8.305 23.68 8.324 23.648 8.348 23.621 cv
8.371 23.594 8.402 23.566 8.449 23.539 cv
10.492 22.227 li
10.508 22.215 10.527 22.203 10.559 22.195 cv
10.582 22.187 10.617 22.18 10.664 22.168 cv
10.703 22.16 10.754 22.152 10.809 22.148 cv
10.863 22.148 10.93 22.148 11.016 22.145 cv
11.121 22.148 11.215 22.152 11.289 22.16 cv
11.359 22.168 11.414 22.184 11.461 22.199 cv
11.5 22.219 11.527 22.238 11.543 22.262 cv
11.551 22.289 11.559 22.312 11.563 22.336 cv
11.563 30.133 li
13.168 30.133 li
13.203 30.137 13.238 30.145 13.27 30.164 cv
13.301 30.187 13.324 30.219 13.348 30.254 cv
13.363 30.293 13.379 30.34 13.395 30.398 cv
13.402 30.461 13.41 30.535 13.414 30.613 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
20.703 28.207 mo
20.703 28.598 20.641 28.977 20.523 29.336 cv
20.398 29.703 20.215 30.02 19.973 30.293 cv
19.723 30.57 19.41 30.793 19.035 30.957 cv
18.652 31.125 18.207 31.207 17.691 31.207 cv
17.32 31.207 16.992 31.164 16.711 31.07 cv
16.426 30.984 16.18 30.852 15.969 30.68 cv
15.758 30.512 15.582 30.305 15.445 30.059 cv
15.305 29.812 15.191 29.531 15.109 29.215 cv
15.023 28.902 14.965 28.559 14.93 28.18 cv
14.891 27.809 14.871 27.406 14.875 26.973 cv
14.871 26.594 14.891 26.211 14.934 25.82 cv
14.973 25.437 15.047 25.062 15.152 24.695 cv
15.258 24.336 15.402 23.996 15.582 23.68 cv
15.762 23.363 15.988 23.086 16.262 22.852 cv
16.535 22.617 16.859 22.43 17.238 22.289 cv
17.617 22.152 18.059 22.086 18.563 22.082 cv
18.73 22.086 18.902 22.094 19.074 22.113 cv
19.246 22.137 19.406 22.168 19.555 22.199 cv
19.703 22.238 19.824 22.273 19.926 22.312 cv
20.023 22.352 20.09 22.387 20.125 22.41 cv
20.152 22.437 20.176 22.465 20.195 22.492 cv
20.211 22.523 20.227 22.555 20.234 22.59 cv
20.242 22.625 20.246 22.664 20.254 22.707 cv
20.254 22.75 20.258 22.805 20.262 22.867 cv
20.258 22.953 20.258 23.023 20.258 23.078 cv
20.254 23.141 20.242 23.187 20.23 23.223 cv
20.211 23.262 20.191 23.289 20.168 23.305 cv
20.141 23.324 20.109 23.332 20.07 23.332 cv
20.02 23.332 19.949 23.316 19.863 23.285 cv
19.773 23.254 19.668 23.219 19.547 23.176 cv
19.422 23.141 19.273 23.105 19.098 23.07 cv
18.922 23.043 18.719 23.027 18.488 23.023 cv
18.059 23.027 17.691 23.113 17.387 23.285 cv
17.082 23.457 16.832 23.691 16.637 23.984 cv
16.441 24.277 16.297 24.617 16.207 25 cv
16.109 25.391 16.055 25.793 16.047 26.211 cv
16.164 26.145 16.301 26.078 16.449 26.008 cv
16.598 25.941 16.758 25.879 16.934 25.82 cv
17.109 25.77 17.297 25.723 17.492 25.687 cv
17.688 25.656 17.898 25.641 18.125 25.637 cv
18.602 25.641 19.004 25.707 19.336 25.832 cv
19.664 25.965 19.93 26.145 20.137 26.375 cv
20.336 26.605 20.48 26.875 20.57 27.187 cv
20.656 27.5 20.703 27.84 20.703 28.207 cv
cp
19.508 28.316 mo
19.508 28.055 19.48 27.812 19.43 27.594 cv
19.375 27.379 19.285 27.195 19.164 27.039 cv
19.039 26.891 18.875 26.773 18.672 26.691 cv
18.461 26.609 18.207 26.566 17.91 26.566 cv
17.738 26.566 17.57 26.582 17.402 26.613 cv
17.23 26.645 17.066 26.687 16.91 26.734 cv
16.75 26.789 16.602 26.852 16.461 26.922 cv
16.316 26.996 16.184 27.07 16.066 27.148 cv
16.063 27.742 16.102 28.238 16.18 28.633 cv
16.254 29.031 16.363 29.348 16.508 29.586 cv
16.652 29.828 16.832 30 17.047 30.102 cv
17.262 30.207 17.512 30.258 17.801 30.254 cv
18.09 30.258 18.344 30.203 18.559 30.09 cv
18.773 29.984 18.949 29.836 19.094 29.648 cv
19.234 29.465 19.34 29.258 19.406 29.027 cv
19.473 28.797 19.508 28.562 19.508 28.316 cv
cp
f
37.027 526.48 mo
37.023 526.57 37.016 526.641 37.004 526.699 cv
36.988 526.762 36.969 526.812 36.949 526.844 cv
36.926 526.883 36.902 526.906 36.871 526.922 cv
36.84 526.937 36.809 526.945 36.781 526.945 cv
32.145 526.945 li
32.109 526.945 32.082 526.937 32.055 526.922 cv
32.027 526.906 32 526.883 31.977 526.844 cv
31.949 526.812 31.93 526.762 31.918 526.699 cv
31.902 526.641 31.895 526.57 31.898 526.48 cv
31.895 526.402 31.902 526.328 31.918 526.266 cv
31.93 526.207 31.945 526.16 31.969 526.121 cv
31.984 526.086 32.012 526.055 32.043 526.031 cv
32.074 526.012 32.105 526.004 32.145 526 cv
33.996 526 li
33.996 519.254 li
32.281 520.273 li
32.191 520.324 32.121 520.352 32.074 520.359 cv
32.02 520.367 31.977 520.359 31.945 520.328 cv
31.91 520.301 31.891 520.25 31.879 520.18 cv
31.867 520.113 31.859 520.027 31.863 519.918 cv
31.859 519.844 31.863 519.777 31.875 519.719 cv
31.879 519.668 31.891 519.621 31.906 519.582 cv
31.918 519.547 31.938 519.516 31.961 519.488 cv
31.984 519.461 32.016 519.434 32.063 519.406 cv
34.105 518.094 li
34.121 518.082 34.141 518.07 34.172 518.062 cv
34.195 518.055 34.23 518.047 34.277 518.035 cv
34.316 518.027 34.367 518.02 34.422 518.016 cv
34.477 518.016 34.543 518.016 34.629 518.012 cv
34.734 518.016 34.828 518.02 34.902 518.027 cv
34.973 518.035 35.027 518.051 35.074 518.066 cv
35.113 518.086 35.141 518.105 35.156 518.129 cv
35.164 518.156 35.172 518.18 35.176 518.203 cv
35.176 526 li
36.781 526 li
36.816 526.004 36.852 526.012 36.883 526.031 cv
36.914 526.055 36.938 526.086 36.961 526.121 cv
36.977 526.16 36.992 526.207 37.008 526.266 cv
37.016 526.328 37.023 526.402 37.027 526.48 cv
cp
f
108.746 526.437 mo
108.742 526.523 108.738 526.598 108.727 526.66 cv
108.715 526.727 108.699 526.781 108.68 526.82 cv
108.656 526.867 108.629 526.898 108.598 526.914 cv
108.563 526.937 108.523 526.945 108.484 526.945 cv
103.582 526.945 li
103.52 526.945 103.461 526.937 103.414 526.922 cv
103.363 526.906 103.324 526.883 103.289 526.844 cv
103.254 526.812 103.227 526.758 103.215 526.687 cv
103.195 526.617 103.188 526.531 103.191 526.43 cv
103.188 526.34 103.191 526.262 103.199 526.191 cv
103.203 526.125 103.219 526.066 103.246 526.012 cv
103.27 525.961 103.301 525.906 103.336 525.852 cv
103.371 525.801 103.414 525.746 103.473 525.684 cv
105.246 523.859 li
105.656 523.441 105.984 523.066 106.234 522.73 cv
106.48 522.402 106.672 522.098 106.805 521.82 cv
106.938 521.547 107.023 521.297 107.07 521.07 cv
107.109 520.848 107.133 520.637 107.133 520.441 cv
107.133 520.246 107.098 520.062 107.031 519.883 cv
106.965 519.711 106.871 519.555 106.746 519.418 cv
106.621 519.289 106.465 519.184 106.277 519.102 cv
106.09 519.027 105.871 518.988 105.625 518.984 cv
105.336 518.988 105.078 519.027 104.852 519.102 cv
104.621 519.184 104.422 519.27 104.25 519.355 cv
104.078 519.449 103.934 519.531 103.816 519.609 cv
103.699 519.687 103.613 519.727 103.563 519.727 cv
103.527 519.727 103.496 519.719 103.473 519.699 cv
103.441 519.684 103.422 519.652 103.406 519.609 cv
103.391 519.57 103.375 519.516 103.367 519.445 cv
103.355 519.379 103.352 519.297 103.355 519.199 cv
103.352 519.133 103.355 519.074 103.363 519.023 cv
103.367 518.973 103.375 518.93 103.387 518.891 cv
103.395 518.855 103.41 518.82 103.43 518.789 cv
103.449 518.758 103.484 518.719 103.543 518.668 cv
103.594 518.621 103.688 518.555 103.824 518.473 cv
103.957 518.391 104.129 518.312 104.332 518.23 cv
104.535 518.152 104.758 518.082 105.004 518.027 cv
105.246 517.973 105.504 517.945 105.777 517.945 cv
106.203 517.945 106.578 518.008 106.902 518.129 cv
107.223 518.25 107.488 518.414 107.703 518.625 cv
107.914 518.836 108.074 519.082 108.18 519.355 cv
108.285 519.637 108.34 519.934 108.34 520.246 cv
108.34 520.535 108.313 520.816 108.262 521.094 cv
108.211 521.379 108.105 521.684 107.945 522.008 cv
107.781 522.336 107.547 522.699 107.242 523.098 cv
106.934 523.5 106.527 523.961 106.023 524.477 cv
104.617 525.945 li
108.477 525.945 li
108.508 525.949 108.543 525.961 108.582 525.977 cv
108.613 526 108.645 526.031 108.672 526.07 cv
108.695 526.113 108.715 526.164 108.727 526.223 cv
108.738 526.289 108.742 526.359 108.746 526.437 cv
cp
f
180.832 524.422 mo
180.828 524.574 180.805 524.695 180.762 524.781 cv
180.715 524.871 180.652 524.914 180.57 524.91 cv
179.57 524.91 li
179.57 526.773 li
179.57 526.812 179.559 526.844 179.543 526.867 cv
179.52 526.895 179.488 526.914 179.445 526.934 cv
179.395 526.949 179.332 526.961 179.262 526.973 cv
179.184 526.98 179.09 526.984 178.973 526.988 cv
178.855 526.984 178.758 526.98 178.688 526.973 cv
178.609 526.961 178.551 526.949 178.508 526.934 cv
178.461 526.914 178.43 526.895 178.414 526.867 cv
178.395 526.844 178.387 526.812 178.391 526.773 cv
178.391 524.91 li
174.762 524.91 li
174.703 524.914 174.66 524.906 174.625 524.891 cv
174.59 524.879 174.555 524.852 174.527 524.812 cv
174.496 524.777 174.477 524.727 174.465 524.656 cv
174.453 524.59 174.449 524.5 174.449 524.387 cv
174.449 524.305 174.449 524.227 174.457 524.156 cv
174.457 524.086 174.469 524.023 174.484 523.969 cv
174.496 523.914 174.512 523.859 174.539 523.805 cv
174.559 523.75 174.586 523.695 174.621 523.633 cv
177.781 518.246 li
177.801 518.211 177.836 518.18 177.883 518.152 cv
177.926 518.125 177.98 518.102 178.055 518.082 cv
178.121 518.066 178.207 518.055 178.313 518.043 cv
178.414 518.039 178.535 518.035 178.676 518.031 cv
178.824 518.035 178.961 518.039 179.078 518.051 cv
179.191 518.062 179.281 518.078 179.355 518.094 cv
179.422 518.113 179.477 518.137 179.516 518.168 cv
179.551 518.199 179.57 518.234 179.57 518.273 cv
179.57 523.937 li
180.57 523.937 li
180.645 523.941 180.707 523.98 180.758 524.059 cv
180.805 524.141 180.828 524.262 180.832 524.422 cv
cp
178.391 519.07 mo
178.379 519.07 li
175.527 523.937 li
178.391 523.937 li
cp
f
252.422 524.074 mo
252.422 524.465 252.359 524.844 252.242 525.203 cv
252.117 525.57 251.934 525.887 251.691 526.16 cv
251.441 526.437 251.129 526.66 250.754 526.824 cv
250.371 526.992 249.926 527.074 249.41 527.074 cv
249.039 527.074 248.711 527.031 248.43 526.937 cv
248.145 526.852 247.898 526.719 247.688 526.547 cv
247.477 526.379 247.301 526.172 247.164 525.926 cv
247.023 525.68 246.91 525.398 246.828 525.082 cv
246.742 524.77 246.684 524.426 246.648 524.047 cv
246.609 523.676 246.59 523.273 246.594 522.84 cv
246.59 522.461 246.609 522.078 246.652 521.687 cv
246.691 521.305 246.766 520.93 246.871 520.562 cv
246.977 520.203 247.121 519.863 247.301 519.547 cv
247.48 519.23 247.707 518.953 247.98 518.719 cv
248.254 518.484 248.578 518.297 248.957 518.156 cv
249.336 518.02 249.777 517.953 250.281 517.949 cv
250.449 517.953 250.621 517.961 250.793 517.98 cv
250.965 518.004 251.125 518.035 251.273 518.066 cv
251.422 518.105 251.543 518.141 251.645 518.18 cv
251.742 518.219 251.809 518.254 251.844 518.277 cv
251.871 518.305 251.895 518.332 251.914 518.359 cv
251.93 518.391 251.945 518.422 251.953 518.457 cv
251.961 518.492 251.965 518.531 251.973 518.574 cv
251.973 518.617 251.977 518.672 251.98 518.734 cv
251.977 518.82 251.977 518.891 251.977 518.945 cv
251.973 519.008 251.961 519.055 251.949 519.09 cv
251.93 519.129 251.91 519.156 251.887 519.172 cv
251.859 519.191 251.828 519.199 251.789 519.199 cv
251.738 519.199 251.668 519.184 251.582 519.152 cv
251.492 519.121 251.387 519.086 251.266 519.043 cv
251.141 519.008 250.992 518.973 250.816 518.937 cv
250.641 518.91 250.438 518.895 250.207 518.891 cv
249.777 518.895 249.41 518.98 249.105 519.152 cv
248.801 519.324 248.551 519.559 248.355 519.852 cv
248.16 520.145 248.016 520.484 247.926 520.867 cv
247.828 521.258 247.773 521.66 247.766 522.078 cv
247.883 522.012 248.02 521.945 248.168 521.875 cv
248.316 521.809 248.477 521.746 248.652 521.687 cv
248.828 521.637 249.016 521.59 249.211 521.555 cv
249.406 521.523 249.617 521.508 249.844 521.504 cv
250.32 521.508 250.723 521.574 251.055 521.699 cv
251.383 521.832 251.648 522.012 251.855 522.242 cv
252.055 522.473 252.199 522.742 252.289 523.055 cv
252.375 523.367 252.422 523.707 252.422 524.074 cv
cp
251.227 524.184 mo
251.227 523.922 251.199 523.68 251.148 523.461 cv
251.094 523.246 251.004 523.062 250.883 522.906 cv
250.758 522.758 250.594 522.641 250.391 522.559 cv
250.18 522.477 249.926 522.434 249.629 522.434 cv
249.457 522.434 249.289 522.449 249.121 522.48 cv
248.949 522.512 248.785 522.555 248.629 522.602 cv
248.469 522.656 248.32 522.719 248.18 522.789 cv
248.035 522.863 247.902 522.937 247.785 523.016 cv
247.781 523.609 247.82 524.105 247.898 524.5 cv
247.973 524.898 248.082 525.215 248.227 525.453 cv
248.371 525.695 248.551 525.867 248.766 525.969 cv
248.98 526.074 249.23 526.125 249.52 526.121 cv
249.809 526.125 250.063 526.07 250.277 525.957 cv
250.492 525.852 250.668 525.703 250.813 525.516 cv
250.953 525.332 251.059 525.125 251.125 524.895 cv
251.191 524.664 251.227 524.43 251.227 524.184 cv
cp
f
324.129 524.668 mo
324.129 525.055 324.059 525.398 323.922 525.695 cv
323.785 526 323.59 526.25 323.332 526.453 cv
323.074 526.66 322.754 526.816 322.375 526.918 cv
321.992 527.023 321.559 527.074 321.074 527.074 cv
320.613 527.074 320.203 527.027 319.844 526.934 cv
319.48 526.84 319.176 526.699 318.926 526.508 cv
318.676 526.324 318.484 526.094 318.352 525.816 cv
318.219 525.543 318.152 525.23 318.152 524.875 cv
318.152 524.602 318.195 524.344 318.289 524.109 cv
318.375 523.875 318.508 523.66 318.684 523.465 cv
318.852 523.27 319.063 523.086 319.316 522.91 cv
319.566 522.742 319.852 522.578 320.168 522.422 cv
319.895 522.281 319.652 522.133 319.441 521.973 cv
319.23 521.816 319.051 521.645 318.906 521.457 cv
318.758 521.273 318.648 521.078 318.574 520.867 cv
318.496 520.66 318.457 520.43 318.461 520.18 cv
318.457 519.871 318.512 519.578 318.629 519.305 cv
318.738 519.035 318.91 518.801 319.137 518.598 cv
319.363 518.398 319.648 518.238 320 518.121 cv
320.344 518.004 320.754 517.945 321.223 517.945 cv
321.668 517.945 322.055 518 322.383 518.105 cv
322.711 518.215 322.98 518.359 323.191 518.543 cv
323.402 518.73 323.559 518.949 323.664 519.199 cv
323.762 519.449 323.813 519.719 323.816 520.008 cv
323.813 520.242 323.773 520.469 323.703 520.68 cv
323.625 520.898 323.516 521.102 323.367 521.289 cv
323.219 521.484 323.039 521.664 322.828 521.828 cv
322.617 522 322.375 522.156 322.102 522.297 cv
322.422 522.461 322.707 522.625 322.965 522.793 cv
323.215 522.961 323.43 523.141 323.605 523.336 cv
323.773 523.531 323.902 523.738 323.996 523.953 cv
324.082 524.172 324.129 524.41 324.129 524.668 cv
cp
322.648 520.117 mo
322.645 519.93 322.613 519.754 322.547 519.598 cv
322.48 519.441 322.383 519.309 322.258 519.199 cv
322.129 519.09 321.969 519.008 321.781 518.949 cv
321.586 518.895 321.371 518.867 321.133 518.863 cv
320.637 518.867 320.262 518.977 320.012 519.199 cv
319.754 519.426 319.629 519.734 319.633 520.117 cv
319.629 520.297 319.66 520.461 319.723 520.613 cv
319.785 520.77 319.879 520.914 320.012 521.051 cv
320.137 521.187 320.301 521.32 320.504 521.449 cv
320.699 521.582 320.938 521.719 321.215 521.859 cv
321.676 521.625 322.031 521.363 322.277 521.07 cv
322.523 520.785 322.645 520.469 322.648 520.117 cv
cp
322.938 524.793 mo
322.934 524.586 322.895 524.395 322.82 524.223 cv
322.738 524.055 322.621 523.895 322.465 523.742 cv
322.309 523.594 322.109 523.449 321.875 523.309 cv
321.637 523.172 321.367 523.027 321.059 522.875 cv
320.77 523.02 320.516 523.16 320.301 523.301 cv
320.082 523.441 319.902 523.59 319.766 523.738 cv
319.625 523.895 319.52 524.051 319.449 524.215 cv
319.375 524.383 319.34 524.566 319.344 524.766 cv
319.34 525.211 319.492 525.555 319.801 525.793 cv
320.102 526.039 320.555 526.16 321.16 526.156 cv
321.742 526.16 322.188 526.039 322.488 525.789 cv
322.785 525.547 322.934 525.215 322.938 524.793 cv
cp
f
392.105 526.48 mo
392.102 526.57 392.094 526.641 392.082 526.699 cv
392.066 526.762 392.047 526.812 392.027 526.844 cv
392.004 526.883 391.98 526.906 391.949 526.922 cv
391.918 526.937 391.887 526.945 391.859 526.945 cv
387.223 526.945 li
387.188 526.945 387.16 526.937 387.133 526.922 cv
387.105 526.906 387.078 526.883 387.055 526.844 cv
387.027 526.812 387.008 526.762 386.996 526.699 cv
386.98 526.641 386.973 526.57 386.977 526.48 cv
386.973 526.402 386.98 526.328 386.996 526.266 cv
387.008 526.207 387.023 526.16 387.047 526.121 cv
387.063 526.086 387.09 526.055 387.121 526.031 cv
387.152 526.012 387.184 526.004 387.223 526 cv
389.074 526 li
389.074 519.254 li
387.359 520.273 li
387.27 520.324 387.199 520.352 387.152 520.359 cv
387.098 520.367 387.055 520.359 387.023 520.328 cv
386.988 520.301 386.969 520.25 386.957 520.18 cv
386.945 520.113 386.938 520.027 386.941 519.918 cv
386.938 519.844 386.941 519.777 386.953 519.719 cv
386.957 519.668 386.969 519.621 386.984 519.582 cv
386.996 519.547 387.016 519.516 387.039 519.488 cv
387.063 519.461 387.094 519.434 387.141 519.406 cv
389.184 518.094 li
389.199 518.082 389.219 518.07 389.25 518.062 cv
389.273 518.055 389.309 518.047 389.355 518.035 cv
389.395 518.027 389.445 518.02 389.5 518.016 cv
389.555 518.016 389.621 518.016 389.707 518.012 cv
389.813 518.016 389.906 518.02 389.98 518.027 cv
390.051 518.035 390.105 518.051 390.152 518.066 cv
390.191 518.086 390.219 518.105 390.234 518.129 cv
390.242 518.156 390.25 518.18 390.254 518.203 cv
390.254 526 li
391.859 526 li
391.895 526.004 391.93 526.012 391.961 526.031 cv
391.992 526.055 392.016 526.086 392.039 526.121 cv
392.055 526.16 392.07 526.207 392.086 526.266 cv
392.094 526.328 392.102 526.402 392.105 526.48 cv
cp
f
399.457 522.488 mo
399.453 523.172 399.402 523.793 399.297 524.355 cv
399.188 524.918 399.008 525.402 398.762 525.805 cv
398.508 526.211 398.18 526.523 397.781 526.742 cv
397.375 526.965 396.883 527.074 396.297 527.074 cv
395.738 527.074 395.266 526.977 394.887 526.777 cv
394.504 526.582 394.199 526.289 393.965 525.902 cv
393.73 525.516 393.563 525.043 393.469 524.477 cv
393.367 523.914 393.32 523.266 393.32 522.531 cv
393.32 521.859 393.375 521.238 393.484 520.672 cv
393.594 520.109 393.77 519.625 394.02 519.219 cv
394.262 518.816 394.586 518.504 394.992 518.277 cv
395.391 518.059 395.887 517.945 396.477 517.945 cv
397.035 517.945 397.508 518.047 397.891 518.242 cv
398.273 518.445 398.578 518.738 398.813 519.121 cv
399.043 519.512 399.211 519.984 399.309 520.547 cv
399.406 521.109 399.453 521.758 399.457 522.488 cv
cp
398.25 522.57 mo
398.246 522.129 398.23 521.73 398.203 521.379 cv
398.168 521.027 398.121 520.719 398.063 520.449 cv
397.996 520.18 397.918 519.949 397.82 519.754 cv
397.723 519.562 397.605 519.402 397.469 519.273 cv
397.328 519.148 397.168 519.055 396.996 518.996 cv
396.816 518.941 396.621 518.914 396.406 518.91 cv
396.016 518.914 395.699 519.004 395.461 519.187 cv
395.215 519.371 395.023 519.625 394.887 519.941 cv
394.746 520.262 394.652 520.633 394.602 521.062 cv
394.551 521.492 394.527 521.957 394.527 522.449 cv
394.527 523.113 394.559 523.676 394.629 524.137 cv
394.695 524.605 394.805 524.984 394.957 525.273 cv
395.102 525.57 395.293 525.781 395.523 525.91 cv
395.754 526.047 396.035 526.113 396.367 526.109 cv
396.621 526.113 396.844 526.074 397.039 525.988 cv
397.23 525.91 397.398 525.789 397.539 525.633 cv
397.68 525.48 397.793 525.297 397.887 525.082 cv
397.973 524.867 398.047 524.629 398.105 524.367 cv
398.156 524.109 398.195 523.828 398.219 523.523 cv
398.238 523.219 398.246 522.902 398.25 522.57 cv
cp
f
463.844 526.48 mo
463.84 526.57 463.832 526.641 463.82 526.699 cv
463.805 526.762 463.785 526.812 463.766 526.844 cv
463.742 526.883 463.719 526.906 463.688 526.922 cv
463.656 526.937 463.625 526.945 463.598 526.945 cv
458.961 526.945 li
458.926 526.945 458.898 526.937 458.871 526.922 cv
458.844 526.906 458.816 526.883 458.793 526.844 cv
458.766 526.812 458.746 526.762 458.734 526.699 cv
458.719 526.641 458.711 526.57 458.715 526.48 cv
458.711 526.402 458.719 526.328 458.734 526.266 cv
458.746 526.207 458.762 526.16 458.785 526.121 cv
458.801 526.086 458.828 526.055 458.859 526.031 cv
458.891 526.012 458.922 526.004 458.961 526 cv
460.813 526 li
460.813 519.254 li
459.098 520.273 li
459.008 520.324 458.938 520.352 458.891 520.359 cv
458.836 520.367 458.793 520.359 458.762 520.328 cv
458.727 520.301 458.707 520.25 458.695 520.18 cv
458.684 520.113 458.676 520.027 458.68 519.918 cv
458.676 519.844 458.68 519.777 458.691 519.719 cv
458.695 519.668 458.707 519.621 458.723 519.582 cv
458.734 519.547 458.754 519.516 458.777 519.488 cv
458.801 519.461 458.832 519.434 458.879 519.406 cv
460.922 518.094 li
460.938 518.082 460.957 518.07 460.988 518.062 cv
461.012 518.055 461.047 518.047 461.094 518.035 cv
461.133 518.027 461.184 518.02 461.238 518.016 cv
461.293 518.016 461.359 518.016 461.445 518.012 cv
461.551 518.016 461.645 518.02 461.719 518.027 cv
461.789 518.035 461.844 518.051 461.891 518.066 cv
461.93 518.086 461.957 518.105 461.973 518.129 cv
461.98 518.156 461.988 518.18 461.992 518.203 cv
461.992 526 li
463.598 526 li
463.633 526.004 463.668 526.012 463.699 526.031 cv
463.73 526.055 463.754 526.086 463.777 526.121 cv
463.793 526.16 463.809 526.207 463.824 526.266 cv
463.832 526.328 463.84 526.402 463.844 526.48 cv
cp
f
470.906 526.437 mo
470.902 526.523 470.898 526.598 470.887 526.66 cv
470.875 526.727 470.859 526.781 470.84 526.82 cv
470.816 526.867 470.789 526.898 470.758 526.914 cv
470.723 526.937 470.684 526.945 470.645 526.945 cv
465.742 526.945 li
465.68 526.945 465.621 526.937 465.574 526.922 cv
465.523 526.906 465.484 526.883 465.449 526.844 cv
465.414 526.812 465.387 526.758 465.375 526.687 cv
465.355 526.617 465.348 526.531 465.352 526.43 cv
465.348 526.34 465.352 526.262 465.359 526.191 cv
465.363 526.125 465.379 526.066 465.406 526.012 cv
465.43 525.961 465.461 525.906 465.496 525.852 cv
465.531 525.801 465.574 525.746 465.633 525.684 cv
467.406 523.859 li
467.816 523.441 468.145 523.066 468.395 522.73 cv
468.641 522.402 468.832 522.098 468.965 521.82 cv
469.098 521.547 469.184 521.297 469.23 521.07 cv
469.27 520.848 469.293 520.637 469.293 520.441 cv
469.293 520.246 469.258 520.062 469.191 519.883 cv
469.125 519.711 469.031 519.555 468.906 519.418 cv
468.781 519.289 468.625 519.184 468.438 519.102 cv
468.25 519.027 468.031 518.988 467.785 518.984 cv
467.496 518.988 467.238 519.027 467.012 519.102 cv
466.781 519.184 466.582 519.27 466.41 519.355 cv
466.238 519.449 466.094 519.531 465.977 519.609 cv
465.859 519.687 465.773 519.727 465.723 519.727 cv
465.688 519.727 465.656 519.719 465.633 519.699 cv
465.602 519.684 465.582 519.652 465.566 519.609 cv
465.551 519.57 465.535 519.516 465.527 519.445 cv
465.516 519.379 465.512 519.297 465.516 519.199 cv
465.512 519.133 465.516 519.074 465.523 519.023 cv
465.527 518.973 465.535 518.93 465.547 518.891 cv
465.555 518.855 465.57 518.82 465.59 518.789 cv
465.609 518.758 465.645 518.719 465.703 518.668 cv
465.754 518.621 465.848 518.555 465.984 518.473 cv
466.117 518.391 466.289 518.312 466.492 518.23 cv
466.695 518.152 466.918 518.082 467.164 518.027 cv
467.406 517.973 467.664 517.945 467.938 517.945 cv
468.363 517.945 468.738 518.008 469.063 518.129 cv
469.383 518.25 469.648 518.414 469.863 518.625 cv
470.074 518.836 470.234 519.082 470.34 519.355 cv
470.445 519.637 470.5 519.934 470.5 520.246 cv
470.5 520.535 470.473 520.816 470.422 521.094 cv
470.371 521.379 470.266 521.684 470.105 522.008 cv
469.941 522.336 469.707 522.699 469.402 523.098 cv
469.094 523.5 468.688 523.961 468.184 524.477 cv
466.777 525.945 li
470.637 525.945 li
470.668 525.949 470.703 525.961 470.742 525.977 cv
470.773 526 470.805 526.031 470.832 526.07 cv
470.855 526.113 470.875 526.164 470.887 526.223 cv
470.898 526.289 470.902 526.359 470.906 526.437 cv
cp
f
535.555 526.48 mo
535.551 526.57 535.543 526.641 535.531 526.699 cv
535.516 526.762 535.496 526.812 535.477 526.844 cv
535.453 526.883 535.43 526.906 535.398 526.922 cv
535.367 526.937 535.336 526.945 535.309 526.945 cv
530.672 526.945 li
530.637 526.945 530.609 526.937 530.582 526.922 cv
530.555 526.906 530.527 526.883 530.504 526.844 cv
530.477 526.812 530.457 526.762 530.445 526.699 cv
530.43 526.641 530.422 526.57 530.426 526.48 cv
530.422 526.402 530.43 526.328 530.445 526.266 cv
530.457 526.207 530.473 526.16 530.496 526.121 cv
530.512 526.086 530.539 526.055 530.57 526.031 cv
530.602 526.012 530.633 526.004 530.672 526 cv
532.523 526 li
532.523 519.254 li
530.809 520.273 li
530.719 520.324 530.648 520.352 530.602 520.359 cv
530.547 520.367 530.504 520.359 530.473 520.328 cv
530.438 520.301 530.418 520.25 530.406 520.18 cv
530.395 520.113 530.387 520.027 530.391 519.918 cv
530.387 519.844 530.391 519.777 530.402 519.719 cv
530.406 519.668 530.418 519.621 530.434 519.582 cv
530.445 519.547 530.465 519.516 530.488 519.488 cv
530.512 519.461 530.543 519.434 530.59 519.406 cv
532.633 518.094 li
532.648 518.082 532.668 518.07 532.699 518.062 cv
532.723 518.055 532.758 518.047 532.805 518.035 cv
532.844 518.027 532.895 518.02 532.949 518.016 cv
533.004 518.016 533.07 518.016 533.156 518.012 cv
533.262 518.016 533.355 518.02 533.43 518.027 cv
533.5 518.035 533.555 518.051 533.602 518.066 cv
533.641 518.086 533.668 518.105 533.684 518.129 cv
533.691 518.156 533.699 518.18 533.703 518.203 cv
533.703 526 li
535.309 526 li
535.344 526.004 535.379 526.012 535.41 526.031 cv
535.441 526.055 535.465 526.086 535.488 526.121 cv
535.504 526.16 535.52 526.207 535.535 526.266 cv
535.543 526.328 535.551 526.402 535.555 526.48 cv
cp
f
542.992 524.422 mo
542.988 524.574 542.965 524.695 542.922 524.781 cv
542.875 524.871 542.813 524.914 542.73 524.91 cv
541.73 524.91 li
541.73 526.773 li
541.73 526.812 541.719 526.844 541.703 526.867 cv
541.68 526.895 541.648 526.914 541.605 526.934 cv
541.555 526.949 541.492 526.961 541.422 526.973 cv
541.344 526.98 541.25 526.984 541.133 526.988 cv
541.016 526.984 540.918 526.98 540.848 526.973 cv
540.77 526.961 540.711 526.949 540.668 526.934 cv
540.621 526.914 540.59 526.895 540.574 526.867 cv
540.555 526.844 540.547 526.812 540.551 526.773 cv
540.551 524.91 li
536.922 524.91 li
536.863 524.914 536.82 524.906 536.785 524.891 cv
536.75 524.879 536.715 524.852 536.688 524.812 cv
536.656 524.777 536.637 524.727 536.625 524.656 cv
536.613 524.59 536.609 524.5 536.609 524.387 cv
536.609 524.305 536.609 524.227 536.617 524.156 cv
536.617 524.086 536.629 524.023 536.645 523.969 cv
536.656 523.914 536.672 523.859 536.699 523.805 cv
536.719 523.75 536.746 523.695 536.781 523.633 cv
539.941 518.246 li
539.961 518.211 539.996 518.18 540.043 518.152 cv
540.086 518.125 540.141 518.102 540.215 518.082 cv
540.281 518.066 540.367 518.055 540.473 518.043 cv
540.574 518.039 540.695 518.035 540.836 518.031 cv
540.984 518.035 541.121 518.039 541.238 518.051 cv
541.352 518.062 541.441 518.078 541.516 518.094 cv
541.582 518.113 541.637 518.137 541.676 518.168 cv
541.711 518.199 541.73 518.234 541.73 518.273 cv
541.73 523.937 li
542.73 523.937 li
542.805 523.941 542.867 523.98 542.918 524.059 cv
542.965 524.141 542.988 524.262 542.992 524.422 cv
cp
540.551 519.07 mo
540.539 519.07 li
537.688 523.937 li
540.551 523.937 li
cp
f
607.297 526.48 mo
607.293 526.57 607.285 526.641 607.273 526.699 cv
607.258 526.762 607.238 526.812 607.219 526.844 cv
607.195 526.883 607.172 526.906 607.141 526.922 cv
607.109 526.937 607.078 526.945 607.051 526.945 cv
602.414 526.945 li
602.379 526.945 602.352 526.937 602.324 526.922 cv
602.297 526.906 602.27 526.883 602.246 526.844 cv
602.219 526.812 602.199 526.762 602.188 526.699 cv
602.172 526.641 602.164 526.57 602.168 526.48 cv
602.164 526.402 602.172 526.328 602.188 526.266 cv
602.199 526.207 602.215 526.16 602.238 526.121 cv
602.254 526.086 602.281 526.055 602.313 526.031 cv
602.344 526.012 602.375 526.004 602.414 526 cv
604.266 526 li
604.266 519.254 li
602.551 520.273 li
602.461 520.324 602.391 520.352 602.344 520.359 cv
602.289 520.367 602.246 520.359 602.215 520.328 cv
602.18 520.301 602.16 520.25 602.148 520.18 cv
602.137 520.113 602.129 520.027 602.133 519.918 cv
602.129 519.844 602.133 519.777 602.145 519.719 cv
602.148 519.668 602.16 519.621 602.176 519.582 cv
602.188 519.547 602.207 519.516 602.23 519.488 cv
602.254 519.461 602.285 519.434 602.332 519.406 cv
604.375 518.094 li
604.391 518.082 604.41 518.07 604.441 518.062 cv
604.465 518.055 604.5 518.047 604.547 518.035 cv
604.586 518.027 604.637 518.02 604.691 518.016 cv
604.746 518.016 604.813 518.016 604.898 518.012 cv
605.004 518.016 605.098 518.02 605.172 518.027 cv
605.242 518.035 605.297 518.051 605.344 518.066 cv
605.383 518.086 605.41 518.105 605.426 518.129 cv
605.434 518.156 605.441 518.18 605.445 518.203 cv
605.445 526 li
607.051 526 li
607.086 526.004 607.121 526.012 607.152 526.031 cv
607.184 526.055 607.207 526.086 607.23 526.121 cv
607.246 526.16 607.262 526.207 607.277 526.266 cv
607.285 526.328 607.293 526.402 607.297 526.48 cv
cp
f
614.582 524.074 mo
614.582 524.465 614.52 524.844 614.402 525.203 cv
614.277 525.57 614.094 525.887 613.852 526.16 cv
613.602 526.437 613.289 526.66 612.914 526.824 cv
612.531 526.992 612.086 527.074 611.57 527.074 cv
611.199 527.074 610.871 527.031 610.59 526.937 cv
610.305 526.852 610.059 526.719 609.848 526.547 cv
609.637 526.379 609.461 526.172 609.324 525.926 cv
609.184 525.68 609.07 525.398 608.988 525.082 cv
608.902 524.77 608.844 524.426 608.809 524.047 cv
608.77 523.676 608.75 523.273 608.754 522.84 cv
608.75 522.461 608.77 522.078 608.813 521.687 cv
608.852 521.305 608.926 520.93 609.031 520.562 cv
609.137 520.203 609.281 519.863 609.461 519.547 cv
609.641 519.23 609.867 518.953 610.141 518.719 cv
610.414 518.484 610.738 518.297 611.117 518.156 cv
611.496 518.02 611.938 517.953 612.441 517.949 cv
612.609 517.953 612.781 517.961 612.953 517.98 cv
613.125 518.004 613.285 518.035 613.434 518.066 cv
613.582 518.105 613.703 518.141 613.805 518.18 cv
613.902 518.219 613.969 518.254 614.004 518.277 cv
614.031 518.305 614.055 518.332 614.074 518.359 cv
614.09 518.391 614.105 518.422 614.113 518.457 cv
614.121 518.492 614.125 518.531 614.133 518.574 cv
614.133 518.617 614.137 518.672 614.141 518.734 cv
614.137 518.82 614.137 518.891 614.137 518.945 cv
614.133 519.008 614.121 519.055 614.109 519.09 cv
614.09 519.129 614.07 519.156 614.047 519.172 cv
614.02 519.191 613.988 519.199 613.949 519.199 cv
613.898 519.199 613.828 519.184 613.742 519.152 cv
613.652 519.121 613.547 519.086 613.426 519.043 cv
613.301 519.008 613.152 518.973 612.977 518.937 cv
612.801 518.91 612.598 518.895 612.367 518.891 cv
611.938 518.895 611.57 518.98 611.266 519.152 cv
610.961 519.324 610.711 519.559 610.516 519.852 cv
610.32 520.145 610.176 520.484 610.086 520.867 cv
609.988 521.258 609.934 521.66 609.926 522.078 cv
610.043 522.012 610.18 521.945 610.328 521.875 cv
610.477 521.809 610.637 521.746 610.813 521.687 cv
610.988 521.637 611.176 521.59 611.371 521.555 cv
611.566 521.523 611.777 521.508 612.004 521.504 cv
612.48 521.508 612.883 521.574 613.215 521.699 cv
613.543 521.832 613.809 522.012 614.016 522.242 cv
614.215 522.473 614.359 522.742 614.449 523.055 cv
614.535 523.367 614.582 523.707 614.582 524.074 cv
cp
613.387 524.184 mo
613.387 523.922 613.359 523.68 613.309 523.461 cv
613.254 523.246 613.164 523.062 613.043 522.906 cv
612.918 522.758 612.754 522.641 612.551 522.559 cv
612.34 522.477 612.086 522.434 611.789 522.434 cv
611.617 522.434 611.449 522.449 611.281 522.48 cv
611.109 522.512 610.945 522.555 610.789 522.602 cv
610.629 522.656 610.48 522.719 610.34 522.789 cv
610.195 522.863 610.063 522.937 609.945 523.016 cv
609.941 523.609 609.98 524.105 610.059 524.5 cv
610.133 524.898 610.242 525.215 610.387 525.453 cv
610.531 525.695 610.711 525.867 610.926 525.969 cv
611.141 526.074 611.391 526.125 611.68 526.121 cv
611.969 526.125 612.223 526.07 612.438 525.957 cv
612.652 525.852 612.828 525.703 612.973 525.516 cv
613.113 525.332 613.219 525.125 613.285 524.895 cv
613.352 524.664 613.387 524.43 613.387 524.184 cv
cp
f
272.359 543.934 mo
272.355 544.039 272.34 544.129 272.305 544.199 cv
272.27 544.277 272.223 544.336 272.168 544.379 cv
272.109 544.43 272.047 544.465 271.98 544.48 cv
271.906 544.504 271.836 544.512 271.773 544.512 cv
271.328 544.512 li
271.188 544.512 271.066 544.5 270.961 544.469 cv
270.855 544.445 270.758 544.391 270.664 544.312 cv
270.57 544.238 270.477 544.137 270.383 544.004 cv
270.289 543.875 270.188 543.711 270.082 543.508 cv
267.008 537.77 li
266.844 537.477 266.68 537.168 266.52 536.84 cv
266.352 536.52 266.199 536.203 266.063 535.895 cv
266.047 535.895 li
266.055 536.27 266.063 536.652 266.07 537.039 cv
266.074 537.43 266.074 537.816 266.078 538.199 cv
266.078 544.285 li
266.074 544.324 266.063 544.359 266.043 544.391 cv
266.02 544.426 265.984 544.453 265.934 544.469 cv
265.879 544.488 265.809 544.5 265.727 544.516 cv
265.641 544.527 265.535 544.535 265.406 544.535 cv
265.27 544.535 265.16 544.527 265.078 544.516 cv
264.992 544.5 264.926 544.488 264.879 544.469 cv
264.828 544.453 264.793 544.426 264.77 544.391 cv
264.746 544.359 264.734 544.324 264.738 544.285 cv
264.738 534.98 li
264.734 534.773 264.793 534.625 264.914 534.535 cv
265.031 534.449 265.16 534.406 265.301 534.402 cv
265.961 534.402 li
266.113 534.406 266.246 534.418 266.352 534.441 cv
266.453 534.469 266.547 534.512 266.633 534.57 cv
266.715 534.633 266.793 534.715 266.875 534.82 cv
266.949 534.93 267.031 535.066 267.117 535.223 cv
269.484 539.648 li
269.629 539.922 269.77 540.187 269.906 540.441 cv
270.039 540.699 270.168 540.953 270.297 541.199 cv
270.418 541.453 270.543 541.699 270.668 541.937 cv
270.789 542.18 270.91 542.422 271.035 542.664 cv
271.043 542.664 li
271.031 542.258 271.023 541.828 271.023 541.383 cv
271.016 540.937 271.016 540.512 271.02 540.102 cv
271.02 534.629 li
271.016 534.594 271.027 534.559 271.051 534.527 cv
271.074 534.496 271.109 534.469 271.164 534.445 cv
271.211 534.422 271.281 534.406 271.367 534.395 cv
271.453 534.387 271.563 534.383 271.703 534.379 cv
271.82 534.383 271.926 534.387 272.016 534.395 cv
272.102 534.406 272.168 534.422 272.219 534.445 cv
272.266 534.469 272.301 534.496 272.324 534.527 cv
272.344 534.559 272.355 534.594 272.359 534.629 cv
cp
f
280.91 544.293 mo
280.906 544.34 280.898 544.375 280.883 544.398 cv
280.863 544.43 280.828 544.453 280.785 544.473 cv
280.738 544.492 280.68 544.504 280.605 544.52 cv
280.527 544.527 280.434 544.535 280.328 544.535 cv
280.203 544.535 280.105 544.527 280.035 544.52 cv
279.957 544.504 279.898 544.492 279.855 544.473 cv
279.809 544.453 279.777 544.43 279.766 544.398 cv
279.746 544.375 279.738 544.34 279.742 544.293 cv
279.742 543.367 li
279.34 543.812 278.945 544.133 278.559 544.332 cv
278.164 544.535 277.77 544.633 277.375 544.637 cv
276.902 544.633 276.508 544.559 276.191 544.402 cv
275.871 544.25 275.613 544.039 275.418 543.77 cv
275.215 543.504 275.074 543.191 274.992 542.832 cv
274.902 542.477 274.859 542.043 274.863 541.535 cv
274.863 537.281 li
274.859 537.242 274.867 537.207 274.891 537.176 cv
274.906 537.148 274.941 537.125 274.996 537.098 cv
275.043 537.078 275.113 537.062 275.199 537.051 cv
275.281 537.047 275.383 537.043 275.512 537.039 cv
275.633 537.043 275.738 537.047 275.824 537.051 cv
275.906 537.062 275.973 537.078 276.02 537.098 cv
276.066 537.125 276.102 537.148 276.125 537.176 cv
276.145 537.207 276.152 537.242 276.156 537.281 cv
276.156 541.363 li
276.152 541.777 276.184 542.105 276.246 542.352 cv
276.305 542.598 276.395 542.809 276.52 542.98 cv
276.637 543.16 276.793 543.293 276.984 543.387 cv
277.168 543.484 277.387 543.535 277.637 543.531 cv
277.957 543.535 278.277 543.418 278.602 543.187 cv
278.918 542.961 279.258 542.625 279.617 542.18 cv
279.617 537.281 li
279.617 537.242 279.625 537.207 279.645 537.176 cv
279.66 537.148 279.695 537.125 279.75 537.098 cv
279.801 537.078 279.867 537.062 279.949 537.051 cv
280.027 537.047 280.133 537.043 280.266 537.039 cv
280.387 537.043 280.492 537.047 280.578 537.051 cv
280.66 537.062 280.723 537.078 280.77 537.098 cv
280.813 537.125 280.848 537.148 280.875 537.176 cv
280.895 537.207 280.906 537.242 280.91 537.281 cv
cp
f
293.688 544.293 mo
293.684 544.34 293.676 544.375 293.656 544.398 cv
293.633 544.43 293.598 544.453 293.555 544.473 cv
293.504 544.492 293.438 544.504 293.359 544.52 cv
293.273 544.527 293.172 544.535 293.047 544.535 cv
292.914 544.535 292.805 544.527 292.727 544.52 cv
292.641 544.504 292.574 544.492 292.527 544.473 cv
292.473 544.453 292.438 544.43 292.422 544.398 cv
292.398 544.375 292.391 544.34 292.391 544.293 cv
292.391 540.031 li
292.391 539.738 292.363 539.469 292.313 539.223 cv
292.258 538.98 292.176 538.77 292.063 538.59 cv
291.949 538.414 291.805 538.277 291.629 538.184 cv
291.449 538.09 291.238 538.043 291.004 538.043 cv
290.707 538.043 290.41 538.16 290.113 538.387 cv
289.809 538.621 289.48 538.953 289.125 539.391 cv
289.125 544.293 li
289.121 544.34 289.109 544.375 289.094 544.398 cv
289.07 544.43 289.039 544.453 288.992 544.473 cv
288.941 544.492 288.875 544.504 288.793 544.52 cv
288.707 544.527 288.602 544.535 288.48 544.535 cv
288.359 544.535 288.258 544.527 288.172 544.52 cv
288.086 544.504 288.016 544.492 287.969 544.473 cv
287.914 544.453 287.883 544.43 287.867 544.398 cv
287.848 544.375 287.836 544.34 287.84 544.293 cv
287.84 540.031 li
287.836 539.738 287.809 539.469 287.754 539.223 cv
287.695 538.98 287.609 538.77 287.496 538.59 cv
287.383 538.414 287.238 538.277 287.066 538.184 cv
286.887 538.09 286.68 538.043 286.445 538.043 cv
286.145 538.043 285.848 538.16 285.547 538.387 cv
285.246 538.621 284.918 538.953 284.566 539.391 cv
284.566 544.293 li
284.563 544.34 284.551 544.375 284.535 544.398 cv
284.512 544.43 284.48 544.453 284.434 544.473 cv
284.387 544.492 284.32 544.504 284.242 544.52 cv
284.156 544.527 284.051 544.535 283.922 544.535 cv
283.793 544.535 283.688 544.527 283.609 544.52 cv
283.523 544.504 283.457 544.492 283.41 544.473 cv
283.355 544.453 283.324 544.43 283.309 544.398 cv
283.289 544.375 283.277 544.34 283.281 544.293 cv
283.281 537.281 li
283.277 537.242 283.285 537.207 283.305 537.176 cv
283.316 537.148 283.348 537.125 283.398 537.098 cv
283.441 537.078 283.504 537.062 283.578 537.051 cv
283.648 537.047 283.742 537.043 283.867 537.039 cv
283.977 537.043 284.074 537.047 284.152 537.051 cv
284.227 537.062 284.285 537.078 284.328 537.098 cv
284.367 537.125 284.395 537.148 284.414 537.176 cv
284.43 537.207 284.438 537.242 284.441 537.281 cv
284.441 538.207 li
284.832 537.766 285.215 537.445 285.59 537.238 cv
285.957 537.035 286.336 536.93 286.719 536.93 cv
287.008 536.93 287.266 536.965 287.5 537.031 cv
287.727 537.102 287.934 537.195 288.113 537.316 cv
288.289 537.437 288.438 537.582 288.566 537.75 cv
288.688 537.922 288.793 538.113 288.879 538.316 cv
289.109 538.066 289.332 537.852 289.543 537.672 cv
289.754 537.5 289.957 537.355 290.152 537.242 cv
290.348 537.137 290.535 537.059 290.719 537.004 cv
290.902 536.957 291.09 536.93 291.277 536.93 cv
291.73 536.93 292.109 537.012 292.414 537.168 cv
292.719 537.332 292.965 537.543 293.16 537.805 cv
293.348 538.07 293.484 538.379 293.566 538.734 cv
293.645 539.09 293.684 539.465 293.688 539.859 cv
cp
f
302.484 540.691 mo
302.48 541.301 302.414 541.852 302.285 542.336 cv
302.148 542.824 301.953 543.238 301.699 543.578 cv
301.441 543.922 301.125 544.184 300.754 544.363 cv
300.379 544.547 299.953 544.633 299.469 544.637 cv
299.242 544.633 299.035 544.613 298.848 544.57 cv
298.66 544.523 298.473 544.453 298.293 544.355 cv
298.105 544.258 297.926 544.133 297.746 543.98 cv
297.563 543.832 297.371 543.652 297.172 543.437 cv
297.172 544.293 li
297.172 544.34 297.16 544.375 297.141 544.402 cv
297.117 544.437 297.082 544.461 297.039 544.477 cv
296.988 544.492 296.93 544.504 296.863 544.52 cv
296.789 544.527 296.699 544.535 296.594 544.535 cv
296.484 544.535 296.398 544.527 296.328 544.52 cv
296.254 544.504 296.191 544.492 296.148 544.477 cv
296.098 544.461 296.066 544.437 296.055 544.402 cv
296.035 544.375 296.027 544.34 296.031 544.293 cv
296.031 533.883 li
296.027 533.844 296.039 533.809 296.059 533.773 cv
296.074 533.746 296.105 533.719 296.16 533.695 cv
296.207 533.676 296.273 533.66 296.359 533.648 cv
296.438 533.641 296.543 533.637 296.672 533.633 cv
296.801 533.637 296.906 533.641 296.992 533.648 cv
297.07 533.66 297.137 533.676 297.184 533.695 cv
297.23 533.719 297.262 533.746 297.285 533.773 cv
297.301 533.809 297.313 533.844 297.316 533.883 cv
297.316 538.082 li
297.523 537.871 297.727 537.691 297.922 537.547 cv
298.117 537.402 298.305 537.285 298.492 537.191 cv
298.676 537.105 298.863 537.039 299.055 536.992 cv
299.238 536.953 299.438 536.93 299.648 536.93 cv
300.152 536.93 300.586 537.031 300.953 537.234 cv
301.313 537.437 301.605 537.711 301.832 538.047 cv
302.055 538.391 302.223 538.789 302.328 539.246 cv
302.43 539.703 302.48 540.184 302.484 540.691 cv
cp
301.152 540.84 mo
301.148 540.484 301.121 540.137 301.07 539.797 cv
301.012 539.461 300.918 539.164 300.781 538.902 cv
300.645 538.645 300.465 538.434 300.242 538.273 cv
300.016 538.117 299.734 538.039 299.402 538.035 cv
299.234 538.039 299.07 538.062 298.91 538.105 cv
298.746 538.156 298.582 538.234 298.414 538.34 cv
298.246 538.453 298.07 538.594 297.895 538.762 cv
297.711 538.937 297.52 539.152 297.316 539.406 cv
297.316 542.203 li
297.672 542.637 298.012 542.969 298.336 543.191 cv
298.66 543.422 298.996 543.535 299.348 543.531 cv
299.668 543.535 299.945 543.457 300.18 543.297 cv
300.406 543.145 300.594 542.937 300.738 542.676 cv
300.883 542.422 300.988 542.133 301.055 541.812 cv
301.117 541.496 301.148 541.172 301.152 540.84 cv
cp
f
310.395 540.484 mo
310.391 540.687 310.34 540.828 310.242 540.914 cv
310.137 541 310.02 541.043 309.895 541.043 cv
305.277 541.043 li
305.273 541.434 305.313 541.785 305.395 542.098 cv
305.469 542.41 305.602 542.68 305.785 542.898 cv
305.965 543.125 306.199 543.297 306.496 543.414 cv
306.785 543.539 307.145 543.598 307.57 543.594 cv
307.902 543.598 308.199 543.57 308.461 543.512 cv
308.723 543.461 308.949 543.398 309.141 543.328 cv
309.328 543.262 309.484 543.203 309.609 543.145 cv
309.73 543.094 309.824 543.066 309.887 543.062 cv
309.922 543.066 309.953 543.074 309.984 543.09 cv
310.012 543.109 310.035 543.137 310.055 543.172 cv
310.066 543.211 310.078 543.262 310.09 543.324 cv
310.094 543.391 310.098 543.469 310.102 543.562 cv
310.098 543.633 310.094 543.691 310.094 543.738 cv
310.086 543.785 310.082 543.828 310.074 543.867 cv
310.066 543.906 310.051 543.941 310.035 543.973 cv
310.012 544.004 309.988 544.035 309.965 544.062 cv
309.934 544.094 309.852 544.141 309.711 544.203 cv
309.57 544.27 309.387 544.332 309.164 544.395 cv
308.938 544.457 308.68 544.512 308.387 544.562 cv
308.094 544.609 307.781 544.633 307.449 544.637 cv
306.871 544.633 306.363 544.555 305.934 544.395 cv
305.496 544.234 305.133 543.996 304.84 543.68 cv
304.539 543.363 304.316 542.969 304.168 542.488 cv
304.02 542.012 303.945 541.453 303.945 540.816 cv
303.945 540.219 304.02 539.68 304.176 539.195 cv
304.328 538.719 304.555 538.309 304.852 537.973 cv
305.145 537.637 305.5 537.379 305.914 537.199 cv
306.328 537.02 306.793 536.93 307.309 536.93 cv
307.859 536.93 308.328 537.02 308.715 537.195 cv
309.102 537.375 309.418 537.613 309.672 537.91 cv
309.918 538.211 310.102 538.562 310.219 538.961 cv
310.332 539.367 310.391 539.797 310.395 540.25 cv
cp
309.102 540.102 mo
309.117 539.426 308.965 538.895 308.648 538.512 cv
308.332 538.129 307.863 537.937 307.246 537.934 cv
306.922 537.937 306.641 537.996 306.402 538.113 cv
306.16 538.234 305.961 538.395 305.801 538.59 cv
305.637 538.789 305.512 539.02 305.426 539.281 cv
305.336 539.543 305.285 539.816 305.277 540.102 cv
cp
f
316.461 537.738 mo
316.457 537.855 316.457 537.953 316.453 538.027 cv
316.445 538.109 316.434 538.172 316.422 538.211 cv
316.402 538.258 316.383 538.289 316.363 538.312 cv
316.336 538.336 316.305 538.348 316.266 538.348 cv
316.223 538.348 316.172 538.336 316.113 538.312 cv
316.051 538.289 315.98 538.266 315.91 538.242 cv
315.832 538.219 315.75 538.199 315.656 538.176 cv
315.563 538.16 315.461 538.148 315.352 538.145 cv
315.219 538.148 315.09 538.176 314.969 538.223 cv
314.844 538.277 314.715 538.363 314.578 538.48 cv
314.438 538.605 314.293 538.762 314.145 538.957 cv
313.992 539.152 313.824 539.395 313.645 539.68 cv
313.645 544.293 li
313.641 544.34 313.629 544.375 313.613 544.398 cv
313.59 544.43 313.559 544.453 313.512 544.473 cv
313.465 544.492 313.398 544.504 313.32 544.52 cv
313.234 544.527 313.129 544.535 313 544.535 cv
312.871 544.535 312.766 544.527 312.688 544.52 cv
312.602 544.504 312.535 544.492 312.488 544.473 cv
312.434 544.453 312.402 544.43 312.387 544.398 cv
312.367 544.375 312.355 544.34 312.359 544.293 cv
312.359 537.281 li
312.355 537.242 312.363 537.207 312.383 537.176 cv
312.395 537.148 312.426 537.125 312.477 537.098 cv
312.52 537.078 312.582 537.062 312.656 537.051 cv
312.727 537.047 312.82 537.043 312.945 537.039 cv
313.055 537.043 313.152 537.047 313.23 537.051 cv
313.305 537.062 313.363 537.078 313.406 537.098 cv
313.445 537.125 313.473 537.148 313.492 537.176 cv
313.508 537.207 313.516 537.242 313.52 537.281 cv
313.52 538.301 li
313.707 538.02 313.891 537.793 314.063 537.617 cv
314.23 537.441 314.391 537.301 314.543 537.199 cv
314.691 537.098 314.84 537.027 314.988 536.988 cv
315.137 536.949 315.285 536.93 315.438 536.93 cv
315.504 536.93 315.582 536.934 315.668 536.941 cv
315.754 536.949 315.844 536.965 315.938 536.984 cv
316.031 537.008 316.113 537.031 316.191 537.055 cv
316.262 537.082 316.316 537.109 316.352 537.133 cv
316.379 537.164 316.398 537.187 316.414 537.207 cv
316.422 537.234 316.434 537.266 316.441 537.297 cv
316.449 537.336 316.453 537.387 316.457 537.457 cv
316.457 537.527 316.457 537.621 316.461 537.738 cv
cp
f
328.219 540.707 mo
328.215 541.285 328.141 541.812 327.992 542.289 cv
327.84 542.773 327.613 543.187 327.316 543.531 cv
327.016 543.883 326.641 544.152 326.195 544.344 cv
325.742 544.539 325.223 544.633 324.633 544.637 cv
324.055 544.633 323.551 544.551 323.125 544.379 cv
322.695 544.211 322.34 543.961 322.055 543.633 cv
321.766 543.305 321.551 542.91 321.414 542.441 cv
321.273 541.977 321.207 541.445 321.207 540.848 cv
321.207 540.281 321.277 539.754 321.426 539.273 cv
321.57 538.793 321.797 538.379 322.098 538.027 cv
322.395 537.68 322.766 537.41 323.215 537.219 cv
323.66 537.027 324.184 536.93 324.781 536.93 cv
325.359 536.93 325.859 537.016 326.289 537.187 cv
326.715 537.359 327.074 537.609 327.359 537.937 cv
327.645 538.266 327.859 538.664 328.004 539.129 cv
328.145 539.598 328.215 540.125 328.219 540.707 cv
cp
326.887 540.793 mo
326.883 540.418 326.848 540.059 326.781 539.719 cv
326.707 539.383 326.59 539.09 326.43 538.832 cv
326.266 538.582 326.047 538.379 325.77 538.227 cv
325.488 538.082 325.141 538.008 324.73 538.004 cv
324.344 538.008 324.016 538.074 323.742 538.207 cv
323.465 538.344 323.238 538.535 323.063 538.781 cv
322.883 539.027 322.75 539.32 322.668 539.656 cv
322.578 539.996 322.535 540.363 322.539 540.762 cv
322.535 541.148 322.57 541.512 322.645 541.848 cv
322.711 542.187 322.828 542.48 322.996 542.73 cv
323.16 542.984 323.383 543.187 323.66 543.332 cv
323.938 543.484 324.285 543.559 324.699 543.555 cv
325.074 543.559 325.402 543.488 325.684 543.352 cv
325.961 543.219 326.188 543.031 326.367 542.781 cv
326.543 542.539 326.672 542.246 326.758 541.91 cv
326.84 541.574 326.883 541.203 326.887 540.793 cv
cp
f
333.949 534.395 mo
333.945 534.496 333.941 534.574 333.934 534.633 cv
333.922 534.695 333.91 534.746 333.898 534.777 cv
333.883 534.816 333.867 534.84 333.848 534.852 cv
333.824 534.867 333.797 534.875 333.77 534.871 cv
333.73 534.875 333.684 534.863 333.633 534.836 cv
333.574 534.816 333.508 534.789 333.434 534.758 cv
333.352 534.73 333.262 534.703 333.156 534.68 cv
333.047 534.656 332.922 534.645 332.789 534.645 cv
332.594 534.645 332.43 534.676 332.297 534.738 cv
332.156 534.801 332.047 534.898 331.969 535.031 cv
331.883 535.164 331.824 535.336 331.789 535.547 cv
331.75 535.758 331.73 536.016 331.734 536.312 cv
331.734 537.078 li
333.301 537.078 li
333.34 537.082 333.375 537.09 333.406 537.105 cv
333.434 537.125 333.461 537.156 333.484 537.199 cv
333.508 537.246 333.523 537.305 333.539 537.367 cv
333.547 537.437 333.555 537.52 333.559 537.613 cv
333.555 537.805 333.531 537.937 333.488 538.02 cv
333.438 538.105 333.375 538.148 333.301 538.145 cv
331.734 538.145 li
331.734 544.293 li
331.73 544.34 331.723 544.375 331.703 544.398 cv
331.68 544.43 331.645 544.453 331.598 544.473 cv
331.547 544.492 331.48 544.504 331.398 544.52 cv
331.313 544.527 331.207 544.535 331.09 544.535 cv
330.961 544.535 330.859 544.527 330.777 544.52 cv
330.691 544.504 330.625 544.492 330.578 544.473 cv
330.527 544.453 330.492 544.43 330.473 544.398 cv
330.449 544.375 330.438 544.34 330.441 544.293 cv
330.441 538.145 li
329.453 538.145 li
329.367 538.148 329.305 538.105 329.266 538.02 cv
329.223 537.937 329.199 537.805 329.203 537.613 cv
329.199 537.52 329.207 537.437 329.219 537.367 cv
329.227 537.305 329.242 537.246 329.266 537.199 cv
329.285 537.156 329.309 537.125 329.344 537.105 cv
329.371 537.09 329.41 537.082 329.453 537.078 cv
330.441 537.078 li
330.441 536.352 li
330.438 535.867 330.484 535.449 330.578 535.094 cv
330.668 534.746 330.805 534.457 330.992 534.234 cv
331.176 534.012 331.41 533.848 331.699 533.738 cv
331.98 533.633 332.316 533.578 332.703 533.578 cv
332.879 533.578 333.055 533.598 333.23 533.629 cv
333.398 533.668 333.531 533.703 333.629 533.738 cv
333.719 533.781 333.781 533.816 333.816 533.844 cv
333.844 533.879 333.871 533.918 333.895 533.965 cv
333.914 534.016 333.926 534.078 333.938 534.145 cv
333.941 534.219 333.945 534.301 333.949 534.395 cv
cp
f
344.148 541.66 mo
344.145 542.133 344.059 542.555 343.887 542.922 cv
343.711 543.297 343.469 543.609 343.16 543.863 cv
342.852 544.121 342.488 544.312 342.07 544.441 cv
341.648 544.57 341.199 544.633 340.719 544.637 cv
340.379 544.633 340.063 544.605 339.777 544.551 cv
339.488 544.492 339.234 544.426 339.008 544.34 cv
338.781 544.262 338.59 544.176 338.438 544.082 cv
338.281 543.996 338.176 543.918 338.117 543.855 cv
338.059 543.793 338.016 543.715 337.988 543.621 cv
337.957 543.527 337.941 543.398 337.945 543.234 cv
337.941 543.121 337.945 543.027 337.961 542.949 cv
337.969 542.875 337.984 542.812 338.008 542.766 cv
338.023 542.719 338.051 542.687 338.086 542.668 cv
338.113 542.652 338.148 542.645 338.191 542.641 cv
338.262 542.645 338.363 542.687 338.5 542.773 cv
338.629 542.863 338.801 542.961 339.012 543.062 cv
339.219 543.172 339.469 543.27 339.762 543.355 cv
340.055 543.449 340.395 543.492 340.781 543.492 cv
341.07 543.492 341.336 543.453 341.578 543.375 cv
341.816 543.297 342.023 543.187 342.203 543.043 cv
342.375 542.902 342.512 542.727 342.605 542.516 cv
342.699 542.309 342.746 542.074 342.746 541.809 cv
342.746 541.527 342.68 541.281 342.551 541.074 cv
342.418 540.875 342.246 540.699 342.035 540.543 cv
341.82 540.395 341.578 540.254 341.305 540.121 cv
341.031 539.996 340.75 539.863 340.469 539.73 cv
340.18 539.598 339.902 539.453 339.633 539.289 cv
339.363 539.133 339.121 538.941 338.91 538.723 cv
338.691 538.504 338.52 538.25 338.391 537.953 cv
338.254 537.664 338.188 537.312 338.191 536.898 cv
338.188 536.48 338.266 536.105 338.422 535.773 cv
338.574 535.445 338.785 535.168 339.063 534.941 cv
339.332 534.723 339.656 534.551 340.035 534.434 cv
340.41 534.316 340.82 534.258 341.258 534.258 cv
341.477 534.258 341.699 534.277 341.93 534.316 cv
342.152 534.355 342.363 534.406 342.566 534.469 cv
342.762 534.535 342.941 534.609 343.102 534.687 cv
343.254 534.77 343.355 534.836 343.41 534.883 cv
343.457 534.937 343.492 534.977 343.508 535 cv
343.523 535.031 343.535 535.066 343.547 535.109 cv
343.555 535.156 343.563 535.211 343.57 535.27 cv
343.574 535.336 343.578 535.414 343.578 535.512 cv
343.578 535.605 343.574 535.691 343.566 535.762 cv
343.559 535.84 343.547 535.898 343.531 535.945 cv
343.516 535.992 343.492 536.027 343.465 536.051 cv
343.434 536.074 343.402 536.086 343.367 536.086 cv
343.309 536.086 343.219 536.051 343.098 535.98 cv
342.973 535.91 342.82 535.828 342.648 535.734 cv
342.469 535.645 342.262 535.562 342.023 535.484 cv
341.777 535.41 341.508 535.371 341.211 535.371 cv
340.93 535.371 340.684 535.41 340.477 535.484 cv
340.266 535.562 340.094 535.664 339.961 535.785 cv
339.824 535.91 339.723 536.055 339.656 536.227 cv
339.59 536.398 339.559 536.582 339.559 536.773 cv
339.559 537.059 339.621 537.301 339.75 537.5 cv
339.879 537.703 340.051 537.883 340.27 538.035 cv
340.48 538.195 340.727 538.336 341.004 538.465 cv
341.277 538.598 341.559 538.73 341.848 538.859 cv
342.133 538.992 342.414 539.137 342.688 539.293 cv
342.961 539.453 343.207 539.641 343.426 539.855 cv
343.641 540.074 343.813 540.328 343.949 540.621 cv
344.078 540.914 344.145 541.262 344.148 541.66 cv
cp
f
351.914 544.293 mo
351.91 544.34 351.902 544.375 351.887 544.398 cv
351.867 544.43 351.832 544.453 351.789 544.473 cv
351.742 544.492 351.684 544.504 351.609 544.52 cv
351.531 544.527 351.438 544.535 351.332 544.535 cv
351.207 544.535 351.109 544.527 351.039 544.52 cv
350.961 544.504 350.902 544.492 350.859 544.473 cv
350.813 544.453 350.781 544.43 350.77 544.398 cv
350.75 544.375 350.742 544.34 350.746 544.293 cv
350.746 543.367 li
350.344 543.812 349.949 544.133 349.563 544.332 cv
349.168 544.535 348.773 544.633 348.379 544.637 cv
347.906 544.633 347.512 544.559 347.195 544.402 cv
346.875 544.25 346.617 544.039 346.422 543.77 cv
346.219 543.504 346.078 543.191 345.996 542.832 cv
345.906 542.477 345.863 542.043 345.867 541.535 cv
345.867 537.281 li
345.863 537.242 345.871 537.207 345.895 537.176 cv
345.91 537.148 345.945 537.125 346 537.098 cv
346.047 537.078 346.117 537.062 346.203 537.051 cv
346.285 537.047 346.387 537.043 346.516 537.039 cv
346.637 537.043 346.742 537.047 346.828 537.051 cv
346.91 537.062 346.977 537.078 347.023 537.098 cv
347.07 537.125 347.105 537.148 347.129 537.176 cv
347.148 537.207 347.156 537.242 347.16 537.281 cv
347.16 541.363 li
347.156 541.777 347.188 542.105 347.25 542.352 cv
347.309 542.598 347.398 542.809 347.523 542.98 cv
347.641 543.16 347.797 543.293 347.988 543.387 cv
348.172 543.484 348.391 543.535 348.641 543.531 cv
348.961 543.535 349.281 543.418 349.605 543.187 cv
349.922 542.961 350.262 542.625 350.621 542.18 cv
350.621 537.281 li
350.621 537.242 350.629 537.207 350.648 537.176 cv
350.664 537.148 350.699 537.125 350.754 537.098 cv
350.805 537.078 350.871 537.062 350.953 537.051 cv
351.031 537.047 351.137 537.043 351.27 537.039 cv
351.391 537.043 351.496 537.047 351.582 537.051 cv
351.664 537.062 351.727 537.078 351.773 537.098 cv
351.816 537.125 351.852 537.148 351.879 537.176 cv
351.898 537.207 351.91 537.242 351.914 537.281 cv
cp
f
360.773 540.691 mo
360.77 541.301 360.703 541.852 360.574 542.336 cv
360.438 542.824 360.242 543.238 359.988 543.578 cv
359.73 543.922 359.414 544.184 359.043 544.363 cv
358.668 544.547 358.242 544.633 357.758 544.637 cv
357.531 544.633 357.324 544.613 357.137 544.57 cv
356.949 544.523 356.762 544.453 356.582 544.355 cv
356.395 544.258 356.215 544.133 356.035 543.98 cv
355.852 543.832 355.66 543.652 355.461 543.437 cv
355.461 544.293 li
355.461 544.34 355.449 544.375 355.43 544.402 cv
355.406 544.437 355.371 544.461 355.328 544.477 cv
355.277 544.492 355.219 544.504 355.152 544.52 cv
355.078 544.527 354.988 544.535 354.883 544.535 cv
354.773 544.535 354.688 544.527 354.617 544.52 cv
354.543 544.504 354.48 544.492 354.438 544.477 cv
354.387 544.461 354.355 544.437 354.344 544.402 cv
354.324 544.375 354.316 544.34 354.32 544.293 cv
354.32 533.883 li
354.316 533.844 354.328 533.809 354.348 533.773 cv
354.363 533.746 354.395 533.719 354.449 533.695 cv
354.496 533.676 354.563 533.66 354.648 533.648 cv
354.727 533.641 354.832 533.637 354.961 533.633 cv
355.09 533.637 355.195 533.641 355.281 533.648 cv
355.359 533.66 355.426 533.676 355.473 533.695 cv
355.52 533.719 355.551 533.746 355.574 533.773 cv
355.59 533.809 355.602 533.844 355.605 533.883 cv
355.605 538.082 li
355.813 537.871 356.016 537.691 356.211 537.547 cv
356.406 537.402 356.594 537.285 356.781 537.191 cv
356.965 537.105 357.152 537.039 357.344 536.992 cv
357.527 536.953 357.727 536.93 357.938 536.93 cv
358.441 536.93 358.875 537.031 359.242 537.234 cv
359.602 537.437 359.895 537.711 360.121 538.047 cv
360.344 538.391 360.512 538.789 360.617 539.246 cv
360.719 539.703 360.77 540.184 360.773 540.691 cv
cp
359.441 540.84 mo
359.438 540.484 359.41 540.137 359.359 539.797 cv
359.301 539.461 359.207 539.164 359.07 538.902 cv
358.934 538.645 358.754 538.434 358.531 538.273 cv
358.305 538.117 358.023 538.039 357.691 538.035 cv
357.523 538.039 357.359 538.062 357.199 538.105 cv
357.035 538.156 356.871 538.234 356.703 538.34 cv
356.535 538.453 356.359 538.594 356.184 538.762 cv
356 538.937 355.809 539.152 355.605 539.406 cv
355.605 542.203 li
355.961 542.637 356.301 542.969 356.625 543.191 cv
356.949 543.422 357.285 543.535 357.637 543.531 cv
357.957 543.535 358.234 543.457 358.469 543.297 cv
358.695 543.145 358.883 542.937 359.027 542.676 cv
359.172 542.422 359.277 542.133 359.344 541.812 cv
359.406 541.496 359.438 541.172 359.441 540.84 cv
cp
f
365.926 540.555 mo
365.926 540.758 365.902 540.895 365.855 540.973 cv
365.809 541.051 365.738 541.09 365.652 541.09 cv
362.395 541.09 li
362.301 541.09 362.234 541.051 362.188 540.969 cv
362.141 540.891 362.117 540.754 362.117 540.555 cv
362.117 540.359 362.141 540.219 362.188 540.141 cv
362.234 540.062 362.301 540.023 362.395 540.023 cv
365.652 540.023 li
365.691 540.023 365.73 540.031 365.766 540.047 cv
365.797 540.062 365.824 540.094 365.852 540.137 cv
365.871 540.184 365.891 540.238 365.906 540.305 cv
365.918 540.375 365.926 540.461 365.926 540.555 cv
cp
f
369.18 544.285 mo
369.176 544.328 369.168 544.363 369.148 544.395 cv
369.125 544.426 369.086 544.453 369.039 544.469 cv
368.984 544.488 368.918 544.5 368.832 544.516 cv
368.746 544.527 368.637 544.535 368.512 544.535 cv
368.383 544.535 368.277 544.527 368.191 544.516 cv
368.102 544.5 368.031 544.488 367.98 544.469 cv
367.926 544.453 367.891 544.426 367.871 544.395 cv
367.848 544.363 367.836 544.328 367.84 544.285 cv
367.84 534.605 li
367.836 534.566 367.848 534.531 367.875 534.496 cv
367.895 534.469 367.934 534.441 367.992 534.422 cv
368.043 534.406 368.113 534.391 368.203 534.375 cv
368.285 534.363 368.387 534.359 368.512 534.355 cv
368.637 534.359 368.746 534.363 368.832 534.375 cv
368.918 534.391 368.984 534.406 369.039 534.422 cv
369.086 534.441 369.125 534.469 369.148 534.496 cv
369.168 534.531 369.176 534.566 369.18 534.605 cv
cp
f
382.168 544.293 mo
382.164 544.34 382.156 544.375 382.137 544.398 cv
382.113 544.43 382.078 544.453 382.035 544.473 cv
381.984 544.492 381.918 544.504 381.84 544.52 cv
381.754 544.527 381.652 544.535 381.527 544.535 cv
381.395 544.535 381.285 544.527 381.207 544.52 cv
381.121 544.504 381.055 544.492 381.008 544.473 cv
380.953 544.453 380.918 544.43 380.902 544.398 cv
380.879 544.375 380.871 544.34 380.871 544.293 cv
380.871 540.031 li
380.871 539.738 380.844 539.469 380.793 539.223 cv
380.738 538.98 380.656 538.77 380.543 538.59 cv
380.43 538.414 380.285 538.277 380.109 538.184 cv
379.93 538.09 379.719 538.043 379.484 538.043 cv
379.188 538.043 378.891 538.16 378.594 538.387 cv
378.289 538.621 377.961 538.953 377.605 539.391 cv
377.605 544.293 li
377.602 544.34 377.59 544.375 377.574 544.398 cv
377.551 544.43 377.52 544.453 377.473 544.473 cv
377.422 544.492 377.355 544.504 377.273 544.52 cv
377.188 544.527 377.082 544.535 376.961 544.535 cv
376.84 544.535 376.738 544.527 376.652 544.52 cv
376.566 544.504 376.496 544.492 376.449 544.473 cv
376.395 544.453 376.363 544.43 376.348 544.398 cv
376.328 544.375 376.316 544.34 376.32 544.293 cv
376.32 540.031 li
376.316 539.738 376.289 539.469 376.234 539.223 cv
376.176 538.98 376.09 538.77 375.977 538.59 cv
375.863 538.414 375.719 538.277 375.547 538.184 cv
375.367 538.09 375.16 538.043 374.926 538.043 cv
374.625 538.043 374.328 538.16 374.027 538.387 cv
373.727 538.621 373.398 538.953 373.047 539.391 cv
373.047 544.293 li
373.043 544.34 373.031 544.375 373.016 544.398 cv
372.992 544.43 372.961 544.453 372.914 544.473 cv
372.867 544.492 372.801 544.504 372.723 544.52 cv
372.637 544.527 372.531 544.535 372.402 544.535 cv
372.273 544.535 372.168 544.527 372.09 544.52 cv
372.004 544.504 371.938 544.492 371.891 544.473 cv
371.836 544.453 371.805 544.43 371.789 544.398 cv
371.77 544.375 371.758 544.34 371.762 544.293 cv
371.762 537.281 li
371.758 537.242 371.766 537.207 371.785 537.176 cv
371.797 537.148 371.828 537.125 371.879 537.098 cv
371.922 537.078 371.984 537.062 372.059 537.051 cv
372.129 537.047 372.223 537.043 372.348 537.039 cv
372.457 537.043 372.555 537.047 372.633 537.051 cv
372.707 537.062 372.766 537.078 372.809 537.098 cv
372.848 537.125 372.875 537.148 372.895 537.176 cv
372.91 537.207 372.918 537.242 372.922 537.281 cv
372.922 538.207 li
373.313 537.766 373.695 537.445 374.07 537.238 cv
374.438 537.035 374.816 536.93 375.199 536.93 cv
375.488 536.93 375.746 536.965 375.98 537.031 cv
376.207 537.102 376.414 537.195 376.594 537.316 cv
376.77 537.437 376.918 537.582 377.047 537.75 cv
377.168 537.922 377.273 538.113 377.359 538.316 cv
377.59 538.066 377.813 537.852 378.023 537.672 cv
378.234 537.5 378.438 537.355 378.633 537.242 cv
378.828 537.137 379.016 537.059 379.199 537.004 cv
379.383 536.957 379.57 536.93 379.758 536.93 cv
380.211 536.93 380.59 537.012 380.895 537.168 cv
381.199 537.332 381.445 537.543 381.641 537.805 cv
381.828 538.07 381.965 538.379 382.047 538.734 cv
382.125 539.09 382.164 539.465 382.168 539.859 cv
cp
f
389.797 544.301 mo
389.793 544.363 389.773 544.41 389.734 544.441 cv
389.691 544.473 389.633 544.496 389.563 544.512 cv
389.484 544.527 389.379 544.535 389.242 544.535 cv
389.105 544.535 388.996 544.527 388.918 544.512 cv
388.832 544.496 388.773 544.473 388.742 544.441 cv
388.703 544.41 388.688 544.363 388.691 544.301 cv
388.691 543.602 li
388.383 543.93 388.039 544.184 387.664 544.363 cv
387.285 544.547 386.887 544.633 386.469 544.637 cv
386.094 544.633 385.762 544.586 385.465 544.492 cv
385.168 544.395 384.914 544.258 384.703 544.074 cv
384.492 543.895 384.328 543.672 384.211 543.406 cv
384.094 543.145 384.035 542.844 384.039 542.5 cv
384.035 542.109 384.113 541.766 384.277 541.473 cv
384.434 541.184 384.668 540.941 384.973 540.75 cv
385.273 540.559 385.641 540.414 386.078 540.316 cv
386.512 540.223 387.004 540.176 387.551 540.172 cv
388.52 540.172 li
388.52 539.625 li
388.516 539.355 388.488 539.117 388.434 538.91 cv
388.375 538.703 388.281 538.531 388.156 538.391 cv
388.023 538.254 387.859 538.148 387.66 538.078 cv
387.453 538.008 387.203 537.973 386.914 537.973 cv
386.594 537.973 386.309 538.012 386.059 538.086 cv
385.801 538.164 385.582 538.246 385.395 538.336 cv
385.207 538.43 385.047 538.516 384.922 538.586 cv
384.789 538.664 384.695 538.699 384.637 538.699 cv
384.594 538.699 384.559 538.691 384.527 538.668 cv
384.496 538.652 384.469 538.621 384.445 538.574 cv
384.422 538.535 384.402 538.48 384.395 538.414 cv
384.379 538.352 384.375 538.281 384.379 538.199 cv
384.375 538.074 384.383 537.969 384.406 537.891 cv
384.422 537.816 384.469 537.746 384.539 537.676 cv
384.609 537.609 384.73 537.531 384.902 537.441 cv
385.074 537.352 385.27 537.27 385.492 537.191 cv
385.715 537.121 385.961 537.059 386.227 537.004 cv
386.492 536.957 386.758 536.93 387.031 536.93 cv
387.531 536.93 387.961 536.988 388.313 537.102 cv
388.664 537.219 388.949 537.387 389.172 537.605 cv
389.387 537.828 389.547 538.102 389.648 538.426 cv
389.746 538.758 389.793 539.141 389.797 539.57 cv
cp
388.52 541.098 mo
387.418 541.098 li
387.063 541.102 386.758 541.133 386.5 541.187 cv
386.238 541.25 386.023 541.336 385.852 541.453 cv
385.68 541.57 385.555 541.711 385.477 541.875 cv
385.395 542.039 385.352 542.227 385.355 542.437 cv
385.352 542.805 385.469 543.098 385.699 543.309 cv
385.93 543.527 386.254 543.633 386.672 543.633 cv
387.008 543.633 387.32 543.547 387.609 543.375 cv
387.898 543.203 388.199 542.941 388.52 542.586 cv
cp
f
398.016 537.598 mo
398.012 537.781 397.988 537.914 397.941 537.992 cv
397.891 538.074 397.828 538.113 397.754 538.113 cv
396.746 538.113 li
396.926 538.301 397.055 538.508 397.129 538.734 cv
397.199 538.961 397.234 539.195 397.238 539.437 cv
397.234 539.844 397.168 540.203 397.043 540.516 cv
396.91 540.828 396.727 541.094 396.484 541.305 cv
396.242 541.523 395.953 541.687 395.625 541.801 cv
395.289 541.918 394.922 541.977 394.52 541.973 cv
394.23 541.977 393.957 541.937 393.703 541.859 cv
393.441 541.785 393.246 541.691 393.109 541.574 cv
393.016 541.672 392.938 541.777 392.879 541.895 cv
392.816 542.016 392.785 542.152 392.789 542.305 cv
392.785 542.488 392.871 542.641 393.043 542.758 cv
393.211 542.883 393.434 542.945 393.715 542.953 cv
395.547 543.031 li
395.895 543.043 396.211 543.09 396.504 543.176 cv
396.793 543.262 397.047 543.387 397.262 543.543 cv
397.473 543.703 397.641 543.895 397.762 544.125 cv
397.879 544.359 397.938 544.629 397.941 544.934 cv
397.938 545.254 397.871 545.559 397.738 545.852 cv
397.602 546.141 397.395 546.395 397.117 546.617 cv
396.836 546.836 396.48 547.012 396.051 547.141 cv
395.621 547.266 395.113 547.328 394.527 547.332 cv
393.957 547.328 393.473 547.281 393.078 547.187 cv
392.68 547.09 392.355 546.957 392.102 546.793 cv
391.848 546.625 391.664 546.43 391.551 546.199 cv
391.434 545.965 391.375 545.711 391.379 545.445 cv
391.375 545.273 391.395 545.109 391.441 544.949 cv
391.48 544.785 391.543 544.633 391.629 544.488 cv
391.711 544.344 391.82 544.207 391.949 544.07 cv
392.074 543.941 392.219 543.809 392.391 543.68 cv
392.133 543.551 391.945 543.387 391.824 543.187 cv
391.703 542.992 391.645 542.781 391.645 542.547 cv
391.645 542.234 391.707 541.949 391.836 541.699 cv
391.965 541.449 392.125 541.227 392.32 541.027 cv
392.156 540.836 392.031 540.621 391.938 540.379 cv
391.844 540.141 391.797 539.848 391.797 539.5 cv
391.797 539.105 391.863 538.746 392 538.426 cv
392.133 538.109 392.32 537.844 392.563 537.625 cv
392.801 537.41 393.086 537.242 393.422 537.121 cv
393.754 537.008 394.121 536.949 394.52 536.945 cv
394.73 536.949 394.93 536.961 395.113 536.98 cv
395.297 537.008 395.469 537.039 395.633 537.078 cv
397.754 537.078 li
397.84 537.082 397.906 537.125 397.949 537.207 cv
397.992 537.297 398.012 537.426 398.016 537.598 cv
cp
396.008 539.445 mo
396.004 538.973 395.871 538.602 395.613 538.328 cv
395.348 538.062 394.977 537.926 394.496 537.926 cv
394.242 537.926 394.023 537.969 393.844 538.051 cv
393.656 538.137 393.504 538.25 393.383 538.395 cv
393.262 538.543 393.172 538.711 393.113 538.898 cv
393.051 539.086 393.02 539.285 393.023 539.492 cv
393.02 539.957 393.152 540.32 393.414 540.586 cv
393.676 540.852 394.043 540.984 394.52 540.98 cv
394.77 540.984 394.988 540.945 395.18 540.859 cv
395.363 540.781 395.52 540.668 395.645 540.527 cv
395.766 540.387 395.855 540.223 395.918 540.031 cv
395.973 539.848 396.004 539.652 396.008 539.445 cv
cp
396.652 545.004 mo
396.648 544.699 396.523 544.469 396.281 544.305 cv
396.031 544.145 395.699 544.055 395.281 544.043 cv
393.465 543.98 li
393.297 544.113 393.16 544.238 393.059 544.352 cv
392.949 544.469 392.867 544.578 392.805 544.687 cv
392.742 544.793 392.699 544.898 392.676 545.004 cv
392.652 545.105 392.641 545.211 392.641 545.32 cv
392.641 545.656 392.809 545.91 393.152 546.09 cv
393.492 546.262 393.973 546.352 394.59 546.352 cv
394.977 546.352 395.301 546.312 395.566 546.238 cv
395.824 546.16 396.035 546.059 396.199 545.937 cv
396.355 545.809 396.473 545.668 396.547 545.508 cv
396.613 545.348 396.648 545.18 396.652 545.004 cv
cp
f
405.578 540.484 mo
405.574 540.687 405.523 540.828 405.426 540.914 cv
405.32 541 405.203 541.043 405.078 541.043 cv
400.461 541.043 li
400.457 541.434 400.496 541.785 400.578 542.098 cv
400.652 542.41 400.785 542.68 400.969 542.898 cv
401.148 543.125 401.383 543.297 401.68 543.414 cv
401.969 543.539 402.328 543.598 402.754 543.594 cv
403.086 543.598 403.383 543.57 403.645 543.512 cv
403.906 543.461 404.133 543.398 404.324 543.328 cv
404.512 543.262 404.668 543.203 404.793 543.145 cv
404.914 543.094 405.008 543.066 405.07 543.062 cv
405.105 543.066 405.137 543.074 405.168 543.09 cv
405.195 543.109 405.219 543.137 405.238 543.172 cv
405.25 543.211 405.262 543.262 405.273 543.324 cv
405.277 543.391 405.281 543.469 405.285 543.562 cv
405.281 543.633 405.277 543.691 405.277 543.738 cv
405.27 543.785 405.266 543.828 405.258 543.867 cv
405.25 543.906 405.234 543.941 405.219 543.973 cv
405.195 544.004 405.172 544.035 405.148 544.062 cv
405.117 544.094 405.035 544.141 404.895 544.203 cv
404.754 544.27 404.57 544.332 404.348 544.395 cv
404.121 544.457 403.863 544.512 403.57 544.562 cv
403.277 544.609 402.965 544.633 402.633 544.637 cv
402.055 544.633 401.547 544.555 401.117 544.395 cv
400.68 544.234 400.316 543.996 400.023 543.68 cv
399.723 543.363 399.5 542.969 399.352 542.488 cv
399.203 542.012 399.129 541.453 399.129 540.816 cv
399.129 540.219 399.203 539.68 399.359 539.195 cv
399.512 538.719 399.738 538.309 400.035 537.973 cv
400.328 537.637 400.684 537.379 401.098 537.199 cv
401.512 537.02 401.977 536.93 402.492 536.93 cv
403.043 536.93 403.512 537.02 403.898 537.195 cv
404.285 537.375 404.602 537.613 404.855 537.91 cv
405.102 538.211 405.285 538.562 405.402 538.961 cv
405.516 539.367 405.574 539.797 405.578 540.25 cv
cp
404.285 540.102 mo
404.301 539.426 404.148 538.895 403.832 538.512 cv
403.516 538.129 403.047 537.937 402.43 537.934 cv
402.105 537.937 401.824 537.996 401.586 538.113 cv
401.344 538.234 401.145 538.395 400.984 538.59 cv
400.82 538.789 400.695 539.02 400.609 539.281 cv
400.52 539.543 400.469 539.816 400.461 540.102 cv
cp
f
411.945 542.383 mo
411.941 542.746 411.875 543.066 411.746 543.344 cv
411.613 543.625 411.426 543.859 411.184 544.051 cv
410.938 544.246 410.645 544.391 410.309 544.488 cv
409.969 544.586 409.598 544.633 409.195 544.637 cv
408.941 544.633 408.703 544.613 408.48 544.578 cv
408.254 544.535 408.055 544.488 407.875 544.43 cv
407.695 544.371 407.543 544.309 407.418 544.242 cv
407.293 544.18 407.199 544.121 407.145 544.066 cv
407.086 544.016 407.047 543.945 407.023 543.848 cv
406.996 543.758 406.984 543.629 406.984 543.469 cv
406.984 543.371 406.988 543.289 407 543.219 cv
407.008 543.152 407.02 543.098 407.039 543.055 cv
407.051 543.016 407.074 542.984 407.102 542.965 cv
407.129 542.949 407.16 542.941 407.199 542.937 cv
407.254 542.941 407.34 542.977 407.453 543.043 cv
407.563 543.117 407.699 543.195 407.867 543.273 cv
408.027 543.359 408.219 543.434 408.445 543.504 cv
408.664 543.574 408.922 543.609 409.219 543.609 cv
409.434 543.609 409.633 543.586 409.813 543.539 cv
409.988 543.492 410.141 543.426 410.27 543.332 cv
410.398 543.246 410.5 543.129 410.57 542.984 cv
410.641 542.848 410.676 542.68 410.676 542.484 cv
410.676 542.289 410.625 542.125 410.523 541.988 cv
410.422 541.855 410.285 541.734 410.121 541.629 cv
409.953 541.527 409.77 541.437 409.563 541.352 cv
409.352 541.273 409.137 541.187 408.918 541.098 cv
408.699 541.012 408.484 540.91 408.273 540.797 cv
408.063 540.687 407.871 540.555 407.707 540.391 cv
407.535 540.234 407.402 540.039 407.305 539.812 cv
407.199 539.59 407.148 539.324 407.152 539.012 cv
407.148 538.738 407.203 538.473 407.313 538.219 cv
407.418 537.969 407.578 537.75 407.793 537.559 cv
408.004 537.371 408.27 537.219 408.59 537.102 cv
408.91 536.988 409.281 536.93 409.711 536.93 cv
409.895 536.93 410.082 536.945 410.27 536.977 cv
410.453 537.008 410.621 537.047 410.777 537.094 cv
410.926 537.141 411.055 537.191 411.164 537.246 cv
411.266 537.301 411.348 537.352 411.406 537.391 cv
411.457 537.437 411.492 537.473 411.516 537.5 cv
411.531 537.531 411.547 537.566 411.555 537.602 cv
411.563 537.645 411.57 537.691 411.578 537.746 cv
411.586 537.805 411.59 537.875 411.59 537.957 cv
411.59 538.047 411.586 538.125 411.578 538.187 cv
411.57 538.258 411.555 538.309 411.539 538.348 cv
411.516 538.391 411.496 538.422 411.473 538.437 cv
411.445 538.457 411.414 538.465 411.387 538.465 cv
411.336 538.465 411.27 538.437 411.184 538.379 cv
411.094 538.324 410.98 538.262 410.84 538.195 cv
410.699 538.133 410.531 538.074 410.344 538.012 cv
410.152 537.957 409.938 537.926 409.695 537.926 cv
409.473 537.926 409.281 537.953 409.117 538 cv
408.949 538.055 408.813 538.125 408.707 538.211 cv
408.602 538.305 408.52 538.41 408.469 538.535 cv
408.41 538.66 408.383 538.797 408.387 538.941 cv
408.383 539.145 408.434 539.312 408.539 539.449 cv
408.641 539.59 408.777 539.711 408.945 539.812 cv
409.109 539.918 409.301 540.012 409.516 540.094 cv
409.727 540.18 409.941 540.266 410.164 540.352 cv
410.383 540.441 410.602 540.543 410.82 540.648 cv
411.035 540.758 411.227 540.887 411.395 541.043 cv
411.559 541.199 411.691 541.387 411.793 541.605 cv
411.891 541.824 411.941 542.086 411.945 542.383 cv
cp
f
132.727 13.703 mo
132.723 14.238 132.625 14.703 132.43 15.102 cv
132.23 15.5 131.961 15.836 131.625 16.102 cv
131.285 16.375 130.891 16.574 130.441 16.707 cv
129.984 16.84 129.5 16.906 128.988 16.91 cv
128.637 16.906 128.313 16.879 128.016 16.824 cv
127.715 16.766 127.453 16.699 127.227 16.617 cv
126.996 16.539 126.805 16.453 126.652 16.363 cv
126.496 16.277 126.387 16.199 126.32 16.129 cv
126.25 16.062 126.199 15.965 126.176 15.836 cv
126.145 15.711 126.133 15.527 126.133 15.285 cv
126.133 15.125 126.137 14.992 126.148 14.883 cv
126.156 14.777 126.172 14.687 126.199 14.617 cv
126.219 14.551 126.25 14.504 126.293 14.473 cv
126.328 14.449 126.375 14.434 126.43 14.43 cv
126.5 14.434 126.602 14.477 126.738 14.559 cv
126.867 14.648 127.039 14.742 127.25 14.844 cv
127.457 14.945 127.703 15.039 127.992 15.125 cv
128.277 15.211 128.613 15.254 128.996 15.254 cv
129.242 15.254 129.465 15.227 129.668 15.164 cv
129.863 15.109 130.031 15.023 130.172 14.914 cv
130.305 14.805 130.41 14.672 130.488 14.508 cv
130.559 14.352 130.598 14.172 130.598 13.969 cv
130.598 13.742 130.535 13.543 130.41 13.379 cv
130.285 13.215 130.121 13.07 129.922 12.941 cv
129.719 12.816 129.492 12.695 129.238 12.582 cv
128.98 12.473 128.715 12.355 128.449 12.227 cv
128.176 12.105 127.914 11.965 127.66 11.801 cv
127.406 11.645 127.18 11.453 126.98 11.23 cv
126.777 11.012 126.613 10.75 126.492 10.449 cv
126.363 10.148 126.301 9.789 126.305 9.36298 cv
126.301 8.883 126.391 8.45697 126.574 8.086 cv
126.75 7.72302 126.992 7.41803 127.297 7.17603 cv
127.598 6.93701 127.957 6.758 128.375 6.633 cv
128.785 6.51599 129.223 6.453 129.691 6.453 cv
129.926 6.453 130.168 6.47302 130.41 6.508 cv
130.648 6.547 130.871 6.59802 131.082 6.65601 cv
131.289 6.72302 131.473 6.79303 131.633 6.867 cv
131.793 6.94501 131.898 7.008 131.953 7.05902 cv
132 7.11298 132.035 7.15601 132.059 7.19098 cv
132.074 7.22998 132.09 7.28101 132.105 7.336 cv
132.113 7.39801 132.125 7.47302 132.133 7.56201 cv
132.137 7.65601 132.137 7.77002 132.141 7.90198 cv
132.137 8.05499 132.133 8.18402 132.129 8.28497 cv
132.117 8.39502 132.105 8.47998 132.09 8.54303 cv
132.07 8.61298 132.043 8.65997 132.012 8.69098 cv
131.973 8.72302 131.93 8.73798 131.875 8.73798 cv
131.816 8.73798 131.723 8.703 131.602 8.62903 cv
131.477 8.55902 131.324 8.47998 131.145 8.39099 cv
130.957 8.30902 130.746 8.22998 130.512 8.15601 cv
130.27 8.09003 130.008 8.05499 129.723 8.05103 cv
129.496 8.05499 129.301 8.08197 129.137 8.133 cv
128.969 8.19098 128.828 8.26599 128.719 8.35901 cv
128.602 8.45697 128.52 8.57397 128.469 8.70697 cv
128.41 8.84802 128.383 8.98798 128.387 9.13702 cv
128.383 9.36298 128.445 9.55902 128.57 9.71899 cv
128.691 9.88702 128.855 10.031 129.063 10.156 cv
129.266 10.285 129.496 10.406 129.762 10.516 cv
130.02 10.629 130.285 10.746 130.559 10.871 cv
130.824 10.996 131.09 11.137 131.352 11.293 cv
131.609 11.453 131.84 11.645 132.047 11.863 cv
132.246 12.086 132.41 12.348 132.539 12.645 cv
132.66 12.949 132.723 13.301 132.727 13.703 cv
cp
f
139.449 15.355 mo
139.445 15.492 139.441 15.605 139.438 15.695 cv
139.426 15.789 139.414 15.867 139.406 15.926 cv
139.391 15.992 139.375 16.043 139.359 16.078 cv
139.336 16.121 139.297 16.168 139.238 16.227 cv
139.172 16.289 139.066 16.363 138.918 16.445 cv
138.77 16.535 138.598 16.613 138.406 16.676 cv
138.211 16.746 138 16.797 137.777 16.84 cv
137.547 16.879 137.316 16.898 137.078 16.902 cv
136.539 16.898 136.063 16.82 135.652 16.652 cv
135.238 16.488 134.891 16.242 134.613 15.914 cv
134.328 15.594 134.117 15.195 133.977 14.727 cv
133.832 14.258 133.762 13.723 133.762 13.117 cv
133.762 12.422 133.848 11.82 134.023 11.312 cv
134.195 10.809 134.438 10.387 134.75 10.051 cv
135.059 9.71899 135.43 9.47302 135.859 9.30902 cv
136.285 9.14801 136.754 9.06598 137.266 9.06598 cv
137.473 9.06598 137.676 9.086 137.879 9.12097 cv
138.078 9.15997 138.266 9.211 138.441 9.27002 cv
138.613 9.336 138.77 9.40601 138.906 9.47998 cv
139.043 9.56201 139.141 9.62903 139.199 9.68402 cv
139.254 9.742 139.293 9.789 139.32 9.828 cv
139.34 9.867 139.359 9.91803 139.375 9.97998 cv
139.387 10.043 139.395 10.121 139.406 10.211 cv
139.41 10.305 139.414 10.414 139.418 10.543 cv
139.414 10.844 139.391 11.055 139.34 11.176 cv
139.285 11.301 139.215 11.363 139.137 11.359 cv
139.047 11.363 138.957 11.328 138.859 11.25 cv
138.758 11.18 138.641 11.098 138.508 11.012 cv
138.371 10.926 138.207 10.848 138.023 10.77 cv
137.832 10.699 137.609 10.66 137.352 10.66 cv
136.84 10.66 136.449 10.859 136.18 11.25 cv
135.906 11.645 135.77 12.219 135.773 12.977 cv
135.77 13.355 135.805 13.687 135.875 13.969 cv
135.941 14.258 136.043 14.496 136.176 14.687 cv
136.309 14.879 136.473 15.023 136.676 15.117 cv
136.871 15.219 137.105 15.266 137.375 15.262 cv
137.645 15.266 137.879 15.227 138.074 15.141 cv
138.27 15.062 138.438 14.973 138.586 14.875 cv
138.727 14.777 138.848 14.687 138.949 14.605 cv
139.043 14.527 139.129 14.488 139.199 14.484 cv
139.246 14.488 139.285 14.5 139.316 14.523 cv
139.348 14.551 139.371 14.598 139.391 14.668 cv
139.406 14.738 139.422 14.828 139.434 14.937 cv
139.441 15.047 139.445 15.187 139.449 15.355 cv
cp
f
146.715 16.488 mo
146.715 16.566 146.688 16.621 146.637 16.66 cv
146.582 16.703 146.5 16.73 146.391 16.75 cv
146.277 16.766 146.113 16.777 145.895 16.777 cv
145.66 16.777 145.488 16.766 145.387 16.75 cv
145.277 16.73 145.203 16.703 145.16 16.66 cv
145.113 16.621 145.09 16.566 145.094 16.488 cv
145.094 15.934 li
144.805 16.242 144.48 16.484 144.113 16.652 cv
143.746 16.824 143.336 16.906 142.891 16.91 cv
142.516 16.906 142.176 16.859 141.871 16.766 cv
141.559 16.672 141.293 16.531 141.07 16.336 cv
140.84 16.148 140.664 15.91 140.543 15.629 cv
140.414 15.348 140.352 15.023 140.355 14.648 cv
140.352 14.246 140.43 13.891 140.594 13.59 cv
140.75 13.293 140.988 13.047 141.301 12.848 cv
141.613 12.656 142.004 12.512 142.477 12.414 cv
142.941 12.324 143.484 12.277 144.109 12.273 cv
144.789 12.273 li
144.789 11.852 li
144.785 11.637 144.766 11.445 144.723 11.277 cv
144.676 11.117 144.602 10.98 144.504 10.871 cv
144.398 10.762 144.262 10.684 144.098 10.629 cv
143.926 10.582 143.719 10.555 143.469 10.551 cv
143.141 10.555 142.848 10.59 142.59 10.66 cv
142.332 10.734 142.102 10.816 141.906 10.902 cv
141.707 10.992 141.543 11.07 141.414 11.141 cv
141.277 11.215 141.172 11.254 141.09 11.25 cv
141.031 11.254 140.98 11.234 140.938 11.195 cv
140.891 11.16 140.852 11.109 140.828 11.039 cv
140.797 10.977 140.777 10.895 140.762 10.793 cv
140.746 10.699 140.738 10.59 140.738 10.465 cv
140.738 10.309 140.75 10.18 140.777 10.082 cv
140.801 9.992 140.852 9.90601 140.926 9.828 cv
140.996 9.75403 141.121 9.672 141.309 9.578 cv
141.488 9.48798 141.703 9.40198 141.945 9.32397 cv
142.188 9.24597 142.453 9.18402 142.746 9.133 cv
143.031 9.086 143.328 9.06201 143.641 9.05902 cv
144.184 9.06201 144.652 9.11298 145.043 9.21899 cv
145.43 9.328 145.746 9.492 145.996 9.711 cv
146.242 9.93402 146.426 10.219 146.543 10.566 cv
146.656 10.914 146.715 11.328 146.715 11.805 cv
cp
144.789 13.508 mo
144.039 13.508 li
143.719 13.508 143.449 13.531 143.227 13.578 cv
143 13.625 142.816 13.695 142.68 13.789 cv
142.535 13.883 142.434 13.996 142.371 14.129 cv
142.305 14.262 142.273 14.414 142.273 14.586 cv
142.273 14.875 142.363 15.105 142.551 15.27 cv
142.73 15.441 142.988 15.523 143.32 15.52 cv
143.594 15.523 143.848 15.453 144.082 15.309 cv
144.313 15.172 144.547 14.969 144.789 14.695 cv
cp
f
150.648 16.465 mo
150.645 16.52 150.629 16.562 150.602 16.602 cv
150.566 16.641 150.516 16.676 150.441 16.699 cv
150.363 16.727 150.262 16.742 150.141 16.758 cv
150.012 16.77 149.852 16.777 149.664 16.777 cv
149.469 16.777 149.313 16.77 149.191 16.758 cv
149.063 16.742 148.961 16.727 148.891 16.699 cv
148.813 16.676 148.762 16.641 148.73 16.602 cv
148.699 16.562 148.684 16.52 148.684 16.465 cv
148.684 6.203 li
148.684 6.15198 148.699 6.10498 148.73 6.06201 cv
148.762 6.02301 148.813 5.98798 148.891 5.95697 cv
148.961 5.92999 149.063 5.90601 149.191 5.89099 cv
149.313 5.875 149.469 5.867 149.664 5.867 cv
149.852 5.867 150.012 5.875 150.141 5.89099 cv
150.262 5.90601 150.363 5.92999 150.441 5.95697 cv
150.516 5.98798 150.566 6.02301 150.602 6.06201 cv
150.629 6.10498 150.645 6.15198 150.648 6.203 cv
cp
f
154.609 16.465 mo
154.605 16.52 154.59 16.562 154.563 16.602 cv
154.527 16.641 154.477 16.676 154.402 16.699 cv
154.324 16.727 154.223 16.742 154.102 16.758 cv
153.973 16.77 153.813 16.777 153.625 16.777 cv
153.43 16.777 153.273 16.77 153.152 16.758 cv
153.023 16.742 152.922 16.727 152.852 16.699 cv
152.773 16.676 152.723 16.641 152.691 16.602 cv
152.66 16.562 152.645 16.52 152.645 16.465 cv
152.645 9.52002 li
152.645 9.46899 152.66 9.422 152.691 9.383 cv
152.723 9.34399 152.773 9.31201 152.852 9.28101 cv
152.922 9.258 153.023 9.23401 153.152 9.21503 cv
153.273 9.203 153.43 9.19501 153.625 9.19098 cv
153.813 9.19501 153.973 9.203 154.102 9.21503 cv
154.223 9.23401 154.324 9.258 154.402 9.28101 cv
154.477 9.31201 154.527 9.34399 154.563 9.383 cv
154.59 9.422 154.605 9.46899 154.609 9.52002 cv
cp
154.758 7.14502 mo
154.754 7.54303 154.672 7.81598 154.516 7.96503 cv
154.352 8.117 154.055 8.19501 153.617 8.19098 cv
153.176 8.19501 152.879 8.12097 152.727 7.97302 cv
152.57 7.828 152.492 7.56598 152.496 7.18402 cv
152.492 6.79303 152.57 6.52002 152.734 6.36298 cv
152.891 6.21503 153.191 6.13702 153.633 6.133 cv
154.066 6.13702 154.363 6.211 154.523 6.35498 cv
154.676 6.508 154.754 6.77002 154.758 7.14502 cv
cp
f
163.227 16.465 mo
163.223 16.52 163.207 16.562 163.18 16.602 cv
163.145 16.641 163.094 16.676 163.023 16.699 cv
162.949 16.727 162.848 16.742 162.723 16.758 cv
162.594 16.77 162.438 16.777 162.25 16.777 cv
162.055 16.777 161.895 16.77 161.77 16.758 cv
161.641 16.742 161.539 16.727 161.469 16.699 cv
161.395 16.676 161.344 16.641 161.316 16.602 cv
161.281 16.562 161.266 16.52 161.27 16.465 cv
161.27 12.492 li
161.266 12.156 161.242 11.891 161.195 11.695 cv
161.145 11.508 161.07 11.34 160.98 11.199 cv
160.883 11.062 160.762 10.957 160.617 10.883 cv
160.465 10.809 160.293 10.773 160.098 10.77 cv
159.844 10.773 159.59 10.863 159.34 11.043 cv
159.082 11.227 158.816 11.492 158.543 11.836 cv
158.543 16.465 li
158.539 16.52 158.523 16.562 158.496 16.602 cv
158.461 16.641 158.41 16.676 158.336 16.699 cv
158.258 16.727 158.156 16.742 158.035 16.758 cv
157.906 16.77 157.746 16.777 157.559 16.777 cv
157.363 16.777 157.207 16.77 157.086 16.758 cv
156.957 16.742 156.855 16.727 156.785 16.699 cv
156.707 16.676 156.656 16.641 156.625 16.602 cv
156.594 16.562 156.578 16.52 156.578 16.465 cv
156.578 9.50403 li
156.578 9.45697 156.59 9.40997 156.617 9.367 cv
156.641 9.33197 156.688 9.30103 156.758 9.27002 cv
156.824 9.24597 156.91 9.22699 157.02 9.211 cv
157.121 9.203 157.258 9.19501 157.422 9.19098 cv
157.586 9.19501 157.723 9.203 157.832 9.211 cv
157.941 9.22699 158.023 9.24597 158.086 9.27002 cv
158.141 9.30103 158.184 9.33197 158.215 9.367 cv
158.238 9.40997 158.254 9.45697 158.254 9.50403 cv
158.254 10.309 li
158.637 9.89502 159.027 9.58197 159.43 9.37097 cv
159.824 9.164 160.238 9.06201 160.676 9.05902 cv
161.145 9.06201 161.543 9.14099 161.871 9.29303 cv
162.191 9.453 162.457 9.664 162.66 9.92999 cv
162.859 10.199 163.004 10.512 163.094 10.871 cv
163.18 11.23 163.223 11.664 163.227 12.164 cv
cp
f
171.434 9.98798 mo
171.43 10.242 171.402 10.426 171.348 10.543 cv
171.289 10.664 171.219 10.727 171.137 10.723 cv
170.316 10.723 li
170.43 10.848 170.512 10.988 170.563 11.145 cv
170.609 11.309 170.633 11.473 170.637 11.641 cv
170.633 12.051 170.566 12.41 170.434 12.723 cv
170.297 13.039 170.102 13.305 169.852 13.52 cv
169.598 13.738 169.293 13.902 168.941 14.012 cv
168.582 14.125 168.188 14.184 167.75 14.18 cv
167.523 14.184 167.309 14.156 167.109 14.098 cv
166.902 14.047 166.746 13.98 166.641 13.906 cv
166.574 13.977 166.52 14.059 166.473 14.148 cv
166.422 14.246 166.395 14.352 166.398 14.461 cv
166.395 14.617 166.461 14.738 166.598 14.832 cv
166.727 14.926 166.914 14.98 167.156 14.988 cv
168.852 15.051 li
169.246 15.07 169.598 15.125 169.906 15.219 cv
170.215 15.316 170.473 15.453 170.688 15.625 cv
170.895 15.801 171.059 16.012 171.172 16.254 cv
171.281 16.504 171.336 16.777 171.34 17.09 cv
171.336 17.43 171.262 17.754 171.113 18.062 cv
170.961 18.363 170.734 18.629 170.434 18.852 cv
170.133 19.074 169.754 19.25 169.301 19.383 cv
168.844 19.512 168.313 19.578 167.703 19.578 cv
167.109 19.578 166.602 19.531 166.184 19.437 cv
165.766 19.344 165.422 19.211 165.156 19.047 cv
164.883 18.875 164.688 18.676 164.57 18.449 cv
164.445 18.215 164.387 17.965 164.387 17.691 cv
164.387 17.52 164.406 17.355 164.453 17.199 cv
164.492 17.043 164.559 16.891 164.648 16.75 cv
164.73 16.605 164.836 16.473 164.965 16.34 cv
165.086 16.211 165.23 16.086 165.395 15.965 cv
165.168 15.848 164.992 15.684 164.875 15.477 cv
164.75 15.273 164.691 15.051 164.691 14.801 cv
164.691 14.5 164.762 14.219 164.902 13.965 cv
165.043 13.715 165.223 13.488 165.449 13.281 cv
165.262 13.102 165.117 12.883 165.012 12.625 cv
164.898 12.371 164.844 12.055 164.848 11.672 cv
164.844 11.27 164.914 10.906 165.063 10.586 cv
165.203 10.27 165.402 10 165.66 9.77301 cv
165.91 9.55499 166.215 9.383 166.57 9.26599 cv
166.922 9.14801 167.313 9.09003 167.742 9.09003 cv
167.957 9.09003 168.168 9.10498 168.371 9.12903 cv
168.57 9.15997 168.754 9.19501 168.93 9.23798 cv
171.137 9.23798 li
171.223 9.242 171.293 9.30103 171.352 9.40997 cv
171.402 9.52698 171.43 9.71899 171.434 9.98798 cv
cp
168.914 11.633 mo
168.91 11.258 168.805 10.969 168.602 10.762 cv
168.391 10.555 168.098 10.449 167.719 10.449 cv
167.523 10.449 167.355 10.484 167.211 10.547 cv
167.063 10.617 166.941 10.703 166.848 10.812 cv
166.75 10.922 166.676 11.051 166.633 11.199 cv
166.582 11.348 166.559 11.504 166.563 11.664 cv
166.559 12.02 166.664 12.301 166.875 12.504 cv
167.082 12.715 167.371 12.816 167.742 12.812 cv
167.938 12.816 168.109 12.785 168.258 12.719 cv
168.402 12.66 168.523 12.574 168.621 12.461 cv
168.715 12.355 168.789 12.23 168.84 12.082 cv
168.887 11.941 168.91 11.789 168.914 11.633 cv
cp
169.375 17.191 mo
169.371 16.953 169.277 16.777 169.094 16.652 cv
168.902 16.531 168.645 16.461 168.32 16.449 cv
166.922 16.41 li
166.785 16.512 166.676 16.605 166.598 16.695 cv
166.512 16.785 166.449 16.871 166.402 16.957 cv
166.352 17.039 166.316 17.121 166.305 17.199 cv
166.285 17.277 166.277 17.355 166.281 17.441 cv
166.277 17.699 166.41 17.898 166.676 18.035 cv
166.938 18.168 167.309 18.234 167.789 18.238 cv
168.082 18.234 168.332 18.207 168.539 18.148 cv
168.738 18.086 168.902 18.004 169.031 17.91 cv
169.152 17.809 169.242 17.699 169.297 17.578 cv
169.348 17.453 169.371 17.324 169.375 17.191 cv
cp
f
177.59 14.5 mo
177.59 14.895 177.516 15.242 177.367 15.543 cv
177.219 15.848 177.008 16.102 176.742 16.301 cv
176.469 16.508 176.148 16.656 175.781 16.758 cv
175.406 16.855 175.008 16.906 174.578 16.91 cv
174.316 16.906 174.066 16.887 173.832 16.852 cv
173.594 16.809 173.383 16.762 173.199 16.703 cv
173.008 16.645 172.852 16.582 172.73 16.52 cv
172.602 16.457 172.512 16.398 172.457 16.344 cv
172.398 16.289 172.352 16.203 172.324 16.086 cv
172.289 15.969 172.273 15.797 172.277 15.566 cv
172.273 15.418 172.281 15.297 172.293 15.203 cv
172.301 15.113 172.316 15.039 172.34 14.984 cv
172.359 14.93 172.383 14.895 172.418 14.875 cv
172.445 14.859 172.484 14.852 172.535 14.848 cv
172.59 14.852 172.676 14.883 172.789 14.945 cv
172.898 15.012 173.039 15.082 173.207 15.16 cv
173.371 15.238 173.563 15.312 173.785 15.379 cv
174.004 15.449 174.254 15.484 174.539 15.48 cv
174.711 15.484 174.871 15.465 175.012 15.426 cv
175.148 15.391 175.266 15.34 175.371 15.27 cv
175.469 15.207 175.547 15.121 175.602 15.012 cv
175.652 14.91 175.68 14.789 175.68 14.656 cv
175.68 14.5 175.629 14.367 175.535 14.254 cv
175.434 14.145 175.309 14.047 175.152 13.961 cv
174.992 13.879 174.813 13.801 174.613 13.727 cv
174.41 13.656 174.203 13.574 173.996 13.484 cv
173.781 13.398 173.574 13.297 173.379 13.18 cv
173.176 13.066 173 12.926 172.844 12.758 cv
172.684 12.594 172.555 12.395 172.461 12.156 cv
172.363 11.926 172.316 11.645 172.316 11.312 cv
172.316 10.984 172.379 10.68 172.512 10.398 cv
172.637 10.121 172.824 9.883 173.074 9.68402 cv
173.316 9.48798 173.613 9.336 173.965 9.22302 cv
174.313 9.117 174.707 9.06201 175.148 9.05902 cv
175.363 9.06201 175.578 9.078 175.785 9.10498 cv
175.988 9.14099 176.172 9.17999 176.344 9.22302 cv
176.508 9.27301 176.648 9.32397 176.766 9.375 cv
176.875 9.43402 176.957 9.47998 177.012 9.51599 cv
177.059 9.55902 177.094 9.59802 177.117 9.633 cv
177.133 9.67603 177.148 9.72302 177.164 9.77301 cv
177.172 9.83197 177.184 9.89801 177.191 9.97699 cv
177.199 10.059 177.203 10.16 177.203 10.277 cv
177.203 10.422 177.199 10.535 177.191 10.621 cv
177.184 10.711 177.168 10.781 177.152 10.832 cv
177.129 10.883 177.105 10.918 177.078 10.934 cv
177.043 10.957 177.008 10.965 176.969 10.961 cv
176.922 10.965 176.848 10.937 176.75 10.883 cv
176.648 10.828 176.523 10.77 176.379 10.707 cv
176.227 10.645 176.055 10.586 175.863 10.531 cv
175.664 10.477 175.441 10.449 175.195 10.449 cv
175.016 10.449 174.863 10.469 174.734 10.504 cv
174.602 10.543 174.496 10.594 174.414 10.66 cv
174.328 10.73 174.266 10.812 174.227 10.898 cv
174.184 10.992 174.16 11.086 174.164 11.187 cv
174.16 11.352 174.211 11.488 174.313 11.594 cv
174.41 11.707 174.539 11.805 174.703 11.883 cv
174.859 11.969 175.043 12.047 175.254 12.117 cv
175.457 12.195 175.668 12.273 175.879 12.355 cv
176.09 12.445 176.297 12.547 176.504 12.656 cv
176.707 12.773 176.891 12.914 177.055 13.078 cv
177.215 13.25 177.344 13.449 177.441 13.676 cv
177.539 13.91 177.59 14.184 177.59 14.5 cv
cp
f
189.719 12.914 mo
189.715 13.512 189.637 14.051 189.484 14.539 cv
189.324 15.027 189.09 15.449 188.773 15.801 cv
188.453 16.156 188.055 16.43 187.578 16.621 cv
187.102 16.812 186.543 16.906 185.902 16.91 cv
185.281 16.906 184.742 16.824 184.285 16.652 cv
183.828 16.484 183.449 16.234 183.148 15.902 cv
182.844 15.578 182.617 15.176 182.477 14.695 cv
182.328 14.219 182.258 13.672 182.258 13.055 cv
182.258 12.465 182.336 11.922 182.496 11.43 cv
182.652 10.941 182.891 10.52 183.207 10.164 cv
183.523 9.81598 183.918 9.54303 184.398 9.34802 cv
184.871 9.15601 185.43 9.06201 186.074 9.05902 cv
186.695 9.06201 187.238 9.14502 187.695 9.31201 cv
188.152 9.48401 188.531 9.73401 188.832 10.059 cv
189.129 10.391 189.352 10.793 189.5 11.27 cv
189.645 11.746 189.715 12.297 189.719 12.914 cv
cp
187.695 12.992 mo
187.695 12.648 187.668 12.332 187.613 12.043 cv
187.559 11.754 187.465 11.504 187.34 11.289 cv
187.207 11.078 187.035 10.914 186.82 10.793 cv
186.602 10.676 186.328 10.613 186.004 10.613 cv
185.707 10.613 185.453 10.668 185.238 10.773 cv
185.016 10.879 184.836 11.035 184.699 11.238 cv
184.555 11.449 184.449 11.695 184.383 11.98 cv
184.309 12.273 184.273 12.602 184.277 12.969 cv
184.273 13.312 184.301 13.629 184.363 13.918 cv
184.418 14.207 184.512 14.461 184.641 14.672 cv
184.766 14.887 184.938 15.051 185.16 15.164 cv
185.375 15.285 185.648 15.344 185.973 15.34 cv
186.27 15.344 186.527 15.289 186.746 15.18 cv
186.965 15.074 187.145 14.922 187.285 14.719 cv
187.426 14.52 187.527 14.273 187.594 13.98 cv
187.66 13.695 187.695 13.363 187.695 12.992 cv
cp
f
195.48 6.85199 mo
195.477 7 195.473 7.12097 195.465 7.211 cv
195.453 7.30499 195.438 7.375 195.418 7.422 cv
195.395 7.47302 195.371 7.508 195.348 7.52301 cv
195.32 7.547 195.289 7.55499 195.262 7.55103 cv
195.223 7.55499 195.184 7.547 195.141 7.52301 cv
195.094 7.508 195.039 7.48798 194.977 7.46503 cv
194.91 7.44897 194.832 7.42999 194.746 7.40601 cv
194.652 7.39099 194.551 7.37903 194.434 7.37903 cv
194.293 7.37903 194.172 7.40198 194.07 7.44501 cv
193.969 7.492 193.883 7.56201 193.816 7.65601 cv
193.746 7.75403 193.695 7.87903 193.668 8.03101 cv
193.633 8.18701 193.617 8.375 193.621 8.59802 cv
193.621 9.23798 li
194.895 9.23798 li
194.938 9.242 194.98 9.25403 195.023 9.27698 cv
195.059 9.30499 195.09 9.34802 195.121 9.40601 cv
195.145 9.46899 195.164 9.55103 195.18 9.65198 cv
195.188 9.758 195.195 9.88702 195.199 10.035 cv
195.195 10.324 195.168 10.527 195.121 10.648 cv
195.066 10.773 194.992 10.836 194.895 10.832 cv
193.621 10.832 li
193.621 16.465 li
193.617 16.52 193.602 16.562 193.574 16.602 cv
193.539 16.641 193.488 16.676 193.418 16.699 cv
193.344 16.727 193.242 16.742 193.113 16.758 cv
192.98 16.77 192.82 16.777 192.637 16.777 cv
192.445 16.777 192.289 16.77 192.164 16.758 cv
192.035 16.742 191.934 16.727 191.863 16.699 cv
191.785 16.676 191.734 16.641 191.707 16.602 cv
191.676 16.562 191.66 16.52 191.664 16.465 cv
191.664 10.832 li
190.789 10.832 li
190.688 10.836 190.613 10.773 190.566 10.648 cv
190.516 10.527 190.488 10.324 190.492 10.035 cv
190.488 9.88702 190.496 9.758 190.512 9.65198 cv
190.523 9.55103 190.543 9.46899 190.566 9.40601 cv
190.59 9.34802 190.621 9.30499 190.66 9.27698 cv
190.699 9.25403 190.742 9.242 190.797 9.23798 cv
191.664 9.23798 li
191.664 8.65198 li
191.66 8.17999 191.707 7.76599 191.805 7.40997 cv
191.895 7.05499 192.043 6.758 192.242 6.52002 cv
192.441 6.28497 192.695 6.10498 193.008 5.98401 cv
193.316 5.867 193.684 5.80902 194.105 5.80499 cv
194.309 5.80902 194.5 5.82397 194.684 5.85498 cv
194.863 5.89099 195.008 5.92999 195.113 5.96503 cv
195.215 6.008 195.285 6.04303 195.324 6.07397 cv
195.359 6.10901 195.387 6.15997 195.414 6.22302 cv
195.434 6.29303 195.453 6.375 195.465 6.47302 cv
195.473 6.578 195.477 6.703 195.48 6.85199 cv
cp
f
204.063 15.777 mo
204.059 16.008 204.047 16.184 204.02 16.305 cv
203.988 16.43 203.949 16.516 203.906 16.562 cv
203.855 16.613 203.785 16.656 203.699 16.695 cv
203.605 16.734 203.5 16.766 203.379 16.797 cv
203.254 16.82 203.121 16.844 202.98 16.863 cv
202.836 16.875 202.691 16.883 202.547 16.887 cv
202.152 16.883 201.813 16.832 201.531 16.738 cv
201.242 16.637 201.008 16.488 200.82 16.281 cv
200.633 16.078 200.496 15.82 200.41 15.504 cv
200.32 15.195 200.273 14.824 200.277 14.398 cv
200.277 10.832 li
199.441 10.832 li
199.34 10.836 199.266 10.773 199.215 10.648 cv
199.16 10.527 199.133 10.324 199.137 10.035 cv
199.133 9.88702 199.141 9.758 199.156 9.65198 cv
199.168 9.55103 199.188 9.46899 199.215 9.40601 cv
199.238 9.34802 199.27 9.30499 199.313 9.27698 cv
199.348 9.25403 199.395 9.242 199.449 9.23798 cv
200.277 9.23798 li
200.277 7.68402 li
200.273 7.633 200.289 7.586 200.32 7.54303 cv
200.348 7.50403 200.398 7.46899 200.477 7.43701 cv
200.547 7.40997 200.648 7.39099 200.777 7.375 cv
200.902 7.36298 201.059 7.35498 201.25 7.35498 cv
201.438 7.35498 201.598 7.36298 201.73 7.375 cv
201.855 7.39099 201.957 7.40997 202.031 7.43701 cv
202.102 7.46899 202.152 7.50403 202.188 7.54303 cv
202.215 7.586 202.23 7.633 202.234 7.68402 cv
202.234 9.23798 li
203.75 9.23798 li
203.801 9.242 203.844 9.25403 203.887 9.27698 cv
203.922 9.30499 203.957 9.34802 203.984 9.40601 cv
204.008 9.46899 204.027 9.55103 204.043 9.65198 cv
204.055 9.758 204.059 9.88702 204.063 10.035 cv
204.059 10.324 204.035 10.527 203.984 10.648 cv
203.93 10.773 203.852 10.836 203.758 10.832 cv
202.234 10.832 li
202.234 14.102 li
202.23 14.484 202.293 14.77 202.414 14.957 cv
202.531 15.148 202.742 15.242 203.055 15.238 cv
203.156 15.242 203.25 15.234 203.336 15.211 cv
203.414 15.195 203.488 15.172 203.559 15.148 cv
203.621 15.125 203.676 15.105 203.723 15.086 cv
203.762 15.07 203.805 15.062 203.844 15.059 cv
203.875 15.062 203.902 15.07 203.934 15.086 cv
203.957 15.105 203.98 15.141 204 15.195 cv
204.012 15.25 204.027 15.324 204.043 15.418 cv
204.055 15.512 204.059 15.633 204.063 15.777 cv
cp
f
212.137 16.465 mo
212.133 16.52 212.117 16.562 212.09 16.602 cv
212.055 16.641 212.004 16.676 211.934 16.699 cv
211.859 16.727 211.758 16.742 211.633 16.758 cv
211.504 16.77 211.348 16.777 211.16 16.777 cv
210.965 16.777 210.805 16.77 210.68 16.758 cv
210.551 16.742 210.449 16.727 210.379 16.699 cv
210.305 16.676 210.254 16.641 210.227 16.602 cv
210.191 16.562 210.176 16.52 210.18 16.465 cv
210.18 12.492 li
210.176 12.156 210.152 11.891 210.105 11.695 cv
210.055 11.508 209.98 11.34 209.891 11.199 cv
209.793 11.062 209.672 10.957 209.527 10.883 cv
209.375 10.809 209.203 10.773 209.008 10.77 cv
208.754 10.773 208.5 10.863 208.25 11.043 cv
207.992 11.227 207.727 11.492 207.453 11.836 cv
207.453 16.465 li
207.449 16.52 207.434 16.562 207.406 16.602 cv
207.371 16.641 207.32 16.676 207.246 16.699 cv
207.168 16.727 207.066 16.742 206.945 16.758 cv
206.816 16.77 206.656 16.777 206.469 16.777 cv
206.273 16.777 206.117 16.77 205.996 16.758 cv
205.867 16.742 205.766 16.727 205.695 16.699 cv
205.617 16.676 205.566 16.641 205.535 16.602 cv
205.504 16.562 205.488 16.52 205.488 16.465 cv
205.488 6.203 li
205.488 6.15198 205.504 6.10498 205.535 6.06201 cv
205.566 6.02301 205.617 5.98798 205.695 5.95697 cv
205.766 5.92999 205.867 5.90601 205.996 5.89099 cv
206.117 5.875 206.273 5.867 206.469 5.867 cv
206.656 5.867 206.816 5.875 206.945 5.89099 cv
207.066 5.90601 207.168 5.92999 207.246 5.95697 cv
207.32 5.98798 207.371 6.02301 207.406 6.06201 cv
207.434 6.10498 207.449 6.15198 207.453 6.203 cv
207.453 10.051 li
207.789 9.71899 208.137 9.47302 208.488 9.30499 cv
208.84 9.14502 209.203 9.06201 209.586 9.05902 cv
210.055 9.06201 210.453 9.14099 210.781 9.29303 cv
211.102 9.453 211.367 9.664 211.57 9.93402 cv
211.77 10.207 211.914 10.523 212.004 10.883 cv
212.09 11.242 212.133 11.68 212.137 12.195 cv
cp
f
220.406 12.781 mo
220.402 13.023 220.352 13.203 220.246 13.312 cv
220.137 13.43 219.988 13.484 219.805 13.484 cv
215.566 13.484 li
215.563 13.781 215.598 14.051 215.672 14.293 cv
215.738 14.535 215.852 14.742 216.008 14.91 cv
216.16 15.078 216.359 15.207 216.602 15.293 cv
216.844 15.387 217.133 15.43 217.473 15.426 cv
217.813 15.43 218.113 15.406 218.379 15.352 cv
218.637 15.305 218.863 15.25 219.051 15.187 cv
219.238 15.133 219.395 15.078 219.523 15.023 cv
219.645 14.977 219.746 14.949 219.828 14.949 cv
219.871 14.949 219.91 14.961 219.945 14.977 cv
219.973 15 220 15.031 220.023 15.074 cv
220.043 15.125 220.055 15.191 220.066 15.273 cv
220.07 15.363 220.074 15.473 220.078 15.598 cv
220.074 15.715 220.074 15.812 220.07 15.891 cv
220.063 15.977 220.055 16.043 220.047 16.098 cv
220.035 16.156 220.02 16.207 220 16.242 cv
219.977 16.285 219.949 16.32 219.918 16.355 cv
219.883 16.395 219.789 16.445 219.641 16.504 cv
219.488 16.57 219.297 16.633 219.063 16.687 cv
218.828 16.75 218.559 16.797 218.262 16.844 cv
217.957 16.883 217.637 16.906 217.293 16.91 cv
216.672 16.906 216.129 16.832 215.664 16.676 cv
215.195 16.523 214.805 16.285 214.496 15.965 cv
214.184 15.648 213.953 15.25 213.801 14.766 cv
213.645 14.285 213.566 13.715 213.57 13.062 cv
213.566 12.445 213.648 11.891 213.813 11.391 cv
213.973 10.898 214.203 10.477 214.512 10.125 cv
214.816 9.78101 215.191 9.51599 215.633 9.33197 cv
216.07 9.15198 216.566 9.06201 217.121 9.05902 cv
217.703 9.06201 218.199 9.14801 218.613 9.31598 cv
219.023 9.492 219.363 9.72998 219.633 10.031 cv
219.895 10.34 220.09 10.699 220.219 11.113 cv
220.34 11.531 220.402 11.984 220.406 12.469 cv
cp
218.504 12.219 mo
218.516 11.668 218.406 11.238 218.172 10.922 cv
217.934 10.609 217.566 10.449 217.074 10.449 cv
216.82 10.449 216.602 10.496 216.422 10.59 cv
216.234 10.684 216.082 10.812 215.961 10.969 cv
215.836 11.129 215.742 11.312 215.68 11.527 cv
215.613 11.746 215.574 11.977 215.566 12.219 cv
cp
f
232.758 9.69897 mo
232.758 10.27 232.668 10.773 232.492 11.207 cv
232.313 11.645 232.055 12.012 231.719 12.309 cv
231.379 12.609 230.965 12.836 230.473 12.992 cv
229.98 13.148 229.402 13.227 228.738 13.227 cv
227.895 13.227 li
227.895 16.449 li
227.895 16.504 227.875 16.551 227.844 16.59 cv
227.805 16.633 227.75 16.668 227.676 16.691 cv
227.594 16.719 227.488 16.738 227.363 16.754 cv
227.23 16.77 227.066 16.777 226.863 16.777 cv
226.668 16.777 226.504 16.77 226.371 16.754 cv
226.238 16.738 226.133 16.719 226.055 16.691 cv
225.977 16.668 225.922 16.633 225.891 16.59 cv
225.859 16.551 225.844 16.504 225.844 16.449 cv
225.844 7.36298 li
225.844 7.12097 225.906 6.93701 226.035 6.81598 cv
226.16 6.69501 226.328 6.63702 226.539 6.633 cv
228.918 6.633 li
229.156 6.63702 229.383 6.64502 229.602 6.65997 cv
229.813 6.67999 230.07 6.71899 230.375 6.77698 cv
230.672 6.84003 230.98 6.94897 231.293 7.10901 cv
231.602 7.27002 231.863 7.47302 232.086 7.71899 cv
232.301 7.96899 232.469 8.258 232.586 8.586 cv
232.699 8.91803 232.758 9.289 232.758 9.69897 cv
cp
230.609 9.84802 mo
230.605 9.49597 230.543 9.203 230.422 8.97302 cv
230.297 8.74597 230.145 8.578 229.965 8.46503 cv
229.777 8.35901 229.586 8.289 229.391 8.258 cv
229.188 8.22998 228.98 8.21899 228.77 8.21503 cv
227.895 8.21503 li
227.895 11.641 li
228.816 11.641 li
229.141 11.645 229.418 11.602 229.641 11.508 cv
229.859 11.422 230.039 11.297 230.184 11.137 cv
230.32 10.98 230.426 10.793 230.5 10.57 cv
230.57 10.352 230.605 10.109 230.609 9.84802 cv
cp
f
238.703 10.152 mo
238.699 10.344 238.695 10.496 238.688 10.613 cv
238.676 10.734 238.66 10.828 238.641 10.895 cv
238.617 10.961 238.59 11.008 238.559 11.031 cv
238.523 11.059 238.48 11.07 238.43 11.07 cv
238.387 11.07 238.34 11.062 238.289 11.043 cv
238.234 11.027 238.176 11.008 238.113 10.984 cv
238.047 10.965 237.977 10.945 237.898 10.926 cv
237.82 10.91 237.734 10.902 237.641 10.898 cv
237.531 10.902 237.422 10.922 237.313 10.965 cv
237.203 11.012 237.09 11.082 236.973 11.172 cv
236.855 11.27 236.73 11.395 236.605 11.547 cv
236.473 11.707 236.336 11.898 236.195 12.125 cv
236.195 16.465 li
236.191 16.52 236.176 16.562 236.148 16.602 cv
236.113 16.641 236.063 16.676 235.988 16.699 cv
235.91 16.727 235.809 16.742 235.688 16.758 cv
235.559 16.77 235.398 16.777 235.211 16.777 cv
235.016 16.777 234.859 16.77 234.738 16.758 cv
234.609 16.742 234.508 16.727 234.438 16.699 cv
234.359 16.676 234.309 16.641 234.277 16.602 cv
234.246 16.562 234.23 16.52 234.23 16.465 cv
234.23 9.50403 li
234.23 9.45697 234.242 9.40997 234.27 9.367 cv
234.293 9.33197 234.34 9.30103 234.41 9.27002 cv
234.477 9.24597 234.563 9.22699 234.672 9.211 cv
234.773 9.203 234.91 9.19501 235.074 9.19098 cv
235.238 9.19501 235.375 9.203 235.484 9.211 cv
235.594 9.22699 235.676 9.24597 235.738 9.27002 cv
235.793 9.30103 235.836 9.33197 235.867 9.367 cv
235.891 9.40997 235.906 9.45697 235.906 9.50403 cv
235.906 10.371 li
236.086 10.113 236.258 9.89801 236.422 9.72699 cv
236.582 9.56201 236.734 9.42603 236.883 9.32397 cv
237.027 9.22699 237.172 9.15997 237.32 9.117 cv
237.461 9.08197 237.609 9.06201 237.758 9.05902 cv
237.824 9.06201 237.895 9.06598 237.977 9.07001 cv
238.051 9.08197 238.133 9.09399 238.219 9.10901 cv
238.301 9.12903 238.375 9.14801 238.438 9.172 cv
238.5 9.19501 238.543 9.22302 238.574 9.24597 cv
238.598 9.27698 238.621 9.30499 238.637 9.33197 cv
238.648 9.367 238.66 9.40997 238.672 9.461 cv
238.68 9.52002 238.688 9.60199 238.695 9.70697 cv
238.699 9.82001 238.699 9.96899 238.703 10.152 cv
cp
f
246.188 12.781 mo
246.184 13.023 246.133 13.203 246.027 13.312 cv
245.918 13.43 245.77 13.484 245.586 13.484 cv
241.348 13.484 li
241.344 13.781 241.379 14.051 241.453 14.293 cv
241.52 14.535 241.633 14.742 241.789 14.91 cv
241.941 15.078 242.141 15.207 242.383 15.293 cv
242.625 15.387 242.914 15.43 243.254 15.426 cv
243.594 15.43 243.895 15.406 244.16 15.352 cv
244.418 15.305 244.645 15.25 244.832 15.187 cv
245.02 15.133 245.176 15.078 245.305 15.023 cv
245.426 14.977 245.527 14.949 245.609 14.949 cv
245.652 14.949 245.691 14.961 245.727 14.977 cv
245.754 15 245.781 15.031 245.805 15.074 cv
245.824 15.125 245.836 15.191 245.848 15.273 cv
245.852 15.363 245.855 15.473 245.859 15.598 cv
245.855 15.715 245.855 15.812 245.852 15.891 cv
245.844 15.977 245.836 16.043 245.828 16.098 cv
245.816 16.156 245.801 16.207 245.781 16.242 cv
245.758 16.285 245.73 16.32 245.699 16.355 cv
245.664 16.395 245.57 16.445 245.422 16.504 cv
245.27 16.57 245.078 16.633 244.844 16.687 cv
244.609 16.75 244.34 16.797 244.043 16.844 cv
243.738 16.883 243.418 16.906 243.074 16.91 cv
242.453 16.906 241.91 16.832 241.445 16.676 cv
240.977 16.523 240.586 16.285 240.277 15.965 cv
239.965 15.648 239.734 15.25 239.582 14.766 cv
239.426 14.285 239.348 13.715 239.352 13.062 cv
239.348 12.445 239.43 11.891 239.594 11.391 cv
239.754 10.898 239.984 10.477 240.293 10.125 cv
240.598 9.78101 240.973 9.51599 241.414 9.33197 cv
241.852 9.15198 242.348 9.06201 242.902 9.05902 cv
243.484 9.06201 243.98 9.14801 244.395 9.31598 cv
244.805 9.492 245.145 9.72998 245.414 10.031 cv
245.676 10.34 245.871 10.699 246 11.113 cv
246.121 11.531 246.184 11.984 246.188 12.469 cv
cp
244.285 12.219 mo
244.297 11.668 244.188 11.238 243.953 10.922 cv
243.715 10.609 243.348 10.449 242.855 10.449 cv
242.602 10.449 242.383 10.496 242.203 10.59 cv
242.016 10.684 241.863 10.812 241.742 10.969 cv
241.617 11.129 241.523 11.312 241.461 11.527 cv
241.395 11.746 241.355 11.977 241.348 12.219 cv
cp
f
254.809 12.883 mo
254.809 13.504 254.742 14.062 254.609 14.559 cv
254.477 15.055 254.281 15.477 254.027 15.824 cv
253.77 16.176 253.453 16.445 253.074 16.629 cv
252.695 16.816 252.262 16.906 251.773 16.91 cv
251.57 16.906 251.383 16.887 251.215 16.852 cv
251.043 16.809 250.879 16.75 250.723 16.672 cv
250.563 16.594 250.406 16.496 250.25 16.371 cv
250.094 16.254 249.93 16.113 249.766 15.949 cv
249.766 19.227 li
249.762 19.277 249.746 19.324 249.719 19.367 cv
249.684 19.406 249.633 19.441 249.559 19.473 cv
249.48 19.5 249.379 19.52 249.258 19.539 cv
249.129 19.551 248.969 19.559 248.781 19.562 cv
248.586 19.559 248.43 19.551 248.309 19.539 cv
248.18 19.52 248.078 19.5 248.008 19.473 cv
247.93 19.441 247.879 19.406 247.848 19.367 cv
247.816 19.324 247.801 19.277 247.801 19.227 cv
247.801 9.50403 li
247.801 9.45697 247.813 9.40997 247.84 9.367 cv
247.863 9.33197 247.91 9.30103 247.977 9.27002 cv
248.039 9.24597 248.125 9.22699 248.234 9.211 cv
248.34 9.203 248.473 9.19501 248.637 9.19098 cv
248.789 9.19501 248.918 9.203 249.027 9.211 cv
249.129 9.22699 249.215 9.24597 249.285 9.27002 cv
249.348 9.30103 249.395 9.33197 249.422 9.367 cv
249.445 9.40997 249.457 9.45697 249.461 9.50403 cv
249.461 10.324 li
249.66 10.121 249.859 9.93701 250.059 9.77301 cv
250.25 9.617 250.449 9.48401 250.656 9.375 cv
250.855 9.27301 251.066 9.19098 251.285 9.13702 cv
251.5 9.086 251.73 9.06201 251.977 9.05902 cv
252.48 9.06201 252.914 9.15997 253.277 9.35901 cv
253.633 9.56201 253.926 9.84003 254.156 10.184 cv
254.379 10.535 254.543 10.941 254.652 11.402 cv
254.754 11.867 254.809 12.359 254.809 12.883 cv
cp
252.762 13.023 mo
252.758 12.73 252.734 12.445 252.695 12.168 cv
252.648 11.898 252.574 11.656 252.473 11.437 cv
252.363 11.227 252.223 11.055 252.051 10.93 cv
251.871 10.805 251.656 10.742 251.398 10.738 cv
251.266 10.742 251.137 10.762 251.012 10.797 cv
250.883 10.84 250.75 10.902 250.621 10.988 cv
250.484 11.074 250.348 11.187 250.211 11.328 cv
250.066 11.469 249.918 11.645 249.766 11.852 cv
249.766 14.148 li
250.039 14.5 250.305 14.77 250.555 14.957 cv
250.805 15.148 251.063 15.242 251.336 15.238 cv
251.586 15.242 251.805 15.176 251.988 15.043 cv
252.164 14.914 252.313 14.746 252.43 14.535 cv
252.543 14.328 252.625 14.09 252.68 13.82 cv
252.73 13.559 252.758 13.293 252.762 13.023 cv
cp
f
262.25 16.488 mo
262.25 16.566 262.223 16.621 262.172 16.66 cv
262.117 16.703 262.035 16.73 261.926 16.75 cv
261.813 16.766 261.648 16.777 261.43 16.777 cv
261.195 16.777 261.023 16.766 260.922 16.75 cv
260.813 16.73 260.738 16.703 260.695 16.66 cv
260.648 16.621 260.625 16.566 260.629 16.488 cv
260.629 15.934 li
260.34 16.242 260.016 16.484 259.648 16.652 cv
259.281 16.824 258.871 16.906 258.426 16.91 cv
258.051 16.906 257.711 16.859 257.406 16.766 cv
257.094 16.672 256.828 16.531 256.605 16.336 cv
256.375 16.148 256.199 15.91 256.078 15.629 cv
255.949 15.348 255.887 15.023 255.891 14.648 cv
255.887 14.246 255.965 13.891 256.129 13.59 cv
256.285 13.293 256.523 13.047 256.836 12.848 cv
257.148 12.656 257.539 12.512 258.012 12.414 cv
258.477 12.324 259.02 12.277 259.645 12.273 cv
260.324 12.273 li
260.324 11.852 li
260.32 11.637 260.301 11.445 260.258 11.277 cv
260.211 11.117 260.137 10.98 260.039 10.871 cv
259.934 10.762 259.797 10.684 259.633 10.629 cv
259.461 10.582 259.254 10.555 259.004 10.551 cv
258.676 10.555 258.383 10.59 258.125 10.66 cv
257.867 10.734 257.637 10.816 257.441 10.902 cv
257.242 10.992 257.078 11.07 256.949 11.141 cv
256.813 11.215 256.707 11.254 256.625 11.25 cv
256.566 11.254 256.516 11.234 256.473 11.195 cv
256.426 11.16 256.387 11.109 256.363 11.039 cv
256.332 10.977 256.313 10.895 256.297 10.793 cv
256.281 10.699 256.273 10.59 256.273 10.465 cv
256.273 10.309 256.285 10.18 256.313 10.082 cv
256.336 9.992 256.387 9.90601 256.461 9.828 cv
256.531 9.75403 256.656 9.672 256.844 9.578 cv
257.023 9.48798 257.238 9.40198 257.48 9.32397 cv
257.723 9.24597 257.988 9.18402 258.281 9.133 cv
258.566 9.086 258.863 9.06201 259.176 9.05902 cv
259.719 9.06201 260.188 9.11298 260.578 9.21899 cv
260.965 9.328 261.281 9.492 261.531 9.711 cv
261.777 9.93402 261.961 10.219 262.078 10.566 cv
262.191 10.914 262.25 11.328 262.25 11.805 cv
cp
260.324 13.508 mo
259.574 13.508 li
259.254 13.508 258.984 13.531 258.762 13.578 cv
258.535 13.625 258.352 13.695 258.215 13.789 cv
258.07 13.883 257.969 13.996 257.906 14.129 cv
257.84 14.262 257.809 14.414 257.809 14.586 cv
257.809 14.875 257.898 15.105 258.086 15.27 cv
258.266 15.441 258.523 15.523 258.855 15.52 cv
259.129 15.523 259.383 15.453 259.617 15.309 cv
259.848 15.172 260.082 14.969 260.324 14.695 cv
cp
f
268.688 10.152 mo
268.684 10.344 268.68 10.496 268.672 10.613 cv
268.66 10.734 268.645 10.828 268.625 10.895 cv
268.602 10.961 268.574 11.008 268.543 11.031 cv
268.508 11.059 268.465 11.07 268.414 11.07 cv
268.371 11.07 268.324 11.062 268.273 11.043 cv
268.219 11.027 268.16 11.008 268.098 10.984 cv
268.031 10.965 267.961 10.945 267.883 10.926 cv
267.805 10.91 267.719 10.902 267.625 10.898 cv
267.516 10.902 267.406 10.922 267.297 10.965 cv
267.188 11.012 267.074 11.082 266.957 11.172 cv
266.84 11.27 266.715 11.395 266.59 11.547 cv
266.457 11.707 266.32 11.898 266.18 12.125 cv
266.18 16.465 li
266.176 16.52 266.16 16.562 266.133 16.602 cv
266.098 16.641 266.047 16.676 265.973 16.699 cv
265.895 16.727 265.793 16.742 265.672 16.758 cv
265.543 16.77 265.383 16.777 265.195 16.777 cv
265 16.777 264.844 16.77 264.723 16.758 cv
264.594 16.742 264.492 16.727 264.422 16.699 cv
264.344 16.676 264.293 16.641 264.262 16.602 cv
264.23 16.562 264.215 16.52 264.215 16.465 cv
264.215 9.50403 li
264.215 9.45697 264.227 9.40997 264.254 9.367 cv
264.277 9.33197 264.324 9.30103 264.395 9.27002 cv
264.461 9.24597 264.547 9.22699 264.656 9.211 cv
264.758 9.203 264.895 9.19501 265.059 9.19098 cv
265.223 9.19501 265.359 9.203 265.469 9.211 cv
265.578 9.22699 265.66 9.24597 265.723 9.27002 cv
265.777 9.30103 265.82 9.33197 265.852 9.367 cv
265.875 9.40997 265.891 9.45697 265.891 9.50403 cv
265.891 10.371 li
266.07 10.113 266.242 9.89801 266.406 9.72699 cv
266.566 9.56201 266.719 9.42603 266.867 9.32397 cv
267.012 9.22699 267.156 9.15997 267.305 9.117 cv
267.445 9.08197 267.594 9.06201 267.742 9.05902 cv
267.809 9.06201 267.879 9.06598 267.961 9.07001 cv
268.035 9.08197 268.117 9.09399 268.203 9.10901 cv
268.285 9.12903 268.359 9.14801 268.422 9.172 cv
268.484 9.19501 268.527 9.22302 268.559 9.24597 cv
268.582 9.27698 268.605 9.30499 268.621 9.33197 cv
268.633 9.367 268.645 9.40997 268.656 9.461 cv
268.664 9.52002 268.672 9.60199 268.68 9.70697 cv
268.684 9.82001 268.684 9.96899 268.688 10.152 cv
cp
f
275.449 16.488 mo
275.449 16.566 275.422 16.621 275.371 16.66 cv
275.316 16.703 275.234 16.73 275.125 16.75 cv
275.012 16.766 274.848 16.777 274.629 16.777 cv
274.395 16.777 274.223 16.766 274.121 16.75 cv
274.012 16.73 273.938 16.703 273.895 16.66 cv
273.848 16.621 273.824 16.566 273.828 16.488 cv
273.828 15.934 li
273.539 16.242 273.215 16.484 272.848 16.652 cv
272.48 16.824 272.07 16.906 271.625 16.91 cv
271.25 16.906 270.91 16.859 270.605 16.766 cv
270.293 16.672 270.027 16.531 269.805 16.336 cv
269.574 16.148 269.398 15.91 269.277 15.629 cv
269.148 15.348 269.086 15.023 269.09 14.648 cv
269.086 14.246 269.164 13.891 269.328 13.59 cv
269.484 13.293 269.723 13.047 270.035 12.848 cv
270.348 12.656 270.738 12.512 271.211 12.414 cv
271.676 12.324 272.219 12.277 272.844 12.273 cv
273.523 12.273 li
273.523 11.852 li
273.52 11.637 273.5 11.445 273.457 11.277 cv
273.41 11.117 273.336 10.98 273.238 10.871 cv
273.133 10.762 272.996 10.684 272.832 10.629 cv
272.66 10.582 272.453 10.555 272.203 10.551 cv
271.875 10.555 271.582 10.59 271.324 10.66 cv
271.066 10.734 270.836 10.816 270.641 10.902 cv
270.441 10.992 270.277 11.07 270.148 11.141 cv
270.012 11.215 269.906 11.254 269.824 11.25 cv
269.766 11.254 269.715 11.234 269.672 11.195 cv
269.625 11.16 269.586 11.109 269.563 11.039 cv
269.531 10.977 269.512 10.895 269.496 10.793 cv
269.48 10.699 269.473 10.59 269.473 10.465 cv
269.473 10.309 269.484 10.18 269.512 10.082 cv
269.535 9.992 269.586 9.90601 269.66 9.828 cv
269.73 9.75403 269.855 9.672 270.043 9.578 cv
270.223 9.48798 270.438 9.40198 270.68 9.32397 cv
270.922 9.24597 271.188 9.18402 271.48 9.133 cv
271.766 9.086 272.063 9.06201 272.375 9.05902 cv
272.918 9.06201 273.387 9.11298 273.777 9.21899 cv
274.164 9.328 274.48 9.492 274.73 9.711 cv
274.977 9.93402 275.16 10.219 275.277 10.566 cv
275.391 10.914 275.449 11.328 275.449 11.805 cv
cp
273.523 13.508 mo
272.773 13.508 li
272.453 13.508 272.184 13.531 271.961 13.578 cv
271.734 13.625 271.551 13.695 271.414 13.789 cv
271.27 13.883 271.168 13.996 271.105 14.129 cv
271.039 14.262 271.008 14.414 271.008 14.586 cv
271.008 14.875 271.098 15.105 271.285 15.27 cv
271.465 15.441 271.723 15.523 272.055 15.52 cv
272.328 15.523 272.582 15.453 272.816 15.309 cv
273.047 15.172 273.281 14.969 273.523 14.695 cv
cp
f
281.441 15.777 mo
281.438 16.008 281.426 16.184 281.398 16.305 cv
281.367 16.43 281.328 16.516 281.285 16.562 cv
281.234 16.613 281.164 16.656 281.078 16.695 cv
280.984 16.734 280.879 16.766 280.758 16.797 cv
280.633 16.82 280.5 16.844 280.359 16.863 cv
280.215 16.875 280.07 16.883 279.926 16.887 cv
279.531 16.883 279.191 16.832 278.91 16.738 cv
278.621 16.637 278.387 16.488 278.199 16.281 cv
278.012 16.078 277.875 15.82 277.789 15.504 cv
277.699 15.195 277.652 14.824 277.656 14.398 cv
277.656 10.832 li
276.82 10.832 li
276.719 10.836 276.645 10.773 276.594 10.648 cv
276.539 10.527 276.512 10.324 276.516 10.035 cv
276.512 9.88702 276.52 9.758 276.535 9.65198 cv
276.547 9.55103 276.566 9.46899 276.594 9.40601 cv
276.617 9.34802 276.648 9.30499 276.691 9.27698 cv
276.727 9.25403 276.773 9.242 276.828 9.23798 cv
277.656 9.23798 li
277.656 7.68402 li
277.652 7.633 277.668 7.586 277.699 7.54303 cv
277.727 7.50403 277.777 7.46899 277.855 7.43701 cv
277.926 7.40997 278.027 7.39099 278.156 7.375 cv
278.281 7.36298 278.438 7.35498 278.629 7.35498 cv
278.816 7.35498 278.977 7.36298 279.109 7.375 cv
279.234 7.39099 279.336 7.40997 279.41 7.43701 cv
279.48 7.46899 279.531 7.50403 279.566 7.54303 cv
279.594 7.586 279.609 7.633 279.613 7.68402 cv
279.613 9.23798 li
281.129 9.23798 li
281.18 9.242 281.223 9.25403 281.266 9.27698 cv
281.301 9.30499 281.336 9.34802 281.363 9.40601 cv
281.387 9.46899 281.406 9.55103 281.422 9.65198 cv
281.434 9.758 281.438 9.88702 281.441 10.035 cv
281.438 10.324 281.414 10.527 281.363 10.648 cv
281.309 10.773 281.23 10.836 281.137 10.832 cv
279.613 10.832 li
279.613 14.102 li
279.609 14.484 279.672 14.77 279.793 14.957 cv
279.91 15.148 280.121 15.242 280.434 15.238 cv
280.535 15.242 280.629 15.234 280.715 15.211 cv
280.793 15.195 280.867 15.172 280.938 15.148 cv
281 15.125 281.055 15.105 281.102 15.086 cv
281.141 15.07 281.184 15.062 281.223 15.059 cv
281.254 15.062 281.281 15.07 281.313 15.086 cv
281.336 15.105 281.359 15.141 281.379 15.195 cv
281.391 15.25 281.406 15.324 281.422 15.418 cv
281.434 15.512 281.438 15.633 281.441 15.777 cv
cp
f
284.832 16.465 mo
284.828 16.52 284.813 16.562 284.785 16.602 cv
284.75 16.641 284.699 16.676 284.625 16.699 cv
284.547 16.727 284.445 16.742 284.324 16.758 cv
284.195 16.77 284.035 16.777 283.848 16.777 cv
283.652 16.777 283.496 16.77 283.375 16.758 cv
283.246 16.742 283.145 16.727 283.074 16.699 cv
282.996 16.676 282.945 16.641 282.914 16.602 cv
282.883 16.562 282.867 16.52 282.867 16.465 cv
282.867 9.52002 li
282.867 9.46899 282.883 9.422 282.914 9.383 cv
282.945 9.34399 282.996 9.31201 283.074 9.28101 cv
283.145 9.258 283.246 9.23401 283.375 9.21503 cv
283.496 9.203 283.652 9.19501 283.848 9.19098 cv
284.035 9.19501 284.195 9.203 284.324 9.21503 cv
284.445 9.23401 284.547 9.258 284.625 9.28101 cv
284.699 9.31201 284.75 9.34399 284.785 9.383 cv
284.813 9.422 284.828 9.46899 284.832 9.52002 cv
cp
284.98 7.14502 mo
284.977 7.54303 284.895 7.81598 284.738 7.96503 cv
284.574 8.117 284.277 8.19501 283.84 8.19098 cv
283.398 8.19501 283.102 8.12097 282.949 7.97302 cv
282.793 7.828 282.715 7.56598 282.719 7.18402 cv
282.715 6.79303 282.793 6.52002 282.957 6.36298 cv
283.113 6.21503 283.414 6.13702 283.855 6.133 cv
284.289 6.13702 284.586 6.211 284.746 6.35498 cv
284.898 6.508 284.977 6.77002 284.98 7.14502 cv
cp
f
293.84 12.914 mo
293.836 13.512 293.758 14.051 293.605 14.539 cv
293.445 15.027 293.211 15.449 292.895 15.801 cv
292.574 16.156 292.176 16.43 291.699 16.621 cv
291.223 16.812 290.664 16.906 290.023 16.91 cv
289.402 16.906 288.863 16.824 288.406 16.652 cv
287.949 16.484 287.57 16.234 287.27 15.902 cv
286.965 15.578 286.738 15.176 286.598 14.695 cv
286.449 14.219 286.379 13.672 286.379 13.055 cv
286.379 12.465 286.457 11.922 286.617 11.43 cv
286.773 10.941 287.012 10.52 287.328 10.164 cv
287.645 9.81598 288.039 9.54303 288.52 9.34802 cv
288.992 9.15601 289.551 9.06201 290.195 9.05902 cv
290.816 9.06201 291.359 9.14502 291.816 9.31201 cv
292.273 9.48401 292.652 9.73401 292.953 10.059 cv
293.25 10.391 293.473 10.793 293.621 11.27 cv
293.766 11.746 293.836 12.297 293.84 12.914 cv
cp
291.816 12.992 mo
291.816 12.648 291.789 12.332 291.734 12.043 cv
291.68 11.754 291.586 11.504 291.461 11.289 cv
291.328 11.078 291.156 10.914 290.941 10.793 cv
290.723 10.676 290.449 10.613 290.125 10.613 cv
289.828 10.613 289.574 10.668 289.359 10.773 cv
289.137 10.879 288.957 11.035 288.82 11.238 cv
288.676 11.449 288.57 11.695 288.504 11.98 cv
288.43 12.273 288.395 12.602 288.398 12.969 cv
288.395 13.312 288.422 13.629 288.484 13.918 cv
288.539 14.207 288.633 14.461 288.762 14.672 cv
288.887 14.887 289.059 15.051 289.281 15.164 cv
289.496 15.285 289.77 15.344 290.094 15.34 cv
290.391 15.344 290.648 15.289 290.867 15.18 cv
291.086 15.074 291.266 14.922 291.406 14.719 cv
291.547 14.52 291.648 14.273 291.715 13.98 cv
291.781 13.695 291.816 13.363 291.816 12.992 cv
cp
f
302.047 16.465 mo
302.043 16.52 302.027 16.562 302 16.602 cv
301.965 16.641 301.914 16.676 301.844 16.699 cv
301.77 16.727 301.668 16.742 301.543 16.758 cv
301.414 16.77 301.258 16.777 301.07 16.777 cv
300.875 16.777 300.715 16.77 300.59 16.758 cv
300.461 16.742 300.359 16.727 300.289 16.699 cv
300.215 16.676 300.164 16.641 300.137 16.602 cv
300.102 16.562 300.086 16.52 300.09 16.465 cv
300.09 12.492 li
300.086 12.156 300.063 11.891 300.016 11.695 cv
299.965 11.508 299.891 11.34 299.801 11.199 cv
299.703 11.062 299.582 10.957 299.438 10.883 cv
299.285 10.809 299.113 10.773 298.918 10.77 cv
298.664 10.773 298.41 10.863 298.16 11.043 cv
297.902 11.227 297.637 11.492 297.363 11.836 cv
297.363 16.465 li
297.359 16.52 297.344 16.562 297.316 16.602 cv
297.281 16.641 297.23 16.676 297.156 16.699 cv
297.078 16.727 296.977 16.742 296.855 16.758 cv
296.727 16.77 296.566 16.777 296.379 16.777 cv
296.184 16.777 296.027 16.77 295.906 16.758 cv
295.777 16.742 295.676 16.727 295.605 16.699 cv
295.527 16.676 295.477 16.641 295.445 16.602 cv
295.414 16.562 295.398 16.52 295.398 16.465 cv
295.398 9.50403 li
295.398 9.45697 295.41 9.40997 295.438 9.367 cv
295.461 9.33197 295.508 9.30103 295.578 9.27002 cv
295.645 9.24597 295.73 9.22699 295.84 9.211 cv
295.941 9.203 296.078 9.19501 296.242 9.19098 cv
296.406 9.19501 296.543 9.203 296.652 9.211 cv
296.762 9.22699 296.844 9.24597 296.906 9.27002 cv
296.961 9.30103 297.004 9.33197 297.035 9.367 cv
297.059 9.40997 297.074 9.45697 297.074 9.50403 cv
297.074 10.309 li
297.457 9.89502 297.848 9.58197 298.25 9.37097 cv
298.645 9.164 299.059 9.06201 299.496 9.05902 cv
299.965 9.06201 300.363 9.14099 300.691 9.29303 cv
301.012 9.453 301.277 9.664 301.48 9.92999 cv
301.68 10.199 301.824 10.512 301.914 10.871 cv
302 11.23 302.043 11.664 302.047 12.164 cv
cp
f
314.496 7.47302 mo
314.492 7.625 314.484 7.75403 314.477 7.85901 cv
314.461 7.96899 314.441 8.05499 314.418 8.117 cv
314.387 8.18402 314.355 8.23401 314.32 8.26202 cv
314.277 8.297 314.234 8.31201 314.191 8.30902 cv
311.664 8.30902 li
311.664 16.449 li
311.66 16.504 311.645 16.551 311.613 16.59 cv
311.578 16.633 311.523 16.668 311.445 16.691 cv
311.367 16.719 311.262 16.738 311.129 16.754 cv
310.996 16.77 310.828 16.777 310.633 16.777 cv
310.43 16.777 310.266 16.77 310.137 16.754 cv
310 16.738 309.895 16.719 309.82 16.691 cv
309.738 16.668 309.684 16.633 309.652 16.59 cv
309.617 16.551 309.598 16.504 309.602 16.449 cv
309.602 8.30902 li
307.074 8.30902 li
307.02 8.31201 306.973 8.297 306.941 8.26202 cv
306.902 8.23401 306.871 8.18402 306.848 8.117 cv
306.816 8.05499 306.797 7.96899 306.789 7.85901 cv
306.773 7.75403 306.77 7.625 306.77 7.47302 cv
306.77 7.31598 306.773 7.18701 306.789 7.078 cv
306.797 6.97302 306.816 6.883 306.848 6.81598 cv
306.871 6.75403 306.902 6.70697 306.941 6.67603 cv
306.973 6.64801 307.02 6.63702 307.074 6.633 cv
314.191 6.633 li
314.234 6.63702 314.277 6.64801 314.32 6.67603 cv
314.355 6.70697 314.387 6.75403 314.418 6.81598 cv
314.441 6.883 314.461 6.97302 314.477 7.078 cv
314.484 7.18701 314.492 7.31598 314.496 7.47302 cv
cp
f
317.535 16.465 mo
317.531 16.52 317.516 16.562 317.488 16.602 cv
317.453 16.641 317.402 16.676 317.328 16.699 cv
317.25 16.727 317.148 16.742 317.027 16.758 cv
316.898 16.77 316.738 16.777 316.551 16.777 cv
316.355 16.777 316.199 16.77 316.078 16.758 cv
315.949 16.742 315.848 16.727 315.777 16.699 cv
315.699 16.676 315.648 16.641 315.617 16.602 cv
315.586 16.562 315.57 16.52 315.57 16.465 cv
315.57 9.52002 li
315.57 9.46899 315.586 9.422 315.617 9.383 cv
315.648 9.34399 315.699 9.31201 315.777 9.28101 cv
315.848 9.258 315.949 9.23401 316.078 9.21503 cv
316.199 9.203 316.355 9.19501 316.551 9.19098 cv
316.738 9.19501 316.898 9.203 317.027 9.21503 cv
317.148 9.23401 317.25 9.258 317.328 9.28101 cv
317.402 9.31201 317.453 9.34399 317.488 9.383 cv
317.516 9.422 317.531 9.46899 317.535 9.52002 cv
cp
317.684 7.14502 mo
317.68 7.54303 317.598 7.81598 317.441 7.96503 cv
317.277 8.117 316.98 8.19501 316.543 8.19098 cv
316.102 8.19501 315.805 8.12097 315.652 7.97302 cv
315.496 7.828 315.418 7.56598 315.422 7.18402 cv
315.418 6.79303 315.496 6.52002 315.66 6.36298 cv
315.816 6.21503 316.117 6.13702 316.559 6.133 cv
316.992 6.13702 317.289 6.211 317.449 6.35498 cv
317.602 6.508 317.68 6.77002 317.684 7.14502 cv
cp
f
330.578 16.465 mo
330.578 16.52 330.563 16.562 330.531 16.602 cv
330.5 16.641 330.445 16.676 330.375 16.699 cv
330.297 16.727 330.199 16.742 330.078 16.758 cv
329.949 16.77 329.789 16.777 329.602 16.777 cv
329.398 16.777 329.238 16.77 329.117 16.758 cv
328.988 16.742 328.887 16.727 328.816 16.699 cv
328.738 16.676 328.688 16.641 328.66 16.602 cv
328.629 16.562 328.613 16.52 328.617 16.465 cv
328.617 12.336 li
328.613 12.102 328.594 11.891 328.551 11.695 cv
328.504 11.508 328.434 11.34 328.348 11.199 cv
328.254 11.062 328.141 10.957 328.008 10.883 cv
327.867 10.809 327.703 10.773 327.512 10.77 cv
327.273 10.773 327.035 10.863 326.801 11.043 cv
326.559 11.227 326.301 11.492 326.02 11.836 cv
326.02 16.465 li
326.02 16.52 326.004 16.562 325.973 16.602 cv
325.941 16.641 325.887 16.676 325.813 16.699 cv
325.734 16.727 325.633 16.742 325.512 16.758 cv
325.383 16.77 325.227 16.777 325.043 16.777 cv
324.848 16.777 324.691 16.77 324.566 16.758 cv
324.441 16.742 324.34 16.727 324.266 16.699 cv
324.191 16.676 324.141 16.641 324.109 16.602 cv
324.078 16.562 324.063 16.52 324.063 16.465 cv
324.063 12.336 li
324.063 12.102 324.039 11.891 323.996 11.695 cv
323.949 11.508 323.883 11.34 323.797 11.199 cv
323.707 11.062 323.594 10.957 323.453 10.883 cv
323.313 10.809 323.148 10.773 322.961 10.77 cv
322.719 10.773 322.477 10.863 322.242 11.043 cv
322 11.227 321.742 11.492 321.469 11.836 cv
321.469 16.465 li
321.465 16.52 321.449 16.562 321.422 16.602 cv
321.387 16.641 321.336 16.676 321.262 16.699 cv
321.184 16.727 321.082 16.742 320.961 16.758 cv
320.832 16.77 320.672 16.777 320.484 16.777 cv
320.289 16.777 320.133 16.77 320.012 16.758 cv
319.883 16.742 319.781 16.727 319.711 16.699 cv
319.633 16.676 319.582 16.641 319.551 16.602 cv
319.52 16.562 319.504 16.52 319.504 16.465 cv
319.504 9.50403 li
319.504 9.45697 319.516 9.40997 319.543 9.367 cv
319.566 9.33197 319.613 9.30103 319.684 9.27002 cv
319.75 9.24597 319.836 9.22699 319.945 9.211 cv
320.047 9.203 320.184 9.19501 320.348 9.19098 cv
320.512 9.19501 320.648 9.203 320.758 9.211 cv
320.867 9.22699 320.949 9.24597 321.012 9.27002 cv
321.066 9.30103 321.109 9.33197 321.141 9.367 cv
321.164 9.40997 321.18 9.45697 321.18 9.50403 cv
321.18 10.309 li
321.563 9.89502 321.945 9.58197 322.332 9.37097 cv
322.711 9.164 323.109 9.06201 323.531 9.05902 cv
323.813 9.06201 324.07 9.09003 324.301 9.14801 cv
324.527 9.211 324.73 9.297 324.914 9.40601 cv
325.09 9.52002 325.246 9.65601 325.379 9.80902 cv
325.508 9.96899 325.617 10.141 325.707 10.332 cv
325.914 10.109 326.117 9.91803 326.32 9.75403 cv
326.516 9.59399 326.715 9.461 326.914 9.35901 cv
327.105 9.258 327.301 9.18402 327.5 9.133 cv
327.691 9.086 327.891 9.06201 328.098 9.05902 cv
328.555 9.06201 328.945 9.14099 329.266 9.29303 cv
329.582 9.453 329.836 9.664 330.035 9.92999 cv
330.227 10.199 330.367 10.512 330.453 10.871 cv
330.535 11.23 330.578 11.609 330.578 12.008 cv
cp
f
338.93 12.781 mo
338.926 13.023 338.875 13.203 338.77 13.312 cv
338.66 13.43 338.512 13.484 338.328 13.484 cv
334.09 13.484 li
334.086 13.781 334.121 14.051 334.195 14.293 cv
334.262 14.535 334.375 14.742 334.531 14.91 cv
334.684 15.078 334.883 15.207 335.125 15.293 cv
335.367 15.387 335.656 15.43 335.996 15.426 cv
336.336 15.43 336.637 15.406 336.902 15.352 cv
337.16 15.305 337.387 15.25 337.574 15.187 cv
337.762 15.133 337.918 15.078 338.047 15.023 cv
338.168 14.977 338.27 14.949 338.352 14.949 cv
338.395 14.949 338.434 14.961 338.469 14.977 cv
338.496 15 338.523 15.031 338.547 15.074 cv
338.566 15.125 338.578 15.191 338.59 15.273 cv
338.594 15.363 338.598 15.473 338.602 15.598 cv
338.598 15.715 338.598 15.812 338.594 15.891 cv
338.586 15.977 338.578 16.043 338.57 16.098 cv
338.559 16.156 338.543 16.207 338.523 16.242 cv
338.5 16.285 338.473 16.32 338.441 16.355 cv
338.406 16.395 338.313 16.445 338.164 16.504 cv
338.012 16.57 337.82 16.633 337.586 16.687 cv
337.352 16.75 337.082 16.797 336.785 16.844 cv
336.48 16.883 336.16 16.906 335.816 16.91 cv
335.195 16.906 334.652 16.832 334.188 16.676 cv
333.719 16.523 333.328 16.285 333.02 15.965 cv
332.707 15.648 332.477 15.25 332.324 14.766 cv
332.168 14.285 332.09 13.715 332.094 13.062 cv
332.09 12.445 332.172 11.891 332.336 11.391 cv
332.496 10.898 332.727 10.477 333.035 10.125 cv
333.34 9.78101 333.715 9.51599 334.156 9.33197 cv
334.594 9.15198 335.09 9.06201 335.645 9.05902 cv
336.227 9.06201 336.723 9.14801 337.137 9.31598 cv
337.547 9.492 337.887 9.72998 338.156 10.031 cv
338.418 10.34 338.613 10.699 338.742 11.113 cv
338.863 11.531 338.926 11.984 338.93 12.469 cv
cp
337.027 12.219 mo
337.039 11.668 336.93 11.238 336.695 10.922 cv
336.457 10.609 336.09 10.449 335.598 10.449 cv
335.344 10.449 335.125 10.496 334.945 10.59 cv
334.758 10.684 334.605 10.812 334.484 10.969 cv
334.359 11.129 334.266 11.312 334.203 11.527 cv
334.137 11.746 334.098 11.977 334.09 12.219 cv
cp
f
345.438 14.5 mo
345.438 14.895 345.363 15.242 345.215 15.543 cv
345.066 15.848 344.855 16.102 344.59 16.301 cv
344.316 16.508 343.996 16.656 343.629 16.758 cv
343.254 16.855 342.855 16.906 342.426 16.91 cv
342.164 16.906 341.914 16.887 341.68 16.852 cv
341.441 16.809 341.23 16.762 341.047 16.703 cv
340.855 16.645 340.699 16.582 340.578 16.52 cv
340.449 16.457 340.359 16.398 340.305 16.344 cv
340.246 16.289 340.199 16.203 340.172 16.086 cv
340.137 15.969 340.121 15.797 340.125 15.566 cv
340.121 15.418 340.129 15.297 340.141 15.203 cv
340.148 15.113 340.164 15.039 340.188 14.984 cv
340.207 14.93 340.23 14.895 340.266 14.875 cv
340.293 14.859 340.332 14.852 340.383 14.848 cv
340.438 14.852 340.523 14.883 340.637 14.945 cv
340.746 15.012 340.887 15.082 341.055 15.16 cv
341.219 15.238 341.41 15.312 341.633 15.379 cv
341.852 15.449 342.102 15.484 342.387 15.48 cv
342.559 15.484 342.719 15.465 342.859 15.426 cv
342.996 15.391 343.113 15.34 343.219 15.27 cv
343.316 15.207 343.395 15.121 343.449 15.012 cv
343.5 14.91 343.527 14.789 343.527 14.656 cv
343.527 14.5 343.477 14.367 343.383 14.254 cv
343.281 14.145 343.156 14.047 343 13.961 cv
342.84 13.879 342.66 13.801 342.461 13.727 cv
342.258 13.656 342.051 13.574 341.844 13.484 cv
341.629 13.398 341.422 13.297 341.227 13.18 cv
341.023 13.066 340.848 12.926 340.691 12.758 cv
340.531 12.594 340.402 12.395 340.309 12.156 cv
340.211 11.926 340.164 11.645 340.164 11.312 cv
340.164 10.984 340.227 10.68 340.359 10.398 cv
340.484 10.121 340.672 9.883 340.922 9.68402 cv
341.164 9.48798 341.461 9.336 341.813 9.22302 cv
342.16 9.117 342.555 9.06201 342.996 9.05902 cv
343.211 9.06201 343.426 9.078 343.633 9.10498 cv
343.836 9.14099 344.02 9.17999 344.191 9.22302 cv
344.355 9.27301 344.496 9.32397 344.613 9.375 cv
344.723 9.43402 344.805 9.47998 344.859 9.51599 cv
344.906 9.55902 344.941 9.59802 344.965 9.633 cv
344.98 9.67603 344.996 9.72302 345.012 9.77301 cv
345.02 9.83197 345.031 9.89801 345.039 9.97699 cv
345.047 10.059 345.051 10.16 345.051 10.277 cv
345.051 10.422 345.047 10.535 345.039 10.621 cv
345.031 10.711 345.016 10.781 345 10.832 cv
344.977 10.883 344.953 10.918 344.926 10.934 cv
344.891 10.957 344.855 10.965 344.816 10.961 cv
344.77 10.965 344.695 10.937 344.598 10.883 cv
344.496 10.828 344.371 10.77 344.227 10.707 cv
344.074 10.645 343.902 10.586 343.711 10.531 cv
343.512 10.477 343.289 10.449 343.043 10.449 cv
342.863 10.449 342.711 10.469 342.582 10.504 cv
342.449 10.543 342.344 10.594 342.262 10.66 cv
342.176 10.73 342.113 10.812 342.074 10.898 cv
342.031 10.992 342.008 11.086 342.012 11.187 cv
342.008 11.352 342.059 11.488 342.16 11.594 cv
342.258 11.707 342.387 11.805 342.551 11.883 cv
342.707 11.969 342.891 12.047 343.102 12.117 cv
343.305 12.195 343.516 12.273 343.727 12.355 cv
343.938 12.445 344.145 12.547 344.352 12.656 cv
344.555 12.773 344.738 12.914 344.902 13.078 cv
345.063 13.25 345.191 13.449 345.289 13.676 cv
345.387 13.91 345.438 14.184 345.438 14.5 cv
cp
f
357.664 12.914 mo
357.66 13.512 357.582 14.051 357.43 14.539 cv
357.27 15.027 357.035 15.449 356.719 15.801 cv
356.398 16.156 356 16.43 355.523 16.621 cv
355.047 16.812 354.488 16.906 353.848 16.91 cv
353.227 16.906 352.688 16.824 352.23 16.652 cv
351.773 16.484 351.395 16.234 351.094 15.902 cv
350.789 15.578 350.563 15.176 350.422 14.695 cv
350.273 14.219 350.203 13.672 350.203 13.055 cv
350.203 12.465 350.281 11.922 350.441 11.43 cv
350.598 10.941 350.836 10.52 351.152 10.164 cv
351.469 9.81598 351.863 9.54303 352.344 9.34802 cv
352.816 9.15601 353.375 9.06201 354.02 9.05902 cv
354.641 9.06201 355.184 9.14502 355.641 9.31201 cv
356.098 9.48401 356.477 9.73401 356.777 10.059 cv
357.074 10.391 357.297 10.793 357.445 11.27 cv
357.59 11.746 357.66 12.297 357.664 12.914 cv
cp
355.641 12.992 mo
355.641 12.648 355.613 12.332 355.559 12.043 cv
355.504 11.754 355.41 11.504 355.285 11.289 cv
355.152 11.078 354.98 10.914 354.766 10.793 cv
354.547 10.676 354.273 10.613 353.949 10.613 cv
353.652 10.613 353.398 10.668 353.184 10.773 cv
352.961 10.879 352.781 11.035 352.645 11.238 cv
352.5 11.449 352.395 11.695 352.328 11.98 cv
352.254 12.273 352.219 12.602 352.223 12.969 cv
352.219 13.312 352.246 13.629 352.309 13.918 cv
352.363 14.207 352.457 14.461 352.586 14.672 cv
352.711 14.887 352.883 15.051 353.105 15.164 cv
353.32 15.285 353.594 15.344 353.918 15.34 cv
354.215 15.344 354.473 15.289 354.691 15.18 cv
354.91 15.074 355.09 14.922 355.23 14.719 cv
355.371 14.52 355.473 14.273 355.539 13.98 cv
355.605 13.695 355.641 13.363 355.641 12.992 cv
cp
f
363.422 6.85199 mo
363.418 7 363.414 7.12097 363.406 7.211 cv
363.395 7.30499 363.379 7.375 363.359 7.422 cv
363.336 7.47302 363.313 7.508 363.289 7.52301 cv
363.262 7.547 363.23 7.55499 363.203 7.55103 cv
363.164 7.55499 363.125 7.547 363.082 7.52301 cv
363.035 7.508 362.98 7.48798 362.918 7.46503 cv
362.852 7.44897 362.773 7.42999 362.688 7.40601 cv
362.594 7.39099 362.492 7.37903 362.375 7.37903 cv
362.234 7.37903 362.113 7.40198 362.012 7.44501 cv
361.91 7.492 361.824 7.56201 361.758 7.65601 cv
361.688 7.75403 361.637 7.87903 361.609 8.03101 cv
361.574 8.18701 361.559 8.375 361.563 8.59802 cv
361.563 9.23798 li
362.836 9.23798 li
362.879 9.242 362.922 9.25403 362.965 9.27698 cv
363 9.30499 363.031 9.34802 363.063 9.40601 cv
363.086 9.46899 363.105 9.55103 363.121 9.65198 cv
363.129 9.758 363.137 9.88702 363.141 10.035 cv
363.137 10.324 363.109 10.527 363.063 10.648 cv
363.008 10.773 362.934 10.836 362.836 10.832 cv
361.563 10.832 li
361.563 16.465 li
361.559 16.52 361.543 16.562 361.516 16.602 cv
361.48 16.641 361.43 16.676 361.359 16.699 cv
361.285 16.727 361.184 16.742 361.055 16.758 cv
360.922 16.77 360.762 16.777 360.578 16.777 cv
360.387 16.777 360.23 16.77 360.105 16.758 cv
359.977 16.742 359.875 16.727 359.805 16.699 cv
359.727 16.676 359.676 16.641 359.648 16.602 cv
359.617 16.562 359.602 16.52 359.605 16.465 cv
359.605 10.832 li
358.73 10.832 li
358.629 10.836 358.555 10.773 358.508 10.648 cv
358.457 10.527 358.43 10.324 358.434 10.035 cv
358.43 9.88702 358.438 9.758 358.453 9.65198 cv
358.465 9.55103 358.484 9.46899 358.508 9.40601 cv
358.531 9.34802 358.563 9.30499 358.602 9.27698 cv
358.641 9.25403 358.684 9.242 358.738 9.23798 cv
359.605 9.23798 li
359.605 8.65198 li
359.602 8.17999 359.648 7.76599 359.746 7.40997 cv
359.836 7.05499 359.984 6.758 360.184 6.52002 cv
360.383 6.28497 360.637 6.10498 360.949 5.98401 cv
361.258 5.867 361.625 5.80902 362.047 5.80499 cv
362.25 5.80902 362.441 5.82397 362.625 5.85498 cv
362.805 5.89099 362.949 5.92999 363.055 5.96503 cv
363.156 6.008 363.227 6.04303 363.266 6.07397 cv
363.301 6.10901 363.328 6.15997 363.355 6.22302 cv
363.375 6.29303 363.395 6.375 363.406 6.47302 cv
363.414 6.578 363.418 6.703 363.422 6.85199 cv
cp
f
373.988 13.703 mo
373.984 14.238 373.887 14.703 373.691 15.102 cv
373.492 15.5 373.223 15.836 372.887 16.102 cv
372.547 16.375 372.152 16.574 371.703 16.707 cv
371.246 16.84 370.762 16.906 370.25 16.91 cv
369.898 16.906 369.574 16.879 369.277 16.824 cv
368.977 16.766 368.715 16.699 368.488 16.617 cv
368.258 16.539 368.066 16.453 367.914 16.363 cv
367.758 16.277 367.648 16.199 367.582 16.129 cv
367.512 16.062 367.461 15.965 367.438 15.836 cv
367.406 15.711 367.395 15.527 367.395 15.285 cv
367.395 15.125 367.398 14.992 367.41 14.883 cv
367.418 14.777 367.434 14.687 367.461 14.617 cv
367.48 14.551 367.512 14.504 367.555 14.473 cv
367.59 14.449 367.637 14.434 367.691 14.43 cv
367.762 14.434 367.863 14.477 368 14.559 cv
368.129 14.648 368.301 14.742 368.512 14.844 cv
368.719 14.945 368.965 15.039 369.254 15.125 cv
369.539 15.211 369.875 15.254 370.258 15.254 cv
370.504 15.254 370.727 15.227 370.93 15.164 cv
371.125 15.109 371.293 15.023 371.434 14.914 cv
371.566 14.805 371.672 14.672 371.75 14.508 cv
371.82 14.352 371.859 14.172 371.859 13.969 cv
371.859 13.742 371.797 13.543 371.672 13.379 cv
371.547 13.215 371.383 13.07 371.184 12.941 cv
370.98 12.816 370.754 12.695 370.5 12.582 cv
370.242 12.473 369.977 12.355 369.711 12.227 cv
369.438 12.105 369.176 11.965 368.922 11.801 cv
368.668 11.645 368.441 11.453 368.242 11.23 cv
368.039 11.012 367.875 10.75 367.754 10.449 cv
367.625 10.148 367.563 9.789 367.566 9.36298 cv
367.563 8.883 367.652 8.45697 367.836 8.086 cv
368.012 7.72302 368.254 7.41803 368.559 7.17603 cv
368.859 6.93701 369.219 6.758 369.637 6.633 cv
370.047 6.51599 370.484 6.453 370.953 6.453 cv
371.188 6.453 371.43 6.47302 371.672 6.508 cv
371.91 6.547 372.133 6.59802 372.344 6.65601 cv
372.551 6.72302 372.734 6.79303 372.895 6.867 cv
373.055 6.94501 373.16 7.008 373.215 7.05902 cv
373.262 7.11298 373.297 7.15601 373.32 7.19098 cv
373.336 7.22998 373.352 7.28101 373.367 7.336 cv
373.375 7.39801 373.387 7.47302 373.395 7.56201 cv
373.398 7.65601 373.398 7.77002 373.402 7.90198 cv
373.398 8.05499 373.395 8.18402 373.391 8.28497 cv
373.379 8.39502 373.367 8.47998 373.352 8.54303 cv
373.332 8.61298 373.305 8.65997 373.273 8.69098 cv
373.234 8.72302 373.191 8.73798 373.137 8.73798 cv
373.078 8.73798 372.984 8.703 372.863 8.62903 cv
372.738 8.55902 372.586 8.47998 372.406 8.39099 cv
372.219 8.30902 372.008 8.22998 371.773 8.15601 cv
371.531 8.09003 371.27 8.05499 370.984 8.05103 cv
370.758 8.05499 370.563 8.08197 370.398 8.133 cv
370.23 8.19098 370.09 8.26599 369.98 8.35901 cv
369.863 8.45697 369.781 8.57397 369.73 8.70697 cv
369.672 8.84802 369.645 8.98798 369.648 9.13702 cv
369.645 9.36298 369.707 9.55902 369.832 9.71899 cv
369.953 9.88702 370.117 10.031 370.324 10.156 cv
370.527 10.285 370.758 10.406 371.023 10.516 cv
371.281 10.629 371.547 10.746 371.82 10.871 cv
372.086 10.996 372.352 11.137 372.613 11.293 cv
372.871 11.453 373.102 11.645 373.309 11.863 cv
373.508 12.086 373.672 12.348 373.801 12.645 cv
373.922 12.949 373.984 13.301 373.988 13.703 cv
cp
f
382.051 16.465 mo
382.047 16.52 382.035 16.562 382.012 16.602 cv
381.984 16.641 381.938 16.676 381.875 16.699 cv
381.809 16.727 381.723 16.742 381.617 16.758 cv
381.508 16.77 381.375 16.777 381.215 16.777 cv
381.043 16.777 380.902 16.77 380.797 16.758 cv
380.688 16.742 380.602 16.727 380.543 16.699 cv
380.477 16.676 380.434 16.641 380.41 16.602 cv
380.383 16.562 380.371 16.52 380.371 16.465 cv
380.371 15.66 li
379.988 16.078 379.598 16.391 379.199 16.598 cv
378.801 16.805 378.387 16.906 377.961 16.91 cv
377.48 16.906 377.078 16.832 376.754 16.676 cv
376.43 16.523 376.168 16.309 375.969 16.035 cv
375.766 15.766 375.621 15.453 375.539 15.098 cv
375.449 14.742 375.406 14.297 375.41 13.766 cv
375.41 9.50403 li
375.406 9.45697 375.422 9.40997 375.453 9.367 cv
375.48 9.33197 375.531 9.30103 375.609 9.27002 cv
375.68 9.24597 375.781 9.22699 375.914 9.211 cv
376.039 9.203 376.199 9.19501 376.387 9.19098 cv
376.574 9.19501 376.73 9.203 376.859 9.211 cv
376.98 9.22699 377.082 9.24597 377.16 9.27002 cv
377.234 9.30103 377.285 9.33197 377.32 9.367 cv
377.348 9.40997 377.363 9.45697 377.367 9.50403 cv
377.367 13.437 li
377.363 13.805 377.387 14.086 377.438 14.273 cv
377.48 14.469 377.555 14.633 377.652 14.77 cv
377.746 14.906 377.867 15.012 378.02 15.086 cv
378.164 15.164 378.336 15.203 378.539 15.199 cv
378.785 15.203 379.039 15.113 379.293 14.93 cv
379.543 14.75 379.813 14.484 380.102 14.133 cv
380.102 9.50403 li
380.102 9.45697 380.113 9.40997 380.145 9.367 cv
380.168 9.33197 380.219 9.30103 380.297 9.27002 cv
380.367 9.24597 380.469 9.22699 380.598 9.211 cv
380.719 9.203 380.879 9.19501 381.074 9.19098 cv
381.266 9.19501 381.422 9.203 381.551 9.211 cv
381.672 9.22699 381.773 9.24597 381.848 9.27002 cv
381.918 9.30103 381.969 9.33197 382.004 9.367 cv
382.031 9.40997 382.047 9.45697 382.051 9.50403 cv
cp
f
391.039 12.891 mo
391.039 13.516 390.969 14.07 390.836 14.562 cv
390.695 15.055 390.5 15.477 390.25 15.824 cv
389.992 16.176 389.68 16.445 389.309 16.629 cv
388.938 16.816 388.516 16.906 388.043 16.91 cv
387.805 16.906 387.586 16.883 387.387 16.844 cv
387.18 16.797 386.984 16.73 386.805 16.629 cv
386.617 16.535 386.438 16.41 386.258 16.254 cv
386.078 16.105 385.895 15.922 385.707 15.707 cv
385.707 16.465 li
385.707 16.527 385.691 16.574 385.664 16.609 cv
385.633 16.652 385.586 16.684 385.523 16.707 cv
385.457 16.73 385.371 16.746 385.262 16.762 cv
385.152 16.77 385.02 16.777 384.867 16.777 cv
384.703 16.777 384.57 16.77 384.465 16.762 cv
384.355 16.746 384.27 16.73 384.207 16.707 cv
384.141 16.684 384.094 16.652 384.07 16.609 cv
384.043 16.574 384.031 16.527 384.031 16.465 cv
384.031 6.203 li
384.031 6.15198 384.047 6.10498 384.078 6.06201 cv
384.109 6.02301 384.16 5.98798 384.238 5.95697 cv
384.309 5.92999 384.41 5.90601 384.539 5.89099 cv
384.66 5.875 384.816 5.867 385.012 5.867 cv
385.199 5.867 385.359 5.875 385.488 5.89099 cv
385.609 5.90601 385.711 5.92999 385.789 5.95697 cv
385.863 5.98798 385.914 6.02301 385.949 6.06201 cv
385.977 6.10498 385.992 6.15198 385.996 6.203 cv
385.996 10.051 li
386.168 9.875 386.348 9.72699 386.527 9.59802 cv
386.703 9.47699 386.879 9.37097 387.059 9.289 cv
387.234 9.211 387.418 9.15198 387.605 9.11298 cv
387.793 9.078 387.988 9.06201 388.199 9.05902 cv
388.707 9.06201 389.145 9.164 389.508 9.367 cv
389.863 9.57397 390.156 9.85199 390.387 10.199 cv
390.609 10.551 390.773 10.957 390.883 11.422 cv
390.984 11.887 391.039 12.379 391.039 12.891 cv
cp
389 13.031 mo
389 12.738 388.977 12.449 388.934 12.172 cv
388.891 11.898 388.816 11.656 388.707 11.437 cv
388.598 11.227 388.453 11.055 388.281 10.93 cv
388.102 10.805 387.883 10.742 387.621 10.738 cv
387.488 10.742 387.359 10.762 387.238 10.793 cv
387.109 10.832 386.98 10.895 386.852 10.98 cv
386.715 11.07 386.578 11.184 386.441 11.32 cv
386.297 11.465 386.148 11.637 385.996 11.844 cv
385.996 14.156 li
386.27 14.516 386.535 14.785 386.789 14.965 cv
387.039 15.152 387.305 15.242 387.582 15.238 cv
387.836 15.242 388.051 15.176 388.23 15.043 cv
388.406 14.914 388.555 14.746 388.672 14.539 cv
388.789 14.332 388.871 14.098 388.922 13.828 cv
388.973 13.566 389 13.301 389 13.031 cv
cp
f
396.012 12.805 mo
396.008 13.109 395.98 13.32 395.926 13.437 cv
395.867 13.559 395.773 13.621 395.652 13.617 cv
392.406 13.617 li
392.273 13.621 392.18 13.559 392.125 13.434 cv
392.063 13.312 392.035 13.102 392.039 12.805 cv
392.035 12.516 392.063 12.312 392.125 12.187 cv
392.18 12.07 392.273 12.008 392.406 12.008 cv
395.652 12.008 li
395.711 12.008 395.766 12.023 395.813 12.047 cv
395.855 12.078 395.895 12.121 395.926 12.18 cv
395.957 12.246 395.977 12.328 395.992 12.43 cv
396 12.535 396.008 12.66 396.012 12.805 cv
cp
f
399.66 16.449 mo
399.656 16.504 399.641 16.551 399.609 16.59 cv
399.574 16.633 399.52 16.668 399.441 16.691 cv
399.363 16.719 399.258 16.738 399.129 16.754 cv
398.996 16.77 398.828 16.777 398.629 16.777 cv
398.43 16.777 398.266 16.77 398.137 16.754 cv
398 16.738 397.895 16.719 397.82 16.691 cv
397.738 16.668 397.684 16.633 397.652 16.59 cv
397.617 16.551 397.602 16.504 397.602 16.449 cv
397.602 6.914 li
397.602 6.867 397.617 6.82001 397.652 6.77301 cv
397.684 6.73401 397.742 6.69897 397.824 6.672 cv
397.902 6.64801 398.008 6.62903 398.141 6.60901 cv
398.27 6.59802 398.43 6.59003 398.629 6.586 cv
398.828 6.59003 398.996 6.59802 399.129 6.60901 cv
399.258 6.62903 399.363 6.64801 399.441 6.672 cv
399.52 6.69897 399.574 6.73401 399.609 6.77301 cv
399.641 6.82001 399.656 6.867 399.66 6.914 cv
cp
f
412.762 16.465 mo
412.762 16.52 412.746 16.562 412.715 16.602 cv
412.684 16.641 412.629 16.676 412.559 16.699 cv
412.48 16.727 412.383 16.742 412.262 16.758 cv
412.133 16.77 411.973 16.777 411.785 16.777 cv
411.582 16.777 411.422 16.77 411.301 16.758 cv
411.172 16.742 411.07 16.727 411 16.699 cv
410.922 16.676 410.871 16.641 410.844 16.602 cv
410.813 16.562 410.797 16.52 410.801 16.465 cv
410.801 12.336 li
410.797 12.102 410.777 11.891 410.734 11.695 cv
410.688 11.508 410.617 11.34 410.531 11.199 cv
410.438 11.062 410.324 10.957 410.191 10.883 cv
410.051 10.809 409.887 10.773 409.695 10.77 cv
409.457 10.773 409.219 10.863 408.984 11.043 cv
408.742 11.227 408.484 11.492 408.203 11.836 cv
408.203 16.465 li
408.203 16.52 408.188 16.562 408.156 16.602 cv
408.125 16.641 408.07 16.676 407.996 16.699 cv
407.918 16.727 407.816 16.742 407.695 16.758 cv
407.566 16.77 407.41 16.777 407.227 16.777 cv
407.031 16.777 406.875 16.77 406.75 16.758 cv
406.625 16.742 406.523 16.727 406.449 16.699 cv
406.375 16.676 406.324 16.641 406.293 16.602 cv
406.262 16.562 406.246 16.52 406.246 16.465 cv
406.246 12.336 li
406.246 12.102 406.223 11.891 406.18 11.695 cv
406.133 11.508 406.066 11.34 405.98 11.199 cv
405.891 11.062 405.777 10.957 405.637 10.883 cv
405.496 10.809 405.332 10.773 405.145 10.77 cv
404.902 10.773 404.66 10.863 404.426 11.043 cv
404.184 11.227 403.926 11.492 403.652 11.836 cv
403.652 16.465 li
403.648 16.52 403.633 16.562 403.605 16.602 cv
403.57 16.641 403.52 16.676 403.445 16.699 cv
403.367 16.727 403.266 16.742 403.145 16.758 cv
403.016 16.77 402.855 16.777 402.668 16.777 cv
402.473 16.777 402.316 16.77 402.195 16.758 cv
402.066 16.742 401.965 16.727 401.895 16.699 cv
401.816 16.676 401.766 16.641 401.734 16.602 cv
401.703 16.562 401.688 16.52 401.688 16.465 cv
401.688 9.50403 li
401.688 9.45697 401.699 9.40997 401.727 9.367 cv
401.75 9.33197 401.797 9.30103 401.867 9.27002 cv
401.934 9.24597 402.02 9.22699 402.129 9.211 cv
402.23 9.203 402.367 9.19501 402.531 9.19098 cv
402.695 9.19501 402.832 9.203 402.941 9.211 cv
403.051 9.22699 403.133 9.24597 403.195 9.27002 cv
403.25 9.30103 403.293 9.33197 403.324 9.367 cv
403.348 9.40997 403.363 9.45697 403.363 9.50403 cv
403.363 10.309 li
403.746 9.89502 404.129 9.58197 404.516 9.37097 cv
404.895 9.164 405.293 9.06201 405.715 9.05902 cv
405.996 9.06201 406.254 9.09003 406.484 9.14801 cv
406.711 9.211 406.914 9.297 407.098 9.40601 cv
407.273 9.52002 407.43 9.65601 407.563 9.80902 cv
407.691 9.96899 407.801 10.141 407.891 10.332 cv
408.098 10.109 408.301 9.91803 408.504 9.75403 cv
408.699 9.59399 408.898 9.461 409.098 9.35901 cv
409.289 9.258 409.484 9.18402 409.684 9.133 cv
409.875 9.086 410.074 9.06201 410.281 9.05902 cv
410.738 9.06201 411.129 9.14099 411.449 9.29303 cv
411.766 9.453 412.02 9.664 412.219 9.92999 cv
412.41 10.199 412.551 10.512 412.637 10.871 cv
412.719 11.23 412.762 11.609 412.762 12.008 cv
cp
f
420.613 16.488 mo
420.613 16.566 420.586 16.621 420.535 16.66 cv
420.48 16.703 420.398 16.73 420.289 16.75 cv
420.176 16.766 420.012 16.777 419.793 16.777 cv
419.559 16.777 419.387 16.766 419.285 16.75 cv
419.176 16.73 419.102 16.703 419.059 16.66 cv
419.012 16.621 418.988 16.566 418.992 16.488 cv
418.992 15.934 li
418.703 16.242 418.379 16.484 418.012 16.652 cv
417.645 16.824 417.234 16.906 416.789 16.91 cv
416.414 16.906 416.074 16.859 415.77 16.766 cv
415.457 16.672 415.191 16.531 414.969 16.336 cv
414.738 16.148 414.563 15.91 414.441 15.629 cv
414.313 15.348 414.25 15.023 414.254 14.648 cv
414.25 14.246 414.328 13.891 414.492 13.59 cv
414.648 13.293 414.887 13.047 415.199 12.848 cv
415.512 12.656 415.902 12.512 416.375 12.414 cv
416.84 12.324 417.383 12.277 418.008 12.273 cv
418.688 12.273 li
418.688 11.852 li
418.684 11.637 418.664 11.445 418.621 11.277 cv
418.574 11.117 418.5 10.98 418.402 10.871 cv
418.297 10.762 418.16 10.684 417.996 10.629 cv
417.824 10.582 417.617 10.555 417.367 10.551 cv
417.039 10.555 416.746 10.59 416.488 10.66 cv
416.23 10.734 416 10.816 415.805 10.902 cv
415.605 10.992 415.441 11.07 415.313 11.141 cv
415.176 11.215 415.07 11.254 414.988 11.25 cv
414.93 11.254 414.879 11.234 414.836 11.195 cv
414.789 11.16 414.75 11.109 414.727 11.039 cv
414.695 10.977 414.676 10.895 414.66 10.793 cv
414.645 10.699 414.637 10.59 414.637 10.465 cv
414.637 10.309 414.648 10.18 414.676 10.082 cv
414.699 9.992 414.75 9.90601 414.824 9.828 cv
414.895 9.75403 415.02 9.672 415.207 9.578 cv
415.387 9.48798 415.602 9.40198 415.844 9.32397 cv
416.086 9.24597 416.352 9.18402 416.645 9.133 cv
416.93 9.086 417.227 9.06201 417.539 9.05902 cv
418.082 9.06201 418.551 9.11298 418.941 9.21899 cv
419.328 9.328 419.645 9.492 419.895 9.711 cv
420.141 9.93402 420.324 10.219 420.441 10.566 cv
420.555 10.914 420.613 11.328 420.613 11.805 cv
cp
418.688 13.508 mo
417.938 13.508 li
417.617 13.508 417.348 13.531 417.125 13.578 cv
416.898 13.625 416.715 13.695 416.578 13.789 cv
416.434 13.883 416.332 13.996 416.27 14.129 cv
416.203 14.262 416.172 14.414 416.172 14.586 cv
416.172 14.875 416.262 15.105 416.449 15.27 cv
416.629 15.441 416.887 15.523 417.219 15.52 cv
417.492 15.523 417.746 15.453 417.98 15.309 cv
418.211 15.172 418.445 14.969 418.688 14.695 cv
cp
f
428.852 9.98798 mo
428.848 10.242 428.82 10.426 428.766 10.543 cv
428.707 10.664 428.637 10.727 428.555 10.723 cv
427.734 10.723 li
427.848 10.848 427.93 10.988 427.98 11.145 cv
428.027 11.309 428.051 11.473 428.055 11.641 cv
428.051 12.051 427.984 12.41 427.852 12.723 cv
427.715 13.039 427.52 13.305 427.27 13.52 cv
427.016 13.738 426.711 13.902 426.359 14.012 cv
426 14.125 425.605 14.184 425.168 14.18 cv
424.941 14.184 424.727 14.156 424.527 14.098 cv
424.32 14.047 424.164 13.98 424.059 13.906 cv
423.992 13.977 423.938 14.059 423.891 14.148 cv
423.84 14.246 423.813 14.352 423.816 14.461 cv
423.813 14.617 423.879 14.738 424.016 14.832 cv
424.145 14.926 424.332 14.98 424.574 14.988 cv
426.27 15.051 li
426.664 15.07 427.016 15.125 427.324 15.219 cv
427.633 15.316 427.891 15.453 428.105 15.625 cv
428.313 15.801 428.477 16.012 428.59 16.254 cv
428.699 16.504 428.754 16.777 428.758 17.09 cv
428.754 17.43 428.68 17.754 428.531 18.062 cv
428.379 18.363 428.152 18.629 427.852 18.852 cv
427.551 19.074 427.172 19.25 426.719 19.383 cv
426.262 19.512 425.73 19.578 425.121 19.578 cv
424.527 19.578 424.02 19.531 423.602 19.437 cv
423.184 19.344 422.84 19.211 422.574 19.047 cv
422.301 18.875 422.105 18.676 421.988 18.449 cv
421.863 18.215 421.805 17.965 421.805 17.691 cv
421.805 17.52 421.824 17.355 421.871 17.199 cv
421.91 17.043 421.977 16.891 422.066 16.75 cv
422.148 16.605 422.254 16.473 422.383 16.34 cv
422.504 16.211 422.648 16.086 422.813 15.965 cv
422.586 15.848 422.41 15.684 422.293 15.477 cv
422.168 15.273 422.109 15.051 422.109 14.801 cv
422.109 14.5 422.18 14.219 422.32 13.965 cv
422.461 13.715 422.641 13.488 422.867 13.281 cv
422.68 13.102 422.535 12.883 422.43 12.625 cv
422.316 12.371 422.262 12.055 422.266 11.672 cv
422.262 11.27 422.332 10.906 422.48 10.586 cv
422.621 10.27 422.82 10 423.078 9.77301 cv
423.328 9.55499 423.633 9.383 423.988 9.26599 cv
424.34 9.14801 424.73 9.09003 425.16 9.09003 cv
425.375 9.09003 425.586 9.10498 425.789 9.12903 cv
425.988 9.15997 426.172 9.19501 426.348 9.23798 cv
428.555 9.23798 li
428.641 9.242 428.711 9.30103 428.77 9.40997 cv
428.82 9.52698 428.848 9.71899 428.852 9.98798 cv
cp
426.332 11.633 mo
426.328 11.258 426.223 10.969 426.02 10.762 cv
425.809 10.555 425.516 10.449 425.137 10.449 cv
424.941 10.449 424.773 10.484 424.629 10.547 cv
424.48 10.617 424.359 10.703 424.266 10.812 cv
424.168 10.922 424.094 11.051 424.051 11.199 cv
424 11.348 423.977 11.504 423.98 11.664 cv
423.977 12.02 424.082 12.301 424.293 12.504 cv
424.5 12.715 424.789 12.816 425.16 12.812 cv
425.355 12.816 425.527 12.785 425.676 12.719 cv
425.82 12.66 425.941 12.574 426.039 12.461 cv
426.133 12.355 426.207 12.23 426.258 12.082 cv
426.305 11.941 426.328 11.789 426.332 11.633 cv
cp
426.793 17.191 mo
426.789 16.953 426.695 16.777 426.512 16.652 cv
426.32 16.531 426.063 16.461 425.738 16.449 cv
424.34 16.41 li
424.203 16.512 424.094 16.605 424.016 16.695 cv
423.93 16.785 423.867 16.871 423.82 16.957 cv
423.77 17.039 423.734 17.121 423.723 17.199 cv
423.703 17.277 423.695 17.355 423.699 17.441 cv
423.695 17.699 423.828 17.898 424.094 18.035 cv
424.355 18.168 424.727 18.234 425.207 18.238 cv
425.5 18.234 425.75 18.207 425.957 18.148 cv
426.156 18.086 426.32 18.004 426.449 17.91 cv
426.57 17.809 426.66 17.699 426.715 17.578 cv
426.766 17.453 426.789 17.324 426.793 17.191 cv
cp
f
436.457 12.781 mo
436.453 13.023 436.402 13.203 436.297 13.312 cv
436.188 13.43 436.039 13.484 435.855 13.484 cv
431.617 13.484 li
431.613 13.781 431.648 14.051 431.723 14.293 cv
431.789 14.535 431.902 14.742 432.059 14.91 cv
432.211 15.078 432.41 15.207 432.652 15.293 cv
432.895 15.387 433.184 15.43 433.523 15.426 cv
433.863 15.43 434.164 15.406 434.43 15.352 cv
434.688 15.305 434.914 15.25 435.102 15.187 cv
435.289 15.133 435.445 15.078 435.574 15.023 cv
435.695 14.977 435.797 14.949 435.879 14.949 cv
435.922 14.949 435.961 14.961 435.996 14.977 cv
436.023 15 436.051 15.031 436.074 15.074 cv
436.094 15.125 436.105 15.191 436.117 15.273 cv
436.121 15.363 436.125 15.473 436.129 15.598 cv
436.125 15.715 436.125 15.812 436.121 15.891 cv
436.113 15.977 436.105 16.043 436.098 16.098 cv
436.086 16.156 436.07 16.207 436.051 16.242 cv
436.027 16.285 436 16.32 435.969 16.355 cv
435.934 16.395 435.84 16.445 435.691 16.504 cv
435.539 16.57 435.348 16.633 435.113 16.687 cv
434.879 16.75 434.609 16.797 434.313 16.844 cv
434.008 16.883 433.688 16.906 433.344 16.91 cv
432.723 16.906 432.18 16.832 431.715 16.676 cv
431.246 16.523 430.855 16.285 430.547 15.965 cv
430.234 15.648 430.004 15.25 429.852 14.766 cv
429.695 14.285 429.617 13.715 429.621 13.062 cv
429.617 12.445 429.699 11.891 429.863 11.391 cv
430.023 10.898 430.254 10.477 430.563 10.125 cv
430.867 9.78101 431.242 9.51599 431.684 9.33197 cv
432.121 9.15198 432.617 9.06201 433.172 9.05902 cv
433.754 9.06201 434.25 9.14801 434.664 9.31598 cv
435.074 9.492 435.414 9.72998 435.684 10.031 cv
435.945 10.34 436.141 10.699 436.27 11.113 cv
436.391 11.531 436.453 11.984 436.457 12.469 cv
cp
434.555 12.219 mo
434.566 11.668 434.457 11.238 434.223 10.922 cv
433.984 10.609 433.617 10.449 433.125 10.449 cv
432.871 10.449 432.652 10.496 432.473 10.59 cv
432.285 10.684 432.133 10.812 432.012 10.969 cv
431.887 11.129 431.793 11.312 431.73 11.527 cv
431.664 11.746 431.625 11.977 431.617 12.219 cv
cp
f
442.965 14.5 mo
442.965 14.895 442.891 15.242 442.742 15.543 cv
442.594 15.848 442.383 16.102 442.117 16.301 cv
441.844 16.508 441.523 16.656 441.156 16.758 cv
440.781 16.855 440.383 16.906 439.953 16.91 cv
439.691 16.906 439.441 16.887 439.207 16.852 cv
438.969 16.809 438.758 16.762 438.574 16.703 cv
438.383 16.645 438.227 16.582 438.105 16.52 cv
437.977 16.457 437.887 16.398 437.832 16.344 cv
437.773 16.289 437.727 16.203 437.699 16.086 cv
437.664 15.969 437.648 15.797 437.652 15.566 cv
437.648 15.418 437.656 15.297 437.668 15.203 cv
437.676 15.113 437.691 15.039 437.715 14.984 cv
437.734 14.93 437.758 14.895 437.793 14.875 cv
437.82 14.859 437.859 14.852 437.91 14.848 cv
437.965 14.852 438.051 14.883 438.164 14.945 cv
438.273 15.012 438.414 15.082 438.582 15.16 cv
438.746 15.238 438.938 15.312 439.16 15.379 cv
439.379 15.449 439.629 15.484 439.914 15.48 cv
440.086 15.484 440.246 15.465 440.387 15.426 cv
440.523 15.391 440.641 15.34 440.746 15.27 cv
440.844 15.207 440.922 15.121 440.977 15.012 cv
441.027 14.91 441.055 14.789 441.055 14.656 cv
441.055 14.5 441.004 14.367 440.91 14.254 cv
440.809 14.145 440.684 14.047 440.527 13.961 cv
440.367 13.879 440.188 13.801 439.988 13.727 cv
439.785 13.656 439.578 13.574 439.371 13.484 cv
439.156 13.398 438.949 13.297 438.754 13.18 cv
438.551 13.066 438.375 12.926 438.219 12.758 cv
438.059 12.594 437.93 12.395 437.836 12.156 cv
437.738 11.926 437.691 11.645 437.691 11.312 cv
437.691 10.984 437.754 10.68 437.887 10.398 cv
438.012 10.121 438.199 9.883 438.449 9.68402 cv
438.691 9.48798 438.988 9.336 439.34 9.22302 cv
439.688 9.117 440.082 9.06201 440.523 9.05902 cv
440.738 9.06201 440.953 9.078 441.16 9.10498 cv
441.363 9.14099 441.547 9.17999 441.719 9.22302 cv
441.883 9.27301 442.023 9.32397 442.141 9.375 cv
442.25 9.43402 442.332 9.47998 442.387 9.51599 cv
442.434 9.55902 442.469 9.59802 442.492 9.633 cv
442.508 9.67603 442.523 9.72302 442.539 9.77301 cv
442.547 9.83197 442.559 9.89801 442.566 9.97699 cv
442.574 10.059 442.578 10.16 442.578 10.277 cv
442.578 10.422 442.574 10.535 442.566 10.621 cv
442.559 10.711 442.543 10.781 442.527 10.832 cv
442.504 10.883 442.48 10.918 442.453 10.934 cv
442.418 10.957 442.383 10.965 442.344 10.961 cv
442.297 10.965 442.223 10.937 442.125 10.883 cv
442.023 10.828 441.898 10.77 441.754 10.707 cv
441.602 10.645 441.43 10.586 441.238 10.531 cv
441.039 10.477 440.816 10.449 440.57 10.449 cv
440.391 10.449 440.238 10.469 440.109 10.504 cv
439.977 10.543 439.871 10.594 439.789 10.66 cv
439.703 10.73 439.641 10.812 439.602 10.898 cv
439.559 10.992 439.535 11.086 439.539 11.187 cv
439.535 11.352 439.586 11.488 439.688 11.594 cv
439.785 11.707 439.914 11.805 440.078 11.883 cv
440.234 11.969 440.418 12.047 440.629 12.117 cv
440.832 12.195 441.043 12.273 441.254 12.355 cv
441.465 12.445 441.672 12.547 441.879 12.656 cv
442.082 12.773 442.266 12.914 442.43 13.078 cv
442.59 13.25 442.719 13.449 442.816 13.676 cv
442.914 13.91 442.965 14.184 442.965 14.5 cv
cp
f
451.695 12.805 mo
451.691 13.109 451.664 13.32 451.609 13.437 cv
451.551 13.559 451.457 13.621 451.336 13.617 cv
448.09 13.617 li
447.957 13.621 447.863 13.559 447.809 13.434 cv
447.746 13.312 447.719 13.102 447.723 12.805 cv
447.719 12.516 447.746 12.312 447.809 12.187 cv
447.863 12.07 447.957 12.008 448.09 12.008 cv
451.336 12.008 li
451.395 12.008 451.449 12.023 451.496 12.047 cv
451.539 12.078 451.578 12.121 451.609 12.18 cv
451.641 12.246 451.66 12.328 451.676 12.43 cv
451.684 12.535 451.691 12.66 451.695 12.805 cv
cp
f
463.555 13.828 mo
463.551 14.098 463.523 14.297 463.473 14.434 cv
463.414 14.574 463.34 14.645 463.25 14.641 cv
462.352 14.641 li
462.352 16.465 li
462.348 16.52 462.332 16.562 462.305 16.602 cv
462.27 16.641 462.215 16.676 462.141 16.699 cv
462.059 16.727 461.957 16.742 461.836 16.758 cv
461.707 16.77 461.547 16.777 461.355 16.777 cv
461.164 16.777 461.008 16.77 460.883 16.758 cv
460.754 16.742 460.652 16.727 460.578 16.699 cv
460.5 16.676 460.449 16.641 460.422 16.602 cv
460.391 16.562 460.375 16.52 460.379 16.465 cv
460.379 14.641 li
456.516 14.641 li
456.438 14.645 456.375 14.637 456.32 14.613 cv
456.262 14.598 456.211 14.555 456.176 14.488 cv
456.133 14.426 456.105 14.332 456.09 14.207 cv
456.07 14.086 456.063 13.922 456.063 13.719 cv
456.063 13.555 456.066 13.41 456.074 13.285 cv
456.082 13.164 456.094 13.055 456.113 12.953 cv
456.129 12.855 456.156 12.762 456.191 12.672 cv
456.223 12.586 456.266 12.492 456.32 12.391 cv
459.457 6.85901 li
459.48 6.81598 459.527 6.77698 459.59 6.73798 cv
459.652 6.70697 459.738 6.67603 459.852 6.65198 cv
459.961 6.62903 460.102 6.61298 460.277 6.60199 cv
460.445 6.59399 460.656 6.59003 460.902 6.586 cv
461.168 6.59003 461.391 6.59399 461.578 6.60498 cv
461.762 6.62097 461.914 6.64502 462.027 6.66803 cv
462.137 6.69897 462.219 6.73401 462.273 6.77301 cv
462.324 6.82001 462.348 6.867 462.352 6.922 cv
462.352 13 li
463.25 13 li
463.332 13.004 463.402 13.066 463.465 13.191 cv
463.52 13.32 463.551 13.535 463.555 13.828 cv
cp
460.379 8.35498 mo
460.363 8.35498 li
457.703 13 li
460.379 13 li
cp
f
475.348 7.47302 mo
475.344 7.625 475.336 7.75403 475.328 7.85901 cv
475.313 7.96899 475.293 8.05499 475.27 8.117 cv
475.238 8.18402 475.207 8.23401 475.172 8.26202 cv
475.129 8.297 475.086 8.31201 475.043 8.30902 cv
472.516 8.30902 li
472.516 16.449 li
472.512 16.504 472.496 16.551 472.465 16.59 cv
472.43 16.633 472.375 16.668 472.297 16.691 cv
472.219 16.719 472.113 16.738 471.98 16.754 cv
471.848 16.77 471.68 16.777 471.484 16.777 cv
471.281 16.777 471.117 16.77 470.988 16.754 cv
470.852 16.738 470.746 16.719 470.672 16.691 cv
470.59 16.668 470.535 16.633 470.504 16.59 cv
470.469 16.551 470.449 16.504 470.453 16.449 cv
470.453 8.30902 li
467.926 8.30902 li
467.871 8.31201 467.824 8.297 467.793 8.26202 cv
467.754 8.23401 467.723 8.18402 467.699 8.117 cv
467.668 8.05499 467.648 7.96899 467.641 7.85901 cv
467.625 7.75403 467.621 7.625 467.621 7.47302 cv
467.621 7.31598 467.625 7.18701 467.641 7.078 cv
467.648 6.97302 467.668 6.883 467.699 6.81598 cv
467.723 6.75403 467.754 6.70697 467.793 6.67603 cv
467.824 6.64801 467.871 6.63702 467.926 6.633 cv
475.043 6.633 li
475.086 6.63702 475.129 6.64801 475.172 6.67603 cv
475.207 6.70697 475.238 6.75403 475.27 6.81598 cv
475.293 6.883 475.313 6.97302 475.328 7.078 cv
475.336 7.18701 475.344 7.31598 475.348 7.47302 cv
cp
f
483.074 16.465 mo
483.07 16.52 483.055 16.562 483.027 16.602 cv
482.992 16.641 482.941 16.676 482.871 16.699 cv
482.797 16.727 482.695 16.742 482.57 16.758 cv
482.441 16.77 482.285 16.777 482.098 16.777 cv
481.902 16.777 481.742 16.77 481.617 16.758 cv
481.488 16.742 481.387 16.727 481.316 16.699 cv
481.242 16.676 481.191 16.641 481.164 16.602 cv
481.129 16.562 481.113 16.52 481.117 16.465 cv
481.117 12.492 li
481.113 12.156 481.09 11.891 481.043 11.695 cv
480.992 11.508 480.918 11.34 480.828 11.199 cv
480.73 11.062 480.609 10.957 480.465 10.883 cv
480.313 10.809 480.141 10.773 479.945 10.77 cv
479.691 10.773 479.438 10.863 479.188 11.043 cv
478.93 11.227 478.664 11.492 478.391 11.836 cv
478.391 16.465 li
478.387 16.52 478.371 16.562 478.344 16.602 cv
478.309 16.641 478.258 16.676 478.184 16.699 cv
478.105 16.727 478.004 16.742 477.883 16.758 cv
477.754 16.77 477.594 16.777 477.406 16.777 cv
477.211 16.777 477.055 16.77 476.934 16.758 cv
476.805 16.742 476.703 16.727 476.633 16.699 cv
476.555 16.676 476.504 16.641 476.473 16.602 cv
476.441 16.562 476.426 16.52 476.426 16.465 cv
476.426 6.203 li
476.426 6.15198 476.441 6.10498 476.473 6.06201 cv
476.504 6.02301 476.555 5.98798 476.633 5.95697 cv
476.703 5.92999 476.805 5.90601 476.934 5.89099 cv
477.055 5.875 477.211 5.867 477.406 5.867 cv
477.594 5.867 477.754 5.875 477.883 5.89099 cv
478.004 5.90601 478.105 5.92999 478.184 5.95697 cv
478.258 5.98798 478.309 6.02301 478.344 6.06201 cv
478.371 6.10498 478.387 6.15198 478.391 6.203 cv
478.391 10.051 li
478.727 9.71899 479.074 9.47302 479.426 9.30499 cv
479.777 9.14502 480.141 9.06201 480.523 9.05902 cv
480.992 9.06201 481.391 9.14099 481.719 9.29303 cv
482.039 9.453 482.305 9.664 482.508 9.93402 cv
482.707 10.207 482.852 10.523 482.941 10.883 cv
483.027 11.242 483.07 11.68 483.074 12.195 cv
cp
f
489.434 10.152 mo
489.43 10.344 489.426 10.496 489.418 10.613 cv
489.406 10.734 489.391 10.828 489.371 10.895 cv
489.348 10.961 489.32 11.008 489.289 11.031 cv
489.254 11.059 489.211 11.07 489.16 11.07 cv
489.117 11.07 489.07 11.062 489.02 11.043 cv
488.965 11.027 488.906 11.008 488.844 10.984 cv
488.777 10.965 488.707 10.945 488.629 10.926 cv
488.551 10.91 488.465 10.902 488.371 10.898 cv
488.262 10.902 488.152 10.922 488.043 10.965 cv
487.934 11.012 487.82 11.082 487.703 11.172 cv
487.586 11.27 487.461 11.395 487.336 11.547 cv
487.203 11.707 487.066 11.898 486.926 12.125 cv
486.926 16.465 li
486.922 16.52 486.906 16.562 486.879 16.602 cv
486.844 16.641 486.793 16.676 486.719 16.699 cv
486.641 16.727 486.539 16.742 486.418 16.758 cv
486.289 16.77 486.129 16.777 485.941 16.777 cv
485.746 16.777 485.59 16.77 485.469 16.758 cv
485.34 16.742 485.238 16.727 485.168 16.699 cv
485.09 16.676 485.039 16.641 485.008 16.602 cv
484.977 16.562 484.961 16.52 484.961 16.465 cv
484.961 9.50403 li
484.961 9.45697 484.973 9.40997 485 9.367 cv
485.023 9.33197 485.07 9.30103 485.141 9.27002 cv
485.207 9.24597 485.293 9.22699 485.402 9.211 cv
485.504 9.203 485.641 9.19501 485.805 9.19098 cv
485.969 9.19501 486.105 9.203 486.215 9.211 cv
486.324 9.22699 486.406 9.24597 486.469 9.27002 cv
486.523 9.30103 486.566 9.33197 486.598 9.367 cv
486.621 9.40997 486.637 9.45697 486.637 9.50403 cv
486.637 10.371 li
486.816 10.113 486.988 9.89801 487.152 9.72699 cv
487.313 9.56201 487.465 9.42603 487.613 9.32397 cv
487.758 9.22699 487.902 9.15997 488.051 9.117 cv
488.191 9.08197 488.34 9.06201 488.488 9.05902 cv
488.555 9.06201 488.625 9.06598 488.707 9.07001 cv
488.781 9.08197 488.863 9.09399 488.949 9.10901 cv
489.031 9.12903 489.105 9.14801 489.168 9.172 cv
489.23 9.19501 489.273 9.22302 489.305 9.24597 cv
489.328 9.27698 489.352 9.30499 489.367 9.33197 cv
489.379 9.367 489.391 9.40997 489.402 9.461 cv
489.41 9.52002 489.418 9.60199 489.426 9.70697 cv
489.43 9.82001 489.43 9.96899 489.434 10.152 cv
cp
f
496.906 12.781 mo
496.902 13.023 496.852 13.203 496.746 13.312 cv
496.637 13.43 496.488 13.484 496.305 13.484 cv
492.066 13.484 li
492.063 13.781 492.098 14.051 492.172 14.293 cv
492.238 14.535 492.352 14.742 492.508 14.91 cv
492.66 15.078 492.859 15.207 493.102 15.293 cv
493.344 15.387 493.633 15.43 493.973 15.426 cv
494.313 15.43 494.613 15.406 494.879 15.352 cv
495.137 15.305 495.363 15.25 495.551 15.187 cv
495.738 15.133 495.895 15.078 496.023 15.023 cv
496.145 14.977 496.246 14.949 496.328 14.949 cv
496.371 14.949 496.41 14.961 496.445 14.977 cv
496.473 15 496.5 15.031 496.523 15.074 cv
496.543 15.125 496.555 15.191 496.566 15.273 cv
496.57 15.363 496.574 15.473 496.578 15.598 cv
496.574 15.715 496.574 15.812 496.57 15.891 cv
496.563 15.977 496.555 16.043 496.547 16.098 cv
496.535 16.156 496.52 16.207 496.5 16.242 cv
496.477 16.285 496.449 16.32 496.418 16.355 cv
496.383 16.395 496.289 16.445 496.141 16.504 cv
495.988 16.57 495.797 16.633 495.563 16.687 cv
495.328 16.75 495.059 16.797 494.762 16.844 cv
494.457 16.883 494.137 16.906 493.793 16.91 cv
493.172 16.906 492.629 16.832 492.164 16.676 cv
491.695 16.523 491.305 16.285 490.996 15.965 cv
490.684 15.648 490.453 15.25 490.301 14.766 cv
490.145 14.285 490.066 13.715 490.07 13.062 cv
490.066 12.445 490.148 11.891 490.313 11.391 cv
490.473 10.898 490.703 10.477 491.012 10.125 cv
491.316 9.78101 491.691 9.51599 492.133 9.33197 cv
492.57 9.15198 493.066 9.06201 493.621 9.05902 cv
494.203 9.06201 494.699 9.14801 495.113 9.31598 cv
495.523 9.492 495.863 9.72998 496.133 10.031 cv
496.395 10.34 496.59 10.699 496.719 11.113 cv
496.84 11.531 496.902 11.984 496.906 12.469 cv
cp
495.004 12.219 mo
495.016 11.668 494.906 11.238 494.672 10.922 cv
494.434 10.609 494.066 10.449 493.574 10.449 cv
493.32 10.449 493.102 10.496 492.922 10.59 cv
492.734 10.684 492.582 10.812 492.461 10.969 cv
492.336 11.129 492.242 11.312 492.18 11.527 cv
492.113 11.746 492.074 11.977 492.066 12.219 cv
cp
f
504.445 16.488 mo
504.445 16.566 504.418 16.621 504.367 16.66 cv
504.313 16.703 504.23 16.73 504.121 16.75 cv
504.008 16.766 503.844 16.777 503.625 16.777 cv
503.391 16.777 503.219 16.766 503.117 16.75 cv
503.008 16.73 502.934 16.703 502.891 16.66 cv
502.844 16.621 502.82 16.566 502.824 16.488 cv
502.824 15.934 li
502.535 16.242 502.211 16.484 501.844 16.652 cv
501.477 16.824 501.066 16.906 500.621 16.91 cv
500.246 16.906 499.906 16.859 499.602 16.766 cv
499.289 16.672 499.023 16.531 498.801 16.336 cv
498.57 16.148 498.395 15.91 498.273 15.629 cv
498.145 15.348 498.082 15.023 498.086 14.648 cv
498.082 14.246 498.16 13.891 498.324 13.59 cv
498.48 13.293 498.719 13.047 499.031 12.848 cv
499.344 12.656 499.734 12.512 500.207 12.414 cv
500.672 12.324 501.215 12.277 501.84 12.273 cv
502.52 12.273 li
502.52 11.852 li
502.516 11.637 502.496 11.445 502.453 11.277 cv
502.406 11.117 502.332 10.98 502.234 10.871 cv
502.129 10.762 501.992 10.684 501.828 10.629 cv
501.656 10.582 501.449 10.555 501.199 10.551 cv
500.871 10.555 500.578 10.59 500.32 10.66 cv
500.063 10.734 499.832 10.816 499.637 10.902 cv
499.438 10.992 499.273 11.07 499.145 11.141 cv
499.008 11.215 498.902 11.254 498.82 11.25 cv
498.762 11.254 498.711 11.234 498.668 11.195 cv
498.621 11.16 498.582 11.109 498.559 11.039 cv
498.527 10.977 498.508 10.895 498.492 10.793 cv
498.477 10.699 498.469 10.59 498.469 10.465 cv
498.469 10.309 498.48 10.18 498.508 10.082 cv
498.531 9.992 498.582 9.90601 498.656 9.828 cv
498.727 9.75403 498.852 9.672 499.039 9.578 cv
499.219 9.48798 499.434 9.40198 499.676 9.32397 cv
499.918 9.24597 500.184 9.18402 500.477 9.133 cv
500.762 9.086 501.059 9.06201 501.371 9.05902 cv
501.914 9.06201 502.383 9.11298 502.773 9.21899 cv
503.16 9.328 503.477 9.492 503.727 9.711 cv
503.973 9.93402 504.156 10.219 504.273 10.566 cv
504.387 10.914 504.445 11.328 504.445 11.805 cv
cp
502.52 13.508 mo
501.77 13.508 li
501.449 13.508 501.18 13.531 500.957 13.578 cv
500.73 13.625 500.547 13.695 500.41 13.789 cv
500.266 13.883 500.164 13.996 500.102 14.129 cv
500.035 14.262 500.004 14.414 500.004 14.586 cv
500.004 14.875 500.094 15.105 500.281 15.27 cv
500.461 15.441 500.719 15.523 501.051 15.52 cv
501.324 15.523 501.578 15.453 501.813 15.309 cv
502.043 15.172 502.277 14.969 502.52 14.695 cv
cp
f
513.012 16.465 mo
513.008 16.527 512.996 16.574 512.973 16.609 cv
512.945 16.652 512.898 16.684 512.84 16.707 cv
512.773 16.73 512.691 16.746 512.586 16.762 cv
512.477 16.77 512.344 16.777 512.191 16.777 cv
512.023 16.777 511.887 16.77 511.785 16.762 cv
511.676 16.746 511.594 16.73 511.531 16.707 cv
511.465 16.684 511.418 16.652 511.391 16.609 cv
511.359 16.574 511.344 16.527 511.348 16.465 cv
511.348 15.691 li
510.988 16.082 510.613 16.379 510.223 16.59 cv
509.828 16.801 509.391 16.906 508.914 16.91 cv
508.379 16.906 507.93 16.805 507.566 16.602 cv
507.199 16.398 506.902 16.121 506.672 15.77 cv
506.438 15.422 506.27 15.016 506.168 14.551 cv
506.063 14.086 506.012 13.598 506.012 13.078 cv
506.012 12.461 506.078 11.902 506.211 11.41 cv
506.344 10.918 506.535 10.496 506.793 10.145 cv
507.043 9.797 507.359 9.53101 507.742 9.34003 cv
508.117 9.15601 508.555 9.06201 509.055 9.05902 cv
509.441 9.06201 509.797 9.14099 510.117 9.297 cv
510.434 9.45697 510.75 9.69098 511.063 9.99597 cv
511.063 6.22699 li
511.063 6.17603 511.074 6.12903 511.105 6.086 cv
511.129 6.047 511.18 6.01202 511.258 5.97998 cv
511.328 5.953 511.43 5.92999 511.559 5.914 cv
511.68 5.89801 511.84 5.89099 512.035 5.89099 cv
512.227 5.89099 512.383 5.89801 512.512 5.914 cv
512.633 5.92999 512.734 5.953 512.809 5.97998 cv
512.879 6.01202 512.93 6.047 512.965 6.086 cv
512.992 6.12903 513.008 6.17603 513.012 6.22699 cv
cp
511.063 11.812 mo
510.781 11.461 510.512 11.191 510.254 11.004 cv
509.996 10.82 509.727 10.727 509.445 10.723 cv
509.188 10.727 508.965 10.789 508.785 10.914 cv
508.598 11.043 508.449 11.211 508.34 11.422 cv
508.223 11.637 508.141 11.875 508.09 12.137 cv
508.031 12.402 508.004 12.672 508.008 12.945 cv
508.004 13.238 508.027 13.523 508.078 13.797 cv
508.121 14.074 508.199 14.32 508.309 14.535 cv
508.414 14.75 508.555 14.922 508.734 15.051 cv
508.91 15.184 509.133 15.25 509.406 15.246 cv
509.539 15.25 509.672 15.23 509.801 15.187 cv
509.926 15.152 510.055 15.086 510.191 14.996 cv
510.32 14.91 510.457 14.797 510.602 14.652 cv
510.738 14.512 510.895 14.336 511.063 14.125 cv
cp
f
519.891 14.5 mo
519.891 14.895 519.816 15.242 519.668 15.543 cv
519.52 15.848 519.309 16.102 519.043 16.301 cv
518.77 16.508 518.449 16.656 518.082 16.758 cv
517.707 16.855 517.309 16.906 516.879 16.91 cv
516.617 16.906 516.367 16.887 516.133 16.852 cv
515.895 16.809 515.684 16.762 515.5 16.703 cv
515.309 16.645 515.152 16.582 515.031 16.52 cv
514.902 16.457 514.813 16.398 514.758 16.344 cv
514.699 16.289 514.652 16.203 514.625 16.086 cv
514.59 15.969 514.574 15.797 514.578 15.566 cv
514.574 15.418 514.582 15.297 514.594 15.203 cv
514.602 15.113 514.617 15.039 514.641 14.984 cv
514.66 14.93 514.684 14.895 514.719 14.875 cv
514.746 14.859 514.785 14.852 514.836 14.848 cv
514.891 14.852 514.977 14.883 515.09 14.945 cv
515.199 15.012 515.34 15.082 515.508 15.16 cv
515.672 15.238 515.863 15.312 516.086 15.379 cv
516.305 15.449 516.555 15.484 516.84 15.48 cv
517.012 15.484 517.172 15.465 517.313 15.426 cv
517.449 15.391 517.566 15.34 517.672 15.27 cv
517.77 15.207 517.848 15.121 517.902 15.012 cv
517.953 14.91 517.98 14.789 517.98 14.656 cv
517.98 14.5 517.93 14.367 517.836 14.254 cv
517.734 14.145 517.609 14.047 517.453 13.961 cv
517.293 13.879 517.113 13.801 516.914 13.727 cv
516.711 13.656 516.504 13.574 516.297 13.484 cv
516.082 13.398 515.875 13.297 515.68 13.18 cv
515.477 13.066 515.301 12.926 515.145 12.758 cv
514.984 12.594 514.855 12.395 514.762 12.156 cv
514.664 11.926 514.617 11.645 514.617 11.312 cv
514.617 10.984 514.68 10.68 514.813 10.398 cv
514.938 10.121 515.125 9.883 515.375 9.68402 cv
515.617 9.48798 515.914 9.336 516.266 9.22302 cv
516.613 9.117 517.008 9.06201 517.449 9.05902 cv
517.664 9.06201 517.879 9.078 518.086 9.10498 cv
518.289 9.14099 518.473 9.17999 518.645 9.22302 cv
518.809 9.27301 518.949 9.32397 519.066 9.375 cv
519.176 9.43402 519.258 9.47998 519.313 9.51599 cv
519.359 9.55902 519.395 9.59802 519.418 9.633 cv
519.434 9.67603 519.449 9.72302 519.465 9.77301 cv
519.473 9.83197 519.484 9.89801 519.492 9.97699 cv
519.5 10.059 519.504 10.16 519.504 10.277 cv
519.504 10.422 519.5 10.535 519.492 10.621 cv
519.484 10.711 519.469 10.781 519.453 10.832 cv
519.43 10.883 519.406 10.918 519.379 10.934 cv
519.344 10.957 519.309 10.965 519.27 10.961 cv
519.223 10.965 519.148 10.937 519.051 10.883 cv
518.949 10.828 518.824 10.77 518.68 10.707 cv
518.527 10.645 518.355 10.586 518.164 10.531 cv
517.965 10.477 517.742 10.449 517.496 10.449 cv
517.316 10.449 517.164 10.469 517.035 10.504 cv
516.902 10.543 516.797 10.594 516.715 10.66 cv
516.629 10.73 516.566 10.812 516.527 10.898 cv
516.484 10.992 516.461 11.086 516.465 11.187 cv
516.461 11.352 516.512 11.488 516.613 11.594 cv
516.711 11.707 516.84 11.805 517.004 11.883 cv
517.16 11.969 517.344 12.047 517.555 12.117 cv
517.758 12.195 517.969 12.273 518.18 12.355 cv
518.391 12.445 518.598 12.547 518.805 12.656 cv
519.008 12.773 519.191 12.914 519.355 13.078 cv
519.516 13.25 519.645 13.449 519.742 13.676 cv
519.84 13.91 519.891 14.184 519.891 14.5 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
