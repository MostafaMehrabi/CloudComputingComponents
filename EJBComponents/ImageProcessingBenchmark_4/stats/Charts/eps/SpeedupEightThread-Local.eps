%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SpeedupEightThread-Local.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 2:32:21 p.m.
%%BoundingBox: 0 0 637 543
%%HiResBoundingBox: 0 0 636.8400 542.4001
%%CropBox: 0 0 636.8400 542.4001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -542.4 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 542.4 li
636.84 542.4 li
636.84 0 li
cp
clp
gsave
0 542.4 mo
637 542.4 li
637 -.599976 li
0 -.599976 li
cp
clp
0 0 mo
636.84 0 li
636.84 542.398 li
0 542.398 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
39.359 479.281 mo
621.238 479.281 li
39.359 447.961 mo
621.238 447.961 li
39.359 416.641 mo
621.238 416.641 li
39.359 385.199 mo
621.238 385.199 li
39.359 353.879 mo
621.238 353.879 li
39.359 322.559 mo
621.238 322.559 li
39.359 291.238 mo
621.238 291.238 li
39.359 259.801 mo
621.238 259.801 li
39.359 228.48 mo
621.238 228.48 li
39.359 197.16 mo
621.238 197.16 li
39.359 165.84 mo
621.238 165.84 li
39.359 134.398 mo
621.238 134.398 li
39.359 103.078 mo
621.238 103.078 li
39.359 71.762 mo
621.238 71.762 li
39.359 40.441 mo
621.238 40.441 li
.140414 .108034 .108034 0 cmyk
@
39.359 463.68 mo
621.238 463.68 li
39.359 432.238 mo
621.238 432.238 li
39.359 400.922 mo
621.238 400.922 li
39.359 369.602 mo
621.238 369.602 li
39.359 338.281 mo
621.238 338.281 li
39.359 306.84 mo
621.238 306.84 li
39.359 275.52 mo
621.238 275.52 li
39.359 244.199 mo
621.238 244.199 li
39.359 212.762 mo
621.238 212.762 li
39.359 181.441 mo
621.238 181.441 li
39.359 150.121 mo
621.238 150.121 li
39.359 118.801 mo
621.238 118.801 li
39.359 87.359 mo
621.238 87.359 li
39.359 56.039 mo
621.238 56.039 li
39.359 24.719 mo
621.238 24.719 li
.328344 .284215 .278569 .000915541 cmyk
@
75.719 24.719 mo
75.719 495 li
148.441 24.719 mo
148.441 495 li
221.16 24.719 mo
221.16 495 li
293.879 24.719 mo
293.879 495 li
366.602 24.719 mo
366.602 495 li
439.441 24.719 mo
439.441 495 li
512.16 24.719 mo
512.16 495 li
584.879 24.719 mo
584.879 495 li
.178592 .148898 .143923 0 cmyk
@
39.359 24.719 mo
39.359 495 li
112.078 24.719 mo
112.078 495 li
184.801 24.719 mo
184.801 495 li
257.52 24.719 mo
257.52 495 li
330.238 24.719 mo
330.238 495 li
402.961 24.719 mo
402.961 495 li
475.801 24.719 mo
475.801 495 li
548.52 24.719 mo
548.52 495 li
621.238 24.719 mo
621.238 495 li
.328344 .284215 .278569 .000915541 cmyk
@
19.199 485.641 mo
26.281 485.641 li
26.281 502.801 li
19.199 502.801 li
cp
0 0 0 0 cmyk
ef
19.199 454.32 mo
26.281 454.32 li
26.281 471.359 li
19.199 471.359 li
cp
ef
19.199 423 mo
26.281 423 li
26.281 440.039 li
19.199 440.039 li
cp
ef
19.199 391.559 mo
26.281 391.559 li
26.281 408.719 li
19.199 408.719 li
cp
ef
19.199 360.238 mo
26.281 360.238 li
26.281 377.398 li
19.199 377.398 li
cp
ef
19.199 328.922 mo
26.281 328.922 li
26.281 345.961 li
19.199 345.961 li
cp
ef
19.199 297.602 mo
26.281 297.602 li
26.281 314.641 li
19.199 314.641 li
cp
ef
19.199 266.16 mo
26.281 266.16 li
26.281 283.32 li
19.199 283.32 li
cp
ef
19.199 234.84 mo
26.281 234.84 li
26.281 251.879 li
19.199 251.879 li
cp
ef
12.121 203.52 mo
26.281 203.52 li
26.281 220.559 li
12.121 220.559 li
cp
ef
12.121 172.199 mo
26.281 172.199 li
26.281 189.238 li
12.121 189.238 li
cp
ef
12.121 140.762 mo
26.281 140.762 li
26.281 157.922 li
12.121 157.922 li
cp
ef
12.121 109.441 mo
26.281 109.441 li
26.281 126.48 li
12.121 126.48 li
cp
ef
12.121 78.121 mo
26.281 78.121 li
26.281 95.16 li
12.121 95.16 li
cp
ef
12.121 46.68 mo
26.281 46.68 li
26.281 63.84 li
12.121 63.84 li
cp
ef
12.121 15.359 mo
26.281 15.359 li
26.281 32.519 li
12.121 32.519 li
cp
ef
.96 lw
39.359 495 mo
621.238 495 li
.367803 .29575 .300999 .00198367 cmyk
@
39.359 495 mo
39.359 499.441 li
112.078 495 mo
112.078 499.441 li
184.801 495 mo
184.801 499.441 li
257.52 495 mo
257.52 499.441 li
330.238 495 mo
330.238 499.441 li
402.961 495 mo
402.961 499.441 li
475.801 495 mo
475.801 499.441 li
548.52 495 mo
548.52 499.441 li
621.238 495 mo
621.238 499.441 li
@
gsave
39.238 24.6021 mo
621.961 24.6021 li
621.961 495.602 li
39.238 495.602 li
cp
clp
1 lc
39.359 495 mo
112.078 465 li
184.801 398.039 li
257.52 417.84 li
330.238 417.84 li
402.961 438.121 li
548.52 438.121 li
621.238 432.238 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
44.27 499.871 mo
34.191 489.789 li
34.191 499.871 mo
44.27 489.789 li
.62768 .285466 0 0 cmyk
@
116.988 469.871 mo
106.91 459.789 li
106.91 469.871 mo
116.988 459.789 li
@
189.711 403.031 mo
179.629 392.949 li
179.629 403.031 mo
189.711 392.949 li
@
262.551 422.711 mo
252.469 412.629 li
252.469 422.711 mo
262.551 412.629 li
@
335.27 422.711 mo
325.191 412.629 li
325.191 422.711 mo
335.27 412.629 li
@
407.988 443.109 mo
397.91 433.031 li
397.91 443.109 mo
407.988 433.031 li
@
480.711 443.109 mo
470.629 433.031 li
470.629 443.109 mo
480.711 433.031 li
@
553.43 443.109 mo
543.352 433.031 li
543.352 443.109 mo
553.43 433.031 li
@
626.27 437.23 mo
616.191 427.148 li
616.191 437.23 mo
626.27 427.148 li
@
gsave
39.238 24.6021 mo
621.961 24.6021 li
621.961 495.602 li
39.238 495.602 li
cp
clp
.96 lw
1 lc
39.359 495 mo
112.078 464.641 li
184.801 405 li
257.52 405 li
330.238 412.32 li
402.961 434.52 li
475.801 418.801 li
548.52 442.68 li
621.238 405 li
.466651 0 .889799 0 cmyk
@
grestore
44.27 499.871 mo
34.191 489.789 li
34.191 499.871 mo
44.27 489.789 li
.466651 0 .889799 0 cmyk
@
116.988 469.629 mo
106.91 459.551 li
106.91 469.629 mo
116.988 459.551 li
@
189.711 409.871 mo
179.629 399.789 li
179.629 409.871 mo
189.711 399.789 li
@
262.551 409.871 mo
252.469 399.789 li
252.469 409.871 mo
262.551 399.789 li
@
335.27 417.309 mo
325.191 407.23 li
325.191 417.309 mo
335.27 407.23 li
@
407.988 439.512 mo
397.91 429.43 li
397.91 439.512 mo
407.988 429.43 li
@
480.711 423.789 mo
470.629 413.711 li
470.629 423.789 mo
480.711 413.711 li
@
553.43 447.672 mo
543.352 437.59 li
543.352 447.672 mo
553.43 437.59 li
@
626.27 409.871 mo
616.191 399.789 li
616.191 409.871 mo
626.27 399.789 li
@
gsave
39.238 24.6021 mo
621.961 24.6021 li
621.961 495.602 li
39.238 495.602 li
cp
clp
.96 lw
1 lc
39.359 495 mo
112.078 464.398 li
184.801 406.559 li
257.52 406.559 li
330.238 417 li
402.961 425.762 li
475.801 436.559 li
548.52 426.602 li
621.238 425.762 li
0 .990631 1 .000396735 cmyk
@
grestore
44.27 499.871 mo
34.191 489.789 li
34.191 499.871 mo
44.27 489.789 li
0 .990631 1 .000396735 cmyk
@
116.988 469.391 mo
106.91 459.309 li
106.91 469.391 mo
116.988 459.309 li
@
189.711 411.551 mo
179.629 401.469 li
179.629 411.551 mo
189.711 401.469 li
@
262.551 411.551 mo
252.469 401.469 li
252.469 411.551 mo
262.551 401.469 li
@
335.27 421.988 mo
325.191 411.91 li
325.191 421.988 mo
335.27 411.91 li
@
407.988 430.629 mo
397.91 420.551 li
397.91 430.629 mo
407.988 420.551 li
@
480.711 441.43 mo
470.629 431.352 li
470.629 441.43 mo
480.711 431.352 li
@
553.43 431.469 mo
543.352 421.391 li
543.352 431.469 mo
553.43 421.391 li
@
626.27 430.629 mo
616.191 420.551 li
616.191 430.629 mo
626.27 420.551 li
@
gsave
39.238 24.6021 mo
621.961 24.6021 li
621.961 495.602 li
39.238 495.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
39.359 495 mo
112.078 464.16 li
184.801 406.441 li
257.52 419.039 li
330.238 400.922 li
402.961 425.641 li
475.801 424.441 li
548.52 438.719 li
621.238 441.48 li
@
grestore
44.27 499.871 mo
34.191 489.789 li
34.191 499.871 mo
44.27 489.789 li
@
116.988 469.031 mo
106.91 458.949 li
106.91 469.031 mo
116.988 458.949 li
@
189.711 411.43 mo
179.629 401.352 li
179.629 411.43 mo
189.711 401.352 li
@
262.551 424.031 mo
252.469 413.949 li
252.469 424.031 mo
262.551 413.949 li
@
335.27 405.91 mo
325.191 395.828 li
325.191 405.91 mo
335.27 395.828 li
@
407.988 430.629 mo
397.91 420.551 li
397.91 430.629 mo
407.988 420.551 li
@
480.711 429.309 mo
470.629 419.23 li
470.629 429.309 mo
480.711 419.23 li
@
553.43 443.59 mo
543.352 433.512 li
543.352 443.59 mo
553.43 433.512 li
@
626.27 446.352 mo
616.191 436.27 li
616.191 446.352 mo
626.27 436.27 li
@
gsave
39.238 24.6021 mo
621.961 24.6021 li
621.961 495.602 li
39.238 495.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
39.359 495 mo
112.078 464.52 li
184.801 405.961 li
257.52 409.801 li
330.238 405.961 li
402.961 427.441 li
475.801 437.641 li
548.52 415.559 li
621.238 438.359 li
.62768 .285466 0 0 cmyk
@
grestore
43.789 499.391 mo
34.672 490.27 li
34.672 499.391 mo
43.789 490.27 li
.62768 .285466 0 0 cmyk
@
116.512 468.91 mo
107.391 459.789 li
107.391 468.91 mo
116.512 459.789 li
@
189.23 410.469 mo
180.109 401.352 li
180.109 410.469 mo
189.23 401.352 li
@
262.07 414.191 mo
252.949 405.07 li
252.949 414.191 mo
262.07 405.07 li
@
334.789 410.469 mo
325.672 401.352 li
325.672 410.469 mo
334.789 401.352 li
@
407.512 431.828 mo
398.391 422.711 li
398.391 431.828 mo
407.512 422.711 li
@
480.23 442.148 mo
471.109 433.031 li
471.109 442.148 mo
480.23 433.031 li
@
552.949 420.07 mo
543.828 410.949 li
543.828 420.07 mo
552.949 410.949 li
@
625.789 442.75 mo
616.672 433.629 li
616.672 442.75 mo
625.789 433.629 li
@
gsave
39.238 24.6021 mo
621.961 24.6021 li
621.961 495.602 li
39.238 495.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
39.359 495 mo
112.078 464.281 li
184.801 404.879 li
257.52 406.68 li
330.238 404.879 li
402.961 425.641 li
475.801 428.52 li
548.52 430.199 li
621.238 434.281 li
.466651 0 .889799 0 cmyk
@
grestore
44.27 499.871 mo
34.191 489.789 li
34.191 499.871 mo
44.27 489.789 li
.466651 0 .889799 0 cmyk
@
116.988 469.27 mo
106.91 459.191 li
106.91 469.27 mo
116.988 459.191 li
@
189.711 409.871 mo
179.629 399.789 li
179.629 409.871 mo
189.711 399.789 li
@
262.551 411.551 mo
252.469 401.469 li
252.469 411.551 mo
262.551 401.469 li
@
335.27 409.871 mo
325.191 399.789 li
325.191 409.871 mo
335.27 399.789 li
@
407.988 430.512 mo
397.91 420.43 li
397.91 430.512 mo
407.988 420.43 li
@
480.711 433.391 mo
470.629 423.309 li
470.629 433.391 mo
480.711 423.309 li
@
553.43 435.07 mo
543.352 424.988 li
543.352 435.07 mo
553.43 424.988 li
@
626.27 439.27 mo
616.191 429.191 li
616.191 439.27 mo
626.27 429.191 li
@
19.219 485.613 mo
26.317 485.613 li
26.317 502.703 li
19.219 502.703 li
cp
0 0 0 0 cmyk
ef
25.574 498.566 mo
25.57 498.656 25.563 498.727 25.551 498.785 cv
25.535 498.848 25.516 498.898 25.496 498.93 cv
25.473 498.969 25.449 498.992 25.418 499.008 cv
25.387 499.023 25.355 499.031 25.328 499.031 cv
20.691 499.031 li
20.656 499.031 20.629 499.023 20.602 499.008 cv
20.574 498.992 20.547 498.969 20.523 498.93 cv
20.496 498.898 20.477 498.848 20.465 498.785 cv
20.449 498.727 20.441 498.656 20.445 498.566 cv
20.441 498.488 20.449 498.414 20.465 498.352 cv
20.477 498.293 20.492 498.246 20.516 498.207 cv
20.531 498.172 20.559 498.141 20.59 498.117 cv
20.621 498.098 20.652 498.09 20.691 498.086 cv
22.543 498.086 li
22.543 491.34 li
20.828 492.359 li
20.738 492.41 20.668 492.437 20.621 492.445 cv
20.566 492.453 20.523 492.445 20.492 492.414 cv
20.457 492.387 20.438 492.336 20.426 492.266 cv
20.414 492.199 20.406 492.113 20.41 492.004 cv
20.406 491.93 20.41 491.863 20.422 491.805 cv
20.426 491.754 20.438 491.707 20.453 491.668 cv
20.465 491.633 20.484 491.602 20.508 491.574 cv
20.531 491.547 20.563 491.52 20.609 491.492 cv
22.652 490.18 li
22.668 490.168 22.688 490.156 22.719 490.148 cv
22.742 490.141 22.777 490.133 22.824 490.121 cv
22.863 490.113 22.914 490.105 22.969 490.102 cv
23.023 490.102 23.09 490.102 23.176 490.098 cv
23.281 490.102 23.375 490.105 23.449 490.113 cv
23.52 490.121 23.574 490.137 23.621 490.152 cv
23.66 490.172 23.688 490.191 23.703 490.215 cv
23.711 490.242 23.719 490.266 23.723 490.289 cv
23.723 498.086 li
25.328 498.086 li
25.363 498.09 25.398 498.098 25.43 498.117 cv
25.461 498.141 25.484 498.172 25.508 498.207 cv
25.523 498.246 25.539 498.293 25.555 498.352 cv
25.563 498.414 25.57 498.488 25.574 498.566 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
19.219 454.262 mo
26.317 454.262 li
26.317 471.352 li
19.219 471.352 li
cp
0 0 0 0 cmyk
ef
25.555 467.152 mo
25.551 467.238 25.547 467.312 25.535 467.375 cv
25.523 467.441 25.508 467.496 25.488 467.535 cv
25.465 467.582 25.438 467.613 25.406 467.629 cv
25.371 467.652 25.332 467.66 25.293 467.66 cv
20.391 467.66 li
20.328 467.66 20.27 467.652 20.223 467.637 cv
20.172 467.621 20.133 467.598 20.098 467.559 cv
20.063 467.527 20.035 467.473 20.023 467.402 cv
20.004 467.332 19.996 467.246 20 467.145 cv
19.996 467.055 20 466.977 20.008 466.906 cv
20.012 466.84 20.027 466.781 20.055 466.727 cv
20.078 466.676 20.109 466.621 20.145 466.566 cv
20.18 466.516 20.223 466.461 20.281 466.398 cv
22.055 464.574 li
22.465 464.156 22.793 463.781 23.043 463.445 cv
23.289 463.117 23.48 462.812 23.613 462.535 cv
23.746 462.262 23.832 462.012 23.879 461.785 cv
23.918 461.562 23.941 461.352 23.941 461.156 cv
23.941 460.961 23.906 460.777 23.84 460.598 cv
23.773 460.426 23.68 460.27 23.555 460.133 cv
23.43 460.004 23.273 459.898 23.086 459.816 cv
22.898 459.742 22.68 459.703 22.434 459.699 cv
22.145 459.703 21.887 459.742 21.66 459.816 cv
21.43 459.898 21.23 459.984 21.059 460.07 cv
20.887 460.164 20.742 460.246 20.625 460.324 cv
20.508 460.402 20.422 460.441 20.371 460.441 cv
20.336 460.441 20.305 460.434 20.281 460.414 cv
20.25 460.398 20.23 460.367 20.215 460.324 cv
20.199 460.285 20.184 460.23 20.176 460.16 cv
20.164 460.094 20.16 460.012 20.164 459.914 cv
20.16 459.848 20.164 459.789 20.172 459.738 cv
20.176 459.687 20.184 459.645 20.195 459.605 cv
20.203 459.57 20.219 459.535 20.238 459.504 cv
20.258 459.473 20.293 459.434 20.352 459.383 cv
20.402 459.336 20.496 459.27 20.633 459.187 cv
20.766 459.105 20.938 459.027 21.141 458.945 cv
21.344 458.867 21.566 458.797 21.813 458.742 cv
22.055 458.687 22.313 458.66 22.586 458.66 cv
23.012 458.66 23.387 458.723 23.711 458.844 cv
24.031 458.965 24.297 459.129 24.512 459.34 cv
24.723 459.551 24.883 459.797 24.988 460.07 cv
25.094 460.352 25.148 460.648 25.148 460.961 cv
25.148 461.25 25.121 461.531 25.07 461.809 cv
25.02 462.094 24.914 462.398 24.754 462.723 cv
24.59 463.051 24.355 463.414 24.051 463.812 cv
23.742 464.215 23.336 464.676 22.832 465.191 cv
21.426 466.66 li
25.285 466.66 li
25.316 466.664 25.352 466.676 25.391 466.691 cv
25.422 466.715 25.453 466.746 25.48 466.785 cv
25.504 466.828 25.523 466.879 25.535 466.937 cv
25.547 467.004 25.551 467.074 25.555 467.152 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
19.219 422.91 mo
26.317 422.91 li
26.317 440 li
19.219 440 li
cp
0 0 0 0 cmyk
ef
25.484 433.785 mo
25.48 434.195 25.41 434.562 25.27 434.887 cv
25.125 435.215 24.922 435.496 24.66 435.727 cv
24.395 435.961 24.066 436.137 23.68 436.262 cv
23.289 436.387 22.852 436.449 22.367 436.449 cv
22.063 436.449 21.785 436.422 21.531 436.375 cv
21.27 436.328 21.039 436.277 20.844 436.207 cv
20.641 436.145 20.477 436.074 20.344 436.004 cv
20.211 435.934 20.125 435.883 20.094 435.848 cv
20.055 435.82 20.031 435.789 20.016 435.754 cv
19.996 435.723 19.977 435.684 19.965 435.637 cv
19.949 435.594 19.941 435.539 19.934 435.469 cv
19.926 435.406 19.922 435.324 19.926 435.223 cv
19.922 435.062 19.938 434.949 19.973 434.883 cv
20.004 434.82 20.051 434.785 20.113 434.785 cv
20.156 434.785 20.238 434.824 20.363 434.895 cv
20.484 434.973 20.645 435.051 20.84 435.133 cv
21.031 435.219 21.258 435.297 21.523 435.367 cv
21.781 435.441 22.074 435.477 22.395 435.477 cv
22.703 435.477 22.973 435.437 23.211 435.359 cv
23.441 435.281 23.641 435.172 23.801 435.031 cv
23.957 434.891 24.074 434.723 24.156 434.527 cv
24.234 434.332 24.273 434.121 24.277 433.895 cv
24.273 433.645 24.223 433.418 24.125 433.215 cv
24.02 433.016 23.871 432.844 23.68 432.695 cv
23.48 432.551 23.242 432.437 22.957 432.359 cv
22.672 432.281 22.348 432.242 21.984 432.242 cv
21.113 432.242 li
21.07 432.242 21.035 432.234 21 432.219 cv
20.965 432.203 20.934 432.176 20.91 432.137 cv
20.883 432.102 20.863 432.055 20.848 431.996 cv
20.832 431.937 20.824 431.859 20.824 431.762 cv
20.824 431.676 20.828 431.605 20.844 431.547 cv
20.852 431.492 20.871 431.445 20.902 431.41 cv
20.926 431.375 20.957 431.352 20.988 431.332 cv
21.02 431.32 21.055 431.312 21.098 431.309 cv
21.871 431.309 li
22.172 431.312 22.441 431.273 22.684 431.191 cv
22.918 431.117 23.121 431.004 23.293 430.855 cv
23.457 430.711 23.586 430.535 23.676 430.332 cv
23.766 430.129 23.813 429.902 23.813 429.648 cv
23.813 429.469 23.781 429.293 23.723 429.125 cv
23.66 428.961 23.57 428.816 23.453 428.691 cv
23.332 428.566 23.18 428.469 23 428.398 cv
22.813 428.328 22.602 428.293 22.359 428.293 cv
22.094 428.293 21.848 428.336 21.629 428.414 cv
21.402 428.496 21.207 428.582 21.035 428.672 cv
20.859 428.766 20.715 428.852 20.602 428.93 cv
20.488 429.012 20.406 429.051 20.363 429.047 cv
20.328 429.051 20.301 429.043 20.277 429.031 cv
20.25 429.02 20.23 428.996 20.215 428.961 cv
20.199 428.93 20.188 428.883 20.18 428.816 cv
20.172 428.758 20.168 428.676 20.172 428.574 cv
20.168 428.508 20.168 428.449 20.176 428.395 cv
20.176 428.344 20.188 428.297 20.203 428.254 cv
20.219 428.219 20.234 428.184 20.254 428.148 cv
20.27 428.121 20.301 428.082 20.344 428.035 cv
20.387 427.992 20.473 427.93 20.609 427.848 cv
20.738 427.766 20.902 427.687 21.098 427.605 cv
21.289 427.527 21.512 427.457 21.77 427.402 cv
22.02 427.348 22.293 427.32 22.59 427.32 cv
22.996 427.32 23.359 427.375 23.672 427.477 cv
23.984 427.586 24.242 427.734 24.453 427.922 cv
24.656 428.117 24.813 428.348 24.918 428.613 cv
25.02 428.883 25.07 429.176 25.074 429.5 cv
25.07 429.781 25.035 430.043 24.965 430.277 cv
24.891 430.52 24.781 430.73 24.641 430.914 cv
24.496 431.102 24.324 431.258 24.121 431.387 cv
23.914 431.52 23.676 431.613 23.406 431.66 cv
23.406 431.672 li
23.711 431.707 23.992 431.781 24.246 431.902 cv
24.5 432.023 24.719 432.176 24.902 432.359 cv
25.082 432.543 25.223 432.758 25.328 433 cv
25.43 433.246 25.48 433.508 25.484 433.785 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
19.219 391.559 mo
26.317 391.559 li
26.317 408.649 li
19.219 408.649 li
cp
0 0 0 0 cmyk
ef
25.93 402.426 mo
25.926 402.578 25.902 402.699 25.859 402.785 cv
25.813 402.875 25.75 402.918 25.668 402.914 cv
24.668 402.914 li
24.668 404.777 li
24.668 404.816 24.656 404.848 24.641 404.871 cv
24.617 404.898 24.586 404.918 24.543 404.937 cv
24.492 404.953 24.43 404.965 24.359 404.977 cv
24.281 404.984 24.188 404.988 24.07 404.992 cv
23.953 404.988 23.855 404.984 23.785 404.977 cv
23.707 404.965 23.648 404.953 23.605 404.937 cv
23.559 404.918 23.527 404.898 23.512 404.871 cv
23.492 404.848 23.484 404.816 23.488 404.777 cv
23.488 402.914 li
19.859 402.914 li
19.801 402.918 19.758 402.91 19.723 402.895 cv
19.688 402.883 19.652 402.855 19.625 402.816 cv
19.594 402.781 19.574 402.73 19.563 402.66 cv
19.551 402.594 19.547 402.504 19.547 402.391 cv
19.547 402.309 19.547 402.23 19.555 402.16 cv
19.555 402.09 19.566 402.027 19.582 401.973 cv
19.594 401.918 19.609 401.863 19.637 401.809 cv
19.656 401.754 19.684 401.699 19.719 401.637 cv
22.879 396.25 li
22.898 396.215 22.934 396.184 22.98 396.156 cv
23.023 396.129 23.078 396.105 23.152 396.086 cv
23.219 396.07 23.305 396.059 23.41 396.047 cv
23.512 396.043 23.633 396.039 23.773 396.035 cv
23.922 396.039 24.059 396.043 24.176 396.055 cv
24.289 396.066 24.379 396.082 24.453 396.098 cv
24.52 396.117 24.574 396.141 24.613 396.172 cv
24.648 396.203 24.668 396.238 24.668 396.277 cv
24.668 401.941 li
25.668 401.941 li
25.742 401.945 25.805 401.984 25.855 402.062 cv
25.902 402.145 25.926 402.266 25.93 402.426 cv
cp
23.488 397.074 mo
23.477 397.074 li
20.625 401.941 li
23.488 401.941 li
cp
.629114 .553033 .543389 .289647 cmyk
f
19.219 360.211 mo
26.317 360.211 li
26.317 377.301 li
19.219 377.301 li
cp
0 0 0 0 cmyk
ef
25.512 370.758 mo
25.512 371.234 25.43 371.656 25.27 372.027 cv
25.109 372.398 24.883 372.711 24.594 372.965 cv
24.297 373.219 23.949 373.414 23.547 373.543 cv
23.141 373.676 22.691 373.738 22.199 373.738 cv
21.922 373.738 21.66 373.719 21.418 373.68 cv
21.168 373.641 20.949 373.594 20.762 373.539 cv
20.566 373.484 20.41 373.43 20.285 373.371 cv
20.16 373.32 20.082 373.277 20.051 373.242 cv
20.016 373.211 19.992 373.18 19.98 373.152 cv
19.965 373.125 19.949 373.094 19.941 373.051 cv
19.926 373.016 19.918 372.965 19.918 372.902 cv
19.91 372.844 19.91 372.773 19.91 372.691 cv
19.91 372.617 19.914 372.547 19.922 372.484 cv
19.93 372.422 19.941 372.371 19.961 372.332 cv
19.977 372.293 19.996 372.266 20.023 372.246 cv
20.047 372.23 20.078 372.223 20.109 372.219 cv
20.156 372.223 20.227 372.25 20.32 372.305 cv
20.414 372.363 20.543 372.426 20.707 372.492 cv
20.871 372.559 21.07 372.621 21.313 372.68 cv
21.547 372.738 21.832 372.766 22.168 372.766 cv
22.469 372.766 22.75 372.73 23.008 372.656 cv
23.262 372.586 23.484 372.473 23.672 372.316 cv
23.855 372.164 24 371.969 24.105 371.73 cv
24.211 371.496 24.262 371.207 24.266 370.867 cv
24.262 370.586 24.219 370.336 24.129 370.117 cv
24.039 369.898 23.902 369.719 23.719 369.574 cv
23.531 369.434 23.297 369.328 23.016 369.254 cv
22.73 369.184 22.391 369.145 22.004 369.145 cv
21.719 369.145 21.48 369.16 21.281 369.187 cv
21.078 369.219 20.891 369.234 20.719 369.23 cv
20.59 369.234 20.496 369.203 20.445 369.141 cv
20.387 369.082 20.359 368.969 20.363 368.797 cv
20.363 365.184 li
20.359 365.035 20.395 364.926 20.469 364.848 cv
20.535 364.777 20.637 364.738 20.773 364.738 cv
24.703 364.738 li
24.738 364.738 24.773 364.75 24.809 364.77 cv
24.84 364.793 24.867 364.824 24.895 364.863 cv
24.914 364.906 24.93 364.957 24.945 365.02 cv
24.953 365.086 24.961 365.164 24.965 365.246 cv
24.961 365.414 24.938 365.539 24.898 365.629 cv
24.852 365.723 24.793 365.77 24.715 365.766 cv
21.543 365.766 li
21.543 368.254 li
21.695 368.234 21.852 368.223 22.016 368.215 cv
22.172 368.211 22.359 368.207 22.574 368.207 cv
23.059 368.207 23.484 368.27 23.852 368.391 cv
24.215 368.512 24.52 368.684 24.77 368.902 cv
25.012 369.129 25.199 369.395 25.324 369.707 cv
25.449 370.023 25.512 370.375 25.512 370.758 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
19.219 328.852 mo
26.317 328.852 li
26.317 345.942 li
19.219 345.942 li
cp
0 0 0 0 cmyk
ef
25.781 339.367 mo
25.781 339.758 25.719 340.137 25.602 340.496 cv
25.477 340.863 25.293 341.18 25.051 341.453 cv
24.801 341.73 24.488 341.953 24.113 342.117 cv
23.73 342.285 23.285 342.367 22.77 342.367 cv
22.398 342.367 22.07 342.324 21.789 342.23 cv
21.504 342.145 21.258 342.012 21.047 341.84 cv
20.836 341.672 20.66 341.465 20.523 341.219 cv
20.383 340.973 20.27 340.691 20.188 340.375 cv
20.102 340.062 20.043 339.719 20.008 339.34 cv
19.969 338.969 19.949 338.566 19.953 338.133 cv
19.949 337.754 19.969 337.371 20.012 336.98 cv
20.051 336.598 20.125 336.223 20.23 335.855 cv
20.336 335.496 20.48 335.156 20.66 334.84 cv
20.84 334.523 21.066 334.246 21.34 334.012 cv
21.613 333.777 21.938 333.59 22.316 333.449 cv
22.695 333.312 23.137 333.246 23.641 333.242 cv
23.809 333.246 23.98 333.254 24.152 333.273 cv
24.324 333.297 24.484 333.328 24.633 333.359 cv
24.781 333.398 24.902 333.434 25.004 333.473 cv
25.102 333.512 25.168 333.547 25.203 333.57 cv
25.23 333.598 25.254 333.625 25.273 333.652 cv
25.289 333.684 25.305 333.715 25.313 333.75 cv
25.32 333.785 25.324 333.824 25.332 333.867 cv
25.332 333.91 25.336 333.965 25.34 334.027 cv
25.336 334.113 25.336 334.184 25.336 334.238 cv
25.332 334.301 25.32 334.348 25.309 334.383 cv
25.289 334.422 25.27 334.449 25.246 334.465 cv
25.219 334.484 25.188 334.492 25.148 334.492 cv
25.098 334.492 25.027 334.477 24.941 334.445 cv
24.852 334.414 24.746 334.379 24.625 334.336 cv
24.5 334.301 24.352 334.266 24.176 334.23 cv
24 334.203 23.797 334.187 23.566 334.184 cv
23.137 334.187 22.77 334.273 22.465 334.445 cv
22.16 334.617 21.91 334.852 21.715 335.145 cv
21.52 335.437 21.375 335.777 21.285 336.16 cv
21.188 336.551 21.133 336.953 21.125 337.371 cv
21.242 337.305 21.379 337.238 21.527 337.168 cv
21.676 337.102 21.836 337.039 22.012 336.98 cv
22.188 336.93 22.375 336.883 22.57 336.848 cv
22.766 336.816 22.977 336.801 23.203 336.797 cv
23.68 336.801 24.082 336.867 24.414 336.992 cv
24.742 337.125 25.008 337.305 25.215 337.535 cv
25.414 337.766 25.559 338.035 25.648 338.348 cv
25.734 338.66 25.781 339 25.781 339.367 cv
cp
24.586 339.477 mo
24.586 339.215 24.559 338.973 24.508 338.754 cv
24.453 338.539 24.363 338.355 24.242 338.199 cv
24.117 338.051 23.953 337.934 23.75 337.852 cv
23.539 337.77 23.285 337.727 22.988 337.727 cv
22.816 337.727 22.648 337.742 22.48 337.773 cv
22.309 337.805 22.145 337.848 21.988 337.895 cv
21.828 337.949 21.68 338.012 21.539 338.082 cv
21.395 338.156 21.262 338.23 21.145 338.309 cv
21.141 338.902 21.18 339.398 21.258 339.793 cv
21.332 340.191 21.441 340.508 21.586 340.746 cv
21.73 340.988 21.91 341.16 22.125 341.262 cv
22.34 341.367 22.59 341.418 22.879 341.414 cv
23.168 341.418 23.422 341.363 23.637 341.25 cv
23.852 341.145 24.027 340.996 24.172 340.809 cv
24.313 340.625 24.418 340.418 24.484 340.187 cv
24.551 339.957 24.586 339.723 24.586 339.477 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
19.219 297.5 mo
26.317 297.5 li
26.317 314.59 li
19.219 314.59 li
cp
0 0 0 0 cmyk
ef
25.684 302.508 mo
25.68 302.594 25.676 302.668 25.672 302.73 cv
25.664 302.801 25.656 302.863 25.645 302.922 cv
25.633 302.988 25.617 303.047 25.598 303.102 cv
25.574 303.16 25.551 303.223 25.527 303.281 cv
22.332 310.645 li
22.305 310.703 22.277 310.746 22.246 310.777 cv
22.211 310.812 22.168 310.84 22.113 310.859 cv
22.059 310.879 21.988 310.891 21.91 310.902 cv
21.824 310.906 21.727 310.91 21.609 310.914 cv
21.453 310.91 21.332 310.902 21.246 310.891 cv
21.16 310.875 21.098 310.859 21.059 310.828 cv
21.02 310.801 21 310.762 21.008 310.719 cv
21.008 310.676 21.023 310.625 21.055 310.562 cv
24.414 303.035 li
20.156 303.035 li
20.07 303.039 20.004 302.992 19.961 302.898 cv
19.918 302.809 19.898 302.68 19.898 302.516 cv
19.898 302.43 19.902 302.355 19.914 302.289 cv
19.926 302.227 19.941 302.172 19.965 302.129 cv
19.984 302.086 20.012 302.055 20.047 302.031 cv
20.078 302.012 20.117 302 20.156 302 cv
25.328 302 li
25.387 302 25.441 302.008 25.492 302.023 cv
25.539 302.039 25.574 302.066 25.602 302.105 cv
25.625 302.145 25.645 302.199 25.66 302.262 cv
25.672 302.328 25.68 302.41 25.684 302.508 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
19.219 266.148 mo
26.317 266.148 li
26.317 283.238 li
19.219 283.238 li
cp
0 0 0 0 cmyk
ef
25.758 277.254 mo
25.758 277.641 25.688 277.984 25.551 278.281 cv
25.414 278.586 25.219 278.836 24.961 279.039 cv
24.703 279.246 24.383 279.402 24.004 279.504 cv
23.621 279.609 23.188 279.66 22.703 279.66 cv
22.242 279.66 21.832 279.613 21.473 279.52 cv
21.109 279.426 20.805 279.285 20.555 279.094 cv
20.305 278.91 20.113 278.68 19.98 278.402 cv
19.848 278.129 19.781 277.816 19.781 277.461 cv
19.781 277.187 19.824 276.93 19.918 276.695 cv
20.004 276.461 20.137 276.246 20.313 276.051 cv
20.48 275.855 20.691 275.672 20.945 275.496 cv
21.195 275.328 21.48 275.164 21.797 275.008 cv
21.523 274.867 21.281 274.719 21.07 274.559 cv
20.859 274.402 20.68 274.23 20.535 274.043 cv
20.387 273.859 20.277 273.664 20.203 273.453 cv
20.125 273.246 20.086 273.016 20.09 272.766 cv
20.086 272.457 20.141 272.164 20.258 271.891 cv
20.367 271.621 20.539 271.387 20.766 271.184 cv
20.992 270.984 21.277 270.824 21.629 270.707 cv
21.973 270.59 22.383 270.531 22.852 270.531 cv
23.297 270.531 23.684 270.586 24.012 270.691 cv
24.34 270.801 24.609 270.945 24.82 271.129 cv
25.031 271.316 25.188 271.535 25.293 271.785 cv
25.391 272.035 25.441 272.305 25.445 272.594 cv
25.441 272.828 25.402 273.055 25.332 273.266 cv
25.254 273.484 25.145 273.687 24.996 273.875 cv
24.848 274.07 24.668 274.25 24.457 274.414 cv
24.246 274.586 24.004 274.742 23.73 274.883 cv
24.051 275.047 24.336 275.211 24.594 275.379 cv
24.844 275.547 25.059 275.727 25.234 275.922 cv
25.402 276.117 25.531 276.324 25.625 276.539 cv
25.711 276.758 25.758 276.996 25.758 277.254 cv
cp
24.277 272.703 mo
24.273 272.516 24.242 272.34 24.176 272.184 cv
24.109 272.027 24.012 271.895 23.887 271.785 cv
23.758 271.676 23.598 271.594 23.41 271.535 cv
23.215 271.48 23 271.453 22.762 271.449 cv
22.266 271.453 21.891 271.562 21.641 271.785 cv
21.383 272.012 21.258 272.32 21.262 272.703 cv
21.258 272.883 21.289 273.047 21.352 273.199 cv
21.414 273.355 21.508 273.5 21.641 273.637 cv
21.766 273.773 21.93 273.906 22.133 274.035 cv
22.328 274.168 22.566 274.305 22.844 274.445 cv
23.305 274.211 23.66 273.949 23.906 273.656 cv
24.152 273.371 24.273 273.055 24.277 272.703 cv
cp
24.566 277.379 mo
24.563 277.172 24.523 276.98 24.449 276.809 cv
24.367 276.641 24.25 276.48 24.094 276.328 cv
23.938 276.18 23.738 276.035 23.504 275.895 cv
23.266 275.758 22.996 275.613 22.688 275.461 cv
22.398 275.605 22.145 275.746 21.93 275.887 cv
21.711 276.027 21.531 276.176 21.395 276.324 cv
21.254 276.48 21.148 276.637 21.078 276.801 cv
21.004 276.969 20.969 277.152 20.973 277.352 cv
20.969 277.797 21.121 278.141 21.43 278.379 cv
21.73 278.625 22.184 278.746 22.789 278.742 cv
23.371 278.746 23.816 278.625 24.117 278.375 cv
24.414 278.133 24.563 277.801 24.566 277.379 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
19.219 234.801 mo
26.317 234.801 li
26.317 251.891 li
19.219 251.891 li
cp
0 0 0 0 cmyk
ef
25.621 243.375 mo
25.617 243.762 25.594 244.148 25.551 244.539 cv
25.504 244.934 25.426 245.312 25.32 245.676 cv
25.207 246.039 25.063 246.379 24.879 246.695 cv
24.691 247.016 24.457 247.297 24.18 247.531 cv
23.895 247.773 23.559 247.957 23.176 248.09 cv
22.785 248.223 22.34 248.289 21.832 248.289 cv
21.633 248.289 21.441 248.273 21.258 248.25 cv
21.07 248.223 20.902 248.195 20.758 248.16 cv
20.605 248.125 20.48 248.086 20.383 248.043 cv
20.281 248.004 20.207 247.965 20.164 247.922 cv
20.117 247.883 20.086 247.828 20.066 247.754 cv
20.043 247.684 20.031 247.586 20.035 247.469 cv
20.031 247.367 20.035 247.289 20.043 247.23 cv
20.047 247.172 20.059 247.125 20.074 247.094 cv
20.09 247.062 20.109 247.043 20.133 247.027 cv
20.156 247.02 20.188 247.012 20.227 247.008 cv
20.273 247.012 20.344 247.027 20.438 247.059 cv
20.527 247.094 20.641 247.133 20.785 247.172 cv
20.922 247.215 21.086 247.254 21.273 247.285 cv
21.457 247.324 21.668 247.34 21.906 247.336 cv
22.348 247.34 22.727 247.254 23.047 247.082 cv
23.359 246.91 23.621 246.684 23.824 246.395 cv
24.027 246.109 24.176 245.773 24.277 245.391 cv
24.375 245.012 24.43 244.613 24.441 244.191 cv
24.195 244.336 23.906 244.461 23.57 244.566 cv
23.23 244.68 22.844 244.734 22.406 244.73 cv
21.914 244.734 21.5 244.668 21.164 244.531 cv
20.828 244.398 20.555 244.215 20.352 243.98 cv
20.145 243.75 20 243.473 19.914 243.148 cv
19.824 242.832 19.781 242.48 19.781 242.102 cv
19.781 241.711 19.836 241.34 19.953 240.98 cv
20.063 240.629 20.242 240.316 20.488 240.047 cv
20.727 239.777 21.035 239.562 21.414 239.402 cv
21.785 239.242 22.234 239.16 22.758 239.16 cv
23.125 239.16 23.449 239.207 23.738 239.301 cv
24.02 239.395 24.27 239.531 24.484 239.707 cv
24.691 239.883 24.871 240.094 25.02 240.344 cv
25.164 240.594 25.281 240.875 25.371 241.187 cv
25.457 241.504 25.52 241.848 25.563 242.215 cv
25.598 242.586 25.617 242.973 25.621 243.375 cv
cp
24.422 243.246 mo
24.422 242.664 24.383 242.172 24.305 241.77 cv
24.227 241.371 24.109 241.047 23.961 240.797 cv
23.809 240.551 23.625 240.371 23.406 240.262 cv
23.184 240.152 22.93 240.098 22.648 240.098 cv
22.344 240.098 22.09 240.152 21.883 240.262 cv
21.672 240.371 21.5 240.516 21.367 240.691 cv
21.23 240.875 21.129 241.078 21.066 241.305 cv
21 241.535 20.969 241.773 20.973 242.012 cv
20.969 242.285 21 242.531 21.059 242.75 cv
21.113 242.977 21.203 243.164 21.336 243.32 cv
21.461 243.477 21.629 243.598 21.836 243.684 cv
22.039 243.77 22.293 243.812 22.598 243.809 cv
22.938 243.812 23.27 243.762 23.594 243.656 cv
23.91 243.555 24.188 243.418 24.422 243.246 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
12.121 203.449 mo
26.309 203.449 li
26.309 220.539 li
12.121 220.539 li
cp
0 0 0 0 cmyk
ef
18.496 216.355 mo
18.492 216.445 18.484 216.516 18.473 216.574 cv
18.457 216.637 18.438 216.687 18.418 216.719 cv
18.395 216.758 18.371 216.781 18.34 216.797 cv
18.309 216.812 18.277 216.82 18.25 216.82 cv
13.613 216.82 li
13.578 216.82 13.551 216.812 13.523 216.797 cv
13.496 216.781 13.469 216.758 13.445 216.719 cv
13.418 216.687 13.398 216.637 13.387 216.574 cv
13.371 216.516 13.363 216.445 13.367 216.355 cv
13.363 216.277 13.371 216.203 13.387 216.141 cv
13.398 216.082 13.414 216.035 13.438 215.996 cv
13.453 215.961 13.48 215.93 13.512 215.906 cv
13.543 215.887 13.574 215.879 13.613 215.875 cv
15.465 215.875 li
15.465 209.129 li
13.75 210.148 li
13.66 210.199 13.59 210.227 13.543 210.234 cv
13.488 210.242 13.445 210.234 13.414 210.203 cv
13.379 210.176 13.359 210.125 13.348 210.055 cv
13.336 209.988 13.328 209.902 13.332 209.793 cv
13.328 209.719 13.332 209.652 13.344 209.594 cv
13.348 209.543 13.359 209.496 13.375 209.457 cv
13.387 209.422 13.406 209.391 13.43 209.363 cv
13.453 209.336 13.484 209.309 13.531 209.281 cv
15.574 207.969 li
15.59 207.957 15.609 207.945 15.641 207.937 cv
15.664 207.93 15.699 207.922 15.746 207.91 cv
15.785 207.902 15.836 207.895 15.891 207.891 cv
15.945 207.891 16.012 207.891 16.098 207.887 cv
16.203 207.891 16.297 207.895 16.371 207.902 cv
16.441 207.91 16.496 207.926 16.543 207.941 cv
16.582 207.961 16.609 207.98 16.625 208.004 cv
16.633 208.031 16.641 208.055 16.645 208.078 cv
16.645 215.875 li
18.25 215.875 li
18.285 215.879 18.32 215.887 18.352 215.906 cv
18.383 215.93 18.406 215.961 18.43 215.996 cv
18.445 216.035 18.461 216.082 18.477 216.141 cv
18.484 216.203 18.492 216.277 18.496 216.355 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.848 212.363 mo
25.844 213.047 25.793 213.668 25.688 214.23 cv
25.578 214.793 25.398 215.277 25.152 215.68 cv
24.898 216.086 24.57 216.398 24.172 216.617 cv
23.766 216.84 23.273 216.949 22.688 216.949 cv
22.129 216.949 21.656 216.852 21.277 216.652 cv
20.895 216.457 20.59 216.164 20.355 215.777 cv
20.121 215.391 19.953 214.918 19.859 214.352 cv
19.758 213.789 19.711 213.141 19.711 212.406 cv
19.711 211.734 19.766 211.113 19.875 210.547 cv
19.984 209.984 20.16 209.5 20.41 209.094 cv
20.652 208.691 20.977 208.379 21.383 208.152 cv
21.781 207.934 22.277 207.82 22.867 207.82 cv
23.426 207.82 23.898 207.922 24.281 208.117 cv
24.664 208.32 24.969 208.613 25.203 208.996 cv
25.434 209.387 25.602 209.859 25.699 210.422 cv
25.797 210.984 25.844 211.633 25.848 212.363 cv
cp
24.641 212.445 mo
24.637 212.004 24.621 211.605 24.594 211.254 cv
24.559 210.902 24.512 210.594 24.453 210.324 cv
24.387 210.055 24.309 209.824 24.211 209.629 cv
24.113 209.437 23.996 209.277 23.859 209.148 cv
23.719 209.023 23.559 208.93 23.387 208.871 cv
23.207 208.816 23.012 208.789 22.797 208.785 cv
22.406 208.789 22.09 208.879 21.852 209.062 cv
21.605 209.246 21.414 209.5 21.277 209.816 cv
21.137 210.137 21.043 210.508 20.992 210.937 cv
20.941 211.367 20.918 211.832 20.918 212.324 cv
20.918 212.988 20.949 213.551 21.02 214.012 cv
21.086 214.48 21.195 214.859 21.348 215.148 cv
21.492 215.445 21.684 215.656 21.914 215.785 cv
22.145 215.922 22.426 215.988 22.758 215.984 cv
23.012 215.988 23.234 215.949 23.43 215.863 cv
23.621 215.785 23.789 215.664 23.93 215.508 cv
24.07 215.355 24.184 215.172 24.277 214.957 cv
24.363 214.742 24.438 214.504 24.496 214.242 cv
24.547 213.984 24.586 213.703 24.609 213.398 cv
24.629 213.094 24.637 212.777 24.641 212.445 cv
cp
f
12.121 172.102 mo
26.309 172.102 li
26.309 189.192 li
12.121 189.192 li
cp
0 0 0 0 cmyk
ef
18.496 184.984 mo
18.492 185.074 18.484 185.145 18.473 185.203 cv
18.457 185.266 18.438 185.316 18.418 185.348 cv
18.395 185.387 18.371 185.41 18.34 185.426 cv
18.309 185.441 18.277 185.449 18.25 185.449 cv
13.613 185.449 li
13.578 185.449 13.551 185.441 13.523 185.426 cv
13.496 185.41 13.469 185.387 13.445 185.348 cv
13.418 185.316 13.398 185.266 13.387 185.203 cv
13.371 185.145 13.363 185.074 13.367 184.984 cv
13.363 184.906 13.371 184.832 13.387 184.77 cv
13.398 184.711 13.414 184.664 13.438 184.625 cv
13.453 184.59 13.48 184.559 13.512 184.535 cv
13.543 184.516 13.574 184.508 13.613 184.504 cv
15.465 184.504 li
15.465 177.758 li
13.75 178.777 li
13.66 178.828 13.59 178.855 13.543 178.863 cv
13.488 178.871 13.445 178.863 13.414 178.832 cv
13.379 178.805 13.359 178.754 13.348 178.684 cv
13.336 178.617 13.328 178.531 13.332 178.422 cv
13.328 178.348 13.332 178.281 13.344 178.223 cv
13.348 178.172 13.359 178.125 13.375 178.086 cv
13.387 178.051 13.406 178.02 13.43 177.992 cv
13.453 177.965 13.484 177.937 13.531 177.91 cv
15.574 176.598 li
15.59 176.586 15.609 176.574 15.641 176.566 cv
15.664 176.559 15.699 176.551 15.746 176.539 cv
15.785 176.531 15.836 176.523 15.891 176.52 cv
15.945 176.52 16.012 176.52 16.098 176.516 cv
16.203 176.52 16.297 176.523 16.371 176.531 cv
16.441 176.539 16.496 176.555 16.543 176.57 cv
16.582 176.59 16.609 176.609 16.625 176.633 cv
16.633 176.66 16.641 176.684 16.645 176.707 cv
16.645 184.504 li
18.25 184.504 li
18.285 184.508 18.32 184.516 18.352 184.535 cv
18.383 184.559 18.406 184.59 18.43 184.625 cv
18.445 184.664 18.461 184.711 18.477 184.77 cv
18.484 184.832 18.492 184.906 18.496 184.984 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.574 184.984 mo
25.57 185.074 25.563 185.145 25.551 185.203 cv
25.535 185.266 25.516 185.316 25.496 185.348 cv
25.473 185.387 25.449 185.41 25.418 185.426 cv
25.387 185.441 25.355 185.449 25.328 185.449 cv
20.691 185.449 li
20.656 185.449 20.629 185.441 20.602 185.426 cv
20.574 185.41 20.547 185.387 20.523 185.348 cv
20.496 185.316 20.477 185.266 20.465 185.203 cv
20.449 185.145 20.441 185.074 20.445 184.984 cv
20.441 184.906 20.449 184.832 20.465 184.77 cv
20.477 184.711 20.492 184.664 20.516 184.625 cv
20.531 184.59 20.559 184.559 20.59 184.535 cv
20.621 184.516 20.652 184.508 20.691 184.504 cv
22.543 184.504 li
22.543 177.758 li
20.828 178.777 li
20.738 178.828 20.668 178.855 20.621 178.863 cv
20.566 178.871 20.523 178.863 20.492 178.832 cv
20.457 178.805 20.438 178.754 20.426 178.684 cv
20.414 178.617 20.406 178.531 20.41 178.422 cv
20.406 178.348 20.41 178.281 20.422 178.223 cv
20.426 178.172 20.438 178.125 20.453 178.086 cv
20.465 178.051 20.484 178.02 20.508 177.992 cv
20.531 177.965 20.563 177.937 20.609 177.91 cv
22.652 176.598 li
22.668 176.586 22.688 176.574 22.719 176.566 cv
22.742 176.559 22.777 176.551 22.824 176.539 cv
22.863 176.531 22.914 176.523 22.969 176.52 cv
23.023 176.52 23.09 176.52 23.176 176.516 cv
23.281 176.52 23.375 176.523 23.449 176.531 cv
23.52 176.539 23.574 176.555 23.621 176.57 cv
23.66 176.59 23.688 176.609 23.703 176.633 cv
23.711 176.66 23.719 176.684 23.723 176.707 cv
23.723 184.504 li
25.328 184.504 li
25.363 184.508 25.398 184.516 25.43 184.535 cv
25.461 184.559 25.484 184.59 25.508 184.625 cv
25.523 184.664 25.539 184.711 25.555 184.77 cv
25.563 184.832 25.57 184.906 25.574 184.984 cv
cp
f
12.121 140.738 mo
26.309 140.738 li
26.309 157.828 li
12.121 157.828 li
cp
0 0 0 0 cmyk
ef
18.496 153.637 mo
18.492 153.727 18.484 153.797 18.473 153.855 cv
18.457 153.918 18.438 153.969 18.418 154 cv
18.395 154.039 18.371 154.062 18.34 154.078 cv
18.309 154.094 18.277 154.102 18.25 154.102 cv
13.613 154.102 li
13.578 154.102 13.551 154.094 13.523 154.078 cv
13.496 154.062 13.469 154.039 13.445 154 cv
13.418 153.969 13.398 153.918 13.387 153.855 cv
13.371 153.797 13.363 153.727 13.367 153.637 cv
13.363 153.559 13.371 153.484 13.387 153.422 cv
13.398 153.363 13.414 153.316 13.438 153.277 cv
13.453 153.242 13.48 153.211 13.512 153.187 cv
13.543 153.168 13.574 153.16 13.613 153.156 cv
15.465 153.156 li
15.465 146.41 li
13.75 147.43 li
13.66 147.48 13.59 147.508 13.543 147.516 cv
13.488 147.523 13.445 147.516 13.414 147.484 cv
13.379 147.457 13.359 147.406 13.348 147.336 cv
13.336 147.27 13.328 147.184 13.332 147.074 cv
13.328 147 13.332 146.934 13.344 146.875 cv
13.348 146.824 13.359 146.777 13.375 146.738 cv
13.387 146.703 13.406 146.672 13.43 146.645 cv
13.453 146.617 13.484 146.59 13.531 146.562 cv
15.574 145.25 li
15.59 145.238 15.609 145.227 15.641 145.219 cv
15.664 145.211 15.699 145.203 15.746 145.191 cv
15.785 145.184 15.836 145.176 15.891 145.172 cv
15.945 145.172 16.012 145.172 16.098 145.168 cv
16.203 145.172 16.297 145.176 16.371 145.184 cv
16.441 145.191 16.496 145.207 16.543 145.223 cv
16.582 145.242 16.609 145.262 16.625 145.285 cv
16.633 145.312 16.641 145.336 16.645 145.359 cv
16.645 153.156 li
18.25 153.156 li
18.285 153.16 18.32 153.168 18.352 153.187 cv
18.383 153.211 18.406 153.242 18.43 153.277 cv
18.445 153.316 18.461 153.363 18.477 153.422 cv
18.484 153.484 18.492 153.559 18.496 153.637 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.555 153.594 mo
25.551 153.68 25.547 153.754 25.535 153.816 cv
25.523 153.883 25.508 153.937 25.488 153.977 cv
25.465 154.023 25.438 154.055 25.406 154.07 cv
25.371 154.094 25.332 154.102 25.293 154.102 cv
20.391 154.102 li
20.328 154.102 20.27 154.094 20.223 154.078 cv
20.172 154.062 20.133 154.039 20.098 154 cv
20.063 153.969 20.035 153.914 20.023 153.844 cv
20.004 153.773 19.996 153.687 20 153.586 cv
19.996 153.496 20 153.418 20.008 153.348 cv
20.012 153.281 20.027 153.223 20.055 153.168 cv
20.078 153.117 20.109 153.062 20.145 153.008 cv
20.18 152.957 20.223 152.902 20.281 152.84 cv
22.055 151.016 li
22.465 150.598 22.793 150.223 23.043 149.887 cv
23.289 149.559 23.48 149.254 23.613 148.977 cv
23.746 148.703 23.832 148.453 23.879 148.227 cv
23.918 148.004 23.941 147.793 23.941 147.598 cv
23.941 147.402 23.906 147.219 23.84 147.039 cv
23.773 146.867 23.68 146.711 23.555 146.574 cv
23.43 146.445 23.273 146.34 23.086 146.258 cv
22.898 146.184 22.68 146.145 22.434 146.141 cv
22.145 146.145 21.887 146.184 21.66 146.258 cv
21.43 146.34 21.23 146.426 21.059 146.512 cv
20.887 146.605 20.742 146.687 20.625 146.766 cv
20.508 146.844 20.422 146.883 20.371 146.883 cv
20.336 146.883 20.305 146.875 20.281 146.855 cv
20.25 146.84 20.23 146.809 20.215 146.766 cv
20.199 146.727 20.184 146.672 20.176 146.602 cv
20.164 146.535 20.16 146.453 20.164 146.355 cv
20.16 146.289 20.164 146.23 20.172 146.18 cv
20.176 146.129 20.184 146.086 20.195 146.047 cv
20.203 146.012 20.219 145.977 20.238 145.945 cv
20.258 145.914 20.293 145.875 20.352 145.824 cv
20.402 145.777 20.496 145.711 20.633 145.629 cv
20.766 145.547 20.938 145.469 21.141 145.387 cv
21.344 145.309 21.566 145.238 21.813 145.184 cv
22.055 145.129 22.313 145.102 22.586 145.102 cv
23.012 145.102 23.387 145.164 23.711 145.285 cv
24.031 145.406 24.297 145.57 24.512 145.781 cv
24.723 145.992 24.883 146.238 24.988 146.512 cv
25.094 146.793 25.148 147.09 25.148 147.402 cv
25.148 147.691 25.121 147.973 25.07 148.25 cv
25.02 148.535 24.914 148.84 24.754 149.164 cv
24.59 149.492 24.355 149.855 24.051 150.254 cv
23.742 150.656 23.336 151.117 22.832 151.633 cv
21.426 153.102 li
25.285 153.102 li
25.316 153.105 25.352 153.117 25.391 153.133 cv
25.422 153.156 25.453 153.187 25.48 153.227 cv
25.504 153.27 25.523 153.32 25.535 153.379 cv
25.547 153.445 25.551 153.516 25.555 153.594 cv
cp
f
12.121 109.391 mo
26.309 109.391 li
26.309 126.481 li
12.121 126.481 li
cp
0 0 0 0 cmyk
ef
18.496 122.273 mo
18.492 122.363 18.484 122.434 18.473 122.492 cv
18.457 122.555 18.438 122.605 18.418 122.637 cv
18.395 122.676 18.371 122.699 18.34 122.715 cv
18.309 122.73 18.277 122.738 18.25 122.738 cv
13.613 122.738 li
13.578 122.738 13.551 122.73 13.523 122.715 cv
13.496 122.699 13.469 122.676 13.445 122.637 cv
13.418 122.605 13.398 122.555 13.387 122.492 cv
13.371 122.434 13.363 122.363 13.367 122.273 cv
13.363 122.195 13.371 122.121 13.387 122.059 cv
13.398 122 13.414 121.953 13.438 121.914 cv
13.453 121.879 13.48 121.848 13.512 121.824 cv
13.543 121.805 13.574 121.797 13.613 121.793 cv
15.465 121.793 li
15.465 115.047 li
13.75 116.066 li
13.66 116.117 13.59 116.145 13.543 116.152 cv
13.488 116.16 13.445 116.152 13.414 116.121 cv
13.379 116.094 13.359 116.043 13.348 115.973 cv
13.336 115.906 13.328 115.82 13.332 115.711 cv
13.328 115.637 13.332 115.57 13.344 115.512 cv
13.348 115.461 13.359 115.414 13.375 115.375 cv
13.387 115.34 13.406 115.309 13.43 115.281 cv
13.453 115.254 13.484 115.227 13.531 115.199 cv
15.574 113.887 li
15.59 113.875 15.609 113.863 15.641 113.855 cv
15.664 113.848 15.699 113.84 15.746 113.828 cv
15.785 113.82 15.836 113.812 15.891 113.809 cv
15.945 113.809 16.012 113.809 16.098 113.805 cv
16.203 113.809 16.297 113.812 16.371 113.82 cv
16.441 113.828 16.496 113.844 16.543 113.859 cv
16.582 113.879 16.609 113.898 16.625 113.922 cv
16.633 113.949 16.641 113.973 16.645 113.996 cv
16.645 121.793 li
18.25 121.793 li
18.285 121.797 18.32 121.805 18.352 121.824 cv
18.383 121.848 18.406 121.879 18.43 121.914 cv
18.445 121.953 18.461 122 18.477 122.059 cv
18.484 122.121 18.492 122.195 18.496 122.273 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.484 120.203 mo
25.48 120.613 25.41 120.98 25.27 121.305 cv
25.125 121.633 24.922 121.914 24.66 122.145 cv
24.395 122.379 24.066 122.555 23.68 122.68 cv
23.289 122.805 22.852 122.867 22.367 122.867 cv
22.063 122.867 21.785 122.84 21.531 122.793 cv
21.27 122.746 21.039 122.695 20.844 122.625 cv
20.641 122.562 20.477 122.492 20.344 122.422 cv
20.211 122.352 20.125 122.301 20.094 122.266 cv
20.055 122.238 20.031 122.207 20.016 122.172 cv
19.996 122.141 19.977 122.102 19.965 122.055 cv
19.949 122.012 19.941 121.957 19.934 121.887 cv
19.926 121.824 19.922 121.742 19.926 121.641 cv
19.922 121.48 19.938 121.367 19.973 121.301 cv
20.004 121.238 20.051 121.203 20.113 121.203 cv
20.156 121.203 20.238 121.242 20.363 121.312 cv
20.484 121.391 20.645 121.469 20.84 121.551 cv
21.031 121.637 21.258 121.715 21.523 121.785 cv
21.781 121.859 22.074 121.895 22.395 121.895 cv
22.703 121.895 22.973 121.855 23.211 121.777 cv
23.441 121.699 23.641 121.59 23.801 121.449 cv
23.957 121.309 24.074 121.141 24.156 120.945 cv
24.234 120.75 24.273 120.539 24.277 120.312 cv
24.273 120.062 24.223 119.836 24.125 119.633 cv
24.02 119.434 23.871 119.262 23.68 119.113 cv
23.48 118.969 23.242 118.855 22.957 118.777 cv
22.672 118.699 22.348 118.66 21.984 118.66 cv
21.113 118.66 li
21.07 118.66 21.035 118.652 21 118.637 cv
20.965 118.621 20.934 118.594 20.91 118.555 cv
20.883 118.52 20.863 118.473 20.848 118.414 cv
20.832 118.355 20.824 118.277 20.824 118.18 cv
20.824 118.094 20.828 118.023 20.844 117.965 cv
20.852 117.91 20.871 117.863 20.902 117.828 cv
20.926 117.793 20.957 117.77 20.988 117.75 cv
21.02 117.738 21.055 117.73 21.098 117.727 cv
21.871 117.727 li
22.172 117.73 22.441 117.691 22.684 117.609 cv
22.918 117.535 23.121 117.422 23.293 117.273 cv
23.457 117.129 23.586 116.953 23.676 116.75 cv
23.766 116.547 23.813 116.32 23.813 116.066 cv
23.813 115.887 23.781 115.711 23.723 115.543 cv
23.66 115.379 23.57 115.234 23.453 115.109 cv
23.332 114.984 23.18 114.887 23 114.816 cv
22.813 114.746 22.602 114.711 22.359 114.711 cv
22.094 114.711 21.848 114.754 21.629 114.832 cv
21.402 114.914 21.207 115 21.035 115.09 cv
20.859 115.184 20.715 115.27 20.602 115.348 cv
20.488 115.43 20.406 115.469 20.363 115.465 cv
20.328 115.469 20.301 115.461 20.277 115.449 cv
20.25 115.437 20.23 115.414 20.215 115.379 cv
20.199 115.348 20.188 115.301 20.18 115.234 cv
20.172 115.176 20.168 115.094 20.172 114.992 cv
20.168 114.926 20.168 114.867 20.176 114.812 cv
20.176 114.762 20.188 114.715 20.203 114.672 cv
20.219 114.637 20.234 114.602 20.254 114.566 cv
20.27 114.539 20.301 114.5 20.344 114.453 cv
20.387 114.41 20.473 114.348 20.609 114.266 cv
20.738 114.184 20.902 114.105 21.098 114.023 cv
21.289 113.945 21.512 113.875 21.77 113.82 cv
22.02 113.766 22.293 113.738 22.59 113.738 cv
22.996 113.738 23.359 113.793 23.672 113.895 cv
23.984 114.004 24.242 114.152 24.453 114.34 cv
24.656 114.535 24.813 114.766 24.918 115.031 cv
25.02 115.301 25.07 115.594 25.074 115.918 cv
25.07 116.199 25.035 116.461 24.965 116.695 cv
24.891 116.937 24.781 117.148 24.641 117.332 cv
24.496 117.52 24.324 117.676 24.121 117.805 cv
23.914 117.937 23.676 118.031 23.406 118.078 cv
23.406 118.09 li
23.711 118.125 23.992 118.199 24.246 118.32 cv
24.5 118.441 24.719 118.594 24.902 118.777 cv
25.082 118.961 25.223 119.176 25.328 119.418 cv
25.43 119.664 25.48 119.926 25.484 120.203 cv
cp
f
12.121 78.039 mo
26.309 78.039 li
26.309 95.129 li
12.121 95.129 li
cp
0 0 0 0 cmyk
ef
18.508 90.922 mo
18.504 91.012 18.496 91.086 18.484 91.145 cv
18.469 91.207 18.449 91.258 18.43 91.289 cv
18.406 91.328 18.383 91.352 18.352 91.367 cv
18.32 91.383 18.289 91.391 18.258 91.391 cv
13.617 91.391 li
13.586 91.391 13.555 91.383 13.527 91.367 cv
13.5 91.352 13.473 91.328 13.449 91.289 cv
13.418 91.258 13.398 91.207 13.391 91.145 cv
13.375 91.086 13.371 91.012 13.371 90.922 cv
13.371 90.844 13.375 90.773 13.391 90.711 cv
13.398 90.652 13.418 90.605 13.441 90.562 cv
13.461 90.527 13.484 90.496 13.516 90.473 cv
13.543 90.453 13.578 90.441 13.617 90.441 cv
15.473 90.441 li
15.473 83.687 li
13.754 84.707 li
13.664 84.758 13.594 84.785 13.543 84.793 cv
13.488 84.801 13.449 84.793 13.418 84.762 cv
13.387 84.734 13.363 84.684 13.352 84.613 cv
13.34 84.547 13.336 84.461 13.336 84.352 cv
13.336 84.277 13.336 84.211 13.344 84.152 cv
13.348 84.102 13.359 84.055 13.375 84.016 cv
13.387 83.98 13.406 83.949 13.434 83.922 cv
13.457 83.895 13.492 83.867 13.535 83.836 cv
15.582 82.523 li
15.598 82.516 15.621 82.504 15.648 82.492 cv
15.676 82.484 15.711 82.477 15.754 82.465 cv
15.793 82.457 15.84 82.449 15.898 82.445 cv
15.949 82.445 16.02 82.445 16.102 82.441 cv
16.211 82.445 16.301 82.449 16.379 82.457 cv
16.449 82.469 16.508 82.48 16.547 82.496 cv
16.586 82.512 16.613 82.535 16.629 82.559 cv
16.645 82.586 16.652 82.609 16.652 82.637 cv
16.652 90.441 li
18.258 90.441 li
18.293 90.441 18.324 90.453 18.359 90.473 cv
18.391 90.496 18.418 90.527 18.441 90.562 cv
18.457 90.605 18.473 90.652 18.488 90.711 cv
18.496 90.773 18.504 90.844 18.508 90.922 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.941 88.863 mo
25.938 89.02 25.914 89.137 25.871 89.223 cv
25.824 89.309 25.762 89.352 25.68 89.352 cv
24.68 89.352 li
24.68 91.219 li
24.68 91.258 24.668 91.289 24.648 91.312 cv
24.629 91.34 24.598 91.359 24.551 91.379 cv
24.504 91.395 24.441 91.406 24.367 91.418 cv
24.289 91.426 24.191 91.43 24.078 91.434 cv
23.961 91.43 23.867 91.426 23.793 91.418 cv
23.715 91.406 23.656 91.395 23.613 91.379 cv
23.566 91.359 23.535 91.34 23.52 91.312 cv
23.504 91.289 23.496 91.258 23.496 91.219 cv
23.496 89.352 li
19.863 89.352 li
19.809 89.352 19.762 89.348 19.727 89.332 cv
19.688 89.32 19.652 89.293 19.625 89.254 cv
19.594 89.219 19.574 89.168 19.563 89.098 cv
19.551 89.031 19.547 88.941 19.547 88.828 cv
19.547 88.746 19.547 88.668 19.555 88.598 cv
19.555 88.531 19.566 88.469 19.582 88.406 cv
19.594 88.352 19.609 88.297 19.637 88.242 cv
19.656 88.195 19.684 88.137 19.719 88.074 cv
22.887 82.676 li
22.91 82.645 22.941 82.613 22.988 82.582 cv
23.027 82.559 23.086 82.535 23.16 82.512 cv
23.227 82.496 23.313 82.484 23.418 82.477 cv
23.516 82.473 23.637 82.469 23.781 82.465 cv
23.934 82.469 24.066 82.473 24.184 82.48 cv
24.293 82.492 24.387 82.508 24.461 82.523 cv
24.527 82.547 24.582 82.57 24.621 82.598 cv
24.66 82.629 24.68 82.664 24.68 82.703 cv
24.68 88.375 li
25.68 88.375 li
25.754 88.379 25.816 88.418 25.867 88.496 cv
25.914 88.578 25.938 88.703 25.941 88.863 cv
cp
23.496 83.5 mo
23.484 83.5 li
20.625 88.375 li
23.496 88.375 li
cp
f
12.121 46.691 mo
26.309 46.691 li
26.309 63.781 li
12.121 63.781 li
cp
0 0 0 0 cmyk
ef
18.496 59.555 mo
18.492 59.645 18.484 59.715 18.473 59.773 cv
18.457 59.836 18.438 59.887 18.418 59.918 cv
18.395 59.957 18.371 59.98 18.34 59.996 cv
18.309 60.012 18.277 60.02 18.25 60.02 cv
13.613 60.02 li
13.578 60.02 13.551 60.012 13.523 59.996 cv
13.496 59.98 13.469 59.957 13.445 59.918 cv
13.418 59.887 13.398 59.836 13.387 59.773 cv
13.371 59.715 13.363 59.645 13.367 59.555 cv
13.363 59.477 13.371 59.402 13.387 59.34 cv
13.398 59.281 13.414 59.234 13.438 59.195 cv
13.453 59.16 13.48 59.129 13.512 59.105 cv
13.543 59.086 13.574 59.078 13.613 59.074 cv
15.465 59.074 li
15.465 52.328 li
13.75 53.348 li
13.66 53.398 13.59 53.426 13.543 53.434 cv
13.488 53.441 13.445 53.434 13.414 53.402 cv
13.379 53.375 13.359 53.324 13.348 53.254 cv
13.336 53.187 13.328 53.102 13.332 52.992 cv
13.328 52.918 13.332 52.852 13.344 52.793 cv
13.348 52.742 13.359 52.695 13.375 52.656 cv
13.387 52.621 13.406 52.59 13.43 52.562 cv
13.453 52.535 13.484 52.508 13.531 52.48 cv
15.574 51.168 li
15.59 51.156 15.609 51.145 15.641 51.137 cv
15.664 51.129 15.699 51.121 15.746 51.109 cv
15.785 51.102 15.836 51.094 15.891 51.09 cv
15.945 51.09 16.012 51.09 16.098 51.086 cv
16.203 51.09 16.297 51.094 16.371 51.102 cv
16.441 51.109 16.496 51.125 16.543 51.141 cv
16.582 51.16 16.609 51.18 16.625 51.203 cv
16.633 51.23 16.641 51.254 16.645 51.277 cv
16.645 59.074 li
18.25 59.074 li
18.285 59.078 18.32 59.086 18.352 59.105 cv
18.383 59.129 18.406 59.16 18.43 59.195 cv
18.445 59.234 18.461 59.281 18.477 59.34 cv
18.484 59.402 18.492 59.477 18.496 59.555 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.512 57.168 mo
25.512 57.645 25.43 58.066 25.27 58.437 cv
25.109 58.809 24.883 59.121 24.594 59.375 cv
24.297 59.629 23.949 59.824 23.547 59.953 cv
23.141 60.086 22.691 60.148 22.199 60.148 cv
21.922 60.148 21.66 60.129 21.418 60.09 cv
21.168 60.051 20.949 60.004 20.762 59.949 cv
20.566 59.895 20.41 59.84 20.285 59.781 cv
20.16 59.73 20.082 59.687 20.051 59.652 cv
20.016 59.621 19.992 59.59 19.98 59.562 cv
19.965 59.535 19.949 59.504 19.941 59.461 cv
19.926 59.426 19.918 59.375 19.918 59.312 cv
19.91 59.254 19.91 59.184 19.91 59.102 cv
19.91 59.027 19.914 58.957 19.922 58.895 cv
19.93 58.832 19.941 58.781 19.961 58.742 cv
19.977 58.703 19.996 58.676 20.023 58.656 cv
20.047 58.641 20.078 58.633 20.109 58.629 cv
20.156 58.633 20.227 58.66 20.32 58.715 cv
20.414 58.773 20.543 58.836 20.707 58.902 cv
20.871 58.969 21.07 59.031 21.313 59.09 cv
21.547 59.148 21.832 59.176 22.168 59.176 cv
22.469 59.176 22.75 59.141 23.008 59.066 cv
23.262 58.996 23.484 58.883 23.672 58.727 cv
23.855 58.574 24 58.379 24.105 58.141 cv
24.211 57.906 24.262 57.617 24.266 57.277 cv
24.262 56.996 24.219 56.746 24.129 56.527 cv
24.039 56.309 23.902 56.129 23.719 55.984 cv
23.531 55.844 23.297 55.738 23.016 55.664 cv
22.73 55.594 22.391 55.555 22.004 55.555 cv
21.719 55.555 21.48 55.57 21.281 55.598 cv
21.078 55.629 20.891 55.645 20.719 55.641 cv
20.59 55.645 20.496 55.613 20.445 55.551 cv
20.387 55.492 20.359 55.379 20.363 55.207 cv
20.363 51.594 li
20.359 51.445 20.395 51.336 20.469 51.258 cv
20.535 51.187 20.637 51.148 20.773 51.148 cv
24.703 51.148 li
24.738 51.148 24.773 51.16 24.809 51.18 cv
24.84 51.203 24.867 51.234 24.895 51.273 cv
24.914 51.316 24.93 51.367 24.945 51.43 cv
24.953 51.496 24.961 51.574 24.965 51.656 cv
24.961 51.824 24.938 51.949 24.898 52.039 cv
24.852 52.133 24.793 52.18 24.715 52.176 cv
21.543 52.176 li
21.543 54.664 li
21.695 54.645 21.852 54.633 22.016 54.625 cv
22.172 54.621 22.359 54.617 22.574 54.617 cv
23.059 54.617 23.484 54.68 23.852 54.801 cv
24.215 54.922 24.52 55.094 24.77 55.312 cv
25.012 55.539 25.199 55.805 25.324 56.117 cv
25.449 56.434 25.512 56.785 25.512 57.168 cv
cp
f
12.121 15.34 mo
26.309 15.34 li
26.309 32.43 li
12.121 32.43 li
cp
0 0 0 0 cmyk
ef
18.496 28.195 mo
18.492 28.285 18.484 28.355 18.473 28.414 cv
18.457 28.477 18.438 28.527 18.418 28.559 cv
18.395 28.598 18.371 28.621 18.34 28.637 cv
18.309 28.652 18.277 28.66 18.25 28.66 cv
13.613 28.66 li
13.578 28.66 13.551 28.652 13.523 28.637 cv
13.496 28.621 13.469 28.598 13.445 28.559 cv
13.418 28.527 13.398 28.477 13.387 28.414 cv
13.371 28.355 13.363 28.285 13.367 28.195 cv
13.363 28.117 13.371 28.043 13.387 27.98 cv
13.398 27.922 13.414 27.875 13.438 27.836 cv
13.453 27.801 13.48 27.77 13.512 27.746 cv
13.543 27.727 13.574 27.719 13.613 27.715 cv
15.465 27.715 li
15.465 20.969 li
13.75 21.988 li
13.66 22.039 13.59 22.066 13.543 22.074 cv
13.488 22.082 13.445 22.074 13.414 22.043 cv
13.379 22.016 13.359 21.965 13.348 21.895 cv
13.336 21.828 13.328 21.742 13.332 21.633 cv
13.328 21.559 13.332 21.492 13.344 21.434 cv
13.348 21.383 13.359 21.336 13.375 21.297 cv
13.387 21.262 13.406 21.23 13.43 21.203 cv
13.453 21.176 13.484 21.148 13.531 21.121 cv
15.574 19.809 li
15.59 19.797 15.609 19.785 15.641 19.777 cv
15.664 19.77 15.699 19.762 15.746 19.75 cv
15.785 19.742 15.836 19.734 15.891 19.73 cv
15.945 19.73 16.012 19.73 16.098 19.727 cv
16.203 19.73 16.297 19.734 16.371 19.742 cv
16.441 19.75 16.496 19.766 16.543 19.781 cv
16.582 19.801 16.609 19.82 16.625 19.844 cv
16.633 19.871 16.641 19.895 16.645 19.918 cv
16.645 27.715 li
18.25 27.715 li
18.285 27.719 18.32 27.727 18.352 27.746 cv
18.383 27.77 18.406 27.801 18.43 27.836 cv
18.445 27.875 18.461 27.922 18.477 27.98 cv
18.484 28.043 18.492 28.117 18.496 28.195 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.781 25.789 mo
25.781 26.18 25.719 26.559 25.602 26.918 cv
25.477 27.285 25.293 27.602 25.051 27.875 cv
24.801 28.152 24.488 28.375 24.113 28.539 cv
23.73 28.707 23.285 28.789 22.77 28.789 cv
22.398 28.789 22.07 28.746 21.789 28.652 cv
21.504 28.566 21.258 28.434 21.047 28.262 cv
20.836 28.094 20.66 27.887 20.523 27.641 cv
20.383 27.395 20.27 27.113 20.188 26.797 cv
20.102 26.484 20.043 26.141 20.008 25.762 cv
19.969 25.391 19.949 24.988 19.953 24.555 cv
19.949 24.176 19.969 23.793 20.012 23.402 cv
20.051 23.02 20.125 22.645 20.23 22.277 cv
20.336 21.918 20.48 21.578 20.66 21.262 cv
20.84 20.945 21.066 20.668 21.34 20.434 cv
21.613 20.199 21.938 20.012 22.316 19.871 cv
22.695 19.734 23.137 19.668 23.641 19.664 cv
23.809 19.668 23.98 19.676 24.152 19.695 cv
24.324 19.719 24.484 19.75 24.633 19.781 cv
24.781 19.82 24.902 19.855 25.004 19.895 cv
25.102 19.934 25.168 19.969 25.203 19.992 cv
25.23 20.02 25.254 20.047 25.273 20.074 cv
25.289 20.105 25.305 20.137 25.313 20.172 cv
25.32 20.207 25.324 20.246 25.332 20.289 cv
25.332 20.332 25.336 20.387 25.34 20.449 cv
25.336 20.535 25.336 20.605 25.336 20.66 cv
25.332 20.723 25.32 20.77 25.309 20.805 cv
25.289 20.844 25.27 20.871 25.246 20.887 cv
25.219 20.906 25.188 20.914 25.148 20.914 cv
25.098 20.914 25.027 20.898 24.941 20.867 cv
24.852 20.836 24.746 20.801 24.625 20.758 cv
24.5 20.723 24.352 20.687 24.176 20.652 cv
24 20.625 23.797 20.609 23.566 20.605 cv
23.137 20.609 22.77 20.695 22.465 20.867 cv
22.16 21.039 21.91 21.273 21.715 21.566 cv
21.52 21.859 21.375 22.199 21.285 22.582 cv
21.188 22.973 21.133 23.375 21.125 23.793 cv
21.242 23.727 21.379 23.66 21.527 23.59 cv
21.676 23.523 21.836 23.461 22.012 23.402 cv
22.188 23.352 22.375 23.305 22.57 23.27 cv
22.766 23.238 22.977 23.223 23.203 23.219 cv
23.68 23.223 24.082 23.289 24.414 23.414 cv
24.742 23.547 25.008 23.727 25.215 23.957 cv
25.414 24.187 25.559 24.457 25.648 24.77 cv
25.734 25.082 25.781 25.422 25.781 25.789 cv
cp
24.586 25.898 mo
24.586 25.637 24.559 25.395 24.508 25.176 cv
24.453 24.961 24.363 24.777 24.242 24.621 cv
24.117 24.473 23.953 24.355 23.75 24.273 cv
23.539 24.191 23.285 24.148 22.988 24.148 cv
22.816 24.148 22.648 24.164 22.48 24.195 cv
22.309 24.227 22.145 24.27 21.988 24.316 cv
21.828 24.371 21.68 24.434 21.539 24.504 cv
21.395 24.578 21.262 24.652 21.145 24.73 cv
21.141 25.324 21.18 25.82 21.258 26.215 cv
21.332 26.613 21.441 26.93 21.586 27.168 cv
21.73 27.41 21.91 27.582 22.125 27.684 cv
22.34 27.789 22.59 27.84 22.879 27.836 cv
23.168 27.84 23.422 27.785 23.637 27.672 cv
23.852 27.566 24.027 27.418 24.172 27.23 cv
24.313 27.047 24.418 26.84 24.484 26.609 cv
24.551 26.379 24.586 26.145 24.586 25.898 cv
cp
f
42.137 516.758 mo
42.133 516.848 42.125 516.918 42.113 516.977 cv
42.098 517.039 42.078 517.09 42.059 517.121 cv
42.035 517.16 42.012 517.184 41.98 517.199 cv
41.949 517.215 41.918 517.223 41.891 517.223 cv
37.254 517.223 li
37.219 517.223 37.191 517.215 37.164 517.199 cv
37.137 517.184 37.109 517.16 37.086 517.121 cv
37.059 517.09 37.039 517.039 37.027 516.977 cv
37.012 516.918 37.004 516.848 37.008 516.758 cv
37.004 516.68 37.012 516.605 37.027 516.543 cv
37.039 516.484 37.055 516.437 37.078 516.398 cv
37.094 516.363 37.121 516.332 37.152 516.309 cv
37.184 516.289 37.215 516.281 37.254 516.277 cv
39.105 516.277 li
39.105 509.531 li
37.391 510.551 li
37.301 510.602 37.23 510.629 37.184 510.637 cv
37.129 510.645 37.086 510.637 37.055 510.605 cv
37.02 510.578 37 510.527 36.988 510.457 cv
36.977 510.391 36.969 510.305 36.973 510.195 cv
36.969 510.121 36.973 510.055 36.984 509.996 cv
36.988 509.945 37 509.898 37.016 509.859 cv
37.027 509.824 37.047 509.793 37.07 509.766 cv
37.094 509.738 37.125 509.711 37.172 509.684 cv
39.215 508.371 li
39.23 508.359 39.25 508.348 39.281 508.34 cv
39.305 508.332 39.34 508.324 39.387 508.312 cv
39.426 508.305 39.477 508.297 39.531 508.293 cv
39.586 508.293 39.652 508.293 39.738 508.289 cv
39.844 508.293 39.938 508.297 40.012 508.305 cv
40.082 508.312 40.137 508.328 40.184 508.344 cv
40.223 508.363 40.25 508.383 40.266 508.406 cv
40.273 508.434 40.281 508.457 40.285 508.48 cv
40.285 516.277 li
41.891 516.277 li
41.926 516.281 41.961 516.289 41.992 516.309 cv
42.023 516.332 42.047 516.363 42.07 516.398 cv
42.086 516.437 42.102 516.484 42.117 516.543 cv
42.125 516.605 42.133 516.68 42.137 516.758 cv
cp
f
114.867 516.715 mo
114.863 516.801 114.859 516.875 114.848 516.937 cv
114.836 517.004 114.82 517.059 114.801 517.098 cv
114.777 517.145 114.75 517.176 114.719 517.191 cv
114.684 517.215 114.645 517.223 114.605 517.223 cv
109.703 517.223 li
109.641 517.223 109.582 517.215 109.535 517.199 cv
109.484 517.184 109.445 517.16 109.41 517.121 cv
109.375 517.09 109.348 517.035 109.336 516.965 cv
109.316 516.895 109.309 516.809 109.313 516.707 cv
109.309 516.617 109.313 516.539 109.32 516.469 cv
109.324 516.402 109.34 516.344 109.367 516.289 cv
109.391 516.238 109.422 516.184 109.457 516.129 cv
109.492 516.078 109.535 516.023 109.594 515.961 cv
111.367 514.137 li
111.777 513.719 112.105 513.344 112.355 513.008 cv
112.602 512.68 112.793 512.375 112.926 512.098 cv
113.059 511.824 113.145 511.574 113.191 511.348 cv
113.23 511.125 113.254 510.914 113.254 510.719 cv
113.254 510.523 113.219 510.34 113.152 510.16 cv
113.086 509.988 112.992 509.832 112.867 509.695 cv
112.742 509.566 112.586 509.461 112.398 509.379 cv
112.211 509.305 111.992 509.266 111.746 509.262 cv
111.457 509.266 111.199 509.305 110.973 509.379 cv
110.742 509.461 110.543 509.547 110.371 509.633 cv
110.199 509.727 110.055 509.809 109.938 509.887 cv
109.82 509.965 109.734 510.004 109.684 510.004 cv
109.648 510.004 109.617 509.996 109.594 509.977 cv
109.563 509.961 109.543 509.93 109.527 509.887 cv
109.512 509.848 109.496 509.793 109.488 509.723 cv
109.477 509.656 109.473 509.574 109.477 509.477 cv
109.473 509.41 109.477 509.352 109.484 509.301 cv
109.488 509.25 109.496 509.207 109.508 509.168 cv
109.516 509.133 109.531 509.098 109.551 509.066 cv
109.57 509.035 109.605 508.996 109.664 508.945 cv
109.715 508.898 109.809 508.832 109.945 508.75 cv
110.078 508.668 110.25 508.59 110.453 508.508 cv
110.656 508.43 110.879 508.359 111.125 508.305 cv
111.367 508.25 111.625 508.223 111.898 508.223 cv
112.324 508.223 112.699 508.285 113.023 508.406 cv
113.344 508.527 113.609 508.691 113.824 508.902 cv
114.035 509.113 114.195 509.359 114.301 509.633 cv
114.406 509.914 114.461 510.211 114.461 510.523 cv
114.461 510.812 114.434 511.094 114.383 511.371 cv
114.332 511.656 114.227 511.961 114.066 512.285 cv
113.902 512.613 113.668 512.977 113.363 513.375 cv
113.055 513.777 112.648 514.238 112.145 514.754 cv
110.738 516.223 li
114.598 516.223 li
114.629 516.227 114.664 516.238 114.703 516.254 cv
114.734 516.277 114.766 516.309 114.793 516.348 cv
114.816 516.391 114.836 516.441 114.848 516.5 cv
114.859 516.566 114.863 516.637 114.867 516.715 cv
cp
f
187.98 514.699 mo
187.977 514.852 187.953 514.973 187.91 515.059 cv
187.863 515.148 187.801 515.191 187.719 515.187 cv
186.719 515.187 li
186.719 517.051 li
186.719 517.09 186.707 517.121 186.691 517.145 cv
186.668 517.172 186.637 517.191 186.594 517.211 cv
186.543 517.227 186.48 517.238 186.41 517.25 cv
186.332 517.258 186.238 517.262 186.121 517.266 cv
186.004 517.262 185.906 517.258 185.836 517.25 cv
185.758 517.238 185.699 517.227 185.656 517.211 cv
185.609 517.191 185.578 517.172 185.563 517.145 cv
185.543 517.121 185.535 517.09 185.539 517.051 cv
185.539 515.187 li
181.91 515.187 li
181.852 515.191 181.809 515.184 181.773 515.168 cv
181.738 515.156 181.703 515.129 181.676 515.09 cv
181.645 515.055 181.625 515.004 181.613 514.934 cv
181.602 514.867 181.598 514.777 181.598 514.664 cv
181.598 514.582 181.598 514.504 181.605 514.434 cv
181.605 514.363 181.617 514.301 181.633 514.246 cv
181.645 514.191 181.66 514.137 181.688 514.082 cv
181.707 514.027 181.734 513.973 181.77 513.91 cv
184.93 508.523 li
184.949 508.488 184.984 508.457 185.031 508.43 cv
185.074 508.402 185.129 508.379 185.203 508.359 cv
185.27 508.344 185.355 508.332 185.461 508.32 cv
185.563 508.316 185.684 508.312 185.824 508.309 cv
185.973 508.312 186.109 508.316 186.227 508.328 cv
186.34 508.34 186.43 508.355 186.504 508.371 cv
186.57 508.391 186.625 508.414 186.664 508.445 cv
186.699 508.477 186.719 508.512 186.719 508.551 cv
186.719 514.215 li
187.719 514.215 li
187.793 514.219 187.855 514.258 187.906 514.336 cv
187.953 514.418 187.977 514.539 187.98 514.699 cv
cp
185.539 509.348 mo
185.527 509.348 li
182.676 514.215 li
185.539 514.215 li
cp
f
260.582 514.352 mo
260.582 514.742 260.52 515.121 260.402 515.48 cv
260.277 515.848 260.094 516.164 259.852 516.437 cv
259.602 516.715 259.289 516.937 258.914 517.102 cv
258.531 517.27 258.086 517.352 257.57 517.352 cv
257.199 517.352 256.871 517.309 256.59 517.215 cv
256.305 517.129 256.059 516.996 255.848 516.824 cv
255.637 516.656 255.461 516.449 255.324 516.203 cv
255.184 515.957 255.07 515.676 254.988 515.359 cv
254.902 515.047 254.844 514.703 254.809 514.324 cv
254.77 513.953 254.75 513.551 254.754 513.117 cv
254.75 512.738 254.77 512.355 254.813 511.965 cv
254.852 511.582 254.926 511.207 255.031 510.84 cv
255.137 510.48 255.281 510.141 255.461 509.824 cv
255.641 509.508 255.867 509.23 256.141 508.996 cv
256.414 508.762 256.738 508.574 257.117 508.434 cv
257.496 508.297 257.938 508.23 258.441 508.227 cv
258.609 508.23 258.781 508.238 258.953 508.258 cv
259.125 508.281 259.285 508.312 259.434 508.344 cv
259.582 508.383 259.703 508.418 259.805 508.457 cv
259.902 508.496 259.969 508.531 260.004 508.555 cv
260.031 508.582 260.055 508.609 260.074 508.637 cv
260.09 508.668 260.105 508.699 260.113 508.734 cv
260.121 508.77 260.125 508.809 260.133 508.852 cv
260.133 508.895 260.137 508.949 260.141 509.012 cv
260.137 509.098 260.137 509.168 260.137 509.223 cv
260.133 509.285 260.121 509.332 260.109 509.367 cv
260.09 509.406 260.07 509.434 260.047 509.449 cv
260.02 509.469 259.988 509.477 259.949 509.477 cv
259.898 509.477 259.828 509.461 259.742 509.43 cv
259.652 509.398 259.547 509.363 259.426 509.32 cv
259.301 509.285 259.152 509.25 258.977 509.215 cv
258.801 509.187 258.598 509.172 258.367 509.168 cv
257.938 509.172 257.57 509.258 257.266 509.43 cv
256.961 509.602 256.711 509.836 256.516 510.129 cv
256.32 510.422 256.176 510.762 256.086 511.145 cv
255.988 511.535 255.934 511.937 255.926 512.355 cv
256.043 512.289 256.18 512.223 256.328 512.152 cv
256.477 512.086 256.637 512.023 256.813 511.965 cv
256.988 511.914 257.176 511.867 257.371 511.832 cv
257.566 511.801 257.777 511.785 258.004 511.781 cv
258.48 511.785 258.883 511.852 259.215 511.977 cv
259.543 512.109 259.809 512.289 260.016 512.52 cv
260.215 512.75 260.359 513.02 260.449 513.332 cv
260.535 513.645 260.582 513.984 260.582 514.352 cv
cp
259.387 514.461 mo
259.387 514.199 259.359 513.957 259.309 513.738 cv
259.254 513.523 259.164 513.34 259.043 513.184 cv
258.918 513.035 258.754 512.918 258.551 512.836 cv
258.34 512.754 258.086 512.711 257.789 512.711 cv
257.617 512.711 257.449 512.727 257.281 512.758 cv
257.109 512.789 256.945 512.832 256.789 512.879 cv
256.629 512.934 256.48 512.996 256.34 513.066 cv
256.195 513.141 256.063 513.215 255.945 513.293 cv
255.941 513.887 255.98 514.383 256.059 514.777 cv
256.133 515.176 256.242 515.492 256.387 515.73 cv
256.531 515.973 256.711 516.145 256.926 516.246 cv
257.141 516.352 257.391 516.402 257.68 516.398 cv
257.969 516.402 258.223 516.348 258.438 516.234 cv
258.652 516.129 258.828 515.98 258.973 515.793 cv
259.113 515.609 259.219 515.402 259.285 515.172 cv
259.352 514.941 259.387 514.707 259.387 514.461 cv
cp
f
333.32 514.945 mo
333.32 515.332 333.25 515.676 333.113 515.973 cv
332.977 516.277 332.781 516.527 332.523 516.73 cv
332.266 516.937 331.945 517.094 331.566 517.195 cv
331.184 517.301 330.75 517.352 330.266 517.352 cv
329.805 517.352 329.395 517.305 329.035 517.211 cv
328.672 517.117 328.367 516.977 328.117 516.785 cv
327.867 516.602 327.676 516.371 327.543 516.094 cv
327.41 515.82 327.344 515.508 327.344 515.152 cv
327.344 514.879 327.387 514.621 327.48 514.387 cv
327.566 514.152 327.699 513.937 327.875 513.742 cv
328.043 513.547 328.254 513.363 328.508 513.187 cv
328.758 513.02 329.043 512.855 329.359 512.699 cv
329.086 512.559 328.844 512.41 328.633 512.25 cv
328.422 512.094 328.242 511.922 328.098 511.734 cv
327.949 511.551 327.84 511.355 327.766 511.145 cv
327.688 510.937 327.648 510.707 327.652 510.457 cv
327.648 510.148 327.703 509.855 327.82 509.582 cv
327.93 509.312 328.102 509.078 328.328 508.875 cv
328.555 508.676 328.84 508.516 329.191 508.398 cv
329.535 508.281 329.945 508.223 330.414 508.223 cv
330.859 508.223 331.246 508.277 331.574 508.383 cv
331.902 508.492 332.172 508.637 332.383 508.82 cv
332.594 509.008 332.75 509.227 332.855 509.477 cv
332.953 509.727 333.004 509.996 333.008 510.285 cv
333.004 510.52 332.965 510.746 332.895 510.957 cv
332.816 511.176 332.707 511.379 332.559 511.566 cv
332.41 511.762 332.23 511.941 332.02 512.105 cv
331.809 512.277 331.566 512.434 331.293 512.574 cv
331.613 512.738 331.898 512.902 332.156 513.07 cv
332.406 513.238 332.621 513.418 332.797 513.613 cv
332.965 513.809 333.094 514.016 333.188 514.23 cv
333.273 514.449 333.32 514.687 333.32 514.945 cv
cp
331.84 510.395 mo
331.836 510.207 331.805 510.031 331.738 509.875 cv
331.672 509.719 331.574 509.586 331.449 509.477 cv
331.32 509.367 331.16 509.285 330.973 509.227 cv
330.777 509.172 330.563 509.145 330.324 509.141 cv
329.828 509.145 329.453 509.254 329.203 509.477 cv
328.945 509.703 328.82 510.012 328.824 510.395 cv
328.82 510.574 328.852 510.738 328.914 510.891 cv
328.977 511.047 329.07 511.191 329.203 511.328 cv
329.328 511.465 329.492 511.598 329.695 511.727 cv
329.891 511.859 330.129 511.996 330.406 512.137 cv
330.867 511.902 331.223 511.641 331.469 511.348 cv
331.715 511.062 331.836 510.746 331.84 510.395 cv
cp
332.129 515.07 mo
332.125 514.863 332.086 514.672 332.012 514.5 cv
331.93 514.332 331.813 514.172 331.656 514.02 cv
331.5 513.871 331.301 513.727 331.066 513.586 cv
330.828 513.449 330.559 513.305 330.25 513.152 cv
329.961 513.297 329.707 513.437 329.492 513.578 cv
329.273 513.719 329.094 513.867 328.957 514.016 cv
328.816 514.172 328.711 514.328 328.641 514.492 cv
328.566 514.66 328.531 514.844 328.535 515.043 cv
328.531 515.488 328.684 515.832 328.992 516.07 cv
329.293 516.316 329.746 516.437 330.352 516.434 cv
330.934 516.437 331.379 516.316 331.68 516.066 cv
331.977 515.824 332.125 515.492 332.129 515.07 cv
cp
f
402.336 516.758 mo
402.332 516.848 402.324 516.918 402.313 516.977 cv
402.297 517.039 402.277 517.09 402.258 517.121 cv
402.234 517.16 402.211 517.184 402.18 517.199 cv
402.148 517.215 402.117 517.223 402.09 517.223 cv
397.453 517.223 li
397.418 517.223 397.391 517.215 397.363 517.199 cv
397.336 517.184 397.309 517.16 397.285 517.121 cv
397.258 517.09 397.238 517.039 397.227 516.977 cv
397.211 516.918 397.203 516.848 397.207 516.758 cv
397.203 516.68 397.211 516.605 397.227 516.543 cv
397.238 516.484 397.254 516.437 397.277 516.398 cv
397.293 516.363 397.32 516.332 397.352 516.309 cv
397.383 516.289 397.414 516.281 397.453 516.277 cv
399.305 516.277 li
399.305 509.531 li
397.59 510.551 li
397.5 510.602 397.43 510.629 397.383 510.637 cv
397.328 510.645 397.285 510.637 397.254 510.605 cv
397.219 510.578 397.199 510.527 397.188 510.457 cv
397.176 510.391 397.168 510.305 397.172 510.195 cv
397.168 510.121 397.172 510.055 397.184 509.996 cv
397.188 509.945 397.199 509.898 397.215 509.859 cv
397.227 509.824 397.246 509.793 397.27 509.766 cv
397.293 509.738 397.324 509.711 397.371 509.684 cv
399.414 508.371 li
399.43 508.359 399.449 508.348 399.48 508.34 cv
399.504 508.332 399.539 508.324 399.586 508.312 cv
399.625 508.305 399.676 508.297 399.73 508.293 cv
399.785 508.293 399.852 508.293 399.938 508.289 cv
400.043 508.293 400.137 508.297 400.211 508.305 cv
400.281 508.312 400.336 508.328 400.383 508.344 cv
400.422 508.363 400.449 508.383 400.465 508.406 cv
400.473 508.434 400.48 508.457 400.484 508.48 cv
400.484 516.277 li
402.09 516.277 li
402.125 516.281 402.16 516.289 402.191 516.309 cv
402.223 516.332 402.246 516.363 402.27 516.398 cv
402.285 516.437 402.301 516.484 402.316 516.543 cv
402.324 516.605 402.332 516.68 402.336 516.758 cv
cp
f
409.688 512.766 mo
409.684 513.449 409.633 514.07 409.527 514.633 cv
409.418 515.195 409.238 515.68 408.992 516.082 cv
408.738 516.488 408.41 516.801 408.012 517.02 cv
407.605 517.242 407.113 517.352 406.527 517.352 cv
405.969 517.352 405.496 517.254 405.117 517.055 cv
404.734 516.859 404.43 516.566 404.195 516.18 cv
403.961 515.793 403.793 515.32 403.699 514.754 cv
403.598 514.191 403.551 513.543 403.551 512.809 cv
403.551 512.137 403.605 511.516 403.715 510.949 cv
403.824 510.387 404 509.902 404.25 509.496 cv
404.492 509.094 404.816 508.781 405.223 508.555 cv
405.621 508.336 406.117 508.223 406.707 508.223 cv
407.266 508.223 407.738 508.324 408.121 508.52 cv
408.504 508.723 408.809 509.016 409.043 509.398 cv
409.273 509.789 409.441 510.262 409.539 510.824 cv
409.637 511.387 409.684 512.035 409.688 512.766 cv
cp
408.48 512.848 mo
408.477 512.406 408.461 512.008 408.434 511.656 cv
408.398 511.305 408.352 510.996 408.293 510.727 cv
408.227 510.457 408.148 510.227 408.051 510.031 cv
407.953 509.84 407.836 509.68 407.699 509.551 cv
407.559 509.426 407.398 509.332 407.227 509.273 cv
407.047 509.219 406.852 509.191 406.637 509.187 cv
406.246 509.191 405.93 509.281 405.691 509.465 cv
405.445 509.648 405.254 509.902 405.117 510.219 cv
404.977 510.539 404.883 510.91 404.832 511.34 cv
404.781 511.77 404.758 512.234 404.758 512.727 cv
404.758 513.391 404.789 513.953 404.859 514.414 cv
404.926 514.883 405.035 515.262 405.188 515.551 cv
405.332 515.848 405.523 516.059 405.754 516.187 cv
405.984 516.324 406.266 516.391 406.598 516.387 cv
406.852 516.391 407.074 516.352 407.27 516.266 cv
407.461 516.187 407.629 516.066 407.77 515.91 cv
407.91 515.758 408.023 515.574 408.117 515.359 cv
408.203 515.145 408.277 514.906 408.336 514.645 cv
408.387 514.387 408.426 514.105 408.449 513.801 cv
408.469 513.496 408.477 513.18 408.48 512.848 cv
cp
f
475.074 516.758 mo
475.07 516.848 475.063 516.918 475.051 516.977 cv
475.035 517.039 475.016 517.09 474.996 517.121 cv
474.973 517.16 474.949 517.184 474.918 517.199 cv
474.887 517.215 474.855 517.223 474.828 517.223 cv
470.191 517.223 li
470.156 517.223 470.129 517.215 470.102 517.199 cv
470.074 517.184 470.047 517.16 470.023 517.121 cv
469.996 517.09 469.977 517.039 469.965 516.977 cv
469.949 516.918 469.941 516.848 469.945 516.758 cv
469.941 516.68 469.949 516.605 469.965 516.543 cv
469.977 516.484 469.992 516.437 470.016 516.398 cv
470.031 516.363 470.059 516.332 470.09 516.309 cv
470.121 516.289 470.152 516.281 470.191 516.277 cv
472.043 516.277 li
472.043 509.531 li
470.328 510.551 li
470.238 510.602 470.168 510.629 470.121 510.637 cv
470.066 510.645 470.023 510.637 469.992 510.605 cv
469.957 510.578 469.938 510.527 469.926 510.457 cv
469.914 510.391 469.906 510.305 469.91 510.195 cv
469.906 510.121 469.91 510.055 469.922 509.996 cv
469.926 509.945 469.938 509.898 469.953 509.859 cv
469.965 509.824 469.984 509.793 470.008 509.766 cv
470.031 509.738 470.063 509.711 470.109 509.684 cv
472.152 508.371 li
472.168 508.359 472.188 508.348 472.219 508.34 cv
472.242 508.332 472.277 508.324 472.324 508.312 cv
472.363 508.305 472.414 508.297 472.469 508.293 cv
472.523 508.293 472.59 508.293 472.676 508.289 cv
472.781 508.293 472.875 508.297 472.949 508.305 cv
473.02 508.312 473.074 508.328 473.121 508.344 cv
473.16 508.363 473.188 508.383 473.203 508.406 cv
473.211 508.434 473.219 508.457 473.223 508.48 cv
473.223 516.277 li
474.828 516.277 li
474.863 516.281 474.898 516.289 474.93 516.309 cv
474.961 516.332 474.984 516.363 475.008 516.398 cv
475.023 516.437 475.039 516.484 475.055 516.543 cv
475.063 516.605 475.07 516.68 475.074 516.758 cv
cp
f
482.137 516.715 mo
482.133 516.801 482.129 516.875 482.117 516.937 cv
482.105 517.004 482.09 517.059 482.07 517.098 cv
482.047 517.145 482.02 517.176 481.988 517.191 cv
481.953 517.215 481.914 517.223 481.875 517.223 cv
476.973 517.223 li
476.91 517.223 476.852 517.215 476.805 517.199 cv
476.754 517.184 476.715 517.16 476.68 517.121 cv
476.645 517.09 476.617 517.035 476.605 516.965 cv
476.586 516.895 476.578 516.809 476.582 516.707 cv
476.578 516.617 476.582 516.539 476.59 516.469 cv
476.594 516.402 476.609 516.344 476.637 516.289 cv
476.66 516.238 476.691 516.184 476.727 516.129 cv
476.762 516.078 476.805 516.023 476.863 515.961 cv
478.637 514.137 li
479.047 513.719 479.375 513.344 479.625 513.008 cv
479.871 512.68 480.063 512.375 480.195 512.098 cv
480.328 511.824 480.414 511.574 480.461 511.348 cv
480.5 511.125 480.523 510.914 480.523 510.719 cv
480.523 510.523 480.488 510.34 480.422 510.16 cv
480.355 509.988 480.262 509.832 480.137 509.695 cv
480.012 509.566 479.855 509.461 479.668 509.379 cv
479.48 509.305 479.262 509.266 479.016 509.262 cv
478.727 509.266 478.469 509.305 478.242 509.379 cv
478.012 509.461 477.813 509.547 477.641 509.633 cv
477.469 509.727 477.324 509.809 477.207 509.887 cv
477.09 509.965 477.004 510.004 476.953 510.004 cv
476.918 510.004 476.887 509.996 476.863 509.977 cv
476.832 509.961 476.813 509.93 476.797 509.887 cv
476.781 509.848 476.766 509.793 476.758 509.723 cv
476.746 509.656 476.742 509.574 476.746 509.477 cv
476.742 509.41 476.746 509.352 476.754 509.301 cv
476.758 509.25 476.766 509.207 476.777 509.168 cv
476.785 509.133 476.801 509.098 476.82 509.066 cv
476.84 509.035 476.875 508.996 476.934 508.945 cv
476.984 508.898 477.078 508.832 477.215 508.75 cv
477.348 508.668 477.52 508.59 477.723 508.508 cv
477.926 508.43 478.148 508.359 478.395 508.305 cv
478.637 508.25 478.895 508.223 479.168 508.223 cv
479.594 508.223 479.969 508.285 480.293 508.406 cv
480.613 508.527 480.879 508.691 481.094 508.902 cv
481.305 509.113 481.465 509.359 481.57 509.633 cv
481.676 509.914 481.73 510.211 481.73 510.523 cv
481.73 510.812 481.703 511.094 481.652 511.371 cv
481.602 511.656 481.496 511.961 481.336 512.285 cv
481.172 512.613 480.938 512.977 480.633 513.375 cv
480.324 513.777 479.918 514.238 479.414 514.754 cv
478.008 516.223 li
481.867 516.223 li
481.898 516.227 481.934 516.238 481.973 516.254 cv
482.004 516.277 482.035 516.309 482.063 516.348 cv
482.086 516.391 482.105 516.441 482.117 516.5 cv
482.129 516.566 482.133 516.637 482.137 516.715 cv
cp
f
547.844 516.758 mo
547.84 516.848 547.832 516.918 547.82 516.977 cv
547.805 517.039 547.785 517.09 547.766 517.121 cv
547.742 517.16 547.719 517.184 547.688 517.199 cv
547.656 517.215 547.625 517.223 547.598 517.223 cv
542.961 517.223 li
542.926 517.223 542.898 517.215 542.871 517.199 cv
542.844 517.184 542.816 517.16 542.793 517.121 cv
542.766 517.09 542.746 517.039 542.734 516.977 cv
542.719 516.918 542.711 516.848 542.715 516.758 cv
542.711 516.68 542.719 516.605 542.734 516.543 cv
542.746 516.484 542.762 516.437 542.785 516.398 cv
542.801 516.363 542.828 516.332 542.859 516.309 cv
542.891 516.289 542.922 516.281 542.961 516.277 cv
544.813 516.277 li
544.813 509.531 li
543.098 510.551 li
543.008 510.602 542.938 510.629 542.891 510.637 cv
542.836 510.645 542.793 510.637 542.762 510.605 cv
542.727 510.578 542.707 510.527 542.695 510.457 cv
542.684 510.391 542.676 510.305 542.68 510.195 cv
542.676 510.121 542.68 510.055 542.691 509.996 cv
542.695 509.945 542.707 509.898 542.723 509.859 cv
542.734 509.824 542.754 509.793 542.777 509.766 cv
542.801 509.738 542.832 509.711 542.879 509.684 cv
544.922 508.371 li
544.938 508.359 544.957 508.348 544.988 508.34 cv
545.012 508.332 545.047 508.324 545.094 508.312 cv
545.133 508.305 545.184 508.297 545.238 508.293 cv
545.293 508.293 545.359 508.293 545.445 508.289 cv
545.551 508.293 545.645 508.297 545.719 508.305 cv
545.789 508.312 545.844 508.328 545.891 508.344 cv
545.93 508.363 545.957 508.383 545.973 508.406 cv
545.98 508.434 545.988 508.457 545.992 508.48 cv
545.992 516.277 li
547.598 516.277 li
547.633 516.281 547.668 516.289 547.699 516.309 cv
547.73 516.332 547.754 516.363 547.777 516.398 cv
547.793 516.437 547.809 516.484 547.824 516.543 cv
547.832 516.605 547.84 516.68 547.844 516.758 cv
cp
f
555.281 514.699 mo
555.277 514.852 555.254 514.973 555.211 515.059 cv
555.164 515.148 555.102 515.191 555.02 515.187 cv
554.02 515.187 li
554.02 517.051 li
554.02 517.09 554.008 517.121 553.992 517.145 cv
553.969 517.172 553.938 517.191 553.895 517.211 cv
553.844 517.227 553.781 517.238 553.711 517.25 cv
553.633 517.258 553.539 517.262 553.422 517.266 cv
553.305 517.262 553.207 517.258 553.137 517.25 cv
553.059 517.238 553 517.227 552.957 517.211 cv
552.91 517.191 552.879 517.172 552.863 517.145 cv
552.844 517.121 552.836 517.09 552.84 517.051 cv
552.84 515.187 li
549.211 515.187 li
549.152 515.191 549.109 515.184 549.074 515.168 cv
549.039 515.156 549.004 515.129 548.977 515.09 cv
548.945 515.055 548.926 515.004 548.914 514.934 cv
548.902 514.867 548.898 514.777 548.898 514.664 cv
548.898 514.582 548.898 514.504 548.906 514.434 cv
548.906 514.363 548.918 514.301 548.934 514.246 cv
548.945 514.191 548.961 514.137 548.988 514.082 cv
549.008 514.027 549.035 513.973 549.07 513.91 cv
552.23 508.523 li
552.25 508.488 552.285 508.457 552.332 508.43 cv
552.375 508.402 552.43 508.379 552.504 508.359 cv
552.57 508.344 552.656 508.332 552.762 508.32 cv
552.863 508.316 552.984 508.312 553.125 508.309 cv
553.273 508.312 553.41 508.316 553.527 508.328 cv
553.641 508.34 553.73 508.355 553.805 508.371 cv
553.871 508.391 553.926 508.414 553.965 508.445 cv
554 508.477 554.02 508.512 554.02 508.551 cv
554.02 514.215 li
555.02 514.215 li
555.094 514.219 555.156 514.258 555.207 514.336 cv
555.254 514.418 555.277 514.539 555.281 514.699 cv
cp
552.84 509.348 mo
552.828 509.348 li
549.977 514.215 li
552.84 514.215 li
cp
f
620.586 516.758 mo
620.582 516.848 620.574 516.918 620.563 516.977 cv
620.547 517.039 620.527 517.09 620.508 517.121 cv
620.484 517.16 620.461 517.184 620.43 517.199 cv
620.398 517.215 620.367 517.223 620.34 517.223 cv
615.703 517.223 li
615.668 517.223 615.641 517.215 615.613 517.199 cv
615.586 517.184 615.559 517.16 615.535 517.121 cv
615.508 517.09 615.488 517.039 615.477 516.977 cv
615.461 516.918 615.453 516.848 615.457 516.758 cv
615.453 516.68 615.461 516.605 615.477 516.543 cv
615.488 516.484 615.504 516.437 615.527 516.398 cv
615.543 516.363 615.57 516.332 615.602 516.309 cv
615.633 516.289 615.664 516.281 615.703 516.277 cv
617.555 516.277 li
617.555 509.531 li
615.84 510.551 li
615.75 510.602 615.68 510.629 615.633 510.637 cv
615.578 510.645 615.535 510.637 615.504 510.605 cv
615.469 510.578 615.449 510.527 615.438 510.457 cv
615.426 510.391 615.418 510.305 615.422 510.195 cv
615.418 510.121 615.422 510.055 615.434 509.996 cv
615.438 509.945 615.449 509.898 615.465 509.859 cv
615.477 509.824 615.496 509.793 615.52 509.766 cv
615.543 509.738 615.574 509.711 615.621 509.684 cv
617.664 508.371 li
617.68 508.359 617.699 508.348 617.73 508.34 cv
617.754 508.332 617.789 508.324 617.836 508.312 cv
617.875 508.305 617.926 508.297 617.98 508.293 cv
618.035 508.293 618.102 508.293 618.188 508.289 cv
618.293 508.293 618.387 508.297 618.461 508.305 cv
618.531 508.312 618.586 508.328 618.633 508.344 cv
618.672 508.363 618.699 508.383 618.715 508.406 cv
618.723 508.434 618.73 508.457 618.734 508.48 cv
618.734 516.277 li
620.34 516.277 li
620.375 516.281 620.41 516.289 620.441 516.309 cv
620.473 516.332 620.496 516.363 620.52 516.398 cv
620.535 516.437 620.551 516.484 620.566 516.543 cv
620.574 516.605 620.582 516.68 620.586 516.758 cv
cp
f
627.871 514.352 mo
627.871 514.742 627.809 515.121 627.691 515.48 cv
627.566 515.848 627.383 516.164 627.141 516.437 cv
626.891 516.715 626.578 516.937 626.203 517.102 cv
625.82 517.27 625.375 517.352 624.859 517.352 cv
624.488 517.352 624.16 517.309 623.879 517.215 cv
623.594 517.129 623.348 516.996 623.137 516.824 cv
622.926 516.656 622.75 516.449 622.613 516.203 cv
622.473 515.957 622.359 515.676 622.277 515.359 cv
622.191 515.047 622.133 514.703 622.098 514.324 cv
622.059 513.953 622.039 513.551 622.043 513.117 cv
622.039 512.738 622.059 512.355 622.102 511.965 cv
622.141 511.582 622.215 511.207 622.32 510.84 cv
622.426 510.48 622.57 510.141 622.75 509.824 cv
622.93 509.508 623.156 509.23 623.43 508.996 cv
623.703 508.762 624.027 508.574 624.406 508.434 cv
624.785 508.297 625.227 508.23 625.73 508.227 cv
625.898 508.23 626.07 508.238 626.242 508.258 cv
626.414 508.281 626.574 508.312 626.723 508.344 cv
626.871 508.383 626.992 508.418 627.094 508.457 cv
627.191 508.496 627.258 508.531 627.293 508.555 cv
627.32 508.582 627.344 508.609 627.363 508.637 cv
627.379 508.668 627.395 508.699 627.402 508.734 cv
627.41 508.77 627.414 508.809 627.422 508.852 cv
627.422 508.895 627.426 508.949 627.43 509.012 cv
627.426 509.098 627.426 509.168 627.426 509.223 cv
627.422 509.285 627.41 509.332 627.398 509.367 cv
627.379 509.406 627.359 509.434 627.336 509.449 cv
627.309 509.469 627.277 509.477 627.238 509.477 cv
627.188 509.477 627.117 509.461 627.031 509.43 cv
626.941 509.398 626.836 509.363 626.715 509.32 cv
626.59 509.285 626.441 509.25 626.266 509.215 cv
626.09 509.187 625.887 509.172 625.656 509.168 cv
625.227 509.172 624.859 509.258 624.555 509.43 cv
624.25 509.602 624 509.836 623.805 510.129 cv
623.609 510.422 623.465 510.762 623.375 511.145 cv
623.277 511.535 623.223 511.937 623.215 512.355 cv
623.332 512.289 623.469 512.223 623.617 512.152 cv
623.766 512.086 623.926 512.023 624.102 511.965 cv
624.277 511.914 624.465 511.867 624.66 511.832 cv
624.855 511.801 625.066 511.785 625.293 511.781 cv
625.77 511.785 626.172 511.852 626.504 511.977 cv
626.832 512.109 627.098 512.289 627.305 512.52 cv
627.504 512.75 627.648 513.02 627.738 513.332 cv
627.824 513.645 627.871 513.984 627.871 514.352 cv
cp
626.676 514.461 mo
626.676 514.199 626.648 513.957 626.598 513.738 cv
626.543 513.523 626.453 513.34 626.332 513.184 cv
626.207 513.035 626.043 512.918 625.84 512.836 cv
625.629 512.754 625.375 512.711 625.078 512.711 cv
624.906 512.711 624.738 512.727 624.57 512.758 cv
624.398 512.789 624.234 512.832 624.078 512.879 cv
623.918 512.934 623.77 512.996 623.629 513.066 cv
623.484 513.141 623.352 513.215 623.234 513.293 cv
623.23 513.887 623.27 514.383 623.348 514.777 cv
623.422 515.176 623.531 515.492 623.676 515.73 cv
623.82 515.973 624 516.145 624.215 516.246 cv
624.43 516.352 624.68 516.402 624.969 516.398 cv
625.258 516.402 625.512 516.348 625.727 516.234 cv
625.941 516.129 626.117 515.98 626.262 515.793 cv
626.402 515.609 626.508 515.402 626.574 515.172 cv
626.641 514.941 626.676 514.707 626.676 514.461 cv
cp
f
268.711 536.156 mo
268.707 536.262 268.691 536.352 268.656 536.422 cv
268.621 536.5 268.574 536.559 268.52 536.602 cv
268.461 536.652 268.398 536.687 268.332 536.703 cv
268.258 536.727 268.188 536.734 268.125 536.734 cv
267.68 536.734 li
267.539 536.734 267.418 536.723 267.313 536.691 cv
267.207 536.668 267.109 536.613 267.016 536.535 cv
266.922 536.461 266.828 536.359 266.734 536.227 cv
266.641 536.098 266.539 535.934 266.434 535.73 cv
263.359 529.992 li
263.195 529.699 263.031 529.391 262.871 529.062 cv
262.703 528.742 262.551 528.426 262.414 528.117 cv
262.398 528.117 li
262.406 528.492 262.414 528.875 262.422 529.262 cv
262.426 529.652 262.426 530.039 262.43 530.422 cv
262.43 536.508 li
262.426 536.547 262.414 536.582 262.395 536.613 cv
262.371 536.648 262.336 536.676 262.285 536.691 cv
262.23 536.711 262.16 536.723 262.078 536.738 cv
261.992 536.75 261.887 536.758 261.758 536.758 cv
261.621 536.758 261.512 536.75 261.43 536.738 cv
261.344 536.723 261.277 536.711 261.23 536.691 cv
261.18 536.676 261.145 536.648 261.121 536.613 cv
261.098 536.582 261.086 536.547 261.09 536.508 cv
261.09 527.203 li
261.086 526.996 261.145 526.848 261.266 526.758 cv
261.383 526.672 261.512 526.629 261.652 526.625 cv
262.313 526.625 li
262.465 526.629 262.598 526.641 262.703 526.664 cv
262.805 526.691 262.898 526.734 262.984 526.793 cv
263.066 526.855 263.145 526.937 263.227 527.043 cv
263.301 527.152 263.383 527.289 263.469 527.445 cv
265.836 531.871 li
265.98 532.145 266.121 532.41 266.258 532.664 cv
266.391 532.922 266.52 533.176 266.648 533.422 cv
266.77 533.676 266.895 533.922 267.02 534.16 cv
267.141 534.402 267.262 534.645 267.387 534.887 cv
267.395 534.887 li
267.383 534.48 267.375 534.051 267.375 533.605 cv
267.367 533.16 267.367 532.734 267.371 532.324 cv
267.371 526.852 li
267.367 526.816 267.379 526.781 267.402 526.75 cv
267.426 526.719 267.461 526.691 267.516 526.668 cv
267.563 526.645 267.633 526.629 267.719 526.617 cv
267.805 526.609 267.914 526.605 268.055 526.602 cv
268.172 526.605 268.277 526.609 268.367 526.617 cv
268.453 526.629 268.52 526.645 268.57 526.668 cv
268.617 526.691 268.652 526.719 268.676 526.75 cv
268.695 526.781 268.707 526.816 268.711 526.852 cv
cp
f
277.258 536.516 mo
277.254 536.562 277.246 536.598 277.23 536.621 cv
277.211 536.652 277.176 536.676 277.133 536.695 cv
277.086 536.715 277.027 536.727 276.953 536.742 cv
276.875 536.75 276.781 536.758 276.676 536.758 cv
276.551 536.758 276.453 536.75 276.383 536.742 cv
276.305 536.727 276.246 536.715 276.203 536.695 cv
276.156 536.676 276.125 536.652 276.113 536.621 cv
276.094 536.598 276.086 536.562 276.09 536.516 cv
276.09 535.59 li
275.688 536.035 275.293 536.355 274.906 536.555 cv
274.512 536.758 274.117 536.855 273.723 536.859 cv
273.25 536.855 272.855 536.781 272.539 536.625 cv
272.219 536.473 271.961 536.262 271.766 535.992 cv
271.563 535.727 271.422 535.414 271.34 535.055 cv
271.25 534.699 271.207 534.266 271.211 533.758 cv
271.211 529.504 li
271.207 529.465 271.215 529.43 271.238 529.398 cv
271.254 529.371 271.289 529.348 271.344 529.32 cv
271.391 529.301 271.461 529.285 271.547 529.273 cv
271.629 529.27 271.73 529.266 271.859 529.262 cv
271.98 529.266 272.086 529.27 272.172 529.273 cv
272.254 529.285 272.32 529.301 272.367 529.32 cv
272.414 529.348 272.449 529.371 272.473 529.398 cv
272.492 529.43 272.5 529.465 272.504 529.504 cv
272.504 533.586 li
272.5 534 272.531 534.328 272.594 534.574 cv
272.652 534.82 272.742 535.031 272.867 535.203 cv
272.984 535.383 273.141 535.516 273.332 535.609 cv
273.516 535.707 273.734 535.758 273.984 535.754 cv
274.305 535.758 274.625 535.641 274.949 535.41 cv
275.266 535.184 275.605 534.848 275.965 534.402 cv
275.965 529.504 li
275.965 529.465 275.973 529.43 275.992 529.398 cv
276.008 529.371 276.043 529.348 276.098 529.32 cv
276.148 529.301 276.215 529.285 276.297 529.273 cv
276.375 529.27 276.48 529.266 276.613 529.262 cv
276.734 529.266 276.84 529.27 276.926 529.273 cv
277.008 529.285 277.07 529.301 277.117 529.32 cv
277.16 529.348 277.195 529.371 277.223 529.398 cv
277.242 529.43 277.254 529.465 277.258 529.504 cv
cp
f
290.035 536.516 mo
290.031 536.562 290.023 536.598 290.004 536.621 cv
289.98 536.652 289.945 536.676 289.902 536.695 cv
289.852 536.715 289.785 536.727 289.707 536.742 cv
289.621 536.75 289.52 536.758 289.395 536.758 cv
289.262 536.758 289.152 536.75 289.074 536.742 cv
288.988 536.727 288.922 536.715 288.875 536.695 cv
288.82 536.676 288.785 536.652 288.77 536.621 cv
288.746 536.598 288.738 536.562 288.738 536.516 cv
288.738 532.254 li
288.738 531.961 288.711 531.691 288.66 531.445 cv
288.605 531.203 288.523 530.992 288.41 530.812 cv
288.297 530.637 288.152 530.5 287.977 530.406 cv
287.797 530.312 287.586 530.266 287.352 530.266 cv
287.055 530.266 286.758 530.383 286.461 530.609 cv
286.156 530.844 285.828 531.176 285.473 531.613 cv
285.473 536.516 li
285.469 536.562 285.457 536.598 285.441 536.621 cv
285.418 536.652 285.387 536.676 285.34 536.695 cv
285.289 536.715 285.223 536.727 285.141 536.742 cv
285.055 536.75 284.949 536.758 284.828 536.758 cv
284.707 536.758 284.605 536.75 284.52 536.742 cv
284.434 536.727 284.363 536.715 284.316 536.695 cv
284.262 536.676 284.23 536.652 284.215 536.621 cv
284.195 536.598 284.184 536.562 284.188 536.516 cv
284.188 532.254 li
284.184 531.961 284.156 531.691 284.102 531.445 cv
284.043 531.203 283.957 530.992 283.844 530.812 cv
283.73 530.637 283.586 530.5 283.414 530.406 cv
283.234 530.312 283.027 530.266 282.793 530.266 cv
282.492 530.266 282.195 530.383 281.895 530.609 cv
281.594 530.844 281.266 531.176 280.914 531.613 cv
280.914 536.516 li
280.91 536.562 280.898 536.598 280.883 536.621 cv
280.859 536.652 280.828 536.676 280.781 536.695 cv
280.734 536.715 280.668 536.727 280.59 536.742 cv
280.504 536.75 280.398 536.758 280.27 536.758 cv
280.141 536.758 280.035 536.75 279.957 536.742 cv
279.871 536.727 279.805 536.715 279.758 536.695 cv
279.703 536.676 279.672 536.652 279.656 536.621 cv
279.637 536.598 279.625 536.562 279.629 536.516 cv
279.629 529.504 li
279.625 529.465 279.633 529.43 279.652 529.398 cv
279.664 529.371 279.695 529.348 279.746 529.32 cv
279.789 529.301 279.852 529.285 279.926 529.273 cv
279.996 529.27 280.09 529.266 280.215 529.262 cv
280.324 529.266 280.422 529.27 280.5 529.273 cv
280.574 529.285 280.633 529.301 280.676 529.32 cv
280.715 529.348 280.742 529.371 280.762 529.398 cv
280.777 529.43 280.785 529.465 280.789 529.504 cv
280.789 530.43 li
281.18 529.988 281.563 529.668 281.938 529.461 cv
282.305 529.258 282.684 529.152 283.066 529.152 cv
283.355 529.152 283.613 529.187 283.848 529.254 cv
284.074 529.324 284.281 529.418 284.461 529.539 cv
284.637 529.66 284.785 529.805 284.914 529.973 cv
285.035 530.145 285.141 530.336 285.227 530.539 cv
285.457 530.289 285.68 530.074 285.891 529.895 cv
286.102 529.723 286.305 529.578 286.5 529.465 cv
286.695 529.359 286.883 529.281 287.066 529.227 cv
287.25 529.18 287.438 529.152 287.625 529.152 cv
288.078 529.152 288.457 529.234 288.762 529.391 cv
289.066 529.555 289.313 529.766 289.508 530.027 cv
289.695 530.293 289.832 530.602 289.914 530.957 cv
289.992 531.312 290.031 531.687 290.035 532.082 cv
cp
f
298.836 532.914 mo
298.832 533.523 298.766 534.074 298.637 534.559 cv
298.5 535.047 298.305 535.461 298.051 535.801 cv
297.793 536.145 297.477 536.406 297.105 536.586 cv
296.73 536.77 296.305 536.855 295.82 536.859 cv
295.594 536.855 295.387 536.836 295.199 536.793 cv
295.012 536.746 294.824 536.676 294.645 536.578 cv
294.457 536.48 294.277 536.355 294.098 536.203 cv
293.914 536.055 293.723 535.875 293.523 535.66 cv
293.523 536.516 li
293.523 536.562 293.512 536.598 293.492 536.625 cv
293.469 536.66 293.434 536.684 293.391 536.699 cv
293.34 536.715 293.281 536.727 293.215 536.742 cv
293.141 536.75 293.051 536.758 292.945 536.758 cv
292.836 536.758 292.75 536.75 292.68 536.742 cv
292.605 536.727 292.543 536.715 292.5 536.699 cv
292.449 536.684 292.418 536.66 292.406 536.625 cv
292.387 536.598 292.379 536.562 292.383 536.516 cv
292.383 526.105 li
292.379 526.066 292.391 526.031 292.41 525.996 cv
292.426 525.969 292.457 525.941 292.512 525.918 cv
292.559 525.898 292.625 525.883 292.711 525.871 cv
292.789 525.863 292.895 525.859 293.023 525.855 cv
293.152 525.859 293.258 525.863 293.344 525.871 cv
293.422 525.883 293.488 525.898 293.535 525.918 cv
293.582 525.941 293.613 525.969 293.637 525.996 cv
293.652 526.031 293.664 526.066 293.668 526.105 cv
293.668 530.305 li
293.875 530.094 294.078 529.914 294.273 529.77 cv
294.469 529.625 294.656 529.508 294.844 529.414 cv
295.027 529.328 295.215 529.262 295.406 529.215 cv
295.59 529.176 295.789 529.152 296 529.152 cv
296.504 529.152 296.938 529.254 297.305 529.457 cv
297.664 529.66 297.957 529.934 298.184 530.27 cv
298.406 530.613 298.574 531.012 298.68 531.469 cv
298.781 531.926 298.832 532.406 298.836 532.914 cv
cp
297.504 533.062 mo
297.5 532.707 297.473 532.359 297.422 532.02 cv
297.363 531.684 297.27 531.387 297.133 531.125 cv
296.996 530.867 296.816 530.656 296.594 530.496 cv
296.367 530.34 296.086 530.262 295.754 530.258 cv
295.586 530.262 295.422 530.285 295.262 530.328 cv
295.098 530.379 294.934 530.457 294.766 530.562 cv
294.598 530.676 294.422 530.816 294.246 530.984 cv
294.063 531.16 293.871 531.375 293.668 531.629 cv
293.668 534.426 li
294.023 534.859 294.363 535.191 294.688 535.414 cv
295.012 535.645 295.348 535.758 295.699 535.754 cv
296.02 535.758 296.297 535.68 296.531 535.52 cv
296.758 535.367 296.945 535.16 297.09 534.898 cv
297.234 534.645 297.34 534.355 297.406 534.035 cv
297.469 533.719 297.5 533.395 297.504 533.062 cv
cp
f
306.746 532.707 mo
306.742 532.91 306.691 533.051 306.594 533.137 cv
306.488 533.223 306.371 533.266 306.246 533.266 cv
301.629 533.266 li
301.625 533.656 301.664 534.008 301.746 534.32 cv
301.82 534.633 301.953 534.902 302.137 535.121 cv
302.316 535.348 302.551 535.52 302.848 535.637 cv
303.137 535.762 303.496 535.82 303.922 535.816 cv
304.254 535.82 304.551 535.793 304.813 535.734 cv
305.074 535.684 305.301 535.621 305.492 535.551 cv
305.68 535.484 305.836 535.426 305.961 535.367 cv
306.082 535.316 306.176 535.289 306.238 535.285 cv
306.273 535.289 306.305 535.297 306.336 535.312 cv
306.363 535.332 306.387 535.359 306.406 535.395 cv
306.418 535.434 306.43 535.484 306.441 535.547 cv
306.445 535.613 306.449 535.691 306.453 535.785 cv
306.449 535.855 306.445 535.914 306.445 535.961 cv
306.438 536.008 306.434 536.051 306.426 536.09 cv
306.418 536.129 306.402 536.164 306.387 536.195 cv
306.363 536.227 306.34 536.258 306.316 536.285 cv
306.285 536.316 306.203 536.363 306.063 536.426 cv
305.922 536.492 305.738 536.555 305.516 536.617 cv
305.289 536.68 305.031 536.734 304.738 536.785 cv
304.445 536.832 304.133 536.855 303.801 536.859 cv
303.223 536.855 302.715 536.777 302.285 536.617 cv
301.848 536.457 301.484 536.219 301.191 535.902 cv
300.891 535.586 300.668 535.191 300.52 534.711 cv
300.371 534.234 300.297 533.676 300.297 533.039 cv
300.297 532.441 300.371 531.902 300.527 531.418 cv
300.68 530.941 300.906 530.531 301.203 530.195 cv
301.496 529.859 301.852 529.602 302.266 529.422 cv
302.68 529.242 303.145 529.152 303.66 529.152 cv
304.211 529.152 304.68 529.242 305.066 529.418 cv
305.453 529.598 305.77 529.836 306.023 530.133 cv
306.27 530.434 306.453 530.785 306.57 531.184 cv
306.684 531.59 306.742 532.02 306.746 532.473 cv
cp
305.453 532.324 mo
305.469 531.648 305.316 531.117 305 530.734 cv
304.684 530.352 304.215 530.16 303.598 530.156 cv
303.273 530.16 302.992 530.219 302.754 530.336 cv
302.512 530.457 302.313 530.617 302.152 530.812 cv
301.988 531.012 301.863 531.242 301.777 531.504 cv
301.688 531.766 301.637 532.039 301.629 532.324 cv
cp
f
312.813 529.961 mo
312.809 530.078 312.809 530.176 312.805 530.25 cv
312.797 530.332 312.785 530.395 312.773 530.434 cv
312.754 530.48 312.734 530.512 312.715 530.535 cv
312.688 530.559 312.656 530.57 312.617 530.57 cv
312.574 530.57 312.523 530.559 312.465 530.535 cv
312.402 530.512 312.332 530.488 312.262 530.465 cv
312.184 530.441 312.102 530.422 312.008 530.398 cv
311.914 530.383 311.813 530.371 311.703 530.367 cv
311.57 530.371 311.441 530.398 311.32 530.445 cv
311.195 530.5 311.066 530.586 310.93 530.703 cv
310.789 530.828 310.645 530.984 310.496 531.18 cv
310.344 531.375 310.176 531.617 309.996 531.902 cv
309.996 536.516 li
309.992 536.562 309.98 536.598 309.965 536.621 cv
309.941 536.652 309.91 536.676 309.863 536.695 cv
309.816 536.715 309.75 536.727 309.672 536.742 cv
309.586 536.75 309.48 536.758 309.352 536.758 cv
309.223 536.758 309.117 536.75 309.039 536.742 cv
308.953 536.727 308.887 536.715 308.84 536.695 cv
308.785 536.676 308.754 536.652 308.738 536.621 cv
308.719 536.598 308.707 536.562 308.711 536.516 cv
308.711 529.504 li
308.707 529.465 308.715 529.43 308.734 529.398 cv
308.746 529.371 308.777 529.348 308.828 529.32 cv
308.871 529.301 308.934 529.285 309.008 529.273 cv
309.078 529.27 309.172 529.266 309.297 529.262 cv
309.406 529.266 309.504 529.27 309.582 529.273 cv
309.656 529.285 309.715 529.301 309.758 529.32 cv
309.797 529.348 309.824 529.371 309.844 529.398 cv
309.859 529.43 309.867 529.465 309.871 529.504 cv
309.871 530.523 li
310.059 530.242 310.242 530.016 310.414 529.84 cv
310.582 529.664 310.742 529.523 310.895 529.422 cv
311.043 529.32 311.191 529.25 311.34 529.211 cv
311.488 529.172 311.637 529.152 311.789 529.152 cv
311.855 529.152 311.934 529.156 312.02 529.164 cv
312.105 529.172 312.195 529.187 312.289 529.207 cv
312.383 529.23 312.465 529.254 312.543 529.277 cv
312.613 529.305 312.668 529.332 312.703 529.355 cv
312.73 529.387 312.75 529.41 312.766 529.43 cv
312.773 529.457 312.785 529.488 312.793 529.52 cv
312.801 529.559 312.805 529.609 312.809 529.68 cv
312.809 529.75 312.809 529.844 312.813 529.961 cv
cp
f
324.57 532.93 mo
324.566 533.508 324.492 534.035 324.344 534.512 cv
324.191 534.996 323.965 535.41 323.668 535.754 cv
323.367 536.105 322.992 536.375 322.547 536.566 cv
322.094 536.762 321.574 536.855 320.984 536.859 cv
320.406 536.855 319.902 536.773 319.477 536.602 cv
319.047 536.434 318.691 536.184 318.406 535.855 cv
318.117 535.527 317.902 535.133 317.766 534.664 cv
317.625 534.199 317.559 533.668 317.559 533.07 cv
317.559 532.504 317.629 531.977 317.777 531.496 cv
317.922 531.016 318.148 530.602 318.449 530.25 cv
318.746 529.902 319.117 529.633 319.566 529.441 cv
320.012 529.25 320.535 529.152 321.133 529.152 cv
321.711 529.152 322.211 529.238 322.641 529.41 cv
323.066 529.582 323.426 529.832 323.711 530.16 cv
323.996 530.488 324.211 530.887 324.355 531.352 cv
324.496 531.82 324.566 532.348 324.57 532.93 cv
cp
323.238 533.016 mo
323.234 532.641 323.199 532.281 323.133 531.941 cv
323.059 531.605 322.941 531.312 322.781 531.055 cv
322.617 530.805 322.398 530.602 322.121 530.449 cv
321.84 530.305 321.492 530.23 321.082 530.227 cv
320.695 530.23 320.367 530.297 320.094 530.43 cv
319.816 530.566 319.59 530.758 319.414 531.004 cv
319.234 531.25 319.102 531.543 319.02 531.879 cv
318.93 532.219 318.887 532.586 318.891 532.984 cv
318.887 533.371 318.922 533.734 318.996 534.07 cv
319.063 534.41 319.18 534.703 319.348 534.953 cv
319.512 535.207 319.734 535.41 320.012 535.555 cv
320.289 535.707 320.637 535.781 321.051 535.777 cv
321.426 535.781 321.754 535.711 322.035 535.574 cv
322.313 535.441 322.539 535.254 322.719 535.004 cv
322.895 534.762 323.023 534.469 323.109 534.133 cv
323.191 533.797 323.234 533.426 323.238 533.016 cv
cp
f
330.301 526.617 mo
330.297 526.719 330.293 526.797 330.285 526.855 cv
330.273 526.918 330.262 526.969 330.25 527 cv
330.234 527.039 330.219 527.062 330.199 527.074 cv
330.176 527.09 330.148 527.098 330.121 527.094 cv
330.082 527.098 330.035 527.086 329.984 527.059 cv
329.926 527.039 329.859 527.012 329.785 526.98 cv
329.703 526.953 329.613 526.926 329.508 526.902 cv
329.398 526.879 329.273 526.867 329.141 526.867 cv
328.945 526.867 328.781 526.898 328.648 526.961 cv
328.508 527.023 328.398 527.121 328.32 527.254 cv
328.234 527.387 328.176 527.559 328.141 527.77 cv
328.102 527.98 328.082 528.238 328.086 528.535 cv
328.086 529.301 li
329.652 529.301 li
329.691 529.305 329.727 529.312 329.758 529.328 cv
329.785 529.348 329.813 529.379 329.836 529.422 cv
329.859 529.469 329.875 529.527 329.891 529.59 cv
329.898 529.66 329.906 529.742 329.91 529.836 cv
329.906 530.027 329.883 530.16 329.84 530.242 cv
329.789 530.328 329.727 530.371 329.652 530.367 cv
328.086 530.367 li
328.086 536.516 li
328.082 536.562 328.074 536.598 328.055 536.621 cv
328.031 536.652 327.996 536.676 327.949 536.695 cv
327.898 536.715 327.832 536.727 327.75 536.742 cv
327.664 536.75 327.559 536.758 327.441 536.758 cv
327.313 536.758 327.211 536.75 327.129 536.742 cv
327.043 536.727 326.977 536.715 326.93 536.695 cv
326.879 536.676 326.844 536.652 326.824 536.621 cv
326.801 536.598 326.789 536.562 326.793 536.516 cv
326.793 530.367 li
325.805 530.367 li
325.719 530.371 325.656 530.328 325.617 530.242 cv
325.574 530.16 325.551 530.027 325.555 529.836 cv
325.551 529.742 325.559 529.66 325.57 529.59 cv
325.578 529.527 325.594 529.469 325.617 529.422 cv
325.637 529.379 325.66 529.348 325.695 529.328 cv
325.723 529.312 325.762 529.305 325.805 529.301 cv
326.793 529.301 li
326.793 528.574 li
326.789 528.09 326.836 527.672 326.93 527.316 cv
327.02 526.969 327.156 526.68 327.344 526.457 cv
327.527 526.234 327.762 526.07 328.051 525.961 cv
328.332 525.855 328.668 525.801 329.055 525.801 cv
329.23 525.801 329.406 525.82 329.582 525.852 cv
329.75 525.891 329.883 525.926 329.98 525.961 cv
330.07 526.004 330.133 526.039 330.168 526.066 cv
330.195 526.102 330.223 526.141 330.246 526.187 cv
330.266 526.238 330.277 526.301 330.289 526.367 cv
330.293 526.441 330.297 526.523 330.301 526.617 cv
cp
f
340.5 533.883 mo
340.496 534.355 340.41 534.777 340.238 535.145 cv
340.063 535.52 339.82 535.832 339.512 536.086 cv
339.203 536.344 338.84 536.535 338.422 536.664 cv
338 536.793 337.551 536.855 337.07 536.859 cv
336.73 536.855 336.414 536.828 336.129 536.773 cv
335.84 536.715 335.586 536.648 335.359 536.562 cv
335.133 536.484 334.941 536.398 334.789 536.305 cv
334.633 536.219 334.527 536.141 334.469 536.078 cv
334.41 536.016 334.367 535.937 334.34 535.844 cv
334.309 535.75 334.293 535.621 334.297 535.457 cv
334.293 535.344 334.297 535.25 334.313 535.172 cv
334.32 535.098 334.336 535.035 334.359 534.988 cv
334.375 534.941 334.402 534.91 334.438 534.891 cv
334.465 534.875 334.5 534.867 334.543 534.863 cv
334.613 534.867 334.715 534.91 334.852 534.996 cv
334.98 535.086 335.152 535.184 335.363 535.285 cv
335.57 535.395 335.82 535.492 336.113 535.578 cv
336.406 535.672 336.746 535.715 337.133 535.715 cv
337.422 535.715 337.688 535.676 337.93 535.598 cv
338.168 535.52 338.375 535.41 338.555 535.266 cv
338.727 535.125 338.863 534.949 338.957 534.738 cv
339.051 534.531 339.098 534.297 339.098 534.031 cv
339.098 533.75 339.031 533.504 338.902 533.297 cv
338.77 533.098 338.598 532.922 338.387 532.766 cv
338.172 532.617 337.93 532.477 337.656 532.344 cv
337.383 532.219 337.102 532.086 336.82 531.953 cv
336.531 531.82 336.254 531.676 335.984 531.512 cv
335.715 531.355 335.473 531.164 335.262 530.945 cv
335.043 530.727 334.871 530.473 334.742 530.176 cv
334.605 529.887 334.539 529.535 334.543 529.121 cv
334.539 528.703 334.617 528.328 334.773 527.996 cv
334.926 527.668 335.137 527.391 335.414 527.164 cv
335.684 526.945 336.008 526.773 336.387 526.656 cv
336.762 526.539 337.172 526.48 337.609 526.48 cv
337.828 526.48 338.051 526.5 338.281 526.539 cv
338.504 526.578 338.715 526.629 338.918 526.691 cv
339.113 526.758 339.293 526.832 339.453 526.91 cv
339.605 526.992 339.707 527.059 339.762 527.105 cv
339.809 527.16 339.844 527.199 339.859 527.223 cv
339.875 527.254 339.887 527.289 339.898 527.332 cv
339.906 527.379 339.914 527.434 339.922 527.492 cv
339.926 527.559 339.93 527.637 339.93 527.734 cv
339.93 527.828 339.926 527.914 339.918 527.984 cv
339.91 528.062 339.898 528.121 339.883 528.168 cv
339.867 528.215 339.844 528.25 339.816 528.273 cv
339.785 528.297 339.754 528.309 339.719 528.309 cv
339.66 528.309 339.57 528.273 339.449 528.203 cv
339.324 528.133 339.172 528.051 339 527.957 cv
338.82 527.867 338.613 527.785 338.375 527.707 cv
338.129 527.633 337.859 527.594 337.563 527.594 cv
337.281 527.594 337.035 527.633 336.828 527.707 cv
336.617 527.785 336.445 527.887 336.313 528.008 cv
336.176 528.133 336.074 528.277 336.008 528.449 cv
335.941 528.621 335.91 528.805 335.91 528.996 cv
335.91 529.281 335.973 529.523 336.102 529.723 cv
336.23 529.926 336.402 530.105 336.621 530.258 cv
336.832 530.418 337.078 530.559 337.355 530.687 cv
337.629 530.82 337.91 530.953 338.199 531.082 cv
338.484 531.215 338.766 531.359 339.039 531.516 cv
339.313 531.676 339.559 531.863 339.777 532.078 cv
339.992 532.297 340.164 532.551 340.301 532.844 cv
340.43 533.137 340.496 533.484 340.5 533.883 cv
cp
f
348.266 536.516 mo
348.262 536.562 348.254 536.598 348.238 536.621 cv
348.219 536.652 348.184 536.676 348.141 536.695 cv
348.094 536.715 348.035 536.727 347.961 536.742 cv
347.883 536.75 347.789 536.758 347.684 536.758 cv
347.559 536.758 347.461 536.75 347.391 536.742 cv
347.313 536.727 347.254 536.715 347.211 536.695 cv
347.164 536.676 347.133 536.652 347.121 536.621 cv
347.102 536.598 347.094 536.562 347.098 536.516 cv
347.098 535.59 li
346.695 536.035 346.301 536.355 345.914 536.555 cv
345.52 536.758 345.125 536.855 344.73 536.859 cv
344.258 536.855 343.863 536.781 343.547 536.625 cv
343.227 536.473 342.969 536.262 342.773 535.992 cv
342.57 535.727 342.43 535.414 342.348 535.055 cv
342.258 534.699 342.215 534.266 342.219 533.758 cv
342.219 529.504 li
342.215 529.465 342.223 529.43 342.246 529.398 cv
342.262 529.371 342.297 529.348 342.352 529.32 cv
342.398 529.301 342.469 529.285 342.555 529.273 cv
342.637 529.27 342.738 529.266 342.867 529.262 cv
342.988 529.266 343.094 529.27 343.18 529.273 cv
343.262 529.285 343.328 529.301 343.375 529.32 cv
343.422 529.348 343.457 529.371 343.48 529.398 cv
343.5 529.43 343.508 529.465 343.512 529.504 cv
343.512 533.586 li
343.508 534 343.539 534.328 343.602 534.574 cv
343.66 534.82 343.75 535.031 343.875 535.203 cv
343.992 535.383 344.148 535.516 344.34 535.609 cv
344.523 535.707 344.742 535.758 344.992 535.754 cv
345.313 535.758 345.633 535.641 345.957 535.41 cv
346.273 535.184 346.613 534.848 346.973 534.402 cv
346.973 529.504 li
346.973 529.465 346.98 529.43 347 529.398 cv
347.016 529.371 347.051 529.348 347.105 529.32 cv
347.156 529.301 347.223 529.285 347.305 529.273 cv
347.383 529.27 347.488 529.266 347.621 529.262 cv
347.742 529.266 347.848 529.27 347.934 529.273 cv
348.016 529.285 348.078 529.301 348.125 529.32 cv
348.168 529.348 348.203 529.371 348.23 529.398 cv
348.25 529.43 348.262 529.465 348.266 529.504 cv
cp
f
357.121 532.914 mo
357.117 533.523 357.051 534.074 356.922 534.559 cv
356.785 535.047 356.59 535.461 356.336 535.801 cv
356.078 536.145 355.762 536.406 355.391 536.586 cv
355.016 536.77 354.59 536.855 354.105 536.859 cv
353.879 536.855 353.672 536.836 353.484 536.793 cv
353.297 536.746 353.109 536.676 352.93 536.578 cv
352.742 536.48 352.563 536.355 352.383 536.203 cv
352.199 536.055 352.008 535.875 351.809 535.66 cv
351.809 536.516 li
351.809 536.562 351.797 536.598 351.777 536.625 cv
351.754 536.66 351.719 536.684 351.676 536.699 cv
351.625 536.715 351.566 536.727 351.5 536.742 cv
351.426 536.75 351.336 536.758 351.23 536.758 cv
351.121 536.758 351.035 536.75 350.965 536.742 cv
350.891 536.727 350.828 536.715 350.785 536.699 cv
350.734 536.684 350.703 536.66 350.691 536.625 cv
350.672 536.598 350.664 536.562 350.668 536.516 cv
350.668 526.105 li
350.664 526.066 350.676 526.031 350.695 525.996 cv
350.711 525.969 350.742 525.941 350.797 525.918 cv
350.844 525.898 350.91 525.883 350.996 525.871 cv
351.074 525.863 351.18 525.859 351.309 525.855 cv
351.438 525.859 351.543 525.863 351.629 525.871 cv
351.707 525.883 351.773 525.898 351.82 525.918 cv
351.867 525.941 351.898 525.969 351.922 525.996 cv
351.938 526.031 351.949 526.066 351.953 526.105 cv
351.953 530.305 li
352.16 530.094 352.363 529.914 352.559 529.77 cv
352.754 529.625 352.941 529.508 353.129 529.414 cv
353.313 529.328 353.5 529.262 353.691 529.215 cv
353.875 529.176 354.074 529.152 354.285 529.152 cv
354.789 529.152 355.223 529.254 355.59 529.457 cv
355.949 529.66 356.242 529.934 356.469 530.27 cv
356.691 530.613 356.859 531.012 356.965 531.469 cv
357.066 531.926 357.117 532.406 357.121 532.914 cv
cp
355.789 533.062 mo
355.785 532.707 355.758 532.359 355.707 532.02 cv
355.648 531.684 355.555 531.387 355.418 531.125 cv
355.281 530.867 355.102 530.656 354.879 530.496 cv
354.652 530.34 354.371 530.262 354.039 530.258 cv
353.871 530.262 353.707 530.285 353.547 530.328 cv
353.383 530.379 353.219 530.457 353.051 530.562 cv
352.883 530.676 352.707 530.816 352.531 530.984 cv
352.348 531.16 352.156 531.375 351.953 531.629 cv
351.953 534.426 li
352.309 534.859 352.648 535.191 352.973 535.414 cv
353.297 535.645 353.633 535.758 353.984 535.754 cv
354.305 535.758 354.582 535.68 354.816 535.52 cv
355.043 535.367 355.23 535.16 355.375 534.898 cv
355.52 534.645 355.625 534.355 355.691 534.035 cv
355.754 533.719 355.785 533.395 355.789 533.062 cv
cp
f
362.289 532.777 mo
362.289 532.98 362.266 533.117 362.219 533.195 cv
362.172 533.273 362.102 533.312 362.016 533.312 cv
358.758 533.312 li
358.664 533.312 358.598 533.273 358.551 533.191 cv
358.504 533.113 358.48 532.977 358.48 532.777 cv
358.48 532.582 358.504 532.441 358.551 532.363 cv
358.598 532.285 358.664 532.246 358.758 532.246 cv
362.016 532.246 li
362.055 532.246 362.094 532.254 362.129 532.27 cv
362.16 532.285 362.188 532.316 362.215 532.359 cv
362.234 532.406 362.254 532.461 362.27 532.527 cv
362.281 532.598 362.289 532.684 362.289 532.777 cv
cp
f
365.539 536.508 mo
365.535 536.551 365.527 536.586 365.508 536.617 cv
365.484 536.648 365.445 536.676 365.398 536.691 cv
365.344 536.711 365.277 536.723 365.191 536.738 cv
365.105 536.75 364.996 536.758 364.871 536.758 cv
364.742 536.758 364.637 536.75 364.551 536.738 cv
364.461 536.723 364.391 536.711 364.34 536.691 cv
364.285 536.676 364.25 536.648 364.23 536.617 cv
364.207 536.586 364.195 536.551 364.199 536.508 cv
364.199 526.828 li
364.195 526.789 364.207 526.754 364.234 526.719 cv
364.254 526.691 364.293 526.664 364.352 526.645 cv
364.402 526.629 364.473 526.613 364.563 526.598 cv
364.645 526.586 364.746 526.582 364.871 526.578 cv
364.996 526.582 365.105 526.586 365.191 526.598 cv
365.277 526.613 365.344 526.629 365.398 526.645 cv
365.445 526.664 365.484 526.691 365.508 526.719 cv
365.527 526.754 365.535 526.789 365.539 526.828 cv
cp
f
378.527 536.516 mo
378.523 536.562 378.516 536.598 378.496 536.621 cv
378.473 536.652 378.438 536.676 378.395 536.695 cv
378.344 536.715 378.277 536.727 378.199 536.742 cv
378.113 536.75 378.012 536.758 377.887 536.758 cv
377.754 536.758 377.645 536.75 377.566 536.742 cv
377.48 536.727 377.414 536.715 377.367 536.695 cv
377.313 536.676 377.277 536.652 377.262 536.621 cv
377.238 536.598 377.23 536.562 377.23 536.516 cv
377.23 532.254 li
377.23 531.961 377.203 531.691 377.152 531.445 cv
377.098 531.203 377.016 530.992 376.902 530.812 cv
376.789 530.637 376.645 530.5 376.469 530.406 cv
376.289 530.312 376.078 530.266 375.844 530.266 cv
375.547 530.266 375.25 530.383 374.953 530.609 cv
374.648 530.844 374.32 531.176 373.965 531.613 cv
373.965 536.516 li
373.961 536.562 373.949 536.598 373.934 536.621 cv
373.91 536.652 373.879 536.676 373.832 536.695 cv
373.781 536.715 373.715 536.727 373.633 536.742 cv
373.547 536.75 373.441 536.758 373.32 536.758 cv
373.199 536.758 373.098 536.75 373.012 536.742 cv
372.926 536.727 372.855 536.715 372.809 536.695 cv
372.754 536.676 372.723 536.652 372.707 536.621 cv
372.688 536.598 372.676 536.562 372.68 536.516 cv
372.68 532.254 li
372.676 531.961 372.648 531.691 372.594 531.445 cv
372.535 531.203 372.449 530.992 372.336 530.812 cv
372.223 530.637 372.078 530.5 371.906 530.406 cv
371.727 530.312 371.52 530.266 371.285 530.266 cv
370.984 530.266 370.688 530.383 370.387 530.609 cv
370.086 530.844 369.758 531.176 369.406 531.613 cv
369.406 536.516 li
369.402 536.562 369.391 536.598 369.375 536.621 cv
369.352 536.652 369.32 536.676 369.273 536.695 cv
369.227 536.715 369.16 536.727 369.082 536.742 cv
368.996 536.75 368.891 536.758 368.762 536.758 cv
368.633 536.758 368.527 536.75 368.449 536.742 cv
368.363 536.727 368.297 536.715 368.25 536.695 cv
368.195 536.676 368.164 536.652 368.148 536.621 cv
368.129 536.598 368.117 536.562 368.121 536.516 cv
368.121 529.504 li
368.117 529.465 368.125 529.43 368.145 529.398 cv
368.156 529.371 368.188 529.348 368.238 529.32 cv
368.281 529.301 368.344 529.285 368.418 529.273 cv
368.488 529.27 368.582 529.266 368.707 529.262 cv
368.816 529.266 368.914 529.27 368.992 529.273 cv
369.066 529.285 369.125 529.301 369.168 529.32 cv
369.207 529.348 369.234 529.371 369.254 529.398 cv
369.27 529.43 369.277 529.465 369.281 529.504 cv
369.281 530.43 li
369.672 529.988 370.055 529.668 370.43 529.461 cv
370.797 529.258 371.176 529.152 371.559 529.152 cv
371.848 529.152 372.105 529.187 372.34 529.254 cv
372.566 529.324 372.773 529.418 372.953 529.539 cv
373.129 529.66 373.277 529.805 373.406 529.973 cv
373.527 530.145 373.633 530.336 373.719 530.539 cv
373.949 530.289 374.172 530.074 374.383 529.895 cv
374.594 529.723 374.797 529.578 374.992 529.465 cv
375.188 529.359 375.375 529.281 375.559 529.227 cv
375.742 529.18 375.93 529.152 376.117 529.152 cv
376.57 529.152 376.949 529.234 377.254 529.391 cv
377.559 529.555 377.805 529.766 378 530.027 cv
378.188 530.293 378.324 530.602 378.406 530.957 cv
378.484 531.312 378.523 531.687 378.527 532.082 cv
cp
f
386.16 536.523 mo
386.156 536.586 386.137 536.633 386.098 536.664 cv
386.055 536.695 385.996 536.719 385.926 536.734 cv
385.848 536.75 385.742 536.758 385.605 536.758 cv
385.469 536.758 385.359 536.75 385.281 536.734 cv
385.195 536.719 385.137 536.695 385.105 536.664 cv
385.066 536.633 385.051 536.586 385.055 536.523 cv
385.055 535.824 li
384.746 536.152 384.402 536.406 384.027 536.586 cv
383.648 536.77 383.25 536.855 382.832 536.859 cv
382.457 536.855 382.125 536.809 381.828 536.715 cv
381.531 536.617 381.277 536.48 381.066 536.297 cv
380.855 536.117 380.691 535.895 380.574 535.629 cv
380.457 535.367 380.398 535.066 380.402 534.723 cv
380.398 534.332 380.477 533.988 380.641 533.695 cv
380.797 533.406 381.031 533.164 381.336 532.973 cv
381.637 532.781 382.004 532.637 382.441 532.539 cv
382.875 532.445 383.367 532.398 383.914 532.395 cv
384.883 532.395 li
384.883 531.848 li
384.879 531.578 384.852 531.34 384.797 531.133 cv
384.738 530.926 384.645 530.754 384.52 530.613 cv
384.387 530.477 384.223 530.371 384.023 530.301 cv
383.816 530.23 383.566 530.195 383.277 530.195 cv
382.957 530.195 382.672 530.234 382.422 530.309 cv
382.164 530.387 381.945 530.469 381.758 530.559 cv
381.57 530.652 381.41 530.738 381.285 530.809 cv
381.152 530.887 381.059 530.922 381 530.922 cv
380.957 530.922 380.922 530.914 380.891 530.891 cv
380.859 530.875 380.832 530.844 380.809 530.797 cv
380.785 530.758 380.766 530.703 380.758 530.637 cv
380.742 530.574 380.738 530.504 380.742 530.422 cv
380.738 530.297 380.746 530.191 380.77 530.113 cv
380.785 530.039 380.832 529.969 380.902 529.898 cv
380.973 529.832 381.094 529.754 381.266 529.664 cv
381.438 529.574 381.633 529.492 381.855 529.414 cv
382.078 529.344 382.324 529.281 382.59 529.227 cv
382.855 529.18 383.121 529.152 383.395 529.152 cv
383.895 529.152 384.324 529.211 384.676 529.324 cv
385.027 529.441 385.313 529.609 385.535 529.828 cv
385.75 530.051 385.91 530.324 386.012 530.648 cv
386.109 530.98 386.156 531.363 386.16 531.793 cv
cp
384.883 533.32 mo
383.781 533.32 li
383.426 533.324 383.121 533.355 382.863 533.41 cv
382.602 533.473 382.387 533.559 382.215 533.676 cv
382.043 533.793 381.918 533.934 381.84 534.098 cv
381.758 534.262 381.715 534.449 381.719 534.66 cv
381.715 535.027 381.832 535.32 382.063 535.531 cv
382.293 535.75 382.617 535.855 383.035 535.855 cv
383.371 535.855 383.684 535.77 383.973 535.598 cv
384.262 535.426 384.563 535.164 384.883 534.809 cv
cp
f
394.379 529.82 mo
394.375 530.004 394.352 530.137 394.305 530.215 cv
394.254 530.297 394.191 530.336 394.117 530.336 cv
393.109 530.336 li
393.289 530.523 393.418 530.73 393.492 530.957 cv
393.563 531.184 393.598 531.418 393.602 531.66 cv
393.598 532.066 393.531 532.426 393.406 532.738 cv
393.273 533.051 393.09 533.316 392.848 533.527 cv
392.605 533.746 392.316 533.91 391.988 534.023 cv
391.652 534.141 391.285 534.199 390.883 534.195 cv
390.594 534.199 390.32 534.16 390.066 534.082 cv
389.805 534.008 389.609 533.914 389.473 533.797 cv
389.379 533.895 389.301 534 389.242 534.117 cv
389.18 534.238 389.148 534.375 389.152 534.527 cv
389.148 534.711 389.234 534.863 389.406 534.98 cv
389.574 535.105 389.797 535.168 390.078 535.176 cv
391.91 535.254 li
392.258 535.266 392.574 535.312 392.867 535.398 cv
393.156 535.484 393.41 535.609 393.625 535.766 cv
393.836 535.926 394.004 536.117 394.125 536.348 cv
394.242 536.582 394.301 536.852 394.305 537.156 cv
394.301 537.477 394.234 537.781 394.102 538.074 cv
393.965 538.363 393.758 538.617 393.48 538.84 cv
393.199 539.059 392.844 539.234 392.414 539.363 cv
391.984 539.488 391.477 539.551 390.891 539.555 cv
390.32 539.551 389.836 539.504 389.441 539.41 cv
389.043 539.312 388.719 539.18 388.465 539.016 cv
388.211 538.848 388.027 538.652 387.914 538.422 cv
387.797 538.187 387.738 537.934 387.742 537.668 cv
387.738 537.496 387.758 537.332 387.805 537.172 cv
387.844 537.008 387.906 536.855 387.992 536.711 cv
388.074 536.566 388.184 536.43 388.313 536.293 cv
388.438 536.164 388.582 536.031 388.754 535.902 cv
388.496 535.773 388.309 535.609 388.188 535.41 cv
388.066 535.215 388.008 535.004 388.008 534.77 cv
388.008 534.457 388.07 534.172 388.199 533.922 cv
388.328 533.672 388.488 533.449 388.684 533.25 cv
388.52 533.059 388.395 532.844 388.301 532.602 cv
388.207 532.363 388.16 532.07 388.16 531.723 cv
388.16 531.328 388.227 530.969 388.363 530.648 cv
388.496 530.332 388.684 530.066 388.926 529.848 cv
389.164 529.633 389.449 529.465 389.785 529.344 cv
390.117 529.23 390.484 529.172 390.883 529.168 cv
391.094 529.172 391.293 529.184 391.477 529.203 cv
391.66 529.23 391.832 529.262 391.996 529.301 cv
394.117 529.301 li
394.203 529.305 394.27 529.348 394.313 529.43 cv
394.355 529.52 394.375 529.648 394.379 529.82 cv
cp
392.371 531.668 mo
392.367 531.195 392.234 530.824 391.977 530.551 cv
391.711 530.285 391.34 530.148 390.859 530.148 cv
390.605 530.148 390.387 530.191 390.207 530.273 cv
390.02 530.359 389.867 530.473 389.746 530.617 cv
389.625 530.766 389.535 530.934 389.477 531.121 cv
389.414 531.309 389.383 531.508 389.387 531.715 cv
389.383 532.18 389.516 532.543 389.777 532.809 cv
390.039 533.074 390.406 533.207 390.883 533.203 cv
391.133 533.207 391.352 533.168 391.543 533.082 cv
391.727 533.004 391.883 532.891 392.008 532.75 cv
392.129 532.609 392.219 532.445 392.281 532.254 cv
392.336 532.07 392.367 531.875 392.371 531.668 cv
cp
393.016 537.227 mo
393.012 536.922 392.887 536.691 392.645 536.527 cv
392.395 536.367 392.063 536.277 391.645 536.266 cv
389.828 536.203 li
389.66 536.336 389.523 536.461 389.422 536.574 cv
389.313 536.691 389.23 536.801 389.168 536.91 cv
389.105 537.016 389.063 537.121 389.039 537.227 cv
389.016 537.328 389.004 537.434 389.004 537.543 cv
389.004 537.879 389.172 538.133 389.516 538.312 cv
389.855 538.484 390.336 538.574 390.953 538.574 cv
391.34 538.574 391.664 538.535 391.93 538.461 cv
392.188 538.383 392.398 538.281 392.563 538.16 cv
392.719 538.031 392.836 537.891 392.91 537.73 cv
392.977 537.57 393.012 537.402 393.016 537.227 cv
cp
f
401.941 532.707 mo
401.938 532.91 401.887 533.051 401.789 533.137 cv
401.684 533.223 401.566 533.266 401.441 533.266 cv
396.824 533.266 li
396.82 533.656 396.859 534.008 396.941 534.32 cv
397.016 534.633 397.148 534.902 397.332 535.121 cv
397.512 535.348 397.746 535.52 398.043 535.637 cv
398.332 535.762 398.691 535.82 399.117 535.816 cv
399.449 535.82 399.746 535.793 400.008 535.734 cv
400.27 535.684 400.496 535.621 400.688 535.551 cv
400.875 535.484 401.031 535.426 401.156 535.367 cv
401.277 535.316 401.371 535.289 401.434 535.285 cv
401.469 535.289 401.5 535.297 401.531 535.312 cv
401.559 535.332 401.582 535.359 401.602 535.395 cv
401.613 535.434 401.625 535.484 401.637 535.547 cv
401.641 535.613 401.645 535.691 401.648 535.785 cv
401.645 535.855 401.641 535.914 401.641 535.961 cv
401.633 536.008 401.629 536.051 401.621 536.09 cv
401.613 536.129 401.598 536.164 401.582 536.195 cv
401.559 536.227 401.535 536.258 401.512 536.285 cv
401.48 536.316 401.398 536.363 401.258 536.426 cv
401.117 536.492 400.934 536.555 400.711 536.617 cv
400.484 536.68 400.227 536.734 399.934 536.785 cv
399.641 536.832 399.328 536.855 398.996 536.859 cv
398.418 536.855 397.91 536.777 397.48 536.617 cv
397.043 536.457 396.68 536.219 396.387 535.902 cv
396.086 535.586 395.863 535.191 395.715 534.711 cv
395.566 534.234 395.492 533.676 395.492 533.039 cv
395.492 532.441 395.566 531.902 395.723 531.418 cv
395.875 530.941 396.102 530.531 396.398 530.195 cv
396.691 529.859 397.047 529.602 397.461 529.422 cv
397.875 529.242 398.34 529.152 398.855 529.152 cv
399.406 529.152 399.875 529.242 400.262 529.418 cv
400.648 529.598 400.965 529.836 401.219 530.133 cv
401.465 530.434 401.648 530.785 401.766 531.184 cv
401.879 531.59 401.938 532.02 401.941 532.473 cv
cp
400.648 532.324 mo
400.664 531.648 400.512 531.117 400.195 530.734 cv
399.879 530.352 399.41 530.16 398.793 530.156 cv
398.469 530.16 398.188 530.219 397.949 530.336 cv
397.707 530.457 397.508 530.617 397.348 530.812 cv
397.184 531.012 397.059 531.242 396.973 531.504 cv
396.883 531.766 396.832 532.039 396.824 532.324 cv
cp
f
408.305 534.605 mo
408.301 534.969 408.234 535.289 408.105 535.566 cv
407.973 535.848 407.785 536.082 407.543 536.273 cv
407.297 536.469 407.004 536.613 406.668 536.711 cv
406.328 536.809 405.957 536.855 405.555 536.859 cv
405.301 536.855 405.063 536.836 404.84 536.801 cv
404.613 536.758 404.414 536.711 404.234 536.652 cv
404.055 536.594 403.902 536.531 403.777 536.465 cv
403.652 536.402 403.559 536.344 403.504 536.289 cv
403.445 536.238 403.406 536.168 403.383 536.07 cv
403.355 535.98 403.344 535.852 403.344 535.691 cv
403.344 535.594 403.348 535.512 403.359 535.441 cv
403.367 535.375 403.379 535.32 403.398 535.277 cv
403.41 535.238 403.434 535.207 403.461 535.187 cv
403.488 535.172 403.52 535.164 403.559 535.16 cv
403.613 535.164 403.699 535.199 403.813 535.266 cv
403.922 535.34 404.059 535.418 404.227 535.496 cv
404.387 535.582 404.578 535.656 404.805 535.727 cv
405.023 535.797 405.281 535.832 405.578 535.832 cv
405.793 535.832 405.992 535.809 406.172 535.762 cv
406.348 535.715 406.5 535.648 406.629 535.555 cv
406.758 535.469 406.859 535.352 406.93 535.207 cv
407 535.07 407.035 534.902 407.035 534.707 cv
407.035 534.512 406.984 534.348 406.883 534.211 cv
406.781 534.078 406.645 533.957 406.48 533.852 cv
406.313 533.75 406.129 533.66 405.922 533.574 cv
405.711 533.496 405.496 533.41 405.277 533.32 cv
405.059 533.234 404.844 533.133 404.633 533.02 cv
404.422 532.91 404.23 532.777 404.066 532.613 cv
403.895 532.457 403.762 532.262 403.664 532.035 cv
403.559 531.812 403.508 531.547 403.512 531.234 cv
403.508 530.961 403.563 530.695 403.672 530.441 cv
403.777 530.191 403.938 529.973 404.152 529.781 cv
404.363 529.594 404.629 529.441 404.949 529.324 cv
405.27 529.211 405.641 529.152 406.07 529.152 cv
406.254 529.152 406.441 529.168 406.629 529.199 cv
406.813 529.23 406.98 529.27 407.137 529.316 cv
407.285 529.363 407.414 529.414 407.523 529.469 cv
407.625 529.523 407.707 529.574 407.766 529.613 cv
407.816 529.66 407.852 529.695 407.875 529.723 cv
407.891 529.754 407.906 529.789 407.914 529.824 cv
407.922 529.867 407.93 529.914 407.938 529.969 cv
407.945 530.027 407.949 530.098 407.949 530.18 cv
407.949 530.27 407.945 530.348 407.938 530.41 cv
407.93 530.48 407.914 530.531 407.898 530.57 cv
407.875 530.613 407.855 530.645 407.832 530.66 cv
407.805 530.68 407.773 530.687 407.746 530.687 cv
407.695 530.687 407.629 530.66 407.543 530.602 cv
407.453 530.547 407.34 530.484 407.199 530.418 cv
407.059 530.355 406.891 530.297 406.703 530.234 cv
406.512 530.18 406.297 530.148 406.055 530.148 cv
405.832 530.148 405.641 530.176 405.477 530.223 cv
405.309 530.277 405.172 530.348 405.066 530.434 cv
404.961 530.527 404.879 530.633 404.828 530.758 cv
404.77 530.883 404.742 531.02 404.746 531.164 cv
404.742 531.367 404.793 531.535 404.898 531.672 cv
405 531.812 405.137 531.934 405.305 532.035 cv
405.469 532.141 405.66 532.234 405.875 532.316 cv
406.086 532.402 406.301 532.488 406.523 532.574 cv
406.742 532.664 406.961 532.766 407.18 532.871 cv
407.395 532.98 407.586 533.109 407.754 533.266 cv
407.918 533.422 408.051 533.609 408.152 533.828 cv
408.25 534.047 408.301 534.309 408.305 534.605 cv
cp
f
163.598 11.539 mo
163.594 12.379 163.492 13.129 163.285 13.785 cv
163.078 14.449 162.77 15.008 162.359 15.465 cv
161.949 15.926 161.441 16.277 160.836 16.516 cv
160.23 16.758 159.531 16.875 158.738 16.879 cv
157.949 16.875 157.262 16.773 156.68 16.57 cv
156.094 16.367 155.605 16.055 155.219 15.633 cv
154.828 15.211 154.539 14.676 154.344 14.027 cv
154.148 13.379 154.051 12.609 154.055 11.719 cv
154.051 10.906 154.152 10.176 154.363 9.52002 cv
154.566 8.87097 154.875 8.31598 155.289 7.85498 cv
155.695 7.40198 156.203 7.05103 156.813 6.80499 cv
157.414 6.56201 158.117 6.44098 158.922 6.43701 cv
159.684 6.44098 160.359 6.54303 160.945 6.742 cv
161.527 6.94501 162.016 7.25403 162.41 7.67603 cv
162.801 8.09802 163.098 8.62903 163.297 9.27002 cv
163.496 9.90997 163.594 10.668 163.598 11.539 cv
cp
161.449 11.648 mo
161.445 11.121 161.402 10.641 161.324 10.207 cv
161.238 9.77301 161.098 9.40198 160.898 9.09003 cv
160.695 8.78101 160.43 8.54303 160.098 8.375 cv
159.766 8.20697 159.352 8.12097 158.855 8.12097 cv
158.348 8.12097 157.926 8.21899 157.59 8.40601 cv
157.254 8.59802 156.98 8.84802 156.773 9.164 cv
156.563 9.48401 156.414 9.85498 156.332 10.277 cv
156.242 10.699 156.199 11.148 156.203 11.617 cv
156.199 12.172 156.242 12.668 156.328 13.105 cv
156.41 13.547 156.551 13.922 156.75 14.23 cv
156.945 14.543 157.211 14.777 157.543 14.941 cv
157.875 15.105 158.293 15.187 158.801 15.187 cv
159.301 15.187 159.719 15.094 160.059 14.906 cv
160.395 14.719 160.668 14.465 160.879 14.145 cv
161.082 13.824 161.23 13.449 161.32 13.02 cv
161.402 12.59 161.445 12.133 161.449 11.648 cv
cp
f
171.598 9.47699 mo
171.594 9.50403 171.594 9.53497 171.594 9.57001 cv
171.59 9.60901 171.586 9.64801 171.578 9.69098 cv
171.57 9.73401 171.559 9.78497 171.547 9.84003 cv
171.531 9.89801 171.516 9.96503 171.496 10.035 cv
169.41 16.324 li
169.383 16.414 169.348 16.488 169.305 16.539 cv
169.258 16.598 169.184 16.641 169.086 16.668 cv
168.98 16.699 168.844 16.715 168.672 16.73 cv
168.496 16.738 168.27 16.746 167.992 16.746 cv
167.715 16.746 167.488 16.738 167.316 16.727 cv
167.141 16.711 167.004 16.691 166.906 16.66 cv
166.805 16.633 166.734 16.59 166.691 16.531 cv
166.645 16.48 166.609 16.41 166.586 16.324 cv
164.5 10.035 li
164.469 9.93402 164.441 9.84003 164.426 9.758 cv
164.402 9.67603 164.395 9.617 164.395 9.578 cv
164.391 9.547 164.387 9.51202 164.391 9.47699 cv
164.387 9.42603 164.402 9.37903 164.434 9.34003 cv
164.461 9.30103 164.512 9.27002 164.586 9.242 cv
164.656 9.21899 164.754 9.19897 164.883 9.18701 cv
165.008 9.17999 165.168 9.17603 165.363 9.172 cv
165.574 9.17603 165.746 9.18402 165.879 9.19098 cv
166.004 9.20697 166.109 9.22302 166.188 9.24597 cv
166.262 9.27002 166.313 9.30499 166.348 9.34802 cv
166.375 9.39502 166.402 9.44897 166.426 9.508 cv
168.008 14.609 li
168.055 14.805 li
168.102 14.609 li
169.66 9.508 li
169.672 9.44897 169.695 9.39502 169.73 9.34802 cv
169.762 9.30499 169.816 9.27002 169.891 9.24597 cv
169.961 9.22302 170.059 9.20697 170.184 9.19098 cv
170.305 9.18402 170.465 9.17603 170.664 9.172 cv
170.855 9.17603 171.012 9.17999 171.133 9.18701 cv
171.254 9.19897 171.348 9.21899 171.418 9.242 cv
171.484 9.27002 171.531 9.30103 171.559 9.34003 cv
171.582 9.37903 171.594 9.42603 171.598 9.47699 cv
cp
f
179.074 12.758 mo
179.07 12.996 179.02 13.172 178.914 13.285 cv
178.805 13.402 178.656 13.461 178.477 13.457 cv
174.242 13.457 li
174.238 13.758 174.273 14.027 174.348 14.266 cv
174.414 14.508 174.527 14.711 174.684 14.879 cv
174.836 15.051 175.031 15.18 175.273 15.266 cv
175.512 15.355 175.801 15.398 176.145 15.398 cv
176.484 15.398 176.785 15.375 177.047 15.324 cv
177.305 15.277 177.531 15.223 177.723 15.16 cv
177.91 15.102 178.066 15.047 178.195 14.996 cv
178.316 14.949 178.418 14.926 178.5 14.922 cv
178.543 14.926 178.582 14.934 178.617 14.949 cv
178.645 14.969 178.672 15 178.691 15.047 cv
178.711 15.094 178.723 15.16 178.734 15.246 cv
178.738 15.332 178.742 15.441 178.746 15.57 cv
178.742 15.687 178.742 15.785 178.738 15.863 cv
178.73 15.945 178.723 16.012 178.715 16.066 cv
178.703 16.125 178.688 16.176 178.668 16.211 cv
178.648 16.254 178.621 16.289 178.59 16.324 cv
178.555 16.363 178.461 16.414 178.313 16.473 cv
178.156 16.539 177.965 16.602 177.734 16.656 cv
177.496 16.719 177.227 16.766 176.93 16.812 cv
176.625 16.852 176.305 16.875 175.965 16.879 cv
175.344 16.875 174.801 16.801 174.34 16.645 cv
173.871 16.492 173.484 16.254 173.176 15.937 cv
172.859 15.621 172.625 15.223 172.477 14.738 cv
172.32 14.258 172.246 13.691 172.25 13.035 cv
172.246 12.422 172.324 11.863 172.488 11.367 cv
172.645 10.871 172.879 10.453 173.191 10.105 cv
173.496 9.76202 173.871 9.49597 174.309 9.31201 cv
174.746 9.133 175.238 9.04303 175.793 9.039 cv
176.371 9.04303 176.871 9.12903 177.285 9.297 cv
177.699 9.47302 178.035 9.711 178.301 10.012 cv
178.563 10.316 178.758 10.676 178.887 11.09 cv
179.008 11.508 179.07 11.957 179.074 12.445 cv
cp
177.172 12.195 mo
177.184 11.645 177.074 11.211 176.84 10.898 cv
176.605 10.586 176.238 10.43 175.746 10.426 cv
175.496 10.43 175.281 10.477 175.098 10.566 cv
174.91 10.664 174.758 10.789 174.637 10.945 cv
174.512 11.105 174.418 11.293 174.355 11.508 cv
174.289 11.723 174.25 11.953 174.242 12.195 cv
cp
f
185.148 10.129 mo
185.148 10.32 185.141 10.473 185.133 10.59 cv
185.117 10.711 185.102 10.805 185.086 10.871 cv
185.063 10.941 185.035 10.988 185.004 11.012 cv
184.965 11.039 184.922 11.051 184.875 11.051 cv
184.828 11.051 184.781 11.043 184.734 11.023 cv
184.68 11.008 184.621 10.988 184.559 10.965 cv
184.488 10.945 184.418 10.926 184.344 10.906 cv
184.262 10.891 184.176 10.883 184.086 10.879 cv
183.973 10.883 183.863 10.902 183.758 10.945 cv
183.648 10.992 183.535 11.062 183.422 11.152 cv
183.301 11.246 183.18 11.371 183.055 11.523 cv
182.926 11.684 182.789 11.875 182.645 12.102 cv
182.645 16.434 li
182.641 16.488 182.625 16.531 182.598 16.57 cv
182.563 16.609 182.508 16.645 182.438 16.668 cv
182.359 16.695 182.262 16.711 182.137 16.727 cv
182.012 16.738 181.852 16.746 181.664 16.746 cv
181.469 16.746 181.313 16.738 181.188 16.727 cv
181.063 16.711 180.961 16.695 180.887 16.668 cv
180.809 16.645 180.754 16.609 180.727 16.57 cv
180.691 16.531 180.676 16.488 180.68 16.434 cv
180.68 9.48401 li
180.676 9.43701 180.691 9.39099 180.719 9.34802 cv
180.742 9.31201 180.789 9.28101 180.859 9.25 cv
180.926 9.22699 181.012 9.20697 181.121 9.19098 cv
181.227 9.18402 181.359 9.17603 181.523 9.172 cv
181.688 9.17603 181.824 9.18402 181.934 9.19098 cv
182.039 9.20697 182.125 9.22699 182.188 9.25 cv
182.246 9.28101 182.289 9.31201 182.316 9.34802 cv
182.34 9.39099 182.352 9.43701 182.355 9.48401 cv
182.355 10.348 li
182.535 10.09 182.707 9.87903 182.871 9.70697 cv
183.027 9.54303 183.184 9.40601 183.332 9.30499 cv
183.477 9.20697 183.621 9.14099 183.766 9.09802 cv
183.91 9.06201 184.055 9.04303 184.203 9.039 cv
184.27 9.04303 184.344 9.047 184.422 9.05103 cv
184.5 9.06201 184.578 9.07397 184.664 9.09003 cv
184.742 9.10901 184.816 9.12903 184.883 9.15198 cv
184.941 9.17603 184.988 9.203 185.02 9.22699 cv
185.047 9.258 185.066 9.28497 185.082 9.31201 cv
185.094 9.34802 185.105 9.39099 185.117 9.44098 cv
185.125 9.5 185.133 9.58197 185.141 9.68701 cv
185.145 9.797 185.148 9.94501 185.148 10.129 cv
cp
f
191.906 16.457 mo
191.902 16.535 191.875 16.59 191.828 16.629 cv
191.773 16.672 191.691 16.699 191.582 16.719 cv
191.465 16.734 191.301 16.746 191.086 16.746 cv
190.848 16.746 190.676 16.734 190.574 16.719 cv
190.465 16.699 190.391 16.672 190.352 16.629 cv
190.305 16.59 190.285 16.535 190.285 16.457 cv
190.285 15.906 li
189.996 16.215 189.668 16.453 189.305 16.621 cv
188.938 16.793 188.531 16.875 188.086 16.879 cv
187.715 16.875 187.375 16.828 187.066 16.734 cv
186.758 16.641 186.492 16.5 186.266 16.305 cv
186.039 16.117 185.863 15.883 185.738 15.602 cv
185.613 15.324 185.551 14.996 185.555 14.617 cv
185.551 14.219 185.629 13.867 185.789 13.562 cv
185.945 13.266 186.184 13.02 186.5 12.824 cv
186.813 12.633 187.203 12.488 187.672 12.391 cv
188.141 12.301 188.684 12.254 189.301 12.25 cv
189.98 12.25 li
189.98 11.828 li
189.98 11.613 189.957 11.422 189.914 11.258 cv
189.867 11.098 189.793 10.961 189.695 10.848 cv
189.59 10.742 189.457 10.66 189.289 10.605 cv
189.117 10.555 188.906 10.531 188.664 10.527 cv
188.332 10.531 188.039 10.566 187.785 10.637 cv
187.523 10.711 187.297 10.793 187.102 10.879 cv
186.902 10.973 186.738 11.051 186.609 11.121 cv
186.473 11.195 186.363 11.234 186.285 11.23 cv
186.223 11.234 186.172 11.215 186.133 11.176 cv
186.086 11.141 186.051 11.09 186.023 11.02 cv
185.992 10.957 185.969 10.871 185.957 10.77 cv
185.938 10.672 185.93 10.562 185.934 10.441 cv
185.93 10.281 185.945 10.156 185.973 10.059 cv
185.996 9.96899 186.043 9.883 186.121 9.80499 cv
186.191 9.72998 186.32 9.64801 186.504 9.55902 cv
186.684 9.46899 186.895 9.383 187.141 9.30499 cv
187.383 9.22699 187.652 9.164 187.941 9.11298 cv
188.23 9.06598 188.527 9.04303 188.836 9.039 cv
189.379 9.04303 189.844 9.09399 190.23 9.19897 cv
190.617 9.30902 190.938 9.47302 191.188 9.69098 cv
191.438 9.90997 191.617 10.195 191.734 10.543 cv
191.844 10.895 191.902 11.309 191.906 11.781 cv
cp
189.98 13.48 mo
189.23 13.48 li
188.914 13.484 188.645 13.508 188.422 13.551 cv
188.195 13.602 188.012 13.672 187.875 13.762 cv
187.73 13.859 187.629 13.973 187.566 14.102 cv
187.5 14.238 187.465 14.387 187.469 14.555 cv
187.465 14.848 187.559 15.078 187.746 15.242 cv
187.93 15.41 188.188 15.492 188.516 15.492 cv
188.789 15.492 189.039 15.422 189.273 15.281 cv
189.5 15.141 189.738 14.937 189.98 14.664 cv
cp
f
195.828 16.434 mo
195.824 16.488 195.809 16.531 195.781 16.57 cv
195.746 16.609 195.691 16.645 195.621 16.668 cv
195.543 16.695 195.445 16.711 195.32 16.727 cv
195.195 16.738 195.035 16.746 194.848 16.746 cv
194.652 16.746 194.496 16.738 194.371 16.727 cv
194.246 16.711 194.145 16.695 194.07 16.668 cv
193.992 16.645 193.938 16.609 193.91 16.57 cv
193.875 16.531 193.859 16.488 193.863 16.434 cv
193.863 6.18701 li
193.859 6.13702 193.875 6.09003 193.91 6.047 cv
193.938 6.008 193.992 5.97302 194.07 5.94098 cv
194.145 5.914 194.246 5.89502 194.371 5.875 cv
194.496 5.86298 194.652 5.85498 194.848 5.85199 cv
195.035 5.85498 195.195 5.86298 195.32 5.875 cv
195.445 5.89502 195.543 5.914 195.621 5.94098 cv
195.691 5.97302 195.746 6.008 195.781 6.047 cv
195.809 6.09003 195.824 6.13702 195.828 6.18701 cv
cp
f
199.801 16.434 mo
199.797 16.488 199.781 16.531 199.754 16.57 cv
199.719 16.609 199.664 16.645 199.594 16.668 cv
199.516 16.695 199.418 16.711 199.293 16.727 cv
199.168 16.738 199.008 16.746 198.82 16.746 cv
198.625 16.746 198.469 16.738 198.344 16.727 cv
198.219 16.711 198.117 16.695 198.043 16.668 cv
197.965 16.645 197.91 16.609 197.883 16.57 cv
197.848 16.531 197.832 16.488 197.836 16.434 cv
197.836 6.18701 li
197.832 6.13702 197.848 6.09003 197.883 6.047 cv
197.91 6.008 197.965 5.97302 198.043 5.94098 cv
198.117 5.914 198.219 5.89502 198.344 5.875 cv
198.469 5.86298 198.625 5.85498 198.82 5.85199 cv
199.008 5.85498 199.168 5.86298 199.293 5.875 cv
199.418 5.89502 199.516 5.914 199.594 5.94098 cv
199.664 5.97302 199.719 6.008 199.754 6.047 cv
199.781 6.09003 199.797 6.13702 199.801 6.18701 cv
cp
f
211.465 13.676 mo
211.461 14.207 211.363 14.672 211.168 15.07 cv
210.969 15.473 210.703 15.809 210.367 16.074 cv
210.027 16.344 209.629 16.543 209.18 16.676 cv
208.727 16.809 208.246 16.875 207.734 16.879 cv
207.383 16.875 207.059 16.848 206.762 16.793 cv
206.461 16.734 206.199 16.668 205.973 16.586 cv
205.742 16.508 205.551 16.422 205.398 16.332 cv
205.246 16.246 205.137 16.168 205.07 16.098 cv
205 16.031 204.949 15.934 204.926 15.809 cv
204.895 15.684 204.883 15.5 204.883 15.258 cv
204.883 15.098 204.887 14.965 204.898 14.852 cv
204.906 14.746 204.922 14.656 204.949 14.586 cv
204.969 14.52 205 14.473 205.043 14.441 cv
205.078 14.418 205.125 14.402 205.176 14.398 cv
205.246 14.402 205.348 14.445 205.484 14.527 cv
205.613 14.617 205.785 14.711 205.996 14.812 cv
206.203 14.918 206.449 15.016 206.738 15.098 cv
207.023 15.187 207.359 15.23 207.742 15.227 cv
207.992 15.23 208.215 15.199 208.41 15.137 cv
208.605 15.078 208.773 14.992 208.914 14.883 cv
209.051 14.773 209.156 14.641 209.23 14.48 cv
209.301 14.32 209.336 14.141 209.34 13.941 cv
209.336 13.715 209.273 13.52 209.152 13.352 cv
209.023 13.191 208.859 13.047 208.664 12.918 cv
208.461 12.793 208.234 12.672 207.98 12.559 cv
207.727 12.449 207.465 12.332 207.195 12.203 cv
206.922 12.082 206.66 11.937 206.406 11.777 cv
206.152 11.621 205.926 11.434 205.727 11.211 cv
205.523 10.992 205.359 10.73 205.238 10.426 cv
205.113 10.125 205.051 9.76599 205.055 9.34399 cv
205.051 8.86298 205.141 8.43701 205.32 8.07001 cv
205.496 7.70697 205.738 7.40198 206.047 7.15601 cv
206.348 6.91803 206.707 6.73798 207.121 6.617 cv
207.535 6.5 207.973 6.44098 208.434 6.43701 cv
208.672 6.44098 208.91 6.45697 209.152 6.492 cv
209.391 6.53101 209.613 6.58197 209.82 6.64099 cv
210.027 6.703 210.211 6.77301 210.375 6.84802 cv
210.531 6.92999 210.641 6.992 210.695 7.04303 cv
210.746 7.09802 210.781 7.14502 210.801 7.17603 cv
210.816 7.21503 210.832 7.26202 210.848 7.32001 cv
210.859 7.383 210.867 7.45697 210.875 7.547 cv
210.879 7.64099 210.883 7.75403 210.883 7.88702 cv
210.883 8.039 210.879 8.16803 210.871 8.27002 cv
210.863 8.375 210.848 8.461 210.832 8.52301 cv
210.809 8.59399 210.785 8.64099 210.754 8.672 cv
210.719 8.703 210.672 8.71899 210.617 8.71899 cv
210.559 8.71899 210.469 8.68402 210.344 8.60901 cv
210.219 8.539 210.063 8.461 209.883 8.37097 cv
209.699 8.289 209.492 8.211 209.254 8.14099 cv
209.012 8.07397 208.746 8.039 208.465 8.03497 cv
208.238 8.039 208.047 8.06598 207.883 8.117 cv
207.715 8.172 207.574 8.24597 207.465 8.34003 cv
207.352 8.43701 207.27 8.55499 207.215 8.68701 cv
207.16 8.828 207.133 8.96899 207.133 9.117 cv
207.133 9.34399 207.191 9.539 207.316 9.69897 cv
207.434 9.86298 207.598 10.008 207.809 10.133 cv
208.012 10.262 208.246 10.383 208.504 10.492 cv
208.762 10.609 209.027 10.727 209.301 10.848 cv
209.57 10.977 209.832 11.117 210.094 11.273 cv
210.352 11.43 210.586 11.621 210.789 11.84 cv
210.992 12.066 211.152 12.324 211.277 12.621 cv
211.398 12.918 211.461 13.27 211.465 13.676 cv
cp
f
219.918 12.855 mo
219.918 13.477 219.852 14.035 219.719 14.531 cv
219.586 15.027 219.391 15.449 219.137 15.797 cv
218.883 16.145 218.566 16.414 218.188 16.598 cv
217.805 16.785 217.371 16.875 216.887 16.879 cv
216.68 16.875 216.492 16.855 216.328 16.82 cv
216.156 16.777 215.992 16.719 215.836 16.641 cv
215.676 16.562 215.52 16.465 215.367 16.34 cv
215.207 16.223 215.047 16.082 214.883 15.918 cv
214.883 19.191 li
214.879 19.238 214.863 19.285 214.836 19.332 cv
214.801 19.371 214.746 19.406 214.676 19.437 cv
214.598 19.461 214.5 19.484 214.375 19.504 cv
214.25 19.516 214.09 19.523 213.902 19.527 cv
213.707 19.523 213.551 19.516 213.426 19.504 cv
213.301 19.484 213.199 19.461 213.125 19.437 cv
213.047 19.406 212.992 19.371 212.965 19.332 cv
212.93 19.285 212.914 19.238 212.918 19.191 cv
212.918 9.48401 li
212.914 9.43701 212.93 9.39099 212.957 9.34802 cv
212.98 9.31201 213.023 9.28101 213.094 9.25 cv
213.156 9.22699 213.242 9.20697 213.352 9.19098 cv
213.453 9.18402 213.59 9.17603 213.754 9.172 cv
213.91 9.17603 214.039 9.18402 214.145 9.19098 cv
214.25 9.20697 214.336 9.22699 214.402 9.25 cv
214.465 9.28101 214.512 9.31201 214.539 9.34802 cv
214.563 9.39099 214.574 9.43701 214.578 9.48401 cv
214.578 10.301 li
214.777 10.094 214.977 9.914 215.176 9.75403 cv
215.367 9.59802 215.566 9.46503 215.77 9.35498 cv
215.973 9.25403 216.18 9.172 216.398 9.117 cv
216.609 9.06598 216.84 9.04303 217.09 9.039 cv
217.594 9.04303 218.027 9.14099 218.391 9.34003 cv
218.746 9.54303 219.039 9.82001 219.266 10.164 cv
219.488 10.516 219.652 10.918 219.762 11.379 cv
219.863 11.84 219.918 12.332 219.918 12.855 cv
cp
217.875 12.996 mo
217.871 12.703 217.852 12.422 217.809 12.145 cv
217.762 11.875 217.684 11.633 217.582 11.418 cv
217.473 11.207 217.332 11.035 217.16 10.906 cv
216.984 10.781 216.77 10.719 216.512 10.715 cv
216.379 10.719 216.25 10.738 216.125 10.773 cv
215.996 10.816 215.867 10.879 215.734 10.965 cv
215.602 11.055 215.465 11.168 215.328 11.309 cv
215.184 11.449 215.035 11.625 214.883 11.828 cv
214.883 14.121 li
215.156 14.469 215.418 14.738 215.668 14.926 cv
215.914 15.117 216.176 15.211 216.449 15.211 cv
216.703 15.211 216.918 15.148 217.102 15.016 cv
217.277 14.891 217.426 14.719 217.539 14.508 cv
217.652 14.297 217.734 14.059 217.793 13.793 cv
217.844 13.527 217.871 13.262 217.875 12.996 cv
cp
f
227.914 12.758 mo
227.91 12.996 227.859 13.172 227.754 13.285 cv
227.645 13.402 227.496 13.461 227.316 13.457 cv
223.082 13.457 li
223.078 13.758 223.113 14.027 223.188 14.266 cv
223.254 14.508 223.367 14.711 223.523 14.879 cv
223.676 15.051 223.871 15.18 224.113 15.266 cv
224.352 15.355 224.641 15.398 224.984 15.398 cv
225.324 15.398 225.625 15.375 225.887 15.324 cv
226.145 15.277 226.371 15.223 226.563 15.16 cv
226.75 15.102 226.906 15.047 227.035 14.996 cv
227.156 14.949 227.258 14.926 227.34 14.922 cv
227.383 14.926 227.422 14.934 227.457 14.949 cv
227.484 14.969 227.512 15 227.531 15.047 cv
227.551 15.094 227.563 15.16 227.574 15.246 cv
227.578 15.332 227.582 15.441 227.586 15.57 cv
227.582 15.687 227.582 15.785 227.578 15.863 cv
227.57 15.945 227.563 16.012 227.555 16.066 cv
227.543 16.125 227.527 16.176 227.508 16.211 cv
227.488 16.254 227.461 16.289 227.43 16.324 cv
227.395 16.363 227.301 16.414 227.152 16.473 cv
226.996 16.539 226.805 16.602 226.574 16.656 cv
226.336 16.719 226.066 16.766 225.77 16.812 cv
225.465 16.852 225.145 16.875 224.805 16.879 cv
224.184 16.875 223.641 16.801 223.18 16.645 cv
222.711 16.492 222.324 16.254 222.016 15.937 cv
221.699 15.621 221.465 15.223 221.316 14.738 cv
221.16 14.258 221.086 13.691 221.09 13.035 cv
221.086 12.422 221.164 11.863 221.328 11.367 cv
221.484 10.871 221.719 10.453 222.031 10.105 cv
222.336 9.76202 222.711 9.49597 223.148 9.31201 cv
223.586 9.133 224.078 9.04303 224.633 9.039 cv
225.211 9.04303 225.711 9.12903 226.125 9.297 cv
226.539 9.47302 226.875 9.711 227.141 10.012 cv
227.402 10.316 227.598 10.676 227.727 11.09 cv
227.848 11.508 227.91 11.957 227.914 12.445 cv
cp
226.012 12.195 mo
226.023 11.645 225.914 11.211 225.68 10.898 cv
225.445 10.586 225.078 10.43 224.586 10.426 cv
224.336 10.43 224.121 10.477 223.938 10.566 cv
223.75 10.664 223.598 10.789 223.477 10.945 cv
223.352 11.105 223.258 11.293 223.195 11.508 cv
223.129 11.723 223.09 11.953 223.082 12.195 cv
cp
f
235.941 12.758 mo
235.938 12.996 235.887 13.172 235.781 13.285 cv
235.672 13.402 235.523 13.461 235.344 13.457 cv
231.109 13.457 li
231.105 13.758 231.141 14.027 231.215 14.266 cv
231.281 14.508 231.395 14.711 231.551 14.879 cv
231.703 15.051 231.898 15.18 232.141 15.266 cv
232.379 15.355 232.668 15.398 233.012 15.398 cv
233.352 15.398 233.652 15.375 233.914 15.324 cv
234.172 15.277 234.398 15.223 234.59 15.16 cv
234.777 15.102 234.934 15.047 235.063 14.996 cv
235.184 14.949 235.285 14.926 235.367 14.922 cv
235.41 14.926 235.449 14.934 235.484 14.949 cv
235.512 14.969 235.539 15 235.559 15.047 cv
235.578 15.094 235.59 15.16 235.602 15.246 cv
235.605 15.332 235.609 15.441 235.613 15.57 cv
235.609 15.687 235.609 15.785 235.605 15.863 cv
235.598 15.945 235.59 16.012 235.582 16.066 cv
235.57 16.125 235.555 16.176 235.535 16.211 cv
235.516 16.254 235.488 16.289 235.457 16.324 cv
235.422 16.363 235.328 16.414 235.18 16.473 cv
235.023 16.539 234.832 16.602 234.602 16.656 cv
234.363 16.719 234.094 16.766 233.797 16.812 cv
233.492 16.852 233.172 16.875 232.832 16.879 cv
232.211 16.875 231.668 16.801 231.207 16.645 cv
230.738 16.492 230.352 16.254 230.043 15.937 cv
229.727 15.621 229.492 15.223 229.344 14.738 cv
229.188 14.258 229.113 13.691 229.117 13.035 cv
229.113 12.422 229.191 11.863 229.355 11.367 cv
229.512 10.871 229.746 10.453 230.059 10.105 cv
230.363 9.76202 230.738 9.49597 231.176 9.31201 cv
231.613 9.133 232.105 9.04303 232.66 9.039 cv
233.238 9.04303 233.738 9.12903 234.152 9.297 cv
234.566 9.47302 234.902 9.711 235.168 10.012 cv
235.43 10.316 235.625 10.676 235.754 11.09 cv
235.875 11.508 235.938 11.957 235.941 12.445 cv
cp
234.039 12.195 mo
234.051 11.645 233.941 11.211 233.707 10.898 cv
233.473 10.586 233.105 10.43 232.613 10.426 cv
232.363 10.43 232.148 10.477 231.965 10.566 cv
231.777 10.664 231.625 10.789 231.504 10.945 cv
231.379 11.105 231.285 11.293 231.223 11.508 cv
231.156 11.723 231.117 11.953 231.109 12.195 cv
cp
f
244.141 16.434 mo
244.137 16.496 244.125 16.543 244.102 16.578 cv
244.074 16.621 244.027 16.652 243.969 16.676 cv
243.902 16.699 243.82 16.715 243.715 16.73 cv
243.609 16.738 243.477 16.746 243.324 16.746 cv
243.152 16.746 243.02 16.738 242.918 16.73 cv
242.813 16.715 242.727 16.699 242.664 16.676 cv
242.598 16.652 242.551 16.621 242.523 16.578 cv
242.492 16.543 242.477 16.496 242.48 16.434 cv
242.48 15.664 li
242.121 16.051 241.746 16.348 241.355 16.559 cv
240.957 16.77 240.523 16.875 240.051 16.879 cv
239.516 16.875 239.066 16.773 238.703 16.57 cv
238.336 16.367 238.039 16.094 237.809 15.742 cv
237.574 15.398 237.406 14.992 237.305 14.523 cv
237.203 14.062 237.152 13.57 237.152 13.051 cv
237.152 12.437 237.215 11.883 237.348 11.387 cv
237.477 10.895 237.672 10.473 237.93 10.125 cv
238.184 9.77698 238.5 9.51202 238.879 9.32001 cv
239.258 9.13702 239.695 9.04303 240.191 9.039 cv
240.578 9.04303 240.93 9.12097 241.25 9.27698 cv
241.563 9.43701 241.879 9.66803 242.191 9.97302 cv
242.191 6.211 li
242.191 6.15997 242.203 6.11298 242.234 6.07001 cv
242.258 6.03101 242.313 5.99597 242.391 5.96503 cv
242.465 5.93701 242.563 5.91803 242.691 5.89801 cv
242.813 5.88702 242.973 5.87903 243.168 5.875 cv
243.359 5.87903 243.516 5.88702 243.641 5.89801 cv
243.762 5.91803 243.863 5.93701 243.938 5.96503 cv
244.008 5.99597 244.059 6.03101 244.094 6.07001 cv
244.121 6.11298 244.137 6.15997 244.141 6.211 cv
cp
242.191 11.789 mo
241.91 11.437 241.641 11.168 241.387 10.98 cv
241.125 10.793 240.855 10.699 240.578 10.699 cv
240.324 10.699 240.105 10.766 239.922 10.891 cv
239.734 11.023 239.586 11.191 239.477 11.402 cv
239.363 11.613 239.281 11.852 239.227 12.113 cv
239.172 12.379 239.145 12.648 239.145 12.918 cv
239.145 13.215 239.168 13.496 239.215 13.77 cv
239.262 14.047 239.336 14.293 239.445 14.508 cv
239.547 14.723 239.691 14.895 239.871 15.023 cv
240.047 15.156 240.27 15.223 240.539 15.219 cv
240.672 15.223 240.801 15.203 240.934 15.16 cv
241.059 15.125 241.191 15.062 241.324 14.969 cv
241.457 14.883 241.594 14.766 241.734 14.621 cv
241.875 14.48 242.027 14.305 242.191 14.098 cv
cp
f
252.711 16.434 mo
252.707 16.488 252.695 16.531 252.672 16.57 cv
252.645 16.609 252.598 16.645 252.535 16.668 cv
252.469 16.695 252.383 16.711 252.277 16.727 cv
252.172 16.738 252.039 16.746 251.879 16.746 cv
251.703 16.746 251.563 16.738 251.461 16.727 cv
251.352 16.711 251.27 16.695 251.207 16.668 cv
251.145 16.645 251.098 16.609 251.074 16.57 cv
251.043 16.531 251.031 16.488 251.035 16.434 cv
251.035 15.633 li
250.648 16.047 250.258 16.359 249.863 16.566 cv
249.461 16.773 249.051 16.875 248.629 16.879 cv
248.148 16.875 247.746 16.801 247.422 16.645 cv
247.098 16.492 246.836 16.277 246.637 16.008 cv
246.434 15.738 246.289 15.426 246.207 15.066 cv
246.117 14.711 246.074 14.27 246.078 13.738 cv
246.078 9.48401 li
246.074 9.43701 246.09 9.39099 246.121 9.34802 cv
246.148 9.31201 246.199 9.28101 246.277 9.25 cv
246.352 9.22699 246.453 9.20697 246.582 9.19098 cv
246.707 9.18402 246.863 9.17603 247.055 9.172 cv
247.242 9.17603 247.402 9.18402 247.527 9.19098 cv
247.652 9.20697 247.75 9.22699 247.828 9.25 cv
247.898 9.28101 247.953 9.31201 247.988 9.34802 cv
248.016 9.39099 248.031 9.43701 248.035 9.48401 cv
248.035 13.41 li
248.031 13.777 248.055 14.055 248.105 14.246 cv
248.148 14.437 248.219 14.602 248.32 14.738 cv
248.414 14.879 248.539 14.984 248.688 15.059 cv
248.836 15.137 249.008 15.176 249.203 15.172 cv
249.453 15.176 249.703 15.086 249.957 14.898 cv
250.207 14.719 250.477 14.453 250.762 14.105 cv
250.762 9.48401 li
250.762 9.43701 250.773 9.39099 250.805 9.34802 cv
250.828 9.31201 250.883 9.28101 250.961 9.25 cv
251.035 9.22699 251.133 9.20697 251.262 9.19098 cv
251.383 9.18402 251.543 9.17603 251.738 9.172 cv
251.93 9.17603 252.086 9.18402 252.211 9.19098 cv
252.332 9.20697 252.434 9.22699 252.508 9.25 cv
252.578 9.28101 252.629 9.31201 252.664 9.34802 cv
252.691 9.39099 252.707 9.43701 252.711 9.48401 cv
cp
f
261.59 12.855 mo
261.59 13.477 261.523 14.035 261.391 14.531 cv
261.258 15.027 261.063 15.449 260.809 15.797 cv
260.555 16.145 260.238 16.414 259.859 16.598 cv
259.477 16.785 259.043 16.875 258.559 16.879 cv
258.352 16.875 258.164 16.855 258 16.82 cv
257.828 16.777 257.664 16.719 257.508 16.641 cv
257.348 16.562 257.191 16.465 257.039 16.34 cv
256.879 16.223 256.719 16.082 256.555 15.918 cv
256.555 19.191 li
256.551 19.238 256.535 19.285 256.508 19.332 cv
256.473 19.371 256.418 19.406 256.348 19.437 cv
256.27 19.461 256.172 19.484 256.047 19.504 cv
255.922 19.516 255.762 19.523 255.574 19.527 cv
255.379 19.523 255.223 19.516 255.098 19.504 cv
254.973 19.484 254.871 19.461 254.797 19.437 cv
254.719 19.406 254.664 19.371 254.637 19.332 cv
254.602 19.285 254.586 19.238 254.59 19.191 cv
254.59 9.48401 li
254.586 9.43701 254.602 9.39099 254.629 9.34802 cv
254.652 9.31201 254.695 9.28101 254.766 9.25 cv
254.828 9.22699 254.914 9.20697 255.023 9.19098 cv
255.125 9.18402 255.262 9.17603 255.426 9.172 cv
255.582 9.17603 255.711 9.18402 255.816 9.19098 cv
255.922 9.20697 256.008 9.22699 256.074 9.25 cv
256.137 9.28101 256.184 9.31201 256.211 9.34802 cv
256.234 9.39099 256.246 9.43701 256.25 9.48401 cv
256.25 10.301 li
256.449 10.094 256.648 9.914 256.848 9.75403 cv
257.039 9.59802 257.238 9.46503 257.441 9.35498 cv
257.645 9.25403 257.852 9.172 258.07 9.117 cv
258.281 9.06598 258.512 9.04303 258.762 9.039 cv
259.266 9.04303 259.699 9.14099 260.063 9.34003 cv
260.418 9.54303 260.711 9.82001 260.938 10.164 cv
261.16 10.516 261.324 10.918 261.434 11.379 cv
261.535 11.84 261.59 12.332 261.59 12.855 cv
cp
259.547 12.996 mo
259.543 12.703 259.523 12.422 259.48 12.145 cv
259.434 11.875 259.355 11.633 259.254 11.418 cv
259.145 11.207 259.004 11.035 258.832 10.906 cv
258.656 10.781 258.441 10.719 258.184 10.715 cv
258.051 10.719 257.922 10.738 257.797 10.773 cv
257.668 10.816 257.539 10.879 257.406 10.965 cv
257.273 11.055 257.137 11.168 257 11.309 cv
256.855 11.449 256.707 11.625 256.555 11.828 cv
256.555 14.121 li
256.828 14.469 257.09 14.738 257.34 14.926 cv
257.586 15.117 257.848 15.211 258.121 15.211 cv
258.375 15.211 258.59 15.148 258.773 15.016 cv
258.949 14.891 259.098 14.719 259.211 14.508 cv
259.324 14.297 259.406 14.059 259.465 13.793 cv
259.516 13.527 259.543 13.262 259.547 12.996 cv
cp
f
267.883 14.469 mo
267.879 14.867 267.805 15.215 267.66 15.516 cv
267.512 15.816 267.305 16.07 267.035 16.27 cv
266.762 16.477 266.441 16.625 266.074 16.727 cv
265.707 16.824 265.305 16.875 264.875 16.879 cv
264.609 16.875 264.363 16.855 264.129 16.82 cv
263.895 16.777 263.684 16.73 263.496 16.672 cv
263.309 16.613 263.152 16.551 263.027 16.488 cv
262.902 16.426 262.809 16.367 262.754 16.312 cv
262.695 16.258 262.652 16.176 262.625 16.059 cv
262.59 15.945 262.574 15.77 262.578 15.539 cv
262.574 15.391 262.582 15.27 262.594 15.176 cv
262.602 15.086 262.617 15.016 262.641 14.957 cv
262.66 14.906 262.684 14.867 262.719 14.848 cv
262.746 14.832 262.785 14.824 262.832 14.82 cv
262.887 14.824 262.973 14.855 263.086 14.918 cv
263.195 14.984 263.332 15.059 263.504 15.133 cv
263.668 15.215 263.863 15.285 264.082 15.352 cv
264.301 15.422 264.551 15.457 264.836 15.453 cv
265.012 15.457 265.168 15.437 265.309 15.398 cv
265.441 15.363 265.563 15.312 265.668 15.242 cv
265.766 15.176 265.84 15.09 265.895 14.984 cv
265.941 14.883 265.969 14.762 265.973 14.625 cv
265.969 14.469 265.922 14.336 265.828 14.227 cv
265.734 14.117 265.605 14.02 265.449 13.934 cv
265.285 13.852 265.105 13.773 264.91 13.699 cv
264.707 13.629 264.504 13.551 264.293 13.457 cv
264.082 13.371 263.875 13.27 263.68 13.152 cv
263.477 13.043 263.297 12.902 263.141 12.734 cv
262.977 12.57 262.852 12.371 262.758 12.133 cv
262.664 11.902 262.617 11.621 262.617 11.289 cv
262.617 10.961 262.68 10.656 262.809 10.375 cv
262.938 10.102 263.125 9.86298 263.371 9.664 cv
263.613 9.46899 263.91 9.31598 264.262 9.203 cv
264.609 9.09802 265.004 9.04303 265.445 9.039 cv
265.66 9.04303 265.871 9.05902 266.078 9.086 cv
266.281 9.12097 266.469 9.15997 266.637 9.203 cv
266.801 9.25403 266.941 9.30499 267.059 9.35498 cv
267.172 9.414 267.254 9.461 267.305 9.49597 cv
267.352 9.539 267.387 9.578 267.41 9.61298 cv
267.43 9.65601 267.441 9.703 267.453 9.75403 cv
267.461 9.80902 267.473 9.875 267.48 9.953 cv
267.488 10.039 267.492 10.137 267.492 10.254 cv
267.492 10.395 267.488 10.512 267.48 10.598 cv
267.473 10.691 267.457 10.762 267.441 10.809 cv
267.422 10.863 267.398 10.898 267.371 10.914 cv
267.336 10.937 267.301 10.945 267.262 10.941 cv
267.211 10.945 267.137 10.918 267.043 10.859 cv
266.941 10.809 266.82 10.75 266.672 10.684 cv
266.523 10.625 266.352 10.566 266.156 10.508 cv
265.961 10.457 265.738 10.43 265.492 10.426 cv
265.313 10.43 265.16 10.449 265.031 10.48 cv
264.898 10.52 264.789 10.57 264.711 10.637 cv
264.625 10.707 264.563 10.785 264.523 10.875 cv
264.477 10.969 264.457 11.066 264.461 11.168 cv
264.457 11.328 264.508 11.465 264.609 11.57 cv
264.707 11.684 264.836 11.777 265 11.859 cv
265.16 11.945 265.344 12.023 265.551 12.094 cv
265.754 12.168 265.961 12.25 266.172 12.332 cv
266.379 12.422 266.586 12.52 266.797 12.633 cv
267 12.746 267.184 12.887 267.344 13.051 cv
267.504 13.219 267.633 13.418 267.734 13.648 cv
267.828 13.883 267.879 14.156 267.883 14.469 cv
cp
f
283.938 9.46899 mo
283.934 9.52698 283.926 9.59802 283.914 9.67999 cv
283.895 9.76202 283.867 9.883 283.828 10.035 cv
281.973 16.324 li
281.945 16.414 281.91 16.488 281.871 16.539 cv
281.828 16.598 281.766 16.641 281.68 16.668 cv
281.594 16.699 281.469 16.715 281.313 16.73 cv
281.148 16.738 280.945 16.746 280.695 16.746 cv
280.438 16.746 280.227 16.738 280.07 16.727 cv
279.906 16.711 279.781 16.691 279.691 16.66 cv
279.598 16.633 279.531 16.59 279.492 16.531 cv
279.449 16.48 279.418 16.41 279.398 16.324 cv
278.23 12.102 li
278.215 12.031 li
278.199 12.102 li
277.125 16.324 li
277.102 16.414 277.07 16.488 277.035 16.539 cv
276.992 16.598 276.926 16.641 276.836 16.668 cv
276.738 16.699 276.613 16.715 276.453 16.73 cv
276.293 16.738 276.086 16.746 275.832 16.746 cv
275.57 16.746 275.359 16.738 275.203 16.727 cv
275.043 16.711 274.918 16.691 274.828 16.66 cv
274.734 16.633 274.668 16.59 274.629 16.531 cv
274.586 16.48 274.555 16.41 274.539 16.324 cv
272.699 10.035 li
272.648 9.88702 272.621 9.77002 272.609 9.68402 cv
272.594 9.60199 272.586 9.52698 272.59 9.46899 cv
272.586 9.41803 272.602 9.375 272.633 9.33197 cv
272.66 9.297 272.711 9.26599 272.789 9.23798 cv
272.863 9.21899 272.965 9.19897 273.09 9.18701 cv
273.215 9.17999 273.375 9.17603 273.57 9.172 cv
273.777 9.17603 273.945 9.17999 274.078 9.18701 cv
274.207 9.19897 274.309 9.21899 274.383 9.242 cv
274.453 9.27002 274.504 9.30499 274.535 9.34802 cv
274.563 9.39502 274.586 9.44897 274.602 9.508 cv
275.98 14.609 li
275.996 14.703 li
276.012 14.609 li
277.305 9.508 li
277.316 9.44897 277.344 9.39502 277.379 9.34802 cv
277.41 9.30499 277.461 9.27002 277.531 9.242 cv
277.598 9.21899 277.691 9.19897 277.813 9.18701 cv
277.934 9.17999 278.09 9.17603 278.285 9.172 cv
278.477 9.17603 278.633 9.18402 278.754 9.19098 cv
278.871 9.20697 278.965 9.22302 279.039 9.24597 cv
279.105 9.27002 279.156 9.30103 279.188 9.34003 cv
279.215 9.37903 279.238 9.42603 279.254 9.47699 cv
280.641 14.617 li
280.664 14.703 li
280.68 14.609 li
282.004 9.508 li
282.012 9.44897 282.035 9.39502 282.066 9.34802 cv
282.098 9.30499 282.148 9.27002 282.223 9.242 cv
282.293 9.21899 282.391 9.19897 282.516 9.18701 cv
282.637 9.17999 282.797 9.17603 282.992 9.172 cv
283.184 9.17603 283.34 9.17999 283.465 9.18701 cv
283.586 9.19897 283.684 9.21899 283.754 9.23798 cv
283.824 9.26599 283.871 9.297 283.898 9.33197 cv
283.922 9.375 283.934 9.41803 283.938 9.46899 cv
cp
f
287.152 16.434 mo
287.148 16.488 287.133 16.531 287.105 16.57 cv
287.07 16.609 287.016 16.645 286.945 16.668 cv
286.867 16.695 286.77 16.711 286.645 16.727 cv
286.52 16.738 286.359 16.746 286.172 16.746 cv
285.977 16.746 285.82 16.738 285.695 16.727 cv
285.57 16.711 285.469 16.695 285.395 16.668 cv
285.316 16.645 285.262 16.609 285.234 16.57 cv
285.199 16.531 285.184 16.488 285.188 16.434 cv
285.188 9.5 li
285.184 9.44897 285.199 9.40198 285.234 9.36298 cv
285.262 9.32397 285.316 9.29303 285.395 9.26202 cv
285.469 9.23798 285.57 9.21503 285.695 9.19501 cv
285.82 9.18402 285.977 9.17603 286.172 9.172 cv
286.359 9.17603 286.52 9.18402 286.645 9.19501 cv
286.77 9.21503 286.867 9.23798 286.945 9.26202 cv
287.016 9.29303 287.07 9.32397 287.105 9.36298 cv
287.133 9.40198 287.148 9.44897 287.152 9.5 cv
cp
287.301 7.12903 mo
287.301 7.52698 287.219 7.80103 287.059 7.94897 cv
286.895 8.10199 286.598 8.17603 286.164 8.172 cv
285.719 8.17603 285.418 8.10199 285.27 7.95697 cv
285.113 7.81201 285.039 7.55103 285.039 7.16803 cv
285.039 6.77301 285.117 6.5 285.277 6.34802 cv
285.434 6.19501 285.734 6.117 286.18 6.117 cv
286.613 6.117 286.91 6.19098 287.066 6.34003 cv
287.223 6.48798 287.301 6.75403 287.301 7.12903 cv
cp
f
293.23 15.75 mo
293.23 15.977 293.215 16.152 293.188 16.273 cv
293.156 16.398 293.117 16.484 293.074 16.531 cv
293.023 16.582 292.957 16.625 292.867 16.664 cv
292.773 16.703 292.664 16.734 292.547 16.766 cv
292.422 16.789 292.289 16.812 292.148 16.832 cv
292.004 16.844 291.863 16.852 291.719 16.855 cv
291.328 16.852 290.988 16.801 290.703 16.707 cv
290.418 16.605 290.184 16.457 289.996 16.25 cv
289.809 16.047 289.668 15.789 289.582 15.477 cv
289.488 15.168 289.445 14.797 289.449 14.367 cv
289.449 10.809 li
288.617 10.809 li
288.516 10.812 288.441 10.75 288.391 10.625 cv
288.336 10.504 288.309 10.301 288.313 10.012 cv
288.309 9.86298 288.316 9.73401 288.332 9.633 cv
288.344 9.53101 288.363 9.44897 288.391 9.38702 cv
288.414 9.328 288.445 9.28497 288.488 9.258 cv
288.523 9.23401 288.57 9.22302 288.625 9.21899 cv
289.449 9.21899 li
289.449 7.66803 li
289.445 7.62097 289.461 7.57397 289.492 7.52698 cv
289.52 7.48798 289.57 7.453 289.648 7.422 cv
289.723 7.39801 289.824 7.375 289.953 7.35901 cv
290.078 7.34802 290.234 7.34399 290.426 7.34003 cv
290.613 7.34399 290.773 7.34802 290.902 7.35901 cv
291.027 7.375 291.129 7.39801 291.203 7.422 cv
291.273 7.453 291.324 7.48798 291.359 7.52698 cv
291.387 7.57397 291.402 7.62097 291.406 7.66803 cv
291.406 9.21899 li
292.918 9.21899 li
292.969 9.22302 293.016 9.23401 293.055 9.258 cv
293.094 9.28497 293.125 9.328 293.152 9.38702 cv
293.176 9.44897 293.195 9.53101 293.211 9.633 cv
293.223 9.73401 293.23 9.86298 293.23 10.012 cv
293.23 10.301 293.203 10.504 293.152 10.625 cv
293.098 10.75 293.023 10.812 292.926 10.809 cv
291.406 10.809 li
291.406 14.074 li
291.402 14.453 291.461 14.738 291.586 14.926 cv
291.703 15.117 291.918 15.211 292.223 15.211 cv
292.324 15.211 292.418 15.203 292.504 15.184 cv
292.586 15.168 292.66 15.148 292.727 15.121 cv
292.789 15.102 292.844 15.078 292.891 15.059 cv
292.934 15.043 292.973 15.035 293.012 15.031 cv
293.039 15.035 293.07 15.043 293.102 15.059 cv
293.129 15.078 293.148 15.117 293.168 15.168 cv
293.18 15.227 293.195 15.301 293.211 15.391 cv
293.223 15.488 293.23 15.605 293.23 15.75 cv
cp
f
301.293 16.434 mo
301.289 16.488 301.273 16.531 301.246 16.57 cv
301.211 16.609 301.16 16.645 301.09 16.668 cv
301.016 16.695 300.914 16.711 300.789 16.727 cv
300.66 16.738 300.504 16.746 300.32 16.746 cv
300.125 16.746 299.965 16.738 299.84 16.727 cv
299.711 16.711 299.609 16.695 299.539 16.668 cv
299.461 16.645 299.41 16.609 299.383 16.57 cv
299.348 16.531 299.332 16.488 299.336 16.434 cv
299.336 12.469 li
299.332 12.133 299.309 11.867 299.262 11.672 cv
299.211 11.48 299.137 11.316 299.047 11.18 cv
298.953 11.043 298.836 10.937 298.688 10.859 cv
298.539 10.785 298.363 10.746 298.168 10.746 cv
297.914 10.746 297.664 10.84 297.41 11.02 cv
297.156 11.203 296.891 11.465 296.617 11.812 cv
296.617 16.434 li
296.613 16.488 296.598 16.531 296.57 16.57 cv
296.535 16.609 296.48 16.645 296.41 16.668 cv
296.332 16.695 296.234 16.711 296.109 16.727 cv
295.984 16.738 295.824 16.746 295.637 16.746 cv
295.441 16.746 295.285 16.738 295.16 16.727 cv
295.035 16.711 294.934 16.695 294.859 16.668 cv
294.781 16.645 294.727 16.609 294.699 16.57 cv
294.664 16.531 294.648 16.488 294.652 16.434 cv
294.652 6.18701 li
294.648 6.13702 294.664 6.09003 294.699 6.047 cv
294.727 6.008 294.781 5.97302 294.859 5.94098 cv
294.934 5.914 295.035 5.89502 295.16 5.875 cv
295.285 5.86298 295.441 5.85498 295.637 5.85199 cv
295.824 5.85498 295.984 5.86298 296.109 5.875 cv
296.234 5.89502 296.332 5.914 296.41 5.94098 cv
296.48 5.97302 296.535 6.008 296.57 6.047 cv
296.598 6.09003 296.613 6.13702 296.617 6.18701 cv
296.617 10.027 li
296.953 9.69897 297.297 9.453 297.648 9.28497 cv
297.996 9.125 298.363 9.04303 298.746 9.039 cv
299.215 9.04303 299.613 9.12097 299.941 9.27301 cv
300.266 9.43402 300.527 9.64502 300.727 9.914 cv
300.926 10.184 301.07 10.5 301.16 10.859 cv
301.246 11.223 301.289 11.66 301.293 12.172 cv
cp
f
312.969 15.898 mo
312.965 16.051 312.961 16.176 312.949 16.273 cv
312.934 16.379 312.914 16.461 312.891 16.52 cv
312.867 16.586 312.836 16.633 312.797 16.656 cv
312.758 16.687 312.715 16.699 312.668 16.699 cv
307.602 16.699 li
307.426 16.699 307.281 16.648 307.168 16.547 cv
307.047 16.445 306.988 16.281 306.992 16.051 cv
306.992 7.26202 li
306.988 7.03497 307.047 6.87097 307.168 6.76599 cv
307.281 6.66803 307.426 6.617 307.602 6.61298 cv
312.637 6.61298 li
312.68 6.617 312.723 6.62903 312.762 6.65198 cv
312.797 6.67999 312.828 6.72699 312.855 6.789 cv
312.879 6.85901 312.895 6.94098 312.91 7.039 cv
312.918 7.14502 312.926 7.27301 312.93 7.42603 cv
312.926 7.57397 312.918 7.69897 312.91 7.797 cv
312.895 7.90198 312.879 7.98401 312.855 8.04303 cv
312.828 8.10498 312.797 8.14801 312.762 8.17603 cv
312.723 8.20697 312.68 8.22302 312.637 8.21899 cv
309.035 8.21899 li
309.035 10.684 li
312.082 10.684 li
312.129 10.687 312.172 10.703 312.211 10.727 cv
312.25 10.758 312.281 10.801 312.309 10.859 cv
312.332 10.922 312.352 11.004 312.367 11.102 cv
312.379 11.203 312.387 11.324 312.387 11.469 cv
312.387 11.621 312.379 11.746 312.367 11.844 cv
312.352 11.945 312.332 12.023 312.309 12.082 cv
312.281 12.145 312.25 12.187 312.211 12.211 cv
312.172 12.238 312.129 12.254 312.082 12.25 cv
309.035 12.25 li
309.035 15.094 li
312.668 15.094 li
312.715 15.094 312.758 15.109 312.797 15.137 cv
312.836 15.168 312.867 15.215 312.891 15.273 cv
312.914 15.34 312.934 15.422 312.949 15.52 cv
312.961 15.625 312.965 15.75 312.969 15.898 cv
cp
f
316.629 16.434 mo
316.625 16.488 316.609 16.531 316.582 16.57 cv
316.547 16.609 316.492 16.645 316.422 16.668 cv
316.344 16.695 316.246 16.711 316.121 16.727 cv
315.996 16.738 315.836 16.746 315.648 16.746 cv
315.453 16.746 315.297 16.738 315.172 16.727 cv
315.047 16.711 314.945 16.695 314.871 16.668 cv
314.793 16.645 314.738 16.609 314.711 16.57 cv
314.676 16.531 314.66 16.488 314.664 16.434 cv
314.664 9.5 li
314.66 9.44897 314.676 9.40198 314.711 9.36298 cv
314.738 9.32397 314.793 9.29303 314.871 9.26202 cv
314.945 9.23798 315.047 9.21503 315.172 9.19501 cv
315.297 9.18402 315.453 9.17603 315.648 9.172 cv
315.836 9.17603 315.996 9.18402 316.121 9.19501 cv
316.246 9.21503 316.344 9.23798 316.422 9.26202 cv
316.492 9.29303 316.547 9.32397 316.582 9.36298 cv
316.609 9.40198 316.625 9.44897 316.629 9.5 cv
cp
316.777 7.12903 mo
316.777 7.52698 316.695 7.80103 316.535 7.94897 cv
316.371 8.10199 316.074 8.17603 315.641 8.172 cv
315.195 8.17603 314.895 8.10199 314.746 7.95697 cv
314.59 7.81201 314.516 7.55103 314.516 7.16803 cv
314.516 6.77301 314.594 6.5 314.754 6.34802 cv
314.91 6.19501 315.211 6.117 315.656 6.117 cv
316.09 6.117 316.387 6.19098 316.543 6.34003 cv
316.699 6.48798 316.777 6.75403 316.777 7.12903 cv
cp
f
324.855 9.96503 mo
324.852 10.219 324.824 10.402 324.77 10.52 cv
324.711 10.641 324.641 10.699 324.563 10.699 cv
323.742 10.699 li
323.855 10.824 323.938 10.969 323.988 11.125 cv
324.035 11.285 324.059 11.449 324.063 11.617 cv
324.059 12.027 323.992 12.387 323.859 12.699 cv
323.723 13.016 323.527 13.281 323.277 13.492 cv
323.023 13.711 322.723 13.875 322.367 13.984 cv
322.008 14.102 321.609 14.156 321.18 14.152 cv
320.953 14.156 320.742 14.129 320.539 14.07 cv
320.336 14.02 320.18 13.957 320.07 13.879 cv
320.008 13.949 319.949 14.027 319.902 14.121 cv
319.852 14.215 319.828 14.32 319.832 14.43 cv
319.828 14.586 319.895 14.707 320.027 14.801 cv
320.156 14.898 320.344 14.953 320.586 14.961 cv
322.277 15.023 li
322.672 15.039 323.023 15.098 323.332 15.191 cv
323.641 15.293 323.902 15.426 324.113 15.598 cv
324.324 15.773 324.484 15.984 324.594 16.227 cv
324.703 16.473 324.758 16.746 324.762 17.059 cv
324.758 17.395 324.684 17.719 324.535 18.027 cv
324.387 18.328 324.16 18.59 323.859 18.816 cv
323.555 19.035 323.176 19.215 322.723 19.348 cv
322.266 19.477 321.734 19.539 321.133 19.543 cv
320.535 19.539 320.031 19.492 319.613 19.402 cv
319.195 19.305 318.852 19.176 318.586 19.012 cv
318.316 18.844 318.121 18.645 318.004 18.418 cv
317.879 18.184 317.82 17.93 317.82 17.656 cv
317.82 17.484 317.84 17.324 317.887 17.168 cv
317.926 17.012 317.992 16.859 318.082 16.719 cv
318.164 16.574 318.27 16.441 318.395 16.309 cv
318.52 16.18 318.66 16.055 318.824 15.934 cv
318.598 15.82 318.426 15.66 318.305 15.449 cv
318.184 15.246 318.125 15.02 318.125 14.773 cv
318.125 14.473 318.191 14.195 318.332 13.937 cv
318.469 13.687 318.652 13.457 318.879 13.254 cv
318.695 13.074 318.551 12.859 318.441 12.602 cv
318.332 12.352 318.277 12.031 318.281 11.648 cv
318.277 11.246 318.348 10.887 318.492 10.562 cv
318.633 10.246 318.832 9.97699 319.09 9.75403 cv
319.344 9.53497 319.648 9.36298 320 9.24597 cv
320.352 9.12903 320.742 9.07001 321.172 9.07001 cv
321.391 9.07001 321.598 9.086 321.797 9.10901 cv
321.996 9.14099 322.184 9.17603 322.355 9.21899 cv
324.563 9.21899 li
324.645 9.22302 324.715 9.28101 324.773 9.39099 cv
324.824 9.508 324.852 9.69897 324.855 9.96503 cv
cp
322.34 11.609 mo
322.336 11.238 322.234 10.949 322.027 10.738 cv
321.816 10.535 321.523 10.43 321.148 10.426 cv
320.953 10.43 320.781 10.461 320.641 10.523 cv
320.492 10.59 320.371 10.68 320.277 10.789 cv
320.176 10.902 320.105 11.031 320.063 11.18 cv
320.012 11.328 319.988 11.484 319.992 11.641 cv
319.988 12 320.094 12.277 320.305 12.48 cv
320.512 12.687 320.801 12.793 321.172 12.789 cv
321.367 12.793 321.535 12.762 321.684 12.695 cv
321.824 12.637 321.945 12.551 322.047 12.437 cv
322.141 12.332 322.215 12.203 322.266 12.059 cv
322.313 11.918 322.336 11.77 322.34 11.609 cv
cp
322.801 17.16 mo
322.801 16.922 322.707 16.746 322.52 16.621 cv
322.332 16.5 322.074 16.43 321.746 16.418 cv
320.352 16.379 li
320.215 16.48 320.105 16.574 320.027 16.664 cv
319.945 16.754 319.883 16.84 319.836 16.926 cv
319.785 17.008 319.75 17.09 319.738 17.168 cv
319.719 17.246 319.711 17.324 319.715 17.41 cv
319.711 17.664 319.844 17.863 320.105 18 cv
320.367 18.133 320.738 18.199 321.219 18.203 cv
321.512 18.199 321.758 18.168 321.965 18.113 cv
322.164 18.051 322.328 17.973 322.457 17.875 cv
322.578 17.773 322.668 17.664 322.723 17.543 cv
322.773 17.422 322.801 17.293 322.801 17.16 cv
cp
f
332.797 16.434 mo
332.793 16.488 332.777 16.531 332.75 16.57 cv
332.715 16.609 332.664 16.645 332.594 16.668 cv
332.52 16.695 332.418 16.711 332.293 16.727 cv
332.164 16.738 332.008 16.746 331.824 16.746 cv
331.629 16.746 331.469 16.738 331.344 16.727 cv
331.215 16.711 331.113 16.695 331.043 16.668 cv
330.965 16.645 330.914 16.609 330.887 16.57 cv
330.852 16.531 330.836 16.488 330.84 16.434 cv
330.84 12.469 li
330.836 12.133 330.813 11.867 330.766 11.672 cv
330.715 11.48 330.641 11.316 330.551 11.18 cv
330.457 11.043 330.34 10.937 330.191 10.859 cv
330.043 10.785 329.867 10.746 329.672 10.746 cv
329.418 10.746 329.168 10.84 328.914 11.02 cv
328.66 11.203 328.395 11.465 328.121 11.812 cv
328.121 16.434 li
328.117 16.488 328.102 16.531 328.074 16.57 cv
328.039 16.609 327.984 16.645 327.914 16.668 cv
327.836 16.695 327.738 16.711 327.613 16.727 cv
327.488 16.738 327.328 16.746 327.141 16.746 cv
326.945 16.746 326.789 16.738 326.664 16.727 cv
326.539 16.711 326.438 16.695 326.363 16.668 cv
326.285 16.645 326.23 16.609 326.203 16.57 cv
326.168 16.531 326.152 16.488 326.156 16.434 cv
326.156 6.18701 li
326.152 6.13702 326.168 6.09003 326.203 6.047 cv
326.23 6.008 326.285 5.97302 326.363 5.94098 cv
326.438 5.914 326.539 5.89502 326.664 5.875 cv
326.789 5.86298 326.945 5.85498 327.141 5.85199 cv
327.328 5.85498 327.488 5.86298 327.613 5.875 cv
327.738 5.89502 327.836 5.914 327.914 5.94098 cv
327.984 5.97302 328.039 6.008 328.074 6.047 cv
328.102 6.09003 328.117 6.13702 328.121 6.18701 cv
328.121 10.027 li
328.457 9.69897 328.801 9.453 329.152 9.28497 cv
329.5 9.125 329.867 9.04303 330.25 9.039 cv
330.719 9.04303 331.117 9.12097 331.445 9.27301 cv
331.77 9.43402 332.031 9.64502 332.23 9.914 cv
332.43 10.184 332.574 10.5 332.664 10.859 cv
332.75 11.223 332.793 11.66 332.797 12.172 cv
cp
f
338.715 15.75 mo
338.715 15.977 338.699 16.152 338.672 16.273 cv
338.641 16.398 338.602 16.484 338.559 16.531 cv
338.508 16.582 338.441 16.625 338.352 16.664 cv
338.258 16.703 338.148 16.734 338.031 16.766 cv
337.906 16.789 337.773 16.812 337.633 16.832 cv
337.488 16.844 337.348 16.852 337.203 16.855 cv
336.813 16.852 336.473 16.801 336.188 16.707 cv
335.902 16.605 335.668 16.457 335.48 16.25 cv
335.293 16.047 335.152 15.789 335.066 15.477 cv
334.973 15.168 334.93 14.797 334.934 14.367 cv
334.934 10.809 li
334.102 10.809 li
334 10.812 333.926 10.75 333.875 10.625 cv
333.82 10.504 333.793 10.301 333.797 10.012 cv
333.793 9.86298 333.801 9.73401 333.816 9.633 cv
333.828 9.53101 333.848 9.44897 333.875 9.38702 cv
333.898 9.328 333.93 9.28497 333.973 9.258 cv
334.008 9.23401 334.055 9.22302 334.109 9.21899 cv
334.934 9.21899 li
334.934 7.66803 li
334.93 7.62097 334.945 7.57397 334.977 7.52698 cv
335.004 7.48798 335.055 7.453 335.133 7.422 cv
335.207 7.39801 335.309 7.375 335.438 7.35901 cv
335.563 7.34802 335.719 7.34399 335.91 7.34003 cv
336.098 7.34399 336.258 7.34802 336.387 7.35901 cv
336.512 7.375 336.613 7.39801 336.688 7.422 cv
336.758 7.453 336.809 7.48798 336.844 7.52698 cv
336.871 7.57397 336.887 7.62097 336.891 7.66803 cv
336.891 9.21899 li
338.402 9.21899 li
338.453 9.22302 338.5 9.23401 338.539 9.258 cv
338.578 9.28497 338.609 9.328 338.637 9.38702 cv
338.66 9.44897 338.68 9.53101 338.695 9.633 cv
338.707 9.73401 338.715 9.86298 338.715 10.012 cv
338.715 10.301 338.688 10.504 338.637 10.625 cv
338.582 10.75 338.508 10.812 338.41 10.809 cv
336.891 10.809 li
336.891 14.074 li
336.887 14.453 336.945 14.738 337.07 14.926 cv
337.188 15.117 337.402 15.211 337.707 15.211 cv
337.809 15.211 337.902 15.203 337.988 15.184 cv
338.07 15.168 338.145 15.148 338.211 15.121 cv
338.273 15.102 338.328 15.078 338.375 15.059 cv
338.418 15.043 338.457 15.035 338.496 15.031 cv
338.523 15.035 338.555 15.043 338.586 15.059 cv
338.613 15.078 338.633 15.117 338.652 15.168 cv
338.664 15.227 338.68 15.301 338.695 15.391 cv
338.707 15.488 338.715 15.605 338.715 15.75 cv
cp
f
350.652 7.45697 mo
350.648 7.61298 350.641 7.742 350.633 7.84399 cv
350.617 7.953 350.598 8.039 350.574 8.10199 cv
350.543 8.16803 350.512 8.21503 350.477 8.242 cv
350.434 8.27698 350.391 8.29303 350.348 8.289 cv
347.824 8.289 li
347.824 16.418 li
347.824 16.473 347.805 16.52 347.773 16.559 cv
347.734 16.602 347.68 16.637 347.605 16.66 cv
347.523 16.687 347.418 16.707 347.289 16.723 cv
347.152 16.738 346.988 16.746 346.793 16.746 cv
346.598 16.746 346.434 16.738 346.301 16.723 cv
346.168 16.707 346.063 16.687 345.984 16.66 cv
345.906 16.637 345.848 16.602 345.816 16.559 cv
345.777 16.52 345.762 16.473 345.766 16.418 cv
345.766 8.289 li
343.242 8.289 li
343.188 8.29303 343.141 8.27698 343.109 8.242 cv
343.07 8.21503 343.039 8.16803 343.016 8.10199 cv
342.984 8.039 342.965 7.953 342.957 7.84399 cv
342.941 7.742 342.938 7.61298 342.938 7.45697 cv
342.938 7.30499 342.941 7.172 342.957 7.05902 cv
342.965 6.953 342.984 6.86298 343.016 6.797 cv
343.039 6.73401 343.07 6.68701 343.109 6.65601 cv
343.141 6.62903 343.188 6.617 343.242 6.61298 cv
350.348 6.61298 li
350.391 6.617 350.434 6.62903 350.477 6.65601 cv
350.512 6.68701 350.543 6.73401 350.574 6.797 cv
350.598 6.86298 350.617 6.953 350.633 7.05902 cv
350.641 7.172 350.648 7.30499 350.652 7.45697 cv
cp
f
358.363 16.434 mo
358.359 16.488 358.344 16.531 358.316 16.57 cv
358.281 16.609 358.23 16.645 358.16 16.668 cv
358.086 16.695 357.984 16.711 357.859 16.727 cv
357.73 16.738 357.574 16.746 357.391 16.746 cv
357.195 16.746 357.035 16.738 356.91 16.727 cv
356.781 16.711 356.68 16.695 356.609 16.668 cv
356.531 16.645 356.48 16.609 356.453 16.57 cv
356.418 16.531 356.402 16.488 356.406 16.434 cv
356.406 12.469 li
356.402 12.133 356.379 11.867 356.332 11.672 cv
356.281 11.48 356.207 11.316 356.117 11.18 cv
356.023 11.043 355.906 10.937 355.758 10.859 cv
355.609 10.785 355.434 10.746 355.238 10.746 cv
354.984 10.746 354.734 10.84 354.48 11.02 cv
354.227 11.203 353.961 11.465 353.688 11.812 cv
353.688 16.434 li
353.684 16.488 353.668 16.531 353.641 16.57 cv
353.605 16.609 353.551 16.645 353.48 16.668 cv
353.402 16.695 353.305 16.711 353.18 16.727 cv
353.055 16.738 352.895 16.746 352.707 16.746 cv
352.512 16.746 352.355 16.738 352.23 16.727 cv
352.105 16.711 352.004 16.695 351.93 16.668 cv
351.852 16.645 351.797 16.609 351.77 16.57 cv
351.734 16.531 351.719 16.488 351.723 16.434 cv
351.723 6.18701 li
351.719 6.13702 351.734 6.09003 351.77 6.047 cv
351.797 6.008 351.852 5.97302 351.93 5.94098 cv
352.004 5.914 352.105 5.89502 352.23 5.875 cv
352.355 5.86298 352.512 5.85498 352.707 5.85199 cv
352.895 5.85498 353.055 5.86298 353.18 5.875 cv
353.305 5.89502 353.402 5.914 353.48 5.94098 cv
353.551 5.97302 353.605 6.008 353.641 6.047 cv
353.668 6.09003 353.684 6.13702 353.688 6.18701 cv
353.688 10.027 li
354.023 9.69897 354.367 9.453 354.719 9.28497 cv
355.066 9.125 355.434 9.04303 355.816 9.039 cv
356.285 9.04303 356.684 9.12097 357.012 9.27301 cv
357.336 9.43402 357.598 9.64502 357.797 9.914 cv
357.996 10.184 358.141 10.5 358.23 10.859 cv
358.316 11.223 358.359 11.66 358.363 12.172 cv
cp
f
364.762 10.129 mo
364.762 10.32 364.754 10.473 364.746 10.59 cv
364.73 10.711 364.715 10.805 364.699 10.871 cv
364.676 10.941 364.648 10.988 364.617 11.012 cv
364.578 11.039 364.535 11.051 364.488 11.051 cv
364.441 11.051 364.395 11.043 364.348 11.023 cv
364.293 11.008 364.234 10.988 364.172 10.965 cv
364.102 10.945 364.031 10.926 363.957 10.906 cv
363.875 10.891 363.789 10.883 363.699 10.879 cv
363.586 10.883 363.477 10.902 363.371 10.945 cv
363.262 10.992 363.148 11.062 363.035 11.152 cv
362.914 11.246 362.793 11.371 362.668 11.523 cv
362.539 11.684 362.402 11.875 362.258 12.102 cv
362.258 16.434 li
362.254 16.488 362.238 16.531 362.211 16.57 cv
362.176 16.609 362.121 16.645 362.051 16.668 cv
361.973 16.695 361.875 16.711 361.75 16.727 cv
361.625 16.738 361.465 16.746 361.277 16.746 cv
361.082 16.746 360.926 16.738 360.801 16.727 cv
360.676 16.711 360.574 16.695 360.5 16.668 cv
360.422 16.645 360.367 16.609 360.34 16.57 cv
360.305 16.531 360.289 16.488 360.293 16.434 cv
360.293 9.48401 li
360.289 9.43701 360.305 9.39099 360.332 9.34802 cv
360.355 9.31201 360.402 9.28101 360.473 9.25 cv
360.539 9.22699 360.625 9.20697 360.734 9.19098 cv
360.84 9.18402 360.973 9.17603 361.137 9.172 cv
361.301 9.17603 361.438 9.18402 361.547 9.19098 cv
361.652 9.20697 361.738 9.22699 361.801 9.25 cv
361.859 9.28101 361.902 9.31201 361.93 9.34802 cv
361.953 9.39099 361.965 9.43701 361.969 9.48401 cv
361.969 10.348 li
362.148 10.09 362.32 9.87903 362.484 9.70697 cv
362.641 9.54303 362.797 9.40601 362.945 9.30499 cv
363.09 9.20697 363.234 9.14099 363.379 9.09802 cv
363.523 9.06201 363.668 9.04303 363.816 9.039 cv
363.883 9.04303 363.957 9.047 364.035 9.05103 cv
364.113 9.06201 364.191 9.07397 364.277 9.09003 cv
364.355 9.10901 364.43 9.12903 364.496 9.15198 cv
364.555 9.17603 364.602 9.203 364.633 9.22699 cv
364.66 9.258 364.68 9.28497 364.695 9.31201 cv
364.707 9.34802 364.719 9.39099 364.73 9.44098 cv
364.738 9.5 364.746 9.58197 364.754 9.68701 cv
364.758 9.797 364.762 9.94501 364.762 10.129 cv
cp
f
372.207 12.758 mo
372.203 12.996 372.152 13.172 372.047 13.285 cv
371.938 13.402 371.789 13.461 371.609 13.457 cv
367.375 13.457 li
367.371 13.758 367.406 14.027 367.48 14.266 cv
367.547 14.508 367.66 14.711 367.816 14.879 cv
367.969 15.051 368.164 15.18 368.406 15.266 cv
368.645 15.355 368.934 15.398 369.277 15.398 cv
369.617 15.398 369.918 15.375 370.18 15.324 cv
370.438 15.277 370.664 15.223 370.855 15.16 cv
371.043 15.102 371.199 15.047 371.328 14.996 cv
371.449 14.949 371.551 14.926 371.633 14.922 cv
371.676 14.926 371.715 14.934 371.75 14.949 cv
371.777 14.969 371.805 15 371.824 15.047 cv
371.844 15.094 371.855 15.16 371.867 15.246 cv
371.871 15.332 371.875 15.441 371.879 15.57 cv
371.875 15.687 371.875 15.785 371.871 15.863 cv
371.863 15.945 371.855 16.012 371.848 16.066 cv
371.836 16.125 371.82 16.176 371.801 16.211 cv
371.781 16.254 371.754 16.289 371.723 16.324 cv
371.688 16.363 371.594 16.414 371.445 16.473 cv
371.289 16.539 371.098 16.602 370.867 16.656 cv
370.629 16.719 370.359 16.766 370.063 16.812 cv
369.758 16.852 369.438 16.875 369.098 16.879 cv
368.477 16.875 367.934 16.801 367.473 16.645 cv
367.004 16.492 366.617 16.254 366.309 15.937 cv
365.992 15.621 365.758 15.223 365.609 14.738 cv
365.453 14.258 365.379 13.691 365.383 13.035 cv
365.379 12.422 365.457 11.863 365.621 11.367 cv
365.777 10.871 366.012 10.453 366.324 10.105 cv
366.629 9.76202 367.004 9.49597 367.441 9.31201 cv
367.879 9.133 368.371 9.04303 368.926 9.039 cv
369.504 9.04303 370.004 9.12903 370.418 9.297 cv
370.832 9.47302 371.168 9.711 371.434 10.012 cv
371.695 10.316 371.891 10.676 372.02 11.09 cv
372.141 11.508 372.203 11.957 372.207 12.445 cv
cp
370.305 12.195 mo
370.316 11.645 370.207 11.211 369.973 10.898 cv
369.738 10.586 369.371 10.43 368.879 10.426 cv
368.629 10.43 368.414 10.477 368.23 10.566 cv
368.043 10.664 367.891 10.789 367.77 10.945 cv
367.645 11.105 367.551 11.293 367.488 11.508 cv
367.422 11.723 367.383 11.953 367.375 12.195 cv
cp
f
379.738 16.457 mo
379.734 16.535 379.707 16.59 379.66 16.629 cv
379.605 16.672 379.523 16.699 379.414 16.719 cv
379.297 16.734 379.133 16.746 378.918 16.746 cv
378.68 16.746 378.508 16.734 378.406 16.719 cv
378.297 16.699 378.223 16.672 378.184 16.629 cv
378.137 16.59 378.117 16.535 378.117 16.457 cv
378.117 15.906 li
377.828 16.215 377.5 16.453 377.137 16.621 cv
376.77 16.793 376.363 16.875 375.918 16.879 cv
375.547 16.875 375.207 16.828 374.898 16.734 cv
374.59 16.641 374.324 16.5 374.098 16.305 cv
373.871 16.117 373.695 15.883 373.57 15.602 cv
373.445 15.324 373.383 14.996 373.387 14.617 cv
373.383 14.219 373.461 13.867 373.621 13.562 cv
373.777 13.266 374.016 13.02 374.332 12.824 cv
374.645 12.633 375.035 12.488 375.504 12.391 cv
375.973 12.301 376.516 12.254 377.133 12.25 cv
377.813 12.25 li
377.813 11.828 li
377.813 11.613 377.789 11.422 377.746 11.258 cv
377.699 11.098 377.625 10.961 377.527 10.848 cv
377.422 10.742 377.289 10.66 377.121 10.605 cv
376.949 10.555 376.738 10.531 376.496 10.527 cv
376.164 10.531 375.871 10.566 375.617 10.637 cv
375.355 10.711 375.129 10.793 374.934 10.879 cv
374.734 10.973 374.57 11.051 374.441 11.121 cv
374.305 11.195 374.195 11.234 374.117 11.23 cv
374.055 11.234 374.004 11.215 373.965 11.176 cv
373.918 11.141 373.883 11.09 373.855 11.02 cv
373.824 10.957 373.801 10.871 373.789 10.77 cv
373.77 10.672 373.762 10.562 373.766 10.441 cv
373.762 10.281 373.777 10.156 373.805 10.059 cv
373.828 9.96899 373.875 9.883 373.953 9.80499 cv
374.023 9.72998 374.152 9.64801 374.336 9.55902 cv
374.516 9.46899 374.727 9.383 374.973 9.30499 cv
375.215 9.22699 375.484 9.164 375.773 9.11298 cv
376.063 9.06598 376.359 9.04303 376.668 9.039 cv
377.211 9.04303 377.676 9.09399 378.063 9.19897 cv
378.449 9.30902 378.77 9.47302 379.02 9.69098 cv
379.27 9.90997 379.449 10.195 379.566 10.543 cv
379.676 10.895 379.734 11.309 379.738 11.781 cv
cp
377.813 13.48 mo
377.063 13.48 li
376.746 13.484 376.477 13.508 376.254 13.551 cv
376.027 13.602 375.844 13.672 375.707 13.762 cv
375.563 13.859 375.461 13.973 375.398 14.102 cv
375.332 14.238 375.297 14.387 375.301 14.555 cv
375.297 14.848 375.391 15.078 375.578 15.242 cv
375.762 15.41 376.02 15.492 376.348 15.492 cv
376.621 15.492 376.871 15.422 377.105 15.281 cv
377.332 15.141 377.57 14.937 377.813 14.664 cv
cp
f
388.324 16.434 mo
388.32 16.496 388.309 16.543 388.285 16.578 cv
388.258 16.621 388.211 16.652 388.152 16.676 cv
388.086 16.699 388.004 16.715 387.898 16.73 cv
387.793 16.738 387.66 16.746 387.508 16.746 cv
387.336 16.746 387.203 16.738 387.102 16.73 cv
386.996 16.715 386.91 16.699 386.848 16.676 cv
386.781 16.652 386.734 16.621 386.707 16.578 cv
386.676 16.543 386.66 16.496 386.664 16.434 cv
386.664 15.664 li
386.305 16.051 385.93 16.348 385.539 16.559 cv
385.141 16.77 384.707 16.875 384.234 16.879 cv
383.699 16.875 383.25 16.773 382.887 16.57 cv
382.52 16.367 382.223 16.094 381.992 15.742 cv
381.758 15.398 381.59 14.992 381.488 14.523 cv
381.387 14.062 381.336 13.57 381.336 13.051 cv
381.336 12.437 381.398 11.883 381.531 11.387 cv
381.66 10.895 381.855 10.473 382.113 10.125 cv
382.367 9.77698 382.684 9.51202 383.063 9.32001 cv
383.441 9.13702 383.879 9.04303 384.375 9.039 cv
384.762 9.04303 385.113 9.12097 385.434 9.27698 cv
385.746 9.43701 386.063 9.66803 386.375 9.97302 cv
386.375 6.211 li
386.375 6.15997 386.387 6.11298 386.418 6.07001 cv
386.441 6.03101 386.496 5.99597 386.574 5.96503 cv
386.648 5.93701 386.746 5.91803 386.875 5.89801 cv
386.996 5.88702 387.156 5.87903 387.352 5.875 cv
387.543 5.87903 387.699 5.88702 387.824 5.89801 cv
387.945 5.91803 388.047 5.93701 388.121 5.96503 cv
388.191 5.99597 388.242 6.03101 388.277 6.07001 cv
388.305 6.11298 388.32 6.15997 388.324 6.211 cv
cp
386.375 11.789 mo
386.094 11.437 385.824 11.168 385.57 10.98 cv
385.309 10.793 385.039 10.699 384.762 10.699 cv
384.508 10.699 384.289 10.766 384.105 10.891 cv
383.918 11.023 383.77 11.191 383.66 11.402 cv
383.547 11.613 383.465 11.852 383.41 12.113 cv
383.355 12.379 383.328 12.648 383.328 12.918 cv
383.328 13.215 383.352 13.496 383.398 13.77 cv
383.445 14.047 383.52 14.293 383.629 14.508 cv
383.73 14.723 383.875 14.895 384.055 15.023 cv
384.23 15.156 384.453 15.223 384.723 15.219 cv
384.855 15.223 384.984 15.203 385.117 15.16 cv
385.242 15.125 385.375 15.062 385.508 14.969 cv
385.641 14.883 385.777 14.766 385.918 14.621 cv
386.059 14.48 386.211 14.305 386.375 14.098 cv
cp
f
395.145 14.469 mo
395.141 14.867 395.066 15.215 394.922 15.516 cv
394.773 15.816 394.566 16.07 394.297 16.27 cv
394.023 16.477 393.703 16.625 393.336 16.727 cv
392.969 16.824 392.566 16.875 392.137 16.879 cv
391.871 16.875 391.625 16.855 391.391 16.82 cv
391.156 16.777 390.945 16.73 390.758 16.672 cv
390.57 16.613 390.414 16.551 390.289 16.488 cv
390.164 16.426 390.07 16.367 390.016 16.312 cv
389.957 16.258 389.914 16.176 389.887 16.059 cv
389.852 15.945 389.836 15.77 389.84 15.539 cv
389.836 15.391 389.844 15.27 389.855 15.176 cv
389.863 15.086 389.879 15.016 389.902 14.957 cv
389.922 14.906 389.945 14.867 389.98 14.848 cv
390.008 14.832 390.047 14.824 390.094 14.82 cv
390.148 14.824 390.234 14.855 390.348 14.918 cv
390.457 14.984 390.594 15.059 390.766 15.133 cv
390.93 15.215 391.125 15.285 391.344 15.352 cv
391.563 15.422 391.813 15.457 392.098 15.453 cv
392.273 15.457 392.43 15.437 392.57 15.398 cv
392.703 15.363 392.824 15.312 392.93 15.242 cv
393.027 15.176 393.102 15.09 393.156 14.984 cv
393.203 14.883 393.23 14.762 393.234 14.625 cv
393.23 14.469 393.184 14.336 393.09 14.227 cv
392.996 14.117 392.867 14.02 392.711 13.934 cv
392.547 13.852 392.367 13.773 392.172 13.699 cv
391.969 13.629 391.766 13.551 391.555 13.457 cv
391.344 13.371 391.137 13.27 390.941 13.152 cv
390.738 13.043 390.559 12.902 390.402 12.734 cv
390.238 12.57 390.113 12.371 390.02 12.133 cv
389.926 11.902 389.879 11.621 389.879 11.289 cv
389.879 10.961 389.941 10.656 390.07 10.375 cv
390.199 10.102 390.387 9.86298 390.633 9.664 cv
390.875 9.46899 391.172 9.31598 391.523 9.203 cv
391.871 9.09802 392.266 9.04303 392.707 9.039 cv
392.922 9.04303 393.133 9.05902 393.34 9.086 cv
393.543 9.12097 393.73 9.15997 393.898 9.203 cv
394.063 9.25403 394.203 9.30499 394.32 9.35498 cv
394.434 9.414 394.516 9.461 394.566 9.49597 cv
394.613 9.539 394.648 9.578 394.672 9.61298 cv
394.691 9.65601 394.703 9.703 394.715 9.75403 cv
394.723 9.80902 394.734 9.875 394.742 9.953 cv
394.75 10.039 394.754 10.137 394.754 10.254 cv
394.754 10.395 394.75 10.512 394.742 10.598 cv
394.734 10.691 394.719 10.762 394.703 10.809 cv
394.684 10.863 394.66 10.898 394.633 10.914 cv
394.598 10.937 394.563 10.945 394.523 10.941 cv
394.473 10.945 394.398 10.918 394.305 10.859 cv
394.203 10.809 394.082 10.75 393.934 10.684 cv
393.785 10.625 393.613 10.566 393.418 10.508 cv
393.223 10.457 393 10.43 392.754 10.426 cv
392.574 10.43 392.422 10.449 392.293 10.48 cv
392.16 10.52 392.051 10.57 391.973 10.637 cv
391.887 10.707 391.824 10.785 391.785 10.875 cv
391.738 10.969 391.719 11.066 391.723 11.168 cv
391.719 11.328 391.77 11.465 391.871 11.57 cv
391.969 11.684 392.098 11.777 392.262 11.859 cv
392.422 11.945 392.605 12.023 392.813 12.094 cv
393.016 12.168 393.223 12.25 393.434 12.332 cv
393.641 12.422 393.848 12.52 394.059 12.633 cv
394.262 12.746 394.445 12.887 394.605 13.051 cv
394.766 13.219 394.895 13.418 394.996 13.648 cv
395.09 13.883 395.141 14.156 395.145 14.469 cv
cp
f
403.906 12.781 mo
403.902 13.082 403.875 13.293 403.82 13.41 cv
403.762 13.535 403.672 13.594 403.547 13.59 cv
400.305 13.59 li
400.176 13.594 400.082 13.531 400.027 13.406 cv
399.965 13.285 399.938 13.078 399.941 12.781 cv
399.938 12.492 399.965 12.285 400.027 12.164 cv
400.082 12.047 400.176 11.988 400.305 11.984 cv
403.547 11.984 li
403.609 11.988 403.66 12 403.707 12.023 cv
403.746 12.051 403.785 12.098 403.82 12.156 cv
403.848 12.223 403.871 12.305 403.887 12.406 cv
403.898 12.512 403.902 12.637 403.906 12.781 cv
cp
f
414.641 15.844 mo
414.637 16 414.633 16.133 414.621 16.234 cv
414.605 16.344 414.586 16.43 414.563 16.5 cv
414.535 16.57 414.5 16.621 414.465 16.652 cv
414.422 16.684 414.379 16.699 414.328 16.699 cv
409.707 16.699 li
409.531 16.699 409.387 16.648 409.273 16.547 cv
409.152 16.445 409.094 16.281 409.098 16.051 cv
409.098 6.89502 li
409.094 6.84802 409.113 6.80103 409.148 6.75403 cv
409.18 6.71503 409.234 6.67999 409.316 6.65198 cv
409.391 6.62903 409.496 6.60901 409.633 6.59003 cv
409.762 6.578 409.926 6.57001 410.129 6.56598 cv
410.324 6.57001 410.492 6.578 410.625 6.59003 cv
410.754 6.60901 410.855 6.62903 410.938 6.65198 cv
411.012 6.67999 411.07 6.71503 411.105 6.75403 cv
411.137 6.80103 411.152 6.84802 411.156 6.89502 cv
411.156 15.008 li
414.328 15.008 li
414.379 15.012 414.422 15.027 414.465 15.051 cv
414.5 15.082 414.535 15.129 414.563 15.191 cv
414.586 15.262 414.605 15.348 414.621 15.449 cv
414.633 15.559 414.637 15.687 414.641 15.844 cv
cp
f
422.762 12.887 mo
422.758 13.484 422.68 14.027 422.527 14.512 cv
422.367 15.004 422.133 15.422 421.816 15.773 cv
421.5 16.125 421.102 16.398 420.625 16.59 cv
420.145 16.781 419.586 16.875 418.949 16.879 cv
418.328 16.875 417.789 16.793 417.336 16.621 cv
416.875 16.453 416.496 16.203 416.199 15.875 cv
415.895 15.551 415.672 15.148 415.527 14.668 cv
415.383 14.191 415.313 13.645 415.313 13.027 cv
415.313 12.437 415.391 11.898 415.547 11.406 cv
415.703 10.918 415.941 10.496 416.262 10.145 cv
416.578 9.797 416.973 9.52301 417.449 9.328 cv
417.922 9.13702 418.48 9.04303 419.121 9.039 cv
419.746 9.04303 420.285 9.125 420.742 9.29303 cv
421.199 9.46503 421.578 9.71503 421.875 10.039 cv
422.172 10.367 422.395 10.77 422.543 11.246 cv
422.688 11.727 422.758 12.273 422.762 12.887 cv
cp
420.742 12.965 mo
420.738 12.629 420.711 12.312 420.66 12.02 cv
420.602 11.734 420.508 11.484 420.383 11.27 cv
420.25 11.059 420.078 10.891 419.867 10.77 cv
419.648 10.652 419.379 10.594 419.051 10.59 cv
418.762 10.594 418.508 10.648 418.289 10.75 cv
418.07 10.859 417.891 11.016 417.75 11.219 cv
417.609 11.426 417.504 11.672 417.434 11.957 cv
417.363 12.25 417.328 12.578 417.328 12.941 cv
417.328 13.289 417.355 13.605 417.414 13.891 cv
417.469 14.184 417.563 14.434 417.691 14.645 cv
417.816 14.859 417.988 15.023 418.211 15.137 cv
418.426 15.258 418.695 15.316 419.02 15.312 cv
419.313 15.316 419.57 15.262 419.793 15.152 cv
420.008 15.047 420.188 14.895 420.328 14.687 cv
420.469 14.488 420.57 14.242 420.641 13.953 cv
420.703 13.668 420.738 13.34 420.742 12.965 cv
cp
f
429.578 15.328 mo
429.574 15.465 429.57 15.578 429.566 15.668 cv
429.555 15.762 429.547 15.84 429.535 15.898 cv
429.52 15.961 429.504 16.012 429.488 16.047 cv
429.469 16.09 429.426 16.137 429.367 16.195 cv
429.301 16.258 429.195 16.332 429.047 16.414 cv
428.895 16.504 428.723 16.582 428.531 16.645 cv
428.34 16.715 428.133 16.766 427.906 16.809 cv
427.68 16.848 427.445 16.867 427.211 16.871 cv
426.672 16.867 426.199 16.789 425.785 16.621 cv
425.371 16.457 425.023 16.211 424.746 15.887 cv
424.461 15.562 424.25 15.168 424.109 14.699 cv
423.969 14.234 423.898 13.695 423.898 13.09 cv
423.898 12.395 423.984 11.797 424.156 11.289 cv
424.328 10.785 424.57 10.363 424.887 10.031 cv
425.195 9.69897 425.563 9.453 425.992 9.289 cv
426.414 9.12903 426.883 9.047 427.395 9.047 cv
427.602 9.047 427.805 9.06598 428.008 9.10199 cv
428.203 9.14099 428.391 9.19098 428.566 9.25 cv
428.738 9.31598 428.895 9.38702 429.035 9.461 cv
429.172 9.54303 429.27 9.60901 429.328 9.664 cv
429.383 9.72302 429.422 9.77002 429.449 9.80499 cv
429.469 9.84802 429.488 9.89801 429.504 9.95697 cv
429.516 10.023 429.527 10.102 429.535 10.187 cv
429.543 10.281 429.547 10.391 429.547 10.52 cv
429.547 10.824 429.52 11.035 429.469 11.156 cv
429.414 11.277 429.348 11.34 429.266 11.336 cv
429.176 11.34 429.082 11.305 428.984 11.23 cv
428.883 11.16 428.766 11.078 428.633 10.988 cv
428.5 10.902 428.34 10.82 428.152 10.746 cv
427.965 10.676 427.738 10.641 427.48 10.637 cv
426.969 10.641 426.582 10.836 426.313 11.227 cv
426.039 11.617 425.902 12.191 425.906 12.949 cv
425.902 13.324 425.938 13.656 426.008 13.941 cv
426.074 14.227 426.172 14.465 426.309 14.656 cv
426.438 14.852 426.605 14.996 426.809 15.09 cv
427.008 15.187 427.238 15.234 427.504 15.234 cv
427.77 15.234 428.004 15.195 428.203 15.113 cv
428.395 15.035 428.563 14.945 428.711 14.844 cv
428.852 14.746 428.977 14.656 429.078 14.574 cv
429.176 14.496 429.258 14.457 429.328 14.453 cv
429.371 14.457 429.41 14.469 429.445 14.492 cv
429.473 14.52 429.496 14.566 429.52 14.637 cv
429.535 14.707 429.551 14.797 429.563 14.906 cv
429.57 15.016 429.574 15.156 429.578 15.328 cv
cp
f
436.867 16.457 mo
436.863 16.535 436.836 16.59 436.789 16.629 cv
436.734 16.672 436.652 16.699 436.543 16.719 cv
436.426 16.734 436.262 16.746 436.047 16.746 cv
435.809 16.746 435.637 16.734 435.535 16.719 cv
435.426 16.699 435.352 16.672 435.313 16.629 cv
435.266 16.59 435.246 16.535 435.246 16.457 cv
435.246 15.906 li
434.957 16.215 434.629 16.453 434.266 16.621 cv
433.898 16.793 433.492 16.875 433.047 16.879 cv
432.676 16.875 432.336 16.828 432.027 16.734 cv
431.719 16.641 431.453 16.5 431.227 16.305 cv
431 16.117 430.824 15.883 430.699 15.602 cv
430.574 15.324 430.512 14.996 430.516 14.617 cv
430.512 14.219 430.59 13.867 430.75 13.562 cv
430.906 13.266 431.145 13.02 431.461 12.824 cv
431.773 12.633 432.164 12.488 432.633 12.391 cv
433.102 12.301 433.645 12.254 434.262 12.25 cv
434.941 12.25 li
434.941 11.828 li
434.941 11.613 434.918 11.422 434.875 11.258 cv
434.828 11.098 434.754 10.961 434.656 10.848 cv
434.551 10.742 434.418 10.66 434.25 10.605 cv
434.078 10.555 433.867 10.531 433.625 10.527 cv
433.293 10.531 433 10.566 432.746 10.637 cv
432.484 10.711 432.258 10.793 432.063 10.879 cv
431.863 10.973 431.699 11.051 431.57 11.121 cv
431.434 11.195 431.324 11.234 431.246 11.23 cv
431.184 11.234 431.133 11.215 431.094 11.176 cv
431.047 11.141 431.012 11.09 430.984 11.02 cv
430.953 10.957 430.93 10.871 430.918 10.77 cv
430.898 10.672 430.891 10.562 430.895 10.441 cv
430.891 10.281 430.906 10.156 430.934 10.059 cv
430.957 9.96899 431.004 9.883 431.082 9.80499 cv
431.152 9.72998 431.281 9.64801 431.465 9.55902 cv
431.645 9.46899 431.855 9.383 432.102 9.30499 cv
432.344 9.22699 432.613 9.164 432.902 9.11298 cv
433.191 9.06598 433.488 9.04303 433.797 9.039 cv
434.34 9.04303 434.805 9.09399 435.191 9.19897 cv
435.578 9.30902 435.898 9.47302 436.148 9.69098 cv
436.398 9.90997 436.578 10.195 436.695 10.543 cv
436.805 10.895 436.863 11.309 436.867 11.781 cv
cp
434.941 13.48 mo
434.191 13.48 li
433.875 13.484 433.605 13.508 433.383 13.551 cv
433.156 13.602 432.973 13.672 432.836 13.762 cv
432.691 13.859 432.59 13.973 432.527 14.102 cv
432.461 14.238 432.426 14.387 432.43 14.555 cv
432.426 14.848 432.52 15.078 432.707 15.242 cv
432.891 15.41 433.148 15.492 433.477 15.492 cv
433.75 15.492 434 15.422 434.234 15.281 cv
434.461 15.141 434.699 14.937 434.941 14.664 cv
cp
f
440.789 16.434 mo
440.785 16.488 440.77 16.531 440.742 16.57 cv
440.707 16.609 440.652 16.645 440.582 16.668 cv
440.504 16.695 440.406 16.711 440.281 16.727 cv
440.156 16.738 439.996 16.746 439.809 16.746 cv
439.613 16.746 439.457 16.738 439.332 16.727 cv
439.207 16.711 439.105 16.695 439.031 16.668 cv
438.953 16.645 438.898 16.609 438.871 16.57 cv
438.836 16.531 438.82 16.488 438.824 16.434 cv
438.824 6.18701 li
438.82 6.13702 438.836 6.09003 438.871 6.047 cv
438.898 6.008 438.953 5.97302 439.031 5.94098 cv
439.105 5.914 439.207 5.89502 439.332 5.875 cv
439.457 5.86298 439.613 5.85498 439.809 5.85199 cv
439.996 5.85498 440.156 5.86298 440.281 5.875 cv
440.406 5.89502 440.504 5.914 440.582 5.94098 cv
440.652 5.97302 440.707 6.008 440.742 6.047 cv
440.77 6.09003 440.785 6.13702 440.789 6.18701 cv
cp
f
458.277 16.418 mo
458.273 16.473 458.262 16.52 458.234 16.559 cv
458.203 16.602 458.148 16.637 458.078 16.66 cv
458 16.687 457.902 16.707 457.777 16.723 cv
457.652 16.738 457.492 16.746 457.301 16.746 cv
457.113 16.746 456.957 16.738 456.836 16.723 cv
456.707 16.707 456.609 16.687 456.539 16.66 cv
456.465 16.637 456.414 16.602 456.383 16.559 cv
456.352 16.52 456.336 16.473 456.336 16.418 cv
456.336 8.211 li
456.32 8.211 li
453.398 16.41 li
453.375 16.48 453.34 16.535 453.297 16.578 cv
453.246 16.625 453.184 16.66 453.105 16.684 cv
453.023 16.711 452.922 16.727 452.797 16.734 cv
452.672 16.742 452.52 16.746 452.348 16.746 cv
452.168 16.746 452.02 16.738 451.895 16.727 cv
451.77 16.711 451.664 16.691 451.586 16.664 cv
451.5 16.637 451.438 16.602 451.395 16.559 cv
451.344 16.52 451.313 16.473 451.301 16.41 cv
448.48 8.211 li
448.465 8.211 li
448.465 16.418 li
448.461 16.473 448.445 16.52 448.422 16.559 cv
448.391 16.602 448.34 16.637 448.262 16.66 cv
448.184 16.687 448.082 16.707 447.961 16.723 cv
447.836 16.738 447.68 16.746 447.492 16.746 cv
447.301 16.746 447.145 16.738 447.023 16.723 cv
446.895 16.707 446.793 16.687 446.723 16.66 cv
446.645 16.637 446.594 16.602 446.566 16.559 cv
446.535 16.52 446.52 16.473 446.523 16.418 cv
446.523 7.43402 li
446.52 7.172 446.59 6.96899 446.734 6.82397 cv
446.871 6.68701 447.059 6.617 447.297 6.61298 cv
448.637 6.61298 li
448.875 6.617 449.078 6.63702 449.25 6.672 cv
449.418 6.71503 449.566 6.77698 449.695 6.867 cv
449.816 6.961 449.922 7.08197 450.008 7.22699 cv
450.09 7.37903 450.16 7.56201 450.227 7.77698 cv
452.41 13.785 li
452.441 13.785 li
454.699 7.79303 li
454.766 7.57397 454.84 7.39099 454.922 7.23798 cv
455 7.09003 455.094 6.96899 455.203 6.87097 cv
455.309 6.78101 455.434 6.71503 455.578 6.672 cv
455.723 6.63702 455.891 6.617 456.086 6.61298 cv
457.465 6.61298 li
457.602 6.617 457.723 6.633 457.828 6.66803 cv
457.926 6.70697 458.008 6.76202 458.078 6.828 cv
458.141 6.90198 458.191 6.98798 458.227 7.086 cv
458.258 7.19098 458.273 7.30902 458.277 7.43402 cv
cp
f
467.387 12.887 mo
467.383 13.484 467.305 14.027 467.152 14.512 cv
466.992 15.004 466.758 15.422 466.441 15.773 cv
466.125 16.125 465.727 16.398 465.25 16.59 cv
464.77 16.781 464.211 16.875 463.574 16.879 cv
462.953 16.875 462.414 16.793 461.961 16.621 cv
461.5 16.453 461.121 16.203 460.824 15.875 cv
460.52 15.551 460.297 15.148 460.152 14.668 cv
460.008 14.191 459.938 13.645 459.938 13.027 cv
459.938 12.437 460.016 11.898 460.172 11.406 cv
460.328 10.918 460.566 10.496 460.887 10.145 cv
461.203 9.797 461.598 9.52301 462.074 9.328 cv
462.547 9.13702 463.105 9.04303 463.746 9.039 cv
464.371 9.04303 464.91 9.125 465.367 9.29303 cv
465.824 9.46503 466.203 9.71503 466.5 10.039 cv
466.797 10.367 467.02 10.77 467.168 11.246 cv
467.313 11.727 467.383 12.273 467.387 12.887 cv
cp
465.367 12.965 mo
465.363 12.629 465.336 12.312 465.285 12.02 cv
465.227 11.734 465.133 11.484 465.008 11.27 cv
464.875 11.059 464.703 10.891 464.492 10.77 cv
464.273 10.652 464.004 10.594 463.676 10.59 cv
463.387 10.594 463.133 10.648 462.914 10.75 cv
462.695 10.859 462.516 11.016 462.375 11.219 cv
462.234 11.426 462.129 11.672 462.059 11.957 cv
461.988 12.25 461.953 12.578 461.953 12.941 cv
461.953 13.289 461.98 13.605 462.039 13.891 cv
462.094 14.184 462.188 14.434 462.316 14.645 cv
462.441 14.859 462.613 15.023 462.836 15.137 cv
463.051 15.258 463.32 15.316 463.645 15.312 cv
463.938 15.316 464.195 15.262 464.418 15.152 cv
464.633 15.047 464.813 14.895 464.953 14.687 cv
465.094 14.488 465.195 14.242 465.266 13.953 cv
465.328 13.668 465.363 13.34 465.367 12.965 cv
cp
f
475.535 16.434 mo
475.531 16.496 475.52 16.543 475.496 16.578 cv
475.469 16.621 475.422 16.652 475.363 16.676 cv
475.297 16.699 475.215 16.715 475.109 16.73 cv
475.004 16.738 474.871 16.746 474.719 16.746 cv
474.547 16.746 474.414 16.738 474.313 16.73 cv
474.207 16.715 474.121 16.699 474.059 16.676 cv
473.992 16.652 473.945 16.621 473.918 16.578 cv
473.887 16.543 473.871 16.496 473.875 16.434 cv
473.875 15.664 li
473.516 16.051 473.141 16.348 472.75 16.559 cv
472.352 16.77 471.918 16.875 471.445 16.879 cv
470.91 16.875 470.461 16.773 470.098 16.57 cv
469.73 16.367 469.434 16.094 469.203 15.742 cv
468.969 15.398 468.801 14.992 468.699 14.523 cv
468.598 14.062 468.547 13.57 468.547 13.051 cv
468.547 12.437 468.609 11.883 468.742 11.387 cv
468.871 10.895 469.066 10.473 469.324 10.125 cv
469.578 9.77698 469.895 9.51202 470.273 9.32001 cv
470.652 9.13702 471.09 9.04303 471.586 9.039 cv
471.973 9.04303 472.324 9.12097 472.645 9.27698 cv
472.957 9.43701 473.273 9.66803 473.586 9.97302 cv
473.586 6.211 li
473.586 6.15997 473.598 6.11298 473.629 6.07001 cv
473.652 6.03101 473.707 5.99597 473.785 5.96503 cv
473.859 5.93701 473.957 5.91803 474.086 5.89801 cv
474.207 5.88702 474.367 5.87903 474.563 5.875 cv
474.754 5.87903 474.91 5.88702 475.035 5.89801 cv
475.156 5.91803 475.258 5.93701 475.332 5.96503 cv
475.402 5.99597 475.453 6.03101 475.488 6.07001 cv
475.516 6.11298 475.531 6.15997 475.535 6.211 cv
cp
473.586 11.789 mo
473.305 11.437 473.035 11.168 472.781 10.98 cv
472.52 10.793 472.25 10.699 471.973 10.699 cv
471.719 10.699 471.5 10.766 471.316 10.891 cv
471.129 11.023 470.98 11.191 470.871 11.402 cv
470.758 11.613 470.676 11.852 470.621 12.113 cv
470.566 12.379 470.539 12.648 470.539 12.918 cv
470.539 13.215 470.563 13.496 470.609 13.77 cv
470.656 14.047 470.73 14.293 470.84 14.508 cv
470.941 14.723 471.086 14.895 471.266 15.023 cv
471.441 15.156 471.664 15.223 471.934 15.219 cv
472.066 15.223 472.195 15.203 472.328 15.16 cv
472.453 15.125 472.586 15.062 472.719 14.969 cv
472.852 14.883 472.988 14.766 473.129 14.621 cv
473.27 14.48 473.422 14.305 473.586 14.098 cv
cp
f
483.934 12.758 mo
483.93 12.996 483.879 13.172 483.773 13.285 cv
483.664 13.402 483.516 13.461 483.336 13.457 cv
479.102 13.457 li
479.098 13.758 479.133 14.027 479.207 14.266 cv
479.273 14.508 479.387 14.711 479.543 14.879 cv
479.695 15.051 479.891 15.18 480.133 15.266 cv
480.371 15.355 480.66 15.398 481.004 15.398 cv
481.344 15.398 481.645 15.375 481.906 15.324 cv
482.164 15.277 482.391 15.223 482.582 15.16 cv
482.77 15.102 482.926 15.047 483.055 14.996 cv
483.176 14.949 483.277 14.926 483.359 14.922 cv
483.402 14.926 483.441 14.934 483.477 14.949 cv
483.504 14.969 483.531 15 483.551 15.047 cv
483.57 15.094 483.582 15.16 483.594 15.246 cv
483.598 15.332 483.602 15.441 483.605 15.57 cv
483.602 15.687 483.602 15.785 483.598 15.863 cv
483.59 15.945 483.582 16.012 483.574 16.066 cv
483.563 16.125 483.547 16.176 483.527 16.211 cv
483.508 16.254 483.48 16.289 483.449 16.324 cv
483.414 16.363 483.32 16.414 483.172 16.473 cv
483.016 16.539 482.824 16.602 482.594 16.656 cv
482.355 16.719 482.086 16.766 481.789 16.812 cv
481.484 16.852 481.164 16.875 480.824 16.879 cv
480.203 16.875 479.66 16.801 479.199 16.645 cv
478.73 16.492 478.344 16.254 478.035 15.937 cv
477.719 15.621 477.484 15.223 477.336 14.738 cv
477.18 14.258 477.105 13.691 477.109 13.035 cv
477.105 12.422 477.184 11.863 477.348 11.367 cv
477.504 10.871 477.738 10.453 478.051 10.105 cv
478.355 9.76202 478.73 9.49597 479.168 9.31201 cv
479.605 9.133 480.098 9.04303 480.652 9.039 cv
481.23 9.04303 481.73 9.12903 482.145 9.297 cv
482.559 9.47302 482.895 9.711 483.16 10.012 cv
483.422 10.316 483.617 10.676 483.746 11.09 cv
483.867 11.508 483.93 11.957 483.934 12.445 cv
cp
482.031 12.195 mo
482.043 11.645 481.934 11.211 481.699 10.898 cv
481.465 10.586 481.098 10.43 480.605 10.426 cv
480.355 10.43 480.141 10.477 479.957 10.566 cv
479.77 10.664 479.617 10.789 479.496 10.945 cv
479.371 11.105 479.277 11.293 479.215 11.508 cv
479.148 11.723 479.109 11.953 479.102 12.195 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
