%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AveragePreparationTimes-EightThreads.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 2:22:32 p.m.
%%BoundingBox: 0 0 675 555
%%HiResBoundingBox: 0 0 674.8801 554.5201
%%CropBox: 0 0 674.8801 554.5201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -554.52 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 554.52 li
674.88 554.52 li
674.88 0 li
cp
clp
gsave
0 554.52 mo
675 554.52 li
675 -.47998 li
0 -.47998 li
cp
clp
0 0 mo
674.879 0 li
674.879 554.52 li
0 554.52 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
57.602 489.359 mo
658.32 489.359 li
57.602 445.441 mo
658.32 445.441 li
57.602 401.52 mo
658.32 401.52 li
57.602 357.602 mo
658.32 357.602 li
57.602 313.68 mo
658.32 313.68 li
57.602 269.762 mo
658.32 269.762 li
57.602 225.84 mo
658.32 225.84 li
57.602 181.922 mo
658.32 181.922 li
57.602 138 mo
658.32 138 li
57.602 94.078 mo
658.32 94.078 li
57.602 50.281 mo
658.32 50.281 li
.135805 .104005 .108583 0 cmyk
@
57.602 467.398 mo
658.32 467.398 li
57.602 423.48 mo
658.32 423.48 li
57.602 379.559 mo
658.32 379.559 li
57.602 335.641 mo
658.32 335.641 li
57.602 291.719 mo
658.32 291.719 li
57.602 247.801 mo
658.32 247.801 li
57.602 203.879 mo
658.32 203.879 li
57.602 159.961 mo
658.32 159.961 li
57.602 116.039 mo
658.32 116.039 li
57.602 72.121 mo
658.32 72.121 li
57.602 28.32 mo
658.32 28.32 li
.326574 .281529 .277562 0 cmyk
@
95.16 28.32 mo
95.16 511.32 li
170.281 28.32 mo
170.281 511.32 li
245.398 28.32 mo
245.398 511.32 li
320.398 28.32 mo
320.398 511.32 li
395.52 28.32 mo
395.52 511.32 li
470.641 28.32 mo
470.641 511.32 li
545.762 28.32 mo
545.762 511.32 li
620.762 28.32 mo
620.762 511.32 li
.175235 .144778 .143648 0 cmyk
@
57.602 28.32 mo
57.602 511.32 li
132.719 28.32 mo
132.719 511.32 li
207.84 28.32 mo
207.84 511.32 li
282.961 28.32 mo
282.961 511.32 li
357.961 28.32 mo
357.961 511.32 li
433.078 28.32 mo
433.078 511.32 li
508.199 28.32 mo
508.199 511.32 li
583.199 28.32 mo
583.199 511.32 li
658.32 28.32 mo
658.32 511.32 li
.326574 .281529 .277562 0 cmyk
@
37.559 501.961 mo
44.641 501.961 li
44.641 519 li
37.559 519 li
cp
0 0 0 0 cmyk
ef
30.48 458.039 mo
44.64 458.039 li
44.64 475.199 li
30.48 475.199 li
cp
ef
30.48 414.121 mo
44.64 414.121 li
44.64 431.281 li
30.48 431.281 li
cp
ef
30.48 370.199 mo
44.64 370.199 li
44.64 387.359 li
30.48 387.359 li
cp
ef
30.48 326.281 mo
44.64 326.281 li
44.64 343.441 li
30.48 343.441 li
cp
ef
30.48 282.359 mo
44.64 282.359 li
44.64 299.519 li
30.48 299.519 li
cp
ef
30.48 238.441 mo
44.64 238.441 li
44.64 255.601 li
30.48 255.601 li
cp
ef
30.48 194.641 mo
44.64 194.641 li
44.64 211.68 li
30.48 211.68 li
cp
ef
30.48 150.719 mo
44.64 150.719 li
44.64 167.762 li
30.48 167.762 li
cp
ef
30.48 106.801 mo
44.64 106.801 li
44.64 123.84 li
30.48 123.84 li
cp
ef
23.398 62.879 mo
44.64 62.879 li
44.64 79.922 li
23.398 79.922 li
cp
ef
23.398 18.961 mo
44.64 18.961 li
44.64 36 li
23.398 36 li
cp
ef
.96 lw
57.602 511.32 mo
658.32 511.32 li
.369879 .299321 .304356 .000976577 cmyk
@
57.602 511.32 mo
57.602 515.762 li
132.719 511.32 mo
132.719 515.762 li
207.84 511.32 mo
207.84 515.762 li
282.961 511.32 mo
282.961 515.762 li
357.961 511.32 mo
357.961 515.762 li
433.078 511.32 mo
433.078 515.762 li
508.199 511.32 mo
508.199 515.762 li
583.199 511.32 mo
583.199 515.762 li
658.32 511.32 mo
658.32 515.762 li
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
1 lc
57.602 480.602 mo
132.719 495.602 li
207.84 503.16 li
282.961 504.84 li
357.961 506.039 li
433.078 507.238 li
508.199 508.078 li
583.199 508.559 li
658.32 509.039 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
62.602 485.488 mo
52.52 475.41 li
52.52 485.488 mo
62.602 475.41 li
.62829 .284672 0 0 cmyk
@
137.719 500.609 mo
127.641 490.531 li
127.641 500.609 mo
137.719 490.531 li
@
212.719 508.172 mo
202.641 498.09 li
202.641 508.172 mo
212.719 498.09 li
@
287.84 509.73 mo
277.762 499.648 li
277.762 509.73 mo
287.84 499.648 li
@
362.961 511.051 mo
352.879 500.969 li
352.879 511.051 mo
362.961 500.969 li
@
437.961 512.25 mo
427.879 502.172 li
427.879 512.25 mo
437.961 502.172 li
@
513.078 512.969 mo
503 502.891 li
503 512.969 mo
513.078 502.891 li
@
588.199 513.57 mo
578.121 503.488 li
578.121 513.57 mo
588.199 503.488 li
@
663.32 513.93 mo
653.238 503.852 li
653.238 513.93 mo
663.32 503.852 li
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
57.602 480.121 mo
132.719 495.48 li
207.84 503.281 li
282.961 503.52 li
357.961 503.398 li
433.078 505.199 li
508.199 505.922 li
583.199 506.398 li
658.32 506.398 li
@
grestore
52.52 474.93 mo
62.481 474.93 li
62.481 484.891 li
52.52 484.891 li
cp
@
127.641 490.289 mo
137.602 490.289 li
137.602 500.25 li
127.641 500.25 li
cp
@
202.641 498.211 mo
212.602 498.211 li
212.602 508.172 li
202.641 508.172 li
cp
@
277.762 498.328 mo
287.719 498.328 li
287.719 508.289 li
277.762 508.289 li
cp
@
352.879 498.211 mo
362.84 498.211 li
362.84 508.172 li
352.879 508.172 li
cp
@
427.879 500.012 mo
437.84 500.012 li
437.84 509.969 li
427.879 509.969 li
cp
@
503 500.73 mo
512.961 500.73 li
512.961 510.691 li
503 510.691 li
cp
@
578.121 501.211 mo
588.078 501.211 li
588.078 511.172 li
578.121 511.172 li
cp
@
653.238 501.211 mo
663.199 501.211 li
663.199 511.172 li
653.238 511.172 li
cp
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
57.602 431.16 mo
132.719 470.52 li
207.84 490.441 li
282.961 497.281 li
357.961 500.762 li
433.078 501 li
508.199 504.719 li
583.199 504.359 li
658.32 505.559 li
.467353 0 .87747 0 cmyk
@
grestore
62.602 436.172 mo
52.52 426.09 li
52.52 436.172 mo
62.602 426.09 li
.467353 0 .87747 0 cmyk
@
137.719 475.531 mo
127.641 465.449 li
127.641 475.531 mo
137.719 465.449 li
@
212.719 495.449 mo
202.641 485.371 li
202.641 495.449 mo
212.719 485.371 li
@
287.84 502.289 mo
277.762 492.211 li
277.762 502.289 mo
287.84 492.211 li
@
362.961 505.77 mo
352.879 495.691 li
352.879 505.77 mo
362.961 495.691 li
@
437.961 505.891 mo
427.879 495.809 li
427.879 505.891 mo
437.961 495.809 li
@
513.078 509.73 mo
503 499.648 li
503 509.73 mo
513.078 499.648 li
@
588.199 509.25 mo
578.121 499.172 li
578.121 509.25 mo
588.199 499.172 li
@
663.32 510.449 mo
653.238 500.371 li
653.238 510.449 mo
663.32 500.371 li
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
57.602 430.078 mo
132.719 470.039 li
207.84 490.32 li
282.961 494.398 li
357.961 490.68 li
433.078 495.238 li
508.199 499.68 li
583.199 498.359 li
658.32 498.48 li
@
grestore
52.52 425.012 mo
62.481 425.012 li
62.481 434.969 li
52.52 434.969 li
cp
@
127.641 464.969 mo
137.602 464.969 li
137.602 474.93 li
127.641 474.93 li
cp
@
202.641 485.25 mo
212.602 485.25 li
212.602 495.211 li
202.641 495.211 li
cp
@
277.762 489.211 mo
287.719 489.211 li
287.719 499.172 li
277.762 499.172 li
cp
@
352.879 485.488 mo
362.84 485.488 li
362.84 495.449 li
352.879 495.449 li
cp
@
427.879 490.172 mo
437.84 490.172 li
437.84 500.129 li
427.879 500.129 li
cp
@
503 494.609 mo
512.961 494.609 li
512.961 504.57 li
503 504.57 li
cp
@
578.121 493.172 mo
588.078 493.172 li
588.078 503.129 li
578.121 503.129 li
cp
@
653.238 493.41 mo
663.199 493.41 li
663.199 503.371 li
653.238 503.371 li
cp
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
57.602 244.559 mo
132.719 376.078 li
207.84 442.441 li
282.961 465.238 li
357.961 476.762 li
433.078 484.801 li
508.199 489.719 li
583.199 490.922 li
658.32 492.359 li
0 .993988 1 0 cmyk
@
grestore
62.602 249.57 mo
52.52 239.488 li
52.52 249.57 mo
62.602 239.488 li
0 .993988 1 0 cmyk
@
137.719 380.969 mo
127.641 370.891 li
127.641 380.969 mo
137.719 370.891 li
@
212.719 447.328 mo
202.641 437.25 li
202.641 447.328 mo
212.719 437.25 li
@
287.84 470.25 mo
277.762 460.172 li
277.762 470.25 mo
287.84 460.172 li
@
362.961 481.77 mo
352.879 471.691 li
352.879 481.77 mo
362.961 471.691 li
@
437.961 489.691 mo
427.879 479.609 li
427.879 489.691 mo
437.961 479.609 li
@
513.078 494.73 mo
503 484.648 li
503 494.73 mo
513.078 484.648 li
@
588.199 495.93 mo
578.121 485.852 li
578.121 495.93 mo
588.199 485.852 li
@
663.32 497.25 mo
653.238 487.172 li
653.238 497.25 mo
663.32 487.172 li
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
57.602 241.32 mo
132.719 374.281 li
207.84 442.32 li
282.961 442.441 li
357.961 442.559 li
433.078 462.238 li
508.199 472.32 li
583.199 473.039 li
658.32 477.359 li
@
grestore
52.52 236.129 mo
62.481 236.129 li
62.481 246.09 li
52.52 246.09 li
cp
@
127.641 369.211 mo
137.602 369.211 li
137.602 379.172 li
127.641 379.172 li
cp
@
202.641 437.25 mo
212.602 437.25 li
212.602 447.211 li
202.641 447.211 li
cp
@
277.762 437.371 mo
287.719 437.371 li
287.719 447.328 li
277.762 447.328 li
cp
@
352.879 437.371 mo
362.84 437.371 li
362.84 447.328 li
352.879 447.328 li
cp
@
427.879 457.172 mo
437.84 457.172 li
437.84 467.129 li
427.879 467.129 li
cp
@
503 467.25 mo
512.961 467.25 li
512.961 477.211 li
503 477.211 li
cp
@
578.121 467.852 mo
588.078 467.852 li
588.078 477.809 li
578.121 477.809 li
cp
@
653.238 472.172 mo
663.199 472.172 li
663.199 482.129 li
653.238 482.129 li
cp
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.602 338.52 mo
132.719 423.602 li
207.84 466.559 li
282.961 481.32 li
357.961 488.879 li
433.078 494.039 li
508.199 497.281 li
583.199 496.32 li
658.32 498.961 li
.62829 .284672 0 0 cmyk
@
grestore
62.602 343.41 mo
52.52 333.328 li
52.52 343.41 mo
62.602 333.328 li
.62829 .284672 0 0 cmyk
@
137.719 428.609 mo
127.641 418.531 li
127.641 428.609 mo
137.719 418.531 li
@
212.719 471.449 mo
202.641 461.371 li
202.641 471.449 mo
212.719 461.371 li
@
287.84 486.328 mo
277.762 476.25 li
277.762 486.328 mo
287.84 476.25 li
@
362.961 493.77 mo
352.879 483.691 li
352.879 493.77 mo
362.961 483.691 li
@
437.961 498.93 mo
427.879 488.852 li
427.879 498.93 mo
437.961 488.852 li
@
513.078 502.172 mo
503 492.09 li
503 502.172 mo
513.078 492.09 li
@
588.199 501.328 mo
578.121 491.25 li
578.121 501.328 mo
588.199 491.25 li
@
663.32 503.969 mo
653.238 493.891 li
653.238 503.969 mo
663.32 493.891 li
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.602 335.52 mo
132.719 422.398 li
207.84 466.32 li
282.961 466.922 li
357.961 469.68 li
433.078 479.52 li
508.199 485.879 li
583.199 488.398 li
658.32 489.602 li
@
grestore
52.52 330.449 mo
62.481 330.449 li
62.481 340.41 li
52.52 340.41 li
cp
@
127.641 417.211 mo
137.602 417.211 li
137.602 427.172 li
127.641 427.172 li
cp
@
202.641 461.25 mo
212.602 461.25 li
212.602 471.211 li
202.641 471.211 li
cp
@
277.762 461.852 mo
287.719 461.852 li
287.719 471.809 li
277.762 471.809 li
cp
@
352.879 464.609 mo
362.84 464.609 li
362.84 474.57 li
352.879 474.57 li
cp
@
427.879 474.328 mo
437.84 474.328 li
437.84 484.289 li
427.879 484.289 li
cp
@
503 480.809 mo
512.961 480.809 li
512.961 490.77 li
503 490.77 li
cp
@
578.121 483.211 mo
588.078 483.211 li
588.078 493.172 li
578.121 493.172 li
cp
@
653.238 484.531 mo
663.199 484.531 li
663.199 494.488 li
653.238 494.488 li
cp
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.602 41.039 mo
132.719 273.602 li
207.84 390.121 li
282.961 414.602 li
357.961 450.84 li
433.078 464.641 li
508.199 462.961 li
583.199 475.68 li
658.32 477.84 li
.467353 0 .87747 0 cmyk
@
grestore
62.602 45.93 mo
52.52 35.852 li
52.52 45.93 mo
62.602 35.852 li
.467353 0 .87747 0 cmyk
@
137.719 278.609 mo
127.641 268.531 li
127.641 278.609 mo
137.719 268.531 li
@
212.719 395.129 mo
202.641 385.051 li
202.641 395.129 mo
212.719 385.051 li
@
287.84 419.609 mo
277.762 409.531 li
277.762 419.609 mo
287.84 409.531 li
@
362.961 455.73 mo
352.879 445.648 li
352.879 455.73 mo
362.961 445.648 li
@
437.961 469.531 mo
427.879 459.449 li
427.879 469.531 mo
437.961 459.449 li
@
513.078 467.852 mo
503 457.77 li
503 467.852 mo
513.078 457.77 li
@
588.199 480.57 mo
578.121 470.488 li
578.121 480.57 mo
588.199 470.488 li
@
663.32 482.852 mo
653.238 472.77 li
653.238 482.852 mo
663.32 472.77 li
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.602 35.16 mo
132.719 270 li
207.84 390.121 li
282.961 393 li
357.961 389.879 li
433.078 433.078 li
508.199 443.879 li
583.199 451.199 li
658.32 458.039 li
@
grestore
52.52 29.969 mo
62.481 29.969 li
62.481 39.93 li
52.52 39.93 li
cp
@
127.641 264.93 mo
137.602 264.93 li
137.602 274.891 li
127.641 274.891 li
cp
@
202.641 384.93 mo
212.602 384.93 li
212.602 394.891 li
202.641 394.891 li
cp
@
277.762 387.93 mo
287.719 387.93 li
287.719 397.891 li
277.762 397.891 li
cp
@
352.879 384.691 mo
362.84 384.691 li
362.84 394.648 li
352.879 394.648 li
cp
@
427.879 428.012 mo
437.84 428.012 li
437.84 437.969 li
427.879 437.969 li
cp
@
503 438.691 mo
512.961 438.691 li
512.961 448.648 li
503 448.648 li
cp
@
578.121 446.129 mo
588.078 446.129 li
588.078 456.09 li
578.121 456.09 li
cp
@
653.238 452.852 mo
663.199 452.852 li
663.199 462.809 li
653.238 462.809 li
cp
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.602 148.32 mo
132.719 327.238 li
207.84 417.48 li
282.961 436.441 li
357.961 464.398 li
433.078 475.078 li
508.199 481.922 li
583.199 483.602 li
658.32 485.52 li
0 .993988 1 0 cmyk
@
grestore
62.602 153.328 mo
52.52 143.25 li
52.52 153.328 mo
62.602 143.25 li
0 .993988 1 0 cmyk
@
137.719 332.25 mo
127.641 322.172 li
127.641 332.25 mo
137.719 322.172 li
@
212.719 422.488 mo
202.641 412.41 li
202.641 422.488 mo
212.719 412.41 li
@
287.84 441.328 mo
277.762 431.25 li
277.762 441.328 mo
287.84 431.25 li
@
362.961 469.41 mo
352.879 459.328 li
352.879 469.41 mo
362.961 459.328 li
@
437.961 479.969 mo
427.879 469.891 li
427.879 479.969 mo
437.961 469.891 li
@
513.078 486.93 mo
503 476.852 li
503 486.93 mo
513.078 476.852 li
@
588.199 488.609 mo
578.121 478.531 li
578.121 488.609 mo
588.199 478.531 li
@
663.32 490.41 mo
653.238 480.328 li
653.238 490.41 mo
663.32 480.328 li
@
gsave
57.602 28.199 mo
659.04 28.199 li
659.04 511.922 li
57.602 511.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.602 137.16 mo
132.719 324.602 li
207.84 417.48 li
282.961 417.602 li
357.961 419.52 li
433.078 444.238 li
508.199 459.238 li
583.199 465 li
658.32 469.68 li
@
grestore
52.52 132.09 mo
62.481 132.09 li
62.481 142.051 li
52.52 142.051 li
cp
@
127.641 319.41 mo
137.602 319.41 li
137.602 329.371 li
127.641 329.371 li
cp
@
202.641 412.41 mo
212.602 412.41 li
212.602 422.371 li
202.641 422.371 li
cp
@
277.762 412.41 mo
287.719 412.41 li
287.719 422.371 li
277.762 422.371 li
cp
@
352.879 414.328 mo
362.84 414.328 li
362.84 424.289 li
352.879 424.289 li
cp
@
427.879 439.172 mo
437.84 439.172 li
437.84 449.129 li
427.879 449.129 li
cp
@
503 454.172 mo
512.961 454.172 li
512.961 464.129 li
503 464.129 li
cp
@
578.121 459.93 mo
588.078 459.93 li
588.078 469.891 li
578.121 469.891 li
cp
@
653.238 464.609 mo
663.199 464.609 li
663.199 474.57 li
653.238 474.57 li
cp
@
37.527 501.93 mo
44.621 501.93 li
44.621 519.02 li
37.527 519.02 li
cp
0 0 0 0 cmyk
ef
44.164 510.895 mo
44.16 511.578 44.109 512.199 44.004 512.762 cv
43.895 513.324 43.715 513.809 43.469 514.211 cv
43.215 514.617 42.887 514.93 42.488 515.148 cv
42.082 515.371 41.59 515.48 41.004 515.48 cv
40.445 515.48 39.973 515.383 39.594 515.184 cv
39.211 514.988 38.906 514.695 38.672 514.309 cv
38.438 513.922 38.27 513.449 38.176 512.883 cv
38.074 512.32 38.027 511.672 38.027 510.937 cv
38.027 510.266 38.082 509.645 38.191 509.078 cv
38.301 508.516 38.477 508.031 38.727 507.625 cv
38.969 507.223 39.293 506.91 39.699 506.684 cv
40.098 506.465 40.594 506.352 41.184 506.352 cv
41.742 506.352 42.215 506.453 42.598 506.648 cv
42.98 506.852 43.285 507.145 43.52 507.527 cv
43.75 507.918 43.918 508.391 44.016 508.953 cv
44.113 509.516 44.16 510.164 44.164 510.895 cv
cp
42.957 510.977 mo
42.953 510.535 42.938 510.137 42.91 509.785 cv
42.875 509.434 42.828 509.125 42.77 508.855 cv
42.703 508.586 42.625 508.355 42.527 508.16 cv
42.43 507.969 42.313 507.809 42.176 507.68 cv
42.035 507.555 41.875 507.461 41.703 507.402 cv
41.523 507.348 41.328 507.32 41.113 507.316 cv
40.723 507.32 40.406 507.41 40.168 507.594 cv
39.922 507.777 39.73 508.031 39.594 508.348 cv
39.453 508.668 39.359 509.039 39.309 509.469 cv
39.258 509.898 39.234 510.363 39.234 510.855 cv
39.234 511.52 39.266 512.082 39.336 512.543 cv
39.402 513.012 39.512 513.391 39.664 513.68 cv
39.809 513.977 40 514.187 40.23 514.316 cv
40.461 514.453 40.742 514.52 41.074 514.516 cv
41.328 514.52 41.551 514.48 41.746 514.395 cv
41.938 514.316 42.105 514.195 42.246 514.039 cv
42.387 513.887 42.5 513.703 42.594 513.488 cv
42.68 513.273 42.754 513.035 42.813 512.773 cv
42.863 512.516 42.902 512.234 42.926 511.93 cv
42.945 511.625 42.953 511.309 42.957 510.977 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
30.43 458.02 mo
44.621 458.02 li
44.621 475.11 li
30.43 475.11 li
cp
0 0 0 0 cmyk
ef
36.789 470.965 mo
36.785 471.055 36.777 471.125 36.766 471.184 cv
36.75 471.246 36.73 471.297 36.711 471.328 cv
36.688 471.367 36.664 471.391 36.633 471.406 cv
36.602 471.422 36.57 471.43 36.543 471.43 cv
31.906 471.43 li
31.871 471.43 31.844 471.422 31.816 471.406 cv
31.789 471.391 31.762 471.367 31.738 471.328 cv
31.711 471.297 31.691 471.246 31.68 471.184 cv
31.664 471.125 31.656 471.055 31.66 470.965 cv
31.656 470.887 31.664 470.812 31.68 470.75 cv
31.691 470.691 31.707 470.645 31.73 470.605 cv
31.746 470.57 31.773 470.539 31.805 470.516 cv
31.836 470.496 31.867 470.488 31.906 470.484 cv
33.758 470.484 li
33.758 463.738 li
32.043 464.758 li
31.953 464.809 31.883 464.836 31.836 464.844 cv
31.781 464.852 31.738 464.844 31.707 464.812 cv
31.672 464.785 31.652 464.734 31.641 464.664 cv
31.629 464.598 31.621 464.512 31.625 464.402 cv
31.621 464.328 31.625 464.262 31.637 464.203 cv
31.641 464.152 31.652 464.105 31.668 464.066 cv
31.68 464.031 31.699 464 31.723 463.973 cv
31.746 463.945 31.777 463.918 31.824 463.891 cv
33.867 462.578 li
33.883 462.566 33.902 462.555 33.934 462.547 cv
33.957 462.539 33.992 462.531 34.039 462.52 cv
34.078 462.512 34.129 462.504 34.184 462.5 cv
34.238 462.5 34.305 462.5 34.391 462.496 cv
34.496 462.5 34.59 462.504 34.664 462.512 cv
34.734 462.52 34.789 462.535 34.836 462.551 cv
34.875 462.57 34.902 462.59 34.918 462.613 cv
34.926 462.641 34.934 462.664 34.938 462.687 cv
34.938 470.484 li
36.543 470.484 li
36.578 470.488 36.613 470.496 36.645 470.516 cv
36.676 470.539 36.699 470.57 36.723 470.605 cv
36.738 470.645 36.754 470.691 36.77 470.75 cv
36.777 470.812 36.785 470.887 36.789 470.965 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.141 466.973 mo
44.137 467.656 44.086 468.277 43.98 468.84 cv
43.871 469.402 43.691 469.887 43.445 470.289 cv
43.191 470.695 42.863 471.008 42.465 471.227 cv
42.059 471.449 41.566 471.559 40.98 471.559 cv
40.422 471.559 39.949 471.461 39.57 471.262 cv
39.188 471.066 38.883 470.773 38.648 470.387 cv
38.414 470 38.246 469.527 38.152 468.961 cv
38.051 468.398 38.004 467.75 38.004 467.016 cv
38.004 466.344 38.059 465.723 38.168 465.156 cv
38.277 464.594 38.453 464.109 38.703 463.703 cv
38.945 463.301 39.27 462.988 39.676 462.762 cv
40.074 462.543 40.57 462.43 41.16 462.43 cv
41.719 462.43 42.191 462.531 42.574 462.727 cv
42.957 462.93 43.262 463.223 43.496 463.605 cv
43.727 463.996 43.895 464.469 43.992 465.031 cv
44.09 465.594 44.137 466.242 44.141 466.973 cv
cp
42.934 467.055 mo
42.93 466.613 42.914 466.215 42.887 465.863 cv
42.852 465.512 42.805 465.203 42.746 464.934 cv
42.68 464.664 42.602 464.434 42.504 464.238 cv
42.406 464.047 42.289 463.887 42.152 463.758 cv
42.012 463.633 41.852 463.539 41.68 463.48 cv
41.5 463.426 41.305 463.398 41.09 463.395 cv
40.699 463.398 40.383 463.488 40.145 463.672 cv
39.898 463.855 39.707 464.109 39.57 464.426 cv
39.43 464.746 39.336 465.117 39.285 465.547 cv
39.234 465.977 39.211 466.441 39.211 466.934 cv
39.211 467.598 39.242 468.16 39.313 468.621 cv
39.379 469.09 39.488 469.469 39.641 469.758 cv
39.785 470.055 39.977 470.266 40.207 470.395 cv
40.438 470.531 40.719 470.598 41.051 470.594 cv
41.305 470.598 41.527 470.559 41.723 470.473 cv
41.914 470.395 42.082 470.273 42.223 470.117 cv
42.363 469.965 42.477 469.781 42.57 469.566 cv
42.656 469.352 42.73 469.113 42.789 468.852 cv
42.84 468.594 42.879 468.312 42.902 468.008 cv
42.922 467.703 42.93 467.387 42.934 467.055 cv
cp
f
30.43 414.109 mo
44.621 414.109 li
44.621 431.199 li
30.43 431.199 li
cp
0 0 0 0 cmyk
ef
36.77 427.004 mo
36.766 427.09 36.762 427.164 36.75 427.227 cv
36.738 427.293 36.723 427.348 36.703 427.387 cv
36.68 427.434 36.652 427.465 36.621 427.48 cv
36.586 427.504 36.547 427.512 36.508 427.512 cv
31.605 427.512 li
31.543 427.512 31.484 427.504 31.438 427.488 cv
31.387 427.473 31.348 427.449 31.313 427.41 cv
31.277 427.379 31.25 427.324 31.238 427.254 cv
31.219 427.184 31.211 427.098 31.215 426.996 cv
31.211 426.906 31.215 426.828 31.223 426.758 cv
31.227 426.691 31.242 426.633 31.27 426.578 cv
31.293 426.527 31.324 426.473 31.359 426.418 cv
31.395 426.367 31.438 426.312 31.496 426.25 cv
33.27 424.426 li
33.68 424.008 34.008 423.633 34.258 423.297 cv
34.504 422.969 34.695 422.664 34.828 422.387 cv
34.961 422.113 35.047 421.863 35.094 421.637 cv
35.133 421.414 35.156 421.203 35.156 421.008 cv
35.156 420.812 35.121 420.629 35.055 420.449 cv
34.988 420.277 34.895 420.121 34.77 419.984 cv
34.645 419.855 34.488 419.75 34.301 419.668 cv
34.113 419.594 33.895 419.555 33.648 419.551 cv
33.359 419.555 33.102 419.594 32.875 419.668 cv
32.645 419.75 32.445 419.836 32.273 419.922 cv
32.102 420.016 31.957 420.098 31.84 420.176 cv
31.723 420.254 31.637 420.293 31.586 420.293 cv
31.551 420.293 31.52 420.285 31.496 420.266 cv
31.465 420.25 31.445 420.219 31.43 420.176 cv
31.414 420.137 31.398 420.082 31.391 420.012 cv
31.379 419.945 31.375 419.863 31.379 419.766 cv
31.375 419.699 31.379 419.641 31.387 419.59 cv
31.391 419.539 31.398 419.496 31.41 419.457 cv
31.418 419.422 31.434 419.387 31.453 419.355 cv
31.473 419.324 31.508 419.285 31.566 419.234 cv
31.617 419.187 31.711 419.121 31.848 419.039 cv
31.98 418.957 32.152 418.879 32.355 418.797 cv
32.559 418.719 32.781 418.648 33.027 418.594 cv
33.27 418.539 33.527 418.512 33.801 418.512 cv
34.227 418.512 34.602 418.574 34.926 418.695 cv
35.246 418.816 35.512 418.98 35.727 419.191 cv
35.938 419.402 36.098 419.648 36.203 419.922 cv
36.309 420.203 36.363 420.5 36.363 420.812 cv
36.363 421.102 36.336 421.383 36.285 421.66 cv
36.234 421.945 36.129 422.25 35.969 422.574 cv
35.805 422.902 35.57 423.266 35.266 423.664 cv
34.957 424.066 34.551 424.527 34.047 425.043 cv
32.641 426.512 li
36.5 426.512 li
36.531 426.516 36.566 426.527 36.605 426.543 cv
36.637 426.566 36.668 426.598 36.695 426.637 cv
36.719 426.68 36.738 426.73 36.75 426.789 cv
36.762 426.855 36.766 426.926 36.77 427.004 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.141 423.055 mo
44.137 423.738 44.086 424.359 43.98 424.922 cv
43.871 425.484 43.691 425.969 43.445 426.371 cv
43.191 426.777 42.863 427.09 42.465 427.309 cv
42.059 427.531 41.566 427.641 40.98 427.641 cv
40.422 427.641 39.949 427.543 39.57 427.344 cv
39.188 427.148 38.883 426.855 38.648 426.469 cv
38.414 426.082 38.246 425.609 38.152 425.043 cv
38.051 424.48 38.004 423.832 38.004 423.098 cv
38.004 422.426 38.059 421.805 38.168 421.238 cv
38.277 420.676 38.453 420.191 38.703 419.785 cv
38.945 419.383 39.27 419.07 39.676 418.844 cv
40.074 418.625 40.57 418.512 41.16 418.512 cv
41.719 418.512 42.191 418.613 42.574 418.809 cv
42.957 419.012 43.262 419.305 43.496 419.687 cv
43.727 420.078 43.895 420.551 43.992 421.113 cv
44.09 421.676 44.137 422.324 44.141 423.055 cv
cp
42.934 423.137 mo
42.93 422.695 42.914 422.297 42.887 421.945 cv
42.852 421.594 42.805 421.285 42.746 421.016 cv
42.68 420.746 42.602 420.516 42.504 420.32 cv
42.406 420.129 42.289 419.969 42.152 419.84 cv
42.012 419.715 41.852 419.621 41.68 419.562 cv
41.5 419.508 41.305 419.48 41.09 419.477 cv
40.699 419.48 40.383 419.57 40.145 419.754 cv
39.898 419.937 39.707 420.191 39.57 420.508 cv
39.43 420.828 39.336 421.199 39.285 421.629 cv
39.234 422.059 39.211 422.523 39.211 423.016 cv
39.211 423.68 39.242 424.242 39.313 424.703 cv
39.379 425.172 39.488 425.551 39.641 425.84 cv
39.785 426.137 39.977 426.348 40.207 426.477 cv
40.438 426.613 40.719 426.68 41.051 426.676 cv
41.305 426.68 41.527 426.641 41.723 426.555 cv
41.914 426.477 42.082 426.355 42.223 426.199 cv
42.363 426.047 42.477 425.863 42.57 425.648 cv
42.656 425.434 42.73 425.195 42.789 424.934 cv
42.84 424.676 42.879 424.395 42.902 424.09 cv
42.922 423.785 42.93 423.469 42.934 423.137 cv
cp
f
30.43 370.199 mo
44.621 370.199 li
44.621 387.289 li
30.43 387.289 li
cp
0 0 0 0 cmyk
ef
36.699 381.055 mo
36.695 381.465 36.625 381.832 36.484 382.156 cv
36.34 382.484 36.137 382.766 35.875 382.996 cv
35.609 383.23 35.281 383.406 34.895 383.531 cv
34.504 383.656 34.066 383.719 33.582 383.719 cv
33.277 383.719 33 383.691 32.746 383.645 cv
32.484 383.598 32.254 383.547 32.059 383.477 cv
31.855 383.414 31.691 383.344 31.559 383.273 cv
31.426 383.203 31.34 383.152 31.309 383.117 cv
31.27 383.09 31.246 383.059 31.23 383.023 cv
31.211 382.992 31.191 382.953 31.18 382.906 cv
31.164 382.863 31.156 382.809 31.148 382.738 cv
31.141 382.676 31.137 382.594 31.141 382.492 cv
31.137 382.332 31.152 382.219 31.188 382.152 cv
31.219 382.09 31.266 382.055 31.328 382.055 cv
31.371 382.055 31.453 382.094 31.578 382.164 cv
31.699 382.242 31.859 382.32 32.055 382.402 cv
32.246 382.488 32.473 382.566 32.738 382.637 cv
32.996 382.711 33.289 382.746 33.609 382.746 cv
33.918 382.746 34.188 382.707 34.426 382.629 cv
34.656 382.551 34.855 382.441 35.016 382.301 cv
35.172 382.16 35.289 381.992 35.371 381.797 cv
35.449 381.602 35.488 381.391 35.492 381.164 cv
35.488 380.914 35.438 380.687 35.34 380.484 cv
35.234 380.285 35.086 380.113 34.895 379.965 cv
34.695 379.82 34.457 379.707 34.172 379.629 cv
33.887 379.551 33.563 379.512 33.199 379.512 cv
32.328 379.512 li
32.285 379.512 32.25 379.504 32.215 379.488 cv
32.18 379.473 32.148 379.445 32.125 379.406 cv
32.098 379.371 32.078 379.324 32.063 379.266 cv
32.047 379.207 32.039 379.129 32.039 379.031 cv
32.039 378.945 32.043 378.875 32.059 378.816 cv
32.066 378.762 32.086 378.715 32.117 378.68 cv
32.141 378.645 32.172 378.621 32.203 378.602 cv
32.234 378.59 32.27 378.582 32.313 378.578 cv
33.086 378.578 li
33.387 378.582 33.656 378.543 33.898 378.461 cv
34.133 378.387 34.336 378.273 34.508 378.125 cv
34.672 377.98 34.801 377.805 34.891 377.602 cv
34.98 377.398 35.027 377.172 35.027 376.918 cv
35.027 376.738 34.996 376.562 34.938 376.395 cv
34.875 376.23 34.785 376.086 34.668 375.961 cv
34.547 375.836 34.395 375.738 34.215 375.668 cv
34.027 375.598 33.816 375.562 33.574 375.562 cv
33.309 375.562 33.063 375.605 32.844 375.684 cv
32.617 375.766 32.422 375.852 32.25 375.941 cv
32.074 376.035 31.93 376.121 31.816 376.199 cv
31.703 376.281 31.621 376.32 31.578 376.316 cv
31.543 376.32 31.516 376.312 31.492 376.301 cv
31.465 376.289 31.445 376.266 31.43 376.23 cv
31.414 376.199 31.402 376.152 31.395 376.086 cv
31.387 376.027 31.383 375.945 31.387 375.844 cv
31.383 375.777 31.383 375.719 31.391 375.664 cv
31.391 375.613 31.402 375.566 31.418 375.523 cv
31.434 375.488 31.449 375.453 31.469 375.418 cv
31.484 375.391 31.516 375.352 31.559 375.305 cv
31.602 375.262 31.688 375.199 31.824 375.117 cv
31.953 375.035 32.117 374.957 32.313 374.875 cv
32.504 374.797 32.727 374.727 32.984 374.672 cv
33.234 374.617 33.508 374.59 33.805 374.59 cv
34.211 374.59 34.574 374.645 34.887 374.746 cv
35.199 374.855 35.457 375.004 35.668 375.191 cv
35.871 375.387 36.027 375.617 36.133 375.883 cv
36.234 376.152 36.285 376.445 36.289 376.77 cv
36.285 377.051 36.25 377.312 36.18 377.547 cv
36.105 377.789 35.996 378 35.855 378.184 cv
35.711 378.371 35.539 378.527 35.336 378.656 cv
35.129 378.789 34.891 378.883 34.621 378.93 cv
34.621 378.941 li
34.926 378.977 35.207 379.051 35.461 379.172 cv
35.715 379.293 35.934 379.445 36.117 379.629 cv
36.297 379.812 36.438 380.027 36.543 380.27 cv
36.645 380.516 36.695 380.777 36.699 381.055 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.141 379.133 mo
44.137 379.816 44.086 380.437 43.98 381 cv
43.871 381.562 43.691 382.047 43.445 382.449 cv
43.191 382.855 42.863 383.168 42.465 383.387 cv
42.059 383.609 41.566 383.719 40.98 383.719 cv
40.422 383.719 39.949 383.621 39.57 383.422 cv
39.188 383.227 38.883 382.934 38.648 382.547 cv
38.414 382.16 38.246 381.687 38.152 381.121 cv
38.051 380.559 38.004 379.91 38.004 379.176 cv
38.004 378.504 38.059 377.883 38.168 377.316 cv
38.277 376.754 38.453 376.27 38.703 375.863 cv
38.945 375.461 39.27 375.148 39.676 374.922 cv
40.074 374.703 40.57 374.59 41.16 374.59 cv
41.719 374.59 42.191 374.691 42.574 374.887 cv
42.957 375.09 43.262 375.383 43.496 375.766 cv
43.727 376.156 43.895 376.629 43.992 377.191 cv
44.09 377.754 44.137 378.402 44.141 379.133 cv
cp
42.934 379.215 mo
42.93 378.773 42.914 378.375 42.887 378.023 cv
42.852 377.672 42.805 377.363 42.746 377.094 cv
42.68 376.824 42.602 376.594 42.504 376.398 cv
42.406 376.207 42.289 376.047 42.152 375.918 cv
42.012 375.793 41.852 375.699 41.68 375.641 cv
41.5 375.586 41.305 375.559 41.09 375.555 cv
40.699 375.559 40.383 375.648 40.145 375.832 cv
39.898 376.016 39.707 376.27 39.57 376.586 cv
39.43 376.906 39.336 377.277 39.285 377.707 cv
39.234 378.137 39.211 378.602 39.211 379.094 cv
39.211 379.758 39.242 380.32 39.313 380.781 cv
39.379 381.25 39.488 381.629 39.641 381.918 cv
39.785 382.215 39.977 382.426 40.207 382.555 cv
40.438 382.691 40.719 382.758 41.051 382.754 cv
41.305 382.758 41.527 382.719 41.723 382.633 cv
41.914 382.555 42.082 382.434 42.223 382.277 cv
42.363 382.125 42.477 381.941 42.57 381.727 cv
42.656 381.512 42.73 381.273 42.789 381.012 cv
42.84 380.754 42.879 380.473 42.902 380.168 cv
42.922 379.863 42.93 379.547 42.934 379.215 cv
cp
f
30.43 326.289 mo
44.621 326.289 li
44.621 343.379 li
30.43 343.379 li
cp
0 0 0 0 cmyk
ef
37.145 337.148 mo
37.141 337.301 37.117 337.422 37.074 337.508 cv
37.027 337.598 36.965 337.641 36.883 337.637 cv
35.883 337.637 li
35.883 339.5 li
35.883 339.539 35.871 339.57 35.855 339.594 cv
35.832 339.621 35.801 339.641 35.758 339.66 cv
35.707 339.676 35.645 339.687 35.574 339.699 cv
35.496 339.707 35.402 339.711 35.285 339.715 cv
35.168 339.711 35.07 339.707 35 339.699 cv
34.922 339.687 34.863 339.676 34.82 339.66 cv
34.773 339.641 34.742 339.621 34.727 339.594 cv
34.707 339.57 34.699 339.539 34.703 339.5 cv
34.703 337.637 li
31.074 337.637 li
31.016 337.641 30.973 337.633 30.938 337.617 cv
30.902 337.605 30.867 337.578 30.84 337.539 cv
30.809 337.504 30.789 337.453 30.777 337.383 cv
30.766 337.316 30.762 337.227 30.762 337.113 cv
30.762 337.031 30.762 336.953 30.77 336.883 cv
30.77 336.812 30.781 336.75 30.797 336.695 cv
30.809 336.641 30.824 336.586 30.852 336.531 cv
30.871 336.477 30.898 336.422 30.934 336.359 cv
34.094 330.973 li
34.113 330.937 34.148 330.906 34.195 330.879 cv
34.238 330.852 34.293 330.828 34.367 330.809 cv
34.434 330.793 34.52 330.781 34.625 330.77 cv
34.727 330.766 34.848 330.762 34.988 330.758 cv
35.137 330.762 35.273 330.766 35.391 330.777 cv
35.504 330.789 35.594 330.805 35.668 330.82 cv
35.734 330.84 35.789 330.863 35.828 330.895 cv
35.863 330.926 35.883 330.961 35.883 331 cv
35.883 336.664 li
36.883 336.664 li
36.957 336.668 37.02 336.707 37.07 336.785 cv
37.117 336.867 37.141 336.988 37.145 337.148 cv
cp
34.703 331.797 mo
34.691 331.797 li
31.84 336.664 li
34.703 336.664 li
cp
.629236 .549432 .540154 .282963 cmyk
f
44.141 335.215 mo
44.137 335.898 44.086 336.52 43.98 337.082 cv
43.871 337.645 43.691 338.129 43.445 338.531 cv
43.191 338.937 42.863 339.25 42.465 339.469 cv
42.059 339.691 41.566 339.801 40.98 339.801 cv
40.422 339.801 39.949 339.703 39.57 339.504 cv
39.188 339.309 38.883 339.016 38.648 338.629 cv
38.414 338.242 38.246 337.77 38.152 337.203 cv
38.051 336.641 38.004 335.992 38.004 335.258 cv
38.004 334.586 38.059 333.965 38.168 333.398 cv
38.277 332.836 38.453 332.352 38.703 331.945 cv
38.945 331.543 39.27 331.23 39.676 331.004 cv
40.074 330.785 40.57 330.672 41.16 330.672 cv
41.719 330.672 42.191 330.773 42.574 330.969 cv
42.957 331.172 43.262 331.465 43.496 331.848 cv
43.727 332.238 43.895 332.711 43.992 333.273 cv
44.09 333.836 44.137 334.484 44.141 335.215 cv
cp
42.934 335.297 mo
42.93 334.855 42.914 334.457 42.887 334.105 cv
42.852 333.754 42.805 333.445 42.746 333.176 cv
42.68 332.906 42.602 332.676 42.504 332.48 cv
42.406 332.289 42.289 332.129 42.152 332 cv
42.012 331.875 41.852 331.781 41.68 331.723 cv
41.5 331.668 41.305 331.641 41.09 331.637 cv
40.699 331.641 40.383 331.73 40.145 331.914 cv
39.898 332.098 39.707 332.352 39.57 332.668 cv
39.43 332.988 39.336 333.359 39.285 333.789 cv
39.234 334.219 39.211 334.684 39.211 335.176 cv
39.211 335.84 39.242 336.402 39.313 336.863 cv
39.379 337.332 39.488 337.711 39.641 338 cv
39.785 338.297 39.977 338.508 40.207 338.637 cv
40.438 338.773 40.719 338.84 41.051 338.836 cv
41.305 338.84 41.527 338.801 41.723 338.715 cv
41.914 338.637 42.082 338.516 42.223 338.359 cv
42.363 338.207 42.477 338.023 42.57 337.809 cv
42.656 337.594 42.73 337.355 42.789 337.094 cv
42.84 336.836 42.879 336.555 42.902 336.25 cv
42.922 335.945 42.93 335.629 42.934 335.297 cv
cp
f
30.43 282.379 mo
44.621 282.379 li
44.621 299.469 li
30.43 299.469 li
cp
0 0 0 0 cmyk
ef
36.727 292.898 mo
36.727 293.375 36.645 293.797 36.484 294.168 cv
36.324 294.539 36.098 294.852 35.809 295.105 cv
35.512 295.359 35.164 295.555 34.762 295.684 cv
34.355 295.816 33.906 295.879 33.414 295.879 cv
33.137 295.879 32.875 295.859 32.633 295.82 cv
32.383 295.781 32.164 295.734 31.977 295.68 cv
31.781 295.625 31.625 295.57 31.5 295.512 cv
31.375 295.461 31.297 295.418 31.266 295.383 cv
31.23 295.352 31.207 295.32 31.195 295.293 cv
31.18 295.266 31.164 295.234 31.156 295.191 cv
31.141 295.156 31.133 295.105 31.133 295.043 cv
31.125 294.984 31.125 294.914 31.125 294.832 cv
31.125 294.758 31.129 294.687 31.137 294.625 cv
31.145 294.562 31.156 294.512 31.176 294.473 cv
31.191 294.434 31.211 294.406 31.238 294.387 cv
31.262 294.371 31.293 294.363 31.324 294.359 cv
31.371 294.363 31.441 294.391 31.535 294.445 cv
31.629 294.504 31.758 294.566 31.922 294.633 cv
32.086 294.699 32.285 294.762 32.527 294.82 cv
32.762 294.879 33.047 294.906 33.383 294.906 cv
33.684 294.906 33.965 294.871 34.223 294.797 cv
34.477 294.727 34.699 294.613 34.887 294.457 cv
35.07 294.305 35.215 294.109 35.32 293.871 cv
35.426 293.637 35.477 293.348 35.48 293.008 cv
35.477 292.727 35.434 292.477 35.344 292.258 cv
35.254 292.039 35.117 291.859 34.934 291.715 cv
34.746 291.574 34.512 291.469 34.23 291.395 cv
33.945 291.324 33.605 291.285 33.219 291.285 cv
32.934 291.285 32.695 291.301 32.496 291.328 cv
32.293 291.359 32.105 291.375 31.934 291.371 cv
31.805 291.375 31.711 291.344 31.66 291.281 cv
31.602 291.223 31.574 291.109 31.578 290.937 cv
31.578 287.324 li
31.574 287.176 31.609 287.066 31.684 286.988 cv
31.75 286.918 31.852 286.879 31.988 286.879 cv
35.918 286.879 li
35.953 286.879 35.988 286.891 36.023 286.91 cv
36.055 286.934 36.082 286.965 36.109 287.004 cv
36.129 287.047 36.145 287.098 36.16 287.16 cv
36.168 287.227 36.176 287.305 36.18 287.387 cv
36.176 287.555 36.152 287.68 36.113 287.77 cv
36.066 287.863 36.008 287.91 35.93 287.906 cv
32.758 287.906 li
32.758 290.395 li
32.91 290.375 33.066 290.363 33.23 290.355 cv
33.387 290.352 33.574 290.348 33.789 290.348 cv
34.273 290.348 34.699 290.41 35.066 290.531 cv
35.43 290.652 35.734 290.824 35.984 291.043 cv
36.227 291.27 36.414 291.535 36.539 291.848 cv
36.664 292.164 36.727 292.516 36.727 292.898 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.141 291.293 mo
44.137 291.977 44.086 292.598 43.98 293.16 cv
43.871 293.723 43.691 294.207 43.445 294.609 cv
43.191 295.016 42.863 295.328 42.465 295.547 cv
42.059 295.77 41.566 295.879 40.98 295.879 cv
40.422 295.879 39.949 295.781 39.57 295.582 cv
39.188 295.387 38.883 295.094 38.648 294.707 cv
38.414 294.32 38.246 293.848 38.152 293.281 cv
38.051 292.719 38.004 292.07 38.004 291.336 cv
38.004 290.664 38.059 290.043 38.168 289.477 cv
38.277 288.914 38.453 288.43 38.703 288.023 cv
38.945 287.621 39.27 287.309 39.676 287.082 cv
40.074 286.863 40.57 286.75 41.16 286.75 cv
41.719 286.75 42.191 286.852 42.574 287.047 cv
42.957 287.25 43.262 287.543 43.496 287.926 cv
43.727 288.316 43.895 288.789 43.992 289.352 cv
44.09 289.914 44.137 290.562 44.141 291.293 cv
cp
42.934 291.375 mo
42.93 290.934 42.914 290.535 42.887 290.184 cv
42.852 289.832 42.805 289.523 42.746 289.254 cv
42.68 288.984 42.602 288.754 42.504 288.559 cv
42.406 288.367 42.289 288.207 42.152 288.078 cv
42.012 287.953 41.852 287.859 41.68 287.801 cv
41.5 287.746 41.305 287.719 41.09 287.715 cv
40.699 287.719 40.383 287.809 40.145 287.992 cv
39.898 288.176 39.707 288.43 39.57 288.746 cv
39.43 289.066 39.336 289.437 39.285 289.867 cv
39.234 290.297 39.211 290.762 39.211 291.254 cv
39.211 291.918 39.242 292.48 39.313 292.941 cv
39.379 293.41 39.488 293.789 39.641 294.078 cv
39.785 294.375 39.977 294.586 40.207 294.715 cv
40.438 294.852 40.719 294.918 41.051 294.914 cv
41.305 294.918 41.527 294.879 41.723 294.793 cv
41.914 294.715 42.082 294.594 42.223 294.437 cv
42.363 294.285 42.477 294.102 42.57 293.887 cv
42.656 293.672 42.73 293.434 42.789 293.172 cv
42.84 292.914 42.879 292.633 42.902 292.328 cv
42.922 292.023 42.93 291.707 42.934 291.375 cv
cp
f
30.43 238.469 mo
44.621 238.469 li
44.621 255.559 li
30.43 255.559 li
cp
0 0 0 0 cmyk
ef
36.996 248.957 mo
36.996 249.348 36.934 249.727 36.816 250.086 cv
36.691 250.453 36.508 250.77 36.266 251.043 cv
36.016 251.32 35.703 251.543 35.328 251.707 cv
34.945 251.875 34.5 251.957 33.984 251.957 cv
33.613 251.957 33.285 251.914 33.004 251.82 cv
32.719 251.734 32.473 251.602 32.262 251.43 cv
32.051 251.262 31.875 251.055 31.738 250.809 cv
31.598 250.562 31.484 250.281 31.402 249.965 cv
31.316 249.652 31.258 249.309 31.223 248.93 cv
31.184 248.559 31.164 248.156 31.168 247.723 cv
31.164 247.344 31.184 246.961 31.227 246.57 cv
31.266 246.187 31.34 245.812 31.445 245.445 cv
31.551 245.086 31.695 244.746 31.875 244.43 cv
32.055 244.113 32.281 243.836 32.555 243.602 cv
32.828 243.367 33.152 243.18 33.531 243.039 cv
33.91 242.902 34.352 242.836 34.855 242.832 cv
35.023 242.836 35.195 242.844 35.367 242.863 cv
35.539 242.887 35.699 242.918 35.848 242.949 cv
35.996 242.988 36.117 243.023 36.219 243.062 cv
36.316 243.102 36.383 243.137 36.418 243.16 cv
36.445 243.187 36.469 243.215 36.488 243.242 cv
36.504 243.273 36.52 243.305 36.527 243.34 cv
36.535 243.375 36.539 243.414 36.547 243.457 cv
36.547 243.5 36.551 243.555 36.555 243.617 cv
36.551 243.703 36.551 243.773 36.551 243.828 cv
36.547 243.891 36.535 243.937 36.523 243.973 cv
36.504 244.012 36.484 244.039 36.461 244.055 cv
36.434 244.074 36.402 244.082 36.363 244.082 cv
36.313 244.082 36.242 244.066 36.156 244.035 cv
36.066 244.004 35.961 243.969 35.84 243.926 cv
35.715 243.891 35.566 243.855 35.391 243.82 cv
35.215 243.793 35.012 243.777 34.781 243.773 cv
34.352 243.777 33.984 243.863 33.68 244.035 cv
33.375 244.207 33.125 244.441 32.93 244.734 cv
32.734 245.027 32.59 245.367 32.5 245.75 cv
32.402 246.141 32.348 246.543 32.34 246.961 cv
32.457 246.895 32.594 246.828 32.742 246.758 cv
32.891 246.691 33.051 246.629 33.227 246.57 cv
33.402 246.52 33.59 246.473 33.785 246.437 cv
33.98 246.406 34.191 246.391 34.418 246.387 cv
34.895 246.391 35.297 246.457 35.629 246.582 cv
35.957 246.715 36.223 246.895 36.43 247.125 cv
36.629 247.355 36.773 247.625 36.863 247.937 cv
36.949 248.25 36.996 248.59 36.996 248.957 cv
cp
35.801 249.066 mo
35.801 248.805 35.773 248.562 35.723 248.344 cv
35.668 248.129 35.578 247.945 35.457 247.789 cv
35.332 247.641 35.168 247.523 34.965 247.441 cv
34.754 247.359 34.5 247.316 34.203 247.316 cv
34.031 247.316 33.863 247.332 33.695 247.363 cv
33.523 247.395 33.359 247.437 33.203 247.484 cv
33.043 247.539 32.895 247.602 32.754 247.672 cv
32.609 247.746 32.477 247.82 32.359 247.898 cv
32.355 248.492 32.395 248.988 32.473 249.383 cv
32.547 249.781 32.656 250.098 32.801 250.336 cv
32.945 250.578 33.125 250.75 33.34 250.852 cv
33.555 250.957 33.805 251.008 34.094 251.004 cv
34.383 251.008 34.637 250.953 34.852 250.84 cv
35.066 250.734 35.242 250.586 35.387 250.398 cv
35.527 250.215 35.633 250.008 35.699 249.777 cv
35.766 249.547 35.801 249.312 35.801 249.066 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.141 247.371 mo
44.137 248.055 44.086 248.676 43.98 249.238 cv
43.871 249.801 43.691 250.285 43.445 250.687 cv
43.191 251.094 42.863 251.406 42.465 251.625 cv
42.059 251.848 41.566 251.957 40.98 251.957 cv
40.422 251.957 39.949 251.859 39.57 251.66 cv
39.188 251.465 38.883 251.172 38.648 250.785 cv
38.414 250.398 38.246 249.926 38.152 249.359 cv
38.051 248.797 38.004 248.148 38.004 247.414 cv
38.004 246.742 38.059 246.121 38.168 245.555 cv
38.277 244.992 38.453 244.508 38.703 244.102 cv
38.945 243.699 39.27 243.387 39.676 243.16 cv
40.074 242.941 40.57 242.828 41.16 242.828 cv
41.719 242.828 42.191 242.93 42.574 243.125 cv
42.957 243.328 43.262 243.621 43.496 244.004 cv
43.727 244.395 43.895 244.867 43.992 245.43 cv
44.09 245.992 44.137 246.641 44.141 247.371 cv
cp
42.934 247.453 mo
42.93 247.012 42.914 246.613 42.887 246.262 cv
42.852 245.91 42.805 245.602 42.746 245.332 cv
42.68 245.062 42.602 244.832 42.504 244.637 cv
42.406 244.445 42.289 244.285 42.152 244.156 cv
42.012 244.031 41.852 243.937 41.68 243.879 cv
41.5 243.824 41.305 243.797 41.09 243.793 cv
40.699 243.797 40.383 243.887 40.145 244.07 cv
39.898 244.254 39.707 244.508 39.57 244.824 cv
39.43 245.145 39.336 245.516 39.285 245.945 cv
39.234 246.375 39.211 246.84 39.211 247.332 cv
39.211 247.996 39.242 248.559 39.313 249.02 cv
39.379 249.488 39.488 249.867 39.641 250.156 cv
39.785 250.453 39.977 250.664 40.207 250.793 cv
40.438 250.93 40.719 250.996 41.051 250.992 cv
41.305 250.996 41.527 250.957 41.723 250.871 cv
41.914 250.793 42.082 250.672 42.223 250.516 cv
42.363 250.363 42.477 250.18 42.57 249.965 cv
42.656 249.75 42.73 249.512 42.789 249.25 cv
42.84 248.992 42.879 248.711 42.902 248.406 cv
42.922 248.102 42.93 247.785 42.934 247.453 cv
cp
f
30.43 194.559 mo
44.621 194.559 li
44.621 211.649 li
30.43 211.649 li
cp
0 0 0 0 cmyk
ef
36.898 199.547 mo
36.895 199.633 36.891 199.707 36.887 199.77 cv
36.879 199.84 36.871 199.902 36.859 199.961 cv
36.848 200.027 36.832 200.086 36.813 200.141 cv
36.789 200.199 36.766 200.262 36.742 200.32 cv
33.547 207.684 li
33.52 207.742 33.492 207.785 33.461 207.816 cv
33.426 207.852 33.383 207.879 33.328 207.898 cv
33.273 207.918 33.203 207.93 33.125 207.941 cv
33.039 207.945 32.941 207.949 32.824 207.953 cv
32.668 207.949 32.547 207.941 32.461 207.93 cv
32.375 207.914 32.313 207.898 32.273 207.867 cv
32.234 207.84 32.215 207.801 32.223 207.758 cv
32.223 207.715 32.238 207.664 32.27 207.602 cv
35.629 200.074 li
31.371 200.074 li
31.285 200.078 31.219 200.031 31.176 199.937 cv
31.133 199.848 31.113 199.719 31.113 199.555 cv
31.113 199.469 31.117 199.395 31.129 199.328 cv
31.141 199.266 31.156 199.211 31.18 199.168 cv
31.199 199.125 31.227 199.094 31.262 199.07 cv
31.293 199.051 31.332 199.039 31.371 199.039 cv
36.543 199.039 li
36.602 199.039 36.656 199.047 36.707 199.062 cv
36.754 199.078 36.789 199.105 36.816 199.145 cv
36.84 199.184 36.859 199.238 36.875 199.301 cv
36.887 199.367 36.895 199.449 36.898 199.547 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.141 203.453 mo
44.137 204.137 44.086 204.758 43.98 205.32 cv
43.871 205.883 43.691 206.367 43.445 206.77 cv
43.191 207.176 42.863 207.488 42.465 207.707 cv
42.059 207.93 41.566 208.039 40.98 208.039 cv
40.422 208.039 39.949 207.941 39.57 207.742 cv
39.188 207.547 38.883 207.254 38.648 206.867 cv
38.414 206.48 38.246 206.008 38.152 205.441 cv
38.051 204.879 38.004 204.23 38.004 203.496 cv
38.004 202.824 38.059 202.203 38.168 201.637 cv
38.277 201.074 38.453 200.59 38.703 200.184 cv
38.945 199.781 39.27 199.469 39.676 199.242 cv
40.074 199.023 40.57 198.91 41.16 198.91 cv
41.719 198.91 42.191 199.012 42.574 199.207 cv
42.957 199.41 43.262 199.703 43.496 200.086 cv
43.727 200.477 43.895 200.949 43.992 201.512 cv
44.09 202.074 44.137 202.723 44.141 203.453 cv
cp
42.934 203.535 mo
42.93 203.094 42.914 202.695 42.887 202.344 cv
42.852 201.992 42.805 201.684 42.746 201.414 cv
42.68 201.145 42.602 200.914 42.504 200.719 cv
42.406 200.527 42.289 200.367 42.152 200.238 cv
42.012 200.113 41.852 200.02 41.68 199.961 cv
41.5 199.906 41.305 199.879 41.09 199.875 cv
40.699 199.879 40.383 199.969 40.145 200.152 cv
39.898 200.336 39.707 200.59 39.57 200.906 cv
39.43 201.227 39.336 201.598 39.285 202.027 cv
39.234 202.457 39.211 202.922 39.211 203.414 cv
39.211 204.078 39.242 204.641 39.313 205.102 cv
39.379 205.57 39.488 205.949 39.641 206.238 cv
39.785 206.535 39.977 206.746 40.207 206.875 cv
40.438 207.012 40.719 207.078 41.051 207.074 cv
41.305 207.078 41.527 207.039 41.723 206.953 cv
41.914 206.875 42.082 206.754 42.223 206.598 cv
42.363 206.445 42.477 206.262 42.57 206.047 cv
42.656 205.832 42.73 205.594 42.789 205.332 cv
42.84 205.074 42.879 204.793 42.902 204.488 cv
42.922 204.184 42.93 203.867 42.934 203.535 cv
cp
f
30.43 150.648 mo
44.621 150.648 li
44.621 167.738 li
30.43 167.738 li
cp
0 0 0 0 cmyk
ef
36.973 161.711 mo
36.973 162.098 36.902 162.441 36.766 162.738 cv
36.629 163.043 36.434 163.293 36.176 163.496 cv
35.918 163.703 35.598 163.859 35.219 163.961 cv
34.836 164.066 34.402 164.117 33.918 164.117 cv
33.457 164.117 33.047 164.07 32.688 163.977 cv
32.324 163.883 32.02 163.742 31.77 163.551 cv
31.52 163.367 31.328 163.137 31.195 162.859 cv
31.063 162.586 30.996 162.273 30.996 161.918 cv
30.996 161.645 31.039 161.387 31.133 161.152 cv
31.219 160.918 31.352 160.703 31.527 160.508 cv
31.695 160.312 31.906 160.129 32.16 159.953 cv
32.41 159.785 32.695 159.621 33.012 159.465 cv
32.738 159.324 32.496 159.176 32.285 159.016 cv
32.074 158.859 31.895 158.687 31.75 158.5 cv
31.602 158.316 31.492 158.121 31.418 157.91 cv
31.34 157.703 31.301 157.473 31.305 157.223 cv
31.301 156.914 31.355 156.621 31.473 156.348 cv
31.582 156.078 31.754 155.844 31.98 155.641 cv
32.207 155.441 32.492 155.281 32.844 155.164 cv
33.188 155.047 33.598 154.988 34.066 154.988 cv
34.512 154.988 34.898 155.043 35.227 155.148 cv
35.555 155.258 35.824 155.402 36.035 155.586 cv
36.246 155.773 36.402 155.992 36.508 156.242 cv
36.605 156.492 36.656 156.762 36.66 157.051 cv
36.656 157.285 36.617 157.512 36.547 157.723 cv
36.469 157.941 36.359 158.145 36.211 158.332 cv
36.063 158.527 35.883 158.707 35.672 158.871 cv
35.461 159.043 35.219 159.199 34.945 159.34 cv
35.266 159.504 35.551 159.668 35.809 159.836 cv
36.059 160.004 36.273 160.184 36.449 160.379 cv
36.617 160.574 36.746 160.781 36.84 160.996 cv
36.926 161.215 36.973 161.453 36.973 161.711 cv
cp
35.492 157.16 mo
35.488 156.973 35.457 156.797 35.391 156.641 cv
35.324 156.484 35.227 156.352 35.102 156.242 cv
34.973 156.133 34.813 156.051 34.625 155.992 cv
34.43 155.937 34.215 155.91 33.977 155.906 cv
33.48 155.91 33.105 156.02 32.855 156.242 cv
32.598 156.469 32.473 156.777 32.477 157.16 cv
32.473 157.34 32.504 157.504 32.566 157.656 cv
32.629 157.812 32.723 157.957 32.855 158.094 cv
32.98 158.23 33.145 158.363 33.348 158.492 cv
33.543 158.625 33.781 158.762 34.059 158.902 cv
34.52 158.668 34.875 158.406 35.121 158.113 cv
35.367 157.828 35.488 157.512 35.492 157.16 cv
cp
35.781 161.836 mo
35.777 161.629 35.738 161.437 35.664 161.266 cv
35.582 161.098 35.465 160.937 35.309 160.785 cv
35.152 160.637 34.953 160.492 34.719 160.352 cv
34.48 160.215 34.211 160.07 33.902 159.918 cv
33.613 160.062 33.359 160.203 33.145 160.344 cv
32.926 160.484 32.746 160.633 32.609 160.781 cv
32.469 160.937 32.363 161.094 32.293 161.258 cv
32.219 161.426 32.184 161.609 32.188 161.809 cv
32.184 162.254 32.336 162.598 32.645 162.836 cv
32.945 163.082 33.398 163.203 34.004 163.199 cv
34.586 163.203 35.031 163.082 35.332 162.832 cv
35.629 162.59 35.777 162.258 35.781 161.836 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.141 159.531 mo
44.137 160.215 44.086 160.836 43.98 161.398 cv
43.871 161.961 43.691 162.445 43.445 162.848 cv
43.191 163.254 42.863 163.566 42.465 163.785 cv
42.059 164.008 41.566 164.117 40.98 164.117 cv
40.422 164.117 39.949 164.02 39.57 163.82 cv
39.188 163.625 38.883 163.332 38.648 162.945 cv
38.414 162.559 38.246 162.086 38.152 161.52 cv
38.051 160.957 38.004 160.309 38.004 159.574 cv
38.004 158.902 38.059 158.281 38.168 157.715 cv
38.277 157.152 38.453 156.668 38.703 156.262 cv
38.945 155.859 39.27 155.547 39.676 155.32 cv
40.074 155.102 40.57 154.988 41.16 154.988 cv
41.719 154.988 42.191 155.09 42.574 155.285 cv
42.957 155.488 43.262 155.781 43.496 156.164 cv
43.727 156.555 43.895 157.027 43.992 157.59 cv
44.09 158.152 44.137 158.801 44.141 159.531 cv
cp
42.934 159.613 mo
42.93 159.172 42.914 158.773 42.887 158.422 cv
42.852 158.07 42.805 157.762 42.746 157.492 cv
42.68 157.223 42.602 156.992 42.504 156.797 cv
42.406 156.605 42.289 156.445 42.152 156.316 cv
42.012 156.191 41.852 156.098 41.68 156.039 cv
41.5 155.984 41.305 155.957 41.09 155.953 cv
40.699 155.957 40.383 156.047 40.145 156.23 cv
39.898 156.414 39.707 156.668 39.57 156.984 cv
39.43 157.305 39.336 157.676 39.285 158.105 cv
39.234 158.535 39.211 159 39.211 159.492 cv
39.211 160.156 39.242 160.719 39.313 161.18 cv
39.379 161.648 39.488 162.027 39.641 162.316 cv
39.785 162.613 39.977 162.824 40.207 162.953 cv
40.438 163.09 40.719 163.156 41.051 163.152 cv
41.305 163.156 41.527 163.117 41.723 163.031 cv
41.914 162.953 42.082 162.832 42.223 162.676 cv
42.363 162.523 42.477 162.34 42.57 162.125 cv
42.656 161.91 42.73 161.672 42.789 161.41 cv
42.84 161.152 42.879 160.871 42.902 160.566 cv
42.922 160.262 42.93 159.945 42.934 159.613 cv
cp
f
30.43 106.738 mo
44.621 106.738 li
44.621 123.828 li
30.43 123.828 li
cp
0 0 0 0 cmyk
ef
36.836 115.285 mo
36.832 115.672 36.809 116.059 36.766 116.449 cv
36.719 116.844 36.641 117.223 36.535 117.586 cv
36.422 117.949 36.277 118.289 36.094 118.605 cv
35.906 118.926 35.672 119.207 35.395 119.441 cv
35.109 119.684 34.773 119.867 34.391 120 cv
34 120.133 33.555 120.199 33.047 120.199 cv
32.848 120.199 32.656 120.184 32.473 120.16 cv
32.285 120.133 32.117 120.105 31.973 120.07 cv
31.82 120.035 31.695 119.996 31.598 119.953 cv
31.496 119.914 31.422 119.875 31.379 119.832 cv
31.332 119.793 31.301 119.738 31.281 119.664 cv
31.258 119.594 31.246 119.496 31.25 119.379 cv
31.246 119.277 31.25 119.199 31.258 119.141 cv
31.262 119.082 31.273 119.035 31.289 119.004 cv
31.305 118.973 31.324 118.953 31.348 118.937 cv
31.371 118.93 31.402 118.922 31.441 118.918 cv
31.488 118.922 31.559 118.937 31.652 118.969 cv
31.742 119.004 31.855 119.043 32 119.082 cv
32.137 119.125 32.301 119.164 32.488 119.195 cv
32.672 119.234 32.883 119.25 33.121 119.246 cv
33.563 119.25 33.941 119.164 34.262 118.992 cv
34.574 118.82 34.836 118.594 35.039 118.305 cv
35.242 118.02 35.391 117.684 35.492 117.301 cv
35.59 116.922 35.645 116.523 35.656 116.102 cv
35.41 116.246 35.121 116.371 34.785 116.477 cv
34.445 116.59 34.059 116.645 33.621 116.641 cv
33.129 116.645 32.715 116.578 32.379 116.441 cv
32.043 116.309 31.77 116.125 31.566 115.891 cv
31.359 115.66 31.215 115.383 31.129 115.059 cv
31.039 114.742 30.996 114.391 30.996 114.012 cv
30.996 113.621 31.051 113.25 31.168 112.891 cv
31.277 112.539 31.457 112.227 31.703 111.957 cv
31.941 111.687 32.25 111.473 32.629 111.312 cv
33 111.152 33.449 111.07 33.973 111.07 cv
34.34 111.07 34.664 111.117 34.953 111.211 cv
35.234 111.305 35.484 111.441 35.699 111.617 cv
35.906 111.793 36.086 112.004 36.234 112.254 cv
36.379 112.504 36.496 112.785 36.586 113.098 cv
36.672 113.414 36.734 113.758 36.777 114.125 cv
36.813 114.496 36.832 114.883 36.836 115.285 cv
cp
35.637 115.156 mo
35.637 114.574 35.598 114.082 35.52 113.68 cv
35.441 113.281 35.324 112.957 35.176 112.707 cv
35.023 112.461 34.84 112.281 34.621 112.172 cv
34.398 112.062 34.145 112.008 33.863 112.008 cv
33.559 112.008 33.305 112.062 33.098 112.172 cv
32.887 112.281 32.715 112.426 32.582 112.602 cv
32.445 112.785 32.344 112.988 32.281 113.215 cv
32.215 113.445 32.184 113.684 32.188 113.922 cv
32.184 114.195 32.215 114.441 32.273 114.66 cv
32.328 114.887 32.418 115.074 32.551 115.23 cv
32.676 115.387 32.844 115.508 33.051 115.594 cv
33.254 115.68 33.508 115.723 33.813 115.719 cv
34.152 115.723 34.484 115.672 34.809 115.566 cv
35.125 115.465 35.402 115.328 35.637 115.156 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.141 115.613 mo
44.137 116.297 44.086 116.918 43.98 117.48 cv
43.871 118.043 43.691 118.527 43.445 118.93 cv
43.191 119.336 42.863 119.648 42.465 119.867 cv
42.059 120.09 41.566 120.199 40.98 120.199 cv
40.422 120.199 39.949 120.102 39.57 119.902 cv
39.188 119.707 38.883 119.414 38.648 119.027 cv
38.414 118.641 38.246 118.168 38.152 117.602 cv
38.051 117.039 38.004 116.391 38.004 115.656 cv
38.004 114.984 38.059 114.363 38.168 113.797 cv
38.277 113.234 38.453 112.75 38.703 112.344 cv
38.945 111.941 39.27 111.629 39.676 111.402 cv
40.074 111.184 40.57 111.07 41.16 111.07 cv
41.719 111.07 42.191 111.172 42.574 111.367 cv
42.957 111.57 43.262 111.863 43.496 112.246 cv
43.727 112.637 43.895 113.109 43.992 113.672 cv
44.09 114.234 44.137 114.883 44.141 115.613 cv
cp
42.934 115.695 mo
42.93 115.254 42.914 114.855 42.887 114.504 cv
42.852 114.152 42.805 113.844 42.746 113.574 cv
42.68 113.305 42.602 113.074 42.504 112.879 cv
42.406 112.687 42.289 112.527 42.152 112.398 cv
42.012 112.273 41.852 112.18 41.68 112.121 cv
41.5 112.066 41.305 112.039 41.09 112.035 cv
40.699 112.039 40.383 112.129 40.145 112.312 cv
39.898 112.496 39.707 112.75 39.57 113.066 cv
39.43 113.387 39.336 113.758 39.285 114.187 cv
39.234 114.617 39.211 115.082 39.211 115.574 cv
39.211 116.238 39.242 116.801 39.313 117.262 cv
39.379 117.73 39.488 118.109 39.641 118.398 cv
39.785 118.695 39.977 118.906 40.207 119.035 cv
40.438 119.172 40.719 119.238 41.051 119.234 cv
41.305 119.238 41.527 119.199 41.723 119.113 cv
41.914 119.035 42.082 118.914 42.223 118.758 cv
42.363 118.605 42.477 118.422 42.57 118.207 cv
42.656 117.992 42.73 117.754 42.789 117.492 cv
42.84 117.234 42.879 116.953 42.902 116.648 cv
42.922 116.344 42.93 116.027 42.934 115.695 cv
cp
f
23.336 62.828 mo
44.621 62.828 li
44.621 79.922 li
23.336 79.922 li
cp
0 0 0 0 cmyk
ef
29.719 75.711 mo
29.715 75.801 29.707 75.875 29.695 75.934 cv
29.68 75.996 29.66 76.047 29.641 76.078 cv
29.617 76.117 29.594 76.141 29.563 76.156 cv
29.531 76.172 29.5 76.18 29.469 76.18 cv
24.828 76.18 li
24.797 76.18 24.766 76.172 24.738 76.156 cv
24.711 76.141 24.684 76.117 24.66 76.078 cv
24.629 76.047 24.609 75.996 24.602 75.934 cv
24.586 75.875 24.582 75.801 24.582 75.711 cv
24.582 75.633 24.586 75.562 24.602 75.5 cv
24.609 75.441 24.629 75.395 24.652 75.352 cv
24.672 75.316 24.695 75.285 24.727 75.262 cv
24.754 75.242 24.789 75.23 24.828 75.23 cv
26.684 75.23 li
26.684 68.477 li
24.965 69.496 li
24.875 69.547 24.805 69.574 24.754 69.582 cv
24.699 69.59 24.66 69.582 24.629 69.551 cv
24.598 69.523 24.574 69.473 24.563 69.402 cv
24.551 69.336 24.547 69.25 24.547 69.141 cv
24.547 69.066 24.547 69 24.555 68.941 cv
24.559 68.891 24.57 68.844 24.586 68.805 cv
24.598 68.77 24.617 68.738 24.645 68.711 cv
24.668 68.684 24.703 68.656 24.746 68.625 cv
26.793 67.312 li
26.809 67.305 26.832 67.293 26.859 67.281 cv
26.887 67.273 26.922 67.266 26.965 67.254 cv
27.004 67.246 27.051 67.238 27.109 67.234 cv
27.16 67.234 27.23 67.234 27.313 67.23 cv
27.422 67.234 27.512 67.238 27.59 67.246 cv
27.66 67.258 27.719 67.27 27.758 67.285 cv
27.797 67.301 27.824 67.324 27.84 67.348 cv
27.855 67.375 27.863 67.398 27.863 67.426 cv
27.863 75.23 li
29.469 75.23 li
29.504 75.23 29.535 75.242 29.57 75.262 cv
29.602 75.285 29.629 75.316 29.652 75.352 cv
29.668 75.395 29.684 75.441 29.699 75.5 cv
29.707 75.562 29.715 75.633 29.719 75.711 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
37.074 71.715 mo
37.07 72.398 37.016 73.023 36.91 73.586 cv
36.801 74.152 36.625 74.637 36.375 75.039 cv
36.125 75.445 35.797 75.758 35.398 75.977 cv
34.992 76.199 34.496 76.309 33.91 76.309 cv
33.348 76.309 32.879 76.211 32.496 76.012 cv
32.113 75.812 31.805 75.52 31.57 75.133 cv
31.336 74.746 31.168 74.27 31.074 73.703 cv
30.973 73.141 30.926 72.492 30.93 71.758 cv
30.926 71.082 30.98 70.461 31.094 69.895 cv
31.199 69.328 31.379 68.844 31.629 68.437 cv
31.875 68.035 32.199 67.719 32.602 67.496 cv
33.004 67.277 33.496 67.168 34.086 67.164 cv
34.645 67.168 35.117 67.27 35.504 67.465 cv
35.883 67.668 36.191 67.961 36.426 68.344 cv
36.656 68.734 36.824 69.207 36.926 69.77 cv
37.023 70.336 37.07 70.984 37.074 71.715 cv
cp
35.867 71.797 mo
35.863 71.355 35.848 70.961 35.816 70.605 cv
35.781 70.254 35.734 69.941 35.676 69.672 cv
35.609 69.402 35.527 69.168 35.434 68.973 cv
35.332 68.777 35.215 68.617 35.082 68.492 cv
34.941 68.367 34.785 68.277 34.609 68.219 cv
34.434 68.164 34.238 68.137 34.02 68.133 cv
33.629 68.137 33.313 68.227 33.07 68.406 cv
32.828 68.59 32.637 68.84 32.496 69.16 cv
32.355 69.48 32.258 69.859 32.211 70.289 cv
32.156 70.723 32.133 71.184 32.137 71.676 cv
32.133 72.344 32.168 72.91 32.238 73.371 cv
32.309 73.84 32.418 74.219 32.566 74.508 cv
32.715 74.805 32.902 75.016 33.137 75.145 cv
33.363 75.281 33.645 75.348 33.977 75.344 cv
34.23 75.348 34.457 75.305 34.652 75.219 cv
34.848 75.137 35.012 75.02 35.152 74.863 cv
35.289 74.711 35.406 74.527 35.5 74.312 cv
35.59 74.098 35.664 73.859 35.723 73.598 cv
35.773 73.34 35.813 73.059 35.836 72.75 cv
35.855 72.449 35.863 72.129 35.867 71.797 cv
cp
f
44.152 71.715 mo
44.148 72.398 44.094 73.023 43.988 73.586 cv
43.879 74.152 43.703 74.637 43.453 75.039 cv
43.203 75.445 42.875 75.758 42.477 75.977 cv
42.07 76.199 41.574 76.309 40.988 76.309 cv
40.426 76.309 39.957 76.211 39.574 76.012 cv
39.191 75.812 38.883 75.52 38.648 75.133 cv
38.414 74.746 38.246 74.27 38.152 73.703 cv
38.051 73.141 38.004 72.492 38.008 71.758 cv
38.004 71.082 38.059 70.461 38.172 69.895 cv
38.277 69.328 38.457 68.844 38.707 68.437 cv
38.953 68.035 39.277 67.719 39.68 67.496 cv
40.082 67.277 40.574 67.168 41.164 67.164 cv
41.723 67.168 42.195 67.27 42.582 67.465 cv
42.961 67.668 43.27 67.961 43.504 68.344 cv
43.734 68.734 43.902 69.207 44.004 69.77 cv
44.102 70.336 44.148 70.984 44.152 71.715 cv
cp
42.945 71.797 mo
42.941 71.355 42.926 70.961 42.895 70.605 cv
42.859 70.254 42.813 69.941 42.754 69.672 cv
42.688 69.402 42.605 69.168 42.512 68.973 cv
42.41 68.777 42.293 68.617 42.16 68.492 cv
42.02 68.367 41.863 68.277 41.688 68.219 cv
41.512 68.164 41.316 68.137 41.098 68.133 cv
40.707 68.137 40.391 68.227 40.148 68.406 cv
39.906 68.59 39.715 68.84 39.574 69.16 cv
39.434 69.48 39.336 69.859 39.289 70.289 cv
39.234 70.723 39.211 71.184 39.215 71.676 cv
39.211 72.344 39.246 72.91 39.316 73.371 cv
39.387 73.84 39.496 74.219 39.645 74.508 cv
39.793 74.805 39.98 75.016 40.215 75.145 cv
40.441 75.281 40.723 75.348 41.055 75.344 cv
41.309 75.348 41.535 75.305 41.73 75.219 cv
41.926 75.137 42.09 75.02 42.23 74.863 cv
42.367 74.711 42.484 74.527 42.578 74.312 cv
42.668 74.098 42.742 73.859 42.801 73.598 cv
42.852 73.34 42.891 73.059 42.914 72.75 cv
42.934 72.449 42.941 72.129 42.945 71.797 cv
cp
f
23.336 18.922 mo
44.621 18.922 li
44.621 36.012 li
23.336 36.012 li
cp
0 0 0 0 cmyk
ef
29.707 31.797 mo
29.703 31.887 29.695 31.957 29.684 32.016 cv
29.668 32.078 29.648 32.129 29.629 32.16 cv
29.605 32.199 29.582 32.223 29.551 32.238 cv
29.52 32.254 29.488 32.262 29.461 32.262 cv
24.824 32.262 li
24.789 32.262 24.762 32.254 24.734 32.238 cv
24.707 32.223 24.68 32.199 24.656 32.16 cv
24.629 32.129 24.609 32.078 24.598 32.016 cv
24.582 31.957 24.574 31.887 24.578 31.797 cv
24.574 31.719 24.582 31.645 24.598 31.582 cv
24.609 31.523 24.625 31.477 24.648 31.437 cv
24.664 31.402 24.691 31.371 24.723 31.348 cv
24.754 31.328 24.785 31.32 24.824 31.316 cv
26.676 31.316 li
26.676 24.57 li
24.961 25.59 li
24.871 25.641 24.801 25.668 24.754 25.676 cv
24.699 25.684 24.656 25.676 24.625 25.645 cv
24.59 25.617 24.57 25.566 24.559 25.496 cv
24.547 25.43 24.539 25.344 24.543 25.234 cv
24.539 25.16 24.543 25.094 24.555 25.035 cv
24.559 24.984 24.57 24.937 24.586 24.898 cv
24.598 24.863 24.617 24.832 24.641 24.805 cv
24.664 24.777 24.695 24.75 24.742 24.723 cv
26.785 23.41 li
26.801 23.398 26.82 23.387 26.852 23.379 cv
26.875 23.371 26.91 23.363 26.957 23.352 cv
26.996 23.344 27.047 23.336 27.102 23.332 cv
27.156 23.332 27.223 23.332 27.309 23.328 cv
27.414 23.332 27.508 23.336 27.582 23.344 cv
27.652 23.352 27.707 23.367 27.754 23.383 cv
27.793 23.402 27.82 23.422 27.836 23.445 cv
27.844 23.473 27.852 23.496 27.855 23.52 cv
27.855 31.316 li
29.461 31.316 li
29.496 31.32 29.531 31.328 29.563 31.348 cv
29.594 31.371 29.617 31.402 29.641 31.437 cv
29.656 31.477 29.672 31.523 29.688 31.582 cv
29.695 31.645 29.703 31.719 29.707 31.797 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
36.789 31.797 mo
36.785 31.887 36.777 31.957 36.766 32.016 cv
36.75 32.078 36.73 32.129 36.711 32.16 cv
36.688 32.199 36.664 32.223 36.633 32.238 cv
36.602 32.254 36.57 32.262 36.543 32.262 cv
31.906 32.262 li
31.871 32.262 31.844 32.254 31.816 32.238 cv
31.789 32.223 31.762 32.199 31.738 32.16 cv
31.711 32.129 31.691 32.078 31.68 32.016 cv
31.664 31.957 31.656 31.887 31.66 31.797 cv
31.656 31.719 31.664 31.645 31.68 31.582 cv
31.691 31.523 31.707 31.477 31.73 31.437 cv
31.746 31.402 31.773 31.371 31.805 31.348 cv
31.836 31.328 31.867 31.32 31.906 31.316 cv
33.758 31.316 li
33.758 24.57 li
32.043 25.59 li
31.953 25.641 31.883 25.668 31.836 25.676 cv
31.781 25.684 31.738 25.676 31.707 25.645 cv
31.672 25.617 31.652 25.566 31.641 25.496 cv
31.629 25.43 31.621 25.344 31.625 25.234 cv
31.621 25.16 31.625 25.094 31.637 25.035 cv
31.641 24.984 31.652 24.937 31.668 24.898 cv
31.68 24.863 31.699 24.832 31.723 24.805 cv
31.746 24.777 31.777 24.75 31.824 24.723 cv
33.867 23.41 li
33.883 23.398 33.902 23.387 33.934 23.379 cv
33.957 23.371 33.992 23.363 34.039 23.352 cv
34.078 23.344 34.129 23.336 34.184 23.332 cv
34.238 23.332 34.305 23.332 34.391 23.328 cv
34.496 23.332 34.59 23.336 34.664 23.344 cv
34.734 23.352 34.789 23.367 34.836 23.383 cv
34.875 23.402 34.902 23.422 34.918 23.445 cv
34.926 23.473 34.934 23.496 34.938 23.52 cv
34.938 31.316 li
36.543 31.316 li
36.578 31.32 36.613 31.328 36.645 31.348 cv
36.676 31.371 36.699 31.402 36.723 31.437 cv
36.738 31.477 36.754 31.523 36.77 31.582 cv
36.777 31.645 36.785 31.719 36.789 31.797 cv
cp
f
44.141 27.805 mo
44.137 28.488 44.086 29.109 43.98 29.672 cv
43.871 30.234 43.691 30.719 43.445 31.121 cv
43.191 31.527 42.863 31.84 42.465 32.059 cv
42.059 32.281 41.566 32.391 40.98 32.391 cv
40.422 32.391 39.949 32.293 39.57 32.094 cv
39.188 31.898 38.883 31.605 38.648 31.219 cv
38.414 30.832 38.246 30.359 38.152 29.793 cv
38.051 29.23 38.004 28.582 38.004 27.848 cv
38.004 27.176 38.059 26.555 38.168 25.988 cv
38.277 25.426 38.453 24.941 38.703 24.535 cv
38.945 24.133 39.27 23.82 39.676 23.594 cv
40.074 23.375 40.57 23.262 41.16 23.262 cv
41.719 23.262 42.191 23.363 42.574 23.559 cv
42.957 23.762 43.262 24.055 43.496 24.437 cv
43.727 24.828 43.895 25.301 43.992 25.863 cv
44.09 26.426 44.137 27.074 44.141 27.805 cv
cp
42.934 27.887 mo
42.93 27.445 42.914 27.047 42.887 26.695 cv
42.852 26.344 42.805 26.035 42.746 25.766 cv
42.68 25.496 42.602 25.266 42.504 25.07 cv
42.406 24.879 42.289 24.719 42.152 24.59 cv
42.012 24.465 41.852 24.371 41.68 24.312 cv
41.5 24.258 41.305 24.23 41.09 24.227 cv
40.699 24.23 40.383 24.32 40.145 24.504 cv
39.898 24.687 39.707 24.941 39.57 25.258 cv
39.43 25.578 39.336 25.949 39.285 26.379 cv
39.234 26.809 39.211 27.273 39.211 27.766 cv
39.211 28.43 39.242 28.992 39.313 29.453 cv
39.379 29.922 39.488 30.301 39.641 30.59 cv
39.785 30.887 39.977 31.098 40.207 31.227 cv
40.438 31.363 40.719 31.43 41.051 31.426 cv
41.305 31.43 41.527 31.391 41.723 31.305 cv
41.914 31.227 42.082 31.105 42.223 30.949 cv
42.363 30.797 42.477 30.613 42.57 30.398 cv
42.656 30.184 42.73 29.945 42.789 29.684 cv
42.84 29.426 42.879 29.145 42.902 28.84 cv
42.922 28.535 42.93 28.219 42.934 27.887 cv
cp
f
60.426 533.078 mo
60.422 533.168 60.414 533.238 60.402 533.297 cv
60.387 533.359 60.367 533.41 60.348 533.441 cv
60.324 533.48 60.301 533.504 60.27 533.52 cv
60.238 533.535 60.207 533.543 60.18 533.543 cv
55.543 533.543 li
55.508 533.543 55.48 533.535 55.453 533.52 cv
55.426 533.504 55.398 533.48 55.375 533.441 cv
55.348 533.41 55.328 533.359 55.316 533.297 cv
55.301 533.238 55.293 533.168 55.297 533.078 cv
55.293 533 55.301 532.926 55.316 532.863 cv
55.328 532.805 55.344 532.758 55.367 532.719 cv
55.383 532.684 55.41 532.652 55.441 532.629 cv
55.473 532.609 55.504 532.602 55.543 532.598 cv
57.395 532.598 li
57.395 525.852 li
55.68 526.871 li
55.59 526.922 55.52 526.949 55.473 526.957 cv
55.418 526.965 55.375 526.957 55.344 526.926 cv
55.309 526.898 55.289 526.848 55.277 526.777 cv
55.266 526.711 55.258 526.625 55.262 526.516 cv
55.258 526.441 55.262 526.375 55.273 526.316 cv
55.277 526.266 55.289 526.219 55.305 526.18 cv
55.316 526.145 55.336 526.113 55.359 526.086 cv
55.383 526.059 55.414 526.031 55.461 526.004 cv
57.504 524.691 li
57.52 524.68 57.539 524.668 57.57 524.66 cv
57.594 524.652 57.629 524.645 57.676 524.633 cv
57.715 524.625 57.766 524.617 57.82 524.613 cv
57.875 524.613 57.941 524.613 58.027 524.609 cv
58.133 524.613 58.227 524.617 58.301 524.625 cv
58.371 524.633 58.426 524.648 58.473 524.664 cv
58.512 524.684 58.539 524.703 58.555 524.727 cv
58.563 524.754 58.57 524.777 58.574 524.801 cv
58.574 532.598 li
60.18 532.598 li
60.215 532.602 60.25 532.609 60.281 532.629 cv
60.313 532.652 60.336 532.684 60.359 532.719 cv
60.375 532.758 60.391 532.805 60.406 532.863 cv
60.414 532.926 60.422 533 60.426 533.078 cv
cp
f
135.508 533.035 mo
135.504 533.121 135.5 533.195 135.488 533.258 cv
135.477 533.324 135.461 533.379 135.441 533.418 cv
135.418 533.465 135.391 533.496 135.359 533.512 cv
135.324 533.535 135.285 533.543 135.246 533.543 cv
130.344 533.543 li
130.281 533.543 130.223 533.535 130.176 533.52 cv
130.125 533.504 130.086 533.48 130.051 533.441 cv
130.016 533.41 129.988 533.355 129.977 533.285 cv
129.957 533.215 129.949 533.129 129.953 533.027 cv
129.949 532.937 129.953 532.859 129.961 532.789 cv
129.965 532.723 129.98 532.664 130.008 532.609 cv
130.031 532.559 130.063 532.504 130.098 532.449 cv
130.133 532.398 130.176 532.344 130.234 532.281 cv
132.008 530.457 li
132.418 530.039 132.746 529.664 132.996 529.328 cv
133.242 529 133.434 528.695 133.566 528.418 cv
133.699 528.145 133.785 527.895 133.832 527.668 cv
133.871 527.445 133.895 527.234 133.895 527.039 cv
133.895 526.844 133.859 526.66 133.793 526.48 cv
133.727 526.309 133.633 526.152 133.508 526.016 cv
133.383 525.887 133.227 525.781 133.039 525.699 cv
132.852 525.625 132.633 525.586 132.387 525.582 cv
132.098 525.586 131.84 525.625 131.613 525.699 cv
131.383 525.781 131.184 525.867 131.012 525.953 cv
130.84 526.047 130.695 526.129 130.578 526.207 cv
130.461 526.285 130.375 526.324 130.324 526.324 cv
130.289 526.324 130.258 526.316 130.234 526.297 cv
130.203 526.281 130.184 526.25 130.168 526.207 cv
130.152 526.168 130.137 526.113 130.129 526.043 cv
130.117 525.977 130.113 525.895 130.117 525.797 cv
130.113 525.73 130.117 525.672 130.125 525.621 cv
130.129 525.57 130.137 525.527 130.148 525.488 cv
130.156 525.453 130.172 525.418 130.191 525.387 cv
130.211 525.355 130.246 525.316 130.305 525.266 cv
130.355 525.219 130.449 525.152 130.586 525.07 cv
130.719 524.988 130.891 524.91 131.094 524.828 cv
131.297 524.75 131.52 524.68 131.766 524.625 cv
132.008 524.57 132.266 524.543 132.539 524.543 cv
132.965 524.543 133.34 524.605 133.664 524.727 cv
133.984 524.848 134.25 525.012 134.465 525.223 cv
134.676 525.434 134.836 525.68 134.941 525.953 cv
135.047 526.234 135.102 526.531 135.102 526.844 cv
135.102 527.133 135.074 527.414 135.023 527.691 cv
134.973 527.977 134.867 528.281 134.707 528.605 cv
134.543 528.934 134.309 529.297 134.004 529.695 cv
133.695 530.098 133.289 530.559 132.785 531.074 cv
131.379 532.543 li
135.238 532.543 li
135.27 532.547 135.305 532.559 135.344 532.574 cv
135.375 532.598 135.406 532.629 135.434 532.668 cv
135.457 532.711 135.477 532.762 135.488 532.82 cv
135.5 532.887 135.504 532.957 135.508 533.035 cv
cp
f
210.973 531.02 mo
210.969 531.172 210.945 531.293 210.902 531.379 cv
210.855 531.469 210.793 531.512 210.711 531.508 cv
209.711 531.508 li
209.711 533.371 li
209.711 533.41 209.699 533.441 209.684 533.465 cv
209.66 533.492 209.629 533.512 209.586 533.531 cv
209.535 533.547 209.473 533.559 209.402 533.57 cv
209.324 533.578 209.23 533.582 209.113 533.586 cv
208.996 533.582 208.898 533.578 208.828 533.57 cv
208.75 533.559 208.691 533.547 208.648 533.531 cv
208.602 533.512 208.57 533.492 208.555 533.465 cv
208.535 533.441 208.527 533.41 208.531 533.371 cv
208.531 531.508 li
204.902 531.508 li
204.844 531.512 204.801 531.504 204.766 531.488 cv
204.73 531.477 204.695 531.449 204.668 531.41 cv
204.637 531.375 204.617 531.324 204.605 531.254 cv
204.594 531.187 204.59 531.098 204.59 530.984 cv
204.59 530.902 204.59 530.824 204.598 530.754 cv
204.598 530.684 204.609 530.621 204.625 530.566 cv
204.637 530.512 204.652 530.457 204.68 530.402 cv
204.699 530.348 204.727 530.293 204.762 530.23 cv
207.922 524.844 li
207.941 524.809 207.977 524.777 208.023 524.75 cv
208.066 524.723 208.121 524.699 208.195 524.68 cv
208.262 524.664 208.348 524.652 208.453 524.641 cv
208.555 524.637 208.676 524.633 208.816 524.629 cv
208.965 524.633 209.102 524.637 209.219 524.648 cv
209.332 524.66 209.422 524.676 209.496 524.691 cv
209.563 524.711 209.617 524.734 209.656 524.766 cv
209.691 524.797 209.711 524.832 209.711 524.871 cv
209.711 530.535 li
210.711 530.535 li
210.785 530.539 210.848 530.578 210.898 530.656 cv
210.945 530.738 210.969 530.859 210.973 531.02 cv
cp
208.531 525.668 mo
208.52 525.668 li
205.668 530.535 li
208.531 530.535 li
cp
f
285.922 530.672 mo
285.922 531.062 285.859 531.441 285.742 531.801 cv
285.617 532.168 285.434 532.484 285.191 532.758 cv
284.941 533.035 284.629 533.258 284.254 533.422 cv
283.871 533.59 283.426 533.672 282.91 533.672 cv
282.539 533.672 282.211 533.629 281.93 533.535 cv
281.645 533.449 281.398 533.316 281.188 533.145 cv
280.977 532.977 280.801 532.77 280.664 532.523 cv
280.523 532.277 280.41 531.996 280.328 531.68 cv
280.242 531.367 280.184 531.023 280.148 530.645 cv
280.109 530.273 280.09 529.871 280.094 529.437 cv
280.09 529.059 280.109 528.676 280.152 528.285 cv
280.191 527.902 280.266 527.527 280.371 527.16 cv
280.477 526.801 280.621 526.461 280.801 526.145 cv
280.98 525.828 281.207 525.551 281.48 525.316 cv
281.754 525.082 282.078 524.895 282.457 524.754 cv
282.836 524.617 283.277 524.551 283.781 524.547 cv
283.949 524.551 284.121 524.559 284.293 524.578 cv
284.465 524.602 284.625 524.633 284.773 524.664 cv
284.922 524.703 285.043 524.738 285.145 524.777 cv
285.242 524.816 285.309 524.852 285.344 524.875 cv
285.371 524.902 285.395 524.93 285.414 524.957 cv
285.43 524.988 285.445 525.02 285.453 525.055 cv
285.461 525.09 285.465 525.129 285.473 525.172 cv
285.473 525.215 285.477 525.27 285.48 525.332 cv
285.477 525.418 285.477 525.488 285.477 525.543 cv
285.473 525.605 285.461 525.652 285.449 525.687 cv
285.43 525.727 285.41 525.754 285.387 525.77 cv
285.359 525.789 285.328 525.797 285.289 525.797 cv
285.238 525.797 285.168 525.781 285.082 525.75 cv
284.992 525.719 284.887 525.684 284.766 525.641 cv
284.641 525.605 284.492 525.57 284.316 525.535 cv
284.141 525.508 283.938 525.492 283.707 525.488 cv
283.277 525.492 282.91 525.578 282.605 525.75 cv
282.301 525.922 282.051 526.156 281.855 526.449 cv
281.66 526.742 281.516 527.082 281.426 527.465 cv
281.328 527.855 281.273 528.258 281.266 528.676 cv
281.383 528.609 281.52 528.543 281.668 528.473 cv
281.816 528.406 281.977 528.344 282.152 528.285 cv
282.328 528.234 282.516 528.187 282.711 528.152 cv
282.906 528.121 283.117 528.105 283.344 528.102 cv
283.82 528.105 284.223 528.172 284.555 528.297 cv
284.883 528.43 285.148 528.609 285.355 528.84 cv
285.555 529.07 285.699 529.34 285.789 529.652 cv
285.875 529.965 285.922 530.305 285.922 530.672 cv
cp
284.727 530.781 mo
284.727 530.52 284.699 530.277 284.648 530.059 cv
284.594 529.844 284.504 529.66 284.383 529.504 cv
284.258 529.355 284.094 529.238 283.891 529.156 cv
283.68 529.074 283.426 529.031 283.129 529.031 cv
282.957 529.031 282.789 529.047 282.621 529.078 cv
282.449 529.109 282.285 529.152 282.129 529.199 cv
281.969 529.254 281.82 529.316 281.68 529.387 cv
281.535 529.461 281.402 529.535 281.285 529.613 cv
281.281 530.207 281.32 530.703 281.398 531.098 cv
281.473 531.496 281.582 531.812 281.727 532.051 cv
281.871 532.293 282.051 532.465 282.266 532.566 cv
282.48 532.672 282.73 532.723 283.02 532.719 cv
283.309 532.723 283.563 532.668 283.777 532.555 cv
283.992 532.449 284.168 532.301 284.313 532.113 cv
284.453 531.93 284.559 531.723 284.625 531.492 cv
284.691 531.262 284.727 531.027 284.727 530.781 cv
cp
f
361 531.266 mo
361 531.652 360.93 531.996 360.793 532.293 cv
360.656 532.598 360.461 532.848 360.203 533.051 cv
359.945 533.258 359.625 533.414 359.246 533.516 cv
358.863 533.621 358.43 533.672 357.945 533.672 cv
357.484 533.672 357.074 533.625 356.715 533.531 cv
356.352 533.437 356.047 533.297 355.797 533.105 cv
355.547 532.922 355.355 532.691 355.223 532.414 cv
355.09 532.141 355.023 531.828 355.023 531.473 cv
355.023 531.199 355.066 530.941 355.16 530.707 cv
355.246 530.473 355.379 530.258 355.555 530.062 cv
355.723 529.867 355.934 529.684 356.188 529.508 cv
356.438 529.34 356.723 529.176 357.039 529.02 cv
356.766 528.879 356.523 528.73 356.313 528.57 cv
356.102 528.414 355.922 528.242 355.777 528.055 cv
355.629 527.871 355.52 527.676 355.445 527.465 cv
355.367 527.258 355.328 527.027 355.332 526.777 cv
355.328 526.469 355.383 526.176 355.5 525.902 cv
355.609 525.633 355.781 525.398 356.008 525.195 cv
356.234 524.996 356.52 524.836 356.871 524.719 cv
357.215 524.602 357.625 524.543 358.094 524.543 cv
358.539 524.543 358.926 524.598 359.254 524.703 cv
359.582 524.812 359.852 524.957 360.063 525.141 cv
360.273 525.328 360.43 525.547 360.535 525.797 cv
360.633 526.047 360.684 526.316 360.688 526.605 cv
360.684 526.84 360.645 527.066 360.574 527.277 cv
360.496 527.496 360.387 527.699 360.238 527.887 cv
360.09 528.082 359.91 528.262 359.699 528.426 cv
359.488 528.598 359.246 528.754 358.973 528.895 cv
359.293 529.059 359.578 529.223 359.836 529.391 cv
360.086 529.559 360.301 529.738 360.477 529.934 cv
360.645 530.129 360.773 530.336 360.867 530.551 cv
360.953 530.77 361 531.008 361 531.266 cv
cp
359.52 526.715 mo
359.516 526.527 359.484 526.352 359.418 526.195 cv
359.352 526.039 359.254 525.906 359.129 525.797 cv
359 525.687 358.84 525.605 358.652 525.547 cv
358.457 525.492 358.242 525.465 358.004 525.461 cv
357.508 525.465 357.133 525.574 356.883 525.797 cv
356.625 526.023 356.5 526.332 356.504 526.715 cv
356.5 526.895 356.531 527.059 356.594 527.211 cv
356.656 527.367 356.75 527.512 356.883 527.648 cv
357.008 527.785 357.172 527.918 357.375 528.047 cv
357.57 528.18 357.809 528.316 358.086 528.457 cv
358.547 528.223 358.902 527.961 359.148 527.668 cv
359.395 527.383 359.516 527.066 359.52 526.715 cv
cp
359.809 531.391 mo
359.805 531.184 359.766 530.992 359.691 530.82 cv
359.609 530.652 359.492 530.492 359.336 530.34 cv
359.18 530.191 358.98 530.047 358.746 529.906 cv
358.508 529.77 358.238 529.625 357.93 529.473 cv
357.641 529.617 357.387 529.758 357.172 529.898 cv
356.953 530.039 356.773 530.187 356.637 530.336 cv
356.496 530.492 356.391 530.648 356.32 530.812 cv
356.246 530.98 356.211 531.164 356.215 531.363 cv
356.211 531.809 356.363 532.152 356.672 532.391 cv
356.973 532.637 357.426 532.758 358.031 532.754 cv
358.613 532.758 359.059 532.637 359.359 532.387 cv
359.656 532.145 359.805 531.812 359.809 531.391 cv
cp
f
432.355 533.078 mo
432.352 533.168 432.344 533.238 432.332 533.297 cv
432.316 533.359 432.297 533.41 432.277 533.441 cv
432.254 533.48 432.23 533.504 432.199 533.52 cv
432.168 533.535 432.137 533.543 432.109 533.543 cv
427.473 533.543 li
427.438 533.543 427.41 533.535 427.383 533.52 cv
427.355 533.504 427.328 533.48 427.305 533.441 cv
427.277 533.41 427.258 533.359 427.246 533.297 cv
427.23 533.238 427.223 533.168 427.227 533.078 cv
427.223 533 427.23 532.926 427.246 532.863 cv
427.258 532.805 427.273 532.758 427.297 532.719 cv
427.313 532.684 427.34 532.652 427.371 532.629 cv
427.402 532.609 427.434 532.602 427.473 532.598 cv
429.324 532.598 li
429.324 525.852 li
427.609 526.871 li
427.52 526.922 427.449 526.949 427.402 526.957 cv
427.348 526.965 427.305 526.957 427.273 526.926 cv
427.238 526.898 427.219 526.848 427.207 526.777 cv
427.195 526.711 427.188 526.625 427.191 526.516 cv
427.188 526.441 427.191 526.375 427.203 526.316 cv
427.207 526.266 427.219 526.219 427.234 526.18 cv
427.246 526.145 427.266 526.113 427.289 526.086 cv
427.313 526.059 427.344 526.031 427.391 526.004 cv
429.434 524.691 li
429.449 524.68 429.469 524.668 429.5 524.66 cv
429.523 524.652 429.559 524.645 429.605 524.633 cv
429.645 524.625 429.695 524.617 429.75 524.613 cv
429.805 524.613 429.871 524.613 429.957 524.609 cv
430.063 524.613 430.156 524.617 430.23 524.625 cv
430.301 524.633 430.355 524.648 430.402 524.664 cv
430.441 524.684 430.469 524.703 430.484 524.727 cv
430.492 524.754 430.5 524.777 430.504 524.801 cv
430.504 532.598 li
432.109 532.598 li
432.145 532.602 432.18 532.609 432.211 532.629 cv
432.242 532.652 432.266 532.684 432.289 532.719 cv
432.305 532.758 432.32 532.805 432.336 532.863 cv
432.344 532.926 432.352 533 432.355 533.078 cv
cp
f
439.707 529.086 mo
439.703 529.77 439.652 530.391 439.547 530.953 cv
439.438 531.516 439.258 532 439.012 532.402 cv
438.758 532.809 438.43 533.121 438.031 533.34 cv
437.625 533.562 437.133 533.672 436.547 533.672 cv
435.988 533.672 435.516 533.574 435.137 533.375 cv
434.754 533.18 434.449 532.887 434.215 532.5 cv
433.98 532.113 433.813 531.641 433.719 531.074 cv
433.617 530.512 433.57 529.863 433.57 529.129 cv
433.57 528.457 433.625 527.836 433.734 527.27 cv
433.844 526.707 434.02 526.223 434.27 525.816 cv
434.512 525.414 434.836 525.102 435.242 524.875 cv
435.641 524.656 436.137 524.543 436.727 524.543 cv
437.285 524.543 437.758 524.645 438.141 524.84 cv
438.523 525.043 438.828 525.336 439.063 525.719 cv
439.293 526.109 439.461 526.582 439.559 527.145 cv
439.656 527.707 439.703 528.355 439.707 529.086 cv
cp
438.5 529.168 mo
438.496 528.727 438.48 528.328 438.453 527.977 cv
438.418 527.625 438.371 527.316 438.313 527.047 cv
438.246 526.777 438.168 526.547 438.07 526.352 cv
437.973 526.16 437.855 526 437.719 525.871 cv
437.578 525.746 437.418 525.652 437.246 525.594 cv
437.066 525.539 436.871 525.512 436.656 525.508 cv
436.266 525.512 435.949 525.602 435.711 525.785 cv
435.465 525.969 435.273 526.223 435.137 526.539 cv
434.996 526.859 434.902 527.23 434.852 527.66 cv
434.801 528.09 434.777 528.555 434.777 529.047 cv
434.777 529.711 434.809 530.273 434.879 530.734 cv
434.945 531.203 435.055 531.582 435.207 531.871 cv
435.352 532.168 435.543 532.379 435.773 532.508 cv
436.004 532.645 436.285 532.711 436.617 532.707 cv
436.871 532.711 437.094 532.672 437.289 532.586 cv
437.48 532.508 437.648 532.387 437.789 532.23 cv
437.93 532.078 438.043 531.895 438.137 531.68 cv
438.223 531.465 438.297 531.227 438.355 530.965 cv
438.406 530.707 438.445 530.426 438.469 530.121 cv
438.488 529.816 438.496 529.5 438.5 529.168 cv
cp
f
507.457 533.078 mo
507.453 533.168 507.445 533.238 507.434 533.297 cv
507.418 533.359 507.398 533.41 507.379 533.441 cv
507.355 533.48 507.332 533.504 507.301 533.52 cv
507.27 533.535 507.238 533.543 507.211 533.543 cv
502.574 533.543 li
502.539 533.543 502.512 533.535 502.484 533.52 cv
502.457 533.504 502.43 533.48 502.406 533.441 cv
502.379 533.41 502.359 533.359 502.348 533.297 cv
502.332 533.238 502.324 533.168 502.328 533.078 cv
502.324 533 502.332 532.926 502.348 532.863 cv
502.359 532.805 502.375 532.758 502.398 532.719 cv
502.414 532.684 502.441 532.652 502.473 532.629 cv
502.504 532.609 502.535 532.602 502.574 532.598 cv
504.426 532.598 li
504.426 525.852 li
502.711 526.871 li
502.621 526.922 502.551 526.949 502.504 526.957 cv
502.449 526.965 502.406 526.957 502.375 526.926 cv
502.34 526.898 502.32 526.848 502.309 526.777 cv
502.297 526.711 502.289 526.625 502.293 526.516 cv
502.289 526.441 502.293 526.375 502.305 526.316 cv
502.309 526.266 502.32 526.219 502.336 526.18 cv
502.348 526.145 502.367 526.113 502.391 526.086 cv
502.414 526.059 502.445 526.031 502.492 526.004 cv
504.535 524.691 li
504.551 524.68 504.57 524.668 504.602 524.66 cv
504.625 524.652 504.66 524.645 504.707 524.633 cv
504.746 524.625 504.797 524.617 504.852 524.613 cv
504.906 524.613 504.973 524.613 505.059 524.609 cv
505.164 524.613 505.258 524.617 505.332 524.625 cv
505.402 524.633 505.457 524.648 505.504 524.664 cv
505.543 524.684 505.57 524.703 505.586 524.727 cv
505.594 524.754 505.602 524.777 505.605 524.801 cv
505.605 532.598 li
507.211 532.598 li
507.246 532.602 507.281 532.609 507.313 532.629 cv
507.344 532.652 507.367 532.684 507.391 532.719 cv
507.406 532.758 507.422 532.805 507.438 532.863 cv
507.445 532.926 507.453 533 507.457 533.078 cv
cp
f
514.516 533.035 mo
514.512 533.121 514.508 533.195 514.496 533.258 cv
514.484 533.324 514.469 533.379 514.449 533.418 cv
514.426 533.465 514.398 533.496 514.367 533.512 cv
514.332 533.535 514.293 533.543 514.254 533.543 cv
509.352 533.543 li
509.289 533.543 509.23 533.535 509.184 533.52 cv
509.133 533.504 509.094 533.48 509.059 533.441 cv
509.023 533.41 508.996 533.355 508.984 533.285 cv
508.965 533.215 508.957 533.129 508.961 533.027 cv
508.957 532.937 508.961 532.859 508.969 532.789 cv
508.973 532.723 508.988 532.664 509.016 532.609 cv
509.039 532.559 509.07 532.504 509.105 532.449 cv
509.141 532.398 509.184 532.344 509.242 532.281 cv
511.016 530.457 li
511.426 530.039 511.754 529.664 512.004 529.328 cv
512.25 529 512.441 528.695 512.574 528.418 cv
512.707 528.145 512.793 527.895 512.84 527.668 cv
512.879 527.445 512.902 527.234 512.902 527.039 cv
512.902 526.844 512.867 526.66 512.801 526.48 cv
512.734 526.309 512.641 526.152 512.516 526.016 cv
512.391 525.887 512.234 525.781 512.047 525.699 cv
511.859 525.625 511.641 525.586 511.395 525.582 cv
511.105 525.586 510.848 525.625 510.621 525.699 cv
510.391 525.781 510.191 525.867 510.02 525.953 cv
509.848 526.047 509.703 526.129 509.586 526.207 cv
509.469 526.285 509.383 526.324 509.332 526.324 cv
509.297 526.324 509.266 526.316 509.242 526.297 cv
509.211 526.281 509.191 526.25 509.176 526.207 cv
509.16 526.168 509.145 526.113 509.137 526.043 cv
509.125 525.977 509.121 525.895 509.125 525.797 cv
509.121 525.73 509.125 525.672 509.133 525.621 cv
509.137 525.57 509.145 525.527 509.156 525.488 cv
509.164 525.453 509.18 525.418 509.199 525.387 cv
509.219 525.355 509.254 525.316 509.313 525.266 cv
509.363 525.219 509.457 525.152 509.594 525.07 cv
509.727 524.988 509.898 524.91 510.102 524.828 cv
510.305 524.75 510.527 524.68 510.773 524.625 cv
511.016 524.57 511.273 524.543 511.547 524.543 cv
511.973 524.543 512.348 524.605 512.672 524.727 cv
512.992 524.848 513.258 525.012 513.473 525.223 cv
513.684 525.434 513.844 525.68 513.949 525.953 cv
514.055 526.234 514.109 526.531 514.109 526.844 cv
514.109 527.133 514.082 527.414 514.031 527.691 cv
513.98 527.977 513.875 528.281 513.715 528.605 cv
513.551 528.934 513.316 529.297 513.012 529.695 cv
512.703 530.098 512.297 530.559 511.793 531.074 cv
510.387 532.543 li
514.246 532.543 li
514.277 532.547 514.313 532.559 514.352 532.574 cv
514.383 532.598 514.414 532.629 514.441 532.668 cv
514.465 532.711 514.484 532.762 514.496 532.82 cv
514.508 532.887 514.512 532.957 514.516 533.035 cv
cp
f
582.547 533.078 mo
582.543 533.168 582.535 533.238 582.523 533.297 cv
582.508 533.359 582.488 533.41 582.469 533.441 cv
582.445 533.48 582.422 533.504 582.391 533.52 cv
582.359 533.535 582.328 533.543 582.301 533.543 cv
577.664 533.543 li
577.629 533.543 577.602 533.535 577.574 533.52 cv
577.547 533.504 577.52 533.48 577.496 533.441 cv
577.469 533.41 577.449 533.359 577.438 533.297 cv
577.422 533.238 577.414 533.168 577.418 533.078 cv
577.414 533 577.422 532.926 577.438 532.863 cv
577.449 532.805 577.465 532.758 577.488 532.719 cv
577.504 532.684 577.531 532.652 577.563 532.629 cv
577.594 532.609 577.625 532.602 577.664 532.598 cv
579.516 532.598 li
579.516 525.852 li
577.801 526.871 li
577.711 526.922 577.641 526.949 577.594 526.957 cv
577.539 526.965 577.496 526.957 577.465 526.926 cv
577.43 526.898 577.41 526.848 577.398 526.777 cv
577.387 526.711 577.379 526.625 577.383 526.516 cv
577.379 526.441 577.383 526.375 577.395 526.316 cv
577.398 526.266 577.41 526.219 577.426 526.18 cv
577.438 526.145 577.457 526.113 577.48 526.086 cv
577.504 526.059 577.535 526.031 577.582 526.004 cv
579.625 524.691 li
579.641 524.68 579.66 524.668 579.691 524.66 cv
579.715 524.652 579.75 524.645 579.797 524.633 cv
579.836 524.625 579.887 524.617 579.941 524.613 cv
579.996 524.613 580.063 524.613 580.148 524.609 cv
580.254 524.613 580.348 524.617 580.422 524.625 cv
580.492 524.633 580.547 524.648 580.594 524.664 cv
580.633 524.684 580.66 524.703 580.676 524.727 cv
580.684 524.754 580.691 524.777 580.695 524.801 cv
580.695 532.598 li
582.301 532.598 li
582.336 532.602 582.371 532.609 582.402 532.629 cv
582.434 532.652 582.457 532.684 582.48 532.719 cv
582.496 532.758 582.512 532.805 582.527 532.863 cv
582.535 532.926 582.543 533 582.547 533.078 cv
cp
f
589.98 531.02 mo
589.977 531.172 589.953 531.293 589.91 531.379 cv
589.863 531.469 589.801 531.512 589.719 531.508 cv
588.719 531.508 li
588.719 533.371 li
588.719 533.41 588.707 533.441 588.691 533.465 cv
588.668 533.492 588.637 533.512 588.594 533.531 cv
588.543 533.547 588.48 533.559 588.41 533.57 cv
588.332 533.578 588.238 533.582 588.121 533.586 cv
588.004 533.582 587.906 533.578 587.836 533.57 cv
587.758 533.559 587.699 533.547 587.656 533.531 cv
587.609 533.512 587.578 533.492 587.563 533.465 cv
587.543 533.441 587.535 533.41 587.539 533.371 cv
587.539 531.508 li
583.91 531.508 li
583.852 531.512 583.809 531.504 583.773 531.488 cv
583.738 531.477 583.703 531.449 583.676 531.41 cv
583.645 531.375 583.625 531.324 583.613 531.254 cv
583.602 531.187 583.598 531.098 583.598 530.984 cv
583.598 530.902 583.598 530.824 583.605 530.754 cv
583.605 530.684 583.617 530.621 583.633 530.566 cv
583.645 530.512 583.66 530.457 583.688 530.402 cv
583.707 530.348 583.734 530.293 583.77 530.23 cv
586.93 524.844 li
586.949 524.809 586.984 524.777 587.031 524.75 cv
587.074 524.723 587.129 524.699 587.203 524.68 cv
587.27 524.664 587.355 524.652 587.461 524.641 cv
587.563 524.637 587.684 524.633 587.824 524.629 cv
587.973 524.633 588.109 524.637 588.227 524.648 cv
588.34 524.66 588.43 524.676 588.504 524.691 cv
588.57 524.711 588.625 524.734 588.664 524.766 cv
588.699 524.797 588.719 524.832 588.719 524.871 cv
588.719 530.535 li
589.719 530.535 li
589.793 530.539 589.855 530.578 589.906 530.656 cv
589.953 530.738 589.977 530.859 589.98 531.02 cv
cp
587.539 525.668 mo
587.527 525.668 li
584.676 530.535 li
587.539 530.535 li
cp
f
657.645 533.078 mo
657.641 533.168 657.633 533.238 657.621 533.297 cv
657.605 533.359 657.586 533.41 657.566 533.441 cv
657.543 533.48 657.52 533.504 657.488 533.52 cv
657.457 533.535 657.426 533.543 657.398 533.543 cv
652.762 533.543 li
652.727 533.543 652.699 533.535 652.672 533.52 cv
652.645 533.504 652.617 533.48 652.594 533.441 cv
652.566 533.41 652.547 533.359 652.535 533.297 cv
652.52 533.238 652.512 533.168 652.516 533.078 cv
652.512 533 652.52 532.926 652.535 532.863 cv
652.547 532.805 652.563 532.758 652.586 532.719 cv
652.602 532.684 652.629 532.652 652.66 532.629 cv
652.691 532.609 652.723 532.602 652.762 532.598 cv
654.613 532.598 li
654.613 525.852 li
652.898 526.871 li
652.809 526.922 652.738 526.949 652.691 526.957 cv
652.637 526.965 652.594 526.957 652.563 526.926 cv
652.527 526.898 652.508 526.848 652.496 526.777 cv
652.484 526.711 652.477 526.625 652.48 526.516 cv
652.477 526.441 652.48 526.375 652.492 526.316 cv
652.496 526.266 652.508 526.219 652.523 526.18 cv
652.535 526.145 652.555 526.113 652.578 526.086 cv
652.602 526.059 652.633 526.031 652.68 526.004 cv
654.723 524.691 li
654.738 524.68 654.758 524.668 654.789 524.66 cv
654.813 524.652 654.848 524.645 654.895 524.633 cv
654.934 524.625 654.984 524.617 655.039 524.613 cv
655.094 524.613 655.16 524.613 655.246 524.609 cv
655.352 524.613 655.445 524.617 655.52 524.625 cv
655.59 524.633 655.645 524.648 655.691 524.664 cv
655.73 524.684 655.758 524.703 655.773 524.727 cv
655.781 524.754 655.789 524.777 655.793 524.801 cv
655.793 532.598 li
657.398 532.598 li
657.434 532.602 657.469 532.609 657.5 532.629 cv
657.531 532.652 657.555 532.684 657.578 532.719 cv
657.594 532.758 657.609 532.805 657.625 532.863 cv
657.633 532.926 657.641 533 657.645 533.078 cv
cp
f
664.934 530.672 mo
664.934 531.062 664.871 531.441 664.754 531.801 cv
664.629 532.168 664.445 532.484 664.203 532.758 cv
663.953 533.035 663.641 533.258 663.266 533.422 cv
662.883 533.59 662.438 533.672 661.922 533.672 cv
661.551 533.672 661.223 533.629 660.941 533.535 cv
660.656 533.449 660.41 533.316 660.199 533.145 cv
659.988 532.977 659.813 532.77 659.676 532.523 cv
659.535 532.277 659.422 531.996 659.34 531.68 cv
659.254 531.367 659.195 531.023 659.16 530.645 cv
659.121 530.273 659.102 529.871 659.105 529.437 cv
659.102 529.059 659.121 528.676 659.164 528.285 cv
659.203 527.902 659.277 527.527 659.383 527.16 cv
659.488 526.801 659.633 526.461 659.813 526.145 cv
659.992 525.828 660.219 525.551 660.492 525.316 cv
660.766 525.082 661.09 524.895 661.469 524.754 cv
661.848 524.617 662.289 524.551 662.793 524.547 cv
662.961 524.551 663.133 524.559 663.305 524.578 cv
663.477 524.602 663.637 524.633 663.785 524.664 cv
663.934 524.703 664.055 524.738 664.156 524.777 cv
664.254 524.816 664.32 524.852 664.355 524.875 cv
664.383 524.902 664.406 524.93 664.426 524.957 cv
664.441 524.988 664.457 525.02 664.465 525.055 cv
664.473 525.09 664.477 525.129 664.484 525.172 cv
664.484 525.215 664.488 525.27 664.492 525.332 cv
664.488 525.418 664.488 525.488 664.488 525.543 cv
664.484 525.605 664.473 525.652 664.461 525.687 cv
664.441 525.727 664.422 525.754 664.398 525.77 cv
664.371 525.789 664.34 525.797 664.301 525.797 cv
664.25 525.797 664.18 525.781 664.094 525.75 cv
664.004 525.719 663.898 525.684 663.777 525.641 cv
663.652 525.605 663.504 525.57 663.328 525.535 cv
663.152 525.508 662.949 525.492 662.719 525.488 cv
662.289 525.492 661.922 525.578 661.617 525.75 cv
661.313 525.922 661.063 526.156 660.867 526.449 cv
660.672 526.742 660.527 527.082 660.438 527.465 cv
660.34 527.855 660.285 528.258 660.277 528.676 cv
660.395 528.609 660.531 528.543 660.68 528.473 cv
660.828 528.406 660.988 528.344 661.164 528.285 cv
661.34 528.234 661.527 528.187 661.723 528.152 cv
661.918 528.121 662.129 528.105 662.355 528.102 cv
662.832 528.105 663.234 528.172 663.566 528.297 cv
663.895 528.43 664.16 528.609 664.367 528.84 cv
664.566 529.07 664.711 529.34 664.801 529.652 cv
664.887 529.965 664.934 530.305 664.934 530.672 cv
cp
663.738 530.781 mo
663.738 530.52 663.711 530.277 663.66 530.059 cv
663.605 529.844 663.516 529.66 663.395 529.504 cv
663.27 529.355 663.105 529.238 662.902 529.156 cv
662.691 529.074 662.438 529.031 662.141 529.031 cv
661.969 529.031 661.801 529.047 661.633 529.078 cv
661.461 529.109 661.297 529.152 661.141 529.199 cv
660.98 529.254 660.832 529.316 660.691 529.387 cv
660.547 529.461 660.414 529.535 660.297 529.613 cv
660.293 530.207 660.332 530.703 660.41 531.098 cv
660.484 531.496 660.594 531.812 660.738 532.051 cv
660.883 532.293 661.063 532.465 661.277 532.566 cv
661.492 532.672 661.742 532.723 662.031 532.719 cv
662.32 532.723 662.574 532.668 662.789 532.555 cv
663.004 532.449 663.18 532.301 663.324 532.113 cv
663.465 531.93 663.57 531.723 663.637 531.492 cv
663.703 531.262 663.738 531.027 663.738 530.781 cv
cp
f
7.629 314.16 mo
7.73 314.164 7.816 314.168 7.887 314.176 cv
7.961 314.187 8.02 314.203 8.063 314.227 cv
8.109 314.25 8.141 314.281 8.16 314.312 cv
8.184 314.352 8.195 314.387 8.191 314.426 cv
8.191 317.262 li
16.934 317.262 li
16.977 317.262 17.012 317.273 17.043 317.293 cv
17.074 317.316 17.102 317.352 17.117 317.402 cv
17.137 317.457 17.148 317.527 17.164 317.609 cv
17.176 317.699 17.184 317.805 17.184 317.93 cv
17.184 318.055 17.176 318.164 17.164 318.25 cv
17.148 318.344 17.137 318.414 17.117 318.461 cv
17.102 318.516 17.074 318.551 17.043 318.57 cv
17.012 318.594 16.977 318.605 16.934 318.602 cv
8.191 318.602 li
8.191 321.437 li
8.195 321.484 8.184 321.52 8.16 321.551 cv
8.141 321.586 8.109 321.613 8.063 321.633 cv
8.02 321.656 7.961 321.676 7.887 321.684 cv
7.816 321.699 7.73 321.703 7.629 321.703 cv
7.531 321.703 7.445 321.699 7.367 321.684 cv
7.297 321.676 7.234 321.656 7.184 321.633 cv
7.141 321.613 7.105 321.586 7.082 321.551 cv
7.063 321.52 7.055 321.484 7.051 321.437 cv
7.051 314.426 li
7.055 314.387 7.063 314.352 7.082 314.312 cv
7.105 314.281 7.141 314.25 7.184 314.227 cv
7.234 314.203 7.297 314.187 7.367 314.176 cv
7.445 314.168 7.531 314.164 7.629 314.16 cv
cp
f
16.941 311.57 mo
16.988 311.574 17.023 311.586 17.047 311.602 cv
17.078 311.625 17.102 311.656 17.121 311.703 cv
17.141 311.75 17.152 311.816 17.168 311.895 cv
17.176 311.98 17.184 312.086 17.184 312.215 cv
17.184 312.344 17.176 312.449 17.168 312.527 cv
17.152 312.613 17.141 312.68 17.121 312.727 cv
17.102 312.781 17.078 312.812 17.047 312.828 cv
17.023 312.848 16.988 312.859 16.941 312.855 cv
9.93 312.855 li
9.895 312.859 9.863 312.848 9.828 312.828 cv
9.801 312.812 9.773 312.781 9.75 312.727 cv
9.73 312.68 9.715 312.613 9.703 312.527 cv
9.695 312.449 9.691 312.344 9.688 312.215 cv
9.691 312.086 9.695 311.98 9.703 311.895 cv
9.715 311.816 9.73 311.75 9.75 311.703 cv
9.773 311.656 9.801 311.625 9.828 311.602 cv
9.863 311.586 9.895 311.574 9.93 311.57 cv
cp
7.559 311.422 mo
7.863 311.422 8.07 311.48 8.176 311.594 cv
8.289 311.707 8.344 311.918 8.34 312.223 cv
8.344 312.527 8.289 312.734 8.18 312.844 cv
8.074 312.961 7.871 313.016 7.574 313.012 cv
7.273 313.016 7.07 312.957 6.961 312.84 cv
6.855 312.727 6.801 312.516 6.797 312.207 cv
6.801 311.906 6.855 311.703 6.957 311.59 cv
7.066 311.48 7.266 311.422 7.559 311.422 cv
cp
f
16.941 298.715 mo
16.988 298.719 17.023 298.727 17.047 298.746 cv
17.078 298.77 17.102 298.805 17.121 298.848 cv
17.141 298.898 17.152 298.965 17.168 299.043 cv
17.176 299.129 17.184 299.23 17.184 299.355 cv
17.184 299.488 17.176 299.598 17.168 299.676 cv
17.152 299.762 17.141 299.828 17.121 299.875 cv
17.102 299.93 17.078 299.965 17.047 299.98 cv
17.023 300.004 16.988 300.012 16.941 300.012 cv
12.68 300.012 li
12.387 300.012 12.117 300.039 11.871 300.09 cv
11.629 300.145 11.418 300.227 11.238 300.34 cv
11.063 300.453 10.926 300.598 10.832 300.773 cv
10.738 300.953 10.691 301.164 10.691 301.398 cv
10.691 301.695 10.809 301.992 11.035 302.289 cv
11.27 302.594 11.602 302.922 12.039 303.277 cv
16.941 303.277 li
16.988 303.281 17.023 303.293 17.047 303.309 cv
17.078 303.332 17.102 303.363 17.121 303.41 cv
17.141 303.461 17.152 303.527 17.168 303.609 cv
17.176 303.695 17.184 303.801 17.184 303.922 cv
17.184 304.043 17.176 304.145 17.168 304.23 cv
17.152 304.316 17.141 304.387 17.121 304.434 cv
17.102 304.488 17.078 304.52 17.047 304.535 cv
17.023 304.555 16.988 304.566 16.941 304.562 cv
12.68 304.562 li
12.387 304.566 12.117 304.594 11.871 304.648 cv
11.629 304.707 11.418 304.793 11.238 304.906 cv
11.063 305.02 10.926 305.164 10.832 305.336 cv
10.738 305.516 10.691 305.723 10.691 305.957 cv
10.691 306.258 10.809 306.555 11.035 306.855 cv
11.27 307.156 11.602 307.484 12.039 307.836 cv
16.941 307.836 li
16.988 307.84 17.023 307.852 17.047 307.867 cv
17.078 307.891 17.102 307.922 17.121 307.969 cv
17.141 308.016 17.152 308.082 17.168 308.16 cv
17.176 308.246 17.184 308.352 17.184 308.48 cv
17.184 308.609 17.176 308.715 17.168 308.793 cv
17.152 308.879 17.141 308.945 17.121 308.992 cv
17.102 309.047 17.078 309.078 17.047 309.094 cv
17.023 309.113 16.988 309.125 16.941 309.121 cv
9.93 309.121 li
9.891 309.125 9.855 309.117 9.824 309.098 cv
9.797 309.086 9.773 309.055 9.746 309.004 cv
9.727 308.961 9.711 308.898 9.699 308.824 cv
9.695 308.754 9.691 308.66 9.688 308.535 cv
9.691 308.426 9.695 308.328 9.699 308.25 cv
9.711 308.176 9.727 308.117 9.746 308.074 cv
9.773 308.035 9.797 308.008 9.824 307.988 cv
9.855 307.973 9.891 307.965 9.93 307.961 cv
10.855 307.961 li
10.414 307.57 10.094 307.187 9.887 306.812 cv
9.684 306.445 9.578 306.066 9.578 305.684 cv
9.578 305.395 9.613 305.137 9.68 304.902 cv
9.75 304.676 9.844 304.469 9.965 304.289 cv
10.086 304.113 10.23 303.965 10.398 303.836 cv
10.57 303.715 10.762 303.609 10.965 303.523 cv
10.715 303.293 10.5 303.07 10.32 302.859 cv
10.148 302.648 10.004 302.445 9.891 302.25 cv
9.785 302.055 9.707 301.867 9.652 301.684 cv
9.605 301.5 9.578 301.312 9.578 301.125 cv
9.578 300.672 9.66 300.293 9.816 299.988 cv
9.98 299.684 10.191 299.437 10.453 299.242 cv
10.719 299.055 11.027 298.918 11.383 298.836 cv
11.738 298.758 12.113 298.719 12.508 298.715 cv
cp
f
13.133 290.387 mo
13.336 290.391 13.477 290.441 13.563 290.539 cv
13.648 290.645 13.691 290.762 13.691 290.887 cv
13.691 295.504 li
14.082 295.508 14.434 295.469 14.746 295.387 cv
15.059 295.312 15.328 295.18 15.547 294.996 cv
15.773 294.816 15.945 294.582 16.063 294.285 cv
16.188 293.996 16.246 293.637 16.242 293.211 cv
16.246 292.879 16.219 292.582 16.16 292.32 cv
16.109 292.059 16.047 291.832 15.977 291.641 cv
15.91 291.453 15.852 291.297 15.793 291.172 cv
15.742 291.051 15.715 290.957 15.711 290.895 cv
15.715 290.859 15.723 290.828 15.738 290.797 cv
15.758 290.77 15.785 290.746 15.82 290.727 cv
15.859 290.715 15.91 290.703 15.973 290.691 cv
16.039 290.687 16.117 290.684 16.211 290.68 cv
16.281 290.684 16.34 290.687 16.387 290.687 cv
16.434 290.695 16.477 290.699 16.516 290.707 cv
16.555 290.715 16.59 290.73 16.621 290.746 cv
16.652 290.77 16.684 290.793 16.711 290.816 cv
16.742 290.848 16.789 290.93 16.852 291.07 cv
16.918 291.211 16.98 291.395 17.043 291.617 cv
17.105 291.844 17.16 292.102 17.211 292.395 cv
17.258 292.687 17.281 293 17.285 293.332 cv
17.281 293.91 17.203 294.418 17.043 294.848 cv
16.883 295.285 16.645 295.648 16.328 295.941 cv
16.012 296.242 15.617 296.465 15.137 296.613 cv
14.66 296.762 14.102 296.836 13.465 296.836 cv
12.867 296.836 12.328 296.762 11.844 296.605 cv
11.367 296.453 10.957 296.227 10.621 295.93 cv
10.285 295.637 10.027 295.281 9.848 294.867 cv
9.668 294.453 9.578 293.988 9.578 293.473 cv
9.578 292.922 9.668 292.453 9.844 292.066 cv
10.023 291.68 10.262 291.363 10.559 291.109 cv
10.859 290.863 11.211 290.68 11.609 290.562 cv
12.016 290.449 12.445 290.391 12.898 290.387 cv
cp
12.75 291.68 mo
12.074 291.664 11.543 291.816 11.16 292.133 cv
10.777 292.449 10.586 292.918 10.582 293.535 cv
10.586 293.859 10.645 294.141 10.762 294.379 cv
10.883 294.621 11.043 294.82 11.238 294.98 cv
11.438 295.145 11.668 295.27 11.93 295.355 cv
12.191 295.445 12.465 295.496 12.75 295.504 cv
cp
f
6.398 282.211 mo
7.445 282.707 8.516 283.074 9.613 283.316 cv
10.715 283.559 11.82 283.68 12.93 283.68 cv
14.047 283.68 15.156 283.559 16.25 283.309 cv
17.348 283.066 18.418 282.703 19.473 282.227 cv
19.531 282.203 19.586 282.191 19.633 282.184 cv
19.676 282.184 19.711 282.199 19.742 282.234 cv
19.77 282.273 19.789 282.328 19.805 282.402 cv
19.813 282.48 19.82 282.586 19.824 282.711 cv
19.82 282.809 19.816 282.887 19.816 282.953 cv
19.809 283.023 19.801 283.082 19.785 283.129 cv
19.77 283.18 19.75 283.223 19.73 283.25 cv
19.707 283.285 19.684 283.309 19.66 283.32 cv
19.129 283.602 18.594 283.848 18.051 284.059 cv
17.508 284.277 16.957 284.457 16.398 284.598 cv
15.836 284.746 15.27 284.855 14.695 284.926 cv
14.121 285.004 13.539 285.039 12.953 285.035 cv
12.367 285.039 11.789 285 11.215 284.914 cv
10.645 284.836 10.078 284.719 9.512 284.57 cv
8.949 284.422 8.395 284.242 7.848 284.031 cv
7.305 283.82 6.762 283.582 6.227 283.312 cv
6.207 283.309 6.191 283.293 6.172 283.27 cv
6.16 283.246 6.145 283.215 6.125 283.172 cv
6.113 283.133 6.102 283.074 6.09 283 cv
6.086 282.93 6.082 282.836 6.078 282.719 cv
6.082 282.602 6.09 282.508 6.102 282.43 cv
6.121 282.359 6.141 282.301 6.164 282.258 cv
6.191 282.219 6.227 282.195 6.266 282.187 cv
6.313 282.184 6.355 282.191 6.398 282.211 cv
cp
f
14.309 274.477 mo
14.781 274.48 15.203 274.566 15.57 274.738 cv
15.945 274.914 16.258 275.156 16.512 275.465 cv
16.77 275.773 16.961 276.137 17.09 276.555 cv
17.219 276.977 17.281 277.426 17.285 277.906 cv
17.281 278.246 17.254 278.562 17.199 278.848 cv
17.141 279.137 17.074 279.391 16.988 279.617 cv
16.91 279.844 16.824 280.035 16.73 280.187 cv
16.645 280.344 16.566 280.449 16.504 280.508 cv
16.441 280.566 16.363 280.609 16.27 280.637 cv
16.176 280.668 16.047 280.684 15.883 280.68 cv
15.77 280.684 15.676 280.68 15.598 280.664 cv
15.523 280.656 15.461 280.641 15.414 280.617 cv
15.367 280.602 15.336 280.574 15.316 280.539 cv
15.301 280.512 15.293 280.477 15.289 280.434 cv
15.293 280.363 15.336 280.262 15.422 280.125 cv
15.512 279.996 15.609 279.824 15.711 279.613 cv
15.82 279.406 15.918 279.156 16.004 278.863 cv
16.098 278.57 16.141 278.23 16.141 277.844 cv
16.141 277.555 16.102 277.289 16.023 277.047 cv
15.945 276.809 15.836 276.602 15.691 276.422 cv
15.551 276.25 15.375 276.113 15.164 276.02 cv
14.957 275.926 14.723 275.879 14.457 275.879 cv
14.176 275.879 13.93 275.945 13.723 276.074 cv
13.523 276.207 13.348 276.379 13.191 276.59 cv
13.043 276.805 12.902 277.047 12.77 277.32 cv
12.645 277.594 12.512 277.875 12.379 278.156 cv
12.246 278.445 12.102 278.723 11.938 278.992 cv
11.781 279.262 11.59 279.504 11.371 279.715 cv
11.152 279.934 10.898 280.105 10.602 280.234 cv
10.313 280.371 9.961 280.437 9.547 280.434 cv
9.129 280.437 8.754 280.359 8.422 280.203 cv
8.094 280.051 7.816 279.84 7.59 279.562 cv
7.371 279.293 7.199 278.969 7.082 278.59 cv
6.965 278.215 6.906 277.805 6.906 277.367 cv
6.906 277.148 6.926 276.926 6.965 276.695 cv
7.004 276.473 7.055 276.262 7.117 276.059 cv
7.184 275.863 7.258 275.684 7.336 275.523 cv
7.418 275.371 7.484 275.27 7.531 275.215 cv
7.586 275.168 7.625 275.133 7.648 275.117 cv
7.68 275.102 7.715 275.09 7.758 275.078 cv
7.805 275.07 7.859 275.062 7.918 275.055 cv
7.984 275.051 8.063 275.047 8.16 275.047 cv
8.254 275.047 8.34 275.051 8.41 275.059 cv
8.488 275.066 8.547 275.078 8.594 275.094 cv
8.641 275.109 8.676 275.133 8.699 275.16 cv
8.723 275.191 8.734 275.223 8.734 275.258 cv
8.734 275.316 8.699 275.406 8.629 275.527 cv
8.559 275.652 8.477 275.805 8.383 275.977 cv
8.293 276.156 8.211 276.363 8.133 276.602 cv
8.059 276.848 8.02 277.117 8.02 277.414 cv
8.02 277.695 8.059 277.941 8.133 278.148 cv
8.211 278.359 8.313 278.531 8.434 278.664 cv
8.559 278.801 8.703 278.902 8.875 278.969 cv
9.047 279.035 9.23 279.066 9.422 279.066 cv
9.707 279.066 9.949 279.004 10.148 278.875 cv
10.352 278.746 10.531 278.574 10.684 278.355 cv
10.844 278.145 10.984 277.898 11.113 277.621 cv
11.246 277.348 11.379 277.066 11.508 276.777 cv
11.641 276.492 11.785 276.211 11.941 275.937 cv
12.102 275.664 12.289 275.418 12.504 275.199 cv
12.723 274.984 12.977 274.812 13.27 274.676 cv
13.563 274.547 13.91 274.48 14.309 274.477 cv
cp
f
13.133 266.781 mo
13.336 266.785 13.477 266.836 13.563 266.934 cv
13.648 267.039 13.691 267.156 13.691 267.281 cv
13.691 271.898 li
14.082 271.902 14.434 271.863 14.746 271.781 cv
15.059 271.707 15.328 271.574 15.547 271.391 cv
15.773 271.211 15.945 270.977 16.063 270.68 cv
16.188 270.391 16.246 270.031 16.242 269.605 cv
16.246 269.273 16.219 268.977 16.16 268.715 cv
16.109 268.453 16.047 268.227 15.977 268.035 cv
15.91 267.848 15.852 267.691 15.793 267.566 cv
15.742 267.445 15.715 267.352 15.711 267.289 cv
15.715 267.254 15.723 267.223 15.738 267.191 cv
15.758 267.164 15.785 267.141 15.82 267.121 cv
15.859 267.109 15.91 267.098 15.973 267.086 cv
16.039 267.082 16.117 267.078 16.211 267.074 cv
16.281 267.078 16.34 267.082 16.387 267.082 cv
16.434 267.09 16.477 267.094 16.516 267.102 cv
16.555 267.109 16.59 267.125 16.621 267.141 cv
16.652 267.164 16.684 267.187 16.711 267.211 cv
16.742 267.242 16.789 267.324 16.852 267.465 cv
16.918 267.605 16.98 267.789 17.043 268.012 cv
17.105 268.238 17.16 268.496 17.211 268.789 cv
17.258 269.082 17.281 269.395 17.285 269.727 cv
17.281 270.305 17.203 270.812 17.043 271.242 cv
16.883 271.68 16.645 272.043 16.328 272.336 cv
16.012 272.637 15.617 272.859 15.137 273.008 cv
14.66 273.156 14.102 273.23 13.465 273.23 cv
12.867 273.23 12.328 273.156 11.844 273 cv
11.367 272.848 10.957 272.621 10.621 272.324 cv
10.285 272.031 10.027 271.676 9.848 271.262 cv
9.668 270.848 9.578 270.383 9.578 269.867 cv
9.578 269.316 9.668 268.848 9.844 268.461 cv
10.023 268.074 10.262 267.758 10.559 267.504 cv
10.859 267.258 11.211 267.074 11.609 266.957 cv
12.016 266.844 12.445 266.785 12.898 266.781 cv
cp
12.75 268.074 mo
12.074 268.059 11.543 268.211 11.16 268.527 cv
10.777 268.844 10.586 269.312 10.582 269.93 cv
10.586 270.254 10.645 270.535 10.762 270.773 cv
10.883 271.016 11.043 271.215 11.238 271.375 cv
11.438 271.539 11.668 271.664 11.93 271.75 cv
12.191 271.84 12.465 271.891 12.75 271.898 cv
cp
f
15.875 259.773 mo
15.969 259.773 16.043 259.777 16.105 259.781 cv
16.172 259.789 16.227 259.797 16.27 259.809 cv
16.316 259.824 16.355 259.84 16.387 259.855 cv
16.418 259.875 16.469 259.918 16.531 259.98 cv
16.602 260.047 16.68 260.156 16.773 260.312 cv
16.871 260.469 16.957 260.645 17.031 260.84 cv
17.105 261.035 17.164 261.246 17.215 261.473 cv
17.258 261.703 17.281 261.941 17.285 262.18 cv
17.281 262.687 17.203 263.133 17.035 263.523 cv
16.871 263.914 16.629 264.242 16.309 264.5 cv
15.992 264.766 15.598 264.965 15.133 265.102 cv
14.668 265.238 14.133 265.305 13.52 265.305 cv
12.832 265.305 12.238 265.223 11.742 265.055 cv
11.246 264.887 10.84 264.656 10.523 264.359 cv
10.207 264.07 9.973 263.723 9.816 263.324 cv
9.668 262.926 9.59 262.496 9.586 262.035 cv
9.59 261.812 9.609 261.598 9.648 261.383 cv
9.691 261.176 9.746 260.98 9.813 260.805 cv
9.883 260.629 9.961 260.473 10.047 260.332 cv
10.133 260.195 10.207 260.094 10.27 260.031 cv
10.332 259.969 10.383 259.926 10.418 259.902 cv
10.457 259.879 10.5 259.859 10.547 259.844 cv
10.598 259.828 10.652 259.82 10.715 259.812 cv
10.777 259.812 10.855 259.809 10.949 259.805 cv
11.152 259.809 11.297 259.832 11.375 259.875 cv
11.461 259.926 11.5 259.984 11.496 260.047 cv
11.5 260.129 11.457 260.219 11.367 260.316 cv
11.285 260.422 11.191 260.551 11.082 260.703 cv
10.98 260.859 10.883 261.047 10.797 261.266 cv
10.711 261.492 10.668 261.754 10.668 262.051 cv
10.668 262.672 10.906 263.145 11.383 263.473 cv
11.859 263.805 12.551 263.969 13.449 263.965 cv
13.906 263.969 14.301 263.926 14.641 263.836 cv
14.98 263.754 15.266 263.629 15.492 263.461 cv
15.723 263.297 15.895 263.094 16.004 262.848 cv
16.121 262.609 16.176 262.332 16.172 262.02 cv
16.176 261.727 16.129 261.465 16.031 261.238 cv
15.941 261.016 15.84 260.824 15.723 260.66 cv
15.613 260.5 15.512 260.363 15.418 260.246 cv
15.332 260.137 15.285 260.047 15.281 259.984 cv
15.285 259.949 15.297 259.918 15.313 259.891 cv
15.336 259.867 15.371 259.848 15.418 259.824 cv
15.473 259.809 15.535 259.793 15.605 259.785 cv
15.684 259.777 15.773 259.773 15.875 259.773 cv
cp
f
13.355 251.719 mo
13.934 251.723 14.461 251.797 14.938 251.945 cv
15.422 252.098 15.836 252.324 16.18 252.621 cv
16.531 252.922 16.801 253.297 16.992 253.742 cv
17.188 254.195 17.281 254.715 17.285 255.305 cv
17.281 255.883 17.199 256.387 17.027 256.812 cv
16.859 257.242 16.609 257.598 16.281 257.883 cv
15.953 258.172 15.559 258.387 15.09 258.523 cv
14.625 258.664 14.094 258.73 13.496 258.73 cv
12.93 258.73 12.402 258.66 11.922 258.512 cv
11.441 258.367 11.027 258.141 10.676 257.84 cv
10.328 257.543 10.059 257.172 9.867 256.723 cv
9.676 256.277 9.578 255.754 9.578 255.156 cv
9.578 254.578 9.664 254.078 9.836 253.648 cv
10.008 253.223 10.258 252.863 10.586 252.578 cv
10.914 252.293 11.313 252.078 11.777 251.934 cv
12.246 251.793 12.773 251.723 13.355 251.719 cv
cp
13.441 253.051 mo
13.066 253.055 12.707 253.09 12.367 253.156 cv
12.031 253.23 11.738 253.348 11.48 253.508 cv
11.23 253.672 11.027 253.891 10.875 254.168 cv
10.73 254.449 10.656 254.797 10.652 255.207 cv
10.656 255.594 10.723 255.922 10.855 256.195 cv
10.992 256.473 11.184 256.699 11.43 256.875 cv
11.676 257.055 11.969 257.187 12.305 257.27 cv
12.645 257.359 13.012 257.402 13.41 257.398 cv
13.797 257.402 14.16 257.367 14.496 257.293 cv
14.836 257.227 15.129 257.109 15.379 256.941 cv
15.633 256.777 15.836 256.555 15.98 256.277 cv
16.133 256 16.207 255.652 16.203 255.238 cv
16.207 254.863 16.137 254.535 16 254.254 cv
15.867 253.977 15.68 253.75 15.43 253.57 cv
15.188 253.395 14.895 253.266 14.559 253.18 cv
14.223 253.098 13.852 253.055 13.441 253.051 cv
cp
f
16.941 243.789 mo
16.988 243.789 17.023 243.801 17.047 243.82 cv
17.078 243.844 17.102 243.879 17.121 243.922 cv
17.141 243.973 17.152 244.035 17.168 244.117 cv
17.176 244.199 17.184 244.305 17.184 244.426 cv
17.184 244.559 17.176 244.664 17.168 244.746 cv
17.152 244.832 17.141 244.898 17.121 244.941 cv
17.102 244.992 17.078 245.023 17.047 245.043 cv
17.023 245.066 16.988 245.078 16.941 245.074 cv
12.836 245.074 li
12.438 245.078 12.117 245.109 11.871 245.168 cv
11.629 245.234 11.418 245.324 11.238 245.441 cv
11.063 245.559 10.926 245.715 10.832 245.902 cv
10.738 246.098 10.691 246.316 10.691 246.562 cv
10.691 246.887 10.809 247.211 11.035 247.531 cv
11.27 247.855 11.602 248.191 12.039 248.543 cv
16.941 248.543 li
16.988 248.547 17.023 248.559 17.047 248.574 cv
17.078 248.598 17.102 248.629 17.121 248.676 cv
17.141 248.723 17.152 248.789 17.168 248.867 cv
17.176 248.953 17.184 249.059 17.184 249.187 cv
17.184 249.316 17.176 249.422 17.168 249.5 cv
17.152 249.586 17.141 249.652 17.121 249.699 cv
17.102 249.754 17.078 249.785 17.047 249.801 cv
17.023 249.82 16.988 249.832 16.941 249.828 cv
9.93 249.828 li
9.891 249.832 9.855 249.824 9.824 249.805 cv
9.797 249.793 9.773 249.762 9.746 249.711 cv
9.727 249.668 9.711 249.605 9.699 249.531 cv
9.695 249.461 9.691 249.367 9.688 249.242 cv
9.691 249.133 9.695 249.035 9.699 248.957 cv
9.711 248.883 9.727 248.824 9.746 248.781 cv
9.773 248.742 9.797 248.715 9.824 248.695 cv
9.855 248.68 9.891 248.672 9.93 248.668 cv
10.855 248.668 li
10.414 248.277 10.094 247.883 9.887 247.488 cv
9.684 247.098 9.578 246.699 9.578 246.297 cv
9.578 245.828 9.66 245.437 9.816 245.117 cv
9.98 244.801 10.191 244.539 10.453 244.34 cv
10.719 244.145 11.027 244.004 11.383 243.918 cv
11.738 243.832 12.168 243.789 12.664 243.789 cv
cp
f
16.941 235.441 mo
16.988 235.445 17.023 235.453 17.051 235.469 cv
17.086 235.488 17.109 235.52 17.125 235.562 cv
17.141 235.605 17.152 235.664 17.168 235.734 cv
17.176 235.809 17.184 235.898 17.184 236 cv
17.184 236.113 17.176 236.203 17.168 236.273 cv
17.152 236.348 17.141 236.406 17.125 236.453 cv
17.109 236.5 17.086 236.535 17.051 236.555 cv
17.023 236.578 16.988 236.59 16.941 236.586 cv
16.016 236.586 li
16.418 236.961 16.727 237.344 16.949 237.738 cv
17.172 238.137 17.281 238.57 17.285 239.039 cv
17.281 239.559 17.184 240 16.984 240.359 cv
16.785 240.727 16.516 241.02 16.176 241.242 cv
15.836 241.473 15.438 241.637 14.977 241.738 cv
14.52 241.84 14.035 241.891 13.52 241.891 cv
12.922 241.891 12.379 241.828 11.891 241.699 cv
11.406 241.57 10.988 241.379 10.645 241.121 cv
10.301 240.871 10.039 240.555 9.855 240.176 cv
9.672 239.801 9.578 239.363 9.578 238.867 cv
9.578 238.461 9.668 238.086 9.848 237.742 cv
10.027 237.402 10.293 237.066 10.637 236.734 cv
6.563 236.734 li
6.527 236.734 6.492 236.727 6.457 236.707 cv
6.426 236.691 6.398 236.656 6.379 236.602 cv
6.363 236.551 6.348 236.484 6.332 236.402 cv
6.32 236.324 6.316 236.223 6.313 236.094 cv
6.316 235.969 6.32 235.859 6.332 235.773 cv
6.348 235.691 6.363 235.629 6.379 235.582 cv
6.398 235.539 6.426 235.504 6.457 235.477 cv
6.492 235.457 6.527 235.445 6.563 235.441 cv
cp
12.008 236.734 mo
11.582 237.082 11.254 237.418 11.023 237.742 cv
10.801 238.07 10.688 238.41 10.684 238.758 cv
10.688 239.09 10.766 239.367 10.918 239.594 cv
11.078 239.824 11.281 240.012 11.535 240.152 cv
11.789 240.297 12.078 240.398 12.398 240.461 cv
12.723 240.527 13.051 240.562 13.379 240.559 cv
13.738 240.562 14.082 240.535 14.418 240.477 cv
14.754 240.426 15.055 240.332 15.316 240.195 cv
15.582 240.062 15.793 239.883 15.949 239.656 cv
16.109 239.437 16.188 239.156 16.188 238.812 cv
16.188 238.648 16.164 238.484 16.117 238.32 cv
16.07 238.164 15.992 238 15.883 237.832 cv
15.773 237.668 15.633 237.496 15.457 237.312 cv
15.285 237.133 15.07 236.937 14.813 236.734 cv
cp
f
15.031 228.668 mo
15.395 228.672 15.715 228.738 15.992 228.867 cv
16.273 229 16.508 229.187 16.699 229.43 cv
16.895 229.676 17.039 229.969 17.137 230.305 cv
17.234 230.645 17.281 231.016 17.285 231.418 cv
17.281 231.672 17.262 231.91 17.227 232.133 cv
17.184 232.359 17.137 232.559 17.078 232.738 cv
17.02 232.918 16.957 233.07 16.891 233.195 cv
16.828 233.32 16.77 233.414 16.715 233.469 cv
16.664 233.527 16.594 233.566 16.496 233.59 cv
16.406 233.617 16.277 233.629 16.117 233.629 cv
16.02 233.629 15.938 233.625 15.867 233.613 cv
15.801 233.605 15.746 233.594 15.703 233.574 cv
15.664 233.562 15.633 233.539 15.613 233.512 cv
15.598 233.484 15.59 233.453 15.586 233.414 cv
15.59 233.359 15.625 233.273 15.691 233.16 cv
15.766 233.051 15.844 232.914 15.922 232.746 cv
16.008 232.586 16.082 232.395 16.152 232.168 cv
16.223 231.949 16.258 231.691 16.258 231.395 cv
16.258 231.18 16.234 230.98 16.188 230.801 cv
16.141 230.625 16.074 230.473 15.98 230.344 cv
15.895 230.215 15.777 230.113 15.633 230.043 cv
15.496 229.973 15.328 229.937 15.133 229.937 cv
14.938 229.937 14.773 229.988 14.637 230.09 cv
14.504 230.191 14.383 230.328 14.277 230.492 cv
14.176 230.66 14.086 230.844 14 231.051 cv
13.922 231.262 13.836 231.477 13.746 231.695 cv
13.66 231.914 13.559 232.129 13.445 232.34 cv
13.336 232.551 13.203 232.742 13.039 232.906 cv
12.883 233.078 12.688 233.211 12.461 233.309 cv
12.238 233.414 11.973 233.465 11.66 233.461 cv
11.387 233.465 11.121 233.41 10.867 233.301 cv
10.617 233.195 10.398 233.035 10.207 232.82 cv
10.02 232.609 9.867 232.344 9.75 232.023 cv
9.637 231.703 9.578 231.332 9.578 230.902 cv
9.578 230.719 9.594 230.531 9.625 230.344 cv
9.656 230.16 9.695 229.992 9.742 229.836 cv
9.789 229.687 9.84 229.559 9.895 229.449 cv
9.949 229.348 10 229.266 10.039 229.207 cv
10.086 229.156 10.121 229.121 10.148 229.098 cv
10.18 229.082 10.215 229.066 10.25 229.059 cv
10.293 229.051 10.34 229.043 10.395 229.035 cv
10.453 229.027 10.523 229.023 10.605 229.023 cv
10.695 229.023 10.773 229.027 10.836 229.035 cv
10.906 229.043 10.957 229.059 10.996 229.074 cv
11.039 229.098 11.07 229.117 11.086 229.141 cv
11.105 229.168 11.113 229.199 11.113 229.227 cv
11.113 229.277 11.086 229.344 11.027 229.43 cv
10.973 229.52 10.91 229.633 10.844 229.773 cv
10.781 229.914 10.723 230.082 10.66 230.27 cv
10.605 230.461 10.574 230.676 10.574 230.918 cv
10.574 231.141 10.602 231.332 10.648 231.496 cv
10.703 231.664 10.773 231.801 10.859 231.906 cv
10.953 232.012 11.059 232.094 11.184 232.145 cv
11.309 232.203 11.445 232.23 11.59 232.227 cv
11.793 232.23 11.961 232.18 12.098 232.074 cv
12.238 231.973 12.359 231.836 12.461 231.668 cv
12.566 231.504 12.66 231.312 12.742 231.098 cv
12.828 230.887 12.914 230.672 13 230.449 cv
13.09 230.23 13.191 230.012 13.297 229.793 cv
13.406 229.578 13.535 229.387 13.691 229.219 cv
13.848 229.055 14.035 228.922 14.254 228.82 cv
14.473 228.723 14.734 228.672 15.031 228.668 cv
cp
f
12.953 224.227 mo
13.539 224.227 14.121 224.266 14.695 224.336 cv
15.27 224.414 15.836 224.523 16.398 224.664 cv
16.957 224.812 17.508 224.988 18.051 225.199 cv
18.594 225.41 19.129 225.656 19.66 225.934 cv
19.684 225.953 19.707 225.977 19.73 226.004 cv
19.75 226.039 19.77 226.078 19.785 226.125 cv
19.801 226.176 19.809 226.234 19.816 226.301 cv
19.816 226.371 19.82 226.453 19.824 226.543 cv
19.82 226.68 19.813 226.785 19.805 226.859 cv
19.789 226.937 19.77 226.992 19.742 227.023 cv
19.711 227.059 19.676 227.074 19.633 227.07 cv
19.586 227.07 19.531 227.055 19.473 227.027 cv
18.422 226.551 17.352 226.191 16.254 225.945 cv
15.156 225.703 14.047 225.582 12.93 225.578 cv
11.82 225.582 10.715 225.703 9.613 225.945 cv
8.516 226.191 7.445 226.559 6.398 227.043 cv
6.355 227.066 6.313 227.074 6.266 227.066 cv
6.227 227.066 6.191 227.043 6.164 226.996 cv
6.141 226.957 6.121 226.898 6.102 226.824 cv
6.09 226.754 6.082 226.656 6.078 226.535 cv
6.082 226.426 6.086 226.336 6.09 226.262 cv
6.102 226.191 6.113 226.133 6.125 226.086 cv
6.145 226.043 6.16 226.012 6.172 225.988 cv
6.191 225.973 6.207 225.957 6.227 225.941 cv
7.293 225.41 8.391 224.988 9.512 224.684 cv
10.641 224.379 11.785 224.227 12.953 224.227 cv
cp
f
304.781 548.23 mo
304.777 548.336 304.762 548.426 304.727 548.496 cv
304.691 548.574 304.645 548.633 304.59 548.676 cv
304.531 548.727 304.469 548.762 304.402 548.777 cv
304.328 548.801 304.258 548.809 304.195 548.809 cv
303.75 548.809 li
303.609 548.809 303.488 548.797 303.383 548.766 cv
303.277 548.742 303.18 548.687 303.086 548.609 cv
302.992 548.535 302.898 548.434 302.805 548.301 cv
302.711 548.172 302.609 548.008 302.504 547.805 cv
299.43 542.066 li
299.266 541.773 299.102 541.465 298.941 541.137 cv
298.773 540.816 298.621 540.5 298.484 540.191 cv
298.469 540.191 li
298.477 540.566 298.484 540.949 298.492 541.336 cv
298.496 541.727 298.496 542.113 298.5 542.496 cv
298.5 548.582 li
298.496 548.621 298.484 548.656 298.465 548.687 cv
298.441 548.723 298.406 548.75 298.355 548.766 cv
298.301 548.785 298.23 548.797 298.148 548.812 cv
298.063 548.824 297.957 548.832 297.828 548.832 cv
297.691 548.832 297.582 548.824 297.5 548.812 cv
297.414 548.797 297.348 548.785 297.301 548.766 cv
297.25 548.75 297.215 548.723 297.191 548.687 cv
297.168 548.656 297.156 548.621 297.16 548.582 cv
297.16 539.277 li
297.156 539.07 297.215 538.922 297.336 538.832 cv
297.453 538.746 297.582 538.703 297.723 538.699 cv
298.383 538.699 li
298.535 538.703 298.668 538.715 298.773 538.738 cv
298.875 538.766 298.969 538.809 299.055 538.867 cv
299.137 538.93 299.215 539.012 299.297 539.117 cv
299.371 539.227 299.453 539.363 299.539 539.52 cv
301.906 543.945 li
302.051 544.219 302.191 544.484 302.328 544.738 cv
302.461 544.996 302.59 545.25 302.719 545.496 cv
302.84 545.75 302.965 545.996 303.09 546.234 cv
303.211 546.477 303.332 546.719 303.457 546.961 cv
303.465 546.961 li
303.453 546.555 303.445 546.125 303.445 545.68 cv
303.438 545.234 303.438 544.809 303.441 544.398 cv
303.441 538.926 li
303.438 538.891 303.449 538.855 303.473 538.824 cv
303.496 538.793 303.531 538.766 303.586 538.742 cv
303.633 538.719 303.703 538.703 303.789 538.691 cv
303.875 538.684 303.984 538.68 304.125 538.676 cv
304.242 538.68 304.348 538.684 304.438 538.691 cv
304.523 538.703 304.59 538.719 304.641 538.742 cv
304.688 538.766 304.723 538.793 304.746 538.824 cv
304.766 538.855 304.777 538.891 304.781 538.926 cv
cp
f
313.328 548.59 mo
313.324 548.637 313.316 548.672 313.301 548.695 cv
313.281 548.727 313.246 548.75 313.203 548.77 cv
313.156 548.789 313.098 548.801 313.023 548.816 cv
312.945 548.824 312.852 548.832 312.746 548.832 cv
312.621 548.832 312.523 548.824 312.453 548.816 cv
312.375 548.801 312.316 548.789 312.273 548.77 cv
312.227 548.75 312.195 548.727 312.184 548.695 cv
312.164 548.672 312.156 548.637 312.16 548.59 cv
312.16 547.664 li
311.758 548.109 311.363 548.43 310.977 548.629 cv
310.582 548.832 310.188 548.93 309.793 548.934 cv
309.32 548.93 308.926 548.855 308.609 548.699 cv
308.289 548.547 308.031 548.336 307.836 548.066 cv
307.633 547.801 307.492 547.488 307.41 547.129 cv
307.32 546.773 307.277 546.34 307.281 545.832 cv
307.281 541.578 li
307.277 541.539 307.285 541.504 307.309 541.473 cv
307.324 541.445 307.359 541.422 307.414 541.395 cv
307.461 541.375 307.531 541.359 307.617 541.348 cv
307.699 541.344 307.801 541.34 307.93 541.336 cv
308.051 541.34 308.156 541.344 308.242 541.348 cv
308.324 541.359 308.391 541.375 308.438 541.395 cv
308.484 541.422 308.52 541.445 308.543 541.473 cv
308.563 541.504 308.57 541.539 308.574 541.578 cv
308.574 545.66 li
308.57 546.074 308.602 546.402 308.664 546.648 cv
308.723 546.895 308.813 547.105 308.938 547.277 cv
309.055 547.457 309.211 547.59 309.402 547.684 cv
309.586 547.781 309.805 547.832 310.055 547.828 cv
310.375 547.832 310.695 547.715 311.02 547.484 cv
311.336 547.258 311.676 546.922 312.035 546.477 cv
312.035 541.578 li
312.035 541.539 312.043 541.504 312.063 541.473 cv
312.078 541.445 312.113 541.422 312.168 541.395 cv
312.219 541.375 312.285 541.359 312.367 541.348 cv
312.445 541.344 312.551 541.34 312.684 541.336 cv
312.805 541.34 312.91 541.344 312.996 541.348 cv
313.078 541.359 313.141 541.375 313.188 541.395 cv
313.23 541.422 313.266 541.445 313.293 541.473 cv
313.313 541.504 313.324 541.539 313.328 541.578 cv
cp
f
326.105 548.59 mo
326.102 548.637 326.094 548.672 326.074 548.695 cv
326.051 548.727 326.016 548.75 325.973 548.77 cv
325.922 548.789 325.855 548.801 325.777 548.816 cv
325.691 548.824 325.59 548.832 325.465 548.832 cv
325.332 548.832 325.223 548.824 325.145 548.816 cv
325.059 548.801 324.992 548.789 324.945 548.77 cv
324.891 548.75 324.855 548.727 324.84 548.695 cv
324.816 548.672 324.809 548.637 324.809 548.59 cv
324.809 544.328 li
324.809 544.035 324.781 543.766 324.73 543.52 cv
324.676 543.277 324.594 543.066 324.48 542.887 cv
324.367 542.711 324.223 542.574 324.047 542.48 cv
323.867 542.387 323.656 542.34 323.422 542.34 cv
323.125 542.34 322.828 542.457 322.531 542.684 cv
322.227 542.918 321.898 543.25 321.543 543.687 cv
321.543 548.59 li
321.539 548.637 321.527 548.672 321.512 548.695 cv
321.488 548.727 321.457 548.75 321.41 548.77 cv
321.359 548.789 321.293 548.801 321.211 548.816 cv
321.125 548.824 321.02 548.832 320.898 548.832 cv
320.777 548.832 320.676 548.824 320.59 548.816 cv
320.504 548.801 320.434 548.789 320.387 548.77 cv
320.332 548.75 320.301 548.727 320.285 548.695 cv
320.266 548.672 320.254 548.637 320.258 548.59 cv
320.258 544.328 li
320.254 544.035 320.227 543.766 320.172 543.52 cv
320.113 543.277 320.027 543.066 319.914 542.887 cv
319.801 542.711 319.656 542.574 319.484 542.48 cv
319.305 542.387 319.098 542.34 318.863 542.34 cv
318.563 542.34 318.266 542.457 317.965 542.684 cv
317.664 542.918 317.336 543.25 316.984 543.687 cv
316.984 548.59 li
316.98 548.637 316.969 548.672 316.953 548.695 cv
316.93 548.727 316.898 548.75 316.852 548.77 cv
316.805 548.789 316.738 548.801 316.66 548.816 cv
316.574 548.824 316.469 548.832 316.34 548.832 cv
316.211 548.832 316.105 548.824 316.027 548.816 cv
315.941 548.801 315.875 548.789 315.828 548.77 cv
315.773 548.75 315.742 548.727 315.727 548.695 cv
315.707 548.672 315.695 548.637 315.699 548.59 cv
315.699 541.578 li
315.695 541.539 315.703 541.504 315.723 541.473 cv
315.734 541.445 315.766 541.422 315.816 541.395 cv
315.859 541.375 315.922 541.359 315.996 541.348 cv
316.066 541.344 316.16 541.34 316.285 541.336 cv
316.395 541.34 316.492 541.344 316.57 541.348 cv
316.645 541.359 316.703 541.375 316.746 541.395 cv
316.785 541.422 316.813 541.445 316.832 541.473 cv
316.848 541.504 316.855 541.539 316.859 541.578 cv
316.859 542.504 li
317.25 542.062 317.633 541.742 318.008 541.535 cv
318.375 541.332 318.754 541.227 319.137 541.227 cv
319.426 541.227 319.684 541.262 319.918 541.328 cv
320.145 541.398 320.352 541.492 320.531 541.613 cv
320.707 541.734 320.855 541.879 320.984 542.047 cv
321.105 542.219 321.211 542.41 321.297 542.613 cv
321.527 542.363 321.75 542.148 321.961 541.969 cv
322.172 541.797 322.375 541.652 322.57 541.539 cv
322.766 541.434 322.953 541.355 323.137 541.301 cv
323.32 541.254 323.508 541.227 323.695 541.227 cv
324.148 541.227 324.527 541.309 324.832 541.465 cv
325.137 541.629 325.383 541.84 325.578 542.102 cv
325.766 542.367 325.902 542.676 325.984 543.031 cv
326.063 543.387 326.102 543.762 326.105 544.156 cv
cp
f
334.906 544.988 mo
334.902 545.598 334.836 546.148 334.707 546.633 cv
334.57 547.121 334.375 547.535 334.121 547.875 cv
333.863 548.219 333.547 548.48 333.176 548.66 cv
332.801 548.844 332.375 548.93 331.891 548.934 cv
331.664 548.93 331.457 548.91 331.27 548.867 cv
331.082 548.82 330.895 548.75 330.715 548.652 cv
330.527 548.555 330.348 548.43 330.168 548.277 cv
329.984 548.129 329.793 547.949 329.594 547.734 cv
329.594 548.59 li
329.594 548.637 329.582 548.672 329.563 548.699 cv
329.539 548.734 329.504 548.758 329.461 548.773 cv
329.41 548.789 329.352 548.801 329.285 548.816 cv
329.211 548.824 329.121 548.832 329.016 548.832 cv
328.906 548.832 328.82 548.824 328.75 548.816 cv
328.676 548.801 328.613 548.789 328.57 548.773 cv
328.52 548.758 328.488 548.734 328.477 548.699 cv
328.457 548.672 328.449 548.637 328.453 548.59 cv
328.453 538.18 li
328.449 538.141 328.461 538.105 328.48 538.07 cv
328.496 538.043 328.527 538.016 328.582 537.992 cv
328.629 537.973 328.695 537.957 328.781 537.945 cv
328.859 537.937 328.965 537.934 329.094 537.93 cv
329.223 537.934 329.328 537.937 329.414 537.945 cv
329.492 537.957 329.559 537.973 329.605 537.992 cv
329.652 538.016 329.684 538.043 329.707 538.07 cv
329.723 538.105 329.734 538.141 329.738 538.18 cv
329.738 542.379 li
329.945 542.168 330.148 541.988 330.344 541.844 cv
330.539 541.699 330.727 541.582 330.914 541.488 cv
331.098 541.402 331.285 541.336 331.477 541.289 cv
331.66 541.25 331.859 541.227 332.07 541.227 cv
332.574 541.227 333.008 541.328 333.375 541.531 cv
333.734 541.734 334.027 542.008 334.254 542.344 cv
334.477 542.687 334.645 543.086 334.75 543.543 cv
334.852 544 334.902 544.48 334.906 544.988 cv
cp
333.574 545.137 mo
333.57 544.781 333.543 544.434 333.492 544.094 cv
333.434 543.758 333.34 543.461 333.203 543.199 cv
333.066 542.941 332.887 542.73 332.664 542.57 cv
332.438 542.414 332.156 542.336 331.824 542.332 cv
331.656 542.336 331.492 542.359 331.332 542.402 cv
331.168 542.453 331.004 542.531 330.836 542.637 cv
330.668 542.75 330.492 542.891 330.316 543.059 cv
330.133 543.234 329.941 543.449 329.738 543.703 cv
329.738 546.5 li
330.094 546.934 330.434 547.266 330.758 547.488 cv
331.082 547.719 331.418 547.832 331.77 547.828 cv
332.09 547.832 332.367 547.754 332.602 547.594 cv
332.828 547.441 333.016 547.234 333.16 546.973 cv
333.305 546.719 333.41 546.43 333.477 546.109 cv
333.539 545.793 333.57 545.469 333.574 545.137 cv
cp
f
342.816 544.781 mo
342.813 544.984 342.762 545.125 342.664 545.211 cv
342.559 545.297 342.441 545.34 342.316 545.34 cv
337.699 545.34 li
337.695 545.73 337.734 546.082 337.816 546.395 cv
337.891 546.707 338.023 546.977 338.207 547.195 cv
338.387 547.422 338.621 547.594 338.918 547.711 cv
339.207 547.836 339.566 547.895 339.992 547.891 cv
340.324 547.895 340.621 547.867 340.883 547.809 cv
341.145 547.758 341.371 547.695 341.563 547.625 cv
341.75 547.559 341.906 547.5 342.031 547.441 cv
342.152 547.391 342.246 547.363 342.309 547.359 cv
342.344 547.363 342.375 547.371 342.406 547.387 cv
342.434 547.406 342.457 547.434 342.477 547.469 cv
342.488 547.508 342.5 547.559 342.512 547.621 cv
342.516 547.687 342.52 547.766 342.523 547.859 cv
342.52 547.93 342.516 547.988 342.516 548.035 cv
342.508 548.082 342.504 548.125 342.496 548.164 cv
342.488 548.203 342.473 548.238 342.457 548.27 cv
342.434 548.301 342.41 548.332 342.387 548.359 cv
342.355 548.391 342.273 548.437 342.133 548.5 cv
341.992 548.566 341.809 548.629 341.586 548.691 cv
341.359 548.754 341.102 548.809 340.809 548.859 cv
340.516 548.906 340.203 548.93 339.871 548.934 cv
339.293 548.93 338.785 548.852 338.355 548.691 cv
337.918 548.531 337.555 548.293 337.262 547.977 cv
336.961 547.66 336.738 547.266 336.59 546.785 cv
336.441 546.309 336.367 545.75 336.367 545.113 cv
336.367 544.516 336.441 543.977 336.598 543.492 cv
336.75 543.016 336.977 542.605 337.273 542.27 cv
337.566 541.934 337.922 541.676 338.336 541.496 cv
338.75 541.316 339.215 541.227 339.73 541.227 cv
340.281 541.227 340.75 541.316 341.137 541.492 cv
341.523 541.672 341.84 541.91 342.094 542.207 cv
342.34 542.508 342.523 542.859 342.641 543.258 cv
342.754 543.664 342.813 544.094 342.816 544.547 cv
cp
341.523 544.398 mo
341.539 543.723 341.387 543.191 341.07 542.809 cv
340.754 542.426 340.285 542.234 339.668 542.23 cv
339.344 542.234 339.063 542.293 338.824 542.41 cv
338.582 542.531 338.383 542.691 338.223 542.887 cv
338.059 543.086 337.934 543.316 337.848 543.578 cv
337.758 543.84 337.707 544.113 337.699 544.398 cv
cp
f
348.883 542.035 mo
348.879 542.152 348.879 542.25 348.875 542.324 cv
348.867 542.406 348.855 542.469 348.844 542.508 cv
348.824 542.555 348.805 542.586 348.785 542.609 cv
348.758 542.633 348.727 542.645 348.688 542.645 cv
348.645 542.645 348.594 542.633 348.535 542.609 cv
348.473 542.586 348.402 542.562 348.332 542.539 cv
348.254 542.516 348.172 542.496 348.078 542.473 cv
347.984 542.457 347.883 542.445 347.773 542.441 cv
347.641 542.445 347.512 542.473 347.391 542.52 cv
347.266 542.574 347.137 542.66 347 542.777 cv
346.859 542.902 346.715 543.059 346.566 543.254 cv
346.414 543.449 346.246 543.691 346.066 543.977 cv
346.066 548.59 li
346.063 548.637 346.051 548.672 346.035 548.695 cv
346.012 548.727 345.98 548.75 345.934 548.77 cv
345.887 548.789 345.82 548.801 345.742 548.816 cv
345.656 548.824 345.551 548.832 345.422 548.832 cv
345.293 548.832 345.188 548.824 345.109 548.816 cv
345.023 548.801 344.957 548.789 344.91 548.77 cv
344.855 548.75 344.824 548.727 344.809 548.695 cv
344.789 548.672 344.777 548.637 344.781 548.59 cv
344.781 541.578 li
344.777 541.539 344.785 541.504 344.805 541.473 cv
344.816 541.445 344.848 541.422 344.898 541.395 cv
344.941 541.375 345.004 541.359 345.078 541.348 cv
345.148 541.344 345.242 541.34 345.367 541.336 cv
345.477 541.34 345.574 541.344 345.652 541.348 cv
345.727 541.359 345.785 541.375 345.828 541.395 cv
345.867 541.422 345.895 541.445 345.914 541.473 cv
345.93 541.504 345.938 541.539 345.941 541.578 cv
345.941 542.598 li
346.129 542.316 346.313 542.09 346.484 541.914 cv
346.652 541.738 346.813 541.598 346.965 541.496 cv
347.113 541.395 347.262 541.324 347.41 541.285 cv
347.559 541.246 347.707 541.227 347.859 541.227 cv
347.926 541.227 348.004 541.23 348.09 541.238 cv
348.176 541.246 348.266 541.262 348.359 541.281 cv
348.453 541.305 348.535 541.328 348.613 541.352 cv
348.684 541.379 348.738 541.406 348.773 541.43 cv
348.801 541.461 348.82 541.484 348.836 541.504 cv
348.844 541.531 348.855 541.562 348.863 541.594 cv
348.871 541.633 348.875 541.684 348.879 541.754 cv
348.879 541.824 348.879 541.918 348.883 542.035 cv
cp
f
360.641 545.004 mo
360.637 545.582 360.563 546.109 360.414 546.586 cv
360.262 547.07 360.035 547.484 359.738 547.828 cv
359.438 548.18 359.063 548.449 358.617 548.641 cv
358.164 548.836 357.645 548.93 357.055 548.934 cv
356.477 548.93 355.973 548.848 355.547 548.676 cv
355.117 548.508 354.762 548.258 354.477 547.93 cv
354.188 547.602 353.973 547.207 353.836 546.738 cv
353.695 546.273 353.629 545.742 353.629 545.145 cv
353.629 544.578 353.699 544.051 353.848 543.57 cv
353.992 543.09 354.219 542.676 354.52 542.324 cv
354.816 541.977 355.188 541.707 355.637 541.516 cv
356.082 541.324 356.605 541.227 357.203 541.227 cv
357.781 541.227 358.281 541.312 358.711 541.484 cv
359.137 541.656 359.496 541.906 359.781 542.234 cv
360.066 542.562 360.281 542.961 360.426 543.426 cv
360.566 543.895 360.637 544.422 360.641 545.004 cv
cp
359.309 545.09 mo
359.305 544.715 359.27 544.355 359.203 544.016 cv
359.129 543.68 359.012 543.387 358.852 543.129 cv
358.688 542.879 358.469 542.676 358.191 542.523 cv
357.91 542.379 357.563 542.305 357.152 542.301 cv
356.766 542.305 356.438 542.371 356.164 542.504 cv
355.887 542.641 355.66 542.832 355.484 543.078 cv
355.305 543.324 355.172 543.617 355.09 543.953 cv
355 544.293 354.957 544.66 354.961 545.059 cv
354.957 545.445 354.992 545.809 355.066 546.145 cv
355.133 546.484 355.25 546.777 355.418 547.027 cv
355.582 547.281 355.805 547.484 356.082 547.629 cv
356.359 547.781 356.707 547.855 357.121 547.852 cv
357.496 547.855 357.824 547.785 358.105 547.648 cv
358.383 547.516 358.609 547.328 358.789 547.078 cv
358.965 546.836 359.094 546.543 359.18 546.207 cv
359.262 545.871 359.305 545.5 359.309 545.09 cv
cp
f
366.371 538.691 mo
366.367 538.793 366.363 538.871 366.355 538.93 cv
366.344 538.992 366.332 539.043 366.32 539.074 cv
366.305 539.113 366.289 539.137 366.27 539.148 cv
366.246 539.164 366.219 539.172 366.191 539.168 cv
366.152 539.172 366.105 539.16 366.055 539.133 cv
365.996 539.113 365.93 539.086 365.855 539.055 cv
365.773 539.027 365.684 539 365.578 538.977 cv
365.469 538.953 365.344 538.941 365.211 538.941 cv
365.016 538.941 364.852 538.973 364.719 539.035 cv
364.578 539.098 364.469 539.195 364.391 539.328 cv
364.305 539.461 364.246 539.633 364.211 539.844 cv
364.172 540.055 364.152 540.312 364.156 540.609 cv
364.156 541.375 li
365.723 541.375 li
365.762 541.379 365.797 541.387 365.828 541.402 cv
365.855 541.422 365.883 541.453 365.906 541.496 cv
365.93 541.543 365.945 541.602 365.961 541.664 cv
365.969 541.734 365.977 541.816 365.98 541.91 cv
365.977 542.102 365.953 542.234 365.91 542.316 cv
365.859 542.402 365.797 542.445 365.723 542.441 cv
364.156 542.441 li
364.156 548.59 li
364.152 548.637 364.145 548.672 364.125 548.695 cv
364.102 548.727 364.066 548.75 364.02 548.77 cv
363.969 548.789 363.902 548.801 363.82 548.816 cv
363.734 548.824 363.629 548.832 363.512 548.832 cv
363.383 548.832 363.281 548.824 363.199 548.816 cv
363.113 548.801 363.047 548.789 363 548.77 cv
362.949 548.75 362.914 548.727 362.895 548.695 cv
362.871 548.672 362.859 548.637 362.863 548.59 cv
362.863 542.441 li
361.875 542.441 li
361.789 542.445 361.727 542.402 361.688 542.316 cv
361.645 542.234 361.621 542.102 361.625 541.91 cv
361.621 541.816 361.629 541.734 361.641 541.664 cv
361.648 541.602 361.664 541.543 361.688 541.496 cv
361.707 541.453 361.73 541.422 361.766 541.402 cv
361.793 541.387 361.832 541.379 361.875 541.375 cv
362.863 541.375 li
362.863 540.648 li
362.859 540.164 362.906 539.746 363 539.391 cv
363.09 539.043 363.227 538.754 363.414 538.531 cv
363.598 538.309 363.832 538.145 364.121 538.035 cv
364.402 537.93 364.738 537.875 365.125 537.875 cv
365.301 537.875 365.477 537.895 365.652 537.926 cv
365.82 537.965 365.953 538 366.051 538.035 cv
366.141 538.078 366.203 538.113 366.238 538.141 cv
366.266 538.176 366.293 538.215 366.316 538.262 cv
366.336 538.312 366.348 538.375 366.359 538.441 cv
366.363 538.516 366.367 538.598 366.371 538.691 cv
cp
f
376.57 545.957 mo
376.566 546.43 376.48 546.852 376.309 547.219 cv
376.133 547.594 375.891 547.906 375.582 548.16 cv
375.273 548.418 374.91 548.609 374.492 548.738 cv
374.07 548.867 373.621 548.93 373.141 548.934 cv
372.801 548.93 372.484 548.902 372.199 548.848 cv
371.91 548.789 371.656 548.723 371.43 548.637 cv
371.203 548.559 371.012 548.473 370.859 548.379 cv
370.703 548.293 370.598 548.215 370.539 548.152 cv
370.48 548.09 370.438 548.012 370.41 547.918 cv
370.379 547.824 370.363 547.695 370.367 547.531 cv
370.363 547.418 370.367 547.324 370.383 547.246 cv
370.391 547.172 370.406 547.109 370.43 547.062 cv
370.445 547.016 370.473 546.984 370.508 546.965 cv
370.535 546.949 370.57 546.941 370.613 546.937 cv
370.684 546.941 370.785 546.984 370.922 547.07 cv
371.051 547.16 371.223 547.258 371.434 547.359 cv
371.641 547.469 371.891 547.566 372.184 547.652 cv
372.477 547.746 372.816 547.789 373.203 547.789 cv
373.492 547.789 373.758 547.75 374 547.672 cv
374.238 547.594 374.445 547.484 374.625 547.34 cv
374.797 547.199 374.934 547.023 375.027 546.812 cv
375.121 546.605 375.168 546.371 375.168 546.105 cv
375.168 545.824 375.102 545.578 374.973 545.371 cv
374.84 545.172 374.668 544.996 374.457 544.84 cv
374.242 544.691 374 544.551 373.727 544.418 cv
373.453 544.293 373.172 544.16 372.891 544.027 cv
372.602 543.895 372.324 543.75 372.055 543.586 cv
371.785 543.43 371.543 543.238 371.332 543.02 cv
371.113 542.801 370.941 542.547 370.813 542.25 cv
370.676 541.961 370.609 541.609 370.613 541.195 cv
370.609 540.777 370.688 540.402 370.844 540.07 cv
370.996 539.742 371.207 539.465 371.484 539.238 cv
371.754 539.02 372.078 538.848 372.457 538.73 cv
372.832 538.613 373.242 538.555 373.68 538.555 cv
373.898 538.555 374.121 538.574 374.352 538.613 cv
374.574 538.652 374.785 538.703 374.988 538.766 cv
375.184 538.832 375.363 538.906 375.523 538.984 cv
375.676 539.066 375.777 539.133 375.832 539.18 cv
375.879 539.234 375.914 539.273 375.93 539.297 cv
375.945 539.328 375.957 539.363 375.969 539.406 cv
375.977 539.453 375.984 539.508 375.992 539.566 cv
375.996 539.633 376 539.711 376 539.809 cv
376 539.902 375.996 539.988 375.988 540.059 cv
375.98 540.137 375.969 540.195 375.953 540.242 cv
375.938 540.289 375.914 540.324 375.887 540.348 cv
375.855 540.371 375.824 540.383 375.789 540.383 cv
375.73 540.383 375.641 540.348 375.52 540.277 cv
375.395 540.207 375.242 540.125 375.07 540.031 cv
374.891 539.941 374.684 539.859 374.445 539.781 cv
374.199 539.707 373.93 539.668 373.633 539.668 cv
373.352 539.668 373.105 539.707 372.898 539.781 cv
372.688 539.859 372.516 539.961 372.383 540.082 cv
372.246 540.207 372.145 540.352 372.078 540.523 cv
372.012 540.695 371.98 540.879 371.98 541.07 cv
371.98 541.355 372.043 541.598 372.172 541.797 cv
372.301 542 372.473 542.18 372.691 542.332 cv
372.902 542.492 373.148 542.633 373.426 542.762 cv
373.699 542.895 373.98 543.027 374.27 543.156 cv
374.555 543.289 374.836 543.434 375.109 543.59 cv
375.383 543.75 375.629 543.937 375.848 544.152 cv
376.063 544.371 376.234 544.625 376.371 544.918 cv
376.5 545.211 376.566 545.559 376.57 545.957 cv
cp
f
384.336 548.59 mo
384.332 548.637 384.324 548.672 384.309 548.695 cv
384.289 548.727 384.254 548.75 384.211 548.77 cv
384.164 548.789 384.105 548.801 384.031 548.816 cv
383.953 548.824 383.859 548.832 383.754 548.832 cv
383.629 548.832 383.531 548.824 383.461 548.816 cv
383.383 548.801 383.324 548.789 383.281 548.77 cv
383.234 548.75 383.203 548.727 383.191 548.695 cv
383.172 548.672 383.164 548.637 383.168 548.59 cv
383.168 547.664 li
382.766 548.109 382.371 548.43 381.984 548.629 cv
381.59 548.832 381.195 548.93 380.801 548.934 cv
380.328 548.93 379.934 548.855 379.617 548.699 cv
379.297 548.547 379.039 548.336 378.844 548.066 cv
378.641 547.801 378.5 547.488 378.418 547.129 cv
378.328 546.773 378.285 546.34 378.289 545.832 cv
378.289 541.578 li
378.285 541.539 378.293 541.504 378.316 541.473 cv
378.332 541.445 378.367 541.422 378.422 541.395 cv
378.469 541.375 378.539 541.359 378.625 541.348 cv
378.707 541.344 378.809 541.34 378.938 541.336 cv
379.059 541.34 379.164 541.344 379.25 541.348 cv
379.332 541.359 379.398 541.375 379.445 541.395 cv
379.492 541.422 379.527 541.445 379.551 541.473 cv
379.57 541.504 379.578 541.539 379.582 541.578 cv
379.582 545.66 li
379.578 546.074 379.609 546.402 379.672 546.648 cv
379.73 546.895 379.82 547.105 379.945 547.277 cv
380.063 547.457 380.219 547.59 380.41 547.684 cv
380.594 547.781 380.813 547.832 381.063 547.828 cv
381.383 547.832 381.703 547.715 382.027 547.484 cv
382.344 547.258 382.684 546.922 383.043 546.477 cv
383.043 541.578 li
383.043 541.539 383.051 541.504 383.07 541.473 cv
383.086 541.445 383.121 541.422 383.176 541.395 cv
383.227 541.375 383.293 541.359 383.375 541.348 cv
383.453 541.344 383.559 541.34 383.691 541.336 cv
383.813 541.34 383.918 541.344 384.004 541.348 cv
384.086 541.359 384.148 541.375 384.195 541.395 cv
384.238 541.422 384.273 541.445 384.301 541.473 cv
384.32 541.504 384.332 541.539 384.336 541.578 cv
cp
f
393.191 544.988 mo
393.188 545.598 393.121 546.148 392.992 546.633 cv
392.855 547.121 392.66 547.535 392.406 547.875 cv
392.148 548.219 391.832 548.48 391.461 548.66 cv
391.086 548.844 390.66 548.93 390.176 548.934 cv
389.949 548.93 389.742 548.91 389.555 548.867 cv
389.367 548.82 389.18 548.75 389 548.652 cv
388.813 548.555 388.633 548.43 388.453 548.277 cv
388.27 548.129 388.078 547.949 387.879 547.734 cv
387.879 548.59 li
387.879 548.637 387.867 548.672 387.848 548.699 cv
387.824 548.734 387.789 548.758 387.746 548.773 cv
387.695 548.789 387.637 548.801 387.57 548.816 cv
387.496 548.824 387.406 548.832 387.301 548.832 cv
387.191 548.832 387.105 548.824 387.035 548.816 cv
386.961 548.801 386.898 548.789 386.855 548.773 cv
386.805 548.758 386.773 548.734 386.762 548.699 cv
386.742 548.672 386.734 548.637 386.738 548.59 cv
386.738 538.18 li
386.734 538.141 386.746 538.105 386.766 538.07 cv
386.781 538.043 386.813 538.016 386.867 537.992 cv
386.914 537.973 386.98 537.957 387.066 537.945 cv
387.145 537.937 387.25 537.934 387.379 537.93 cv
387.508 537.934 387.613 537.937 387.699 537.945 cv
387.777 537.957 387.844 537.973 387.891 537.992 cv
387.938 538.016 387.969 538.043 387.992 538.07 cv
388.008 538.105 388.02 538.141 388.023 538.18 cv
388.023 542.379 li
388.23 542.168 388.434 541.988 388.629 541.844 cv
388.824 541.699 389.012 541.582 389.199 541.488 cv
389.383 541.402 389.57 541.336 389.762 541.289 cv
389.945 541.25 390.145 541.227 390.355 541.227 cv
390.859 541.227 391.293 541.328 391.66 541.531 cv
392.02 541.734 392.313 542.008 392.539 542.344 cv
392.762 542.687 392.93 543.086 393.035 543.543 cv
393.137 544 393.188 544.48 393.191 544.988 cv
cp
391.859 545.137 mo
391.855 544.781 391.828 544.434 391.777 544.094 cv
391.719 543.758 391.625 543.461 391.488 543.199 cv
391.352 542.941 391.172 542.73 390.949 542.57 cv
390.723 542.414 390.441 542.336 390.109 542.332 cv
389.941 542.336 389.777 542.359 389.617 542.402 cv
389.453 542.453 389.289 542.531 389.121 542.637 cv
388.953 542.75 388.777 542.891 388.602 543.059 cv
388.418 543.234 388.227 543.449 388.023 543.703 cv
388.023 546.5 li
388.379 546.934 388.719 547.266 389.043 547.488 cv
389.367 547.719 389.703 547.832 390.055 547.828 cv
390.375 547.832 390.652 547.754 390.887 547.594 cv
391.113 547.441 391.301 547.234 391.445 546.973 cv
391.59 546.719 391.695 546.43 391.762 546.109 cv
391.824 545.793 391.855 545.469 391.859 545.137 cv
cp
f
398.359 544.852 mo
398.359 545.055 398.336 545.191 398.289 545.27 cv
398.242 545.348 398.172 545.387 398.086 545.387 cv
394.828 545.387 li
394.734 545.387 394.668 545.348 394.621 545.266 cv
394.574 545.187 394.551 545.051 394.551 544.852 cv
394.551 544.656 394.574 544.516 394.621 544.437 cv
394.668 544.359 394.734 544.32 394.828 544.32 cv
398.086 544.32 li
398.125 544.32 398.164 544.328 398.199 544.344 cv
398.23 544.359 398.258 544.391 398.285 544.434 cv
398.305 544.48 398.324 544.535 398.34 544.602 cv
398.352 544.672 398.359 544.758 398.359 544.852 cv
cp
f
401.609 548.582 mo
401.605 548.625 401.598 548.66 401.578 548.691 cv
401.555 548.723 401.516 548.75 401.469 548.766 cv
401.414 548.785 401.348 548.797 401.262 548.812 cv
401.176 548.824 401.066 548.832 400.941 548.832 cv
400.813 548.832 400.707 548.824 400.621 548.812 cv
400.531 548.797 400.461 548.785 400.41 548.766 cv
400.355 548.75 400.32 548.723 400.301 548.691 cv
400.277 548.66 400.266 548.625 400.27 548.582 cv
400.27 538.902 li
400.266 538.863 400.277 538.828 400.305 538.793 cv
400.324 538.766 400.363 538.738 400.422 538.719 cv
400.473 538.703 400.543 538.687 400.633 538.672 cv
400.715 538.66 400.816 538.656 400.941 538.652 cv
401.066 538.656 401.176 538.66 401.262 538.672 cv
401.348 538.687 401.414 538.703 401.469 538.719 cv
401.516 538.738 401.555 538.766 401.578 538.793 cv
401.598 538.828 401.605 538.863 401.609 538.902 cv
cp
f
414.598 548.59 mo
414.594 548.637 414.586 548.672 414.566 548.695 cv
414.543 548.727 414.508 548.75 414.465 548.77 cv
414.414 548.789 414.348 548.801 414.27 548.816 cv
414.184 548.824 414.082 548.832 413.957 548.832 cv
413.824 548.832 413.715 548.824 413.637 548.816 cv
413.551 548.801 413.484 548.789 413.438 548.77 cv
413.383 548.75 413.348 548.727 413.332 548.695 cv
413.309 548.672 413.301 548.637 413.301 548.59 cv
413.301 544.328 li
413.301 544.035 413.273 543.766 413.223 543.52 cv
413.168 543.277 413.086 543.066 412.973 542.887 cv
412.859 542.711 412.715 542.574 412.539 542.48 cv
412.359 542.387 412.148 542.34 411.914 542.34 cv
411.617 542.34 411.32 542.457 411.023 542.684 cv
410.719 542.918 410.391 543.25 410.035 543.687 cv
410.035 548.59 li
410.031 548.637 410.02 548.672 410.004 548.695 cv
409.98 548.727 409.949 548.75 409.902 548.77 cv
409.852 548.789 409.785 548.801 409.703 548.816 cv
409.617 548.824 409.512 548.832 409.391 548.832 cv
409.27 548.832 409.168 548.824 409.082 548.816 cv
408.996 548.801 408.926 548.789 408.879 548.77 cv
408.824 548.75 408.793 548.727 408.777 548.695 cv
408.758 548.672 408.746 548.637 408.75 548.59 cv
408.75 544.328 li
408.746 544.035 408.719 543.766 408.664 543.52 cv
408.605 543.277 408.52 543.066 408.406 542.887 cv
408.293 542.711 408.148 542.574 407.977 542.48 cv
407.797 542.387 407.59 542.34 407.355 542.34 cv
407.055 542.34 406.758 542.457 406.457 542.684 cv
406.156 542.918 405.828 543.25 405.477 543.687 cv
405.477 548.59 li
405.473 548.637 405.461 548.672 405.445 548.695 cv
405.422 548.727 405.391 548.75 405.344 548.77 cv
405.297 548.789 405.23 548.801 405.152 548.816 cv
405.066 548.824 404.961 548.832 404.832 548.832 cv
404.703 548.832 404.598 548.824 404.52 548.816 cv
404.434 548.801 404.367 548.789 404.32 548.77 cv
404.266 548.75 404.234 548.727 404.219 548.695 cv
404.199 548.672 404.188 548.637 404.191 548.59 cv
404.191 541.578 li
404.188 541.539 404.195 541.504 404.215 541.473 cv
404.227 541.445 404.258 541.422 404.309 541.395 cv
404.352 541.375 404.414 541.359 404.488 541.348 cv
404.559 541.344 404.652 541.34 404.777 541.336 cv
404.887 541.34 404.984 541.344 405.063 541.348 cv
405.137 541.359 405.195 541.375 405.238 541.395 cv
405.277 541.422 405.305 541.445 405.324 541.473 cv
405.34 541.504 405.348 541.539 405.352 541.578 cv
405.352 542.504 li
405.742 542.062 406.125 541.742 406.5 541.535 cv
406.867 541.332 407.246 541.227 407.629 541.227 cv
407.918 541.227 408.176 541.262 408.41 541.328 cv
408.637 541.398 408.844 541.492 409.023 541.613 cv
409.199 541.734 409.348 541.879 409.477 542.047 cv
409.598 542.219 409.703 542.41 409.789 542.613 cv
410.02 542.363 410.242 542.148 410.453 541.969 cv
410.664 541.797 410.867 541.652 411.063 541.539 cv
411.258 541.434 411.445 541.355 411.629 541.301 cv
411.813 541.254 412 541.227 412.188 541.227 cv
412.641 541.227 413.02 541.309 413.324 541.465 cv
413.629 541.629 413.875 541.84 414.07 542.102 cv
414.258 542.367 414.395 542.676 414.477 543.031 cv
414.555 543.387 414.594 543.762 414.598 544.156 cv
cp
f
422.227 548.598 mo
422.223 548.66 422.203 548.707 422.164 548.738 cv
422.121 548.77 422.063 548.793 421.992 548.809 cv
421.914 548.824 421.809 548.832 421.672 548.832 cv
421.535 548.832 421.426 548.824 421.348 548.809 cv
421.262 548.793 421.203 548.77 421.172 548.738 cv
421.133 548.707 421.117 548.66 421.121 548.598 cv
421.121 547.898 li
420.813 548.227 420.469 548.48 420.094 548.66 cv
419.715 548.844 419.316 548.93 418.898 548.934 cv
418.523 548.93 418.191 548.883 417.895 548.789 cv
417.598 548.691 417.344 548.555 417.133 548.371 cv
416.922 548.191 416.758 547.969 416.641 547.703 cv
416.523 547.441 416.465 547.141 416.469 546.797 cv
416.465 546.406 416.543 546.062 416.707 545.77 cv
416.863 545.48 417.098 545.238 417.402 545.047 cv
417.703 544.855 418.07 544.711 418.508 544.613 cv
418.941 544.52 419.434 544.473 419.98 544.469 cv
420.949 544.469 li
420.949 543.922 li
420.945 543.652 420.918 543.414 420.863 543.207 cv
420.805 543 420.711 542.828 420.586 542.687 cv
420.453 542.551 420.289 542.445 420.09 542.375 cv
419.883 542.305 419.633 542.27 419.344 542.27 cv
419.023 542.27 418.738 542.309 418.488 542.383 cv
418.23 542.461 418.012 542.543 417.824 542.633 cv
417.637 542.727 417.477 542.812 417.352 542.883 cv
417.219 542.961 417.125 542.996 417.066 542.996 cv
417.023 542.996 416.988 542.988 416.957 542.965 cv
416.926 542.949 416.898 542.918 416.875 542.871 cv
416.852 542.832 416.832 542.777 416.824 542.711 cv
416.809 542.648 416.805 542.578 416.809 542.496 cv
416.805 542.371 416.813 542.266 416.836 542.187 cv
416.852 542.113 416.898 542.043 416.969 541.973 cv
417.039 541.906 417.16 541.828 417.332 541.738 cv
417.504 541.648 417.699 541.566 417.922 541.488 cv
418.145 541.418 418.391 541.355 418.656 541.301 cv
418.922 541.254 419.188 541.227 419.461 541.227 cv
419.961 541.227 420.391 541.285 420.742 541.398 cv
421.094 541.516 421.379 541.684 421.602 541.902 cv
421.816 542.125 421.977 542.398 422.078 542.723 cv
422.176 543.055 422.223 543.437 422.227 543.867 cv
cp
420.949 545.395 mo
419.848 545.395 li
419.492 545.398 419.188 545.43 418.93 545.484 cv
418.668 545.547 418.453 545.633 418.281 545.75 cv
418.109 545.867 417.984 546.008 417.906 546.172 cv
417.824 546.336 417.781 546.523 417.785 546.734 cv
417.781 547.102 417.898 547.395 418.129 547.605 cv
418.359 547.824 418.684 547.93 419.102 547.93 cv
419.438 547.93 419.75 547.844 420.039 547.672 cv
420.328 547.5 420.629 547.238 420.949 546.883 cv
cp
f
430.449 541.895 mo
430.445 542.078 430.422 542.211 430.375 542.289 cv
430.324 542.371 430.262 542.41 430.188 542.41 cv
429.18 542.41 li
429.359 542.598 429.488 542.805 429.563 543.031 cv
429.633 543.258 429.668 543.492 429.672 543.734 cv
429.668 544.141 429.602 544.5 429.477 544.812 cv
429.344 545.125 429.16 545.391 428.918 545.602 cv
428.676 545.82 428.387 545.984 428.059 546.098 cv
427.723 546.215 427.355 546.273 426.953 546.27 cv
426.664 546.273 426.391 546.234 426.137 546.156 cv
425.875 546.082 425.68 545.988 425.543 545.871 cv
425.449 545.969 425.371 546.074 425.313 546.191 cv
425.25 546.312 425.219 546.449 425.223 546.602 cv
425.219 546.785 425.305 546.937 425.477 547.055 cv
425.645 547.18 425.867 547.242 426.148 547.25 cv
427.98 547.328 li
428.328 547.34 428.645 547.387 428.938 547.473 cv
429.227 547.559 429.48 547.684 429.695 547.84 cv
429.906 548 430.074 548.191 430.195 548.422 cv
430.313 548.656 430.371 548.926 430.375 549.23 cv
430.371 549.551 430.305 549.855 430.172 550.148 cv
430.035 550.437 429.828 550.691 429.551 550.914 cv
429.27 551.133 428.914 551.309 428.484 551.437 cv
428.055 551.562 427.547 551.625 426.961 551.629 cv
426.391 551.625 425.906 551.578 425.512 551.484 cv
425.113 551.387 424.789 551.254 424.535 551.09 cv
424.281 550.922 424.098 550.727 423.984 550.496 cv
423.867 550.262 423.809 550.008 423.813 549.742 cv
423.809 549.57 423.828 549.406 423.875 549.246 cv
423.914 549.082 423.977 548.93 424.063 548.785 cv
424.145 548.641 424.254 548.504 424.383 548.367 cv
424.508 548.238 424.652 548.105 424.824 547.977 cv
424.566 547.848 424.379 547.684 424.258 547.484 cv
424.137 547.289 424.078 547.078 424.078 546.844 cv
424.078 546.531 424.141 546.246 424.27 545.996 cv
424.398 545.746 424.559 545.523 424.754 545.324 cv
424.59 545.133 424.465 544.918 424.371 544.676 cv
424.277 544.437 424.23 544.145 424.23 543.797 cv
424.23 543.402 424.297 543.043 424.434 542.723 cv
424.566 542.406 424.754 542.141 424.996 541.922 cv
425.234 541.707 425.52 541.539 425.855 541.418 cv
426.188 541.305 426.555 541.246 426.953 541.242 cv
427.164 541.246 427.363 541.258 427.547 541.277 cv
427.73 541.305 427.902 541.336 428.066 541.375 cv
430.188 541.375 li
430.273 541.379 430.34 541.422 430.383 541.504 cv
430.426 541.594 430.445 541.723 430.449 541.895 cv
cp
428.441 543.742 mo
428.438 543.27 428.305 542.898 428.047 542.625 cv
427.781 542.359 427.41 542.223 426.93 542.223 cv
426.676 542.223 426.457 542.266 426.277 542.348 cv
426.09 542.434 425.938 542.547 425.816 542.691 cv
425.695 542.84 425.605 543.008 425.547 543.195 cv
425.484 543.383 425.453 543.582 425.457 543.789 cv
425.453 544.254 425.586 544.617 425.848 544.883 cv
426.109 545.148 426.477 545.281 426.953 545.277 cv
427.203 545.281 427.422 545.242 427.613 545.156 cv
427.797 545.078 427.953 544.965 428.078 544.824 cv
428.199 544.684 428.289 544.52 428.352 544.328 cv
428.406 544.145 428.438 543.949 428.441 543.742 cv
cp
429.086 549.301 mo
429.082 548.996 428.957 548.766 428.715 548.602 cv
428.465 548.441 428.133 548.352 427.715 548.34 cv
425.898 548.277 li
425.73 548.41 425.594 548.535 425.492 548.648 cv
425.383 548.766 425.301 548.875 425.238 548.984 cv
425.176 549.09 425.133 549.195 425.109 549.301 cv
425.086 549.402 425.074 549.508 425.074 549.617 cv
425.074 549.953 425.242 550.207 425.586 550.387 cv
425.926 550.559 426.406 550.648 427.023 550.648 cv
427.41 550.648 427.734 550.609 428 550.535 cv
428.258 550.457 428.469 550.355 428.633 550.234 cv
428.789 550.105 428.906 549.965 428.98 549.805 cv
429.047 549.645 429.082 549.477 429.086 549.301 cv
cp
f
438.012 544.781 mo
438.008 544.984 437.957 545.125 437.859 545.211 cv
437.754 545.297 437.637 545.34 437.512 545.34 cv
432.895 545.34 li
432.891 545.73 432.93 546.082 433.012 546.395 cv
433.086 546.707 433.219 546.977 433.402 547.195 cv
433.582 547.422 433.816 547.594 434.113 547.711 cv
434.402 547.836 434.762 547.895 435.188 547.891 cv
435.52 547.895 435.816 547.867 436.078 547.809 cv
436.34 547.758 436.566 547.695 436.758 547.625 cv
436.945 547.559 437.102 547.5 437.227 547.441 cv
437.348 547.391 437.441 547.363 437.504 547.359 cv
437.539 547.363 437.57 547.371 437.602 547.387 cv
437.629 547.406 437.652 547.434 437.672 547.469 cv
437.684 547.508 437.695 547.559 437.707 547.621 cv
437.711 547.687 437.715 547.766 437.719 547.859 cv
437.715 547.93 437.711 547.988 437.711 548.035 cv
437.703 548.082 437.699 548.125 437.691 548.164 cv
437.684 548.203 437.668 548.238 437.652 548.27 cv
437.629 548.301 437.605 548.332 437.582 548.359 cv
437.551 548.391 437.469 548.437 437.328 548.5 cv
437.188 548.566 437.004 548.629 436.781 548.691 cv
436.555 548.754 436.297 548.809 436.004 548.859 cv
435.711 548.906 435.398 548.93 435.066 548.934 cv
434.488 548.93 433.98 548.852 433.551 548.691 cv
433.113 548.531 432.75 548.293 432.457 547.977 cv
432.156 547.66 431.934 547.266 431.785 546.785 cv
431.637 546.309 431.563 545.75 431.563 545.113 cv
431.563 544.516 431.637 543.977 431.793 543.492 cv
431.945 543.016 432.172 542.605 432.469 542.27 cv
432.762 541.934 433.117 541.676 433.531 541.496 cv
433.945 541.316 434.41 541.227 434.926 541.227 cv
435.477 541.227 435.945 541.316 436.332 541.492 cv
436.719 541.672 437.035 541.91 437.289 542.207 cv
437.535 542.508 437.719 542.859 437.836 543.258 cv
437.949 543.664 438.008 544.094 438.012 544.547 cv
cp
436.719 544.398 mo
436.734 543.723 436.582 543.191 436.266 542.809 cv
435.949 542.426 435.48 542.234 434.863 542.23 cv
434.539 542.234 434.258 542.293 434.02 542.41 cv
433.777 542.531 433.578 542.691 433.418 542.887 cv
433.254 543.086 433.129 543.316 433.043 543.578 cv
432.953 543.84 432.902 544.113 432.895 544.398 cv
cp
f
444.375 546.68 mo
444.371 547.043 444.305 547.363 444.176 547.641 cv
444.043 547.922 443.855 548.156 443.613 548.348 cv
443.367 548.543 443.074 548.687 442.738 548.785 cv
442.398 548.883 442.027 548.93 441.625 548.934 cv
441.371 548.93 441.133 548.91 440.91 548.875 cv
440.684 548.832 440.484 548.785 440.305 548.727 cv
440.125 548.668 439.973 548.605 439.848 548.539 cv
439.723 548.477 439.629 548.418 439.574 548.363 cv
439.516 548.312 439.477 548.242 439.453 548.145 cv
439.426 548.055 439.414 547.926 439.414 547.766 cv
439.414 547.668 439.418 547.586 439.43 547.516 cv
439.438 547.449 439.449 547.395 439.469 547.352 cv
439.48 547.312 439.504 547.281 439.531 547.262 cv
439.559 547.246 439.59 547.238 439.629 547.234 cv
439.684 547.238 439.77 547.273 439.883 547.34 cv
439.992 547.414 440.129 547.492 440.297 547.57 cv
440.457 547.656 440.648 547.73 440.875 547.801 cv
441.094 547.871 441.352 547.906 441.648 547.906 cv
441.863 547.906 442.063 547.883 442.242 547.836 cv
442.418 547.789 442.57 547.723 442.699 547.629 cv
442.828 547.543 442.93 547.426 443 547.281 cv
443.07 547.145 443.105 546.977 443.105 546.781 cv
443.105 546.586 443.055 546.422 442.953 546.285 cv
442.852 546.152 442.715 546.031 442.551 545.926 cv
442.383 545.824 442.199 545.734 441.992 545.648 cv
441.781 545.57 441.566 545.484 441.348 545.395 cv
441.129 545.309 440.914 545.207 440.703 545.094 cv
440.492 544.984 440.301 544.852 440.137 544.687 cv
439.965 544.531 439.832 544.336 439.734 544.109 cv
439.629 543.887 439.578 543.621 439.582 543.309 cv
439.578 543.035 439.633 542.77 439.742 542.516 cv
439.848 542.266 440.008 542.047 440.223 541.855 cv
440.434 541.668 440.699 541.516 441.02 541.398 cv
441.34 541.285 441.711 541.227 442.141 541.227 cv
442.324 541.227 442.512 541.242 442.699 541.273 cv
442.883 541.305 443.051 541.344 443.207 541.391 cv
443.355 541.437 443.484 541.488 443.594 541.543 cv
443.695 541.598 443.777 541.648 443.836 541.687 cv
443.887 541.734 443.922 541.77 443.945 541.797 cv
443.961 541.828 443.977 541.863 443.984 541.898 cv
443.992 541.941 444 541.988 444.008 542.043 cv
444.016 542.102 444.02 542.172 444.02 542.254 cv
444.02 542.344 444.016 542.422 444.008 542.484 cv
444 542.555 443.984 542.605 443.969 542.645 cv
443.945 542.687 443.926 542.719 443.902 542.734 cv
443.875 542.754 443.844 542.762 443.816 542.762 cv
443.766 542.762 443.699 542.734 443.613 542.676 cv
443.523 542.621 443.41 542.559 443.27 542.492 cv
443.129 542.43 442.961 542.371 442.773 542.309 cv
442.582 542.254 442.367 542.223 442.125 542.223 cv
441.902 542.223 441.711 542.25 441.547 542.297 cv
441.379 542.352 441.242 542.422 441.137 542.508 cv
441.031 542.602 440.949 542.707 440.898 542.832 cv
440.84 542.957 440.813 543.094 440.816 543.238 cv
440.813 543.441 440.863 543.609 440.969 543.746 cv
441.07 543.887 441.207 544.008 441.375 544.109 cv
441.539 544.215 441.73 544.309 441.945 544.391 cv
442.156 544.477 442.371 544.562 442.594 544.648 cv
442.813 544.738 443.031 544.84 443.25 544.945 cv
443.465 545.055 443.656 545.184 443.824 545.34 cv
443.988 545.496 444.121 545.684 444.223 545.902 cv
444.32 546.121 444.371 546.383 444.375 546.68 cv
cp
f
190.68 15.934 mo
190.738 16.125 190.777 16.273 190.797 16.379 cv
190.809 16.492 190.789 16.574 190.734 16.625 cv
190.676 16.68 190.574 16.711 190.43 16.727 cv
190.281 16.738 190.082 16.746 189.832 16.746 cv
189.563 16.746 189.355 16.742 189.211 16.734 cv
189.059 16.727 188.945 16.711 188.871 16.687 cv
188.789 16.664 188.734 16.633 188.707 16.59 cv
188.672 16.551 188.645 16.496 188.629 16.426 cv
187.953 14.398 li
184.164 14.398 li
183.527 16.371 li
183.504 16.445 183.477 16.508 183.445 16.555 cv
183.41 16.605 183.355 16.645 183.281 16.672 cv
183.203 16.699 183.098 16.715 182.961 16.73 cv
182.82 16.738 182.637 16.746 182.418 16.746 cv
182.176 16.746 181.992 16.738 181.859 16.723 cv
181.723 16.707 181.629 16.672 181.578 16.609 cv
181.523 16.555 181.504 16.469 181.523 16.355 cv
181.535 16.25 181.574 16.105 181.641 15.918 cv
184.75 6.97302 li
184.777 6.88702 184.816 6.81598 184.859 6.758 cv
184.898 6.70697 184.965 6.664 185.059 6.633 cv
185.148 6.60498 185.273 6.59003 185.434 6.578 cv
185.594 6.57397 185.805 6.57001 186.074 6.56598 cv
186.379 6.57001 186.625 6.57397 186.805 6.578 cv
186.984 6.59003 187.125 6.60498 187.23 6.633 cv
187.328 6.664 187.402 6.70697 187.449 6.76202 cv
187.492 6.82001 187.527 6.89801 187.563 6.99597 cv
cp
186.051 8.539 mo
186.043 8.539 li
184.617 12.824 li
187.477 12.824 li
cp
f
198.051 9.47699 mo
198.047 9.50403 198.047 9.53497 198.047 9.57001 cv
198.043 9.60901 198.039 9.64801 198.031 9.69098 cv
198.023 9.73401 198.012 9.78497 198 9.84003 cv
197.984 9.89801 197.969 9.96503 197.949 10.035 cv
195.863 16.324 li
195.836 16.414 195.801 16.488 195.758 16.539 cv
195.711 16.598 195.637 16.641 195.539 16.668 cv
195.434 16.699 195.297 16.715 195.125 16.73 cv
194.949 16.738 194.723 16.746 194.445 16.746 cv
194.168 16.746 193.941 16.738 193.77 16.727 cv
193.594 16.711 193.457 16.691 193.359 16.66 cv
193.258 16.633 193.188 16.59 193.145 16.531 cv
193.098 16.48 193.063 16.41 193.039 16.324 cv
190.953 10.035 li
190.922 9.93402 190.895 9.84003 190.879 9.758 cv
190.855 9.67603 190.848 9.617 190.848 9.578 cv
190.844 9.547 190.84 9.51202 190.844 9.47699 cv
190.84 9.42603 190.855 9.37903 190.887 9.34003 cv
190.914 9.30103 190.965 9.27002 191.039 9.242 cv
191.109 9.21899 191.207 9.19897 191.336 9.18701 cv
191.461 9.17999 191.621 9.17603 191.816 9.172 cv
192.027 9.17603 192.199 9.18402 192.332 9.19098 cv
192.457 9.20697 192.563 9.22302 192.641 9.24597 cv
192.715 9.27002 192.766 9.30499 192.801 9.34802 cv
192.828 9.39502 192.855 9.44897 192.879 9.508 cv
194.461 14.609 li
194.508 14.805 li
194.555 14.609 li
196.113 9.508 li
196.125 9.44897 196.148 9.39502 196.184 9.34802 cv
196.215 9.30499 196.27 9.27002 196.344 9.24597 cv
196.414 9.22302 196.512 9.20697 196.637 9.19098 cv
196.758 9.18402 196.918 9.17603 197.117 9.172 cv
197.309 9.17603 197.465 9.17999 197.586 9.18701 cv
197.707 9.19897 197.801 9.21899 197.871 9.242 cv
197.938 9.27002 197.984 9.30103 198.012 9.34003 cv
198.035 9.37903 198.047 9.42603 198.051 9.47699 cv
cp
f
205.512 12.758 mo
205.508 12.996 205.457 13.172 205.352 13.285 cv
205.242 13.402 205.094 13.461 204.914 13.457 cv
200.68 13.457 li
200.676 13.758 200.711 14.027 200.785 14.266 cv
200.852 14.508 200.965 14.711 201.121 14.879 cv
201.273 15.051 201.469 15.18 201.711 15.266 cv
201.949 15.355 202.238 15.398 202.582 15.398 cv
202.922 15.398 203.223 15.375 203.484 15.324 cv
203.742 15.277 203.969 15.223 204.16 15.16 cv
204.348 15.102 204.504 15.047 204.633 14.996 cv
204.754 14.949 204.855 14.926 204.938 14.922 cv
204.98 14.926 205.02 14.934 205.055 14.949 cv
205.082 14.969 205.109 15 205.129 15.047 cv
205.148 15.094 205.16 15.16 205.172 15.246 cv
205.176 15.332 205.18 15.441 205.184 15.57 cv
205.18 15.687 205.18 15.785 205.176 15.863 cv
205.168 15.945 205.16 16.012 205.152 16.066 cv
205.141 16.125 205.125 16.176 205.105 16.211 cv
205.086 16.254 205.059 16.289 205.027 16.324 cv
204.992 16.363 204.898 16.414 204.75 16.473 cv
204.594 16.539 204.402 16.602 204.172 16.656 cv
203.934 16.719 203.664 16.766 203.367 16.812 cv
203.063 16.852 202.742 16.875 202.402 16.879 cv
201.781 16.875 201.238 16.801 200.777 16.645 cv
200.309 16.492 199.922 16.254 199.613 15.937 cv
199.297 15.621 199.063 15.223 198.914 14.738 cv
198.758 14.258 198.684 13.691 198.688 13.035 cv
198.684 12.422 198.762 11.863 198.926 11.367 cv
199.082 10.871 199.316 10.453 199.629 10.105 cv
199.934 9.76202 200.309 9.49597 200.746 9.31201 cv
201.184 9.133 201.676 9.04303 202.23 9.039 cv
202.809 9.04303 203.309 9.12903 203.723 9.297 cv
204.137 9.47302 204.473 9.711 204.738 10.012 cv
205 10.316 205.195 10.676 205.324 11.09 cv
205.445 11.508 205.508 11.957 205.512 12.445 cv
cp
203.609 12.195 mo
203.621 11.645 203.512 11.211 203.277 10.898 cv
203.043 10.586 202.676 10.43 202.184 10.426 cv
201.934 10.43 201.719 10.477 201.535 10.566 cv
201.348 10.664 201.195 10.789 201.074 10.945 cv
200.949 11.105 200.855 11.293 200.793 11.508 cv
200.727 11.723 200.688 11.953 200.68 12.195 cv
cp
f
211.586 10.129 mo
211.586 10.32 211.578 10.473 211.57 10.59 cv
211.555 10.711 211.539 10.805 211.523 10.871 cv
211.5 10.941 211.473 10.988 211.441 11.012 cv
211.402 11.039 211.359 11.051 211.313 11.051 cv
211.266 11.051 211.219 11.043 211.172 11.023 cv
211.117 11.008 211.059 10.988 210.996 10.965 cv
210.926 10.945 210.855 10.926 210.781 10.906 cv
210.699 10.891 210.613 10.883 210.523 10.879 cv
210.41 10.883 210.301 10.902 210.195 10.945 cv
210.086 10.992 209.973 11.062 209.859 11.152 cv
209.738 11.246 209.617 11.371 209.492 11.523 cv
209.363 11.684 209.227 11.875 209.082 12.102 cv
209.082 16.434 li
209.078 16.488 209.063 16.531 209.035 16.57 cv
209 16.609 208.945 16.645 208.875 16.668 cv
208.797 16.695 208.699 16.711 208.574 16.727 cv
208.449 16.738 208.289 16.746 208.102 16.746 cv
207.906 16.746 207.75 16.738 207.625 16.727 cv
207.5 16.711 207.398 16.695 207.324 16.668 cv
207.246 16.645 207.191 16.609 207.164 16.57 cv
207.129 16.531 207.113 16.488 207.117 16.434 cv
207.117 9.48401 li
207.113 9.43701 207.129 9.39099 207.156 9.34802 cv
207.18 9.31201 207.227 9.28101 207.297 9.25 cv
207.363 9.22699 207.449 9.20697 207.559 9.19098 cv
207.664 9.18402 207.797 9.17603 207.961 9.172 cv
208.125 9.17603 208.262 9.18402 208.371 9.19098 cv
208.477 9.20697 208.563 9.22699 208.625 9.25 cv
208.684 9.28101 208.727 9.31201 208.754 9.34802 cv
208.777 9.39099 208.789 9.43701 208.793 9.48401 cv
208.793 10.348 li
208.973 10.09 209.145 9.87903 209.309 9.70697 cv
209.465 9.54303 209.621 9.40601 209.77 9.30499 cv
209.914 9.20697 210.059 9.14099 210.203 9.09802 cv
210.348 9.06201 210.492 9.04303 210.641 9.039 cv
210.707 9.04303 210.781 9.047 210.859 9.05103 cv
210.938 9.06201 211.016 9.07397 211.102 9.09003 cv
211.18 9.10901 211.254 9.12903 211.32 9.15198 cv
211.379 9.17603 211.426 9.203 211.457 9.22699 cv
211.484 9.258 211.504 9.28497 211.52 9.31201 cv
211.531 9.34802 211.543 9.39099 211.555 9.44098 cv
211.563 9.5 211.57 9.58197 211.578 9.68701 cv
211.582 9.797 211.586 9.94501 211.586 10.129 cv
cp
f
218.344 16.457 mo
218.34 16.535 218.313 16.59 218.266 16.629 cv
218.211 16.672 218.129 16.699 218.02 16.719 cv
217.902 16.734 217.738 16.746 217.523 16.746 cv
217.285 16.746 217.113 16.734 217.012 16.719 cv
216.902 16.699 216.828 16.672 216.789 16.629 cv
216.742 16.59 216.723 16.535 216.723 16.457 cv
216.723 15.906 li
216.434 16.215 216.105 16.453 215.742 16.621 cv
215.375 16.793 214.969 16.875 214.523 16.879 cv
214.152 16.875 213.813 16.828 213.504 16.734 cv
213.195 16.641 212.93 16.5 212.703 16.305 cv
212.477 16.117 212.301 15.883 212.176 15.602 cv
212.051 15.324 211.988 14.996 211.992 14.617 cv
211.988 14.219 212.066 13.867 212.227 13.562 cv
212.383 13.266 212.621 13.02 212.938 12.824 cv
213.25 12.633 213.641 12.488 214.109 12.391 cv
214.578 12.301 215.121 12.254 215.738 12.25 cv
216.418 12.25 li
216.418 11.828 li
216.418 11.613 216.395 11.422 216.352 11.258 cv
216.305 11.098 216.23 10.961 216.133 10.848 cv
216.027 10.742 215.895 10.66 215.727 10.605 cv
215.555 10.555 215.344 10.531 215.102 10.527 cv
214.77 10.531 214.477 10.566 214.223 10.637 cv
213.961 10.711 213.734 10.793 213.539 10.879 cv
213.34 10.973 213.176 11.051 213.047 11.121 cv
212.91 11.195 212.801 11.234 212.723 11.23 cv
212.66 11.234 212.609 11.215 212.57 11.176 cv
212.523 11.141 212.488 11.09 212.461 11.02 cv
212.43 10.957 212.406 10.871 212.395 10.77 cv
212.375 10.672 212.367 10.562 212.371 10.441 cv
212.367 10.281 212.383 10.156 212.41 10.059 cv
212.434 9.96899 212.48 9.883 212.559 9.80499 cv
212.629 9.72998 212.758 9.64801 212.941 9.55902 cv
213.121 9.46899 213.332 9.383 213.578 9.30499 cv
213.82 9.22699 214.09 9.164 214.379 9.11298 cv
214.668 9.06598 214.965 9.04303 215.273 9.039 cv
215.816 9.04303 216.281 9.09399 216.668 9.19897 cv
217.055 9.30902 217.375 9.47302 217.625 9.69098 cv
217.875 9.90997 218.055 10.195 218.172 10.543 cv
218.281 10.895 218.34 11.309 218.344 11.781 cv
cp
216.418 13.48 mo
215.668 13.48 li
215.352 13.484 215.082 13.508 214.859 13.551 cv
214.633 13.602 214.449 13.672 214.313 13.762 cv
214.168 13.859 214.066 13.973 214.004 14.102 cv
213.938 14.238 213.902 14.387 213.906 14.555 cv
213.902 14.848 213.996 15.078 214.184 15.242 cv
214.367 15.41 214.625 15.492 214.953 15.492 cv
215.227 15.492 215.477 15.422 215.711 15.281 cv
215.938 15.141 216.176 14.937 216.418 14.664 cv
cp
f
226.566 9.96503 mo
226.563 10.219 226.535 10.402 226.48 10.52 cv
226.422 10.641 226.352 10.699 226.273 10.699 cv
225.453 10.699 li
225.566 10.824 225.648 10.969 225.699 11.125 cv
225.746 11.285 225.77 11.449 225.773 11.617 cv
225.77 12.027 225.703 12.387 225.57 12.699 cv
225.434 13.016 225.238 13.281 224.988 13.492 cv
224.734 13.711 224.434 13.875 224.078 13.984 cv
223.719 14.102 223.32 14.156 222.891 14.152 cv
222.664 14.156 222.453 14.129 222.25 14.07 cv
222.047 14.02 221.891 13.957 221.781 13.879 cv
221.719 13.949 221.66 14.027 221.613 14.121 cv
221.563 14.215 221.539 14.32 221.543 14.43 cv
221.539 14.586 221.605 14.707 221.738 14.801 cv
221.867 14.898 222.055 14.953 222.297 14.961 cv
223.988 15.023 li
224.383 15.039 224.734 15.098 225.043 15.191 cv
225.352 15.293 225.613 15.426 225.824 15.598 cv
226.035 15.773 226.195 15.984 226.305 16.227 cv
226.414 16.473 226.469 16.746 226.473 17.059 cv
226.469 17.395 226.395 17.719 226.246 18.027 cv
226.098 18.328 225.871 18.59 225.57 18.816 cv
225.266 19.035 224.887 19.215 224.434 19.348 cv
223.977 19.477 223.445 19.539 222.844 19.543 cv
222.246 19.539 221.742 19.492 221.324 19.402 cv
220.906 19.305 220.563 19.176 220.297 19.012 cv
220.027 18.844 219.832 18.645 219.715 18.418 cv
219.59 18.184 219.531 17.93 219.531 17.656 cv
219.531 17.484 219.551 17.324 219.598 17.168 cv
219.637 17.012 219.703 16.859 219.793 16.719 cv
219.875 16.574 219.98 16.441 220.105 16.309 cv
220.23 16.18 220.371 16.055 220.535 15.934 cv
220.309 15.82 220.137 15.66 220.016 15.449 cv
219.895 15.246 219.836 15.02 219.836 14.773 cv
219.836 14.473 219.902 14.195 220.043 13.937 cv
220.18 13.687 220.363 13.457 220.59 13.254 cv
220.406 13.074 220.262 12.859 220.152 12.602 cv
220.043 12.352 219.988 12.031 219.992 11.648 cv
219.988 11.246 220.059 10.887 220.203 10.562 cv
220.344 10.246 220.543 9.97699 220.801 9.75403 cv
221.055 9.53497 221.359 9.36298 221.711 9.24597 cv
222.063 9.12903 222.453 9.07001 222.883 9.07001 cv
223.102 9.07001 223.309 9.086 223.508 9.10901 cv
223.707 9.14099 223.895 9.17603 224.066 9.21899 cv
226.273 9.21899 li
226.355 9.22302 226.426 9.28101 226.484 9.39099 cv
226.535 9.508 226.563 9.69897 226.566 9.96503 cv
cp
224.051 11.609 mo
224.047 11.238 223.945 10.949 223.738 10.738 cv
223.527 10.535 223.234 10.43 222.859 10.426 cv
222.664 10.43 222.492 10.461 222.352 10.523 cv
222.203 10.59 222.082 10.68 221.988 10.789 cv
221.887 10.902 221.816 11.031 221.773 11.18 cv
221.723 11.328 221.699 11.484 221.703 11.641 cv
221.699 12 221.805 12.277 222.016 12.48 cv
222.223 12.687 222.512 12.793 222.883 12.789 cv
223.078 12.793 223.246 12.762 223.395 12.695 cv
223.535 12.637 223.656 12.551 223.758 12.437 cv
223.852 12.332 223.926 12.203 223.977 12.059 cv
224.023 11.918 224.047 11.77 224.051 11.609 cv
cp
224.512 17.16 mo
224.512 16.922 224.418 16.746 224.23 16.621 cv
224.043 16.5 223.785 16.43 223.457 16.418 cv
222.063 16.379 li
221.926 16.48 221.816 16.574 221.738 16.664 cv
221.656 16.754 221.594 16.84 221.547 16.926 cv
221.496 17.008 221.461 17.09 221.449 17.168 cv
221.43 17.246 221.422 17.324 221.426 17.41 cv
221.422 17.664 221.555 17.863 221.816 18 cv
222.078 18.133 222.449 18.199 222.93 18.203 cv
223.223 18.199 223.469 18.168 223.676 18.113 cv
223.875 18.051 224.039 17.973 224.168 17.875 cv
224.289 17.773 224.379 17.664 224.434 17.543 cv
224.484 17.422 224.512 17.293 224.512 17.16 cv
cp
f
234.191 12.758 mo
234.188 12.996 234.137 13.172 234.031 13.285 cv
233.922 13.402 233.773 13.461 233.594 13.457 cv
229.359 13.457 li
229.355 13.758 229.391 14.027 229.465 14.266 cv
229.531 14.508 229.645 14.711 229.801 14.879 cv
229.953 15.051 230.148 15.18 230.391 15.266 cv
230.629 15.355 230.918 15.398 231.262 15.398 cv
231.602 15.398 231.902 15.375 232.164 15.324 cv
232.422 15.277 232.648 15.223 232.84 15.16 cv
233.027 15.102 233.184 15.047 233.313 14.996 cv
233.434 14.949 233.535 14.926 233.617 14.922 cv
233.66 14.926 233.699 14.934 233.734 14.949 cv
233.762 14.969 233.789 15 233.809 15.047 cv
233.828 15.094 233.84 15.16 233.852 15.246 cv
233.855 15.332 233.859 15.441 233.863 15.57 cv
233.859 15.687 233.859 15.785 233.855 15.863 cv
233.848 15.945 233.84 16.012 233.832 16.066 cv
233.82 16.125 233.805 16.176 233.785 16.211 cv
233.766 16.254 233.738 16.289 233.707 16.324 cv
233.672 16.363 233.578 16.414 233.43 16.473 cv
233.273 16.539 233.082 16.602 232.852 16.656 cv
232.613 16.719 232.344 16.766 232.047 16.812 cv
231.742 16.852 231.422 16.875 231.082 16.879 cv
230.461 16.875 229.918 16.801 229.457 16.645 cv
228.988 16.492 228.602 16.254 228.293 15.937 cv
227.977 15.621 227.742 15.223 227.594 14.738 cv
227.438 14.258 227.363 13.691 227.367 13.035 cv
227.363 12.422 227.441 11.863 227.605 11.367 cv
227.762 10.871 227.996 10.453 228.309 10.105 cv
228.613 9.76202 228.988 9.49597 229.426 9.31201 cv
229.863 9.133 230.355 9.04303 230.91 9.039 cv
231.488 9.04303 231.988 9.12903 232.402 9.297 cv
232.816 9.47302 233.152 9.711 233.418 10.012 cv
233.68 10.316 233.875 10.676 234.004 11.09 cv
234.125 11.508 234.188 11.957 234.191 12.445 cv
cp
232.289 12.195 mo
232.301 11.645 232.191 11.211 231.957 10.898 cv
231.723 10.586 231.355 10.43 230.863 10.426 cv
230.613 10.43 230.398 10.477 230.215 10.566 cv
230.027 10.664 229.875 10.789 229.754 10.945 cv
229.629 11.105 229.535 11.293 229.473 11.508 cv
229.406 11.723 229.367 11.953 229.359 12.195 cv
cp
f
246.43 9.67999 mo
246.43 10.246 246.34 10.75 246.164 11.184 cv
245.984 11.621 245.727 11.988 245.391 12.285 cv
245.051 12.59 244.637 12.816 244.148 12.969 cv
243.656 13.125 243.078 13.203 242.414 13.199 cv
241.574 13.199 li
241.574 16.418 li
241.57 16.473 241.555 16.52 241.523 16.559 cv
241.488 16.602 241.434 16.637 241.355 16.66 cv
241.277 16.687 241.172 16.707 241.043 16.723 cv
240.91 16.738 240.746 16.746 240.547 16.746 cv
240.348 16.746 240.18 16.738 240.051 16.723 cv
239.914 16.707 239.809 16.687 239.734 16.66 cv
239.652 16.637 239.598 16.602 239.57 16.559 cv
239.535 16.52 239.52 16.473 239.523 16.418 cv
239.523 7.34802 li
239.52 7.10498 239.586 6.922 239.715 6.797 cv
239.84 6.67603 240.008 6.617 240.219 6.61298 cv
242.594 6.61298 li
242.828 6.617 243.059 6.625 243.277 6.64099 cv
243.492 6.65997 243.75 6.69897 244.051 6.758 cv
244.352 6.82001 244.656 6.92999 244.969 7.09003 cv
245.277 7.25403 245.539 7.461 245.758 7.703 cv
245.973 7.953 246.141 8.242 246.258 8.57001 cv
246.371 8.90198 246.43 9.27002 246.43 9.67999 cv
cp
244.285 9.82397 mo
244.285 9.47699 244.223 9.18402 244.098 8.953 cv
243.973 8.72699 243.816 8.55902 243.637 8.44501 cv
243.453 8.34003 243.266 8.27002 243.066 8.23798 cv
242.863 8.211 242.656 8.19897 242.445 8.19501 cv
241.574 8.19501 li
241.574 11.617 li
242.492 11.617 li
242.82 11.621 243.094 11.574 243.316 11.484 cv
243.535 11.398 243.715 11.277 243.855 11.117 cv
243.992 10.961 244.098 10.77 244.176 10.547 cv
244.246 10.328 244.285 10.09 244.285 9.82397 cv
cp
f
252.363 10.129 mo
252.363 10.32 252.355 10.473 252.348 10.59 cv
252.332 10.711 252.316 10.805 252.301 10.871 cv
252.277 10.941 252.25 10.988 252.219 11.012 cv
252.18 11.039 252.137 11.051 252.09 11.051 cv
252.043 11.051 251.996 11.043 251.949 11.023 cv
251.895 11.008 251.836 10.988 251.773 10.965 cv
251.703 10.945 251.633 10.926 251.559 10.906 cv
251.477 10.891 251.391 10.883 251.301 10.879 cv
251.188 10.883 251.078 10.902 250.973 10.945 cv
250.863 10.992 250.75 11.062 250.637 11.152 cv
250.516 11.246 250.395 11.371 250.27 11.523 cv
250.141 11.684 250.004 11.875 249.859 12.102 cv
249.859 16.434 li
249.855 16.488 249.84 16.531 249.813 16.57 cv
249.777 16.609 249.723 16.645 249.652 16.668 cv
249.574 16.695 249.477 16.711 249.352 16.727 cv
249.227 16.738 249.066 16.746 248.879 16.746 cv
248.684 16.746 248.527 16.738 248.402 16.727 cv
248.277 16.711 248.176 16.695 248.102 16.668 cv
248.023 16.645 247.969 16.609 247.941 16.57 cv
247.906 16.531 247.891 16.488 247.895 16.434 cv
247.895 9.48401 li
247.891 9.43701 247.906 9.39099 247.934 9.34802 cv
247.957 9.31201 248.004 9.28101 248.074 9.25 cv
248.141 9.22699 248.227 9.20697 248.336 9.19098 cv
248.441 9.18402 248.574 9.17603 248.738 9.172 cv
248.902 9.17603 249.039 9.18402 249.148 9.19098 cv
249.254 9.20697 249.34 9.22699 249.402 9.25 cv
249.461 9.28101 249.504 9.31201 249.531 9.34802 cv
249.555 9.39099 249.566 9.43701 249.57 9.48401 cv
249.57 10.348 li
249.75 10.09 249.922 9.87903 250.086 9.70697 cv
250.242 9.54303 250.398 9.40601 250.547 9.30499 cv
250.691 9.20697 250.836 9.14099 250.98 9.09802 cv
251.125 9.06201 251.27 9.04303 251.418 9.039 cv
251.484 9.04303 251.559 9.047 251.637 9.05103 cv
251.715 9.06201 251.793 9.07397 251.879 9.09003 cv
251.957 9.10901 252.031 9.12903 252.098 9.15198 cv
252.156 9.17603 252.203 9.203 252.234 9.22699 cv
252.262 9.258 252.281 9.28497 252.297 9.31201 cv
252.309 9.34802 252.32 9.39099 252.332 9.44098 cv
252.34 9.5 252.348 9.58197 252.355 9.68701 cv
252.359 9.797 252.363 9.94501 252.363 10.129 cv
cp
f
259.871 12.758 mo
259.867 12.996 259.816 13.172 259.711 13.285 cv
259.602 13.402 259.453 13.461 259.273 13.457 cv
255.039 13.457 li
255.035 13.758 255.07 14.027 255.145 14.266 cv
255.211 14.508 255.324 14.711 255.48 14.879 cv
255.633 15.051 255.828 15.18 256.07 15.266 cv
256.309 15.355 256.598 15.398 256.941 15.398 cv
257.281 15.398 257.582 15.375 257.844 15.324 cv
258.102 15.277 258.328 15.223 258.52 15.16 cv
258.707 15.102 258.863 15.047 258.992 14.996 cv
259.113 14.949 259.215 14.926 259.297 14.922 cv
259.34 14.926 259.379 14.934 259.414 14.949 cv
259.441 14.969 259.469 15 259.488 15.047 cv
259.508 15.094 259.52 15.16 259.531 15.246 cv
259.535 15.332 259.539 15.441 259.543 15.57 cv
259.539 15.687 259.539 15.785 259.535 15.863 cv
259.527 15.945 259.52 16.012 259.512 16.066 cv
259.5 16.125 259.484 16.176 259.465 16.211 cv
259.445 16.254 259.418 16.289 259.387 16.324 cv
259.352 16.363 259.258 16.414 259.109 16.473 cv
258.953 16.539 258.762 16.602 258.531 16.656 cv
258.293 16.719 258.023 16.766 257.727 16.812 cv
257.422 16.852 257.102 16.875 256.762 16.879 cv
256.141 16.875 255.598 16.801 255.137 16.645 cv
254.668 16.492 254.281 16.254 253.973 15.937 cv
253.656 15.621 253.422 15.223 253.273 14.738 cv
253.117 14.258 253.043 13.691 253.047 13.035 cv
253.043 12.422 253.121 11.863 253.285 11.367 cv
253.441 10.871 253.676 10.453 253.988 10.105 cv
254.293 9.76202 254.668 9.49597 255.105 9.31201 cv
255.543 9.133 256.035 9.04303 256.59 9.039 cv
257.168 9.04303 257.668 9.12903 258.082 9.297 cv
258.496 9.47302 258.832 9.711 259.098 10.012 cv
259.359 10.316 259.555 10.676 259.684 11.09 cv
259.805 11.508 259.867 11.957 259.871 12.445 cv
cp
257.969 12.195 mo
257.98 11.645 257.871 11.211 257.637 10.898 cv
257.402 10.586 257.035 10.43 256.543 10.426 cv
256.293 10.43 256.078 10.477 255.895 10.566 cv
255.707 10.664 255.555 10.789 255.434 10.945 cv
255.309 11.105 255.215 11.293 255.152 11.508 cv
255.086 11.723 255.047 11.953 255.039 12.195 cv
cp
f
268.477 12.855 mo
268.477 13.477 268.41 14.035 268.277 14.531 cv
268.145 15.027 267.949 15.449 267.695 15.797 cv
267.441 16.145 267.125 16.414 266.746 16.598 cv
266.363 16.785 265.93 16.875 265.445 16.879 cv
265.238 16.875 265.051 16.855 264.887 16.82 cv
264.715 16.777 264.551 16.719 264.395 16.641 cv
264.234 16.562 264.078 16.465 263.926 16.34 cv
263.766 16.223 263.605 16.082 263.441 15.918 cv
263.441 19.191 li
263.438 19.238 263.422 19.285 263.395 19.332 cv
263.359 19.371 263.305 19.406 263.234 19.437 cv
263.156 19.461 263.059 19.484 262.934 19.504 cv
262.809 19.516 262.648 19.523 262.461 19.527 cv
262.266 19.523 262.109 19.516 261.984 19.504 cv
261.859 19.484 261.758 19.461 261.684 19.437 cv
261.605 19.406 261.551 19.371 261.523 19.332 cv
261.488 19.285 261.473 19.238 261.477 19.191 cv
261.477 9.48401 li
261.473 9.43701 261.488 9.39099 261.516 9.34802 cv
261.539 9.31201 261.582 9.28101 261.652 9.25 cv
261.715 9.22699 261.801 9.20697 261.91 9.19098 cv
262.012 9.18402 262.148 9.17603 262.313 9.172 cv
262.469 9.17603 262.598 9.18402 262.703 9.19098 cv
262.809 9.20697 262.895 9.22699 262.961 9.25 cv
263.023 9.28101 263.07 9.31201 263.098 9.34802 cv
263.121 9.39099 263.133 9.43701 263.137 9.48401 cv
263.137 10.301 li
263.336 10.094 263.535 9.914 263.734 9.75403 cv
263.926 9.59802 264.125 9.46503 264.328 9.35498 cv
264.531 9.25403 264.738 9.172 264.957 9.117 cv
265.168 9.06598 265.398 9.04303 265.648 9.039 cv
266.152 9.04303 266.586 9.14099 266.949 9.34003 cv
267.305 9.54303 267.598 9.82001 267.824 10.164 cv
268.047 10.516 268.211 10.918 268.32 11.379 cv
268.422 11.84 268.477 12.332 268.477 12.855 cv
cp
266.434 12.996 mo
266.43 12.703 266.41 12.422 266.367 12.145 cv
266.32 11.875 266.242 11.633 266.141 11.418 cv
266.031 11.207 265.891 11.035 265.719 10.906 cv
265.543 10.781 265.328 10.719 265.07 10.715 cv
264.938 10.719 264.809 10.738 264.684 10.773 cv
264.555 10.816 264.426 10.879 264.293 10.965 cv
264.16 11.055 264.023 11.168 263.887 11.309 cv
263.742 11.449 263.594 11.625 263.441 11.828 cv
263.441 14.121 li
263.715 14.469 263.977 14.738 264.227 14.926 cv
264.473 15.117 264.734 15.211 265.008 15.211 cv
265.262 15.211 265.477 15.148 265.66 15.016 cv
265.836 14.891 265.984 14.719 266.098 14.508 cv
266.211 14.297 266.293 14.059 266.352 13.793 cv
266.402 13.527 266.43 13.262 266.434 12.996 cv
cp
f
275.973 16.457 mo
275.969 16.535 275.941 16.59 275.895 16.629 cv
275.84 16.672 275.758 16.699 275.648 16.719 cv
275.531 16.734 275.367 16.746 275.152 16.746 cv
274.914 16.746 274.742 16.734 274.641 16.719 cv
274.531 16.699 274.457 16.672 274.418 16.629 cv
274.371 16.59 274.352 16.535 274.352 16.457 cv
274.352 15.906 li
274.063 16.215 273.734 16.453 273.371 16.621 cv
273.004 16.793 272.598 16.875 272.152 16.879 cv
271.781 16.875 271.441 16.828 271.133 16.734 cv
270.824 16.641 270.559 16.5 270.332 16.305 cv
270.105 16.117 269.93 15.883 269.805 15.602 cv
269.68 15.324 269.617 14.996 269.621 14.617 cv
269.617 14.219 269.695 13.867 269.855 13.562 cv
270.012 13.266 270.25 13.02 270.566 12.824 cv
270.879 12.633 271.27 12.488 271.738 12.391 cv
272.207 12.301 272.75 12.254 273.367 12.25 cv
274.047 12.25 li
274.047 11.828 li
274.047 11.613 274.023 11.422 273.98 11.258 cv
273.934 11.098 273.859 10.961 273.762 10.848 cv
273.656 10.742 273.523 10.66 273.355 10.605 cv
273.184 10.555 272.973 10.531 272.73 10.527 cv
272.398 10.531 272.105 10.566 271.852 10.637 cv
271.59 10.711 271.363 10.793 271.168 10.879 cv
270.969 10.973 270.805 11.051 270.676 11.121 cv
270.539 11.195 270.43 11.234 270.352 11.23 cv
270.289 11.234 270.238 11.215 270.199 11.176 cv
270.152 11.141 270.117 11.09 270.09 11.02 cv
270.059 10.957 270.035 10.871 270.023 10.77 cv
270.004 10.672 269.996 10.562 270 10.441 cv
269.996 10.281 270.012 10.156 270.039 10.059 cv
270.063 9.96899 270.109 9.883 270.188 9.80499 cv
270.258 9.72998 270.387 9.64801 270.57 9.55902 cv
270.75 9.46899 270.961 9.383 271.207 9.30499 cv
271.449 9.22699 271.719 9.164 272.008 9.11298 cv
272.297 9.06598 272.594 9.04303 272.902 9.039 cv
273.445 9.04303 273.91 9.09399 274.297 9.19897 cv
274.684 9.30902 275.004 9.47302 275.254 9.69098 cv
275.504 9.90997 275.684 10.195 275.801 10.543 cv
275.91 10.895 275.969 11.309 275.973 11.781 cv
cp
274.047 13.48 mo
273.297 13.48 li
272.98 13.484 272.711 13.508 272.488 13.551 cv
272.262 13.602 272.078 13.672 271.941 13.762 cv
271.797 13.859 271.695 13.973 271.633 14.102 cv
271.566 14.238 271.531 14.387 271.535 14.555 cv
271.531 14.848 271.625 15.078 271.813 15.242 cv
271.996 15.41 272.254 15.492 272.582 15.492 cv
272.855 15.492 273.105 15.422 273.34 15.281 cv
273.566 15.141 273.805 14.937 274.047 14.664 cv
cp
f
282.402 10.129 mo
282.402 10.32 282.395 10.473 282.387 10.59 cv
282.371 10.711 282.355 10.805 282.34 10.871 cv
282.316 10.941 282.289 10.988 282.258 11.012 cv
282.219 11.039 282.176 11.051 282.129 11.051 cv
282.082 11.051 282.035 11.043 281.988 11.023 cv
281.934 11.008 281.875 10.988 281.813 10.965 cv
281.742 10.945 281.672 10.926 281.598 10.906 cv
281.516 10.891 281.43 10.883 281.34 10.879 cv
281.227 10.883 281.117 10.902 281.012 10.945 cv
280.902 10.992 280.789 11.062 280.676 11.152 cv
280.555 11.246 280.434 11.371 280.309 11.523 cv
280.18 11.684 280.043 11.875 279.898 12.102 cv
279.898 16.434 li
279.895 16.488 279.879 16.531 279.852 16.57 cv
279.816 16.609 279.762 16.645 279.691 16.668 cv
279.613 16.695 279.516 16.711 279.391 16.727 cv
279.266 16.738 279.105 16.746 278.918 16.746 cv
278.723 16.746 278.566 16.738 278.441 16.727 cv
278.316 16.711 278.215 16.695 278.141 16.668 cv
278.063 16.645 278.008 16.609 277.98 16.57 cv
277.945 16.531 277.93 16.488 277.934 16.434 cv
277.934 9.48401 li
277.93 9.43701 277.945 9.39099 277.973 9.34802 cv
277.996 9.31201 278.043 9.28101 278.113 9.25 cv
278.18 9.22699 278.266 9.20697 278.375 9.19098 cv
278.48 9.18402 278.613 9.17603 278.777 9.172 cv
278.941 9.17603 279.078 9.18402 279.188 9.19098 cv
279.293 9.20697 279.379 9.22699 279.441 9.25 cv
279.5 9.28101 279.543 9.31201 279.57 9.34802 cv
279.594 9.39099 279.605 9.43701 279.609 9.48401 cv
279.609 10.348 li
279.789 10.09 279.961 9.87903 280.125 9.70697 cv
280.281 9.54303 280.438 9.40601 280.586 9.30499 cv
280.73 9.20697 280.875 9.14099 281.02 9.09802 cv
281.164 9.06201 281.309 9.04303 281.457 9.039 cv
281.523 9.04303 281.598 9.047 281.676 9.05103 cv
281.754 9.06201 281.832 9.07397 281.918 9.09003 cv
281.996 9.10901 282.07 9.12903 282.137 9.15198 cv
282.195 9.17603 282.242 9.203 282.273 9.22699 cv
282.301 9.258 282.32 9.28497 282.336 9.31201 cv
282.348 9.34802 282.359 9.39099 282.371 9.44098 cv
282.379 9.5 282.387 9.58197 282.395 9.68701 cv
282.398 9.797 282.402 9.94501 282.402 10.129 cv
cp
f
289.141 16.457 mo
289.137 16.535 289.109 16.59 289.063 16.629 cv
289.008 16.672 288.926 16.699 288.816 16.719 cv
288.699 16.734 288.535 16.746 288.32 16.746 cv
288.082 16.746 287.91 16.734 287.809 16.719 cv
287.699 16.699 287.625 16.672 287.586 16.629 cv
287.539 16.59 287.52 16.535 287.52 16.457 cv
287.52 15.906 li
287.23 16.215 286.902 16.453 286.539 16.621 cv
286.172 16.793 285.766 16.875 285.32 16.879 cv
284.949 16.875 284.609 16.828 284.301 16.734 cv
283.992 16.641 283.727 16.5 283.5 16.305 cv
283.273 16.117 283.098 15.883 282.973 15.602 cv
282.848 15.324 282.785 14.996 282.789 14.617 cv
282.785 14.219 282.863 13.867 283.023 13.562 cv
283.18 13.266 283.418 13.02 283.734 12.824 cv
284.047 12.633 284.438 12.488 284.906 12.391 cv
285.375 12.301 285.918 12.254 286.535 12.25 cv
287.215 12.25 li
287.215 11.828 li
287.215 11.613 287.191 11.422 287.148 11.258 cv
287.102 11.098 287.027 10.961 286.93 10.848 cv
286.824 10.742 286.691 10.66 286.523 10.605 cv
286.352 10.555 286.141 10.531 285.898 10.527 cv
285.566 10.531 285.273 10.566 285.02 10.637 cv
284.758 10.711 284.531 10.793 284.336 10.879 cv
284.137 10.973 283.973 11.051 283.844 11.121 cv
283.707 11.195 283.598 11.234 283.52 11.23 cv
283.457 11.234 283.406 11.215 283.367 11.176 cv
283.32 11.141 283.285 11.09 283.258 11.02 cv
283.227 10.957 283.203 10.871 283.191 10.77 cv
283.172 10.672 283.164 10.562 283.168 10.441 cv
283.164 10.281 283.18 10.156 283.207 10.059 cv
283.23 9.96899 283.277 9.883 283.355 9.80499 cv
283.426 9.72998 283.555 9.64801 283.738 9.55902 cv
283.918 9.46899 284.129 9.383 284.375 9.30499 cv
284.617 9.22699 284.887 9.164 285.176 9.11298 cv
285.465 9.06598 285.762 9.04303 286.07 9.039 cv
286.613 9.04303 287.078 9.09399 287.465 9.19897 cv
287.852 9.30902 288.172 9.47302 288.422 9.69098 cv
288.672 9.90997 288.852 10.195 288.969 10.543 cv
289.078 10.895 289.137 11.309 289.141 11.781 cv
cp
287.215 13.48 mo
286.465 13.48 li
286.148 13.484 285.879 13.508 285.656 13.551 cv
285.43 13.602 285.246 13.672 285.109 13.762 cv
284.965 13.859 284.863 13.973 284.801 14.102 cv
284.734 14.238 284.699 14.387 284.703 14.555 cv
284.699 14.848 284.793 15.078 284.98 15.242 cv
285.164 15.41 285.422 15.492 285.75 15.492 cv
286.023 15.492 286.273 15.422 286.508 15.281 cv
286.734 15.141 286.973 14.937 287.215 14.664 cv
cp
f
295.137 15.75 mo
295.137 15.977 295.121 16.152 295.094 16.273 cv
295.063 16.398 295.023 16.484 294.98 16.531 cv
294.93 16.582 294.863 16.625 294.773 16.664 cv
294.68 16.703 294.57 16.734 294.453 16.766 cv
294.328 16.789 294.195 16.812 294.055 16.832 cv
293.91 16.844 293.77 16.852 293.625 16.855 cv
293.234 16.852 292.895 16.801 292.609 16.707 cv
292.324 16.605 292.09 16.457 291.902 16.25 cv
291.715 16.047 291.574 15.789 291.488 15.477 cv
291.395 15.168 291.352 14.797 291.355 14.367 cv
291.355 10.809 li
290.523 10.809 li
290.422 10.812 290.348 10.75 290.297 10.625 cv
290.242 10.504 290.215 10.301 290.219 10.012 cv
290.215 9.86298 290.223 9.73401 290.238 9.633 cv
290.25 9.53101 290.27 9.44897 290.297 9.38702 cv
290.32 9.328 290.352 9.28497 290.395 9.258 cv
290.43 9.23401 290.477 9.22302 290.531 9.21899 cv
291.355 9.21899 li
291.355 7.66803 li
291.352 7.62097 291.367 7.57397 291.398 7.52698 cv
291.426 7.48798 291.477 7.453 291.555 7.422 cv
291.629 7.39801 291.73 7.375 291.859 7.35901 cv
291.984 7.34802 292.141 7.34399 292.332 7.34003 cv
292.52 7.34399 292.68 7.34802 292.809 7.35901 cv
292.934 7.375 293.035 7.39801 293.109 7.422 cv
293.18 7.453 293.23 7.48798 293.266 7.52698 cv
293.293 7.57397 293.309 7.62097 293.313 7.66803 cv
293.313 9.21899 li
294.824 9.21899 li
294.875 9.22302 294.922 9.23401 294.961 9.258 cv
295 9.28497 295.031 9.328 295.059 9.38702 cv
295.082 9.44897 295.102 9.53101 295.117 9.633 cv
295.129 9.73401 295.137 9.86298 295.137 10.012 cv
295.137 10.301 295.109 10.504 295.059 10.625 cv
295.004 10.75 294.93 10.812 294.832 10.809 cv
293.313 10.809 li
293.313 14.074 li
293.309 14.453 293.367 14.738 293.492 14.926 cv
293.609 15.117 293.824 15.211 294.129 15.211 cv
294.23 15.211 294.324 15.203 294.41 15.184 cv
294.492 15.168 294.566 15.148 294.633 15.121 cv
294.695 15.102 294.75 15.078 294.797 15.059 cv
294.84 15.043 294.879 15.035 294.918 15.031 cv
294.945 15.035 294.977 15.043 295.008 15.059 cv
295.035 15.078 295.055 15.117 295.074 15.168 cv
295.086 15.227 295.102 15.301 295.117 15.391 cv
295.129 15.488 295.137 15.605 295.137 15.75 cv
cp
f
298.523 16.434 mo
298.52 16.488 298.504 16.531 298.477 16.57 cv
298.441 16.609 298.387 16.645 298.316 16.668 cv
298.238 16.695 298.141 16.711 298.016 16.727 cv
297.891 16.738 297.73 16.746 297.543 16.746 cv
297.348 16.746 297.191 16.738 297.066 16.727 cv
296.941 16.711 296.84 16.695 296.766 16.668 cv
296.688 16.645 296.633 16.609 296.605 16.57 cv
296.57 16.531 296.555 16.488 296.559 16.434 cv
296.559 9.5 li
296.555 9.44897 296.57 9.40198 296.605 9.36298 cv
296.633 9.32397 296.688 9.29303 296.766 9.26202 cv
296.84 9.23798 296.941 9.21503 297.066 9.19501 cv
297.191 9.18402 297.348 9.17603 297.543 9.172 cv
297.73 9.17603 297.891 9.18402 298.016 9.19501 cv
298.141 9.21503 298.238 9.23798 298.316 9.26202 cv
298.387 9.29303 298.441 9.32397 298.477 9.36298 cv
298.504 9.40198 298.52 9.44897 298.523 9.5 cv
cp
298.672 7.12903 mo
298.672 7.52698 298.59 7.80103 298.43 7.94897 cv
298.266 8.10199 297.969 8.17603 297.535 8.172 cv
297.09 8.17603 296.789 8.10199 296.641 7.95697 cv
296.484 7.81201 296.41 7.55103 296.41 7.16803 cv
296.41 6.77301 296.488 6.5 296.648 6.34802 cv
296.805 6.19501 297.105 6.117 297.551 6.117 cv
297.984 6.117 298.281 6.19098 298.438 6.34003 cv
298.594 6.48798 298.672 6.75403 298.672 7.12903 cv
cp
f
307.516 12.887 mo
307.512 13.484 307.434 14.027 307.281 14.512 cv
307.121 15.004 306.887 15.422 306.57 15.773 cv
306.254 16.125 305.855 16.398 305.379 16.59 cv
304.898 16.781 304.34 16.875 303.703 16.879 cv
303.082 16.875 302.543 16.793 302.09 16.621 cv
301.629 16.453 301.25 16.203 300.953 15.875 cv
300.648 15.551 300.426 15.148 300.281 14.668 cv
300.137 14.191 300.066 13.645 300.066 13.027 cv
300.066 12.437 300.145 11.898 300.301 11.406 cv
300.457 10.918 300.695 10.496 301.016 10.145 cv
301.332 9.797 301.727 9.52301 302.203 9.328 cv
302.676 9.13702 303.234 9.04303 303.875 9.039 cv
304.5 9.04303 305.039 9.125 305.496 9.29303 cv
305.953 9.46503 306.332 9.71503 306.629 10.039 cv
306.926 10.367 307.148 10.77 307.297 11.246 cv
307.441 11.727 307.512 12.273 307.516 12.887 cv
cp
305.496 12.965 mo
305.492 12.629 305.465 12.312 305.414 12.02 cv
305.355 11.734 305.262 11.484 305.137 11.27 cv
305.004 11.059 304.832 10.891 304.621 10.77 cv
304.402 10.652 304.133 10.594 303.805 10.59 cv
303.516 10.594 303.262 10.648 303.043 10.75 cv
302.824 10.859 302.645 11.016 302.504 11.219 cv
302.363 11.426 302.258 11.672 302.188 11.957 cv
302.117 12.25 302.082 12.578 302.082 12.941 cv
302.082 13.289 302.109 13.605 302.168 13.891 cv
302.223 14.184 302.316 14.434 302.445 14.645 cv
302.57 14.859 302.742 15.023 302.965 15.137 cv
303.18 15.258 303.449 15.316 303.773 15.312 cv
304.066 15.316 304.324 15.262 304.547 15.152 cv
304.762 15.047 304.941 14.895 305.082 14.687 cv
305.223 14.488 305.324 14.242 305.395 13.953 cv
305.457 13.668 305.492 13.34 305.496 12.965 cv
cp
f
315.758 16.434 mo
315.754 16.488 315.738 16.531 315.711 16.57 cv
315.676 16.609 315.625 16.645 315.555 16.668 cv
315.48 16.695 315.379 16.711 315.254 16.727 cv
315.125 16.738 314.969 16.746 314.785 16.746 cv
314.59 16.746 314.43 16.738 314.305 16.727 cv
314.176 16.711 314.074 16.695 314.004 16.668 cv
313.926 16.645 313.875 16.609 313.848 16.57 cv
313.813 16.531 313.797 16.488 313.801 16.434 cv
313.801 12.469 li
313.797 12.133 313.773 11.867 313.727 11.672 cv
313.676 11.48 313.602 11.316 313.512 11.18 cv
313.418 11.043 313.301 10.937 313.152 10.859 cv
313.004 10.785 312.828 10.746 312.633 10.746 cv
312.379 10.746 312.129 10.84 311.875 11.02 cv
311.621 11.203 311.355 11.465 311.082 11.812 cv
311.082 16.434 li
311.078 16.488 311.063 16.531 311.035 16.57 cv
311 16.609 310.945 16.645 310.875 16.668 cv
310.797 16.695 310.699 16.711 310.574 16.727 cv
310.449 16.738 310.289 16.746 310.102 16.746 cv
309.906 16.746 309.75 16.738 309.625 16.727 cv
309.5 16.711 309.398 16.695 309.324 16.668 cv
309.246 16.645 309.191 16.609 309.164 16.57 cv
309.129 16.531 309.113 16.488 309.117 16.434 cv
309.117 9.48401 li
309.113 9.43701 309.129 9.39099 309.156 9.34802 cv
309.18 9.31201 309.227 9.28101 309.297 9.25 cv
309.363 9.22699 309.449 9.20697 309.559 9.19098 cv
309.664 9.18402 309.797 9.17603 309.961 9.172 cv
310.125 9.17603 310.262 9.18402 310.371 9.19098 cv
310.477 9.20697 310.563 9.22699 310.625 9.25 cv
310.684 9.28101 310.727 9.31201 310.754 9.34802 cv
310.777 9.39099 310.789 9.43701 310.793 9.48401 cv
310.793 10.285 li
311.176 9.875 311.566 9.56201 311.965 9.35199 cv
312.359 9.14502 312.777 9.04303 313.211 9.039 cv
313.68 9.04303 314.078 9.12097 314.406 9.27301 cv
314.73 9.43402 314.992 9.64502 315.191 9.90997 cv
315.391 10.18 315.535 10.492 315.625 10.848 cv
315.711 11.207 315.754 11.637 315.758 12.141 cv
cp
f
328.172 7.45697 mo
328.168 7.61298 328.16 7.742 328.152 7.84399 cv
328.137 7.953 328.117 8.039 328.094 8.10199 cv
328.063 8.16803 328.031 8.21503 327.996 8.242 cv
327.953 8.27698 327.91 8.29303 327.867 8.289 cv
325.344 8.289 li
325.344 16.418 li
325.344 16.473 325.324 16.52 325.293 16.559 cv
325.254 16.602 325.199 16.637 325.125 16.66 cv
325.043 16.687 324.938 16.707 324.809 16.723 cv
324.672 16.738 324.508 16.746 324.313 16.746 cv
324.117 16.746 323.953 16.738 323.82 16.723 cv
323.688 16.707 323.582 16.687 323.504 16.66 cv
323.426 16.637 323.367 16.602 323.336 16.559 cv
323.297 16.52 323.281 16.473 323.285 16.418 cv
323.285 8.289 li
320.762 8.289 li
320.707 8.29303 320.66 8.27698 320.629 8.242 cv
320.59 8.21503 320.559 8.16803 320.535 8.10199 cv
320.504 8.039 320.484 7.953 320.477 7.84399 cv
320.461 7.742 320.457 7.61298 320.457 7.45697 cv
320.457 7.30499 320.461 7.172 320.477 7.05902 cv
320.484 6.953 320.504 6.86298 320.535 6.797 cv
320.559 6.73401 320.59 6.68701 320.629 6.65601 cv
320.66 6.62903 320.707 6.617 320.762 6.61298 cv
327.867 6.61298 li
327.91 6.617 327.953 6.62903 327.996 6.65601 cv
328.031 6.68701 328.063 6.73401 328.094 6.797 cv
328.117 6.86298 328.137 6.953 328.152 7.05902 cv
328.16 7.172 328.168 7.30499 328.172 7.45697 cv
cp
f
331.211 16.434 mo
331.207 16.488 331.191 16.531 331.164 16.57 cv
331.129 16.609 331.074 16.645 331.004 16.668 cv
330.926 16.695 330.828 16.711 330.703 16.727 cv
330.578 16.738 330.418 16.746 330.23 16.746 cv
330.035 16.746 329.879 16.738 329.754 16.727 cv
329.629 16.711 329.527 16.695 329.453 16.668 cv
329.375 16.645 329.32 16.609 329.293 16.57 cv
329.258 16.531 329.242 16.488 329.246 16.434 cv
329.246 9.5 li
329.242 9.44897 329.258 9.40198 329.293 9.36298 cv
329.32 9.32397 329.375 9.29303 329.453 9.26202 cv
329.527 9.23798 329.629 9.21503 329.754 9.19501 cv
329.879 9.18402 330.035 9.17603 330.23 9.172 cv
330.418 9.17603 330.578 9.18402 330.703 9.19501 cv
330.828 9.21503 330.926 9.23798 331.004 9.26202 cv
331.074 9.29303 331.129 9.32397 331.164 9.36298 cv
331.191 9.40198 331.207 9.44897 331.211 9.5 cv
cp
331.359 7.12903 mo
331.359 7.52698 331.277 7.80103 331.117 7.94897 cv
330.953 8.10199 330.656 8.17603 330.223 8.172 cv
329.777 8.17603 329.477 8.10199 329.328 7.95697 cv
329.172 7.81201 329.098 7.55103 329.098 7.16803 cv
329.098 6.77301 329.176 6.5 329.336 6.34802 cv
329.492 6.19501 329.793 6.117 330.238 6.117 cv
330.672 6.117 330.969 6.19098 331.125 6.34003 cv
331.281 6.48798 331.359 6.75403 331.359 7.12903 cv
cp
f
344.262 16.434 mo
344.258 16.488 344.242 16.531 344.215 16.57 cv
344.18 16.609 344.129 16.645 344.059 16.668 cv
343.984 16.695 343.883 16.711 343.762 16.727 cv
343.637 16.738 343.48 16.746 343.289 16.746 cv
343.09 16.746 342.93 16.738 342.805 16.727 cv
342.68 16.711 342.578 16.695 342.504 16.668 cv
342.426 16.645 342.375 16.609 342.348 16.57 cv
342.32 16.531 342.305 16.488 342.309 16.434 cv
342.309 12.312 li
342.305 12.082 342.285 11.867 342.242 11.672 cv
342.195 11.48 342.125 11.316 342.039 11.18 cv
341.945 11.043 341.832 10.937 341.695 10.859 cv
341.555 10.785 341.391 10.746 341.199 10.746 cv
340.965 10.746 340.727 10.84 340.488 11.02 cv
340.25 11.203 339.992 11.465 339.711 11.812 cv
339.711 16.434 li
339.711 16.488 339.695 16.531 339.664 16.57 cv
339.633 16.609 339.578 16.645 339.504 16.668 cv
339.426 16.695 339.324 16.711 339.203 16.727 cv
339.078 16.738 338.926 16.746 338.738 16.746 cv
338.543 16.746 338.383 16.738 338.262 16.727 cv
338.133 16.711 338.031 16.695 337.961 16.668 cv
337.883 16.645 337.832 16.609 337.801 16.57 cv
337.77 16.531 337.754 16.488 337.754 16.434 cv
337.754 12.312 li
337.754 12.082 337.73 11.867 337.688 11.672 cv
337.645 11.48 337.578 11.316 337.492 11.18 cv
337.398 11.043 337.285 10.937 337.148 10.859 cv
337.004 10.785 336.84 10.746 336.656 10.746 cv
336.414 10.746 336.176 10.84 335.938 11.02 cv
335.699 11.203 335.441 11.465 335.168 11.812 cv
335.168 16.434 li
335.164 16.488 335.148 16.531 335.121 16.57 cv
335.086 16.609 335.031 16.645 334.961 16.668 cv
334.883 16.695 334.785 16.711 334.66 16.727 cv
334.535 16.738 334.375 16.746 334.188 16.746 cv
333.992 16.746 333.836 16.738 333.711 16.727 cv
333.586 16.711 333.484 16.695 333.41 16.668 cv
333.332 16.645 333.277 16.609 333.25 16.57 cv
333.215 16.531 333.199 16.488 333.203 16.434 cv
333.203 9.48401 li
333.199 9.43701 333.215 9.39099 333.242 9.34802 cv
333.266 9.31201 333.313 9.28101 333.383 9.25 cv
333.449 9.22699 333.535 9.20697 333.645 9.19098 cv
333.75 9.18402 333.883 9.17603 334.047 9.172 cv
334.211 9.17603 334.348 9.18402 334.457 9.19098 cv
334.563 9.20697 334.648 9.22699 334.711 9.25 cv
334.77 9.28101 334.813 9.31201 334.84 9.34802 cv
334.863 9.39099 334.875 9.43701 334.879 9.48401 cv
334.879 10.285 li
335.262 9.875 335.645 9.56201 336.027 9.35199 cv
336.406 9.14502 336.809 9.04303 337.227 9.039 cv
337.512 9.04303 337.766 9.07001 337.996 9.12903 cv
338.223 9.19098 338.43 9.27698 338.609 9.38702 cv
338.789 9.5 338.941 9.63702 339.07 9.789 cv
339.199 9.94501 339.309 10.117 339.398 10.309 cv
339.605 10.086 339.809 9.89502 340.012 9.73401 cv
340.207 9.57397 340.406 9.44098 340.602 9.34003 cv
340.797 9.23798 340.992 9.164 341.188 9.11298 cv
341.383 9.06598 341.582 9.04303 341.785 9.039 cv
342.246 9.04303 342.633 9.12097 342.953 9.27301 cv
343.266 9.43402 343.523 9.64502 343.719 9.90997 cv
343.914 10.18 344.051 10.492 344.137 10.848 cv
344.215 11.207 344.258 11.586 344.262 11.984 cv
cp
f
352.602 12.758 mo
352.598 12.996 352.547 13.172 352.441 13.285 cv
352.332 13.402 352.184 13.461 352.004 13.457 cv
347.77 13.457 li
347.766 13.758 347.801 14.027 347.875 14.266 cv
347.941 14.508 348.055 14.711 348.211 14.879 cv
348.363 15.051 348.559 15.18 348.801 15.266 cv
349.039 15.355 349.328 15.398 349.672 15.398 cv
350.012 15.398 350.313 15.375 350.574 15.324 cv
350.832 15.277 351.059 15.223 351.25 15.16 cv
351.438 15.102 351.594 15.047 351.723 14.996 cv
351.844 14.949 351.945 14.926 352.027 14.922 cv
352.07 14.926 352.109 14.934 352.145 14.949 cv
352.172 14.969 352.199 15 352.219 15.047 cv
352.238 15.094 352.25 15.16 352.262 15.246 cv
352.266 15.332 352.27 15.441 352.273 15.57 cv
352.27 15.687 352.27 15.785 352.266 15.863 cv
352.258 15.945 352.25 16.012 352.242 16.066 cv
352.23 16.125 352.215 16.176 352.195 16.211 cv
352.176 16.254 352.148 16.289 352.117 16.324 cv
352.082 16.363 351.988 16.414 351.84 16.473 cv
351.684 16.539 351.492 16.602 351.262 16.656 cv
351.023 16.719 350.754 16.766 350.457 16.812 cv
350.152 16.852 349.832 16.875 349.492 16.879 cv
348.871 16.875 348.328 16.801 347.867 16.645 cv
347.398 16.492 347.012 16.254 346.703 15.937 cv
346.387 15.621 346.152 15.223 346.004 14.738 cv
345.848 14.258 345.773 13.691 345.777 13.035 cv
345.773 12.422 345.852 11.863 346.016 11.367 cv
346.172 10.871 346.406 10.453 346.719 10.105 cv
347.023 9.76202 347.398 9.49597 347.836 9.31201 cv
348.273 9.133 348.766 9.04303 349.32 9.039 cv
349.898 9.04303 350.398 9.12903 350.813 9.297 cv
351.227 9.47302 351.563 9.711 351.828 10.012 cv
352.09 10.316 352.285 10.676 352.414 11.09 cv
352.535 11.508 352.598 11.957 352.602 12.445 cv
cp
350.699 12.195 mo
350.711 11.645 350.602 11.211 350.367 10.898 cv
350.133 10.586 349.766 10.43 349.273 10.426 cv
349.023 10.43 348.809 10.477 348.625 10.566 cv
348.438 10.664 348.285 10.789 348.164 10.945 cv
348.039 11.105 347.945 11.293 347.883 11.508 cv
347.816 11.723 347.777 11.953 347.77 12.195 cv
cp
f
359.102 14.469 mo
359.098 14.867 359.023 15.215 358.879 15.516 cv
358.73 15.816 358.523 16.07 358.254 16.27 cv
357.98 16.477 357.66 16.625 357.293 16.727 cv
356.926 16.824 356.523 16.875 356.094 16.879 cv
355.828 16.875 355.582 16.855 355.348 16.82 cv
355.113 16.777 354.902 16.73 354.715 16.672 cv
354.527 16.613 354.371 16.551 354.246 16.488 cv
354.121 16.426 354.027 16.367 353.973 16.312 cv
353.914 16.258 353.871 16.176 353.844 16.059 cv
353.809 15.945 353.793 15.77 353.797 15.539 cv
353.793 15.391 353.801 15.27 353.813 15.176 cv
353.82 15.086 353.836 15.016 353.859 14.957 cv
353.879 14.906 353.902 14.867 353.938 14.848 cv
353.965 14.832 354.004 14.824 354.051 14.82 cv
354.105 14.824 354.191 14.855 354.305 14.918 cv
354.414 14.984 354.551 15.059 354.723 15.133 cv
354.887 15.215 355.082 15.285 355.301 15.352 cv
355.52 15.422 355.77 15.457 356.055 15.453 cv
356.23 15.457 356.387 15.437 356.527 15.398 cv
356.66 15.363 356.781 15.312 356.887 15.242 cv
356.984 15.176 357.059 15.09 357.113 14.984 cv
357.16 14.883 357.188 14.762 357.191 14.625 cv
357.188 14.469 357.141 14.336 357.047 14.227 cv
356.953 14.117 356.824 14.02 356.668 13.934 cv
356.504 13.852 356.324 13.773 356.129 13.699 cv
355.926 13.629 355.723 13.551 355.512 13.457 cv
355.301 13.371 355.094 13.27 354.898 13.152 cv
354.695 13.043 354.516 12.902 354.359 12.734 cv
354.195 12.57 354.07 12.371 353.977 12.133 cv
353.883 11.902 353.836 11.621 353.836 11.289 cv
353.836 10.961 353.898 10.656 354.027 10.375 cv
354.156 10.102 354.344 9.86298 354.59 9.664 cv
354.832 9.46899 355.129 9.31598 355.48 9.203 cv
355.828 9.09802 356.223 9.04303 356.664 9.039 cv
356.879 9.04303 357.09 9.05902 357.297 9.086 cv
357.5 9.12097 357.688 9.15997 357.855 9.203 cv
358.02 9.25403 358.16 9.30499 358.277 9.35498 cv
358.391 9.414 358.473 9.461 358.523 9.49597 cv
358.57 9.539 358.605 9.578 358.629 9.61298 cv
358.648 9.65601 358.66 9.703 358.672 9.75403 cv
358.68 9.80902 358.691 9.875 358.699 9.953 cv
358.707 10.039 358.711 10.137 358.711 10.254 cv
358.711 10.395 358.707 10.512 358.699 10.598 cv
358.691 10.691 358.676 10.762 358.66 10.809 cv
358.641 10.863 358.617 10.898 358.59 10.914 cv
358.555 10.937 358.52 10.945 358.48 10.941 cv
358.43 10.945 358.355 10.918 358.262 10.859 cv
358.16 10.809 358.039 10.75 357.891 10.684 cv
357.742 10.625 357.57 10.566 357.375 10.508 cv
357.18 10.457 356.957 10.43 356.711 10.426 cv
356.531 10.43 356.379 10.449 356.25 10.48 cv
356.117 10.52 356.008 10.57 355.93 10.637 cv
355.844 10.707 355.781 10.785 355.742 10.875 cv
355.695 10.969 355.676 11.066 355.68 11.168 cv
355.676 11.328 355.727 11.465 355.828 11.57 cv
355.926 11.684 356.055 11.777 356.219 11.859 cv
356.379 11.945 356.563 12.023 356.77 12.094 cv
356.973 12.168 357.18 12.25 357.391 12.332 cv
357.598 12.422 357.805 12.52 358.016 12.633 cv
358.219 12.746 358.402 12.887 358.563 13.051 cv
358.723 13.219 358.852 13.418 358.953 13.648 cv
359.047 13.883 359.098 14.156 359.102 14.469 cv
cp
f
371.211 12.887 mo
371.207 13.484 371.129 14.027 370.977 14.512 cv
370.816 15.004 370.582 15.422 370.266 15.773 cv
369.949 16.125 369.551 16.398 369.074 16.59 cv
368.594 16.781 368.035 16.875 367.398 16.879 cv
366.777 16.875 366.238 16.793 365.785 16.621 cv
365.324 16.453 364.945 16.203 364.648 15.875 cv
364.344 15.551 364.121 15.148 363.977 14.668 cv
363.832 14.191 363.762 13.645 363.762 13.027 cv
363.762 12.437 363.84 11.898 363.996 11.406 cv
364.152 10.918 364.391 10.496 364.711 10.145 cv
365.027 9.797 365.422 9.52301 365.898 9.328 cv
366.371 9.13702 366.93 9.04303 367.57 9.039 cv
368.195 9.04303 368.734 9.125 369.191 9.29303 cv
369.648 9.46503 370.027 9.71503 370.324 10.039 cv
370.621 10.367 370.844 10.77 370.992 11.246 cv
371.137 11.727 371.207 12.273 371.211 12.887 cv
cp
369.191 12.965 mo
369.188 12.629 369.16 12.312 369.109 12.02 cv
369.051 11.734 368.957 11.484 368.832 11.27 cv
368.699 11.059 368.527 10.891 368.316 10.77 cv
368.098 10.652 367.828 10.594 367.5 10.59 cv
367.211 10.594 366.957 10.648 366.738 10.75 cv
366.52 10.859 366.34 11.016 366.199 11.219 cv
366.059 11.426 365.953 11.672 365.883 11.957 cv
365.813 12.25 365.777 12.578 365.777 12.941 cv
365.777 13.289 365.805 13.605 365.863 13.891 cv
365.918 14.184 366.012 14.434 366.141 14.645 cv
366.266 14.859 366.438 15.023 366.66 15.137 cv
366.875 15.258 367.145 15.316 367.469 15.312 cv
367.762 15.316 368.02 15.262 368.242 15.152 cv
368.457 15.047 368.637 14.895 368.777 14.687 cv
368.918 14.488 369.02 14.242 369.09 13.953 cv
369.152 13.668 369.188 13.34 369.191 12.965 cv
cp
f
376.961 6.83197 mo
376.957 6.98401 376.953 7.10498 376.945 7.19501 cv
376.934 7.289 376.918 7.35901 376.898 7.40601 cv
376.875 7.45697 376.852 7.492 376.828 7.508 cv
376.801 7.52698 376.773 7.53497 376.742 7.53497 cv
376.703 7.53497 376.66 7.52698 376.621 7.508 cv
376.574 7.492 376.52 7.47302 376.457 7.44897 cv
376.387 7.42999 376.313 7.40997 376.227 7.39099 cv
376.137 7.375 376.031 7.367 375.914 7.36298 cv
375.77 7.367 375.648 7.38702 375.551 7.42999 cv
375.449 7.47699 375.367 7.547 375.301 7.64099 cv
375.23 7.73798 375.18 7.86298 375.152 8.01599 cv
375.117 8.16803 375.102 8.35498 375.105 8.578 cv
375.105 9.21899 li
376.375 9.21899 li
376.418 9.22302 376.461 9.23401 376.504 9.258 cv
376.539 9.28497 376.574 9.328 376.602 9.38702 cv
376.625 9.44897 376.645 9.53101 376.66 9.633 cv
376.672 9.73401 376.676 9.86298 376.68 10.012 cv
376.676 10.301 376.652 10.504 376.602 10.625 cv
376.547 10.75 376.469 10.812 376.375 10.809 cv
375.105 10.809 li
375.105 16.434 li
375.102 16.488 375.086 16.531 375.059 16.57 cv
375.023 16.609 374.973 16.645 374.902 16.668 cv
374.828 16.695 374.727 16.711 374.598 16.727 cv
374.465 16.738 374.305 16.746 374.121 16.746 cv
373.934 16.746 373.777 16.738 373.652 16.727 cv
373.523 16.711 373.422 16.695 373.348 16.668 cv
373.27 16.645 373.219 16.609 373.191 16.57 cv
373.16 16.531 373.145 16.488 373.148 16.434 cv
373.148 10.809 li
372.277 10.809 li
372.176 10.812 372.102 10.75 372.055 10.625 cv
372.004 10.504 371.977 10.301 371.98 10.012 cv
371.977 9.86298 371.984 9.73401 372 9.633 cv
372.012 9.53101 372.031 9.44897 372.055 9.38702 cv
372.078 9.328 372.109 9.28497 372.148 9.258 cv
372.188 9.23401 372.23 9.22302 372.285 9.21899 cv
373.148 9.21899 li
373.148 8.633 li
373.145 8.164 373.191 7.75 373.289 7.39099 cv
373.379 7.03497 373.527 6.73798 373.73 6.50403 cv
373.93 6.27002 374.184 6.09399 374.492 5.96899 cv
374.801 5.85199 375.164 5.789 375.59 5.789 cv
375.785 5.789 375.977 5.80902 376.164 5.84003 cv
376.344 5.87903 376.488 5.914 376.594 5.94897 cv
376.695 5.992 376.766 6.02698 376.805 6.05902 cv
376.84 6.09399 376.871 6.14502 376.895 6.20697 cv
376.918 6.27301 376.934 6.35498 376.945 6.45697 cv
376.953 6.55902 376.957 6.68402 376.961 6.83197 cv
cp
f
387.512 13.676 mo
387.508 14.207 387.41 14.672 387.215 15.07 cv
387.016 15.473 386.75 15.809 386.414 16.074 cv
386.074 16.344 385.676 16.543 385.227 16.676 cv
384.773 16.809 384.293 16.875 383.781 16.879 cv
383.43 16.875 383.105 16.848 382.809 16.793 cv
382.508 16.734 382.246 16.668 382.02 16.586 cv
381.789 16.508 381.598 16.422 381.445 16.332 cv
381.293 16.246 381.184 16.168 381.117 16.098 cv
381.047 16.031 380.996 15.934 380.973 15.809 cv
380.941 15.684 380.93 15.5 380.93 15.258 cv
380.93 15.098 380.934 14.965 380.945 14.852 cv
380.953 14.746 380.969 14.656 380.996 14.586 cv
381.016 14.52 381.047 14.473 381.09 14.441 cv
381.125 14.418 381.172 14.402 381.223 14.398 cv
381.293 14.402 381.395 14.445 381.531 14.527 cv
381.66 14.617 381.832 14.711 382.043 14.812 cv
382.25 14.918 382.496 15.016 382.785 15.098 cv
383.07 15.187 383.406 15.23 383.789 15.227 cv
384.039 15.23 384.262 15.199 384.457 15.137 cv
384.652 15.078 384.82 14.992 384.961 14.883 cv
385.098 14.773 385.203 14.641 385.277 14.48 cv
385.348 14.32 385.383 14.141 385.387 13.941 cv
385.383 13.715 385.32 13.52 385.199 13.352 cv
385.07 13.191 384.906 13.047 384.711 12.918 cv
384.508 12.793 384.281 12.672 384.027 12.559 cv
383.773 12.449 383.512 12.332 383.242 12.203 cv
382.969 12.082 382.707 11.937 382.453 11.777 cv
382.199 11.621 381.973 11.434 381.773 11.211 cv
381.57 10.992 381.406 10.73 381.285 10.426 cv
381.16 10.125 381.098 9.76599 381.102 9.34399 cv
381.098 8.86298 381.188 8.43701 381.367 8.07001 cv
381.543 7.70697 381.785 7.40198 382.094 7.15601 cv
382.395 6.91803 382.754 6.73798 383.168 6.617 cv
383.582 6.5 384.02 6.44098 384.48 6.43701 cv
384.719 6.44098 384.957 6.45697 385.199 6.492 cv
385.438 6.53101 385.66 6.58197 385.867 6.64099 cv
386.074 6.703 386.258 6.77301 386.422 6.84802 cv
386.578 6.92999 386.688 6.992 386.742 7.04303 cv
386.793 7.09802 386.828 7.14502 386.848 7.17603 cv
386.863 7.21503 386.879 7.26202 386.895 7.32001 cv
386.906 7.383 386.914 7.45697 386.922 7.547 cv
386.926 7.64099 386.93 7.75403 386.93 7.88702 cv
386.93 8.039 386.926 8.16803 386.918 8.27002 cv
386.91 8.375 386.895 8.461 386.879 8.52301 cv
386.855 8.59399 386.832 8.64099 386.801 8.672 cv
386.766 8.703 386.719 8.71899 386.664 8.71899 cv
386.605 8.71899 386.516 8.68402 386.391 8.60901 cv
386.266 8.539 386.109 8.461 385.93 8.37097 cv
385.746 8.289 385.539 8.211 385.301 8.14099 cv
385.059 8.07397 384.793 8.039 384.512 8.03497 cv
384.285 8.039 384.094 8.06598 383.93 8.117 cv
383.762 8.172 383.621 8.24597 383.512 8.34003 cv
383.398 8.43701 383.316 8.55499 383.262 8.68701 cv
383.207 8.828 383.18 8.96899 383.18 9.117 cv
383.18 9.34399 383.238 9.539 383.363 9.69897 cv
383.48 9.86298 383.645 10.008 383.855 10.133 cv
384.059 10.262 384.293 10.383 384.551 10.492 cv
384.809 10.609 385.074 10.727 385.348 10.848 cv
385.617 10.977 385.879 11.117 386.141 11.273 cv
386.398 11.43 386.633 11.621 386.836 11.84 cv
387.039 12.066 387.199 12.324 387.324 12.621 cv
387.445 12.918 387.508 13.27 387.512 13.676 cv
cp
f
395.559 16.434 mo
395.555 16.488 395.543 16.531 395.52 16.57 cv
395.492 16.609 395.445 16.645 395.383 16.668 cv
395.316 16.695 395.23 16.711 395.125 16.727 cv
395.02 16.738 394.887 16.746 394.727 16.746 cv
394.551 16.746 394.41 16.738 394.309 16.727 cv
394.199 16.711 394.117 16.695 394.055 16.668 cv
393.992 16.645 393.945 16.609 393.922 16.57 cv
393.891 16.531 393.879 16.488 393.883 16.434 cv
393.883 15.633 li
393.496 16.047 393.105 16.359 392.711 16.566 cv
392.309 16.773 391.898 16.875 391.477 16.879 cv
390.996 16.875 390.594 16.801 390.27 16.645 cv
389.945 16.492 389.684 16.277 389.484 16.008 cv
389.281 15.738 389.137 15.426 389.055 15.066 cv
388.965 14.711 388.922 14.27 388.926 13.738 cv
388.926 9.48401 li
388.922 9.43701 388.938 9.39099 388.969 9.34802 cv
388.996 9.31201 389.047 9.28101 389.125 9.25 cv
389.199 9.22699 389.301 9.20697 389.43 9.19098 cv
389.555 9.18402 389.711 9.17603 389.902 9.172 cv
390.09 9.17603 390.25 9.18402 390.375 9.19098 cv
390.5 9.20697 390.598 9.22699 390.676 9.25 cv
390.746 9.28101 390.801 9.31201 390.836 9.34802 cv
390.863 9.39099 390.879 9.43701 390.883 9.48401 cv
390.883 13.41 li
390.879 13.777 390.902 14.055 390.953 14.246 cv
390.996 14.437 391.066 14.602 391.168 14.738 cv
391.262 14.879 391.387 14.984 391.535 15.059 cv
391.684 15.137 391.855 15.176 392.051 15.172 cv
392.301 15.176 392.551 15.086 392.805 14.898 cv
393.055 14.719 393.324 14.453 393.609 14.105 cv
393.609 9.48401 li
393.609 9.43701 393.621 9.39099 393.652 9.34802 cv
393.676 9.31201 393.73 9.28101 393.809 9.25 cv
393.883 9.22699 393.98 9.20697 394.109 9.19098 cv
394.23 9.18402 394.391 9.17603 394.586 9.172 cv
394.777 9.17603 394.934 9.18402 395.059 9.19098 cv
395.18 9.20697 395.281 9.22699 395.355 9.25 cv
395.426 9.28101 395.477 9.31201 395.512 9.34802 cv
395.539 9.39099 395.555 9.43701 395.559 9.48401 cv
cp
f
404.535 12.863 mo
404.535 13.484 404.465 14.043 404.332 14.535 cv
404.191 15.031 403.996 15.449 403.746 15.797 cv
403.488 16.145 403.176 16.414 402.809 16.598 cv
402.434 16.785 402.012 16.875 401.543 16.879 cv
401.305 16.875 401.086 16.852 400.887 16.812 cv
400.68 16.766 400.488 16.699 400.305 16.598 cv
400.121 16.504 399.938 16.379 399.762 16.223 cv
399.578 16.074 399.395 15.891 399.211 15.68 cv
399.211 16.434 li
399.207 16.496 399.195 16.543 399.168 16.578 cv
399.137 16.621 399.09 16.652 399.027 16.676 cv
398.961 16.699 398.871 16.715 398.766 16.73 cv
398.656 16.738 398.527 16.746 398.371 16.746 cv
398.207 16.746 398.07 16.738 397.969 16.73 cv
397.859 16.715 397.773 16.699 397.711 16.676 cv
397.641 16.652 397.598 16.621 397.574 16.578 cv
397.547 16.543 397.531 16.496 397.535 16.434 cv
397.535 6.18701 li
397.531 6.13702 397.547 6.09003 397.582 6.047 cv
397.609 6.008 397.664 5.97302 397.742 5.94098 cv
397.816 5.914 397.918 5.89502 398.043 5.875 cv
398.168 5.86298 398.324 5.85498 398.52 5.85199 cv
398.707 5.85498 398.867 5.86298 398.992 5.875 cv
399.117 5.89502 399.215 5.914 399.293 5.94098 cv
399.363 5.97302 399.418 6.008 399.453 6.047 cv
399.48 6.09003 399.496 6.13702 399.5 6.18701 cv
399.5 10.027 li
399.676 9.85199 399.852 9.703 400.031 9.578 cv
400.203 9.45697 400.379 9.35199 400.559 9.27002 cv
400.73 9.19098 400.914 9.133 401.105 9.09399 cv
401.289 9.05902 401.488 9.04303 401.699 9.039 cv
402.211 9.04303 402.645 9.14502 403.008 9.34802 cv
403.363 9.55499 403.656 9.83197 403.883 10.18 cv
404.105 10.527 404.27 10.934 404.379 11.398 cv
404.48 11.863 404.535 12.352 404.535 12.863 cv
cp
402.5 13.004 mo
402.496 12.711 402.473 12.426 402.434 12.148 cv
402.387 11.875 402.313 11.633 402.203 11.418 cv
402.094 11.207 401.949 11.035 401.777 10.906 cv
401.602 10.781 401.383 10.719 401.121 10.715 cv
400.988 10.719 400.863 10.734 400.738 10.77 cv
400.613 10.809 400.484 10.871 400.352 10.957 cv
400.219 11.047 400.082 11.164 399.945 11.301 cv
399.801 11.441 399.652 11.613 399.5 11.82 cv
399.5 14.129 li
399.773 14.484 400.035 14.754 400.289 14.934 cv
400.539 15.121 400.805 15.211 401.082 15.211 cv
401.336 15.211 401.551 15.148 401.73 15.016 cv
401.902 14.891 402.051 14.723 402.168 14.512 cv
402.285 14.309 402.367 14.07 402.422 13.801 cv
402.469 13.539 402.496 13.273 402.5 13.004 cv
cp
f
409.566 12.781 mo
409.563 13.082 409.535 13.293 409.48 13.41 cv
409.422 13.535 409.332 13.594 409.207 13.59 cv
405.965 13.59 li
405.836 13.594 405.742 13.531 405.688 13.406 cv
405.625 13.285 405.598 13.078 405.602 12.781 cv
405.598 12.492 405.625 12.285 405.688 12.164 cv
405.742 12.047 405.836 11.988 405.965 11.984 cv
409.207 11.984 li
409.27 11.988 409.32 12 409.367 12.023 cv
409.406 12.051 409.445 12.098 409.48 12.156 cv
409.508 12.223 409.531 12.305 409.547 12.406 cv
409.559 12.512 409.563 12.637 409.566 12.781 cv
cp
f
413.215 16.418 mo
413.211 16.473 413.195 16.52 413.164 16.559 cv
413.129 16.602 413.07 16.637 412.996 16.66 cv
412.914 16.687 412.813 16.707 412.684 16.723 cv
412.551 16.738 412.383 16.746 412.188 16.746 cv
411.984 16.746 411.82 16.738 411.691 16.723 cv
411.555 16.707 411.449 16.687 411.375 16.66 cv
411.293 16.637 411.238 16.602 411.207 16.559 cv
411.172 16.52 411.152 16.473 411.156 16.418 cv
411.156 6.89502 li
411.152 6.84802 411.172 6.80103 411.207 6.75403 cv
411.238 6.71503 411.293 6.67999 411.379 6.65198 cv
411.457 6.62903 411.563 6.60901 411.695 6.59003 cv
411.82 6.578 411.984 6.57001 412.188 6.56598 cv
412.383 6.57001 412.551 6.578 412.684 6.59003 cv
412.813 6.60901 412.914 6.62903 412.996 6.65198 cv
413.07 6.67999 413.129 6.71503 413.164 6.75403 cv
413.195 6.80103 413.211 6.84802 413.215 6.89502 cv
cp
f
426.297 16.434 mo
426.293 16.488 426.277 16.531 426.25 16.57 cv
426.215 16.609 426.164 16.645 426.094 16.668 cv
426.02 16.695 425.918 16.711 425.797 16.727 cv
425.672 16.738 425.516 16.746 425.324 16.746 cv
425.125 16.746 424.965 16.738 424.84 16.727 cv
424.715 16.711 424.613 16.695 424.539 16.668 cv
424.461 16.645 424.41 16.609 424.383 16.57 cv
424.355 16.531 424.34 16.488 424.344 16.434 cv
424.344 12.312 li
424.34 12.082 424.32 11.867 424.277 11.672 cv
424.23 11.48 424.16 11.316 424.074 11.18 cv
423.98 11.043 423.867 10.937 423.73 10.859 cv
423.59 10.785 423.426 10.746 423.234 10.746 cv
423 10.746 422.762 10.84 422.523 11.02 cv
422.285 11.203 422.027 11.465 421.746 11.812 cv
421.746 16.434 li
421.746 16.488 421.73 16.531 421.699 16.57 cv
421.668 16.609 421.613 16.645 421.539 16.668 cv
421.461 16.695 421.359 16.711 421.238 16.727 cv
421.113 16.738 420.961 16.746 420.773 16.746 cv
420.578 16.746 420.418 16.738 420.297 16.727 cv
420.168 16.711 420.066 16.695 419.996 16.668 cv
419.918 16.645 419.867 16.609 419.836 16.57 cv
419.805 16.531 419.789 16.488 419.789 16.434 cv
419.789 12.312 li
419.789 12.082 419.766 11.867 419.723 11.672 cv
419.68 11.48 419.613 11.316 419.527 11.18 cv
419.434 11.043 419.32 10.937 419.184 10.859 cv
419.039 10.785 418.875 10.746 418.691 10.746 cv
418.449 10.746 418.211 10.84 417.973 11.02 cv
417.734 11.203 417.477 11.465 417.203 11.812 cv
417.203 16.434 li
417.199 16.488 417.184 16.531 417.156 16.57 cv
417.121 16.609 417.066 16.645 416.996 16.668 cv
416.918 16.695 416.82 16.711 416.695 16.727 cv
416.57 16.738 416.41 16.746 416.223 16.746 cv
416.027 16.746 415.871 16.738 415.746 16.727 cv
415.621 16.711 415.52 16.695 415.445 16.668 cv
415.367 16.645 415.313 16.609 415.285 16.57 cv
415.25 16.531 415.234 16.488 415.238 16.434 cv
415.238 9.48401 li
415.234 9.43701 415.25 9.39099 415.277 9.34802 cv
415.301 9.31201 415.348 9.28101 415.418 9.25 cv
415.484 9.22699 415.57 9.20697 415.68 9.19098 cv
415.785 9.18402 415.918 9.17603 416.082 9.172 cv
416.246 9.17603 416.383 9.18402 416.492 9.19098 cv
416.598 9.20697 416.684 9.22699 416.746 9.25 cv
416.805 9.28101 416.848 9.31201 416.875 9.34802 cv
416.898 9.39099 416.91 9.43701 416.914 9.48401 cv
416.914 10.285 li
417.297 9.875 417.68 9.56201 418.063 9.35199 cv
418.441 9.14502 418.844 9.04303 419.262 9.039 cv
419.547 9.04303 419.801 9.07001 420.031 9.12903 cv
420.258 9.19098 420.465 9.27698 420.645 9.38702 cv
420.824 9.5 420.977 9.63702 421.105 9.789 cv
421.234 9.94501 421.344 10.117 421.434 10.309 cv
421.641 10.086 421.844 9.89502 422.047 9.73401 cv
422.242 9.57397 422.441 9.44098 422.637 9.34003 cv
422.832 9.23798 423.027 9.164 423.223 9.11298 cv
423.418 9.06598 423.617 9.04303 423.82 9.039 cv
424.281 9.04303 424.668 9.12097 424.988 9.27301 cv
425.301 9.43402 425.559 9.64502 425.754 9.90997 cv
425.949 10.18 426.086 10.492 426.172 10.848 cv
426.25 11.207 426.293 11.586 426.297 11.984 cv
cp
f
434.141 16.457 mo
434.137 16.535 434.109 16.59 434.063 16.629 cv
434.008 16.672 433.926 16.699 433.816 16.719 cv
433.699 16.734 433.535 16.746 433.32 16.746 cv
433.082 16.746 432.91 16.734 432.809 16.719 cv
432.699 16.699 432.625 16.672 432.586 16.629 cv
432.539 16.59 432.52 16.535 432.52 16.457 cv
432.52 15.906 li
432.23 16.215 431.902 16.453 431.539 16.621 cv
431.172 16.793 430.766 16.875 430.32 16.879 cv
429.949 16.875 429.609 16.828 429.301 16.734 cv
428.992 16.641 428.727 16.5 428.5 16.305 cv
428.273 16.117 428.098 15.883 427.973 15.602 cv
427.848 15.324 427.785 14.996 427.789 14.617 cv
427.785 14.219 427.863 13.867 428.023 13.562 cv
428.18 13.266 428.418 13.02 428.734 12.824 cv
429.047 12.633 429.438 12.488 429.906 12.391 cv
430.375 12.301 430.918 12.254 431.535 12.25 cv
432.215 12.25 li
432.215 11.828 li
432.215 11.613 432.191 11.422 432.148 11.258 cv
432.102 11.098 432.027 10.961 431.93 10.848 cv
431.824 10.742 431.691 10.66 431.523 10.605 cv
431.352 10.555 431.141 10.531 430.898 10.527 cv
430.566 10.531 430.273 10.566 430.02 10.637 cv
429.758 10.711 429.531 10.793 429.336 10.879 cv
429.137 10.973 428.973 11.051 428.844 11.121 cv
428.707 11.195 428.598 11.234 428.52 11.23 cv
428.457 11.234 428.406 11.215 428.367 11.176 cv
428.32 11.141 428.285 11.09 428.258 11.02 cv
428.227 10.957 428.203 10.871 428.191 10.77 cv
428.172 10.672 428.164 10.562 428.168 10.441 cv
428.164 10.281 428.18 10.156 428.207 10.059 cv
428.23 9.96899 428.277 9.883 428.355 9.80499 cv
428.426 9.72998 428.555 9.64801 428.738 9.55902 cv
428.918 9.46899 429.129 9.383 429.375 9.30499 cv
429.617 9.22699 429.887 9.164 430.176 9.11298 cv
430.465 9.06598 430.762 9.04303 431.07 9.039 cv
431.613 9.04303 432.078 9.09399 432.465 9.19897 cv
432.852 9.30902 433.172 9.47302 433.422 9.69098 cv
433.672 9.90997 433.852 10.195 433.969 10.543 cv
434.078 10.895 434.137 11.309 434.141 11.781 cv
cp
432.215 13.48 mo
431.465 13.48 li
431.148 13.484 430.879 13.508 430.656 13.551 cv
430.43 13.602 430.246 13.672 430.109 13.762 cv
429.965 13.859 429.863 13.973 429.801 14.102 cv
429.734 14.238 429.699 14.387 429.703 14.555 cv
429.699 14.848 429.793 15.078 429.98 15.242 cv
430.164 15.41 430.422 15.492 430.75 15.492 cv
431.023 15.492 431.273 15.422 431.508 15.281 cv
431.734 15.141 431.973 14.937 432.215 14.664 cv
cp
f
442.363 9.96503 mo
442.359 10.219 442.332 10.402 442.277 10.52 cv
442.219 10.641 442.148 10.699 442.07 10.699 cv
441.25 10.699 li
441.363 10.824 441.445 10.969 441.496 11.125 cv
441.543 11.285 441.566 11.449 441.57 11.617 cv
441.566 12.027 441.5 12.387 441.367 12.699 cv
441.23 13.016 441.035 13.281 440.785 13.492 cv
440.531 13.711 440.23 13.875 439.875 13.984 cv
439.516 14.102 439.117 14.156 438.688 14.152 cv
438.461 14.156 438.25 14.129 438.047 14.07 cv
437.844 14.02 437.688 13.957 437.578 13.879 cv
437.516 13.949 437.457 14.027 437.41 14.121 cv
437.359 14.215 437.336 14.32 437.34 14.43 cv
437.336 14.586 437.402 14.707 437.535 14.801 cv
437.664 14.898 437.852 14.953 438.094 14.961 cv
439.785 15.023 li
440.18 15.039 440.531 15.098 440.84 15.191 cv
441.148 15.293 441.41 15.426 441.621 15.598 cv
441.832 15.773 441.992 15.984 442.102 16.227 cv
442.211 16.473 442.266 16.746 442.27 17.059 cv
442.266 17.395 442.191 17.719 442.043 18.027 cv
441.895 18.328 441.668 18.59 441.367 18.816 cv
441.063 19.035 440.684 19.215 440.23 19.348 cv
439.773 19.477 439.242 19.539 438.641 19.543 cv
438.043 19.539 437.539 19.492 437.121 19.402 cv
436.703 19.305 436.359 19.176 436.094 19.012 cv
435.824 18.844 435.629 18.645 435.512 18.418 cv
435.387 18.184 435.328 17.93 435.328 17.656 cv
435.328 17.484 435.348 17.324 435.395 17.168 cv
435.434 17.012 435.5 16.859 435.59 16.719 cv
435.672 16.574 435.777 16.441 435.902 16.309 cv
436.027 16.18 436.168 16.055 436.332 15.934 cv
436.105 15.82 435.934 15.66 435.813 15.449 cv
435.691 15.246 435.633 15.02 435.633 14.773 cv
435.633 14.473 435.699 14.195 435.84 13.937 cv
435.977 13.687 436.16 13.457 436.387 13.254 cv
436.203 13.074 436.059 12.859 435.949 12.602 cv
435.84 12.352 435.785 12.031 435.789 11.648 cv
435.785 11.246 435.855 10.887 436 10.562 cv
436.141 10.246 436.34 9.97699 436.598 9.75403 cv
436.852 9.53497 437.156 9.36298 437.508 9.24597 cv
437.859 9.12903 438.25 9.07001 438.68 9.07001 cv
438.898 9.07001 439.105 9.086 439.305 9.10901 cv
439.504 9.14099 439.691 9.17603 439.863 9.21899 cv
442.07 9.21899 li
442.152 9.22302 442.223 9.28101 442.281 9.39099 cv
442.332 9.508 442.359 9.69897 442.363 9.96503 cv
cp
439.848 11.609 mo
439.844 11.238 439.742 10.949 439.535 10.738 cv
439.324 10.535 439.031 10.43 438.656 10.426 cv
438.461 10.43 438.289 10.461 438.148 10.523 cv
438 10.59 437.879 10.68 437.785 10.789 cv
437.684 10.902 437.613 11.031 437.57 11.18 cv
437.52 11.328 437.496 11.484 437.5 11.641 cv
437.496 12 437.602 12.277 437.813 12.48 cv
438.02 12.687 438.309 12.793 438.68 12.789 cv
438.875 12.793 439.043 12.762 439.191 12.695 cv
439.332 12.637 439.453 12.551 439.555 12.437 cv
439.648 12.332 439.723 12.203 439.773 12.059 cv
439.82 11.918 439.844 11.77 439.848 11.609 cv
cp
440.309 17.16 mo
440.309 16.922 440.215 16.746 440.027 16.621 cv
439.84 16.5 439.582 16.43 439.254 16.418 cv
437.859 16.379 li
437.723 16.48 437.613 16.574 437.535 16.664 cv
437.453 16.754 437.391 16.84 437.344 16.926 cv
437.293 17.008 437.258 17.09 437.246 17.168 cv
437.227 17.246 437.219 17.324 437.223 17.41 cv
437.219 17.664 437.352 17.863 437.613 18 cv
437.875 18.133 438.246 18.199 438.727 18.203 cv
439.02 18.199 439.266 18.168 439.473 18.113 cv
439.672 18.051 439.836 17.973 439.965 17.875 cv
440.086 17.773 440.176 17.664 440.23 17.543 cv
440.281 17.422 440.309 17.293 440.309 17.16 cv
cp
f
449.973 12.758 mo
449.969 12.996 449.918 13.172 449.813 13.285 cv
449.703 13.402 449.555 13.461 449.375 13.457 cv
445.141 13.457 li
445.137 13.758 445.172 14.027 445.246 14.266 cv
445.313 14.508 445.426 14.711 445.582 14.879 cv
445.734 15.051 445.93 15.18 446.172 15.266 cv
446.41 15.355 446.699 15.398 447.043 15.398 cv
447.383 15.398 447.684 15.375 447.945 15.324 cv
448.203 15.277 448.43 15.223 448.621 15.16 cv
448.809 15.102 448.965 15.047 449.094 14.996 cv
449.215 14.949 449.316 14.926 449.398 14.922 cv
449.441 14.926 449.48 14.934 449.516 14.949 cv
449.543 14.969 449.57 15 449.59 15.047 cv
449.609 15.094 449.621 15.16 449.633 15.246 cv
449.637 15.332 449.641 15.441 449.645 15.57 cv
449.641 15.687 449.641 15.785 449.637 15.863 cv
449.629 15.945 449.621 16.012 449.613 16.066 cv
449.602 16.125 449.586 16.176 449.566 16.211 cv
449.547 16.254 449.52 16.289 449.488 16.324 cv
449.453 16.363 449.359 16.414 449.211 16.473 cv
449.055 16.539 448.863 16.602 448.633 16.656 cv
448.395 16.719 448.125 16.766 447.828 16.812 cv
447.523 16.852 447.203 16.875 446.863 16.879 cv
446.242 16.875 445.699 16.801 445.238 16.645 cv
444.77 16.492 444.383 16.254 444.074 15.937 cv
443.758 15.621 443.523 15.223 443.375 14.738 cv
443.219 14.258 443.145 13.691 443.148 13.035 cv
443.145 12.422 443.223 11.863 443.387 11.367 cv
443.543 10.871 443.777 10.453 444.09 10.105 cv
444.395 9.76202 444.77 9.49597 445.207 9.31201 cv
445.645 9.133 446.137 9.04303 446.691 9.039 cv
447.27 9.04303 447.77 9.12903 448.184 9.297 cv
448.598 9.47302 448.934 9.711 449.199 10.012 cv
449.461 10.316 449.656 10.676 449.785 11.09 cv
449.906 11.508 449.969 11.957 449.973 12.445 cv
cp
448.07 12.195 mo
448.082 11.645 447.973 11.211 447.738 10.898 cv
447.504 10.586 447.137 10.43 446.645 10.426 cv
446.395 10.43 446.18 10.477 445.996 10.566 cv
445.809 10.664 445.656 10.789 445.535 10.945 cv
445.41 11.105 445.316 11.293 445.254 11.508 cv
445.188 11.723 445.148 11.953 445.141 12.195 cv
cp
f
456.473 14.469 mo
456.469 14.867 456.395 15.215 456.25 15.516 cv
456.102 15.816 455.895 16.07 455.625 16.27 cv
455.352 16.477 455.031 16.625 454.664 16.727 cv
454.297 16.824 453.895 16.875 453.465 16.879 cv
453.199 16.875 452.953 16.855 452.719 16.82 cv
452.484 16.777 452.273 16.73 452.086 16.672 cv
451.898 16.613 451.742 16.551 451.617 16.488 cv
451.492 16.426 451.398 16.367 451.344 16.312 cv
451.285 16.258 451.242 16.176 451.215 16.059 cv
451.18 15.945 451.164 15.77 451.168 15.539 cv
451.164 15.391 451.172 15.27 451.184 15.176 cv
451.191 15.086 451.207 15.016 451.23 14.957 cv
451.25 14.906 451.273 14.867 451.309 14.848 cv
451.336 14.832 451.375 14.824 451.422 14.82 cv
451.477 14.824 451.563 14.855 451.676 14.918 cv
451.785 14.984 451.922 15.059 452.094 15.133 cv
452.258 15.215 452.453 15.285 452.672 15.352 cv
452.891 15.422 453.141 15.457 453.426 15.453 cv
453.602 15.457 453.758 15.437 453.898 15.398 cv
454.031 15.363 454.152 15.312 454.258 15.242 cv
454.355 15.176 454.43 15.09 454.484 14.984 cv
454.531 14.883 454.559 14.762 454.563 14.625 cv
454.559 14.469 454.512 14.336 454.418 14.227 cv
454.324 14.117 454.195 14.02 454.039 13.934 cv
453.875 13.852 453.695 13.773 453.5 13.699 cv
453.297 13.629 453.094 13.551 452.883 13.457 cv
452.672 13.371 452.465 13.27 452.27 13.152 cv
452.066 13.043 451.887 12.902 451.73 12.734 cv
451.566 12.57 451.441 12.371 451.348 12.133 cv
451.254 11.902 451.207 11.621 451.207 11.289 cv
451.207 10.961 451.27 10.656 451.398 10.375 cv
451.527 10.102 451.715 9.86298 451.961 9.664 cv
452.203 9.46899 452.5 9.31598 452.852 9.203 cv
453.199 9.09802 453.594 9.04303 454.035 9.039 cv
454.25 9.04303 454.461 9.05902 454.668 9.086 cv
454.871 9.12097 455.059 9.15997 455.227 9.203 cv
455.391 9.25403 455.531 9.30499 455.648 9.35498 cv
455.762 9.414 455.844 9.461 455.895 9.49597 cv
455.941 9.539 455.977 9.578 456 9.61298 cv
456.02 9.65601 456.031 9.703 456.043 9.75403 cv
456.051 9.80902 456.063 9.875 456.07 9.953 cv
456.078 10.039 456.082 10.137 456.082 10.254 cv
456.082 10.395 456.078 10.512 456.07 10.598 cv
456.063 10.691 456.047 10.762 456.031 10.809 cv
456.012 10.863 455.988 10.898 455.961 10.914 cv
455.926 10.937 455.891 10.945 455.852 10.941 cv
455.801 10.945 455.727 10.918 455.633 10.859 cv
455.531 10.809 455.41 10.75 455.262 10.684 cv
455.113 10.625 454.941 10.566 454.746 10.508 cv
454.551 10.457 454.328 10.43 454.082 10.426 cv
453.902 10.43 453.75 10.449 453.621 10.48 cv
453.488 10.52 453.379 10.57 453.301 10.637 cv
453.215 10.707 453.152 10.785 453.113 10.875 cv
453.066 10.969 453.047 11.066 453.051 11.168 cv
453.047 11.328 453.098 11.465 453.199 11.57 cv
453.297 11.684 453.426 11.777 453.59 11.859 cv
453.75 11.945 453.934 12.023 454.141 12.094 cv
454.344 12.168 454.551 12.25 454.762 12.332 cv
454.969 12.422 455.176 12.52 455.387 12.633 cv
455.59 12.746 455.773 12.887 455.934 13.051 cv
456.094 13.219 456.223 13.418 456.324 13.648 cv
456.418 13.883 456.469 14.156 456.473 14.469 cv
cp
f
468.848 12.781 mo
468.844 13.082 468.816 13.293 468.762 13.41 cv
468.703 13.535 468.613 13.594 468.488 13.59 cv
465.246 13.59 li
465.117 13.594 465.023 13.531 464.969 13.406 cv
464.906 13.285 464.879 13.078 464.883 12.781 cv
464.879 12.492 464.906 12.285 464.969 12.164 cv
465.023 12.047 465.117 11.988 465.246 11.984 cv
468.488 11.984 li
468.551 11.988 468.602 12 468.648 12.023 cv
468.688 12.051 468.727 12.098 468.762 12.156 cv
468.789 12.223 468.813 12.305 468.828 12.406 cv
468.84 12.512 468.844 12.637 468.848 12.781 cv
cp
f
484.266 13.996 mo
484.266 14.457 484.184 14.863 484.027 15.219 cv
483.863 15.582 483.629 15.887 483.324 16.129 cv
483.012 16.379 482.629 16.562 482.176 16.687 cv
481.715 16.812 481.188 16.875 480.594 16.879 cv
480.02 16.875 479.52 16.816 479.09 16.707 cv
478.656 16.59 478.297 16.426 478.008 16.207 cv
477.715 15.988 477.496 15.715 477.352 15.387 cv
477.207 15.062 477.133 14.691 477.137 14.27 cv
477.133 13.984 477.176 13.715 477.266 13.461 cv
477.348 13.211 477.477 12.977 477.645 12.762 cv
477.813 12.547 478.023 12.344 478.277 12.152 cv
478.527 11.965 478.816 11.785 479.145 11.609 cv
478.879 11.465 478.641 11.309 478.43 11.141 cv
478.215 10.973 478.031 10.789 477.883 10.586 cv
477.73 10.391 477.617 10.172 477.539 9.92999 cv
477.461 9.69501 477.422 9.43402 477.426 9.14801 cv
477.422 8.74597 477.492 8.37903 477.637 8.047 cv
477.777 7.71899 477.992 7.43402 478.277 7.18701 cv
478.559 6.94897 478.91 6.76202 479.34 6.633 cv
479.762 6.50403 480.258 6.44098 480.82 6.43701 cv
481.375 6.44098 481.852 6.5 482.25 6.617 cv
482.648 6.73798 482.973 6.90601 483.23 7.12097 cv
483.48 7.34399 483.668 7.60498 483.793 7.90601 cv
483.91 8.211 483.973 8.547 483.977 8.914 cv
483.973 9.15997 483.934 9.39801 483.855 9.62903 cv
483.773 9.85901 483.66 10.078 483.516 10.285 cv
483.371 10.496 483.191 10.691 482.98 10.875 cv
482.766 11.062 482.523 11.23 482.254 11.375 cv
482.57 11.543 482.855 11.719 483.105 11.906 cv
483.355 12.094 483.563 12.297 483.734 12.512 cv
483.902 12.727 484.035 12.957 484.129 13.199 cv
484.219 13.449 484.266 13.715 484.266 13.996 cv
cp
482.008 9.10199 mo
482.004 8.922 481.977 8.758 481.93 8.60901 cv
481.875 8.46503 481.793 8.34399 481.684 8.242 cv
481.566 8.14502 481.43 8.06598 481.27 8.01202 cv
481.102 7.961 480.906 7.93402 480.688 7.93402 cv
480.25 7.93402 479.926 8.03497 479.715 8.23401 cv
479.496 8.43402 479.391 8.711 479.395 9.06201 cv
479.391 9.23401 479.418 9.38702 479.477 9.52301 cv
479.527 9.664 479.613 9.797 479.73 9.91803 cv
479.844 10.047 479.992 10.168 480.176 10.285 cv
480.355 10.406 480.57 10.535 480.82 10.668 cv
481.199 10.449 481.492 10.211 481.699 9.953 cv
481.902 9.703 482.004 9.41803 482.008 9.10199 cv
cp
482.238 14.137 mo
482.238 13.949 482.203 13.773 482.141 13.609 cv
482.074 13.453 481.977 13.301 481.84 13.16 cv
481.699 13.02 481.523 12.887 481.32 12.758 cv
481.109 12.629 480.867 12.496 480.594 12.359 cv
480.352 12.492 480.145 12.621 479.965 12.75 cv
479.781 12.879 479.629 13.016 479.512 13.156 cv
479.391 13.301 479.301 13.453 479.242 13.609 cv
479.18 13.773 479.148 13.941 479.152 14.121 cv
479.148 14.527 479.281 14.836 479.547 15.047 cv
479.809 15.262 480.199 15.371 480.719 15.367 cv
481.227 15.371 481.605 15.262 481.859 15.039 cv
482.109 14.824 482.238 14.523 482.238 14.137 cv
cp
f
496.121 7.45697 mo
496.117 7.61298 496.109 7.742 496.102 7.84399 cv
496.086 7.953 496.066 8.039 496.043 8.10199 cv
496.012 8.16803 495.98 8.21503 495.945 8.242 cv
495.902 8.27698 495.859 8.29303 495.816 8.289 cv
493.293 8.289 li
493.293 16.418 li
493.293 16.473 493.273 16.52 493.242 16.559 cv
493.203 16.602 493.148 16.637 493.074 16.66 cv
492.992 16.687 492.887 16.707 492.758 16.723 cv
492.621 16.738 492.457 16.746 492.262 16.746 cv
492.066 16.746 491.902 16.738 491.77 16.723 cv
491.637 16.707 491.531 16.687 491.453 16.66 cv
491.375 16.637 491.316 16.602 491.285 16.559 cv
491.246 16.52 491.23 16.473 491.234 16.418 cv
491.234 8.289 li
488.711 8.289 li
488.656 8.29303 488.609 8.27698 488.578 8.242 cv
488.539 8.21503 488.508 8.16803 488.484 8.10199 cv
488.453 8.039 488.434 7.953 488.426 7.84399 cv
488.41 7.742 488.406 7.61298 488.406 7.45697 cv
488.406 7.30499 488.41 7.172 488.426 7.05902 cv
488.434 6.953 488.453 6.86298 488.484 6.797 cv
488.508 6.73401 488.539 6.68701 488.578 6.65601 cv
488.609 6.62903 488.656 6.617 488.711 6.61298 cv
495.816 6.61298 li
495.859 6.617 495.902 6.62903 495.945 6.65601 cv
495.98 6.68701 496.012 6.73401 496.043 6.797 cv
496.066 6.86298 496.086 6.953 496.102 7.05902 cv
496.109 7.172 496.117 7.30499 496.121 7.45697 cv
cp
f
503.832 16.434 mo
503.828 16.488 503.813 16.531 503.785 16.57 cv
503.75 16.609 503.699 16.645 503.629 16.668 cv
503.555 16.695 503.453 16.711 503.328 16.727 cv
503.199 16.738 503.043 16.746 502.859 16.746 cv
502.664 16.746 502.504 16.738 502.379 16.727 cv
502.25 16.711 502.148 16.695 502.078 16.668 cv
502 16.645 501.949 16.609 501.922 16.57 cv
501.887 16.531 501.871 16.488 501.875 16.434 cv
501.875 12.469 li
501.871 12.133 501.848 11.867 501.801 11.672 cv
501.75 11.48 501.676 11.316 501.586 11.18 cv
501.492 11.043 501.375 10.937 501.227 10.859 cv
501.078 10.785 500.902 10.746 500.707 10.746 cv
500.453 10.746 500.203 10.84 499.949 11.02 cv
499.695 11.203 499.43 11.465 499.156 11.812 cv
499.156 16.434 li
499.152 16.488 499.137 16.531 499.109 16.57 cv
499.074 16.609 499.02 16.645 498.949 16.668 cv
498.871 16.695 498.773 16.711 498.648 16.727 cv
498.523 16.738 498.363 16.746 498.176 16.746 cv
497.98 16.746 497.824 16.738 497.699 16.727 cv
497.574 16.711 497.473 16.695 497.398 16.668 cv
497.32 16.645 497.266 16.609 497.238 16.57 cv
497.203 16.531 497.188 16.488 497.191 16.434 cv
497.191 6.18701 li
497.188 6.13702 497.203 6.09003 497.238 6.047 cv
497.266 6.008 497.32 5.97302 497.398 5.94098 cv
497.473 5.914 497.574 5.89502 497.699 5.875 cv
497.824 5.86298 497.98 5.85498 498.176 5.85199 cv
498.363 5.85498 498.523 5.86298 498.648 5.875 cv
498.773 5.89502 498.871 5.914 498.949 5.94098 cv
499.02 5.97302 499.074 6.008 499.109 6.047 cv
499.137 6.09003 499.152 6.13702 499.156 6.18701 cv
499.156 10.027 li
499.492 9.69897 499.836 9.453 500.188 9.28497 cv
500.535 9.125 500.902 9.04303 501.285 9.039 cv
501.754 9.04303 502.152 9.12097 502.48 9.27301 cv
502.805 9.43402 503.066 9.64502 503.266 9.914 cv
503.465 10.184 503.609 10.5 503.699 10.859 cv
503.785 11.223 503.828 11.66 503.832 12.172 cv
cp
f
510.23 10.129 mo
510.23 10.32 510.223 10.473 510.215 10.59 cv
510.199 10.711 510.184 10.805 510.168 10.871 cv
510.145 10.941 510.117 10.988 510.086 11.012 cv
510.047 11.039 510.004 11.051 509.957 11.051 cv
509.91 11.051 509.863 11.043 509.816 11.023 cv
509.762 11.008 509.703 10.988 509.641 10.965 cv
509.57 10.945 509.5 10.926 509.426 10.906 cv
509.344 10.891 509.258 10.883 509.168 10.879 cv
509.055 10.883 508.945 10.902 508.84 10.945 cv
508.73 10.992 508.617 11.062 508.504 11.152 cv
508.383 11.246 508.262 11.371 508.137 11.523 cv
508.008 11.684 507.871 11.875 507.727 12.102 cv
507.727 16.434 li
507.723 16.488 507.707 16.531 507.68 16.57 cv
507.645 16.609 507.59 16.645 507.52 16.668 cv
507.441 16.695 507.344 16.711 507.219 16.727 cv
507.094 16.738 506.934 16.746 506.746 16.746 cv
506.551 16.746 506.395 16.738 506.27 16.727 cv
506.145 16.711 506.043 16.695 505.969 16.668 cv
505.891 16.645 505.836 16.609 505.809 16.57 cv
505.773 16.531 505.758 16.488 505.762 16.434 cv
505.762 9.48401 li
505.758 9.43701 505.773 9.39099 505.801 9.34802 cv
505.824 9.31201 505.871 9.28101 505.941 9.25 cv
506.008 9.22699 506.094 9.20697 506.203 9.19098 cv
506.309 9.18402 506.441 9.17603 506.605 9.172 cv
506.77 9.17603 506.906 9.18402 507.016 9.19098 cv
507.121 9.20697 507.207 9.22699 507.27 9.25 cv
507.328 9.28101 507.371 9.31201 507.398 9.34802 cv
507.422 9.39099 507.434 9.43701 507.438 9.48401 cv
507.438 10.348 li
507.617 10.09 507.789 9.87903 507.953 9.70697 cv
508.109 9.54303 508.266 9.40601 508.414 9.30499 cv
508.559 9.20697 508.703 9.14099 508.848 9.09802 cv
508.992 9.06201 509.137 9.04303 509.285 9.039 cv
509.352 9.04303 509.426 9.047 509.504 9.05103 cv
509.582 9.06201 509.66 9.07397 509.746 9.09003 cv
509.824 9.10901 509.898 9.12903 509.965 9.15198 cv
510.023 9.17603 510.07 9.203 510.102 9.22699 cv
510.129 9.258 510.148 9.28497 510.164 9.31201 cv
510.176 9.34802 510.188 9.39099 510.199 9.44098 cv
510.207 9.5 510.215 9.58197 510.223 9.68701 cv
510.227 9.797 510.23 9.94501 510.23 10.129 cv
cp
f
517.676 12.758 mo
517.672 12.996 517.621 13.172 517.516 13.285 cv
517.406 13.402 517.258 13.461 517.078 13.457 cv
512.844 13.457 li
512.84 13.758 512.875 14.027 512.949 14.266 cv
513.016 14.508 513.129 14.711 513.285 14.879 cv
513.438 15.051 513.633 15.18 513.875 15.266 cv
514.113 15.355 514.402 15.398 514.746 15.398 cv
515.086 15.398 515.387 15.375 515.648 15.324 cv
515.906 15.277 516.133 15.223 516.324 15.16 cv
516.512 15.102 516.668 15.047 516.797 14.996 cv
516.918 14.949 517.02 14.926 517.102 14.922 cv
517.145 14.926 517.184 14.934 517.219 14.949 cv
517.246 14.969 517.273 15 517.293 15.047 cv
517.313 15.094 517.324 15.16 517.336 15.246 cv
517.34 15.332 517.344 15.441 517.348 15.57 cv
517.344 15.687 517.344 15.785 517.34 15.863 cv
517.332 15.945 517.324 16.012 517.316 16.066 cv
517.305 16.125 517.289 16.176 517.27 16.211 cv
517.25 16.254 517.223 16.289 517.191 16.324 cv
517.156 16.363 517.063 16.414 516.914 16.473 cv
516.758 16.539 516.566 16.602 516.336 16.656 cv
516.098 16.719 515.828 16.766 515.531 16.812 cv
515.227 16.852 514.906 16.875 514.566 16.879 cv
513.945 16.875 513.402 16.801 512.941 16.645 cv
512.473 16.492 512.086 16.254 511.777 15.937 cv
511.461 15.621 511.227 15.223 511.078 14.738 cv
510.922 14.258 510.848 13.691 510.852 13.035 cv
510.848 12.422 510.926 11.863 511.09 11.367 cv
511.246 10.871 511.48 10.453 511.793 10.105 cv
512.098 9.76202 512.473 9.49597 512.91 9.31201 cv
513.348 9.133 513.84 9.04303 514.395 9.039 cv
514.973 9.04303 515.473 9.12903 515.887 9.297 cv
516.301 9.47302 516.637 9.711 516.902 10.012 cv
517.164 10.316 517.359 10.676 517.488 11.09 cv
517.609 11.508 517.672 11.957 517.676 12.445 cv
cp
515.773 12.195 mo
515.785 11.645 515.676 11.211 515.441 10.898 cv
515.207 10.586 514.84 10.43 514.348 10.426 cv
514.098 10.43 513.883 10.477 513.699 10.566 cv
513.512 10.664 513.359 10.789 513.238 10.945 cv
513.113 11.105 513.02 11.293 512.957 11.508 cv
512.891 11.723 512.852 11.953 512.844 12.195 cv
cp
f
525.207 16.457 mo
525.203 16.535 525.176 16.59 525.129 16.629 cv
525.074 16.672 524.992 16.699 524.883 16.719 cv
524.766 16.734 524.602 16.746 524.387 16.746 cv
524.148 16.746 523.977 16.734 523.875 16.719 cv
523.766 16.699 523.691 16.672 523.652 16.629 cv
523.605 16.59 523.586 16.535 523.586 16.457 cv
523.586 15.906 li
523.297 16.215 522.969 16.453 522.605 16.621 cv
522.238 16.793 521.832 16.875 521.387 16.879 cv
521.016 16.875 520.676 16.828 520.367 16.734 cv
520.059 16.641 519.793 16.5 519.566 16.305 cv
519.34 16.117 519.164 15.883 519.039 15.602 cv
518.914 15.324 518.852 14.996 518.855 14.617 cv
518.852 14.219 518.93 13.867 519.09 13.562 cv
519.246 13.266 519.484 13.02 519.801 12.824 cv
520.113 12.633 520.504 12.488 520.973 12.391 cv
521.441 12.301 521.984 12.254 522.602 12.25 cv
523.281 12.25 li
523.281 11.828 li
523.281 11.613 523.258 11.422 523.215 11.258 cv
523.168 11.098 523.094 10.961 522.996 10.848 cv
522.891 10.742 522.758 10.66 522.59 10.605 cv
522.418 10.555 522.207 10.531 521.965 10.527 cv
521.633 10.531 521.34 10.566 521.086 10.637 cv
520.824 10.711 520.598 10.793 520.402 10.879 cv
520.203 10.973 520.039 11.051 519.91 11.121 cv
519.773 11.195 519.664 11.234 519.586 11.23 cv
519.523 11.234 519.473 11.215 519.434 11.176 cv
519.387 11.141 519.352 11.09 519.324 11.02 cv
519.293 10.957 519.27 10.871 519.258 10.77 cv
519.238 10.672 519.23 10.562 519.234 10.441 cv
519.23 10.281 519.246 10.156 519.273 10.059 cv
519.297 9.96899 519.344 9.883 519.422 9.80499 cv
519.492 9.72998 519.621 9.64801 519.805 9.55902 cv
519.984 9.46899 520.195 9.383 520.441 9.30499 cv
520.684 9.22699 520.953 9.164 521.242 9.11298 cv
521.531 9.06598 521.828 9.04303 522.137 9.039 cv
522.68 9.04303 523.145 9.09399 523.531 9.19897 cv
523.918 9.30902 524.238 9.47302 524.488 9.69098 cv
524.738 9.90997 524.918 10.195 525.035 10.543 cv
525.145 10.895 525.203 11.309 525.207 11.781 cv
cp
523.281 13.48 mo
522.531 13.48 li
522.215 13.484 521.945 13.508 521.723 13.551 cv
521.496 13.602 521.313 13.672 521.176 13.762 cv
521.031 13.859 520.93 13.973 520.867 14.102 cv
520.801 14.238 520.766 14.387 520.77 14.555 cv
520.766 14.848 520.859 15.078 521.047 15.242 cv
521.23 15.41 521.488 15.492 521.816 15.492 cv
522.09 15.492 522.34 15.422 522.574 15.281 cv
522.801 15.141 523.039 14.937 523.281 14.664 cv
cp
f
533.789 16.434 mo
533.785 16.496 533.773 16.543 533.75 16.578 cv
533.723 16.621 533.676 16.652 533.617 16.676 cv
533.551 16.699 533.469 16.715 533.363 16.73 cv
533.258 16.738 533.125 16.746 532.973 16.746 cv
532.801 16.746 532.668 16.738 532.566 16.73 cv
532.461 16.715 532.375 16.699 532.313 16.676 cv
532.246 16.652 532.199 16.621 532.172 16.578 cv
532.141 16.543 532.125 16.496 532.129 16.434 cv
532.129 15.664 li
531.77 16.051 531.395 16.348 531.004 16.559 cv
530.605 16.77 530.172 16.875 529.699 16.879 cv
529.164 16.875 528.715 16.773 528.352 16.57 cv
527.984 16.367 527.688 16.094 527.457 15.742 cv
527.223 15.398 527.055 14.992 526.953 14.523 cv
526.852 14.062 526.801 13.57 526.801 13.051 cv
526.801 12.437 526.863 11.883 526.996 11.387 cv
527.125 10.895 527.32 10.473 527.578 10.125 cv
527.832 9.77698 528.148 9.51202 528.527 9.32001 cv
528.906 9.13702 529.344 9.04303 529.84 9.039 cv
530.227 9.04303 530.578 9.12097 530.898 9.27698 cv
531.211 9.43701 531.527 9.66803 531.84 9.97302 cv
531.84 6.211 li
531.84 6.15997 531.852 6.11298 531.883 6.07001 cv
531.906 6.03101 531.961 5.99597 532.039 5.96503 cv
532.113 5.93701 532.211 5.91803 532.34 5.89801 cv
532.461 5.88702 532.621 5.87903 532.816 5.875 cv
533.008 5.87903 533.164 5.88702 533.289 5.89801 cv
533.41 5.91803 533.512 5.93701 533.586 5.96503 cv
533.656 5.99597 533.707 6.03101 533.742 6.07001 cv
533.77 6.11298 533.785 6.15997 533.789 6.211 cv
cp
531.84 11.789 mo
531.559 11.437 531.289 11.168 531.035 10.98 cv
530.773 10.793 530.504 10.699 530.227 10.699 cv
529.973 10.699 529.754 10.766 529.57 10.891 cv
529.383 11.023 529.234 11.191 529.125 11.402 cv
529.012 11.613 528.93 11.852 528.875 12.113 cv
528.82 12.379 528.793 12.648 528.793 12.918 cv
528.793 13.215 528.816 13.496 528.863 13.77 cv
528.91 14.047 528.984 14.293 529.094 14.508 cv
529.195 14.723 529.34 14.895 529.52 15.023 cv
529.695 15.156 529.918 15.223 530.188 15.219 cv
530.32 15.223 530.449 15.203 530.582 15.16 cv
530.707 15.125 530.84 15.062 530.973 14.969 cv
531.105 14.883 531.242 14.766 531.383 14.621 cv
531.523 14.48 531.676 14.305 531.84 14.098 cv
cp
f
540.613 14.469 mo
540.609 14.867 540.535 15.215 540.391 15.516 cv
540.242 15.816 540.035 16.07 539.766 16.27 cv
539.492 16.477 539.172 16.625 538.805 16.727 cv
538.438 16.824 538.035 16.875 537.605 16.879 cv
537.34 16.875 537.094 16.855 536.859 16.82 cv
536.625 16.777 536.414 16.73 536.227 16.672 cv
536.039 16.613 535.883 16.551 535.758 16.488 cv
535.633 16.426 535.539 16.367 535.484 16.312 cv
535.426 16.258 535.383 16.176 535.355 16.059 cv
535.32 15.945 535.305 15.77 535.309 15.539 cv
535.305 15.391 535.313 15.27 535.324 15.176 cv
535.332 15.086 535.348 15.016 535.371 14.957 cv
535.391 14.906 535.414 14.867 535.449 14.848 cv
535.477 14.832 535.516 14.824 535.563 14.82 cv
535.617 14.824 535.703 14.855 535.816 14.918 cv
535.926 14.984 536.063 15.059 536.234 15.133 cv
536.398 15.215 536.594 15.285 536.813 15.352 cv
537.031 15.422 537.281 15.457 537.566 15.453 cv
537.742 15.457 537.898 15.437 538.039 15.398 cv
538.172 15.363 538.293 15.312 538.398 15.242 cv
538.496 15.176 538.57 15.09 538.625 14.984 cv
538.672 14.883 538.699 14.762 538.703 14.625 cv
538.699 14.469 538.652 14.336 538.559 14.227 cv
538.465 14.117 538.336 14.02 538.18 13.934 cv
538.016 13.852 537.836 13.773 537.641 13.699 cv
537.438 13.629 537.234 13.551 537.023 13.457 cv
536.813 13.371 536.605 13.27 536.41 13.152 cv
536.207 13.043 536.027 12.902 535.871 12.734 cv
535.707 12.57 535.582 12.371 535.488 12.133 cv
535.395 11.902 535.348 11.621 535.348 11.289 cv
535.348 10.961 535.41 10.656 535.539 10.375 cv
535.668 10.102 535.855 9.86298 536.102 9.664 cv
536.344 9.46899 536.641 9.31598 536.992 9.203 cv
537.34 9.09802 537.734 9.04303 538.176 9.039 cv
538.391 9.04303 538.602 9.05902 538.809 9.086 cv
539.012 9.12097 539.199 9.15997 539.367 9.203 cv
539.531 9.25403 539.672 9.30499 539.789 9.35498 cv
539.902 9.414 539.984 9.461 540.035 9.49597 cv
540.082 9.539 540.117 9.578 540.141 9.61298 cv
540.16 9.65601 540.172 9.703 540.184 9.75403 cv
540.191 9.80902 540.203 9.875 540.211 9.953 cv
540.219 10.039 540.223 10.137 540.223 10.254 cv
540.223 10.395 540.219 10.512 540.211 10.598 cv
540.203 10.691 540.188 10.762 540.172 10.809 cv
540.152 10.863 540.129 10.898 540.102 10.914 cv
540.066 10.937 540.031 10.945 539.992 10.941 cv
539.941 10.945 539.867 10.918 539.773 10.859 cv
539.672 10.809 539.551 10.75 539.402 10.684 cv
539.254 10.625 539.082 10.566 538.887 10.508 cv
538.691 10.457 538.469 10.43 538.223 10.426 cv
538.043 10.43 537.891 10.449 537.762 10.48 cv
537.629 10.52 537.52 10.57 537.441 10.637 cv
537.355 10.707 537.293 10.785 537.254 10.875 cv
537.207 10.969 537.188 11.066 537.191 11.168 cv
537.188 11.328 537.238 11.465 537.34 11.57 cv
537.438 11.684 537.566 11.777 537.73 11.859 cv
537.891 11.945 538.074 12.023 538.281 12.094 cv
538.484 12.168 538.691 12.25 538.902 12.332 cv
539.109 12.422 539.316 12.52 539.527 12.633 cv
539.73 12.746 539.914 12.887 540.074 13.051 cv
540.234 13.219 540.363 13.418 540.465 13.648 cv
540.559 13.883 540.609 14.156 540.613 14.469 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
