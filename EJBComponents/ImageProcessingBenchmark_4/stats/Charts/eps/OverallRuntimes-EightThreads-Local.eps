%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntimes-EightThreads-Local.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 2:29:02 p.m.
%%BoundingBox: 0 0 620 525
%%HiResBoundingBox: 0 0 619.5600 524.7601
%%CropBox: 0 0 619.5600 524.7601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -524.76 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 524.76 li
619.56 524.76 li
619.56 0 li
cp
clp
gsave
0 524.76 mo
620 524.76 li
620 -.23999 li
0 -.23999 li
cp
clp
0 0 mo
619.559 0 li
619.559 524.762 li
0 524.762 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
61.68 460.801 mo
602.398 460.801 li
61.68 444.121 mo
602.398 444.121 li
61.68 410.762 mo
602.398 410.762 li
61.68 393.961 mo
602.398 393.961 li
61.68 360.602 mo
602.398 360.602 li
61.68 343.922 mo
602.398 343.922 li
61.68 310.559 mo
602.398 310.559 li
61.68 293.879 mo
602.398 293.879 li
61.68 260.52 mo
602.398 260.52 li
61.68 243.84 mo
602.398 243.84 li
61.68 210.48 mo
602.398 210.48 li
61.68 193.801 mo
602.398 193.801 li
61.68 160.441 mo
602.398 160.441 li
61.68 143.762 mo
602.398 143.762 li
61.68 110.281 mo
602.398 110.281 li
61.68 93.602 mo
602.398 93.602 li
61.68 60.238 mo
602.398 60.238 li
61.68 43.559 mo
602.398 43.559 li
.140414 .108034 .108034 0 cmyk
@
61.68 427.441 mo
602.398 427.441 li
61.68 377.281 mo
602.398 377.281 li
61.68 327.238 mo
602.398 327.238 li
61.68 277.199 mo
602.398 277.199 li
61.68 227.16 mo
602.398 227.16 li
61.68 177.121 mo
602.398 177.121 li
61.68 127.078 mo
602.398 127.078 li
61.68 76.922 mo
602.398 76.922 li
61.68 26.879 mo
602.398 26.879 li
.328344 .284215 .278569 .000915541 cmyk
@
95.398 26.879 mo
95.398 477.48 li
163.078 26.879 mo
163.078 477.48 li
230.641 26.879 mo
230.641 477.48 li
298.199 26.879 mo
298.199 477.48 li
365.762 26.879 mo
365.762 477.48 li
433.441 26.879 mo
433.441 477.48 li
501 26.879 mo
501 477.48 li
568.559 26.879 mo
568.559 477.48 li
.178592 .148898 .143923 0 cmyk
@
61.68 26.879 mo
61.68 477.48 li
129.238 26.879 mo
129.238 477.48 li
196.801 26.879 mo
196.801 477.48 li
264.48 26.879 mo
264.48 477.48 li
332.039 26.879 mo
332.039 477.48 li
399.602 26.879 mo
399.602 477.48 li
467.16 26.879 mo
467.16 477.48 li
534.84 26.879 mo
534.84 477.48 li
602.398 26.879 mo
602.398 477.48 li
.328344 .284215 .278569 .000915541 cmyk
@
30.961 468.121 mo
48.602 468.121 li
48.602 485.281 li
30.961 485.281 li
cp
0 0 0 0 cmyk
ef
30.961 418.078 mo
48.602 418.078 li
48.602 435.121 li
30.961 435.121 li
cp
ef
30.961 368.039 mo
48.602 368.039 li
48.602 385.078 li
30.961 385.078 li
cp
ef
30.961 318 mo
48.602 318 li
48.602 335.039 li
30.961 335.039 li
cp
ef
30.961 267.84 mo
48.602 267.84 li
48.602 285 li
30.961 285 li
cp
ef
30.961 217.801 mo
48.602 217.801 li
48.602 234.961 li
30.961 234.961 li
cp
ef
30.961 167.762 mo
48.602 167.762 li
48.602 184.801 li
30.961 184.801 li
cp
ef
23.879 117.719 mo
48.602 117.719 li
48.602 134.762 li
23.879 134.762 li
cp
ef
23.879 67.68 mo
48.602 67.68 li
48.602 84.719 li
23.879 84.719 li
cp
ef
23.879 17.641 mo
48.602 17.641 li
48.602 34.68 li
23.879 34.68 li
cp
ef
.96 lw
61.68 477.48 mo
602.398 477.48 li
.367803 .29575 .300999 .00198367 cmyk
@
61.68 477.48 mo
61.68 481.922 li
129.238 477.48 mo
129.238 481.922 li
196.801 477.48 mo
196.801 481.922 li
264.48 477.48 mo
264.48 481.922 li
332.039 477.48 mo
332.039 481.922 li
399.602 477.48 mo
399.602 481.922 li
467.16 477.48 mo
467.16 481.922 li
534.84 477.48 mo
534.84 481.922 li
602.398 477.48 mo
602.398 481.922 li
@
gsave
61.559 26.879 mo
603.122 26.879 li
603.122 478.078 li
61.559 478.078 li
cp
clp
1 lc
61.68 462.48 mo
129.238 469.801 li
196.801 473.762 li
264.48 473.16 li
332.039 473.16 li
399.602 472.078 li
534.84 472.078 li
602.398 472.441 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
66.629 467.379 mo
56.551 457.301 li
56.551 467.379 mo
66.629 457.301 li
.62768 .285466 0 0 cmyk
@
134.191 474.699 mo
124.109 464.621 li
124.109 474.699 mo
134.191 464.621 li
@
201.871 478.781 mo
191.789 468.699 li
191.789 478.781 mo
201.871 468.699 li
@
269.43 478.059 mo
259.352 467.98 li
259.352 478.059 mo
269.43 467.98 li
@
336.988 478.059 mo
326.91 467.98 li
326.91 478.059 mo
336.988 467.98 li
@
404.672 477.102 mo
394.59 467.02 li
394.59 477.102 mo
404.672 467.02 li
@
472.23 477.102 mo
462.148 467.02 li
462.148 477.102 mo
472.23 467.02 li
@
539.789 477.102 mo
529.711 467.02 li
529.711 477.102 mo
539.789 467.02 li
@
607.352 477.461 mo
597.27 467.379 li
597.27 477.461 mo
607.352 467.379 li
@
gsave
61.559 26.879 mo
603.122 26.879 li
603.122 478.078 li
61.559 478.078 li
cp
clp
.96 lw
1 lc
61.68 437.398 mo
129.238 457.078 li
196.801 467.16 li
264.48 467.16 li
332.039 466.441 li
399.602 463.801 li
467.16 465.719 li
534.84 462.48 li
602.398 467.16 li
.466651 0 .889799 0 cmyk
@
grestore
66.629 442.422 mo
56.551 432.34 li
56.551 442.422 mo
66.629 432.34 li
.466651 0 .889799 0 cmyk
@
134.191 462.102 mo
124.109 452.02 li
124.109 462.102 mo
134.191 452.02 li
@
201.871 472.059 mo
191.789 461.98 li
191.789 472.059 mo
201.871 461.98 li
@
269.43 472.059 mo
259.352 461.98 li
259.352 472.059 mo
269.43 461.98 li
@
336.988 471.34 mo
326.91 461.262 li
326.91 471.34 mo
336.988 461.262 li
@
404.672 468.699 mo
394.59 458.621 li
394.59 468.699 mo
404.672 458.621 li
@
472.23 470.738 mo
462.148 460.66 li
462.148 470.738 mo
472.23 460.66 li
@
539.789 467.379 mo
529.711 457.301 li
529.711 467.379 mo
539.789 457.301 li
@
607.352 472.059 mo
597.27 461.98 li
597.27 472.059 mo
607.352 461.98 li
@
gsave
61.559 26.879 mo
603.122 26.879 li
603.122 478.078 li
61.559 478.078 li
cp
clp
.96 lw
1 lc
61.68 343.68 mo
129.238 409.68 li
196.801 442.441 li
264.48 442.441 li
332.039 439.078 li
399.602 435.719 li
467.16 430.68 li
534.84 435.359 li
602.398 435.719 li
0 .990631 1 .000396735 cmyk
@
grestore
66.629 348.578 mo
56.551 338.5 li
56.551 348.578 mo
66.629 338.5 li
0 .990631 1 .000396735 cmyk
@
134.191 414.699 mo
124.109 404.621 li
124.109 414.699 mo
134.191 404.621 li
@
201.871 447.34 mo
191.789 437.262 li
191.789 447.34 mo
201.871 437.262 li
@
269.43 447.34 mo
259.352 437.262 li
259.352 447.34 mo
269.43 437.262 li
@
336.988 443.98 mo
326.91 433.898 li
326.91 443.98 mo
336.988 433.898 li
@
404.672 440.738 mo
394.59 430.66 li
394.59 440.738 mo
404.672 430.66 li
@
472.23 435.699 mo
462.148 425.621 li
462.148 435.699 mo
472.23 425.621 li
@
539.789 440.379 mo
529.711 430.301 li
529.711 440.379 mo
539.789 430.301 li
@
607.352 440.738 mo
597.27 430.66 li
597.27 440.738 mo
607.352 430.66 li
@
gsave
61.559 26.879 mo
603.122 26.879 li
603.122 478.078 li
61.559 478.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.68 390.719 mo
129.238 433.68 li
196.801 454.801 li
264.48 452.039 li
332.039 455.762 li
399.602 450.359 li
467.16 450.719 li
534.84 446.398 li
602.398 445.441 li
@
grestore
66.629 395.621 mo
56.551 385.539 li
56.551 395.621 mo
66.629 385.539 li
@
134.191 438.699 mo
124.109 428.621 li
124.109 438.699 mo
134.191 428.621 li
@
201.871 459.699 mo
191.789 449.621 li
191.789 459.699 mo
201.871 449.621 li
@
269.43 457.059 mo
259.352 446.98 li
259.352 457.059 mo
269.43 446.98 li
@
336.988 460.66 mo
326.91 450.578 li
326.91 460.66 mo
336.988 450.578 li
@
404.672 455.379 mo
394.59 445.301 li
394.59 455.379 mo
404.672 445.301 li
@
472.23 455.738 mo
462.148 445.66 li
462.148 455.738 mo
472.23 445.66 li
@
539.789 451.422 mo
529.711 441.34 li
529.711 451.422 mo
539.789 441.34 li
@
607.352 450.34 mo
597.27 440.262 li
597.27 450.34 mo
607.352 440.262 li
@
gsave
61.559 26.879 mo
603.122 26.879 li
603.122 478.078 li
61.559 478.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.68 240.48 mo
129.238 357.359 li
196.801 415.68 li
264.48 413.762 li
332.039 415.68 li
399.602 402.359 li
467.16 393.719 li
534.84 410.398 li
602.398 393 li
.62768 .285466 0 0 cmyk
@
grestore
66.148 245.02 mo
57.031 235.898 li
57.031 245.02 mo
66.148 235.898 li
.62768 .285466 0 0 cmyk
@
133.711 361.781 mo
124.59 352.66 li
124.59 361.781 mo
133.711 352.66 li
@
201.391 420.219 mo
192.27 411.102 li
192.27 420.219 mo
201.391 411.102 li
@
268.949 418.18 mo
259.828 409.059 li
259.828 418.18 mo
268.949 409.059 li
@
336.512 420.219 mo
327.391 411.102 li
327.391 420.219 mo
336.512 411.102 li
@
404.191 406.898 mo
395.07 397.781 li
395.07 406.898 mo
404.191 397.781 li
@
471.75 398.141 mo
462.629 389.02 li
462.629 398.141 mo
471.75 389.02 li
@
539.309 414.82 mo
530.191 405.699 li
530.191 414.82 mo
539.309 405.699 li
@
606.871 397.539 mo
597.75 388.422 li
597.75 397.539 mo
606.871 388.422 li
@
gsave
61.559 26.879 mo
603.122 26.879 li
603.122 478.078 li
61.559 478.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.68 295.199 mo
129.238 385.32 li
196.801 430.441 li
264.48 429.719 li
332.039 430.441 li
399.602 420.719 li
467.16 419.039 li
534.84 418.078 li
602.398 415.32 li
.466651 0 .889799 0 cmyk
@
grestore
66.629 300.219 mo
56.551 290.141 li
56.551 300.219 mo
66.629 290.141 li
.466651 0 .889799 0 cmyk
@
134.191 390.34 mo
124.109 380.262 li
124.109 390.34 mo
134.191 380.262 li
@
201.871 435.34 mo
191.789 425.262 li
191.789 435.34 mo
201.871 425.262 li
@
269.43 434.738 mo
259.352 424.66 li
259.352 434.738 mo
269.43 424.66 li
@
336.988 435.34 mo
326.91 425.262 li
326.91 435.34 mo
336.988 425.262 li
@
404.672 425.621 mo
394.59 415.539 li
394.59 425.621 mo
404.672 415.539 li
@
472.23 424.059 mo
462.148 413.98 li
462.148 424.059 mo
472.23 413.98 li
@
539.789 422.98 mo
529.711 412.898 li
529.711 422.98 mo
539.789 412.898 li
@
607.352 420.34 mo
597.27 410.262 li
597.27 420.34 mo
607.352 410.262 li
@
30.961 468.113 mo
48.684 468.113 li
48.684 485.203 li
30.961 485.203 li
cp
0 0 0 0 cmyk
ef
37.609 477.078 mo
37.605 477.762 37.555 478.383 37.449 478.945 cv
37.34 479.508 37.16 479.992 36.914 480.395 cv
36.66 480.801 36.332 481.113 35.934 481.332 cv
35.527 481.555 35.035 481.664 34.449 481.664 cv
33.891 481.664 33.418 481.566 33.039 481.367 cv
32.656 481.172 32.352 480.879 32.117 480.492 cv
31.883 480.105 31.715 479.633 31.621 479.066 cv
31.52 478.504 31.473 477.855 31.473 477.121 cv
31.473 476.449 31.527 475.828 31.637 475.262 cv
31.746 474.699 31.922 474.215 32.172 473.809 cv
32.414 473.406 32.738 473.094 33.145 472.867 cv
33.543 472.648 34.039 472.535 34.629 472.535 cv
35.188 472.535 35.66 472.637 36.043 472.832 cv
36.426 473.035 36.73 473.328 36.965 473.711 cv
37.195 474.102 37.363 474.574 37.461 475.137 cv
37.559 475.699 37.605 476.348 37.609 477.078 cv
cp
36.402 477.16 mo
36.398 476.719 36.383 476.32 36.355 475.969 cv
36.32 475.617 36.273 475.309 36.215 475.039 cv
36.148 474.77 36.07 474.539 35.973 474.344 cv
35.875 474.152 35.758 473.992 35.621 473.863 cv
35.48 473.738 35.32 473.645 35.148 473.586 cv
34.969 473.531 34.773 473.504 34.559 473.5 cv
34.168 473.504 33.852 473.594 33.613 473.777 cv
33.367 473.961 33.176 474.215 33.039 474.531 cv
32.898 474.852 32.805 475.223 32.754 475.652 cv
32.703 476.082 32.68 476.547 32.68 477.039 cv
32.68 477.703 32.711 478.266 32.781 478.727 cv
32.848 479.195 32.957 479.574 33.109 479.863 cv
33.254 480.16 33.445 480.371 33.676 480.5 cv
33.906 480.637 34.188 480.703 34.52 480.699 cv
34.773 480.703 34.996 480.664 35.191 480.578 cv
35.383 480.5 35.551 480.379 35.691 480.223 cv
35.832 480.07 35.945 479.887 36.039 479.672 cv
36.125 479.457 36.199 479.219 36.258 478.957 cv
36.309 478.699 36.348 478.418 36.371 478.113 cv
36.391 477.809 36.398 477.492 36.402 477.16 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.605 480.789 mo
40.605 481.117 40.551 481.332 40.445 481.437 cv
40.336 481.543 40.141 481.594 39.859 481.598 cv
39.582 481.594 39.391 481.543 39.289 481.441 cv
39.18 481.336 39.129 481.125 39.133 480.809 cv
39.129 480.484 39.184 480.27 39.293 480.16 cv
39.398 480.055 39.594 480 39.879 480 cv
40.152 480 40.34 480.055 40.449 480.16 cv
40.551 480.266 40.605 480.477 40.605 480.789 cv
cp
f
48.266 477.078 mo
48.262 477.762 48.211 478.383 48.105 478.945 cv
47.996 479.508 47.816 479.992 47.57 480.395 cv
47.316 480.801 46.988 481.113 46.59 481.332 cv
46.184 481.555 45.691 481.664 45.105 481.664 cv
44.547 481.664 44.074 481.566 43.695 481.367 cv
43.313 481.172 43.008 480.879 42.773 480.492 cv
42.539 480.105 42.371 479.633 42.277 479.066 cv
42.176 478.504 42.129 477.855 42.129 477.121 cv
42.129 476.449 42.184 475.828 42.293 475.262 cv
42.402 474.699 42.578 474.215 42.828 473.809 cv
43.07 473.406 43.395 473.094 43.801 472.867 cv
44.199 472.648 44.695 472.535 45.285 472.535 cv
45.844 472.535 46.316 472.637 46.699 472.832 cv
47.082 473.035 47.387 473.328 47.621 473.711 cv
47.852 474.102 48.02 474.574 48.117 475.137 cv
48.215 475.699 48.262 476.348 48.266 477.078 cv
cp
47.059 477.16 mo
47.055 476.719 47.039 476.32 47.012 475.969 cv
46.977 475.617 46.93 475.309 46.871 475.039 cv
46.805 474.77 46.727 474.539 46.629 474.344 cv
46.531 474.152 46.414 473.992 46.277 473.863 cv
46.137 473.738 45.977 473.645 45.805 473.586 cv
45.625 473.531 45.43 473.504 45.215 473.5 cv
44.824 473.504 44.508 473.594 44.27 473.777 cv
44.023 473.961 43.832 474.215 43.695 474.531 cv
43.555 474.852 43.461 475.223 43.41 475.652 cv
43.359 476.082 43.336 476.547 43.336 477.039 cv
43.336 477.703 43.367 478.266 43.438 478.727 cv
43.504 479.195 43.613 479.574 43.766 479.863 cv
43.91 480.16 44.102 480.371 44.332 480.5 cv
44.563 480.637 44.844 480.703 45.176 480.699 cv
45.43 480.703 45.652 480.664 45.848 480.578 cv
46.039 480.5 46.207 480.379 46.348 480.223 cv
46.488 480.07 46.602 479.887 46.695 479.672 cv
46.781 479.457 46.855 479.219 46.914 478.957 cv
46.965 478.699 47.004 478.418 47.027 478.113 cv
47.047 477.809 47.055 477.492 47.059 477.16 cv
cp
f
30.961 418.051 mo
48.684 418.051 li
48.684 435.141 li
30.961 435.141 li
cp
0 0 0 0 cmyk
ef
37.336 430.984 mo
37.332 431.074 37.324 431.145 37.313 431.203 cv
37.297 431.266 37.277 431.316 37.258 431.348 cv
37.234 431.387 37.211 431.41 37.18 431.426 cv
37.148 431.441 37.117 431.449 37.09 431.449 cv
32.453 431.449 li
32.418 431.449 32.391 431.441 32.363 431.426 cv
32.336 431.41 32.309 431.387 32.285 431.348 cv
32.258 431.316 32.238 431.266 32.227 431.203 cv
32.211 431.145 32.203 431.074 32.207 430.984 cv
32.203 430.906 32.211 430.832 32.227 430.77 cv
32.238 430.711 32.254 430.664 32.277 430.625 cv
32.293 430.59 32.32 430.559 32.352 430.535 cv
32.383 430.516 32.414 430.508 32.453 430.504 cv
34.305 430.504 li
34.305 423.758 li
32.59 424.777 li
32.5 424.828 32.43 424.855 32.383 424.863 cv
32.328 424.871 32.285 424.863 32.254 424.832 cv
32.219 424.805 32.199 424.754 32.188 424.684 cv
32.176 424.617 32.168 424.531 32.172 424.422 cv
32.168 424.348 32.172 424.281 32.184 424.223 cv
32.188 424.172 32.199 424.125 32.215 424.086 cv
32.227 424.051 32.246 424.02 32.27 423.992 cv
32.293 423.965 32.324 423.937 32.371 423.91 cv
34.414 422.598 li
34.43 422.586 34.449 422.574 34.48 422.566 cv
34.504 422.559 34.539 422.551 34.586 422.539 cv
34.625 422.531 34.676 422.523 34.73 422.52 cv
34.785 422.52 34.852 422.52 34.938 422.516 cv
35.043 422.52 35.137 422.523 35.211 422.531 cv
35.281 422.539 35.336 422.555 35.383 422.57 cv
35.422 422.59 35.449 422.609 35.465 422.633 cv
35.473 422.66 35.48 422.684 35.484 422.707 cv
35.484 430.504 li
37.09 430.504 li
37.125 430.508 37.16 430.516 37.191 430.535 cv
37.223 430.559 37.246 430.59 37.27 430.625 cv
37.285 430.664 37.301 430.711 37.316 430.77 cv
37.324 430.832 37.332 430.906 37.336 430.984 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.605 430.703 mo
40.605 431.031 40.551 431.246 40.445 431.352 cv
40.336 431.457 40.141 431.508 39.859 431.512 cv
39.582 431.508 39.391 431.457 39.289 431.355 cv
39.18 431.25 39.129 431.039 39.133 430.723 cv
39.129 430.398 39.184 430.184 39.293 430.074 cv
39.398 429.969 39.594 429.914 39.879 429.914 cv
40.152 429.914 40.34 429.969 40.449 430.074 cv
40.551 430.18 40.605 430.391 40.605 430.703 cv
cp
f
47.93 428.598 mo
47.93 429.074 47.848 429.496 47.688 429.867 cv
47.527 430.238 47.301 430.551 47.012 430.805 cv
46.715 431.059 46.367 431.254 45.965 431.383 cv
45.559 431.516 45.109 431.578 44.617 431.578 cv
44.34 431.578 44.078 431.559 43.836 431.52 cv
43.586 431.48 43.367 431.434 43.18 431.379 cv
42.984 431.324 42.828 431.27 42.703 431.211 cv
42.578 431.16 42.5 431.117 42.469 431.082 cv
42.434 431.051 42.41 431.02 42.398 430.992 cv
42.383 430.965 42.367 430.934 42.359 430.891 cv
42.344 430.855 42.336 430.805 42.336 430.742 cv
42.328 430.684 42.328 430.613 42.328 430.531 cv
42.328 430.457 42.332 430.387 42.34 430.324 cv
42.348 430.262 42.359 430.211 42.379 430.172 cv
42.395 430.133 42.414 430.105 42.441 430.086 cv
42.465 430.07 42.496 430.062 42.527 430.059 cv
42.574 430.062 42.645 430.09 42.738 430.145 cv
42.832 430.203 42.961 430.266 43.125 430.332 cv
43.289 430.398 43.488 430.461 43.73 430.52 cv
43.965 430.578 44.25 430.605 44.586 430.605 cv
44.887 430.605 45.168 430.57 45.426 430.496 cv
45.68 430.426 45.902 430.312 46.09 430.156 cv
46.273 430.004 46.418 429.809 46.523 429.57 cv
46.629 429.336 46.68 429.047 46.684 428.707 cv
46.68 428.426 46.637 428.176 46.547 427.957 cv
46.457 427.738 46.32 427.559 46.137 427.414 cv
45.949 427.273 45.715 427.168 45.434 427.094 cv
45.148 427.023 44.809 426.984 44.422 426.984 cv
44.137 426.984 43.898 427 43.699 427.027 cv
43.496 427.059 43.309 427.074 43.137 427.07 cv
43.008 427.074 42.914 427.043 42.863 426.98 cv
42.805 426.922 42.777 426.809 42.781 426.637 cv
42.781 423.023 li
42.777 422.875 42.813 422.766 42.887 422.687 cv
42.953 422.617 43.055 422.578 43.191 422.578 cv
47.121 422.578 li
47.156 422.578 47.191 422.59 47.227 422.609 cv
47.258 422.633 47.285 422.664 47.313 422.703 cv
47.332 422.746 47.348 422.797 47.363 422.859 cv
47.371 422.926 47.379 423.004 47.383 423.086 cv
47.379 423.254 47.355 423.379 47.316 423.469 cv
47.27 423.562 47.211 423.609 47.133 423.605 cv
43.961 423.605 li
43.961 426.094 li
44.113 426.074 44.27 426.062 44.434 426.055 cv
44.59 426.051 44.777 426.047 44.992 426.047 cv
45.477 426.047 45.902 426.109 46.27 426.23 cv
46.633 426.352 46.938 426.523 47.188 426.742 cv
47.43 426.969 47.617 427.234 47.742 427.547 cv
47.867 427.863 47.93 428.215 47.93 428.598 cv
cp
f
30.961 367.988 mo
48.684 367.988 li
48.684 385.078 li
30.961 385.078 li
cp
0 0 0 0 cmyk
ef
37.246 378.844 mo
37.242 379.254 37.172 379.621 37.031 379.945 cv
36.887 380.273 36.684 380.555 36.422 380.785 cv
36.156 381.02 35.828 381.195 35.441 381.32 cv
35.051 381.445 34.613 381.508 34.129 381.508 cv
33.824 381.508 33.547 381.48 33.293 381.434 cv
33.031 381.387 32.801 381.336 32.605 381.266 cv
32.402 381.203 32.238 381.133 32.105 381.062 cv
31.973 380.992 31.887 380.941 31.855 380.906 cv
31.816 380.879 31.793 380.848 31.777 380.812 cv
31.758 380.781 31.738 380.742 31.727 380.695 cv
31.711 380.652 31.703 380.598 31.695 380.527 cv
31.688 380.465 31.684 380.383 31.688 380.281 cv
31.684 380.121 31.699 380.008 31.734 379.941 cv
31.766 379.879 31.813 379.844 31.875 379.844 cv
31.918 379.844 32 379.883 32.125 379.953 cv
32.246 380.031 32.406 380.109 32.602 380.191 cv
32.793 380.277 33.02 380.355 33.285 380.426 cv
33.543 380.5 33.836 380.535 34.156 380.535 cv
34.465 380.535 34.734 380.496 34.973 380.418 cv
35.203 380.34 35.402 380.23 35.563 380.09 cv
35.719 379.949 35.836 379.781 35.918 379.586 cv
35.996 379.391 36.035 379.18 36.039 378.953 cv
36.035 378.703 35.984 378.477 35.887 378.273 cv
35.781 378.074 35.633 377.902 35.441 377.754 cv
35.242 377.609 35.004 377.496 34.719 377.418 cv
34.434 377.34 34.109 377.301 33.746 377.301 cv
32.875 377.301 li
32.832 377.301 32.797 377.293 32.762 377.277 cv
32.727 377.262 32.695 377.234 32.672 377.195 cv
32.645 377.16 32.625 377.113 32.609 377.055 cv
32.594 376.996 32.586 376.918 32.586 376.82 cv
32.586 376.734 32.59 376.664 32.605 376.605 cv
32.613 376.551 32.633 376.504 32.664 376.469 cv
32.688 376.434 32.719 376.41 32.75 376.391 cv
32.781 376.379 32.816 376.371 32.859 376.367 cv
33.633 376.367 li
33.934 376.371 34.203 376.332 34.445 376.25 cv
34.68 376.176 34.883 376.062 35.055 375.914 cv
35.219 375.77 35.348 375.594 35.438 375.391 cv
35.527 375.187 35.574 374.961 35.574 374.707 cv
35.574 374.527 35.543 374.352 35.484 374.184 cv
35.422 374.02 35.332 373.875 35.215 373.75 cv
35.094 373.625 34.941 373.527 34.762 373.457 cv
34.574 373.387 34.363 373.352 34.121 373.352 cv
33.855 373.352 33.609 373.395 33.391 373.473 cv
33.164 373.555 32.969 373.641 32.797 373.73 cv
32.621 373.824 32.477 373.91 32.363 373.988 cv
32.25 374.07 32.168 374.109 32.125 374.105 cv
32.09 374.109 32.063 374.102 32.039 374.09 cv
32.012 374.078 31.992 374.055 31.977 374.02 cv
31.961 373.988 31.949 373.941 31.941 373.875 cv
31.934 373.816 31.93 373.734 31.934 373.633 cv
31.93 373.566 31.93 373.508 31.938 373.453 cv
31.938 373.402 31.949 373.355 31.965 373.312 cv
31.98 373.277 31.996 373.242 32.016 373.207 cv
32.031 373.18 32.063 373.141 32.105 373.094 cv
32.148 373.051 32.234 372.988 32.371 372.906 cv
32.5 372.824 32.664 372.746 32.859 372.664 cv
33.051 372.586 33.273 372.516 33.531 372.461 cv
33.781 372.406 34.055 372.379 34.352 372.379 cv
34.758 372.379 35.121 372.434 35.434 372.535 cv
35.746 372.645 36.004 372.793 36.215 372.98 cv
36.418 373.176 36.574 373.406 36.68 373.672 cv
36.781 373.941 36.832 374.234 36.836 374.559 cv
36.832 374.84 36.797 375.102 36.727 375.336 cv
36.652 375.578 36.543 375.789 36.402 375.973 cv
36.258 376.16 36.086 376.316 35.883 376.445 cv
35.676 376.578 35.438 376.672 35.168 376.719 cv
35.168 376.73 li
35.473 376.766 35.754 376.84 36.008 376.961 cv
36.262 377.082 36.48 377.234 36.664 377.418 cv
36.844 377.602 36.984 377.816 37.09 378.059 cv
37.191 378.305 37.242 378.566 37.246 378.844 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.605 380.633 mo
40.605 380.961 40.551 381.176 40.445 381.281 cv
40.336 381.387 40.141 381.437 39.859 381.441 cv
39.582 381.437 39.391 381.387 39.289 381.285 cv
39.18 381.18 39.129 380.969 39.133 380.652 cv
39.129 380.328 39.184 380.113 39.293 380.004 cv
39.398 379.898 39.594 379.844 39.879 379.844 cv
40.152 379.844 40.34 379.898 40.449 380.004 cv
40.551 380.109 40.605 380.32 40.605 380.633 cv
cp
f
48.266 376.922 mo
48.262 377.605 48.211 378.227 48.105 378.789 cv
47.996 379.352 47.816 379.836 47.57 380.238 cv
47.316 380.645 46.988 380.957 46.59 381.176 cv
46.184 381.398 45.691 381.508 45.105 381.508 cv
44.547 381.508 44.074 381.41 43.695 381.211 cv
43.313 381.016 43.008 380.723 42.773 380.336 cv
42.539 379.949 42.371 379.477 42.277 378.91 cv
42.176 378.348 42.129 377.699 42.129 376.965 cv
42.129 376.293 42.184 375.672 42.293 375.105 cv
42.402 374.543 42.578 374.059 42.828 373.652 cv
43.07 373.25 43.395 372.937 43.801 372.711 cv
44.199 372.492 44.695 372.379 45.285 372.379 cv
45.844 372.379 46.316 372.48 46.699 372.676 cv
47.082 372.879 47.387 373.172 47.621 373.555 cv
47.852 373.945 48.02 374.418 48.117 374.98 cv
48.215 375.543 48.262 376.191 48.266 376.922 cv
cp
47.059 377.004 mo
47.055 376.562 47.039 376.164 47.012 375.812 cv
46.977 375.461 46.93 375.152 46.871 374.883 cv
46.805 374.613 46.727 374.383 46.629 374.187 cv
46.531 373.996 46.414 373.836 46.277 373.707 cv
46.137 373.582 45.977 373.488 45.805 373.43 cv
45.625 373.375 45.43 373.348 45.215 373.344 cv
44.824 373.348 44.508 373.437 44.27 373.621 cv
44.023 373.805 43.832 374.059 43.695 374.375 cv
43.555 374.695 43.461 375.066 43.41 375.496 cv
43.359 375.926 43.336 376.391 43.336 376.883 cv
43.336 377.547 43.367 378.109 43.438 378.57 cv
43.504 379.039 43.613 379.418 43.766 379.707 cv
43.91 380.004 44.102 380.215 44.332 380.344 cv
44.563 380.48 44.844 380.547 45.176 380.543 cv
45.43 380.547 45.652 380.508 45.848 380.422 cv
46.039 380.344 46.207 380.223 46.348 380.066 cv
46.488 379.914 46.602 379.73 46.695 379.516 cv
46.781 379.301 46.855 379.062 46.914 378.801 cv
46.965 378.543 47.004 378.262 47.027 377.957 cv
47.047 377.652 47.055 377.336 47.059 377.004 cv
cp
f
30.961 317.93 mo
48.684 317.93 li
48.684 335.02 li
30.961 335.02 li
cp
0 0 0 0 cmyk
ef
37.691 328.797 mo
37.688 328.949 37.664 329.07 37.621 329.156 cv
37.574 329.246 37.512 329.289 37.43 329.285 cv
36.43 329.285 li
36.43 331.148 li
36.43 331.187 36.418 331.219 36.402 331.242 cv
36.379 331.27 36.348 331.289 36.305 331.309 cv
36.254 331.324 36.191 331.336 36.121 331.348 cv
36.043 331.355 35.949 331.359 35.832 331.363 cv
35.715 331.359 35.617 331.355 35.547 331.348 cv
35.469 331.336 35.41 331.324 35.367 331.309 cv
35.32 331.289 35.289 331.27 35.273 331.242 cv
35.254 331.219 35.246 331.187 35.25 331.148 cv
35.25 329.285 li
31.621 329.285 li
31.563 329.289 31.52 329.281 31.484 329.266 cv
31.449 329.254 31.414 329.227 31.387 329.187 cv
31.355 329.152 31.336 329.102 31.324 329.031 cv
31.313 328.965 31.309 328.875 31.309 328.762 cv
31.309 328.68 31.309 328.602 31.316 328.531 cv
31.316 328.461 31.328 328.398 31.344 328.344 cv
31.355 328.289 31.371 328.234 31.398 328.18 cv
31.418 328.125 31.445 328.07 31.48 328.008 cv
34.641 322.621 li
34.66 322.586 34.695 322.555 34.742 322.527 cv
34.785 322.5 34.84 322.477 34.914 322.457 cv
34.98 322.441 35.066 322.43 35.172 322.418 cv
35.273 322.414 35.395 322.41 35.535 322.406 cv
35.684 322.41 35.82 322.414 35.938 322.426 cv
36.051 322.437 36.141 322.453 36.215 322.469 cv
36.281 322.488 36.336 322.512 36.375 322.543 cv
36.41 322.574 36.43 322.609 36.43 322.648 cv
36.43 328.312 li
37.43 328.312 li
37.504 328.316 37.566 328.355 37.617 328.434 cv
37.664 328.516 37.688 328.637 37.691 328.797 cv
cp
35.25 323.445 mo
35.238 323.445 li
32.387 328.312 li
35.25 328.312 li
cp
.629114 .553033 .543389 .289647 cmyk
f
40.605 330.574 mo
40.605 330.902 40.551 331.117 40.445 331.223 cv
40.336 331.328 40.141 331.379 39.859 331.383 cv
39.582 331.379 39.391 331.328 39.289 331.227 cv
39.18 331.121 39.129 330.91 39.133 330.594 cv
39.129 330.27 39.184 330.055 39.293 329.945 cv
39.398 329.84 39.594 329.785 39.879 329.785 cv
40.152 329.785 40.34 329.84 40.449 329.945 cv
40.551 330.051 40.605 330.262 40.605 330.574 cv
cp
f
47.93 328.469 mo
47.93 328.945 47.848 329.367 47.688 329.738 cv
47.527 330.109 47.301 330.422 47.012 330.676 cv
46.715 330.93 46.367 331.125 45.965 331.254 cv
45.559 331.387 45.109 331.449 44.617 331.449 cv
44.34 331.449 44.078 331.43 43.836 331.391 cv
43.586 331.352 43.367 331.305 43.18 331.25 cv
42.984 331.195 42.828 331.141 42.703 331.082 cv
42.578 331.031 42.5 330.988 42.469 330.953 cv
42.434 330.922 42.41 330.891 42.398 330.863 cv
42.383 330.836 42.367 330.805 42.359 330.762 cv
42.344 330.727 42.336 330.676 42.336 330.613 cv
42.328 330.555 42.328 330.484 42.328 330.402 cv
42.328 330.328 42.332 330.258 42.34 330.195 cv
42.348 330.133 42.359 330.082 42.379 330.043 cv
42.395 330.004 42.414 329.977 42.441 329.957 cv
42.465 329.941 42.496 329.934 42.527 329.93 cv
42.574 329.934 42.645 329.961 42.738 330.016 cv
42.832 330.074 42.961 330.137 43.125 330.203 cv
43.289 330.27 43.488 330.332 43.73 330.391 cv
43.965 330.449 44.25 330.477 44.586 330.477 cv
44.887 330.477 45.168 330.441 45.426 330.367 cv
45.68 330.297 45.902 330.184 46.09 330.027 cv
46.273 329.875 46.418 329.68 46.523 329.441 cv
46.629 329.207 46.68 328.918 46.684 328.578 cv
46.68 328.297 46.637 328.047 46.547 327.828 cv
46.457 327.609 46.32 327.43 46.137 327.285 cv
45.949 327.145 45.715 327.039 45.434 326.965 cv
45.148 326.895 44.809 326.855 44.422 326.855 cv
44.137 326.855 43.898 326.871 43.699 326.898 cv
43.496 326.93 43.309 326.945 43.137 326.941 cv
43.008 326.945 42.914 326.914 42.863 326.852 cv
42.805 326.793 42.777 326.68 42.781 326.508 cv
42.781 322.895 li
42.777 322.746 42.813 322.637 42.887 322.559 cv
42.953 322.488 43.055 322.449 43.191 322.449 cv
47.121 322.449 li
47.156 322.449 47.191 322.461 47.227 322.48 cv
47.258 322.504 47.285 322.535 47.313 322.574 cv
47.332 322.617 47.348 322.668 47.363 322.73 cv
47.371 322.797 47.379 322.875 47.383 322.957 cv
47.379 323.125 47.355 323.25 47.316 323.34 cv
47.27 323.434 47.211 323.48 47.133 323.477 cv
43.961 323.477 li
43.961 325.965 li
44.113 325.945 44.27 325.934 44.434 325.926 cv
44.59 325.922 44.777 325.918 44.992 325.918 cv
45.477 325.918 45.902 325.98 46.27 326.102 cv
46.633 326.223 46.938 326.395 47.188 326.613 cv
47.43 326.84 47.617 327.105 47.742 327.418 cv
47.867 327.734 47.93 328.086 47.93 328.469 cv
cp
f
30.961 267.871 mo
48.684 267.871 li
48.684 284.961 li
30.961 284.961 li
cp
0 0 0 0 cmyk
ef
37.543 278.391 mo
37.543 278.781 37.48 279.16 37.363 279.52 cv
37.238 279.887 37.055 280.203 36.813 280.477 cv
36.563 280.754 36.25 280.977 35.875 281.141 cv
35.492 281.309 35.047 281.391 34.531 281.391 cv
34.16 281.391 33.832 281.348 33.551 281.254 cv
33.266 281.168 33.02 281.035 32.809 280.863 cv
32.598 280.695 32.422 280.488 32.285 280.242 cv
32.145 279.996 32.031 279.715 31.949 279.398 cv
31.863 279.086 31.805 278.742 31.77 278.363 cv
31.73 277.992 31.711 277.59 31.715 277.156 cv
31.711 276.777 31.73 276.395 31.773 276.004 cv
31.813 275.621 31.887 275.246 31.992 274.879 cv
32.098 274.52 32.242 274.18 32.422 273.863 cv
32.602 273.547 32.828 273.27 33.102 273.035 cv
33.375 272.801 33.699 272.613 34.078 272.473 cv
34.457 272.336 34.898 272.27 35.402 272.266 cv
35.57 272.27 35.742 272.277 35.914 272.297 cv
36.086 272.32 36.246 272.352 36.395 272.383 cv
36.543 272.422 36.664 272.457 36.766 272.496 cv
36.863 272.535 36.93 272.57 36.965 272.594 cv
36.992 272.621 37.016 272.648 37.035 272.676 cv
37.051 272.707 37.066 272.738 37.074 272.773 cv
37.082 272.809 37.086 272.848 37.094 272.891 cv
37.094 272.934 37.098 272.988 37.102 273.051 cv
37.098 273.137 37.098 273.207 37.098 273.262 cv
37.094 273.324 37.082 273.371 37.07 273.406 cv
37.051 273.445 37.031 273.473 37.008 273.488 cv
36.98 273.508 36.949 273.516 36.91 273.516 cv
36.859 273.516 36.789 273.5 36.703 273.469 cv
36.613 273.437 36.508 273.402 36.387 273.359 cv
36.262 273.324 36.113 273.289 35.938 273.254 cv
35.762 273.227 35.559 273.211 35.328 273.207 cv
34.898 273.211 34.531 273.297 34.227 273.469 cv
33.922 273.641 33.672 273.875 33.477 274.168 cv
33.281 274.461 33.137 274.801 33.047 275.184 cv
32.949 275.574 32.895 275.977 32.887 276.395 cv
33.004 276.328 33.141 276.262 33.289 276.191 cv
33.438 276.125 33.598 276.062 33.773 276.004 cv
33.949 275.953 34.137 275.906 34.332 275.871 cv
34.527 275.84 34.738 275.824 34.965 275.82 cv
35.441 275.824 35.844 275.891 36.176 276.016 cv
36.504 276.148 36.77 276.328 36.977 276.559 cv
37.176 276.789 37.32 277.059 37.41 277.371 cv
37.496 277.684 37.543 278.023 37.543 278.391 cv
cp
36.348 278.5 mo
36.348 278.238 36.32 277.996 36.27 277.777 cv
36.215 277.562 36.125 277.379 36.004 277.223 cv
35.879 277.074 35.715 276.957 35.512 276.875 cv
35.301 276.793 35.047 276.75 34.75 276.75 cv
34.578 276.75 34.41 276.766 34.242 276.797 cv
34.07 276.828 33.906 276.871 33.75 276.918 cv
33.59 276.973 33.441 277.035 33.301 277.105 cv
33.156 277.18 33.023 277.254 32.906 277.332 cv
32.902 277.926 32.941 278.422 33.02 278.816 cv
33.094 279.215 33.203 279.531 33.348 279.77 cv
33.492 280.012 33.672 280.184 33.887 280.285 cv
34.102 280.391 34.352 280.441 34.641 280.437 cv
34.93 280.441 35.184 280.387 35.398 280.273 cv
35.613 280.168 35.789 280.02 35.934 279.832 cv
36.074 279.648 36.18 279.441 36.246 279.211 cv
36.313 278.98 36.348 278.746 36.348 278.5 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.605 280.516 mo
40.605 280.844 40.551 281.059 40.445 281.164 cv
40.336 281.27 40.141 281.32 39.859 281.324 cv
39.582 281.32 39.391 281.27 39.289 281.168 cv
39.18 281.062 39.129 280.852 39.133 280.535 cv
39.129 280.211 39.184 279.996 39.293 279.887 cv
39.398 279.781 39.594 279.727 39.879 279.727 cv
40.152 279.727 40.34 279.781 40.449 279.887 cv
40.551 279.992 40.605 280.203 40.605 280.516 cv
cp
f
48.266 276.805 mo
48.262 277.488 48.211 278.109 48.105 278.672 cv
47.996 279.234 47.816 279.719 47.57 280.121 cv
47.316 280.527 46.988 280.84 46.59 281.059 cv
46.184 281.281 45.691 281.391 45.105 281.391 cv
44.547 281.391 44.074 281.293 43.695 281.094 cv
43.313 280.898 43.008 280.605 42.773 280.219 cv
42.539 279.832 42.371 279.359 42.277 278.793 cv
42.176 278.23 42.129 277.582 42.129 276.848 cv
42.129 276.176 42.184 275.555 42.293 274.988 cv
42.402 274.426 42.578 273.941 42.828 273.535 cv
43.07 273.133 43.395 272.82 43.801 272.594 cv
44.199 272.375 44.695 272.262 45.285 272.262 cv
45.844 272.262 46.316 272.363 46.699 272.559 cv
47.082 272.762 47.387 273.055 47.621 273.437 cv
47.852 273.828 48.02 274.301 48.117 274.863 cv
48.215 275.426 48.262 276.074 48.266 276.805 cv
cp
47.059 276.887 mo
47.055 276.445 47.039 276.047 47.012 275.695 cv
46.977 275.344 46.93 275.035 46.871 274.766 cv
46.805 274.496 46.727 274.266 46.629 274.07 cv
46.531 273.879 46.414 273.719 46.277 273.59 cv
46.137 273.465 45.977 273.371 45.805 273.312 cv
45.625 273.258 45.43 273.23 45.215 273.227 cv
44.824 273.23 44.508 273.32 44.27 273.504 cv
44.023 273.687 43.832 273.941 43.695 274.258 cv
43.555 274.578 43.461 274.949 43.41 275.379 cv
43.359 275.809 43.336 276.273 43.336 276.766 cv
43.336 277.43 43.367 277.992 43.438 278.453 cv
43.504 278.922 43.613 279.301 43.766 279.59 cv
43.91 279.887 44.102 280.098 44.332 280.227 cv
44.563 280.363 44.844 280.43 45.176 280.426 cv
45.43 280.43 45.652 280.391 45.848 280.305 cv
46.039 280.227 46.207 280.105 46.348 279.949 cv
46.488 279.797 46.602 279.613 46.695 279.398 cv
46.781 279.184 46.855 278.945 46.914 278.684 cv
46.965 278.426 47.004 278.145 47.027 277.84 cv
47.047 277.535 47.055 277.219 47.059 276.887 cv
cp
f
30.961 217.809 mo
48.684 217.809 li
48.684 234.899 li
30.961 234.899 li
cp
0 0 0 0 cmyk
ef
37.445 222.809 mo
37.441 222.895 37.438 222.969 37.434 223.031 cv
37.426 223.102 37.418 223.164 37.406 223.223 cv
37.395 223.289 37.379 223.348 37.359 223.402 cv
37.336 223.461 37.313 223.523 37.289 223.582 cv
34.094 230.945 li
34.066 231.004 34.039 231.047 34.008 231.078 cv
33.973 231.113 33.93 231.141 33.875 231.16 cv
33.82 231.18 33.75 231.191 33.672 231.203 cv
33.586 231.207 33.488 231.211 33.371 231.215 cv
33.215 231.211 33.094 231.203 33.008 231.191 cv
32.922 231.176 32.859 231.16 32.82 231.129 cv
32.781 231.102 32.762 231.062 32.77 231.02 cv
32.77 230.977 32.785 230.926 32.816 230.863 cv
36.176 223.336 li
31.918 223.336 li
31.832 223.34 31.766 223.293 31.723 223.199 cv
31.68 223.109 31.66 222.98 31.66 222.816 cv
31.66 222.73 31.664 222.656 31.676 222.59 cv
31.688 222.527 31.703 222.473 31.727 222.43 cv
31.746 222.387 31.773 222.355 31.809 222.332 cv
31.84 222.312 31.879 222.301 31.918 222.301 cv
37.09 222.301 li
37.148 222.301 37.203 222.309 37.254 222.324 cv
37.301 222.34 37.336 222.367 37.363 222.406 cv
37.387 222.445 37.406 222.5 37.422 222.562 cv
37.434 222.629 37.441 222.711 37.445 222.809 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.605 230.426 mo
40.605 230.754 40.551 230.969 40.445 231.074 cv
40.336 231.18 40.141 231.23 39.859 231.234 cv
39.582 231.23 39.391 231.18 39.289 231.078 cv
39.18 230.973 39.129 230.762 39.133 230.445 cv
39.129 230.121 39.184 229.906 39.293 229.797 cv
39.398 229.691 39.594 229.637 39.879 229.637 cv
40.152 229.637 40.34 229.691 40.449 229.797 cv
40.551 229.902 40.605 230.113 40.605 230.426 cv
cp
f
47.93 228.32 mo
47.93 228.797 47.848 229.219 47.688 229.59 cv
47.527 229.961 47.301 230.273 47.012 230.527 cv
46.715 230.781 46.367 230.977 45.965 231.105 cv
45.559 231.238 45.109 231.301 44.617 231.301 cv
44.34 231.301 44.078 231.281 43.836 231.242 cv
43.586 231.203 43.367 231.156 43.18 231.102 cv
42.984 231.047 42.828 230.992 42.703 230.934 cv
42.578 230.883 42.5 230.84 42.469 230.805 cv
42.434 230.773 42.41 230.742 42.398 230.715 cv
42.383 230.687 42.367 230.656 42.359 230.613 cv
42.344 230.578 42.336 230.527 42.336 230.465 cv
42.328 230.406 42.328 230.336 42.328 230.254 cv
42.328 230.18 42.332 230.109 42.34 230.047 cv
42.348 229.984 42.359 229.934 42.379 229.895 cv
42.395 229.855 42.414 229.828 42.441 229.809 cv
42.465 229.793 42.496 229.785 42.527 229.781 cv
42.574 229.785 42.645 229.812 42.738 229.867 cv
42.832 229.926 42.961 229.988 43.125 230.055 cv
43.289 230.121 43.488 230.184 43.73 230.242 cv
43.965 230.301 44.25 230.328 44.586 230.328 cv
44.887 230.328 45.168 230.293 45.426 230.219 cv
45.68 230.148 45.902 230.035 46.09 229.879 cv
46.273 229.727 46.418 229.531 46.523 229.293 cv
46.629 229.059 46.68 228.77 46.684 228.43 cv
46.68 228.148 46.637 227.898 46.547 227.68 cv
46.457 227.461 46.32 227.281 46.137 227.137 cv
45.949 226.996 45.715 226.891 45.434 226.816 cv
45.148 226.746 44.809 226.707 44.422 226.707 cv
44.137 226.707 43.898 226.723 43.699 226.75 cv
43.496 226.781 43.309 226.797 43.137 226.793 cv
43.008 226.797 42.914 226.766 42.863 226.703 cv
42.805 226.645 42.777 226.531 42.781 226.359 cv
42.781 222.746 li
42.777 222.598 42.813 222.488 42.887 222.41 cv
42.953 222.34 43.055 222.301 43.191 222.301 cv
47.121 222.301 li
47.156 222.301 47.191 222.312 47.227 222.332 cv
47.258 222.355 47.285 222.387 47.313 222.426 cv
47.332 222.469 47.348 222.52 47.363 222.582 cv
47.371 222.648 47.379 222.727 47.383 222.809 cv
47.379 222.977 47.355 223.102 47.316 223.191 cv
47.27 223.285 47.211 223.332 47.133 223.328 cv
43.961 223.328 li
43.961 225.816 li
44.113 225.797 44.27 225.785 44.434 225.777 cv
44.59 225.773 44.777 225.77 44.992 225.77 cv
45.477 225.77 45.902 225.832 46.27 225.953 cv
46.633 226.074 46.938 226.246 47.188 226.465 cv
47.43 226.691 47.617 226.957 47.742 227.27 cv
47.867 227.586 47.93 227.937 47.93 228.32 cv
cp
f
30.961 167.75 mo
48.684 167.75 li
48.684 184.84 li
30.961 184.84 li
cp
0 0 0 0 cmyk
ef
37.383 176.316 mo
37.379 176.703 37.355 177.09 37.313 177.48 cv
37.266 177.875 37.188 178.254 37.082 178.617 cv
36.969 178.98 36.824 179.32 36.641 179.637 cv
36.453 179.957 36.219 180.238 35.941 180.473 cv
35.656 180.715 35.32 180.898 34.938 181.031 cv
34.547 181.164 34.102 181.23 33.594 181.23 cv
33.395 181.23 33.203 181.215 33.02 181.191 cv
32.832 181.164 32.664 181.137 32.52 181.102 cv
32.367 181.066 32.242 181.027 32.145 180.984 cv
32.043 180.945 31.969 180.906 31.926 180.863 cv
31.879 180.824 31.848 180.77 31.828 180.695 cv
31.805 180.625 31.793 180.527 31.797 180.41 cv
31.793 180.309 31.797 180.23 31.805 180.172 cv
31.809 180.113 31.82 180.066 31.836 180.035 cv
31.852 180.004 31.871 179.984 31.895 179.969 cv
31.918 179.961 31.949 179.953 31.988 179.949 cv
32.035 179.953 32.105 179.969 32.199 180 cv
32.289 180.035 32.402 180.074 32.547 180.113 cv
32.684 180.156 32.848 180.195 33.035 180.227 cv
33.219 180.266 33.43 180.281 33.668 180.277 cv
34.109 180.281 34.488 180.195 34.809 180.023 cv
35.121 179.852 35.383 179.625 35.586 179.336 cv
35.789 179.051 35.938 178.715 36.039 178.332 cv
36.137 177.953 36.191 177.555 36.203 177.133 cv
35.957 177.277 35.668 177.402 35.332 177.508 cv
34.992 177.621 34.605 177.676 34.168 177.672 cv
33.676 177.676 33.262 177.609 32.926 177.473 cv
32.59 177.34 32.316 177.156 32.113 176.922 cv
31.906 176.691 31.762 176.414 31.676 176.09 cv
31.586 175.773 31.543 175.422 31.543 175.043 cv
31.543 174.652 31.598 174.281 31.715 173.922 cv
31.824 173.57 32.004 173.258 32.25 172.988 cv
32.488 172.719 32.797 172.504 33.176 172.344 cv
33.547 172.184 33.996 172.102 34.52 172.102 cv
34.887 172.102 35.211 172.148 35.5 172.242 cv
35.781 172.336 36.031 172.473 36.246 172.648 cv
36.453 172.824 36.633 173.035 36.781 173.285 cv
36.926 173.535 37.043 173.816 37.133 174.129 cv
37.219 174.445 37.281 174.789 37.324 175.156 cv
37.359 175.527 37.379 175.914 37.383 176.316 cv
cp
36.184 176.187 mo
36.184 175.605 36.145 175.113 36.066 174.711 cv
35.988 174.312 35.871 173.988 35.723 173.738 cv
35.57 173.492 35.387 173.312 35.168 173.203 cv
34.945 173.094 34.691 173.039 34.41 173.039 cv
34.105 173.039 33.852 173.094 33.645 173.203 cv
33.434 173.312 33.262 173.457 33.129 173.633 cv
32.992 173.816 32.891 174.02 32.828 174.246 cv
32.762 174.477 32.73 174.715 32.734 174.953 cv
32.73 175.227 32.762 175.473 32.82 175.691 cv
32.875 175.918 32.965 176.105 33.098 176.262 cv
33.223 176.418 33.391 176.539 33.598 176.625 cv
33.801 176.711 34.055 176.754 34.359 176.75 cv
34.699 176.754 35.031 176.703 35.355 176.598 cv
35.672 176.496 35.949 176.359 36.184 176.187 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.605 180.355 mo
40.605 180.684 40.551 180.898 40.445 181.004 cv
40.336 181.109 40.141 181.16 39.859 181.164 cv
39.582 181.16 39.391 181.109 39.289 181.008 cv
39.18 180.902 39.129 180.691 39.133 180.375 cv
39.129 180.051 39.184 179.836 39.293 179.727 cv
39.398 179.621 39.594 179.566 39.879 179.566 cv
40.152 179.566 40.34 179.621 40.449 179.727 cv
40.551 179.832 40.605 180.043 40.605 180.355 cv
cp
f
48.266 176.645 mo
48.262 177.328 48.211 177.949 48.105 178.512 cv
47.996 179.074 47.816 179.559 47.57 179.961 cv
47.316 180.367 46.988 180.68 46.59 180.898 cv
46.184 181.121 45.691 181.23 45.105 181.23 cv
44.547 181.23 44.074 181.133 43.695 180.934 cv
43.313 180.738 43.008 180.445 42.773 180.059 cv
42.539 179.672 42.371 179.199 42.277 178.633 cv
42.176 178.07 42.129 177.422 42.129 176.687 cv
42.129 176.016 42.184 175.395 42.293 174.828 cv
42.402 174.266 42.578 173.781 42.828 173.375 cv
43.07 172.973 43.395 172.66 43.801 172.434 cv
44.199 172.215 44.695 172.102 45.285 172.102 cv
45.844 172.102 46.316 172.203 46.699 172.398 cv
47.082 172.602 47.387 172.895 47.621 173.277 cv
47.852 173.668 48.02 174.141 48.117 174.703 cv
48.215 175.266 48.262 175.914 48.266 176.645 cv
cp
47.059 176.727 mo
47.055 176.285 47.039 175.887 47.012 175.535 cv
46.977 175.184 46.93 174.875 46.871 174.605 cv
46.805 174.336 46.727 174.105 46.629 173.91 cv
46.531 173.719 46.414 173.559 46.277 173.43 cv
46.137 173.305 45.977 173.211 45.805 173.152 cv
45.625 173.098 45.43 173.07 45.215 173.066 cv
44.824 173.07 44.508 173.16 44.27 173.344 cv
44.023 173.527 43.832 173.781 43.695 174.098 cv
43.555 174.418 43.461 174.789 43.41 175.219 cv
43.359 175.648 43.336 176.113 43.336 176.605 cv
43.336 177.27 43.367 177.832 43.438 178.293 cv
43.504 178.762 43.613 179.141 43.766 179.43 cv
43.91 179.727 44.102 179.937 44.332 180.066 cv
44.563 180.203 44.844 180.27 45.176 180.266 cv
45.43 180.27 45.652 180.23 45.848 180.145 cv
46.039 180.066 46.207 179.945 46.348 179.789 cv
46.488 179.637 46.602 179.453 46.695 179.238 cv
46.781 179.023 46.855 178.785 46.914 178.523 cv
46.965 178.266 47.004 177.984 47.027 177.68 cv
47.047 177.375 47.055 177.059 47.059 176.727 cv
cp
f
23.859 117.691 mo
48.679 117.691 li
48.679 134.781 li
23.859 134.781 li
cp
0 0 0 0 cmyk
ef
30.234 130.574 mo
30.23 130.664 30.223 130.734 30.211 130.793 cv
30.195 130.855 30.176 130.906 30.156 130.937 cv
30.133 130.977 30.109 131 30.078 131.016 cv
30.047 131.031 30.016 131.039 29.988 131.039 cv
25.352 131.039 li
25.316 131.039 25.289 131.031 25.262 131.016 cv
25.234 131 25.207 130.977 25.184 130.937 cv
25.156 130.906 25.137 130.855 25.125 130.793 cv
25.109 130.734 25.102 130.664 25.105 130.574 cv
25.102 130.496 25.109 130.422 25.125 130.359 cv
25.137 130.301 25.152 130.254 25.176 130.215 cv
25.191 130.18 25.219 130.148 25.25 130.125 cv
25.281 130.105 25.313 130.098 25.352 130.094 cv
27.203 130.094 li
27.203 123.348 li
25.488 124.367 li
25.398 124.418 25.328 124.445 25.281 124.453 cv
25.227 124.461 25.184 124.453 25.152 124.422 cv
25.117 124.395 25.098 124.344 25.086 124.273 cv
25.074 124.207 25.066 124.121 25.07 124.012 cv
25.066 123.937 25.07 123.871 25.082 123.812 cv
25.086 123.762 25.098 123.715 25.113 123.676 cv
25.125 123.641 25.145 123.609 25.168 123.582 cv
25.191 123.555 25.223 123.527 25.27 123.5 cv
27.313 122.187 li
27.328 122.176 27.348 122.164 27.379 122.156 cv
27.402 122.148 27.438 122.141 27.484 122.129 cv
27.523 122.121 27.574 122.113 27.629 122.109 cv
27.684 122.109 27.75 122.109 27.836 122.105 cv
27.941 122.109 28.035 122.113 28.109 122.121 cv
28.18 122.129 28.234 122.145 28.281 122.16 cv
28.32 122.18 28.348 122.199 28.363 122.223 cv
28.371 122.25 28.379 122.273 28.383 122.297 cv
28.383 130.094 li
29.988 130.094 li
30.023 130.098 30.059 130.105 30.09 130.125 cv
30.121 130.148 30.145 130.18 30.168 130.215 cv
30.184 130.254 30.199 130.301 30.215 130.359 cv
30.223 130.422 30.23 130.496 30.234 130.574 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.629 126.582 mo
37.625 127.266 37.574 127.887 37.469 128.449 cv
37.359 129.012 37.18 129.496 36.934 129.898 cv
36.68 130.305 36.352 130.617 35.953 130.836 cv
35.547 131.059 35.055 131.168 34.469 131.168 cv
33.91 131.168 33.438 131.07 33.059 130.871 cv
32.676 130.676 32.371 130.383 32.137 129.996 cv
31.902 129.609 31.734 129.137 31.641 128.57 cv
31.539 128.008 31.492 127.359 31.492 126.625 cv
31.492 125.953 31.547 125.332 31.656 124.766 cv
31.766 124.203 31.941 123.719 32.191 123.312 cv
32.434 122.91 32.758 122.598 33.164 122.371 cv
33.563 122.152 34.059 122.039 34.648 122.039 cv
35.207 122.039 35.68 122.141 36.063 122.336 cv
36.445 122.539 36.75 122.832 36.984 123.215 cv
37.215 123.605 37.383 124.078 37.48 124.641 cv
37.578 125.203 37.625 125.852 37.629 126.582 cv
cp
36.422 126.664 mo
36.418 126.223 36.402 125.824 36.375 125.473 cv
36.34 125.121 36.293 124.812 36.234 124.543 cv
36.168 124.273 36.09 124.043 35.992 123.848 cv
35.895 123.656 35.777 123.496 35.641 123.367 cv
35.5 123.242 35.34 123.148 35.168 123.09 cv
34.988 123.035 34.793 123.008 34.578 123.004 cv
34.188 123.008 33.871 123.098 33.633 123.281 cv
33.387 123.465 33.195 123.719 33.059 124.035 cv
32.918 124.355 32.824 124.727 32.773 125.156 cv
32.723 125.586 32.699 126.051 32.699 126.543 cv
32.699 127.207 32.73 127.77 32.801 128.23 cv
32.867 128.699 32.977 129.078 33.129 129.367 cv
33.273 129.664 33.465 129.875 33.695 130.004 cv
33.926 130.141 34.207 130.207 34.539 130.203 cv
34.793 130.207 35.016 130.168 35.211 130.082 cv
35.402 130.004 35.57 129.883 35.711 129.727 cv
35.852 129.574 35.965 129.391 36.059 129.176 cv
36.145 128.961 36.219 128.723 36.277 128.461 cv
36.328 128.203 36.367 127.922 36.391 127.617 cv
36.41 127.312 36.418 126.996 36.422 126.664 cv
cp
f
40.555 130.293 mo
40.555 130.621 40.5 130.836 40.395 130.941 cv
40.285 131.047 40.09 131.098 39.809 131.102 cv
39.531 131.098 39.34 131.047 39.238 130.945 cv
39.129 130.84 39.078 130.629 39.082 130.312 cv
39.078 129.988 39.133 129.773 39.242 129.664 cv
39.348 129.559 39.543 129.504 39.828 129.504 cv
40.102 129.504 40.289 129.559 40.398 129.664 cv
40.5 129.77 40.555 129.98 40.555 130.293 cv
cp
f
47.918 128.187 mo
47.918 128.664 47.836 129.086 47.676 129.457 cv
47.516 129.828 47.289 130.141 47 130.395 cv
46.703 130.648 46.355 130.844 45.953 130.973 cv
45.547 131.105 45.098 131.168 44.605 131.168 cv
44.328 131.168 44.066 131.148 43.824 131.109 cv
43.574 131.07 43.355 131.023 43.168 130.969 cv
42.973 130.914 42.816 130.859 42.691 130.801 cv
42.566 130.75 42.488 130.707 42.457 130.672 cv
42.422 130.641 42.398 130.609 42.387 130.582 cv
42.371 130.555 42.355 130.523 42.348 130.48 cv
42.332 130.445 42.324 130.395 42.324 130.332 cv
42.316 130.273 42.316 130.203 42.316 130.121 cv
42.316 130.047 42.32 129.977 42.328 129.914 cv
42.336 129.852 42.348 129.801 42.367 129.762 cv
42.383 129.723 42.402 129.695 42.43 129.676 cv
42.453 129.66 42.484 129.652 42.516 129.648 cv
42.563 129.652 42.633 129.68 42.727 129.734 cv
42.82 129.793 42.949 129.855 43.113 129.922 cv
43.277 129.988 43.477 130.051 43.719 130.109 cv
43.953 130.168 44.238 130.195 44.574 130.195 cv
44.875 130.195 45.156 130.16 45.414 130.086 cv
45.668 130.016 45.891 129.902 46.078 129.746 cv
46.262 129.594 46.406 129.398 46.512 129.16 cv
46.617 128.926 46.668 128.637 46.672 128.297 cv
46.668 128.016 46.625 127.766 46.535 127.547 cv
46.445 127.328 46.309 127.148 46.125 127.004 cv
45.938 126.863 45.703 126.758 45.422 126.684 cv
45.137 126.613 44.797 126.574 44.41 126.574 cv
44.125 126.574 43.887 126.59 43.688 126.617 cv
43.484 126.648 43.297 126.664 43.125 126.66 cv
42.996 126.664 42.902 126.633 42.852 126.57 cv
42.793 126.512 42.766 126.398 42.77 126.227 cv
42.77 122.613 li
42.766 122.465 42.801 122.355 42.875 122.277 cv
42.941 122.207 43.043 122.168 43.18 122.168 cv
47.109 122.168 li
47.145 122.168 47.18 122.18 47.215 122.199 cv
47.246 122.223 47.273 122.254 47.301 122.293 cv
47.32 122.336 47.336 122.387 47.352 122.449 cv
47.359 122.516 47.367 122.594 47.371 122.676 cv
47.367 122.844 47.344 122.969 47.305 123.059 cv
47.258 123.152 47.199 123.199 47.121 123.195 cv
43.949 123.195 li
43.949 125.684 li
44.102 125.664 44.258 125.652 44.422 125.645 cv
44.578 125.641 44.766 125.637 44.98 125.637 cv
45.465 125.637 45.891 125.699 46.258 125.82 cv
46.621 125.941 46.926 126.113 47.176 126.332 cv
47.418 126.559 47.605 126.824 47.73 127.137 cv
47.855 127.453 47.918 127.805 47.918 128.187 cv
cp
f
23.859 67.621 mo
48.679 67.621 li
48.679 84.711 li
23.859 84.711 li
cp
0 0 0 0 cmyk
ef
30.234 80.516 mo
30.23 80.605 30.223 80.676 30.211 80.734 cv
30.195 80.797 30.176 80.848 30.156 80.879 cv
30.133 80.918 30.109 80.941 30.078 80.957 cv
30.047 80.973 30.016 80.98 29.988 80.98 cv
25.352 80.98 li
25.316 80.98 25.289 80.973 25.262 80.957 cv
25.234 80.941 25.207 80.918 25.184 80.879 cv
25.156 80.848 25.137 80.797 25.125 80.734 cv
25.109 80.676 25.102 80.605 25.105 80.516 cv
25.102 80.437 25.109 80.363 25.125 80.301 cv
25.137 80.242 25.152 80.195 25.176 80.156 cv
25.191 80.121 25.219 80.09 25.25 80.066 cv
25.281 80.047 25.313 80.039 25.352 80.035 cv
27.203 80.035 li
27.203 73.289 li
25.488 74.309 li
25.398 74.359 25.328 74.387 25.281 74.395 cv
25.227 74.402 25.184 74.395 25.152 74.363 cv
25.117 74.336 25.098 74.285 25.086 74.215 cv
25.074 74.148 25.066 74.062 25.07 73.953 cv
25.066 73.879 25.07 73.812 25.082 73.754 cv
25.086 73.703 25.098 73.656 25.113 73.617 cv
25.125 73.582 25.145 73.551 25.168 73.523 cv
25.191 73.496 25.223 73.469 25.27 73.441 cv
27.313 72.129 li
27.328 72.117 27.348 72.105 27.379 72.098 cv
27.402 72.09 27.438 72.082 27.484 72.07 cv
27.523 72.062 27.574 72.055 27.629 72.051 cv
27.684 72.051 27.75 72.051 27.836 72.047 cv
27.941 72.051 28.035 72.055 28.109 72.062 cv
28.18 72.07 28.234 72.086 28.281 72.102 cv
28.32 72.121 28.348 72.141 28.363 72.164 cv
28.371 72.191 28.379 72.215 28.383 72.238 cv
28.383 80.035 li
29.988 80.035 li
30.023 80.039 30.059 80.047 30.09 80.066 cv
30.121 80.09 30.145 80.121 30.168 80.156 cv
30.184 80.195 30.199 80.242 30.215 80.301 cv
30.223 80.363 30.23 80.437 30.234 80.516 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.336 80.473 mo
37.332 80.559 37.328 80.633 37.316 80.695 cv
37.305 80.762 37.289 80.816 37.27 80.855 cv
37.246 80.902 37.219 80.934 37.188 80.949 cv
37.152 80.973 37.113 80.98 37.074 80.98 cv
32.172 80.98 li
32.109 80.98 32.051 80.973 32.004 80.957 cv
31.953 80.941 31.914 80.918 31.879 80.879 cv
31.844 80.848 31.816 80.793 31.805 80.723 cv
31.785 80.652 31.777 80.566 31.781 80.465 cv
31.777 80.375 31.781 80.297 31.789 80.227 cv
31.793 80.16 31.809 80.102 31.836 80.047 cv
31.859 79.996 31.891 79.941 31.926 79.887 cv
31.961 79.836 32.004 79.781 32.063 79.719 cv
33.836 77.895 li
34.246 77.477 34.574 77.102 34.824 76.766 cv
35.07 76.437 35.262 76.133 35.395 75.855 cv
35.527 75.582 35.613 75.332 35.66 75.105 cv
35.699 74.883 35.723 74.672 35.723 74.477 cv
35.723 74.281 35.688 74.098 35.621 73.918 cv
35.555 73.746 35.461 73.59 35.336 73.453 cv
35.211 73.324 35.055 73.219 34.867 73.137 cv
34.68 73.062 34.461 73.023 34.215 73.02 cv
33.926 73.023 33.668 73.062 33.441 73.137 cv
33.211 73.219 33.012 73.305 32.84 73.391 cv
32.668 73.484 32.523 73.566 32.406 73.645 cv
32.289 73.723 32.203 73.762 32.152 73.762 cv
32.117 73.762 32.086 73.754 32.063 73.734 cv
32.031 73.719 32.012 73.687 31.996 73.645 cv
31.98 73.605 31.965 73.551 31.957 73.48 cv
31.945 73.414 31.941 73.332 31.945 73.234 cv
31.941 73.168 31.945 73.109 31.953 73.059 cv
31.957 73.008 31.965 72.965 31.977 72.926 cv
31.984 72.891 32 72.855 32.02 72.824 cv
32.039 72.793 32.074 72.754 32.133 72.703 cv
32.184 72.656 32.277 72.59 32.414 72.508 cv
32.547 72.426 32.719 72.348 32.922 72.266 cv
33.125 72.187 33.348 72.117 33.594 72.062 cv
33.836 72.008 34.094 71.98 34.367 71.98 cv
34.793 71.98 35.168 72.043 35.492 72.164 cv
35.813 72.285 36.078 72.449 36.293 72.66 cv
36.504 72.871 36.664 73.117 36.77 73.391 cv
36.875 73.672 36.93 73.969 36.93 74.281 cv
36.93 74.57 36.902 74.852 36.852 75.129 cv
36.801 75.414 36.695 75.719 36.535 76.043 cv
36.371 76.371 36.137 76.734 35.832 77.133 cv
35.523 77.535 35.117 77.996 34.613 78.512 cv
33.207 79.98 li
37.066 79.98 li
37.098 79.984 37.133 79.996 37.172 80.012 cv
37.203 80.035 37.234 80.066 37.262 80.105 cv
37.285 80.148 37.305 80.199 37.316 80.258 cv
37.328 80.324 37.332 80.395 37.336 80.473 cv
cp
f
40.555 80.234 mo
40.555 80.562 40.5 80.777 40.395 80.883 cv
40.285 80.988 40.09 81.039 39.809 81.043 cv
39.531 81.039 39.34 80.988 39.238 80.887 cv
39.129 80.781 39.078 80.57 39.082 80.254 cv
39.078 79.93 39.133 79.715 39.242 79.605 cv
39.348 79.5 39.543 79.445 39.828 79.445 cv
40.102 79.445 40.289 79.5 40.398 79.605 cv
40.5 79.711 40.555 79.922 40.555 80.234 cv
cp
f
48.254 76.523 mo
48.25 77.207 48.199 77.828 48.094 78.391 cv
47.984 78.953 47.805 79.437 47.559 79.84 cv
47.305 80.246 46.977 80.559 46.578 80.777 cv
46.172 81 45.68 81.109 45.094 81.109 cv
44.535 81.109 44.063 81.012 43.684 80.812 cv
43.301 80.617 42.996 80.324 42.762 79.937 cv
42.527 79.551 42.359 79.078 42.266 78.512 cv
42.164 77.949 42.117 77.301 42.117 76.566 cv
42.117 75.895 42.172 75.273 42.281 74.707 cv
42.391 74.145 42.566 73.66 42.816 73.254 cv
43.059 72.852 43.383 72.539 43.789 72.312 cv
44.188 72.094 44.684 71.98 45.273 71.98 cv
45.832 71.98 46.305 72.082 46.688 72.277 cv
47.07 72.48 47.375 72.773 47.609 73.156 cv
47.84 73.547 48.008 74.02 48.105 74.582 cv
48.203 75.145 48.25 75.793 48.254 76.523 cv
cp
47.047 76.605 mo
47.043 76.164 47.027 75.766 47 75.414 cv
46.965 75.062 46.918 74.754 46.859 74.484 cv
46.793 74.215 46.715 73.984 46.617 73.789 cv
46.52 73.598 46.402 73.437 46.266 73.309 cv
46.125 73.184 45.965 73.09 45.793 73.031 cv
45.613 72.977 45.418 72.949 45.203 72.945 cv
44.813 72.949 44.496 73.039 44.258 73.223 cv
44.012 73.406 43.82 73.66 43.684 73.977 cv
43.543 74.297 43.449 74.668 43.398 75.098 cv
43.348 75.527 43.324 75.992 43.324 76.484 cv
43.324 77.148 43.355 77.711 43.426 78.172 cv
43.492 78.641 43.602 79.02 43.754 79.309 cv
43.898 79.605 44.09 79.816 44.32 79.945 cv
44.551 80.082 44.832 80.148 45.164 80.145 cv
45.418 80.148 45.641 80.109 45.836 80.023 cv
46.027 79.945 46.195 79.824 46.336 79.668 cv
46.477 79.516 46.59 79.332 46.684 79.117 cv
46.77 78.902 46.844 78.664 46.902 78.402 cv
46.953 78.145 46.992 77.863 47.016 77.559 cv
47.035 77.254 47.043 76.937 47.047 76.605 cv
cp
f
23.859 17.559 mo
48.679 17.559 li
48.679 34.649 li
23.859 34.649 li
cp
0 0 0 0 cmyk
ef
30.234 30.426 mo
30.23 30.516 30.223 30.586 30.211 30.645 cv
30.195 30.707 30.176 30.758 30.156 30.789 cv
30.133 30.828 30.109 30.852 30.078 30.867 cv
30.047 30.883 30.016 30.891 29.988 30.891 cv
25.352 30.891 li
25.316 30.891 25.289 30.883 25.262 30.867 cv
25.234 30.852 25.207 30.828 25.184 30.789 cv
25.156 30.758 25.137 30.707 25.125 30.645 cv
25.109 30.586 25.102 30.516 25.105 30.426 cv
25.102 30.348 25.109 30.273 25.125 30.211 cv
25.137 30.152 25.152 30.105 25.176 30.066 cv
25.191 30.031 25.219 30 25.25 29.977 cv
25.281 29.957 25.313 29.949 25.352 29.945 cv
27.203 29.945 li
27.203 23.199 li
25.488 24.219 li
25.398 24.27 25.328 24.297 25.281 24.305 cv
25.227 24.312 25.184 24.305 25.152 24.273 cv
25.117 24.246 25.098 24.195 25.086 24.125 cv
25.074 24.059 25.066 23.973 25.07 23.863 cv
25.066 23.789 25.07 23.723 25.082 23.664 cv
25.086 23.613 25.098 23.566 25.113 23.527 cv
25.125 23.492 25.145 23.461 25.168 23.434 cv
25.191 23.406 25.223 23.379 25.27 23.352 cv
27.313 22.039 li
27.328 22.027 27.348 22.016 27.379 22.008 cv
27.402 22 27.438 21.992 27.484 21.98 cv
27.523 21.973 27.574 21.965 27.629 21.961 cv
27.684 21.961 27.75 21.961 27.836 21.957 cv
27.941 21.961 28.035 21.965 28.109 21.973 cv
28.18 21.98 28.234 21.996 28.281 22.012 cv
28.32 22.031 28.348 22.051 28.363 22.074 cv
28.371 22.102 28.379 22.125 28.383 22.148 cv
28.383 29.945 li
29.988 29.945 li
30.023 29.949 30.059 29.957 30.09 29.977 cv
30.121 30 30.145 30.031 30.168 30.066 cv
30.184 30.105 30.199 30.152 30.215 30.211 cv
30.223 30.273 30.23 30.348 30.234 30.426 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.266 28.355 mo
37.262 28.766 37.191 29.133 37.051 29.457 cv
36.906 29.785 36.703 30.066 36.441 30.297 cv
36.176 30.531 35.848 30.707 35.461 30.832 cv
35.07 30.957 34.633 31.02 34.148 31.02 cv
33.844 31.02 33.566 30.992 33.313 30.945 cv
33.051 30.898 32.82 30.848 32.625 30.777 cv
32.422 30.715 32.258 30.645 32.125 30.574 cv
31.992 30.504 31.906 30.453 31.875 30.418 cv
31.836 30.391 31.813 30.359 31.797 30.324 cv
31.777 30.293 31.758 30.254 31.746 30.207 cv
31.73 30.164 31.723 30.109 31.715 30.039 cv
31.707 29.977 31.703 29.895 31.707 29.793 cv
31.703 29.633 31.719 29.52 31.754 29.453 cv
31.785 29.391 31.832 29.355 31.895 29.355 cv
31.938 29.355 32.02 29.395 32.145 29.465 cv
32.266 29.543 32.426 29.621 32.621 29.703 cv
32.813 29.789 33.039 29.867 33.305 29.937 cv
33.563 30.012 33.855 30.047 34.176 30.047 cv
34.484 30.047 34.754 30.008 34.992 29.93 cv
35.223 29.852 35.422 29.742 35.582 29.602 cv
35.738 29.461 35.855 29.293 35.938 29.098 cv
36.016 28.902 36.055 28.691 36.059 28.465 cv
36.055 28.215 36.004 27.988 35.906 27.785 cv
35.801 27.586 35.652 27.414 35.461 27.266 cv
35.262 27.121 35.023 27.008 34.738 26.93 cv
34.453 26.852 34.129 26.812 33.766 26.812 cv
32.895 26.812 li
32.852 26.812 32.816 26.805 32.781 26.789 cv
32.746 26.773 32.715 26.746 32.691 26.707 cv
32.664 26.672 32.645 26.625 32.629 26.566 cv
32.613 26.508 32.605 26.43 32.605 26.332 cv
32.605 26.246 32.609 26.176 32.625 26.117 cv
32.633 26.062 32.652 26.016 32.684 25.98 cv
32.707 25.945 32.738 25.922 32.77 25.902 cv
32.801 25.891 32.836 25.883 32.879 25.879 cv
33.652 25.879 li
33.953 25.883 34.223 25.844 34.465 25.762 cv
34.699 25.687 34.902 25.574 35.074 25.426 cv
35.238 25.281 35.367 25.105 35.457 24.902 cv
35.547 24.699 35.594 24.473 35.594 24.219 cv
35.594 24.039 35.563 23.863 35.504 23.695 cv
35.441 23.531 35.352 23.387 35.234 23.262 cv
35.113 23.137 34.961 23.039 34.781 22.969 cv
34.594 22.898 34.383 22.863 34.141 22.863 cv
33.875 22.863 33.629 22.906 33.41 22.984 cv
33.184 23.066 32.988 23.152 32.816 23.242 cv
32.641 23.336 32.496 23.422 32.383 23.5 cv
32.27 23.582 32.188 23.621 32.145 23.617 cv
32.109 23.621 32.082 23.613 32.059 23.602 cv
32.031 23.59 32.012 23.566 31.996 23.531 cv
31.98 23.5 31.969 23.453 31.961 23.387 cv
31.953 23.328 31.949 23.246 31.953 23.145 cv
31.949 23.078 31.949 23.02 31.957 22.965 cv
31.957 22.914 31.969 22.867 31.984 22.824 cv
32 22.789 32.016 22.754 32.035 22.719 cv
32.051 22.691 32.082 22.652 32.125 22.605 cv
32.168 22.562 32.254 22.5 32.391 22.418 cv
32.52 22.336 32.684 22.258 32.879 22.176 cv
33.07 22.098 33.293 22.027 33.551 21.973 cv
33.801 21.918 34.074 21.891 34.371 21.891 cv
34.777 21.891 35.141 21.945 35.453 22.047 cv
35.766 22.156 36.023 22.305 36.234 22.492 cv
36.438 22.687 36.594 22.918 36.699 23.184 cv
36.801 23.453 36.852 23.746 36.855 24.07 cv
36.852 24.352 36.816 24.613 36.746 24.848 cv
36.672 25.09 36.563 25.301 36.422 25.484 cv
36.277 25.672 36.105 25.828 35.902 25.957 cv
35.695 26.09 35.457 26.184 35.188 26.23 cv
35.188 26.242 li
35.492 26.277 35.773 26.352 36.027 26.473 cv
36.281 26.594 36.5 26.746 36.684 26.93 cv
36.863 27.113 37.004 27.328 37.109 27.57 cv
37.211 27.816 37.262 28.078 37.266 28.355 cv
cp
f
40.555 30.145 mo
40.555 30.473 40.5 30.687 40.395 30.793 cv
40.285 30.898 40.09 30.949 39.809 30.953 cv
39.531 30.949 39.34 30.898 39.238 30.797 cv
39.129 30.691 39.078 30.48 39.082 30.164 cv
39.078 29.84 39.133 29.625 39.242 29.516 cv
39.348 29.41 39.543 29.355 39.828 29.355 cv
40.102 29.355 40.289 29.41 40.398 29.516 cv
40.5 29.621 40.555 29.832 40.555 30.145 cv
cp
f
47.918 28.039 mo
47.918 28.516 47.836 28.937 47.676 29.309 cv
47.516 29.68 47.289 29.992 47 30.246 cv
46.703 30.5 46.355 30.695 45.953 30.824 cv
45.547 30.957 45.098 31.02 44.605 31.02 cv
44.328 31.02 44.066 31 43.824 30.961 cv
43.574 30.922 43.355 30.875 43.168 30.82 cv
42.973 30.766 42.816 30.711 42.691 30.652 cv
42.566 30.602 42.488 30.559 42.457 30.523 cv
42.422 30.492 42.398 30.461 42.387 30.434 cv
42.371 30.406 42.355 30.375 42.348 30.332 cv
42.332 30.297 42.324 30.246 42.324 30.184 cv
42.316 30.125 42.316 30.055 42.316 29.973 cv
42.316 29.898 42.32 29.828 42.328 29.766 cv
42.336 29.703 42.348 29.652 42.367 29.613 cv
42.383 29.574 42.402 29.547 42.43 29.527 cv
42.453 29.512 42.484 29.504 42.516 29.5 cv
42.563 29.504 42.633 29.531 42.727 29.586 cv
42.82 29.645 42.949 29.707 43.113 29.773 cv
43.277 29.84 43.477 29.902 43.719 29.961 cv
43.953 30.02 44.238 30.047 44.574 30.047 cv
44.875 30.047 45.156 30.012 45.414 29.937 cv
45.668 29.867 45.891 29.754 46.078 29.598 cv
46.262 29.445 46.406 29.25 46.512 29.012 cv
46.617 28.777 46.668 28.488 46.672 28.148 cv
46.668 27.867 46.625 27.617 46.535 27.398 cv
46.445 27.18 46.309 27 46.125 26.855 cv
45.938 26.715 45.703 26.609 45.422 26.535 cv
45.137 26.465 44.797 26.426 44.41 26.426 cv
44.125 26.426 43.887 26.441 43.688 26.469 cv
43.484 26.5 43.297 26.516 43.125 26.512 cv
42.996 26.516 42.902 26.484 42.852 26.422 cv
42.793 26.363 42.766 26.25 42.77 26.078 cv
42.77 22.465 li
42.766 22.316 42.801 22.207 42.875 22.129 cv
42.941 22.059 43.043 22.02 43.18 22.02 cv
47.109 22.02 li
47.145 22.02 47.18 22.031 47.215 22.051 cv
47.246 22.074 47.273 22.105 47.301 22.145 cv
47.32 22.187 47.336 22.238 47.352 22.301 cv
47.359 22.367 47.367 22.445 47.371 22.527 cv
47.367 22.695 47.344 22.82 47.305 22.91 cv
47.258 23.004 47.199 23.051 47.121 23.047 cv
43.949 23.047 li
43.949 25.535 li
44.102 25.516 44.258 25.504 44.422 25.496 cv
44.578 25.492 44.766 25.488 44.98 25.488 cv
45.465 25.488 45.891 25.551 46.258 25.672 cv
46.621 25.793 46.926 25.965 47.176 26.184 cv
47.418 26.41 47.605 26.676 47.73 26.988 cv
47.855 27.305 47.918 27.656 47.918 28.039 cv
cp
f
64.504 499.262 mo
64.5 499.352 64.492 499.422 64.48 499.48 cv
64.465 499.543 64.445 499.594 64.426 499.625 cv
64.402 499.664 64.379 499.687 64.348 499.703 cv
64.316 499.719 64.285 499.727 64.258 499.727 cv
59.621 499.727 li
59.586 499.727 59.559 499.719 59.531 499.703 cv
59.504 499.687 59.477 499.664 59.453 499.625 cv
59.426 499.594 59.406 499.543 59.395 499.48 cv
59.379 499.422 59.371 499.352 59.375 499.262 cv
59.371 499.184 59.379 499.109 59.395 499.047 cv
59.406 498.988 59.422 498.941 59.445 498.902 cv
59.461 498.867 59.488 498.836 59.52 498.812 cv
59.551 498.793 59.582 498.785 59.621 498.781 cv
61.473 498.781 li
61.473 492.035 li
59.758 493.055 li
59.668 493.105 59.598 493.133 59.551 493.141 cv
59.496 493.148 59.453 493.141 59.422 493.109 cv
59.387 493.082 59.367 493.031 59.355 492.961 cv
59.344 492.895 59.336 492.809 59.34 492.699 cv
59.336 492.625 59.34 492.559 59.352 492.5 cv
59.355 492.449 59.367 492.402 59.383 492.363 cv
59.395 492.328 59.414 492.297 59.438 492.27 cv
59.461 492.242 59.492 492.215 59.539 492.187 cv
61.582 490.875 li
61.598 490.863 61.617 490.852 61.648 490.844 cv
61.672 490.836 61.707 490.828 61.754 490.816 cv
61.793 490.809 61.844 490.801 61.898 490.797 cv
61.953 490.797 62.02 490.797 62.105 490.793 cv
62.211 490.797 62.305 490.801 62.379 490.809 cv
62.449 490.816 62.504 490.832 62.551 490.848 cv
62.59 490.867 62.617 490.887 62.633 490.91 cv
62.641 490.937 62.648 490.961 62.652 490.984 cv
62.652 498.781 li
64.258 498.781 li
64.293 498.785 64.328 498.793 64.359 498.812 cv
64.391 498.836 64.414 498.867 64.438 498.902 cv
64.453 498.941 64.469 498.988 64.484 499.047 cv
64.492 499.109 64.5 499.184 64.504 499.262 cv
cp
f
132.098 499.219 mo
132.094 499.305 132.09 499.379 132.078 499.441 cv
132.066 499.508 132.051 499.562 132.031 499.602 cv
132.008 499.648 131.98 499.68 131.949 499.695 cv
131.914 499.719 131.875 499.727 131.836 499.727 cv
126.934 499.727 li
126.871 499.727 126.813 499.719 126.766 499.703 cv
126.715 499.687 126.676 499.664 126.641 499.625 cv
126.605 499.594 126.578 499.539 126.566 499.469 cv
126.547 499.398 126.539 499.312 126.543 499.211 cv
126.539 499.121 126.543 499.043 126.551 498.973 cv
126.555 498.906 126.57 498.848 126.598 498.793 cv
126.621 498.742 126.652 498.687 126.688 498.633 cv
126.723 498.582 126.766 498.527 126.824 498.465 cv
128.598 496.641 li
129.008 496.223 129.336 495.848 129.586 495.512 cv
129.832 495.184 130.023 494.879 130.156 494.602 cv
130.289 494.328 130.375 494.078 130.422 493.852 cv
130.461 493.629 130.484 493.418 130.484 493.223 cv
130.484 493.027 130.449 492.844 130.383 492.664 cv
130.316 492.492 130.223 492.336 130.098 492.199 cv
129.973 492.07 129.816 491.965 129.629 491.883 cv
129.441 491.809 129.223 491.77 128.977 491.766 cv
128.688 491.77 128.43 491.809 128.203 491.883 cv
127.973 491.965 127.773 492.051 127.602 492.137 cv
127.43 492.23 127.285 492.312 127.168 492.391 cv
127.051 492.469 126.965 492.508 126.914 492.508 cv
126.879 492.508 126.848 492.5 126.824 492.48 cv
126.793 492.465 126.773 492.434 126.758 492.391 cv
126.742 492.352 126.727 492.297 126.719 492.227 cv
126.707 492.16 126.703 492.078 126.707 491.98 cv
126.703 491.914 126.707 491.855 126.715 491.805 cv
126.719 491.754 126.727 491.711 126.738 491.672 cv
126.746 491.637 126.762 491.602 126.781 491.57 cv
126.801 491.539 126.836 491.5 126.895 491.449 cv
126.945 491.402 127.039 491.336 127.176 491.254 cv
127.309 491.172 127.48 491.094 127.684 491.012 cv
127.887 490.934 128.109 490.863 128.355 490.809 cv
128.598 490.754 128.855 490.727 129.129 490.727 cv
129.555 490.727 129.93 490.789 130.254 490.91 cv
130.574 491.031 130.84 491.195 131.055 491.406 cv
131.266 491.617 131.426 491.863 131.531 492.137 cv
131.637 492.418 131.691 492.715 131.691 493.027 cv
131.691 493.316 131.664 493.598 131.613 493.875 cv
131.563 494.16 131.457 494.465 131.297 494.789 cv
131.133 495.117 130.898 495.48 130.594 495.879 cv
130.285 496.281 129.879 496.742 129.375 497.258 cv
127.969 498.727 li
131.828 498.727 li
131.859 498.73 131.895 498.742 131.934 498.758 cv
131.965 498.781 131.996 498.812 132.023 498.852 cv
132.047 498.895 132.066 498.945 132.078 499.004 cv
132.09 499.07 132.094 499.141 132.098 499.219 cv
cp
f
200.051 497.203 mo
200.047 497.355 200.023 497.477 199.98 497.562 cv
199.934 497.652 199.871 497.695 199.789 497.691 cv
198.789 497.691 li
198.789 499.555 li
198.789 499.594 198.777 499.625 198.762 499.648 cv
198.738 499.676 198.707 499.695 198.664 499.715 cv
198.613 499.73 198.551 499.742 198.48 499.754 cv
198.402 499.762 198.309 499.766 198.191 499.77 cv
198.074 499.766 197.977 499.762 197.906 499.754 cv
197.828 499.742 197.77 499.73 197.727 499.715 cv
197.68 499.695 197.648 499.676 197.633 499.648 cv
197.613 499.625 197.605 499.594 197.609 499.555 cv
197.609 497.691 li
193.98 497.691 li
193.922 497.695 193.879 497.687 193.844 497.672 cv
193.809 497.66 193.773 497.633 193.746 497.594 cv
193.715 497.559 193.695 497.508 193.684 497.437 cv
193.672 497.371 193.668 497.281 193.668 497.168 cv
193.668 497.086 193.668 497.008 193.676 496.937 cv
193.676 496.867 193.688 496.805 193.703 496.75 cv
193.715 496.695 193.73 496.641 193.758 496.586 cv
193.777 496.531 193.805 496.477 193.84 496.414 cv
197 491.027 li
197.02 490.992 197.055 490.961 197.102 490.934 cv
197.145 490.906 197.199 490.883 197.273 490.863 cv
197.34 490.848 197.426 490.836 197.531 490.824 cv
197.633 490.82 197.754 490.816 197.895 490.812 cv
198.043 490.816 198.18 490.82 198.297 490.832 cv
198.41 490.844 198.5 490.859 198.574 490.875 cv
198.641 490.895 198.695 490.918 198.734 490.949 cv
198.77 490.98 198.789 491.016 198.789 491.055 cv
198.789 496.719 li
199.789 496.719 li
199.863 496.723 199.926 496.762 199.977 496.84 cv
200.023 496.922 200.047 497.043 200.051 497.203 cv
cp
197.609 491.852 mo
197.598 491.852 li
194.746 496.719 li
197.609 496.719 li
cp
f
267.512 496.855 mo
267.512 497.246 267.449 497.625 267.332 497.984 cv
267.207 498.352 267.023 498.668 266.781 498.941 cv
266.531 499.219 266.219 499.441 265.844 499.605 cv
265.461 499.773 265.016 499.855 264.5 499.855 cv
264.129 499.855 263.801 499.812 263.52 499.719 cv
263.234 499.633 262.988 499.5 262.777 499.328 cv
262.566 499.16 262.391 498.953 262.254 498.707 cv
262.113 498.461 262 498.18 261.918 497.863 cv
261.832 497.551 261.773 497.207 261.738 496.828 cv
261.699 496.457 261.68 496.055 261.684 495.621 cv
261.68 495.242 261.699 494.859 261.742 494.469 cv
261.781 494.086 261.855 493.711 261.961 493.344 cv
262.066 492.984 262.211 492.645 262.391 492.328 cv
262.57 492.012 262.797 491.734 263.07 491.5 cv
263.344 491.266 263.668 491.078 264.047 490.937 cv
264.426 490.801 264.867 490.734 265.371 490.73 cv
265.539 490.734 265.711 490.742 265.883 490.762 cv
266.055 490.785 266.215 490.816 266.363 490.848 cv
266.512 490.887 266.633 490.922 266.734 490.961 cv
266.832 491 266.898 491.035 266.934 491.059 cv
266.961 491.086 266.984 491.113 267.004 491.141 cv
267.02 491.172 267.035 491.203 267.043 491.238 cv
267.051 491.273 267.055 491.312 267.063 491.355 cv
267.063 491.398 267.066 491.453 267.07 491.516 cv
267.066 491.602 267.066 491.672 267.066 491.727 cv
267.063 491.789 267.051 491.836 267.039 491.871 cv
267.02 491.91 267 491.937 266.977 491.953 cv
266.949 491.973 266.918 491.98 266.879 491.98 cv
266.828 491.98 266.758 491.965 266.672 491.934 cv
266.582 491.902 266.477 491.867 266.355 491.824 cv
266.23 491.789 266.082 491.754 265.906 491.719 cv
265.73 491.691 265.527 491.676 265.297 491.672 cv
264.867 491.676 264.5 491.762 264.195 491.934 cv
263.891 492.105 263.641 492.34 263.445 492.633 cv
263.25 492.926 263.105 493.266 263.016 493.648 cv
262.918 494.039 262.863 494.441 262.855 494.859 cv
262.973 494.793 263.109 494.727 263.258 494.656 cv
263.406 494.59 263.566 494.527 263.742 494.469 cv
263.918 494.418 264.105 494.371 264.301 494.336 cv
264.496 494.305 264.707 494.289 264.934 494.285 cv
265.41 494.289 265.813 494.355 266.145 494.48 cv
266.473 494.613 266.738 494.793 266.945 495.023 cv
267.145 495.254 267.289 495.523 267.379 495.836 cv
267.465 496.148 267.512 496.488 267.512 496.855 cv
cp
266.316 496.965 mo
266.316 496.703 266.289 496.461 266.238 496.242 cv
266.184 496.027 266.094 495.844 265.973 495.687 cv
265.848 495.539 265.684 495.422 265.48 495.34 cv
265.27 495.258 265.016 495.215 264.719 495.215 cv
264.547 495.215 264.379 495.23 264.211 495.262 cv
264.039 495.293 263.875 495.336 263.719 495.383 cv
263.559 495.437 263.41 495.5 263.27 495.57 cv
263.125 495.645 262.992 495.719 262.875 495.797 cv
262.871 496.391 262.91 496.887 262.988 497.281 cv
263.063 497.68 263.172 497.996 263.316 498.234 cv
263.461 498.477 263.641 498.648 263.855 498.75 cv
264.07 498.855 264.32 498.906 264.609 498.902 cv
264.898 498.906 265.152 498.852 265.367 498.738 cv
265.582 498.633 265.758 498.484 265.902 498.297 cv
266.043 498.113 266.148 497.906 266.215 497.676 cv
266.281 497.445 266.316 497.211 266.316 496.965 cv
cp
f
335.098 497.449 mo
335.098 497.836 335.027 498.18 334.891 498.477 cv
334.754 498.781 334.559 499.031 334.301 499.234 cv
334.043 499.441 333.723 499.598 333.344 499.699 cv
332.961 499.805 332.527 499.855 332.043 499.855 cv
331.582 499.855 331.172 499.809 330.813 499.715 cv
330.449 499.621 330.145 499.48 329.895 499.289 cv
329.645 499.105 329.453 498.875 329.32 498.598 cv
329.188 498.324 329.121 498.012 329.121 497.656 cv
329.121 497.383 329.164 497.125 329.258 496.891 cv
329.344 496.656 329.477 496.441 329.652 496.246 cv
329.82 496.051 330.031 495.867 330.285 495.691 cv
330.535 495.523 330.82 495.359 331.137 495.203 cv
330.863 495.062 330.621 494.914 330.41 494.754 cv
330.199 494.598 330.02 494.426 329.875 494.238 cv
329.727 494.055 329.617 493.859 329.543 493.648 cv
329.465 493.441 329.426 493.211 329.43 492.961 cv
329.426 492.652 329.48 492.359 329.598 492.086 cv
329.707 491.816 329.879 491.582 330.105 491.379 cv
330.332 491.18 330.617 491.02 330.969 490.902 cv
331.313 490.785 331.723 490.727 332.191 490.727 cv
332.637 490.727 333.023 490.781 333.352 490.887 cv
333.68 490.996 333.949 491.141 334.16 491.324 cv
334.371 491.512 334.527 491.73 334.633 491.98 cv
334.73 492.23 334.781 492.5 334.785 492.789 cv
334.781 493.023 334.742 493.25 334.672 493.461 cv
334.594 493.68 334.484 493.883 334.336 494.07 cv
334.188 494.266 334.008 494.445 333.797 494.609 cv
333.586 494.781 333.344 494.937 333.07 495.078 cv
333.391 495.242 333.676 495.406 333.934 495.574 cv
334.184 495.742 334.398 495.922 334.574 496.117 cv
334.742 496.312 334.871 496.52 334.965 496.734 cv
335.051 496.953 335.098 497.191 335.098 497.449 cv
cp
333.617 492.898 mo
333.613 492.711 333.582 492.535 333.516 492.379 cv
333.449 492.223 333.352 492.09 333.227 491.98 cv
333.098 491.871 332.938 491.789 332.75 491.73 cv
332.555 491.676 332.34 491.648 332.102 491.645 cv
331.605 491.648 331.23 491.758 330.98 491.98 cv
330.723 492.207 330.598 492.516 330.602 492.898 cv
330.598 493.078 330.629 493.242 330.691 493.395 cv
330.754 493.551 330.848 493.695 330.98 493.832 cv
331.105 493.969 331.27 494.102 331.473 494.23 cv
331.668 494.363 331.906 494.5 332.184 494.641 cv
332.645 494.406 333 494.145 333.246 493.852 cv
333.492 493.566 333.613 493.25 333.617 492.898 cv
cp
333.906 497.574 mo
333.902 497.367 333.863 497.176 333.789 497.004 cv
333.707 496.836 333.59 496.676 333.434 496.523 cv
333.277 496.375 333.078 496.23 332.844 496.09 cv
332.605 495.953 332.336 495.809 332.027 495.656 cv
331.738 495.801 331.484 495.941 331.27 496.082 cv
331.051 496.223 330.871 496.371 330.734 496.52 cv
330.594 496.676 330.488 496.832 330.418 496.996 cv
330.344 497.164 330.309 497.348 330.313 497.547 cv
330.309 497.992 330.461 498.336 330.77 498.574 cv
331.07 498.82 331.523 498.941 332.129 498.937 cv
332.711 498.941 333.156 498.82 333.457 498.57 cv
333.754 498.328 333.902 497.996 333.906 497.574 cv
cp
f
398.977 499.262 mo
398.973 499.352 398.965 499.422 398.953 499.48 cv
398.938 499.543 398.918 499.594 398.898 499.625 cv
398.875 499.664 398.852 499.687 398.82 499.703 cv
398.789 499.719 398.758 499.727 398.73 499.727 cv
394.094 499.727 li
394.059 499.727 394.031 499.719 394.004 499.703 cv
393.977 499.687 393.949 499.664 393.926 499.625 cv
393.898 499.594 393.879 499.543 393.867 499.48 cv
393.852 499.422 393.844 499.352 393.848 499.262 cv
393.844 499.184 393.852 499.109 393.867 499.047 cv
393.879 498.988 393.895 498.941 393.918 498.902 cv
393.934 498.867 393.961 498.836 393.992 498.812 cv
394.023 498.793 394.055 498.785 394.094 498.781 cv
395.945 498.781 li
395.945 492.035 li
394.23 493.055 li
394.141 493.105 394.07 493.133 394.023 493.141 cv
393.969 493.148 393.926 493.141 393.895 493.109 cv
393.859 493.082 393.84 493.031 393.828 492.961 cv
393.816 492.895 393.809 492.809 393.813 492.699 cv
393.809 492.625 393.813 492.559 393.824 492.5 cv
393.828 492.449 393.84 492.402 393.855 492.363 cv
393.867 492.328 393.887 492.297 393.91 492.27 cv
393.934 492.242 393.965 492.215 394.012 492.187 cv
396.055 490.875 li
396.07 490.863 396.09 490.852 396.121 490.844 cv
396.145 490.836 396.18 490.828 396.227 490.816 cv
396.266 490.809 396.316 490.801 396.371 490.797 cv
396.426 490.797 396.492 490.797 396.578 490.793 cv
396.684 490.797 396.777 490.801 396.852 490.809 cv
396.922 490.816 396.977 490.832 397.023 490.848 cv
397.063 490.867 397.09 490.887 397.105 490.91 cv
397.113 490.937 397.121 490.961 397.125 490.984 cv
397.125 498.781 li
398.73 498.781 li
398.766 498.785 398.801 498.793 398.832 498.812 cv
398.863 498.836 398.887 498.867 398.91 498.902 cv
398.926 498.941 398.941 498.988 398.957 499.047 cv
398.965 499.109 398.973 499.184 398.977 499.262 cv
cp
f
406.328 495.27 mo
406.324 495.953 406.273 496.574 406.168 497.137 cv
406.059 497.699 405.879 498.184 405.633 498.586 cv
405.379 498.992 405.051 499.305 404.652 499.523 cv
404.246 499.746 403.754 499.855 403.168 499.855 cv
402.609 499.855 402.137 499.758 401.758 499.559 cv
401.375 499.363 401.07 499.07 400.836 498.684 cv
400.602 498.297 400.434 497.824 400.34 497.258 cv
400.238 496.695 400.191 496.047 400.191 495.312 cv
400.191 494.641 400.246 494.02 400.355 493.453 cv
400.465 492.891 400.641 492.406 400.891 492 cv
401.133 491.598 401.457 491.285 401.863 491.059 cv
402.262 490.84 402.758 490.727 403.348 490.727 cv
403.906 490.727 404.379 490.828 404.762 491.023 cv
405.145 491.227 405.449 491.52 405.684 491.902 cv
405.914 492.293 406.082 492.766 406.18 493.328 cv
406.277 493.891 406.324 494.539 406.328 495.27 cv
cp
405.121 495.352 mo
405.117 494.91 405.102 494.512 405.074 494.16 cv
405.039 493.809 404.992 493.5 404.934 493.23 cv
404.867 492.961 404.789 492.73 404.691 492.535 cv
404.594 492.344 404.477 492.184 404.34 492.055 cv
404.199 491.93 404.039 491.836 403.867 491.777 cv
403.688 491.723 403.492 491.695 403.277 491.691 cv
402.887 491.695 402.57 491.785 402.332 491.969 cv
402.086 492.152 401.895 492.406 401.758 492.723 cv
401.617 493.043 401.523 493.414 401.473 493.844 cv
401.422 494.273 401.398 494.738 401.398 495.23 cv
401.398 495.895 401.43 496.457 401.5 496.918 cv
401.566 497.387 401.676 497.766 401.828 498.055 cv
401.973 498.352 402.164 498.562 402.395 498.691 cv
402.625 498.828 402.906 498.895 403.238 498.891 cv
403.492 498.895 403.715 498.855 403.91 498.77 cv
404.102 498.691 404.27 498.57 404.41 498.414 cv
404.551 498.262 404.664 498.078 404.758 497.863 cv
404.844 497.648 404.918 497.41 404.977 497.148 cv
405.027 496.891 405.066 496.609 405.09 496.305 cv
405.109 496 405.117 495.684 405.121 495.352 cv
cp
f
466.555 499.262 mo
466.551 499.352 466.543 499.422 466.531 499.48 cv
466.516 499.543 466.496 499.594 466.477 499.625 cv
466.453 499.664 466.43 499.687 466.398 499.703 cv
466.367 499.719 466.336 499.727 466.309 499.727 cv
461.672 499.727 li
461.637 499.727 461.609 499.719 461.582 499.703 cv
461.555 499.687 461.527 499.664 461.504 499.625 cv
461.477 499.594 461.457 499.543 461.445 499.48 cv
461.43 499.422 461.422 499.352 461.426 499.262 cv
461.422 499.184 461.43 499.109 461.445 499.047 cv
461.457 498.988 461.473 498.941 461.496 498.902 cv
461.512 498.867 461.539 498.836 461.57 498.812 cv
461.602 498.793 461.633 498.785 461.672 498.781 cv
463.523 498.781 li
463.523 492.035 li
461.809 493.055 li
461.719 493.105 461.648 493.133 461.602 493.141 cv
461.547 493.148 461.504 493.141 461.473 493.109 cv
461.438 493.082 461.418 493.031 461.406 492.961 cv
461.395 492.895 461.387 492.809 461.391 492.699 cv
461.387 492.625 461.391 492.559 461.402 492.5 cv
461.406 492.449 461.418 492.402 461.434 492.363 cv
461.445 492.328 461.465 492.297 461.488 492.27 cv
461.512 492.242 461.543 492.215 461.59 492.187 cv
463.633 490.875 li
463.648 490.863 463.668 490.852 463.699 490.844 cv
463.723 490.836 463.758 490.828 463.805 490.816 cv
463.844 490.809 463.895 490.801 463.949 490.797 cv
464.004 490.797 464.07 490.797 464.156 490.793 cv
464.262 490.797 464.355 490.801 464.43 490.809 cv
464.5 490.816 464.555 490.832 464.602 490.848 cv
464.641 490.867 464.668 490.887 464.684 490.91 cv
464.691 490.937 464.699 490.961 464.703 490.984 cv
464.703 498.781 li
466.309 498.781 li
466.344 498.785 466.379 498.793 466.41 498.812 cv
466.441 498.836 466.465 498.867 466.488 498.902 cv
466.504 498.941 466.52 498.988 466.535 499.047 cv
466.543 499.109 466.551 499.184 466.555 499.262 cv
cp
f
473.617 499.219 mo
473.613 499.305 473.609 499.379 473.598 499.441 cv
473.586 499.508 473.57 499.562 473.551 499.602 cv
473.527 499.648 473.5 499.68 473.469 499.695 cv
473.434 499.719 473.395 499.727 473.355 499.727 cv
468.453 499.727 li
468.391 499.727 468.332 499.719 468.285 499.703 cv
468.234 499.687 468.195 499.664 468.16 499.625 cv
468.125 499.594 468.098 499.539 468.086 499.469 cv
468.066 499.398 468.059 499.312 468.063 499.211 cv
468.059 499.121 468.063 499.043 468.07 498.973 cv
468.074 498.906 468.09 498.848 468.117 498.793 cv
468.141 498.742 468.172 498.687 468.207 498.633 cv
468.242 498.582 468.285 498.527 468.344 498.465 cv
470.117 496.641 li
470.527 496.223 470.855 495.848 471.105 495.512 cv
471.352 495.184 471.543 494.879 471.676 494.602 cv
471.809 494.328 471.895 494.078 471.941 493.852 cv
471.98 493.629 472.004 493.418 472.004 493.223 cv
472.004 493.027 471.969 492.844 471.902 492.664 cv
471.836 492.492 471.742 492.336 471.617 492.199 cv
471.492 492.07 471.336 491.965 471.148 491.883 cv
470.961 491.809 470.742 491.77 470.496 491.766 cv
470.207 491.77 469.949 491.809 469.723 491.883 cv
469.492 491.965 469.293 492.051 469.121 492.137 cv
468.949 492.23 468.805 492.312 468.688 492.391 cv
468.57 492.469 468.484 492.508 468.434 492.508 cv
468.398 492.508 468.367 492.5 468.344 492.48 cv
468.313 492.465 468.293 492.434 468.277 492.391 cv
468.262 492.352 468.246 492.297 468.238 492.227 cv
468.227 492.16 468.223 492.078 468.227 491.98 cv
468.223 491.914 468.227 491.855 468.234 491.805 cv
468.238 491.754 468.246 491.711 468.258 491.672 cv
468.266 491.637 468.281 491.602 468.301 491.57 cv
468.32 491.539 468.355 491.5 468.414 491.449 cv
468.465 491.402 468.559 491.336 468.695 491.254 cv
468.828 491.172 469 491.094 469.203 491.012 cv
469.406 490.934 469.629 490.863 469.875 490.809 cv
470.117 490.754 470.375 490.727 470.648 490.727 cv
471.074 490.727 471.449 490.789 471.773 490.91 cv
472.094 491.031 472.359 491.195 472.574 491.406 cv
472.785 491.617 472.945 491.863 473.051 492.137 cv
473.156 492.418 473.211 492.715 473.211 493.027 cv
473.211 493.316 473.184 493.598 473.133 493.875 cv
473.082 494.16 472.977 494.465 472.816 494.789 cv
472.652 495.117 472.418 495.48 472.113 495.879 cv
471.805 496.281 471.398 496.742 470.895 497.258 cv
469.488 498.727 li
473.348 498.727 li
473.379 498.73 473.414 498.742 473.453 498.758 cv
473.484 498.781 473.516 498.812 473.543 498.852 cv
473.566 498.895 473.586 498.945 473.598 499.004 cv
473.609 499.07 473.613 499.141 473.617 499.219 cv
cp
f
534.164 499.262 mo
534.16 499.352 534.152 499.422 534.141 499.48 cv
534.125 499.543 534.105 499.594 534.086 499.625 cv
534.063 499.664 534.039 499.687 534.008 499.703 cv
533.977 499.719 533.945 499.727 533.918 499.727 cv
529.281 499.727 li
529.246 499.727 529.219 499.719 529.191 499.703 cv
529.164 499.687 529.137 499.664 529.113 499.625 cv
529.086 499.594 529.066 499.543 529.055 499.48 cv
529.039 499.422 529.031 499.352 529.035 499.262 cv
529.031 499.184 529.039 499.109 529.055 499.047 cv
529.066 498.988 529.082 498.941 529.105 498.902 cv
529.121 498.867 529.148 498.836 529.18 498.812 cv
529.211 498.793 529.242 498.785 529.281 498.781 cv
531.133 498.781 li
531.133 492.035 li
529.418 493.055 li
529.328 493.105 529.258 493.133 529.211 493.141 cv
529.156 493.148 529.113 493.141 529.082 493.109 cv
529.047 493.082 529.027 493.031 529.016 492.961 cv
529.004 492.895 528.996 492.809 529 492.699 cv
528.996 492.625 529 492.559 529.012 492.5 cv
529.016 492.449 529.027 492.402 529.043 492.363 cv
529.055 492.328 529.074 492.297 529.098 492.27 cv
529.121 492.242 529.152 492.215 529.199 492.187 cv
531.242 490.875 li
531.258 490.863 531.277 490.852 531.309 490.844 cv
531.332 490.836 531.367 490.828 531.414 490.816 cv
531.453 490.809 531.504 490.801 531.559 490.797 cv
531.613 490.797 531.68 490.797 531.766 490.793 cv
531.871 490.797 531.965 490.801 532.039 490.809 cv
532.109 490.816 532.164 490.832 532.211 490.848 cv
532.25 490.867 532.277 490.887 532.293 490.91 cv
532.301 490.937 532.309 490.961 532.313 490.984 cv
532.313 498.781 li
533.918 498.781 li
533.953 498.785 533.988 498.793 534.02 498.812 cv
534.051 498.836 534.074 498.867 534.098 498.902 cv
534.113 498.941 534.129 498.988 534.145 499.047 cv
534.152 499.109 534.16 499.184 534.164 499.262 cv
cp
f
541.602 497.203 mo
541.598 497.355 541.574 497.477 541.531 497.562 cv
541.484 497.652 541.422 497.695 541.34 497.691 cv
540.34 497.691 li
540.34 499.555 li
540.34 499.594 540.328 499.625 540.313 499.648 cv
540.289 499.676 540.258 499.695 540.215 499.715 cv
540.164 499.73 540.102 499.742 540.031 499.754 cv
539.953 499.762 539.859 499.766 539.742 499.77 cv
539.625 499.766 539.527 499.762 539.457 499.754 cv
539.379 499.742 539.32 499.73 539.277 499.715 cv
539.23 499.695 539.199 499.676 539.184 499.648 cv
539.164 499.625 539.156 499.594 539.16 499.555 cv
539.16 497.691 li
535.531 497.691 li
535.473 497.695 535.43 497.687 535.395 497.672 cv
535.359 497.66 535.324 497.633 535.297 497.594 cv
535.266 497.559 535.246 497.508 535.234 497.437 cv
535.223 497.371 535.219 497.281 535.219 497.168 cv
535.219 497.086 535.219 497.008 535.227 496.937 cv
535.227 496.867 535.238 496.805 535.254 496.75 cv
535.266 496.695 535.281 496.641 535.309 496.586 cv
535.328 496.531 535.355 496.477 535.391 496.414 cv
538.551 491.027 li
538.57 490.992 538.605 490.961 538.652 490.934 cv
538.695 490.906 538.75 490.883 538.824 490.863 cv
538.891 490.848 538.977 490.836 539.082 490.824 cv
539.184 490.82 539.305 490.816 539.445 490.812 cv
539.594 490.816 539.73 490.82 539.848 490.832 cv
539.961 490.844 540.051 490.859 540.125 490.875 cv
540.191 490.895 540.246 490.918 540.285 490.949 cv
540.32 490.98 540.34 491.016 540.34 491.055 cv
540.34 496.719 li
541.34 496.719 li
541.414 496.723 541.477 496.762 541.527 496.84 cv
541.574 496.922 541.598 497.043 541.602 497.203 cv
cp
539.16 491.852 mo
539.148 491.852 li
536.297 496.719 li
539.16 496.719 li
cp
f
601.777 499.262 mo
601.773 499.352 601.766 499.422 601.754 499.48 cv
601.738 499.543 601.719 499.594 601.699 499.625 cv
601.676 499.664 601.652 499.687 601.621 499.703 cv
601.59 499.719 601.559 499.727 601.531 499.727 cv
596.895 499.727 li
596.859 499.727 596.832 499.719 596.805 499.703 cv
596.777 499.687 596.75 499.664 596.727 499.625 cv
596.699 499.594 596.68 499.543 596.668 499.48 cv
596.652 499.422 596.645 499.352 596.648 499.262 cv
596.645 499.184 596.652 499.109 596.668 499.047 cv
596.68 498.988 596.695 498.941 596.719 498.902 cv
596.734 498.867 596.762 498.836 596.793 498.812 cv
596.824 498.793 596.855 498.785 596.895 498.781 cv
598.746 498.781 li
598.746 492.035 li
597.031 493.055 li
596.941 493.105 596.871 493.133 596.824 493.141 cv
596.77 493.148 596.727 493.141 596.695 493.109 cv
596.66 493.082 596.641 493.031 596.629 492.961 cv
596.617 492.895 596.609 492.809 596.613 492.699 cv
596.609 492.625 596.613 492.559 596.625 492.5 cv
596.629 492.449 596.641 492.402 596.656 492.363 cv
596.668 492.328 596.688 492.297 596.711 492.27 cv
596.734 492.242 596.766 492.215 596.813 492.187 cv
598.855 490.875 li
598.871 490.863 598.891 490.852 598.922 490.844 cv
598.945 490.836 598.98 490.828 599.027 490.816 cv
599.066 490.809 599.117 490.801 599.172 490.797 cv
599.227 490.797 599.293 490.797 599.379 490.793 cv
599.484 490.797 599.578 490.801 599.652 490.809 cv
599.723 490.816 599.777 490.832 599.824 490.848 cv
599.863 490.867 599.891 490.887 599.906 490.91 cv
599.914 490.937 599.922 490.961 599.926 490.984 cv
599.926 498.781 li
601.531 498.781 li
601.566 498.785 601.602 498.793 601.633 498.812 cv
601.664 498.836 601.688 498.867 601.711 498.902 cv
601.727 498.941 601.742 498.988 601.758 499.047 cv
601.766 499.109 601.773 499.184 601.777 499.262 cv
cp
f
609.063 496.855 mo
609.063 497.246 609 497.625 608.883 497.984 cv
608.758 498.352 608.574 498.668 608.332 498.941 cv
608.082 499.219 607.77 499.441 607.395 499.605 cv
607.012 499.773 606.566 499.855 606.051 499.855 cv
605.68 499.855 605.352 499.812 605.07 499.719 cv
604.785 499.633 604.539 499.5 604.328 499.328 cv
604.117 499.16 603.941 498.953 603.805 498.707 cv
603.664 498.461 603.551 498.18 603.469 497.863 cv
603.383 497.551 603.324 497.207 603.289 496.828 cv
603.25 496.457 603.23 496.055 603.234 495.621 cv
603.23 495.242 603.25 494.859 603.293 494.469 cv
603.332 494.086 603.406 493.711 603.512 493.344 cv
603.617 492.984 603.762 492.645 603.941 492.328 cv
604.121 492.012 604.348 491.734 604.621 491.5 cv
604.895 491.266 605.219 491.078 605.598 490.937 cv
605.977 490.801 606.418 490.734 606.922 490.73 cv
607.09 490.734 607.262 490.742 607.434 490.762 cv
607.605 490.785 607.766 490.816 607.914 490.848 cv
608.063 490.887 608.184 490.922 608.285 490.961 cv
608.383 491 608.449 491.035 608.484 491.059 cv
608.512 491.086 608.535 491.113 608.555 491.141 cv
608.57 491.172 608.586 491.203 608.594 491.238 cv
608.602 491.273 608.605 491.312 608.613 491.355 cv
608.613 491.398 608.617 491.453 608.621 491.516 cv
608.617 491.602 608.617 491.672 608.617 491.727 cv
608.613 491.789 608.602 491.836 608.59 491.871 cv
608.57 491.91 608.551 491.937 608.527 491.953 cv
608.5 491.973 608.469 491.98 608.43 491.98 cv
608.379 491.98 608.309 491.965 608.223 491.934 cv
608.133 491.902 608.027 491.867 607.906 491.824 cv
607.781 491.789 607.633 491.754 607.457 491.719 cv
607.281 491.691 607.078 491.676 606.848 491.672 cv
606.418 491.676 606.051 491.762 605.746 491.934 cv
605.441 492.105 605.191 492.34 604.996 492.633 cv
604.801 492.926 604.656 493.266 604.566 493.648 cv
604.469 494.039 604.414 494.441 604.406 494.859 cv
604.523 494.793 604.66 494.727 604.809 494.656 cv
604.957 494.59 605.117 494.527 605.293 494.469 cv
605.469 494.418 605.656 494.371 605.852 494.336 cv
606.047 494.305 606.258 494.289 606.484 494.285 cv
606.961 494.289 607.363 494.355 607.695 494.48 cv
608.023 494.613 608.289 494.793 608.496 495.023 cv
608.695 495.254 608.84 495.523 608.93 495.836 cv
609.016 496.148 609.063 496.488 609.063 496.855 cv
cp
607.867 496.965 mo
607.867 496.703 607.84 496.461 607.789 496.242 cv
607.734 496.027 607.645 495.844 607.523 495.687 cv
607.398 495.539 607.234 495.422 607.031 495.34 cv
606.82 495.258 606.566 495.215 606.27 495.215 cv
606.098 495.215 605.93 495.23 605.762 495.262 cv
605.59 495.293 605.426 495.336 605.27 495.383 cv
605.109 495.437 604.961 495.5 604.82 495.57 cv
604.676 495.645 604.543 495.719 604.426 495.797 cv
604.422 496.391 604.461 496.887 604.539 497.281 cv
604.613 497.68 604.723 497.996 604.867 498.234 cv
605.012 498.477 605.191 498.648 605.406 498.75 cv
605.621 498.855 605.871 498.906 606.16 498.902 cv
606.449 498.906 606.703 498.852 606.918 498.738 cv
607.133 498.633 607.309 498.484 607.453 498.297 cv
607.594 498.113 607.699 497.906 607.766 497.676 cv
607.832 497.445 607.867 497.211 607.867 496.965 cv
cp
f
16.977 299.973 mo
17.02 299.977 17.055 299.984 17.086 299.996 cv
17.117 300.016 17.145 300.051 17.164 300.098 cv
17.184 300.152 17.195 300.223 17.211 300.316 cv
17.219 300.41 17.227 300.535 17.227 300.691 cv
17.227 300.828 17.219 300.941 17.211 301.023 cv
17.195 301.109 17.184 301.176 17.16 301.227 cv
17.141 301.281 17.105 301.32 17.063 301.348 cv
17.023 301.379 16.973 301.406 16.906 301.422 cv
14.531 302.352 li
14.262 302.465 14.016 302.578 13.785 302.691 cv
13.563 302.809 13.367 302.945 13.203 303.105 cv
13.043 303.27 12.914 303.461 12.82 303.676 cv
12.73 303.898 12.688 304.16 12.684 304.461 cv
12.684 305.359 li
16.977 305.359 li
17.02 305.363 17.055 305.375 17.086 305.395 cv
17.117 305.422 17.145 305.457 17.16 305.504 cv
17.18 305.555 17.191 305.621 17.207 305.707 cv
17.219 305.793 17.227 305.902 17.227 306.027 cv
17.227 306.16 17.219 306.266 17.207 306.352 cv
17.191 306.437 17.18 306.508 17.16 306.559 cv
17.145 306.613 17.117 306.648 17.086 306.668 cv
17.055 306.691 17.02 306.703 16.977 306.699 cv
7.641 306.699 li
7.438 306.703 7.297 306.648 7.215 306.539 cv
7.137 306.434 7.098 306.32 7.094 306.199 cv
7.094 304.059 li
7.098 303.809 7.102 303.594 7.113 303.422 cv
7.129 303.254 7.145 303.102 7.156 302.965 cv
7.227 302.578 7.332 302.234 7.477 301.934 cv
7.625 301.637 7.813 301.387 8.031 301.184 cv
8.258 300.98 8.512 300.828 8.801 300.727 cv
9.09 300.625 9.41 300.574 9.754 300.574 cv
10.094 300.574 10.395 300.621 10.66 300.711 cv
10.93 300.805 11.168 300.937 11.371 301.105 cv
11.582 301.277 11.758 301.48 11.906 301.719 cv
12.055 301.961 12.184 302.23 12.285 302.523 cv
12.363 302.359 12.453 302.207 12.563 302.07 cv
12.676 301.937 12.813 301.812 12.965 301.691 cv
13.125 301.578 13.305 301.465 13.504 301.359 cv
13.707 301.258 13.934 301.156 14.188 301.047 cv
16.406 300.145 li
16.594 300.074 16.727 300.027 16.801 300.004 cv
16.879 299.988 16.938 299.977 16.977 299.973 cv
cp
9.895 301.992 mo
9.504 301.992 9.168 302.082 8.895 302.258 cv
8.621 302.437 8.426 302.734 8.305 303.145 cv
8.27 303.277 8.242 303.422 8.227 303.586 cv
8.211 303.75 8.203 303.965 8.203 304.227 cv
8.203 305.359 li
11.602 305.359 li
11.602 304.051 li
11.602 303.699 11.559 303.395 11.473 303.133 cv
11.387 302.879 11.27 302.664 11.113 302.492 cv
10.965 302.324 10.781 302.199 10.57 302.113 cv
10.363 302.035 10.141 301.992 9.895 301.992 cv
cp
f
16.984 292.176 mo
17.031 292.18 17.066 292.187 17.09 292.203 cv
17.121 292.223 17.145 292.258 17.164 292.301 cv
17.184 292.348 17.195 292.406 17.211 292.48 cv
17.219 292.559 17.227 292.652 17.227 292.758 cv
17.227 292.883 17.219 292.98 17.211 293.051 cv
17.195 293.129 17.184 293.187 17.164 293.23 cv
17.145 293.277 17.121 293.309 17.09 293.32 cv
17.066 293.34 17.031 293.348 16.984 293.344 cv
16.059 293.344 li
16.504 293.746 16.824 294.141 17.023 294.527 cv
17.227 294.922 17.324 295.316 17.328 295.711 cv
17.324 296.184 17.25 296.578 17.094 296.895 cv
16.941 297.215 16.73 297.473 16.461 297.668 cv
16.195 297.871 15.883 298.012 15.523 298.094 cv
15.168 298.184 14.734 298.227 14.227 298.223 cv
9.973 298.223 li
9.934 298.227 9.898 298.219 9.867 298.195 cv
9.84 298.18 9.816 298.145 9.789 298.09 cv
9.77 298.043 9.754 297.973 9.742 297.887 cv
9.738 297.805 9.734 297.703 9.73 297.574 cv
9.734 297.453 9.738 297.348 9.742 297.262 cv
9.754 297.18 9.77 297.113 9.789 297.066 cv
9.816 297.02 9.84 296.984 9.867 296.961 cv
9.898 296.941 9.934 296.934 9.973 296.93 cv
14.055 296.93 li
14.469 296.934 14.797 296.902 15.043 296.84 cv
15.289 296.781 15.5 296.691 15.672 296.566 cv
15.852 296.449 15.984 296.293 16.078 296.102 cv
16.176 295.918 16.227 295.699 16.223 295.449 cv
16.227 295.129 16.109 294.809 15.879 294.484 cv
15.652 294.168 15.316 293.828 14.871 293.469 cv
9.973 293.469 li
9.934 293.469 9.898 293.461 9.867 293.441 cv
9.84 293.426 9.816 293.391 9.789 293.336 cv
9.77 293.285 9.754 293.219 9.742 293.137 cv
9.738 293.059 9.734 292.953 9.73 292.82 cv
9.734 292.699 9.738 292.594 9.742 292.508 cv
9.754 292.426 9.77 292.363 9.789 292.316 cv
9.816 292.273 9.84 292.238 9.867 292.211 cv
9.898 292.191 9.934 292.18 9.973 292.176 cv
cp
f
16.984 283.766 mo
17.031 283.766 17.066 283.777 17.09 283.797 cv
17.121 283.82 17.145 283.855 17.164 283.898 cv
17.184 283.949 17.195 284.012 17.211 284.094 cv
17.219 284.176 17.227 284.281 17.227 284.402 cv
17.227 284.535 17.219 284.641 17.211 284.723 cv
17.195 284.809 17.184 284.875 17.164 284.918 cv
17.145 284.969 17.121 285 17.09 285.02 cv
17.066 285.043 17.031 285.055 16.984 285.051 cv
12.879 285.051 li
12.48 285.055 12.16 285.086 11.914 285.145 cv
11.672 285.211 11.461 285.301 11.281 285.418 cv
11.105 285.535 10.969 285.691 10.875 285.879 cv
10.781 286.074 10.734 286.293 10.734 286.539 cv
10.734 286.863 10.852 287.187 11.078 287.508 cv
11.313 287.832 11.645 288.168 12.082 288.52 cv
16.984 288.52 li
17.031 288.523 17.066 288.535 17.09 288.551 cv
17.121 288.574 17.145 288.605 17.164 288.652 cv
17.184 288.699 17.195 288.766 17.211 288.844 cv
17.219 288.93 17.227 289.035 17.227 289.164 cv
17.227 289.293 17.219 289.398 17.211 289.477 cv
17.195 289.562 17.184 289.629 17.164 289.676 cv
17.145 289.73 17.121 289.762 17.09 289.777 cv
17.066 289.797 17.031 289.809 16.984 289.805 cv
9.973 289.805 li
9.934 289.809 9.898 289.801 9.867 289.781 cv
9.84 289.77 9.816 289.738 9.789 289.687 cv
9.77 289.645 9.754 289.582 9.742 289.508 cv
9.738 289.437 9.734 289.344 9.73 289.219 cv
9.734 289.109 9.738 289.012 9.742 288.934 cv
9.754 288.859 9.77 288.801 9.789 288.758 cv
9.816 288.719 9.84 288.691 9.867 288.672 cv
9.898 288.656 9.934 288.648 9.973 288.645 cv
10.898 288.645 li
10.457 288.254 10.137 287.859 9.93 287.465 cv
9.727 287.074 9.621 286.676 9.621 286.273 cv
9.621 285.805 9.703 285.414 9.859 285.094 cv
10.023 284.777 10.234 284.516 10.496 284.316 cv
10.762 284.121 11.07 283.98 11.426 283.895 cv
11.781 283.809 12.211 283.766 12.707 283.766 cv
cp
f
16.469 277.887 mo
16.625 277.887 16.742 277.898 16.828 277.918 cv
16.918 277.941 16.984 277.973 17.023 278.012 cv
17.066 278.055 17.105 278.117 17.141 278.199 cv
17.176 278.285 17.203 278.379 17.23 278.484 cv
17.25 278.594 17.27 278.707 17.289 278.824 cv
17.301 278.941 17.309 279.062 17.313 279.18 cv
17.309 279.547 17.262 279.859 17.168 280.117 cv
17.074 280.379 16.93 280.59 16.73 280.754 cv
16.539 280.922 16.293 281.043 15.992 281.117 cv
15.695 281.195 15.344 281.234 14.934 281.23 cv
10.836 281.23 li
10.836 282.211 li
10.84 282.289 10.797 282.352 10.711 282.398 cv
10.629 282.445 10.496 282.469 10.305 282.469 cv
10.211 282.469 10.129 282.465 10.059 282.449 cv
9.996 282.441 9.938 282.422 9.891 282.398 cv
9.848 282.379 9.816 282.352 9.797 282.316 cv
9.781 282.285 9.773 282.25 9.77 282.203 cv
9.77 281.23 li
8.102 281.23 li
8.07 281.234 8.035 281.223 8 281.203 cv
7.973 281.187 7.945 281.156 7.918 281.102 cv
7.898 281.055 7.883 280.988 7.867 280.902 cv
7.859 280.824 7.852 280.719 7.852 280.59 cv
7.852 280.461 7.859 280.355 7.867 280.273 cv
7.883 280.191 7.898 280.125 7.918 280.078 cv
7.945 280.031 7.973 280 8 279.977 cv
8.035 279.961 8.07 279.949 8.102 279.945 cv
9.77 279.945 li
9.77 278.145 li
9.773 278.105 9.781 278.07 9.797 278.035 cv
9.816 278.008 9.848 277.98 9.891 277.953 cv
9.938 277.934 9.996 277.918 10.059 277.902 cv
10.129 277.895 10.211 277.887 10.305 277.887 cv
10.496 277.887 10.629 277.91 10.711 277.957 cv
10.797 278.004 10.84 278.066 10.836 278.145 cv
10.836 279.945 li
14.75 279.945 li
15.234 279.949 15.598 279.879 15.844 279.73 cv
16.094 279.59 16.219 279.332 16.215 278.961 cv
16.219 278.848 16.207 278.742 16.18 278.645 cv
16.16 278.555 16.137 278.473 16.105 278.395 cv
16.082 278.324 16.055 278.262 16.031 278.207 cv
16.008 278.16 15.996 278.113 15.996 278.066 cv
15.996 278.043 16.004 278.016 16.016 277.992 cv
16.031 277.969 16.055 277.953 16.09 277.937 cv
16.129 277.93 16.18 277.918 16.238 277.902 cv
16.305 277.895 16.383 277.887 16.469 277.887 cv
cp
f
16.984 274.871 mo
17.031 274.875 17.066 274.887 17.09 274.902 cv
17.121 274.926 17.145 274.957 17.164 275.004 cv
17.184 275.051 17.195 275.117 17.211 275.195 cv
17.219 275.281 17.227 275.387 17.227 275.516 cv
17.227 275.645 17.219 275.75 17.211 275.828 cv
17.195 275.914 17.184 275.98 17.164 276.027 cv
17.145 276.082 17.121 276.113 17.09 276.129 cv
17.066 276.148 17.031 276.16 16.984 276.156 cv
9.973 276.156 li
9.938 276.16 9.906 276.148 9.871 276.129 cv
9.844 276.113 9.816 276.082 9.793 276.027 cv
9.773 275.98 9.758 275.914 9.746 275.828 cv
9.738 275.75 9.734 275.645 9.73 275.516 cv
9.734 275.387 9.738 275.281 9.746 275.195 cv
9.758 275.117 9.773 275.051 9.793 275.004 cv
9.816 274.957 9.844 274.926 9.871 274.902 cv
9.906 274.887 9.938 274.875 9.973 274.871 cv
cp
7.602 274.723 mo
7.906 274.723 8.113 274.781 8.219 274.895 cv
8.332 275.008 8.387 275.219 8.383 275.523 cv
8.387 275.828 8.332 276.035 8.223 276.145 cv
8.117 276.262 7.914 276.316 7.617 276.312 cv
7.316 276.316 7.113 276.258 7.004 276.141 cv
6.898 276.027 6.844 275.816 6.84 275.508 cv
6.844 275.207 6.898 275.004 7 274.891 cv
7.109 274.781 7.309 274.723 7.602 274.723 cv
cp
f
16.984 262.047 mo
17.031 262.051 17.066 262.059 17.09 262.078 cv
17.121 262.102 17.145 262.137 17.164 262.18 cv
17.184 262.23 17.195 262.297 17.211 262.375 cv
17.219 262.461 17.227 262.562 17.227 262.687 cv
17.227 262.82 17.219 262.93 17.211 263.008 cv
17.195 263.094 17.184 263.16 17.164 263.207 cv
17.145 263.262 17.121 263.297 17.09 263.312 cv
17.066 263.336 17.031 263.344 16.984 263.344 cv
12.723 263.344 li
12.43 263.344 12.16 263.371 11.914 263.422 cv
11.672 263.477 11.461 263.559 11.281 263.672 cv
11.105 263.785 10.969 263.93 10.875 264.105 cv
10.781 264.285 10.734 264.496 10.734 264.73 cv
10.734 265.027 10.852 265.324 11.078 265.621 cv
11.313 265.926 11.645 266.254 12.082 266.609 cv
16.984 266.609 li
17.031 266.613 17.066 266.625 17.09 266.641 cv
17.121 266.664 17.145 266.695 17.164 266.742 cv
17.184 266.793 17.195 266.859 17.211 266.941 cv
17.219 267.027 17.227 267.133 17.227 267.254 cv
17.227 267.375 17.219 267.477 17.211 267.562 cv
17.195 267.648 17.184 267.719 17.164 267.766 cv
17.145 267.82 17.121 267.852 17.09 267.867 cv
17.066 267.887 17.031 267.898 16.984 267.895 cv
12.723 267.895 li
12.43 267.898 12.16 267.926 11.914 267.98 cv
11.672 268.039 11.461 268.125 11.281 268.238 cv
11.105 268.352 10.969 268.496 10.875 268.668 cv
10.781 268.848 10.734 269.055 10.734 269.289 cv
10.734 269.59 10.852 269.887 11.078 270.187 cv
11.313 270.488 11.645 270.816 12.082 271.168 cv
16.984 271.168 li
17.031 271.172 17.066 271.184 17.09 271.199 cv
17.121 271.223 17.145 271.254 17.164 271.301 cv
17.184 271.348 17.195 271.414 17.211 271.492 cv
17.219 271.578 17.227 271.684 17.227 271.812 cv
17.227 271.941 17.219 272.047 17.211 272.125 cv
17.195 272.211 17.184 272.277 17.164 272.324 cv
17.145 272.379 17.121 272.41 17.09 272.426 cv
17.066 272.445 17.031 272.457 16.984 272.453 cv
9.973 272.453 li
9.934 272.457 9.898 272.449 9.867 272.43 cv
9.84 272.418 9.816 272.387 9.789 272.336 cv
9.77 272.293 9.754 272.23 9.742 272.156 cv
9.738 272.086 9.734 271.992 9.73 271.867 cv
9.734 271.758 9.738 271.66 9.742 271.582 cv
9.754 271.508 9.77 271.449 9.789 271.406 cv
9.816 271.367 9.84 271.34 9.867 271.32 cv
9.898 271.305 9.934 271.297 9.973 271.293 cv
10.898 271.293 li
10.457 270.902 10.137 270.52 9.93 270.145 cv
9.727 269.777 9.621 269.398 9.621 269.016 cv
9.621 268.727 9.656 268.469 9.723 268.234 cv
9.793 268.008 9.887 267.801 10.008 267.621 cv
10.129 267.445 10.273 267.297 10.441 267.168 cv
10.613 267.047 10.805 266.941 11.008 266.855 cv
10.758 266.625 10.543 266.402 10.363 266.191 cv
10.191 265.98 10.047 265.777 9.934 265.582 cv
9.828 265.387 9.75 265.199 9.695 265.016 cv
9.648 264.832 9.621 264.645 9.621 264.457 cv
9.621 264.004 9.703 263.625 9.859 263.32 cv
10.023 263.016 10.234 262.77 10.496 262.574 cv
10.762 262.387 11.07 262.25 11.426 262.168 cv
11.781 262.09 12.156 262.051 12.551 262.047 cv
cp
f
13.176 253.719 mo
13.379 253.723 13.52 253.773 13.605 253.871 cv
13.691 253.977 13.734 254.094 13.734 254.219 cv
13.734 258.836 li
14.125 258.84 14.477 258.801 14.789 258.719 cv
15.102 258.645 15.371 258.512 15.59 258.328 cv
15.816 258.148 15.988 257.914 16.105 257.617 cv
16.23 257.328 16.289 256.969 16.285 256.543 cv
16.289 256.211 16.262 255.914 16.203 255.652 cv
16.152 255.391 16.09 255.164 16.02 254.973 cv
15.953 254.785 15.895 254.629 15.836 254.504 cv
15.785 254.383 15.758 254.289 15.754 254.227 cv
15.758 254.191 15.766 254.16 15.781 254.129 cv
15.801 254.102 15.828 254.078 15.863 254.059 cv
15.902 254.047 15.953 254.035 16.016 254.023 cv
16.082 254.02 16.16 254.016 16.254 254.012 cv
16.324 254.016 16.383 254.02 16.43 254.02 cv
16.477 254.027 16.52 254.031 16.559 254.039 cv
16.598 254.047 16.633 254.062 16.664 254.078 cv
16.695 254.102 16.727 254.125 16.754 254.148 cv
16.785 254.18 16.832 254.262 16.895 254.402 cv
16.961 254.543 17.023 254.727 17.086 254.949 cv
17.148 255.176 17.203 255.434 17.254 255.727 cv
17.301 256.02 17.324 256.332 17.328 256.664 cv
17.324 257.242 17.246 257.75 17.086 258.18 cv
16.926 258.617 16.688 258.98 16.371 259.273 cv
16.055 259.574 15.66 259.797 15.18 259.945 cv
14.703 260.094 14.145 260.168 13.508 260.168 cv
12.91 260.168 12.371 260.094 11.887 259.937 cv
11.41 259.785 11 259.559 10.664 259.262 cv
10.328 258.969 10.07 258.613 9.891 258.199 cv
9.711 257.785 9.621 257.32 9.621 256.805 cv
9.621 256.254 9.711 255.785 9.887 255.398 cv
10.066 255.012 10.305 254.695 10.602 254.441 cv
10.902 254.195 11.254 254.012 11.652 253.895 cv
12.059 253.781 12.488 253.723 12.941 253.719 cv
cp
12.793 255.012 mo
12.117 254.996 11.586 255.148 11.203 255.465 cv
10.82 255.781 10.629 256.25 10.625 256.867 cv
10.629 257.191 10.688 257.473 10.805 257.711 cv
10.926 257.953 11.086 258.152 11.281 258.312 cv
11.48 258.477 11.711 258.602 11.973 258.687 cv
12.234 258.777 12.508 258.828 12.793 258.836 cv
cp
f
6.441 245.543 mo
7.488 246.039 8.559 246.406 9.656 246.648 cv
10.758 246.891 11.863 247.012 12.973 247.012 cv
14.09 247.012 15.199 246.891 16.293 246.641 cv
17.391 246.398 18.461 246.035 19.516 245.559 cv
19.574 245.535 19.629 245.523 19.676 245.516 cv
19.719 245.516 19.754 245.531 19.785 245.566 cv
19.813 245.605 19.832 245.66 19.848 245.734 cv
19.855 245.812 19.863 245.918 19.867 246.043 cv
19.863 246.141 19.859 246.219 19.859 246.285 cv
19.852 246.355 19.844 246.414 19.828 246.461 cv
19.813 246.512 19.793 246.555 19.773 246.582 cv
19.75 246.617 19.727 246.641 19.703 246.652 cv
19.172 246.934 18.637 247.18 18.094 247.391 cv
17.551 247.609 17 247.789 16.441 247.93 cv
15.879 248.078 15.313 248.187 14.738 248.258 cv
14.164 248.336 13.582 248.371 12.996 248.367 cv
12.41 248.371 11.832 248.332 11.258 248.246 cv
10.688 248.168 10.121 248.051 9.555 247.902 cv
8.992 247.754 8.438 247.574 7.891 247.363 cv
7.348 247.152 6.805 246.914 6.27 246.645 cv
6.25 246.641 6.234 246.625 6.215 246.602 cv
6.203 246.578 6.188 246.547 6.168 246.504 cv
6.156 246.465 6.145 246.406 6.133 246.332 cv
6.129 246.262 6.125 246.168 6.121 246.051 cv
6.125 245.934 6.133 245.84 6.145 245.762 cv
6.164 245.691 6.184 245.633 6.207 245.59 cv
6.234 245.551 6.27 245.527 6.309 245.52 cv
6.355 245.516 6.398 245.523 6.441 245.543 cv
cp
f
16.977 232.262 mo
17.02 232.262 17.055 232.273 17.086 232.293 cv
17.117 232.316 17.145 232.355 17.16 232.406 cv
17.18 232.461 17.191 232.527 17.207 232.609 cv
17.219 232.695 17.227 232.805 17.227 232.934 cv
17.227 233.062 17.219 233.168 17.207 233.254 cv
17.191 233.344 17.18 233.414 17.16 233.465 cv
17.145 233.516 17.117 233.551 17.086 233.57 cv
17.055 233.594 17.02 233.605 16.977 233.602 cv
8.195 233.602 li
8.195 233.617 li
17.016 237.172 li
17.055 237.187 17.086 237.211 17.109 237.238 cv
17.137 237.27 17.16 237.312 17.176 237.363 cv
17.195 237.422 17.207 237.484 17.215 237.559 cv
17.223 237.633 17.227 237.723 17.227 237.824 cv
17.227 237.937 17.219 238.031 17.211 238.105 cv
17.195 238.187 17.184 238.254 17.168 238.301 cv
17.152 238.355 17.133 238.395 17.102 238.422 cv
17.078 238.453 17.047 238.473 17.016 238.48 cv
8.195 241.879 li
8.195 241.887 li
16.977 241.887 li
17.02 241.891 17.055 241.898 17.086 241.918 cv
17.117 241.941 17.145 241.98 17.16 242.031 cv
17.18 242.086 17.191 242.156 17.207 242.238 cv
17.219 242.328 17.227 242.437 17.227 242.566 cv
17.227 242.699 17.219 242.805 17.207 242.891 cv
17.191 242.977 17.18 243.047 17.16 243.094 cv
17.145 243.148 17.117 243.184 17.086 243.199 cv
17.055 243.223 17.02 243.23 16.977 243.227 cv
7.703 243.227 li
7.488 243.23 7.332 243.172 7.234 243.055 cv
7.145 242.937 7.098 242.809 7.094 242.664 cv
7.094 241.84 li
7.098 241.676 7.113 241.527 7.141 241.398 cv
7.176 241.273 7.223 241.164 7.289 241.066 cv
7.359 240.973 7.445 240.891 7.547 240.828 cv
7.652 240.766 7.777 240.711 7.914 240.664 cv
15.215 237.777 li
15.215 237.738 li
7.938 234.738 li
7.785 234.684 7.652 234.621 7.539 234.551 cv
7.434 234.484 7.344 234.406 7.277 234.324 cv
7.215 234.242 7.168 234.152 7.137 234.051 cv
7.109 233.953 7.098 233.836 7.094 233.703 cv
7.094 232.84 li
7.098 232.762 7.109 232.684 7.129 232.613 cv
7.156 232.543 7.191 232.484 7.238 232.434 cv
7.289 232.383 7.352 232.34 7.426 232.309 cv
7.504 232.277 7.598 232.262 7.703 232.262 cv
cp
f
16.984 228.445 mo
17.031 228.449 17.066 228.461 17.09 228.477 cv
17.121 228.5 17.145 228.531 17.164 228.578 cv
17.184 228.625 17.195 228.691 17.211 228.77 cv
17.219 228.855 17.227 228.961 17.227 229.09 cv
17.227 229.219 17.219 229.324 17.211 229.402 cv
17.195 229.488 17.184 229.555 17.164 229.602 cv
17.145 229.656 17.121 229.687 17.09 229.703 cv
17.066 229.723 17.031 229.734 16.984 229.73 cv
9.973 229.73 li
9.938 229.734 9.906 229.723 9.871 229.703 cv
9.844 229.687 9.816 229.656 9.793 229.602 cv
9.773 229.555 9.758 229.488 9.746 229.402 cv
9.738 229.324 9.734 229.219 9.73 229.09 cv
9.734 228.961 9.738 228.855 9.746 228.77 cv
9.758 228.691 9.773 228.625 9.793 228.578 cv
9.816 228.531 9.844 228.5 9.871 228.477 cv
9.906 228.461 9.938 228.449 9.973 228.445 cv
cp
7.602 228.297 mo
7.906 228.297 8.113 228.355 8.219 228.469 cv
8.332 228.582 8.387 228.793 8.383 229.098 cv
8.387 229.402 8.332 229.609 8.223 229.719 cv
8.117 229.836 7.914 229.891 7.617 229.887 cv
7.316 229.891 7.113 229.832 7.004 229.715 cv
6.898 229.602 6.844 229.391 6.84 229.082 cv
6.844 228.781 6.898 228.578 7 228.465 cv
7.109 228.355 7.309 228.297 7.602 228.297 cv
cp
f
16.984 220.02 mo
17.031 220.02 17.066 220.031 17.09 220.051 cv
17.121 220.074 17.145 220.109 17.164 220.152 cv
17.184 220.203 17.195 220.266 17.211 220.348 cv
17.219 220.43 17.227 220.535 17.227 220.656 cv
17.227 220.789 17.219 220.895 17.211 220.977 cv
17.195 221.062 17.184 221.129 17.164 221.172 cv
17.145 221.223 17.121 221.254 17.09 221.273 cv
17.066 221.297 17.031 221.309 16.984 221.305 cv
12.879 221.305 li
12.48 221.309 12.16 221.34 11.914 221.398 cv
11.672 221.465 11.461 221.555 11.281 221.672 cv
11.105 221.789 10.969 221.945 10.875 222.133 cv
10.781 222.328 10.734 222.547 10.734 222.793 cv
10.734 223.117 10.852 223.441 11.078 223.762 cv
11.313 224.086 11.645 224.422 12.082 224.773 cv
16.984 224.773 li
17.031 224.777 17.066 224.789 17.09 224.805 cv
17.121 224.828 17.145 224.859 17.164 224.906 cv
17.184 224.953 17.195 225.02 17.211 225.098 cv
17.219 225.184 17.227 225.289 17.227 225.418 cv
17.227 225.547 17.219 225.652 17.211 225.73 cv
17.195 225.816 17.184 225.883 17.164 225.93 cv
17.145 225.984 17.121 226.016 17.09 226.031 cv
17.066 226.051 17.031 226.062 16.984 226.059 cv
9.973 226.059 li
9.934 226.062 9.898 226.055 9.867 226.035 cv
9.84 226.023 9.816 225.992 9.789 225.941 cv
9.77 225.898 9.754 225.836 9.742 225.762 cv
9.738 225.691 9.734 225.598 9.73 225.473 cv
9.734 225.363 9.738 225.266 9.742 225.187 cv
9.754 225.113 9.77 225.055 9.789 225.012 cv
9.816 224.973 9.84 224.945 9.867 224.926 cv
9.898 224.91 9.934 224.902 9.973 224.898 cv
10.898 224.898 li
10.457 224.508 10.137 224.113 9.93 223.719 cv
9.727 223.328 9.621 222.93 9.621 222.527 cv
9.621 222.059 9.703 221.668 9.859 221.348 cv
10.023 221.031 10.234 220.77 10.496 220.57 cv
10.762 220.375 11.07 220.234 11.426 220.148 cv
11.781 220.062 12.211 220.02 12.707 220.02 cv
cp
f
16.984 211.625 mo
17.031 211.629 17.066 211.637 17.09 211.652 cv
17.121 211.672 17.145 211.707 17.164 211.75 cv
17.184 211.797 17.195 211.855 17.211 211.93 cv
17.219 212.008 17.227 212.102 17.227 212.207 cv
17.227 212.332 17.219 212.43 17.211 212.5 cv
17.195 212.578 17.184 212.637 17.164 212.68 cv
17.145 212.727 17.121 212.758 17.09 212.77 cv
17.066 212.789 17.031 212.797 16.984 212.793 cv
16.059 212.793 li
16.504 213.195 16.824 213.59 17.023 213.977 cv
17.227 214.371 17.324 214.766 17.328 215.16 cv
17.324 215.633 17.25 216.027 17.094 216.344 cv
16.941 216.664 16.73 216.922 16.461 217.117 cv
16.195 217.32 15.883 217.461 15.523 217.543 cv
15.168 217.633 14.734 217.676 14.227 217.672 cv
9.973 217.672 li
9.934 217.676 9.898 217.668 9.867 217.645 cv
9.84 217.629 9.816 217.594 9.789 217.539 cv
9.77 217.492 9.754 217.422 9.742 217.336 cv
9.738 217.254 9.734 217.152 9.73 217.023 cv
9.734 216.902 9.738 216.797 9.742 216.711 cv
9.754 216.629 9.77 216.562 9.789 216.516 cv
9.816 216.469 9.84 216.434 9.867 216.41 cv
9.898 216.391 9.934 216.383 9.973 216.379 cv
14.055 216.379 li
14.469 216.383 14.797 216.352 15.043 216.289 cv
15.289 216.23 15.5 216.141 15.672 216.016 cv
15.852 215.898 15.984 215.742 16.078 215.551 cv
16.176 215.367 16.227 215.148 16.223 214.898 cv
16.227 214.578 16.109 214.258 15.879 213.934 cv
15.652 213.617 15.316 213.277 14.871 212.918 cv
9.973 212.918 li
9.934 212.918 9.898 212.91 9.867 212.891 cv
9.84 212.875 9.816 212.84 9.789 212.785 cv
9.77 212.734 9.754 212.668 9.742 212.586 cv
9.738 212.508 9.734 212.402 9.73 212.27 cv
9.734 212.148 9.738 212.043 9.742 211.957 cv
9.754 211.875 9.77 211.812 9.789 211.766 cv
9.816 211.723 9.84 211.687 9.867 211.66 cv
9.898 211.641 9.934 211.629 9.973 211.625 cv
cp
f
16.469 205.605 mo
16.625 205.605 16.742 205.617 16.828 205.637 cv
16.918 205.66 16.984 205.691 17.023 205.73 cv
17.066 205.773 17.105 205.836 17.141 205.918 cv
17.176 206.004 17.203 206.098 17.23 206.203 cv
17.25 206.312 17.27 206.426 17.289 206.543 cv
17.301 206.66 17.309 206.781 17.313 206.898 cv
17.309 207.266 17.262 207.578 17.168 207.836 cv
17.074 208.098 16.93 208.309 16.73 208.473 cv
16.539 208.641 16.293 208.762 15.992 208.836 cv
15.695 208.914 15.344 208.953 14.934 208.949 cv
10.836 208.949 li
10.836 209.93 li
10.84 210.008 10.797 210.07 10.711 210.117 cv
10.629 210.164 10.496 210.187 10.305 210.187 cv
10.211 210.187 10.129 210.184 10.059 210.168 cv
9.996 210.16 9.938 210.141 9.891 210.117 cv
9.848 210.098 9.816 210.07 9.797 210.035 cv
9.781 210.004 9.773 209.969 9.77 209.922 cv
9.77 208.949 li
8.102 208.949 li
8.07 208.953 8.035 208.941 8 208.922 cv
7.973 208.906 7.945 208.875 7.918 208.82 cv
7.898 208.773 7.883 208.707 7.867 208.621 cv
7.859 208.543 7.852 208.437 7.852 208.309 cv
7.852 208.18 7.859 208.074 7.867 207.992 cv
7.883 207.91 7.898 207.844 7.918 207.797 cv
7.945 207.75 7.973 207.719 8 207.695 cv
8.035 207.68 8.07 207.668 8.102 207.664 cv
9.77 207.664 li
9.77 205.863 li
9.773 205.824 9.781 205.789 9.797 205.754 cv
9.816 205.727 9.848 205.699 9.891 205.672 cv
9.938 205.652 9.996 205.637 10.059 205.621 cv
10.129 205.613 10.211 205.605 10.305 205.605 cv
10.496 205.605 10.629 205.629 10.711 205.676 cv
10.797 205.723 10.84 205.785 10.836 205.863 cv
10.836 207.664 li
14.75 207.664 li
15.234 207.668 15.598 207.598 15.844 207.449 cv
16.094 207.309 16.219 207.051 16.215 206.68 cv
16.219 206.566 16.207 206.461 16.18 206.363 cv
16.16 206.273 16.137 206.191 16.105 206.113 cv
16.082 206.043 16.055 205.98 16.031 205.926 cv
16.008 205.879 15.996 205.832 15.996 205.785 cv
15.996 205.762 16.004 205.734 16.016 205.711 cv
16.031 205.687 16.055 205.672 16.09 205.656 cv
16.129 205.648 16.18 205.637 16.238 205.621 cv
16.305 205.613 16.383 205.605 16.469 205.605 cv
cp
f
13.176 197.922 mo
13.379 197.926 13.52 197.977 13.605 198.074 cv
13.691 198.18 13.734 198.297 13.734 198.422 cv
13.734 203.039 li
14.125 203.043 14.477 203.004 14.789 202.922 cv
15.102 202.848 15.371 202.715 15.59 202.531 cv
15.816 202.352 15.988 202.117 16.105 201.82 cv
16.23 201.531 16.289 201.172 16.285 200.746 cv
16.289 200.414 16.262 200.117 16.203 199.855 cv
16.152 199.594 16.09 199.367 16.02 199.176 cv
15.953 198.988 15.895 198.832 15.836 198.707 cv
15.785 198.586 15.758 198.492 15.754 198.43 cv
15.758 198.395 15.766 198.363 15.781 198.332 cv
15.801 198.305 15.828 198.281 15.863 198.262 cv
15.902 198.25 15.953 198.238 16.016 198.227 cv
16.082 198.223 16.16 198.219 16.254 198.215 cv
16.324 198.219 16.383 198.223 16.43 198.223 cv
16.477 198.23 16.52 198.234 16.559 198.242 cv
16.598 198.25 16.633 198.266 16.664 198.281 cv
16.695 198.305 16.727 198.328 16.754 198.352 cv
16.785 198.383 16.832 198.465 16.895 198.605 cv
16.961 198.746 17.023 198.93 17.086 199.152 cv
17.148 199.379 17.203 199.637 17.254 199.93 cv
17.301 200.223 17.324 200.535 17.328 200.867 cv
17.324 201.445 17.246 201.953 17.086 202.383 cv
16.926 202.82 16.688 203.184 16.371 203.477 cv
16.055 203.777 15.66 204 15.18 204.148 cv
14.703 204.297 14.145 204.371 13.508 204.371 cv
12.91 204.371 12.371 204.297 11.887 204.141 cv
11.41 203.988 11 203.762 10.664 203.465 cv
10.328 203.172 10.07 202.816 9.891 202.402 cv
9.711 201.988 9.621 201.523 9.621 201.008 cv
9.621 200.457 9.711 199.988 9.887 199.602 cv
10.066 199.215 10.305 198.898 10.602 198.645 cv
10.902 198.398 11.254 198.215 11.652 198.098 cv
12.059 197.984 12.488 197.926 12.941 197.922 cv
cp
12.793 199.215 mo
12.117 199.199 11.586 199.352 11.203 199.668 cv
10.82 199.984 10.629 200.453 10.625 201.07 cv
10.629 201.395 10.688 201.676 10.805 201.914 cv
10.926 202.156 11.086 202.355 11.281 202.516 cv
11.48 202.68 11.711 202.805 11.973 202.891 cv
12.234 202.98 12.508 203.031 12.793 203.039 cv
cp
f
15.074 191.637 mo
15.438 191.641 15.758 191.707 16.035 191.836 cv
16.316 191.969 16.551 192.156 16.742 192.398 cv
16.938 192.645 17.082 192.937 17.18 193.273 cv
17.277 193.613 17.324 193.984 17.328 194.387 cv
17.324 194.641 17.305 194.879 17.27 195.102 cv
17.227 195.328 17.18 195.527 17.121 195.707 cv
17.063 195.887 17 196.039 16.934 196.164 cv
16.871 196.289 16.813 196.383 16.758 196.437 cv
16.707 196.496 16.637 196.535 16.539 196.559 cv
16.449 196.586 16.32 196.598 16.16 196.598 cv
16.063 196.598 15.98 196.594 15.91 196.582 cv
15.844 196.574 15.789 196.562 15.746 196.543 cv
15.707 196.531 15.676 196.508 15.656 196.48 cv
15.641 196.453 15.633 196.422 15.629 196.383 cv
15.633 196.328 15.668 196.242 15.734 196.129 cv
15.809 196.02 15.887 195.883 15.965 195.715 cv
16.051 195.555 16.125 195.363 16.195 195.137 cv
16.266 194.918 16.301 194.66 16.301 194.363 cv
16.301 194.148 16.277 193.949 16.23 193.77 cv
16.184 193.594 16.117 193.441 16.023 193.312 cv
15.938 193.184 15.82 193.082 15.676 193.012 cv
15.539 192.941 15.371 192.906 15.176 192.906 cv
14.98 192.906 14.816 192.957 14.68 193.059 cv
14.547 193.16 14.426 193.297 14.32 193.461 cv
14.219 193.629 14.129 193.812 14.043 194.02 cv
13.965 194.23 13.879 194.445 13.789 194.664 cv
13.703 194.883 13.602 195.098 13.488 195.309 cv
13.379 195.52 13.246 195.711 13.082 195.875 cv
12.926 196.047 12.73 196.18 12.504 196.277 cv
12.281 196.383 12.016 196.434 11.703 196.43 cv
11.43 196.434 11.164 196.379 10.91 196.27 cv
10.66 196.164 10.441 196.004 10.25 195.789 cv
10.063 195.578 9.91 195.312 9.793 194.992 cv
9.68 194.672 9.621 194.301 9.621 193.871 cv
9.621 193.687 9.637 193.5 9.668 193.312 cv
9.699 193.129 9.738 192.961 9.785 192.805 cv
9.832 192.656 9.883 192.527 9.938 192.418 cv
9.992 192.316 10.043 192.234 10.082 192.176 cv
10.129 192.125 10.164 192.09 10.191 192.066 cv
10.223 192.051 10.258 192.035 10.293 192.027 cv
10.336 192.02 10.383 192.012 10.438 192.004 cv
10.496 191.996 10.566 191.992 10.648 191.992 cv
10.738 191.992 10.816 191.996 10.879 192.004 cv
10.949 192.012 11 192.027 11.039 192.043 cv
11.082 192.066 11.113 192.086 11.129 192.109 cv
11.148 192.137 11.156 192.168 11.156 192.195 cv
11.156 192.246 11.129 192.312 11.07 192.398 cv
11.016 192.488 10.953 192.602 10.887 192.742 cv
10.824 192.883 10.766 193.051 10.703 193.238 cv
10.648 193.43 10.617 193.645 10.617 193.887 cv
10.617 194.109 10.645 194.301 10.691 194.465 cv
10.746 194.633 10.816 194.77 10.902 194.875 cv
10.996 194.98 11.102 195.062 11.227 195.113 cv
11.352 195.172 11.488 195.199 11.633 195.195 cv
11.836 195.199 12.004 195.148 12.141 195.043 cv
12.281 194.941 12.402 194.805 12.504 194.637 cv
12.609 194.473 12.703 194.281 12.785 194.066 cv
12.871 193.855 12.957 193.641 13.043 193.418 cv
13.133 193.199 13.234 192.98 13.34 192.762 cv
13.449 192.547 13.578 192.355 13.734 192.187 cv
13.891 192.023 14.078 191.891 14.297 191.789 cv
14.516 191.691 14.777 191.641 15.074 191.637 cv
cp
f
12.996 187.191 mo
13.582 187.191 14.164 187.23 14.738 187.301 cv
15.313 187.379 15.879 187.488 16.441 187.629 cv
17 187.777 17.551 187.953 18.094 188.164 cv
18.637 188.375 19.172 188.621 19.703 188.898 cv
19.727 188.918 19.75 188.941 19.773 188.969 cv
19.793 189.004 19.813 189.043 19.828 189.09 cv
19.844 189.141 19.852 189.199 19.859 189.266 cv
19.859 189.336 19.863 189.418 19.867 189.508 cv
19.863 189.645 19.855 189.75 19.848 189.824 cv
19.832 189.902 19.813 189.957 19.785 189.988 cv
19.754 190.023 19.719 190.039 19.676 190.035 cv
19.629 190.035 19.574 190.02 19.516 189.992 cv
18.465 189.516 17.395 189.156 16.297 188.91 cv
15.199 188.668 14.09 188.547 12.973 188.543 cv
11.863 188.547 10.758 188.668 9.656 188.91 cv
8.559 189.156 7.488 189.523 6.441 190.008 cv
6.398 190.031 6.355 190.039 6.309 190.031 cv
6.27 190.031 6.234 190.008 6.207 189.961 cv
6.184 189.922 6.164 189.863 6.145 189.789 cv
6.133 189.719 6.125 189.621 6.121 189.5 cv
6.125 189.391 6.129 189.301 6.133 189.227 cv
6.145 189.156 6.156 189.098 6.168 189.051 cv
6.188 189.008 6.203 188.977 6.215 188.953 cv
6.234 188.937 6.25 188.922 6.27 188.906 cv
7.336 188.375 8.434 187.953 9.555 187.648 cv
10.684 187.344 11.828 187.191 12.996 187.191 cv
cp
f
248.742 518.543 mo
248.738 518.648 248.723 518.738 248.688 518.809 cv
248.652 518.887 248.605 518.945 248.551 518.988 cv
248.492 519.039 248.43 519.074 248.363 519.09 cv
248.289 519.113 248.219 519.121 248.156 519.121 cv
247.711 519.121 li
247.57 519.121 247.449 519.109 247.344 519.078 cv
247.238 519.055 247.141 519 247.047 518.922 cv
246.953 518.848 246.859 518.746 246.766 518.613 cv
246.672 518.484 246.57 518.32 246.465 518.117 cv
243.391 512.379 li
243.227 512.086 243.063 511.777 242.902 511.449 cv
242.734 511.129 242.582 510.812 242.445 510.504 cv
242.43 510.504 li
242.438 510.879 242.445 511.262 242.453 511.648 cv
242.457 512.039 242.457 512.426 242.461 512.809 cv
242.461 518.895 li
242.457 518.934 242.445 518.969 242.426 519 cv
242.402 519.035 242.367 519.062 242.316 519.078 cv
242.262 519.098 242.191 519.109 242.109 519.125 cv
242.023 519.137 241.918 519.145 241.789 519.145 cv
241.652 519.145 241.543 519.137 241.461 519.125 cv
241.375 519.109 241.309 519.098 241.262 519.078 cv
241.211 519.062 241.176 519.035 241.152 519 cv
241.129 518.969 241.117 518.934 241.121 518.895 cv
241.121 509.59 li
241.117 509.383 241.176 509.234 241.297 509.145 cv
241.414 509.059 241.543 509.016 241.684 509.012 cv
242.344 509.012 li
242.496 509.016 242.629 509.027 242.734 509.051 cv
242.836 509.078 242.93 509.121 243.016 509.18 cv
243.098 509.242 243.176 509.324 243.258 509.43 cv
243.332 509.539 243.414 509.676 243.5 509.832 cv
245.867 514.258 li
246.012 514.531 246.152 514.797 246.289 515.051 cv
246.422 515.309 246.551 515.562 246.68 515.809 cv
246.801 516.062 246.926 516.309 247.051 516.547 cv
247.172 516.789 247.293 517.031 247.418 517.273 cv
247.426 517.273 li
247.414 516.867 247.406 516.437 247.406 515.992 cv
247.398 515.547 247.398 515.121 247.402 514.711 cv
247.402 509.238 li
247.398 509.203 247.41 509.168 247.434 509.137 cv
247.457 509.105 247.492 509.078 247.547 509.055 cv
247.594 509.031 247.664 509.016 247.75 509.004 cv
247.836 508.996 247.945 508.992 248.086 508.988 cv
248.203 508.992 248.309 508.996 248.398 509.004 cv
248.484 509.016 248.551 509.031 248.602 509.055 cv
248.648 509.078 248.684 509.105 248.707 509.137 cv
248.727 509.168 248.738 509.203 248.742 509.238 cv
cp
f
257.289 518.902 mo
257.285 518.949 257.277 518.984 257.262 519.008 cv
257.242 519.039 257.207 519.062 257.164 519.082 cv
257.117 519.102 257.059 519.113 256.984 519.129 cv
256.906 519.137 256.813 519.145 256.707 519.145 cv
256.582 519.145 256.484 519.137 256.414 519.129 cv
256.336 519.113 256.277 519.102 256.234 519.082 cv
256.188 519.062 256.156 519.039 256.145 519.008 cv
256.125 518.984 256.117 518.949 256.121 518.902 cv
256.121 517.977 li
255.719 518.422 255.324 518.742 254.938 518.941 cv
254.543 519.145 254.148 519.242 253.754 519.246 cv
253.281 519.242 252.887 519.168 252.57 519.012 cv
252.25 518.859 251.992 518.648 251.797 518.379 cv
251.594 518.113 251.453 517.801 251.371 517.441 cv
251.281 517.086 251.238 516.652 251.242 516.145 cv
251.242 511.891 li
251.238 511.852 251.246 511.816 251.27 511.785 cv
251.285 511.758 251.32 511.734 251.375 511.707 cv
251.422 511.687 251.492 511.672 251.578 511.66 cv
251.66 511.656 251.762 511.652 251.891 511.648 cv
252.012 511.652 252.117 511.656 252.203 511.66 cv
252.285 511.672 252.352 511.687 252.398 511.707 cv
252.445 511.734 252.48 511.758 252.504 511.785 cv
252.523 511.816 252.531 511.852 252.535 511.891 cv
252.535 515.973 li
252.531 516.387 252.563 516.715 252.625 516.961 cv
252.684 517.207 252.773 517.418 252.898 517.59 cv
253.016 517.77 253.172 517.902 253.363 517.996 cv
253.547 518.094 253.766 518.145 254.016 518.141 cv
254.336 518.145 254.656 518.027 254.98 517.797 cv
255.297 517.57 255.637 517.234 255.996 516.789 cv
255.996 511.891 li
255.996 511.852 256.004 511.816 256.023 511.785 cv
256.039 511.758 256.074 511.734 256.129 511.707 cv
256.18 511.687 256.246 511.672 256.328 511.66 cv
256.406 511.656 256.512 511.652 256.645 511.648 cv
256.766 511.652 256.871 511.656 256.957 511.66 cv
257.039 511.672 257.102 511.687 257.148 511.707 cv
257.191 511.734 257.227 511.758 257.254 511.785 cv
257.273 511.816 257.285 511.852 257.289 511.891 cv
cp
f
270.066 518.902 mo
270.063 518.949 270.055 518.984 270.035 519.008 cv
270.012 519.039 269.977 519.062 269.934 519.082 cv
269.883 519.102 269.816 519.113 269.738 519.129 cv
269.652 519.137 269.551 519.145 269.426 519.145 cv
269.293 519.145 269.184 519.137 269.105 519.129 cv
269.02 519.113 268.953 519.102 268.906 519.082 cv
268.852 519.062 268.816 519.039 268.801 519.008 cv
268.777 518.984 268.77 518.949 268.77 518.902 cv
268.77 514.641 li
268.77 514.348 268.742 514.078 268.691 513.832 cv
268.637 513.59 268.555 513.379 268.441 513.199 cv
268.328 513.023 268.184 512.887 268.008 512.793 cv
267.828 512.699 267.617 512.652 267.383 512.652 cv
267.086 512.652 266.789 512.77 266.492 512.996 cv
266.188 513.23 265.859 513.562 265.504 514 cv
265.504 518.902 li
265.5 518.949 265.488 518.984 265.473 519.008 cv
265.449 519.039 265.418 519.062 265.371 519.082 cv
265.32 519.102 265.254 519.113 265.172 519.129 cv
265.086 519.137 264.98 519.145 264.859 519.145 cv
264.738 519.145 264.637 519.137 264.551 519.129 cv
264.465 519.113 264.395 519.102 264.348 519.082 cv
264.293 519.062 264.262 519.039 264.246 519.008 cv
264.227 518.984 264.215 518.949 264.219 518.902 cv
264.219 514.641 li
264.215 514.348 264.188 514.078 264.133 513.832 cv
264.074 513.59 263.988 513.379 263.875 513.199 cv
263.762 513.023 263.617 512.887 263.445 512.793 cv
263.266 512.699 263.059 512.652 262.824 512.652 cv
262.523 512.652 262.227 512.77 261.926 512.996 cv
261.625 513.23 261.297 513.562 260.945 514 cv
260.945 518.902 li
260.941 518.949 260.93 518.984 260.914 519.008 cv
260.891 519.039 260.859 519.062 260.813 519.082 cv
260.766 519.102 260.699 519.113 260.621 519.129 cv
260.535 519.137 260.43 519.145 260.301 519.145 cv
260.172 519.145 260.066 519.137 259.988 519.129 cv
259.902 519.113 259.836 519.102 259.789 519.082 cv
259.734 519.062 259.703 519.039 259.688 519.008 cv
259.668 518.984 259.656 518.949 259.66 518.902 cv
259.66 511.891 li
259.656 511.852 259.664 511.816 259.684 511.785 cv
259.695 511.758 259.727 511.734 259.777 511.707 cv
259.82 511.687 259.883 511.672 259.957 511.66 cv
260.027 511.656 260.121 511.652 260.246 511.648 cv
260.355 511.652 260.453 511.656 260.531 511.66 cv
260.605 511.672 260.664 511.687 260.707 511.707 cv
260.746 511.734 260.773 511.758 260.793 511.785 cv
260.809 511.816 260.816 511.852 260.82 511.891 cv
260.82 512.816 li
261.211 512.375 261.594 512.055 261.969 511.848 cv
262.336 511.645 262.715 511.539 263.098 511.539 cv
263.387 511.539 263.645 511.574 263.879 511.641 cv
264.105 511.711 264.313 511.805 264.492 511.926 cv
264.668 512.047 264.816 512.191 264.945 512.359 cv
265.066 512.531 265.172 512.723 265.258 512.926 cv
265.488 512.676 265.711 512.461 265.922 512.281 cv
266.133 512.109 266.336 511.965 266.531 511.852 cv
266.727 511.746 266.914 511.668 267.098 511.613 cv
267.281 511.566 267.469 511.539 267.656 511.539 cv
268.109 511.539 268.488 511.621 268.793 511.777 cv
269.098 511.941 269.344 512.152 269.539 512.414 cv
269.727 512.68 269.863 512.988 269.945 513.344 cv
270.023 513.699 270.063 514.074 270.066 514.469 cv
cp
f
278.867 515.301 mo
278.863 515.91 278.797 516.461 278.668 516.945 cv
278.531 517.434 278.336 517.848 278.082 518.187 cv
277.824 518.531 277.508 518.793 277.137 518.973 cv
276.762 519.156 276.336 519.242 275.852 519.246 cv
275.625 519.242 275.418 519.223 275.23 519.18 cv
275.043 519.133 274.855 519.062 274.676 518.965 cv
274.488 518.867 274.309 518.742 274.129 518.59 cv
273.945 518.441 273.754 518.262 273.555 518.047 cv
273.555 518.902 li
273.555 518.949 273.543 518.984 273.523 519.012 cv
273.5 519.047 273.465 519.07 273.422 519.086 cv
273.371 519.102 273.313 519.113 273.246 519.129 cv
273.172 519.137 273.082 519.145 272.977 519.145 cv
272.867 519.145 272.781 519.137 272.711 519.129 cv
272.637 519.113 272.574 519.102 272.531 519.086 cv
272.48 519.07 272.449 519.047 272.438 519.012 cv
272.418 518.984 272.41 518.949 272.414 518.902 cv
272.414 508.492 li
272.41 508.453 272.422 508.418 272.441 508.383 cv
272.457 508.355 272.488 508.328 272.543 508.305 cv
272.59 508.285 272.656 508.27 272.742 508.258 cv
272.82 508.25 272.926 508.246 273.055 508.242 cv
273.184 508.246 273.289 508.25 273.375 508.258 cv
273.453 508.27 273.52 508.285 273.566 508.305 cv
273.613 508.328 273.645 508.355 273.668 508.383 cv
273.684 508.418 273.695 508.453 273.699 508.492 cv
273.699 512.691 li
273.906 512.48 274.109 512.301 274.305 512.156 cv
274.5 512.012 274.688 511.895 274.875 511.801 cv
275.059 511.715 275.246 511.648 275.438 511.602 cv
275.621 511.562 275.82 511.539 276.031 511.539 cv
276.535 511.539 276.969 511.641 277.336 511.844 cv
277.695 512.047 277.988 512.32 278.215 512.656 cv
278.438 513 278.605 513.398 278.711 513.855 cv
278.813 514.312 278.863 514.793 278.867 515.301 cv
cp
277.535 515.449 mo
277.531 515.094 277.504 514.746 277.453 514.406 cv
277.395 514.07 277.301 513.773 277.164 513.512 cv
277.027 513.254 276.848 513.043 276.625 512.883 cv
276.398 512.727 276.117 512.648 275.785 512.645 cv
275.617 512.648 275.453 512.672 275.293 512.715 cv
275.129 512.766 274.965 512.844 274.797 512.949 cv
274.629 513.062 274.453 513.203 274.277 513.371 cv
274.094 513.547 273.902 513.762 273.699 514.016 cv
273.699 516.812 li
274.055 517.246 274.395 517.578 274.719 517.801 cv
275.043 518.031 275.379 518.145 275.73 518.141 cv
276.051 518.145 276.328 518.066 276.563 517.906 cv
276.789 517.754 276.977 517.547 277.121 517.285 cv
277.266 517.031 277.371 516.742 277.438 516.422 cv
277.5 516.105 277.531 515.781 277.535 515.449 cv
cp
f
286.777 515.094 mo
286.773 515.297 286.723 515.437 286.625 515.523 cv
286.52 515.609 286.402 515.652 286.277 515.652 cv
281.66 515.652 li
281.656 516.043 281.695 516.395 281.777 516.707 cv
281.852 517.02 281.984 517.289 282.168 517.508 cv
282.348 517.734 282.582 517.906 282.879 518.023 cv
283.168 518.148 283.527 518.207 283.953 518.203 cv
284.285 518.207 284.582 518.18 284.844 518.121 cv
285.105 518.07 285.332 518.008 285.523 517.937 cv
285.711 517.871 285.867 517.812 285.992 517.754 cv
286.113 517.703 286.207 517.676 286.27 517.672 cv
286.305 517.676 286.336 517.684 286.367 517.699 cv
286.395 517.719 286.418 517.746 286.438 517.781 cv
286.449 517.82 286.461 517.871 286.473 517.934 cv
286.477 518 286.48 518.078 286.484 518.172 cv
286.48 518.242 286.477 518.301 286.477 518.348 cv
286.469 518.395 286.465 518.437 286.457 518.477 cv
286.449 518.516 286.434 518.551 286.418 518.582 cv
286.395 518.613 286.371 518.645 286.348 518.672 cv
286.316 518.703 286.234 518.75 286.094 518.812 cv
285.953 518.879 285.77 518.941 285.547 519.004 cv
285.32 519.066 285.063 519.121 284.77 519.172 cv
284.477 519.219 284.164 519.242 283.832 519.246 cv
283.254 519.242 282.746 519.164 282.316 519.004 cv
281.879 518.844 281.516 518.605 281.223 518.289 cv
280.922 517.973 280.699 517.578 280.551 517.098 cv
280.402 516.621 280.328 516.062 280.328 515.426 cv
280.328 514.828 280.402 514.289 280.559 513.805 cv
280.711 513.328 280.938 512.918 281.234 512.582 cv
281.527 512.246 281.883 511.988 282.297 511.809 cv
282.711 511.629 283.176 511.539 283.691 511.539 cv
284.242 511.539 284.711 511.629 285.098 511.805 cv
285.484 511.984 285.801 512.223 286.055 512.52 cv
286.301 512.82 286.484 513.172 286.602 513.57 cv
286.715 513.977 286.773 514.406 286.777 514.859 cv
cp
285.484 514.711 mo
285.5 514.035 285.348 513.504 285.031 513.121 cv
284.715 512.738 284.246 512.547 283.629 512.543 cv
283.305 512.547 283.023 512.605 282.785 512.723 cv
282.543 512.844 282.344 513.004 282.184 513.199 cv
282.02 513.398 281.895 513.629 281.809 513.891 cv
281.719 514.152 281.668 514.426 281.66 514.711 cv
cp
f
292.84 512.348 mo
292.836 512.465 292.836 512.562 292.832 512.637 cv
292.824 512.719 292.813 512.781 292.801 512.82 cv
292.781 512.867 292.762 512.898 292.742 512.922 cv
292.715 512.945 292.684 512.957 292.645 512.957 cv
292.602 512.957 292.551 512.945 292.492 512.922 cv
292.43 512.898 292.359 512.875 292.289 512.852 cv
292.211 512.828 292.129 512.809 292.035 512.785 cv
291.941 512.77 291.84 512.758 291.73 512.754 cv
291.598 512.758 291.469 512.785 291.348 512.832 cv
291.223 512.887 291.094 512.973 290.957 513.09 cv
290.816 513.215 290.672 513.371 290.523 513.566 cv
290.371 513.762 290.203 514.004 290.023 514.289 cv
290.023 518.902 li
290.02 518.949 290.008 518.984 289.992 519.008 cv
289.969 519.039 289.938 519.062 289.891 519.082 cv
289.844 519.102 289.777 519.113 289.699 519.129 cv
289.613 519.137 289.508 519.145 289.379 519.145 cv
289.25 519.145 289.145 519.137 289.066 519.129 cv
288.98 519.113 288.914 519.102 288.867 519.082 cv
288.813 519.062 288.781 519.039 288.766 519.008 cv
288.746 518.984 288.734 518.949 288.738 518.902 cv
288.738 511.891 li
288.734 511.852 288.742 511.816 288.762 511.785 cv
288.773 511.758 288.805 511.734 288.855 511.707 cv
288.898 511.687 288.961 511.672 289.035 511.66 cv
289.105 511.656 289.199 511.652 289.324 511.648 cv
289.434 511.652 289.531 511.656 289.609 511.66 cv
289.684 511.672 289.742 511.687 289.785 511.707 cv
289.824 511.734 289.852 511.758 289.871 511.785 cv
289.887 511.816 289.895 511.852 289.898 511.891 cv
289.898 512.91 li
290.086 512.629 290.27 512.402 290.441 512.227 cv
290.609 512.051 290.77 511.91 290.922 511.809 cv
291.07 511.707 291.219 511.637 291.367 511.598 cv
291.516 511.559 291.664 511.539 291.816 511.539 cv
291.883 511.539 291.961 511.543 292.047 511.551 cv
292.133 511.559 292.223 511.574 292.316 511.594 cv
292.41 511.617 292.492 511.641 292.57 511.664 cv
292.641 511.691 292.695 511.719 292.73 511.742 cv
292.758 511.773 292.777 511.797 292.793 511.816 cv
292.801 511.844 292.813 511.875 292.82 511.906 cv
292.828 511.945 292.832 511.996 292.836 512.066 cv
292.836 512.137 292.836 512.23 292.84 512.348 cv
cp
f
304.602 515.316 mo
304.598 515.895 304.523 516.422 304.375 516.898 cv
304.223 517.383 303.996 517.797 303.699 518.141 cv
303.398 518.492 303.023 518.762 302.578 518.953 cv
302.125 519.148 301.605 519.242 301.016 519.246 cv
300.438 519.242 299.934 519.16 299.508 518.988 cv
299.078 518.82 298.723 518.57 298.438 518.242 cv
298.148 517.914 297.934 517.52 297.797 517.051 cv
297.656 516.586 297.59 516.055 297.59 515.457 cv
297.59 514.891 297.66 514.363 297.809 513.883 cv
297.953 513.402 298.18 512.988 298.48 512.637 cv
298.777 512.289 299.148 512.02 299.598 511.828 cv
300.043 511.637 300.566 511.539 301.164 511.539 cv
301.742 511.539 302.242 511.625 302.672 511.797 cv
303.098 511.969 303.457 512.219 303.742 512.547 cv
304.027 512.875 304.242 513.273 304.387 513.738 cv
304.527 514.207 304.598 514.734 304.602 515.316 cv
cp
303.27 515.402 mo
303.266 515.027 303.23 514.668 303.164 514.328 cv
303.09 513.992 302.973 513.699 302.813 513.441 cv
302.648 513.191 302.43 512.988 302.152 512.836 cv
301.871 512.691 301.523 512.617 301.113 512.613 cv
300.727 512.617 300.398 512.684 300.125 512.816 cv
299.848 512.953 299.621 513.145 299.445 513.391 cv
299.266 513.637 299.133 513.93 299.051 514.266 cv
298.961 514.605 298.918 514.973 298.922 515.371 cv
298.918 515.758 298.953 516.121 299.027 516.457 cv
299.094 516.797 299.211 517.09 299.379 517.34 cv
299.543 517.594 299.766 517.797 300.043 517.941 cv
300.32 518.094 300.668 518.168 301.082 518.164 cv
301.457 518.168 301.785 518.098 302.066 517.961 cv
302.344 517.828 302.57 517.641 302.75 517.391 cv
302.926 517.148 303.055 516.855 303.141 516.52 cv
303.223 516.184 303.266 515.812 303.27 515.402 cv
cp
f
310.332 509.004 mo
310.328 509.105 310.324 509.184 310.316 509.242 cv
310.305 509.305 310.293 509.355 310.281 509.387 cv
310.266 509.426 310.25 509.449 310.23 509.461 cv
310.207 509.477 310.18 509.484 310.152 509.48 cv
310.113 509.484 310.066 509.473 310.016 509.445 cv
309.957 509.426 309.891 509.398 309.816 509.367 cv
309.734 509.34 309.645 509.312 309.539 509.289 cv
309.43 509.266 309.305 509.254 309.172 509.254 cv
308.977 509.254 308.813 509.285 308.68 509.348 cv
308.539 509.41 308.43 509.508 308.352 509.641 cv
308.266 509.773 308.207 509.945 308.172 510.156 cv
308.133 510.367 308.113 510.625 308.117 510.922 cv
308.117 511.687 li
309.684 511.687 li
309.723 511.691 309.758 511.699 309.789 511.715 cv
309.816 511.734 309.844 511.766 309.867 511.809 cv
309.891 511.855 309.906 511.914 309.922 511.977 cv
309.93 512.047 309.938 512.129 309.941 512.223 cv
309.938 512.414 309.914 512.547 309.871 512.629 cv
309.82 512.715 309.758 512.758 309.684 512.754 cv
308.117 512.754 li
308.117 518.902 li
308.113 518.949 308.105 518.984 308.086 519.008 cv
308.063 519.039 308.027 519.062 307.98 519.082 cv
307.93 519.102 307.863 519.113 307.781 519.129 cv
307.695 519.137 307.59 519.145 307.473 519.145 cv
307.344 519.145 307.242 519.137 307.16 519.129 cv
307.074 519.113 307.008 519.102 306.961 519.082 cv
306.91 519.062 306.875 519.039 306.855 519.008 cv
306.832 518.984 306.82 518.949 306.824 518.902 cv
306.824 512.754 li
305.836 512.754 li
305.75 512.758 305.688 512.715 305.648 512.629 cv
305.605 512.547 305.582 512.414 305.586 512.223 cv
305.582 512.129 305.59 512.047 305.602 511.977 cv
305.609 511.914 305.625 511.855 305.648 511.809 cv
305.668 511.766 305.691 511.734 305.727 511.715 cv
305.754 511.699 305.793 511.691 305.836 511.687 cv
306.824 511.687 li
306.824 510.961 li
306.82 510.477 306.867 510.059 306.961 509.703 cv
307.051 509.355 307.188 509.066 307.375 508.844 cv
307.559 508.621 307.793 508.457 308.082 508.348 cv
308.363 508.242 308.699 508.187 309.086 508.187 cv
309.262 508.187 309.438 508.207 309.613 508.238 cv
309.781 508.277 309.914 508.312 310.012 508.348 cv
310.102 508.391 310.164 508.426 310.199 508.453 cv
310.227 508.488 310.254 508.527 310.277 508.574 cv
310.297 508.625 310.309 508.687 310.32 508.754 cv
310.324 508.828 310.328 508.91 310.332 509.004 cv
cp
f
320.527 516.27 mo
320.523 516.742 320.438 517.164 320.266 517.531 cv
320.09 517.906 319.848 518.219 319.539 518.473 cv
319.23 518.73 318.867 518.922 318.449 519.051 cv
318.027 519.18 317.578 519.242 317.098 519.246 cv
316.758 519.242 316.441 519.215 316.156 519.16 cv
315.867 519.102 315.613 519.035 315.387 518.949 cv
315.16 518.871 314.969 518.785 314.816 518.691 cv
314.66 518.605 314.555 518.527 314.496 518.465 cv
314.438 518.402 314.395 518.324 314.367 518.23 cv
314.336 518.137 314.32 518.008 314.324 517.844 cv
314.32 517.73 314.324 517.637 314.34 517.559 cv
314.348 517.484 314.363 517.422 314.387 517.375 cv
314.402 517.328 314.43 517.297 314.465 517.277 cv
314.492 517.262 314.527 517.254 314.57 517.25 cv
314.641 517.254 314.742 517.297 314.879 517.383 cv
315.008 517.473 315.18 517.57 315.391 517.672 cv
315.598 517.781 315.848 517.879 316.141 517.965 cv
316.434 518.059 316.773 518.102 317.16 518.102 cv
317.449 518.102 317.715 518.062 317.957 517.984 cv
318.195 517.906 318.402 517.797 318.582 517.652 cv
318.754 517.512 318.891 517.336 318.984 517.125 cv
319.078 516.918 319.125 516.684 319.125 516.418 cv
319.125 516.137 319.059 515.891 318.93 515.684 cv
318.797 515.484 318.625 515.309 318.414 515.152 cv
318.199 515.004 317.957 514.863 317.684 514.73 cv
317.41 514.605 317.129 514.473 316.848 514.34 cv
316.559 514.207 316.281 514.062 316.012 513.898 cv
315.742 513.742 315.5 513.551 315.289 513.332 cv
315.07 513.113 314.898 512.859 314.77 512.562 cv
314.633 512.273 314.566 511.922 314.57 511.508 cv
314.566 511.09 314.645 510.715 314.801 510.383 cv
314.953 510.055 315.164 509.777 315.441 509.551 cv
315.711 509.332 316.035 509.16 316.414 509.043 cv
316.789 508.926 317.199 508.867 317.637 508.867 cv
317.855 508.867 318.078 508.887 318.309 508.926 cv
318.531 508.965 318.742 509.016 318.945 509.078 cv
319.141 509.145 319.32 509.219 319.48 509.297 cv
319.633 509.379 319.734 509.445 319.789 509.492 cv
319.836 509.547 319.871 509.586 319.887 509.609 cv
319.902 509.641 319.914 509.676 319.926 509.719 cv
319.934 509.766 319.941 509.82 319.949 509.879 cv
319.953 509.945 319.957 510.023 319.957 510.121 cv
319.957 510.215 319.953 510.301 319.945 510.371 cv
319.938 510.449 319.926 510.508 319.91 510.555 cv
319.895 510.602 319.871 510.637 319.844 510.66 cv
319.813 510.684 319.781 510.695 319.746 510.695 cv
319.688 510.695 319.598 510.66 319.477 510.59 cv
319.352 510.52 319.199 510.437 319.027 510.344 cv
318.848 510.254 318.641 510.172 318.402 510.094 cv
318.156 510.02 317.887 509.98 317.59 509.98 cv
317.309 509.98 317.063 510.02 316.855 510.094 cv
316.645 510.172 316.473 510.273 316.34 510.395 cv
316.203 510.52 316.102 510.664 316.035 510.836 cv
315.969 511.008 315.938 511.191 315.938 511.383 cv
315.938 511.668 316 511.91 316.129 512.109 cv
316.258 512.312 316.43 512.492 316.648 512.645 cv
316.859 512.805 317.105 512.945 317.383 513.074 cv
317.656 513.207 317.938 513.34 318.227 513.469 cv
318.512 513.602 318.793 513.746 319.066 513.902 cv
319.34 514.062 319.586 514.25 319.805 514.465 cv
320.02 514.684 320.191 514.937 320.328 515.23 cv
320.457 515.523 320.523 515.871 320.527 516.27 cv
cp
f
328.297 518.902 mo
328.293 518.949 328.285 518.984 328.27 519.008 cv
328.25 519.039 328.215 519.062 328.172 519.082 cv
328.125 519.102 328.066 519.113 327.992 519.129 cv
327.914 519.137 327.82 519.145 327.715 519.145 cv
327.59 519.145 327.492 519.137 327.422 519.129 cv
327.344 519.113 327.285 519.102 327.242 519.082 cv
327.195 519.062 327.164 519.039 327.152 519.008 cv
327.133 518.984 327.125 518.949 327.129 518.902 cv
327.129 517.977 li
326.727 518.422 326.332 518.742 325.945 518.941 cv
325.551 519.145 325.156 519.242 324.762 519.246 cv
324.289 519.242 323.895 519.168 323.578 519.012 cv
323.258 518.859 323 518.648 322.805 518.379 cv
322.602 518.113 322.461 517.801 322.379 517.441 cv
322.289 517.086 322.246 516.652 322.25 516.145 cv
322.25 511.891 li
322.246 511.852 322.254 511.816 322.277 511.785 cv
322.293 511.758 322.328 511.734 322.383 511.707 cv
322.43 511.687 322.5 511.672 322.586 511.66 cv
322.668 511.656 322.77 511.652 322.898 511.648 cv
323.02 511.652 323.125 511.656 323.211 511.66 cv
323.293 511.672 323.359 511.687 323.406 511.707 cv
323.453 511.734 323.488 511.758 323.512 511.785 cv
323.531 511.816 323.539 511.852 323.543 511.891 cv
323.543 515.973 li
323.539 516.387 323.57 516.715 323.633 516.961 cv
323.691 517.207 323.781 517.418 323.906 517.59 cv
324.023 517.77 324.18 517.902 324.371 517.996 cv
324.555 518.094 324.773 518.145 325.023 518.141 cv
325.344 518.145 325.664 518.027 325.988 517.797 cv
326.305 517.57 326.645 517.234 327.004 516.789 cv
327.004 511.891 li
327.004 511.852 327.012 511.816 327.031 511.785 cv
327.047 511.758 327.082 511.734 327.137 511.707 cv
327.188 511.687 327.254 511.672 327.336 511.66 cv
327.414 511.656 327.52 511.652 327.652 511.648 cv
327.773 511.652 327.879 511.656 327.965 511.66 cv
328.047 511.672 328.109 511.687 328.156 511.707 cv
328.199 511.734 328.234 511.758 328.262 511.785 cv
328.281 511.816 328.293 511.852 328.297 511.891 cv
cp
f
337.152 515.301 mo
337.148 515.91 337.082 516.461 336.953 516.945 cv
336.816 517.434 336.621 517.848 336.367 518.187 cv
336.109 518.531 335.793 518.793 335.422 518.973 cv
335.047 519.156 334.621 519.242 334.137 519.246 cv
333.91 519.242 333.703 519.223 333.516 519.18 cv
333.328 519.133 333.141 519.062 332.961 518.965 cv
332.773 518.867 332.594 518.742 332.414 518.59 cv
332.23 518.441 332.039 518.262 331.84 518.047 cv
331.84 518.902 li
331.84 518.949 331.828 518.984 331.809 519.012 cv
331.785 519.047 331.75 519.07 331.707 519.086 cv
331.656 519.102 331.598 519.113 331.531 519.129 cv
331.457 519.137 331.367 519.145 331.262 519.145 cv
331.152 519.145 331.066 519.137 330.996 519.129 cv
330.922 519.113 330.859 519.102 330.816 519.086 cv
330.766 519.07 330.734 519.047 330.723 519.012 cv
330.703 518.984 330.695 518.949 330.699 518.902 cv
330.699 508.492 li
330.695 508.453 330.707 508.418 330.727 508.383 cv
330.742 508.355 330.773 508.328 330.828 508.305 cv
330.875 508.285 330.941 508.27 331.027 508.258 cv
331.105 508.25 331.211 508.246 331.34 508.242 cv
331.469 508.246 331.574 508.25 331.66 508.258 cv
331.738 508.27 331.805 508.285 331.852 508.305 cv
331.898 508.328 331.93 508.355 331.953 508.383 cv
331.969 508.418 331.98 508.453 331.984 508.492 cv
331.984 512.691 li
332.191 512.48 332.395 512.301 332.59 512.156 cv
332.785 512.012 332.973 511.895 333.16 511.801 cv
333.344 511.715 333.531 511.648 333.723 511.602 cv
333.906 511.562 334.105 511.539 334.316 511.539 cv
334.82 511.539 335.254 511.641 335.621 511.844 cv
335.98 512.047 336.273 512.32 336.5 512.656 cv
336.723 513 336.891 513.398 336.996 513.855 cv
337.098 514.312 337.148 514.793 337.152 515.301 cv
cp
335.82 515.449 mo
335.816 515.094 335.789 514.746 335.738 514.406 cv
335.68 514.07 335.586 513.773 335.449 513.512 cv
335.313 513.254 335.133 513.043 334.91 512.883 cv
334.684 512.727 334.402 512.648 334.07 512.645 cv
333.902 512.648 333.738 512.672 333.578 512.715 cv
333.414 512.766 333.25 512.844 333.082 512.949 cv
332.914 513.062 332.738 513.203 332.563 513.371 cv
332.379 513.547 332.188 513.762 331.984 514.016 cv
331.984 516.812 li
332.34 517.246 332.68 517.578 333.004 517.801 cv
333.328 518.031 333.664 518.145 334.016 518.141 cv
334.336 518.145 334.613 518.066 334.848 517.906 cv
335.074 517.754 335.262 517.547 335.406 517.285 cv
335.551 517.031 335.656 516.742 335.723 516.422 cv
335.785 516.105 335.816 515.781 335.82 515.449 cv
cp
f
342.289 515.164 mo
342.289 515.367 342.266 515.504 342.219 515.582 cv
342.172 515.66 342.102 515.699 342.016 515.699 cv
338.758 515.699 li
338.664 515.699 338.598 515.66 338.551 515.578 cv
338.504 515.5 338.48 515.363 338.48 515.164 cv
338.48 514.969 338.504 514.828 338.551 514.75 cv
338.598 514.672 338.664 514.633 338.758 514.633 cv
342.016 514.633 li
342.055 514.633 342.094 514.641 342.129 514.656 cv
342.16 514.672 342.188 514.703 342.215 514.746 cv
342.234 514.793 342.254 514.848 342.27 514.914 cv
342.281 514.984 342.289 515.07 342.289 515.164 cv
cp
f
345.539 518.895 mo
345.535 518.937 345.527 518.973 345.508 519.004 cv
345.484 519.035 345.445 519.062 345.398 519.078 cv
345.344 519.098 345.277 519.109 345.191 519.125 cv
345.105 519.137 344.996 519.145 344.871 519.145 cv
344.742 519.145 344.637 519.137 344.551 519.125 cv
344.461 519.109 344.391 519.098 344.34 519.078 cv
344.285 519.062 344.25 519.035 344.23 519.004 cv
344.207 518.973 344.195 518.937 344.199 518.895 cv
344.199 509.215 li
344.195 509.176 344.207 509.141 344.234 509.105 cv
344.254 509.078 344.293 509.051 344.352 509.031 cv
344.402 509.016 344.473 509 344.563 508.984 cv
344.645 508.973 344.746 508.969 344.871 508.965 cv
344.996 508.969 345.105 508.973 345.191 508.984 cv
345.277 509 345.344 509.016 345.398 509.031 cv
345.445 509.051 345.484 509.078 345.508 509.105 cv
345.527 509.141 345.535 509.176 345.539 509.215 cv
cp
f
358.527 518.902 mo
358.523 518.949 358.516 518.984 358.496 519.008 cv
358.473 519.039 358.438 519.062 358.395 519.082 cv
358.344 519.102 358.277 519.113 358.199 519.129 cv
358.113 519.137 358.012 519.145 357.887 519.145 cv
357.754 519.145 357.645 519.137 357.566 519.129 cv
357.48 519.113 357.414 519.102 357.367 519.082 cv
357.313 519.062 357.277 519.039 357.262 519.008 cv
357.238 518.984 357.23 518.949 357.23 518.902 cv
357.23 514.641 li
357.23 514.348 357.203 514.078 357.152 513.832 cv
357.098 513.59 357.016 513.379 356.902 513.199 cv
356.789 513.023 356.645 512.887 356.469 512.793 cv
356.289 512.699 356.078 512.652 355.844 512.652 cv
355.547 512.652 355.25 512.77 354.953 512.996 cv
354.648 513.23 354.32 513.562 353.965 514 cv
353.965 518.902 li
353.961 518.949 353.949 518.984 353.934 519.008 cv
353.91 519.039 353.879 519.062 353.832 519.082 cv
353.781 519.102 353.715 519.113 353.633 519.129 cv
353.547 519.137 353.441 519.145 353.32 519.145 cv
353.199 519.145 353.098 519.137 353.012 519.129 cv
352.926 519.113 352.855 519.102 352.809 519.082 cv
352.754 519.062 352.723 519.039 352.707 519.008 cv
352.688 518.984 352.676 518.949 352.68 518.902 cv
352.68 514.641 li
352.676 514.348 352.648 514.078 352.594 513.832 cv
352.535 513.59 352.449 513.379 352.336 513.199 cv
352.223 513.023 352.078 512.887 351.906 512.793 cv
351.727 512.699 351.52 512.652 351.285 512.652 cv
350.984 512.652 350.688 512.77 350.387 512.996 cv
350.086 513.23 349.758 513.562 349.406 514 cv
349.406 518.902 li
349.402 518.949 349.391 518.984 349.375 519.008 cv
349.352 519.039 349.32 519.062 349.273 519.082 cv
349.227 519.102 349.16 519.113 349.082 519.129 cv
348.996 519.137 348.891 519.145 348.762 519.145 cv
348.633 519.145 348.527 519.137 348.449 519.129 cv
348.363 519.113 348.297 519.102 348.25 519.082 cv
348.195 519.062 348.164 519.039 348.148 519.008 cv
348.129 518.984 348.117 518.949 348.121 518.902 cv
348.121 511.891 li
348.117 511.852 348.125 511.816 348.145 511.785 cv
348.156 511.758 348.188 511.734 348.238 511.707 cv
348.281 511.687 348.344 511.672 348.418 511.66 cv
348.488 511.656 348.582 511.652 348.707 511.648 cv
348.816 511.652 348.914 511.656 348.992 511.66 cv
349.066 511.672 349.125 511.687 349.168 511.707 cv
349.207 511.734 349.234 511.758 349.254 511.785 cv
349.27 511.816 349.277 511.852 349.281 511.891 cv
349.281 512.816 li
349.672 512.375 350.055 512.055 350.43 511.848 cv
350.797 511.645 351.176 511.539 351.559 511.539 cv
351.848 511.539 352.105 511.574 352.34 511.641 cv
352.566 511.711 352.773 511.805 352.953 511.926 cv
353.129 512.047 353.277 512.191 353.406 512.359 cv
353.527 512.531 353.633 512.723 353.719 512.926 cv
353.949 512.676 354.172 512.461 354.383 512.281 cv
354.594 512.109 354.797 511.965 354.992 511.852 cv
355.188 511.746 355.375 511.668 355.559 511.613 cv
355.742 511.566 355.93 511.539 356.117 511.539 cv
356.57 511.539 356.949 511.621 357.254 511.777 cv
357.559 511.941 357.805 512.152 358 512.414 cv
358.188 512.68 358.324 512.988 358.406 513.344 cv
358.484 513.699 358.523 514.074 358.527 514.469 cv
cp
f
366.16 518.91 mo
366.156 518.973 366.137 519.02 366.098 519.051 cv
366.055 519.082 365.996 519.105 365.926 519.121 cv
365.848 519.137 365.742 519.145 365.605 519.145 cv
365.469 519.145 365.359 519.137 365.281 519.121 cv
365.195 519.105 365.137 519.082 365.105 519.051 cv
365.066 519.02 365.051 518.973 365.055 518.91 cv
365.055 518.211 li
364.746 518.539 364.402 518.793 364.027 518.973 cv
363.648 519.156 363.25 519.242 362.832 519.246 cv
362.457 519.242 362.125 519.195 361.828 519.102 cv
361.531 519.004 361.277 518.867 361.066 518.684 cv
360.855 518.504 360.691 518.281 360.574 518.016 cv
360.457 517.754 360.398 517.453 360.402 517.109 cv
360.398 516.719 360.477 516.375 360.641 516.082 cv
360.797 515.793 361.031 515.551 361.336 515.359 cv
361.637 515.168 362.004 515.023 362.441 514.926 cv
362.875 514.832 363.367 514.785 363.914 514.781 cv
364.883 514.781 li
364.883 514.234 li
364.879 513.965 364.852 513.727 364.797 513.52 cv
364.738 513.312 364.645 513.141 364.52 513 cv
364.387 512.863 364.223 512.758 364.023 512.687 cv
363.816 512.617 363.566 512.582 363.277 512.582 cv
362.957 512.582 362.672 512.621 362.422 512.695 cv
362.164 512.773 361.945 512.855 361.758 512.945 cv
361.57 513.039 361.41 513.125 361.285 513.195 cv
361.152 513.273 361.059 513.309 361 513.309 cv
360.957 513.309 360.922 513.301 360.891 513.277 cv
360.859 513.262 360.832 513.23 360.809 513.184 cv
360.785 513.145 360.766 513.09 360.758 513.023 cv
360.742 512.961 360.738 512.891 360.742 512.809 cv
360.738 512.684 360.746 512.578 360.77 512.5 cv
360.785 512.426 360.832 512.355 360.902 512.285 cv
360.973 512.219 361.094 512.141 361.266 512.051 cv
361.438 511.961 361.633 511.879 361.855 511.801 cv
362.078 511.73 362.324 511.668 362.59 511.613 cv
362.855 511.566 363.121 511.539 363.395 511.539 cv
363.895 511.539 364.324 511.598 364.676 511.711 cv
365.027 511.828 365.313 511.996 365.535 512.215 cv
365.75 512.437 365.91 512.711 366.012 513.035 cv
366.109 513.367 366.156 513.75 366.16 514.18 cv
cp
364.883 515.707 mo
363.781 515.707 li
363.426 515.711 363.121 515.742 362.863 515.797 cv
362.602 515.859 362.387 515.945 362.215 516.062 cv
362.043 516.18 361.918 516.32 361.84 516.484 cv
361.758 516.648 361.715 516.836 361.719 517.047 cv
361.715 517.414 361.832 517.707 362.063 517.918 cv
362.293 518.137 362.617 518.242 363.035 518.242 cv
363.371 518.242 363.684 518.156 363.973 517.984 cv
364.262 517.812 364.563 517.551 364.883 517.195 cv
cp
f
374.379 512.207 mo
374.375 512.391 374.352 512.523 374.305 512.602 cv
374.254 512.684 374.191 512.723 374.117 512.723 cv
373.109 512.723 li
373.289 512.91 373.418 513.117 373.492 513.344 cv
373.563 513.57 373.598 513.805 373.602 514.047 cv
373.598 514.453 373.531 514.812 373.406 515.125 cv
373.273 515.437 373.09 515.703 372.848 515.914 cv
372.605 516.133 372.316 516.297 371.988 516.41 cv
371.652 516.527 371.285 516.586 370.883 516.582 cv
370.594 516.586 370.32 516.547 370.066 516.469 cv
369.805 516.395 369.609 516.301 369.473 516.184 cv
369.379 516.281 369.301 516.387 369.242 516.504 cv
369.18 516.625 369.148 516.762 369.152 516.914 cv
369.148 517.098 369.234 517.25 369.406 517.367 cv
369.574 517.492 369.797 517.555 370.078 517.562 cv
371.91 517.641 li
372.258 517.652 372.574 517.699 372.867 517.785 cv
373.156 517.871 373.41 517.996 373.625 518.152 cv
373.836 518.312 374.004 518.504 374.125 518.734 cv
374.242 518.969 374.301 519.238 374.305 519.543 cv
374.301 519.863 374.234 520.168 374.102 520.461 cv
373.965 520.75 373.758 521.004 373.48 521.227 cv
373.199 521.445 372.844 521.621 372.414 521.75 cv
371.984 521.875 371.477 521.937 370.891 521.941 cv
370.32 521.937 369.836 521.891 369.441 521.797 cv
369.043 521.699 368.719 521.566 368.465 521.402 cv
368.211 521.234 368.027 521.039 367.914 520.809 cv
367.797 520.574 367.738 520.32 367.742 520.055 cv
367.738 519.883 367.758 519.719 367.805 519.559 cv
367.844 519.395 367.906 519.242 367.992 519.098 cv
368.074 518.953 368.184 518.816 368.313 518.68 cv
368.438 518.551 368.582 518.418 368.754 518.289 cv
368.496 518.16 368.309 517.996 368.188 517.797 cv
368.066 517.602 368.008 517.391 368.008 517.156 cv
368.008 516.844 368.07 516.559 368.199 516.309 cv
368.328 516.059 368.488 515.836 368.684 515.637 cv
368.52 515.445 368.395 515.23 368.301 514.988 cv
368.207 514.75 368.16 514.457 368.16 514.109 cv
368.16 513.715 368.227 513.355 368.363 513.035 cv
368.496 512.719 368.684 512.453 368.926 512.234 cv
369.164 512.02 369.449 511.852 369.785 511.73 cv
370.117 511.617 370.484 511.559 370.883 511.555 cv
371.094 511.559 371.293 511.57 371.477 511.59 cv
371.66 511.617 371.832 511.648 371.996 511.687 cv
374.117 511.687 li
374.203 511.691 374.27 511.734 374.313 511.816 cv
374.355 511.906 374.375 512.035 374.379 512.207 cv
cp
372.371 514.055 mo
372.367 513.582 372.234 513.211 371.977 512.937 cv
371.711 512.672 371.34 512.535 370.859 512.535 cv
370.605 512.535 370.387 512.578 370.207 512.66 cv
370.02 512.746 369.867 512.859 369.746 513.004 cv
369.625 513.152 369.535 513.32 369.477 513.508 cv
369.414 513.695 369.383 513.895 369.387 514.102 cv
369.383 514.566 369.516 514.93 369.777 515.195 cv
370.039 515.461 370.406 515.594 370.883 515.59 cv
371.133 515.594 371.352 515.555 371.543 515.469 cv
371.727 515.391 371.883 515.277 372.008 515.137 cv
372.129 514.996 372.219 514.832 372.281 514.641 cv
372.336 514.457 372.367 514.262 372.371 514.055 cv
cp
373.016 519.613 mo
373.012 519.309 372.887 519.078 372.645 518.914 cv
372.395 518.754 372.063 518.664 371.645 518.652 cv
369.828 518.59 li
369.66 518.723 369.523 518.848 369.422 518.961 cv
369.313 519.078 369.23 519.187 369.168 519.297 cv
369.105 519.402 369.063 519.508 369.039 519.613 cv
369.016 519.715 369.004 519.82 369.004 519.93 cv
369.004 520.266 369.172 520.52 369.516 520.699 cv
369.855 520.871 370.336 520.961 370.953 520.961 cv
371.34 520.961 371.664 520.922 371.93 520.848 cv
372.188 520.77 372.398 520.668 372.563 520.547 cv
372.719 520.418 372.836 520.277 372.91 520.117 cv
372.977 519.957 373.012 519.789 373.016 519.613 cv
cp
f
381.941 515.094 mo
381.938 515.297 381.887 515.437 381.789 515.523 cv
381.684 515.609 381.566 515.652 381.441 515.652 cv
376.824 515.652 li
376.82 516.043 376.859 516.395 376.941 516.707 cv
377.016 517.02 377.148 517.289 377.332 517.508 cv
377.512 517.734 377.746 517.906 378.043 518.023 cv
378.332 518.148 378.691 518.207 379.117 518.203 cv
379.449 518.207 379.746 518.18 380.008 518.121 cv
380.27 518.07 380.496 518.008 380.688 517.937 cv
380.875 517.871 381.031 517.812 381.156 517.754 cv
381.277 517.703 381.371 517.676 381.434 517.672 cv
381.469 517.676 381.5 517.684 381.531 517.699 cv
381.559 517.719 381.582 517.746 381.602 517.781 cv
381.613 517.82 381.625 517.871 381.637 517.934 cv
381.641 518 381.645 518.078 381.648 518.172 cv
381.645 518.242 381.641 518.301 381.641 518.348 cv
381.633 518.395 381.629 518.437 381.621 518.477 cv
381.613 518.516 381.598 518.551 381.582 518.582 cv
381.559 518.613 381.535 518.645 381.512 518.672 cv
381.48 518.703 381.398 518.75 381.258 518.812 cv
381.117 518.879 380.934 518.941 380.711 519.004 cv
380.484 519.066 380.227 519.121 379.934 519.172 cv
379.641 519.219 379.328 519.242 378.996 519.246 cv
378.418 519.242 377.91 519.164 377.48 519.004 cv
377.043 518.844 376.68 518.605 376.387 518.289 cv
376.086 517.973 375.863 517.578 375.715 517.098 cv
375.566 516.621 375.492 516.062 375.492 515.426 cv
375.492 514.828 375.566 514.289 375.723 513.805 cv
375.875 513.328 376.102 512.918 376.398 512.582 cv
376.691 512.246 377.047 511.988 377.461 511.809 cv
377.875 511.629 378.34 511.539 378.855 511.539 cv
379.406 511.539 379.875 511.629 380.262 511.805 cv
380.648 511.984 380.965 512.223 381.219 512.52 cv
381.465 512.82 381.648 513.172 381.766 513.57 cv
381.879 513.977 381.938 514.406 381.941 514.859 cv
cp
380.648 514.711 mo
380.664 514.035 380.512 513.504 380.195 513.121 cv
379.879 512.738 379.41 512.547 378.793 512.543 cv
378.469 512.547 378.188 512.605 377.949 512.723 cv
377.707 512.844 377.508 513.004 377.348 513.199 cv
377.184 513.398 377.059 513.629 376.973 513.891 cv
376.883 514.152 376.832 514.426 376.824 514.711 cv
cp
f
388.305 516.992 mo
388.301 517.355 388.234 517.676 388.105 517.953 cv
387.973 518.234 387.785 518.469 387.543 518.66 cv
387.297 518.855 387.004 519 386.668 519.098 cv
386.328 519.195 385.957 519.242 385.555 519.246 cv
385.301 519.242 385.063 519.223 384.84 519.187 cv
384.613 519.145 384.414 519.098 384.234 519.039 cv
384.055 518.98 383.902 518.918 383.777 518.852 cv
383.652 518.789 383.559 518.73 383.504 518.676 cv
383.445 518.625 383.406 518.555 383.383 518.457 cv
383.355 518.367 383.344 518.238 383.344 518.078 cv
383.344 517.98 383.348 517.898 383.359 517.828 cv
383.367 517.762 383.379 517.707 383.398 517.664 cv
383.41 517.625 383.434 517.594 383.461 517.574 cv
383.488 517.559 383.52 517.551 383.559 517.547 cv
383.613 517.551 383.699 517.586 383.813 517.652 cv
383.922 517.727 384.059 517.805 384.227 517.883 cv
384.387 517.969 384.578 518.043 384.805 518.113 cv
385.023 518.184 385.281 518.219 385.578 518.219 cv
385.793 518.219 385.992 518.195 386.172 518.148 cv
386.348 518.102 386.5 518.035 386.629 517.941 cv
386.758 517.855 386.859 517.738 386.93 517.594 cv
387 517.457 387.035 517.289 387.035 517.094 cv
387.035 516.898 386.984 516.734 386.883 516.598 cv
386.781 516.465 386.645 516.344 386.48 516.238 cv
386.313 516.137 386.129 516.047 385.922 515.961 cv
385.711 515.883 385.496 515.797 385.277 515.707 cv
385.059 515.621 384.844 515.52 384.633 515.406 cv
384.422 515.297 384.23 515.164 384.066 515 cv
383.895 514.844 383.762 514.648 383.664 514.422 cv
383.559 514.199 383.508 513.934 383.512 513.621 cv
383.508 513.348 383.563 513.082 383.672 512.828 cv
383.777 512.578 383.938 512.359 384.152 512.168 cv
384.363 511.98 384.629 511.828 384.949 511.711 cv
385.27 511.598 385.641 511.539 386.07 511.539 cv
386.254 511.539 386.441 511.555 386.629 511.586 cv
386.813 511.617 386.98 511.656 387.137 511.703 cv
387.285 511.75 387.414 511.801 387.523 511.855 cv
387.625 511.91 387.707 511.961 387.766 512 cv
387.816 512.047 387.852 512.082 387.875 512.109 cv
387.891 512.141 387.906 512.176 387.914 512.211 cv
387.922 512.254 387.93 512.301 387.938 512.355 cv
387.945 512.414 387.949 512.484 387.949 512.566 cv
387.949 512.656 387.945 512.734 387.938 512.797 cv
387.93 512.867 387.914 512.918 387.898 512.957 cv
387.875 513 387.855 513.031 387.832 513.047 cv
387.805 513.066 387.773 513.074 387.746 513.074 cv
387.695 513.074 387.629 513.047 387.543 512.988 cv
387.453 512.934 387.34 512.871 387.199 512.805 cv
387.059 512.742 386.891 512.684 386.703 512.621 cv
386.512 512.566 386.297 512.535 386.055 512.535 cv
385.832 512.535 385.641 512.562 385.477 512.609 cv
385.309 512.664 385.172 512.734 385.066 512.82 cv
384.961 512.914 384.879 513.02 384.828 513.145 cv
384.77 513.27 384.742 513.406 384.746 513.551 cv
384.742 513.754 384.793 513.922 384.898 514.059 cv
385 514.199 385.137 514.32 385.305 514.422 cv
385.469 514.527 385.66 514.621 385.875 514.703 cv
386.086 514.789 386.301 514.875 386.523 514.961 cv
386.742 515.051 386.961 515.152 387.18 515.258 cv
387.395 515.367 387.586 515.496 387.754 515.652 cv
387.918 515.809 388.051 515.996 388.152 516.215 cv
388.25 516.434 388.301 516.695 388.305 516.992 cv
cp
f
144.02 11.57 mo
144.016 12.41 143.914 13.16 143.707 13.816 cv
143.5 14.48 143.191 15.039 142.781 15.496 cv
142.371 15.957 141.863 16.309 141.258 16.547 cv
140.652 16.789 139.953 16.906 139.16 16.91 cv
138.371 16.906 137.684 16.805 137.102 16.602 cv
136.516 16.398 136.027 16.086 135.641 15.664 cv
135.25 15.242 134.961 14.707 134.766 14.059 cv
134.57 13.41 134.473 12.641 134.477 11.75 cv
134.473 10.937 134.574 10.207 134.785 9.55103 cv
134.988 8.90198 135.297 8.34802 135.711 7.88702 cv
136.117 7.43402 136.625 7.08197 137.234 6.836 cv
137.836 6.59399 138.539 6.47302 139.344 6.46899 cv
140.105 6.47302 140.781 6.57397 141.367 6.77301 cv
141.949 6.97699 142.438 7.28497 142.832 7.70697 cv
143.223 8.12903 143.52 8.65997 143.719 9.30103 cv
143.918 9.94098 144.016 10.699 144.02 11.57 cv
cp
141.871 11.68 mo
141.867 11.152 141.824 10.672 141.746 10.238 cv
141.66 9.80499 141.52 9.43402 141.32 9.12097 cv
141.117 8.81201 140.852 8.57397 140.52 8.40601 cv
140.188 8.23798 139.773 8.15198 139.277 8.15198 cv
138.77 8.15198 138.348 8.25 138.012 8.43701 cv
137.676 8.62903 137.402 8.87903 137.195 9.19501 cv
136.984 9.51599 136.836 9.88702 136.754 10.309 cv
136.664 10.73 136.621 11.18 136.625 11.648 cv
136.621 12.203 136.664 12.699 136.75 13.137 cv
136.832 13.578 136.973 13.953 137.172 14.262 cv
137.367 14.574 137.633 14.809 137.965 14.973 cv
138.297 15.137 138.715 15.219 139.223 15.219 cv
139.723 15.219 140.141 15.125 140.48 14.937 cv
140.816 14.75 141.09 14.496 141.301 14.176 cv
141.504 13.855 141.652 13.48 141.742 13.051 cv
141.824 12.621 141.867 12.164 141.871 11.68 cv
cp
f
152.02 9.508 mo
152.016 9.53497 152.016 9.56598 152.016 9.60199 cv
152.012 9.64099 152.008 9.67999 152 9.72302 cv
151.992 9.76599 151.98 9.81598 151.969 9.87097 cv
151.953 9.92999 151.938 9.99597 151.918 10.066 cv
149.832 16.355 li
149.805 16.445 149.77 16.52 149.727 16.57 cv
149.68 16.629 149.605 16.672 149.508 16.699 cv
149.402 16.73 149.266 16.746 149.094 16.762 cv
148.918 16.77 148.691 16.777 148.414 16.777 cv
148.137 16.777 147.91 16.77 147.738 16.758 cv
147.563 16.742 147.426 16.723 147.328 16.691 cv
147.227 16.664 147.156 16.621 147.113 16.562 cv
147.066 16.512 147.031 16.441 147.008 16.355 cv
144.922 10.066 li
144.891 9.96503 144.863 9.87097 144.848 9.789 cv
144.824 9.70697 144.816 9.64801 144.816 9.60901 cv
144.813 9.578 144.809 9.54303 144.813 9.508 cv
144.809 9.45697 144.824 9.40997 144.855 9.37097 cv
144.883 9.33197 144.934 9.30103 145.008 9.27301 cv
145.078 9.25 145.176 9.22998 145.305 9.21899 cv
145.43 9.211 145.59 9.20697 145.785 9.203 cv
145.996 9.20697 146.168 9.21503 146.301 9.22302 cv
146.426 9.23798 146.531 9.25403 146.609 9.27698 cv
146.684 9.30103 146.734 9.336 146.77 9.37903 cv
146.797 9.42603 146.824 9.47998 146.848 9.539 cv
148.43 14.641 li
148.477 14.836 li
148.523 14.641 li
150.082 9.539 li
150.094 9.47998 150.117 9.42603 150.152 9.37903 cv
150.184 9.336 150.238 9.30103 150.313 9.27698 cv
150.383 9.25403 150.48 9.23798 150.605 9.22302 cv
150.727 9.21503 150.887 9.20697 151.086 9.203 cv
151.277 9.20697 151.434 9.211 151.555 9.21899 cv
151.676 9.22998 151.77 9.25 151.84 9.27301 cv
151.906 9.30103 151.953 9.33197 151.98 9.37097 cv
152.004 9.40997 152.016 9.45697 152.02 9.508 cv
cp
f
159.496 12.789 mo
159.492 13.027 159.441 13.203 159.336 13.316 cv
159.227 13.434 159.078 13.492 158.898 13.488 cv
154.664 13.488 li
154.66 13.789 154.695 14.059 154.77 14.297 cv
154.836 14.539 154.949 14.742 155.105 14.91 cv
155.258 15.082 155.453 15.211 155.695 15.297 cv
155.934 15.387 156.223 15.43 156.566 15.43 cv
156.906 15.43 157.207 15.406 157.469 15.355 cv
157.727 15.309 157.953 15.254 158.145 15.191 cv
158.332 15.133 158.488 15.078 158.617 15.027 cv
158.738 14.98 158.84 14.957 158.922 14.953 cv
158.965 14.957 159.004 14.965 159.039 14.98 cv
159.066 15 159.094 15.031 159.113 15.078 cv
159.133 15.125 159.145 15.191 159.156 15.277 cv
159.16 15.363 159.164 15.473 159.168 15.602 cv
159.164 15.719 159.164 15.816 159.16 15.895 cv
159.152 15.977 159.145 16.043 159.137 16.098 cv
159.125 16.156 159.109 16.207 159.09 16.242 cv
159.07 16.285 159.043 16.32 159.012 16.355 cv
158.977 16.395 158.883 16.445 158.734 16.504 cv
158.578 16.57 158.387 16.633 158.156 16.687 cv
157.918 16.75 157.648 16.797 157.352 16.844 cv
157.047 16.883 156.727 16.906 156.387 16.91 cv
155.766 16.906 155.223 16.832 154.762 16.676 cv
154.293 16.523 153.906 16.285 153.598 15.969 cv
153.281 15.652 153.047 15.254 152.898 14.77 cv
152.742 14.289 152.668 13.723 152.672 13.066 cv
152.668 12.453 152.746 11.895 152.91 11.398 cv
153.066 10.902 153.301 10.484 153.613 10.137 cv
153.918 9.79303 154.293 9.52698 154.73 9.34399 cv
155.168 9.164 155.66 9.07397 156.215 9.07001 cv
156.793 9.07397 157.293 9.15997 157.707 9.328 cv
158.121 9.50403 158.457 9.742 158.723 10.043 cv
158.984 10.348 159.18 10.707 159.309 11.121 cv
159.43 11.539 159.492 11.988 159.496 12.477 cv
cp
157.594 12.227 mo
157.605 11.676 157.496 11.242 157.262 10.93 cv
157.027 10.617 156.66 10.461 156.168 10.457 cv
155.918 10.461 155.703 10.508 155.52 10.598 cv
155.332 10.695 155.18 10.82 155.059 10.977 cv
154.934 11.137 154.84 11.324 154.777 11.539 cv
154.711 11.754 154.672 11.984 154.664 12.227 cv
cp
f
165.57 10.16 mo
165.57 10.352 165.563 10.504 165.555 10.621 cv
165.539 10.742 165.523 10.836 165.508 10.902 cv
165.484 10.973 165.457 11.02 165.426 11.043 cv
165.387 11.07 165.344 11.082 165.297 11.082 cv
165.25 11.082 165.203 11.074 165.156 11.055 cv
165.102 11.039 165.043 11.02 164.98 10.996 cv
164.91 10.977 164.84 10.957 164.766 10.937 cv
164.684 10.922 164.598 10.914 164.508 10.91 cv
164.395 10.914 164.285 10.934 164.18 10.977 cv
164.07 11.023 163.957 11.094 163.844 11.184 cv
163.723 11.277 163.602 11.402 163.477 11.555 cv
163.348 11.715 163.211 11.906 163.066 12.133 cv
163.066 16.465 li
163.063 16.52 163.047 16.562 163.02 16.602 cv
162.984 16.641 162.93 16.676 162.859 16.699 cv
162.781 16.727 162.684 16.742 162.559 16.758 cv
162.434 16.77 162.273 16.777 162.086 16.777 cv
161.891 16.777 161.734 16.77 161.609 16.758 cv
161.484 16.742 161.383 16.727 161.309 16.699 cv
161.23 16.676 161.176 16.641 161.148 16.602 cv
161.113 16.562 161.098 16.52 161.102 16.465 cv
161.102 9.51599 li
161.098 9.46899 161.113 9.422 161.141 9.37903 cv
161.164 9.34399 161.211 9.31201 161.281 9.28101 cv
161.348 9.258 161.434 9.23798 161.543 9.22302 cv
161.648 9.21503 161.781 9.20697 161.945 9.203 cv
162.109 9.20697 162.246 9.21503 162.355 9.22302 cv
162.461 9.23798 162.547 9.258 162.609 9.28101 cv
162.668 9.31201 162.711 9.34399 162.738 9.37903 cv
162.762 9.422 162.773 9.46899 162.777 9.51599 cv
162.777 10.379 li
162.957 10.121 163.129 9.90997 163.293 9.73798 cv
163.449 9.57397 163.605 9.43701 163.754 9.336 cv
163.898 9.23798 164.043 9.172 164.188 9.12903 cv
164.332 9.09399 164.477 9.07397 164.625 9.07001 cv
164.691 9.07397 164.766 9.078 164.844 9.08197 cv
164.922 9.09399 165 9.10498 165.086 9.12097 cv
165.164 9.14099 165.238 9.15997 165.305 9.18402 cv
165.363 9.20697 165.41 9.23401 165.441 9.258 cv
165.469 9.289 165.488 9.31598 165.504 9.34399 cv
165.516 9.37903 165.527 9.422 165.539 9.47302 cv
165.547 9.53101 165.555 9.61298 165.563 9.71899 cv
165.566 9.828 165.57 9.97699 165.57 10.16 cv
cp
f
172.324 16.488 mo
172.32 16.566 172.293 16.621 172.246 16.66 cv
172.191 16.703 172.109 16.73 172 16.75 cv
171.883 16.766 171.719 16.777 171.504 16.777 cv
171.266 16.777 171.094 16.766 170.992 16.75 cv
170.883 16.73 170.809 16.703 170.77 16.66 cv
170.723 16.621 170.703 16.566 170.703 16.488 cv
170.703 15.937 li
170.414 16.246 170.086 16.484 169.723 16.652 cv
169.355 16.824 168.949 16.906 168.504 16.91 cv
168.133 16.906 167.793 16.859 167.484 16.766 cv
167.176 16.672 166.91 16.531 166.684 16.336 cv
166.457 16.148 166.281 15.914 166.156 15.633 cv
166.031 15.355 165.969 15.027 165.973 14.648 cv
165.969 14.25 166.047 13.898 166.207 13.594 cv
166.363 13.297 166.602 13.051 166.918 12.855 cv
167.23 12.664 167.621 12.52 168.09 12.422 cv
168.559 12.332 169.102 12.285 169.719 12.281 cv
170.398 12.281 li
170.398 11.859 li
170.398 11.645 170.375 11.453 170.332 11.289 cv
170.285 11.129 170.211 10.992 170.113 10.879 cv
170.008 10.773 169.875 10.691 169.707 10.637 cv
169.535 10.586 169.324 10.562 169.082 10.559 cv
168.75 10.562 168.457 10.598 168.203 10.668 cv
167.941 10.742 167.715 10.824 167.52 10.91 cv
167.32 11.004 167.156 11.082 167.027 11.152 cv
166.891 11.227 166.781 11.266 166.703 11.262 cv
166.641 11.266 166.59 11.246 166.551 11.207 cv
166.504 11.172 166.469 11.121 166.441 11.051 cv
166.41 10.988 166.387 10.902 166.375 10.801 cv
166.355 10.703 166.348 10.594 166.352 10.473 cv
166.348 10.312 166.363 10.187 166.391 10.09 cv
166.414 10 166.461 9.914 166.539 9.836 cv
166.609 9.76202 166.738 9.67999 166.922 9.59003 cv
167.102 9.5 167.313 9.414 167.559 9.336 cv
167.801 9.258 168.07 9.19501 168.359 9.14502 cv
168.648 9.09802 168.945 9.07397 169.254 9.07001 cv
169.797 9.07397 170.262 9.125 170.648 9.22998 cv
171.035 9.34003 171.355 9.50403 171.605 9.72302 cv
171.855 9.94098 172.035 10.227 172.152 10.574 cv
172.262 10.926 172.32 11.34 172.324 11.812 cv
cp
170.398 13.512 mo
169.648 13.512 li
169.332 13.516 169.063 13.539 168.84 13.582 cv
168.613 13.633 168.43 13.703 168.293 13.793 cv
168.148 13.891 168.047 14.004 167.984 14.133 cv
167.918 14.27 167.883 14.418 167.887 14.586 cv
167.883 14.879 167.977 15.109 168.164 15.273 cv
168.348 15.441 168.605 15.523 168.934 15.523 cv
169.207 15.523 169.457 15.453 169.691 15.312 cv
169.918 15.172 170.156 14.969 170.398 14.695 cv
cp
f
176.25 16.465 mo
176.246 16.52 176.23 16.562 176.203 16.602 cv
176.168 16.641 176.113 16.676 176.043 16.699 cv
175.965 16.727 175.867 16.742 175.742 16.758 cv
175.617 16.77 175.457 16.777 175.27 16.777 cv
175.074 16.777 174.918 16.77 174.793 16.758 cv
174.668 16.742 174.566 16.727 174.492 16.699 cv
174.414 16.676 174.359 16.641 174.332 16.602 cv
174.297 16.562 174.281 16.52 174.285 16.465 cv
174.285 6.21899 li
174.281 6.16803 174.297 6.12097 174.332 6.078 cv
174.359 6.039 174.414 6.00403 174.492 5.97302 cv
174.566 5.94501 174.668 5.92603 174.793 5.90601 cv
174.918 5.89502 175.074 5.88702 175.27 5.883 cv
175.457 5.88702 175.617 5.89502 175.742 5.90601 cv
175.867 5.92603 175.965 5.94501 176.043 5.97302 cv
176.113 6.00403 176.168 6.039 176.203 6.078 cv
176.23 6.12097 176.246 6.16803 176.25 6.21899 cv
cp
f
180.223 16.465 mo
180.219 16.52 180.203 16.562 180.176 16.602 cv
180.141 16.641 180.086 16.676 180.016 16.699 cv
179.938 16.727 179.84 16.742 179.715 16.758 cv
179.59 16.77 179.43 16.777 179.242 16.777 cv
179.047 16.777 178.891 16.77 178.766 16.758 cv
178.641 16.742 178.539 16.727 178.465 16.699 cv
178.387 16.676 178.332 16.641 178.305 16.602 cv
178.27 16.562 178.254 16.52 178.258 16.465 cv
178.258 6.21899 li
178.254 6.16803 178.27 6.12097 178.305 6.078 cv
178.332 6.039 178.387 6.00403 178.465 5.97302 cv
178.539 5.94501 178.641 5.92603 178.766 5.90601 cv
178.891 5.89502 179.047 5.88702 179.242 5.883 cv
179.43 5.88702 179.59 5.89502 179.715 5.90601 cv
179.84 5.92603 179.938 5.94501 180.016 5.97302 cv
180.086 6.00403 180.141 6.039 180.176 6.078 cv
180.203 6.12097 180.219 6.16803 180.223 6.21899 cv
cp
f
193.387 16.465 mo
193.387 16.527 193.375 16.574 193.355 16.609 cv
193.336 16.652 193.289 16.684 193.211 16.707 cv
193.133 16.73 193.016 16.746 192.867 16.762 cv
192.711 16.77 192.508 16.777 192.25 16.777 cv
192.031 16.777 191.855 16.77 191.727 16.762 cv
191.598 16.746 191.496 16.73 191.422 16.703 cv
191.344 16.676 191.289 16.641 191.262 16.594 cv
191.227 16.555 191.203 16.5 191.184 16.434 cv
190.277 14.184 li
190.168 13.93 190.063 13.703 189.961 13.504 cv
189.852 13.309 189.738 13.145 189.613 13.012 cv
189.484 12.883 189.336 12.781 189.172 12.711 cv
189.004 12.645 188.813 12.613 188.598 12.609 cv
187.957 12.609 li
187.957 16.449 li
187.953 16.504 187.938 16.551 187.906 16.59 cv
187.871 16.633 187.816 16.668 187.738 16.691 cv
187.66 16.719 187.555 16.738 187.426 16.754 cv
187.293 16.77 187.129 16.777 186.93 16.777 cv
186.73 16.777 186.563 16.77 186.434 16.754 cv
186.297 16.738 186.191 16.719 186.117 16.691 cv
186.035 16.668 185.98 16.633 185.953 16.59 cv
185.918 16.551 185.902 16.504 185.906 16.449 cv
185.906 7.29303 li
185.902 7.06598 185.961 6.90198 186.082 6.797 cv
186.195 6.69897 186.34 6.64801 186.516 6.64502 cv
189.125 6.64502 li
189.387 6.64801 189.605 6.65198 189.781 6.65997 cv
189.949 6.672 190.105 6.68402 190.25 6.69897 cv
190.652 6.758 191.016 6.85901 191.34 6.99597 cv
191.664 7.14099 191.941 7.32397 192.168 7.547 cv
192.395 7.77698 192.566 8.04303 192.688 8.35199 cv
192.805 8.65997 192.863 9.01599 192.867 9.414 cv
192.863 9.75403 192.82 10.062 192.738 10.336 cv
192.648 10.617 192.523 10.863 192.359 11.082 cv
192.191 11.301 191.984 11.492 191.742 11.648 cv
191.496 11.812 191.219 11.941 190.91 12.039 cv
191.059 12.113 191.203 12.203 191.336 12.305 cv
191.469 12.414 191.59 12.539 191.707 12.684 cv
191.82 12.832 191.934 13 192.039 13.187 cv
192.141 13.379 192.242 13.594 192.344 13.832 cv
193.195 15.82 li
193.27 16.02 193.32 16.16 193.348 16.25 cv
193.371 16.344 193.387 16.418 193.387 16.465 cv
cp
190.746 9.625 mo
190.742 9.29303 190.668 9.01202 190.52 8.78101 cv
190.367 8.55499 190.121 8.39502 189.781 8.297 cv
189.676 8.27301 189.559 8.25 189.426 8.23401 cv
189.293 8.21899 189.109 8.211 188.875 8.211 cv
187.957 8.211 li
187.957 11.074 li
189 11.074 li
189.289 11.078 189.547 11.043 189.766 10.969 cv
189.984 10.902 190.164 10.801 190.309 10.672 cv
190.453 10.547 190.563 10.395 190.637 10.215 cv
190.707 10.039 190.742 9.84399 190.746 9.625 cv
cp
f
201.371 16.465 mo
201.367 16.52 201.355 16.562 201.332 16.602 cv
201.305 16.641 201.258 16.676 201.195 16.699 cv
201.129 16.727 201.043 16.742 200.938 16.758 cv
200.832 16.77 200.699 16.777 200.539 16.777 cv
200.363 16.777 200.223 16.77 200.121 16.758 cv
200.012 16.742 199.93 16.727 199.867 16.699 cv
199.805 16.676 199.758 16.641 199.734 16.602 cv
199.703 16.562 199.691 16.52 199.695 16.465 cv
199.695 15.664 li
199.309 16.078 198.918 16.391 198.523 16.598 cv
198.121 16.805 197.711 16.906 197.289 16.91 cv
196.809 16.906 196.406 16.832 196.082 16.676 cv
195.758 16.523 195.496 16.309 195.297 16.039 cv
195.094 15.77 194.949 15.457 194.867 15.098 cv
194.777 14.742 194.734 14.301 194.738 13.77 cv
194.738 9.51599 li
194.734 9.46899 194.75 9.422 194.781 9.37903 cv
194.809 9.34399 194.859 9.31201 194.938 9.28101 cv
195.012 9.258 195.113 9.23798 195.242 9.22302 cv
195.367 9.21503 195.523 9.20697 195.715 9.203 cv
195.902 9.20697 196.063 9.21503 196.188 9.22302 cv
196.313 9.23798 196.41 9.258 196.488 9.28101 cv
196.559 9.31201 196.613 9.34399 196.648 9.37903 cv
196.676 9.422 196.691 9.46899 196.695 9.51599 cv
196.695 13.441 li
196.691 13.809 196.715 14.086 196.766 14.277 cv
196.809 14.469 196.879 14.633 196.98 14.77 cv
197.074 14.91 197.199 15.016 197.348 15.09 cv
197.496 15.168 197.668 15.207 197.863 15.203 cv
198.113 15.207 198.363 15.117 198.617 14.93 cv
198.867 14.75 199.137 14.484 199.422 14.137 cv
199.422 9.51599 li
199.422 9.46899 199.434 9.422 199.465 9.37903 cv
199.488 9.34399 199.543 9.31201 199.621 9.28101 cv
199.695 9.258 199.793 9.23798 199.922 9.22302 cv
200.043 9.21503 200.203 9.20697 200.398 9.203 cv
200.59 9.20697 200.746 9.21503 200.871 9.22302 cv
200.992 9.23798 201.094 9.258 201.168 9.28101 cv
201.238 9.31201 201.289 9.34399 201.324 9.37903 cv
201.352 9.422 201.367 9.46899 201.371 9.51599 cv
cp
f
209.988 16.465 mo
209.984 16.52 209.969 16.562 209.941 16.602 cv
209.906 16.641 209.855 16.676 209.785 16.699 cv
209.711 16.727 209.609 16.742 209.484 16.758 cv
209.355 16.77 209.199 16.777 209.016 16.777 cv
208.82 16.777 208.66 16.77 208.535 16.758 cv
208.406 16.742 208.305 16.727 208.234 16.699 cv
208.156 16.676 208.105 16.641 208.078 16.602 cv
208.043 16.562 208.027 16.52 208.031 16.465 cv
208.031 12.5 li
208.027 12.164 208.004 11.898 207.957 11.703 cv
207.906 11.512 207.832 11.348 207.742 11.211 cv
207.648 11.074 207.531 10.969 207.383 10.891 cv
207.234 10.816 207.059 10.777 206.863 10.777 cv
206.609 10.777 206.359 10.871 206.105 11.051 cv
205.852 11.234 205.586 11.496 205.313 11.844 cv
205.313 16.465 li
205.309 16.52 205.293 16.562 205.266 16.602 cv
205.23 16.641 205.176 16.676 205.105 16.699 cv
205.027 16.727 204.93 16.742 204.805 16.758 cv
204.68 16.77 204.52 16.777 204.332 16.777 cv
204.137 16.777 203.98 16.77 203.855 16.758 cv
203.73 16.742 203.629 16.727 203.555 16.699 cv
203.477 16.676 203.422 16.641 203.395 16.602 cv
203.359 16.562 203.344 16.52 203.348 16.465 cv
203.348 9.51599 li
203.344 9.46899 203.359 9.422 203.387 9.37903 cv
203.41 9.34399 203.457 9.31201 203.527 9.28101 cv
203.594 9.258 203.68 9.23798 203.789 9.22302 cv
203.895 9.21503 204.027 9.20697 204.191 9.203 cv
204.355 9.20697 204.492 9.21503 204.602 9.22302 cv
204.707 9.23798 204.793 9.258 204.855 9.28101 cv
204.914 9.31201 204.957 9.34399 204.984 9.37903 cv
205.008 9.422 205.02 9.46899 205.023 9.51599 cv
205.023 10.316 li
205.406 9.90601 205.797 9.59399 206.195 9.383 cv
206.59 9.17603 207.008 9.07397 207.441 9.07001 cv
207.91 9.07397 208.309 9.15198 208.637 9.30499 cv
208.961 9.46503 209.223 9.67603 209.422 9.94098 cv
209.621 10.211 209.766 10.523 209.855 10.879 cv
209.941 11.238 209.984 11.668 209.988 12.172 cv
cp
f
215.859 15.781 mo
215.859 16.008 215.844 16.184 215.816 16.305 cv
215.785 16.43 215.746 16.516 215.703 16.562 cv
215.652 16.613 215.586 16.656 215.496 16.695 cv
215.402 16.734 215.293 16.766 215.176 16.797 cv
215.051 16.82 214.918 16.844 214.777 16.863 cv
214.633 16.875 214.492 16.883 214.348 16.887 cv
213.957 16.883 213.617 16.832 213.332 16.738 cv
213.047 16.637 212.813 16.488 212.625 16.281 cv
212.438 16.078 212.297 15.82 212.211 15.508 cv
212.117 15.199 212.074 14.828 212.078 14.398 cv
212.078 10.84 li
211.246 10.84 li
211.145 10.844 211.07 10.781 211.02 10.656 cv
210.965 10.535 210.938 10.332 210.941 10.043 cv
210.938 9.89502 210.945 9.76599 210.961 9.664 cv
210.973 9.56201 210.992 9.47998 211.02 9.41803 cv
211.043 9.35901 211.074 9.31598 211.117 9.289 cv
211.152 9.26599 211.199 9.25403 211.254 9.25 cv
212.078 9.25 li
212.078 7.69897 li
212.074 7.65198 212.09 7.60498 212.121 7.55902 cv
212.148 7.52002 212.199 7.48401 212.277 7.453 cv
212.352 7.42999 212.453 7.40601 212.582 7.39099 cv
212.707 7.37903 212.863 7.375 213.055 7.37097 cv
213.242 7.375 213.402 7.37903 213.531 7.39099 cv
213.656 7.40601 213.758 7.42999 213.832 7.453 cv
213.902 7.48401 213.953 7.52002 213.988 7.55902 cv
214.016 7.60498 214.031 7.65198 214.035 7.69897 cv
214.035 9.25 li
215.547 9.25 li
215.598 9.25403 215.645 9.26599 215.684 9.289 cv
215.723 9.31598 215.754 9.35901 215.781 9.41803 cv
215.805 9.47998 215.824 9.56201 215.84 9.664 cv
215.852 9.76599 215.859 9.89502 215.859 10.043 cv
215.859 10.332 215.832 10.535 215.781 10.656 cv
215.727 10.781 215.652 10.844 215.555 10.84 cv
214.035 10.84 li
214.035 14.105 li
214.031 14.484 214.09 14.77 214.215 14.957 cv
214.332 15.148 214.547 15.242 214.852 15.242 cv
214.953 15.242 215.047 15.234 215.133 15.215 cv
215.215 15.199 215.289 15.18 215.355 15.152 cv
215.418 15.133 215.473 15.109 215.52 15.09 cv
215.563 15.074 215.602 15.066 215.641 15.062 cv
215.668 15.066 215.699 15.074 215.73 15.09 cv
215.758 15.109 215.777 15.148 215.797 15.199 cv
215.809 15.258 215.824 15.332 215.84 15.422 cv
215.852 15.52 215.859 15.637 215.859 15.781 cv
cp
f
219.246 16.465 mo
219.242 16.52 219.227 16.562 219.199 16.602 cv
219.164 16.641 219.109 16.676 219.039 16.699 cv
218.961 16.727 218.863 16.742 218.738 16.758 cv
218.613 16.77 218.453 16.777 218.266 16.777 cv
218.07 16.777 217.914 16.77 217.789 16.758 cv
217.664 16.742 217.563 16.727 217.488 16.699 cv
217.41 16.676 217.355 16.641 217.328 16.602 cv
217.293 16.562 217.277 16.52 217.281 16.465 cv
217.281 9.53101 li
217.277 9.47998 217.293 9.43402 217.328 9.39502 cv
217.355 9.35498 217.41 9.32397 217.488 9.29303 cv
217.563 9.27002 217.664 9.24597 217.789 9.22699 cv
217.914 9.21503 218.07 9.20697 218.266 9.203 cv
218.453 9.20697 218.613 9.21503 218.738 9.22699 cv
218.863 9.24597 218.961 9.27002 219.039 9.29303 cv
219.109 9.32397 219.164 9.35498 219.199 9.39502 cv
219.227 9.43402 219.242 9.47998 219.246 9.53101 cv
cp
219.395 7.15997 mo
219.395 7.55902 219.313 7.83197 219.152 7.97998 cv
218.988 8.133 218.691 8.20697 218.258 8.203 cv
217.813 8.20697 217.512 8.133 217.363 7.98798 cv
217.207 7.84399 217.133 7.58197 217.133 7.19897 cv
217.133 6.80499 217.211 6.53101 217.371 6.37903 cv
217.527 6.22699 217.828 6.14801 218.273 6.14801 cv
218.707 6.14801 219.004 6.22302 219.16 6.37097 cv
219.316 6.52002 219.395 6.78497 219.395 7.15997 cv
cp
f
232.266 16.465 mo
232.262 16.52 232.246 16.562 232.219 16.602 cv
232.184 16.641 232.133 16.676 232.063 16.699 cv
231.988 16.727 231.887 16.742 231.766 16.758 cv
231.641 16.77 231.484 16.777 231.293 16.777 cv
231.094 16.777 230.934 16.77 230.809 16.758 cv
230.684 16.742 230.582 16.727 230.508 16.699 cv
230.43 16.676 230.379 16.641 230.352 16.602 cv
230.324 16.562 230.309 16.52 230.313 16.465 cv
230.313 12.344 li
230.309 12.113 230.289 11.898 230.246 11.703 cv
230.199 11.512 230.129 11.348 230.043 11.211 cv
229.949 11.074 229.836 10.969 229.699 10.891 cv
229.559 10.816 229.395 10.777 229.203 10.777 cv
228.969 10.777 228.73 10.871 228.492 11.051 cv
228.254 11.234 227.996 11.496 227.715 11.844 cv
227.715 16.465 li
227.715 16.52 227.699 16.562 227.668 16.602 cv
227.637 16.641 227.582 16.676 227.508 16.699 cv
227.43 16.727 227.328 16.742 227.207 16.758 cv
227.082 16.77 226.93 16.777 226.742 16.777 cv
226.547 16.777 226.387 16.77 226.266 16.758 cv
226.137 16.742 226.035 16.727 225.965 16.699 cv
225.887 16.676 225.836 16.641 225.805 16.602 cv
225.773 16.562 225.758 16.52 225.758 16.465 cv
225.758 12.344 li
225.758 12.113 225.734 11.898 225.691 11.703 cv
225.648 11.512 225.582 11.348 225.496 11.211 cv
225.402 11.074 225.289 10.969 225.152 10.891 cv
225.008 10.816 224.844 10.777 224.66 10.777 cv
224.418 10.777 224.18 10.871 223.941 11.051 cv
223.703 11.234 223.445 11.496 223.172 11.844 cv
223.172 16.465 li
223.168 16.52 223.152 16.562 223.125 16.602 cv
223.09 16.641 223.035 16.676 222.965 16.699 cv
222.887 16.727 222.789 16.742 222.664 16.758 cv
222.539 16.77 222.379 16.777 222.191 16.777 cv
221.996 16.777 221.84 16.77 221.715 16.758 cv
221.59 16.742 221.488 16.727 221.414 16.699 cv
221.336 16.676 221.281 16.641 221.254 16.602 cv
221.219 16.562 221.203 16.52 221.207 16.465 cv
221.207 9.51599 li
221.203 9.46899 221.219 9.422 221.246 9.37903 cv
221.27 9.34399 221.316 9.31201 221.387 9.28101 cv
221.453 9.258 221.539 9.23798 221.648 9.22302 cv
221.754 9.21503 221.887 9.20697 222.051 9.203 cv
222.215 9.20697 222.352 9.21503 222.461 9.22302 cv
222.566 9.23798 222.652 9.258 222.715 9.28101 cv
222.773 9.31201 222.816 9.34399 222.844 9.37903 cv
222.867 9.422 222.879 9.46899 222.883 9.51599 cv
222.883 10.316 li
223.266 9.90601 223.648 9.59399 224.031 9.383 cv
224.41 9.17603 224.813 9.07397 225.23 9.07001 cv
225.516 9.07397 225.77 9.10199 226 9.15997 cv
226.227 9.22302 226.434 9.30902 226.613 9.41803 cv
226.793 9.53101 226.945 9.66803 227.074 9.82001 cv
227.203 9.97699 227.313 10.148 227.402 10.34 cv
227.609 10.117 227.813 9.92603 228.016 9.76599 cv
228.211 9.60498 228.41 9.47302 228.605 9.37097 cv
228.801 9.27002 228.996 9.19501 229.191 9.14502 cv
229.387 9.09802 229.586 9.07397 229.789 9.07001 cv
230.25 9.07397 230.637 9.15198 230.957 9.30499 cv
231.27 9.46503 231.527 9.67603 231.723 9.94098 cv
231.918 10.211 232.055 10.523 232.141 10.879 cv
232.219 11.238 232.262 11.617 232.266 12.016 cv
cp
f
240.602 12.789 mo
240.598 13.027 240.547 13.203 240.441 13.316 cv
240.332 13.434 240.184 13.492 240.004 13.488 cv
235.77 13.488 li
235.766 13.789 235.801 14.059 235.875 14.297 cv
235.941 14.539 236.055 14.742 236.211 14.91 cv
236.363 15.082 236.559 15.211 236.801 15.297 cv
237.039 15.387 237.328 15.43 237.672 15.43 cv
238.012 15.43 238.313 15.406 238.574 15.355 cv
238.832 15.309 239.059 15.254 239.25 15.191 cv
239.438 15.133 239.594 15.078 239.723 15.027 cv
239.844 14.98 239.945 14.957 240.027 14.953 cv
240.07 14.957 240.109 14.965 240.145 14.98 cv
240.172 15 240.199 15.031 240.219 15.078 cv
240.238 15.125 240.25 15.191 240.262 15.277 cv
240.266 15.363 240.27 15.473 240.273 15.602 cv
240.27 15.719 240.27 15.816 240.266 15.895 cv
240.258 15.977 240.25 16.043 240.242 16.098 cv
240.23 16.156 240.215 16.207 240.195 16.242 cv
240.176 16.285 240.148 16.32 240.117 16.355 cv
240.082 16.395 239.988 16.445 239.84 16.504 cv
239.684 16.57 239.492 16.633 239.262 16.687 cv
239.023 16.75 238.754 16.797 238.457 16.844 cv
238.152 16.883 237.832 16.906 237.492 16.91 cv
236.871 16.906 236.328 16.832 235.867 16.676 cv
235.398 16.523 235.012 16.285 234.703 15.969 cv
234.387 15.652 234.152 15.254 234.004 14.77 cv
233.848 14.289 233.773 13.723 233.777 13.066 cv
233.773 12.453 233.852 11.895 234.016 11.398 cv
234.172 10.902 234.406 10.484 234.719 10.137 cv
235.023 9.79303 235.398 9.52698 235.836 9.34399 cv
236.273 9.164 236.766 9.07397 237.32 9.07001 cv
237.898 9.07397 238.398 9.15997 238.813 9.328 cv
239.227 9.50403 239.563 9.742 239.828 10.043 cv
240.09 10.348 240.285 10.707 240.414 11.121 cv
240.535 11.539 240.598 11.988 240.602 12.477 cv
cp
238.699 12.227 mo
238.711 11.676 238.602 11.242 238.367 10.93 cv
238.133 10.617 237.766 10.461 237.273 10.457 cv
237.023 10.461 236.809 10.508 236.625 10.598 cv
236.438 10.695 236.285 10.82 236.164 10.977 cv
236.039 11.137 235.945 11.324 235.883 11.539 cv
235.816 11.754 235.777 11.984 235.77 12.227 cv
cp
f
247.105 14.5 mo
247.102 14.898 247.027 15.246 246.883 15.547 cv
246.734 15.848 246.527 16.102 246.258 16.301 cv
245.984 16.508 245.664 16.656 245.297 16.758 cv
244.93 16.855 244.527 16.906 244.098 16.91 cv
243.832 16.906 243.586 16.887 243.352 16.852 cv
243.117 16.809 242.906 16.762 242.719 16.703 cv
242.531 16.645 242.375 16.582 242.25 16.52 cv
242.125 16.457 242.031 16.398 241.977 16.344 cv
241.918 16.289 241.875 16.207 241.848 16.09 cv
241.813 15.977 241.797 15.801 241.801 15.57 cv
241.797 15.422 241.805 15.301 241.816 15.207 cv
241.824 15.117 241.84 15.047 241.863 14.988 cv
241.883 14.937 241.906 14.898 241.941 14.879 cv
241.969 14.863 242.008 14.855 242.055 14.852 cv
242.109 14.855 242.195 14.887 242.309 14.949 cv
242.418 15.016 242.555 15.09 242.727 15.164 cv
242.891 15.246 243.086 15.316 243.305 15.383 cv
243.523 15.453 243.773 15.488 244.059 15.484 cv
244.234 15.488 244.391 15.469 244.531 15.43 cv
244.664 15.395 244.785 15.344 244.891 15.273 cv
244.988 15.207 245.063 15.121 245.117 15.016 cv
245.164 14.914 245.191 14.793 245.195 14.656 cv
245.191 14.5 245.145 14.367 245.051 14.258 cv
244.957 14.148 244.828 14.051 244.672 13.965 cv
244.508 13.883 244.328 13.805 244.133 13.73 cv
243.93 13.66 243.727 13.582 243.516 13.488 cv
243.305 13.402 243.098 13.301 242.902 13.184 cv
242.699 13.074 242.52 12.934 242.363 12.766 cv
242.199 12.602 242.074 12.402 241.98 12.164 cv
241.887 11.934 241.84 11.652 241.84 11.32 cv
241.84 10.992 241.902 10.687 242.031 10.406 cv
242.16 10.133 242.348 9.89502 242.594 9.69501 cv
242.836 9.5 243.133 9.34802 243.484 9.23401 cv
243.832 9.12903 244.227 9.07397 244.668 9.07001 cv
244.883 9.07397 245.094 9.09003 245.301 9.117 cv
245.504 9.15198 245.691 9.19098 245.859 9.23401 cv
246.023 9.28497 246.164 9.336 246.281 9.38702 cv
246.395 9.44501 246.477 9.492 246.527 9.52698 cv
246.574 9.57001 246.609 9.60901 246.633 9.64502 cv
246.652 9.68701 246.664 9.73401 246.676 9.78497 cv
246.684 9.84003 246.695 9.90601 246.703 9.98401 cv
246.711 10.07 246.715 10.168 246.715 10.285 cv
246.715 10.426 246.711 10.543 246.703 10.629 cv
246.695 10.723 246.68 10.793 246.664 10.84 cv
246.645 10.895 246.621 10.93 246.594 10.945 cv
246.559 10.969 246.523 10.977 246.484 10.973 cv
246.434 10.977 246.359 10.949 246.266 10.891 cv
246.164 10.84 246.043 10.781 245.895 10.715 cv
245.746 10.656 245.574 10.598 245.379 10.539 cv
245.184 10.488 244.961 10.461 244.715 10.457 cv
244.535 10.461 244.383 10.48 244.254 10.512 cv
244.121 10.551 244.012 10.602 243.934 10.668 cv
243.848 10.738 243.785 10.816 243.746 10.906 cv
243.699 11 243.68 11.098 243.684 11.199 cv
243.68 11.359 243.73 11.496 243.832 11.602 cv
243.93 11.715 244.059 11.809 244.223 11.891 cv
244.383 11.977 244.566 12.055 244.773 12.125 cv
244.977 12.199 245.184 12.281 245.395 12.363 cv
245.602 12.453 245.809 12.551 246.02 12.664 cv
246.223 12.777 246.406 12.918 246.566 13.082 cv
246.727 13.25 246.855 13.449 246.957 13.68 cv
247.051 13.914 247.102 14.187 247.105 14.5 cv
cp
f
263.047 9.5 mo
263.043 9.55902 263.035 9.62903 263.023 9.711 cv
263.004 9.79303 262.977 9.914 262.938 10.066 cv
261.082 16.355 li
261.055 16.445 261.02 16.52 260.98 16.57 cv
260.938 16.629 260.875 16.672 260.789 16.699 cv
260.703 16.73 260.578 16.746 260.422 16.762 cv
260.258 16.77 260.055 16.777 259.805 16.777 cv
259.547 16.777 259.336 16.77 259.18 16.758 cv
259.016 16.742 258.891 16.723 258.801 16.691 cv
258.707 16.664 258.641 16.621 258.602 16.562 cv
258.559 16.512 258.527 16.441 258.508 16.355 cv
257.34 12.133 li
257.324 12.062 li
257.309 12.133 li
256.234 16.355 li
256.211 16.445 256.18 16.52 256.145 16.57 cv
256.102 16.629 256.035 16.672 255.945 16.699 cv
255.848 16.73 255.723 16.746 255.563 16.762 cv
255.402 16.77 255.195 16.777 254.941 16.777 cv
254.68 16.777 254.469 16.77 254.313 16.758 cv
254.152 16.742 254.027 16.723 253.938 16.691 cv
253.844 16.664 253.777 16.621 253.738 16.562 cv
253.695 16.512 253.664 16.441 253.648 16.355 cv
251.809 10.066 li
251.758 9.91803 251.73 9.80103 251.719 9.71503 cv
251.703 9.633 251.695 9.55902 251.699 9.5 cv
251.695 9.44897 251.711 9.40601 251.742 9.36298 cv
251.77 9.328 251.82 9.297 251.898 9.27002 cv
251.973 9.25 252.074 9.22998 252.199 9.21899 cv
252.324 9.211 252.484 9.20697 252.68 9.203 cv
252.887 9.20697 253.055 9.211 253.188 9.21899 cv
253.316 9.22998 253.418 9.25 253.492 9.27301 cv
253.563 9.30103 253.613 9.336 253.645 9.37903 cv
253.672 9.42603 253.695 9.47998 253.711 9.539 cv
255.09 14.641 li
255.105 14.734 li
255.121 14.641 li
256.414 9.539 li
256.426 9.47998 256.453 9.42603 256.488 9.37903 cv
256.52 9.336 256.57 9.30103 256.641 9.27301 cv
256.707 9.25 256.801 9.22998 256.922 9.21899 cv
257.043 9.211 257.199 9.20697 257.395 9.203 cv
257.586 9.20697 257.742 9.21503 257.863 9.22302 cv
257.98 9.23798 258.074 9.25403 258.148 9.27698 cv
258.215 9.30103 258.266 9.33197 258.297 9.37097 cv
258.324 9.40997 258.348 9.45697 258.363 9.508 cv
259.75 14.648 li
259.773 14.734 li
259.789 14.641 li
261.113 9.539 li
261.121 9.47998 261.145 9.42603 261.176 9.37903 cv
261.207 9.336 261.258 9.30103 261.332 9.27301 cv
261.402 9.25 261.5 9.22998 261.625 9.21899 cv
261.746 9.211 261.906 9.20697 262.102 9.203 cv
262.293 9.20697 262.449 9.211 262.574 9.21899 cv
262.695 9.22998 262.793 9.25 262.863 9.27002 cv
262.934 9.297 262.98 9.328 263.008 9.36298 cv
263.031 9.40601 263.043 9.44897 263.047 9.5 cv
cp
f
266.262 16.465 mo
266.258 16.52 266.242 16.562 266.215 16.602 cv
266.18 16.641 266.125 16.676 266.055 16.699 cv
265.977 16.727 265.879 16.742 265.754 16.758 cv
265.629 16.77 265.469 16.777 265.281 16.777 cv
265.086 16.777 264.93 16.77 264.805 16.758 cv
264.68 16.742 264.578 16.727 264.504 16.699 cv
264.426 16.676 264.371 16.641 264.344 16.602 cv
264.309 16.562 264.293 16.52 264.297 16.465 cv
264.297 9.53101 li
264.293 9.47998 264.309 9.43402 264.344 9.39502 cv
264.371 9.35498 264.426 9.32397 264.504 9.29303 cv
264.578 9.27002 264.68 9.24597 264.805 9.22699 cv
264.93 9.21503 265.086 9.20697 265.281 9.203 cv
265.469 9.20697 265.629 9.21503 265.754 9.22699 cv
265.879 9.24597 265.977 9.27002 266.055 9.29303 cv
266.125 9.32397 266.18 9.35498 266.215 9.39502 cv
266.242 9.43402 266.258 9.47998 266.262 9.53101 cv
cp
266.41 7.15997 mo
266.41 7.55902 266.328 7.83197 266.168 7.97998 cv
266.004 8.133 265.707 8.20697 265.273 8.203 cv
264.828 8.20697 264.527 8.133 264.379 7.98798 cv
264.223 7.84399 264.148 7.58197 264.148 7.19897 cv
264.148 6.80499 264.227 6.53101 264.387 6.37903 cv
264.543 6.22699 264.844 6.14801 265.289 6.14801 cv
265.723 6.14801 266.02 6.22302 266.176 6.37097 cv
266.332 6.52002 266.41 6.78497 266.41 7.15997 cv
cp
f
272.34 15.781 mo
272.34 16.008 272.324 16.184 272.297 16.305 cv
272.266 16.43 272.227 16.516 272.184 16.562 cv
272.133 16.613 272.066 16.656 271.977 16.695 cv
271.883 16.734 271.773 16.766 271.656 16.797 cv
271.531 16.82 271.398 16.844 271.258 16.863 cv
271.113 16.875 270.973 16.883 270.828 16.887 cv
270.438 16.883 270.098 16.832 269.813 16.738 cv
269.527 16.637 269.293 16.488 269.105 16.281 cv
268.918 16.078 268.777 15.82 268.691 15.508 cv
268.598 15.199 268.555 14.828 268.559 14.398 cv
268.559 10.84 li
267.727 10.84 li
267.625 10.844 267.551 10.781 267.5 10.656 cv
267.445 10.535 267.418 10.332 267.422 10.043 cv
267.418 9.89502 267.426 9.76599 267.441 9.664 cv
267.453 9.56201 267.473 9.47998 267.5 9.41803 cv
267.523 9.35901 267.555 9.31598 267.598 9.289 cv
267.633 9.26599 267.68 9.25403 267.734 9.25 cv
268.559 9.25 li
268.559 7.69897 li
268.555 7.65198 268.57 7.60498 268.602 7.55902 cv
268.629 7.52002 268.68 7.48401 268.758 7.453 cv
268.832 7.42999 268.934 7.40601 269.063 7.39099 cv
269.188 7.37903 269.344 7.375 269.535 7.37097 cv
269.723 7.375 269.883 7.37903 270.012 7.39099 cv
270.137 7.40601 270.238 7.42999 270.313 7.453 cv
270.383 7.48401 270.434 7.52002 270.469 7.55902 cv
270.496 7.60498 270.512 7.65198 270.516 7.69897 cv
270.516 9.25 li
272.027 9.25 li
272.078 9.25403 272.125 9.26599 272.164 9.289 cv
272.203 9.31598 272.234 9.35901 272.262 9.41803 cv
272.285 9.47998 272.305 9.56201 272.32 9.664 cv
272.332 9.76599 272.34 9.89502 272.34 10.043 cv
272.34 10.332 272.313 10.535 272.262 10.656 cv
272.207 10.781 272.133 10.844 272.035 10.84 cv
270.516 10.84 li
270.516 14.105 li
270.512 14.484 270.57 14.77 270.695 14.957 cv
270.813 15.148 271.027 15.242 271.332 15.242 cv
271.434 15.242 271.527 15.234 271.613 15.215 cv
271.695 15.199 271.77 15.18 271.836 15.152 cv
271.898 15.133 271.953 15.109 272 15.09 cv
272.043 15.074 272.082 15.066 272.121 15.062 cv
272.148 15.066 272.18 15.074 272.211 15.09 cv
272.238 15.109 272.258 15.148 272.277 15.199 cv
272.289 15.258 272.305 15.332 272.32 15.422 cv
272.332 15.52 272.34 15.637 272.34 15.781 cv
cp
f
280.402 16.465 mo
280.398 16.52 280.383 16.562 280.355 16.602 cv
280.32 16.641 280.27 16.676 280.199 16.699 cv
280.125 16.727 280.023 16.742 279.898 16.758 cv
279.77 16.77 279.613 16.777 279.43 16.777 cv
279.234 16.777 279.074 16.77 278.949 16.758 cv
278.82 16.742 278.719 16.727 278.648 16.699 cv
278.57 16.676 278.52 16.641 278.492 16.602 cv
278.457 16.562 278.441 16.52 278.445 16.465 cv
278.445 12.5 li
278.441 12.164 278.418 11.898 278.371 11.703 cv
278.32 11.512 278.246 11.348 278.156 11.211 cv
278.063 11.074 277.945 10.969 277.797 10.891 cv
277.648 10.816 277.473 10.777 277.277 10.777 cv
277.023 10.777 276.773 10.871 276.52 11.051 cv
276.266 11.234 276 11.496 275.727 11.844 cv
275.727 16.465 li
275.723 16.52 275.707 16.562 275.68 16.602 cv
275.645 16.641 275.59 16.676 275.52 16.699 cv
275.441 16.727 275.344 16.742 275.219 16.758 cv
275.094 16.77 274.934 16.777 274.746 16.777 cv
274.551 16.777 274.395 16.77 274.27 16.758 cv
274.145 16.742 274.043 16.727 273.969 16.699 cv
273.891 16.676 273.836 16.641 273.809 16.602 cv
273.773 16.562 273.758 16.52 273.762 16.465 cv
273.762 6.21899 li
273.758 6.16803 273.773 6.12097 273.809 6.078 cv
273.836 6.039 273.891 6.00403 273.969 5.97302 cv
274.043 5.94501 274.145 5.92603 274.27 5.90601 cv
274.395 5.89502 274.551 5.88702 274.746 5.883 cv
274.934 5.88702 275.094 5.89502 275.219 5.90601 cv
275.344 5.92603 275.441 5.94501 275.52 5.97302 cv
275.59 6.00403 275.645 6.039 275.68 6.078 cv
275.707 6.12097 275.723 6.16803 275.727 6.21899 cv
275.727 10.059 li
276.063 9.72998 276.406 9.48401 276.758 9.31598 cv
277.105 9.15601 277.473 9.07397 277.855 9.07001 cv
278.324 9.07397 278.723 9.15198 279.051 9.30499 cv
279.375 9.46503 279.637 9.67603 279.836 9.94501 cv
280.035 10.215 280.18 10.531 280.27 10.891 cv
280.355 11.254 280.398 11.691 280.402 12.203 cv
cp
f
292.082 15.93 mo
292.078 16.082 292.074 16.207 292.063 16.305 cv
292.047 16.41 292.027 16.492 292.004 16.551 cv
291.98 16.617 291.949 16.664 291.91 16.687 cv
291.871 16.719 291.828 16.73 291.781 16.73 cv
286.715 16.73 li
286.539 16.73 286.395 16.68 286.281 16.578 cv
286.16 16.477 286.102 16.312 286.105 16.082 cv
286.105 7.29303 li
286.102 7.06598 286.16 6.90198 286.281 6.797 cv
286.395 6.69897 286.539 6.64801 286.715 6.64502 cv
291.75 6.64502 li
291.793 6.64801 291.836 6.65997 291.875 6.68402 cv
291.91 6.711 291.941 6.758 291.969 6.82001 cv
291.992 6.89099 292.008 6.97302 292.023 7.07001 cv
292.031 7.17603 292.039 7.30499 292.043 7.45697 cv
292.039 7.60498 292.031 7.72998 292.023 7.828 cv
292.008 7.93402 291.992 8.01599 291.969 8.07397 cv
291.941 8.13702 291.91 8.17999 291.875 8.20697 cv
291.836 8.23798 291.793 8.25403 291.75 8.25 cv
288.148 8.25 li
288.148 10.715 li
291.195 10.715 li
291.242 10.719 291.285 10.734 291.324 10.758 cv
291.363 10.789 291.395 10.832 291.422 10.891 cv
291.445 10.953 291.465 11.035 291.48 11.133 cv
291.492 11.234 291.5 11.355 291.5 11.5 cv
291.5 11.652 291.492 11.777 291.48 11.875 cv
291.465 11.977 291.445 12.055 291.422 12.113 cv
291.395 12.176 291.363 12.219 291.324 12.242 cv
291.285 12.27 291.242 12.285 291.195 12.281 cv
288.148 12.281 li
288.148 15.125 li
291.781 15.125 li
291.828 15.125 291.871 15.141 291.91 15.168 cv
291.949 15.199 291.98 15.246 292.004 15.305 cv
292.027 15.371 292.047 15.453 292.063 15.551 cv
292.074 15.656 292.078 15.781 292.082 15.93 cv
cp
f
295.742 16.465 mo
295.738 16.52 295.723 16.562 295.695 16.602 cv
295.66 16.641 295.605 16.676 295.535 16.699 cv
295.457 16.727 295.359 16.742 295.234 16.758 cv
295.109 16.77 294.949 16.777 294.762 16.777 cv
294.566 16.777 294.41 16.77 294.285 16.758 cv
294.16 16.742 294.059 16.727 293.984 16.699 cv
293.906 16.676 293.852 16.641 293.824 16.602 cv
293.789 16.562 293.773 16.52 293.777 16.465 cv
293.777 9.53101 li
293.773 9.47998 293.789 9.43402 293.824 9.39502 cv
293.852 9.35498 293.906 9.32397 293.984 9.29303 cv
294.059 9.27002 294.16 9.24597 294.285 9.22699 cv
294.41 9.21503 294.566 9.20697 294.762 9.203 cv
294.949 9.20697 295.109 9.21503 295.234 9.22699 cv
295.359 9.24597 295.457 9.27002 295.535 9.29303 cv
295.605 9.32397 295.66 9.35498 295.695 9.39502 cv
295.723 9.43402 295.738 9.47998 295.742 9.53101 cv
cp
295.891 7.15997 mo
295.891 7.55902 295.809 7.83197 295.648 7.97998 cv
295.484 8.133 295.188 8.20697 294.754 8.203 cv
294.309 8.20697 294.008 8.133 293.859 7.98798 cv
293.703 7.84399 293.629 7.58197 293.629 7.19897 cv
293.629 6.80499 293.707 6.53101 293.867 6.37903 cv
294.023 6.22699 294.324 6.14801 294.77 6.14801 cv
295.203 6.14801 295.5 6.22302 295.656 6.37097 cv
295.813 6.52002 295.891 6.78497 295.891 7.15997 cv
cp
f
303.969 9.99597 mo
303.965 10.25 303.938 10.434 303.883 10.551 cv
303.824 10.672 303.754 10.73 303.676 10.73 cv
302.855 10.73 li
302.969 10.855 303.051 11 303.102 11.156 cv
303.148 11.316 303.172 11.48 303.176 11.648 cv
303.172 12.059 303.105 12.418 302.973 12.73 cv
302.836 13.047 302.641 13.312 302.391 13.523 cv
302.137 13.742 301.836 13.906 301.48 14.016 cv
301.121 14.133 300.723 14.187 300.293 14.184 cv
300.066 14.187 299.855 14.16 299.652 14.102 cv
299.449 14.051 299.293 13.988 299.184 13.91 cv
299.121 13.98 299.063 14.059 299.016 14.152 cv
298.965 14.246 298.941 14.352 298.945 14.461 cv
298.941 14.617 299.008 14.738 299.141 14.832 cv
299.27 14.93 299.457 14.984 299.699 14.992 cv
301.391 15.055 li
301.785 15.07 302.137 15.129 302.445 15.223 cv
302.754 15.324 303.016 15.457 303.227 15.629 cv
303.438 15.805 303.598 16.016 303.707 16.258 cv
303.816 16.504 303.871 16.777 303.875 17.09 cv
303.871 17.426 303.797 17.75 303.648 18.059 cv
303.5 18.359 303.273 18.621 302.973 18.848 cv
302.668 19.066 302.289 19.246 301.836 19.379 cv
301.379 19.508 300.848 19.57 300.246 19.574 cv
299.648 19.57 299.145 19.523 298.727 19.434 cv
298.309 19.336 297.965 19.207 297.699 19.043 cv
297.43 18.875 297.234 18.676 297.117 18.449 cv
296.992 18.215 296.934 17.961 296.934 17.687 cv
296.934 17.516 296.953 17.355 297 17.199 cv
297.039 17.043 297.105 16.891 297.195 16.75 cv
297.277 16.605 297.383 16.473 297.508 16.34 cv
297.633 16.211 297.773 16.086 297.938 15.965 cv
297.711 15.852 297.539 15.691 297.418 15.48 cv
297.297 15.277 297.238 15.051 297.238 14.805 cv
297.238 14.504 297.305 14.227 297.445 13.969 cv
297.582 13.719 297.766 13.488 297.992 13.285 cv
297.809 13.105 297.664 12.891 297.555 12.633 cv
297.445 12.383 297.391 12.062 297.395 11.68 cv
297.391 11.277 297.461 10.918 297.605 10.594 cv
297.746 10.277 297.945 10.008 298.203 9.78497 cv
298.457 9.56598 298.762 9.39502 299.113 9.27698 cv
299.465 9.15997 299.855 9.10199 300.285 9.10199 cv
300.504 9.10199 300.711 9.117 300.91 9.14099 cv
301.109 9.172 301.297 9.20697 301.469 9.25 cv
303.676 9.25 li
303.758 9.25403 303.828 9.31201 303.887 9.422 cv
303.938 9.539 303.965 9.72998 303.969 9.99597 cv
cp
301.453 11.641 mo
301.449 11.27 301.348 10.98 301.141 10.77 cv
300.93 10.566 300.637 10.461 300.262 10.457 cv
300.066 10.461 299.895 10.492 299.754 10.555 cv
299.605 10.621 299.484 10.711 299.391 10.82 cv
299.289 10.934 299.219 11.062 299.176 11.211 cv
299.125 11.359 299.102 11.516 299.105 11.672 cv
299.102 12.031 299.207 12.309 299.418 12.512 cv
299.625 12.719 299.914 12.824 300.285 12.82 cv
300.48 12.824 300.648 12.793 300.797 12.727 cv
300.938 12.668 301.059 12.582 301.16 12.469 cv
301.254 12.363 301.328 12.234 301.379 12.09 cv
301.426 11.949 301.449 11.801 301.453 11.641 cv
cp
301.914 17.191 mo
301.914 16.953 301.82 16.777 301.633 16.652 cv
301.445 16.531 301.188 16.461 300.859 16.449 cv
299.465 16.41 li
299.328 16.512 299.219 16.605 299.141 16.695 cv
299.059 16.785 298.996 16.871 298.949 16.957 cv
298.898 17.039 298.863 17.121 298.852 17.199 cv
298.832 17.277 298.824 17.355 298.828 17.441 cv
298.824 17.695 298.957 17.895 299.219 18.031 cv
299.48 18.164 299.852 18.23 300.332 18.234 cv
300.625 18.23 300.871 18.199 301.078 18.145 cv
301.277 18.082 301.441 18.004 301.57 17.906 cv
301.691 17.805 301.781 17.695 301.836 17.574 cv
301.887 17.453 301.914 17.324 301.914 17.191 cv
cp
f
311.906 16.465 mo
311.902 16.52 311.887 16.562 311.859 16.602 cv
311.824 16.641 311.773 16.676 311.703 16.699 cv
311.629 16.727 311.527 16.742 311.402 16.758 cv
311.273 16.77 311.117 16.777 310.934 16.777 cv
310.738 16.777 310.578 16.77 310.453 16.758 cv
310.324 16.742 310.223 16.727 310.152 16.699 cv
310.074 16.676 310.023 16.641 309.996 16.602 cv
309.961 16.562 309.945 16.52 309.949 16.465 cv
309.949 12.5 li
309.945 12.164 309.922 11.898 309.875 11.703 cv
309.824 11.512 309.75 11.348 309.66 11.211 cv
309.566 11.074 309.449 10.969 309.301 10.891 cv
309.152 10.816 308.977 10.777 308.781 10.777 cv
308.527 10.777 308.277 10.871 308.023 11.051 cv
307.77 11.234 307.504 11.496 307.23 11.844 cv
307.23 16.465 li
307.227 16.52 307.211 16.562 307.184 16.602 cv
307.148 16.641 307.094 16.676 307.023 16.699 cv
306.945 16.727 306.848 16.742 306.723 16.758 cv
306.598 16.77 306.438 16.777 306.25 16.777 cv
306.055 16.777 305.898 16.77 305.773 16.758 cv
305.648 16.742 305.547 16.727 305.473 16.699 cv
305.395 16.676 305.34 16.641 305.313 16.602 cv
305.277 16.562 305.262 16.52 305.266 16.465 cv
305.266 6.21899 li
305.262 6.16803 305.277 6.12097 305.313 6.078 cv
305.34 6.039 305.395 6.00403 305.473 5.97302 cv
305.547 5.94501 305.648 5.92603 305.773 5.90601 cv
305.898 5.89502 306.055 5.88702 306.25 5.883 cv
306.438 5.88702 306.598 5.89502 306.723 5.90601 cv
306.848 5.92603 306.945 5.94501 307.023 5.97302 cv
307.094 6.00403 307.148 6.039 307.184 6.078 cv
307.211 6.12097 307.227 6.16803 307.23 6.21899 cv
307.23 10.059 li
307.566 9.72998 307.91 9.48401 308.262 9.31598 cv
308.609 9.15601 308.977 9.07397 309.359 9.07001 cv
309.828 9.07397 310.227 9.15198 310.555 9.30499 cv
310.879 9.46503 311.141 9.67603 311.34 9.94501 cv
311.539 10.215 311.684 10.531 311.773 10.891 cv
311.859 11.254 311.902 11.691 311.906 12.203 cv
cp
f
317.828 15.781 mo
317.828 16.008 317.813 16.184 317.785 16.305 cv
317.754 16.43 317.715 16.516 317.672 16.562 cv
317.621 16.613 317.555 16.656 317.465 16.695 cv
317.371 16.734 317.262 16.766 317.145 16.797 cv
317.02 16.82 316.887 16.844 316.746 16.863 cv
316.602 16.875 316.461 16.883 316.316 16.887 cv
315.926 16.883 315.586 16.832 315.301 16.738 cv
315.016 16.637 314.781 16.488 314.594 16.281 cv
314.406 16.078 314.266 15.82 314.18 15.508 cv
314.086 15.199 314.043 14.828 314.047 14.398 cv
314.047 10.84 li
313.215 10.84 li
313.113 10.844 313.039 10.781 312.988 10.656 cv
312.934 10.535 312.906 10.332 312.91 10.043 cv
312.906 9.89502 312.914 9.76599 312.93 9.664 cv
312.941 9.56201 312.961 9.47998 312.988 9.41803 cv
313.012 9.35901 313.043 9.31598 313.086 9.289 cv
313.121 9.26599 313.168 9.25403 313.223 9.25 cv
314.047 9.25 li
314.047 7.69897 li
314.043 7.65198 314.059 7.60498 314.09 7.55902 cv
314.117 7.52002 314.168 7.48401 314.246 7.453 cv
314.32 7.42999 314.422 7.40601 314.551 7.39099 cv
314.676 7.37903 314.832 7.375 315.023 7.37097 cv
315.211 7.375 315.371 7.37903 315.5 7.39099 cv
315.625 7.40601 315.727 7.42999 315.801 7.453 cv
315.871 7.48401 315.922 7.52002 315.957 7.55902 cv
315.984 7.60498 316 7.65198 316.004 7.69897 cv
316.004 9.25 li
317.516 9.25 li
317.566 9.25403 317.613 9.26599 317.652 9.289 cv
317.691 9.31598 317.723 9.35901 317.75 9.41803 cv
317.773 9.47998 317.793 9.56201 317.809 9.664 cv
317.82 9.76599 317.828 9.89502 317.828 10.043 cv
317.828 10.332 317.801 10.535 317.75 10.656 cv
317.695 10.781 317.621 10.844 317.523 10.84 cv
316.004 10.84 li
316.004 14.105 li
316 14.484 316.059 14.77 316.184 14.957 cv
316.301 15.148 316.516 15.242 316.82 15.242 cv
316.922 15.242 317.016 15.234 317.102 15.215 cv
317.184 15.199 317.258 15.18 317.324 15.152 cv
317.387 15.133 317.441 15.109 317.488 15.09 cv
317.531 15.074 317.57 15.066 317.609 15.062 cv
317.637 15.066 317.668 15.074 317.699 15.09 cv
317.727 15.109 317.746 15.148 317.766 15.199 cv
317.777 15.258 317.793 15.332 317.809 15.422 cv
317.82 15.52 317.828 15.637 317.828 15.781 cv
cp
f
329.684 7.48798 mo
329.68 7.64502 329.672 7.77301 329.664 7.875 cv
329.648 7.98401 329.629 8.07001 329.605 8.133 cv
329.574 8.19897 329.543 8.24597 329.508 8.27301 cv
329.465 8.30902 329.422 8.32397 329.379 8.32001 cv
326.855 8.32001 li
326.855 16.449 li
326.855 16.504 326.836 16.551 326.805 16.59 cv
326.766 16.633 326.711 16.668 326.637 16.691 cv
326.555 16.719 326.449 16.738 326.32 16.754 cv
326.184 16.77 326.02 16.777 325.824 16.777 cv
325.629 16.777 325.465 16.77 325.332 16.754 cv
325.199 16.738 325.094 16.719 325.016 16.691 cv
324.938 16.668 324.879 16.633 324.848 16.59 cv
324.809 16.551 324.793 16.504 324.797 16.449 cv
324.797 8.32001 li
322.273 8.32001 li
322.219 8.32397 322.172 8.30902 322.141 8.27301 cv
322.102 8.24597 322.07 8.19897 322.047 8.133 cv
322.016 8.07001 321.996 7.98401 321.988 7.875 cv
321.973 7.77301 321.969 7.64502 321.969 7.48798 cv
321.969 7.336 321.973 7.203 321.988 7.09003 cv
321.996 6.98401 322.016 6.89502 322.047 6.828 cv
322.07 6.76599 322.102 6.71899 322.141 6.68701 cv
322.172 6.65997 322.219 6.64801 322.273 6.64502 cv
329.379 6.64502 li
329.422 6.64801 329.465 6.65997 329.508 6.68701 cv
329.543 6.71899 329.574 6.76599 329.605 6.828 cv
329.629 6.89502 329.648 6.98401 329.664 7.09003 cv
329.672 7.203 329.68 7.336 329.684 7.48798 cv
cp
f
337.395 16.465 mo
337.391 16.52 337.375 16.562 337.348 16.602 cv
337.313 16.641 337.262 16.676 337.191 16.699 cv
337.117 16.727 337.016 16.742 336.891 16.758 cv
336.762 16.77 336.605 16.777 336.422 16.777 cv
336.227 16.777 336.066 16.77 335.941 16.758 cv
335.813 16.742 335.711 16.727 335.641 16.699 cv
335.563 16.676 335.512 16.641 335.484 16.602 cv
335.449 16.562 335.434 16.52 335.438 16.465 cv
335.438 12.5 li
335.434 12.164 335.41 11.898 335.363 11.703 cv
335.313 11.512 335.238 11.348 335.148 11.211 cv
335.055 11.074 334.938 10.969 334.789 10.891 cv
334.641 10.816 334.465 10.777 334.27 10.777 cv
334.016 10.777 333.766 10.871 333.512 11.051 cv
333.258 11.234 332.992 11.496 332.719 11.844 cv
332.719 16.465 li
332.715 16.52 332.699 16.562 332.672 16.602 cv
332.637 16.641 332.582 16.676 332.512 16.699 cv
332.434 16.727 332.336 16.742 332.211 16.758 cv
332.086 16.77 331.926 16.777 331.738 16.777 cv
331.543 16.777 331.387 16.77 331.262 16.758 cv
331.137 16.742 331.035 16.727 330.961 16.699 cv
330.883 16.676 330.828 16.641 330.801 16.602 cv
330.766 16.562 330.75 16.52 330.754 16.465 cv
330.754 6.21899 li
330.75 6.16803 330.766 6.12097 330.801 6.078 cv
330.828 6.039 330.883 6.00403 330.961 5.97302 cv
331.035 5.94501 331.137 5.92603 331.262 5.90601 cv
331.387 5.89502 331.543 5.88702 331.738 5.883 cv
331.926 5.88702 332.086 5.89502 332.211 5.90601 cv
332.336 5.92603 332.434 5.94501 332.512 5.97302 cv
332.582 6.00403 332.637 6.039 332.672 6.078 cv
332.699 6.12097 332.715 6.16803 332.719 6.21899 cv
332.719 10.059 li
333.055 9.72998 333.398 9.48401 333.75 9.31598 cv
334.098 9.15601 334.465 9.07397 334.848 9.07001 cv
335.316 9.07397 335.715 9.15198 336.043 9.30499 cv
336.367 9.46503 336.629 9.67603 336.828 9.94501 cv
337.027 10.215 337.172 10.531 337.262 10.891 cv
337.348 11.254 337.391 11.691 337.395 12.203 cv
cp
f
343.746 10.16 mo
343.746 10.352 343.738 10.504 343.73 10.621 cv
343.715 10.742 343.699 10.836 343.684 10.902 cv
343.66 10.973 343.633 11.02 343.602 11.043 cv
343.563 11.07 343.52 11.082 343.473 11.082 cv
343.426 11.082 343.379 11.074 343.332 11.055 cv
343.277 11.039 343.219 11.02 343.156 10.996 cv
343.086 10.977 343.016 10.957 342.941 10.937 cv
342.859 10.922 342.773 10.914 342.684 10.91 cv
342.57 10.914 342.461 10.934 342.355 10.977 cv
342.246 11.023 342.133 11.094 342.02 11.184 cv
341.898 11.277 341.777 11.402 341.652 11.555 cv
341.523 11.715 341.387 11.906 341.242 12.133 cv
341.242 16.465 li
341.238 16.52 341.223 16.562 341.195 16.602 cv
341.16 16.641 341.105 16.676 341.035 16.699 cv
340.957 16.727 340.859 16.742 340.734 16.758 cv
340.609 16.77 340.449 16.777 340.262 16.777 cv
340.066 16.777 339.91 16.77 339.785 16.758 cv
339.66 16.742 339.559 16.727 339.484 16.699 cv
339.406 16.676 339.352 16.641 339.324 16.602 cv
339.289 16.562 339.273 16.52 339.277 16.465 cv
339.277 9.51599 li
339.273 9.46899 339.289 9.422 339.316 9.37903 cv
339.34 9.34399 339.387 9.31201 339.457 9.28101 cv
339.523 9.258 339.609 9.23798 339.719 9.22302 cv
339.824 9.21503 339.957 9.20697 340.121 9.203 cv
340.285 9.20697 340.422 9.21503 340.531 9.22302 cv
340.637 9.23798 340.723 9.258 340.785 9.28101 cv
340.844 9.31201 340.887 9.34399 340.914 9.37903 cv
340.938 9.422 340.949 9.46899 340.953 9.51599 cv
340.953 10.379 li
341.133 10.121 341.305 9.90997 341.469 9.73798 cv
341.625 9.57397 341.781 9.43701 341.93 9.336 cv
342.074 9.23798 342.219 9.172 342.363 9.12903 cv
342.508 9.09399 342.652 9.07397 342.801 9.07001 cv
342.867 9.07397 342.941 9.078 343.02 9.08197 cv
343.098 9.09399 343.176 9.10498 343.262 9.12097 cv
343.34 9.14099 343.414 9.15997 343.48 9.18402 cv
343.539 9.20697 343.586 9.23401 343.617 9.258 cv
343.645 9.289 343.664 9.31598 343.68 9.34399 cv
343.691 9.37903 343.703 9.422 343.715 9.47302 cv
343.723 9.53101 343.73 9.61298 343.738 9.71899 cv
343.742 9.828 343.746 9.97699 343.746 10.16 cv
cp
f
351.223 12.789 mo
351.219 13.027 351.168 13.203 351.063 13.316 cv
350.953 13.434 350.805 13.492 350.625 13.488 cv
346.391 13.488 li
346.387 13.789 346.422 14.059 346.496 14.297 cv
346.563 14.539 346.676 14.742 346.832 14.91 cv
346.984 15.082 347.18 15.211 347.422 15.297 cv
347.66 15.387 347.949 15.43 348.293 15.43 cv
348.633 15.43 348.934 15.406 349.195 15.355 cv
349.453 15.309 349.68 15.254 349.871 15.191 cv
350.059 15.133 350.215 15.078 350.344 15.027 cv
350.465 14.98 350.566 14.957 350.648 14.953 cv
350.691 14.957 350.73 14.965 350.766 14.98 cv
350.793 15 350.82 15.031 350.84 15.078 cv
350.859 15.125 350.871 15.191 350.883 15.277 cv
350.887 15.363 350.891 15.473 350.895 15.602 cv
350.891 15.719 350.891 15.816 350.887 15.895 cv
350.879 15.977 350.871 16.043 350.863 16.098 cv
350.852 16.156 350.836 16.207 350.816 16.242 cv
350.797 16.285 350.77 16.32 350.738 16.355 cv
350.703 16.395 350.609 16.445 350.461 16.504 cv
350.305 16.57 350.113 16.633 349.883 16.687 cv
349.645 16.75 349.375 16.797 349.078 16.844 cv
348.773 16.883 348.453 16.906 348.113 16.91 cv
347.492 16.906 346.949 16.832 346.488 16.676 cv
346.02 16.523 345.633 16.285 345.324 15.969 cv
345.008 15.652 344.773 15.254 344.625 14.77 cv
344.469 14.289 344.395 13.723 344.398 13.066 cv
344.395 12.453 344.473 11.895 344.637 11.398 cv
344.793 10.902 345.027 10.484 345.34 10.137 cv
345.645 9.79303 346.02 9.52698 346.457 9.34399 cv
346.895 9.164 347.387 9.07397 347.941 9.07001 cv
348.52 9.07397 349.02 9.15997 349.434 9.328 cv
349.848 9.50403 350.184 9.742 350.449 10.043 cv
350.711 10.348 350.906 10.707 351.035 11.121 cv
351.156 11.539 351.219 11.988 351.223 12.477 cv
cp
349.32 12.227 mo
349.332 11.676 349.223 11.242 348.988 10.93 cv
348.754 10.617 348.387 10.461 347.895 10.457 cv
347.645 10.461 347.43 10.508 347.246 10.598 cv
347.059 10.695 346.906 10.82 346.785 10.977 cv
346.66 11.137 346.566 11.324 346.504 11.539 cv
346.438 11.754 346.398 11.984 346.391 12.227 cv
cp
f
358.754 16.488 mo
358.75 16.566 358.723 16.621 358.676 16.66 cv
358.621 16.703 358.539 16.73 358.43 16.75 cv
358.313 16.766 358.148 16.777 357.934 16.777 cv
357.695 16.777 357.523 16.766 357.422 16.75 cv
357.313 16.73 357.238 16.703 357.199 16.66 cv
357.152 16.621 357.133 16.566 357.133 16.488 cv
357.133 15.937 li
356.844 16.246 356.516 16.484 356.152 16.652 cv
355.785 16.824 355.379 16.906 354.934 16.91 cv
354.563 16.906 354.223 16.859 353.914 16.766 cv
353.605 16.672 353.34 16.531 353.113 16.336 cv
352.887 16.148 352.711 15.914 352.586 15.633 cv
352.461 15.355 352.398 15.027 352.402 14.648 cv
352.398 14.25 352.477 13.898 352.637 13.594 cv
352.793 13.297 353.031 13.051 353.348 12.855 cv
353.66 12.664 354.051 12.52 354.52 12.422 cv
354.988 12.332 355.531 12.285 356.148 12.281 cv
356.828 12.281 li
356.828 11.859 li
356.828 11.645 356.805 11.453 356.762 11.289 cv
356.715 11.129 356.641 10.992 356.543 10.879 cv
356.438 10.773 356.305 10.691 356.137 10.637 cv
355.965 10.586 355.754 10.562 355.512 10.559 cv
355.18 10.562 354.887 10.598 354.633 10.668 cv
354.371 10.742 354.145 10.824 353.949 10.91 cv
353.75 11.004 353.586 11.082 353.457 11.152 cv
353.32 11.227 353.211 11.266 353.133 11.262 cv
353.07 11.266 353.02 11.246 352.98 11.207 cv
352.934 11.172 352.898 11.121 352.871 11.051 cv
352.84 10.988 352.816 10.902 352.805 10.801 cv
352.785 10.703 352.777 10.594 352.781 10.473 cv
352.777 10.312 352.793 10.187 352.82 10.09 cv
352.844 10 352.891 9.914 352.969 9.836 cv
353.039 9.76202 353.168 9.67999 353.352 9.59003 cv
353.531 9.5 353.742 9.414 353.988 9.336 cv
354.23 9.258 354.5 9.19501 354.789 9.14502 cv
355.078 9.09802 355.375 9.07397 355.684 9.07001 cv
356.227 9.07397 356.691 9.125 357.078 9.22998 cv
357.465 9.34003 357.785 9.50403 358.035 9.72302 cv
358.285 9.94098 358.465 10.227 358.582 10.574 cv
358.691 10.926 358.75 11.34 358.754 11.812 cv
cp
356.828 13.512 mo
356.078 13.512 li
355.762 13.516 355.492 13.539 355.27 13.582 cv
355.043 13.633 354.859 13.703 354.723 13.793 cv
354.578 13.891 354.477 14.004 354.414 14.133 cv
354.348 14.27 354.313 14.418 354.316 14.586 cv
354.313 14.879 354.406 15.109 354.594 15.273 cv
354.777 15.441 355.035 15.523 355.363 15.523 cv
355.637 15.523 355.887 15.453 356.121 15.312 cv
356.348 15.172 356.586 14.969 356.828 14.695 cv
cp
f
367.34 16.465 mo
367.336 16.527 367.324 16.574 367.301 16.609 cv
367.273 16.652 367.227 16.684 367.168 16.707 cv
367.102 16.73 367.02 16.746 366.914 16.762 cv
366.809 16.77 366.676 16.777 366.523 16.777 cv
366.352 16.777 366.219 16.77 366.117 16.762 cv
366.012 16.746 365.926 16.73 365.863 16.707 cv
365.797 16.684 365.75 16.652 365.723 16.609 cv
365.691 16.574 365.676 16.527 365.68 16.465 cv
365.68 15.695 li
365.32 16.082 364.945 16.379 364.555 16.59 cv
364.156 16.801 363.723 16.906 363.25 16.91 cv
362.715 16.906 362.266 16.805 361.902 16.602 cv
361.535 16.398 361.238 16.125 361.008 15.773 cv
360.773 15.43 360.605 15.023 360.504 14.555 cv
360.402 14.094 360.352 13.602 360.352 13.082 cv
360.352 12.469 360.414 11.914 360.547 11.418 cv
360.676 10.926 360.871 10.504 361.129 10.156 cv
361.383 9.80902 361.699 9.54303 362.078 9.35199 cv
362.457 9.16803 362.895 9.07397 363.391 9.07001 cv
363.777 9.07397 364.129 9.15198 364.449 9.30902 cv
364.762 9.46899 365.078 9.69897 365.391 10.004 cv
365.391 6.242 li
365.391 6.19098 365.402 6.14502 365.434 6.10199 cv
365.457 6.06201 365.512 6.02698 365.59 5.99597 cv
365.664 5.96899 365.762 5.94897 365.891 5.92999 cv
366.012 5.91803 366.172 5.90997 366.367 5.90601 cv
366.559 5.90997 366.715 5.91803 366.84 5.92999 cv
366.961 5.94897 367.063 5.96899 367.137 5.99597 cv
367.207 6.02698 367.258 6.06201 367.293 6.10199 cv
367.32 6.14502 367.336 6.19098 367.34 6.242 cv
cp
365.391 11.82 mo
365.109 11.469 364.84 11.199 364.586 11.012 cv
364.324 10.824 364.055 10.73 363.777 10.73 cv
363.523 10.73 363.305 10.797 363.121 10.922 cv
362.934 11.055 362.785 11.223 362.676 11.434 cv
362.563 11.645 362.48 11.883 362.426 12.145 cv
362.371 12.41 362.344 12.68 362.344 12.949 cv
362.344 13.246 362.367 13.527 362.414 13.801 cv
362.461 14.078 362.535 14.324 362.645 14.539 cv
362.746 14.754 362.891 14.926 363.07 15.055 cv
363.246 15.187 363.469 15.254 363.738 15.25 cv
363.871 15.254 364 15.234 364.133 15.191 cv
364.258 15.156 364.391 15.094 364.523 15 cv
364.656 14.914 364.793 14.797 364.934 14.652 cv
365.074 14.512 365.227 14.336 365.391 14.129 cv
cp
f
374.16 14.5 mo
374.156 14.898 374.082 15.246 373.938 15.547 cv
373.789 15.848 373.582 16.102 373.313 16.301 cv
373.039 16.508 372.719 16.656 372.352 16.758 cv
371.984 16.855 371.582 16.906 371.152 16.91 cv
370.887 16.906 370.641 16.887 370.406 16.852 cv
370.172 16.809 369.961 16.762 369.773 16.703 cv
369.586 16.645 369.43 16.582 369.305 16.52 cv
369.18 16.457 369.086 16.398 369.031 16.344 cv
368.973 16.289 368.93 16.207 368.902 16.09 cv
368.867 15.977 368.852 15.801 368.855 15.57 cv
368.852 15.422 368.859 15.301 368.871 15.207 cv
368.879 15.117 368.895 15.047 368.918 14.988 cv
368.938 14.937 368.961 14.898 368.996 14.879 cv
369.023 14.863 369.063 14.855 369.109 14.852 cv
369.164 14.855 369.25 14.887 369.363 14.949 cv
369.473 15.016 369.609 15.09 369.781 15.164 cv
369.945 15.246 370.141 15.316 370.359 15.383 cv
370.578 15.453 370.828 15.488 371.113 15.484 cv
371.289 15.488 371.445 15.469 371.586 15.43 cv
371.719 15.395 371.84 15.344 371.945 15.273 cv
372.043 15.207 372.117 15.121 372.172 15.016 cv
372.219 14.914 372.246 14.793 372.25 14.656 cv
372.246 14.5 372.199 14.367 372.105 14.258 cv
372.012 14.148 371.883 14.051 371.727 13.965 cv
371.563 13.883 371.383 13.805 371.188 13.73 cv
370.984 13.66 370.781 13.582 370.57 13.488 cv
370.359 13.402 370.152 13.301 369.957 13.184 cv
369.754 13.074 369.574 12.934 369.418 12.766 cv
369.254 12.602 369.129 12.402 369.035 12.164 cv
368.941 11.934 368.895 11.652 368.895 11.32 cv
368.895 10.992 368.957 10.687 369.086 10.406 cv
369.215 10.133 369.402 9.89502 369.648 9.69501 cv
369.891 9.5 370.188 9.34802 370.539 9.23401 cv
370.887 9.12903 371.281 9.07397 371.723 9.07001 cv
371.938 9.07397 372.148 9.09003 372.355 9.117 cv
372.559 9.15198 372.746 9.19098 372.914 9.23401 cv
373.078 9.28497 373.219 9.336 373.336 9.38702 cv
373.449 9.44501 373.531 9.492 373.582 9.52698 cv
373.629 9.57001 373.664 9.60901 373.688 9.64502 cv
373.707 9.68701 373.719 9.73401 373.73 9.78497 cv
373.738 9.84003 373.75 9.90601 373.758 9.98401 cv
373.766 10.07 373.77 10.168 373.77 10.285 cv
373.77 10.426 373.766 10.543 373.758 10.629 cv
373.75 10.723 373.734 10.793 373.719 10.84 cv
373.699 10.895 373.676 10.93 373.648 10.945 cv
373.613 10.969 373.578 10.977 373.539 10.973 cv
373.488 10.977 373.414 10.949 373.32 10.891 cv
373.219 10.84 373.098 10.781 372.949 10.715 cv
372.801 10.656 372.629 10.598 372.434 10.539 cv
372.238 10.488 372.016 10.461 371.77 10.457 cv
371.59 10.461 371.438 10.48 371.309 10.512 cv
371.176 10.551 371.066 10.602 370.988 10.668 cv
370.902 10.738 370.84 10.816 370.801 10.906 cv
370.754 11 370.734 11.098 370.738 11.199 cv
370.734 11.359 370.785 11.496 370.887 11.602 cv
370.984 11.715 371.113 11.809 371.277 11.891 cv
371.438 11.977 371.621 12.055 371.828 12.125 cv
372.031 12.199 372.238 12.281 372.449 12.363 cv
372.656 12.453 372.863 12.551 373.074 12.664 cv
373.277 12.777 373.461 12.918 373.621 13.082 cv
373.781 13.25 373.91 13.449 374.012 13.68 cv
374.105 13.914 374.156 14.187 374.16 14.5 cv
cp
f
382.977 12.812 mo
382.973 13.113 382.945 13.324 382.891 13.441 cv
382.832 13.566 382.742 13.625 382.617 13.621 cv
379.375 13.621 li
379.246 13.625 379.152 13.562 379.098 13.437 cv
379.035 13.316 379.008 13.109 379.012 12.812 cv
379.008 12.523 379.035 12.316 379.098 12.195 cv
379.152 12.078 379.246 12.02 379.375 12.016 cv
382.617 12.016 li
382.68 12.02 382.73 12.031 382.777 12.055 cv
382.816 12.082 382.855 12.129 382.891 12.187 cv
382.918 12.254 382.941 12.336 382.957 12.437 cv
382.969 12.543 382.973 12.668 382.977 12.812 cv
cp
f
393.711 15.875 mo
393.707 16.031 393.703 16.164 393.691 16.266 cv
393.676 16.375 393.656 16.461 393.633 16.531 cv
393.605 16.602 393.57 16.652 393.535 16.684 cv
393.492 16.715 393.449 16.73 393.398 16.73 cv
388.777 16.73 li
388.602 16.73 388.457 16.68 388.344 16.578 cv
388.223 16.477 388.164 16.312 388.168 16.082 cv
388.168 6.92603 li
388.164 6.87903 388.184 6.83197 388.219 6.78497 cv
388.25 6.74597 388.305 6.711 388.387 6.68402 cv
388.461 6.65997 388.566 6.64099 388.703 6.62097 cv
388.832 6.60901 388.996 6.60199 389.199 6.59802 cv
389.395 6.60199 389.563 6.60901 389.695 6.62097 cv
389.824 6.64099 389.926 6.65997 390.008 6.68402 cv
390.082 6.711 390.141 6.74597 390.176 6.78497 cv
390.207 6.83197 390.223 6.87903 390.227 6.92603 cv
390.227 15.039 li
393.398 15.039 li
393.449 15.043 393.492 15.059 393.535 15.082 cv
393.57 15.113 393.605 15.16 393.633 15.223 cv
393.656 15.293 393.676 15.379 393.691 15.48 cv
393.703 15.59 393.707 15.719 393.711 15.875 cv
cp
f
401.832 12.918 mo
401.828 13.516 401.75 14.059 401.598 14.543 cv
401.438 15.035 401.203 15.453 400.887 15.805 cv
400.57 16.156 400.172 16.43 399.695 16.621 cv
399.215 16.812 398.656 16.906 398.02 16.91 cv
397.398 16.906 396.859 16.824 396.406 16.652 cv
395.945 16.484 395.566 16.234 395.27 15.906 cv
394.965 15.582 394.742 15.18 394.598 14.699 cv
394.453 14.223 394.383 13.676 394.383 13.059 cv
394.383 12.469 394.461 11.93 394.617 11.437 cv
394.773 10.949 395.012 10.527 395.332 10.176 cv
395.648 9.828 396.043 9.55499 396.52 9.35901 cv
396.992 9.16803 397.551 9.07397 398.191 9.07001 cv
398.816 9.07397 399.355 9.15601 399.813 9.32397 cv
400.27 9.49597 400.648 9.74597 400.945 10.07 cv
401.242 10.398 401.465 10.801 401.613 11.277 cv
401.758 11.758 401.828 12.305 401.832 12.918 cv
cp
399.813 12.996 mo
399.809 12.66 399.781 12.344 399.73 12.051 cv
399.672 11.766 399.578 11.516 399.453 11.301 cv
399.32 11.09 399.148 10.922 398.938 10.801 cv
398.719 10.684 398.449 10.625 398.121 10.621 cv
397.832 10.625 397.578 10.68 397.359 10.781 cv
397.141 10.891 396.961 11.047 396.82 11.25 cv
396.68 11.457 396.574 11.703 396.504 11.988 cv
396.434 12.281 396.398 12.609 396.398 12.973 cv
396.398 13.32 396.426 13.637 396.484 13.922 cv
396.539 14.215 396.633 14.465 396.762 14.676 cv
396.887 14.891 397.059 15.055 397.281 15.168 cv
397.496 15.289 397.766 15.348 398.09 15.344 cv
398.383 15.348 398.641 15.293 398.863 15.184 cv
399.078 15.078 399.258 14.926 399.398 14.719 cv
399.539 14.52 399.641 14.273 399.711 13.984 cv
399.773 13.699 399.809 13.371 399.813 12.996 cv
cp
f
408.648 15.359 mo
408.645 15.496 408.641 15.609 408.637 15.699 cv
408.625 15.793 408.617 15.871 408.605 15.93 cv
408.59 15.992 408.574 16.043 408.559 16.078 cv
408.539 16.121 408.496 16.168 408.438 16.227 cv
408.371 16.289 408.266 16.363 408.117 16.445 cv
407.965 16.535 407.793 16.613 407.602 16.676 cv
407.41 16.746 407.203 16.797 406.977 16.84 cv
406.75 16.879 406.516 16.898 406.281 16.902 cv
405.742 16.898 405.27 16.82 404.855 16.652 cv
404.441 16.488 404.094 16.242 403.816 15.918 cv
403.531 15.594 403.32 15.199 403.18 14.73 cv
403.039 14.266 402.969 13.727 402.969 13.121 cv
402.969 12.426 403.055 11.828 403.227 11.32 cv
403.398 10.816 403.641 10.395 403.957 10.062 cv
404.266 9.72998 404.633 9.48401 405.063 9.32001 cv
405.484 9.15997 405.953 9.078 406.465 9.078 cv
406.672 9.078 406.875 9.09802 407.078 9.133 cv
407.273 9.172 407.461 9.22302 407.637 9.28101 cv
407.809 9.34802 407.965 9.41803 408.105 9.492 cv
408.242 9.57397 408.34 9.64099 408.398 9.69501 cv
408.453 9.75403 408.492 9.80103 408.52 9.836 cv
408.539 9.87903 408.559 9.92999 408.574 9.98798 cv
408.586 10.055 408.598 10.133 408.605 10.219 cv
408.613 10.312 408.617 10.422 408.617 10.551 cv
408.617 10.855 408.59 11.066 408.539 11.187 cv
408.484 11.309 408.418 11.371 408.336 11.367 cv
408.246 11.371 408.152 11.336 408.055 11.262 cv
407.953 11.191 407.836 11.109 407.703 11.02 cv
407.57 10.934 407.41 10.852 407.223 10.777 cv
407.035 10.707 406.809 10.672 406.551 10.668 cv
406.039 10.672 405.652 10.867 405.383 11.258 cv
405.109 11.648 404.973 12.223 404.977 12.98 cv
404.973 13.355 405.008 13.687 405.078 13.973 cv
405.145 14.258 405.242 14.496 405.379 14.687 cv
405.508 14.883 405.676 15.027 405.879 15.121 cv
406.078 15.219 406.309 15.266 406.574 15.266 cv
406.84 15.266 407.074 15.227 407.273 15.145 cv
407.465 15.066 407.633 14.977 407.781 14.875 cv
407.922 14.777 408.047 14.687 408.148 14.605 cv
408.246 14.527 408.328 14.488 408.398 14.484 cv
408.441 14.488 408.48 14.5 408.516 14.523 cv
408.543 14.551 408.566 14.598 408.59 14.668 cv
408.605 14.738 408.621 14.828 408.633 14.937 cv
408.641 15.047 408.645 15.187 408.648 15.359 cv
cp
f
415.938 16.488 mo
415.934 16.566 415.906 16.621 415.859 16.66 cv
415.805 16.703 415.723 16.73 415.613 16.75 cv
415.496 16.766 415.332 16.777 415.117 16.777 cv
414.879 16.777 414.707 16.766 414.605 16.75 cv
414.496 16.73 414.422 16.703 414.383 16.66 cv
414.336 16.621 414.316 16.566 414.316 16.488 cv
414.316 15.937 li
414.027 16.246 413.699 16.484 413.336 16.652 cv
412.969 16.824 412.563 16.906 412.117 16.91 cv
411.746 16.906 411.406 16.859 411.098 16.766 cv
410.789 16.672 410.523 16.531 410.297 16.336 cv
410.07 16.148 409.895 15.914 409.77 15.633 cv
409.645 15.355 409.582 15.027 409.586 14.648 cv
409.582 14.25 409.66 13.898 409.82 13.594 cv
409.977 13.297 410.215 13.051 410.531 12.855 cv
410.844 12.664 411.234 12.52 411.703 12.422 cv
412.172 12.332 412.715 12.285 413.332 12.281 cv
414.012 12.281 li
414.012 11.859 li
414.012 11.645 413.988 11.453 413.945 11.289 cv
413.898 11.129 413.824 10.992 413.727 10.879 cv
413.621 10.773 413.488 10.691 413.32 10.637 cv
413.148 10.586 412.938 10.562 412.695 10.559 cv
412.363 10.562 412.07 10.598 411.816 10.668 cv
411.555 10.742 411.328 10.824 411.133 10.91 cv
410.934 11.004 410.77 11.082 410.641 11.152 cv
410.504 11.227 410.395 11.266 410.316 11.262 cv
410.254 11.266 410.203 11.246 410.164 11.207 cv
410.117 11.172 410.082 11.121 410.055 11.051 cv
410.023 10.988 410 10.902 409.988 10.801 cv
409.969 10.703 409.961 10.594 409.965 10.473 cv
409.961 10.312 409.977 10.187 410.004 10.09 cv
410.027 10 410.074 9.914 410.152 9.836 cv
410.223 9.76202 410.352 9.67999 410.535 9.59003 cv
410.715 9.5 410.926 9.414 411.172 9.336 cv
411.414 9.258 411.684 9.19501 411.973 9.14502 cv
412.262 9.09802 412.559 9.07397 412.867 9.07001 cv
413.41 9.07397 413.875 9.125 414.262 9.22998 cv
414.648 9.34003 414.969 9.50403 415.219 9.72302 cv
415.469 9.94098 415.648 10.227 415.766 10.574 cv
415.875 10.926 415.934 11.34 415.938 11.812 cv
cp
414.012 13.512 mo
413.262 13.512 li
412.945 13.516 412.676 13.539 412.453 13.582 cv
412.227 13.633 412.043 13.703 411.906 13.793 cv
411.762 13.891 411.66 14.004 411.598 14.133 cv
411.531 14.27 411.496 14.418 411.5 14.586 cv
411.496 14.879 411.59 15.109 411.777 15.273 cv
411.961 15.441 412.219 15.523 412.547 15.523 cv
412.82 15.523 413.07 15.453 413.305 15.312 cv
413.531 15.172 413.77 14.969 414.012 14.695 cv
cp
f
419.859 16.465 mo
419.855 16.52 419.84 16.562 419.813 16.602 cv
419.777 16.641 419.723 16.676 419.652 16.699 cv
419.574 16.727 419.477 16.742 419.352 16.758 cv
419.227 16.77 419.066 16.777 418.879 16.777 cv
418.684 16.777 418.527 16.77 418.402 16.758 cv
418.277 16.742 418.176 16.727 418.102 16.699 cv
418.023 16.676 417.969 16.641 417.941 16.602 cv
417.906 16.562 417.891 16.52 417.895 16.465 cv
417.895 6.21899 li
417.891 6.16803 417.906 6.12097 417.941 6.078 cv
417.969 6.039 418.023 6.00403 418.102 5.97302 cv
418.176 5.94501 418.277 5.92603 418.402 5.90601 cv
418.527 5.89502 418.684 5.88702 418.879 5.883 cv
419.066 5.88702 419.227 5.89502 419.352 5.90601 cv
419.477 5.92603 419.574 5.94501 419.652 5.97302 cv
419.723 6.00403 419.777 6.039 419.813 6.078 cv
419.84 6.12097 419.855 6.16803 419.859 6.21899 cv
cp
f
437.219 16.449 mo
437.215 16.504 437.203 16.551 437.176 16.59 cv
437.145 16.633 437.09 16.668 437.02 16.691 cv
436.941 16.719 436.844 16.738 436.719 16.754 cv
436.594 16.77 436.434 16.777 436.242 16.777 cv
436.055 16.777 435.898 16.77 435.777 16.754 cv
435.648 16.738 435.551 16.719 435.48 16.691 cv
435.406 16.668 435.355 16.633 435.324 16.59 cv
435.293 16.551 435.277 16.504 435.277 16.449 cv
435.277 8.242 li
435.262 8.242 li
432.34 16.441 li
432.316 16.512 432.281 16.566 432.238 16.609 cv
432.188 16.656 432.125 16.691 432.047 16.715 cv
431.965 16.742 431.863 16.758 431.738 16.766 cv
431.613 16.773 431.461 16.777 431.289 16.777 cv
431.109 16.777 430.961 16.77 430.836 16.758 cv
430.711 16.742 430.605 16.723 430.527 16.695 cv
430.441 16.668 430.379 16.633 430.336 16.59 cv
430.285 16.551 430.254 16.504 430.242 16.441 cv
427.422 8.242 li
427.406 8.242 li
427.406 16.449 li
427.402 16.504 427.387 16.551 427.363 16.59 cv
427.332 16.633 427.281 16.668 427.203 16.691 cv
427.125 16.719 427.023 16.738 426.902 16.754 cv
426.777 16.77 426.621 16.777 426.434 16.777 cv
426.242 16.777 426.086 16.77 425.965 16.754 cv
425.836 16.738 425.734 16.719 425.664 16.691 cv
425.586 16.668 425.535 16.633 425.508 16.59 cv
425.477 16.551 425.461 16.504 425.465 16.449 cv
425.465 7.46503 li
425.461 7.203 425.531 7 425.676 6.85498 cv
425.813 6.71899 426 6.64801 426.238 6.64502 cv
427.578 6.64502 li
427.816 6.64801 428.02 6.66803 428.191 6.703 cv
428.359 6.74597 428.508 6.80902 428.637 6.89801 cv
428.758 6.992 428.863 7.11298 428.949 7.258 cv
429.031 7.40997 429.102 7.59399 429.168 7.80902 cv
431.352 13.816 li
431.383 13.816 li
433.641 7.82397 li
433.707 7.60498 433.781 7.422 433.863 7.27002 cv
433.941 7.12097 434.035 7 434.145 6.90198 cv
434.25 6.81201 434.375 6.74597 434.52 6.703 cv
434.664 6.66803 434.832 6.64801 435.027 6.64502 cv
436.406 6.64502 li
436.543 6.64801 436.664 6.664 436.77 6.69897 cv
436.867 6.73798 436.949 6.79303 437.02 6.85901 cv
437.082 6.93402 437.133 7.02002 437.168 7.117 cv
437.199 7.22302 437.215 7.34003 437.219 7.46503 cv
cp
f
446.328 12.918 mo
446.324 13.516 446.246 14.059 446.094 14.543 cv
445.934 15.035 445.699 15.453 445.383 15.805 cv
445.066 16.156 444.668 16.43 444.191 16.621 cv
443.711 16.812 443.152 16.906 442.516 16.91 cv
441.895 16.906 441.355 16.824 440.902 16.652 cv
440.441 16.484 440.063 16.234 439.766 15.906 cv
439.461 15.582 439.238 15.18 439.094 14.699 cv
438.949 14.223 438.879 13.676 438.879 13.059 cv
438.879 12.469 438.957 11.93 439.113 11.437 cv
439.27 10.949 439.508 10.527 439.828 10.176 cv
440.145 9.828 440.539 9.55499 441.016 9.35901 cv
441.488 9.16803 442.047 9.07397 442.688 9.07001 cv
443.313 9.07397 443.852 9.15601 444.309 9.32397 cv
444.766 9.49597 445.145 9.74597 445.441 10.07 cv
445.738 10.398 445.961 10.801 446.109 11.277 cv
446.254 11.758 446.324 12.305 446.328 12.918 cv
cp
444.309 12.996 mo
444.305 12.66 444.277 12.344 444.227 12.051 cv
444.168 11.766 444.074 11.516 443.949 11.301 cv
443.816 11.09 443.645 10.922 443.434 10.801 cv
443.215 10.684 442.945 10.625 442.617 10.621 cv
442.328 10.625 442.074 10.68 441.855 10.781 cv
441.637 10.891 441.457 11.047 441.316 11.25 cv
441.176 11.457 441.07 11.703 441 11.988 cv
440.93 12.281 440.895 12.609 440.895 12.973 cv
440.895 13.32 440.922 13.637 440.98 13.922 cv
441.035 14.215 441.129 14.465 441.258 14.676 cv
441.383 14.891 441.555 15.055 441.777 15.168 cv
441.992 15.289 442.262 15.348 442.586 15.344 cv
442.879 15.348 443.137 15.293 443.359 15.184 cv
443.574 15.078 443.754 14.926 443.895 14.719 cv
444.035 14.52 444.137 14.273 444.207 13.984 cv
444.27 13.699 444.305 13.371 444.309 12.996 cv
cp
f
454.477 16.465 mo
454.473 16.527 454.461 16.574 454.438 16.609 cv
454.41 16.652 454.363 16.684 454.305 16.707 cv
454.238 16.73 454.156 16.746 454.051 16.762 cv
453.945 16.77 453.813 16.777 453.66 16.777 cv
453.488 16.777 453.355 16.77 453.254 16.762 cv
453.148 16.746 453.063 16.73 453 16.707 cv
452.934 16.684 452.887 16.652 452.859 16.609 cv
452.828 16.574 452.813 16.527 452.816 16.465 cv
452.816 15.695 li
452.457 16.082 452.082 16.379 451.691 16.59 cv
451.293 16.801 450.859 16.906 450.387 16.91 cv
449.852 16.906 449.402 16.805 449.039 16.602 cv
448.672 16.398 448.375 16.125 448.145 15.773 cv
447.91 15.43 447.742 15.023 447.641 14.555 cv
447.539 14.094 447.488 13.602 447.488 13.082 cv
447.488 12.469 447.551 11.914 447.684 11.418 cv
447.813 10.926 448.008 10.504 448.266 10.156 cv
448.52 9.80902 448.836 9.54303 449.215 9.35199 cv
449.594 9.16803 450.031 9.07397 450.527 9.07001 cv
450.914 9.07397 451.266 9.15198 451.586 9.30902 cv
451.898 9.46899 452.215 9.69897 452.527 10.004 cv
452.527 6.242 li
452.527 6.19098 452.539 6.14502 452.57 6.10199 cv
452.594 6.06201 452.648 6.02698 452.727 5.99597 cv
452.801 5.96899 452.898 5.94897 453.027 5.92999 cv
453.148 5.91803 453.309 5.90997 453.504 5.90601 cv
453.695 5.90997 453.852 5.91803 453.977 5.92999 cv
454.098 5.94897 454.199 5.96899 454.273 5.99597 cv
454.344 6.02698 454.395 6.06201 454.43 6.10199 cv
454.457 6.14502 454.473 6.19098 454.477 6.242 cv
cp
452.527 11.82 mo
452.246 11.469 451.977 11.199 451.723 11.012 cv
451.461 10.824 451.191 10.73 450.914 10.73 cv
450.66 10.73 450.441 10.797 450.258 10.922 cv
450.07 11.055 449.922 11.223 449.813 11.434 cv
449.699 11.645 449.617 11.883 449.563 12.145 cv
449.508 12.41 449.48 12.68 449.48 12.949 cv
449.48 13.246 449.504 13.527 449.551 13.801 cv
449.598 14.078 449.672 14.324 449.781 14.539 cv
449.883 14.754 450.027 14.926 450.207 15.055 cv
450.383 15.187 450.605 15.254 450.875 15.25 cv
451.008 15.254 451.137 15.234 451.27 15.191 cv
451.395 15.156 451.527 15.094 451.66 15 cv
451.793 14.914 451.93 14.797 452.07 14.652 cv
452.211 14.512 452.363 14.336 452.527 14.129 cv
cp
f
462.875 12.789 mo
462.871 13.027 462.82 13.203 462.715 13.316 cv
462.605 13.434 462.457 13.492 462.277 13.488 cv
458.043 13.488 li
458.039 13.789 458.074 14.059 458.148 14.297 cv
458.215 14.539 458.328 14.742 458.484 14.91 cv
458.637 15.082 458.832 15.211 459.074 15.297 cv
459.313 15.387 459.602 15.43 459.945 15.43 cv
460.285 15.43 460.586 15.406 460.848 15.355 cv
461.105 15.309 461.332 15.254 461.523 15.191 cv
461.711 15.133 461.867 15.078 461.996 15.027 cv
462.117 14.98 462.219 14.957 462.301 14.953 cv
462.344 14.957 462.383 14.965 462.418 14.98 cv
462.445 15 462.473 15.031 462.492 15.078 cv
462.512 15.125 462.523 15.191 462.535 15.277 cv
462.539 15.363 462.543 15.473 462.547 15.602 cv
462.543 15.719 462.543 15.816 462.539 15.895 cv
462.531 15.977 462.523 16.043 462.516 16.098 cv
462.504 16.156 462.488 16.207 462.469 16.242 cv
462.449 16.285 462.422 16.32 462.391 16.355 cv
462.355 16.395 462.262 16.445 462.113 16.504 cv
461.957 16.57 461.766 16.633 461.535 16.687 cv
461.297 16.75 461.027 16.797 460.73 16.844 cv
460.426 16.883 460.105 16.906 459.766 16.91 cv
459.145 16.906 458.602 16.832 458.141 16.676 cv
457.672 16.523 457.285 16.285 456.977 15.969 cv
456.66 15.652 456.426 15.254 456.277 14.77 cv
456.121 14.289 456.047 13.723 456.051 13.066 cv
456.047 12.453 456.125 11.895 456.289 11.398 cv
456.445 10.902 456.68 10.484 456.992 10.137 cv
457.297 9.79303 457.672 9.52698 458.109 9.34399 cv
458.547 9.164 459.039 9.07397 459.594 9.07001 cv
460.172 9.07397 460.672 9.15997 461.086 9.328 cv
461.5 9.50403 461.836 9.742 462.102 10.043 cv
462.363 10.348 462.559 10.707 462.688 11.121 cv
462.809 11.539 462.871 11.988 462.875 12.477 cv
cp
460.973 12.227 mo
460.984 11.676 460.875 11.242 460.641 10.93 cv
460.406 10.617 460.039 10.461 459.547 10.457 cv
459.297 10.461 459.082 10.508 458.898 10.598 cv
458.711 10.695 458.559 10.82 458.438 10.977 cv
458.313 11.137 458.219 11.324 458.156 11.539 cv
458.09 11.754 458.051 11.984 458.043 12.227 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
